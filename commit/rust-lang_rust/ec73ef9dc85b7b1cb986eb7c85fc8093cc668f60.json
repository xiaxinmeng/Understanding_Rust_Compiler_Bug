{"sha": "ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNzNlZjlkYzg1YjdiMWNiOTg2ZWI3Yzg1ZmM4MDkzY2M2NjhmNjA=", "commit": {"author": {"name": "Marc-Antoine Perennou", "email": "Marc-Antoine@Perennou.com", "date": "2017-02-09T09:11:36Z"}, "committer": {"name": "Marc-Antoine Perennou", "email": "Marc-Antoine@Perennou.com", "date": "2017-02-09T09:11:36Z"}, "message": "Merge branch 'master' of git://github.com/rust-lang/rust\n\n* 'master' of git://github.com/rust-lang/rust: (70 commits)\n  sanitizer-dylib: only run where std for x86_64-linux is available\n  travis: Fix build order of dist-x86-linux\n  fix the sanitizer-dylib test on non x86_64 linux hosts\n  dist-x86-linux: install newer kernel headers\n  enable sanitizers on build job that tests x86_64 linux\n  enable sanitizers on x86_64-linux releases\n  use helper function in the rebuild logic of the rustc_*san crates\n  build/test the sanitizers only when --enable-sanitizers is used\n  sanitizer support\n  Add missing urls on join_paths\n  Add test for #27433\n  Add more examples, get everything passing at last.\n  Remove some leftover makefiles.\n  Add more test for rustdoc --test\n  Rename manifest_version to manifest-version\n  reference: clarify #[cfg] section\n  Bump stable release date\n  rustbuild: Clean build/dist on `make clean`\n  Add missing urls for current_dir\n  review nits\n  ...", "tree": {"sha": "6485eee90adc1849cce9634efd79ea62f1a34789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6485eee90adc1849cce9634efd79ea62f1a34789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "html_url": "https://github.com/rust-lang/rust/commit/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/comments", "author": {"login": "Keruspe", "id": 222942, "node_id": "MDQ6VXNlcjIyMjk0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/222942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keruspe", "html_url": "https://github.com/Keruspe", "followers_url": "https://api.github.com/users/Keruspe/followers", "following_url": "https://api.github.com/users/Keruspe/following{/other_user}", "gists_url": "https://api.github.com/users/Keruspe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keruspe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keruspe/subscriptions", "organizations_url": "https://api.github.com/users/Keruspe/orgs", "repos_url": "https://api.github.com/users/Keruspe/repos", "events_url": "https://api.github.com/users/Keruspe/events{/privacy}", "received_events_url": "https://api.github.com/users/Keruspe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Keruspe", "id": 222942, "node_id": "MDQ6VXNlcjIyMjk0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/222942?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keruspe", "html_url": "https://github.com/Keruspe", "followers_url": "https://api.github.com/users/Keruspe/followers", "following_url": "https://api.github.com/users/Keruspe/following{/other_user}", "gists_url": "https://api.github.com/users/Keruspe/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keruspe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keruspe/subscriptions", "organizations_url": "https://api.github.com/users/Keruspe/orgs", "repos_url": "https://api.github.com/users/Keruspe/repos", "events_url": "https://api.github.com/users/Keruspe/events{/privacy}", "received_events_url": "https://api.github.com/users/Keruspe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4268872807cf8bc5c8c435794d1c82d21899d67b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4268872807cf8bc5c8c435794d1c82d21899d67b", "html_url": "https://github.com/rust-lang/rust/commit/4268872807cf8bc5c8c435794d1c82d21899d67b"}, {"sha": "fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd2f8a4536cb9b45abd72b8ff977ad48618602b3", "html_url": "https://github.com/rust-lang/rust/commit/fd2f8a4536cb9b45abd72b8ff977ad48618602b3"}], "stats": {"total": 18244, "additions": 7866, "deletions": 10378}, "files": [{"sha": "a776f1b1e1041f1973bcedc2ea311dfc9ec38d03", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -13,6 +13,7 @@ matrix:\n   include:\n     # Linux builders, all docker images\n     - env: IMAGE=android DEPLOY=1\n+    - env: IMAGE=armhf-gnu\n     - env: IMAGE=cross DEPLOY=1\n     - env: IMAGE=linux-tested-targets DEPLOY=1\n     - env: IMAGE=dist-arm-linux DEPLOY=1\n@@ -32,7 +33,6 @@ matrix:\n     - env: IMAGE=x86_64-gnu-aux\n     - env: IMAGE=x86_64-gnu-debug\n     - env: IMAGE=x86_64-gnu-nopt\n-    - env: IMAGE=x86_64-gnu-make\n     - env: IMAGE=x86_64-gnu-llvm-3.7 ALLOW_PR=1 RUST_BACKTRACE=1\n     - env: IMAGE=x86_64-gnu-distcheck\n     - env: IMAGE=x86_64-gnu-incremental\n@@ -56,13 +56,6 @@ matrix:\n       os: osx\n       osx_image: xcode8.2\n       install: *osx_install_sccache\n-    - env: >\n-        RUST_CHECK_TARGET=check\n-        RUST_CONFIGURE_ARGS=--build=x86_64-apple-darwin --disable-rustbuild\n-        SRC=.\n-      os: osx\n-      osx_image: xcode8.2\n-      install: *osx_install_sccache\n     - env: >\n         RUST_CHECK_TARGET=dist\n         RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended\""}, {"sha": "429996126f92b6dd7d13fcfd1b0ce5d224842e98", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -93,11 +93,6 @@ system internals, try asking in [`#rust-internals`][pound-rust-internals].\n \n [bootstrap]: https://github.com/rust-lang/rust/tree/master/src/bootstrap/\n \n-> **Note**: the build system was recently rewritten from a jungle of makefiles\n-> to the current incarnation you'll see in `src/bootstrap`. If you experience\n-> bugs you can temporarily revert back to the makefiles with\n-> `--disable-rustbuild` passed to `./configure`.\n-\n ### Configuration\n \n Before you can start building the compiler you need to configure the build for"}, {"sha": "8dbe24213905a64b195458e03045a374f047c7cf", "filename": "Makefile.in", "status": "removed", "additions": 0, "deletions": 297, "changes": 297, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,297 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# <help> \\(^o^)/\n-#\n-# Greetings, adventurer! The Rust Build System is at your service.\n-#\n-# Whether you want a genuine copy of `rustc`, access to the latest and\n-# most authoritative Rust documentation, or even to investigate the\n-# most intimate workings of the compiler itself, you've come to the\n-# right place. Let's see what's on the menu.\n-#\n-# Please note that most of these options only work if configure was\n-# run with --disable-rustbuild. For documentation on the new build\n-# system, see CONTRIBUTING.md.\n-#\n-# First, start with one of these build targets:\n-#\n-#   * all - The default. Build a complete, bootstrapped compiler.\n-#           `rustc` will be in `${target-triple}/stage2/bin/`. Run it\n-#           directly from the build directory if you like. This also\n-#           comes with docs in `doc/`.\n-#\n-#   * check - Run the complete test suite\n-#\n-#   * clean - Clean the build repository. It is advised to run this\n-#             command if you want to build Rust again, after an update\n-#             of the git repository.\n-#\n-#   * install - Install Rust. Note that installation is not necessary\n-#               to use the compiler.\n-#\n-#   * uninstall - Uninstall the binaries\n-#\n-# For tips on working with The Rust Build System, just:\n-#\n-#     run `make tips`\n-#\n-# Otherwise\n-#\n-#     run `make`\n-#\n-# </help>\n-#\n-# <tips>\n-#\n-# # The Rust Build System Tip Line\n-#\n-# There are a bazillion different targets you might want to build. Here\n-# are a few ideas.\n-#\n-#   * docs - Build gobs of HTML documentation and put it into `doc/`\n-#   * check-$(crate) - Test a crate, e.g. `check-std`\n-#   * check-ref - Run the language reference tests\n-#   * check-docs - Test the documentation examples\n-#   * check-stage$(stage)-$(crate) - Test a crate in a specific stage\n-#   * check-stage$(stage)-{rpass,rfail,cfail,rmake,...} - Run tests in src/test/\n-#   * check-stage1-T-$(target)-H-$(host) - Run cross-compiled-tests\n-#   * tidy - Basic style check, show highest rustc error code and\n-#     the status of language and lib features\n-#   * rustc-stage$(stage) - Only build up to a specific stage\n-#   * $host/stage1/bin/rustc - Only build stage1 rustc, not libstd. For further\n-#     information see \"Rust recipes for build system success\" below.\n-#\n-# Then mix in some of these environment variables to harness the\n-# ultimate power of The Rust Build System.\n-#\n-#   * `VERBOSE=1` - Print all commands. Use this to see what's going on.\n-#   * `RUSTFLAGS=...` - Add compiler flags to all `rustc` invocations\n-#   * `JEMALLOC_FLAGS=...` - Pass flags to jemalloc's configure script\n-#\n-#   * `TESTNAME=...` - Specify the name of tests to run\n-#   * `CHECK_IGNORED=1` - Run normally-ignored tests\n-#   * `PLEASE_BENCH=1` - Run crate benchmarks (enable `--bench` flag)\n-#\n-#   * `CFG_ENABLE_VALGRIND=1` - Run tests under valgrind\n-#   * `VALGRIND_COMPILE=1` - Run the compiler itself under valgrind\n-#                            (requires `CFG_ENABLE_VALGRIND`)\n-#\n-#   * `NO_REBUILD=1` - Don't rebootstrap when testing std\n-#                      (and possibly other crates)\n-#   * `NO_MKFILE_DEPS=1` - Don't rebuild for modified .mk files\n-#\n-#   * `SAVE_TEMPS=1` - Use `--save-temps` flag on all `rustc` invocations\n-#   * `ASM_COMMENTS=1` - Use `-Z asm-comments`\n-#   * `TIME_PASSES=1` - Use `-Z time-passes`\n-#   * `TIME_LLVM_PASSES=1` - Use `-Z time-llvm-passes`\n-#   * `TRACE=1` - Use `-Z trace`\n-#\n-# # Rust recipes for build system success\n-#\n-#     // Modifying libstd? Use this command to run unit tests just on your change\n-#     make check-stage1-std NO_REBUILD=1 NO_BENCH=1\n-#\n-#     // Modifying just rustc?\n-#     // Compile rustc+libstd once\n-#     make rustc-stage1\n-#     // From now on use this command to rebuild just rustc and reuse the previously built libstd\n-#     // $host is a target triple, eg. x86_64-unknown-linux-gnu\n-#     // The resulting binary is located at $host/stage1/bin/rustc.\n-#     // If there are any issues with libstd recompile it with the command above.\n-#     make $host/stage1/bin/rustc\n-#\n-#     // Added a run-pass test? Use this to test running your test\n-#     make check-stage1-rpass TESTNAME=my-shiny-new-test\n-#\n-#     // Having trouble figuring out which test is failing? Turn off parallel tests\n-#     make check-stage1-std RUST_TEST_THREADS=1\n-#\n-#     // To make debug!() and other logging calls visible, reconfigure:\n-#     ./configure --enable-debug-assertions\n-#     make ....\n-#\n-# If you really feel like getting your hands dirty, then:\n-#\n-#     run `make nitty-gritty`\n-#\n-# # Make command examples\n-#\n-# ## Docs linked commands\n-#\n-# * make check-stage1-rustdocck: Builds rustdoc. It has the advantage to compile\n-#                                quite quickly since we're only using stage1\n-#                                executables.\n-# * make doc/error-index.md: Gets all doc blocks from doc comments and error\n-#                            explanations to put them in a markdown file. You\n-#                            can then test them by running\n-#                            \"rustdoc --test error-index.md\".\n-#\n-# And of course, the wonderfully useful 'make tidy'! Always run it before opening a pull request to rust!\n-#\n-# </tips>\n-#\n-# <nitty-gritty>\n-#\n-# # The Rust Build System\n-#\n-# Gosh I wish there was something useful here (TODO).\n-#\n-# # An (old) explanation of how the build is structured:\n-#\n-# *Note: Hey, like, this is probably inaccurate, and is definitely\n-# an outdated and insufficient explanation of the remarkable\n-# Rust Build System.*\n-#\n-# There are multiple build stages (0-3) needed to verify that the\n-# compiler is properly self-hosting. Each stage is divided between\n-# 'host' artifacts and 'target' artifacts, where the stageN host\n-# compiler builds artifacts for 1 or more stageN target architectures.\n-# Once the stageN target compiler has been built for the host\n-# architecture it is promoted (copied) to a stageN+1 host artifact.\n-#\n-# The stage3 host compiler is a compiler that successfully builds\n-# itself and should (in theory) be bitwise identical to the stage2\n-# host compiler. The process is bootstrapped using a stage0 host\n-# compiler downloaded from a previous snapshot.\n-#\n-# At no time should stageN artifacts be interacting with artifacts\n-# from other stages. For consistency, we use the 'promotion' logic\n-# for all artifacts, even those that don't make sense on non-host\n-# architectures.\n-#\n-# The directory layout for a stage is intended to match the layout\n-# of the installed compiler, and looks like the following:\n-#\n-# stageN - this is the system root, corresponding to, e.g. /usr\n-#   bin - binaries compiled for the host\n-#   lib - libraries used by the host compiler\n-#     rustlib - rustc's own place to organize libraries\n-#       $(target) - target-specific artifacts\n-#         bin - binaries for target architectures\n-#         lib - libraries for target architectures\n-#\n-# A note about host libraries:\n-#\n-# The only libraries that get promoted to stageN/lib are those needed\n-# by rustc. In general, rust programs, even those compiled for the\n-# host architecture will use libraries from the target\n-# directories. This gives rust some freedom to experiment with how\n-# libraries are managed and versioned without polluting the common\n-# areas of the filesystem.\n-#\n-# General rust binaries may still live in the host bin directory; they\n-# will just link against the libraries in the target lib directory.\n-#\n-# Admittedly this is a little convoluted.\n-#\n-# If you find yourself working on the make infrastructure itself, and trying to\n-# find the value of a given variable after expansion, you can use:\n-#\n-# make print-VARIABLE_NAME\n-#\n-# To extract it\n-#\n-# </nitty-gritty>\n-#\n-\n-######################################################################\n-# Primary rules\n-######################################################################\n-\n-# Issue #9531: If you change the order of any of the following (or add\n-# new definitions), make sure definitions always precede their uses,\n-# especially for the dependency lists of recipes.\n-\n-# First, load the variables exported by the configure script\n-include config.mk\n-\n-# Just a few macros used everywhere\n-include $(CFG_SRC_DIR)mk/util.mk\n-# Reconfiguring when the makefiles or submodules change\n-include $(CFG_SRC_DIR)mk/reconfig.mk\n-# All crates and their dependencies\n-include $(CFG_SRC_DIR)mk/crates.mk\n-# Various bits of setup, common macros, and top-level rules\n-include $(CFG_SRC_DIR)mk/main.mk\n-# C and assembly components that are not LLVM\n-include $(CFG_SRC_DIR)mk/rt.mk\n-# Rules for crates in the target directories\n-include $(CFG_SRC_DIR)mk/target.mk\n-# Rules for crates in the host directories\n-include $(CFG_SRC_DIR)mk/host.mk\n-# Special rules for bootstrapping stage0\n-include $(CFG_SRC_DIR)mk/stage0.mk\n-# Rust-specific LLVM extensions\n-include $(CFG_SRC_DIR)mk/rustllvm.mk\n-# Documentation\n-include $(CFG_SRC_DIR)mk/docs.mk\n-# LLVM\n-include $(CFG_SRC_DIR)mk/llvm.mk\n-# Rules for installing debugger scripts\n-include $(CFG_SRC_DIR)mk/debuggers.mk\n-\n-######################################################################\n-# Secondary makefiles, conditionalized for speed\n-######################################################################\n-\n-# The test suite\n-ifneq ($(strip $(findstring check,$(MAKECMDGOALS)) \\\n-               $(findstring test,$(MAKECMDGOALS))  \\\n-               $(findstring tidy,$(MAKECMDGOALS))),)\n-  CFG_INFO := $(info cfg: including test rules)\n-  include $(CFG_SRC_DIR)mk/tests.mk\n-  include $(CFG_SRC_DIR)mk/grammar.mk\n-endif\n-\n-# Copy all the distributables to another directory for binary install\n-ifneq ($(strip $(findstring prepare,$(MAKECMDGOALS)) \\\n-               $(findstring dist,$(MAKECMDGOALS)) \\\n-               $(findstring install,$(MAKECMDGOALS))),)\n-  CFG_INFO := $(info cfg: including prepare rules)\n-  include $(CFG_SRC_DIR)mk/prepare.mk\n-endif\n-\n-# Source and binary distribution artifacts\n-ifneq ($(strip $(findstring dist,$(MAKECMDGOALS)) \\\n-               $(findstring install,$(MAKECMDGOALS)) \\\n-               $(findstring clean,$(MAKECMDGOALS))),)\n-  CFG_INFO := $(info cfg: including dist rules)\n-  include $(CFG_SRC_DIR)mk/dist.mk\n-endif\n-\n-# (Unix) Installation from the build directory\n-ifneq ($(findstring install,$(MAKECMDGOALS)),)\n-  CFG_INFO := $(info cfg: including install rules)\n-  include $(CFG_SRC_DIR)mk/install.mk\n-endif\n-\n-# Cleaning\n-ifneq ($(findstring clean,$(MAKECMDGOALS)),)\n-  CFG_INFO := $(info cfg: including clean rules)\n-  include $(CFG_SRC_DIR)mk/clean.mk\n-endif\n-\n-# CTAGS building\n-ifneq ($(strip $(findstring TAGS.emacs,$(MAKECMDGOALS)) \\\n-               $(findstring TAGS.vi,$(MAKECMDGOALS)) \\\n-               $(findstring TAGS.rustc.emacs,$(MAKECMDGOALS)) \\\n-               $(findstring TAGS.rustc.vi,$(MAKECMDGOALS))),)\n-  CFG_INFO := $(info cfg: including ctags rules)\n-  include $(CFG_SRC_DIR)mk/ctags.mk\n-endif\n-\n-.DEFAULT:\n-\t@echo\n-\t@echo \"======================================================\"\n-\t@echo \"== If you need help, run 'make help' or 'make tips' ==\"\n-\t@echo \"======================================================\"\n-\t@echo\n-\texit 1"}, {"sha": "2df1a83db81ffb3a5fa806a3ffd44863e582ae3b", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1,4 +1,4 @@\n-Version 1.15.1 (2017-02-07)\n+Version 1.15.1 (2017-02-08)\n ===========================\n \n * [Fix IntoIter::as_mut_slice's signature][39466]"}, {"sha": "2183d8da95f89bb40946449ca4d7f3c92fa0fa62", "filename": "appveyor.yml", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -15,11 +15,6 @@ environment:\n     SCRIPT: python x.py test --host i686-pc-windows-msvc --target i686-pc-windows-msvc && python x.py dist\n     DEPLOY: 1\n \n-  # MSVC makefiles\n-  - MSYS_BITS: 64\n-    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --disable-rustbuild\n-    RUST_CHECK_TARGET: check\n-\n   # MSVC cargotest\n   - MSYS_BITS: 64\n     NO_VENDOR: 1\n@@ -58,13 +53,6 @@ environment:\n     MINGW_DIR: mingw32\n     DEPLOY: 1\n \n-  - MSYS_BITS: 32\n-    RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --disable-rustbuild\n-    RUST_CHECK_TARGET: check\n-    MINGW_URL: https://s3.amazonaws.com/rust-lang-ci\n-    MINGW_ARCHIVE: i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z\n-    MINGW_DIR: mingw32\n-\n   - MSYS_BITS: 64\n     SCRIPT: python x.py test && python x.py dist\n     RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-extended"}, {"sha": "c751ad9731a7db9ff5690d67105e017260a882ce", "filename": "configure", "status": "modified", "additions": 4, "deletions": 856, "changes": 860, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/configure", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -649,6 +649,7 @@ opt codegen-tests 1 \"run the src/test/codegen tests\"\n opt option-checking 1 \"complain about unrecognized options in this configure script\"\n opt ninja 0 \"build LLVM using the Ninja generator (for MSVC, requires building in the correct environment)\"\n opt vendor 0 \"enable usage of vendored Rust crates\"\n+opt sanitizers 0 \"build the sanitizer runtimes (asan, lsan, msan, tsan)\"\n \n # Optimization and debugging options. These may be overridden by the release channel, etc.\n opt_nosave optimize 1 \"build optimized rust code\"\n@@ -684,6 +685,7 @@ valopt musl-root-arm \"\" \"arm-unknown-linux-musleabi install directory\"\n valopt musl-root-armhf \"\" \"arm-unknown-linux-musleabihf install directory\"\n valopt musl-root-armv7 \"\" \"armv7-unknown-linux-musleabihf install directory\"\n valopt extra-filename \"\" \"Additional data that is hashed and passed to the -C extra-filename flag\"\n+valopt qemu-armhf-rootfs \"\" \"rootfs in qemu testing, you probably don't want to use this\"\n \n if [ -e ${CFG_SRC_DIR}.git ]\n then\n@@ -993,191 +995,12 @@ then\n     putvar CFG_LOCAL_RUST_ROOT\n fi\n \n-# Force bitrig to build with clang; gcc doesn't like us there\n-if [ $CFG_OSTYPE = unknown-bitrig ]\n-then\n-    step_msg \"on Bitrig, forcing use of clang\"\n-    CFG_ENABLE_CLANG=1\n-fi\n-\n-# default gcc version under OpenBSD maybe too old, try using egcc, which is a\n-# gcc version from ports\n-if [ $CFG_OSTYPE = unknown-openbsd ]\n-then\n-    if [ $(\"$CFG_GCC\" --version 2>&1 | grep -c ' 4\\.[0-6]') -ne 0 ]; then\n-        step_msg \"older GCC found, try with egcc instead\"\n-\n-        # probe again but using egcc\n-        probe CFG_GCC egcc\n-\n-        # and use egcc/eg++ for CC/CXX too if it was found\n-        # (but user setting has priority)\n-        if [ -n \"$CFG_GCC\" ]; then\n-            CC=\"${CC:-egcc}\"\n-            CXX=\"${CXX:-eg++}\"\n-        fi\n-    fi\n-fi\n-\n-# OS X 10.9, gcc is actually clang. This can cause some confusion in the build\n-# system, so if we find that gcc is clang, we should just use clang directly.\n-if [ $CFG_OSTYPE = apple-darwin -a -z \"$CFG_ENABLE_CLANG\" ]\n-then\n-    CFG_OSX_GCC_VERSION=$(\"$CFG_GCC\" --version 2>&1 | grep \"Apple LLVM version\")\n-    if [ $? -eq 0 ]\n-    then\n-        step_msg \"on OS X >=10.9, forcing use of clang\"\n-        CFG_ENABLE_CLANG=1\n-    else\n-        if [ $(\"$CFG_GCC\" --version 2>&1 | grep -c ' 4\\.[0-6]') -ne 0 ]; then\n-            step_msg \"older GCC found, using clang instead\"\n-            CFG_ENABLE_CLANG=1\n-        else\n-            # on OS X, with xcode 5 and newer, certain developers may have\n-            # cc, gcc and g++ point to a  mixture of clang and gcc\n-            # if so, this will create very strange build errors\n-            # this last stanza is to detect some such problems and save the future rust\n-            # contributor some time solving that issue.\n-            # this detection could be generalized to other OSes aside from OS X\n-            # but the issue seems most likely to happen on OS X\n-\n-            chk_cc () {\n-                $1 --version 2> /dev/null | grep -q $2\n-            }\n-            # check that gcc, cc and g++ all point to the same compiler.\n-            # note that for xcode 5, g++ points to clang, not clang++\n-            if !((chk_cc gcc clang  && chk_cc g++ clang) ||\n-                (chk_cc gcc gcc  &&( chk_cc g++ g++ || chk g++ gcc))); then\n-                err \"the gcc and g++ in your path point to different compilers.\n-    Check which versions are in your path with gcc --version and g++ --version.\n-    To resolve this problem, either fix your PATH  or run configure with --enable-clang\"\n-            fi\n-\n-        fi\n-    fi\n-fi\n-\n-# If the clang isn't already enabled, check for GCC, and if it is missing, turn\n-# on clang as a backup.\n-if [ -z \"$CFG_ENABLE_CLANG\" ]\n-then\n-  CFG_GCC_VERSION=$(\"$CFG_GCC\" --version 2>&1)\n-  if [ $? -ne 0 ]\n-  then\n-    step_msg \"GCC not installed, will try using Clang\"\n-    CFG_ENABLE_CLANG=1\n-  fi\n-fi\n-\n-# Okay, at this point, we have made up our minds about whether we are\n-# going to force CFG_ENABLE_CLANG or not; save the setting if so.\n-if [ -n \"$CFG_ENABLE_CLANG\" ]\n-then\n-    putvar CFG_ENABLE_CLANG\n-fi\n-\n-if [ -z \"$CFG_DISABLE_LIBCPP\" -a -n \"$CFG_ENABLE_CLANG\" ]\n-then\n-    CFG_USING_LIBCPP=\"1\"\n-else\n-    CFG_USING_LIBCPP=\"0\"\n-fi\n-\n # Same with jemalloc.  save the setting here.\n if [ -n \"$CFG_DISABLE_JEMALLOC\" ]\n then\n     putvar CFG_DISABLE_JEMALLOC\n fi\n \n-if [ -n \"$CFG_LLVM_ROOT\" -a -z \"$CFG_DISABLE_LLVM_VERSION_CHECK\" -a -e \"$CFG_LLVM_ROOT/bin/llvm-config\" ]\n-then\n-    step_msg \"using custom LLVM at $CFG_LLVM_ROOT\"\n-\n-    LLVM_CONFIG=\"$CFG_LLVM_ROOT/bin/llvm-config\"\n-    LLVM_VERSION=$($LLVM_CONFIG --version)\n-\n-    case $LLVM_VERSION in\n-        (3.[7-9]*)\n-            msg \"found ok version of LLVM: $LLVM_VERSION\"\n-            ;;\n-        (*)\n-            err \"bad LLVM version: $LLVM_VERSION, need >=3.7\"\n-            ;;\n-    esac\n-\n-    if \"$CFG_LLVM_ROOT/bin/llvm-mc\" -help | grep -- \"-relocation-model\"; then\n-        msg \"found older llvm-mc\"\n-        CFG_LLVM_MC_HAS_RELOCATION_MODEL=1\n-        putvar CFG_LLVM_MC_HAS_RELOCATION_MODEL\n-    fi\n-fi\n-\n-# Even when the user overrides the choice of CC, still try to detect\n-# clang to disable some clang-specific warnings.  We here draw a\n-# distinction between:\n-#\n-#  CFG_ENABLE_CLANG : passed --enable-clang, or host \"requires\" clang,\n-#  CFG_USING_CLANG : compiler (clang / gcc / $CC) looks like clang.\n-#\n-# This distinction is important because there are some safeguards we\n-# would prefer to skip when merely CFG_USING_CLANG is set; but when\n-# CFG_ENABLE_CLANG is set, that indicates that we are opting into\n-# running such safeguards.\n-\n-if [ -n \"$CC\" ]\n-then\n-    msg \"skipping compiler inference steps; using provided CC=$CC\"\n-    CFG_CC=\"$CC\"\n-\n-    CFG_OSX_CC_VERSION=$(\"$CFG_CC\" --version 2>&1 | grep \"clang\")\n-    if [ $? -eq 0 ]\n-    then\n-        step_msg \"note, user-provided CC looks like clang; CC=$CC.\"\n-        CFG_USING_CLANG=1\n-        putvar CFG_USING_CLANG\n-    fi\n-else\n-    if [ -n \"$CFG_ENABLE_CLANG\" ]\n-    then\n-        if [ -z \"$CFG_CLANG\" ]\n-        then\n-            err \"clang requested but not found\"\n-        fi\n-        CFG_CC=\"$CFG_CLANG\"\n-        CFG_USING_CLANG=1\n-        putvar CFG_USING_CLANG\n-    else\n-        CFG_CC=\"gcc\"\n-    fi\n-fi\n-\n-if [ -n \"$CFG_ENABLE_CLANG\" ]\n-then\n-    case \"$CC\" in\n-        (''|*clang)\n-        if [ -z \"$CC\" ]\n-        then\n-            CFG_CC=\"clang\"\n-            CFG_CXX=\"clang++\"\n-        fi\n-    esac\n-fi\n-\n-if [ -n \"$CFG_ENABLE_CCACHE\" ]\n-then\n-    if [ -z \"$CFG_CCACHE\" ]\n-    then\n-        err \"ccache requested but not found\"\n-    fi\n-\n-    CFG_CC=\"ccache $CFG_CC\"\n-fi\n-\n-if [ -z \"$CC\" -a -z \"$CFG_ENABLE_CLANG\" -a -z \"$CFG_GCC\" ]\n-then\n-    err \"either clang or gcc is required\"\n-fi\n-\n # All safeguards based on $CFG_ENABLE_CLANG should occur before this\n # point in the script; after this point, script logic should inspect\n # $CFG_USING_CLANG rather than $CFG_ENABLE_CLANG.\n@@ -1190,12 +1013,6 @@ envopt CFLAGS\n envopt CXXFLAGS\n envopt LDFLAGS\n \n-# stdc++ name in use\n-# used to manage non-standard name (on OpenBSD for example)\n-program_transform_name=$($CFG_CC -v 2>&1 | sed -n \"s/.*--program-transform-name='\\([^']*\\)'.*/\\1/p\")\n-CFG_STDCPP_NAME=$(echo \"stdc++\" | sed \"${program_transform_name}\")\n-putvar CFG_STDCPP_NAME\n-\n # a little post-processing of various config values\n CFG_PREFIX=${CFG_PREFIX%/}\n CFG_MANDIR=${CFG_MANDIR%/}\n@@ -1223,651 +1040,6 @@ do\n done\n CFG_TARGET=$V_TEMP\n \n-# check target-specific tool-chains\n-for i in $CFG_TARGET\n-do\n-    L_CHECK=false\n-    for j in $CFG_SUPPORTED_TARGET\n-    do\n-        if [ $i = $j ]\n-        then\n-            L_CHECK=true\n-        fi\n-    done\n-\n-    if [ $L_CHECK = false ]\n-    then\n-        err \"unsupported target triples \\\"$i\\\" found\"\n-    fi\n-\n-    case $i in\n-        *android*)\n-            case $i in\n-                armv7-linux-androideabi)\n-                    cmd_prefix=\"arm-linux-androideabi\"\n-                    ;;\n-                *)\n-                    cmd_prefix=$i\n-                    ;;\n-            esac\n-\n-            upper_snake_target=$(echo \"$i\" | tr '[:lower:]' '[:upper:]' | tr '\\-' '\\_')\n-            eval ndk=\\$\"CFG_${upper_snake_target}_NDK\"\n-            if [ -z \"$ndk\" ]\n-            then\n-                ndk=$CFG_ANDROID_CROSS_PATH\n-                eval \"CFG_${upper_snake_target}_NDK\"=$CFG_ANDROID_CROSS_PATH\n-                warn \"generic/default Android NDK option is deprecated (use --$i-ndk option instead)\"\n-            fi\n-\n-            # Perform a basic sanity check of the NDK\n-            for android_ndk_tool in \"$ndk/bin/$cmd_prefix-gcc\" \"$ndk/bin/$cmd_prefix-g++\" \"$ndk/bin/$cmd_prefix-ar\"\n-            do\n-                if [ ! -f $android_ndk_tool ]\n-                then\n-                    err \"NDK tool $android_ndk_tool not found (bad or missing --$i-ndk option?)\"\n-                fi\n-            done\n-            ;;\n-        *-unknown-nacl)\n-\t    if [ -z \"$CFG_NACL_CROSS_PATH\" ]\n-\t    then\n-\t\terr \"I need the NaCl SDK path! (use --nacl-cross-path)\"\n-\t    fi\n-\t    ;;\n-        arm-apple-darwin)\n-            if [ $CFG_OSTYPE != apple-darwin ]\n-            then\n-                err \"The iOS target is only supported on Mac OS X\"\n-            fi\n-            ;;\n-\n-        *-msvc)\n-            # There are three builds of cmake on windows: MSVC, MinGW and Cygwin\n-            # The Cygwin build does not have generators for Visual Studio, so\n-            # detect that here and error.\n-            if ! \"$CFG_CMAKE\" --help | sed -n '/^Generators/,$p' | grep 'Visual Studio' > /dev/null\n-            then\n-                err \"\n-\n-cmake does not support Visual Studio generators.\n-\n-This is likely due to it being an msys/cygwin build of cmake, \\\n-rather than the required windows version, built using MinGW \\\n-or Visual Studio.\n-\n-If you are building under msys2 try installing the mingw-w64-x86_64-cmake \\\n-package instead of cmake:\n-\n-$ pacman -R cmake && pacman -S mingw-w64-x86_64-cmake\n-\"\n-            fi\n-\n-            # Use the REG program to figure out where VS is installed\n-            # We need to figure out where cl.exe and link.exe are, so we do some\n-            # munging and some probing here. We also look for the default\n-            # INCLUDE and LIB variables for MSVC so we can set those in the\n-            # build system as well.\n-            install=$(cmd //c reg QUERY \\\n-                       'HKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\VisualStudio\\14.0' \\\n-                       -v InstallDir)\n-            if [ -z \"$install\" ]; then\n-              install=$(cmd //c reg QUERY \\\n-                         'HKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\VisualStudio\\12.0' \\\n-                         -v InstallDir)\n-            fi\n-            need_ok \"couldn't find visual studio install root\"\n-            CFG_MSVC_ROOT=$(echo \"$install\" | grep InstallDir | sed 's/.*REG_SZ[ ]*//')\n-            CFG_MSVC_ROOT=$(dirname \"$CFG_MSVC_ROOT\")\n-            CFG_MSVC_ROOT=$(dirname \"$CFG_MSVC_ROOT\")\n-            putvar CFG_MSVC_ROOT\n-\n-            case $i in\n-                x86_64-*)\n-                    bits=x86_64\n-                    msvc_part=amd64\n-                    ;;\n-                i*86-*)\n-                    bits=i386\n-                    msvc_part=\n-                    ;;\n-                *)\n-                    err \"can only target x86 targets for MSVC\"\n-                    ;;\n-            esac\n-            bindir=\"${CFG_MSVC_ROOT}/VC/bin\"\n-            if [ -n \"$msvc_part\" ]; then\n-                bindir=\"$bindir/$msvc_part\"\n-            fi\n-            eval CFG_MSVC_BINDIR_$bits=\"\\\"$bindir\\\"\"\n-            eval CFG_MSVC_CL_$bits=\"\\\"$bindir/cl.exe\\\"\"\n-            eval CFG_MSVC_LIB_$bits=\"\\\"$bindir/lib.exe\\\"\"\n-            eval CFG_MSVC_LINK_$bits=\"\\\"$bindir/link.exe\\\"\"\n-\n-            vcvarsall=\"${CFG_MSVC_ROOT}/VC/vcvarsall.bat\"\n-            include_path=$(cmd //V:ON //c \"$vcvarsall\" $msvc_part \\& echo !INCLUDE!)\n-            need_ok \"failed to learn about MSVC's INCLUDE\"\n-            lib_path=$(cmd //V:ON //c \"$vcvarsall\" $msvc_part \\& echo !LIB!)\n-            need_ok \"failed to learn about MSVC's LIB\"\n-\n-            eval CFG_MSVC_INCLUDE_PATH_${bits}=\"\\\"$include_path\\\"\"\n-            eval CFG_MSVC_LIB_PATH_${bits}=\"\\\"$lib_path\\\"\"\n-\n-            putvar CFG_MSVC_BINDIR_${bits}\n-            putvar CFG_MSVC_CL_${bits}\n-            putvar CFG_MSVC_LIB_${bits}\n-            putvar CFG_MSVC_LINK_${bits}\n-            putvar CFG_MSVC_INCLUDE_PATH_${bits}\n-            putvar CFG_MSVC_LIB_PATH_${bits}\n-            ;;\n-\n-        *)\n-            ;;\n-    esac\n-done\n-\n-if [ \"$CFG_OSTYPE\" = \"pc-windows-gnu\" ] || [ \"$CFG_OSTYPE\" = \"pc-windows-msvc\" ]\n-then\n-    # There are some MSYS python builds which will auto-translate\n-    # windows-style paths to MSYS-style paths in Python itself.\n-    # Unfortunately this breaks LLVM's build system as somewhere along\n-    # the line LLVM prints a path into a file from Python and then CMake\n-    # later tries to interpret that path. If Python prints a MSYS path\n-    # and CMake tries to use it as a Windows path, you're gonna have a\n-    # Bad Time.\n-    #\n-    # Consequently here we try to detect when that happens and print an\n-    # error if it does.\n-    if $CFG_PYTHON -c 'import sys; print sys.argv[1]' `pwd` | grep '^/' > /dev/null\n-    then\n-        err \"\n-\n-python is silently translating windows paths to MSYS paths \\\n-and the build will fail if this python is used.\n-\n-Either an official python install must be used or an \\\n-alternative python package in MinGW must be used.\n-\n-If you are building under msys2 try installing the mingw-w64-x86_64-python2 \\\n-package instead of python2:\n-\n-$ pacman -S mingw-w64-x86_64-python2\n-\"\n-    fi\n-fi\n-\n-if [ -n \"$CFG_PERF\" ]\n-then\n-    HAVE_PERF_LOGFD=`$CFG_PERF stat --log-fd 2>&1 | grep 'unknown option'`\n-    if [ -z \"$HAVE_PERF_LOGFD\" ];\n-    then\n-        CFG_PERF_WITH_LOGFD=1\n-        putvar CFG_PERF_WITH_LOGFD\n-    fi\n-fi\n-\n-if [ -n \"$CFG_DISABLE_RUSTBUILD\" ]; then\n-\n-  step_msg \"making directories\"\n-\n-  for i in \\\n-      doc doc/std doc/extra \\\n-      dl tmp dist\n-  do\n-      make_dir $i\n-  done\n-\n-  for t in $CFG_HOST\n-  do\n-      make_dir $t/llvm\n-  done\n-\n-  for t in $CFG_HOST\n-  do\n-      make_dir $t/rustllvm\n-  done\n-\n-  for t in $CFG_TARGET\n-  do\n-    make_dir $t/rt\n-    for s in 0 1 2 3\n-    do\n-      make_dir $t/rt/stage$s\n-      make_dir $t/rt/jemalloc\n-      make_dir $t/rt/compiler-rt\n-      for i in                                          \\\n-        isaac sync test \\\n-        arch/i386 arch/x86_64 arch/arm arch/aarch64 arch/mips arch/powerpc\n-      do\n-        make_dir $t/rt/stage$s/$i\n-      done\n-    done\n-  done\n-\n-  for h in $CFG_HOST\n-  do\n-      for t in $CFG_TARGET\n-      do\n-          # host bin dir stage0\n-          make_dir $h/stage0/bin\n-\n-          # host lib dir stage0\n-          make_dir $h/stage0/lib\n-\n-          # host test dir stage0\n-          make_dir $h/stage0/test\n-\n-          # target bin dir stage0\n-          make_dir $h/stage0/lib/rustlib/$t/bin\n-\n-          # target lib dir stage0\n-          make_dir $h/stage0/lib/rustlib/$t/lib\n-\n-          for i in 1 2 3\n-          do\n-              # host bin dir\n-              make_dir $h/stage$i/bin\n-\n-              # host lib dir\n-              make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE\n-\n-              # host test dir\n-              make_dir $h/stage$i/test\n-\n-              # target bin dir\n-              make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE/rustlib/$t/bin\n-\n-              # target lib dir\n-              make_dir $h/stage$i/$CFG_LIBDIR_RELATIVE/rustlib/$t/lib\n-          done\n-      done\n-\n-      make_dir $h/test/run-pass\n-      make_dir $h/test/run-pass-valgrind\n-      make_dir $h/test/run-pass-fulldeps\n-      make_dir $h/test/run-fail\n-      make_dir $h/test/run-fail-fulldeps\n-      make_dir $h/test/compile-fail\n-      make_dir $h/test/parse-fail\n-      make_dir $h/test/compile-fail-fulldeps\n-      make_dir $h/test/bench\n-      make_dir $h/test/perf\n-      make_dir $h/test/pretty\n-      make_dir $h/test/debuginfo-gdb\n-      make_dir $h/test/debuginfo-lldb\n-      make_dir $h/test/codegen\n-      make_dir $h/test/codegen-units\n-      make_dir $h/test/rustdoc\n-  done\n-\n-fi\n-\n-# Configure submodules\n-step_msg \"configuring submodules\"\n-\n-# Have to be in the top of src directory for this\n-if [ -z \"$CFG_DISABLE_MANAGE_SUBMODULES\" ] && [ -n \"$CFG_DISABLE_RUSTBUILD\" ]\n-then\n-    cd ${CFG_SRC_DIR}\n-\n-    msg \"git: submodule sync\"\n-    \"${CFG_GIT}\" submodule sync\n-\n-    msg \"git: submodule init\"\n-    \"${CFG_GIT}\" submodule init\n-\n-    # Disable submodules that we're not using\n-    if [ -n \"${CFG_LLVM_ROOT}\" ]; then\n-        msg \"git: submodule deinit src/llvm\"\n-        \"${CFG_GIT}\" submodule deinit src/llvm\n-    fi\n-    if [ -n \"${CFG_JEMALLOC_ROOT}\" ]; then\n-        msg \"git: submodule deinit src/jemalloc\"\n-        \"${CFG_GIT}\" submodule deinit src/jemalloc\n-    fi\n-\n-    msg \"git: submodule update\"\n-    \"${CFG_GIT}\" submodule update\n-    need_ok \"git failed\"\n-\n-    msg \"git: submodule foreach sync\"\n-    \"${CFG_GIT}\" submodule foreach --recursive 'if test -e .gitmodules; then git submodule sync; fi'\n-    need_ok \"git failed\"\n-\n-    msg \"git: submodule foreach update\"\n-    \"${CFG_GIT}\" submodule update --recursive\n-    need_ok \"git failed\"\n-\n-    # NB: this is just for the sake of getting the submodule SHA1 values\n-    # and status written into the build log.\n-    msg \"git: submodule status\"\n-    \"${CFG_GIT}\" submodule status --recursive\n-\n-    msg \"git: submodule clobber\"\n-    \"${CFG_GIT}\" submodule foreach --recursive git clean -dxf\n-    need_ok \"git failed\"\n-    \"${CFG_GIT}\" submodule foreach --recursive git checkout .\n-    need_ok \"git failed\"\n-\n-    cd ${CFG_BUILD_DIR}\n-fi\n-\n-# Do a sanity check that the submodule source exists. Because GitHub\n-# automatically publishes broken tarballs that can't be disabled, and\n-# people download them and try to use them.\n-if [ ! -e \"${CFG_SRC_DIR}/src/liblibc\" ]; then\n-    err \"some submodules are missing. Is this a broken tarball?\n-\n-If you downloaded this tarball from the GitHub release pages at\n-https://github.com/rust-lang/rust/releases,\n-then please delete it and instead download the source from\n-https://www.rust-lang.org/downloads.html\"\n-\n-fi\n-\n-# Configure llvm, only if necessary\n-step_msg \"looking at LLVM\"\n-CFG_LLVM_SRC_DIR=${CFG_SRC_DIR}src/llvm/\n-for t in $CFG_HOST\n-do\n-    do_reconfigure=1\n-    is_msvc=0\n-    case \"$t\" in\n-        (*-msvc)\n-        is_msvc=1\n-        ;;\n-    esac\n-\n-    if [ -z \"$CFG_DISABLE_RUSTBUILD\" ]\n-    then\n-        msg \"not configuring LLVM, rustbuild in use\"\n-        do_reconfigure=0\n-    elif [ -z \"$CFG_LLVM_ROOT\" ]\n-    then\n-        LLVM_BUILD_DIR=${CFG_BUILD_DIR}$t/llvm\n-        LLVM_INST_DIR=$LLVM_BUILD_DIR\n-        # For some weird reason the MSVC output dir is different than Unix\n-        if [ ${is_msvc} -ne 0 ]; then\n-            if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]\n-            then\n-                # Just use LLVM straight from its build directory to\n-                # avoid 'make install' time\n-                LLVM_INST_DIR=$LLVM_BUILD_DIR/Debug\n-            else\n-                LLVM_INST_DIR=$LLVM_BUILD_DIR/Release\n-            fi\n-        fi\n-    else\n-        msg \"not reconfiguring LLVM, external LLVM root\"\n-        # The user is using their own LLVM\n-        LLVM_BUILD_DIR=\n-        LLVM_INST_DIR=$CFG_LLVM_ROOT\n-        do_reconfigure=0\n-        # Check that LLVm FileCheck is available. Needed for the tests\n-        if [ -z \"$CFG_DISABLE_CODEGEN_TESTS\" ]; then\n-            need_cmd $LLVM_INST_DIR/bin/FileCheck\n-        fi\n-    fi\n-\n-    if [ ${do_reconfigure} -ne 0 ]\n-    then\n-    # because git is hilarious, it might have put the module index\n-    # in a couple places.\n-        index1=\"${CFG_SRC_DIR}.git/modules/src/llvm/index\"\n-        index2=\"${CFG_SRC_DIR}src/llvm/.git/index\"\n-        for index in ${index1} ${index2}\n-        do\n-            config_status=\"${LLVM_BUILD_DIR}/config.status\"\n-            if test -e ${index} -a \\\n-                    -e ${config_status} -a \\\n-                    ${config_status} -nt ${index}\n-            then\n-                msg \"not reconfiguring LLVM, config.status is fresh\"\n-                do_reconfigure=0\n-            fi\n-        done\n-    fi\n-\n-    # We need the generator later on for compiler-rt even if LLVM's not built\n-    if [ -n \"$CFG_NINJA\" ]\n-    then\n-        generator=\"Ninja\"\n-    elif [ ${is_msvc} -ne 0 ]\n-    then\n-        case \"$CFG_MSVC_ROOT\" in\n-            *14.0*)\n-                generator=\"Visual Studio 14 2015\"\n-                ;;\n-            *12.0*)\n-                generator=\"Visual Studio 12 2013\"\n-                ;;\n-            *)\n-                err \"can't determine generator for LLVM cmake\"\n-                ;;\n-        esac\n-        case \"$t\" in\n-            x86_64-*)\n-                generator=\"$generator Win64\"\n-                ;;\n-            i686-*)\n-                ;;\n-            *)\n-                err \"can only build LLVM for x86 platforms\"\n-                ;;\n-        esac\n-    else\n-        generator=\"Unix Makefiles\"\n-    fi\n-    CFG_CMAKE_GENERATOR=$generator\n-    putvar CFG_CMAKE_GENERATOR\n-\n-    msg \"configuring LLVM for $t\"\n-\n-    LLVM_CFLAGS_32=\"\"\n-    LLVM_CXXFLAGS_32=\"\"\n-    LLVM_LDFLAGS_32=\"\"\n-    LLVM_CFLAGS_64=\"\"\n-    LLVM_CXXFLAGS_64=\"\"\n-    LLVM_LDFLAGS_64=\"\"\n-\n-    case \"$CFG_CC\" in\n-        (\"ccache clang\")\n-            LLVM_CXX_32=\"ccache\"\n-            LLVM_CC_32=\"ccache\"\n-            LLVM_CXX_32_ARG1=\"clang++\"\n-            LLVM_CC_32_ARG1=\"clang\"\n-            LLVM_CFLAGS_32=\"-Qunused-arguments\"\n-            LLVM_CXXFLAGS_32=\"-Qunused-arguments\"\n-\n-            LLVM_CXX_64=\"ccache\"\n-            LLVM_CC_64=\"ccache\"\n-            LLVM_CXX_64_ARG1=\"clang++\"\n-            LLVM_CC_64_ARG1=\"clang\"\n-            LLVM_CFLAGS_64=\"-Qunused-arguments\"\n-            LLVM_CXXFLAGS_64=\"-Qunused-arguments\"\n-            ;;\n-        (\"clang\")\n-            LLVM_CXX_32=\"clang++\"\n-            LLVM_CC_32=\"clang\"\n-            LLVM_CFLAGS_32=\"-Qunused-arguments\"\n-            LLVM_CXXFLAGS_32=\"-Qunused-arguments\"\n-\n-            LLVM_CXX_64=\"clang++\"\n-            LLVM_CC_64=\"clang\"\n-            LLVM_CFLAGS_64=\"-Qunused-arguments\"\n-            LLVM_CXXFLAGS_64=\"-Qunused-arguments\"\n-            ;;\n-        (\"ccache gcc\")\n-            LLVM_CXX_32=\"ccache\"\n-            LLVM_CC_32=\"ccache\"\n-            LLVM_CXX_32_ARG1=\"g++\"\n-            LLVM_CC_32_ARG1=\"gcc\"\n-\n-            LLVM_CXX_64=\"ccache\"\n-            LLVM_CC_64=\"ccache\"\n-            LLVM_CXX_64_ARG1=\"g++\"\n-            LLVM_CC_64_ARG1=\"gcc\"\n-            ;;\n-        (\"gcc\")\n-            if [ -z \"$CFG_ENABLE_SCCACHE\" ]; then\n-                LLVM_CXX_32=\"g++\"\n-                LLVM_CC_32=\"gcc\"\n-\n-                LLVM_CXX_64=\"g++\"\n-                LLVM_CC_64=\"gcc\"\n-            else\n-                LLVM_CXX_32=\"sccache\"\n-                LLVM_CC_32=\"sccache\"\n-                LLVM_CXX_32_ARG1=\"g++\"\n-                LLVM_CC_32_ARG1=\"gcc\"\n-\n-                LLVM_CXX_64=\"sccache\"\n-                LLVM_CC_64=\"sccache\"\n-                LLVM_CXX_64_ARG1=\"g++\"\n-                LLVM_CC_64_ARG1=\"gcc\"\n-            fi\n-            ;;\n-\n-        (*)\n-            msg \"inferring LLVM_CXX/CC from CXX/CC = $CXX/$CC\"\n-            if [ -n \"$CFG_ENABLE_CCACHE\" ]\n-            then\n-                if [ -z \"$CFG_CCACHE\" ]\n-                then\n-                    err \"ccache requested but not found\"\n-                fi\n-\n-                LLVM_CXX_32=\"ccache\"\n-                LLVM_CC_32=\"ccache\"\n-                LLVM_CXX_32_ARG1=\"$CXX\"\n-                LLVM_CC_32_ARG1=\"$CC\"\n-\n-                LLVM_CXX_64=\"ccache\"\n-                LLVM_CC_64=\"ccache\"\n-                LLVM_CXX_64_ARG1=\"$CXX\"\n-                LLVM_CC_64_ARG1=\"$CC\"\n-            else\n-                LLVM_CXX_32=\"$CXX\"\n-                LLVM_CC_32=\"$CC\"\n-\n-                LLVM_CXX_64=\"$CXX\"\n-                LLVM_CC_64=\"$CC\"\n-            fi\n-\n-            ;;\n-    esac\n-\n-    case \"$CFG_CPUTYPE\" in\n-        (x86*)\n-            LLVM_CFLAGS_32=\"$LLVM_CFLAGS_32 -m32\"\n-            LLVM_CXXFLAGS_32=\"$LLVM_CXXFLAGS_32 -m32\"\n-            LLVM_LDFLAGS_32=\"$LLVM_LDFLAGS_32 -m32\"\n-            ;;\n-    esac\n-\n-    if echo $t | grep -q x86_64\n-    then\n-        LLVM_CXX=$LLVM_CXX_64\n-        LLVM_CC=$LLVM_CC_64\n-        LLVM_CXX_ARG1=$LLVM_CXX_64_ARG1\n-        LLVM_CC_ARG1=$LLVM_CC_64_ARG1\n-        LLVM_CFLAGS=$LLVM_CFLAGS_64\n-        LLVM_CXXFLAGS=$LLVM_CXXFLAGS_64\n-        LLVM_LDFLAGS=$LLVM_LDFLAGS_64\n-    else\n-        LLVM_CXX=$LLVM_CXX_32\n-        LLVM_CC=$LLVM_CC_32\n-        LLVM_CXX_ARG1=$LLVM_CXX_32_ARG1\n-        LLVM_CC_ARG1=$LLVM_CC_32_ARG1\n-        LLVM_CFLAGS=$LLVM_CFLAGS_32\n-        LLVM_CXXFLAGS=$LLVM_CXXFLAGS_32\n-        LLVM_LDFLAGS=$LLVM_LDFLAGS_32\n-    fi\n-\n-    if [ \"$CFG_USING_LIBCPP\" != \"0\" ]; then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_LIBCXX=ON\"\n-    fi\n-\n-    # Turn off things we don't need\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_INCLUDE_TESTS=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_INCLUDE_EXAMPLES=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_INCLUDE_DOCS=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ZLIB=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DWITH_POLY=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_TERMINFO=OFF\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_LIBEDIT=OFF\"\n-\n-    arch=\"$(echo \"$t\" | cut -d - -f 1)\"\n-\n-    if [ \"$arch\" = i686 ]; then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_BUILD_32_BITS=ON\"\n-    fi\n-\n-    if [ \"$t\" != \"$CFG_BUILD\" ]; then\n-        # see http://llvm.org/docs/HowToCrossCompileLLVM.html\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_CROSSCOMPILING=True\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_TARGET_ARCH=$arch\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_TABLEGEN=$CFG_BUILD_DIR/$CFG_BUILD/llvm/bin/llvm-tblgen\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_DEFAULT_TARGET_TRIPLE=$t\"\n-    fi\n-\n-    # MSVC handles compiler business itself\n-    if [ ${is_msvc} -eq 0 ]; then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_C_COMPILER=$LLVM_CC\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_CXX_COMPILER=$LLVM_CXX\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS '-DCMAKE_C_FLAGS=$LLVM_CFLAGS'\"\n-        CMAKE_ARGS=\"$CMAKE_ARGS '-DCMAKE_CXX_FLAGS=$LLVM_CXXFLAGS'\"\n-        if [ -n \"$LLVM_CC_ARG1\" ]; then\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_C_COMPILER_ARG1=$LLVM_CC_ARG1\"\n-        fi\n-        if [ -n \"$LLVM_CXX_ARG1\" ]; then\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_CXX_COMPILER_ARG1=$LLVM_CXX_ARG1\"\n-        fi\n-        # FIXME: What about LDFLAGS?\n-    fi\n-\n-    if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug\"\n-    elif [ -n \"$CFG_ENABLE_LLVM_RELEASE_DEBUGINFO\" ]; then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=RelWithDebInfo\"\n-    else\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release\"\n-    fi\n-    if [ -z \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]\n-    then\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=OFF\"\n-    else\n-        CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=ON\"\n-    fi\n-\n-    CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_TARGETS_TO_BUILD='X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc'\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS -G '$CFG_CMAKE_GENERATOR'\"\n-    CMAKE_ARGS=\"$CMAKE_ARGS $CFG_LLVM_SRC_DIR\"\n-\n-    if [ ${do_reconfigure} -ne 0 ]\n-    then\n-        msg \"configuring LLVM for $t with cmake\"\n-\n-        msg \"configuring LLVM with:\"\n-        msg \"$CMAKE_ARGS\"\n-\n-        (cd $LLVM_BUILD_DIR && eval \"\\\"$CFG_CMAKE\\\"\" $CMAKE_ARGS)\n-        need_ok \"LLVM cmake configure failed\"\n-    fi\n-\n-    # Construct variables for LLVM build and install directories for\n-    # each target. These will be named\n-    # CFG_LLVM_BUILD_DIR_${target_triple} but all the hyphens in\n-    # target_triple will be converted to underscore, because bash\n-    # variables can't contain hyphens. The makefile will then have to\n-    # convert back.\n-    CFG_LLVM_BUILD_DIR=$(echo CFG_LLVM_BUILD_DIR_${t} | tr - _)\n-    CFG_LLVM_INST_DIR=$(echo CFG_LLVM_INST_DIR_${t} | tr - _)\n-    eval ${CFG_LLVM_BUILD_DIR}=\"'$LLVM_BUILD_DIR'\"\n-    eval ${CFG_LLVM_INST_DIR}=\"'$LLVM_INST_DIR'\"\n-done\n-\n-\n step_msg \"writing configuration\"\n \n putvar CFG_SRC_DIR\n@@ -1915,15 +1087,8 @@ do\n     putvar $CFG_LLVM_INST_DIR\n done\n \n-if [ -z \"$CFG_DISABLE_RUSTBUILD\" ]\n-then\n-    INPUT_MAKEFILE=src/bootstrap/mk/Makefile.in\n-else\n-    INPUT_MAKEFILE=Makefile.in\n-fi\n-\n msg\n-copy_if_changed ${CFG_SRC_DIR}${INPUT_MAKEFILE} ./Makefile\n+copy_if_changed ${CFG_SRC_DIR}src/bootstrap/mk/Makefile.in ./Makefile\n move_if_changed config.tmp config.mk\n rm -f config.tmp\n touch config.stamp\n@@ -1940,22 +1105,5 @@ else\n     X_PY=${CFG_SRC_DIR_RELATIVE}x.py\n fi\n \n-if [ -z \"$CFG_DISABLE_RUSTBUILD\" ]; then\n-    msg \"NOTE you have now configured rust to use a rewritten build system\"\n-    msg \"     called rustbuild, and as a result this may have bugs that \"\n-    msg \"     you did not see before. If you experience any issues you can\"\n-    msg \"     go back to the old build system with --disable-rustbuild and\"\n-    msg \"     please feel free to report any bugs!\"\n-    msg \"\"\n-    msg \"run \\`python ${X_PY} --help\\`\"\n-else\n-    warn \"the makefile-based build system is deprecated in favor of rustbuild\"\n-    msg \"\"\n-    msg \"It is recommended you avoid passing --disable-rustbuild to get your\"\n-    msg \"build working as the makefiles will be deleted on 2017-02-02. If you\"\n-    msg \"encounter bugs with rustbuild please file issues against rust-lang/rust\"\n-    msg \"\"\n-    msg \"run \\`make help\\`\"\n-fi\n-\n+msg \"run \\`python ${X_PY} --help\\`\"\n msg"}, {"sha": "5d822f1b1aba62c645969712bab2bba46ad73018", "filename": "mk/cfg/aarch64-apple-ios.mk", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Faarch64-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Faarch64-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-apple-ios.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,33 +0,0 @@\n-# aarch64-apple-ios configuration\n-CFG_SDK_NAME_aarch64-apple-ios := iphoneos\n-CFG_SDK_ARCHS_aarch64-apple-ios := arm64\n-ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n-CFG_IOS_SDK_aarch64-apple-ios := $(shell xcrun --show-sdk-path -sdk iphoneos 2>/dev/null)\n-CFG_IOS_SDK_FLAGS_aarch64-apple-ios := -target aarch64-apple-darwin -isysroot $(CFG_IOS_SDK_aarch64-apple-ios) -mios-version-min=7.0 -arch arm64\n-CC_aarch64-apple-ios = $(shell xcrun -find -sdk iphoneos clang)\n-LINK_aarch64-apple-ios = $(shell xcrun -find -sdk iphoneos clang)\n-CXX_aarch64-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n-CPP_aarch64-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n-AR_aarch64-apple-ios = $(shell xcrun -find -sdk iphoneos ar)\n-endif\n-CFG_LIB_NAME_aarch64-apple-ios = lib$(1).a\n-CFG_LIB_GLOB_aarch64-apple-ios = lib$(1)-*.a\n-CFG_INSTALL_ONLY_RLIB_aarch64-apple-ios = 1\n-CFG_STATIC_LIB_NAME_aarch64-apple-ios=lib$(1).a\n-CFG_LIB_DSYM_GLOB_aarch64-apple-ios = lib$(1)-*.a.dSYM\n-CFG_CFLAGS_aarch64-apple-ios := $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios)\n-CFG_JEMALLOC_CFLAGS_aarch64-apple-ios := $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios)\n-CFG_GCCISH_CFLAGS_aarch64-apple-ios :=  -fPIC $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios)\n-CFG_GCCISH_CXXFLAGS_aarch64-apple-ios := -fno-rtti $(CFG_IOS_SDK_FLAGS_aarch64-apple-ios) -I$(CFG_IOS_SDK_aarch64-apple-ios)/usr/include/c++/4.2.1\n-CFG_GCCISH_LINK_FLAGS_aarch64-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK_aarch64-apple-ios) -Wl,-no_compact_unwind\n-CFG_GCCISH_DEF_FLAG_aarch64-apple-ios := -Wl,-exported_symbols_list,\n-CFG_LLC_FLAGS_aarch64-apple-ios := -mattr=+neon,+cyclone,+fp-armv8\n-CFG_INSTALL_NAME_aarch64-apple-ios = -Wl,-install_name,@rpath/$(1)\n-CFG_LIBUV_LINK_FLAGS_aarch64-apple-ios =\n-CFG_EXE_SUFFIX_aarch64-apple-ios :=\n-CFG_WINDOWSY_aarch64-apple-ios :=\n-CFG_UNIXY_aarch64-apple-ios := 1\n-CFG_LDPATH_aarch64-apple-ios :=\n-CFG_RUN_aarch64-apple-ios = $(2)\n-CFG_RUN_TARG_aarch64-apple-ios = $(call CFG_RUN_aarch64-apple-ios,,$(2))\n-CFG_GNU_TRIPLE_aarch64-apple-ios := aarch64-apple-ios"}, {"sha": "274f73834d42b77b9c001c24d0bb7f9f9d008539", "filename": "mk/cfg/aarch64-linux-android.mk", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Faarch64-linux-android.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Faarch64-linux-android.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-linux-android.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,26 +0,0 @@\n-# aarch64-linux-android configuration\n-# CROSS_PREFIX_aarch64-linux-android-\n-CC_aarch64-linux-android=$(CFG_AARCH64_LINUX_ANDROID_NDK)/bin/aarch64-linux-android-gcc\n-CXX_aarch64-linux-android=$(CFG_AARCH64_LINUX_ANDROID_NDK)/bin/aarch64-linux-android-g++\n-CPP_aarch64-linux-android=$(CFG_AARCH64_LINUX_ANDROID_NDK)/bin/aarch64-linux-android-gcc -E\n-AR_aarch64-linux-android=$(CFG_AARCH64_LINUX_ANDROID_NDK)/bin/aarch64-linux-android-ar\n-CFG_LIB_NAME_aarch64-linux-android=lib$(1).so\n-CFG_STATIC_LIB_NAME_aarch64-linux-android=lib$(1).a\n-CFG_LIB_GLOB_aarch64-linux-android=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_aarch64-linux-android=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_aarch64-linux-android := -D__aarch64__ -DANDROID -D__ANDROID__ $(CFLAGS)\n-CFG_GCCISH_CFLAGS_aarch64-linux-android := -Wall -g -fPIC -D__aarch64__ -DANDROID -D__ANDROID__ $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_aarch64-linux-android := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_aarch64-linux-android := -shared -fPIC -ldl -g -lm -lsupc++\n-CFG_GCCISH_DEF_FLAG_aarch64-linux-android := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_aarch64-linux-android :=\n-CFG_INSTALL_NAME_aarch64-linux-android =\n-CFG_EXE_SUFFIX_aarch64-linux-android :=\n-CFG_WINDOWSY_aarch64-linux-android :=\n-CFG_UNIXY_aarch64-linux-android := 1\n-CFG_LDPATH_aarch64-linux-android :=\n-CFG_RUN_aarch64-linux-android=\n-CFG_RUN_TARG_aarch64-linux-android=\n-RUSTC_FLAGS_aarch64-linux-android :=\n-RUSTC_CROSS_FLAGS_aarch64-linux-android :=\n-CFG_GNU_TRIPLE_aarch64-linux-android := aarch64-linux-android"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/aarch64-unknown-freebsd.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Faarch64-unknown-freebsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Faarch64-unknown-freebsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-unknown-freebsd.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/aarch64-unknown-fuchsia.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Faarch64-unknown-fuchsia.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Faarch64-unknown-fuchsia.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-unknown-fuchsia.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "6637423e4951a9826c7b3004d1c939a4713cad47", "filename": "mk/cfg/aarch64-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Faarch64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Faarch64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-unknown-linux-gnu.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,26 +0,0 @@\n-# aarch64-unknown-linux-gnu configuration\n-CROSS_PREFIX_aarch64-unknown-linux-gnu=aarch64-linux-gnu-\n-CC_aarch64-unknown-linux-gnu=gcc\n-CXX_aarch64-unknown-linux-gnu=g++\n-CPP_aarch64-unknown-linux-gnu=gcc -E\n-AR_aarch64-unknown-linux-gnu=ar\n-CFG_LIB_NAME_aarch64-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_aarch64-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_aarch64-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_aarch64-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_aarch64-unknown-linux-gnu := -D__aarch64__ $(CFLAGS)\n-CFG_GCCISH_CFLAGS_aarch64-unknown-linux-gnu := -Wall -g -fPIC -D__aarch64__ $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_aarch64-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_aarch64-unknown-linux-gnu := -shared -fPIC -g\n-CFG_GCCISH_DEF_FLAG_aarch64-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_aarch64-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_aarch64-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_aarch64-unknown-linux-gnu :=\n-CFG_WINDOWSY_aarch64-unknown-linux-gnu :=\n-CFG_UNIXY_aarch64-unknown-linux-gnu := 1\n-CFG_LDPATH_aarch64-unknown-linux-gnu :=\n-CFG_RUN_aarch64-unknown-linux-gnu=$(2)\n-CFG_RUN_TARG_aarch64-unknown-linux-gnu=$(call CFG_RUN_aarch64-unknown-linux-gnu,,$(2))\n-RUSTC_FLAGS_aarch64-unknown-linux-gnu :=\n-RUSTC_CROSS_FLAGS_aarch64-unknown-linux-gnu :=\n-CFG_GNU_TRIPLE_aarch64-unknown-linux-gnu := aarch64-unknown-linux-gnu"}, {"sha": "c084954f2e9d069169da387789f817df457654e7", "filename": "mk/cfg/arm-linux-androideabi.mk", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farm-linux-androideabi.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farm-linux-androideabi.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farm-linux-androideabi.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,25 +0,0 @@\n-# arm-linux-androideabi configuration\n-CC_arm-linux-androideabi=$(CFG_ARM_LINUX_ANDROIDEABI_NDK)/bin/arm-linux-androideabi-gcc\n-CXX_arm-linux-androideabi=$(CFG_ARM_LINUX_ANDROIDEABI_NDK)/bin/arm-linux-androideabi-g++\n-CPP_arm-linux-androideabi=$(CFG_ARM_LINUX_ANDROIDEABI_NDK)/bin/arm-linux-androideabi-gcc -E\n-AR_arm-linux-androideabi=$(CFG_ARM_LINUX_ANDROIDEABI_NDK)/bin/arm-linux-androideabi-ar\n-CFG_LIB_NAME_arm-linux-androideabi=lib$(1).so\n-CFG_STATIC_LIB_NAME_arm-linux-androideabi=lib$(1).a\n-CFG_LIB_GLOB_arm-linux-androideabi=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_arm-linux-androideabi=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_arm-linux-androideabi := -D__arm__ -DANDROID -D__ANDROID__ $(CFLAGS)\n-CFG_GCCISH_CFLAGS_arm-linux-androideabi := -Wall -g -fPIC -D__arm__ -DANDROID -D__ANDROID__ $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_arm-linux-androideabi := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_arm-linux-androideabi := -shared -fPIC -ldl -g -lm -lsupc++\n-CFG_GCCISH_DEF_FLAG_arm-linux-androideabi := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_arm-linux-androideabi :=\n-CFG_INSTALL_NAME_arm-linux-androideabi =\n-CFG_EXE_SUFFIX_arm-linux-androideabi :=\n-CFG_WINDOWSY_arm-linux-androideabi :=\n-CFG_UNIXY_arm-linux-androideabi := 1\n-CFG_LDPATH_arm-linux-androideabi :=\n-CFG_RUN_arm-linux-androideabi=\n-CFG_RUN_TARG_arm-linux-androideabi=\n-RUSTC_FLAGS_arm-linux-androideabi :=\n-RUSTC_CROSS_FLAGS_arm-linux-androideabi :=\n-CFG_GNU_TRIPLE_arm-linux-androideabi := arm-linux-androideabi"}, {"sha": "f66ad04eefe8e3d00246476a3d170d077d7ca5ae", "filename": "mk/cfg/arm-unknown-linux-gnueabi.mk", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farm-unknown-linux-gnueabi.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farm-unknown-linux-gnueabi.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farm-unknown-linux-gnueabi.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,26 +0,0 @@\n-# arm-unknown-linux-gnueabi configuration\n-CROSS_PREFIX_arm-unknown-linux-gnueabi=arm-linux-gnueabi-\n-CC_arm-unknown-linux-gnueabi=gcc\n-CXX_arm-unknown-linux-gnueabi=g++\n-CPP_arm-unknown-linux-gnueabi=gcc -E\n-AR_arm-unknown-linux-gnueabi=ar\n-CFG_LIB_NAME_arm-unknown-linux-gnueabi=lib$(1).so\n-CFG_STATIC_LIB_NAME_arm-unknown-linux-gnueabi=lib$(1).a\n-CFG_LIB_GLOB_arm-unknown-linux-gnueabi=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_arm-unknown-linux-gnueabi=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_arm-unknown-linux-gnueabi := -D__arm__ -mfloat-abi=soft $(CFLAGS) -march=armv6 -marm\n-CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabi := -Wall -g -fPIC -D__arm__ -mfloat-abi=soft $(CFLAGS) -march=armv6 -marm\n-CFG_GCCISH_CXXFLAGS_arm-unknown-linux-gnueabi := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_arm-unknown-linux-gnueabi := -shared -fPIC -g\n-CFG_GCCISH_DEF_FLAG_arm-unknown-linux-gnueabi := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_arm-unknown-linux-gnueabi :=\n-CFG_INSTALL_NAME_arm-unknown-linux-gnueabi =\n-CFG_EXE_SUFFIX_arm-unknown-linux-gnueabi :=\n-CFG_WINDOWSY_arm-unknown-linux-gnueabi :=\n-CFG_UNIXY_arm-unknown-linux-gnueabi := 1\n-CFG_LDPATH_arm-unknown-linux-gnueabi :=\n-CFG_RUN_arm-unknown-linux-gnueabi=$(2)\n-CFG_RUN_TARG_arm-unknown-linux-gnueabi=$(call CFG_RUN_arm-unknown-linux-gnueabi,,$(2))\n-RUSTC_FLAGS_arm-unknown-linux-gnueabi :=\n-RUSTC_CROSS_FLAGS_arm-unknown-linux-gnueabi :=\n-CFG_GNU_TRIPLE_arm-unknown-linux-gnueabi := arm-unknown-linux-gnueabi"}, {"sha": "defe0dc3e70eb6e92ceea365143d56054b3c3874", "filename": "mk/cfg/arm-unknown-linux-gnueabihf.mk", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farm-unknown-linux-gnueabihf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farm-unknown-linux-gnueabihf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farm-unknown-linux-gnueabihf.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,26 +0,0 @@\n-# arm-unknown-linux-gnueabihf configuration\n-CROSS_PREFIX_arm-unknown-linux-gnueabihf=arm-linux-gnueabihf-\n-CC_arm-unknown-linux-gnueabihf=gcc\n-CXX_arm-unknown-linux-gnueabihf=g++\n-CPP_arm-unknown-linux-gnueabihf=gcc -E\n-AR_arm-unknown-linux-gnueabihf=ar\n-CFG_LIB_NAME_arm-unknown-linux-gnueabihf=lib$(1).so\n-CFG_STATIC_LIB_NAME_arm-unknown-linux-gnueabihf=lib$(1).a\n-CFG_LIB_GLOB_arm-unknown-linux-gnueabihf=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_arm-unknown-linux-gnueabihf=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_arm-unknown-linux-gnueabihf := -D__arm__ $(CFLAGS) -march=armv6 -marm\n-CFG_GCCISH_CFLAGS_arm-unknown-linux-gnueabihf := -Wall -g -fPIC -D__arm__ $(CFLAGS) -march=armv6 -marm\n-CFG_GCCISH_CXXFLAGS_arm-unknown-linux-gnueabihf := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_arm-unknown-linux-gnueabihf := -shared -fPIC -g\n-CFG_GCCISH_DEF_FLAG_arm-unknown-linux-gnueabihf := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_arm-unknown-linux-gnueabihf :=\n-CFG_INSTALL_NAME_ar,-unknown-linux-gnueabihf =\n-CFG_EXE_SUFFIX_arm-unknown-linux-gnueabihf :=\n-CFG_WINDOWSY_arm-unknown-linux-gnueabihf :=\n-CFG_UNIXY_arm-unknown-linux-gnueabihf := 1\n-CFG_LDPATH_arm-unknown-linux-gnueabihf :=\n-CFG_RUN_arm-unknown-linux-gnueabihf=$(2)\n-CFG_RUN_TARG_arm-unknown-linux-gnueabihf=$(call CFG_RUN_arm-unknown-linux-gnueabihf,,$(2))\n-RUSTC_FLAGS_arm-unknown-linux-gnueabihf := -C target-feature=+v6,+vfp2\n-RUSTC_CROSS_FLAGS_arm-unknown-linux-gnueabihf :=\n-CFG_GNU_TRIPLE_arm-unknown-linux-gnueabihf := arm-unknown-linux-gnueabihf"}, {"sha": "4d1438d592ece54be42049103e402968ab982fa5", "filename": "mk/cfg/arm-unknown-linux-musleabi.mk", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farm-unknown-linux-musleabi.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farm-unknown-linux-musleabi.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farm-unknown-linux-musleabi.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,26 +0,0 @@\n-# arm-unknown-linux-musleabi configuration\n-CROSS_PREFIX_arm-unknown-linux-musleabi=arm-linux-musleabi-\n-CC_arm-unknown-linux-musleabi=gcc\n-CXX_arm-unknown-linux-musleabi=g++\n-CPP_arm-unknown-linux-musleabi=gcc -E\n-AR_arm-unknown-linux-musleabi=ar\n-CFG_LIB_NAME_arm-unknown-linux-musleabi=lib$(1).so\n-CFG_STATIC_LIB_NAME_arm-unknown-linux-musleabi=lib$(1).a\n-CFG_LIB_GLOB_arm-unknown-linux-musleabi=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_arm-unknown-linux-musleabi=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_arm-unknown-linux-musleabi := -D__arm__ -mfloat-abi=soft $(CFLAGS) -march=armv6 -marm\n-CFG_GCCISH_CFLAGS_arm-unknown-linux-musleabi := -Wall -g -fPIC -D__arm__ -mfloat-abi=soft $(CFLAGS) -march=armv6 -marm\n-CFG_GCCISH_CXXFLAGS_arm-unknown-linux-musleabi := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_arm-unknown-linux-musleabi := -shared -fPIC -g\n-CFG_GCCISH_DEF_FLAG_arm-unknown-linux-musleabi := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_arm-unknown-linux-musleabi :=\n-CFG_INSTALL_NAME_arm-unknown-linux-musleabi =\n-CFG_EXE_SUFFIX_arm-unknown-linux-musleabi :=\n-CFG_WINDOWSY_arm-unknown-linux-musleabi :=\n-CFG_UNIXY_arm-unknown-linux-musleabi := 1\n-CFG_LDPATH_arm-unknown-linux-musleabi :=\n-CFG_RUN_arm-unknown-linux-musleabi=$(2)\n-CFG_RUN_TARG_arm-unknown-linux-musleabi=$(call CFG_RUN_arm-unknown-linux-musleabi,,$(2))\n-RUSTC_FLAGS_arm-unknown-linux-musleabi :=\n-RUSTC_CROSS_FLAGS_arm-unknown-linux-musleabi :=\n-CFG_GNU_TRIPLE_arm-unknown-linux-musleabi := arm-unknown-linux-musleabi"}, {"sha": "8120250150d43abae3d03e0be4fe31573d862b61", "filename": "mk/cfg/arm-unknown-linux-musleabihf.mk", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farm-unknown-linux-musleabihf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farm-unknown-linux-musleabihf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farm-unknown-linux-musleabihf.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,3 +0,0 @@\n-# This file is intentially left empty to indicate that, while this target is\n-# supported, it's not supported using plain GNU Make builds. Use a --rustbuild\n-# instead.\n\\ No newline at end of file"}, {"sha": "98567a03c28a9804edb13c6448918dde719ccd89", "filename": "mk/cfg/armv5te-unknown-linux-gnueabi.mk", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farmv5te-unknown-linux-gnueabi.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farmv5te-unknown-linux-gnueabi.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv5te-unknown-linux-gnueabi.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,26 +0,0 @@\n-# armv5-unknown-linux-gnueabi configuration\n-CROSS_PREFIX_armv5te-unknown-linux-gnueabi=arm-linux-gnueabi-\n-CC_armv5te-unknown-linux-gnueabi=gcc\n-CXX_armv5te-unknown-linux-gnueabi=g++\n-CPP_armv5te-unknown-linux-gnueabi=gcc -E\n-AR_armv5te-unknown-linux-gnueabi=ar\n-CFG_LIB_NAME_armv5te-unknown-linux-gnueabi=lib$(1).so\n-CFG_STATIC_LIB_NAME_armv5te-unknown-linux-gnueabi=lib$(1).a\n-CFG_LIB_GLOB_armv5te-unknown-linux-gnueabi=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_armv5te-unknown-linux-gnueabi=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_armv5te-unknown-linux-gnueabi := -D__arm__ -mfloat-abi=soft  $(CFLAGS) -march=armv5te -marm\n-CFG_GCCISH_CFLAGS_armv5te-unknown-linux-gnueabi := -Wall -g -fPIC -D__arm__ -mfloat-abi=soft $(CFLAGS) -march=armv5te -marm\n-CFG_GCCISH_CXXFLAGS_armv5te-unknown-linux-gnueabi := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_armv5te-unknown-linux-gnueabi := -shared -fPIC -g\n-CFG_GCCISH_DEF_FLAG_armv5te-unknown-linux-gnueabi := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_armv5te-unknown-linux-gnueabi :=\n-CFG_INSTALL_NAME_ar,-unknown-linux-gnueabi =\n-CFG_EXE_SUFFIX_armv5te-unknown-linux-gnueabi :=\n-CFG_WINDOWSY_armv5te-unknown-linux-gnueabi :=\n-CFG_UNIXY_armv5te-unknown-linux-gnueabi := 1\n-CFG_LDPATH_armv5te-unknown-linux-gnueabi :=\n-CFG_RUN_armv5te-unknown-linux-gnueabi=$(2)\n-CFG_RUN_TARG_armv5te-unknown-linux-gnueabi=$(call CFG_RUN_armv5te-unknown-linux-gnueabi,,$(2))\n-RUSTC_FLAGS_armv5te-unknown-linux-gnueabi :=\n-RUSTC_CROSS_FLAGS_armv5te-unknown-linux-gnueabi :=\n-CFG_GNU_TRIPLE_armv5te-unknown-linux-gnueabi := armv5te-unknown-linux-gnueabi"}, {"sha": "34ca4de6563e41626fe59d68bca0af2a3437b724", "filename": "mk/cfg/armv7-apple-ios.mk", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farmv7-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farmv7-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7-apple-ios.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,30 +0,0 @@\n-# armv7-apple-ios configuration\n-CFG_SDK_NAME_armv7-apple-ios := iphoneos\n-CFG_SDK_ARCHS_armv7-apple-ios := armv7\n-ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n-CFG_IOS_SDK_armv7-apple-ios := $(shell xcrun --show-sdk-path -sdk iphoneos 2>/dev/null)\n-CFG_IOS_SDK_FLAGS_armv7-apple-ios := -target armv7-apple-ios -isysroot $(CFG_IOS_SDK_armv7-apple-ios) -mios-version-min=7.0\n-CC_armv7-apple-ios = $(shell xcrun -find -sdk iphoneos clang)\n-CXX_armv7-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n-CPP_armv7-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n-AR_armv7-apple-ios = $(shell xcrun -find -sdk iphoneos ar)\n-endif\n-CFG_LIB_NAME_armv7-apple-ios = lib$(1).a\n-CFG_LIB_GLOB_armv7-apple-ios = lib$(1)-*.a\n-CFG_INSTALL_ONLY_RLIB_armv7-apple-ios = 1\n-CFG_STATIC_LIB_NAME_armv7-apple-ios=lib$(1).a\n-CFG_LIB_DSYM_GLOB_armv7-apple-ios = lib$(1)-*.a.dSYM\n-CFG_JEMALLOC_CFLAGS_armv7-apple-ios := -arch armv7 -mfpu=vfp3 $(CFG_IOS_SDK_FLAGS_armv7-apple-ios)\n-CFG_GCCISH_CFLAGS_armv7-apple-ios :=  -g -fPIC $(CFG_IOS_SDK_FLAGS_armv7-apple-ios) -mfpu=vfp3 -arch armv7\n-CFG_GCCISH_CXXFLAGS_armv7-apple-ios := -fno-rtti $(CFG_IOS_SDK_FLAGS_armv7-apple-ios) -I$(CFG_IOS_SDK_armv7-apple-ios)/usr/include/c++/4.2.1\n-CFG_GCCISH_LINK_FLAGS_armv7-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK_armv7-apple-ios) -Wl,-no_compact_unwind\n-CFG_GCCISH_DEF_FLAG_armv7-apple-ios := -Wl,-exported_symbols_list,\n-CFG_LLC_FLAGS_armv7-apple-ios := -mattr=+vfp3,+v7,+neon -march=arm\n-CFG_INSTALL_NAME_armv7-apple-ios = -Wl,-install_name,@rpath/$(1)\n-CFG_EXE_SUFFIX_armv7-apple-ios :=\n-CFG_WINDOWSY_armv7-apple-ios :=\n-CFG_UNIXY_armv7-apple-ios := 1\n-CFG_LDPATH_armv7-apple-ios :=\n-CFG_RUN_armv7-apple-ios = $(2)\n-CFG_RUN_TARG_armv7-apple-ios = $(call CFG_RUN_armv7-apple-ios,,$(2))\n-CFG_GNU_TRIPLE_armv7-apple-ios := armv7-apple-ios"}, {"sha": "e5bf2e4df7ab3851d366b3e98ccde17d5a6068c1", "filename": "mk/cfg/armv7-linux-androideabi.mk", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farmv7-linux-androideabi.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farmv7-linux-androideabi.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7-linux-androideabi.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,25 +0,0 @@\n-# armv7-linux-androideabi configuration\n-CC_armv7-linux-androideabi=$(CFG_ARMV7_LINUX_ANDROIDEABI_NDK)/bin/arm-linux-androideabi-gcc\n-CXX_armv7-linux-androideabi=$(CFG_ARMV7_LINUX_ANDROIDEABI_NDK)/bin/arm-linux-androideabi-g++\n-CPP_armv7-linux-androideabi=$(CFG_ARMV7_LINUX_ANDROIDEABI_NDK)/bin/arm-linux-androideabi-gcc -E\n-AR_armv7-linux-androideabi=$(CFG_ARMV7_LINUX_ANDROIDEABI_NDK)/bin/arm-linux-androideabi-ar\n-CFG_LIB_NAME_armv7-linux-androideabi=lib$(1).so\n-CFG_STATIC_LIB_NAME_armv7-linux-androideabi=lib$(1).a\n-CFG_LIB_GLOB_armv7-linux-androideabi=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_armv7-linux-androideabi=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_armv7-linux-androideabi := -D__arm__ -DANDROID -D__ANDROID__ $(CFLAGS)\n-CFG_GCCISH_CFLAGS_armv7-linux-androideabi := -Wall -g -fPIC -D__arm__ -mfloat-abi=softfp -march=armv7-a -mfpu=vfpv3-d16 -DANDROID -D__ANDROID__ $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_armv7-linux-androideabi := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_armv7-linux-androideabi := -shared -fPIC -ldl -g -lm -lsupc++\n-CFG_GCCISH_DEF_FLAG_armv7-linux-androideabi := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_armv7-linux-androideabi :=\n-CFG_INSTALL_NAME_armv7-linux-androideabi =\n-CFG_EXE_SUFFIX_armv7-linux-androideabi :=\n-CFG_WINDOWSY_armv7-linux-androideabi :=\n-CFG_UNIXY_armv7-linux-androideabi := 1\n-CFG_LDPATH_armv7-linux-androideabi :=\n-CFG_RUN_armv7-linux-androideabi=\n-CFG_RUN_TARG_armv7-linux-androideabi=\n-RUSTC_FLAGS_armv7-linux-androideabi :=\n-RUSTC_CROSS_FLAGS_armv7-linux-androideabi :=\n-CFG_GNU_TRIPLE_armv7-linux-androideabi := arm-linux-androideabi"}, {"sha": "a8e39668ded5e3cfd88e0a8b07ce9f1ed0029e76", "filename": "mk/cfg/armv7-unknown-linux-gnueabihf.mk", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farmv7-unknown-linux-gnueabihf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farmv7-unknown-linux-gnueabihf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7-unknown-linux-gnueabihf.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,26 +0,0 @@\n-# armv7-unknown-linux-gnueabihf configuration\n-CROSS_PREFIX_armv7-unknown-linux-gnueabihf=arm-linux-gnueabihf-\n-CC_armv7-unknown-linux-gnueabihf=gcc\n-CXX_armv7-unknown-linux-gnueabihf=g++\n-CPP_armv7-unknown-linux-gnueabihf=gcc -E\n-AR_armv7-unknown-linux-gnueabihf=ar\n-CFG_LIB_NAME_armv7-unknown-linux-gnueabihf=lib$(1).so\n-CFG_STATIC_LIB_NAME_armv7-unknown-linux-gnueabihf=lib$(1).a\n-CFG_LIB_GLOB_armv7-unknown-linux-gnueabihf=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_armv7-unknown-linux-gnueabihf=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_armv7-unknown-linux-gnueabihf := -D__arm__ $(CFLAGS) -march=armv7-a\n-CFG_GCCISH_CFLAGS_armv7-unknown-linux-gnueabihf := -Wall -g -fPIC -D__arm__ $(CFLAGS) -march=armv7-a\n-CFG_GCCISH_CXXFLAGS_armv7-unknown-linux-gnueabihf := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_armv7-unknown-linux-gnueabihf := -shared -fPIC -g\n-CFG_GCCISH_DEF_FLAG_armv7-unknown-linux-gnueabihf := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_armv7-unknown-linux-gnueabihf :=\n-CFG_INSTALL_NAME_ar,-unknown-linux-gnueabihf =\n-CFG_EXE_SUFFIX_armv7-unknown-linux-gnueabihf :=\n-CFG_WINDOWSY_armv7-unknown-linux-gnueabihf :=\n-CFG_UNIXY_armv7-unknown-linux-gnueabihf := 1\n-CFG_LDPATH_armv7-unknown-linux-gnueabihf :=\n-CFG_RUN_armv7-unknown-linux-gnueabihf=$(2)\n-CFG_RUN_TARG_armv7-unknown-linux-gnueabihf=$(call CFG_RUN_armv7-unknown-linux-gnueabihf,,$(2))\n-RUSTC_FLAGS_armv7-unknown-linux-gnueabihf :=\n-RUSTC_CROSS_FLAGS_armv7-unknown-linux-gnueabihf :=\n-CFG_GNU_TRIPLE_armv7-unknown-linux-gnueabihf := armv7-unknown-linux-gnueabihf"}, {"sha": "8120250150d43abae3d03e0be4fe31573d862b61", "filename": "mk/cfg/armv7-unknown-linux-musleabihf.mk", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farmv7-unknown-linux-musleabihf.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farmv7-unknown-linux-musleabihf.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7-unknown-linux-musleabihf.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,3 +0,0 @@\n-# This file is intentially left empty to indicate that, while this target is\n-# supported, it's not supported using plain GNU Make builds. Use a --rustbuild\n-# instead.\n\\ No newline at end of file"}, {"sha": "6da7905a7003bd955ebd6e7a18b5c3c0dfd2a3df", "filename": "mk/cfg/armv7s-apple-ios.mk", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farmv7s-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Farmv7s-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Farmv7s-apple-ios.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,30 +0,0 @@\n-# armv7s-apple-ios configuration\n-CFG_SDK_NAME_armv7s-apple-ios := iphoneos\n-CFG_SDK_ARCHS_armv7s-apple-ios := armv7s\n-ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n-CFG_IOS_SDK_armv7s-apple-ios := $(shell xcrun --show-sdk-path -sdk iphoneos 2>/dev/null)\n-CFG_IOS_SDK_FLAGS_armv7s-apple-ios := -target armv7s-apple-ios -isysroot $(CFG_IOS_SDK_armv7s-apple-ios) -mios-version-min=7.0\n-CC_armv7s-apple-ios = $(shell xcrun -find -sdk iphoneos clang)\n-CXX_armv7s-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n-CPP_armv7s-apple-ios = $(shell xcrun -find -sdk iphoneos clang++)\n-AR_armv7s-apple-ios = $(shell xcrun -find -sdk iphoneos ar)\n-endif\n-CFG_LIB_NAME_armv7s-apple-ios = lib$(1).a\n-CFG_LIB_GLOB_armv7s-apple-ios = lib$(1)-*.a\n-CFG_INSTALL_ONLY_RLIB_armv7s-apple-ios = 1\n-CFG_STATIC_LIB_NAME_armv7s-apple-ios=lib$(1).a\n-CFG_LIB_DSYM_GLOB_armv7s-apple-ios = lib$(1)-*.a.dSYM\n-CFG_JEMALLOC_CFLAGS_armv7s-apple-ios := -arch armv7s $(CFG_IOS_SDK_FLAGS_armv7s-apple-ios)\n-CFG_GCCISH_CFLAGS_armv7s-apple-ios :=  -g -fPIC $(CFG_IOS_SDK_FLAGS_armv7s-apple-ios) -arch armv7s\n-CFG_GCCISH_CXXFLAGS_armv7s-apple-ios := -fno-rtti $(CFG_IOS_SDK_FLAGS_armv7s-apple-ios) -I$(CFG_IOS_SDK_armv7s-apple-ios)/usr/include/c++/4.2.1\n-CFG_GCCISH_LINK_FLAGS_armv7s-apple-ios := -lpthread -syslibroot $(CFG_IOS_SDK_armv7s-apple-ios) -Wl,-no_compact_unwind\n-CFG_GCCISH_DEF_FLAG_armv7s-apple-ios := -Wl,-exported_symbols_list,\n-CFG_LLC_FLAGS_armv7s-apple-ios := -mattr=+vfp4,+v7,+neon\n-CFG_INSTALL_NAME_armv7s-apple-ios = -Wl,-install_name,@rpath/$(1)\n-CFG_EXE_SUFFIX_armv7s-apple-ios :=\n-CFG_WINDOWSY_armv7s-apple-ios :=\n-CFG_UNIXY_armv7s-apple-ios := 1\n-CFG_LDPATH_armv7s-apple-ios :=\n-CFG_RUN_armv7s-apple-ios = $(2)\n-CFG_RUN_TARG_armv7s-apple-ios = $(call CFG_RUN_armv7s-apple-ios,,$(2))\n-CFG_GNU_TRIPLE_armv7s-apple-ios := armv7s-apple-ios"}, {"sha": "a98a51b06b5d3374e38a2588b6a30d9adb1febc3", "filename": "mk/cfg/asmjs-unknown-emscripten.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fasmjs-unknown-emscripten.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,24 +0,0 @@\n-# asmjs-unknown-emscripten configuration\n-CC_asmjs-unknown-emscripten=emcc\n-CXX_asmjs-unknown-emscripten=em++\n-CPP_asmjs-unknown-emscripten=$(CPP)\n-AR_asmjs-unknown-emscripten=emar\n-CFG_LIB_NAME_asmjs-unknown-emscripten=lib$(1).so\n-CFG_STATIC_LIB_NAME_asmjs-unknown-emscripten=lib$(1).a\n-CFG_LIB_GLOB_asmjs-unknown-emscripten=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_asmjs-unknown-emscripten=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_asmjs-unknown-emscripten := -m32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_asmjs-unknown-emscripten :=  -g -fPIC -m32 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_asmjs-unknown-emscripten := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_asmjs-unknown-emscripten := -shared -fPIC -ldl -pthread  -lrt -g -m32\n-CFG_GCCISH_DEF_FLAG_asmjs-unknown-emscripten := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_asmjs-unknown-emscripten :=\n-CFG_INSTALL_NAME_asmjs-unknown-emscripten =\n-CFG_EXE_SUFFIX_asmjs-unknown-emscripten =\n-CFG_WINDOWSY_asmjs-unknown-emscripten :=\n-CFG_UNIXY_asmjs-unknown-emscripten := 1\n-CFG_LDPATH_asmjs-unknown-emscripten :=\n-CFG_RUN_asmjs-unknown-emscripten=$(2)\n-CFG_RUN_TARG_asmjs-unknown-emscripten=$(call CFG_RUN_asmjs-unknown-emscripten,,$(2))\n-CFG_GNU_TRIPLE_asmjs-unknown-emscripten := asmjs-unknown-emscripten\n-CFG_DISABLE_JEMALLOC_asmjs-unknown-emscripten := 1"}, {"sha": "bfb7fa281f242aadf870ef16185b5de8faaaed5e", "filename": "mk/cfg/i386-apple-ios.mk", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi386-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi386-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi386-apple-ios.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,30 +0,0 @@\n-# i386-apple-ios configuration\n-CFG_SDK_NAME_i386-apple-ios := iphonesimulator\n-CFG_SDK_ARCHS_i386-apple-ios := i386\n-ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n-CFG_IOSSIM_SDK_i386-apple-ios := $(shell xcrun --show-sdk-path -sdk iphonesimulator 2>/dev/null)\n-CFG_IOSSIM_FLAGS_i386-apple-ios := -m32 -target i386-apple-ios -isysroot $(CFG_IOSSIM_SDK_i386-apple-ios) -mios-simulator-version-min=7.0\n-CC_i386-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang)\n-CXX_i386-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang++)\n-CPP_i386-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang++)\n-AR_i386-apple-ios = $(shell xcrun -find -sdk iphonesimulator ar)\n-endif\n-CFG_LIB_NAME_i386-apple-ios = lib$(1).a\n-CFG_LIB_GLOB_i386-apple-ios = lib$(1)-*.dylib\n-CFG_INSTALL_ONLY_RLIB_i386-apple-ios = 1\n-CFG_STATIC_LIB_NAME_i386-apple-ios=lib$(1).a\n-CFG_LIB_DSYM_GLOB_i386-apple-ios = lib$(1)-*.dylib.dSYM\n-CFG_GCCISH_CFLAGS_i386-apple-ios :=  -g -fPIC -m32 $(CFG_IOSSIM_FLAGS_i386-apple-ios)\n-CFG_GCCISH_CXXFLAGS_i386-apple-ios := -fno-rtti $(CFG_IOSSIM_FLAGS_i386-apple-ios) -I$(CFG_IOSSIM_SDK_i386-apple-ios)/usr/include/c++/4.2.1\n-CFG_GCCISH_LINK_FLAGS_i386-apple-ios := -lpthread -m32 -Wl,-no_compact_unwind -m32 -Wl,-syslibroot $(CFG_IOSSIM_SDK_i386-apple-ios)\n-CFG_GCCISH_DEF_FLAG_i386-apple-ios := -Wl,-exported_symbols_list,\n-CFG_LLC_FLAGS_i386-apple-ios =\n-CFG_INSTALL_NAME_i386-apple-ios = -Wl,-install_name,@rpath/$(1)\n-CFG_EXE_SUFFIX_i386-apple-ios :=\n-CFG_WINDOWSY_i386-apple-ios :=\n-CFG_UNIXY_i386-apple-ios := 1\n-CFG_LDPATH_i386-apple-ios =\n-CFG_RUN_i386-apple-ios = $(2)\n-CFG_RUN_TARG_i386-apple-ios = $(call CFG_RUN_i386-apple-ios,,$(2))\n-CFG_JEMALLOC_CFLAGS_i386-apple-ios = $(CFG_IOSSIM_FLAGS_i386-apple-ios) -target i386-apple-ios #-Wl,-syslibroot $(CFG_IOSSIM_SDK_i386-apple-ios) -Wl,-no_compact_unwind\n-CFG_GNU_TRIPLE_i386-apple-ios := i386-apple-ios"}, {"sha": "48f1ecec3a704632d4fc9ef1367376697795c751", "filename": "mk/cfg/i586-pc-windows-msvc.mk", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi586-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi586-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi586-pc-windows-msvc.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,28 +0,0 @@\n-# i586-pc-windows-msvc configuration\n-CC_i586-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n-LINK_i586-pc-windows-msvc=$(CFG_MSVC_LINK_i386)\n-CXX_i586-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n-CPP_i586-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n-AR_i586-pc-windows-msvc=$(CFG_MSVC_LIB_i386)\n-CFG_LIB_NAME_i586-pc-windows-msvc=$(1).dll\n-CFG_STATIC_LIB_NAME_i586-pc-windows-msvc=$(1).lib\n-CFG_LIB_GLOB_i586-pc-windows-msvc=$(1)-*.{dll,lib}\n-CFG_LIB_DSYM_GLOB_i586-pc-windows-msvc=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i586-pc-windows-msvc :=\n-CFG_GCCISH_CFLAGS_i586-pc-windows-msvc := -MD -arch:IA32 -nologo\n-CFG_GCCISH_CXXFLAGS_i586-pc-windows-msvc := -MD -arch:IA32 -nologo\n-CFG_GCCISH_LINK_FLAGS_i586-pc-windows-msvc :=\n-CFG_GCCISH_DEF_FLAG_i586-pc-windows-msvc :=\n-CFG_LLC_FLAGS_i586-pc-windows-msvc :=\n-CFG_INSTALL_NAME_i586-pc-windows-msvc =\n-CFG_EXE_SUFFIX_i586-pc-windows-msvc := .exe\n-CFG_WINDOWSY_i586-pc-windows-msvc := 1\n-CFG_UNIXY_i586-pc-windows-msvc :=\n-CFG_LDPATH_i586-pc-windows-msvc :=\n-CFG_RUN_i586-pc-windows-msvc=$(2)\n-CFG_RUN_TARG_i586-pc-windows-msvc=$(call CFG_RUN_i586-pc-windows-msvc,,$(2))\n-CFG_GNU_TRIPLE_i586-pc-windows-msvc := i586-pc-win32\n-\n-# Currently the build system is not configured to build jemalloc\n-# with MSVC, so we omit this optional dependency.\n-CFG_DISABLE_JEMALLOC_i586-pc-windows-msvc := 1"}, {"sha": "fa2909196dcf184e5761ffb4e83dbb435c30c56e", "filename": "mk/cfg/i586-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,23 +0,0 @@\n-# i586-unknown-linux-gnu configuration\n-CC_i586-unknown-linux-gnu=$(CC)\n-CXX_i586-unknown-linux-gnu=$(CXX)\n-CPP_i586-unknown-linux-gnu=$(CPP)\n-AR_i586-unknown-linux-gnu=$(AR)\n-CFG_LIB_NAME_i586-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_i586-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_i586-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_i586-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i586-unknown-linux-gnu := -m32 $(CFLAGS) -march=pentium -Wa,-mrelax-relocations=no\n-CFG_GCCISH_CFLAGS_i586-unknown-linux-gnu :=  -g -fPIC -m32 $(CFLAGS) -march=pentium -Wa,-mrelax-relocations=no\n-CFG_GCCISH_CXXFLAGS_i586-unknown-linux-gnu := -fno-rtti $(CXXFLAGS) -march=pentium\n-CFG_GCCISH_LINK_FLAGS_i586-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m32\n-CFG_GCCISH_DEF_FLAG_i586-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_i586-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_i586-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_i586-unknown-linux-gnu =\n-CFG_WINDOWSY_i586-unknown-linux-gnu :=\n-CFG_UNIXY_i586-unknown-linux-gnu := 1\n-CFG_LDPATH_i586-unknown-linux-gnu :=\n-CFG_RUN_i586-unknown-linux-gnu=$(2)\n-CFG_RUN_TARG_i586-unknown-linux-gnu=$(call CFG_RUN_i586-unknown-linux-gnu,,$(2))\n-CFG_GNU_TRIPLE_i586-unknown-linux-gnu := i586-unknown-linux-gnu"}, {"sha": "e4b3431e8b67f0256916445fafa712ffd94f3253", "filename": "mk/cfg/i686-apple-darwin.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-apple-darwin.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-apple-darwin.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-apple-darwin.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,23 +0,0 @@\n-# i686-apple-darwin configuration\n-CC_i686-apple-darwin=$(CC)\n-CXX_i686-apple-darwin=$(CXX)\n-CPP_i686-apple-darwin=$(CPP)\n-AR_i686-apple-darwin=$(AR)\n-CFG_LIB_NAME_i686-apple-darwin=lib$(1).dylib\n-CFG_STATIC_LIB_NAME_i686-apple-darwin=lib$(1).a\n-CFG_LIB_GLOB_i686-apple-darwin=lib$(1)-*.dylib\n-CFG_LIB_DSYM_GLOB_i686-apple-darwin=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i686-apple-darwin := -m32 -arch i386 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-apple-darwin :=  -g -fPIC -m32 -arch i386 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_i686-apple-darwin := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_i686-apple-darwin := -dynamiclib -pthread  -framework CoreServices -m32\n-CFG_GCCISH_DEF_FLAG_i686-apple-darwin := -Wl,-exported_symbols_list,\n-CFG_LLC_FLAGS_i686-apple-darwin :=\n-CFG_INSTALL_NAME_i686-apple-darwin = -Wl,-install_name,@rpath/$(1)\n-CFG_EXE_SUFFIX_i686-apple-darwin :=\n-CFG_WINDOWSY_i686-apple-darwin :=\n-CFG_UNIXY_i686-apple-darwin := 1\n-CFG_LDPATH_i686-apple-darwin :=\n-CFG_RUN_i686-apple-darwin=$(2)\n-CFG_RUN_TARG_i686-apple-darwin=$(call CFG_RUN_i686-apple-darwin,,$(2))\n-CFG_GNU_TRIPLE_i686-apple-darwin := i686-apple-darwin"}, {"sha": "2843a8e9be53f98e15bc73e2dd25c90b836f3b6e", "filename": "mk/cfg/i686-linux-android.mk", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-linux-android.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-linux-android.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-linux-android.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,25 +0,0 @@\n-# i686-linux-android configuration\n-CC_i686-linux-android=$(CFG_I686_LINUX_ANDROID_NDK)/bin/i686-linux-android-gcc\n-CXX_i686-linux-android=$(CFG_I686_LINUX_ANDROID_NDK)/bin/i686-linux-android-g++\n-CPP_i686-linux-android=$(CFG_I686_LINUX_ANDROID_NDK)/bin/i686-linux-android-gcc -E\n-AR_i686-linux-android=$(CFG_I686_LINUX_ANDROID_NDK)/bin/i686-linux-android-ar\n-CFG_LIB_NAME_i686-linux-android=lib$(1).so\n-CFG_STATIC_LIB_NAME_i686-linux-android=lib$(1).a\n-CFG_LIB_GLOB_i686-linux-android=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_i686-linux-android=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i686-linux-android := -D__i686__ -DANDROID -D__ANDROID__ $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-linux-android := -Wall -g -fPIC -D__i686__ -DANDROID -D__ANDROID__ $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_i686-linux-android := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_i686-linux-android := -shared -fPIC -ldl -g -lm -lsupc++\n-CFG_GCCISH_DEF_FLAG_i686-linux-android := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_i686-linux-android :=\n-CFG_INSTALL_NAME_i686-linux-android =\n-CFG_EXE_SUFFIX_i686-linux-android :=\n-CFG_WINDOWSY_i686-linux-android :=\n-CFG_UNIXY_i686-linux-android := 1\n-CFG_LDPATH_i686-linux-android :=\n-CFG_RUN_i686-linux-android=\n-CFG_RUN_TARG_i686-linux-android=\n-RUSTC_FLAGS_i686-linux-android :=\n-RUSTC_CROSS_FLAGS_i686-linux-android :=\n-CFG_GNU_TRIPLE_i686-linux-android := i686-linux-android"}, {"sha": "50c2b8c98acd3c130d221dfdfc327f165b960036", "filename": "mk/cfg/i686-pc-windows-gnu.mk", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-pc-windows-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-pc-windows-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-pc-windows-gnu.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,27 +0,0 @@\n-# i686-pc-windows-gnu configuration\n-CROSS_PREFIX_i686-pc-windows-gnu=i686-w64-mingw32-\n-CC_i686-pc-windows-gnu=gcc\n-CXX_i686-pc-windows-gnu=g++\n-CPP_i686-pc-windows-gnu=gcc -E\n-AR_i686-pc-windows-gnu=ar\n-CFG_LIB_NAME_i686-pc-windows-gnu=$(1).dll\n-CFG_STATIC_LIB_NAME_i686-pc-windows-gnu=$(1).lib\n-CFG_LIB_GLOB_i686-pc-windows-gnu=$(1)-*.dll\n-CFG_LIB_DSYM_GLOB_i686-pc-windows-gnu=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i686-pc-windows-gnu := -march=i686 -m32 -D_WIN32_WINNT=0x0600 -D__USE_MINGW_ANSI_STDIO=1 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-pc-windows-gnu :=  -g -m32 -D_WIN32_WINNT=0x0600 -D__USE_MINGW_ANSI_STDIO=1 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_i686-pc-windows-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_i686-pc-windows-gnu := -shared -g -m32\n-CFG_GCCISH_DEF_FLAG_i686-pc-windows-gnu :=\n-CFG_LLC_FLAGS_i686-pc-windows-gnu :=\n-CFG_INSTALL_NAME_i686-pc-windows-gnu =\n-CFG_EXE_SUFFIX_i686-pc-windows-gnu := .exe\n-CFG_WINDOWSY_i686-pc-windows-gnu := 1\n-CFG_UNIXY_i686-pc-windows-gnu :=\n-CFG_LDPATH_i686-pc-windows-gnu :=\n-CFG_RUN_i686-pc-windows-gnu=$(2)\n-CFG_RUN_TARG_i686-pc-windows-gnu=$(call CFG_RUN_i686-pc-windows-gnu,,$(2))\n-CFG_GNU_TRIPLE_i686-pc-windows-gnu := i686-w64-mingw32\n-CFG_THIRD_PARTY_OBJECTS_i686-pc-windows-gnu := crt2.o dllcrt2.o\n-CFG_INSTALLED_OBJECTS_i686-pc-windows-gnu := crt2.o dllcrt2.o rsbegin.o rsend.o\n-CFG_RUSTRT_HAS_STARTUP_OBJS_i686-pc-windows-gnu := 1"}, {"sha": "b0289b9892e206244e101afc858c28349a403f16", "filename": "mk/cfg/i686-pc-windows-msvc.mk", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-pc-windows-msvc.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,28 +0,0 @@\n-# i686-pc-windows-msvc configuration\n-CC_i686-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n-LINK_i686-pc-windows-msvc=$(CFG_MSVC_LINK_i386)\n-CXX_i686-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n-CPP_i686-pc-windows-msvc=$(CFG_MSVC_CL_i386)\n-AR_i686-pc-windows-msvc=$(CFG_MSVC_LIB_i386)\n-CFG_LIB_NAME_i686-pc-windows-msvc=$(1).dll\n-CFG_STATIC_LIB_NAME_i686-pc-windows-msvc=$(1).lib\n-CFG_LIB_GLOB_i686-pc-windows-msvc=$(1)-*.{dll,lib}\n-CFG_LIB_DSYM_GLOB_i686-pc-windows-msvc=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i686-pc-windows-msvc :=\n-CFG_GCCISH_CFLAGS_i686-pc-windows-msvc := -MD -nologo\n-CFG_GCCISH_CXXFLAGS_i686-pc-windows-msvc := -MD -nologo\n-CFG_GCCISH_LINK_FLAGS_i686-pc-windows-msvc :=\n-CFG_GCCISH_DEF_FLAG_i686-pc-windows-msvc :=\n-CFG_LLC_FLAGS_i686-pc-windows-msvc :=\n-CFG_INSTALL_NAME_i686-pc-windows-msvc =\n-CFG_EXE_SUFFIX_i686-pc-windows-msvc := .exe\n-CFG_WINDOWSY_i686-pc-windows-msvc := 1\n-CFG_UNIXY_i686-pc-windows-msvc :=\n-CFG_LDPATH_i686-pc-windows-msvc :=\n-CFG_RUN_i686-pc-windows-msvc=$(2)\n-CFG_RUN_TARG_i686-pc-windows-msvc=$(call CFG_RUN_i686-pc-windows-msvc,,$(2))\n-CFG_GNU_TRIPLE_i686-pc-windows-msvc := i686-pc-win32\n-\n-# Currently the build system is not configured to build jemalloc\n-# with MSVC, so we omit this optional dependency.\n-CFG_DISABLE_JEMALLOC_i686-pc-windows-msvc := 1"}, {"sha": "a9d4446d5d49b5048060977cb1585d62e3b7b77a", "filename": "mk/cfg/i686-unknown-freebsd.mk", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-unknown-freebsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-unknown-freebsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-freebsd.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,22 +0,0 @@\n-# i686-unknown-freebsd configuration\n-CC_i686-unknown-freebsd=$(CC)\n-CXX_i686-unknown-freebsd=$(CXX)\n-CPP_i686-unknown-freebsd=$(CPP)\n-AR_i686-unknown-freebsd=$(AR)\n-CFG_LIB_NAME_i686-unknown-freebsd=lib$(1).so\n-CFG_STATIC_LIB_NAME_i686-unknown-freebsd=lib$(1).a\n-CFG_LIB_GLOB_i686-unknown-freebsd=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_i686-unknown-freebsd=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i686-unknown-freebsd := -m32 -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-unknown-freebsd :=  -g -fPIC -m32 -arch i386 -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_i686-unknown-freebsd := -m32 -shared -fPIC -g -pthread -lrt\n-CFG_GCCISH_DEF_FLAG_i686-unknown-freebsd := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_i686-unknown-freebsd :=\n-CFG_INSTALL_NAME_i686-unknown-freebsd =\n-CFG_EXE_SUFFIX_i686-unknown-freebsd :=\n-CFG_WINDOWSY_i686-unknown-freebsd :=\n-CFG_UNIXY_i686-unknown-freebsd := 1\n-CFG_LDPATH_i686-unknown-freebsd :=\n-CFG_RUN_i686-unknown-freebsd=$(2)\n-CFG_RUN_TARG_i686-unknown-freebsd=$(call CFG_RUN_i686-unknown-freebsd,,$(2))\n-CFG_GNU_TRIPLE_i686-unknown-freebsd := i686-unknown-freebsd"}, {"sha": "cbacbff070e881c38fa1eb95fd365097bd3c06a3", "filename": "mk/cfg/i686-unknown-haiku.mk", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-unknown-haiku.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-unknown-haiku.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-haiku.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,27 +0,0 @@\n-# i686-unknown-haiku configuration\n-CROSS_PREFIX_i686-unknown-haiku=i586-pc-haiku-\n-CC_i686-unknown-haiku=$(CC)\n-CXX_i686-unknown-haiku=$(CXX)\n-CPP_i686-unknown-haiku=$(CPP)\n-AR_i686-unknown-haiku=$(AR)\n-CFG_LIB_NAME_i686-unknown-haiku=lib$(1).so\n-CFG_STATIC_LIB_NAME_i686-unknown-haiku=lib$(1).a\n-CFG_LIB_GLOB_i686-unknown-haiku=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_i686-unknown-haiku=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_i686-unknown-haiku := -m32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-unknown-haiku := -Wall -Werror -g -fPIC -m32 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_i686-unknown-haiku := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_i686-unknown-haiku := -shared -fPIC -ldl -pthread  -lrt -g -m32\n-CFG_GCCISH_PRE_LIB_FLAGS_i686-unknown-haiku := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_i686-unknown-haiku := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_i686-unknown-haiku := .linux.def\n-CFG_LLC_FLAGS_i686-unknown-haiku :=\n-CFG_INSTALL_NAME_i686-unknown-haiku =\n-CFG_EXE_SUFFIX_i686-unknown-haiku =\n-CFG_WINDOWSY_i686-unknown-haiku :=\n-CFG_UNIXY_i686-unknown-haiku := 1\n-CFG_PATH_MUNGE_i686-unknown-haiku := true\n-CFG_LDPATH_i686-unknown-haiku :=\n-CFG_RUN_i686-unknown-haiku=$(2)\n-CFG_RUN_TARG_i686-unknown-haiku=$(call CFG_RUN_i686-unknown-haiku,,$(2))\n-CFG_GNU_TRIPLE_i686-unknown-haiku := i686-unknown-haiku"}, {"sha": "9e2312008a10ad6916ea34dbe5fb9b32b5d7cb6b", "filename": "mk/cfg/i686-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-linux-gnu.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,23 +0,0 @@\n-# i686-unknown-linux-gnu configuration\n-CC_i686-unknown-linux-gnu=$(CC)\n-CXX_i686-unknown-linux-gnu=$(CXX)\n-CPP_i686-unknown-linux-gnu=$(CPP)\n-AR_i686-unknown-linux-gnu=$(AR)\n-CFG_LIB_NAME_i686-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_i686-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_i686-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_i686-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i686-unknown-linux-gnu := -m32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-unknown-linux-gnu :=  -g -fPIC -m32 $(CFLAGS) -march=i686\n-CFG_GCCISH_CXXFLAGS_i686-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_i686-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m32\n-CFG_GCCISH_DEF_FLAG_i686-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_i686-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_i686-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_i686-unknown-linux-gnu =\n-CFG_WINDOWSY_i686-unknown-linux-gnu :=\n-CFG_UNIXY_i686-unknown-linux-gnu := 1\n-CFG_LDPATH_i686-unknown-linux-gnu :=\n-CFG_RUN_i686-unknown-linux-gnu=$(2)\n-CFG_RUN_TARG_i686-unknown-linux-gnu=$(call CFG_RUN_i686-unknown-linux-gnu,,$(2))\n-CFG_GNU_TRIPLE_i686-unknown-linux-gnu := i686-unknown-linux-gnu"}, {"sha": "d6c1ce8967a20f66fc5823346ee7d64a116dc5d3", "filename": "mk/cfg/i686-unknown-linux-musl.mk", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-unknown-linux-musl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-unknown-linux-musl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-linux-musl.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,29 +0,0 @@\n-# i686-unknown-linux-musl configuration\n-CC_i686-unknown-linux-musl=$(CFG_MUSL_ROOT)/bin/musl-gcc\n-CXX_i686-unknown-linux-musl=$(CXX)\n-CPP_i686-unknown-linux-musl=$(CFG_MUSL_ROOT)/bin/musl-gcc -E\n-AR_i686-unknown-linux-musl=$(AR)\n-CFG_INSTALL_ONLY_RLIB_i686-unknown-linux-musl = 1\n-CFG_LIB_NAME_i686-unknown-linux-musl=lib$(1).so\n-CFG_STATIC_LIB_NAME_i686-unknown-linux-musl=lib$(1).a\n-CFG_LIB_GLOB_i686-unknown-linux-musl=lib$(1)-*.so\n-CFG_JEMALLOC_CFLAGS_i686-unknown-linux-musl := -m32 -Wl,-melf_i386 -Wa,-mrelax-relocations=no\n-CFG_GCCISH_CFLAGS_i686-unknown-linux-musl :=  -g -fPIC -m32 -Wl,-melf_i386 -Wa,-mrelax-relocations=no\n-CFG_GCCISH_CXXFLAGS_i686-unknown-linux-musl :=\n-CFG_GCCISH_LINK_FLAGS_i686-unknown-linux-musl :=\n-CFG_GCCISH_DEF_FLAG_i686-unknown-linux-musl :=\n-CFG_LLC_FLAGS_i686-unknown-linux-musl :=\n-CFG_INSTALL_NAME_i686-unknown-linux-musl =\n-CFG_EXE_SUFFIX_i686-unknown-linux-musl =\n-CFG_WINDOWSY_i686-unknown-linux-musl :=\n-CFG_UNIXY_i686-unknown-linux-musl := 1\n-CFG_LDPATH_i686-unknown-linux-musl :=\n-CFG_RUN_i686-unknown-linux-musl=$(2)\n-CFG_RUN_TARG_i686-unknown-linux-musl=$(call CFG_RUN_i686-unknown-linux-musl,,$(2))\n-CFG_GNU_TRIPLE_i686-unknown-linux-musl := i686-unknown-linux-musl\n-CFG_THIRD_PARTY_OBJECTS_i686-unknown-linux-musl := crt1.o crti.o crtn.o\n-CFG_INSTALLED_OBJECTS_i686-unknown-linux-musl := crt1.o crti.o crtn.o\n-\n-NATIVE_DEPS_libc_T_i686-unknown-linux-musl += libc.a\n-NATIVE_DEPS_std_T_i686-unknown-linux-musl += crt1.o crti.o crtn.o\n-NATIVE_DEPS_unwind_T_i686-unknown-linux-musl += libunwind.a"}, {"sha": "b839937c9768b3c7ee151be4295ac9b4d7ca68d7", "filename": "mk/cfg/i686-unknown-openbsd.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-unknown-openbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fi686-unknown-openbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-openbsd.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,24 +0,0 @@\n-# i686-unknown-openbsd configuration\n-CC_i686-unknown-openbsd=$(CC)\n-CXX_i686-unknown-openbsd=$(CXX)\n-CPP_i686-unknown-openbsd=$(CPP)\n-AR_i686-unknown-openbsd=$(AR)\n-CFG_LIB_NAME_i686-unknown-openbsd=lib$(1).so\n-CFG_STATIC_LIB_NAME_i686-unknown-openbsd=lib$(1).a\n-CFG_LIB_GLOB_i686-unknown-openbsd=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_i686-unknown-openbsd=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i686-unknown-openbsd := -m32 -I/usr/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i686-unknown-openbsd :=  -g -fPIC -m32 -I/usr/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_i686-unknown-openbsd := -shared -fPIC -g -pthread -m32\n-CFG_GCCISH_DEF_FLAG_i686-unknown-openbsd := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_i686-unknown-openbsd :=\n-CFG_INSTALL_NAME_i686-unknown-openbsd =\n-CFG_EXE_SUFFIX_i686-unknown-openbsd :=\n-CFG_WINDOWSY_i686-unknown-openbsd :=\n-CFG_UNIXY_i686-unknown-openbsd := 1\n-CFG_LDPATH_i686-unknown-openbsd :=\n-CFG_RUN_i686-unknown-openbsd=$(2)\n-CFG_RUN_TARG_i686-unknown-openbsd=$(call CFG_RUN_i686-unknown-openbsd,,$(2))\n-CFG_GNU_TRIPLE_i686-unknown-openbsd := i686-unknown-openbsd\n-RUSTC_FLAGS_i686-unknown-openbsd=-C linker=$(call FIND_COMPILER,$(CC))\n-CFG_DISABLE_JEMALLOC_i686-unknown-openbsd := 1"}, {"sha": "a73367291746f5b7d84da643727fee49abf7cef3", "filename": "mk/cfg/le32-unknown-nacl.mk", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fle32-unknown-nacl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fle32-unknown-nacl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fle32-unknown-nacl.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,40 +0,0 @@\n-# le32-unknown-nacl (portable, PNaCl)\n-ifneq ($(CFG_NACL_CROSS_PATH),)\n-\n-CC_le32-unknown-nacl=$(shell $(CFG_PYTHON) $(CFG_NACL_CROSS_PATH)/tools/nacl_config.py -t pnacl --tool cc)\n-CXX_le32-unknown-nacl=$(shell $(CFG_PYTHON) $(CFG_NACL_CROSS_PATH)/tools/nacl_config.py -t pnacl --tool c++)\n-CPP_le32-unknown-nacl=$(CXX_le32-unknown-nacl) -E\n-AR_le32-unknown-nacl=$(shell $(CFG_PYTHON) $(CFG_NACL_CROSS_PATH)/tools/nacl_config.py -t pnacl --tool ar)\n-\n-CFG_PNACL_TOOLCHAIN := $(abspath $(dir $(AR_le32-unknown-nacl)/../))\n-\n-# Note: pso's aren't supported by PNaCl.\n-CFG_LIB_NAME_le32-unknown-nacl=lib$(1).pso\n-CFG_STATIC_LIB_NAME_le32-unknown-nacl=lib$(1).a\n-CFG_LIB_GLOB_le32-unknown-nacl=lib$(1)-*.pso\n-CFG_LIB_DSYM_GLOB_le32-unknown-nacl=lib$(1)-*.dylib.dSYM\n-CFG_GCCISH_CFLAGS_le32-unknown-nacl := -Wall -Wno-unused-variable -Wno-unused-value $(shell $(CFG_PYTHON) $(CFG_NACL_CROSS_PATH)/tools/nacl_config.py -t pnacl --cflags) -D_YUGA_LITTLE_ENDIAN=1 -D_YUGA_BIG_ENDIAN=0\n-CFG_GCCISH_CXXFLAGS_le32-unknown-nacl := -stdlib=libc++ $(CFG_GCCISH_CFLAGS_le32-unknown-nacl)\n-CFG_GCCISH_LINK_FLAGS_le32-unknown-nacl := -static -pthread -lm\n-CFG_GCCISH_DEF_FLAG_le32-unknown-nacl := -Wl,--export-dynamic,--dynamic-list=\n-CFG_GCCISH_PRE_LIB_FLAGS_le32-unknown-nacl := -Wl,-no-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_le32-unknown-nacl :=\n-CFG_DEF_SUFFIX_le32-unknown-nacl := .le32.nacl.def\n-CFG_INSTALL_NAME_le32-unknown-nacl =\n-CFG_EXE_SUFFIX_le32-unknown-nacl = .pexe\n-CFG_WINDOWSY_le32-unknown-nacl :=\n-CFG_UNIXY_le32-unknown-nacl := 1\n-CFG_NACLY_le32-unknown-nacl := 1\n-CFG_PATH_MUNGE_le32-unknown-nacl := true\n-CFG_LDPATH_le32-unknown-nacl :=\n-CFG_RUN_le32-unknown-nacl=$(2)\n-CFG_RUN_TARG_le32-unknown-nacl=$(call CFG_RUN_le32-unknown-nacl,,$(2))\n-RUSTC_FLAGS_le32-unknown-nacl:=\n-RUSTC_CROSS_FLAGS_le32-unknown-nacl=-L $(CFG_NACL_CROSS_PATH)/lib/pnacl/Release -L $(CFG_PNACL_TOOLCHAIN)/lib/clang/3.7.0/lib/le32-nacl -L $(CFG_PNACL_TOOLCHAIN)/le32-nacl/usr/lib -L $(CFG_PNACL_TOOLCHAIN)/le32-nacl/lib\n-CFG_GNU_TRIPLE_le32-unknown-nacl := le32-unknown-nacl\n-\n-# strdup isn't defined unless -std=gnu++11 is used :/\n-LLVM_FILTER_CXXFLAGS_le32-unknown-nacl := -std=c++11\n-LLVM_EXTRA_CXXFLAGS_le32-unknown-nacl := -std=gnu++11\n-\n-endif"}, {"sha": "0783a4c17a4f2153393e5f17171e78793c2e6f94", "filename": "mk/cfg/mips-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fmips-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fmips-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmips-unknown-linux-gnu.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,24 +0,0 @@\n-# mips-unknown-linux-gnu configuration\n-CC_mips-unknown-linux-gnu=mips-linux-gnu-gcc\n-CXX_mips-unknown-linux-gnu=mips-linux-gnu-g++\n-CPP_mips-unknown-linux-gnu=mips-linux-gnu-gcc -E\n-AR_mips-unknown-linux-gnu=mips-linux-gnu-ar\n-CFG_LIB_NAME_mips-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_mips-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_mips-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_mips-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_mips-unknown-linux-gnu := -mips32r2 -mabi=32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_mips-unknown-linux-gnu := -Wall -g -fPIC -mips32r2 -mabi=32 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_mips-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_mips-unknown-linux-gnu := -shared -fPIC -g -mips32r2 -mabi=32\n-CFG_GCCISH_DEF_FLAG_mips-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_mips-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_mips-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_mips-unknown-linux-gnu :=\n-CFG_WINDOWSY_mips-unknown-linux-gnu :=\n-CFG_UNIXY_mips-unknown-linux-gnu := 1\n-CFG_LDPATH_mips-unknown-linux-gnu :=\n-CFG_RUN_mips-unknown-linux-gnu=\n-CFG_RUN_TARG_mips-unknown-linux-gnu=\n-RUSTC_FLAGS_mips-unknown-linux-gnu :=\n-CFG_GNU_TRIPLE_mips-unknown-linux-gnu := mips-unknown-linux-gnu"}, {"sha": "33528b986f6e574d485ef99ee2c630753621d1bb", "filename": "mk/cfg/mips-unknown-linux-musl.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fmips-unknown-linux-musl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fmips-unknown-linux-musl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmips-unknown-linux-musl.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,24 +0,0 @@\n-# mips-unknown-linux-musl configuration\n-CC_mips-unknown-linux-musl=mips-linux-musl-gcc\n-CXX_mips-unknown-linux-musl=mips-linux-musl-g++\n-CPP_mips-unknown-linux-musl=mips-linux-musl-gcc -E\n-AR_mips-unknown-linux-musl=mips-linux-musl-ar\n-CFG_LIB_NAME_mips-unknown-linux-musl=lib$(1).so\n-CFG_STATIC_LIB_NAME_mips-unknown-linux-musl=lib$(1).a\n-CFG_LIB_GLOB_mips-unknown-linux-musl=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_mips-unknown-linux-musl=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_mips-unknown-linux-musl := -mips32r2 -msoft-float -mabi=32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_mips-unknown-linux-musl := -Wall -g -fPIC -mips32r2 -msoft-float -mabi=32 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_mips-unknown-linux-musl := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_mips-unknown-linux-musl := -shared -fPIC -g -mips32r2 -msoft-float -mabi=32\n-CFG_GCCISH_DEF_FLAG_mips-unknown-linux-musl := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_mips-unknown-linux-musl :=\n-CFG_INSTALL_NAME_mips-unknown-linux-musl =\n-CFG_EXE_SUFFIX_mips-unknown-linux-musl =\n-CFG_WINDOWSY_mips-unknown-linux-musl :=\n-CFG_UNIXY_mips-unknown-linux-musl := 1\n-CFG_LDPATH_mips-unknown-linux-musl :=\n-CFG_RUN_mips-unknown-linux-musl=\n-CFG_RUN_TARG_mips-unknown-linux-musl=\n-RUSTC_FLAGS_mips-unknown-linux-musl :=\n-CFG_GNU_TRIPLE_mips-unknown-linux-musl := mips-unknown-linux-musl"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/mips-unknown-linux-uclibc.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fmips-unknown-linux-uclibc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fmips-unknown-linux-uclibc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmips-unknown-linux-uclibc.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/mips64-unknown-linux-gnuabi64.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fmips64-unknown-linux-gnuabi64.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fmips64-unknown-linux-gnuabi64.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmips64-unknown-linux-gnuabi64.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/mips64el-unknown-linux-gnuabi64.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fmips64el-unknown-linux-gnuabi64.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fmips64el-unknown-linux-gnuabi64.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmips64el-unknown-linux-gnuabi64.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "f15a086b64e8892550a976a120baf031e8d81723", "filename": "mk/cfg/mipsel-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fmipsel-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fmipsel-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmipsel-unknown-linux-gnu.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,24 +0,0 @@\n-# mipsel-unknown-linux-gnu configuration\n-CC_mipsel-unknown-linux-gnu=mipsel-linux-gnu-gcc\n-CXX_mipsel-unknown-linux-gnu=mipsel-linux-gnu-g++\n-CPP_mipsel-unknown-linux-gnu=mipsel-linux-gnu-gcc\n-AR_mipsel-unknown-linux-gnu=mipsel-linux-gnu-ar\n-CFG_LIB_NAME_mipsel-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_mipsel-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_mipsel-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_mipsel-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_mipsel-unknown-linux-gnu := -mips32 -mabi=32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_mipsel-unknown-linux-gnu := -Wall -g -fPIC -mips32 -mabi=32 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_mipsel-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_mipsel-unknown-linux-gnu := -shared -fPIC -g -mips32\n-CFG_GCCISH_DEF_FLAG_mipsel-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_mipsel-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_mipsel-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_mipsel-unknown-linux-gnu :=\n-CFG_WINDOWSY_mipsel-unknown-linux-gnu :=\n-CFG_UNIXY_mipsel-unknown-linux-gnu := 1\n-CFG_LDPATH_mipsel-unknown-linux-gnu :=\n-CFG_RUN_mipsel-unknown-linux-gnu=\n-CFG_RUN_TARG_mipsel-unknown-linux-gnu=\n-RUSTC_FLAGS_mipsel-unknown-linux-gnu :=\n-CFG_GNU_TRIPLE_mipsel-unknown-linux-gnu := mipsel-unknown-linux-gnu"}, {"sha": "db836b81c5fd56d12dabdd32e735be0e3e867b0b", "filename": "mk/cfg/mipsel-unknown-linux-musl.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fmipsel-unknown-linux-musl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fmipsel-unknown-linux-musl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmipsel-unknown-linux-musl.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,24 +0,0 @@\n-# mipsel-unknown-linux-musl configuration\n-CC_mipsel-unknown-linux-musl=mipsel-linux-musl-gcc\n-CXX_mipsel-unknown-linux-musl=mipsel-linux-musl-g++\n-CPP_mipsel-unknown-linux-musl=mipsel-linux-musl-gcc\n-AR_mipsel-unknown-linux-musl=mipsel-linux-musl-ar\n-CFG_LIB_NAME_mipsel-unknown-linux-musl=lib$(1).so\n-CFG_STATIC_LIB_NAME_mipsel-unknown-linux-musl=lib$(1).a\n-CFG_LIB_GLOB_mipsel-unknown-linux-musl=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_mipsel-unknown-linux-musl=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_mipsel-unknown-linux-musl := -mips32 -mabi=32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_mipsel-unknown-linux-musl := -Wall -g -fPIC -mips32 -mabi=32 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_mipsel-unknown-linux-musl := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_mipsel-unknown-linux-musl := -shared -fPIC -g -mips32\n-CFG_GCCISH_DEF_FLAG_mipsel-unknown-linux-musl := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_mipsel-unknown-linux-musl :=\n-CFG_INSTALL_NAME_mipsel-unknown-linux-musl =\n-CFG_EXE_SUFFIX_mipsel-unknown-linux-musl :=\n-CFG_WINDOWSY_mipsel-unknown-linux-musl :=\n-CFG_UNIXY_mipsel-unknown-linux-musl := 1\n-CFG_LDPATH_mipsel-unknown-linux-musl :=\n-CFG_RUN_mipsel-unknown-linux-musl=\n-CFG_RUN_TARG_mipsel-unknown-linux-musl=\n-RUSTC_FLAGS_mipsel-unknown-linux-musl :=\n-CFG_GNU_TRIPLE_mipsel-unknown-linux-musl := mipsel-unknown-linux-musl"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/mipsel-unknown-linux-uclibc.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fmipsel-unknown-linux-uclibc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fmipsel-unknown-linux-uclibc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fmipsel-unknown-linux-uclibc.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "9c5720de4b310dc8d44f9691d6382df55a456987", "filename": "mk/cfg/powerpc-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fpowerpc-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fpowerpc-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fpowerpc-unknown-linux-gnu.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,24 +0,0 @@\n-# powerpc-unknown-linux-gnu configuration\n-CROSS_PREFIX_powerpc-unknown-linux-gnu=powerpc-linux-gnu-\n-CC_powerpc-unknown-linux-gnu=$(CC)\n-CXX_powerpc-unknown-linux-gnu=$(CXX)\n-CPP_powerpc-unknown-linux-gnu=$(CPP)\n-AR_powerpc-unknown-linux-gnu=$(AR)\n-CFG_LIB_NAME_powerpc-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_powerpc-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_powerpc-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_powerpc-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_powerpc-unknown-linux-gnu := -m32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_powerpc-unknown-linux-gnu :=  -g -fPIC -m32 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_powerpc-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_powerpc-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m32\n-CFG_GCCISH_DEF_FLAG_powerpc-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_powerpc-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_powerpc-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_powerpc-unknown-linux-gnu =\n-CFG_WINDOWSY_powerpc-unknown-linux-gnu :=\n-CFG_UNIXY_powerpc-unknown-linux-gnu := 1\n-CFG_LDPATH_powerpc-unknown-linux-gnu :=\n-CFG_RUN_powerpc-unknown-linux-gnu=$(2)\n-CFG_RUN_TARG_powerpc-unknown-linux-gnu=$(call CFG_RUN_powerpc-unknown-linux-gnu,,$(2))\n-CFG_GNU_TRIPLE_powerpc-unknown-linux-gnu := powerpc-unknown-linux-gnu"}, {"sha": "389bb6f0cab492e02110d3f6f1bc74a33faa3f4b", "filename": "mk/cfg/powerpc64-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fpowerpc64-unknown-linux-gnu.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,25 +0,0 @@\n-# powerpc64-unknown-linux-gnu configuration\n-CROSS_PREFIX_powerpc64-unknown-linux-gnu=powerpc-linux-gnu-\n-CC_powerpc64-unknown-linux-gnu=$(CC)\n-CXX_powerpc64-unknown-linux-gnu=$(CXX)\n-CPP_powerpc64-unknown-linux-gnu=$(CPP)\n-AR_powerpc64-unknown-linux-gnu=$(AR)\n-CFG_LIB_NAME_powerpc64-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_powerpc64-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_powerpc64-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_powerpc64-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_powerpc64-unknown-linux-gnu := -m64\n-CFG_CFLAGS_powerpc64-unknown-linux-gnu := -m64 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_powerpc64-unknown-linux-gnu :=  -g -fPIC -m64 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_powerpc64-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_powerpc64-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n-CFG_GCCISH_DEF_FLAG_powerpc64-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_powerpc64-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_powerpc64-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_powerpc64-unknown-linux-gnu =\n-CFG_WINDOWSY_powerpc64-unknown-linux-gnu :=\n-CFG_UNIXY_powerpc64-unknown-linux-gnu := 1\n-CFG_LDPATH_powerpc64-unknown-linux-gnu :=\n-CFG_RUN_powerpc64-unknown-linux-gnu=$(2)\n-CFG_RUN_TARG_powerpc64-unknown-linux-gnu=$(call CFG_RUN_powerpc64-unknown-linux-gnu,,$(2))\n-CFG_GNU_TRIPLE_powerpc64-unknown-linux-gnu := powerpc64-unknown-linux-gnu"}, {"sha": "6884fa11e7412ceedd76d40cf4a5e44e15143c49", "filename": "mk/cfg/powerpc64le-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fpowerpc64le-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fpowerpc64le-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fpowerpc64le-unknown-linux-gnu.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,24 +0,0 @@\n-# powerpc64le-unknown-linux-gnu configuration\n-CROSS_PREFIX_powerpc64le-unknown-linux-gnu=powerpc64le-linux-gnu-\n-CC_powerpc64le-unknown-linux-gnu=$(CC)\n-CXX_powerpc64le-unknown-linux-gnu=$(CXX)\n-CPP_powerpc64le-unknown-linux-gnu=$(CPP)\n-AR_powerpc64le-unknown-linux-gnu=$(AR)\n-CFG_LIB_NAME_powerpc64le-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_powerpc64le-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_powerpc64le-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_powerpc64le-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_powerpc64le-unknown-linux-gnu := -m64 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_powerpc64le-unknown-linux-gnu :=  -g -fPIC -m64 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_powerpc64le-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_powerpc64le-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n-CFG_GCCISH_DEF_FLAG_powerpc64le-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_powerpc64le-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_powerpc64le-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_powerpc64le-unknown-linux-gnu =\n-CFG_WINDOWSY_powerpc64le-unknown-linux-gnu :=\n-CFG_UNIXY_powerpc64le-unknown-linux-gnu := 1\n-CFG_LDPATH_powerpc64le-unknown-linux-gnu :=\n-CFG_RUN_powerpc64le-unknown-linux-gnu=$(2)\n-CFG_RUN_TARG_powerpc64le-unknown-linux-gnu=$(call CFG_RUN_powerpc64le-unknown-linux-gnu,,$(2))\n-CFG_GNU_TRIPLE_powerpc64le-unknown-linux-gnu := powerpc64le-unknown-linux-gnu"}, {"sha": "eb1cb2329c4f35412029638a3d252ab4b0398c93", "filename": "mk/cfg/s390x-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fs390x-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fs390x-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fs390x-unknown-linux-gnu.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,24 +0,0 @@\n-# s390x-unknown-linux-gnu configuration\n-CROSS_PREFIX_s390x-unknown-linux-gnu=s390x-linux-gnu-\n-CC_s390x-unknown-linux-gnu=$(CC)\n-CXX_s390x-unknown-linux-gnu=$(CXX)\n-CPP_s390x-unknown-linux-gnu=$(CPP)\n-AR_s390x-unknown-linux-gnu=$(AR)\n-CFG_LIB_NAME_s390x-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_s390x-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_s390x-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_s390x-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_s390x-unknown-linux-gnu := -m64 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_s390x-unknown-linux-gnu :=  -g -fPIC -m64 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_s390x-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_s390x-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n-CFG_GCCISH_DEF_FLAG_s390x-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_s390x-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_s390x-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_s390x-unknown-linux-gnu =\n-CFG_WINDOWSY_s390x-unknown-linux-gnu :=\n-CFG_UNIXY_s390x-unknown-linux-gnu := 1\n-CFG_LDPATH_s390x-unknown-linux-gnu :=\n-CFG_RUN_s390x-unknown-linux-gnu=$(2)\n-CFG_RUN_TARG_s390x-unknown-linux-gnu=$(call CFG_RUN_s390x-unknown-linux-gnu,,$(2))\n-CFG_GNU_TRIPLE_s390x-unknown-linux-gnu := s390x-unknown-linux-gnu"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/sparc64-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fsparc64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fsparc64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fsparc64-unknown-linux-gnu.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "a2b01ba0537c7f78ff72eb87b01e7df996530b1a", "filename": "mk/cfg/sparc64-unknown-netbsd.mk", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fsparc64-unknown-netbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fsparc64-unknown-netbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fsparc64-unknown-netbsd.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,3 +0,0 @@\n-# This file is intentially left empty to indicate that, while this target is\n-# supported, it's not supported using plain GNU Make builds. Use a --rustbuild\n-# instead."}, {"sha": "997bdfbf03ab191af0de9d40c8de297709a3e0b1", "filename": "mk/cfg/wasm32-unknown-emscripten.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fwasm32-unknown-emscripten.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fwasm32-unknown-emscripten.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fwasm32-unknown-emscripten.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,24 +0,0 @@\n-# wasm32-unknown-emscripten configuration\n-CC_wasm32-unknown-emscripten=emcc\n-CXX_wasm32-unknown-emscripten=em++\n-CPP_wasm32-unknown-emscripten=$(CPP)\n-AR_wasm32-unknown-emscripten=emar\n-CFG_LIB_NAME_wasm32-unknown-emscripten=lib$(1).so\n-CFG_STATIC_LIB_NAME_wasm32-unknown-emscripten=lib$(1).a\n-CFG_LIB_GLOB_wasm32-unknown-emscripten=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_wasm32-unknown-emscripten=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_wasm32-unknown-emscripten := -m32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_wasm32-unknown-emscripten :=  -g -fPIC -m32 -s BINARYEN=1 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_wasm32-unknown-emscripten := -fno-rtti -s BINARYEN=1 $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_wasm32-unknown-emscripten := -shared -fPIC -ldl -pthread  -lrt -g -m32 -s BINARYEN=1\n-CFG_GCCISH_DEF_FLAG_wasm32-unknown-emscripten := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_wasm32-unknown-emscripten :=\n-CFG_INSTALL_NAME_wasm32-unknown-emscripten =\n-CFG_EXE_SUFFIX_wasm32-unknown-emscripten =\n-CFG_WINDOWSY_wasm32-unknown-emscripten :=\n-CFG_UNIXY_wasm32-unknown-emscripten := 1\n-CFG_LDPATH_wasm32-unknown-emscripten :=\n-CFG_RUN_wasm32-unknown-emscripten=$(2)\n-CFG_RUN_TARG_wasm32-unknown-emscripten=$(call CFG_RUN_wasm32-unknown-emscripten,,$(2))\n-CFG_GNU_TRIPLE_wasm32-unknown-emscripten := wasm32-unknown-emscripten\n-CFG_DISABLE_JEMALLOC_wasm32-unknown-emscripten := 1"}, {"sha": "8af47b671a8505a2727b7d69adfae00b23afed19", "filename": "mk/cfg/x86_64-apple-darwin.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-apple-darwin.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-apple-darwin.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-apple-darwin.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,23 +0,0 @@\n-# x86_64-apple-darwin configuration\n-CC_x86_64-apple-darwin=$(CC)\n-CXX_x86_64-apple-darwin=$(CXX)\n-CPP_x86_64-apple-darwin=$(CPP)\n-AR_x86_64-apple-darwin=$(AR)\n-CFG_LIB_NAME_x86_64-apple-darwin=lib$(1).dylib\n-CFG_STATIC_LIB_NAME_x86_64-apple-darwin=lib$(1).a\n-CFG_LIB_GLOB_x86_64-apple-darwin=lib$(1)-*.dylib\n-CFG_LIB_DSYM_GLOB_x86_64-apple-darwin=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-apple-darwin := -m64 -arch x86_64 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-apple-darwin :=  -g -fPIC -m64 -arch x86_64 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_x86_64-apple-darwin := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-apple-darwin := -dynamiclib -pthread  -framework CoreServices -m64\n-CFG_GCCISH_DEF_FLAG_x86_64-apple-darwin := -Wl,-exported_symbols_list,\n-CFG_LLC_FLAGS_x86_64-apple-darwin :=\n-CFG_INSTALL_NAME_x86_64-apple-darwin = -Wl,-install_name,@rpath/$(1)\n-CFG_EXE_SUFFIX_x86_64-apple-darwin :=\n-CFG_WINDOWSY_x86_64-apple-darwin :=\n-CFG_UNIXY_x86_64-apple-darwin := 1\n-CFG_LDPATH_x86_64-apple-darwin :=\n-CFG_RUN_x86_64-apple-darwin=$(2)\n-CFG_RUN_TARG_x86_64-apple-darwin=$(call CFG_RUN_x86_64-apple-darwin,,$(2))\n-CFG_GNU_TRIPLE_x86_64-apple-darwin := x86_64-apple-darwin"}, {"sha": "764cdc15996d0c5fe8fc93f8b0d1ca35bc949194", "filename": "mk/cfg/x86_64-apple-ios.mk", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-apple-ios.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,32 +0,0 @@\n-# x86_64-apple-ios configuration\n-CFG_SDK_NAME_x86_64-apple-ios := iphonesimulator\n-CFG_SDK_ARCHS_x86_64-apple-ios := x86_64\n-ifneq ($(findstring darwin,$(CFG_OSTYPE)),)\n-CFG_IOSSIM_SDK_x86_64-apple-ios := $(shell xcrun --show-sdk-path -sdk iphonesimulator 2>/dev/null)\n-CFG_IOSSIM_FLAGS_x86_64-apple-ios := -m64 -target x86_64-apple-ios -isysroot $(CFG_IOSSIM_SDK_x86_64-apple-ios) -mios-simulator-version-min=7.0\n-CC_x86_64-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang)\n-CXX_x86_64-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang++)\n-CPP_x86_64-apple-ios = $(shell xcrun -find -sdk iphonesimulator clang++)\n-AR_x86_64-apple-ios = $(shell xcrun -find -sdk iphonesimulator ar)\n-endif\n-CFG_LIB_NAME_x86_64-apple-ios = lib$(1).a\n-CFG_LIB_GLOB_x86_64-apple-ios = lib$(1)-*.a\n-CFG_INSTALL_ONLY_RLIB_x86_64-apple-ios = 1\n-CFG_STATIC_LIB_NAME_x86_64-apple-ios=lib$(1).a\n-CFG_LIB_DSYM_GLOB_x86_64-apple-ios = lib$(1)-*.a.dSYM\n-CFG_CFLAGS_x86_64-apple-ios := $(CFG_IOSSIM_FLAGS_x86_64-apple-ios)\n-CFG_JEMALLOC_CFLAGS_x86_64-apple-ios := $(CFG_IOSSIM_FLAGS_x86_64-apple-ios)\n-CFG_GCCISH_CFLAGS_x86_64-apple-ios :=  -fPIC $(CFG_IOSSIM_FLAGS_x86_64-apple-ios)\n-CFG_GCCISH_CXXFLAGS_x86_64-apple-ios := -fno-rtti $(CFG_IOSSIM_FLAGS_x86_64-apple-ios) -I$(CFG_IOSSIM_SDK_x86_64-apple-ios)/usr/include/c++/4.2.1\n-CFG_GCCISH_LINK_FLAGS_x86_64-apple-ios := -lpthread -Wl,-no_compact_unwind -m64 -Wl,-syslibroot $(CFG_IOSSIM_SDK_x86_64-apple-ios)\n-CFG_GCCISH_DEF_FLAG_x86_64-apple-ios := -Wl,-exported_symbols_list,\n-CFG_LLC_FLAGS_x86_64-apple-ios :=\n-CFG_INSTALL_NAME_x86_64-apple-ios = -Wl,-install_name,@rpath/$(1)\n-CFG_LIBUV_LINK_FLAGS_x86_64-apple-ios :=\n-CFG_EXE_SUFFIX_x86_64-apple-ios :=\n-CFG_WINDOWSY_x86_64-apple-ios :=\n-CFG_UNIXY_x86_64-apple-ios := 1\n-CFG_LDPATH_x86_64-apple-ios :=\n-CFG_RUN_x86_64-apple-ios = $(2)\n-CFG_RUN_TARG_x86_64-apple-ios = $(call CFG_RUN_x86_64-apple-ios,,$(2))\n-CFG_GNU_TRIPLE_i386-apple-ios := x86_64-apple-ios"}, {"sha": "82e7b23279fb5339c9fe773df72f26341132880c", "filename": "mk/cfg/x86_64-pc-windows-gnu.mk", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-pc-windows-gnu.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,27 +0,0 @@\n-# x86_64-pc-windows-gnu configuration\n-CROSS_PREFIX_x86_64-pc-windows-gnu=x86_64-w64-mingw32-\n-CC_x86_64-pc-windows-gnu=gcc\n-CXX_x86_64-pc-windows-gnu=g++\n-CPP_x86_64-pc-windows-gnu=gcc -E\n-AR_x86_64-pc-windows-gnu=ar\n-CFG_LIB_NAME_x86_64-pc-windows-gnu=$(1).dll\n-CFG_STATIC_LIB_NAME_x86_64-pc-windows-gnu=$(1).lib\n-CFG_LIB_GLOB_x86_64-pc-windows-gnu=$(1)-*.dll\n-CFG_LIB_DSYM_GLOB_x86_64-pc-windows-gnu=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-pc-windows-gnu := -m64 -D_WIN32_WINNT=0x0600 -D__USE_MINGW_ANSI_STDIO=1 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-pc-windows-gnu :=  -g -m64 -D_WIN32_WINNT=0x0600 -D__USE_MINGW_ANSI_STDIO=1 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_x86_64-pc-windows-gnu := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-pc-windows-gnu := -shared -g -m64\n-CFG_GCCISH_DEF_FLAG_x86_64-pc-windows-gnu :=\n-CFG_LLC_FLAGS_x86_64-pc-windows-gnu :=\n-CFG_INSTALL_NAME_x86_64-pc-windows-gnu =\n-CFG_EXE_SUFFIX_x86_64-pc-windows-gnu := .exe\n-CFG_WINDOWSY_x86_64-pc-windows-gnu := 1\n-CFG_UNIXY_x86_64-pc-windows-gnu :=\n-CFG_LDPATH_x86_64-pc-windows-gnu :=\n-CFG_RUN_x86_64-pc-windows-gnu=$(2)\n-CFG_RUN_TARG_x86_64-pc-windows-gnu=$(call CFG_RUN_x86_64-pc-windows-gnu,,$(2))\n-CFG_GNU_TRIPLE_x86_64-pc-windows-gnu := x86_64-w64-mingw32\n-CFG_THIRD_PARTY_OBJECTS_x86_64-pc-windows-gnu := crt2.o dllcrt2.o\n-CFG_INSTALLED_OBJECTS_x86_64-pc-windows-gnu := crt2.o dllcrt2.o rsbegin.o rsend.o\n-CFG_RUSTRT_HAS_STARTUP_OBJS_x86_64-pc-windows-gnu := 1"}, {"sha": "30e996a97273f11b6af50cfd328ab117f8a10c0a", "filename": "mk/cfg/x86_64-pc-windows-msvc.mk", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-pc-windows-msvc.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,28 +0,0 @@\n-# x86_64-pc-windows-msvc configuration\n-CC_x86_64-pc-windows-msvc=$(CFG_MSVC_CL_x86_64)\n-LINK_x86_64-pc-windows-msvc=$(CFG_MSVC_LINK_x86_64)\n-CXX_x86_64-pc-windows-msvc=$(CFG_MSVC_CL_x86_64)\n-CPP_x86_64-pc-windows-msvc=$(CFG_MSVC_CL_x86_64)\n-AR_x86_64-pc-windows-msvc=$(CFG_MSVC_LIB_x86_64)\n-CFG_LIB_NAME_x86_64-pc-windows-msvc=$(1).dll\n-CFG_STATIC_LIB_NAME_x86_64-pc-windows-msvc=$(1).lib\n-CFG_LIB_GLOB_x86_64-pc-windows-msvc=$(1)-*.{dll,lib}\n-CFG_LIB_DSYM_GLOB_x86_64-pc-windows-msvc=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-pc-windows-msvc :=\n-CFG_GCCISH_CFLAGS_x86_64-pc-windows-msvc := -MD -nologo\n-CFG_GCCISH_CXXFLAGS_x86_64-pc-windows-msvc := -MD -nologo\n-CFG_GCCISH_LINK_FLAGS_x86_64-pc-windows-msvc :=\n-CFG_GCCISH_DEF_FLAG_x86_64-pc-windows-msvc :=\n-CFG_LLC_FLAGS_x86_64-pc-windows-msvc :=\n-CFG_INSTALL_NAME_x86_64-pc-windows-msvc =\n-CFG_EXE_SUFFIX_x86_64-pc-windows-msvc := .exe\n-CFG_WINDOWSY_x86_64-pc-windows-msvc := 1\n-CFG_UNIXY_x86_64-pc-windows-msvc :=\n-CFG_LDPATH_x86_64-pc-windows-msvc :=\n-CFG_RUN_x86_64-pc-windows-msvc=$(2)\n-CFG_RUN_TARG_x86_64-pc-windows-msvc=$(call CFG_RUN_x86_64-pc-windows-msvc,,$(2))\n-CFG_GNU_TRIPLE_x86_64-pc-windows-msvc := x86_64-pc-win32\n-\n-# Currently the build system is not configured to build jemalloc\n-# with MSVC, so we omit this optional dependency.\n-CFG_DISABLE_JEMALLOC_x86_64-pc-windows-msvc := 1"}, {"sha": "53d58b9fceaa6ab0b762bf74229558de5e0ca1a4", "filename": "mk/cfg/x86_64-rumprun-netbsd.mk", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-rumprun-netbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-rumprun-netbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-rumprun-netbsd.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,25 +0,0 @@\n-# x86_64-rumprun-netbsd configuration\n-CROSS_PREFIX_x86_64-rumprun-netbsd=x86_64-rumprun-netbsd-\n-CC_x86_64-rumprun-netbsd=gcc\n-CXX_x86_64-rumprun-netbsd=g++\n-CPP_x86_64-rumprun-netbsd=gcc -E\n-AR_x86_64-rumprun-netbsd=ar\n-CFG_INSTALL_ONLY_RLIB_x86_64-rumprun-netbsd = 1\n-CFG_LIB_NAME_x86_64-rumprun-netbsd=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-rumprun-netbsd=lib$(1).a\n-CFG_LIB_GLOB_x86_64-rumprun-netbsd=lib$(1)-*.so\n-CFG_JEMALLOC_CFLAGS_x86_64-rumprun-netbsd := -m64\n-CFG_GCCISH_CFLAGS_x86_64-rumprun-netbsd :=  -g -fPIC -m64\n-CFG_GCCISH_CXXFLAGS_x86_64-rumprun-netbsd :=\n-CFG_GCCISH_LINK_FLAGS_x86_64-rumprun-netbsd :=\n-CFG_GCCISH_DEF_FLAG_x86_64-rumprun-netbsd :=\n-CFG_LLC_FLAGS_x86_64-rumprun-netbsd :=\n-CFG_INSTALL_NAME_x86_64-rumprun-netbsd =\n-CFG_EXE_SUFFIX_x86_64-rumprun-netbsd =\n-CFG_WINDOWSY_x86_64-rumprun-netbsd :=\n-CFG_UNIXY_x86_64-rumprun-netbsd := 1\n-CFG_LDPATH_x86_64-rumprun-netbsd :=\n-CFG_RUN_x86_64-rumprun-netbsd=$(2)\n-CFG_RUN_TARG_x86_64-rumprun-netbsd=$(call CFG_RUN_x86_64-rumprun-netbsd,,$(2))\n-CFG_GNU_TRIPLE_x86_64-rumprun-netbsd := x86_64-rumprun-netbsd\n-CFG_DISABLE_JEMALLOC_x86_64-rumprun-netbsd := 1"}, {"sha": "7fc323b234aee9b750dfff8813d4904caa1a723b", "filename": "mk/cfg/x86_64-sun-solaris.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-sun-solaris.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-sun-solaris.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-sun-solaris.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,23 +0,0 @@\n-# x86_64-sun-solaris configuration\n-CROSS_PREFIX_x86_64-sun-solaris=x86_64-sun-solaris2.11-\n-CC_x86_64-sun-solaris=$(CC)\n-CXX_x86_64-sun-solaris=$(CXX)\n-CPP_x86_64-sun-solaris=$(CPP)\n-AR_x86_64-sun-solaris=$(AR)\n-CFG_LIB_NAME_x86_64-sun-solaris=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-sun-solaris=lib$(1).a\n-CFG_LIB_GLOB_x86_64-sun-solaris=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_x86_64-sun-solaris=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-sun-solaris := -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-sun-solaris :=  -g -D_POSIX_PTHREAD_SEMANTICS -fPIC -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-sun-solaris := -shared -fPIC -g -pthread  -lrt\n-CFG_GCCISH_DEF_FLAG_x86_64-sun-solaris := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_x86_64-sun-solaris :=\n-CFG_INSTALL_NAME_x86_64-sun-solaris =\n-CFG_EXE_SUFFIX_x86_64-sun-solaris :=\n-CFG_WINDOWSY_x86_64-sun-solaris :=\n-CFG_UNIXY_x86_64-sun-solaris := 1\n-CFG_LDPATH_x86_64-sun-solaris :=\n-CFG_RUN_x86_64-sun-solaris=$(2)\n-CFG_RUN_TARG_x86_64-sun-solaris=$(call CFG_RUN_x86_64-sun-solaris,,$(2))\n-CFG_GNU_TRIPLE_x86_64-sun-solaris := x86_64-sun-solaris"}, {"sha": "8ac31c176188b0a50a4efcf923f5825868ace821", "filename": "mk/cfg/x86_64-unknown-bitrig.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,23 +0,0 @@\n-# x86_64-unknown-bitrig-elf configuration\n-CC_x86_64-unknown-bitrig=$(CC)\n-CXX_x86_64-unknown-bitrig=$(CXX)\n-CPP_x86_64-unknown-bitrig=$(CPP)\n-AR_x86_64-unknown-bitrig=$(AR)\n-CFG_LIB_NAME_x86_64-unknown-bitrig=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-unknown-bitrig=lib$(1).a\n-CFG_LIB_GLOB_x86_64-unknown-bitrig=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_x86_64-unknown-bitrig=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-unknown-bitrig := -m64 -I/usr/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-bitrig :=  -fPIE -fPIC -m64 -I/usr/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-bitrig := -shared -pic -pthread -m64 $(LDFLAGS)\n-CFG_GCCISH_DEF_FLAG_x86_64-unknown-bitrig := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_x86_64-unknown-bitrig :=\n-CFG_INSTALL_NAME_x86_64-unknown-bitrig =\n-CFG_EXE_SUFFIX_x86_64-unknown-bitrig :=\n-CFG_WINDOWSY_x86_64-unknown-bitrig :=\n-CFG_UNIXY_x86_64-unknown-bitrig := 1\n-CFG_LDPATH_x86_64-unknown-bitrig :=\n-CFG_RUN_x86_64-unknown-bitrig=$(2)\n-CFG_RUN_TARG_x86_64-unknown-bitrig=$(call CFG_RUN_x86_64-unknown-bitrig,,$(2))\n-CFG_GNU_TRIPLE_x86_64-unknown-bitrig := x86_64-unknown-bitrig\n-CFG_DISABLE_JEMALLOC_x86_64-unknown-bitrig := 1"}, {"sha": "579a9a809e205604011e59c73deb368f3eb248ec", "filename": "mk/cfg/x86_64-unknown-dragonfly.mk", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-dragonfly.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-dragonfly.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-dragonfly.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,22 +0,0 @@\n-# x86_64-pc-dragonfly-elf configuration\n-CC_x86_64-unknown-dragonfly=$(CC)\n-CXX_x86_64-unknown-dragonfly=$(CXX)\n-CPP_x86_64-unknown-dragonfly=$(CPP)\n-AR_x86_64-unknown-dragonfly=$(AR)\n-CFG_LIB_NAME_x86_64-unknown-dragonfly=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-unknown-dragonfly=lib$(1).a\n-CFG_LIB_GLOB_x86_64-unknown-dragonfly=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_x86_64-unknown-dragonfly=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-unknown-dragonfly := -m64 -I/usr/include -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-dragonfly :=  -g -fPIC -m64 -I/usr/include -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-dragonfly := -shared -fPIC -g -pthread  -lrt -m64\n-CFG_GCCISH_DEF_FLAG_x86_64-unknown-dragonfly := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_x86_64-unknown-dragonfly :=\n-CFG_INSTALL_NAME_x86_64-unknown-dragonfly =\n-CFG_EXE_SUFFIX_x86_64-unknown-dragonfly :=\n-CFG_WINDOWSY_x86_64-unknown-dragonfly :=\n-CFG_UNIXY_x86_64-unknown-dragonfly := 1\n-CFG_LDPATH_x86_64-unknown-dragonfly :=\n-CFG_RUN_x86_64-unknown-dragonfly=$(2)\n-CFG_RUN_TARG_x86_64-unknown-dragonfly=$(call CFG_RUN_x86_64-unknown-dragonfly,,$(2))\n-CFG_GNU_TRIPLE_x86_64-unknown-dragonfly := x86_64-unknown-dragonfly"}, {"sha": "c700601eac7a18a1427d48fcc866e37d5b40ad2b", "filename": "mk/cfg/x86_64-unknown-freebsd.mk", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-freebsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-freebsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-freebsd.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,22 +0,0 @@\n-# x86_64-unknown-freebsd configuration\n-CC_x86_64-unknown-freebsd=$(CC)\n-CXX_x86_64-unknown-freebsd=$(CXX)\n-CPP_x86_64-unknown-freebsd=$(CPP)\n-AR_x86_64-unknown-freebsd=$(AR)\n-CFG_LIB_NAME_x86_64-unknown-freebsd=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-unknown-freebsd=lib$(1).a\n-CFG_LIB_GLOB_x86_64-unknown-freebsd=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_x86_64-unknown-freebsd=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-unknown-freebsd := -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-freebsd :=  -g -fPIC -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-freebsd := -shared -fPIC -g -pthread  -lrt\n-CFG_GCCISH_DEF_FLAG_x86_64-unknown-freebsd := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_x86_64-unknown-freebsd :=\n-CFG_INSTALL_NAME_x86_64-unknown-freebsd =\n-CFG_EXE_SUFFIX_x86_64-unknown-freebsd :=\n-CFG_WINDOWSY_x86_64-unknown-freebsd :=\n-CFG_UNIXY_x86_64-unknown-freebsd := 1\n-CFG_LDPATH_x86_64-unknown-freebsd :=\n-CFG_RUN_x86_64-unknown-freebsd=$(2)\n-CFG_RUN_TARG_x86_64-unknown-freebsd=$(call CFG_RUN_x86_64-unknown-freebsd,,$(2))\n-CFG_GNU_TRIPLE_x86_64-unknown-freebsd := x86_64-unknown-freebsd"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/x86_64-unknown-fuchsia.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-fuchsia.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-fuchsia.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-fuchsia.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "4c2d888be06fbb6a52eacad88eae1572c678a6e4", "filename": "mk/cfg/x86_64-unknown-haiku.mk", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-haiku.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-haiku.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-haiku.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,27 +0,0 @@\n-# x86_64-unknown-haiku configuration\n-CROSS_PREFIX_x86_64-unknown-haiku=x86_64-unknown-haiku-\n-CC_x86_64-unknown-haiku=$(CC)\n-CXX_x86_64-unknown-haiku=$(CXX)\n-CPP_x86_64-unknown-haiku=$(CPP)\n-AR_x86_64-unknown-haiku=$(AR)\n-CFG_LIB_NAME_x86_64-unknown-haiku=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-unknown-haiku=lib$(1).a\n-CFG_LIB_GLOB_x86_64-unknown-haiku=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_x86_64-unknown-haiku=lib$(1)-*.dylib.dSYM\n-CFG_CFLAGS_x86_64-unknown-haiku := -m64 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-haiku := -Wall -Werror -g -fPIC -m64 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_x86_64-unknown-haiku := -fno-rtti $(CXXFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-haiku := -shared -fPIC -ldl -pthread -lrt -g -m64\n-CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-haiku := -Wl,-whole-archive\n-CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-haiku := -Wl,-no-whole-archive\n-CFG_DEF_SUFFIX_x86_64-unknown-haiku := .linux.def\n-CFG_LLC_FLAGS_x86_64-unknown-haiku :=\n-CFG_INSTALL_NAME_x86_64-unknown-haiku =\n-CFG_EXE_SUFFIX_x86_64-unknown-haiku =\n-CFG_WINDOWSY_x86_64-unknown-haiku :=\n-CFG_UNIXY_x86_64-unknown-haiku := 1\n-CFG_PATH_MUNGE_x86_64-unknown-haiku := true\n-CFG_LDPATH_x86_64-unknown-haiku :=\n-CFG_RUN_x86_64-unknown-haiku=$(2)\n-CFG_RUN_TARG_x86_64-unknown-haiku=$(call CFG_RUN_x86_64-unknown-haiku,,$(2))\n-CFG_GNU_TRIPLE_x86_64-unknown-haiku := x86_64-unknown-haiku"}, {"sha": "817ce22e4f59d10fdf099113ca8a6ea447210dac", "filename": "mk/cfg/x86_64-unknown-linux-gnu.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-linux-gnu.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,23 +0,0 @@\n-# x86_64-unknown-linux-gnu configuration\n-CC_x86_64-unknown-linux-gnu=$(CC)\n-CXX_x86_64-unknown-linux-gnu=$(CXX)\n-CPP_x86_64-unknown-linux-gnu=$(CPP)\n-AR_x86_64-unknown-linux-gnu=$(AR)\n-CFG_LIB_NAME_x86_64-unknown-linux-gnu=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-unknown-linux-gnu=lib$(1).a\n-CFG_LIB_GLOB_x86_64-unknown-linux-gnu=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_x86_64-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-unknown-linux-gnu := -m64\n-CFG_GCCISH_CFLAGS_x86_64-unknown-linux-gnu :=  -g -fPIC -m64\n-CFG_GCCISH_CXXFLAGS_x86_64-unknown-linux-gnu := -fno-rtti\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m64\n-CFG_GCCISH_DEF_FLAG_x86_64-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_x86_64-unknown-linux-gnu :=\n-CFG_INSTALL_NAME_x86_64-unknown-linux-gnu =\n-CFG_EXE_SUFFIX_x86_64-unknown-linux-gnu =\n-CFG_WINDOWSY_x86_64-unknown-linux-gnu :=\n-CFG_UNIXY_x86_64-unknown-linux-gnu := 1\n-CFG_LDPATH_x86_64-unknown-linux-gnu :=\n-CFG_RUN_x86_64-unknown-linux-gnu=$(2)\n-CFG_RUN_TARG_x86_64-unknown-linux-gnu=$(call CFG_RUN_x86_64-unknown-linux-gnu,,$(2))\n-CFG_GNU_TRIPLE_x86_64-unknown-linux-gnu := x86_64-unknown-linux-gnu"}, {"sha": "6f707ac3b3fb8512fa4b67e86b77816ee1589979", "filename": "mk/cfg/x86_64-unknown-linux-musl.mk", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-linux-musl.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-linux-musl.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-linux-musl.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,29 +0,0 @@\n-# x86_64-unknown-linux-musl configuration\n-CC_x86_64-unknown-linux-musl=$(CFG_MUSL_ROOT)/bin/musl-gcc\n-CXX_x86_64-unknown-linux-musl=$(CXX)\n-CPP_x86_64-unknown-linux-musl=$(CFG_MUSL_ROOT)/bin/musl-gcc -E\n-AR_x86_64-unknown-linux-musl=$(AR)\n-CFG_INSTALL_ONLY_RLIB_x86_64-unknown-linux-musl = 1\n-CFG_LIB_NAME_x86_64-unknown-linux-musl=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-unknown-linux-musl=lib$(1).a\n-CFG_LIB_GLOB_x86_64-unknown-linux-musl=lib$(1)-*.so\n-CFG_JEMALLOC_CFLAGS_x86_64-unknown-linux-musl := -m64 -Wa,-mrelax-relocations=no\n-CFG_GCCISH_CFLAGS_x86_64-unknown-linux-musl :=  -g -fPIC -m64 -Wa,-mrelax-relocations=no\n-CFG_GCCISH_CXXFLAGS_x86_64-unknown-linux-musl :=\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-linux-musl :=\n-CFG_GCCISH_DEF_FLAG_x86_64-unknown-linux-musl :=\n-CFG_LLC_FLAGS_x86_64-unknown-linux-musl :=\n-CFG_INSTALL_NAME_x86_64-unknown-linux-musl =\n-CFG_EXE_SUFFIX_x86_64-unknown-linux-musl =\n-CFG_WINDOWSY_x86_64-unknown-linux-musl :=\n-CFG_UNIXY_x86_64-unknown-linux-musl := 1\n-CFG_LDPATH_x86_64-unknown-linux-musl :=\n-CFG_RUN_x86_64-unknown-linux-musl=$(2)\n-CFG_RUN_TARG_x86_64-unknown-linux-musl=$(call CFG_RUN_x86_64-unknown-linux-musl,,$(2))\n-CFG_GNU_TRIPLE_x86_64-unknown-linux-musl := x86_64-unknown-linux-musl\n-CFG_THIRD_PARTY_OBJECTS_x86_64-unknown-linux-musl := crt1.o crti.o crtn.o\n-CFG_INSTALLED_OBJECTS_x86_64-unknown-linux-musl := crt1.o crti.o crtn.o\n-\n-NATIVE_DEPS_libc_T_x86_64-unknown-linux-musl += libc.a\n-NATIVE_DEPS_std_T_x86_64-unknown-linux-musl += crt1.o crti.o crtn.o\n-NATIVE_DEPS_unwind_T_x86_64-unknown-linux-musl += libunwind.a"}, {"sha": "93bb2d672653e8f46b68cf5efb8dc1059fe04abf", "filename": "mk/cfg/x86_64-unknown-netbsd.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-netbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-netbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-netbsd.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,23 +0,0 @@\n-# x86_64-unknown-netbsd configuration\n-CROSS_PREFIX_x86_64-unknown-netbsd=x86_64-unknown-netbsd-\n-CC_x86_64-unknown-netbsd=$(CC)\n-CXX_x86_64-unknown-netbsd=$(CXX)\n-CPP_x86_64-unknown-netbsd=$(CPP)\n-AR_x86_64-unknown-netbsd=$(AR)\n-CFG_LIB_NAME_x86_64-unknown-netbsd=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-unknown-netbsd=lib$(1).a\n-CFG_LIB_GLOB_x86_64-unknown-netbsd=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_x86_64-unknown-netbsd=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-unknown-netbsd := -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-netbsd :=  -g -fPIC -I/usr/local/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-netbsd := -shared -fPIC -g -pthread  -lrt\n-CFG_GCCISH_DEF_FLAG_x86_64-unknown-netbsd := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_x86_64-unknown-netbsd :=\n-CFG_INSTALL_NAME_x86_64-unknown-netbsd =\n-CFG_EXE_SUFFIX_x86_64-unknown-netbsd :=\n-CFG_WINDOWSY_x86_64-unknown-netbsd :=\n-CFG_UNIXY_x86_64-unknown-netbsd := 1\n-CFG_LDPATH_x86_64-unknown-netbsd :=\n-CFG_RUN_x86_64-unknown-netbsd=$(2)\n-CFG_RUN_TARG_x86_64-unknown-netbsd=$(call CFG_RUN_x86_64-unknown-netbsd,,$(2))\n-CFG_GNU_TRIPLE_x86_64-unknown-netbsd := x86_64-unknown-netbsd"}, {"sha": "7cca1f7b18b3d6cdd5ffc65d6cbced0897f0ed6f", "filename": "mk/cfg/x86_64-unknown-openbsd.mk", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-openbsd.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,24 +0,0 @@\n-# x86_64-pc-openbsd-elf configuration\n-CC_x86_64-unknown-openbsd=$(CC)\n-CXX_x86_64-unknown-openbsd=$(CXX)\n-CPP_x86_64-unknown-openbsd=$(CPP)\n-AR_x86_64-unknown-openbsd=$(AR)\n-CFG_LIB_NAME_x86_64-unknown-openbsd=lib$(1).so\n-CFG_STATIC_LIB_NAME_x86_64-unknown-openbsd=lib$(1).a\n-CFG_LIB_GLOB_x86_64-unknown-openbsd=lib$(1)-*.so\n-CFG_LIB_DSYM_GLOB_x86_64-unknown-openbsd=$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_x86_64-unknown-openbsd := -m64 -I/usr/include $(CFLAGS)\n-CFG_GCCISH_CFLAGS_x86_64-unknown-openbsd :=  -g -fPIC -m64 -I/usr/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-openbsd := -shared -fPIC -g -pthread -m64\n-CFG_GCCISH_DEF_FLAG_x86_64-unknown-openbsd := -Wl,--export-dynamic,--dynamic-list=\n-CFG_LLC_FLAGS_x86_64-unknown-openbsd :=\n-CFG_INSTALL_NAME_x86_64-unknown-openbsd =\n-CFG_EXE_SUFFIX_x86_64-unknown-openbsd :=\n-CFG_WINDOWSY_x86_64-unknown-openbsd :=\n-CFG_UNIXY_x86_64-unknown-openbsd := 1\n-CFG_LDPATH_x86_64-unknown-openbsd :=\n-CFG_RUN_x86_64-unknown-openbsd=$(2)\n-CFG_RUN_TARG_x86_64-unknown-openbsd=$(call CFG_RUN_x86_64-unknown-openbsd,,$(2))\n-CFG_GNU_TRIPLE_x86_64-unknown-openbsd := x86_64-unknown-openbsd\n-RUSTC_FLAGS_x86_64-unknown-openbsd=-C linker=$(call FIND_COMPILER,$(CC))\n-CFG_DISABLE_JEMALLOC_x86_64-unknown-openbsd := 1"}, {"sha": "34aee77ae2107fbe45fcb960d74d2ffdd5c57bf1", "filename": "mk/cfg/x86_64-unknown-redox.mk", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-redox.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcfg%2Fx86_64-unknown-redox.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-redox.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1 +0,0 @@\n-# rustbuild-only target"}, {"sha": "7013d9f03f836c25e341b40622804577952dd021", "filename": "mk/clean.mk", "status": "removed", "additions": 0, "deletions": 122, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,122 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-######################################################################\n-# Cleanup\n-######################################################################\n-\n-CLEAN_STAGE_RULES := \\\n- $(foreach stage, $(STAGES), \\\n-  $(foreach host, $(CFG_HOST), \\\n-   clean$(stage)_H_$(host) \\\n-   $(foreach target, $(CFG_TARGET), \\\n-    clean$(stage)_T_$(target)_H_$(host))))\n-\n-CLEAN_STAGE_RULES := $(CLEAN_STAGE_RULES) \\\n-    $(foreach host, $(CFG_HOST), clean-generic-H-$(host))\n-\n-CLEAN_STAGE_RULES := $(CLEAN_STAGE_RULES) \\\n-    $(foreach host, $(CFG_TARGET), clean-generic-T-$(host))\n-\n-CLEAN_LLVM_RULES = \\\n- $(foreach target, $(CFG_HOST), \\\n-  clean-llvm$(target))\n-\n-.PHONY: clean clean-all clean-misc clean-llvm\n-\n-clean-all: clean clean-llvm\n-\n-clean-llvm: $(CLEAN_LLVM_RULES)\n-\n-clean: clean-misc clean-grammar $(CLEAN_STAGE_RULES)\n-\n-clean-misc:\n-\t@$(call E, cleaning)\n-\t$(Q)rm -f $(RUNTIME_OBJS) $(RUNTIME_DEF)\n-\t$(Q)rm -f $(RUSTLLVM_LIB_OBJS) $(RUSTLLVM_OBJS_OBJS) $(RUSTLLVM_DEF)\n-\t$(Q)rm -Rf $(GENERATED)\n-\t$(Q)rm -Rf tmp/*\n-\t$(Q)rm -Rf rust-stage0-*.tar.bz2 $(PKG_NAME)-*.tar.gz $(PKG_NAME)-*.exe\n-\t$(Q)rm -Rf dist/*\n-\t$(Q)rm -Rf doc\n-\n-clean-grammar:\n-\t@$(call E, cleaning grammar verification)\n-\t$(Q)rm -Rf grammar\n-define CLEAN_GENERIC\n-\n-clean-generic-$(2)-$(1):\n-\t$(Q)find $(1)/rustllvm \\\n-\t         $(1)/rt \\\n-\t\t $(1)/test \\\n-\t\t $(1)/stage* \\\n-\t\t -type f \\( \\\n-         -name '*.[odasS]' -o \\\n-         -name '*.so' -o \\\n-         -name '*.dylib' -o \\\n-         -name '*.rlib' -o \\\n-         -name 'stamp.*' -o \\\n-         -name '*.lib' -o \\\n-         -name '*.dll' -o \\\n-         -name '*.def' -o \\\n-         -name '*.py' -o \\\n-         -name '*.pyc' -o \\\n-         -name '*.bc' -o \\\n-         -name '*.rs' \\\n-         \\) \\\n-         | xargs rm -f\n-\t$(Q)find $(1) \\\n-         -name '*.dSYM' \\\n-         | xargs rm -Rf\n-endef\n-\n-$(foreach host, $(CFG_HOST), $(eval $(call CLEAN_GENERIC,$(host),H)))\n-$(foreach targ, $(CFG_TARGET), $(eval $(call CLEAN_GENERIC,$(targ),T)))\n-\n-define CLEAN_HOST_STAGE_N\n-\n-clean$(1)_H_$(2): \\\n-\t    $$(foreach crate,$$(CRATES),clean$(1)_H_$(2)-lib-$$(crate)) \\\n-\t    $$(foreach tool,$$(TOOLS) $$(DEBUGGER_BIN_SCRIPTS_ALL),clean$(1)_H_$(2)-tool-$$(tool))\n-\t$$(Q)rm -fr $(2)/rt/libbacktrace\n-\n-clean$(1)_H_$(2)-tool-%:\n-\t$$(Q)rm -f $$(HBIN$(1)_H_$(2))/$$*$$(X_$(2))\n-\n-clean$(1)_H_$(2)-lib-%:\n-\t$$(Q)rm -f $$(HLIB$(1)_H_$(2))/$$(call CFG_LIB_GLOB_$(2),$$*)\n-\t$$(Q)rm -f $$(HLIB$(1)_H_$(2))/$$(call CFG_RLIB_GLOB,$$*)\n-\n-endef\n-\n-$(foreach host, $(CFG_HOST), \\\n- $(eval $(foreach stage, $(STAGES), \\\n-  $(eval $(call CLEAN_HOST_STAGE_N,$(stage),$(host))))))\n-\n-define CLEAN_TARGET_STAGE_N\n-\n-clean$(1)_T_$(2)_H_$(3): \\\n-\t    $$(foreach crate,$$(CRATES),clean$(1)_T_$(2)_H_$(3)-lib-$$(crate)) \\\n-\t    $$(foreach tool,$$(TOOLS) $$(DEBUGGER_BIN_SCRIPTS_ALL),clean$(1)_T_$(2)_H_$(3)-tool-$$(tool))\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/librun_pass_stage* # For unix\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/run_pass_stage* # For windows\n-\n-clean$(1)_T_$(2)_H_$(3)-tool-%:\n-\t$$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/$$*$$(X_$(2))\n-\n-clean$(1)_T_$(2)_H_$(3)-lib-%:\n-\t$$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$$(call CFG_LIB_GLOB_$(2),$$*)\n-\t$$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$$(call CFG_RLIB_GLOB,$$*)\n-endef\n-\n-$(foreach host, $(CFG_HOST), \\\n- $(eval $(foreach target, $(CFG_TARGET), \\\n-  $(eval $(foreach stage, 0 1 2 3, \\\n-   $(eval $(call CLEAN_TARGET_STAGE_N,$(stage),$(target),$(host))))))))"}, {"sha": "320ba44ed805db394078476a72ee6c08079d3146", "filename": "mk/crates.mk", "status": "removed", "additions": 0, "deletions": 228, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,228 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-################################################################################\n-# Rust's standard distribution of crates and tools\n-#\n-# The crates outlined below are the standard distribution of libraries provided\n-# in a rust installation. These rules are meant to abstract over the\n-# dependencies (both native and rust) of crates and basically generate all the\n-# necessary makefile rules necessary to build everything.\n-#\n-# Here's an explanation of the variables below\n-#\n-#   TARGET_CRATES\n-#\tThis list of crates will be built for all targets, including\n-#\tcross-compiled targets\n-#\n-#   HOST_CRATES\n-#\tThis list of crates will be compiled for only host targets. Note that\n-#\tthis set is explicitly *not* a subset of TARGET_CRATES, but rather it is\n-#\ta disjoint set. Nothing in the TARGET_CRATES set can depend on crates in\n-#\tthe HOST_CRATES set, but the HOST_CRATES set can depend on target\n-#\tcrates.\n-#\n-#   TOOLS\n-#\tA list of all tools which will be built as part of the compilation\n-#\tprocess. It is currently assumed that most tools are built through\n-#\tsrc/driver/driver.rs with a particular configuration (there's a\n-#\tcorresponding library providing the implementation)\n-#\n-#   DEPS_<crate>\n-#\tThese lists are the dependencies of the <crate> that is to be built.\n-#\tRust dependencies are listed bare (i.e. std) and native\n-#\tdependencies have a \"native:\" prefix (i.e. native:hoedown). All deps\n-#\twill be built before the crate itself is built.\n-#\n-#   TOOL_DEPS_<tool>/TOOL_SOURCE_<tool>\n-#\tSimilar to the DEPS variable, this is the library crate dependencies\n-#\tlist for tool as well as the source file for the specified tool\n-#\n-# You shouldn't need to modify much other than these variables. Crates are\n-# automatically generated for all stage/host/target combinations.\n-################################################################################\n-\n-TARGET_CRATES := libc std term \\\n-                 getopts collections test rand \\\n-                 compiler_builtins core alloc \\\n-                 std_unicode rustc_bitflags \\\n-\t\t alloc_system alloc_jemalloc \\\n-\t\t panic_abort panic_unwind unwind\n-RUSTC_CRATES := rustc rustc_typeck rustc_mir rustc_borrowck rustc_resolve rustc_driver \\\n-                rustc_trans rustc_back rustc_llvm rustc_privacy rustc_lint \\\n-                rustc_data_structures rustc_platform_intrinsics rustc_errors \\\n-                rustc_plugin rustc_metadata rustc_passes rustc_save_analysis \\\n-                rustc_const_eval rustc_const_math rustc_incremental proc_macro\n-HOST_CRATES := syntax syntax_ext proc_macro_plugin syntax_pos $(RUSTC_CRATES) \\\n-\t\trustdoc fmt_macros flate arena graphviz log serialize\n-TOOLS := compiletest rustdoc rustc rustbook error_index_generator\n-\n-DEPS_core :=\n-DEPS_compiler_builtins := core native:compiler-rt\n-DEPS_alloc := core libc alloc_system\n-DEPS_alloc_system := core libc\n-DEPS_alloc_jemalloc := core libc native:jemalloc\n-DEPS_collections := core alloc std_unicode\n-DEPS_libc := core\n-DEPS_rand := core\n-DEPS_rustc_bitflags := core\n-DEPS_std_unicode := core\n-DEPS_panic_abort := libc alloc\n-DEPS_panic_unwind := libc alloc unwind\n-DEPS_unwind := libc\n-\n-RUSTFLAGS_compiler_builtins := -lstatic=compiler-rt\n-RUSTFLAGS_panic_abort := -C panic=abort\n-\n-DEPS_std := core libc rand alloc collections compiler_builtins std_unicode \\\n-\tnative:backtrace \\\n-\talloc_system panic_abort panic_unwind unwind\n-DEPS_arena := std\n-DEPS_glob := std\n-DEPS_flate := std native:miniz\n-DEPS_fmt_macros = std\n-DEPS_getopts := std\n-DEPS_graphviz := std\n-DEPS_log := std\n-DEPS_num := std\n-DEPS_serialize := std log\n-DEPS_term := std\n-DEPS_test := std getopts term native:rust_test_helpers\n-\n-DEPS_syntax := std term serialize log arena libc rustc_bitflags std_unicode rustc_errors \\\n-\t\t\tsyntax_pos rustc_data_structures\n-DEPS_syntax_ext := syntax syntax_pos rustc_errors fmt_macros proc_macro\n-DEPS_proc_macro := syntax syntax_pos rustc_plugin log\n-DEPS_syntax_pos := serialize\n-DEPS_proc_macro_plugin := syntax syntax_pos rustc_plugin\n-\n-DEPS_rustc_const_math := std syntax log serialize\n-DEPS_rustc_const_eval := rustc_const_math rustc syntax log serialize \\\n-\t\t\t     rustc_back graphviz syntax_pos\n-\n-DEPS_rustc := syntax fmt_macros flate arena serialize getopts \\\n-              log graphviz rustc_llvm rustc_back rustc_data_structures\\\n-\t      rustc_const_math syntax_pos rustc_errors\n-DEPS_rustc_back := std syntax flate log libc\n-DEPS_rustc_borrowck := rustc log graphviz syntax syntax_pos rustc_errors rustc_mir\n-DEPS_rustc_data_structures := std log serialize libc\n-DEPS_rustc_driver := arena flate getopts graphviz libc rustc rustc_back rustc_borrowck \\\n-                     rustc_typeck rustc_mir rustc_resolve log syntax serialize rustc_llvm \\\n-                     rustc_trans rustc_privacy rustc_lint rustc_plugin \\\n-                     rustc_metadata syntax_ext proc_macro_plugin \\\n-                     rustc_passes rustc_save_analysis rustc_const_eval \\\n-                     rustc_incremental syntax_pos rustc_errors proc_macro rustc_data_structures\n-DEPS_rustc_errors := log libc serialize syntax_pos\n-DEPS_rustc_lint := rustc log syntax syntax_pos rustc_const_eval\n-DEPS_rustc_llvm := native:rustllvm libc std rustc_bitflags\n-DEPS_proc_macro := std syntax\n-DEPS_rustc_metadata := rustc syntax syntax_pos rustc_errors rustc_const_math \\\n-\t\t\tproc_macro syntax_ext\n-DEPS_rustc_passes := syntax syntax_pos rustc core rustc_const_eval rustc_errors\n-DEPS_rustc_mir := rustc syntax syntax_pos rustc_const_math rustc_const_eval rustc_bitflags\n-DEPS_rustc_resolve := arena rustc log syntax syntax_pos rustc_errors\n-DEPS_rustc_platform_intrinsics := std\n-DEPS_rustc_plugin := rustc rustc_metadata syntax syntax_pos rustc_errors\n-DEPS_rustc_privacy := rustc log syntax syntax_pos\n-DEPS_rustc_trans := arena flate getopts graphviz libc rustc rustc_back \\\n-                    log syntax serialize rustc_llvm rustc_platform_intrinsics \\\n-                    rustc_const_math rustc_const_eval rustc_incremental rustc_errors syntax_pos\n-DEPS_rustc_incremental := rustc syntax_pos serialize rustc_data_structures\n-DEPS_rustc_save_analysis := rustc log syntax syntax_pos serialize\n-DEPS_rustc_typeck := rustc syntax syntax_pos rustc_platform_intrinsics rustc_const_math \\\n-                     rustc_const_eval rustc_errors rustc_data_structures\n-\n-DEPS_rustdoc := rustc rustc_driver native:hoedown serialize getopts test \\\n-                rustc_lint rustc_const_eval syntax_pos rustc_data_structures\n-\n-TOOL_DEPS_compiletest := test getopts log serialize\n-TOOL_DEPS_rustdoc := rustdoc\n-TOOL_DEPS_rustc := rustc_driver\n-TOOL_DEPS_rustbook := std rustdoc\n-TOOL_DEPS_error_index_generator := rustdoc syntax serialize\n-TOOL_SOURCE_compiletest := $(S)src/tools/compiletest/src/main.rs\n-TOOL_SOURCE_rustdoc := $(S)src/driver/driver.rs\n-TOOL_SOURCE_rustc := $(S)src/driver/driver.rs\n-TOOL_SOURCE_rustbook := $(S)src/tools/rustbook/main.rs\n-TOOL_SOURCE_error_index_generator := $(S)src/tools/error_index_generator/main.rs\n-\n-ONLY_RLIB_compiler_builtins := 1\n-ONLY_RLIB_core := 1\n-ONLY_RLIB_libc := 1\n-ONLY_RLIB_alloc := 1\n-ONLY_RLIB_rand := 1\n-ONLY_RLIB_collections := 1\n-ONLY_RLIB_std_unicode := 1\n-ONLY_RLIB_rustc_bitflags := 1\n-ONLY_RLIB_alloc_system := 1\n-ONLY_RLIB_alloc_jemalloc := 1\n-ONLY_RLIB_panic_unwind := 1\n-ONLY_RLIB_panic_abort := 1\n-ONLY_RLIB_unwind := 1\n-\n-TARGET_SPECIFIC_alloc_jemalloc := 1\n-\n-# Documented-by-default crates\n-DOC_CRATES := std alloc collections core libc std_unicode\n-\n-ifeq ($(CFG_DISABLE_JEMALLOC),)\n-RUSTFLAGS_rustc_back := --cfg 'feature=\"jemalloc\"'\n-endif\n-\n-################################################################################\n-# You should not need to edit below this line\n-################################################################################\n-\n-CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n-\n-# This macro creates some simple definitions for each crate being built, just\n-# some munging of all of the parameters above.\n-#\n-# $(1) is the crate to generate variables for\n-define RUST_CRATE\n-CRATEFILE_$(1) := $$(SREL)src/lib$(1)/lib.rs\n-RSINPUTS_$(1) := $$(call rwildcard,$(S)src/lib$(1)/,*.rs)\n-NATIVE_DEPS_$(1) := $$(patsubst native:%,%,$$(filter native:%,$$(DEPS_$(1))))\n-endef\n-\n-$(foreach crate,$(CRATES),$(eval $(call RUST_CRATE,$(crate))))\n-\n-# $(1) - crate\n-# $(2) - target\n-define RUST_CRATE_DEPS\n-RUST_DEPS_$(1)_T_$(2) := $$(filter-out native:%,$$(DEPS_$(1)))\n-endef\n-\n-$(foreach target,$(CFG_TARGET),\\\n- $(foreach crate,$(CRATES),$(eval $(call RUST_CRATE_DEPS,$(crate),$(target)))))\n-\n-# $(1) - target\n-# $(2) - crate\n-define DEFINE_TARGET_CRATES\n-ifndef TARGET_SPECIFIC_$(2)\n-TARGET_CRATES_$(1) += $(2)\n-endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET),\\\n- $(foreach crate,$(TARGET_CRATES),\\\n-  $(eval $(call DEFINE_TARGET_CRATES,$(target),$(crate)))))\n-\n-# Similar to the macro above for crates, this macro is for tools\n-#\n-# $(1) is the crate to generate variables for\n-define RUST_TOOL\n-TOOL_INPUTS_$(1) := $$(call rwildcard,$$(dir $$(TOOL_SOURCE_$(1))),*.rs)\n-endef\n-\n-$(foreach crate,$(TOOLS),$(eval $(call RUST_TOOL,$(crate))))\n-\n-CRATEFILE_libc := $(SREL)src/liblibc/src/lib.rs\n-RUSTFLAGS_libc := --cfg stdbuild"}, {"sha": "1fcb0bb4debbce6109f33d171084fadfc6704c2f", "filename": "mk/ctags.mk", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fctags.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fctags.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fctags.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,35 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-######################################################################\n-# TAGS file creation.  No dependency tracking, just do it on demand.\n-# Requires Exuberant Ctags: http://ctags.sourceforge.net/index.html\n-######################################################################\n-\n-.PHONY: TAGS.emacs TAGS.vi\n-\n-CTAGS_RUSTC_LOCATIONS=$(patsubst ${CFG_SRC_DIR}src/lib%test,, \\\n-\t\t\t\t$(wildcard ${CFG_SRC_DIR}src/lib*)) ${CFG_SRC_DIR}src/libtest\n-CTAGS_LOCATIONS=$(patsubst ${CFG_SRC_DIR}src/librust%,, \\\n-                $(patsubst ${CFG_SRC_DIR}src/lib%test,, \\\n-\t\t\t\t$(wildcard ${CFG_SRC_DIR}src/lib*))) ${CFG_SRC_DIR}src/libtest\n-CTAGS_OPTS=--options=\"${CFG_SRC_DIR}src/etc/ctags.rust\" --languages=Rust --recurse\n-\n-TAGS.rustc.emacs:\n-\tctags -e -f $@ ${CTAGS_OPTS} ${CTAGS_RUSTC_LOCATIONS}\n-\n-TAGS.emacs:\n-\tctags -e -f $@ ${CTAGS_OPTS} ${CTAGS_LOCATIONS}\n-\n-TAGS.rustc.vi:\n-\tctags -f $@ ${CTAGS_OPTS} ${CTAGS_RUSTC_LOCATIONS}\n-\n-TAGS.vi:\n-\tctags -f $@ ${CTAGS_OPTS} ${CTAGS_LOCATIONS}"}, {"sha": "fbf32dc1a397f2468b10eecd1100394472c7eb50", "filename": "mk/debuggers.mk", "status": "removed", "additions": 0, "deletions": 145, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fdebuggers.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fdebuggers.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdebuggers.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,145 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-######################################################################\n-# Copy debugger related scripts\n-######################################################################\n-\n-\n-## GDB ##\n-DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB=gdb_load_rust_pretty_printers.py \\\n-                                 gdb_rust_pretty_printing.py \\\n-                                 debugger_pretty_printers_common.py\n-DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS=\\\n-    $(foreach script,$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB), \\\n-        $(CFG_SRC_DIR)src/etc/$(script))\n-\n-DEBUGGER_BIN_SCRIPTS_GDB=rust-gdb\n-DEBUGGER_BIN_SCRIPTS_GDB_ABS=\\\n-    $(foreach script,$(DEBUGGER_BIN_SCRIPTS_GDB), \\\n-        $(CFG_SRC_DIR)src/etc/$(script))\n-\n-\n-## LLDB ##\n-DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB=lldb_rust_formatters.py \\\n-                                  debugger_pretty_printers_common.py\n-DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS=\\\n-    $(foreach script,$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB), \\\n-        $(CFG_SRC_DIR)src/etc/$(script))\n-\n-DEBUGGER_BIN_SCRIPTS_LLDB=rust-lldb\n-DEBUGGER_BIN_SCRIPTS_LLDB_ABS=\\\n-    $(foreach script,$(DEBUGGER_BIN_SCRIPTS_LLDB), \\\n-        $(CFG_SRC_DIR)src/etc/$(script))\n-\n-\n-## ALL ##\n-DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL=gdb_load_rust_pretty_printers.py \\\n-                                 gdb_rust_pretty_printing.py \\\n-                                 lldb_rust_formatters.py \\\n-                                 debugger_pretty_printers_common.py\n-DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS=\\\n-    $(foreach script,$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL), \\\n-        $(CFG_SRC_DIR)src/etc/$(script))\n-DEBUGGER_BIN_SCRIPTS_ALL=$(DEBUGGER_BIN_SCRIPTS_GDB) \\\n-                         $(DEBUGGER_BIN_SCRIPTS_LLDB)\n-DEBUGGER_BIN_SCRIPTS_ALL_ABS=$(DEBUGGER_BIN_SCRIPTS_GDB_ABS) \\\n-                             $(DEBUGGER_BIN_SCRIPTS_LLDB_ABS)\n-\n-\n-# $(1) - the stage to copy to\n-# $(2) - the host triple\n-define DEF_INSTALL_DEBUGGER_SCRIPTS_HOST\n-\n-tmp/install-debugger-scripts$(1)_H_$(2)-gdb.done: \\\n-  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS) \\\n-  $$(DEBUGGER_BIN_SCRIPTS_GDB_ABS)\n-\t$(Q)touch $$@.start_time\n-\t$(Q)mkdir -p $$(HBIN$(1)_H_$(2))\n-\t$(Q)mkdir -p $$(HLIB$(1)_H_$(2))/rustlib/etc\n-\t$(Q)install $$(DEBUGGER_BIN_SCRIPTS_GDB_ABS) $$(HBIN$(1)_H_$(2))\n-\t$(Q)install $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS) $$(HLIB$(1)_H_$(2))/rustlib/etc\n-\t$(Q)touch -r $$@.start_time $$@ && rm $$@.start_time\n-\n-tmp/install-debugger-scripts$(1)_H_$(2)-lldb.done: \\\n-  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS) \\\n-  $$(DEBUGGER_BIN_SCRIPTS_LLDB_ABS)\n-\t$(Q)touch $$@.start_time\n-\t$(Q)mkdir -p $$(HBIN$(1)_H_$(2))\n-\t$(Q)mkdir -p $$(HLIB$(1)_H_$(2))/rustlib/etc\n-\t$(Q)install $$(DEBUGGER_BIN_SCRIPTS_LLDB_ABS) $$(HBIN$(1)_H_$(2))\n-\t$(Q)install $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS) $$(HLIB$(1)_H_$(2))/rustlib/etc\n-\t$(Q)touch -r $$@.start_time $$@ && rm $$@.start_time\n-\n-tmp/install-debugger-scripts$(1)_H_$(2)-all.done: \\\n-  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS) \\\n-  $$(DEBUGGER_BIN_SCRIPTS_ALL_ABS)\n-\t$(Q)touch $$@.start_time\n-\t$(Q)mkdir -p $$(HBIN$(1)_H_$(2))\n-\t$(Q)mkdir -p $$(HLIB$(1)_H_$(2))/rustlib/etc\n-\t$(Q)install $$(DEBUGGER_BIN_SCRIPTS_ALL_ABS) $$(HBIN$(1)_H_$(2))\n-\t$(Q)install $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS) $$(HLIB$(1)_H_$(2))/rustlib/etc\n-\t$(Q)touch -r $$@.start_time $$@ && rm $$@.start_time\n-\n-tmp/install-debugger-scripts$(1)_H_$(2)-none.done:\n-\t$(Q)touch $$@\n-\n-endef\n-\n-# Expand host make-targets for all stages\n-$(foreach stage,$(STAGES), \\\n-  $(foreach host,$(CFG_HOST), \\\n-    $(eval $(call DEF_INSTALL_DEBUGGER_SCRIPTS_HOST,$(stage),$(host)))))\n-\n-# $(1) is the stage number\n-# $(2) is the target triple\n-# $(3) is the host triple\n-define DEF_INSTALL_DEBUGGER_SCRIPTS_TARGET\n-\n-tmp/install-debugger-scripts$(1)_T_$(2)_H_$(3)-gdb.done: \\\n-  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS) \\\n-  $$(DEBUGGER_BIN_SCRIPTS_GDB_ABS)\n-\t$(Q)touch $$@.start_time\n-\t$(Q)mkdir -p $$(TBIN$(1)_T_$(2)_H_$(3))\n-\t$(Q)mkdir -p $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n-\t$(Q)install $(DEBUGGER_BIN_SCRIPTS_GDB_ABS) $$(TBIN$(1)_T_$(2)_H_$(3))\n-\t$(Q)install $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS) $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n-\t$(Q)touch -r $$@.start_time $$@ && rm $$@.start_time\n-\n-tmp/install-debugger-scripts$(1)_T_$(2)_H_$(3)-lldb.done: \\\n-  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS) \\\n-  $$(DEBUGGER_BIN_SCRIPTS_LLDB_ABS)\n-\t$(Q)touch $$@.start_time\n-\t$(Q)mkdir -p $$(TBIN$(1)_T_$(2)_H_$(3))\n-\t$(Q)mkdir -p $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n-\t$(Q)install $(DEBUGGER_BIN_SCRIPTS_LLDB_ABS) $$(TBIN$(1)_T_$(2)_H_$(3))\n-\t$(Q)install $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS) $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n-\t$(Q)touch -r $$@.start_time $$@ && rm $$@.start_time\n-\n-tmp/install-debugger-scripts$(1)_T_$(2)_H_$(3)-all.done: \\\n-  $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS) \\\n-  $$(DEBUGGER_BIN_SCRIPTS_ALL_ABS)\n-\t$(Q)touch $$@.start_time\n-\t$(Q)mkdir -p $$(TBIN$(1)_T_$(2)_H_$(3))\n-\t$(Q)mkdir -p $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n-\t$(Q)install $(DEBUGGER_BIN_SCRIPTS_ALL_ABS) $$(TBIN$(1)_T_$(2)_H_$(3))\n-\t$(Q)install $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS) $$(TLIB$(1)_T_$(2)_H_$(3))/rustlib/etc\n-\t$(Q)touch -r $$@.start_time $$@ && rm $$@.start_time\n-\n-tmp/install-debugger-scripts$(1)_T_$(2)_H_$(3)-none.done:\n-\t$(Q)touch $$@\n-\n-endef\n-\n-# Expand target make-targets for all stages\n-$(foreach stage,$(STAGES), \\\n-  $(foreach target,$(CFG_TARGET), \\\n-    $(foreach host,$(CFG_HOST), \\\n-      $(eval $(call DEF_INSTALL_DEBUGGER_SCRIPTS_TARGET,$(stage),$(target),$(host))))))"}, {"sha": "238ba8acee42f894fb7aaae3648de1a5d0d91e65", "filename": "mk/dist.mk", "status": "removed", "additions": 0, "deletions": 382, "changes": 382, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,382 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-######################################################################\n-# Distribution\n-######################################################################\n-\n-# Primary targets:\n-#\n-# * dist - make all distribution artifacts\n-# * distcheck - sanity check dist artifacts\n-# * dist-tar-src - source tarballs\n-# * dist-tar-bins - Ad-hoc Unix binary installers\n-# * dist-docs - Stage docs for upload\n-\n-PKG_NAME := $(CFG_PACKAGE_NAME)\n-STD_PKG_NAME := rust-std-$(CFG_PACKAGE_VERS)\n-DOC_PKG_NAME := rust-docs-$(CFG_PACKAGE_VERS)\n-MINGW_PKG_NAME := rust-mingw-$(CFG_PACKAGE_VERS)\n-SRC_PKG_NAME := rust-src-$(CFG_PACKAGE_VERS)\n-\n-# License suitable for displaying in a popup\n-LICENSE.txt: $(S)COPYRIGHT $(S)LICENSE-APACHE $(S)LICENSE-MIT\n-\tcat $^ > $@\n-\n-\n-######################################################################\n-# Source tarball\n-######################################################################\n-\n-PKG_TAR = dist/$(PKG_NAME)-src.tar.gz\n-\n-PKG_GITMODULES := $(S)src/llvm $(S)src/compiler-rt \\\n-\t\t  $(S)src/rt/hoedown $(S)src/jemalloc\n-PKG_FILES := \\\n-    $(S)COPYRIGHT                              \\\n-    $(S)LICENSE-APACHE                         \\\n-    $(S)LICENSE-MIT                            \\\n-    $(S)CONTRIBUTING.md                        \\\n-    $(S)README.md                              \\\n-    $(S)RELEASES.md                            \\\n-    $(S)configure $(S)Makefile.in              \\\n-    $(S)man                                    \\\n-    $(addprefix $(S)src/,                      \\\n-      bootstrap                                \\\n-      build_helper                             \\\n-      doc                                      \\\n-      driver                                   \\\n-      etc                                      \\\n-      $(foreach crate,$(CRATES),lib$(crate))   \\\n-      libcollectionstest                       \\\n-      libcoretest                              \\\n-      libbacktrace                             \\\n-      rt                                       \\\n-      rtstartup                                \\\n-      rustllvm                                 \\\n-      rustc                                    \\\n-      stage0.txt                               \\\n-      rust-installer                           \\\n-      tools                                    \\\n-      test                                     \\\n-      vendor)                                  \\\n-    $(PKG_GITMODULES)                          \\\n-    $(filter-out config.stamp, \\\n-                 $(MKFILES_FOR_TARBALL))\n-\n-UNROOTED_PKG_FILES := $(patsubst $(S)%,./%,$(PKG_FILES))\n-\n-tmp/dist/$$(SRC_PKG_NAME)-image: $(PKG_FILES)\n-\t@$(call E, making src image)\n-\t$(Q)rm -Rf tmp/dist/$(SRC_PKG_NAME)-image\n-\t$(Q)mkdir -p tmp/dist/$(SRC_PKG_NAME)-image/lib/rustlib/src/rust\n-\t$(Q)echo \"$(CFG_VERSION)\" > tmp/dist/$(SRC_PKG_NAME)-image/lib/rustlib/src/rust/version\n-\t$(Q)tar \\\n-         -C $(S) \\\n-         -f - \\\n-         --exclude-vcs \\\n-         --exclude=*~ \\\n-         --exclude=*.pyc \\\n-         --exclude=*/llvm/test/*/*.ll \\\n-         --exclude=*/llvm/test/*/*.td \\\n-         --exclude=*/llvm/test/*/*.s \\\n-         --exclude=*/llvm/test/*/*/*.ll \\\n-         --exclude=*/llvm/test/*/*/*.td \\\n-         --exclude=*/llvm/test/*/*/*.s \\\n-         -c $(UNROOTED_PKG_FILES) | tar -x -f - -C tmp/dist/$(SRC_PKG_NAME)-image/lib/rustlib/src/rust\n-\n-$(PKG_TAR): tmp/dist/$$(SRC_PKG_NAME)-image\n-\t@$(call E, making $@)\n-\t$(Q)tar -czf $(PKG_TAR) -C tmp/dist/$(SRC_PKG_NAME)-image/lib/rustlib/src rust --transform 's,^rust,$(PKG_NAME),S'\n-\n-dist-tar-src: $(PKG_TAR)\n-\n-distcheck-tar-src: dist-tar-src\n-\t$(Q)rm -Rf tmp/distcheck/$(PKG_NAME)\n-\t$(Q)rm -Rf tmp/distcheck/srccheck\n-\t$(Q)mkdir -p tmp/distcheck\n-\t@$(call E, unpacking $(PKG_TAR) in tmp/distcheck/$(PKG_NAME))\n-\t$(Q)cd tmp/distcheck && tar -xzf ../../$(PKG_TAR)\n-\t@$(call E, configuring in tmp/distcheck/srccheck)\n-\t$(Q)mkdir -p tmp/distcheck/srccheck\n-\t$(Q)cd tmp/distcheck/srccheck && ../$(PKG_NAME)/configure\n-\t@$(call E, making 'check' in tmp/distcheck/srccheck)\n-\t$(Q)+make -C tmp/distcheck/srccheck check\n-\t@$(call E, making 'clean' in tmp/distcheck/srccheck)\n-\t$(Q)+make -C tmp/distcheck/srccheck clean\n-\t$(Q)rm -Rf tmp/distcheck/$(PKG_NAME)\n-\t$(Q)rm -Rf tmp/distcheck/srccheck\n-\n-\n-######################################################################\n-# Unix binary installer tarballs\n-######################################################################\n-\n-define DEF_START_INSTALLER\n-dist-install-dir-$(1)-%: PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n-dist-install-dir-$(1)-%: PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n-dist-install-dir-$(1)-%: PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n-dist-install-dir-$(1)-%: PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n-dist-install-dir-$(1)-%: PREPARE_CLEAN=true\n-\n-$$(eval $$(call DEF_PREPARE,dir-$(1)))\n-endef\n-\n-$(foreach target,$(CFG_TARGET),\\\n-  $(eval $(call DEF_START_INSTALLER,$(target))))\n-\n-define DEF_INSTALLER\n-\n-dist-install-dir-$(1)-host: PREPARE_HOST=$(1)\n-dist-install-dir-$(1)-host: PREPARE_TARGETS=$(2)\n-dist-install-dir-$(1)-host: PREPARE_DEST_DIR=tmp/dist/$$(PKG_NAME)-$(1)-image\n-dist-install-dir-$(1)-host: prepare-base-dir-$(1)-host docs\n-\t$$(Q)mkdir -p $$(PREPARE_DEST_DIR)/share/doc/rust\n-\t$$(Q)$$(PREPARE_MAN_CMD) $$(S)COPYRIGHT $$(PREPARE_DEST_DIR)/share/doc/rust\n-\t$$(Q)$$(PREPARE_MAN_CMD) $$(S)LICENSE-APACHE $$(PREPARE_DEST_DIR)/share/doc/rust\n-\t$$(Q)$$(PREPARE_MAN_CMD) $$(S)LICENSE-MIT $$(PREPARE_DEST_DIR)/share/doc/rust\n-\t$$(Q)$$(PREPARE_MAN_CMD) $$(S)README.md $$(PREPARE_DEST_DIR)/share/doc/rust\n-\n-prepare-overlay-$(1):\n-\t$$(Q)rm -Rf tmp/dist/$$(PKG_NAME)-$(1)-overlay\n-\t$$(Q)mkdir -p tmp/dist/$$(PKG_NAME)-$(1)-overlay\n-\t$$(Q)cp $$(S)COPYRIGHT tmp/dist/$$(PKG_NAME)-$(1)-overlay/\n-\t$$(Q)cp $$(S)LICENSE-APACHE tmp/dist/$$(PKG_NAME)-$(1)-overlay/\n-\t$$(Q)cp $$(S)LICENSE-MIT tmp/dist/$$(PKG_NAME)-$(1)-overlay/\n-\t$$(Q)cp $$(S)README.md tmp/dist/$$(PKG_NAME)-$(1)-overlay/\n-# This tiny morsel of metadata is used by rust-packaging\n-\t$$(Q)echo \"$(CFG_VERSION)\" > tmp/dist/$$(PKG_NAME)-$(1)-overlay/version\n-\n-dist/$$(PKG_NAME)-$(1).tar.gz: dist-install-dir-$(1)-host prepare-overlay-$(1)\n-\t@$(call E, build: $$@)\n-# On a MinGW target we've got a few runtime DLL dependencies that we need\n-# to include. THe first argument to `make-win-dist` is where to put these DLLs\n-# (the image we're creating) and the second argument is a junk directory to\n-# ignore all the other MinGW stuff the script creates.\n-ifeq ($$(findstring pc-windows-gnu,$(1)),pc-windows-gnu)\n-\t$$(Q)rm -Rf tmp/dist/win-rust-gcc-$(1)\n-\t$$(Q)$$(CFG_PYTHON) $$(S)src/etc/make-win-dist.py \\\n-\t\ttmp/dist/$$(PKG_NAME)-$(1)-image \\\n-\t\ttmp/dist/win-rust-gcc-$(1) $(1)\n-endif\n-# On 32-bit MinGW we're always including a DLL which needs some extra licenses\n-# to distribute. On 64-bit MinGW we don't actually distribute anything requiring\n-# us to distribute a license but it's likely that the install will *also*\n-# include the rust-mingw package down below, which also need licenses, so to be\n-# safe we just inlude it here in all MinGW packages.\n-ifdef CFG_WINDOWSY_$(1)\n-ifeq ($$(findstring $(1),gnu),gnu)\n-\t$$(Q)cp -r $$(S)src/etc/third-party \\\n-\t\ttmp/dist/$$(PKG_NAME)-$(1)-image/share/doc/\n-endif\n-endif\n-\t$$(Q)$$(S)src/rust-installer/gen-installer.sh \\\n-\t\t--product-name=Rust \\\n-\t\t--rel-manifest-dir=rustlib \\\n-\t\t--success-message=Rust-is-ready-to-roll. \\\n-\t\t--image-dir=tmp/dist/$$(PKG_NAME)-$(1)-image \\\n-\t\t--work-dir=tmp/dist \\\n-\t\t--output-dir=dist \\\n-\t\t--non-installed-overlay=tmp/dist/$$(PKG_NAME)-$(1)-overlay \\\n-\t\t--package-name=$$(PKG_NAME)-$(1) \\\n-\t\t--component-name=rustc \\\n-\t\t--legacy-manifest-dirs=rustlib,cargo\n-\t$$(Q)rm -R tmp/dist/$$(PKG_NAME)-$(1)-image\n-\n-dist-doc-install-dir-$(1): docs\n-\t$$(Q)mkdir -p tmp/dist/$$(DOC_PKG_NAME)-$(1)-image/share/doc/rust\n-\t$$(Q)cp -r doc tmp/dist/$$(DOC_PKG_NAME)-$(1)-image/share/doc/rust/html\n-\n-dist/$$(DOC_PKG_NAME)-$(1).tar.gz: dist-doc-install-dir-$(1)\n-\t@$(call E, build: $$@)\n-\t$$(Q)$$(S)src/rust-installer/gen-installer.sh \\\n-\t\t--product-name=Rust-Documentation \\\n-\t\t--rel-manifest-dir=rustlib \\\n-\t\t--success-message=Rust-documentation-is-installed. \\\n-\t\t--image-dir=tmp/dist/$$(DOC_PKG_NAME)-$(1)-image \\\n-\t\t--work-dir=tmp/dist \\\n-\t\t--output-dir=dist \\\n-\t\t--package-name=$$(DOC_PKG_NAME)-$(1) \\\n-\t\t--component-name=rust-docs \\\n-\t\t--legacy-manifest-dirs=rustlib,cargo \\\n-\t\t--bulk-dirs=share/doc/rust/html\n-\t$$(Q)rm -R tmp/dist/$$(DOC_PKG_NAME)-$(1)-image\n-\n-# Creates the rust-mingw package, and the first argument to make-win-dist is a\n-# \"temporary directory\" which is just thrown away (this contains the runtime\n-# DLLs included in the rustc package above) and the second argument is where to\n-# place all the MinGW components (which is what we want).\n-dist-mingw-install-dir-$(1):\n-\t$$(Q)mkdir -p tmp/dist/rust-mingw-tmp-$(1)-image\n-\t$$(Q)rm -Rf tmp/dist/$$(MINGW_PKG_NAME)-$(1)-image\n-\t$$(Q)$$(CFG_PYTHON) $$(S)src/etc/make-win-dist.py \\\n-\t\ttmp/dist/rust-mingw-tmp-$(1)-image \\\n-\t\ttmp/dist/$$(MINGW_PKG_NAME)-$(1)-image $(1)\n-\n-dist/$$(MINGW_PKG_NAME)-$(1).tar.gz: dist-mingw-install-dir-$(1)\n-\t@$(call E, build: $$@)\n-\t$$(Q)$$(S)src/rust-installer/gen-installer.sh \\\n-\t\t--product-name=Rust-MinGW \\\n-\t\t--rel-manifest-dir=rustlib \\\n-\t\t--success-message=Rust-MinGW-is-installed. \\\n-\t\t--image-dir=tmp/dist/$$(MINGW_PKG_NAME)-$(1)-image \\\n-\t\t--work-dir=tmp/dist \\\n-\t\t--output-dir=dist \\\n-\t\t--package-name=$$(MINGW_PKG_NAME)-$(1) \\\n-\t\t--component-name=rust-mingw \\\n-\t\t--legacy-manifest-dirs=rustlib,cargo\n-\t$$(Q)rm -R tmp/dist/$$(MINGW_PKG_NAME)-$(1)-image\n-\n-endef\n-\n-# $(1) - host\n-# $(2) - target\n-define DEF_INSTALLER_TARGETS\n-\n-dist-install-dir-$(2)-target: PREPARE_HOST=$(1)\n-dist-install-dir-$(2)-target: PREPARE_TARGETS=$(2)\n-dist-install-dir-$(2)-target: PREPARE_DEST_DIR=tmp/dist/$$(STD_PKG_NAME)-$(2)-image\n-dist-install-dir-$(2)-target: prepare-base-dir-$(2)-target\n-\n-dist/$$(STD_PKG_NAME)-$(2).tar.gz: dist-install-dir-$(2)-target\n-\t@$$(call E, build: $$@)\n-\t$$(Q)$$(S)src/rust-installer/gen-installer.sh \\\n-\t\t--product-name=Rust \\\n-\t\t--rel-manifest-dir=rustlib \\\n-\t\t--success-message=std-is-standing-at-the-ready. \\\n-\t\t--image-dir=tmp/dist/$$(STD_PKG_NAME)-$(2)-image \\\n-\t\t--work-dir=tmp/dist \\\n-\t\t--output-dir=dist \\\n-\t\t--package-name=$$(STD_PKG_NAME)-$(2) \\\n-\t\t--component-name=rust-std-$(2) \\\n-\t\t--legacy-manifest-dirs=rustlib,cargo\n-\t$$(Q)rm -R tmp/dist/$$(STD_PKG_NAME)-$(2)-image\n-endef\n-\n-$(foreach host,$(CFG_HOST),\\\n-  $(eval $(call DEF_INSTALLER,$(host))))\n-\n-dist/$(SRC_PKG_NAME).tar.gz: tmp/dist/$(SRC_PKG_NAME)-image\n-\t@$(call E, build: $@)\n-\t$(Q)$(S)src/rust-installer/gen-installer.sh \\\n-\t\t--product-name=Rust \\\n-\t\t--rel-manifest-dir=rustlib \\\n-\t\t--success-message=Awesome-Source. \\\n-\t\t--image-dir=tmp/dist/$(SRC_PKG_NAME)-image \\\n-\t\t--work-dir=tmp/dist \\\n-\t\t--output-dir=dist \\\n-\t\t--package-name=$(SRC_PKG_NAME) \\\n-\t\t--component-name=rust-src \\\n-\t\t--legacy-manifest-dirs=rustlib,cargo\n-\n-# When generating packages for the standard library, we've actually got a lot of\n-# artifacts to choose from. Each of the CFG_HOST compilers will have a copy of\n-# the standard library for each CFG_TARGET, but we only want to generate one\n-# standard library package. As a result, for each entry in CFG_TARGET we need to\n-# pick a CFG_HOST to get the standard library from.\n-#\n-# In theory it doesn't actually matter what host we choose as it should be the\n-# case that all hosts produce the same set of libraries for a target (regardless\n-# of the host itself). Currently there is a bug in the compiler, however, which\n-# means this is not the case (see #29228 and #29235). To solve the first of\n-# those bugs, we prefer to select a standard library from the host it was\n-# generated from, allowing plugins to work in more situations.\n-#\n-# For all CFG_TARGET entries in CFG_HOST, however, we just pick CFG_BUILD as the\n-# host we slurp up a standard library from.\n-$(foreach host,$(CFG_HOST),\\\n-  $(eval $(call DEF_INSTALLER_TARGETS,$(host),$(host))))\n-$(foreach target,$(filter-out $(CFG_HOST),$(CFG_TARGET)),\\\n-  $(eval $(call DEF_INSTALLER_TARGETS,$(CFG_BUILD),$(target))))\n-\n-ifdef CFG_WINDOWSY_$(CFG_BUILD)\n-define BUILD_MINGW_TARBALL\n-ifeq ($$(findstring gnu,$(1)),gnu)\n-MAYBE_MINGW_TARBALLS += dist/$(MINGW_PKG_NAME)-$(1).tar.gz\n-endif\n-endef\n-\n-$(foreach host,$(CFG_HOST),\\\n-  $(eval $(call BUILD_MINGW_TARBALL,$(host))))\n-endif\n-\n-ifeq ($(CFG_DISABLE_DOCS),)\n-MAYBE_DOC_TARBALLS=$(foreach host,$(CFG_HOST),dist/$(DOC_PKG_NAME)-$(host).tar.gz)\n-endif\n-\n-dist-tar-bins: \\\n-\t$(foreach host,$(CFG_HOST),dist/$(PKG_NAME)-$(host).tar.gz) \\\n-\t$(foreach target,$(CFG_TARGET),dist/$(STD_PKG_NAME)-$(target).tar.gz) \\\n-\t$(MAYBE_DOC_TARBALLS) $(MAYBE_MINGW_TARBALLS)\n-\n-# Just try to run the compiler for the build host\n-distcheck-tar-bins: dist-tar-bins\n-\t@$(call E, checking binary tarball)\n-\t$(Q)rm -Rf tmp/distcheck/$(PKG_NAME)-$(CFG_BUILD)\n-\t$(Q)rm -Rf tmp/distcheck/tarbininstall\n-\t$(Q)mkdir -p tmp/distcheck\n-\t$(Q)cd tmp/distcheck && tar -xzf ../../dist/$(PKG_NAME)-$(CFG_BUILD).tar.gz\n-\t$(Q)mkdir -p tmp/distcheck/tarbininstall\n-\t$(Q)sh tmp/distcheck/$(PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=tmp/distcheck/tarbininstall\n-\t$(Q)sh tmp/distcheck/$(PKG_NAME)-$(CFG_BUILD)/install.sh --prefix=tmp/distcheck/tarbininstall --uninstall\n-\t$(Q)rm -Rf tmp/distcheck/$(PKG_NAME)-$(CFG_BUILD)\n-\t$(Q)rm -Rf tmp/distcheck/tarbininstall\n-\n-######################################################################\n-# Docs\n-######################################################################\n-\n-# Just copy the docs to a folder under dist with the appropriate name\n-# for uploading to S3\n-dist-docs: docs\n-\t$(Q) rm -Rf dist/doc\n-\t$(Q) mkdir -p dist/doc/\n-\t$(Q) cp -r doc dist/doc/$(CFG_PACKAGE_VERS)\n-\n-distcheck-docs: dist-docs\n-\n-######################################################################\n-# Primary targets (dist, distcheck)\n-######################################################################\n-\n-MAYBE_DIST_TAR_SRC=dist-tar-src dist/$(SRC_PKG_NAME).tar.gz\n-MAYBE_DISTCHECK_TAR_SRC=distcheck-tar-src dist/$(SRC_PKG_NAME).tar.gz\n-\n-# FIXME #13224: On OS X don't produce tarballs simply because --exclude-vcs don't work.\n-# This is a huge hack because I just don't have time to figure out another solution.\n-ifeq ($(CFG_OSTYPE), apple-darwin)\n-MAYBE_DIST_TAR_SRC=\n-MAYBE_DISTCHECK_TAR_SRC=\n-endif\n-\n-# Don't bother with source tarballs on windows just because we historically haven't.\n-ifeq ($(CFG_OSTYPE), pc-windows-gnu)\n-MAYBE_DIST_TAR_SRC=\n-MAYBE_DISTCHECK_TAR_SRC=\n-endif\n-\n-ifneq ($(CFG_DISABLE_DOCS),)\n-MAYBE_DIST_DOCS=\n-MAYBE_DISTCHECK_DOCS=\n-else\n-MAYBE_DIST_DOCS=dist-docs\n-MAYBE_DISTCHECK_DOCS=distcheck-docs\n-endif\n-\n-dist: $(MAYBE_DIST_TAR_SRC) dist-tar-bins $(MAYBE_DIST_DOCS)\n-\n-distcheck: $(MAYBE_DISTCHECK_TAR_SRC) distcheck-tar-bins $(MAYBE_DISTCHECK_DOCS)\n-\t$(Q)rm -Rf tmp/distcheck\n-\t@echo\n-\t@echo -----------------------------------------------\n-\t@echo \"Rust ready for distribution (see ./dist)\"\n-\t@echo -----------------------------------------------\n-\n-.PHONY: dist distcheck"}, {"sha": "6c0be654e1f5d74a8e39b6f18f26896742fda9d1", "filename": "mk/docs.mk", "status": "removed", "additions": 0, "deletions": 222, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,222 +0,0 @@\n-# Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-######################################################################\n-# The various pieces of standalone documentation.\n-#\n-# The DOCS variable is their names (with no file extension).\n-#\n-# RUSTDOC_FLAGS_xyz variables are extra arguments to pass to the\n-# rustdoc invocation for xyz.\n-#\n-# RUSTDOC_DEPS_xyz are extra dependencies for the rustdoc invocation\n-# on xyz.\n-#\n-# L10N_LANGS are the languages for which the docs have been\n-# translated.\n-######################################################################\n-DOCS := index \\\n-    complement-lang-faq complement-design-faq complement-project-faq \\\n-    rustdoc reference grammar\n-\n-# Legacy guides, preserved for a while to reduce the number of 404s\n-DOCS += guide-crates guide-error-handling guide-ffi guide-macros guide \\\n-    guide-ownership guide-plugins guide-pointers guide-strings guide-tasks \\\n-    guide-testing tutorial intro\n-\n-\n-RUSTDOC_DEPS_reference := doc/full-toc.inc\n-RUSTDOC_FLAGS_reference := --html-in-header=doc/full-toc.inc\n-\n-L10N_LANGS := ja\n-\n-# Generally no need to edit below here.\n-\n-# The options are passed to the documentation generators.\n-RUSTDOC_HTML_OPTS_NO_CSS = --html-before-content=doc/version_info.html \\\n-\t--html-in-header=doc/favicon.inc \\\n-\t--html-after-content=doc/footer.inc \\\n-\t--markdown-playground-url='https://play.rust-lang.org/'\n-\n-RUSTDOC_HTML_OPTS = $(RUSTDOC_HTML_OPTS_NO_CSS) --markdown-css rust.css\n-\n-# The rustdoc executable...\n-RUSTDOC_EXE = $(HBIN2_H_$(CFG_BUILD))/rustdoc$(X_$(CFG_BUILD))\n-# ...with rpath included in case --disable-rpath was provided to\n-# ./configure\n-RUSTDOC = $(RPATH_VAR2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(RUSTDOC_EXE)\n-\n-# The rustbook executable...\n-RUSTBOOK_EXE = $(HBIN2_H_$(CFG_BUILD))/rustbook$(X_$(CFG_BUILD))\n-# ...with rpath included in case --disable-rpath was provided to\n-# ./configure\n-RUSTBOOK = $(RPATH_VAR2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(RUSTBOOK_EXE)\n-\n-# The error_index_generator executable...\n-ERR_IDX_GEN_EXE = $(HBIN2_H_$(CFG_BUILD))/error_index_generator$(X_$(CFG_BUILD))\n-ERR_IDX_GEN = $(RPATH_VAR2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(ERR_IDX_GEN_EXE)\n-ERR_IDX_GEN_MD = $(RPATH_VAR2_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(ERR_IDX_GEN_EXE) markdown\n-\n-D := $(S)src/doc\n-\n-DOC_TARGETS := book nomicon error-index\n-COMPILER_DOC_TARGETS :=\n-DOC_L10N_TARGETS :=\n-\n-# If NO_REBUILD is set then break the dependencies on rustdoc so we\n-# build the documentation without having to rebuild rustdoc.\n-ifeq ($(NO_REBUILD),)\n-HTML_DEPS := $(RUSTDOC_EXE)\n-else\n-HTML_DEPS :=\n-endif\n-\n-######################################################################\n-# Rust version\n-######################################################################\n-\n-HTML_DEPS += doc/version_info.html\n-doc/version_info.html: $(D)/version_info.html.template $(MKFILE_DEPS) \\\n-                       $(wildcard $(D)/*.*) | doc/\n-\t@$(call E, version-info: $@)\n-\t$(Q)sed -e \"s/VERSION/$(CFG_RELEASE)/; \\\n-                s/SHORT_HASH/$(CFG_SHORT_VER_HASH)/; \\\n-                s/STAMP/$(CFG_VER_HASH)/;\" $< >$@\n-\n-GENERATED += doc/version_info.html\n-\n-######################################################################\n-# Docs from rustdoc\n-######################################################################\n-\n-doc/:\n-\t@mkdir -p $@\n-\n-HTML_DEPS += doc/rust.css\n-doc/rust.css: $(D)/rust.css | doc/\n-\t@$(call E, cp: $@)\n-\t$(Q)cp -PRp $< $@ 2> /dev/null\n-\n-HTML_DEPS += doc/favicon.inc\n-doc/favicon.inc: $(D)/favicon.inc | doc/\n-\t@$(call E, cp: $@)\n-\t$(Q)cp -PRp $< $@ 2> /dev/null\n-\n-doc/full-toc.inc: $(D)/full-toc.inc | doc/\n-\t@$(call E, cp: $@)\n-\t$(Q)cp -PRp $< $@ 2> /dev/null\n-\n-HTML_DEPS += doc/footer.inc\n-doc/footer.inc: $(D)/footer.inc | doc/\n-\t@$(call E, cp: $@)\n-\t$(Q)cp -PRp $< $@ 2> /dev/null\n-\n-# The (english) documentation for each doc item.\n-DOC_TARGETS += doc/not_found.html\n-doc/not_found.html: $(D)/not_found.md $(HTML_DEPS) | doc/\n-\t@$(call E, rustdoc: $@)\n-\t$(Q)$(RUSTDOC) $(RUSTDOC_HTML_OPTS_NO_CSS) \\\n-\t\t--markdown-no-toc \\\n-\t\t--markdown-css https://doc.rust-lang.org/rust.css $<\n-\n-define DEF_DOC\n-\n-# HTML (rustdoc)\n-DOC_TARGETS += doc/$(1).html\n-doc/$(1).html: $$(D)/$(1).md $$(HTML_DEPS) $$(RUSTDOC_DEPS_$(1)) | doc/\n-\t@$$(call E, rustdoc: $$@)\n-\t$$(Q)$$(RUSTDOC) $$(RUSTDOC_HTML_OPTS) $$(RUSTDOC_FLAGS_$(1)) $$<\n-\n-endef\n-\n-$(foreach docname,$(DOCS),$(eval $(call DEF_DOC,$(docname))))\n-\n-\n-######################################################################\n-# Rustdoc (libstd/extra)\n-######################################################################\n-\n-\n-# The library documenting macro\n-#\n-# $(1) - The crate name (std/extra)\n-#\n-# Passes --cfg stage2 to rustdoc because it uses the stage2 librustc.\n-define DEF_LIB_DOC\n-\n-# If NO_REBUILD is set then break the dependencies on rustdoc so we\n-# build crate documentation without having to rebuild rustdoc.\n-ifeq ($(NO_REBUILD),)\n-LIB_DOC_DEP_$(1) = \\\n-\t$$(CRATEFILE_$(1)) \\\n-\t$$(RSINPUTS_$(1)) \\\n-\t$$(RUSTDOC_EXE) \\\n-\t$$(foreach dep,$$(RUST_DEPS_$(1)_T_$(CFG_BUILD)), \\\n-\t\t$$(TLIB2_T_$(CFG_BUILD)_H_$(CFG_BUILD))/stamp.$$(dep)) \\\n-\t$$(foreach dep,$$(filter $$(DOC_CRATES), $$(RUST_DEPS_$(1)_T_$(CFG_BUILD))), \\\n-\t\tdoc/$$(dep)/)\n-else\n-LIB_DOC_DEP_$(1) = $$(CRATEFILE_$(1)) $$(RSINPUTS_$(1))\n-endif\n-\n-doc/$(1)/:\n-\t$$(Q)mkdir -p $$@\n-\n-doc/$(1)/index.html: CFG_COMPILER_HOST_TRIPLE = $(CFG_TARGET)\n-doc/$(1)/index.html: $$(LIB_DOC_DEP_$(1)) doc/$(1)/\n-\t@$$(call E, rustdoc: $$@)\n-\t$$(Q)CFG_LLVM_LINKAGE_FILE=$$(LLVM_LINKAGE_PATH_$(CFG_BUILD)) \\\n-\t\t$$(RUSTDOC) --cfg dox --cfg stage2 $$(RUSTFLAGS_$(1)) $$<\n-endef\n-\n-$(foreach crate,$(CRATES),$(eval $(call DEF_LIB_DOC,$(crate))))\n-\n-COMPILER_DOC_TARGETS := $(CRATES:%=doc/%/index.html)\n-ifdef CFG_ENABLE_COMPILER_DOCS\n-  DOC_TARGETS += $(COMPILER_DOC_TARGETS)\n-else\n-  DOC_TARGETS += $(DOC_CRATES:%=doc/%/index.html)\n-endif\n-\n-ifdef CFG_DISABLE_DOCS\n-  $(info cfg: disabling doc build (CFG_DISABLE_DOCS))\n-  DOC_TARGETS :=\n-  COMPILER_DOC_TARGETS :=\n-endif\n-\n-docs: $(DOC_TARGETS)\n-doc: docs\n-compiler-docs: $(COMPILER_DOC_TARGETS)\n-\n-book: doc/book/index.html\n-\n-doc/book/index.html: $(RUSTBOOK_EXE) $(wildcard $(S)/src/doc/book/*.md) | doc/\n-\t@$(call E, rustbook: $@)\n-\t$(Q)rm -rf doc/book\n-\t$(Q)$(RUSTBOOK) build $(S)src/doc/book doc/book\n-\n-nomicon: doc/nomicon/index.html\n-\n-doc/nomicon/index.html: $(RUSTBOOK_EXE) $(wildcard $(S)/src/doc/nomicon/*.md) | doc/\n-\t@$(call E, rustbook: $@)\n-\t$(Q)rm -rf doc/nomicon\n-\t$(Q)$(RUSTBOOK) build $(S)src/doc/nomicon doc/nomicon\n-\n-error-index: doc/error-index.html\n-\n-# Metadata used to generate the index is created as a side effect of\n-# the build so this depends on every crate being up to date.\n-doc/error-index.html: $(ERR_IDX_GEN_EXE) $(CSREQ$(2)_T_$(CFG_BUILD)_H_$(CFG_BUILD)) | doc/\n-\t$(Q)$(call E, error_index_generator: $@)\n-\t$(Q)$(ERR_IDX_GEN)\n-\n-doc/error-index.md: $(ERR_IDX_GEN_EXE) $(CSREQ$(2)_T_$(CFG_BUILD)_H_$(CFG_BUILD)) | doc/\n-\t$(Q)$(call E, error_index_generator: $@)\n-\t$(Q)$(ERR_IDX_GEN_MD)"}, {"sha": "1bd042adb218fdb958cc9a16bebd5f57e6ec1509", "filename": "mk/grammar.mk", "status": "removed", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fgrammar.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fgrammar.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fgrammar.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,117 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-BG = $(CFG_BUILD_DIR)/grammar/\n-SG = $(S)src/grammar/\n-B = $(CFG_BUILD_DIR)/$(CFG_BUILD)/stage2/\n-L = $(B)lib/rustlib/$(CFG_BUILD)/lib\n-LD = $(CFG_BUILD)/stage2/lib/rustlib/$(CFG_BUILD)/lib/\n-RUSTC = $(STAGE2_T_$(CFG_BUILD)_H_$(CFG_BUILD))\n-ifeq ($(CFG_OSTYPE),apple-darwin)\n-\tFLEX_LDFLAGS=-ll\n-else\n-\tFLEX_LDFLAGS=-lfl\n-endif\n-\n-# Run the reference lexer against libsyntax and compare the tokens and spans.\n-# If \"// ignore-lexer-test\" is present in the file, it will be ignored.\n-#\n-# $(1) is the file to test.\n-define LEXER_TEST\n-grep \"// ignore-lexer-test\" $(1) ; \\\n-  if [ $$? -eq 1 ]; then \\\n-   CLASSPATH=$(B)grammar $(CFG_GRUN) RustLexer tokens -tokens < $(1) \\\n-   | $(B)grammar/verify $(1) ; \\\n-  fi\n-endef\n-\n-$(BG):\n-\t$(Q)mkdir -p $(BG)\n-\n-$(BG)RustLexer.class: $(BG) $(SG)RustLexer.g4\n-\t$(Q)$(CFG_ANTLR4) -o $(BG) $(SG)RustLexer.g4\n-\t$(Q)$(CFG_JAVAC) -d $(BG) -classpath $(CFG_ANTLR4_JAR) $(BG)RustLexer.java\n-\n-check-build-lexer-verifier: $(BG)verify\n-\n-ifeq ($(NO_REBUILD),)\n-VERIFY_DEPS :=  rustc-stage2-H-$(CFG_BUILD) $(LD)stamp.rustc\n-else\n-VERIFY_DEPS :=\n-endif\n-\n-$(BG)verify: $(BG) $(SG)verify.rs $(VERIFY_DEPS)\n-\t$(Q)$(RUSTC) --out-dir $(BG) -L $(L) $(SG)verify.rs\n-\n-ifdef CFG_JAVAC\n-ifdef CFG_ANTLR4\n-ifdef CFG_GRUN\n-check-lexer: $(BG) $(BG)RustLexer.class check-build-lexer-verifier\n-\t$(info Verifying libsyntax against the reference lexer ...)\n-\t$(Q)$(SG)check.sh $(S) \"$(BG)\" \\\n-\t\t\"$(CFG_GRUN)\" \"$(BG)verify\" \"$(BG)RustLexer.tokens\"\n-else\n-$(info cfg: lexer tooling not available, skipping lexer test...)\n-check-lexer:\n-\n-endif\n-else\n-$(info cfg: lexer tooling not available, skipping lexer test...)\n-check-lexer:\n-\n-endif\n-else\n-$(info cfg: lexer tooling not available, skipping lexer test...)\n-check-lexer:\n-\n-endif\n-\n-$(BG)lex.yy.c: $(SG)lexer.l $(BG)\n-\t@$(call E, flex: $@)\n-\t$(Q)$(CFG_FLEX) -o $@ $<\n-\n-$(BG)lexer-lalr.o: $(BG)lex.yy.c $(BG)parser-lalr.tab.h\n-\t@$(call E, cc: $@)\n-\t$(Q)$(CFG_CC) -include $(BG)parser-lalr.tab.h -c -o $@ $<\n-\n-$(BG)parser-lalr.tab.c $(BG)parser-lalr.tab.h: $(SG)parser-lalr.y\n-\t@$(call E, bison: $@)\n-\t$(Q)$(CFG_BISON) $< --output=$(BG)parser-lalr.tab.c --defines=$(BG)parser-lalr.tab.h \\\n-\t\t--name-prefix=rs --warnings=error=all\n-\n-$(BG)parser-lalr.o: $(BG)parser-lalr.tab.c\n-\t@$(call E, cc: $@)\n-\t$(Q)$(CFG_CC) -c -o $@ $<\n-\n-$(BG)parser-lalr-main.o: $(SG)parser-lalr-main.c\n-\t@$(call E, cc: $@)\n-\t$(Q)$(CFG_CC) -std=c99 -c -o $@ $<\n-\n-$(BG)parser-lalr: $(BG)parser-lalr.o $(BG)parser-lalr-main.o $(BG)lexer-lalr.o\n-\t@$(call E, cc: $@)\n-\t$(Q)$(CFG_CC) -o $@ $^ $(FLEX_LDFLAGS)\n-\n-\n-ifdef CFG_FLEX\n-ifdef CFG_BISON\n-check-grammar: $(BG) $(BG)parser-lalr\n-\t$(info Verifying grammar ...)\n-\t$(SG)testparser.py -p $(BG)parser-lalr -s $(S)src\n-\n-else\n-$(info cfg: bison not available, skipping parser test...)\n-check-grammar:\n-\n-endif\n-else\n-$(info cfg: flex not available, skipping parser test...)\n-check-grammar:\n-\n-endif"}, {"sha": "d17479bd894e5f91fa83d0a3ee0080a3da02232a", "filename": "mk/host.mk", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fhost.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fhost.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fhost.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,84 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# Generic rule for copying any target crate to a host crate. This rule will also\n-# promote any dependent rust crates up to their host locations as well\n-#\n-# $(1) - the stage to copy from\n-# $(2) - the stage to copy to\n-# $(3) - the host triple\n-# $(4) - the target triple (same as $(3))\n-# $(5) - the name of the crate being processed\n-define CP_HOST_STAGE_N_CRATE\n-\n-ifeq ($$(ONLY_RLIB_$(5)),)\n-$$(HLIB$(2)_H_$(4))/stamp.$(5): \\\n-\t$$(TLIB$(1)_T_$(3)_H_$(4))/stamp.$(5) \\\n-\t$$(RUST_DEPS_$(5)_T_$(3):%=$$(HLIB$(2)_H_$(4))/stamp.%) \\\n-\t| $$(HLIB$(2)_H_$(4))/\n-\t@$$(call E, cp: $$(@D)/lib$(5))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES, \\\n-\t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(3),$(5)))\n-\t$$(Q)cp $$< $$@\n-\t$$(Q)cp -R $$(TLIB$(1)_T_$(3)_H_$(4))/$$(call CFG_LIB_GLOB_$(3),$(5)) \\\n-\t        $$(HLIB$(2)_H_$(4))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES, \\\n-\t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(3),$(5)))\n-else\n-$$(HLIB$(2)_H_$(4))/stamp.$(5):\n-\t$$(Q)touch $$@\n-endif\n-\n-endef\n-\n-# Same as the above macro, but for tools instead of crates\n-define CP_HOST_STAGE_N_TOOL\n-\n-$$(HBIN$(2)_H_$(4))/$(5)$$(X_$(3)): \\\n-\t$$(TBIN$(1)_T_$(3)_H_$(4))/$(5)$$(X_$(3)) \\\n-\t$$(TOOL_DEPS_$(5):%=$$(HLIB$(2)_H_$(4))/stamp.%) \\\n-\t| $$(HBIN$(2)_H_$(4))/\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-endef\n-\n-\n-# Miscellaneous rules for just making a few directories.\n-#\n-# $(1) - the stage to copy from\n-# $(2) - the stage to copy to\n-# $(3) - the target triple\n-# $(4) - the host triple (same as $(3))\n-define CP_HOST_STAGE_N\n-\n-ifneq ($(CFG_LIBDIR_RELATIVE),bin)\n-$$(HLIB$(2)_H_$(4))/:\n-\t@mkdir -p $$@\n-endif\n-\n-endef\n-\n-$(foreach t,$(CFG_HOST), \\\n-\t$(eval $(call CP_HOST_STAGE_N,0,1,$(t),$(t))) \\\n-\t$(eval $(call CP_HOST_STAGE_N,1,2,$(t),$(t))) \\\n-\t$(eval $(call CP_HOST_STAGE_N,2,3,$(t),$(t))))\n-\n-$(foreach crate,$(CRATES), \\\n- $(foreach t,$(CFG_HOST), \\\n-  $(eval $(call CP_HOST_STAGE_N_CRATE,0,1,$(t),$(t),$(crate))) \\\n-  $(eval $(call CP_HOST_STAGE_N_CRATE,1,2,$(t),$(t),$(crate))) \\\n-  $(eval $(call CP_HOST_STAGE_N_CRATE,2,3,$(t),$(t),$(crate)))))\n-\n-$(foreach tool,$(TOOLS), \\\n- $(foreach t,$(CFG_HOST), \\\n-  $(eval $(call CP_HOST_STAGE_N_TOOL,0,1,$(t),$(t),$(tool))) \\\n-  $(eval $(call CP_HOST_STAGE_N_TOOL,1,2,$(t),$(t),$(tool))) \\\n-  $(eval $(call CP_HOST_STAGE_N_TOOL,2,3,$(t),$(t),$(tool)))))"}, {"sha": "be212869f0103517b8856b0ff1bed4b65e58ed86", "filename": "mk/install.mk", "status": "removed", "additions": 0, "deletions": 138, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,138 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-RUN_INSTALLER = cd tmp/empty_dir && \\\n-\tsh ../../tmp/dist/$(1)/install.sh \\\n-\t\t--prefix=\"$(DESTDIR)$(CFG_PREFIX)\" \\\n-\t\t--libdir=\"$(DESTDIR)$(CFG_LIBDIR)\" \\\n-\t\t--mandir=\"$(DESTDIR)$(CFG_MANDIR)\" \\\n-\t\t--docdir=\"$(DESTDIR)$(CFG_DOCDIR)\"\n-\n-install:\n-ifeq (root user, $(USER) $(patsubst %,user,$(SUDO_USER)))\n-# Build the dist as the original user\n-\t$(Q)sudo -u \"$$SUDO_USER\" $(MAKE) prepare_install\n-else\n-\t$(Q)$(MAKE) prepare_install\n-endif\n-ifeq ($(CFG_DISABLE_DOCS),)\n-\t$(Q)$(call RUN_INSTALLER,$(DOC_PKG_NAME)-$(CFG_BUILD)) --disable-ldconfig\n-endif\n-\t$(Q)$(foreach target,$(CFG_TARGET),\\\n-\t  ($(call RUN_INSTALLER,$(STD_PKG_NAME)-$(target)) --disable-ldconfig);)\n-\t$(Q)$(call RUN_INSTALLER,$(PKG_NAME)-$(CFG_BUILD))\n-# Remove tmp files because it's a decent amount of disk space\n-\t$(Q)rm -R tmp/dist\n-\n-prepare_install: dist-tar-bins | tmp/empty_dir\n-\n-uninstall:\n-ifeq (root user, $(USER) $(patsubst %,user,$(SUDO_USER)))\n-# Build the dist as the original user\n-\t$(Q)sudo -u \"$$SUDO_USER\" $(MAKE) prepare_uninstall\n-else\n-\t$(Q)$(MAKE) prepare_uninstall\n-endif\n-ifeq ($(CFG_DISABLE_DOCS),)\n-\t$(Q)$(call RUN_INSTALLER,$(DOC_PKG_NAME)-$(CFG_BUILD)) --uninstall\n-endif\n-\t$(Q)$(call RUN_INSTALLER,$(PKG_NAME)-$(CFG_BUILD)) --uninstall\n-\t$(Q)$(foreach target,$(CFG_TARGET),\\\n-\t  ($(call RUN_INSTALLER,$(STD_PKG_NAME)-$(target)) --uninstall);)\n-# Remove tmp files because it's a decent amount of disk space\n-\t$(Q)rm -R tmp/dist\n-\n-prepare_uninstall: dist-tar-bins | tmp/empty_dir\n-\n-.PHONY: install prepare_install uninstall prepare_uninstall\n-\n-tmp/empty_dir:\n-\tmkdir -p $@\n-\n-######################################################################\n-# Android remote installation\n-######################################################################\n-\n-# Android runtime setup\n-# FIXME: This probably belongs somewhere else\n-\n-# target platform specific variables for android\n-define DEF_ADB_DEVICE_STATUS\n-CFG_ADB_DEVICE_STATUS=$(1)\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(if $(findstring android, $(target)), \\\n-    $(if $(findstring adb,$(CFG_ADB)), \\\n-      $(if $(findstring device,$(shell $(CFG_ADB) devices 2>/dev/null | grep -E '^[_A-Za-z0-9-]+[[:blank:]]+device')), \\\n-        $(info install: install-runtime-target for $(target) enabled \\\n-          $(info install: android device attached) \\\n-          $(eval $(call DEF_ADB_DEVICE_STATUS, true))), \\\n-        $(info install: install-runtime-target for $(target) disabled \\\n-          $(info install: android device not attached) \\\n-          $(eval $(call DEF_ADB_DEVICE_STATUS, false))) \\\n-      ), \\\n-      $(info install: install-runtime-target for $(target) disabled \\\n-        $(info install: adb not found) \\\n-        $(eval $(call DEF_ADB_DEVICE_STATUS, false))) \\\n-    ), \\\n-  ) \\\n-)\n-\n-ifeq (install-runtime-target,$(firstword $(MAKECMDGOALS)))\n-$(eval $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS)):;@:)\n-L_TOKEN := $(word 2,$(MAKECMDGOALS))\n-ifeq ($(L_TOKEN),)\n-CFG_RUNTIME_PUSH_DIR=/system/lib\n-else\n-CFG_RUNTIME_PUSH_DIR=$(L_TOKEN)\n-endif\n-\n-ifeq ($(CFG_ADB_DEVICE_STATUS),true)\n-ifdef VERBOSE\n- ADB = adb $(1)\n- ADB_PUSH = adb push $(1) $(2)\n- ADB_SHELL = adb shell $(1) $(2)\n-else\n- ADB = $(Q)$(call E, adb $(1)) && adb $(1) 1>/dev/null\n- ADB_PUSH = $(Q)$(call E, adb push $(1)) && adb push $(1) $(2) 1>/dev/null\n- ADB_SHELL = $(Q)$(call E, adb shell $(1) $(2)) && adb shell $(1) $(2) 1>/dev/null\n-endif\n-\n-define INSTALL_RUNTIME_TARGET_N\n-install-runtime-target-$(1)-host-$(2): $$(TSREQ$$(ISTAGE)_T_$(1)_H_$(2)) $$(SREQ$$(ISTAGE)_T_$(1)_H_$(2))\n-\t$$(Q)$$(call ADB_SHELL,mkdir,$(CFG_RUNTIME_PUSH_DIR))\n-\t$$(Q)$$(foreach crate,$$(TARGET_CRATES_$(1)), \\\n-\t    $$(call ADB_PUSH,$$(TL$(1)$(2))/$$(call CFG_LIB_GLOB_$(1),$$(crate)), \\\n-\t\t\t$$(CFG_RUNTIME_PUSH_DIR));)\n-endef\n-\n-define INSTALL_RUNTIME_TARGET_CLEANUP_N\n-install-runtime-target-$(1)-cleanup:\n-\t$$(Q)$$(call ADB,remount)\n-\t$$(Q)$$(foreach crate,$$(TARGET_CRATES_$(1)), \\\n-\t    $$(call ADB_SHELL,rm,$$(CFG_RUNTIME_PUSH_DIR)/$$(call CFG_LIB_GLOB_$(1),$$(crate)));)\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n- $(if $(findstring $(CFG_ADB_DEVICE_STATUS),\"true\"), \\\n-  $(eval $(call INSTALL_RUNTIME_TARGET_N,$(taget),$(CFG_BUILD))) \\\n-  $(eval $(call INSTALL_RUNTIME_TARGET_CLEANUP_N,$(target))) \\\n-  ))\n-\n-install-runtime-target: \\\n-\tinstall-runtime-target-arm-linux-androideabi-cleanup \\\n-\tinstall-runtime-target-arm-linux-androideabi-host-$(CFG_BUILD)\n-else\n-install-runtime-target:\n-\t@echo \"No device to install runtime library\"\n-\t@echo\n-endif\n-endif"}, {"sha": "76367e6f3a628c1d391b09d403dd17266987dc63", "filename": "mk/llvm.mk", "status": "removed", "additions": 0, "deletions": 124, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fllvm.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,124 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-\n-ifdef CFG_ENABLE_FAST_MAKE\n-LLVM_DEPS := $(S)/.gitmodules\n-else\n-\n-# This is just a rough approximation of LLVM deps\n-LLVM_DEPS_SRC=$(call rwildcard,$(CFG_LLVM_SRC_DIR)lib,*cpp *hpp)\n-LLVM_DEPS_INC=$(call rwildcard,$(CFG_LLVM_SRC_DIR)include,*cpp *hpp)\n-LLVM_DEPS=$(LLVM_DEPS_SRC) $(LLVM_DEPS_INC)\n-endif\n-\n-ifdef CFG_DISABLE_OPTIMIZE_LLVM\n-LLVM_BUILD_CONFIG_MODE := Debug\n-else ifdef CFG_ENABLE_LLVM_RELEASE_DEBUGINFO\n-LLVM_BUILD_CONFIG_MODE := RelWithDebInfo\n-else\n-LLVM_BUILD_CONFIG_MODE := Release\n-endif\n-\n-define DEF_LLVM_RULES\n-\n-ifeq ($(1),$$(CFG_BUILD))\n-LLVM_DEPS_TARGET_$(1) := $$(LLVM_DEPS)\n-else\n-LLVM_DEPS_TARGET_$(1) := $$(LLVM_DEPS) $$(LLVM_CONFIG_$$(CFG_BUILD))\n-endif\n-\n-# If CFG_LLVM_ROOT is defined then we don't build LLVM ourselves\n-ifeq ($(CFG_LLVM_ROOT),)\n-\n-LLVM_STAMP_$(1) = $(S)src/rustllvm/llvm-auto-clean-trigger\n-LLVM_DONE_$(1) = $$(CFG_LLVM_BUILD_DIR_$(1))/llvm-finished-building\n-\n-$$(LLVM_CONFIG_$(1)): $$(LLVM_DONE_$(1))\n-\n-ifneq ($$(CFG_NINJA),)\n-BUILD_LLVM_$(1) := $$(CFG_NINJA) -C $$(CFG_LLVM_BUILD_DIR_$(1))\n-else ifeq ($$(findstring msvc,$(1)),msvc)\n-BUILD_LLVM_$(1) := $$(CFG_CMAKE) --build $$(CFG_LLVM_BUILD_DIR_$(1)) \\\n-\t\t\t--config $$(LLVM_BUILD_CONFIG_MODE)\n-else\n-BUILD_LLVM_$(1) := $$(MAKE) -C $$(CFG_LLVM_BUILD_DIR_$(1))\n-endif\n-\n-$$(LLVM_DONE_$(1)): $$(LLVM_DEPS_TARGET_$(1)) $$(LLVM_STAMP_$(1))\n-\t@$$(call E, cmake: llvm)\n-\t$$(Q)if ! cmp $$(LLVM_STAMP_$(1)) $$(LLVM_DONE_$(1)); then \\\n-\t\t$$(MAKE) clean-llvm$(1); \\\n-\t\t$$(BUILD_LLVM_$(1)); \\\n-\tfi\n-\t$$(Q)cp $$(LLVM_STAMP_$(1)) $$@\n-\n-ifneq ($$(CFG_NINJA),)\n-clean-llvm$(1):\n-\t@$$(call E, clean: llvm)\n-\t$$(Q)$$(CFG_NINJA) -C $$(CFG_LLVM_BUILD_DIR_$(1)) -t clean\n-else ifeq ($$(findstring msvc,$(1)),msvc)\n-clean-llvm$(1):\n-\t@$$(call E, clean: llvm)\n-\t$$(Q)$$(CFG_CMAKE) --build $$(CFG_LLVM_BUILD_DIR_$(1)) \\\n-\t\t--config $$(LLVM_BUILD_CONFIG_MODE) \\\n-\t\t--target clean\n-else\n-clean-llvm$(1):\n-\t@$$(call E, clean: llvm)\n-\t$$(Q)$$(MAKE) -C $$(CFG_LLVM_BUILD_DIR_$(1)) clean\n-endif\n-\n-else\n-clean-llvm$(1):\n-endif\n-\n-$$(LLVM_AR_$(1)): $$(LLVM_CONFIG_$(1))\n-\n-ifeq ($$(CFG_ENABLE_LLVM_STATIC_STDCPP),1)\n-LLVM_STDCPP_RUSTFLAGS_$(1) = -L \"$$(dir $$(shell $$(CC_$(1)) $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-\t\t\t\t\t-print-file-name=lib$(CFG_STDCPP_NAME).a))\"\n-else\n-LLVM_STDCPP_RUSTFLAGS_$(1) =\n-endif\n-\n-\n-# LLVM linkage:\n-# Note: Filter with llvm-config so that optional targets which aren't present\n-# don't cause errors (ie PNaCl's target is only present within PNaCl's LLVM\n-# fork).\n-LLVM_LINKAGE_PATH_$(1):=$$(abspath $$(RT_OUTPUT_DIR_$(1))/llvmdeps.rs)\n-$$(LLVM_LINKAGE_PATH_$(1)): $(S)src/etc/mklldeps.py $$(LLVM_CONFIG_$(1))\n-\t$(Q)$(CFG_PYTHON) \"$$<\" \"$$@\" \"$$(filter $$(shell \\\n-\t\t\t\t$$(LLVM_CONFIG_$(1)) --components), \\\n-                        $(LLVM_OPTIONAL_COMPONENTS)) $(LLVM_REQUIRED_COMPONENTS)\" \\\n-\t\t\"$$(CFG_ENABLE_LLVM_STATIC_STDCPP)\" $$(LLVM_CONFIG_$(1)) \\\n-\t\t\"$(CFG_STDCPP_NAME)\" \"$$(CFG_USING_LIBCPP)\"\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(eval $(call DEF_LLVM_RULES,$(host))))\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(eval LLVM_CONFIGS := $(LLVM_CONFIGS) $(LLVM_CONFIG_$(host))))\n-\n-# This can't be done in target.mk because it's included before this file.\n-define LLVM_LINKAGE_DEPS\n-$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.rustc_llvm: $$(LLVM_LINKAGE_PATH_$(2))\n-RUSTFLAGS$(1)_rustc_llvm_T_$(2) += $$(shell echo $$(LLVM_ALL_COMPONENTS_$(2)) | tr '-' '_' |\\\n-\tsed -e 's/^ //;s/\\([^ ]*\\)/\\-\\-cfg \"llvm_component=\\\\\"\\1\\\\\"\"/g')\n-endef\n-\n-$(foreach source,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call LLVM_LINKAGE_DEPS,0,$(target),$(source))) \\\n-  $(eval $(call LLVM_LINKAGE_DEPS,1,$(target),$(source))) \\\n-  $(eval $(call LLVM_LINKAGE_DEPS,2,$(target),$(source))) \\\n-  $(eval $(call LLVM_LINKAGE_DEPS,3,$(target),$(source)))))"}, {"sha": "6b409eebc74c8f6972206ac6860846abd2755387", "filename": "mk/main.mk", "status": "removed", "additions": 0, "deletions": 641, "changes": 641, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,641 +0,0 @@\n-# Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-######################################################################\n-# Version numbers and strings\n-######################################################################\n-\n-# The version number\n-CFG_RELEASE_NUM=1.17.0\n-\n-# An optional number to put after the label, e.g. '.2' -> '-beta.2'\n-# NB Make sure it starts with a dot to conform to semver pre-release\n-# versions (section 9)\n-CFG_PRERELEASE_VERSION=.1\n-\n-ifeq ($(CFG_RELEASE_CHANNEL),stable)\n-# This is the normal semver version string, e.g. \"0.12.0\", \"0.12.0-nightly\"\n-CFG_RELEASE=$(CFG_RELEASE_NUM)\n-# This is the string used in dist artifact file names, e.g. \"0.12.0\", \"nightly\"\n-CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)\n-CFG_DISABLE_UNSTABLE_FEATURES=1\n-endif\n-ifeq ($(CFG_RELEASE_CHANNEL),beta)\n-CFG_RELEASE=$(CFG_RELEASE_NUM)-beta$(CFG_PRERELEASE_VERSION)\n-# When building beta distributables just reuse the same \"beta\" name\n-# so when we upload we'll always override the previous beta. This\n-# doesn't actually impact the version reported by rustc - it's just\n-# for file naming.\n-CFG_PACKAGE_VERS=beta\n-CFG_DISABLE_UNSTABLE_FEATURES=1\n-endif\n-ifeq ($(CFG_RELEASE_CHANNEL),nightly)\n-CFG_RELEASE=$(CFG_RELEASE_NUM)-nightly\n-# When building nightly distributables just reuse the same \"nightly\" name\n-# so when we upload we'll always override the previous nighly. This\n-# doesn't actually impact the version reported by rustc - it's just\n-# for file naming.\n-CFG_PACKAGE_VERS=nightly\n-endif\n-ifeq ($(CFG_RELEASE_CHANNEL),dev)\n-CFG_RELEASE=$(CFG_RELEASE_NUM)-dev\n-CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)-dev\n-endif\n-\n-# Append a version-dependent hash to each library, so we can install different\n-# versions in the same place\n-CFG_FILENAME_EXTRA=$(shell printf '%s' $(CFG_RELEASE)$(CFG_EXTRA_FILENAME) | $(CFG_HASH_COMMAND))\n-\n-# If local-rust is the same major.minor as the current version, then force a local-rebuild\n-ifdef CFG_ENABLE_LOCAL_RUST\n-SEMVER_PREFIX=$(shell echo $(CFG_RELEASE_NUM) | grep -E -o '^[[:digit:]]+\\.[[:digit:]]+')\n-LOCAL_RELEASE=$(shell $(S)src/etc/local_stage0.sh --print-rustc-release $(CFG_LOCAL_RUST_ROOT))\n-ifneq (,$(filter $(SEMVER_PREFIX).%,$(LOCAL_RELEASE)))\n-    CFG_INFO := $(info cfg: auto-detected local-rebuild using $(LOCAL_RELEASE))\n-    CFG_ENABLE_LOCAL_REBUILD = 1\n-endif\n-endif\n-\n-# The name of the package to use for creating tarballs, installers etc.\n-CFG_PACKAGE_NAME=rustc-$(CFG_PACKAGE_VERS)\n-\n-# The version string plus commit information - this is what rustc reports\n-CFG_VERSION = $(CFG_RELEASE)\n-CFG_GIT_DIR := $(CFG_SRC_DIR).git\n-# since $(CFG_GIT) may contain spaces (especially on Windows),\n-# we need to escape them. (\" \" to r\"\\ \")\n-# Note that $(subst ...) ignores space after `subst`,\n-# so we use a hack: define $(SPACE) which contains space character.\n-SPACE :=\n-SPACE +=\n-ifneq ($(CFG_GIT),)\n-ifneq ($(wildcard $(subst $(SPACE),\\$(SPACE),$(CFG_GIT_DIR))),)\n-    CFG_VER_DATE = $(shell git --git-dir='$(CFG_GIT_DIR)' log -1 --date=short --pretty=format:'%cd')\n-    CFG_VER_HASH = $(shell git --git-dir='$(CFG_GIT_DIR)' rev-parse HEAD)\n-    CFG_SHORT_VER_HASH = $(shell git --git-dir='$(CFG_GIT_DIR)' rev-parse --short=9 HEAD)\n-    CFG_VERSION += ($(CFG_SHORT_VER_HASH) $(CFG_VER_DATE))\n-endif\n-endif\n-\n-# Windows exe's need numeric versions - don't use anything but\n-# numbers and dots here\n-CFG_VERSION_WIN = $(CFG_RELEASE_NUM)\n-\n-CFG_INFO := $(info cfg: version $(CFG_VERSION))\n-\n-######################################################################\n-# More configuration\n-######################################################################\n-\n-MKFILE_DEPS := config.stamp $(call rwildcard,$(CFG_SRC_DIR)mk/,*)\n-MKFILES_FOR_TARBALL:=$(MKFILE_DEPS)\n-ifneq ($(NO_MKFILE_DEPS),)\n-MKFILE_DEPS :=\n-endif\n-NON_BUILD_HOST = $(filter-out $(CFG_BUILD),$(CFG_HOST))\n-NON_BUILD_TARGET = $(filter-out $(CFG_BUILD),$(CFG_TARGET))\n-\n-ifneq ($(MAKE_RESTARTS),)\n-CFG_INFO := $(info cfg: make restarts: $(MAKE_RESTARTS))\n-endif\n-\n-CFG_INFO := $(info cfg: build triple $(CFG_BUILD))\n-CFG_INFO := $(info cfg: host triples $(CFG_HOST))\n-CFG_INFO := $(info cfg: target triples $(CFG_TARGET))\n-\n-ifneq ($(wildcard $(NON_BUILD_HOST)),)\n-CFG_INFO := $(info cfg: non-build host triples $(NON_BUILD_HOST))\n-endif\n-ifneq ($(wildcard $(NON_BUILD_TARGET)),)\n-CFG_INFO := $(info cfg: non-build target triples $(NON_BUILD_TARGET))\n-endif\n-\n-CFG_RUSTC_FLAGS := $(RUSTFLAGS)\n-CFG_GCCISH_CFLAGS :=\n-CFG_GCCISH_LINK_FLAGS :=\n-\n-CFG_JEMALLOC_FLAGS :=\n-\n-ifdef CFG_DISABLE_OPTIMIZE\n-  $(info cfg: disabling rustc optimization (CFG_DISABLE_OPTIMIZE))\n-  CFG_RUSTC_FLAGS +=\n-  CFG_JEMALLOC_FLAGS += --enable-debug\n-else\n-  # The rtopt cfg turns off runtime sanity checks\n-  CFG_RUSTC_FLAGS += -O --cfg rtopt\n-endif\n-\n-CFG_JEMALLOC_FLAGS += $(JEMALLOC_FLAGS)\n-\n-ifdef CFG_ENABLE_DEBUG_ASSERTIONS\n-  $(info cfg: enabling debug assertions (CFG_ENABLE_DEBUG_ASSERTIONS))\n-  CFG_RUSTC_FLAGS += -C debug-assertions=on\n-endif\n-\n-ifdef CFG_ENABLE_DEBUGINFO\n-  $(info cfg: enabling debuginfo (CFG_ENABLE_DEBUGINFO))\n-  CFG_RUSTC_FLAGS += -g\n-else ifdef CFG_ENABLE_DEBUGINFO_LINES\n-  $(info cfg: enabling line number debuginfo (CFG_ENABLE_DEBUGINFO_LINES))\n-  CFG_RUSTC_FLAGS += -Cdebuginfo=1\n-endif\n-\n-ifdef SAVE_TEMPS\n-  CFG_RUSTC_FLAGS += -C save-temps\n-endif\n-ifdef ASM_COMMENTS\n-  CFG_RUSTC_FLAGS += -Z asm-comments\n-endif\n-ifdef TIME_PASSES\n-  CFG_RUSTC_FLAGS += -Z time-passes\n-endif\n-ifdef TIME_LLVM_PASSES\n-  CFG_RUSTC_FLAGS += -Z time-llvm-passes\n-endif\n-ifdef TRACE\n-  CFG_RUSTC_FLAGS += -Z trace\n-endif\n-ifndef CFG_DISABLE_RPATH\n-CFG_RUSTC_FLAGS += -C rpath\n-endif\n-\n-# The executables crated during this compilation process have no need to include\n-# static copies of libstd and libextra. We also generate dynamic versions of all\n-# libraries, so in the interest of space, prefer dynamic linking throughout the\n-# compilation process.\n-#\n-# Note though that these flags are omitted for the *bins* in stage2+. This means\n-# that the snapshot will be generated with a statically linked rustc so we only\n-# have to worry about the distribution of one file (with its native dynamic\n-# dependencies)\n-RUSTFLAGS_STAGE0 += -C prefer-dynamic\n-RUSTFLAGS_STAGE1 += -C prefer-dynamic\n-RUST_LIB_FLAGS_ST2 += -C prefer-dynamic\n-RUST_LIB_FLAGS_ST3 += -C prefer-dynamic\n-\n-# Landing pads require a lot of codegen. We can get through bootstrapping faster\n-# by not emitting them.\n-\n-ifdef CFG_DISABLE_STAGE0_LANDING_PADS\n-  RUSTFLAGS_STAGE0 += -Z no-landing-pads\n-endif\n-\n-# platform-specific auto-configuration\n-include $(CFG_SRC_DIR)mk/platform.mk\n-\n-# Run the stage1/2 compilers under valgrind\n-ifdef VALGRIND_COMPILE\n-  CFG_VALGRIND_COMPILE := $(CFG_VALGRIND)\n-else\n-  CFG_VALGRIND_COMPILE :=\n-endif\n-\n-\n-ifndef CFG_DISABLE_VALGRIND_RPASS\n-  $(info cfg: enabling valgrind run-pass tests (CFG_ENABLE_VALGRIND_RPASS))\n-  $(info cfg: valgrind-rpass command set to $(CFG_VALGRIND))\n-  CFG_VALGRIND_RPASS :=$(CFG_VALGRIND)\n-else\n-  $(info cfg: disabling valgrind run-pass tests)\n-  CFG_VALGRIND_RPASS :=\n-endif\n-\n-\n-ifdef CFG_ENABLE_VALGRIND\n-  $(info cfg: enabling valgrind (CFG_ENABLE_VALGRIND))\n-  CFG_JEMALLOC_FLAGS += --enable-valgrind\n-else\n-  CFG_VALGRIND :=\n-endif\n-\n-######################################################################\n-# Target-and-rule \"utility variables\"\n-######################################################################\n-\n-define DEF_FOR_TARGET\n-X_$(1) := $(CFG_EXE_SUFFIX_$(1))\n-ifndef CFG_LLVM_TARGET_$(1)\n-CFG_LLVM_TARGET_$(1) := $(1)\n-endif\n-endef\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call DEF_FOR_TARGET,$(target))))\n-\n-# \"Source\" files we generate in builddir along the way.\n-GENERATED :=\n-\n-# Delete the built-in rules.\n-.SUFFIXES:\n-%:: %,v\n-%:: RCS/%,v\n-%:: RCS/%\n-%:: s.%\n-%:: SCCS/s.%\n-\n-\n-######################################################################\n-# Cleaning out old crates\n-######################################################################\n-\n-# $(1) is the path for directory to match against\n-# $(2) is the glob to use in the match\n-#\n-# Note that a common bug is to accidentally construct the glob denoted\n-# by $(2) with a space character prefix, which invalidates the\n-# construction $(1)$(2).\n-define CHECK_FOR_OLD_GLOB_MATCHES\n-  $(Q)MATCHES=\"$(wildcard $(1))\"; if [ -n \"$$MATCHES\" ] ; then echo \"warning: there are previous\" \\'$(notdir $(2))\\' \"libraries:\" $$MATCHES; fi\n-endef\n-\n-# Same interface as above, but deletes rather than just listing the files.\n-ifdef VERBOSE\n-define REMOVE_ALL_OLD_GLOB_MATCHES\n-  $(Q)MATCHES=\"$(wildcard $(1))\"; if [ -n \"$$MATCHES\" ] ; then echo \"warning: removing previous\" \\'$(notdir $(1))\\' \"libraries:\" $$MATCHES; rm $$MATCHES ; fi\n-endef\n-else\n-define REMOVE_ALL_OLD_GLOB_MATCHES\n-  $(Q)MATCHES=\"$(wildcard $(1))\"; if [ -n \"$$MATCHES\" ] ; then rm $$MATCHES ; fi\n-endef\n-endif\n-\n-# We use a different strategy for LIST_ALL_OLD_GLOB_MATCHES_EXCEPT\n-# than in the macros above because it needs the result of running the\n-# `ls` command after other rules in the command list have run; the\n-# macro-expander for $(wildcard ...) would deliver its results too\n-# soon. (This is in contrast to the macros above, which are meant to\n-# be run at the outset of a command list in a rule.)\n-ifdef VERBOSE\n-define LIST_ALL_OLD_GLOB_MATCHES\n-  @echo \"info: now are following matches for\" '$(notdir $(1))' \"libraries:\"\n-  @( ls $(1) 2>/dev/null || true )\n-endef\n-else\n-define LIST_ALL_OLD_GLOB_MATCHES\n-endef\n-endif\n-\n-######################################################################\n-# LLVM macros\n-######################################################################\n-\n-LLVM_OPTIONAL_COMPONENTS=x86 arm aarch64 mips powerpc pnacl systemz jsbackend msp430 sparc\n-LLVM_REQUIRED_COMPONENTS=ipo bitreader bitwriter linker asmparser mcjit \\\n-                interpreter instrumentation\n-\n-ifneq ($(CFG_LLVM_ROOT),)\n-# Ensure we only try to link targets that the installed LLVM actually has:\n-LLVM_COMPONENTS := $(filter $(shell $(CFG_LLVM_ROOT)/bin/llvm-config$(X_$(CFG_BUILD)) --components),\\\n-\t\t\t$(LLVM_OPTIONAL_COMPONENTS)) $(LLVM_REQUIRED_COMPONENTS)\n-else\n-LLVM_COMPONENTS := $(LLVM_OPTIONAL_COMPONENTS) $(LLVM_REQUIRED_COMPONENTS)\n-endif\n-\n-# Only build these LLVM tools\n-LLVM_TOOLS=bugpoint llc llvm-ar llvm-as llvm-dis llvm-mc opt llvm-extract\n-\n-define DEF_LLVM_VARS\n-# The configure script defines these variables with the target triples\n-# separated by Z. This defines new ones with the expected format.\n-ifeq ($$(CFG_LLVM_ROOT),)\n-CFG_LLVM_BUILD_DIR_$(1):=$$(CFG_LLVM_BUILD_DIR_$(subst -,_,$(1)))\n-CFG_LLVM_INST_DIR_$(1):=$$(CFG_LLVM_INST_DIR_$(subst -,_,$(1)))\n-else\n-CFG_LLVM_INST_DIR_$(1):=$$(CFG_LLVM_ROOT)\n-endif\n-\n-# Any rules that depend on LLVM should depend on LLVM_CONFIG\n-LLVM_CONFIG_$(1):=$$(CFG_LLVM_INST_DIR_$(1))/bin/llvm-config$$(X_$(1))\n-LLVM_MC_$(1):=$$(CFG_LLVM_INST_DIR_$(1))/bin/llvm-mc$$(X_$(1))\n-LLVM_AR_$(1):=$$(CFG_LLVM_INST_DIR_$(1))/bin/llvm-ar$$(X_$(1))\n-LLVM_VERSION_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --version)\n-LLVM_BINDIR_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --bindir)\n-LLVM_INCDIR_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --includedir)\n-LLVM_LIBDIR_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --libdir)\n-LLVM_LIBDIR_RUSTFLAGS_$(1)=-L native=\"$$(LLVM_LIBDIR_$(1))\"\n-LLVM_LDFLAGS_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --ldflags)\n-ifeq ($$(findstring freebsd,$(1)),freebsd)\n-# On FreeBSD, it may search wrong headers (that are for pre-installed LLVM),\n-# so we replace -I with -iquote to ensure that it searches bundled LLVM first.\n-LLVM_CXXFLAGS_$(1)=$$(subst -I, -iquote , $$(shell \"$$(LLVM_CONFIG_$(1))\" --cxxflags))\n-else\n-LLVM_CXXFLAGS_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --cxxflags)\n-endif\n-LLVM_HOST_TRIPLE_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --host-target)\n-\n-LLVM_AS_$(1)=$$(CFG_LLVM_INST_DIR_$(1))/bin/llvm-as$$(X_$(1))\n-LLC_$(1)=$$(CFG_LLVM_INST_DIR_$(1))/bin/llc$$(X_$(1))\n-\n-LLVM_ALL_COMPONENTS_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --components)\n-LLVM_VERSION_$(1)=$$(shell \"$$(LLVM_CONFIG_$(1))\" --version)\n-\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(eval $(call DEF_LLVM_VARS,$(host))))\n-\n-######################################################################\n-# Exports for sub-utilities\n-######################################################################\n-\n-# Note that any variable that re-configure should pick up needs to be\n-# exported\n-\n-export CFG_SRC_DIR\n-export CFG_SRC_DIR_RELATIVE\n-export CFG_BUILD_DIR\n-ifdef CFG_VER_DATE\n-export CFG_VER_DATE\n-endif\n-ifdef CFG_VER_HASH\n-export CFG_VER_HASH\n-endif\n-export CFG_VERSION\n-export CFG_VERSION_WIN\n-export CFG_RELEASE\n-export CFG_PACKAGE_NAME\n-export CFG_BUILD\n-export CFG_RELEASE_CHANNEL\n-export CFG_LLVM_ROOT\n-export CFG_PREFIX\n-export CFG_LIBDIR\n-export CFG_LIBDIR_RELATIVE\n-export CFG_DISABLE_INJECT_STD_VERSION\n-ifdef CFG_DISABLE_UNSTABLE_FEATURES\n-CFG_INFO := $(info cfg: disabling unstable features (CFG_DISABLE_UNSTABLE_FEATURES))\n-# Turn on feature-staging\n-export CFG_DISABLE_UNSTABLE_FEATURES\n-# Subvert unstable feature lints to do the self-build\n-endif\n-ifdef CFG_MUSL_ROOT\n-export CFG_MUSL_ROOT\n-endif\n-\n-export RUSTC_BOOTSTRAP := 1\n-\n-######################################################################\n-# Per-stage targets and runner\n-######################################################################\n-\n-# Valid setting-strings are 'all', 'none', 'gdb', 'lldb'\n-# This 'function' will determine which debugger scripts to copy based on a\n-# target triple. See debuggers.mk for more information.\n-TRIPLE_TO_DEBUGGER_SCRIPT_SETTING=\\\n- $(if $(findstring windows-msvc,$(1)),none,all)\n-\n-STAGES = 0 1 2 3\n-\n-define SREQ\n-# $(1) is the stage number\n-# $(2) is the target triple\n-# $(3) is the host triple\n-\n-# Destinations of artifacts for the host compiler\n-HROOT$(1)_H_$(3) = $(3)/stage$(1)\n-HBIN$(1)_H_$(3) = $$(HROOT$(1)_H_$(3))/bin\n-\n-ifeq ($$(CFG_WINDOWSY_$(3)),1)\n-# On Windows we always store host runtime libraries in the 'bin' directory because\n-# there's no rpath. Target libraries go under $CFG_LIBDIR_RELATIVE (usually 'lib').\n-HLIB_RELATIVE$(1)_H_$(3) = bin\n-TROOT$(1)_T_$(2)_H_$(3) = $$(HROOT$(1)_H_$(3))/$$(CFG_LIBDIR_RELATIVE)/rustlib/$(2)\n-# Remove the next 3 lines after a snapshot\n-ifeq ($(1),0)\n-RUSTFLAGS_STAGE0 += -L $$(TROOT$(1)_T_$(2)_H_$(3))/lib\n-endif\n-\n-else\n-\n-ifeq ($(1),0)\n-HLIB_RELATIVE$(1)_H_$(3) = lib\n-else\n-HLIB_RELATIVE$(1)_H_$(3) = $$(CFG_LIBDIR_RELATIVE)\n-endif\n-TROOT$(1)_T_$(2)_H_$(3) = $$(HLIB$(1)_H_$(3))/rustlib/$(2)\n-\n-endif\n-HLIB$(1)_H_$(3) = $$(HROOT$(1)_H_$(3))/$$(HLIB_RELATIVE$(1)_H_$(3))\n-\n-# Destinations of artifacts for target architectures\n-TBIN$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/bin\n-TLIB$(1)_T_$(2)_H_$(3) = $$(TROOT$(1)_T_$(2)_H_$(3))/lib\n-\n-# Preqrequisites for using the stageN compiler\n-ifeq ($(1),0)\n-HSREQ$(1)_H_$(3) = $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3))\n-else\n-HSREQ$(1)_H_$(3) = \\\n-\t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n-\t$$(MKFILE_DEPS) \\\n-\ttmp/install-debugger-scripts$(1)_H_$(3)-$$(call TRIPLE_TO_DEBUGGER_SCRIPT_SETTING,$(3)).done\n-endif\n-\n-# Prerequisites for using the stageN compiler to build target artifacts\n-TSREQ$(1)_T_$(2)_H_$(3) = \\\n-\t$$(HSREQ$(1)_H_$(3)) \\\n-\t$$(foreach obj,$$(REQUIRED_OBJECTS_$(2)),\\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(obj))\n-\n-# Prerequisites for a working stageN compiler and libraries, for a specific\n-# target\n-SREQ$(1)_T_$(2)_H_$(3) = \\\n-\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t$$(foreach dep,$$(TARGET_CRATES_$(2)), \\\n-\t    $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep)) \\\n-\ttmp/install-debugger-scripts$(1)_T_$(2)_H_$(3)-$$(call TRIPLE_TO_DEBUGGER_SCRIPT_SETTING,$(2)).done\n-\n-# Prerequisites for a working stageN compiler and complete set of target\n-# libraries\n-CSREQ$(1)_T_$(2)_H_$(3) = \\\n-\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t$$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n-\t$$(foreach dep,$$(HOST_CRATES),$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep))\n-\n-ifeq ($(1),0)\n-# Don't run the stage0 compiler under valgrind - that ship has sailed\n-CFG_VALGRIND_COMPILE$(1) =\n-else\n-CFG_VALGRIND_COMPILE$(1) = $$(CFG_VALGRIND_COMPILE)\n-endif\n-\n-# Add RUSTFLAGS_STAGEN values to the build command\n-EXTRAFLAGS_STAGE$(1) = $$(RUSTFLAGS_STAGE$(1))\n-\n-CFGFLAG$(1)_T_$(2)_H_$(3) = stage$(1)\n-\n-endef\n-\n-# Same macro/variables as above, but defined in a separate loop so it can use\n-# all the variables above for all archs. The RPATH_VAR setup sometimes needs to\n-# reach across triples to get things in order.\n-#\n-# Defines (with the standard $(1)_T_$(2)_H_$(3) suffix):\n-# * `LD_LIBRARY_PATH_ENV_NAME`: the name for the key to use in the OS\n-#   environment to access or extend the lookup path for dynamic\n-#   libraries.  Note on Windows, that key is `$PATH`, and thus not\n-#   only conflates programs with dynamic libraries, but also often\n-#   contains spaces which confuse make.\n-# * `LD_LIBRARY_PATH_ENV_HOSTDIR`: the entry to add to lookup path for the host\n-# * `LD_LIBRARY_PATH_ENV_TARGETDIR`: the entry to add to lookup path for target\n-#\n-# Below that, HOST_RPATH_VAR and TARGET_RPATH_VAR are defined in terms of the\n-# above settings.\n-#\n-define SREQ_CMDS\n-\n-ifeq ($$(OSTYPE_$(3)),apple-darwin)\n-  LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3) := DYLD_LIBRARY_PATH\n-else\n-ifeq ($$(CFG_WINDOWSY_$(3)),1)\n-  LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3) := PATH\n-else\n-ifeq ($$(OSTYPE_$(3)),unknown-haiku)\n-  LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3) := LIBRARY_PATH\n-else\n-  LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3) := LD_LIBRARY_PATH\n-endif\n-endif\n-endif\n-\n-LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3) := \\\n-    $$(CURDIR)/$$(HLIB$(1)_H_$(3)):$$(CFG_LLVM_INST_DIR_$(3))/lib\n-LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3) := \\\n-    $$(CURDIR)/$$(TLIB$(1)_T_$(2)_H_$(3))\n-\n-HOST_RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n-  $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))=$$(LD_LIBRARY_PATH_ENV_HOSTDIR$(1)_T_$(2)_H_$(3)):$$$$$$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))\n-TARGET_RPATH_VAR$(1)_T_$(2)_H_$(3) := \\\n-  $$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))=$$(LD_LIBRARY_PATH_ENV_TARGETDIR$(1)_T_$(2)_H_$(3)):$$$$$$(LD_LIBRARY_PATH_ENV_NAME$(1)_T_$(2)_H_$(3))\n-\n-RPATH_VAR$(1)_T_$(2)_H_$(3) := $$(HOST_RPATH_VAR$(1)_T_$(2)_H_$(3))\n-\n-# Pass --cfg stage0 only for the build->host part of stage0;\n-# if you're building a cross config, the host->* parts are\n-# effectively stage1, since it uses the just-built stage0.\n-#\n-# Also be sure to use the right rpath because we're loading libraries from the\n-# CFG_BUILD's stage1 directory for our target, so switch this one instance of\n-# `RPATH_VAR` to get the bootstrap working.\n-ifeq ($(1),0)\n-ifneq ($(strip $(CFG_BUILD)),$(strip $(3)))\n-CFGFLAG$(1)_T_$(2)_H_$(3) = stage1\n-\n-RPATH_VAR$(1)_T_$(2)_H_$(3) := $$(TARGET_RPATH_VAR1_T_$(2)_H_$$(CFG_BUILD))\n-else\n-ifdef CFG_ENABLE_LOCAL_REBUILD\n-# Assume the local-rebuild rustc already has stage1 features too.\n-CFGFLAG$(1)_T_$(2)_H_$(3) = stage1\n-endif\n-endif\n-endif\n-\n-STAGE$(1)_T_$(2)_H_$(3) := \\\n-\t$$(Q)$$(RPATH_VAR$(1)_T_$(2)_H_$(3)) \\\n-\t\t$$(call CFG_RUN_TARG_$(3),$(1), \\\n-\t\t$$(CFG_VALGRIND_COMPILE$(1)) \\\n-\t\t$$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n-\t\t--cfg $$(CFGFLAG$(1)_T_$(2)_H_$(3)) \\\n-\t\t$$(CFG_RUSTC_FLAGS) $$(EXTRAFLAGS_STAGE$(1)) --target=$(2)) \\\n-                $$(RUSTC_FLAGS_$(2))\n-\n-endef\n-\n-$(foreach build,$(CFG_HOST), \\\n- $(eval $(foreach target,$(CFG_TARGET), \\\n-  $(eval $(foreach stage,$(STAGES), \\\n-   $(eval $(call SREQ,$(stage),$(target),$(build))))))))\n-\n-$(foreach build,$(CFG_HOST), \\\n- $(eval $(foreach target,$(CFG_TARGET), \\\n-  $(eval $(foreach stage,$(STAGES), \\\n-   $(eval $(call SREQ_CMDS,$(stage),$(target),$(build))))))))\n-\n-######################################################################\n-# rustc-H-targets\n-#\n-# Builds a functional Rustc for the given host.\n-######################################################################\n-\n-define DEF_RUSTC_STAGE_TARGET\n-# $(1) == architecture\n-# $(2) == stage\n-\n-rustc-stage$(2)-H-$(1): \\\n-\t$$(foreach target,$$(CFG_TARGET),$$(SREQ$(2)_T_$$(target)_H_$(1)))\n-\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(eval $(foreach stage,1 2 3, \\\n-  $(eval $(call DEF_RUSTC_STAGE_TARGET,$(host),$(stage))))))\n-\n-rustc-stage1: rustc-stage1-H-$(CFG_BUILD)\n-rustc-stage2: rustc-stage2-H-$(CFG_BUILD)\n-rustc-stage3: rustc-stage3-H-$(CFG_BUILD)\n-\n-define DEF_RUSTC_TARGET\n-# $(1) == architecture\n-\n-rustc-H-$(1): rustc-stage2-H-$(1)\n-endef\n-\n-$(foreach host,$(CFG_TARGET), \\\n- $(eval $(call DEF_RUSTC_TARGET,$(host))))\n-\n-rustc-stage1: rustc-stage1-H-$(CFG_BUILD)\n-rustc-stage2: rustc-stage2-H-$(CFG_BUILD)\n-rustc-stage3: rustc-stage3-H-$(CFG_BUILD)\n-rustc: rustc-H-$(CFG_BUILD)\n-\n-rustc-H-all: $(foreach host,$(CFG_HOST),rustc-H-$(host))\n-\n-######################################################################\n-# Entrypoint rule\n-######################################################################\n-\n-.DEFAULT_GOAL := all\n-\n-define ALL_TARGET_N\n-ifneq ($$(findstring $(1),$$(CFG_HOST)),)\n-# This is a host\n-all-target-$(1)-host-$(2): $$(CSREQ2_T_$(1)_H_$(2))\n-else\n-# This is a target only\n-all-target-$(1)-host-$(2): $$(SREQ2_T_$(1)_H_$(2))\n-endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n- $(foreach host,$(CFG_HOST), \\\n- $(eval $(call ALL_TARGET_N,$(target),$(host)))))\n-\n-ALL_TARGET_RULES = $(foreach target,$(CFG_TARGET), \\\n-\t$(foreach host,$(CFG_HOST), \\\n- all-target-$(target)-host-$(host)))\n-\n-all-no-docs: $(ALL_TARGET_RULES) $(GENERATED)\n-all: all-no-docs docs\n-\n-######################################################################\n-# Build system documentation\n-######################################################################\n-\n-# $(1) is the name of the doc <section> in Makefile.in\n-# pick everything between tags | remove first line | remove last line\n-# | remove extra (?) line | strip leading `#` from lines\n-SHOW_DOCS = $(Q)awk '/<$(1)>/,/<\\/$(1)>/' $(S)/Makefile.in | sed '1d' | sed '$$d' | sed 's/^\\# \\?//'\n-\n-help:\n-\t$(call SHOW_DOCS,help)\n-\n-tips:\n-\t$(call SHOW_DOCS,tips)\n-\n-nitty-gritty:\n-\t$(call SHOW_DOCS,nitty-gritty)"}, {"sha": "6a7a20cbfdb99b1b77f4049adc913b1b7fe07bc8", "filename": "mk/platform.mk", "status": "removed", "additions": 0, "deletions": 250, "changes": 250, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,250 +0,0 @@\n-# Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-\n-# Create variables HOST_<triple> containing the host part\n-# of each target triple.  For example, the triple i686-darwin-macos\n-# would create a variable HOST_i686-darwin-macos with the value\n-# i386.\n-define DEF_HOST_VAR\n-  HOST_$(1) = $(patsubst i%86,i386,$(word 1,$(subst -, ,$(1))))\n-endef\n-$(foreach t,$(CFG_TARGET),$(eval $(call DEF_HOST_VAR,$(t))))\n-$(foreach t,$(CFG_TARGET),$(info cfg: host for $(t) is $(HOST_$(t))))\n-\n-# Ditto for OSTYPE\n-define DEF_OSTYPE_VAR\n-  OSTYPE_$(1) = $(subst $(firstword $(subst -, ,$(1)))-,,$(1))\n-endef\n-$(foreach t,$(CFG_TARGET),$(eval $(call DEF_OSTYPE_VAR,$(t))))\n-$(foreach t,$(CFG_TARGET),$(info cfg: os for $(t) is $(OSTYPE_$(t))))\n-\n-# On Darwin, we need to run dsymutil so the debugging information ends\n-# up in the right place.  On other platforms, it automatically gets\n-# embedded into the executable, so use a no-op command.\n-CFG_DSYMUTIL := true\n-\n-# Hack: not sure how to test if a file exists in make other than this\n-OS_SUPP = $(patsubst %,--suppressions=%, \\\n-      $(wildcard $(CFG_SRC_DIR)src/etc/$(CFG_OSTYPE).supp*))\n-\n-ifdef CFG_DISABLE_OPTIMIZE_CXX\n-  $(info cfg: disabling C++ optimization (CFG_DISABLE_OPTIMIZE_CXX))\n-  CFG_GCCISH_CFLAGS += -O0\n-else\n-  CFG_GCCISH_CFLAGS += -O2\n-endif\n-\n-# The soname thing is for supporting a statically linked jemalloc.\n-# see https://blog.mozilla.org/jseward/2012/06/05/valgrind-now-supports-jemalloc-builds-directly/\n-ifdef CFG_VALGRIND\n-  CFG_VALGRIND += --error-exitcode=100 \\\n-                  --fair-sched=try \\\n-                  --quiet \\\n-                  --soname-synonyms=somalloc=NONE \\\n-                  --suppressions=$(CFG_SRC_DIR)src/etc/x86.supp \\\n-                  $(OS_SUPP)\n-  ifdef CFG_ENABLE_HELGRIND\n-    CFG_VALGRIND += --tool=helgrind\n-  else\n-    CFG_VALGRIND += --tool=memcheck \\\n-                    --leak-check=full\n-  endif\n-endif\n-\n-# If we actually want to run Valgrind on a given platform, set this variable\n-define DEF_GOOD_VALGRIND\n-  ifeq ($(OSTYPE_$(1)),unknown-linux-gnu)\n-    GOOD_VALGRIND_$(1) = 1\n-  endif\n-  ifneq (,$(filter $(OSTYPE_$(1)),apple-darwin freebsd))\n-    ifeq ($(HOST_$(1)),x86_64)\n-      GOOD_VALGRIND_$(1) = 1\n-    endif\n-  endif\n-  ifdef GOOD_VALGRIND_$(t)\n-    $$(info cfg: have good valgrind for $(t))\n-  else\n-    $$(info cfg: no good valgrind for $(t))\n-  endif\n-endef\n-$(foreach t,$(CFG_TARGET),$(eval $(call DEF_GOOD_VALGRIND,$(t))))\n-\n-AR := ar\n-\n-define SET_FROM_CFG\n-  ifdef CFG_$(1)\n-    ifeq ($(origin $(1)),undefined)\n-      $$(info cfg: using $(1)=$(CFG_$(1)) (CFG_$(1)))\n-      $(1)=$(CFG_$(1))\n-    endif\n-    ifeq ($(origin $(1)),default)\n-      $$(info cfg: using $(1)=$(CFG_$(1)) (CFG_$(1)))\n-      $(1)=$(CFG_$(1))\n-    endif\n-  endif\n-endef\n-\n-$(foreach cvar,CC CXX CPP CFLAGS CXXFLAGS CPPFLAGS, \\\n-  $(eval $(call SET_FROM_CFG,$(cvar))))\n-\n-CFG_RLIB_GLOB=lib$(1)-*.rlib\n-\n-include $(wildcard $(CFG_SRC_DIR)mk/cfg/*.mk)\n-\n-define ADD_INSTALLED_OBJECTS\n-  INSTALLED_OBJECTS_$(1) += $$(CFG_INSTALLED_OBJECTS_$(1))\n-  REQUIRED_OBJECTS_$(1) += $$(CFG_THIRD_PARTY_OBJECTS_$(1))\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call ADD_INSTALLED_OBJECTS,$(target))))\n-\n-define DEFINE_LINKER\n-  ifndef LINK_$(1)\n-    LINK_$(1) := $$(CC_$(1))\n-  endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call DEFINE_LINKER,$(target))))\n-\n-define ADD_JEMALLOC_DEP\n-  ifndef CFG_DISABLE_JEMALLOC_$(1)\n-    ifndef CFG_DISABLE_JEMALLOC\n-      RUST_DEPS_std_T_$(1) += alloc_jemalloc\n-      TARGET_CRATES_$(1) += alloc_jemalloc\n-    endif\n-  endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call ADD_JEMALLOC_DEP,$(target))))\n-\n-# The -Qunused-arguments sidesteps spurious warnings from clang\n-define FILTER_FLAGS\n-  ifeq ($$(CFG_USING_CLANG),1)\n-    ifneq ($(findstring clang,$$(shell $(CC_$(1)) -v)),)\n-      CFG_GCCISH_CFLAGS_$(1) += -Qunused-arguments\n-      CFG_GCCISH_CXXFLAGS_$(1) += -Qunused-arguments\n-    endif\n-  endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call FILTER_FLAGS,$(target))))\n-\n-# Configure various macros to pass gcc or cl.exe style arguments\n-define CC_MACROS\n-  CFG_CC_INCLUDE_$(1)=-I $$(1)\n-  ifeq ($$(findstring msvc,$(1)),msvc)\n-    CFG_CC_OUTPUT_$(1)=-Fo:$$(1)\n-    CFG_CREATE_ARCHIVE_$(1)='$$(AR_$(1))' -OUT:$$(1)\n-  else\n-    CFG_CC_OUTPUT_$(1)=-o $$(1)\n-    CFG_CREATE_ARCHIVE_$(1)=$$(AR_$(1)) crus $$(1)\n-  endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call CC_MACROS,$(target))))\n-\n-\n-ifeq ($(CFG_CCACHE_CPP2),1)\n-  CCACHE_CPP2=1\n-  export CCACHE_CPP\n-endif\n-\n-ifdef CFG_CCACHE_BASEDIR\n-  CCACHE_BASEDIR=$(CFG_CCACHE_BASEDIR)\n-  export CCACHE_BASEDIR\n-endif\n-\n-FIND_COMPILER = $(strip $(1:ccache=))\n-\n-define CFG_MAKE_TOOLCHAIN\n-  # Prepend the tools with their prefix if cross compiling\n-  ifneq ($(CFG_BUILD),$(1))\n-    ifneq ($$(findstring msvc,$(1)),msvc)\n-       CC_$(1)=$(CROSS_PREFIX_$(1))$(CC_$(1))\n-       CXX_$(1)=$(CROSS_PREFIX_$(1))$(CXX_$(1))\n-       CPP_$(1)=$(CROSS_PREFIX_$(1))$(CPP_$(1))\n-       AR_$(1)=$(CROSS_PREFIX_$(1))$(AR_$(1))\n-       LINK_$(1)=$(CROSS_PREFIX_$(1))$(LINK_$(1))\n-       RUSTC_CROSS_FLAGS_$(1)=-C linker=$$(call FIND_COMPILER,$$(LINK_$(1))) \\\n-           -C ar=$$(call FIND_COMPILER,$$(AR_$(1))) $(RUSTC_CROSS_FLAGS_$(1))\n-\n-       RUSTC_FLAGS_$(1)=$$(RUSTC_CROSS_FLAGS_$(1)) $(RUSTC_FLAGS_$(1))\n-    endif\n-  endif\n-\n-  CFG_COMPILE_C_$(1) = '$$(call FIND_COMPILER,$$(CC_$(1)))' \\\n-        $$(CFLAGS) \\\n-        $$(CFG_GCCISH_CFLAGS) \\\n-        $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-        -c $$(call CFG_CC_OUTPUT_$(1),$$(1)) $$(2)\n-  CFG_LINK_C_$(1) = $$(CC_$(1)) \\\n-        $$(LDFLAGS) \\\n-        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1) \\\n-        $$(CFG_GCCISH_LINK_FLAGS_$(1)) \\\n-        $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2) \\\n-        $$(call CFG_INSTALL_NAME_$(1),$$(4))\n-  CFG_COMPILE_CXX_$(1) = '$$(call FIND_COMPILER,$$(CXX_$(1)))' \\\n-        $$(CXXFLAGS) \\\n-        $$(CFG_GCCISH_CFLAGS) \\\n-        $$(CFG_GCCISH_CXXFLAGS) \\\n-        $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-        $$(CFG_GCCISH_CXXFLAGS_$(1)) \\\n-        -c $$(call CFG_CC_OUTPUT_$(1),$$(1)) $$(2)\n-  CFG_LINK_CXX_$(1) = $$(CXX_$(1)) \\\n-        $$(LDFLAGS) \\\n-        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1) \\\n-        $$(CFG_GCCISH_LINK_FLAGS_$(1)) \\\n-        $$(CFG_GCCISH_DEF_FLAG_$(1))$$(3) $$(2) \\\n-        $$(call CFG_INSTALL_NAME_$(1),$$(4))\n-\n-  ifeq ($$(findstring $(HOST_$(1)),arm aarch64 mips mipsel powerpc),)\n-\n-  # On Bitrig, we need the relocation model to be PIC for everything\n-  ifeq (,$(filter $(OSTYPE_$(1)),bitrig))\n-    LLVM_MC_RELOCATION_MODEL=\"pic\"\n-  else\n-    LLVM_MC_RELOCATION_MODEL=\"default\"\n-  endif\n-\n-  # LLVM changed this flag in 3.9\n-  ifdef CFG_LLVM_MC_HAS_RELOCATION_MODEL\n-    LLVM_MC_RELOC_FLAG := -relocation-model=$$(LLVM_MC_RELOCATION_MODEL)\n-  else\n-    LLVM_MC_RELOC_FLAG := -position-independent\n-  endif\n-\n-  # We're using llvm-mc as our assembler because it supports\n-  # .cfi pseudo-ops on mac\n-  CFG_ASSEMBLE_$(1)=$$(CPP_$(1)) -E $$(2) | \\\n-                    $$(LLVM_MC_$$(CFG_BUILD)) \\\n-                    -assemble \\\n-                    $$(LLVM_MC_RELOC_FLAG) \\\n-                    -filetype=obj \\\n-                    -triple=$(1) \\\n-                    -o=$$(1)\n-  else\n-\n-  # For the ARM, AARCH64, MIPS and POWER crosses, use the toolchain assembler\n-  # FIXME: We should be able to use the LLVM assembler\n-  CFG_ASSEMBLE_$(1)=$$(CC_$(1)) $$(CFG_GCCISH_CFLAGS_$(1)) \\\n-                   $$(2) -c -o $$(1)\n-\n-  endif\n-\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call CFG_MAKE_TOOLCHAIN,$(target))))"}, {"sha": "20e20e9b5df7eb166b677e13c2b4e2c4a8d39fcd", "filename": "mk/prepare.mk", "status": "removed", "additions": 0, "deletions": 251, "changes": 251, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fprepare.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fprepare.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fprepare.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,251 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# Basic support for producing installation images.\n-#\n-# The 'prepare' build target copies all release artifacts from the build\n-# directory to some other location, placing all binaries, libraries, and\n-# docs in their final locations relative to each other.\n-#\n-# It requires the following variables to be set:\n-#\n-#   PREPARE_HOST - the host triple\n-#   PREPARE_TARGETS - the target triples, space separated\n-#   PREPARE_DEST_DIR - the directory to put the image\n-\n-PREPARE_STAGE=2\n-\n-DEFAULT_PREPARE_DIR_CMD = umask 022 && mkdir -p\n-DEFAULT_PREPARE_BIN_CMD = install -m755\n-DEFAULT_PREPARE_LIB_CMD = install -m644\n-DEFAULT_PREPARE_MAN_CMD = install -m644\n-\n-# Create a directory\n-# $(1) is the directory\n-#\n-# XXX: These defines are called to generate make steps.\n-# Adding blank lines means two steps from different defines will not end up on\n-# the same line.\n-define PREPARE_DIR\n-\n-\t@$(call E, prepare: $(1))\n-\t$(Q)$(PREPARE_DIR_CMD) $(1)\n-\n-endef\n-\n-# Copy an executable\n-# $(1) is the filename/libname-glob\n-#\n-# See above for an explanation on the surrounding blank lines\n-define PREPARE_BIN\n-\n-\t@$(call E, prepare: $(PREPARE_DEST_BIN_DIR)/$(1))\n-\t$(Q)$(PREPARE_BIN_CMD) $(PREPARE_SOURCE_BIN_DIR)/$(1) $(PREPARE_DEST_BIN_DIR)/$(1)\n-\n-endef\n-\n-# Copy a dylib or rlib\n-# $(1) is the filename/libname-glob\n-#\n-# See above for an explanation on the surrounding blank lines\n-define PREPARE_LIB\n-\n-\t@$(call E, prepare: $(PREPARE_WORKING_DEST_LIB_DIR)/$(1))\n-\t$(Q)LIB_NAME=\"$(notdir $(lastword $(wildcard $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1))))\"; \\\n-\tMATCHES=\"$(filter-out %$(notdir $(lastword $(wildcard $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1)))), \\\n-                        $(wildcard $(PREPARE_WORKING_DEST_LIB_DIR)/$(1)))\"; \\\n-\tif [ -n \"$$MATCHES\" ]; then \\\n-\t  echo \"warning: one or libraries matching Rust library '$(1)'\" && \\\n-\t  echo \"  (other than '$$LIB_NAME' itself) already present\"     && \\\n-\t  echo \"  at destination $(PREPARE_WORKING_DEST_LIB_DIR):\"      && \\\n-\t  echo $$MATCHES ; \\\n-\tfi\n-\t$(Q)$(PREPARE_LIB_CMD) `ls -drt1 $(PREPARE_WORKING_SOURCE_LIB_DIR)/$(1)` $(PREPARE_WORKING_DEST_LIB_DIR)/\n-\n-endef\n-\n-# Copy a man page\n-# $(1) - source dir\n-#\n-# See above for an explanation on the surrounding blank lines\n-define PREPARE_MAN\n-\n-\t@$(call E, prepare: $(PREPARE_DEST_MAN_DIR)/$(1))\n-\t$(Q)$(PREPARE_MAN_CMD) $(PREPARE_SOURCE_MAN_DIR)/$(1) $(PREPARE_DEST_MAN_DIR)/$(1)\n-\n-endef\n-\n-PREPARE_TOOLS = $(filter-out compiletest rustbook error_index_generator, $(TOOLS))\n-\n-\n-# $(1) is tool\n-# $(2) is stage\n-# $(3) is host\n-# $(4) tag\n-define DEF_PREPARE_HOST_TOOL\n-prepare-host-tool-$(1)-$(2)-$(3)-$(4): \\\n-\tPREPARE_SOURCE_BIN_DIR=$$(HBIN$(2)_H_$(3))\n-prepare-host-tool-$(1)-$(2)-$(3)-$(4): prepare-maybe-clean-$(4) \\\n-                                  $$(foreach dep,$$(TOOL_DEPS_$(1)),prepare-host-lib-$$(dep)-$(2)-$(3)-$(4)) \\\n-                                  $$(HBIN$(2)_H_$(3))/$(1)$$(X_$(3)) \\\n-                                  prepare-host-dirs-$(4)\n-\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)), \\\n-      $$(if $$(findstring $(3), $$(PREPARE_HOST)), \\\n-        $$(call PREPARE_BIN,$(1)$$(X_$$(PREPARE_HOST))),),)\n-\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)), \\\n-      $$(if $$(findstring $(3), $$(PREPARE_HOST)), \\\n-        $$(call PREPARE_MAN,$(1).1),),)\n-endef\n-\n-# Libraries are compiled using the --libdir provided to configure, but\n-# we store them in the tarball using just \"lib\" so that the install\n-# script can then rewrite them back to the correct path.\n-PREPARE_TAR_LIB_DIR = $(patsubst $(CFG_LIBDIR_RELATIVE)%,lib%,$(1))\n-\n-# For host libraries only install dylibs, not rlibs since the host libs are only\n-# used to support rustc and rustc uses dynamic linking\n-#\n-# $(1) is tool\n-# $(2) is stage\n-# $(3) is host\n-# $(4) tag\n-define DEF_PREPARE_HOST_LIB\n-prepare-host-lib-$(1)-$(2)-$(3)-$(4): \\\n-\tPREPARE_WORKING_SOURCE_LIB_DIR=$$(HLIB$(2)_H_$(3))\n-prepare-host-lib-$(1)-$(2)-$(3)-$(4): \\\n-\tPREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_DIR)/$$(call PREPARE_TAR_LIB_DIR,$$(HLIB_RELATIVE$(2)_H_$(3)))\n-prepare-host-lib-$(1)-$(2)-$(3)-$(4): prepare-maybe-clean-$(4) \\\n-                                 $$(foreach dep,$$(RUST_DEPS_$(1)_T_$(3)),prepare-host-lib-$$(dep)-$(2)-$(3)-$(4)) \\\n-                                 $$(HLIB$(2)_H_$(3))/stamp.$(1) \\\n-                                 prepare-host-dirs-$(4)\n-\t$$(if $$(findstring $(2), $$(PREPARE_STAGE)), \\\n-      $$(if $$(findstring $(3), $$(PREPARE_HOST)), \\\n-        $$(if $$(findstring 1,$$(ONLY_RLIB_$(1))),, \\\n-          $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$$(PREPARE_HOST),$(1)))),),)\n-endef\n-\n-\n-# $(1) is stage\n-# $(2) is target\n-# $(3) is host\n-# $(4) tag\n-define DEF_PREPARE_TARGET_N\n-# Rebind PREPARE_*_LIB_DIR to point to rustlib, then install the libs for the targets\n-prepare-target-$(2)-host-$(3)-$(1)-$(4): \\\n-\tPREPARE_WORKING_SOURCE_LIB_DIR=$$(TLIB$(1)_T_$(2)_H_$(3))\n-prepare-target-$(2)-host-$(3)-$(1)-$(4): \\\n-\tPREPARE_WORKING_DEST_LIB_DIR=$$(PREPARE_DEST_LIB_DIR)/rustlib/$(2)/lib\n-prepare-target-$(2)-host-$(3)-$(1)-$(4): \\\n-\tPREPARE_SOURCE_BIN_DIR=$$(TBIN$(1)_T_$(2)_H_$(3))\n-prepare-target-$(2)-host-$(3)-$(1)-$(4): \\\n-\tPREPARE_DEST_BIN_DIR=$$(PREPARE_DEST_LIB_DIR)/rustlib/$(3)/bin\n-prepare-target-$(2)-host-$(3)-$(1)-$(4): prepare-maybe-clean-$(4) \\\n-        $$(foreach crate,$$(TARGET_CRATES_$(2)), \\\n-          $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate)) \\\n-        $$(if $$(findstring $(2),$$(CFG_HOST)), \\\n-          $$(foreach crate,$$(HOST_CRATES), \\\n-            $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate)),)\n-# Only install if this host and target combo is being prepared. Also be sure to\n-# *not* install the rlibs for host crates because there's no need to statically\n-# link against most of them. They just produce a large amount of extra size\n-# bloat.\n-\t$$(if $$(findstring $(1), $$(PREPARE_STAGE)), \\\n-      $$(if $$(findstring $(2), $$(PREPARE_TARGETS)), \\\n-        $$(if $$(findstring $(3), $$(PREPARE_HOST)), \\\n-          $$(call PREPARE_DIR,$$(PREPARE_WORKING_DEST_LIB_DIR)) \\\n-          $$(call PREPARE_DIR,$$(PREPARE_DEST_BIN_DIR)) \\\n-          $$(foreach crate,$$(TARGET_CRATES_$(2)), \\\n-\t    $$(if $$(or $$(findstring 1, $$(ONLY_RLIB_$$(crate))),$$(findstring 1,$$(CFG_INSTALL_ONLY_RLIB_$(2)))),, \\\n-              $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$(2),$$(crate)))) \\\n-            $$(call PREPARE_LIB,$$(call CFG_RLIB_GLOB,$$(crate)))) \\\n-          $$(if $$(findstring $(2),$$(CFG_HOST)), \\\n-            $$(foreach crate,$$(HOST_CRATES), \\\n-              $$(call PREPARE_LIB,$$(call CFG_LIB_GLOB_$(2),$$(crate)))),) \\\n-\t  $$(foreach object,$$(INSTALLED_OBJECTS_$(2)),\\\n-\t    $$(call PREPARE_LIB,$$(object))) \\\n-\t  $$(foreach bin,$$(INSTALLED_BINS_$(3)),\\\n-\t    $$(call PREPARE_BIN,$$(bin))) \\\n-\t,),),)\n-endef\n-\n-define INSTALL_GDB_DEBUGGER_SCRIPTS_COMMANDS\n-\t$(Q)$(PREPARE_BIN_CMD) $(DEBUGGER_BIN_SCRIPTS_GDB_ABS) $(PREPARE_DEST_BIN_DIR)\n-\t$(Q)$(PREPARE_LIB_CMD) $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_GDB_ABS) $(PREPARE_DEST_LIB_DIR)/rustlib/etc\n-endef\n-\n-define INSTALL_LLDB_DEBUGGER_SCRIPTS_COMMANDS\n-\t$(Q)$(PREPARE_BIN_CMD) $(DEBUGGER_BIN_SCRIPTS_LLDB_ABS) $(PREPARE_DEST_BIN_DIR)\n-\t$(Q)$(PREPARE_LIB_CMD) $(DEBUGGER_RUSTLIB_ETC_SCRIPTS_LLDB_ABS) $(PREPARE_DEST_LIB_DIR)/rustlib/etc\n-endef\n-\n-define INSTALL_NO_DEBUGGER_SCRIPTS_COMMANDS\n-\t$(Q)echo \"No debugger scripts will be installed for host $(PREPARE_HOST)\"\n-endef\n-\n-# $(1) is PREPARE_HOST\n-INSTALL_DEBUGGER_SCRIPT_COMMANDS=$(if $(findstring windows,$(1)),\\\n-                                   $(INSTALL_NO_DEBUGGER_SCRIPTS_COMMANDS),\\\n-                                   $(if $(findstring darwin,$(1)),\\\n-                                     $(INSTALL_LLDB_DEBUGGER_SCRIPTS_COMMANDS),\\\n-                                     $(INSTALL_GDB_DEBUGGER_SCRIPTS_COMMANDS)))\n-\n-define DEF_PREPARE\n-\n-prepare-base-$(1)-%: PREPARE_SOURCE_MAN_DIR=$$(S)/man\n-prepare-base-$(1)-%: PREPARE_DEST_BIN_DIR=$$(PREPARE_DEST_DIR)/bin\n-prepare-base-$(1)-%: PREPARE_DEST_LIB_DIR=$$(PREPARE_DEST_DIR)/$$(call PREPARE_TAR_LIB_DIR,$$(CFG_LIBDIR_RELATIVE))\n-prepare-base-$(1)-%: PREPARE_DEST_MAN_DIR=$$(PREPARE_DEST_DIR)/share/man/man1\n-\n-prepare-base-$(1)-target: prepare-target-$(1)\n-prepare-base-$(1)-host: prepare-host-$(1) prepare-debugger-scripts-$(1)\n-\n-prepare-host-$(1): prepare-host-tools-$(1)\n-\n-prepare-host-tools-$(1): \\\n-        $$(foreach tool, $$(PREPARE_TOOLS), \\\n-          $$(foreach host,$$(CFG_HOST), \\\n-            prepare-host-tool-$$(tool)-$$(PREPARE_STAGE)-$$(host)-$(1)))\n-\n-prepare-host-dirs-$(1): prepare-maybe-clean-$(1)\n-\t$$(call PREPARE_DIR,$$(PREPARE_DEST_BIN_DIR))\n-\t$$(call PREPARE_DIR,$$(PREPARE_DEST_LIB_DIR))\n-\t$$(call PREPARE_DIR,$$(PREPARE_DEST_LIB_DIR)/rustlib/etc)\n-\t$$(call PREPARE_DIR,$$(PREPARE_DEST_MAN_DIR))\n-\n-prepare-debugger-scripts-$(1): prepare-host-dirs-$(1) \\\n-                               $$(DEBUGGER_BIN_SCRIPTS_ALL_ABS) \\\n-                               $$(DEBUGGER_RUSTLIB_ETC_SCRIPTS_ALL_ABS)\n-\t$$(call INSTALL_DEBUGGER_SCRIPT_COMMANDS,$$(PREPARE_HOST))\n-\n-$$(foreach tool,$$(PREPARE_TOOLS), \\\n-  $$(foreach host,$$(CFG_HOST), \\\n-      $$(eval $$(call DEF_PREPARE_HOST_TOOL,$$(tool),$$(PREPARE_STAGE),$$(host),$(1)))))\n-\n-$$(foreach lib,$$(CRATES), \\\n-  $$(foreach host,$$(CFG_HOST), \\\n-    $$(eval $$(call DEF_PREPARE_HOST_LIB,$$(lib),$$(PREPARE_STAGE),$$(host),$(1)))))\n-\n-prepare-target-$(1): \\\n-        $$(foreach host,$$(CFG_HOST), \\\n-           $$(foreach target,$$(CFG_TARGET), \\\n-             prepare-target-$$(target)-host-$$(host)-$$(PREPARE_STAGE)-$(1)))\n-\n-$$(foreach host,$$(CFG_HOST), \\\n-  $$(foreach target,$$(CFG_TARGET), \\\n-    $$(eval $$(call DEF_PREPARE_TARGET_N,$$(PREPARE_STAGE),$$(target),$$(host),$(1)))))\n-\n-prepare-maybe-clean-$(1):\n-\t$$(if $$(findstring true,$$(PREPARE_CLEAN)), \\\n-      @$$(call E, cleaning destination $$(PREPARE_DEST_DIR)),)\n-\t$$(if $$(findstring true,$$(PREPARE_CLEAN)), \\\n-      $$(Q)rm -rf $$(PREPARE_DEST_DIR),)\n-\n-\n-endef"}, {"sha": "b8f51097868d41a2dafb243525b7e6a80885a136", "filename": "mk/reconfig.mk", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Freconfig.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Freconfig.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Freconfig.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,43 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# Recursive wildcard function\n-# http://blog.jgc.org/2011/07/gnu-make-recursive-wildcard-function.html\n-rwildcard=$(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2) \\\n-  $(filter $(subst *,%,$2),$d))\n-\n-ifndef CFG_DISABLE_MANAGE_SUBMODULES\n-# This is a pretty expensive operation but I don't see any way to avoid it\n-# NB: This only looks for '+' status (wrong commit checked out), not '-' status\n-# (nothing checked out at all).  `./configure --{llvm,jemalloc}-root`\n-# will explicitly deinitialize the corresponding submodules, and we don't\n-# want to force constant rebuilds in that case.\n-NEED_GIT_RECONFIG=$(shell cd \"$(CFG_SRC_DIR)\" && $(CFG_GIT) submodule status | grep -c '^+')\n-else\n-NEED_GIT_RECONFIG=0\n-endif\n-\n-ifeq ($(NEED_GIT_RECONFIG),0)\n-else\n-# If the submodules have changed then always execute config.mk\n-.PHONY: config.stamp\n-endif\n-\n-Makefile config.mk: config.stamp\n-\n-ifeq ($(SREL),)\n-SREL_ROOT := ./\n-else\n-SREL_ROOT := $(SREL)\n-endif\n-\n-config.stamp: $(S)configure $(S)Makefile.in $(S)src/stage0.txt\n-\t@$(call E, cfg: reconfiguring)\n-\t$(SREL_ROOT)configure $(CFG_CONFIGURE_ARGS)"}, {"sha": "f5149281d50712b1e30563d3122cbb37c10f4f0a", "filename": "mk/rt.mk", "status": "removed", "additions": 0, "deletions": 721, "changes": 721, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,721 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-################################################################################\n-# Native libraries built as part of the rust build process\n-#\n-# This portion of the rust build system is meant to keep track of native\n-# dependencies and how to build them. It is currently required that all native\n-# dependencies are built as static libraries, as slinging around dynamic\n-# libraries isn't exactly the most fun thing to do.\n-#\n-# This section should need minimal modification to add new libraries. The\n-# relevant variables are:\n-#\n-#   NATIVE_LIBS\n-#\tThis is a list of all native libraries which are built as part of the\n-#\tbuild process. It will build all libraries into RT_OUTPUT_DIR with the\n-#\tappropriate name of static library as dictated by the target platform\n-#\n-#   NATIVE_DEPS_<lib>\n-#\tThis is a list of files relative to the src/rt directory which are\n-#\tneeded to build the native library. Each file will be compiled to an\n-#\tobject file, and then all the object files will be assembled into an\n-#\tarchive (static library). The list contains files of any extension\n-#\n-# If adding a new library, you should update the NATIVE_LIBS list, and then list\n-# the required files below it. The list of required files is a list of files\n-# that's per-target so you're allowed to conditionally add files based on the\n-# target.\n-################################################################################\n-NATIVE_LIBS := hoedown miniz rust_test_helpers\n-\n-# A macro to add a generic implementation of intrinsics iff a arch optimized implementation is not\n-# already in the list.\n-# $(1) is the target\n-# $(2) is the intrinsic\n-define ADD_INTRINSIC\n-  ifeq ($$(findstring X,$$(foreach intrinsic,$$(COMPRT_OBJS_$(1)),$$(if $$(findstring $(2),$$(intrinsic)),X,))),)\n-    COMPRT_OBJS_$(1) += $(2)\n-  endif\n-endef\n-\n-# $(1) is the target triple\n-define NATIVE_LIBRARIES\n-\n-NATIVE_DEPS_hoedown_$(1) := hoedown/src/autolink.c \\\n-\t\t\thoedown/src/buffer.c \\\n-\t\t\thoedown/src/document.c \\\n-\t\t\thoedown/src/escape.c \\\n-\t\t\thoedown/src/html.c \\\n-\t\t\thoedown/src/html_blocks.c \\\n-\t\t\thoedown/src/html_smartypants.c \\\n-\t\t\thoedown/src/stack.c \\\n-\t\t\thoedown/src/version.c\n-NATIVE_DEPS_miniz_$(1) = miniz.c\n-NATIVE_DEPS_rust_test_helpers_$(1) := rust_test_helpers.c\n-\n-################################################################################\n-# You shouldn't find it that necessary to edit anything below this line.\n-################################################################################\n-\n-# While we're defining the native libraries for each target, we define some\n-# common rules used to build files for various targets.\n-\n-RT_OUTPUT_DIR_$(1) := $(1)/rt\n-\n-$$(RT_OUTPUT_DIR_$(1))/%.o: $(S)src/rt/%.c $$(MKFILE_DEPS)\n-\t@mkdir -p $$(@D)\n-\t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_COMPILE_C_$(1), $$@, \\\n-\t\t$$(call CFG_CC_INCLUDE_$(1),$$(S)src/rt/hoedown/src) \\\n-\t\t$$(call CFG_CC_INCLUDE_$(1),$$(S)src/rt) \\\n-                 $$(RUNTIME_CFLAGS_$(1))) $$<\n-\n-$$(RT_OUTPUT_DIR_$(1))/%.o: $(S)src/rt/%.S $$(MKFILE_DEPS) \\\n-\t    $$(LLVM_CONFIG_$$(CFG_BUILD))\n-\t@mkdir -p $$(@D)\n-\t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_ASSEMBLE_$(1),$$@,$$<)\n-\n-# On MSVC targets the compiler's default include path (e.g. where to find system\n-# headers) is specified by the INCLUDE environment variable. This may not be set\n-# so the ./configure script scraped the relevant values and this is the location\n-# that we put them into cl.exe's environment.\n-ifeq ($$(findstring msvc,$(1)),msvc)\n-$$(RT_OUTPUT_DIR_$(1))/%.o: \\\n-\texport INCLUDE := $$(CFG_MSVC_INCLUDE_PATH_$$(HOST_$(1)))\n-$(1)/rustllvm/%.o: \\\n-\texport INCLUDE := $$(CFG_MSVC_INCLUDE_PATH_$$(HOST_$(1)))\n-endif\n-endef\n-\n-$(foreach target,$(CFG_TARGET),$(eval $(call NATIVE_LIBRARIES,$(target))))\n-\n-# A macro for devining how to build third party libraries listed above (based\n-# on their dependencies).\n-#\n-# $(1) is the target\n-# $(2) is the lib name\n-define THIRD_PARTY_LIB\n-\n-OBJS_$(2)_$(1) := $$(NATIVE_DEPS_$(2)_$(1):%=$$(RT_OUTPUT_DIR_$(1))/%)\n-OBJS_$(2)_$(1) := $$(OBJS_$(2)_$(1):.c=.o)\n-OBJS_$(2)_$(1) := $$(OBJS_$(2)_$(1):.cpp=.o)\n-OBJS_$(2)_$(1) := $$(OBJS_$(2)_$(1):.S=.o)\n-NATIVE_$(2)_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),$(2))\n-$$(RT_OUTPUT_DIR_$(1))/$$(NATIVE_$(2)_$(1)): $$(OBJS_$(2)_$(1))\n-\t@$$(call E, link: $$@)\n-\t$$(Q)$$(call CFG_CREATE_ARCHIVE_$(1),$$@) $$^\n-\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n- $(eval $(call RUNTIME_RULES,$(target))))\n-$(foreach lib,$(NATIVE_LIBS), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call THIRD_PARTY_LIB,$(target),$(lib)))))\n-\n-\n-################################################################################\n-# Building third-party targets with external build systems\n-#\n-# This location is meant for dependencies which have external build systems. It\n-# is still assumed that the output of each of these steps is a static library\n-# in the correct location.\n-################################################################################\n-\n-define DEF_THIRD_PARTY_TARGETS\n-\n-# $(1) is the target triple\n-\n-ifeq ($$(CFG_WINDOWSY_$(1)),1)\n-  # A bit of history here, this used to be --enable-lazy-lock added in #14006\n-  # which was filed with jemalloc in jemalloc/jemalloc#83 which was also\n-  # reported to MinGW: http://sourceforge.net/p/mingw-w64/bugs/395/\n-  #\n-  # When updating jemalloc to 4.0, however, it was found that binaries would\n-  # exit with the status code STATUS_RESOURCE_NOT_OWNED indicating that a thread\n-  # was unlocking a mutex it never locked. Disabling this \"lazy lock\" option\n-  # seems to fix the issue, but it was enabled by default for MinGW targets in\n-  # 13473c7 for jemalloc.\n-  #\n-  # As a result of all that, force disabling lazy lock on Windows, and after\n-  # reading some code it at least *appears* that the initialization of mutexes\n-  # is otherwise ok in jemalloc, so shouldn't cause problems hopefully...\n-  #\n-  # tl;dr: make windows behave like other platforms by disabling lazy locking,\n-  #        but requires passing an option due to a historical default with\n-  #        jemalloc.\n-  JEMALLOC_ARGS_$(1) := --disable-lazy-lock\n-else ifeq ($(OSTYPE_$(1)), apple-ios)\n-  JEMALLOC_ARGS_$(1) := --disable-tls\n-else ifeq ($(findstring android, $(OSTYPE_$(1))), android)\n-  # We force android to have prefixed symbols because apparently replacement of\n-  # the libc allocator doesn't quite work. When this was tested (unprefixed\n-  # symbols), it was found that the `realpath` function in libc would allocate\n-  # with libc malloc (not jemalloc malloc), and then the standard library would\n-  # free with jemalloc free, causing a segfault.\n-  #\n-  # If the test suite passes, however, without symbol prefixes then we should be\n-  # good to go!\n-  JEMALLOC_ARGS_$(1) := --disable-tls --with-jemalloc-prefix=je_\n-else ifeq ($(findstring dragonfly, $(OSTYPE_$(1))), dragonfly)\n-  JEMALLOC_ARGS_$(1) := --with-jemalloc-prefix=je_\n-endif\n-\n-ifdef CFG_ENABLE_DEBUG_JEMALLOC\n-  JEMALLOC_ARGS_$(1) += --enable-debug --enable-fill\n-endif\n-\n-################################################################################\n-# jemalloc\n-################################################################################\n-\n-ifdef CFG_ENABLE_FAST_MAKE\n-JEMALLOC_DEPS := $(S)/.gitmodules\n-else\n-JEMALLOC_DEPS := $(wildcard \\\n-\t\t   $(S)src/jemalloc/* \\\n-\t\t   $(S)src/jemalloc/*/* \\\n-\t\t   $(S)src/jemalloc/*/*/* \\\n-\t\t   $(S)src/jemalloc/*/*/*/*)\n-endif\n-\n-# See #17183 for details, this file is touched during the build process so we\n-# don't want to consider it as a dependency.\n-JEMALLOC_DEPS := $(filter-out $(S)src/jemalloc/VERSION,$(JEMALLOC_DEPS))\n-\n-JEMALLOC_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),jemalloc)\n-ifeq ($$(CFG_WINDOWSY_$(1)),1)\n-  JEMALLOC_REAL_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),jemalloc_s)\n-else\n-  JEMALLOC_REAL_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),jemalloc_pic)\n-endif\n-JEMALLOC_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(JEMALLOC_NAME_$(1))\n-JEMALLOC_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/jemalloc\n-JEMALLOC_LOCAL_$(1) := $$(JEMALLOC_BUILD_DIR_$(1))/lib/$$(JEMALLOC_REAL_NAME_$(1))\n-\n-$$(JEMALLOC_LOCAL_$(1)): $$(JEMALLOC_DEPS) $$(MKFILE_DEPS)\n-\t@$$(call E, make: jemalloc)\n-\tcd \"$$(JEMALLOC_BUILD_DIR_$(1))\"; \"$(S)src/jemalloc/configure\" \\\n-\t\t$$(JEMALLOC_ARGS_$(1)) $(CFG_JEMALLOC_FLAGS) \\\n-\t\t--build=$$(CFG_GNU_TRIPLE_$(CFG_BUILD)) --host=$$(CFG_GNU_TRIPLE_$(1)) \\\n-\t\tCC=\"$$(CC_$(1)) $$(CFG_JEMALLOC_CFLAGS_$(1))\" \\\n-\t\tAR=\"$$(AR_$(1))\" \\\n-\t\tRANLIB=\"$$(AR_$(1)) s\" \\\n-\t\tCPPFLAGS=\"-I $(S)src/rt/\" \\\n-\t\tEXTRA_CFLAGS=\"-g1 -ffunction-sections -fdata-sections\"\n-\t$$(Q)$$(MAKE) -C \"$$(JEMALLOC_BUILD_DIR_$(1))\" build_lib_static\n-\n-ifeq ($(1),$$(CFG_BUILD))\n-ifneq ($$(CFG_JEMALLOC_ROOT),)\n-$$(JEMALLOC_LIB_$(1)): $$(CFG_JEMALLOC_ROOT)/libjemalloc_pic.a\n-\t@$$(call E, copy: jemalloc)\n-\t$$(Q)cp $$< $$@\n-else\n-$$(JEMALLOC_LIB_$(1)): $$(JEMALLOC_LOCAL_$(1))\n-\t$$(Q)cp $$< $$@\n-endif\n-else\n-$$(JEMALLOC_LIB_$(1)): $$(JEMALLOC_LOCAL_$(1))\n-\t$$(Q)cp $$< $$@\n-endif\n-\n-################################################################################\n-# compiler-rt\n-################################################################################\n-\n-# Everything below is a manual compilation of compiler-rt, disregarding its\n-# build system. See comments in `src/bootstrap/native.rs` for more information.\n-\n-COMPRT_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),compiler-rt)\n-COMPRT_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(COMPRT_NAME_$(1))\n-COMPRT_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/compiler-rt\n-\n-# We must avoid compiling both a generic implementation (e.g. `floatdidf.c) and an arch optimized\n-# implementation (e.g. `x86_64/floatdidf.S) of the same symbol (e.g. `floatdidf) because that causes\n-# linker errors. To avoid that, we first add all the arch optimized implementations and then add the\n-# generic implementations if and only if its arch optimized version is not already in the list. This\n-# last part is handled by the ADD_INTRINSIC macro.\n-\n-COMPRT_OBJS_$(1) :=\n-\n-ifeq ($$(findstring msvc,$(1)),)\n-ifeq ($$(findstring x86_64,$(1)),x86_64)\n-COMPRT_OBJS_$(1) += \\\n-      x86_64/chkstk.o \\\n-      x86_64/chkstk2.o \\\n-      x86_64/floatdidf.o \\\n-      x86_64/floatdisf.o \\\n-      x86_64/floatdixf.o \\\n-      x86_64/floatundidf.o \\\n-      x86_64/floatundisf.o \\\n-      x86_64/floatundixf.o\n-endif\n-\n-ifeq ($$(findstring i686,$$(patsubts i%86,i686,$(1))),i686)\n-COMPRT_OBJS_$(1) += \\\n-      i386/ashldi3.o \\\n-      i386/ashrdi3.o \\\n-      i386/chkstk.o \\\n-      i386/chkstk2.o \\\n-      i386/divdi3.o \\\n-      i386/floatdidf.o \\\n-      i386/floatdisf.o \\\n-      i386/floatdixf.o \\\n-      i386/floatundidf.o \\\n-      i386/floatundisf.o \\\n-      i386/floatundixf.o \\\n-      i386/lshrdi3.o \\\n-      i386/moddi3.o \\\n-      i386/muldi3.o \\\n-      i386/udivdi3.o \\\n-      i386/umoddi3.o\n-endif\n-\n-else\n-\n-ifeq ($$(findstring x86_64,$(1)),x86_64)\n-COMPRT_OBJS_$(1) += \\\n-      x86_64/floatdidf.o \\\n-      x86_64/floatdisf.o \\\n-      x86_64/floatdixf.o\n-endif\n-\n-endif\n-\n-# Generic ARM sources, nothing compiles on iOS though\n-ifeq ($$(findstring arm,$(1)),arm)\n-ifeq ($$(findstring ios,$(1)),)\n-COMPRT_OBJS_$(1) += \\\n-  arm/aeabi_cdcmp.o \\\n-  arm/aeabi_cdcmpeq_check_nan.o \\\n-  arm/aeabi_cfcmp.o \\\n-  arm/aeabi_cfcmpeq_check_nan.o \\\n-  arm/aeabi_dcmp.o \\\n-  arm/aeabi_div0.o \\\n-  arm/aeabi_drsub.o \\\n-  arm/aeabi_fcmp.o \\\n-  arm/aeabi_frsub.o \\\n-  arm/aeabi_idivmod.o \\\n-  arm/aeabi_ldivmod.o \\\n-  arm/aeabi_memcmp.o \\\n-  arm/aeabi_memcpy.o \\\n-  arm/aeabi_memmove.o \\\n-  arm/aeabi_memset.o \\\n-  arm/aeabi_uidivmod.o \\\n-  arm/aeabi_uldivmod.o \\\n-  arm/bswapdi2.o \\\n-  arm/bswapsi2.o \\\n-  arm/clzdi2.o \\\n-  arm/clzsi2.o \\\n-  arm/comparesf2.o \\\n-  arm/divmodsi4.o \\\n-  arm/divsi3.o \\\n-  arm/modsi3.o \\\n-  arm/switch16.o \\\n-  arm/switch32.o \\\n-  arm/switch8.o \\\n-  arm/switchu8.o \\\n-  arm/sync_synchronize.o \\\n-  arm/udivmodsi4.o \\\n-  arm/udivsi3.o \\\n-  arm/umodsi3.o\n-endif\n-endif\n-\n-# Thumb sources\n-ifeq ($$(findstring armv7,$(1)),armv7)\n-COMPRT_OBJS_$(1) += \\\n-  arm/sync_fetch_and_add_4.o \\\n-  arm/sync_fetch_and_add_8.o \\\n-  arm/sync_fetch_and_and_4.o \\\n-  arm/sync_fetch_and_and_8.o \\\n-  arm/sync_fetch_and_max_4.o \\\n-  arm/sync_fetch_and_max_8.o \\\n-  arm/sync_fetch_and_min_4.o \\\n-  arm/sync_fetch_and_min_8.o \\\n-  arm/sync_fetch_and_nand_4.o \\\n-  arm/sync_fetch_and_nand_8.o \\\n-  arm/sync_fetch_and_or_4.o \\\n-  arm/sync_fetch_and_or_8.o \\\n-  arm/sync_fetch_and_sub_4.o \\\n-  arm/sync_fetch_and_sub_8.o \\\n-  arm/sync_fetch_and_umax_4.o \\\n-  arm/sync_fetch_and_umax_8.o \\\n-  arm/sync_fetch_and_umin_4.o \\\n-  arm/sync_fetch_and_umin_8.o \\\n-  arm/sync_fetch_and_xor_4.o \\\n-  arm/sync_fetch_and_xor_8.o\n-endif\n-\n-# VFP sources\n-ifeq ($$(findstring eabihf,$(1)),eabihf)\n-COMPRT_OBJS_$(1) += \\\n-  arm/adddf3vfp.o \\\n-  arm/addsf3vfp.o \\\n-  arm/divdf3vfp.o \\\n-  arm/divsf3vfp.o \\\n-  arm/eqdf2vfp.o \\\n-  arm/eqsf2vfp.o \\\n-  arm/extendsfdf2vfp.o \\\n-  arm/fixdfsivfp.o \\\n-  arm/fixsfsivfp.o \\\n-  arm/fixunsdfsivfp.o \\\n-  arm/fixunssfsivfp.o \\\n-  arm/floatsidfvfp.o \\\n-  arm/floatsisfvfp.o \\\n-  arm/floatunssidfvfp.o \\\n-  arm/floatunssisfvfp.o \\\n-  arm/gedf2vfp.o \\\n-  arm/gesf2vfp.o \\\n-  arm/gtdf2vfp.o \\\n-  arm/gtsf2vfp.o \\\n-  arm/ledf2vfp.o \\\n-  arm/lesf2vfp.o \\\n-  arm/ltdf2vfp.o \\\n-  arm/ltsf2vfp.o \\\n-  arm/muldf3vfp.o \\\n-  arm/mulsf3vfp.o \\\n-  arm/negdf2vfp.o \\\n-  arm/negsf2vfp.o \\\n-  arm/nedf2vfp.o \\\n-  arm/nesf2vfp.o \\\n-  arm/restore_vfp_d8_d15_regs.o \\\n-  arm/save_vfp_d8_d15_regs.o \\\n-  arm/subdf3vfp.o \\\n-  arm/subsf3vfp.o \\\n-  arm/truncdfsf2vfp.o \\\n-  arm/unorddf2vfp.o \\\n-  arm/unordsf2vfp.o\n-endif\n-\n-$(foreach intrinsic,absvdi2.o \\\n-  absvsi2.o \\\n-  adddf3.o \\\n-  addsf3.o \\\n-  addvdi3.o \\\n-  addvsi3.o \\\n-  apple_versioning.o \\\n-  ashldi3.o \\\n-  ashrdi3.o \\\n-  clear_cache.o \\\n-  clzdi2.o \\\n-  clzsi2.o \\\n-  cmpdi2.o \\\n-  comparedf2.o \\\n-  comparesf2.o \\\n-  ctzdi2.o \\\n-  ctzsi2.o \\\n-  divdc3.o \\\n-  divdf3.o \\\n-  divdi3.o \\\n-  divmoddi4.o \\\n-  divmodsi4.o \\\n-  divsc3.o \\\n-  divsf3.o \\\n-  divsi3.o \\\n-  divxc3.o \\\n-  extendsfdf2.o \\\n-  extendhfsf2.o \\\n-  ffsdi2.o \\\n-  fixdfdi.o \\\n-  fixdfsi.o \\\n-  fixsfdi.o \\\n-  fixsfsi.o \\\n-  fixunsdfdi.o \\\n-  fixunsdfsi.o \\\n-  fixunssfdi.o \\\n-  fixunssfsi.o \\\n-  fixunsxfdi.o \\\n-  fixunsxfsi.o \\\n-  fixxfdi.o \\\n-  floatdidf.o \\\n-  floatdisf.o \\\n-  floatdixf.o \\\n-  floatsidf.o \\\n-  floatsisf.o \\\n-  floatundidf.o \\\n-  floatundisf.o \\\n-  floatundixf.o \\\n-  floatunsidf.o \\\n-  floatunsisf.o \\\n-  int_util.o \\\n-  lshrdi3.o \\\n-  moddi3.o \\\n-  modsi3.o \\\n-  muldc3.o \\\n-  muldf3.o \\\n-  muldi3.o \\\n-  mulodi4.o \\\n-  mulosi4.o \\\n-  muloti4.o \\\n-  mulsc3.o \\\n-  mulsf3.o \\\n-  mulvdi3.o \\\n-  mulvsi3.o \\\n-  mulxc3.o \\\n-  negdf2.o \\\n-  negdi2.o \\\n-  negsf2.o \\\n-  negvdi2.o \\\n-  negvsi2.o \\\n-  paritydi2.o \\\n-  paritysi2.o \\\n-  popcountdi2.o \\\n-  popcountsi2.o \\\n-  powidf2.o \\\n-  powisf2.o \\\n-  powixf2.o \\\n-  subdf3.o \\\n-  subsf3.o \\\n-  subvdi3.o \\\n-  subvsi3.o \\\n-  truncdfhf2.o \\\n-  truncdfsf2.o \\\n-  truncsfhf2.o \\\n-  ucmpdi2.o \\\n-  udivdi3.o \\\n-  udivmoddi4.o \\\n-  udivmodsi4.o \\\n-  udivsi3.o \\\n-  umoddi3.o \\\n-  umodsi3.o,\n-  $(call ADD_INTRINSIC,$(1),$(intrinsic)))\n-\n-ifeq ($$(findstring ios,$(1)),)\n-$(foreach intrinsic,absvti2.o \\\n-  addtf3.o \\\n-  addvti3.o \\\n-  ashlti3.o \\\n-  ashrti3.o \\\n-  clzti2.o \\\n-  cmpti2.o \\\n-  ctzti2.o \\\n-  divtf3.o \\\n-  divti3.o \\\n-  ffsti2.o \\\n-  fixdfti.o \\\n-  fixsfti.o \\\n-  fixunsdfti.o \\\n-  fixunssfti.o \\\n-  fixunsxfti.o \\\n-  fixxfti.o \\\n-  floattidf.o \\\n-  floattisf.o \\\n-  floattixf.o \\\n-  floatuntidf.o \\\n-  floatuntisf.o \\\n-  floatuntixf.o \\\n-  lshrti3.o \\\n-  modti3.o \\\n-  multf3.o \\\n-  multi3.o \\\n-  mulvti3.o \\\n-  negti2.o \\\n-  negvti2.o \\\n-  parityti2.o \\\n-  popcountti2.o \\\n-  powitf2.o \\\n-  subtf3.o \\\n-  subvti3.o \\\n-  trampoline_setup.o \\\n-  ucmpti2.o \\\n-  udivmodti4.o \\\n-  udivti3.o \\\n-  umodti3.o,\n-  $(call ADD_INTRINSIC,$(1),$(intrinsic)))\n-endif\n-\n-ifeq ($$(findstring apple,$(1)),apple)\n-$(foreach intrinsic,atomic_flag_clear.o \\\n-  atomic_flag_clear_explicit.o \\\n-  atomic_flag_test_and_set.o \\\n-  atomic_flag_test_and_set_explicit.o \\\n-  atomic_signal_fence.o \\\n-  atomic_thread_fence.o,\n-  $(call ADD_INTRINSIC,$(1),$(intrinsic)))\n-endif\n-\n-ifeq ($$(findstring windows,$(1)),)\n-$(call ADD_INTRINSIC,$(1),emutls.o)\n-endif\n-\n-ifeq ($$(findstring msvc,$(1)),)\n-\n-ifeq ($$(findstring freebsd,$(1)),)\n-ifeq ($$(findstring netbsd,$(1)),)\n-$(call ADD_INTRINSIC,$(1),gcc_personality_v0.o)\n-endif\n-endif\n-endif\n-\n-ifeq ($$(findstring aarch64,$(1)),aarch64)\n-$(foreach intrinsic,comparetf2.o \\\n-  extenddftf2.o \\\n-  extendsftf2.o \\\n-  fixtfdi.o \\\n-  fixtfsi.o \\\n-  fixtfti.o \\\n-  fixunstfdi.o \\\n-  fixunstfsi.o \\\n-  fixunstfti.o \\\n-  floatditf.o \\\n-  floatsitf.o \\\n-  floatunditf.o \\\n-  floatunsitf.o \\\n-  multc3.o \\\n-  trunctfdf2.o \\\n-  trunctfsf2.o,\n-  $(call ADD_INTRINSIC,$(1),$(intrinsic)))\n-endif\n-\n-ifeq ($$(findstring msvc,$(1)),msvc)\n-$$(COMPRT_BUILD_DIR_$(1))/%.o: CFLAGS += -Zl -D__func__=__FUNCTION__\n-else\n-$$(COMPRT_BUILD_DIR_$(1))/%.o: CFLAGS += -fno-builtin -fvisibility=hidden \\\n-\t-fomit-frame-pointer -ffreestanding\n-endif\n-\n-COMPRT_OBJS_$(1) := $$(COMPRT_OBJS_$(1):%=$$(COMPRT_BUILD_DIR_$(1))/%)\n-\n-$$(COMPRT_BUILD_DIR_$(1))/%.o: $(S)src/compiler-rt/lib/builtins/%.c\n-\t@mkdir -p $$(@D)\n-\t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_COMPILE_C_$(1),$$@,$$<)\n-\n-$$(COMPRT_BUILD_DIR_$(1))/%.o: $(S)src/compiler-rt/lib/builtins/%.S \\\n-\t    $$(LLVM_CONFIG_$$(CFG_BUILD))\n-\t@mkdir -p $$(@D)\n-\t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_ASSEMBLE_$(1),$$@,$$<)\n-\n-ifeq ($$(findstring msvc,$(1)),msvc)\n-$$(COMPRT_BUILD_DIR_$(1))/%.o: \\\n-\texport INCLUDE := $$(CFG_MSVC_INCLUDE_PATH_$$(HOST_$(1)))\n-endif\n-\n-ifeq ($$(findstring emscripten,$(1)),emscripten)\n-# FIXME: emscripten doesn't use compiler-rt and can't build it without\n-# further hacks\n-COMPRT_OBJS_$(1) :=\n-endif\n-\n-$$(COMPRT_LIB_$(1)): $$(COMPRT_OBJS_$(1))\n-\t@$$(call E, link: $$@)\n-\t$$(Q)$$(call CFG_CREATE_ARCHIVE_$(1),$$@) $$^\n-\n-################################################################################\n-# libbacktrace\n-#\n-# We use libbacktrace on linux to get symbols in backtraces, but only on linux.\n-# Elsewhere we use other system utilities, so this library is only built on\n-# linux.\n-################################################################################\n-\n-BACKTRACE_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),backtrace)\n-BACKTRACE_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(BACKTRACE_NAME_$(1))\n-BACKTRACE_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/libbacktrace\n-\n-# We don't use this on platforms that aren't linux-based (with the exception of\n-# msys2/mingw builds on windows, which use it to read the dwarf debug\n-# information) so just make the file available, the compilation of libstd won't\n-# actually build it.\n-ifeq ($$(findstring darwin,$$(OSTYPE_$(1))),darwin)\n-# See comment above\n-$$(BACKTRACE_LIB_$(1)):\n-\ttouch $$@\n-\n-else ifeq ($$(findstring ios,$$(OSTYPE_$(1))),ios)\n-# See comment above\n-$$(BACKTRACE_LIB_$(1)):\n-\ttouch $$@\n-else ifeq ($$(findstring msvc,$(1)),msvc)\n-# See comment above\n-$$(BACKTRACE_LIB_$(1)):\n-\ttouch $$@\n-else ifeq ($$(findstring emscripten,$(1)),emscripten)\n-# FIXME: libbacktrace doesn't understand the emscripten triple\n-$$(BACKTRACE_LIB_$(1)):\n-\ttouch $$@\n-else\n-\n-ifdef CFG_ENABLE_FAST_MAKE\n-BACKTRACE_DEPS := $(S)/.gitmodules\n-else\n-BACKTRACE_DEPS := $(wildcard $(S)src/libbacktrace/*)\n-endif\n-\n-# We need to export CFLAGS because otherwise it doesn't pick up cross compile\n-# builds. If libbacktrace doesn't realize this, it will attempt to read 64-bit\n-# elf headers when compiled for a 32-bit system, yielding blank backtraces.\n-#\n-# This also removes the -Werror flag specifically to prevent errors during\n-# configuration.\n-#\n-# Down below you'll also see echos into the config.h generated by the\n-# ./configure script. This is done to force libbacktrace to *not* use the\n-# atomic/sync functionality because it pulls in unnecessary dependencies and we\n-# never use it anyway.\n-#\n-# We also use `env PWD=` to clear the PWD environment variable, and then\n-# execute the command in a new shell. This is necessary to workaround a\n-# buildbot/msys2 bug: the shell is launched with PWD set to a windows-style path,\n-# which results in all further uses of `pwd` also printing a windows-style path,\n-# which breaks libbacktrace's configure script. Clearing PWD within the same\n-# shell is not sufficient.\n-\n-$$(BACKTRACE_BUILD_DIR_$(1))/Makefile: $$(BACKTRACE_DEPS) $$(MKFILE_DEPS)\n-\t@$$(call E, configure: libbacktrace for $(1))\n-\t$$(Q)rm -rf $$(BACKTRACE_BUILD_DIR_$(1))\n-\t$$(Q)mkdir -p $$(BACKTRACE_BUILD_DIR_$(1))\n-\t$$(Q)(cd $$(BACKTRACE_BUILD_DIR_$(1)) && env \\\n-\t      PWD= \\\n-\t      CC=\"$$(CC_$(1))\" \\\n-\t      AR=\"$$(AR_$(1))\" \\\n-\t      RANLIB=\"$$(AR_$(1)) s\" \\\n-\t      CFLAGS=\"$$(CFG_GCCISH_CFLAGS_$(1)) -Wno-error -fno-stack-protector\" \\\n-\t      $(S)src/libbacktrace/configure --build=$(CFG_GNU_TRIPLE_$(CFG_BUILD)) --host=$(CFG_GNU_TRIPLE_$(1)))\n-\t$$(Q)echo '#undef HAVE_ATOMIC_FUNCTIONS' >> \\\n-\t      $$(BACKTRACE_BUILD_DIR_$(1))/config.h\n-\t$$(Q)echo '#undef HAVE_SYNC_FUNCTIONS' >> \\\n-\t      $$(BACKTRACE_BUILD_DIR_$(1))/config.h\n-\n-$$(BACKTRACE_LIB_$(1)): $$(BACKTRACE_BUILD_DIR_$(1))/Makefile $$(MKFILE_DEPS)\n-\t@$$(call E, make: libbacktrace)\n-\t$$(Q)$$(MAKE) -C $$(BACKTRACE_BUILD_DIR_$(1)) \\\n-\t\tINCDIR=$(S)src/libbacktrace\n-\t$$(Q)cp $$(BACKTRACE_BUILD_DIR_$(1))/.libs/libbacktrace.a $$@\n-\n-endif\n-\n-################################################################################\n-# libc/libunwind for musl\n-#\n-# When we're building a musl-like target we're going to link libc/libunwind\n-# statically into the standard library and liblibc, so we need to make sure\n-# they're in a location that we can find\n-################################################################################\n-\n-ifeq ($$(findstring musl,$(1)),musl)\n-$$(RT_OUTPUT_DIR_$(1))/%: $$(CFG_MUSL_ROOT)/lib/%\n-\tcp $$^ $$@\n-else\n-# Ask gcc where it is\n-$$(RT_OUTPUT_DIR_$(1))/%:\n-\tcp $$(shell $$(CC_$(1)) -print-file-name=$$(@F)) $$@\n-endif\n-\n-endef\n-\n-# Instantiate template for all stages/targets\n-$(foreach target,$(CFG_TARGET), \\\n-     $(eval $(call DEF_THIRD_PARTY_TARGETS,$(target))))"}, {"sha": "2d63f69960f78a949b952d4fdf8e916c1559c398", "filename": "mk/rustllvm.mk", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,71 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-######################################################################\n-# rustc LLVM-extensions (C++) library variables and rules\n-######################################################################\n-\n-define DEF_RUSTLLVM_TARGETS\n-\n-# FIXME: Lately, on windows, llvm-config --includedir is not enough\n-# to find the llvm includes (probably because we're not actually installing\n-# llvm, but using it straight out of the build directory)\n-ifdef CFG_WINDOWSY_$(1)\n-LLVM_EXTRA_INCDIRS_$(1)= $$(call CFG_CC_INCLUDE_$(1),$(S)src/llvm/include) \\\n-                         $$(call CFG_CC_INCLUDE_$(1),\\\n-\t\t\t   $$(CFG_LLVM_BUILD_DIR_$(1))/include)\n-endif\n-\n-RUSTLLVM_OBJS_CS_$(1) := $$(addprefix rustllvm/, \\\n-\tRustWrapper.cpp PassWrapper.cpp \\\n-\tArchiveWrapper.cpp)\n-\n-RUSTLLVM_INCS_$(1) = $$(LLVM_EXTRA_INCDIRS_$(1)) \\\n-                     $$(call CFG_CC_INCLUDE_$(1),$$(LLVM_INCDIR_$(1))) \\\n-                     $$(call CFG_CC_INCLUDE_$(1),$$(S)src/rustllvm/include)\n-RUSTLLVM_OBJS_OBJS_$(1) := $$(RUSTLLVM_OBJS_CS_$(1):rustllvm/%.cpp=$(1)/rustllvm/%.o)\n-\n-# Flag that we are building with Rust's llvm fork\n-ifeq ($(CFG_LLVM_ROOT),)\n-RUSTLLVM_CXXFLAGS_$(1) := -DLLVM_RUSTLLVM\n-endif\n-\n-# Note that we appease `cl.exe` and its need for some sort of exception\n-# handling flag with the `EHsc` argument here as well.\n-ifeq ($$(findstring msvc,$(1)),msvc)\n-EXTRA_RUSTLLVM_CXXFLAGS_$(1) := //EHsc\n-endif\n-\n-$$(RT_OUTPUT_DIR_$(1))/$$(call CFG_STATIC_LIB_NAME_$(1),rustllvm): \\\n-\t    $$(RUSTLLVM_OBJS_OBJS_$(1))\n-\t@$$(call E, link: $$@)\n-\t$$(Q)$$(call CFG_CREATE_ARCHIVE_$(1),$$@) $$^\n-\n-RUSTLLVM_COMPONENTS_$(1) = $$(shell echo $$(LLVM_ALL_COMPONENTS_$(1)) |\\\n-\ttr 'a-z-' 'A-Z_'| sed -e 's/^ //;s/\\([^ ]*\\)/\\-DLLVM_COMPONENT_\\1/g')\n-\n-# On MSVC we need to double-escape arguments that llvm-config printed which\n-# start with a '/'. The shell we're running in will auto-translate the argument\n-# `/foo` to `C:/msys64/foo` but we really want it to be passed through as `/foo`\n-# so the argument passed to our shell must be `//foo`.\n-$(1)/rustllvm/%.o: $(S)src/rustllvm/%.cpp $$(MKFILE_DEPS) $$(LLVM_CONFIG_$(1))\n-\t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_COMPILE_CXX_$(1), $$@,) \\\n-\t\t$$(subst  /,//,$$(LLVM_CXXFLAGS_$(1))) \\\n-\t\t$$(RUSTLLVM_COMPONENTS_$(1)) \\\n-\t\t$$(RUSTLLVM_CXXFLAGS_$(1)) \\\n-\t\t$$(EXTRA_RUSTLLVM_CXXFLAGS_$(1)) \\\n-\t\t$$(RUSTLLVM_INCS_$(1)) \\\n-\t\t$$<\n-endef\n-\n-# Instantiate template for all stages\n-$(foreach host,$(CFG_HOST), \\\n- $(eval $(call DEF_RUSTLLVM_TARGETS,$(host))))"}, {"sha": "8a2bf2ebbde649817af12b2eb753fa2559939a3a", "filename": "mk/stage0.mk", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fstage0.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Fstage0.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fstage0.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,49 +0,0 @@\n-# Extract the snapshot host compiler\n-\n-$(HBIN0_H_$(CFG_BUILD))/:\n-\tmkdir -p $@\n-\n-# On windows these two are the same, so cause a redifinition warning\n-ifneq ($(HBIN0_H_$(CFG_BUILD)),$(HLIB0_H_$(CFG_BUILD)))\n-$(HLIB0_H_$(CFG_BUILD))/:\n-\tmkdir -p $@\n-endif\n-\n-$(SNAPSHOT_RUSTC_POST_CLEANUP): \\\n-\t\t$(S)src/stage0.txt \\\n-\t\t$(S)src/etc/local_stage0.sh \\\n-\t\t$(S)src/etc/get-stage0.py $(MKFILE_DEPS) \\\n-\t\t| $(HBIN0_H_$(CFG_BUILD))/\n-\t@$(call E, fetch: $@)\n-ifdef CFG_ENABLE_LOCAL_RUST\n-\t$(Q)$(S)src/etc/local_stage0.sh $(CFG_BUILD) $(CFG_LOCAL_RUST_ROOT) rustlib\n-else\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/get-stage0.py $(CFG_BUILD)\n-endif\n-\t$(Q)if [ -e \"$@\" ]; then touch \"$@\"; else echo \"ERROR: snapshot $@ not found\"; exit 1; fi\n-\n-# For other targets, let the host build the target:\n-\n-define BOOTSTRAP_STAGE0\n-  # $(1) target to bootstrap\n-  # $(2) stage to bootstrap from\n-  # $(3) target to bootstrap from\n-\n-$(HBIN0_H_$(1))/:\n-\tmkdir -p $@\n-\n-$(HLIB0_H_$(1))/:\n-\tmkdir -p $@\n-\n-$$(HBIN0_H_$(1))/rustc$$(X_$(1)): \\\n-\t\t$$(TBIN$(2)_T_$(1)_H_$(3))/rustc$$(X_$(1)) \\\n-\t\t| $(HBIN0_H_$(1))/\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-endef\n-\n-# Use stage1 to build other architectures: then you don't have to wait\n-# for stage2, but you get the latest updates to the compiler source.\n-$(foreach t,$(NON_BUILD_HOST), \\\n- $(eval $(call BOOTSTRAP_STAGE0,$(t),1,$(CFG_BUILD))))"}, {"sha": "1b139909ab458587e6398629275c2245183fca77", "filename": "mk/target.mk", "status": "removed", "additions": 0, "deletions": 209, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,209 +0,0 @@\n-# Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-# This is the compile-time target-triple for the compiler. For the compiler at\n-# runtime, this should be considered the host-triple. More explanation for why\n-# this exists can be found on issue #2400\n-export CFG_COMPILER_HOST_TRIPLE\n-\n-# Used as defaults for the runtime ar and cc tools\n-export CFG_DEFAULT_LINKER\n-export CFG_DEFAULT_AR\n-\n-# Macro that generates the full list of dependencies for a crate at a particular\n-# stage/target/host tuple.\n-#\n-# $(1) - stage\n-# $(2) - target\n-# $(3) - host\n-# $(4) crate\n-define RUST_CRATE_FULLDEPS\n-CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4) := \\\n-\t\t$$(CRATEFILE_$(4)) \\\n-\t\t$$(RSINPUTS_$(4)) \\\n-\t\t$$(foreach dep,$$(RUST_DEPS_$(4)_T_$(2)), \\\n-\t\t  $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep)) \\\n-\t\t$$(foreach dep,$$(NATIVE_DEPS_$(4)), \\\n-\t\t  $$(RT_OUTPUT_DIR_$(2))/$$(call CFG_STATIC_LIB_NAME_$(2),$$(dep))) \\\n-\t\t$$(foreach dep,$$(NATIVE_DEPS_$(4)_T_$(2)), \\\n-\t\t  $$(RT_OUTPUT_DIR_$(2))/$$(dep))\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(foreach crate,$(CRATES), \\\n-    $(eval $(call RUST_CRATE_FULLDEPS,$(stage),$(target),$(host),$(crate)))))))\n-\n-# RUST_TARGET_STAGE_N template: This defines how target artifacts are built\n-# for all stage/target architecture combinations. This is one giant rule which\n-# works as follows:\n-#\n-#   1. The immediate dependencies are the rust source files\n-#   2. Each rust crate dependency is listed (based on their stamp files),\n-#      as well as all native dependencies (listed in RT_OUTPUT_DIR)\n-#   3. The stage (n-1) compiler is required through the TSREQ dependency\n-#   4. When actually executing the rule, the first thing we do is to clean out\n-#      old libs and rlibs via the REMOVE_ALL_OLD_GLOB_MATCHES macro\n-#   5. Finally, we get around to building the actual crate. It's just one\n-#      \"small\" invocation of the previous stage rustc. We use -L to\n-#      RT_OUTPUT_DIR so all the native dependencies are picked up.\n-#      Additionally, we pass in the llvm dir so rustc can link against it.\n-#   6. Some cleanup is done (listing what was just built) if verbose is turned\n-#      on.\n-#\n-# $(1) is the stage\n-# $(2) is the target triple\n-# $(3) is the host triple\n-# $(4) is the crate name\n-define RUST_TARGET_STAGE_N\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): CFG_COMPILER_HOST_TRIPLE = $(2)\n-$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$(4): \\\n-\t\t$$(CRATEFILE_$(4)) \\\n-\t\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4)) \\\n-\t\t$$(LLVM_CONFIG_$(2)) \\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n-\t@$$(call E, rustc: $$(@D)/lib$(4))\n-\t@touch $$@.start_time\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES, \\\n-\t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(2),$(4)))\n-\t$$(call REMOVE_ALL_OLD_GLOB_MATCHES, \\\n-\t    $$(dir $$@)$$(call CFG_RLIB_GLOB,$(4)))\n-\t$(Q)CFG_LLVM_LINKAGE_FILE=$$(LLVM_LINKAGE_PATH_$(2)) \\\n-\t    $$(subst @,,$$(STAGE$(1)_T_$(2)_H_$(3))) \\\n-\t\t$$(RUST_LIB_FLAGS_ST$(1)) \\\n-\t\t-L \"$$(RT_OUTPUT_DIR_$(2))\" \\\n-\t\t$$(LLVM_LIBDIR_RUSTFLAGS_$(2)) \\\n-\t\t$$(LLVM_STDCPP_RUSTFLAGS_$(2)) \\\n-\t\t$$(RUSTFLAGS_$(4)) \\\n-\t\t$$(RUSTFLAGS$(1)_$(4)) \\\n-\t\t$$(RUSTFLAGS$(1)_$(4)_T_$(2)) \\\n-\t\t--out-dir $$(@D) \\\n-\t\t-C extra-filename=-$$(CFG_FILENAME_EXTRA) \\\n-\t\t-C metadata=$$(CFG_FILENAME_EXTRA) \\\n-\t\t$$<\n-\t@touch -r $$@.start_time $$@ && rm $$@.start_time\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES, \\\n-\t    $$(dir $$@)$$(call CFG_LIB_GLOB_$(2),$(4)))\n-\t$$(call LIST_ALL_OLD_GLOB_MATCHES, \\\n-\t    $$(dir $$@)$$(call CFG_RLIB_GLOB,$(4)))\n-\n-endef\n-\n-# Macro for building any tool as part of the rust compilation process. Each\n-# tool is defined in crates.mk with a list of library dependencies as well as\n-# the source file for the tool. Building each tool will also be passed '--cfg\n-# <tool>' for usage in driver.rs\n-#\n-# This build rule is similar to the one found above, just tweaked for\n-# locations and things.\n-#\n-# $(1) - stage\n-# $(2) - target triple\n-# $(3) - host triple\n-# $(4) - name of the tool being built\n-define TARGET_TOOL\n-\n-$$(TBIN$(1)_T_$(2)_H_$(3))/$(4)$$(X_$(2)): \\\n-\t\t$$(TOOL_SOURCE_$(4)) \\\n-\t\t$$(TOOL_INPUTS_$(4)) \\\n-\t\t$$(foreach dep,$$(TOOL_DEPS_$(4)), \\\n-\t\t    $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(dep)) \\\n-\t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t| $$(TBIN$(1)_T_$(2)_H_$(3))/\n-\t@$$(call E, rustc: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) \\\n-\t\t$$(LLVM_LIBDIR_RUSTFLAGS_$(2)) \\\n-\t\t-o $$@ $$< --cfg $(4)\n-\n-endef\n-\n-# Macro for building runtime startup/shutdown object files;\n-# these are Rust's equivalent of crti.o, crtn.o\n-#\n-# $(1) - stage\n-# $(2) - target triple\n-# $(3) - host triple\n-# $(4) - object basename\n-define TARGET_RUSTRT_STARTUP_OBJ\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/$(4).o: \\\n-\t\t$(S)src/rtstartup/$(4).rs \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.core \\\n-\t\t$$(HSREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t| $$(TBIN$(1)_T_$(2)_H_$(3))/\n-\t@$$(call E, rustc: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) --emit=obj -o $$@ $$<\n-\n-ifeq ($$(CFG_RUSTRT_HAS_STARTUP_OBJS_$(2)), 1)\n-# Add dependencies on Rust startup objects to all crates that depend on core.\n-# This ensures that they are built after core (since they depend on it),\n-# but before everything else (since they are needed for linking dylib crates).\n-$$(foreach crate, $$(TARGET_CRATES_$(2)), \\\n-\t$$(if $$(findstring core,$$(DEPS_$$(crate))), \\\n-\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate))) : $$(TLIB$(1)_T_$(2)_H_$(3))/$(4).o\n-endif\n-\n-endef\n-\n-# Every recipe in RUST_TARGET_STAGE_N outputs to $$(TLIB$(1)_T_$(2)_H_$(3),\n-# a directory that can be cleaned out during the middle of a run of\n-# the get-snapshot.py script.  Therefore, every recipe needs to have\n-# an order-only dependency either on $(SNAPSHOT_RUSTC_POST_CLEANUP) or\n-# on $$(TSREQ$(1)_T_$(2)_H_$(3)), to ensure that no products will be\n-# put into the target area until after the get-snapshot.py script has\n-# had its chance to clean it out; otherwise the other products will be\n-# inadvertently included in the clean out.\n-SNAPSHOT_RUSTC_POST_CLEANUP=$(HBIN0_H_$(CFG_BUILD))/rustc$(X_$(CFG_BUILD))\n-\n-define TARGET_HOST_RULES\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/: $$(SNAPSHOT_RUSTC_POST_CLEANUP)\n-\tmkdir -p $$@\n-\n-$$(TBIN$(1)_T_$(2)_H_$(3))/: $$(SNAPSHOT_RUSTC_POST_CLEANUP)\n-\tmkdir -p $$@\n-\n-$$(TLIB$(1)_T_$(2)_H_$(3))/%: $$(RT_OUTPUT_DIR_$(2))/% \\\n-\t    $$(SNAPSHOT_RUSTC_POST_CLEANUP) \\\n-\t    | $$(TLIB$(1)_T_$(2)_H_$(3))/\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-endef\n-\n-$(foreach source,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call TARGET_HOST_RULES,0,$(target),$(source))) \\\n-  $(eval $(call TARGET_HOST_RULES,1,$(target),$(source))) \\\n-  $(eval $(call TARGET_HOST_RULES,2,$(target),$(source))) \\\n-  $(eval $(call TARGET_HOST_RULES,3,$(target),$(source)))))\n-\n-# In principle, each host can build each target for both libs and tools\n-$(foreach crate,$(CRATES), \\\n- $(foreach source,$(CFG_HOST), \\\n-  $(foreach target,$(CFG_TARGET), \\\n-   $(eval $(call RUST_TARGET_STAGE_N,0,$(target),$(source),$(crate))) \\\n-   $(eval $(call RUST_TARGET_STAGE_N,1,$(target),$(source),$(crate))) \\\n-   $(eval $(call RUST_TARGET_STAGE_N,2,$(target),$(source),$(crate))) \\\n-   $(eval $(call RUST_TARGET_STAGE_N,3,$(target),$(source),$(crate))))))\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(foreach tool,$(TOOLS), \\\n-    $(eval $(call TARGET_TOOL,$(stage),$(target),$(host),$(tool)))))))\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(foreach obj,rsbegin rsend, \\\n-    $(eval $(call TARGET_RUSTRT_STARTUP_OBJ,$(stage),$(target),$(host),$(obj)))))))"}, {"sha": "3317688f042a2049ed3c19cb6379e4f8234c4831", "filename": "mk/tests.mk", "status": "removed", "additions": 0, "deletions": 1057, "changes": 1057, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,1057 +0,0 @@\n-# Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-\n-######################################################################\n-# Test variables\n-######################################################################\n-\n-# The names of crates that must be tested\n-\n-# libcore/libstd_unicode tests are in a separate crate\n-DEPS_coretest :=\n-$(eval $(call RUST_CRATE,coretest))\n-\n-DEPS_collectionstest :=\n-$(eval $(call RUST_CRATE,collectionstest))\n-\n-TEST_TARGET_CRATES = $(filter-out core std_unicode alloc_system libc \\\n-\t\t     \t\t  alloc_jemalloc panic_unwind \\\n-\t\t\t\t  panic_abort,$(TARGET_CRATES)) \\\n-\t\t\tcollectionstest coretest\n-TEST_DOC_CRATES = $(DOC_CRATES) arena flate fmt_macros getopts graphviz \\\n-                log rand serialize syntax term test\n-TEST_HOST_CRATES = $(filter-out rustc_typeck rustc_borrowck rustc_resolve \\\n-\t\t   \t\trustc_trans rustc_lint,\\\n-                     $(HOST_CRATES))\n-TEST_CRATES = $(TEST_TARGET_CRATES) $(TEST_HOST_CRATES)\n-\n-######################################################################\n-# Environment configuration\n-######################################################################\n-\n-# The arguments to all test runners\n-ifdef TESTNAME\n-  TESTARGS += $(TESTNAME)\n-endif\n-\n-ifdef CHECK_IGNORED\n-  TESTARGS += --ignored\n-endif\n-\n-# Arguments to the cfail/rfail/rpass tests\n-ifdef CFG_VALGRIND\n-  CTEST_RUNTOOL = --runtool \"$(CFG_VALGRIND)\"\n-endif\n-\n-CTEST_TESTARGS := $(TESTARGS)\n-\n-# --bench is only relevant for crate tests, not for the compile tests\n-ifdef PLEASE_BENCH\n-  TESTARGS += --bench\n-endif\n-\n-ifdef VERBOSE\n-  CTEST_TESTARGS += --verbose\n-endif\n-\n-# Setting locale ensures that gdb's output remains consistent.\n-# This prevents tests from failing with some locales (fixes #17423).\n-export LC_ALL=C\n-\n-TEST_LOG_FILE=tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).log\n-TEST_OK_FILE=tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).ok\n-\n-define DEF_TARGET_COMMANDS\n-\n-ifdef CFG_UNIXY_$(1)\n-  CFG_RUN_TEST_$(1)=$$(TARGET_RPATH_VAR$$(2)_T_$$(3)_H_$$(4)) \\\n-\t  $$(call CFG_RUN_$(1),,$$(CFG_VALGRIND) $$(1))\n-endif\n-\n-ifdef CFG_WINDOWSY_$(1)\n-  CFG_TESTLIB_$(1)=$$(CFG_BUILD_DIR)$$(2)/$$(strip \\\n-   $$(if $$(findstring stage0,$$(1)), \\\n-       stage0/$$(CFG_LIBDIR_RELATIVE), \\\n-      $$(if $$(findstring stage1,$$(1)), \\\n-           stage1/$$(CFG_LIBDIR_RELATIVE), \\\n-          $$(if $$(findstring stage2,$$(1)), \\\n-               stage2/$$(CFG_LIBDIR_RELATIVE), \\\n-               $$(if $$(findstring stage3,$$(1)), \\\n-                    stage3/$$(CFG_LIBDIR_RELATIVE), \\\n-               )))))/rustlib/$$(CFG_BUILD)/lib\n-  CFG_RUN_TEST_$(1)=$$(TARGET_RPATH_VAR$$(2)_T_$$(3)_H_$$(4)) \\\n-\t  $$(call CFG_RUN_$(1),$$(call CFG_TESTLIB_$(1),$$(1),$$(4)),$$(1))\n-endif\n-\n-# Run the compiletest runner itself under valgrind\n-ifdef CTEST_VALGRIND\n-CFG_RUN_CTEST_$(1)=$$(RPATH_VAR$$(1)_T_$$(3)_H_$$(3)) \\\n-      $$(call CFG_RUN_TEST_$$(CFG_BUILD),$$(3),$$(4))\n-else\n-CFG_RUN_CTEST_$(1)=$$(RPATH_VAR$$(1)_T_$$(3)_H_$$(3)) \\\n-      $$(call CFG_RUN_$$(CFG_BUILD),$$(TLIB$$(1)_T_$$(3)_H_$$(3)),$$(2))\n-endif\n-\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(eval $(call DEF_TARGET_COMMANDS,$(target))))\n-\n-# Target platform specific variables for android\n-define DEF_ADB_DEVICE_STATUS\n-CFG_ADB_DEVICE_STATUS=$(1)\n-endef\n-\n-$(foreach target,$(CFG_TARGET), \\\n-  $(if $(findstring android, $(target)), \\\n-    $(if $(findstring adb,$(CFG_ADB)), \\\n-      $(if $(findstring device,$(shell $(CFG_ADB) devices 2>/dev/null | grep -E '^[:_A-Za-z0-9-]+[[:blank:]]+device')), \\\n-        $(info check: android device attached) \\\n-        $(eval $(call DEF_ADB_DEVICE_STATUS, true)), \\\n-        $(info check: android device not attached) \\\n-        $(eval $(call DEF_ADB_DEVICE_STATUS, false)) \\\n-      ), \\\n-      $(info check: adb not found) \\\n-      $(eval $(call DEF_ADB_DEVICE_STATUS, false)) \\\n-    ), \\\n-  ) \\\n-)\n-\n-ifeq ($(CFG_ADB_DEVICE_STATUS),true)\n-CFG_ADB_TEST_DIR=/data/tmp\n-\n-$(info check: android device test dir $(CFG_ADB_TEST_DIR) ready \\\n- $(shell $(CFG_ADB) remount 1>/dev/null) \\\n- $(shell $(CFG_ADB) shell rm -r $(CFG_ADB_TEST_DIR) >/dev/null) \\\n- $(shell $(CFG_ADB) shell mkdir $(CFG_ADB_TEST_DIR)) \\\n- $(shell $(CFG_ADB) push $(S)src/etc/adb_run_wrapper.sh $(CFG_ADB_TEST_DIR) 1>/dev/null) \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(if $(findstring android, $(target)), \\\n-   $(shell $(CFG_ADB) shell mkdir $(CFG_ADB_TEST_DIR)/$(target)) \\\n-   $(foreach crate,$(TARGET_CRATES_$(target)), \\\n-    $(shell $(CFG_ADB) push $(TLIB2_T_$(target)_H_$(CFG_BUILD))/$(call CFG_LIB_GLOB_$(target),$(crate)) \\\n-                    $(CFG_ADB_TEST_DIR)/$(target))), \\\n- )))\n-else\n-CFG_ADB_TEST_DIR=\n-endif\n-\n-# $(1) - name of doc test\n-# $(2) - file of the test\n-define DOCTEST\n-DOC_NAMES := $$(DOC_NAMES) $(1)\n-DOCFILE_$(1) := $(2)\n-endef\n-\n-$(foreach doc,$(DOCS), \\\n-  $(eval $(call DOCTEST,md-$(doc),$(S)src/doc/$(doc).md)))\n-$(foreach file,$(wildcard $(S)src/doc/book/*.md), \\\n-  $(eval $(call DOCTEST,$(file:$(S)src/doc/book/%.md=book-%),$(file))))\n-$(foreach file,$(wildcard $(S)src/doc/nomicon/*.md), \\\n-  $(eval $(call DOCTEST,$(file:$(S)src/doc/nomicon/%.md=nomicon-%),$(file))))\n-######################################################################\n-# Main test targets\n-######################################################################\n-\n-# The main testing target. Tests lots of stuff.\n-check: check-sanitycheck cleantmptestlogs cleantestlibs all check-stage2 tidy\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n-\n-# As above but don't bother running tidy.\n-check-notidy: check-sanitycheck cleantmptestlogs cleantestlibs all check-stage2\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n-\n-# A slightly smaller set of tests for smoke testing.\n-check-lite: check-sanitycheck cleantestlibs cleantmptestlogs \\\n-\t$(foreach crate,$(TEST_TARGET_CRATES),check-stage2-$(crate)) \\\n-\tcheck-stage2-rpass check-stage2-rpass-valgrind \\\n-\tcheck-stage2-rfail check-stage2-cfail check-stage2-pfail check-stage2-rmake\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n-\n-# Only check the 'reference' tests: rpass/cfail/rfail/rmake.\n-check-ref: check-sanitycheck cleantestlibs cleantmptestlogs check-stage2-rpass \\\n-\tcheck-stage2-rpass-valgrind check-stage2-rfail check-stage2-cfail check-stage2-pfail \\\n-\tcheck-stage2-rmake\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n-\n-# Only check the docs.\n-check-docs: check-sanitycheck cleantestlibs cleantmptestlogs check-stage2-docs\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n-\n-# Some less critical tests that are not prone to breakage.\n-# Not run as part of the normal test suite, but tested by bors on checkin.\n-check-secondary: check-build-compiletest check-build-lexer-verifier check-lexer check-pretty\n-\n-.PHONY: check-sanitycheck\n-\n-check-sanitycheck:\n-\t$(Q)$(CFG_PYTHON) $(S)src/etc/check-sanitycheck.py\n-\n-# check + check-secondary.\n-#\n-# Issue #17883: build check-secondary first so hidden dependencies in\n-# e.g. building compiletest are exercised (resolve those by adding\n-# deps to rules that need them; not by putting `check` first here).\n-check-all: check-secondary check\n-\n-# Pretty-printing tests.\n-check-pretty: check-stage2-T-$(CFG_BUILD)-H-$(CFG_BUILD)-pretty-exec\n-\n-define DEF_CHECK_BUILD_COMPILETEST_FOR_STAGE\n-check-stage$(1)-build-compiletest: \t$$(HBIN$(1)_H_$(CFG_BUILD))/compiletest$$(X_$(CFG_BUILD))\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(eval $(call DEF_CHECK_BUILD_COMPILETEST_FOR_STAGE,$(stage))))\n-\n-check-build-compiletest: \\\n-\tcheck-stage1-build-compiletest \\\n-\tcheck-stage2-build-compiletest\n-\n-.PHONY: cleantmptestlogs cleantestlibs\n-\n-cleantmptestlogs:\n-\t$(Q)rm -f tmp/*.log\n-\n-cleantestlibs:\n-\t$(Q)find $(CFG_BUILD)/test \\\n-         -name '*.[odasS]' -o \\\n-         -name '*.so' -o \\\n-         -name '*.dylib' -o \\\n-         -name '*.dll' -o \\\n-         -name '*.def' -o \\\n-         -name '*.bc' -o \\\n-         -name '*.dSYM' -o \\\n-         -name '*.libaux' -o \\\n-         -name '*.out' -o \\\n-         -name '*.err' -o \\\n-\t -name '*.debugger.script' \\\n-         | xargs rm -rf\n-\n-\n-######################################################################\n-# Tidy\n-######################################################################\n-\n-.PHONY: tidy\n-tidy: $(HBIN0_H_$(CFG_BUILD))/tidy$(X_$(CFG_BUILD)) \\\n-\t\t$(SNAPSHOT_RUSTC_POST_CLEANUP)\n-\t$(TARGET_RPATH_VAR0_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $< $(S)src\n-\n-$(HBIN0_H_$(CFG_BUILD))/tidy$(X_$(CFG_BUILD)): \\\n-\t\t$(TSREQ0_T_$(CFG_BUILD)_H_$(CFG_BUILD)) \\\n-\t\t$(TLIB0_T_$(CFG_BUILD)_H_$(CFG_BUILD))/stamp.std \\\n-\t\t$(call rwildcard,$(S)src/tools/tidy/src,*.rs) \\\n-\t\t$(SNAPSHOT_RUSTC_POST_CLEANUP) | \\\n-\t\t$(TLIB0_T_$(CFG_BUILD)_H_$(CFG_BUILD))\n-\t$(STAGE0_T_$(CFG_BUILD)_H_$(CFG_BUILD)) $(S)src/tools/tidy/src/main.rs \\\n-\t\t--out-dir $(@D) --crate-name tidy\n-\n-######################################################################\n-# Sets of tests\n-######################################################################\n-\n-define DEF_TEST_SETS\n-\n-check-stage$(1)-T-$(2)-H-$(3)-exec: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rfail-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-cfail-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pfail-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-valgrind-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rmake-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rustdocck-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-crates-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-doc-crates-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-debuginfo-gdb-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-debuginfo-lldb-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-incremental-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-ui-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-doc-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-doc-error-index-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-mir-opt-exec\n-\n-ifndef CFG_DISABLE_CODEGEN_TESTS\n-check-stage$(1)-T-$(2)-H-$(3)-exec: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-codegen-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-codegen-units-exec\n-endif\n-\n-# Only test the compiler-dependent crates when the target is\n-# able to build a compiler (when the target triple is in the set of host triples)\n-ifneq ($$(findstring $(2),$$(CFG_HOST)),)\n-\n-check-stage$(1)-T-$(2)-H-$(3)-exec: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rpass-full-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-rfail-full-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-cfail-full-exec\n-\n-check-stage$(1)-T-$(2)-H-$(3)-pretty-exec: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-full-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rfail-full-exec\n-\n-check-stage$(1)-T-$(2)-H-$(3)-crates-exec: \\\n-\t$$(foreach crate,$$(TEST_CRATES), \\\n-           check-stage$(1)-T-$(2)-H-$(3)-$$(crate)-exec)\n-\n-else\n-\n-check-stage$(1)-T-$(2)-H-$(3)-crates-exec: \\\n-\t$$(foreach crate,$$(TEST_TARGET_CRATES), \\\n-           check-stage$(1)-T-$(2)-H-$(3)-$$(crate)-exec)\n-\n-endif\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc-crates-exec: \\\n-        $$(foreach crate,$$(TEST_DOC_CRATES), \\\n-           check-stage$(1)-T-$(2)-H-$(3)-doc-crate-$$(crate)-exec)\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc-exec: \\\n-        $$(foreach docname,$$(DOC_NAMES), \\\n-           check-stage$(1)-T-$(2)-H-$(3)-doc-$$(docname)-exec) \\\n-\n-check-stage$(1)-T-$(2)-H-$(3)-pretty-exec: \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-exec \\\n-    check-stage$(1)-T-$(2)-H-$(3)-pretty-rpass-valgrind-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-rfail-exec \\\n-\tcheck-stage$(1)-T-$(2)-H-$(3)-pretty-pretty-exec\n-\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-    $(eval $(call DEF_TEST_SETS,$(stage),$(target),$(host))))))\n-\n-\n-######################################################################\n-# Crate testing\n-######################################################################\n-\n-define TEST_RUNNER\n-\n-# If NO_REBUILD is set then break the dependencies on everything but\n-# the source files so we can test crates without rebuilding any of the\n-# parent crates.\n-ifeq ($(NO_REBUILD),)\n-TESTDEP_$(1)_$(2)_$(3)_$(4) = $$(SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\t\t    $$(foreach crate,$$(TARGET_CRATES_$(2)), \\\n-\t\t\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate)) \\\n-\t\t\t\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4))\n-\n-else\n-TESTDEP_$(1)_$(2)_$(3)_$(4) = $$(RSINPUTS_$(4))\n-endif\n-\n-$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2)): CFG_COMPILER_HOST_TRIPLE = $(2)\n-$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2)): \\\n-\t\t$$(CRATEFILE_$(4)) \\\n-\t\t$$(TESTDEP_$(1)_$(2)_$(3)_$(4))\n-\t@$$(call E, rustc: $$@)\n-\t$(Q)CFG_LLVM_LINKAGE_FILE=$$(LLVM_LINKAGE_PATH_$(2)) \\\n-\t    $$(subst @,,$$(STAGE$(1)_T_$(2)_H_$(3))) -o $$@ $$< --test \\\n-\t\t-Cmetadata=\"test-crate\" -L \"$$(RT_OUTPUT_DIR_$(2))\" \\\n-\t\t$$(LLVM_LIBDIR_RUSTFLAGS_$(2)) \\\n-\t\t$$(RUSTFLAGS_$(4))\n-\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(eval $(foreach target,$(CFG_TARGET), \\\n-  $(eval $(foreach stage,$(STAGES), \\\n-   $(eval $(foreach crate,$(TEST_CRATES), \\\n-    $(eval $(call TEST_RUNNER,$(stage),$(target),$(host),$(crate))))))))))\n-\n-define DEF_TEST_CRATE_RULES\n-check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n-\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t\t$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2))\n-\t@$$(call E, run: $$<)\n-\t$$(Q)touch $$@.start_time\n-\t$$(Q)$$(call CFG_RUN_TEST_$(2),$$<,$(1),$(2),$(3)) $$(TESTARGS) \\\n-\t    --logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n-\t    $$(call CRATE_TEST_EXTRA_ARGS,$(1),$(2),$(3),$(4)) \\\n-\t    && touch -r $$@.start_time $$@ && rm $$@.start_time\n-endef\n-\n-define DEF_TEST_CRATE_RULES_android\n-check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n-\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t\t$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2))\n-\t@$$(call E, run: $$< via adb)\n-\t$$(Q)touch $$@.start_time\n-\t$$(Q)$(CFG_ADB) push $$< $(CFG_ADB_TEST_DIR)\n-\t$$(Q)$(CFG_ADB) shell '(cd $(CFG_ADB_TEST_DIR); LD_LIBRARY_PATH=./$(2) \\\n-\t\t./$$(notdir $$<) \\\n-\t\t--logfile $(CFG_ADB_TEST_DIR)/check-stage$(1)-T-$(2)-H-$(3)-$(4).log \\\n-\t\t$$(call CRATE_TEST_EXTRA_ARGS,$(1),$(2),$(3),$(4)) $(TESTARGS))' \\\n-\t\t> tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp\n-\t$$(Q)cat tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp\n-\t$$(Q)touch tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).log\n-\t$$(Q)$(CFG_ADB) pull $(CFG_ADB_TEST_DIR)/check-stage$(1)-T-$(2)-H-$(3)-$(4).log tmp/\n-\t$$(Q)$(CFG_ADB) shell rm $(CFG_ADB_TEST_DIR)/check-stage$(1)-T-$(2)-H-$(3)-$(4).log\n-\t@if grep -q \"result: ok\" tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp; \\\n-\tthen \\\n-\t\trm tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp; \\\n-\t\ttouch -r $$@.start_time $$@ && rm $$@.start_time; \\\n-\telse \\\n-\t\trm tmp/check-stage$(1)-T-$(2)-H-$(3)-$(4).tmp; \\\n-\t\texit 101; \\\n-\tfi\n-endef\n-\n-define DEF_TEST_CRATE_RULES_null\n-check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n-\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t\t$(3)/stage$(1)/test/$(4)test-$(2)$$(X_$(2))\n-\t@$$(call E, failing: no device for $$< )\n-\tfalse\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(foreach crate, $(TEST_CRATES), \\\n-    $(if $(findstring $(target),$(CFG_BUILD)), \\\n-     $(eval $(call DEF_TEST_CRATE_RULES,$(stage),$(target),$(host),$(crate))), \\\n-     $(if $(findstring android, $(target)), \\\n-      $(if $(findstring $(CFG_ADB_DEVICE_STATUS),\"true\"), \\\n-       $(eval $(call DEF_TEST_CRATE_RULES_android,$(stage),$(target),$(host),$(crate))), \\\n-       $(eval $(call DEF_TEST_CRATE_RULES_null,$(stage),$(target),$(host),$(crate))) \\\n-      ), \\\n-      $(eval $(call DEF_TEST_CRATE_RULES,$(stage),$(target),$(host),$(crate))) \\\n-     ))))))\n-\n-######################################################################\n-# Rules for the compiletest tests (rpass, rfail, etc.)\n-######################################################################\n-\n-RPASS_RS := $(call rwildcard,$(S)src/test/run-pass/,*.rs)\n-RPASS_VALGRIND_RS := $(call rwildcard,$(S)src/test/run-pass-valgrind/,*.rs)\n-RPASS_FULL_RS := $(call rwildcard,$(S)src/test/run-pass-fulldeps/,*.rs)\n-RFAIL_FULL_RS := $(call rwildcard,$(S)src/test/run-fail-fulldeps/,*.rs)\n-CFAIL_FULL_RS := $(call rwildcard,$(S)src/test/compile-fail-fulldeps/,*.rs)\n-RFAIL_RS := $(call rwildcard,$(S)src/test/run-fail/,*.rs)\n-RFAIL_RS := $(call rwildcard,$(S)src/test/run-fail/,*.rs)\n-CFAIL_RS := $(call rwildcard,$(S)src/test/compile-fail/,*.rs)\n-PFAIL_RS := $(call rwildcard,$(S)src/test/parse-fail/,*.rs)\n-PRETTY_RS := $(call rwildcard,$(S)src/test/pretty/,*.rs)\n-DEBUGINFO_GDB_RS := $(call rwildcard,$(S)src/test/debuginfo/,*.rs)\n-DEBUGINFO_LLDB_RS := $(call rwildcard,$(S)src/test/debuginfo/,*.rs)\n-CODEGEN_RS := $(call rwildcard,$(S)src/test/codegen/,*.rs)\n-CODEGEN_CC := $(call rwildcard,$(S)src/test/codegen/,*.cc)\n-CODEGEN_UNITS_RS := $(call rwildcard,$(S)src/test/codegen-units/,*.rs)\n-INCREMENTAL_RS := $(call rwildcard,$(S)src/test/incremental/,*.rs)\n-RMAKE_RS := $(wildcard $(S)src/test/run-make/*/Makefile)\n-UI_RS := $(call rwildcard,$(S)src/test/ui/,*.rs) \\\n-         $(call rwildcard,$(S)src/test/ui/,*.stdout) \\\n-         $(call rwildcard,$(S)src/test/ui/,*.stderr)\n-RUSTDOCCK_RS := $(call rwildcard,$(S)src/test/rustdoc/,*.rs)\n-MIR_OPT_RS := $(call rwildcard,$(S)src/test/mir-opt/,*.rs)\n-\n-RPASS_TESTS := $(RPASS_RS)\n-RPASS_VALGRIND_TESTS := $(RPASS_VALGRIND_RS)\n-RPASS_FULL_TESTS := $(RPASS_FULL_RS)\n-RFAIL_FULL_TESTS := $(RFAIL_FULL_RS)\n-CFAIL_FULL_TESTS := $(CFAIL_FULL_RS)\n-RFAIL_TESTS := $(RFAIL_RS)\n-CFAIL_TESTS := $(CFAIL_RS)\n-PFAIL_TESTS := $(PFAIL_RS)\n-PRETTY_TESTS := $(PRETTY_RS)\n-DEBUGINFO_GDB_TESTS := $(DEBUGINFO_GDB_RS)\n-DEBUGINFO_LLDB_TESTS := $(DEBUGINFO_LLDB_RS)\n-CODEGEN_TESTS := $(CODEGEN_RS) $(CODEGEN_CC)\n-CODEGEN_UNITS_TESTS := $(CODEGEN_UNITS_RS)\n-INCREMENTAL_TESTS := $(INCREMENTAL_RS)\n-RMAKE_TESTS := $(RMAKE_RS)\n-UI_TESTS := $(UI_RS)\n-MIR_OPT_TESTS := $(MIR_OPT_RS)\n-RUSTDOCCK_TESTS := $(RUSTDOCCK_RS)\n-\n-CTEST_SRC_BASE_rpass = run-pass\n-CTEST_BUILD_BASE_rpass = run-pass\n-CTEST_MODE_rpass = run-pass\n-CTEST_RUNTOOL_rpass = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_rpass-valgrind = run-pass-valgrind\n-CTEST_BUILD_BASE_rpass-valgrind = run-pass-valgrind\n-CTEST_MODE_rpass-valgrind = run-pass-valgrind\n-CTEST_RUNTOOL_rpass-valgrind = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_rpass-full = run-pass-fulldeps\n-CTEST_BUILD_BASE_rpass-full = run-pass-fulldeps\n-CTEST_MODE_rpass-full = run-pass\n-CTEST_RUNTOOL_rpass-full = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_rfail-full = run-fail-fulldeps\n-CTEST_BUILD_BASE_rfail-full = run-fail-fulldeps\n-CTEST_MODE_rfail-full = run-fail\n-CTEST_RUNTOOL_rfail-full = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_cfail-full = compile-fail-fulldeps\n-CTEST_BUILD_BASE_cfail-full = compile-fail-fulldeps\n-CTEST_MODE_cfail-full = compile-fail\n-CTEST_RUNTOOL_cfail-full = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_rfail = run-fail\n-CTEST_BUILD_BASE_rfail = run-fail\n-CTEST_MODE_rfail = run-fail\n-CTEST_RUNTOOL_rfail = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_cfail = compile-fail\n-CTEST_BUILD_BASE_cfail = compile-fail\n-CTEST_MODE_cfail = compile-fail\n-CTEST_RUNTOOL_cfail = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_pfail = parse-fail\n-CTEST_BUILD_BASE_pfail = parse-fail\n-CTEST_MODE_pfail = parse-fail\n-CTEST_RUNTOOL_pfail = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_debuginfo-gdb = debuginfo\n-CTEST_BUILD_BASE_debuginfo-gdb = debuginfo-gdb\n-CTEST_MODE_debuginfo-gdb = debuginfo-gdb\n-CTEST_RUNTOOL_debuginfo-gdb = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_debuginfo-lldb = debuginfo\n-CTEST_BUILD_BASE_debuginfo-lldb = debuginfo-lldb\n-CTEST_MODE_debuginfo-lldb = debuginfo-lldb\n-CTEST_RUNTOOL_debuginfo-lldb = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_codegen = codegen\n-CTEST_BUILD_BASE_codegen = codegen\n-CTEST_MODE_codegen = codegen\n-CTEST_RUNTOOL_codegen = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_codegen-units = codegen-units\n-CTEST_BUILD_BASE_codegen-units = codegen-units\n-CTEST_MODE_codegen-units = codegen-units\n-CTEST_RUNTOOL_codegen-units = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_incremental = incremental\n-CTEST_BUILD_BASE_incremental = incremental\n-CTEST_MODE_incremental = incremental\n-CTEST_RUNTOOL_incremental = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_rmake = run-make\n-CTEST_BUILD_BASE_rmake = run-make\n-CTEST_MODE_rmake = run-make\n-CTEST_RUNTOOL_rmake = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_ui = ui\n-CTEST_BUILD_BASE_ui = ui\n-CTEST_MODE_ui = ui\n-CTEST_RUNTOOL_ui = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_mir-opt = mir-opt\n-CTEST_BUILD_BASE_mir-opt = mir-opt\n-CTEST_MODE_mir-opt = mir-opt\n-CTEST_RUNTOOL_mir-opt = $(CTEST_RUNTOOL)\n-\n-CTEST_SRC_BASE_rustdocck = rustdoc\n-CTEST_BUILD_BASE_rustdocck = rustdoc\n-CTEST_MODE_rustdocck = rustdoc\n-CTEST_RUNTOOL_rustdocck = $(CTEST_RUNTOOL)\n-\n-# CTEST_DISABLE_$(TEST_GROUP), if set, will cause the test group to be\n-# disabled and the associated message to be printed as a warning\n-# during attempts to run those tests.\n-\n-ifeq ($(CFG_GDB),)\n-CTEST_DISABLE_debuginfo-gdb = \"no gdb found\"\n-endif\n-\n-ifeq ($(CFG_LLDB),)\n-CTEST_DISABLE_debuginfo-lldb = \"no lldb found\"\n-endif\n-\n-ifneq ($(CFG_OSTYPE),apple-darwin)\n-CTEST_DISABLE_debuginfo-lldb = \"lldb tests are only run on darwin\"\n-endif\n-\n-ifeq ($(CFG_OSTYPE),apple-darwin)\n-CTEST_DISABLE_debuginfo-gdb = \"gdb on darwin needs root\"\n-endif\n-\n-ifeq ($(findstring android, $(CFG_TARGET)), android)\n-CTEST_DISABLE_debuginfo-gdb =\n-CTEST_DISABLE_debuginfo-lldb = \"lldb tests are disabled on android\"\n-endif\n-\n-ifeq ($(findstring msvc,$(CFG_TARGET)),msvc)\n-CTEST_DISABLE_debuginfo-gdb = \"gdb tests are disabled on MSVC\"\n-endif\n-\n-# CTEST_DISABLE_NONSELFHOST_$(TEST_GROUP), if set, will cause that\n-# test group to be disabled *unless* the target is able to build a\n-# compiler (i.e. when the target triple is in the set of host\n-# triples).  The associated message will be printed as a warning\n-# during attempts to run those tests.\n-\n-define DEF_CTEST_VARS\n-\n-# All the per-stage build rules you might want to call from the\n-# command line.\n-#\n-# $(1) is the stage number\n-# $(2) is the target triple to test\n-# $(3) is the host triple to test\n-\n-# Prerequisites for compiletest tests\n-TEST_SREQ$(1)_T_$(2)_H_$(3) = \\\n-\t$$(HBIN$(1)_H_$(3))/compiletest$$(X_$(3)) \\\n-\t$$(SREQ$(1)_T_$(2)_H_$(3))\n-\n-# Rules for the cfail/rfail/rpass test runner\n-\n-# The tests select when to use debug configuration on their own;\n-# remove directive, if present, from CFG_RUSTC_FLAGS (issue #7898).\n-CTEST_RUSTC_FLAGS := $$(subst -C debug-assertions,,$$(subst -C debug-assertions=on,,$$(CFG_RUSTC_FLAGS)))\n-\n-# The tests cannot be optimized while the rest of the compiler is optimized, so\n-# filter out the optimization (if any) from rustc and then figure out if we need\n-# to be optimized\n-CTEST_RUSTC_FLAGS := $$(subst -O,,$$(CTEST_RUSTC_FLAGS))\n-ifndef CFG_DISABLE_OPTIMIZE_TESTS\n-CTEST_RUSTC_FLAGS += -O\n-endif\n-\n-# Analogously to the above, whether to pass `-g` when compiling tests\n-# is a separate choice from whether to pass `-g` when building the\n-# compiler and standard library themselves.\n-CTEST_RUSTC_FLAGS := $$(subst -g,,$$(CTEST_RUSTC_FLAGS))\n-CTEST_RUSTC_FLAGS := $$(subst -Cdebuginfo=1,,$$(CTEST_RUSTC_FLAGS))\n-ifdef CFG_ENABLE_DEBUGINFO_TESTS\n-CTEST_RUSTC_FLAGS += -g\n-endif\n-\n-CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) = \\\n-\t\t--compile-lib-path $$(HLIB$(1)_H_$(3)) \\\n-        --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3)) \\\n-        --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X_$(3)) \\\n-        --rustdoc-path $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n-        --llvm-filecheck $(CFG_LLVM_INST_DIR_$(CFG_BUILD))/bin/FileCheck \\\n-        --stage-id stage$(1)-$(2) \\\n-        --target $(2) \\\n-        --host $(3) \\\n-\t--docck-python $$(CFG_PYTHON) \\\n-\t--lldb-python $$(CFG_LLDB_PYTHON) \\\n-        --gdb=\"$(CFG_GDB)\" \\\n-        --lldb-version=\"$(CFG_LLDB_VERSION)\" \\\n-        --llvm-version=\"$$(LLVM_VERSION_$(3))\" \\\n-        --android-cross-path=$(CFG_ARM_LINUX_ANDROIDEABI_NDK) \\\n-        --adb-path=$(CFG_ADB) \\\n-        --adb-test-dir=$(CFG_ADB_TEST_DIR) \\\n-        --host-rustcflags \"$(RUSTC_FLAGS_$(3)) $$(CTEST_RUSTC_FLAGS) -L $$(RT_OUTPUT_DIR_$(3))\" \\\n-        --lldb-python-dir=$(CFG_LLDB_PYTHON_DIR) \\\n-        --target-rustcflags \"$(RUSTC_FLAGS_$(2)) $$(CTEST_RUSTC_FLAGS) -L $$(RT_OUTPUT_DIR_$(2))\" \\\n-\t--cc '$$(call FIND_COMPILER,$$(CC_$(2)))' \\\n-\t--cxx '$$(call FIND_COMPILER,$$(CXX_$(2)))' \\\n-\t--cflags \"$$(CFG_GCCISH_CFLAGS_$(2))\" \\\n-\t--llvm-components \"$$(LLVM_ALL_COMPONENTS_$(2))\" \\\n-\t--llvm-cxxflags \"$$(LLVM_CXXFLAGS_$(2))\" \\\n-        $$(CTEST_TESTARGS)\n-\n-ifdef CFG_VALGRIND_RPASS\n-ifdef GOOD_VALGRIND_$(2)\n-CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) += --valgrind-path \"$(CFG_VALGRIND_RPASS)\"\n-endif\n-endif\n-\n-ifndef CFG_DISABLE_VALGRIND_RPASS\n-ifdef GOOD_VALGRIND_$(2)\n-CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) += --force-valgrind\n-endif\n-endif\n-\n-CTEST_DEPS_rpass_$(1)-T-$(2)-H-$(3) = $$(RPASS_TESTS)\n-CTEST_DEPS_rpass-valgrind_$(1)-T-$(2)-H-$(3) = $$(RPASS_VALGRIND_TESTS)\n-CTEST_DEPS_rpass-full_$(1)-T-$(2)-H-$(3) = $$(RPASS_FULL_TESTS) $$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))\n-CTEST_DEPS_rfail-full_$(1)-T-$(2)-H-$(3) = $$(RFAIL_FULL_TESTS) $$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))\n-CTEST_DEPS_cfail-full_$(1)-T-$(2)-H-$(3) = $$(CFAIL_FULL_TESTS) $$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))\n-CTEST_DEPS_rfail_$(1)-T-$(2)-H-$(3) = $$(RFAIL_TESTS)\n-CTEST_DEPS_cfail_$(1)-T-$(2)-H-$(3) = $$(CFAIL_TESTS)\n-CTEST_DEPS_pfail_$(1)-T-$(2)-H-$(3) = $$(PFAIL_TESTS)\n-CTEST_DEPS_debuginfo-gdb_$(1)-T-$(2)-H-$(3) = $$(DEBUGINFO_GDB_TESTS)\n-CTEST_DEPS_debuginfo-lldb_$(1)-T-$(2)-H-$(3) = $$(DEBUGINFO_LLDB_TESTS) \\\n-                                               $(S)src/etc/lldb_batchmode.py \\\n-                                               $(S)src/etc/lldb_rust_formatters.py\n-CTEST_DEPS_codegen_$(1)-T-$(2)-H-$(3) = $$(CODEGEN_TESTS)\n-CTEST_DEPS_codegen-units_$(1)-T-$(2)-H-$(3) = $$(CODEGEN_UNITS_TESTS)\n-CTEST_DEPS_incremental_$(1)-T-$(2)-H-$(3) = $$(INCREMENTAL_TESTS)\n-CTEST_DEPS_rmake_$(1)-T-$(2)-H-$(3) = $$(RMAKE_TESTS) \\\n-\t$$(CSREQ$(1)_T_$(3)_H_$(3)) $$(SREQ$(1)_T_$(2)_H_$(3))\n-CTEST_DEPS_ui_$(1)-T-$(2)-H-$(3) = $$(UI_TESTS)\n-CTEST_DEPS_mir-opt_$(1)-T-$(2)-H-$(3) = $$(MIR_OPT_TESTS)\n-CTEST_DEPS_rustdocck_$(1)-T-$(2)-H-$(3) = $$(RUSTDOCCK_TESTS) \\\n-\t\t$$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3)) \\\n-\t\t$$(CSREQ$(1)_T_$(3)_H_$(3)) \\\n-\t\t$$(SREQ$(1)_T_$(3)_H_$(3)) \\\n-\t\t$(S)src/etc/htmldocck.py\n-\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(eval $(foreach target,$(CFG_TARGET), \\\n-  $(eval $(foreach stage,$(STAGES), \\\n-   $(eval $(call DEF_CTEST_VARS,$(stage),$(target),$(host))))))))\n-\n-define DEF_RUN_COMPILETEST\n-\n-CTEST_ARGS$(1)-T-$(2)-H-$(3)-$(4) = \\\n-        $$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3)) \\\n-        --src-base $$(S)src/test/$$(CTEST_SRC_BASE_$(4))/ \\\n-        --build-base $(3)/test/$$(CTEST_BUILD_BASE_$(4))/ \\\n-        --mode $$(CTEST_MODE_$(4)) \\\n-\t$$(CTEST_RUNTOOL_$(4))\n-\n-check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n-\n-# CTEST_DONT_RUN_$(1)-T-$(2)-H-$(3)-$(4)\n-# Goal: leave this variable as empty string if we should run the test.\n-# Otherwise, set it to the reason we are not running the test.\n-# (Encoded as a separate variable because GNU make does not have a\n-# good way to express OR on ifeq commands)\n-\n-ifneq ($$(CTEST_DISABLE_$(4)),)\n-# Test suite is disabled for all configured targets.\n-CTEST_DONT_RUN_$(1)-T-$(2)-H-$(3)-$(4) := $$(CTEST_DISABLE_$(4))\n-else\n-# else, check if non-self-hosted target (i.e. target not-in hosts) ...\n-ifeq ($$(findstring $(2),$$(CFG_HOST)),)\n-# ... if so, then check if this test suite is disabled for non-selfhosts.\n-ifneq ($$(CTEST_DISABLE_NONSELFHOST_$(4)),)\n-# Test suite is disabled for this target.\n-CTEST_DONT_RUN_$(1)-T-$(2)-H-$(3)-$(4) := $$(CTEST_DISABLE_NONSELFHOST_$(4))\n-endif\n-endif\n-# Neither DISABLE nor DISABLE_NONSELFHOST is set ==> okay, run the test.\n-endif\n-\n-ifeq ($$(CTEST_DONT_RUN_$(1)-T-$(2)-H-$(3)-$(4)),)\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\texport INCLUDE := $$(CFG_MSVC_INCLUDE_PATH_$$(HOST_$(3)))\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\texport LIB := $$(CFG_MSVC_LIB_PATH_$$(HOST_$(3)))\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n-                $$(CTEST_DEPS_$(4)_$(1)-T-$(2)-H-$(3))\n-\t@$$(call E, run $(4) [$(2)]: $$<)\n-\t$$(Q)touch $$@.start_time\n-\t$$(Q)$$(call CFG_RUN_CTEST_$(2),$(1),$$<,$(3)) \\\n-\t\t$$(CTEST_ARGS$(1)-T-$(2)-H-$(3)-$(4)) \\\n-\t\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n-                && touch -r $$@.start_time $$@ && rm $$@.start_time\n-\n-else\n-\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)):\n-\t@$$(call E, run $(4) [$(2)]: $$<)\n-\t@$$(call E, warning: tests disabled: $$(CTEST_DONT_RUN_$(1)-T-$(2)-H-$(3)-$(4)))\n-\ttouch $$@\n-\n-endif\n-\n-endef\n-\n-CTEST_NAMES = rpass rpass-valgrind rpass-full rfail-full cfail-full rfail cfail pfail \\\n-\tdebuginfo-gdb debuginfo-lldb codegen codegen-units rustdocck incremental \\\n-\trmake ui mir-opt\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(eval $(foreach target,$(CFG_TARGET), \\\n-  $(eval $(foreach stage,$(STAGES), \\\n-   $(eval $(foreach name,$(CTEST_NAMES), \\\n-   $(eval $(call DEF_RUN_COMPILETEST,$(stage),$(target),$(host),$(name))))))))))\n-\n-PRETTY_NAMES = pretty-rpass pretty-rpass-valgrind pretty-rpass-full pretty-rfail-full pretty-rfail \\\n-    pretty-pretty\n-PRETTY_DEPS_pretty-rpass = $(RPASS_TESTS)\n-PRETTY_DEPS_pretty-rpass-valgrind = $(RPASS_VALGRIND_TESTS)\n-PRETTY_DEPS_pretty-rpass-full = $(RPASS_FULL_TESTS)\n-PRETTY_DEPS_pretty-rfail-full = $(RFAIL_FULL_TESTS)\n-PRETTY_DEPS_pretty-rfail = $(RFAIL_TESTS)\n-PRETTY_DEPS_pretty-pretty = $(PRETTY_TESTS)\n-PRETTY_DIRNAME_pretty-rpass = run-pass\n-PRETTY_DIRNAME_pretty-rpass-valgrind = run-pass-valgrind\n-PRETTY_DIRNAME_pretty-rpass-full = run-pass-fulldeps\n-PRETTY_DIRNAME_pretty-rfail-full = run-fail-fulldeps\n-PRETTY_DIRNAME_pretty-rfail = run-fail\n-PRETTY_DIRNAME_pretty-pretty = pretty\n-\n-define DEF_PRETTY_FULLDEPS\n-PRETTY_DEPS$(1)_T_$(2)_H_$(3)_pretty-rpass-full = $$(CSREQ$(1)_T_$(3)_H_$(3))\n-PRETTY_DEPS$(1)_T_$(2)_H_$(3)_pretty-rfail-full = $$(CSREQ$(1)_T_$(3)_H_$(3))\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(eval $(call DEF_PRETTY_FULLDEPS,$(stage),$(target),$(host))))))\n-\n-define DEF_RUN_PRETTY_TEST\n-\n-PRETTY_ARGS$(1)-T-$(2)-H-$(3)-$(4) = \\\n-\t\t$$(CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3)) \\\n-        --src-base $$(S)src/test/$$(PRETTY_DIRNAME_$(4))/ \\\n-        --build-base $(3)/test/$$(PRETTY_DIRNAME_$(4))/ \\\n-        --mode pretty\n-\n-check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4))\n-\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n-\t        $$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t        $$(PRETTY_DEPS_$(4)) \\\n-\t        $$(PRETTY_DEPS$(1)_T_$(2)_H_$(3)_$(4))\n-\t@$$(call E, run pretty-rpass [$(2)]: $$<)\n-\t$$(Q)touch $$@.start_time\n-\t$$(Q)$$(call CFG_RUN_CTEST_$(2),$(1),$$<,$(3)) \\\n-\t\t$$(PRETTY_ARGS$(1)-T-$(2)-H-$(3)-$(4)) \\\n-\t\t--logfile $$(call TEST_LOG_FILE,$(1),$(2),$(3),$(4)) \\\n-                && touch -r $$@.start_time $$@ && rm $$@.start_time\n-\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(foreach pretty-name,$(PRETTY_NAMES), \\\n-    $(eval $(call DEF_RUN_PRETTY_TEST,$(stage),$(target),$(host),$(pretty-name)))))))\n-\n-\n-######################################################################\n-# Crate & freestanding documentation tests\n-######################################################################\n-\n-define DEF_RUSTDOC\n-RUSTDOC_EXE_$(1)_T_$(2)_H_$(3) := $$(HBIN$(1)_H_$(3))/rustdoc$$(X_$(3))\n-RUSTDOC_$(1)_T_$(2)_H_$(3) := $$(RPATH_VAR$(1)_T_$(2)_H_$(3)) $$(RUSTDOC_EXE_$(1)_T_$(2)_H_$(3))\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(eval $(call DEF_RUSTDOC,$(stage),$(target),$(host))))))\n-\n-# Freestanding\n-\n-define DEF_DOC_TEST\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4))\n-\n-# If NO_REBUILD is set then break the dependencies on everything but\n-# the source files so we can test documentation without rebuilding\n-# rustdoc etc.\n-ifeq ($(NO_REBUILD),)\n-DOCTESTDEP_$(1)_$(2)_$(3)_$(4) = \\\n-\t$$(DOCFILE_$(4)) \\\n-\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t$$(RUSTDOC_EXE_$(1)_T_$(2)_H_$(3))\n-else\n-DOCTESTDEP_$(1)_$(2)_$(3)_$(4) = $$(DOCFILE_$(4))\n-endif\n-\n-ifeq ($(2),$$(CFG_BUILD))\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)): $$(DOCTESTDEP_$(1)_$(2)_$(3)_$(4))\n-\t@$$(call E, run doc-$(4) [$(2)])\n-\t$$(Q)touch $$@.start_time\n-\t$$(Q)$$(RUSTDOC_$(1)_T_$(2)_H_$(3)) --cfg dox --test $$< \\\n-\t\t--test-args \"$$(TESTARGS)\" && \\\n-\t\ttouch -r $$@.start_time $$@ && rm $$@.start_time\n-else\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-$(4)):\n-\ttouch $$@\n-endif\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(foreach docname,$(DOC_NAMES), \\\n-    $(eval $(call DEF_DOC_TEST,$(stage),$(target),$(host),$(docname)))))))\n-\n-# Crates\n-\n-define DEF_CRATE_DOC_TEST\n-\n-# If NO_REBUILD is set then break the dependencies on everything but\n-# the source files so we can test crate documentation without\n-# rebuilding any of the parent crates.\n-ifeq ($(NO_REBUILD),)\n-CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4) = \\\n-\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4)) \\\n-\t$$(RUSTDOC_EXE_$(1)_T_$(2)_H_$(3))\n-else\n-CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4) = $$(RSINPUTS_$(4))\n-endif\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc-crate-$(4)-exec: \\\n-\t$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-crate-$(4))\n-\n-ifeq ($(2),$$(CFG_BUILD))\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-crate-$(4)): $$(CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4))\n-\t@$$(call E, run doc-crate-$(4) [$(2)])\n-\t$$(Q)touch $$@.start_time\n-\t$$(Q)CFG_LLVM_LINKAGE_FILE=$$(LLVM_LINKAGE_PATH_$(2)) \\\n-\t    $$(RUSTDOC_$(1)_T_$(2)_H_$(3)) --test --cfg dox \\\n-\t        $$(CRATEFILE_$(4)) --test-args \"$$(TESTARGS)\" && \\\n-\t        touch -r $$@.start_time $$@ && rm $$@.start_time\n-else\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-crate-$(4)):\n-\ttouch $$@\n-endif\n-\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(foreach crate,$(TEST_DOC_CRATES), \\\n-    $(eval $(call DEF_CRATE_DOC_TEST,$(stage),$(target),$(host),$(crate)))))))\n-\n-define DEF_DOC_TEST_ERROR_INDEX\n-\n-check-stage$(1)-T-$(2)-H-$(3)-doc-error-index-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),doc-error-index)\n-\n-ifeq ($(2),$$(CFG_BUILD))\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-error-index): \\\n-\t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n-\t\tdoc/error-index.md\n-\t$$(Q)touch $$@.start_time\n-\t$$(RUSTDOC_$(1)_T_$(2)_H_$(3)) --test doc/error-index.md\n-\t$$(Q)touch -r $$@.start_time $$@ && rm $$@.start_time\n-else\n-$$(call TEST_OK_FILE,$(1),$(2),$(3),doc-error-index):\n-\t$$(Q)touch $$@\n-endif\n-endef\n-\n-$(foreach host,$(CFG_HOST), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach stage,$(STAGES), \\\n-   $(eval $(call DEF_DOC_TEST_ERROR_INDEX,$(stage),$(target),$(host))))))\n-\n-######################################################################\n-# Shortcut rules\n-######################################################################\n-\n-TEST_GROUPS = \\\n-\tcrates \\\n-\t$(foreach crate,$(TEST_CRATES),$(crate)) \\\n-\t$(foreach crate,$(TEST_DOC_CRATES),doc-crate-$(crate)) \\\n-\trpass \\\n-\trpass-valgrind \\\n-\trpass-full \\\n-\trfail-full \\\n-\tcfail-full \\\n-\trfail \\\n-\tcfail \\\n-\tpfail \\\n-\trmake \\\n-\trustdocck \\\n-\tdebuginfo-gdb \\\n-\tdebuginfo-lldb \\\n-\tcodegen \\\n-\tcodegen-units \\\n-\tincremental \\\n-\tui \\\n-\tdoc \\\n-\t$(foreach docname,$(DOC_NAMES),doc-$(docname)) \\\n-\tpretty \\\n-\tpretty-rpass \\\n-\tpretty-rpass-valgrind \\\n-\tpretty-rpass-full \\\n-\tpretty-rfail-full \\\n-\tpretty-rfail \\\n-\tpretty-pretty \\\n-\tmir-opt \\\n-\t$(NULL)\n-\n-define DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST\n-check-stage$(1)-T-$(2)-H-$(3): check-stage$(1)-T-$(2)-H-$(3)-exec\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach host,$(CFG_HOST), \\\n-   $(eval $(call DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST,$(stage),$(target),$(host))))))\n-\n-define DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST_AND_GROUP\n-check-stage$(1)-T-$(2)-H-$(3)-$(4): check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(foreach target,$(CFG_TARGET), \\\n-  $(foreach host,$(CFG_HOST), \\\n-   $(foreach group,$(TEST_GROUPS), \\\n-    $(eval $(call DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST_AND_GROUP,$(stage),$(target),$(host),$(group)))))))\n-\n-define DEF_CHECK_FOR_STAGE\n-check-stage$(1): check-stage$(1)-H-$$(CFG_BUILD)\n-check-stage$(1)-H-all: $$(foreach target,$$(CFG_TARGET), \\\n-                           check-stage$(1)-H-$$(target))\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(eval $(call DEF_CHECK_FOR_STAGE,$(stage))))\n-\n-define DEF_CHECK_FOR_STAGE_AND_GROUP\n-check-stage$(1)-$(2): check-stage$(1)-H-$$(CFG_BUILD)-$(2)\n-check-stage$(1)-H-all-$(2): $$(foreach target,$$(CFG_TARGET), \\\n-                               check-stage$(1)-H-$$(target)-$(2))\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(foreach group,$(TEST_GROUPS), \\\n-  $(eval $(call DEF_CHECK_FOR_STAGE_AND_GROUP,$(stage),$(group)))))\n-\n-\n-define DEF_CHECK_FOR_STAGE_AND_HOSTS\n-check-stage$(1)-H-$(2): $$(foreach target,$$(CFG_TARGET), \\\n-                           check-stage$(1)-T-$$(target)-H-$(2))\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(foreach host,$(CFG_HOST), \\\n-  $(eval $(call DEF_CHECK_FOR_STAGE_AND_HOSTS,$(stage),$(host)))))\n-\n-define DEF_CHECK_FOR_STAGE_AND_HOSTS_AND_GROUP\n-check-stage$(1)-H-$(2)-$(3): $$(foreach target,$$(CFG_TARGET), \\\n-                                check-stage$(1)-T-$$(target)-H-$(2)-$(3))\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(foreach host,$(CFG_HOST), \\\n-  $(foreach group,$(TEST_GROUPS), \\\n-   $(eval $(call DEF_CHECK_FOR_STAGE_AND_HOSTS_AND_GROUP,$(stage),$(host),$(group))))))\n-\n-define DEF_CHECK_DOC_FOR_STAGE\n-check-stage$(1)-docs: $$(foreach docname,$$(DOC_NAMES), \\\n-                       check-stage$(1)-T-$$(CFG_BUILD)-H-$$(CFG_BUILD)-doc-$$(docname)) \\\n-                     $$(foreach crate,$$(TEST_DOC_CRATES), \\\n-                       check-stage$(1)-T-$$(CFG_BUILD)-H-$$(CFG_BUILD)-doc-crate-$$(crate)) \\\n-                     check-stage$(1)-T-$$(CFG_BUILD)-H-$$(CFG_BUILD)-doc-error-index-exec\n-endef\n-\n-$(foreach stage,$(STAGES), \\\n- $(eval $(call DEF_CHECK_DOC_FOR_STAGE,$(stage))))\n-\n-define DEF_CHECK_CRATE\n-check-$(1): check-stage2-T-$$(CFG_BUILD)-H-$$(CFG_BUILD)-$(1)-exec\n-endef\n-\n-$(foreach crate,$(TEST_CRATES), \\\n- $(eval $(call DEF_CHECK_CRATE,$(crate))))"}, {"sha": "918484ac463522865db3dbacefacc5a651933f42", "filename": "mk/util.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Futil.mk", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/mk%2Futil.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Futil.mk?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,23 +0,0 @@\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-ifdef VERBOSE\n-  Q :=\n-  E =\n-else\n-  Q := @\n-  E = echo $(1)\n-endif\n-\n-print-%:\n-\t@echo $*=$($*)\n-\n-S := $(CFG_SRC_DIR)\n-SREL := $(CFG_SRC_DIR_RELATIVE)"}, {"sha": "09aefd45e94c88964ce6bdcd1515c6f9dc5b2460", "filename": "src/Cargo.lock", "status": "modified", "additions": 63, "deletions": 10, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -19,7 +19,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n ]\n \n@@ -42,7 +42,7 @@ dependencies = [\n  \"build_helper 0.1.0\",\n  \"cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -74,7 +74,7 @@ name = \"cmake\"\n version = \"0.1.18\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -91,14 +91,15 @@ name = \"compiler_builtins\"\n version = \"0.0.0\"\n dependencies = [\n  \"core 0.0.0\",\n- \"gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"compiletest\"\n version = \"0.0.0\"\n dependencies = [\n  \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -132,7 +133,7 @@ name = \"flate\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -141,7 +142,7 @@ version = \"0.0.0\"\n \n [[package]]\n name = \"gcc\"\n-version = \"0.3.40\"\n+version = \"0.3.43\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -224,6 +225,14 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"qemu-test-client\"\n+version = \"0.1.0\"\n+\n+[[package]]\n+name = \"qemu-test-server\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"rand\"\n version = \"0.0.0\"\n@@ -268,6 +277,16 @@ name = \"rustc-serialize\"\n version = \"0.3.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"rustc_asan\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc_system 0.0.0\",\n+ \"build_helper 0.1.0\",\n+ \"cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_back\"\n version = \"0.0.0\"\n@@ -397,10 +416,20 @@ name = \"rustc_llvm\"\n version = \"0.0.0\"\n dependencies = [\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_bitflags 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_lsan\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc_system 0.0.0\",\n+ \"build_helper 0.1.0\",\n+ \"cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_metadata\"\n version = \"0.0.0\"\n@@ -435,6 +464,16 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_msan\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc_system 0.0.0\",\n+ \"build_helper 0.1.0\",\n+ \"cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_passes\"\n version = \"0.0.0\"\n@@ -516,6 +555,16 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"rustc_tsan\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"alloc_system 0.0.0\",\n+ \"build_helper 0.1.0\",\n+ \"cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"core 0.0.0\",\n+]\n+\n [[package]]\n name = \"rustc_typeck\"\n version = \"0.0.0\"\n@@ -540,7 +589,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"arena 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -572,11 +621,15 @@ dependencies = [\n  \"collections 0.0.0\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\",\n- \"gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.0.0\",\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n  \"rand 0.0.0\",\n+ \"rustc_asan 0.0.0\",\n+ \"rustc_lsan 0.0.0\",\n+ \"rustc_msan 0.0.0\",\n+ \"rustc_tsan 0.0.0\",\n  \"std_unicode 0.0.0\",\n  \"unwind 0.0.0\",\n ]\n@@ -662,7 +715,7 @@ dependencies = [\n \"checksum cmake 0.1.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e5bcf27e097a184c1df4437654ed98df3d7a516e8508a6ba45d8b092bbdf283\"\n \"checksum env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15abd780e45b3ea4f76b4e9a26ff4843258dd8a3eed2775a0e7368c2e7936c2f\"\n \"checksum filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5363ab8e4139b8568a6237db5248646e5a8a2f89bd5ccb02092182b11fd3e922\"\n-\"checksum gcc 0.3.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"872db9e59486ef2b14f8e8c10e9ef02de2bccef6363d7f34835dedb386b3d950\"\n+\"checksum gcc 0.3.43 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c07c758b972368e703a562686adb39125707cc1ef3399da8c019fc6c2498a75d\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n \"checksum libc 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"044d1360593a78f5c8e5e710beccdc24ab71d1f01bc19a29bcacdba22e8475d8\"\n \"checksum log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab83497bf8bf4ed2a74259c1c802351fcd67a65baa86394b6ba73c36f4838054\""}, {"sha": "d8dedd11f357d3ad9c164a6668399ded8c7a324a", "filename": "src/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -11,6 +11,8 @@ members = [\n   \"tools/rustbook\",\n   \"tools/tidy\",\n   \"tools/build-manifest\",\n+  \"tools/qemu-test-client\",\n+  \"tools/qemu-test-server\",\n ]\n \n # Curiously, compiletest will segfault if compiled with opt-level=3 on 64-bit"}, {"sha": "81e745bc76c9e7a1cdcf19be62f849297822b049", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -15,55 +15,45 @@\n //! `package_vers`, and otherwise indicating to the compiler what it should\n //! print out as part of its version information.\n \n-use std::fs::File;\n-use std::io::prelude::*;\n use std::process::Command;\n \n use build_helper::output;\n \n use Build;\n \n-pub fn collect(build: &mut Build) {\n-    // Currently the canonical source for the release number (e.g. 1.10.0) and\n-    // the prerelease version (e.g. `.1`) is in `mk/main.mk`. We \"parse\" that\n-    // here to learn about those numbers.\n-    let mut main_mk = String::new();\n-    t!(t!(File::open(build.src.join(\"mk/main.mk\"))).read_to_string(&mut main_mk));\n-    let mut release_num = \"\";\n-    let mut prerelease_version = \"\";\n-    for line in main_mk.lines() {\n-        if line.starts_with(\"CFG_RELEASE_NUM\") {\n-            release_num = line.split('=').skip(1).next().unwrap().trim();\n-        }\n-        if line.starts_with(\"CFG_PRERELEASE_VERSION\") {\n-            prerelease_version = line.split('=').skip(1).next().unwrap().trim();\n-        }\n-    }\n+// The version number\n+const CFG_RELEASE_NUM: &'static str = \"1.17.0\";\n+\n+// An optional number to put after the label, e.g. '.2' -> '-beta.2'\n+// Be sure to make this starts with a dot to conform to semver pre-release\n+// versions (section 9)\n+const CFG_PRERELEASE_VERSION: &'static str = \".1\";\n \n-    build.release_num = release_num.to_string();\n-    build.prerelease_version = release_num.to_string();\n+pub fn collect(build: &mut Build) {\n+    build.release_num = CFG_RELEASE_NUM.to_string();\n+    build.prerelease_version = CFG_RELEASE_NUM.to_string();\n \n     // Depending on the channel, passed in `./configure --release-channel`,\n     // determine various properties of the build.\n     match &build.config.channel[..] {\n         \"stable\" => {\n-            build.release = release_num.to_string();\n+            build.release = CFG_RELEASE_NUM.to_string();\n             build.package_vers = build.release.clone();\n             build.unstable_features = false;\n         }\n         \"beta\" => {\n-            build.release = format!(\"{}-beta{}\", release_num,\n-                                   prerelease_version);\n+            build.release = format!(\"{}-beta{}\", CFG_RELEASE_NUM,\n+                                   CFG_PRERELEASE_VERSION);\n             build.package_vers = \"beta\".to_string();\n             build.unstable_features = false;\n         }\n         \"nightly\" => {\n-            build.release = format!(\"{}-nightly\", release_num);\n+            build.release = format!(\"{}-nightly\", CFG_RELEASE_NUM);\n             build.package_vers = \"nightly\".to_string();\n             build.unstable_features = true;\n         }\n         _ => {\n-            build.release = format!(\"{}-dev\", release_num);\n+            build.release = format!(\"{}-dev\", CFG_RELEASE_NUM);\n             build.package_vers = build.release.clone();\n             build.unstable_features = true;\n         }"}, {"sha": "cbfbcbe4f0c6eb85ef2c4431c41553bbbcd9764a", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 97, "deletions": 26, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -26,7 +26,7 @@ use build_helper::output;\n \n use {Build, Compiler, Mode};\n use dist;\n-use util::{self, dylib_path, dylib_path_var};\n+use util::{self, dylib_path, dylib_path_var, exe};\n \n const ADB_TEST_DIR: &'static str = \"/data/tmp\";\n \n@@ -221,6 +221,12 @@ pub fn compiletest(build: &Build,\n            .arg(\"--llvm-cxxflags\").arg(\"\");\n     }\n \n+    if build.qemu_rootfs(target).is_some() {\n+        cmd.arg(\"--qemu-test-client\")\n+           .arg(build.tool(&Compiler::new(0, &build.config.build),\n+                           \"qemu-test-client\"));\n+    }\n+\n     // Running a C compiler on MSVC requires a few env vars to be set, to be\n     // sure to set them here.\n     //\n@@ -236,6 +242,10 @@ pub fn compiletest(build: &Build,\n     cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n     build.add_rust_test_threads(&mut cmd);\n \n+    if build.config.sanitizers {\n+        cmd.env(\"SANITIZER_SUPPORT\", \"1\");\n+    }\n+\n     cmd.arg(\"--adb-path\").arg(\"adb\");\n     cmd.arg(\"--adb-test-dir\").arg(ADB_TEST_DIR);\n     if target.contains(\"android\") {\n@@ -403,9 +413,9 @@ pub fn krate(build: &Build,\n     dylib_path.insert(0, build.sysroot_libdir(&compiler, target));\n     cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n \n-    if target.contains(\"android\") {\n-        cargo.arg(\"--no-run\");\n-    } else if target.contains(\"emscripten\") {\n+    if target.contains(\"android\") ||\n+       target.contains(\"emscripten\") ||\n+       build.qemu_rootfs(target).is_some() {\n         cargo.arg(\"--no-run\");\n     }\n \n@@ -423,6 +433,9 @@ pub fn krate(build: &Build,\n     } else if target.contains(\"emscripten\") {\n         build.run(&mut cargo);\n         krate_emscripten(build, &compiler, target, mode);\n+    } else if build.qemu_rootfs(target).is_some() {\n+        build.run(&mut cargo);\n+        krate_qemu(build, &compiler, target, mode);\n     } else {\n         cargo.args(&build.flags.cmd.test_args());\n         build.run(&mut cargo);\n@@ -480,23 +493,46 @@ fn krate_emscripten(build: &Build,\n                     compiler: &Compiler,\n                     target: &str,\n                     mode: Mode) {\n-     let mut tests = Vec::new();\n-     let out_dir = build.cargo_out(compiler, mode, target);\n-     find_tests(&out_dir, target, &mut tests);\n-     find_tests(&out_dir.join(\"deps\"), target, &mut tests);\n-\n-     for test in tests {\n-         let test_file_name = test.to_string_lossy().into_owned();\n-         println!(\"running {}\", test_file_name);\n-         let nodejs = build.config.nodejs.as_ref().expect(\"nodejs not configured\");\n-         let mut cmd = Command::new(nodejs);\n-         cmd.arg(&test_file_name);\n-         if build.config.quiet_tests {\n-             cmd.arg(\"--quiet\");\n-         }\n-         build.run(&mut cmd);\n-     }\n- }\n+    let mut tests = Vec::new();\n+    let out_dir = build.cargo_out(compiler, mode, target);\n+    find_tests(&out_dir, target, &mut tests);\n+    find_tests(&out_dir.join(\"deps\"), target, &mut tests);\n+\n+    for test in tests {\n+        let test_file_name = test.to_string_lossy().into_owned();\n+        println!(\"running {}\", test_file_name);\n+        let nodejs = build.config.nodejs.as_ref().expect(\"nodejs not configured\");\n+        let mut cmd = Command::new(nodejs);\n+        cmd.arg(&test_file_name);\n+        if build.config.quiet_tests {\n+            cmd.arg(\"--quiet\");\n+        }\n+        build.run(&mut cmd);\n+    }\n+}\n+\n+fn krate_qemu(build: &Build,\n+              compiler: &Compiler,\n+              target: &str,\n+              mode: Mode) {\n+    let mut tests = Vec::new();\n+    let out_dir = build.cargo_out(compiler, mode, target);\n+    find_tests(&out_dir, target, &mut tests);\n+    find_tests(&out_dir.join(\"deps\"), target, &mut tests);\n+\n+    let tool = build.tool(&Compiler::new(0, &build.config.build),\n+                          \"qemu-test-client\");\n+    for test in tests {\n+        let mut cmd = Command::new(&tool);\n+        cmd.arg(\"run\")\n+           .arg(&test);\n+        if build.config.quiet_tests {\n+            cmd.arg(\"--quiet\");\n+        }\n+        cmd.args(&build.flags.cmd.test_args());\n+        build.run(&mut cmd);\n+    }\n+}\n \n \n fn find_tests(dir: &Path,\n@@ -516,13 +552,15 @@ fn find_tests(dir: &Path,\n     }\n }\n \n-pub fn android_copy_libs(build: &Build,\n-                         compiler: &Compiler,\n-                         target: &str) {\n-    if !target.contains(\"android\") {\n-        return\n+pub fn emulator_copy_libs(build: &Build, compiler: &Compiler, target: &str) {\n+    if target.contains(\"android\") {\n+        android_copy_libs(build, compiler, target)\n+    } else if let Some(s) = build.qemu_rootfs(target) {\n+        qemu_copy_libs(build, compiler, target, s)\n     }\n+}\n \n+fn android_copy_libs(build: &Build, compiler: &Compiler, target: &str) {\n     println!(\"Android copy libs to emulator ({})\", target);\n     build.run(Command::new(\"adb\").arg(\"wait-for-device\"));\n     build.run(Command::new(\"adb\").arg(\"remount\"));\n@@ -548,6 +586,39 @@ pub fn android_copy_libs(build: &Build,\n     }\n }\n \n+fn qemu_copy_libs(build: &Build,\n+                  compiler: &Compiler,\n+                  target: &str,\n+                  rootfs: &Path) {\n+    println!(\"QEMU copy libs to emulator ({})\", target);\n+    assert!(target.starts_with(\"arm\"), \"only works with arm for now\");\n+    t!(fs::create_dir_all(build.out.join(\"tmp\")));\n+\n+    // Copy our freshly compiled test server over to the rootfs\n+    let server = build.cargo_out(compiler, Mode::Tool, target)\n+                      .join(exe(\"qemu-test-server\", target));\n+    t!(fs::copy(&server, rootfs.join(\"testd\")));\n+\n+    // Spawn the emulator and wait for it to come online\n+    let tool = build.tool(&Compiler::new(0, &build.config.build),\n+                          \"qemu-test-client\");\n+    build.run(Command::new(&tool)\n+                      .arg(\"spawn-emulator\")\n+                      .arg(rootfs)\n+                      .arg(build.out.join(\"tmp\")));\n+\n+    // Push all our dylibs to the emulator\n+    for f in t!(build.sysroot_libdir(compiler, target).read_dir()) {\n+        let f = t!(f);\n+        let name = f.file_name().into_string().unwrap();\n+        if util::is_dylib(&name) {\n+            build.run(Command::new(&tool)\n+                              .arg(\"push\")\n+                              .arg(f.path()));\n+        }\n+    }\n+}\n+\n /// Run \"distcheck\", a 'make check' from a tarball\n pub fn distcheck(build: &Build) {\n     if build.config.build != \"x86_64-unknown-linux-gnu\" {"}, {"sha": "a66ed46fe464f5bb1185e4a25a4fb4d2a50b4ba0", "filename": "src/bootstrap/clean.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fclean.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -24,6 +24,7 @@ use Build;\n pub fn clean(build: &Build) {\n     rm_rf(build, \"tmp\".as_ref());\n     rm_rf(build, &build.out.join(\"tmp\"));\n+    rm_rf(build, &build.out.join(\"dist\"));\n \n     for host in build.config.host.iter() {\n         let entries = match build.out.join(host).read_dir() {"}, {"sha": "0b1a1f39d8d42e1765950e7c0d3fcdf9871ca366", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -51,6 +51,17 @@ pub fn std(build: &Build, target: &str, compiler: &Compiler) {\n     if compiler.stage == 0 && build.local_rebuild && !build.config.use_jemalloc {\n         features.push_str(\" force_alloc_system\");\n     }\n+\n+    if compiler.stage != 0 && build.config.sanitizers {\n+        // This variable is used by the sanitizer runtime crates, e.g.\n+        // rustc_lsan, to build the sanitizer runtime from C code\n+        // When this variable is missing, those crates won't compile the C code,\n+        // so we don't set this variable during stage0 where llvm-config is\n+        // missing\n+        // We also only build the runtimes when --enable-sanitizers (or its\n+        // config.toml equivalent) is used\n+        cargo.env(\"LLVM_CONFIG\", build.llvm_config(target));\n+    }\n     cargo.arg(\"--features\").arg(features)\n          .arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/rustc/std_shim/Cargo.toml\"));\n@@ -382,10 +393,10 @@ fn add_to_sysroot(out_dir: &Path, sysroot_dst: &Path) {\n ///\n /// This will build the specified tool with the specified `host` compiler in\n /// `stage` into the normal cargo output directory.\n-pub fn tool(build: &Build, stage: u32, host: &str, tool: &str) {\n-    println!(\"Building stage{} tool {} ({})\", stage, tool, host);\n+pub fn tool(build: &Build, stage: u32, target: &str, tool: &str) {\n+    println!(\"Building stage{} tool {} ({})\", stage, tool, target);\n \n-    let compiler = Compiler::new(stage, host);\n+    let compiler = Compiler::new(stage, &build.config.build);\n \n     // FIXME: need to clear out previous tool and ideally deps, may require\n     //        isolating output directories or require a pseudo shim step to\n@@ -396,7 +407,7 @@ pub fn tool(build: &Build, stage: u32, host: &str, tool: &str) {\n     // let out_dir = build.cargo_out(stage, &host, Mode::Librustc, target);\n     // build.clear_if_dirty(&out_dir, &libstd_stamp(build, stage, &host, target));\n \n-    let mut cargo = build.cargo(&compiler, Mode::Tool, host, \"build\");\n+    let mut cargo = build.cargo(&compiler, Mode::Tool, target, \"build\");\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(format!(\"src/tools/{}/Cargo.toml\", tool)));\n "}, {"sha": "47f505ad37e744c6b440d1f41b7b004482b7bda0", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -48,6 +48,7 @@ pub struct Config {\n     pub target_config: HashMap<String, Target>,\n     pub full_bootstrap: bool,\n     pub extended: bool,\n+    pub sanitizers: bool,\n \n     // llvm codegen options\n     pub llvm_assertions: bool,\n@@ -114,6 +115,7 @@ pub struct Target {\n     pub cxx: Option<PathBuf>,\n     pub ndk: Option<PathBuf>,\n     pub musl_root: Option<PathBuf>,\n+    pub qemu_rootfs: Option<PathBuf>,\n }\n \n /// Structure of the `config.toml` file that configuration is read from.\n@@ -149,6 +151,7 @@ struct Build {\n     full_bootstrap: Option<bool>,\n     extended: Option<bool>,\n     verbose: Option<usize>,\n+    sanitizers: Option<bool>,\n }\n \n /// TOML representation of various global install decisions.\n@@ -223,6 +226,7 @@ struct TomlTarget {\n     cxx: Option<String>,\n     android_ndk: Option<String>,\n     musl_root: Option<String>,\n+    qemu_rootfs: Option<String>,\n }\n \n impl Config {\n@@ -294,6 +298,7 @@ impl Config {\n         set(&mut config.full_bootstrap, build.full_bootstrap);\n         set(&mut config.extended, build.extended);\n         set(&mut config.verbose, build.verbose);\n+        set(&mut config.sanitizers, build.sanitizers);\n \n         if let Some(ref install) = toml.install {\n             config.prefix = install.prefix.clone().map(PathBuf::from);\n@@ -362,6 +367,7 @@ impl Config {\n                 target.cxx = cfg.cxx.clone().map(PathBuf::from);\n                 target.cc = cfg.cc.clone().map(PathBuf::from);\n                 target.musl_root = cfg.musl_root.clone().map(PathBuf::from);\n+                target.qemu_rootfs = cfg.qemu_rootfs.clone().map(PathBuf::from);\n \n                 config.target_config.insert(triple.clone(), target);\n             }\n@@ -437,6 +443,7 @@ impl Config {\n                 (\"VENDOR\", self.vendor),\n                 (\"FULL_BOOTSTRAP\", self.full_bootstrap),\n                 (\"EXTENDED\", self.extended),\n+                (\"SANITIZERS\", self.sanitizers),\n             }\n \n             match key {\n@@ -564,6 +571,12 @@ impl Config {\n                                                .map(|s| s.to_string())\n                                                .collect();\n                 }\n+                \"CFG_QEMU_ARMHF_ROOTFS\" if value.len() > 0 => {\n+                    let target = \"arm-unknown-linux-gnueabihf\".to_string();\n+                    let target = self.target_config.entry(target)\n+                                     .or_insert(Target::default());\n+                    target.qemu_rootfs = Some(parse_configure_path(value));\n+                }\n                 _ => {}\n             }\n         }"}, {"sha": "5f4303a728c5c2c46b3d63afe6b54fcc32b21299", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -127,6 +127,9 @@\n # Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose\n #verbose = 0\n \n+# Build the sanitizer runtimes\n+#sanitizers = false\n+\n # =============================================================================\n # General install configuration options\n # ============================================================================="}, {"sha": "2da2892150b4fba53817b2bee9a7c436b03c4390", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -381,13 +381,11 @@ pub fn rust_src(build: &Build) {\n         \"README.md\",\n         \"RELEASES.md\",\n         \"configure\",\n-        \"Makefile.in\",\n         \"x.py\",\n     ];\n     let src_dirs = [\n         \"man\",\n         \"src\",\n-        \"mk\"\n     ];\n \n     let filter_fn = move |path: &Path| {\n@@ -517,9 +515,7 @@ pub fn cargo(build: &Build, stage: u32, target: &str) {\n \n     let branch = match &build.config.channel[..] {\n         \"stable\" |\n-        \"beta\" => {\n-            build.release.split(\".\").take(2).collect::<Vec<_>>().join(\".\")\n-        }\n+        \"beta\" => format!(\"rust-{}\", build.release_num),\n         _ => \"master\".to_string(),\n     };\n "}, {"sha": "ba6b34343f0b35d15554fd0f5b142c71daa9c627", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -599,7 +599,8 @@ impl Build {\n     /// Get the space-separated set of activated features for the standard\n     /// library.\n     fn std_features(&self) -> String {\n-        let mut features = \"panic-unwind\".to_string();\n+        let mut features = \"panic-unwind asan lsan msan tsan\".to_string();\n+\n         if self.config.debug_jemalloc {\n             features.push_str(\" debug-jemalloc\");\n         }\n@@ -878,6 +879,17 @@ impl Build {\n             .map(|p| &**p)\n     }\n \n+    /// Returns the root of the \"rootfs\" image that this target will be using,\n+    /// if one was configured.\n+    ///\n+    /// If `Some` is returned then that means that tests for this target are\n+    /// emulated with QEMU and binaries will need to be shipped to the emulator.\n+    fn qemu_rootfs(&self, target: &str) -> Option<&Path> {\n+        self.config.target_config.get(target)\n+            .and_then(|t| t.qemu_rootfs.as_ref())\n+            .map(|p| &**p)\n+    }\n+\n     /// Path to the python interpreter to use\n     fn python(&self) -> &Path {\n         self.config.python.as_ref().unwrap()"}, {"sha": "536095503e0daed170d0d0e6dcf4fbdc50bcca56", "filename": "src/bootstrap/mk/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fmk%2FMakefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fmk%2FMakefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmk%2FMakefile.in?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -9,11 +9,12 @@\n # except according to those terms.\n \n include config.mk\n-include $(CFG_SRC_DIR)mk/util.mk\n \n ifdef VERBOSE\n+Q :=\n BOOTSTRAP_ARGS := -v\n else\n+Q := @\n BOOTSTRAP_ARGS :=\n endif\n "}, {"sha": "ee5b61062fed86dc4fd32eeb998958ed7d2a74d8", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 43, "deletions": 12, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -295,7 +295,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n                  .dep(|s| s.name(\"libtest\"))\n                  .dep(|s| s.name(\"tool-compiletest\").target(s.host).stage(0))\n                  .dep(|s| s.name(\"test-helpers\"))\n-                 .dep(|s| s.name(\"android-copy-libs\"))\n+                 .dep(|s| s.name(\"emulator-copy-libs\"))\n                  .default(mode != \"pretty\") // pretty tests don't run everywhere\n                  .run(move |s| {\n                      check::compiletest(build, &s.compiler(), s.target, mode, dir)\n@@ -333,7 +333,7 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n              .dep(|s| s.name(\"tool-compiletest\").target(s.host).stage(0))\n              .dep(|s| s.name(\"test-helpers\"))\n              .dep(|s| s.name(\"debugger-scripts\"))\n-             .dep(|s| s.name(\"android-copy-libs\"))\n+             .dep(|s| s.name(\"emulator-copy-libs\"))\n              .run(move |s| check::compiletest(build, &s.compiler(), s.target,\n                                          \"debuginfo-gdb\", \"debuginfo\"));\n         let mut rule = rules.test(\"check-debuginfo\", \"src/test/debuginfo\");\n@@ -387,14 +387,14 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     for (krate, path, _default) in krates(\"std_shim\") {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"libtest\"))\n-             .dep(|s| s.name(\"android-copy-libs\"))\n+             .dep(|s| s.name(\"emulator-copy-libs\"))\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Libstd, TestKind::Test,\n                                         Some(&krate.name)));\n     }\n     rules.test(\"check-std-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n-         .dep(|s| s.name(\"android-copy-libs\"))\n+         .dep(|s| s.name(\"emulator-copy-libs\"))\n          .default(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                     Mode::Libstd, TestKind::Test, None));\n@@ -403,44 +403,44 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     for (krate, path, _default) in krates(\"std_shim\") {\n         rules.bench(&krate.bench_step, path)\n              .dep(|s| s.name(\"libtest\"))\n-             .dep(|s| s.name(\"android-copy-libs\"))\n+             .dep(|s| s.name(\"emulator-copy-libs\"))\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Libstd, TestKind::Bench,\n                                         Some(&krate.name)));\n     }\n     rules.bench(\"bench-std-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n-         .dep(|s| s.name(\"android-copy-libs\"))\n+         .dep(|s| s.name(\"emulator-copy-libs\"))\n          .default(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                     Mode::Libstd, TestKind::Bench, None));\n \n     for (krate, path, _default) in krates(\"test_shim\") {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"libtest\"))\n-             .dep(|s| s.name(\"android-copy-libs\"))\n+             .dep(|s| s.name(\"emulator-copy-libs\"))\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Libtest, TestKind::Test,\n                                         Some(&krate.name)));\n     }\n     rules.test(\"check-test-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n-         .dep(|s| s.name(\"android-copy-libs\"))\n+         .dep(|s| s.name(\"emulator-copy-libs\"))\n          .default(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                     Mode::Libtest, TestKind::Test, None));\n     for (krate, path, _default) in krates(\"rustc-main\") {\n         rules.test(&krate.test_step, path)\n              .dep(|s| s.name(\"librustc\"))\n-             .dep(|s| s.name(\"android-copy-libs\"))\n+             .dep(|s| s.name(\"emulator-copy-libs\"))\n              .host(true)\n              .run(move |s| check::krate(build, &s.compiler(), s.target,\n                                         Mode::Librustc, TestKind::Test,\n                                         Some(&krate.name)));\n     }\n     rules.test(\"check-rustc-all\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"librustc\"))\n-         .dep(|s| s.name(\"android-copy-libs\"))\n+         .dep(|s| s.name(\"emulator-copy-libs\"))\n          .default(true)\n          .host(true)\n          .run(move |s| check::krate(build, &s.compiler(), s.target,\n@@ -481,9 +481,34 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n \n     rules.build(\"test-helpers\", \"src/rt/rust_test_helpers.c\")\n          .run(move |s| native::test_helpers(build, s.target));\n-    rules.test(\"android-copy-libs\", \"path/to/nowhere\")\n+\n+    // Some test suites are run inside emulators, and most of our test binaries\n+    // are linked dynamically which means we need to ship the standard library\n+    // and such to the emulator ahead of time. This step represents this and is\n+    // a dependency of all test suites.\n+    //\n+    // Most of the time this step is a noop (the `check::emulator_copy_libs`\n+    // only does work if necessary). For some steps such as shipping data to\n+    // QEMU we have to build our own tools so we've got conditional dependencies\n+    // on those programs as well. Note that the QEMU client is built for the\n+    // build target (us) and the server is built for the target.\n+    rules.test(\"emulator-copy-libs\", \"path/to/nowhere\")\n          .dep(|s| s.name(\"libtest\"))\n-         .run(move |s| check::android_copy_libs(build, &s.compiler(), s.target));\n+         .dep(move |s| {\n+             if build.qemu_rootfs(s.target).is_some() {\n+                s.name(\"tool-qemu-test-client\").target(s.host).stage(0)\n+             } else {\n+                 Step::noop()\n+             }\n+         })\n+         .dep(move |s| {\n+             if build.qemu_rootfs(s.target).is_some() {\n+                s.name(\"tool-qemu-test-server\")\n+             } else {\n+                 Step::noop()\n+             }\n+         })\n+         .run(move |s| check::emulator_copy_libs(build, &s.compiler(), s.target));\n \n     rules.test(\"check-bootstrap\", \"src/bootstrap\")\n          .default(true)\n@@ -516,6 +541,12 @@ pub fn build_rules<'a>(build: &'a Build) -> Rules {\n     rules.build(\"tool-build-manifest\", \"src/tools/build-manifest\")\n          .dep(|s| s.name(\"libstd\"))\n          .run(move |s| compile::tool(build, s.stage, s.target, \"build-manifest\"));\n+    rules.build(\"tool-qemu-test-server\", \"src/tools/qemu-test-server\")\n+         .dep(|s| s.name(\"libstd\"))\n+         .run(move |s| compile::tool(build, s.stage, s.target, \"qemu-test-server\"));\n+    rules.build(\"tool-qemu-test-client\", \"src/tools/qemu-test-client\")\n+         .dep(|s| s.name(\"libstd\"))\n+         .run(move |s| compile::tool(build, s.stage, s.target, \"qemu-test-client\"));\n \n     // ========================================================================\n     // Documentation targets"}, {"sha": "e64f65438cbd5a7d4f2f96cc6eb532a758c7309e", "filename": "src/ci/docker/armhf-gnu/Dockerfile", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,90 @@\n+FROM ubuntu:16.04\n+\n+RUN apt-get update -y && apt-get install -y --no-install-recommends \\\n+      bc \\\n+      bzip2 \\\n+      ca-certificates \\\n+      cmake \\\n+      cpio \\\n+      curl \\\n+      file \\\n+      g++ \\\n+      gcc-arm-linux-gnueabihf \\\n+      git \\\n+      libc6-dev \\\n+      libc6-dev-armhf-cross \\\n+      make \\\n+      python2.7 \\\n+      qemu-system-arm \\\n+      xz-utils\n+\n+ENV ARCH=arm \\\n+    CROSS_COMPILE=arm-linux-gnueabihf-\n+\n+WORKDIR /build\n+\n+# Compile the kernel that we're going to run and be emulating with. This is\n+# basically just done to be compatible with the QEMU target that we're going\n+# to be using when running tests. If any other kernel works or if any\n+# other QEMU target works with some other stock kernel, we can use that too!\n+#\n+# The `vexpress_config` config file was a previously generated config file for\n+# the kernel. This file was generated by running `make vexpress_defconfig`\n+# followed by `make menuconfig` and then enabling the IPv6 protocol page.\n+COPY vexpress_config /build/.config\n+RUN curl https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.4.42.tar.xz | \\\n+      tar xJf - && \\\n+      cd /build/linux-4.4.42 && \\\n+      cp /build/.config . && \\\n+      make -j$(nproc) all && \\\n+      cp arch/arm/boot/zImage /tmp && \\\n+      cd /build &&  \\\n+      rm -rf linux-4.4.42\n+\n+# Compile an instance of busybox as this provides a lightweight system and init\n+# binary which we will boot into. Only trick here is configuring busybox to\n+# build static binaries.\n+RUN curl https://www.busybox.net/downloads/busybox-1.21.1.tar.bz2 | tar xjf - && \\\n+      cd busybox-1.21.1 && \\\n+      make defconfig && \\\n+      sed -i 's/.*CONFIG_STATIC.*/CONFIG_STATIC=y/' .config && \\\n+      make -j$(nproc) && \\\n+      make install && \\\n+      mv _install /tmp/rootfs && \\\n+      cd /build && \\\n+      rm -rf busybox-1.12.1\n+\n+# Download the ubuntu rootfs, which we'll use as a chroot for all our tests.\n+WORKDIR /tmp\n+RUN mkdir rootfs/ubuntu\n+RUN curl http://cdimage.ubuntu.com/ubuntu-base/releases/16.04/release/ubuntu-base-16.04-core-armhf.tar.gz | \\\n+      tar xzf - -C rootfs/ubuntu && \\\n+      cd rootfs && mkdir proc sys dev etc etc/init.d\n+\n+# Copy over our init script, which starts up our test server and also a few\n+# other misc tasks.\n+COPY rcS rootfs/etc/init.d/rcS\n+RUN chmod +x rootfs/etc/init.d/rcS\n+\n+# Helper to quickly fill the entropy pool in the kernel.\n+COPY addentropy.c /tmp/\n+RUN arm-linux-gnueabihf-gcc addentropy.c -o rootfs/addentropy -static\n+\n+# TODO: What is this?!\n+RUN curl -O http://ftp.nl.debian.org/debian/dists/jessie/main/installer-armhf/current/images/device-tree/vexpress-v2p-ca15-tc1.dtb\n+\n+ENV SCCACHE_DIGEST=7237e38e029342fa27b7ac25412cb9d52554008b12389727320bd533fd7f05b6a96d55485f305caf95e5c8f5f97c3313e10012ccad3e752aba2518f3522ba783\n+RUN curl -L https://api.pub.build.mozilla.org/tooltool/sha512/$SCCACHE_DIGEST | \\\n+      tar xJf - -C /usr/local/bin --strip-components=1\n+\n+RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n+    dpkg -i dumb-init_*.deb && \\\n+    rm dumb-init_*.deb\n+ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n+\n+ENV RUST_CONFIGURE_ARGS \\\n+      --target=arm-unknown-linux-gnueabihf \\\n+      --qemu-armhf-rootfs=/tmp/rootfs\n+ENV SCRIPT python2.7 ../x.py test --target arm-unknown-linux-gnueabihf\n+\n+ENV NO_CHANGE_USER=1"}, {"sha": "8975739e3c030d58fd4e3c3218a11ea8e314c314", "filename": "src/ci/docker/armhf-gnu/addentropy.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fci%2Fdocker%2Farmhf-gnu%2Faddentropy.c", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fci%2Fdocker%2Farmhf-gnu%2Faddentropy.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farmhf-gnu%2Faddentropy.c?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#include <assert.h>\n+#include <stdint.h>\n+#include <sys/ioctl.h>\n+#include <stdio.h>\n+#include <unistd.h>\n+#include <fcntl.h>\n+#include <linux/random.h>\n+\n+#define N 2048\n+\n+struct entropy {\n+  int ent_count;\n+  int size;\n+  unsigned char data[N];\n+};\n+\n+int main() {\n+  struct entropy buf;\n+  ssize_t n;\n+\n+  int random_fd = open(\"/dev/random\", O_RDWR);\n+  assert(random_fd >= 0);\n+\n+  while ((n = read(0, &buf.data, N)) > 0) {\n+    buf.ent_count = n * 8;\n+    buf.size = n;\n+    if (ioctl(random_fd, RNDADDENTROPY, &buf) != 0) {\n+      perror(\"failed to add entropy\");\n+    }\n+  }\n+\n+  return 0;\n+}"}, {"sha": "3c29bedc13c997797cf6a69d769c34d4dcfc7b88", "filename": "src/ci/docker/armhf-gnu/rcS", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fci%2Fdocker%2Farmhf-gnu%2FrcS", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fci%2Fdocker%2Farmhf-gnu%2FrcS", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farmhf-gnu%2FrcS?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,28 @@\n+#!/bin/sh\n+mount -t proc none /proc\n+mount -t sysfs none /sys\n+/sbin/mdev -s\n+\n+# fill up our entropy pool, if we don't do this then anything with a hash map\n+# will likely block forever as the kernel is pretty unlikely to have enough\n+# entropy.\n+/addentropy < /addentropy\n+cat /dev/urandom | head -n 2048 | /addentropy\n+\n+# Set up IP that qemu expects. This confgures eth0 with the public IP that QEMU\n+# will communicate to as well as the loopback 127.0.0.1 address.\n+ifconfig eth0 10.0.2.15\n+ifconfig lo up\n+\n+# Configure DNS resolution of 'localhost' to work\n+echo 'hosts:      files dns' >> /ubuntu/etc/nsswitch.conf\n+echo '127.0.0.1    localhost' >> /ubuntu/etc/hosts\n+\n+# prepare the chroot\n+mount -t proc proc /ubuntu/proc/\n+mount --rbind /sys /ubuntu/sys/\n+mount --rbind /dev /ubuntu/dev/\n+\n+# Execute our `testd` inside the ubuntu chroot\n+cp /testd /ubuntu/testd\n+chroot /ubuntu /testd &"}, {"sha": "35835cff35dcf9f36fcf7bd309be9befe3c11863", "filename": "src/ci/docker/armhf-gnu/vexpress_config", "status": "added", "additions": 2910, "deletions": 0, "changes": 2910, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fci%2Fdocker%2Farmhf-gnu%2Fvexpress_config", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fci%2Fdocker%2Farmhf-gnu%2Fvexpress_config", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farmhf-gnu%2Fvexpress_config?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,2910 @@\n+#\n+# Automatically generated file; DO NOT EDIT.\n+# Linux/arm 4.4.42 Kernel Configuration\n+#\n+CONFIG_ARM=y\n+CONFIG_ARM_HAS_SG_CHAIN=y\n+CONFIG_MIGHT_HAVE_PCI=y\n+CONFIG_SYS_SUPPORTS_APM_EMULATION=y\n+CONFIG_HAVE_PROC_CPU=y\n+CONFIG_NO_IOPORT_MAP=y\n+CONFIG_STACKTRACE_SUPPORT=y\n+CONFIG_LOCKDEP_SUPPORT=y\n+CONFIG_TRACE_IRQFLAGS_SUPPORT=y\n+CONFIG_RWSEM_XCHGADD_ALGORITHM=y\n+CONFIG_FIX_EARLYCON_MEM=y\n+CONFIG_GENERIC_HWEIGHT=y\n+CONFIG_GENERIC_CALIBRATE_DELAY=y\n+CONFIG_NEED_DMA_MAP_STATE=y\n+CONFIG_ARCH_SUPPORTS_UPROBES=y\n+CONFIG_VECTORS_BASE=0xffff0000\n+CONFIG_ARM_PATCH_PHYS_VIRT=y\n+CONFIG_GENERIC_BUG=y\n+CONFIG_PGTABLE_LEVELS=2\n+CONFIG_DEFCONFIG_LIST=\"/lib/modules/$UNAME_RELEASE/.config\"\n+CONFIG_IRQ_WORK=y\n+CONFIG_BUILDTIME_EXTABLE_SORT=y\n+\n+#\n+# General setup\n+#\n+CONFIG_INIT_ENV_ARG_LIMIT=32\n+CONFIG_CROSS_COMPILE=\"\"\n+# CONFIG_COMPILE_TEST is not set\n+CONFIG_LOCALVERSION=\"\"\n+# CONFIG_LOCALVERSION_AUTO is not set\n+CONFIG_HAVE_KERNEL_GZIP=y\n+CONFIG_HAVE_KERNEL_LZMA=y\n+CONFIG_HAVE_KERNEL_XZ=y\n+CONFIG_HAVE_KERNEL_LZO=y\n+CONFIG_HAVE_KERNEL_LZ4=y\n+CONFIG_KERNEL_GZIP=y\n+# CONFIG_KERNEL_LZMA is not set\n+# CONFIG_KERNEL_XZ is not set\n+# CONFIG_KERNEL_LZO is not set\n+# CONFIG_KERNEL_LZ4 is not set\n+CONFIG_DEFAULT_HOSTNAME=\"(none)\"\n+CONFIG_SWAP=y\n+CONFIG_SYSVIPC=y\n+CONFIG_SYSVIPC_SYSCTL=y\n+# CONFIG_POSIX_MQUEUE is not set\n+CONFIG_CROSS_MEMORY_ATTACH=y\n+# CONFIG_FHANDLE is not set\n+CONFIG_USELIB=y\n+# CONFIG_AUDIT is not set\n+CONFIG_HAVE_ARCH_AUDITSYSCALL=y\n+\n+#\n+# IRQ subsystem\n+#\n+CONFIG_GENERIC_IRQ_PROBE=y\n+CONFIG_GENERIC_IRQ_SHOW=y\n+CONFIG_GENERIC_IRQ_SHOW_LEVEL=y\n+CONFIG_HARDIRQS_SW_RESEND=y\n+CONFIG_IRQ_DOMAIN=y\n+CONFIG_IRQ_DOMAIN_HIERARCHY=y\n+CONFIG_HANDLE_DOMAIN_IRQ=y\n+# CONFIG_IRQ_DOMAIN_DEBUG is not set\n+CONFIG_IRQ_FORCED_THREADING=y\n+CONFIG_SPARSE_IRQ=y\n+CONFIG_GENERIC_TIME_VSYSCALL=y\n+CONFIG_GENERIC_CLOCKEVENTS=y\n+CONFIG_ARCH_HAS_TICK_BROADCAST=y\n+CONFIG_GENERIC_CLOCKEVENTS_BROADCAST=y\n+\n+#\n+# Timers subsystem\n+#\n+CONFIG_HZ_PERIODIC=y\n+# CONFIG_NO_HZ_IDLE is not set\n+# CONFIG_NO_HZ_FULL is not set\n+# CONFIG_NO_HZ is not set\n+# CONFIG_HIGH_RES_TIMERS is not set\n+\n+#\n+# CPU/Task time and stats accounting\n+#\n+CONFIG_TICK_CPU_ACCOUNTING=y\n+# CONFIG_VIRT_CPU_ACCOUNTING_GEN is not set\n+# CONFIG_IRQ_TIME_ACCOUNTING is not set\n+# CONFIG_BSD_PROCESS_ACCT is not set\n+# CONFIG_TASKSTATS is not set\n+\n+#\n+# RCU Subsystem\n+#\n+CONFIG_TREE_RCU=y\n+# CONFIG_RCU_EXPERT is not set\n+CONFIG_SRCU=y\n+# CONFIG_TASKS_RCU is not set\n+CONFIG_RCU_STALL_COMMON=y\n+# CONFIG_TREE_RCU_TRACE is not set\n+# CONFIG_RCU_EXPEDITE_BOOT is not set\n+CONFIG_BUILD_BIN2C=y\n+CONFIG_IKCONFIG=y\n+CONFIG_IKCONFIG_PROC=y\n+CONFIG_LOG_BUF_SHIFT=14\n+CONFIG_LOG_CPU_MAX_BUF_SHIFT=12\n+CONFIG_GENERIC_SCHED_CLOCK=y\n+CONFIG_CGROUPS=y\n+# CONFIG_CGROUP_DEBUG is not set\n+# CONFIG_CGROUP_FREEZER is not set\n+# CONFIG_CGROUP_PIDS is not set\n+# CONFIG_CGROUP_DEVICE is not set\n+CONFIG_CPUSETS=y\n+CONFIG_PROC_PID_CPUSET=y\n+# CONFIG_CGROUP_CPUACCT is not set\n+# CONFIG_MEMCG is not set\n+# CONFIG_CGROUP_PERF is not set\n+# CONFIG_CGROUP_SCHED is not set\n+# CONFIG_BLK_CGROUP is not set\n+# CONFIG_CHECKPOINT_RESTORE is not set\n+CONFIG_NAMESPACES=y\n+# CONFIG_UTS_NS is not set\n+# CONFIG_IPC_NS is not set\n+# CONFIG_USER_NS is not set\n+# CONFIG_PID_NS is not set\n+# CONFIG_NET_NS is not set\n+# CONFIG_SCHED_AUTOGROUP is not set\n+# CONFIG_SYSFS_DEPRECATED is not set\n+# CONFIG_RELAY is not set\n+CONFIG_BLK_DEV_INITRD=y\n+CONFIG_INITRAMFS_SOURCE=\"\"\n+CONFIG_RD_GZIP=y\n+CONFIG_RD_BZIP2=y\n+CONFIG_RD_LZMA=y\n+CONFIG_RD_XZ=y\n+CONFIG_RD_LZO=y\n+CONFIG_RD_LZ4=y\n+# CONFIG_CC_OPTIMIZE_FOR_SIZE is not set\n+CONFIG_SYSCTL=y\n+CONFIG_ANON_INODES=y\n+CONFIG_HAVE_UID16=y\n+CONFIG_BPF=y\n+# CONFIG_EXPERT is not set\n+CONFIG_UID16=y\n+CONFIG_MULTIUSER=y\n+# CONFIG_SGETMASK_SYSCALL is not set\n+CONFIG_SYSFS_SYSCALL=y\n+# CONFIG_SYSCTL_SYSCALL is not set\n+CONFIG_KALLSYMS=y\n+# CONFIG_KALLSYMS_ALL is not set\n+CONFIG_PRINTK=y\n+CONFIG_BUG=y\n+CONFIG_ELF_CORE=y\n+CONFIG_BASE_FULL=y\n+CONFIG_FUTEX=y\n+CONFIG_EPOLL=y\n+CONFIG_SIGNALFD=y\n+CONFIG_TIMERFD=y\n+CONFIG_EVENTFD=y\n+# CONFIG_BPF_SYSCALL is not set\n+CONFIG_SHMEM=y\n+CONFIG_AIO=y\n+CONFIG_ADVISE_SYSCALLS=y\n+# CONFIG_USERFAULTFD is not set\n+CONFIG_MEMBARRIER=y\n+# CONFIG_EMBEDDED is not set\n+CONFIG_HAVE_PERF_EVENTS=y\n+CONFIG_PERF_USE_VMALLOC=y\n+\n+#\n+# Kernel Performance Events And Counters\n+#\n+CONFIG_PERF_EVENTS=y\n+# CONFIG_DEBUG_PERF_USE_VMALLOC is not set\n+CONFIG_VM_EVENT_COUNTERS=y\n+CONFIG_SLUB_DEBUG=y\n+CONFIG_COMPAT_BRK=y\n+# CONFIG_SLAB is not set\n+CONFIG_SLUB=y\n+CONFIG_SLUB_CPU_PARTIAL=y\n+# CONFIG_SYSTEM_DATA_VERIFICATION is not set\n+CONFIG_PROFILING=y\n+CONFIG_OPROFILE=y\n+CONFIG_HAVE_OPROFILE=y\n+# CONFIG_KPROBES is not set\n+# CONFIG_JUMP_LABEL is not set\n+# CONFIG_UPROBES is not set\n+# CONFIG_HAVE_64BIT_ALIGNED_ACCESS is not set\n+CONFIG_HAVE_EFFICIENT_UNALIGNED_ACCESS=y\n+CONFIG_ARCH_USE_BUILTIN_BSWAP=y\n+CONFIG_HAVE_KPROBES=y\n+CONFIG_HAVE_KRETPROBES=y\n+CONFIG_HAVE_OPTPROBES=y\n+CONFIG_HAVE_ARCH_TRACEHOOK=y\n+CONFIG_HAVE_DMA_ATTRS=y\n+CONFIG_HAVE_DMA_CONTIGUOUS=y\n+CONFIG_GENERIC_SMP_IDLE_THREAD=y\n+CONFIG_GENERIC_IDLE_POLL_SETUP=y\n+CONFIG_HAVE_REGS_AND_STACK_ACCESS_API=y\n+CONFIG_HAVE_CLK=y\n+CONFIG_HAVE_DMA_API_DEBUG=y\n+CONFIG_HAVE_HW_BREAKPOINT=y\n+CONFIG_HAVE_PERF_REGS=y\n+CONFIG_HAVE_PERF_USER_STACK_DUMP=y\n+CONFIG_HAVE_ARCH_JUMP_LABEL=y\n+CONFIG_ARCH_WANT_IPC_PARSE_VERSION=y\n+CONFIG_HAVE_ARCH_SECCOMP_FILTER=y\n+CONFIG_HAVE_CC_STACKPROTECTOR=y\n+# CONFIG_CC_STACKPROTECTOR is not set\n+CONFIG_CC_STACKPROTECTOR_NONE=y\n+# CONFIG_CC_STACKPROTECTOR_REGULAR is not set\n+# CONFIG_CC_STACKPROTECTOR_STRONG is not set\n+CONFIG_HAVE_CONTEXT_TRACKING=y\n+CONFIG_HAVE_VIRT_CPU_ACCOUNTING_GEN=y\n+CONFIG_HAVE_IRQ_TIME_ACCOUNTING=y\n+CONFIG_HAVE_MOD_ARCH_SPECIFIC=y\n+CONFIG_MODULES_USE_ELF_REL=y\n+CONFIG_ARCH_HAS_ELF_RANDOMIZE=y\n+CONFIG_CLONE_BACKWARDS=y\n+CONFIG_OLD_SIGSUSPEND3=y\n+CONFIG_OLD_SIGACTION=y\n+\n+#\n+# GCOV-based kernel profiling\n+#\n+# CONFIG_GCOV_KERNEL is not set\n+CONFIG_ARCH_HAS_GCOV_PROFILE_ALL=y\n+CONFIG_HAVE_GENERIC_DMA_COHERENT=y\n+CONFIG_SLABINFO=y\n+CONFIG_RT_MUTEXES=y\n+CONFIG_BASE_SMALL=0\n+CONFIG_MODULES=y\n+# CONFIG_MODULE_FORCE_LOAD is not set\n+CONFIG_MODULE_UNLOAD=y\n+# CONFIG_MODULE_FORCE_UNLOAD is not set\n+# CONFIG_MODVERSIONS is not set\n+# CONFIG_MODULE_SRCVERSION_ALL is not set\n+# CONFIG_MODULE_SIG is not set\n+# CONFIG_MODULE_COMPRESS is not set\n+CONFIG_MODULES_TREE_LOOKUP=y\n+CONFIG_BLOCK=y\n+# CONFIG_LBDAF is not set\n+# CONFIG_BLK_DEV_BSG is not set\n+# CONFIG_BLK_DEV_BSGLIB is not set\n+# CONFIG_BLK_DEV_INTEGRITY is not set\n+# CONFIG_BLK_CMDLINE_PARSER is not set\n+\n+#\n+# Partition Types\n+#\n+# CONFIG_PARTITION_ADVANCED is not set\n+CONFIG_MSDOS_PARTITION=y\n+CONFIG_EFI_PARTITION=y\n+\n+#\n+# IO Schedulers\n+#\n+CONFIG_IOSCHED_NOOP=y\n+# CONFIG_IOSCHED_DEADLINE is not set\n+# CONFIG_IOSCHED_CFQ is not set\n+CONFIG_DEFAULT_NOOP=y\n+CONFIG_DEFAULT_IOSCHED=\"noop\"\n+CONFIG_INLINE_SPIN_UNLOCK_IRQ=y\n+CONFIG_INLINE_READ_UNLOCK=y\n+CONFIG_INLINE_READ_UNLOCK_IRQ=y\n+CONFIG_INLINE_WRITE_UNLOCK=y\n+CONFIG_INLINE_WRITE_UNLOCK_IRQ=y\n+CONFIG_ARCH_SUPPORTS_ATOMIC_RMW=y\n+CONFIG_MUTEX_SPIN_ON_OWNER=y\n+CONFIG_RWSEM_SPIN_ON_OWNER=y\n+CONFIG_LOCK_SPIN_ON_OWNER=y\n+CONFIG_FREEZER=y\n+\n+#\n+# System Type\n+#\n+CONFIG_MMU=y\n+CONFIG_ARCH_MULTIPLATFORM=y\n+# CONFIG_ARCH_REALVIEW is not set\n+# CONFIG_ARCH_VERSATILE is not set\n+# CONFIG_ARCH_CLPS711X is not set\n+# CONFIG_ARCH_GEMINI is not set\n+# CONFIG_ARCH_EBSA110 is not set\n+# CONFIG_ARCH_EP93XX is not set\n+# CONFIG_ARCH_FOOTBRIDGE is not set\n+# CONFIG_ARCH_NETX is not set\n+# CONFIG_ARCH_IOP13XX is not set\n+# CONFIG_ARCH_IOP32X is not set\n+# CONFIG_ARCH_IOP33X is not set\n+# CONFIG_ARCH_IXP4XX is not set\n+# CONFIG_ARCH_DOVE is not set\n+# CONFIG_ARCH_MV78XX0 is not set\n+# CONFIG_ARCH_ORION5X is not set\n+# CONFIG_ARCH_MMP is not set\n+# CONFIG_ARCH_KS8695 is not set\n+# CONFIG_ARCH_W90X900 is not set\n+# CONFIG_ARCH_LPC32XX is not set\n+# CONFIG_ARCH_PXA is not set\n+# CONFIG_ARCH_RPC is not set\n+# CONFIG_ARCH_SA1100 is not set\n+# CONFIG_ARCH_S3C24XX is not set\n+# CONFIG_ARCH_S3C64XX is not set\n+# CONFIG_ARCH_DAVINCI is not set\n+# CONFIG_ARCH_OMAP1 is not set\n+\n+#\n+# Multiple platform selection\n+#\n+\n+#\n+# CPU Core family selection\n+#\n+# CONFIG_ARCH_MULTI_V6 is not set\n+CONFIG_ARCH_MULTI_V7=y\n+CONFIG_ARCH_MULTI_V6_V7=y\n+# CONFIG_ARCH_MULTI_CPU_AUTO is not set\n+# CONFIG_ARCH_VIRT is not set\n+# CONFIG_ARCH_MVEBU is not set\n+# CONFIG_ARCH_ALPINE is not set\n+# CONFIG_ARCH_AT91 is not set\n+# CONFIG_ARCH_BCM is not set\n+# CONFIG_ARCH_BERLIN is not set\n+# CONFIG_ARCH_DIGICOLOR is not set\n+# CONFIG_ARCH_HIGHBANK is not set\n+# CONFIG_ARCH_HISI is not set\n+# CONFIG_ARCH_KEYSTONE is not set\n+# CONFIG_ARCH_MESON is not set\n+# CONFIG_ARCH_MXC is not set\n+# CONFIG_ARCH_MEDIATEK is not set\n+\n+#\n+# TI OMAP/AM/DM/DRA Family\n+#\n+# CONFIG_ARCH_OMAP3 is not set\n+# CONFIG_ARCH_OMAP4 is not set\n+# CONFIG_SOC_OMAP5 is not set\n+# CONFIG_SOC_AM33XX is not set\n+# CONFIG_SOC_AM43XX is not set\n+# CONFIG_SOC_DRA7XX is not set\n+# CONFIG_ARCH_QCOM is not set\n+# CONFIG_ARCH_ROCKCHIP is not set\n+# CONFIG_ARCH_SOCFPGA is not set\n+# CONFIG_PLAT_SPEAR is not set\n+# CONFIG_ARCH_STI is not set\n+# CONFIG_ARCH_S5PV210 is not set\n+# CONFIG_ARCH_EXYNOS is not set\n+# CONFIG_ARCH_SHMOBILE_MULTI is not set\n+# CONFIG_ARCH_SUNXI is not set\n+# CONFIG_ARCH_SIRF is not set\n+# CONFIG_ARCH_TEGRA is not set\n+# CONFIG_ARCH_UNIPHIER is not set\n+# CONFIG_ARCH_U8500 is not set\n+CONFIG_ARCH_VEXPRESS=y\n+CONFIG_ARCH_VEXPRESS_CORTEX_A5_A9_ERRATA=y\n+CONFIG_ARCH_VEXPRESS_DCSCB=y\n+CONFIG_ARCH_VEXPRESS_SPC=y\n+CONFIG_ARCH_VEXPRESS_TC2_PM=y\n+# CONFIG_ARCH_WM8850 is not set\n+# CONFIG_ARCH_ZX is not set\n+# CONFIG_ARCH_ZYNQ is not set\n+CONFIG_PLAT_VERSATILE=y\n+\n+#\n+# Processor Type\n+#\n+CONFIG_CPU_V7=y\n+CONFIG_CPU_32v6K=y\n+CONFIG_CPU_32v7=y\n+CONFIG_CPU_ABRT_EV7=y\n+CONFIG_CPU_PABRT_V7=y\n+CONFIG_CPU_CACHE_V7=y\n+CONFIG_CPU_CACHE_VIPT=y\n+CONFIG_CPU_COPY_V6=y\n+CONFIG_CPU_TLB_V7=y\n+CONFIG_CPU_HAS_ASID=y\n+CONFIG_CPU_CP15=y\n+CONFIG_CPU_CP15_MMU=y\n+\n+#\n+# Processor Features\n+#\n+# CONFIG_ARM_LPAE is not set\n+# CONFIG_ARCH_PHYS_ADDR_T_64BIT is not set\n+CONFIG_ARM_THUMB=y\n+# CONFIG_ARM_THUMBEE is not set\n+CONFIG_ARM_VIRT_EXT=y\n+CONFIG_SWP_EMULATE=y\n+# CONFIG_CPU_BIG_ENDIAN is not set\n+# CONFIG_CPU_ICACHE_DISABLE is not set\n+# CONFIG_CPU_BPREDICT_DISABLE is not set\n+CONFIG_KUSER_HELPERS=y\n+CONFIG_VDSO=y\n+CONFIG_OUTER_CACHE=y\n+CONFIG_OUTER_CACHE_SYNC=y\n+CONFIG_MIGHT_HAVE_CACHE_L2X0=y\n+CONFIG_CACHE_L2X0=y\n+# CONFIG_PL310_ERRATA_588369 is not set\n+# CONFIG_PL310_ERRATA_727915 is not set\n+CONFIG_PL310_ERRATA_753970=y\n+# CONFIG_PL310_ERRATA_769419 is not set\n+CONFIG_ARM_L1_CACHE_SHIFT_6=y\n+CONFIG_ARM_L1_CACHE_SHIFT=6\n+CONFIG_ARM_DMA_MEM_BUFFERABLE=y\n+CONFIG_ARM_HEAVY_MB=y\n+CONFIG_ARCH_SUPPORTS_BIG_ENDIAN=y\n+# CONFIG_ARM_KERNMEM_PERMS is not set\n+CONFIG_MULTI_IRQ_HANDLER=y\n+# CONFIG_ARM_ERRATA_430973 is not set\n+CONFIG_ARM_ERRATA_643719=y\n+CONFIG_ARM_ERRATA_720789=y\n+# CONFIG_ARM_ERRATA_754322 is not set\n+# CONFIG_ARM_ERRATA_754327 is not set\n+# CONFIG_ARM_ERRATA_764369 is not set\n+# CONFIG_ARM_ERRATA_775420 is not set\n+# CONFIG_ARM_ERRATA_798181 is not set\n+# CONFIG_ARM_ERRATA_773022 is not set\n+CONFIG_ICST=y\n+\n+#\n+# Bus support\n+#\n+# CONFIG_PCI is not set\n+# CONFIG_PCI_DOMAINS_GENERIC is not set\n+# CONFIG_PCI_SYSCALL is not set\n+# CONFIG_PCCARD is not set\n+\n+#\n+# Kernel Features\n+#\n+CONFIG_HAVE_SMP=y\n+CONFIG_SMP=y\n+CONFIG_SMP_ON_UP=y\n+CONFIG_ARM_CPU_TOPOLOGY=y\n+# CONFIG_SCHED_MC is not set\n+# CONFIG_SCHED_SMT is not set\n+CONFIG_HAVE_ARM_SCU=y\n+CONFIG_HAVE_ARM_ARCH_TIMER=y\n+CONFIG_HAVE_ARM_TWD=y\n+CONFIG_MCPM=y\n+# CONFIG_BIG_LITTLE is not set\n+# CONFIG_VMSPLIT_3G is not set\n+# CONFIG_VMSPLIT_3G_OPT is not set\n+CONFIG_VMSPLIT_2G=y\n+# CONFIG_VMSPLIT_1G is not set\n+CONFIG_PAGE_OFFSET=0x80000000\n+CONFIG_NR_CPUS=8\n+CONFIG_HOTPLUG_CPU=y\n+CONFIG_ARM_PSCI=y\n+CONFIG_ARCH_NR_GPIO=0\n+CONFIG_PREEMPT_NONE=y\n+# CONFIG_PREEMPT_VOLUNTARY is not set\n+# CONFIG_PREEMPT is not set\n+CONFIG_HZ_FIXED=0\n+CONFIG_HZ_100=y\n+# CONFIG_HZ_200 is not set\n+# CONFIG_HZ_250 is not set\n+# CONFIG_HZ_300 is not set\n+# CONFIG_HZ_500 is not set\n+# CONFIG_HZ_1000 is not set\n+CONFIG_HZ=100\n+# CONFIG_SCHED_HRTICK is not set\n+# CONFIG_THUMB2_KERNEL is not set\n+CONFIG_AEABI=y\n+# CONFIG_OABI_COMPAT is not set\n+# CONFIG_ARCH_SPARSEMEM_DEFAULT is not set\n+# CONFIG_ARCH_SELECT_MEMORY_MODEL is not set\n+CONFIG_HAVE_ARCH_PFN_VALID=y\n+# CONFIG_HIGHMEM is not set\n+CONFIG_CPU_SW_DOMAIN_PAN=y\n+CONFIG_HW_PERF_EVENTS=y\n+CONFIG_ARCH_WANT_GENERAL_HUGETLB=y\n+# CONFIG_ARM_MODULE_PLTS is not set\n+CONFIG_FLATMEM=y\n+CONFIG_FLAT_NODE_MEM_MAP=y\n+CONFIG_HAVE_MEMBLOCK=y\n+CONFIG_NO_BOOTMEM=y\n+CONFIG_MEMORY_ISOLATION=y\n+# CONFIG_HAVE_BOOTMEM_INFO_NODE is not set\n+CONFIG_SPLIT_PTLOCK_CPUS=4\n+CONFIG_MEMORY_BALLOON=y\n+CONFIG_BALLOON_COMPACTION=y\n+CONFIG_COMPACTION=y\n+CONFIG_MIGRATION=y\n+# CONFIG_PHYS_ADDR_T_64BIT is not set\n+CONFIG_ZONE_DMA_FLAG=0\n+# CONFIG_KSM is not set\n+CONFIG_DEFAULT_MMAP_MIN_ADDR=4096\n+# CONFIG_CLEANCACHE is not set\n+# CONFIG_FRONTSWAP is not set\n+CONFIG_CMA=y\n+# CONFIG_CMA_DEBUG is not set\n+# CONFIG_CMA_DEBUGFS is not set\n+CONFIG_CMA_AREAS=7\n+# CONFIG_ZPOOL is not set\n+# CONFIG_ZBUD is not set\n+# CONFIG_ZSMALLOC is not set\n+# CONFIG_IDLE_PAGE_TRACKING is not set\n+CONFIG_FORCE_MAX_ZONEORDER=11\n+CONFIG_ALIGNMENT_TRAP=y\n+# CONFIG_UACCESS_WITH_MEMCPY is not set\n+# CONFIG_SECCOMP is not set\n+CONFIG_SWIOTLB=y\n+CONFIG_IOMMU_HELPER=y\n+# CONFIG_XEN is not set\n+\n+#\n+# Boot options\n+#\n+CONFIG_USE_OF=y\n+CONFIG_ATAGS=y\n+# CONFIG_DEPRECATED_PARAM_STRUCT is not set\n+CONFIG_ZBOOT_ROM_TEXT=0x0\n+CONFIG_ZBOOT_ROM_BSS=0x0\n+# CONFIG_ARM_APPENDED_DTB is not set\n+CONFIG_CMDLINE=\"console=ttyAMA0\"\n+CONFIG_CMDLINE_FROM_BOOTLOADER=y\n+# CONFIG_CMDLINE_EXTEND is not set\n+# CONFIG_CMDLINE_FORCE is not set\n+# CONFIG_KEXEC is not set\n+# CONFIG_CRASH_DUMP is not set\n+CONFIG_AUTO_ZRELADDR=y\n+\n+#\n+# CPU Power Management\n+#\n+\n+#\n+# CPU Frequency scaling\n+#\n+# CONFIG_CPU_FREQ is not set\n+\n+#\n+# CPU Idle\n+#\n+CONFIG_CPU_IDLE=y\n+CONFIG_CPU_IDLE_GOV_LADDER=y\n+CONFIG_CPU_IDLE_GOV_MENU=y\n+\n+#\n+# ARM CPU Idle Drivers\n+#\n+# CONFIG_ARM_CPUIDLE is not set\n+# CONFIG_ARM_BIG_LITTLE_CPUIDLE is not set\n+# CONFIG_ARM_HIGHBANK_CPUIDLE is not set\n+# CONFIG_ARCH_NEEDS_CPU_IDLE_COUPLED is not set\n+\n+#\n+# Floating point emulation\n+#\n+\n+#\n+# At least one emulation must be selected\n+#\n+CONFIG_VFP=y\n+CONFIG_VFPv3=y\n+CONFIG_NEON=y\n+# CONFIG_KERNEL_MODE_NEON is not set\n+\n+#\n+# Userspace binary formats\n+#\n+CONFIG_BINFMT_ELF=y\n+# CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS is not set\n+CONFIG_BINFMT_SCRIPT=y\n+# CONFIG_HAVE_AOUT is not set\n+# CONFIG_BINFMT_MISC is not set\n+CONFIG_COREDUMP=y\n+\n+#\n+# Power management options\n+#\n+CONFIG_SUSPEND=y\n+CONFIG_SUSPEND_FREEZER=y\n+# CONFIG_HIBERNATION is not set\n+CONFIG_PM_SLEEP=y\n+CONFIG_PM_SLEEP_SMP=y\n+# CONFIG_PM_AUTOSLEEP is not set\n+# CONFIG_PM_WAKELOCKS is not set\n+CONFIG_PM=y\n+# CONFIG_PM_DEBUG is not set\n+# CONFIG_APM_EMULATION is not set\n+CONFIG_PM_OPP=y\n+CONFIG_PM_CLK=y\n+# CONFIG_WQ_POWER_EFFICIENT_DEFAULT is not set\n+CONFIG_CPU_PM=y\n+CONFIG_ARCH_SUSPEND_POSSIBLE=y\n+CONFIG_ARM_CPU_SUSPEND=y\n+CONFIG_ARCH_HIBERNATION_POSSIBLE=y\n+CONFIG_NET=y\n+\n+#\n+# Networking options\n+#\n+CONFIG_PACKET=y\n+# CONFIG_PACKET_DIAG is not set\n+CONFIG_UNIX=y\n+# CONFIG_UNIX_DIAG is not set\n+CONFIG_XFRM=y\n+# CONFIG_XFRM_USER is not set\n+# CONFIG_XFRM_SUB_POLICY is not set\n+# CONFIG_XFRM_MIGRATE is not set\n+# CONFIG_XFRM_STATISTICS is not set\n+# CONFIG_NET_KEY is not set\n+CONFIG_INET=y\n+# CONFIG_IP_MULTICAST is not set\n+# CONFIG_IP_ADVANCED_ROUTER is not set\n+CONFIG_IP_PNP=y\n+CONFIG_IP_PNP_DHCP=y\n+CONFIG_IP_PNP_BOOTP=y\n+# CONFIG_IP_PNP_RARP is not set\n+# CONFIG_NET_IPIP is not set\n+# CONFIG_NET_IPGRE_DEMUX is not set\n+CONFIG_NET_IP_TUNNEL=m\n+# CONFIG_SYN_COOKIES is not set\n+# CONFIG_NET_IPVTI is not set\n+# CONFIG_NET_UDP_TUNNEL is not set\n+# CONFIG_NET_FOU is not set\n+# CONFIG_NET_FOU_IP_TUNNELS is not set\n+# CONFIG_INET_AH is not set\n+# CONFIG_INET_ESP is not set\n+# CONFIG_INET_IPCOMP is not set\n+# CONFIG_INET_XFRM_TUNNEL is not set\n+CONFIG_INET_TUNNEL=m\n+CONFIG_INET_XFRM_MODE_TRANSPORT=y\n+CONFIG_INET_XFRM_MODE_TUNNEL=y\n+CONFIG_INET_XFRM_MODE_BEET=y\n+# CONFIG_INET_LRO is not set\n+CONFIG_INET_DIAG=y\n+CONFIG_INET_TCP_DIAG=y\n+# CONFIG_INET_UDP_DIAG is not set\n+# CONFIG_TCP_CONG_ADVANCED is not set\n+CONFIG_TCP_CONG_CUBIC=y\n+CONFIG_DEFAULT_TCP_CONG=\"cubic\"\n+# CONFIG_TCP_MD5SIG is not set\n+CONFIG_IPV6=y\n+# CONFIG_IPV6_ROUTER_PREF is not set\n+# CONFIG_IPV6_OPTIMISTIC_DAD is not set\n+# CONFIG_INET6_AH is not set\n+# CONFIG_INET6_ESP is not set\n+# CONFIG_INET6_IPCOMP is not set\n+# CONFIG_IPV6_MIP6 is not set\n+# CONFIG_IPV6_ILA is not set\n+# CONFIG_INET6_XFRM_TUNNEL is not set\n+# CONFIG_INET6_TUNNEL is not set\n+CONFIG_INET6_XFRM_MODE_TRANSPORT=m\n+CONFIG_INET6_XFRM_MODE_TUNNEL=m\n+CONFIG_INET6_XFRM_MODE_BEET=m\n+# CONFIG_INET6_XFRM_MODE_ROUTEOPTIMIZATION is not set\n+# CONFIG_IPV6_VTI is not set\n+CONFIG_IPV6_SIT=m\n+# CONFIG_IPV6_SIT_6RD is not set\n+CONFIG_IPV6_NDISC_NODETYPE=y\n+# CONFIG_IPV6_TUNNEL is not set\n+# CONFIG_IPV6_GRE is not set\n+# CONFIG_IPV6_MULTIPLE_TABLES is not set\n+# CONFIG_IPV6_MROUTE is not set\n+# CONFIG_NETWORK_SECMARK is not set\n+# CONFIG_NET_PTP_CLASSIFY is not set\n+# CONFIG_NETWORK_PHY_TIMESTAMPING is not set\n+# CONFIG_NETFILTER is not set\n+# CONFIG_IP_DCCP is not set\n+# CONFIG_IP_SCTP is not set\n+# CONFIG_RDS is not set\n+# CONFIG_TIPC is not set\n+# CONFIG_ATM is not set\n+# CONFIG_L2TP is not set\n+# CONFIG_BRIDGE is not set\n+CONFIG_HAVE_NET_DSA=y\n+# CONFIG_VLAN_8021Q is not set\n+# CONFIG_DECNET is not set\n+# CONFIG_LLC2 is not set\n+# CONFIG_IPX is not set\n+# CONFIG_ATALK is not set\n+# CONFIG_X25 is not set\n+# CONFIG_LAPB is not set\n+# CONFIG_PHONET is not set\n+# CONFIG_6LOWPAN is not set\n+# CONFIG_IEEE802154 is not set\n+# CONFIG_NET_SCHED is not set\n+# CONFIG_DCB is not set\n+# CONFIG_BATMAN_ADV is not set\n+# CONFIG_OPENVSWITCH is not set\n+# CONFIG_VSOCKETS is not set\n+# CONFIG_NETLINK_MMAP is not set\n+# CONFIG_NETLINK_DIAG is not set\n+# CONFIG_MPLS is not set\n+# CONFIG_HSR is not set\n+# CONFIG_NET_SWITCHDEV is not set\n+# CONFIG_NET_L3_MASTER_DEV is not set\n+CONFIG_RPS=y\n+CONFIG_RFS_ACCEL=y\n+CONFIG_XPS=y\n+# CONFIG_CGROUP_NET_PRIO is not set\n+# CONFIG_CGROUP_NET_CLASSID is not set\n+CONFIG_NET_RX_BUSY_POLL=y\n+CONFIG_BQL=y\n+# CONFIG_BPF_JIT is not set\n+CONFIG_NET_FLOW_LIMIT=y\n+\n+#\n+# Network testing\n+#\n+# CONFIG_NET_PKTGEN is not set\n+# CONFIG_HAMRADIO is not set\n+# CONFIG_CAN is not set\n+# CONFIG_IRDA is not set\n+# CONFIG_BT is not set\n+# CONFIG_AF_RXRPC is not set\n+# CONFIG_WIRELESS is not set\n+# CONFIG_WIMAX is not set\n+# CONFIG_RFKILL is not set\n+# CONFIG_RFKILL_REGULATOR is not set\n+CONFIG_NET_9P=y\n+CONFIG_NET_9P_VIRTIO=y\n+# CONFIG_NET_9P_DEBUG is not set\n+# CONFIG_CAIF is not set\n+# CONFIG_CEPH_LIB is not set\n+# CONFIG_NFC is not set\n+# CONFIG_LWTUNNEL is not set\n+CONFIG_HAVE_BPF_JIT=y\n+\n+#\n+# Device Drivers\n+#\n+CONFIG_ARM_AMBA=y\n+# CONFIG_TEGRA_AHB is not set\n+\n+#\n+# Generic Driver Options\n+#\n+CONFIG_UEVENT_HELPER=y\n+CONFIG_UEVENT_HELPER_PATH=\"/sbin/hotplug\"\n+CONFIG_DEVTMPFS=y\n+# CONFIG_DEVTMPFS_MOUNT is not set\n+CONFIG_STANDALONE=y\n+CONFIG_PREVENT_FIRMWARE_BUILD=y\n+CONFIG_FW_LOADER=y\n+CONFIG_FIRMWARE_IN_KERNEL=y\n+CONFIG_EXTRA_FIRMWARE=\"\"\n+# CONFIG_FW_LOADER_USER_HELPER_FALLBACK is not set\n+CONFIG_ALLOW_DEV_COREDUMP=y\n+# CONFIG_DEBUG_DRIVER is not set\n+# CONFIG_DEBUG_DEVRES is not set\n+# CONFIG_SYS_HYPERVISOR is not set\n+# CONFIG_GENERIC_CPU_DEVICES is not set\n+CONFIG_REGMAP=y\n+CONFIG_REGMAP_MMIO=y\n+# CONFIG_DMA_SHARED_BUFFER is not set\n+# CONFIG_DMA_CMA is not set\n+\n+#\n+# Bus devices\n+#\n+CONFIG_ARM_CCI=y\n+CONFIG_ARM_CCI400_COMMON=y\n+# CONFIG_ARM_CCI400_PMU is not set\n+CONFIG_ARM_CCI400_PORT_CTRL=y\n+# CONFIG_ARM_CCI500_PMU is not set\n+# CONFIG_ARM_CCN is not set\n+# CONFIG_BRCMSTB_GISB_ARB is not set\n+CONFIG_VEXPRESS_CONFIG=y\n+# CONFIG_CONNECTOR is not set\n+CONFIG_MTD=y\n+# CONFIG_MTD_TESTS is not set\n+# CONFIG_MTD_REDBOOT_PARTS is not set\n+CONFIG_MTD_CMDLINE_PARTS=y\n+# CONFIG_MTD_AFS_PARTS is not set\n+CONFIG_MTD_OF_PARTS=y\n+# CONFIG_MTD_AR7_PARTS is not set\n+\n+#\n+# User Modules And Translation Layers\n+#\n+CONFIG_MTD_BLKDEVS=y\n+CONFIG_MTD_BLOCK=y\n+# CONFIG_FTL is not set\n+# CONFIG_NFTL is not set\n+# CONFIG_INFTL is not set\n+# CONFIG_RFD_FTL is not set\n+# CONFIG_SSFDC is not set\n+# CONFIG_SM_FTL is not set\n+# CONFIG_MTD_OOPS is not set\n+# CONFIG_MTD_SWAP is not set\n+# CONFIG_MTD_PARTITIONED_MASTER is not set\n+\n+#\n+# RAM/ROM/Flash chip drivers\n+#\n+CONFIG_MTD_CFI=y\n+# CONFIG_MTD_JEDECPROBE is not set\n+CONFIG_MTD_GEN_PROBE=y\n+# CONFIG_MTD_CFI_ADV_OPTIONS is not set\n+CONFIG_MTD_MAP_BANK_WIDTH_1=y\n+CONFIG_MTD_MAP_BANK_WIDTH_2=y\n+CONFIG_MTD_MAP_BANK_WIDTH_4=y\n+# CONFIG_MTD_MAP_BANK_WIDTH_8 is not set\n+# CONFIG_MTD_MAP_BANK_WIDTH_16 is not set\n+# CONFIG_MTD_MAP_BANK_WIDTH_32 is not set\n+CONFIG_MTD_CFI_I1=y\n+CONFIG_MTD_CFI_I2=y\n+# CONFIG_MTD_CFI_I4 is not set\n+# CONFIG_MTD_CFI_I8 is not set\n+CONFIG_MTD_CFI_INTELEXT=y\n+CONFIG_MTD_CFI_AMDSTD=y\n+# CONFIG_MTD_CFI_STAA is not set\n+CONFIG_MTD_CFI_UTIL=y\n+CONFIG_MTD_RAM=y\n+# CONFIG_MTD_ROM is not set\n+# CONFIG_MTD_ABSENT is not set\n+\n+#\n+# Mapping drivers for chip access\n+#\n+# CONFIG_MTD_COMPLEX_MAPPINGS is not set\n+CONFIG_MTD_PHYSMAP=y\n+# CONFIG_MTD_PHYSMAP_COMPAT is not set\n+CONFIG_MTD_PHYSMAP_OF=y\n+CONFIG_MTD_PLATRAM=y\n+\n+#\n+# Self-contained MTD device drivers\n+#\n+# CONFIG_MTD_SLRAM is not set\n+# CONFIG_MTD_PHRAM is not set\n+# CONFIG_MTD_MTDRAM is not set\n+# CONFIG_MTD_BLOCK2MTD is not set\n+\n+#\n+# Disk-On-Chip Device Drivers\n+#\n+# CONFIG_MTD_DOCG3 is not set\n+# CONFIG_MTD_NAND is not set\n+# CONFIG_MTD_ONENAND is not set\n+\n+#\n+# LPDDR & LPDDR2 PCM memory drivers\n+#\n+# CONFIG_MTD_LPDDR is not set\n+# CONFIG_MTD_LPDDR2_NVM is not set\n+# CONFIG_MTD_SPI_NOR is not set\n+CONFIG_MTD_UBI=y\n+CONFIG_MTD_UBI_WL_THRESHOLD=4096\n+CONFIG_MTD_UBI_BEB_LIMIT=20\n+# CONFIG_MTD_UBI_FASTMAP is not set\n+# CONFIG_MTD_UBI_GLUEBI is not set\n+# CONFIG_MTD_UBI_BLOCK is not set\n+CONFIG_DTC=y\n+CONFIG_OF=y\n+# CONFIG_OF_UNITTEST is not set\n+CONFIG_OF_FLATTREE=y\n+CONFIG_OF_EARLY_FLATTREE=y\n+CONFIG_OF_ADDRESS=y\n+CONFIG_OF_IRQ=y\n+CONFIG_OF_NET=y\n+CONFIG_OF_MDIO=y\n+CONFIG_OF_MTD=y\n+CONFIG_OF_RESERVED_MEM=y\n+# CONFIG_OF_OVERLAY is not set\n+CONFIG_ARCH_MIGHT_HAVE_PC_PARPORT=y\n+# CONFIG_PARPORT is not set\n+CONFIG_BLK_DEV=y\n+# CONFIG_BLK_DEV_NULL_BLK is not set\n+# CONFIG_BLK_DEV_COW_COMMON is not set\n+# CONFIG_BLK_DEV_LOOP is not set\n+# CONFIG_BLK_DEV_DRBD is not set\n+# CONFIG_BLK_DEV_NBD is not set\n+# CONFIG_BLK_DEV_RAM is not set\n+# CONFIG_CDROM_PKTCDVD is not set\n+# CONFIG_ATA_OVER_ETH is not set\n+# CONFIG_MG_DISK is not set\n+CONFIG_VIRTIO_BLK=y\n+# CONFIG_BLK_DEV_RBD is not set\n+\n+#\n+# Misc devices\n+#\n+# CONFIG_SENSORS_LIS3LV02D is not set\n+# CONFIG_AD525X_DPOT is not set\n+# CONFIG_DUMMY_IRQ is not set\n+# CONFIG_ICS932S401 is not set\n+# CONFIG_ENCLOSURE_SERVICES is not set\n+# CONFIG_APDS9802ALS is not set\n+# CONFIG_ISL29003 is not set\n+# CONFIG_ISL29020 is not set\n+# CONFIG_SENSORS_TSL2550 is not set\n+# CONFIG_SENSORS_BH1780 is not set\n+# CONFIG_SENSORS_BH1770 is not set\n+# CONFIG_SENSORS_APDS990X is not set\n+# CONFIG_HMC6352 is not set\n+# CONFIG_DS1682 is not set\n+# CONFIG_ARM_CHARLCD is not set\n+# CONFIG_BMP085_I2C is not set\n+# CONFIG_USB_SWITCH_FSA9480 is not set\n+# CONFIG_SRAM is not set\n+CONFIG_VEXPRESS_SYSCFG=y\n+# CONFIG_C2PORT is not set\n+\n+#\n+# EEPROM support\n+#\n+# CONFIG_EEPROM_AT24 is not set\n+# CONFIG_EEPROM_LEGACY is not set\n+# CONFIG_EEPROM_MAX6875 is not set\n+# CONFIG_EEPROM_93CX6 is not set\n+\n+#\n+# Texas Instruments shared transport line discipline\n+#\n+# CONFIG_TI_ST is not set\n+# CONFIG_SENSORS_LIS3_I2C is not set\n+\n+#\n+# Altera FPGA firmware download module\n+#\n+# CONFIG_ALTERA_STAPL is not set\n+\n+#\n+# Intel MIC Bus Driver\n+#\n+\n+#\n+# SCIF Bus Driver\n+#\n+\n+#\n+# Intel MIC Host Driver\n+#\n+\n+#\n+# Intel MIC Card Driver\n+#\n+\n+#\n+# SCIF Driver\n+#\n+\n+#\n+# Intel MIC Coprocessor State Management (COSM) Drivers\n+#\n+# CONFIG_ECHO is not set\n+# CONFIG_CXL_BASE is not set\n+# CONFIG_CXL_KERNEL_API is not set\n+# CONFIG_CXL_EEH is not set\n+\n+#\n+# SCSI device support\n+#\n+CONFIG_SCSI_MOD=y\n+# CONFIG_RAID_ATTRS is not set\n+CONFIG_SCSI=y\n+CONFIG_SCSI_DMA=y\n+# CONFIG_SCSI_NETLINK is not set\n+# CONFIG_SCSI_MQ_DEFAULT is not set\n+# CONFIG_SCSI_PROC_FS is not set\n+\n+#\n+# SCSI support type (disk, tape, CD-ROM)\n+#\n+CONFIG_BLK_DEV_SD=y\n+# CONFIG_CHR_DEV_ST is not set\n+# CONFIG_CHR_DEV_OSST is not set\n+# CONFIG_BLK_DEV_SR is not set\n+# CONFIG_CHR_DEV_SG is not set\n+# CONFIG_CHR_DEV_SCH is not set\n+# CONFIG_SCSI_CONSTANTS is not set\n+# CONFIG_SCSI_LOGGING is not set\n+# CONFIG_SCSI_SCAN_ASYNC is not set\n+\n+#\n+# SCSI Transports\n+#\n+# CONFIG_SCSI_SPI_ATTRS is not set\n+# CONFIG_SCSI_FC_ATTRS is not set\n+# CONFIG_SCSI_ISCSI_ATTRS is not set\n+# CONFIG_SCSI_SAS_ATTRS is not set\n+# CONFIG_SCSI_SAS_LIBSAS is not set\n+# CONFIG_SCSI_SRP_ATTRS is not set\n+CONFIG_SCSI_LOWLEVEL=y\n+# CONFIG_ISCSI_TCP is not set\n+# CONFIG_ISCSI_BOOT_SYSFS is not set\n+# CONFIG_SCSI_UFSHCD is not set\n+# CONFIG_SCSI_DEBUG is not set\n+CONFIG_SCSI_VIRTIO=y\n+# CONFIG_SCSI_DH is not set\n+# CONFIG_SCSI_OSD_INITIATOR is not set\n+CONFIG_HAVE_PATA_PLATFORM=y\n+CONFIG_ATA=y\n+# CONFIG_ATA_NONSTANDARD is not set\n+CONFIG_ATA_VERBOSE_ERROR=y\n+# CONFIG_SATA_PMP is not set\n+\n+#\n+# Controllers with non-SFF native interface\n+#\n+# CONFIG_SATA_AHCI_PLATFORM is not set\n+# CONFIG_AHCI_CEVA is not set\n+# CONFIG_AHCI_QORIQ is not set\n+CONFIG_ATA_SFF=y\n+\n+#\n+# SFF controllers with custom DMA interface\n+#\n+CONFIG_ATA_BMDMA=y\n+\n+#\n+# SATA SFF controllers with BMDMA\n+#\n+\n+#\n+# PATA SFF controllers with BMDMA\n+#\n+\n+#\n+# PIO-only SFF controllers\n+#\n+# CONFIG_PATA_PLATFORM is not set\n+\n+#\n+# Generic fallback / legacy drivers\n+#\n+# CONFIG_MD is not set\n+# CONFIG_TARGET_CORE is not set\n+CONFIG_NETDEVICES=y\n+CONFIG_MII=y\n+CONFIG_NET_CORE=y\n+# CONFIG_BONDING is not set\n+# CONFIG_DUMMY is not set\n+# CONFIG_EQUALIZER is not set\n+# CONFIG_NET_TEAM is not set\n+# CONFIG_MACVLAN is not set\n+# CONFIG_IPVLAN is not set\n+# CONFIG_VXLAN is not set\n+# CONFIG_NETCONSOLE is not set\n+# CONFIG_NETPOLL is not set\n+# CONFIG_NET_POLL_CONTROLLER is not set\n+# CONFIG_TUN is not set\n+# CONFIG_TUN_VNET_CROSS_LE is not set\n+# CONFIG_VETH is not set\n+CONFIG_VIRTIO_NET=y\n+# CONFIG_NLMON is not set\n+\n+#\n+# CAIF transport drivers\n+#\n+\n+#\n+# Distributed Switch Architecture drivers\n+#\n+# CONFIG_NET_DSA_MV88E6XXX is not set\n+# CONFIG_NET_DSA_MV88E6XXX_NEED_PPU is not set\n+CONFIG_ETHERNET=y\n+# CONFIG_ALTERA_TSE is not set\n+CONFIG_NET_VENDOR_ARC=y\n+# CONFIG_ARC_EMAC is not set\n+# CONFIG_EMAC_ROCKCHIP is not set\n+# CONFIG_NET_VENDOR_AURORA is not set\n+CONFIG_NET_CADENCE=y\n+# CONFIG_MACB is not set\n+CONFIG_NET_VENDOR_BROADCOM=y\n+# CONFIG_B44 is not set\n+# CONFIG_BCMGENET is not set\n+# CONFIG_SYSTEMPORT is not set\n+CONFIG_NET_VENDOR_CIRRUS=y\n+# CONFIG_CS89x0 is not set\n+# CONFIG_DM9000 is not set\n+# CONFIG_DNET is not set\n+CONFIG_NET_VENDOR_EZCHIP=y\n+# CONFIG_EZCHIP_NPS_MANAGEMENT_ENET is not set\n+CONFIG_NET_VENDOR_FARADAY=y\n+# CONFIG_FTMAC100 is not set\n+# CONFIG_FTGMAC100 is not set\n+CONFIG_NET_VENDOR_HISILICON=y\n+# CONFIG_HIX5HD2_GMAC is not set\n+# CONFIG_HIP04_ETH is not set\n+# CONFIG_HNS is not set\n+# CONFIG_HNS_DSAF is not set\n+# CONFIG_HNS_ENET is not set\n+CONFIG_NET_VENDOR_INTEL=y\n+CONFIG_NET_VENDOR_I825XX=y\n+CONFIG_NET_VENDOR_MARVELL=y\n+# CONFIG_MVMDIO is not set\n+CONFIG_NET_VENDOR_MICREL=y\n+# CONFIG_KS8851_MLL is not set\n+CONFIG_NET_VENDOR_NATSEMI=y\n+CONFIG_NET_VENDOR_8390=y\n+# CONFIG_AX88796 is not set\n+# CONFIG_ETHOC is not set\n+CONFIG_NET_VENDOR_QUALCOMM=y\n+CONFIG_NET_VENDOR_RENESAS=y\n+CONFIG_NET_VENDOR_ROCKER=y\n+CONFIG_NET_VENDOR_SAMSUNG=y\n+# CONFIG_SXGBE_ETH is not set\n+CONFIG_NET_VENDOR_SEEQ=y\n+CONFIG_NET_VENDOR_SMSC=y\n+CONFIG_SMC91X=y\n+# CONFIG_SMC911X is not set\n+CONFIG_SMSC911X=y\n+# CONFIG_SMSC911X_ARCH_HOOKS is not set\n+CONFIG_NET_VENDOR_STMICRO=y\n+# CONFIG_STMMAC_ETH is not set\n+CONFIG_NET_VENDOR_SYNOPSYS=y\n+# CONFIG_SYNOPSYS_DWC_ETH_QOS is not set\n+CONFIG_NET_VENDOR_VIA=y\n+# CONFIG_VIA_RHINE is not set\n+# CONFIG_VIA_VELOCITY is not set\n+CONFIG_NET_VENDOR_WIZNET=y\n+# CONFIG_WIZNET_W5100 is not set\n+# CONFIG_WIZNET_W5300 is not set\n+CONFIG_PHYLIB=y\n+\n+#\n+# MII PHY device drivers\n+#\n+# CONFIG_AQUANTIA_PHY is not set\n+# CONFIG_AT803X_PHY is not set\n+# CONFIG_AMD_PHY is not set\n+# CONFIG_MARVELL_PHY is not set\n+# CONFIG_DAVICOM_PHY is not set\n+# CONFIG_QSEMI_PHY is not set\n+# CONFIG_LXT_PHY is not set\n+# CONFIG_CICADA_PHY is not set\n+# CONFIG_VITESSE_PHY is not set\n+# CONFIG_TERANETICS_PHY is not set\n+# CONFIG_SMSC_PHY is not set\n+# CONFIG_BROADCOM_PHY is not set\n+# CONFIG_BCM7XXX_PHY is not set\n+# CONFIG_BCM87XX_PHY is not set\n+# CONFIG_ICPLUS_PHY is not set\n+# CONFIG_REALTEK_PHY is not set\n+# CONFIG_NATIONAL_PHY is not set\n+# CONFIG_STE10XP is not set\n+# CONFIG_LSI_ET1011C_PHY is not set\n+# CONFIG_MICREL_PHY is not set\n+# CONFIG_DP83848_PHY is not set\n+# CONFIG_DP83867_PHY is not set\n+# CONFIG_MICROCHIP_PHY is not set\n+# CONFIG_FIXED_PHY is not set\n+# CONFIG_MDIO_BITBANG is not set\n+# CONFIG_MDIO_BUS_MUX_GPIO is not set\n+# CONFIG_MDIO_BUS_MUX_MMIOREG is not set\n+# CONFIG_MDIO_BCM_UNIMAC is not set\n+# CONFIG_PPP is not set\n+# CONFIG_SLIP is not set\n+CONFIG_USB_NET_DRIVERS=y\n+# CONFIG_USB_CATC is not set\n+# CONFIG_USB_KAWETH is not set\n+# CONFIG_USB_PEGASUS is not set\n+# CONFIG_USB_RTL8150 is not set\n+# CONFIG_USB_RTL8152 is not set\n+# CONFIG_USB_LAN78XX is not set\n+# CONFIG_USB_USBNET is not set\n+# CONFIG_USB_IPHETH is not set\n+# CONFIG_WLAN is not set\n+\n+#\n+# Enable WiMAX (Networking options) to see the WiMAX drivers\n+#\n+# CONFIG_WAN is not set\n+# CONFIG_ISDN is not set\n+# CONFIG_NVM is not set\n+\n+#\n+# Input device support\n+#\n+CONFIG_INPUT=y\n+CONFIG_INPUT_LEDS=y\n+# CONFIG_INPUT_FF_MEMLESS is not set\n+# CONFIG_INPUT_POLLDEV is not set\n+# CONFIG_INPUT_SPARSEKMAP is not set\n+# CONFIG_INPUT_MATRIXKMAP is not set\n+\n+#\n+# Userland interfaces\n+#\n+CONFIG_INPUT_MOUSEDEV=y\n+CONFIG_INPUT_MOUSEDEV_PSAUX=y\n+CONFIG_INPUT_MOUSEDEV_SCREEN_X=1024\n+CONFIG_INPUT_MOUSEDEV_SCREEN_Y=768\n+# CONFIG_INPUT_JOYDEV is not set\n+CONFIG_INPUT_EVDEV=y\n+# CONFIG_INPUT_EVBUG is not set\n+\n+#\n+# Input Device Drivers\n+#\n+CONFIG_INPUT_KEYBOARD=y\n+# CONFIG_KEYBOARD_ADP5588 is not set\n+# CONFIG_KEYBOARD_ADP5589 is not set\n+CONFIG_KEYBOARD_ATKBD=y\n+# CONFIG_KEYBOARD_QT1070 is not set\n+# CONFIG_KEYBOARD_QT2160 is not set\n+# CONFIG_KEYBOARD_LKKBD is not set\n+# CONFIG_KEYBOARD_GPIO is not set\n+# CONFIG_KEYBOARD_GPIO_POLLED is not set\n+# CONFIG_KEYBOARD_TCA6416 is not set\n+# CONFIG_KEYBOARD_TCA8418 is not set\n+# CONFIG_KEYBOARD_MATRIX is not set\n+# CONFIG_KEYBOARD_LM8323 is not set\n+# CONFIG_KEYBOARD_LM8333 is not set\n+# CONFIG_KEYBOARD_MAX7359 is not set\n+# CONFIG_KEYBOARD_MCS is not set\n+# CONFIG_KEYBOARD_MPR121 is not set\n+# CONFIG_KEYBOARD_NEWTON is not set\n+# CONFIG_KEYBOARD_OPENCORES is not set\n+# CONFIG_KEYBOARD_SAMSUNG is not set\n+# CONFIG_KEYBOARD_STOWAWAY is not set\n+# CONFIG_KEYBOARD_SUNKBD is not set\n+# CONFIG_KEYBOARD_OMAP4 is not set\n+# CONFIG_KEYBOARD_XTKBD is not set\n+# CONFIG_KEYBOARD_CAP11XX is not set\n+# CONFIG_KEYBOARD_BCM is not set\n+CONFIG_INPUT_MOUSE=y\n+CONFIG_MOUSE_PS2=y\n+CONFIG_MOUSE_PS2_ALPS=y\n+CONFIG_MOUSE_PS2_LOGIPS2PP=y\n+CONFIG_MOUSE_PS2_SYNAPTICS=y\n+CONFIG_MOUSE_PS2_CYPRESS=y\n+CONFIG_MOUSE_PS2_TRACKPOINT=y\n+# CONFIG_MOUSE_PS2_ELANTECH is not set\n+# CONFIG_MOUSE_PS2_SENTELIC is not set\n+# CONFIG_MOUSE_PS2_TOUCHKIT is not set\n+CONFIG_MOUSE_PS2_FOCALTECH=y\n+# CONFIG_MOUSE_SERIAL is not set\n+# CONFIG_MOUSE_APPLETOUCH is not set\n+# CONFIG_MOUSE_BCM5974 is not set\n+# CONFIG_MOUSE_CYAPA is not set\n+# CONFIG_MOUSE_ELAN_I2C is not set\n+# CONFIG_MOUSE_VSXXXAA is not set\n+# CONFIG_MOUSE_GPIO is not set\n+# CONFIG_MOUSE_SYNAPTICS_I2C is not set\n+# CONFIG_MOUSE_SYNAPTICS_USB is not set\n+# CONFIG_INPUT_JOYSTICK is not set\n+# CONFIG_INPUT_TABLET is not set\n+# CONFIG_INPUT_TOUCHSCREEN is not set\n+# CONFIG_INPUT_MISC is not set\n+\n+#\n+# Hardware I/O ports\n+#\n+CONFIG_SERIO=y\n+# CONFIG_SERIO_SERPORT is not set\n+CONFIG_SERIO_AMBAKMI=y\n+CONFIG_SERIO_LIBPS2=y\n+# CONFIG_SERIO_RAW is not set\n+# CONFIG_SERIO_ALTERA_PS2 is not set\n+# CONFIG_SERIO_PS2MULT is not set\n+# CONFIG_SERIO_ARC_PS2 is not set\n+# CONFIG_SERIO_APBPS2 is not set\n+# CONFIG_USERIO is not set\n+# CONFIG_GAMEPORT is not set\n+\n+#\n+# Character devices\n+#\n+CONFIG_TTY=y\n+CONFIG_VT=y\n+CONFIG_CONSOLE_TRANSLATIONS=y\n+CONFIG_VT_CONSOLE=y\n+CONFIG_VT_CONSOLE_SLEEP=y\n+CONFIG_HW_CONSOLE=y\n+CONFIG_VT_HW_CONSOLE_BINDING=y\n+CONFIG_UNIX98_PTYS=y\n+# CONFIG_DEVPTS_MULTIPLE_INSTANCES is not set\n+CONFIG_LEGACY_PTYS=y\n+CONFIG_LEGACY_PTY_COUNT=16\n+# CONFIG_SERIAL_NONSTANDARD is not set\n+# CONFIG_N_GSM is not set\n+# CONFIG_TRACE_SINK is not set\n+CONFIG_DEVMEM=y\n+CONFIG_DEVKMEM=y\n+\n+#\n+# Serial drivers\n+#\n+CONFIG_SERIAL_EARLYCON=y\n+# CONFIG_SERIAL_8250 is not set\n+\n+#\n+# Non-8250 serial port support\n+#\n+# CONFIG_SERIAL_AMBA_PL010 is not set\n+CONFIG_SERIAL_AMBA_PL011=y\n+CONFIG_SERIAL_AMBA_PL011_CONSOLE=y\n+# CONFIG_SERIAL_EARLYCON_ARM_SEMIHOST is not set\n+# CONFIG_SERIAL_UARTLITE is not set\n+CONFIG_SERIAL_CORE=y\n+CONFIG_SERIAL_CORE_CONSOLE=y\n+# CONFIG_SERIAL_SCCNXP is not set\n+# CONFIG_SERIAL_SC16IS7XX is not set\n+# CONFIG_SERIAL_BCM63XX is not set\n+# CONFIG_SERIAL_ALTERA_JTAGUART is not set\n+# CONFIG_SERIAL_ALTERA_UART is not set\n+# CONFIG_SERIAL_XILINX_PS_UART is not set\n+# CONFIG_SERIAL_ARC is not set\n+# CONFIG_SERIAL_FSL_LPUART is not set\n+# CONFIG_SERIAL_CONEXANT_DIGICOLOR is not set\n+# CONFIG_SERIAL_ST_ASC is not set\n+# CONFIG_SERIAL_STM32 is not set\n+CONFIG_HVC_DRIVER=y\n+# CONFIG_HVC_DCC is not set\n+CONFIG_VIRTIO_CONSOLE=y\n+# CONFIG_IPMI_HANDLER is not set\n+CONFIG_HW_RANDOM=y\n+# CONFIG_HW_RANDOM_TIMERIOMEM is not set\n+CONFIG_HW_RANDOM_VIRTIO=y\n+# CONFIG_R3964 is not set\n+# CONFIG_RAW_DRIVER is not set\n+# CONFIG_TCG_TPM is not set\n+# CONFIG_XILLYBUS is not set\n+\n+#\n+# I2C support\n+#\n+CONFIG_I2C=y\n+CONFIG_I2C_BOARDINFO=y\n+CONFIG_I2C_COMPAT=y\n+# CONFIG_I2C_CHARDEV is not set\n+# CONFIG_I2C_MUX is not set\n+CONFIG_I2C_HELPER_AUTO=y\n+CONFIG_I2C_ALGOBIT=y\n+\n+#\n+# I2C Hardware Bus support\n+#\n+\n+#\n+# I2C system bus drivers (mostly embedded / system-on-chip)\n+#\n+# CONFIG_I2C_CBUS_GPIO is not set\n+# CONFIG_I2C_DESIGNWARE_PLATFORM is not set\n+# CONFIG_I2C_EMEV2 is not set\n+# CONFIG_I2C_GPIO is not set\n+# CONFIG_I2C_NOMADIK is not set\n+# CONFIG_I2C_OCORES is not set\n+# CONFIG_I2C_PCA_PLATFORM is not set\n+# CONFIG_I2C_PXA_PCI is not set\n+# CONFIG_I2C_RK3X is not set\n+# CONFIG_I2C_SIMTEC is not set\n+CONFIG_I2C_VERSATILE=y\n+# CONFIG_I2C_XILINX is not set\n+\n+#\n+# External I2C/SMBus adapter drivers\n+#\n+# CONFIG_I2C_DIOLAN_U2C is not set\n+# CONFIG_I2C_PARPORT_LIGHT is not set\n+# CONFIG_I2C_ROBOTFUZZ_OSIF is not set\n+# CONFIG_I2C_TAOS_EVM is not set\n+# CONFIG_I2C_TINY_USB is not set\n+\n+#\n+# Other I2C/SMBus bus drivers\n+#\n+# CONFIG_I2C_STUB is not set\n+# CONFIG_I2C_SLAVE is not set\n+# CONFIG_I2C_DEBUG_CORE is not set\n+# CONFIG_I2C_DEBUG_ALGO is not set\n+# CONFIG_I2C_DEBUG_BUS is not set\n+# CONFIG_SPI is not set\n+# CONFIG_SPMI is not set\n+# CONFIG_HSI is not set\n+\n+#\n+# PPS support\n+#\n+# CONFIG_PPS is not set\n+\n+#\n+# PPS generators support\n+#\n+\n+#\n+# PTP clock support\n+#\n+# CONFIG_PTP_1588_CLOCK is not set\n+\n+#\n+# Enable PHYLIB and NETWORK_PHY_TIMESTAMPING to see the additional clocks.\n+#\n+CONFIG_ARCH_HAVE_CUSTOM_GPIO_H=y\n+CONFIG_ARCH_WANT_OPTIONAL_GPIOLIB=y\n+CONFIG_ARCH_REQUIRE_GPIOLIB=y\n+CONFIG_GPIOLIB=y\n+CONFIG_GPIO_DEVRES=y\n+CONFIG_OF_GPIO=y\n+# CONFIG_DEBUG_GPIO is not set\n+# CONFIG_GPIO_SYSFS is not set\n+CONFIG_GPIO_GENERIC=y\n+\n+#\n+# Memory mapped GPIO drivers\n+#\n+# CONFIG_GPIO_74XX_MMIO is not set\n+# CONFIG_GPIO_ALTERA is not set\n+# CONFIG_GPIO_DWAPB is not set\n+# CONFIG_GPIO_EM is not set\n+CONFIG_GPIO_GENERIC_PLATFORM=y\n+# CONFIG_GPIO_GRGPIO is not set\n+# CONFIG_GPIO_PL061 is not set\n+# CONFIG_GPIO_SYSCON is not set\n+# CONFIG_GPIO_XILINX is not set\n+# CONFIG_GPIO_ZEVIO is not set\n+# CONFIG_GPIO_ZX is not set\n+\n+#\n+# I2C GPIO expanders\n+#\n+# CONFIG_GPIO_ADP5588 is not set\n+# CONFIG_GPIO_ADNP is not set\n+# CONFIG_GPIO_MAX7300 is not set\n+# CONFIG_GPIO_MAX732X is not set\n+# CONFIG_GPIO_PCA953X is not set\n+# CONFIG_GPIO_PCF857X is not set\n+# CONFIG_GPIO_SX150X is not set\n+\n+#\n+# MFD GPIO expanders\n+#\n+\n+#\n+# SPI or I2C GPIO expanders\n+#\n+# CONFIG_GPIO_MCP23S08 is not set\n+\n+#\n+# USB GPIO expanders\n+#\n+# CONFIG_W1 is not set\n+CONFIG_POWER_SUPPLY=y\n+# CONFIG_POWER_SUPPLY_DEBUG is not set\n+# CONFIG_PDA_POWER is not set\n+# CONFIG_TEST_POWER is not set\n+# CONFIG_BATTERY_DS2780 is not set\n+# CONFIG_BATTERY_DS2781 is not set\n+# CONFIG_BATTERY_DS2782 is not set\n+# CONFIG_BATTERY_SBS is not set\n+# CONFIG_BATTERY_BQ27XXX is not set\n+# CONFIG_BATTERY_MAX17040 is not set\n+# CONFIG_BATTERY_MAX17042 is not set\n+# CONFIG_CHARGER_MAX8903 is not set\n+# CONFIG_CHARGER_LP8727 is not set\n+# CONFIG_CHARGER_GPIO is not set\n+# CONFIG_CHARGER_MANAGER is not set\n+# CONFIG_CHARGER_BQ2415X is not set\n+# CONFIG_CHARGER_BQ24190 is not set\n+# CONFIG_CHARGER_BQ24735 is not set\n+# CONFIG_CHARGER_BQ25890 is not set\n+# CONFIG_CHARGER_SMB347 is not set\n+# CONFIG_BATTERY_GAUGE_LTC2941 is not set\n+# CONFIG_CHARGER_RT9455 is not set\n+CONFIG_POWER_RESET=y\n+# CONFIG_POWER_RESET_BRCMSTB is not set\n+# CONFIG_POWER_RESET_GPIO is not set\n+# CONFIG_POWER_RESET_GPIO_RESTART is not set\n+# CONFIG_POWER_RESET_LTC2952 is not set\n+# CONFIG_POWER_RESET_RESTART is not set\n+# CONFIG_POWER_RESET_VERSATILE is not set\n+CONFIG_POWER_RESET_VEXPRESS=y\n+# CONFIG_POWER_RESET_SYSCON is not set\n+# CONFIG_POWER_RESET_SYSCON_POWEROFF is not set\n+# CONFIG_POWER_AVS is not set\n+CONFIG_HWMON=y\n+# CONFIG_HWMON_VID is not set\n+# CONFIG_HWMON_DEBUG_CHIP is not set\n+\n+#\n+# Native drivers\n+#\n+# CONFIG_SENSORS_AD7414 is not set\n+# CONFIG_SENSORS_AD7418 is not set\n+# CONFIG_SENSORS_ADM1021 is not set\n+# CONFIG_SENSORS_ADM1025 is not set\n+# CONFIG_SENSORS_ADM1026 is not set\n+# CONFIG_SENSORS_ADM1029 is not set\n+# CONFIG_SENSORS_ADM1031 is not set\n+# CONFIG_SENSORS_ADM9240 is not set\n+# CONFIG_SENSORS_ADT7410 is not set\n+# CONFIG_SENSORS_ADT7411 is not set\n+# CONFIG_SENSORS_ADT7462 is not set\n+# CONFIG_SENSORS_ADT7470 is not set\n+# CONFIG_SENSORS_ADT7475 is not set\n+# CONFIG_SENSORS_ASC7621 is not set\n+# CONFIG_SENSORS_ATXP1 is not set\n+# CONFIG_SENSORS_DS620 is not set\n+# CONFIG_SENSORS_DS1621 is not set\n+# CONFIG_SENSORS_F71805F is not set\n+# CONFIG_SENSORS_F71882FG is not set\n+# CONFIG_SENSORS_F75375S is not set\n+# CONFIG_SENSORS_GL518SM is not set\n+# CONFIG_SENSORS_GL520SM is not set\n+# CONFIG_SENSORS_G760A is not set\n+# CONFIG_SENSORS_G762 is not set\n+# CONFIG_SENSORS_GPIO_FAN is not set\n+# CONFIG_SENSORS_HIH6130 is not set\n+# CONFIG_SENSORS_IT87 is not set\n+# CONFIG_SENSORS_JC42 is not set\n+# CONFIG_SENSORS_POWR1220 is not set\n+# CONFIG_SENSORS_LINEAGE is not set\n+# CONFIG_SENSORS_LTC2945 is not set\n+# CONFIG_SENSORS_LTC4151 is not set\n+# CONFIG_SENSORS_LTC4215 is not set\n+# CONFIG_SENSORS_LTC4222 is not set\n+# CONFIG_SENSORS_LTC4245 is not set\n+# CONFIG_SENSORS_LTC4260 is not set\n+# CONFIG_SENSORS_LTC4261 is not set\n+# CONFIG_SENSORS_MAX16065 is not set\n+# CONFIG_SENSORS_MAX1619 is not set\n+# CONFIG_SENSORS_MAX1668 is not set\n+# CONFIG_SENSORS_MAX197 is not set\n+# CONFIG_SENSORS_MAX6639 is not set\n+# CONFIG_SENSORS_MAX6642 is not set\n+# CONFIG_SENSORS_MAX6650 is not set\n+# CONFIG_SENSORS_MAX6697 is not set\n+# CONFIG_SENSORS_MAX31790 is not set\n+# CONFIG_SENSORS_HTU21 is not set\n+# CONFIG_SENSORS_MCP3021 is not set\n+# CONFIG_SENSORS_LM63 is not set\n+# CONFIG_SENSORS_LM73 is not set\n+# CONFIG_SENSORS_LM75 is not set\n+# CONFIG_SENSORS_LM77 is not set\n+# CONFIG_SENSORS_LM78 is not set\n+# CONFIG_SENSORS_LM80 is not set\n+# CONFIG_SENSORS_LM83 is not set\n+# CONFIG_SENSORS_LM85 is not set\n+# CONFIG_SENSORS_LM87 is not set\n+# CONFIG_SENSORS_LM90 is not set\n+# CONFIG_SENSORS_LM92 is not set\n+# CONFIG_SENSORS_LM93 is not set\n+# CONFIG_SENSORS_LM95234 is not set\n+# CONFIG_SENSORS_LM95241 is not set\n+# CONFIG_SENSORS_LM95245 is not set\n+# CONFIG_SENSORS_PC87360 is not set\n+# CONFIG_SENSORS_PC87427 is not set\n+# CONFIG_SENSORS_NTC_THERMISTOR is not set\n+# CONFIG_SENSORS_NCT6683 is not set\n+# CONFIG_SENSORS_NCT6775 is not set\n+# CONFIG_SENSORS_NCT7802 is not set\n+# CONFIG_SENSORS_NCT7904 is not set\n+# CONFIG_SENSORS_PCF8591 is not set\n+# CONFIG_PMBUS is not set\n+# CONFIG_SENSORS_SHT15 is not set\n+# CONFIG_SENSORS_SHT21 is not set\n+# CONFIG_SENSORS_SHTC1 is not set\n+# CONFIG_SENSORS_DME1737 is not set\n+# CONFIG_SENSORS_EMC1403 is not set\n+# CONFIG_SENSORS_EMC2103 is not set\n+# CONFIG_SENSORS_EMC6W201 is not set\n+# CONFIG_SENSORS_SMSC47M1 is not set\n+# CONFIG_SENSORS_SMSC47M192 is not set\n+# CONFIG_SENSORS_SMSC47B397 is not set\n+# CONFIG_SENSORS_SCH56XX_COMMON is not set\n+# CONFIG_SENSORS_SMM665 is not set\n+# CONFIG_SENSORS_ADC128D818 is not set\n+# CONFIG_SENSORS_ADS1015 is not set\n+# CONFIG_SENSORS_ADS7828 is not set\n+# CONFIG_SENSORS_AMC6821 is not set\n+# CONFIG_SENSORS_INA209 is not set\n+# CONFIG_SENSORS_INA2XX is not set\n+# CONFIG_SENSORS_TC74 is not set\n+# CONFIG_SENSORS_THMC50 is not set\n+# CONFIG_SENSORS_TMP102 is not set\n+# CONFIG_SENSORS_TMP103 is not set\n+# CONFIG_SENSORS_TMP401 is not set\n+# CONFIG_SENSORS_TMP421 is not set\n+CONFIG_SENSORS_VEXPRESS=y\n+# CONFIG_SENSORS_VT1211 is not set\n+# CONFIG_SENSORS_W83781D is not set\n+# CONFIG_SENSORS_W83791D is not set\n+# CONFIG_SENSORS_W83792D is not set\n+# CONFIG_SENSORS_W83793 is not set\n+# CONFIG_SENSORS_W83795 is not set\n+# CONFIG_SENSORS_W83L785TS is not set\n+# CONFIG_SENSORS_W83L786NG is not set\n+# CONFIG_SENSORS_W83627HF is not set\n+# CONFIG_SENSORS_W83627EHF is not set\n+# CONFIG_THERMAL is not set\n+# CONFIG_WATCHDOG is not set\n+CONFIG_SSB_POSSIBLE=y\n+\n+#\n+# Sonics Silicon Backplane\n+#\n+# CONFIG_SSB is not set\n+CONFIG_BCMA_POSSIBLE=y\n+\n+#\n+# Broadcom specific AMBA\n+#\n+# CONFIG_BCMA is not set\n+\n+#\n+# Multifunction device drivers\n+#\n+CONFIG_MFD_CORE=y\n+# CONFIG_MFD_AS3711 is not set\n+# CONFIG_MFD_AS3722 is not set\n+# CONFIG_PMIC_ADP5520 is not set\n+# CONFIG_MFD_AAT2870_CORE is not set\n+# CONFIG_MFD_ATMEL_FLEXCOM is not set\n+# CONFIG_MFD_ATMEL_HLCDC is not set\n+# CONFIG_MFD_BCM590XX is not set\n+# CONFIG_MFD_AXP20X is not set\n+# CONFIG_MFD_CROS_EC is not set\n+# CONFIG_MFD_ASIC3 is not set\n+# CONFIG_PMIC_DA903X is not set\n+# CONFIG_MFD_DA9052_I2C is not set\n+# CONFIG_MFD_DA9055 is not set\n+# CONFIG_MFD_DA9062 is not set\n+# CONFIG_MFD_DA9063 is not set\n+# CONFIG_MFD_DA9150 is not set\n+# CONFIG_MFD_DLN2 is not set\n+# CONFIG_MFD_MC13XXX_I2C is not set\n+# CONFIG_MFD_HI6421_PMIC is not set\n+# CONFIG_HTC_EGPIO is not set\n+# CONFIG_HTC_PASIC3 is not set\n+# CONFIG_HTC_I2CPLD is not set\n+# CONFIG_INTEL_SOC_PMIC is not set\n+# CONFIG_MFD_KEMPLD is not set\n+# CONFIG_MFD_88PM800 is not set\n+# CONFIG_MFD_88PM805 is not set\n+# CONFIG_MFD_88PM860X is not set\n+# CONFIG_MFD_MAX14577 is not set\n+# CONFIG_MFD_MAX77686 is not set\n+# CONFIG_MFD_MAX77693 is not set\n+# CONFIG_MFD_MAX77843 is not set\n+# CONFIG_MFD_MAX8907 is not set\n+# CONFIG_MFD_MAX8925 is not set\n+# CONFIG_MFD_MAX8997 is not set\n+# CONFIG_MFD_MAX8998 is not set\n+# CONFIG_MFD_MT6397 is not set\n+# CONFIG_MFD_MENF21BMC is not set\n+# CONFIG_MFD_VIPERBOARD is not set\n+# CONFIG_MFD_RETU is not set\n+# CONFIG_MFD_PCF50633 is not set\n+# CONFIG_UCB1400_CORE is not set\n+# CONFIG_MFD_PM8921_CORE is not set\n+# CONFIG_MFD_RT5033 is not set\n+# CONFIG_MFD_RTSX_USB is not set\n+# CONFIG_MFD_RC5T583 is not set\n+# CONFIG_MFD_RK808 is not set\n+# CONFIG_MFD_RN5T618 is not set\n+# CONFIG_MFD_SEC_CORE is not set\n+# CONFIG_MFD_SI476X_CORE is not set\n+# CONFIG_MFD_SM501 is not set\n+# CONFIG_MFD_SKY81452 is not set\n+# CONFIG_MFD_SMSC is not set\n+# CONFIG_ABX500_CORE is not set\n+# CONFIG_MFD_STMPE is not set\n+CONFIG_MFD_SYSCON=y\n+# CONFIG_MFD_TI_AM335X_TSCADC is not set\n+# CONFIG_MFD_LP3943 is not set\n+# CONFIG_MFD_LP8788 is not set\n+# CONFIG_MFD_PALMAS is not set\n+# CONFIG_TPS6105X is not set\n+# CONFIG_TPS65010 is not set\n+# CONFIG_TPS6507X is not set\n+# CONFIG_MFD_TPS65090 is not set\n+# CONFIG_MFD_TPS65217 is not set\n+# CONFIG_MFD_TPS65218 is not set\n+# CONFIG_MFD_TPS6586X is not set\n+# CONFIG_MFD_TPS65910 is not set\n+# CONFIG_MFD_TPS65912 is not set\n+# CONFIG_MFD_TPS65912_I2C is not set\n+# CONFIG_MFD_TPS80031 is not set\n+# CONFIG_TWL4030_CORE is not set\n+# CONFIG_TWL6040_CORE is not set\n+# CONFIG_MFD_WL1273_CORE is not set\n+# CONFIG_MFD_LM3533 is not set\n+# CONFIG_MFD_TC3589X is not set\n+# CONFIG_MFD_TMIO is not set\n+# CONFIG_MFD_T7L66XB is not set\n+# CONFIG_MFD_TC6387XB is not set\n+# CONFIG_MFD_TC6393XB is not set\n+# CONFIG_MFD_ARIZONA_I2C is not set\n+# CONFIG_MFD_WM8400 is not set\n+# CONFIG_MFD_WM831X_I2C is not set\n+# CONFIG_MFD_WM8350_I2C is not set\n+# CONFIG_MFD_WM8994 is not set\n+CONFIG_MFD_VEXPRESS_SYSREG=y\n+CONFIG_REGULATOR=y\n+# CONFIG_REGULATOR_DEBUG is not set\n+CONFIG_REGULATOR_FIXED_VOLTAGE=y\n+# CONFIG_REGULATOR_VIRTUAL_CONSUMER is not set\n+# CONFIG_REGULATOR_USERSPACE_CONSUMER is not set\n+# CONFIG_REGULATOR_ACT8865 is not set\n+# CONFIG_REGULATOR_AD5398 is not set\n+# CONFIG_REGULATOR_ANATOP is not set\n+# CONFIG_REGULATOR_DA9210 is not set\n+# CONFIG_REGULATOR_DA9211 is not set\n+# CONFIG_REGULATOR_FAN53555 is not set\n+# CONFIG_REGULATOR_GPIO is not set\n+# CONFIG_REGULATOR_ISL9305 is not set\n+# CONFIG_REGULATOR_ISL6271A is not set\n+# CONFIG_REGULATOR_LP3971 is not set\n+# CONFIG_REGULATOR_LP3972 is not set\n+# CONFIG_REGULATOR_LP872X is not set\n+# CONFIG_REGULATOR_LP8755 is not set\n+# CONFIG_REGULATOR_LTC3589 is not set\n+# CONFIG_REGULATOR_MAX1586 is not set\n+# CONFIG_REGULATOR_MAX8649 is not set\n+# CONFIG_REGULATOR_MAX8660 is not set\n+# CONFIG_REGULATOR_MAX8952 is not set\n+# CONFIG_REGULATOR_MAX8973 is not set\n+# CONFIG_REGULATOR_MT6311 is not set\n+# CONFIG_REGULATOR_PFUZE100 is not set\n+# CONFIG_REGULATOR_TPS51632 is not set\n+# CONFIG_REGULATOR_TPS62360 is not set\n+# CONFIG_REGULATOR_TPS65023 is not set\n+# CONFIG_REGULATOR_TPS6507X is not set\n+CONFIG_REGULATOR_VEXPRESS=y\n+# CONFIG_MEDIA_SUPPORT is not set\n+\n+#\n+# Graphics support\n+#\n+# CONFIG_DRM is not set\n+\n+#\n+# Frame buffer Devices\n+#\n+CONFIG_FB=y\n+# CONFIG_FIRMWARE_EDID is not set\n+CONFIG_FB_CMDLINE=y\n+# CONFIG_FB_DDC is not set\n+# CONFIG_FB_BOOT_VESA_SUPPORT is not set\n+CONFIG_FB_CFB_FILLRECT=y\n+CONFIG_FB_CFB_COPYAREA=y\n+CONFIG_FB_CFB_IMAGEBLIT=y\n+# CONFIG_FB_CFB_REV_PIXELS_IN_BYTE is not set\n+# CONFIG_FB_SYS_FILLRECT is not set\n+# CONFIG_FB_SYS_COPYAREA is not set\n+# CONFIG_FB_SYS_IMAGEBLIT is not set\n+# CONFIG_FB_FOREIGN_ENDIAN is not set\n+# CONFIG_FB_SYS_FOPS is not set\n+# CONFIG_FB_SVGALIB is not set\n+# CONFIG_FB_MACMODES is not set\n+# CONFIG_FB_BACKLIGHT is not set\n+CONFIG_FB_MODE_HELPERS=y\n+# CONFIG_FB_TILEBLITTING is not set\n+\n+#\n+# Frame buffer hardware drivers\n+#\n+CONFIG_FB_ARMCLCD=y\n+CONFIG_PLAT_VERSATILE_CLCD=y\n+# CONFIG_FB_OPENCORES is not set\n+# CONFIG_FB_S1D13XXX is not set\n+# CONFIG_FB_SMSCUFX is not set\n+# CONFIG_FB_UDL is not set\n+# CONFIG_FB_IBM_GXT4500 is not set\n+# CONFIG_FB_VIRTUAL is not set\n+# CONFIG_FB_METRONOME is not set\n+# CONFIG_FB_BROADSHEET is not set\n+# CONFIG_FB_AUO_K190X is not set\n+# CONFIG_FB_SIMPLE is not set\n+# CONFIG_FB_SSD1307 is not set\n+# CONFIG_BACKLIGHT_LCD_SUPPORT is not set\n+# CONFIG_VGASTATE is not set\n+CONFIG_VIDEOMODE_HELPERS=y\n+\n+#\n+# Console display driver support\n+#\n+CONFIG_DUMMY_CONSOLE=y\n+CONFIG_FRAMEBUFFER_CONSOLE=y\n+# CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY is not set\n+# CONFIG_FRAMEBUFFER_CONSOLE_ROTATION is not set\n+CONFIG_LOGO=y\n+# CONFIG_LOGO_LINUX_MONO is not set\n+# CONFIG_LOGO_LINUX_VGA16 is not set\n+CONFIG_LOGO_LINUX_CLUT224=y\n+CONFIG_SOUND=y\n+CONFIG_SOUND_OSS_CORE=y\n+CONFIG_SOUND_OSS_CORE_PRECLAIM=y\n+CONFIG_SND=y\n+CONFIG_SND_TIMER=y\n+CONFIG_SND_PCM=y\n+# CONFIG_SND_SEQUENCER is not set\n+CONFIG_SND_OSSEMUL=y\n+CONFIG_SND_MIXER_OSS=y\n+CONFIG_SND_PCM_OSS=y\n+CONFIG_SND_PCM_OSS_PLUGINS=y\n+CONFIG_SND_PCM_TIMER=y\n+# CONFIG_SND_DYNAMIC_MINORS is not set\n+CONFIG_SND_SUPPORT_OLD_API=y\n+CONFIG_SND_PROC_FS=y\n+CONFIG_SND_VERBOSE_PROCFS=y\n+# CONFIG_SND_VERBOSE_PRINTK is not set\n+# CONFIG_SND_DEBUG is not set\n+CONFIG_SND_VMASTER=y\n+# CONFIG_SND_RAWMIDI_SEQ is not set\n+# CONFIG_SND_OPL3_LIB_SEQ is not set\n+# CONFIG_SND_OPL4_LIB_SEQ is not set\n+# CONFIG_SND_SBAWE_SEQ is not set\n+# CONFIG_SND_EMU10K1_SEQ is not set\n+CONFIG_SND_AC97_CODEC=y\n+# CONFIG_SND_DRIVERS is not set\n+\n+#\n+# HD-Audio\n+#\n+CONFIG_SND_HDA_PREALLOC_SIZE=64\n+CONFIG_SND_ARM=y\n+CONFIG_SND_ARMAACI=y\n+CONFIG_SND_USB=y\n+# CONFIG_SND_USB_AUDIO is not set\n+# CONFIG_SND_USB_UA101 is not set\n+# CONFIG_SND_USB_CAIAQ is not set\n+# CONFIG_SND_USB_6FIRE is not set\n+# CONFIG_SND_USB_HIFACE is not set\n+# CONFIG_SND_BCD2000 is not set\n+# CONFIG_SND_USB_POD is not set\n+# CONFIG_SND_USB_PODHD is not set\n+# CONFIG_SND_USB_TONEPORT is not set\n+# CONFIG_SND_USB_VARIAX is not set\n+# CONFIG_SND_SOC is not set\n+# CONFIG_SOUND_PRIME is not set\n+CONFIG_AC97_BUS=y\n+\n+#\n+# HID support\n+#\n+CONFIG_HID=y\n+# CONFIG_HID_BATTERY_STRENGTH is not set\n+# CONFIG_HIDRAW is not set\n+# CONFIG_UHID is not set\n+CONFIG_HID_GENERIC=y\n+\n+#\n+# Special HID drivers\n+#\n+CONFIG_HID_A4TECH=y\n+# CONFIG_HID_ACRUX is not set\n+CONFIG_HID_APPLE=y\n+# CONFIG_HID_APPLEIR is not set\n+# CONFIG_HID_AUREAL is not set\n+CONFIG_HID_BELKIN=y\n+# CONFIG_HID_BETOP_FF is not set\n+CONFIG_HID_CHERRY=y\n+CONFIG_HID_CHICONY=y\n+# CONFIG_HID_CORSAIR is not set\n+# CONFIG_HID_PRODIKEYS is not set\n+# CONFIG_HID_CP2112 is not set\n+CONFIG_HID_CYPRESS=y\n+CONFIG_HID_DRAGONRISE=y\n+# CONFIG_DRAGONRISE_FF is not set\n+# CONFIG_HID_EMS_FF is not set\n+# CONFIG_HID_ELECOM is not set\n+# CONFIG_HID_ELO is not set\n+CONFIG_HID_EZKEY=y\n+# CONFIG_HID_GEMBIRD is not set\n+# CONFIG_HID_GFRM is not set\n+# CONFIG_HID_HOLTEK is not set\n+# CONFIG_HID_GT683R is not set\n+# CONFIG_HID_KEYTOUCH is not set\n+# CONFIG_HID_KYE is not set\n+# CONFIG_HID_UCLOGIC is not set\n+# CONFIG_HID_WALTOP is not set\n+CONFIG_HID_GYRATION=y\n+# CONFIG_HID_ICADE is not set\n+CONFIG_HID_TWINHAN=y\n+CONFIG_HID_KENSINGTON=y\n+# CONFIG_HID_LCPOWER is not set\n+# CONFIG_HID_LENOVO is not set\n+CONFIG_HID_LOGITECH=y\n+# CONFIG_HID_LOGITECH_HIDPP is not set\n+# CONFIG_LOGITECH_FF is not set\n+# CONFIG_LOGIRUMBLEPAD2_FF is not set\n+# CONFIG_LOGIG940_FF is not set\n+# CONFIG_LOGIWHEELS_FF is not set\n+# CONFIG_HID_MAGICMOUSE is not set\n+CONFIG_HID_MICROSOFT=y\n+CONFIG_HID_MONTEREY=y\n+# CONFIG_HID_MULTITOUCH is not set\n+CONFIG_HID_NTRIG=y\n+# CONFIG_HID_ORTEK is not set\n+CONFIG_HID_PANTHERLORD=y\n+# CONFIG_PANTHERLORD_FF is not set\n+# CONFIG_HID_PENMOUNT is not set\n+CONFIG_HID_PETALYNX=y\n+# CONFIG_HID_PICOLCD is not set\n+# CONFIG_HID_PLANTRONICS is not set\n+# CONFIG_HID_PRIMAX is not set\n+# CONFIG_HID_ROCCAT is not set\n+# CONFIG_HID_SAITEK is not set\n+CONFIG_HID_SAMSUNG=y\n+CONFIG_HID_SONY=y\n+# CONFIG_SONY_FF is not set\n+# CONFIG_HID_SPEEDLINK is not set\n+# CONFIG_HID_STEELSERIES is not set\n+CONFIG_HID_SUNPLUS=y\n+# CONFIG_HID_RMI is not set\n+CONFIG_HID_GREENASIA=y\n+# CONFIG_GREENASIA_FF is not set\n+CONFIG_HID_SMARTJOYPLUS=y\n+# CONFIG_SMARTJOYPLUS_FF is not set\n+# CONFIG_HID_TIVO is not set\n+CONFIG_HID_TOPSEED=y\n+# CONFIG_HID_THINGM is not set\n+CONFIG_HID_THRUSTMASTER=y\n+# CONFIG_THRUSTMASTER_FF is not set\n+# CONFIG_HID_WACOM is not set\n+# CONFIG_HID_WIIMOTE is not set\n+# CONFIG_HID_XINMO is not set\n+CONFIG_HID_ZEROPLUS=y\n+# CONFIG_ZEROPLUS_FF is not set\n+# CONFIG_HID_ZYDACRON is not set\n+# CONFIG_HID_SENSOR_HUB is not set\n+\n+#\n+# USB HID support\n+#\n+CONFIG_USB_HID=y\n+# CONFIG_HID_PID is not set\n+# CONFIG_USB_HIDDEV is not set\n+\n+#\n+# I2C HID support\n+#\n+# CONFIG_I2C_HID is not set\n+CONFIG_USB_OHCI_LITTLE_ENDIAN=y\n+CONFIG_USB_SUPPORT=y\n+CONFIG_USB_COMMON=y\n+CONFIG_USB_ARCH_HAS_HCD=y\n+CONFIG_USB=y\n+CONFIG_USB_ANNOUNCE_NEW_DEVICES=y\n+\n+#\n+# Miscellaneous USB options\n+#\n+CONFIG_USB_DEFAULT_PERSIST=y\n+# CONFIG_USB_DYNAMIC_MINORS is not set\n+# CONFIG_USB_OTG is not set\n+# CONFIG_USB_OTG_WHITELIST is not set\n+# CONFIG_USB_ULPI_BUS is not set\n+CONFIG_USB_MON=y\n+# CONFIG_USB_WUSB_CBAF is not set\n+\n+#\n+# USB Host Controller Drivers\n+#\n+# CONFIG_USB_C67X00_HCD is not set\n+# CONFIG_USB_XHCI_HCD is not set\n+# CONFIG_USB_EHCI_HCD is not set\n+# CONFIG_USB_OXU210HP_HCD is not set\n+# CONFIG_USB_ISP116X_HCD is not set\n+# CONFIG_USB_ISP1362_HCD is not set\n+# CONFIG_USB_FOTG210_HCD is not set\n+# CONFIG_USB_OHCI_HCD is not set\n+# CONFIG_USB_SL811_HCD is not set\n+# CONFIG_USB_R8A66597_HCD is not set\n+# CONFIG_USB_HCD_TEST_MODE is not set\n+\n+#\n+# USB Device Class drivers\n+#\n+# CONFIG_USB_ACM is not set\n+# CONFIG_USB_PRINTER is not set\n+# CONFIG_USB_WDM is not set\n+# CONFIG_USB_TMC is not set\n+\n+#\n+# NOTE: USB_STORAGE depends on SCSI but BLK_DEV_SD may\n+#\n+\n+#\n+# also be needed; see USB_STORAGE Help for more info\n+#\n+CONFIG_USB_STORAGE=y\n+# CONFIG_USB_STORAGE_DEBUG is not set\n+# CONFIG_USB_STORAGE_REALTEK is not set\n+# CONFIG_USB_STORAGE_DATAFAB is not set\n+# CONFIG_USB_STORAGE_FREECOM is not set\n+# CONFIG_USB_STORAGE_ISD200 is not set\n+# CONFIG_USB_STORAGE_USBAT is not set\n+# CONFIG_USB_STORAGE_SDDR09 is not set\n+# CONFIG_USB_STORAGE_SDDR55 is not set\n+# CONFIG_USB_STORAGE_JUMPSHOT is not set\n+# CONFIG_USB_STORAGE_ALAUDA is not set\n+# CONFIG_USB_STORAGE_ONETOUCH is not set\n+# CONFIG_USB_STORAGE_KARMA is not set\n+# CONFIG_USB_STORAGE_CYPRESS_ATACB is not set\n+# CONFIG_USB_STORAGE_ENE_UB6250 is not set\n+# CONFIG_USB_UAS is not set\n+\n+#\n+# USB Imaging devices\n+#\n+# CONFIG_USB_MDC800 is not set\n+# CONFIG_USB_MICROTEK is not set\n+# CONFIG_USBIP_CORE is not set\n+# CONFIG_USB_MUSB_HDRC is not set\n+# CONFIG_USB_DWC3 is not set\n+# CONFIG_USB_DWC2 is not set\n+CONFIG_USB_ISP1760=y\n+CONFIG_USB_ISP1760_HCD=y\n+CONFIG_USB_ISP1760_HOST_ROLE=y\n+\n+#\n+# USB port drivers\n+#\n+# CONFIG_USB_SERIAL is not set\n+\n+#\n+# USB Miscellaneous drivers\n+#\n+# CONFIG_USB_EMI62 is not set\n+# CONFIG_USB_EMI26 is not set\n+# CONFIG_USB_ADUTUX is not set\n+# CONFIG_USB_SEVSEG is not set\n+# CONFIG_USB_RIO500 is not set\n+# CONFIG_USB_LEGOTOWER is not set\n+# CONFIG_USB_LCD is not set\n+# CONFIG_USB_LED is not set\n+# CONFIG_USB_CYPRESS_CY7C63 is not set\n+# CONFIG_USB_CYTHERM is not set\n+# CONFIG_USB_IDMOUSE is not set\n+# CONFIG_USB_FTDI_ELAN is not set\n+# CONFIG_USB_APPLEDISPLAY is not set\n+# CONFIG_USB_LD is not set\n+# CONFIG_USB_TRANCEVIBRATOR is not set\n+# CONFIG_USB_IOWARRIOR is not set\n+# CONFIG_USB_TEST is not set\n+# CONFIG_USB_EHSET_TEST_FIXTURE is not set\n+# CONFIG_USB_ISIGHTFW is not set\n+# CONFIG_USB_YUREX is not set\n+# CONFIG_USB_EZUSB_FX2 is not set\n+# CONFIG_USB_HSIC_USB3503 is not set\n+# CONFIG_USB_LINK_LAYER_TEST is not set\n+# CONFIG_USB_CHAOSKEY is not set\n+\n+#\n+# USB Physical Layer drivers\n+#\n+# CONFIG_USB_PHY is not set\n+# CONFIG_NOP_USB_XCEIV is not set\n+# CONFIG_AM335X_PHY_USB is not set\n+# CONFIG_USB_GPIO_VBUS is not set\n+# CONFIG_USB_ISP1301 is not set\n+# CONFIG_USB_ULPI is not set\n+# CONFIG_USB_GADGET is not set\n+# CONFIG_USB_LED_TRIG is not set\n+# CONFIG_UWB is not set\n+CONFIG_MMC=y\n+# CONFIG_MMC_DEBUG is not set\n+\n+#\n+# MMC/SD/SDIO Card Drivers\n+#\n+CONFIG_MMC_BLOCK=y\n+CONFIG_MMC_BLOCK_MINORS=8\n+CONFIG_MMC_BLOCK_BOUNCE=y\n+# CONFIG_SDIO_UART is not set\n+# CONFIG_MMC_TEST is not set\n+\n+#\n+# MMC/SD/SDIO Host Controller Drivers\n+#\n+CONFIG_MMC_ARMMMCI=y\n+# CONFIG_MMC_SDHCI is not set\n+# CONFIG_MMC_DW is not set\n+# CONFIG_MMC_VUB300 is not set\n+# CONFIG_MMC_USHC is not set\n+# CONFIG_MMC_USDHI6ROL0 is not set\n+# CONFIG_MMC_MTK is not set\n+# CONFIG_MEMSTICK is not set\n+CONFIG_NEW_LEDS=y\n+CONFIG_LEDS_CLASS=y\n+# CONFIG_LEDS_CLASS_FLASH is not set\n+\n+#\n+# LED drivers\n+#\n+# CONFIG_LEDS_BCM6328 is not set\n+# CONFIG_LEDS_BCM6358 is not set\n+# CONFIG_LEDS_LM3530 is not set\n+# CONFIG_LEDS_LM3642 is not set\n+# CONFIG_LEDS_PCA9532 is not set\n+CONFIG_LEDS_GPIO=y\n+# CONFIG_LEDS_LP3944 is not set\n+# CONFIG_LEDS_LP5521 is not set\n+# CONFIG_LEDS_LP5523 is not set\n+# CONFIG_LEDS_LP5562 is not set\n+# CONFIG_LEDS_LP8501 is not set\n+# CONFIG_LEDS_LP8860 is not set\n+# CONFIG_LEDS_PCA955X is not set\n+# CONFIG_LEDS_PCA963X is not set\n+# CONFIG_LEDS_REGULATOR is not set\n+# CONFIG_LEDS_BD2802 is not set\n+# CONFIG_LEDS_LT3593 is not set\n+# CONFIG_LEDS_TCA6507 is not set\n+# CONFIG_LEDS_TLC591XX is not set\n+# CONFIG_LEDS_LM355x is not set\n+\n+#\n+# LED driver for blink(1) USB RGB LED is under Special HID drivers (HID_THINGM)\n+#\n+# CONFIG_LEDS_BLINKM is not set\n+# CONFIG_LEDS_SYSCON is not set\n+\n+#\n+# LED Triggers\n+#\n+CONFIG_LEDS_TRIGGERS=y\n+# CONFIG_LEDS_TRIGGER_TIMER is not set\n+# CONFIG_LEDS_TRIGGER_ONESHOT is not set\n+CONFIG_LEDS_TRIGGER_HEARTBEAT=y\n+# CONFIG_LEDS_TRIGGER_BACKLIGHT is not set\n+CONFIG_LEDS_TRIGGER_CPU=y\n+# CONFIG_LEDS_TRIGGER_GPIO is not set\n+# CONFIG_LEDS_TRIGGER_DEFAULT_ON is not set\n+\n+#\n+# iptables trigger is under Netfilter config (LED target)\n+#\n+# CONFIG_LEDS_TRIGGER_TRANSIENT is not set\n+# CONFIG_LEDS_TRIGGER_CAMERA is not set\n+# CONFIG_ACCESSIBILITY is not set\n+CONFIG_EDAC_ATOMIC_SCRUB=y\n+CONFIG_EDAC_SUPPORT=y\n+# CONFIG_EDAC is not set\n+CONFIG_RTC_LIB=y\n+CONFIG_RTC_CLASS=y\n+CONFIG_RTC_HCTOSYS=y\n+CONFIG_RTC_HCTOSYS_DEVICE=\"rtc0\"\n+CONFIG_RTC_SYSTOHC=y\n+CONFIG_RTC_SYSTOHC_DEVICE=\"rtc0\"\n+# CONFIG_RTC_DEBUG is not set\n+\n+#\n+# RTC interfaces\n+#\n+CONFIG_RTC_INTF_SYSFS=y\n+CONFIG_RTC_INTF_PROC=y\n+CONFIG_RTC_INTF_DEV=y\n+# CONFIG_RTC_INTF_DEV_UIE_EMUL is not set\n+# CONFIG_RTC_DRV_TEST is not set\n+\n+#\n+# I2C RTC drivers\n+#\n+# CONFIG_RTC_DRV_ABB5ZES3 is not set\n+# CONFIG_RTC_DRV_ABX80X is not set\n+# CONFIG_RTC_DRV_DS1307 is not set\n+# CONFIG_RTC_DRV_DS1374 is not set\n+# CONFIG_RTC_DRV_DS1672 is not set\n+# CONFIG_RTC_DRV_DS3232 is not set\n+# CONFIG_RTC_DRV_HYM8563 is not set\n+# CONFIG_RTC_DRV_MAX6900 is not set\n+# CONFIG_RTC_DRV_RS5C372 is not set\n+# CONFIG_RTC_DRV_ISL1208 is not set\n+# CONFIG_RTC_DRV_ISL12022 is not set\n+# CONFIG_RTC_DRV_ISL12057 is not set\n+# CONFIG_RTC_DRV_X1205 is not set\n+# CONFIG_RTC_DRV_PCF2127 is not set\n+# CONFIG_RTC_DRV_PCF8523 is not set\n+# CONFIG_RTC_DRV_PCF8563 is not set\n+# CONFIG_RTC_DRV_PCF85063 is not set\n+# CONFIG_RTC_DRV_PCF8583 is not set\n+# CONFIG_RTC_DRV_M41T80 is not set\n+# CONFIG_RTC_DRV_BQ32K is not set\n+# CONFIG_RTC_DRV_S35390A is not set\n+# CONFIG_RTC_DRV_FM3130 is not set\n+# CONFIG_RTC_DRV_RX8581 is not set\n+# CONFIG_RTC_DRV_RX8025 is not set\n+# CONFIG_RTC_DRV_EM3027 is not set\n+# CONFIG_RTC_DRV_RV3029C2 is not set\n+# CONFIG_RTC_DRV_RV8803 is not set\n+\n+#\n+# SPI RTC drivers\n+#\n+\n+#\n+# Platform RTC drivers\n+#\n+# CONFIG_RTC_DRV_CMOS is not set\n+# CONFIG_RTC_DRV_DS1286 is not set\n+# CONFIG_RTC_DRV_DS1511 is not set\n+# CONFIG_RTC_DRV_DS1553 is not set\n+# CONFIG_RTC_DRV_DS1685_FAMILY is not set\n+# CONFIG_RTC_DRV_DS1742 is not set\n+# CONFIG_RTC_DRV_DS2404 is not set\n+# CONFIG_RTC_DRV_STK17TA8 is not set\n+# CONFIG_RTC_DRV_M48T86 is not set\n+# CONFIG_RTC_DRV_M48T35 is not set\n+# CONFIG_RTC_DRV_M48T59 is not set\n+# CONFIG_RTC_DRV_MSM6242 is not set\n+# CONFIG_RTC_DRV_BQ4802 is not set\n+# CONFIG_RTC_DRV_RP5C01 is not set\n+# CONFIG_RTC_DRV_V3020 is not set\n+# CONFIG_RTC_DRV_ZYNQMP is not set\n+\n+#\n+# on-CPU RTC drivers\n+#\n+# CONFIG_RTC_DRV_PL030 is not set\n+CONFIG_RTC_DRV_PL031=y\n+# CONFIG_RTC_DRV_SNVS is not set\n+\n+#\n+# HID Sensor RTC drivers\n+#\n+# CONFIG_RTC_DRV_HID_SENSOR_TIME is not set\n+# CONFIG_DMADEVICES is not set\n+# CONFIG_AUXDISPLAY is not set\n+# CONFIG_UIO is not set\n+# CONFIG_VIRT_DRIVERS is not set\n+CONFIG_VIRTIO=y\n+\n+#\n+# Virtio drivers\n+#\n+CONFIG_VIRTIO_BALLOON=y\n+# CONFIG_VIRTIO_INPUT is not set\n+CONFIG_VIRTIO_MMIO=y\n+CONFIG_VIRTIO_MMIO_CMDLINE_DEVICES=y\n+\n+#\n+# Microsoft Hyper-V guest support\n+#\n+# CONFIG_STAGING is not set\n+# CONFIG_CHROME_PLATFORMS is not set\n+CONFIG_CLKDEV_LOOKUP=y\n+CONFIG_HAVE_CLK_PREPARE=y\n+CONFIG_COMMON_CLK=y\n+\n+#\n+# Common Clock Framework\n+#\n+CONFIG_COMMON_CLK_VERSATILE=y\n+CONFIG_CLK_SP810=y\n+CONFIG_CLK_VEXPRESS_OSC=y\n+# CONFIG_COMMON_CLK_SI5351 is not set\n+# CONFIG_COMMON_CLK_SI514 is not set\n+# CONFIG_COMMON_CLK_SI570 is not set\n+# CONFIG_COMMON_CLK_CDCE925 is not set\n+# CONFIG_CLK_QORIQ is not set\n+# CONFIG_COMMON_CLK_PXA is not set\n+# CONFIG_COMMON_CLK_CDCE706 is not set\n+\n+#\n+# Hardware Spinlock drivers\n+#\n+\n+#\n+# Clock Source drivers\n+#\n+CONFIG_CLKSRC_OF=y\n+CONFIG_CLKSRC_PROBE=y\n+CONFIG_CLKSRC_MMIO=y\n+CONFIG_ARM_ARCH_TIMER=y\n+CONFIG_ARM_ARCH_TIMER_EVTSTREAM=y\n+CONFIG_ARM_GLOBAL_TIMER=y\n+CONFIG_ARM_TIMER_SP804=y\n+CONFIG_CLKSRC_ARM_GLOBAL_TIMER_SCHED_CLOCK=y\n+# CONFIG_ATMEL_PIT is not set\n+# CONFIG_SH_TIMER_CMT is not set\n+# CONFIG_SH_TIMER_MTU2 is not set\n+# CONFIG_SH_TIMER_TMU is not set\n+# CONFIG_EM_TIMER_STI is not set\n+CONFIG_CLKSRC_VERSATILE=y\n+# CONFIG_MAILBOX is not set\n+CONFIG_IOMMU_SUPPORT=y\n+\n+#\n+# Generic IOMMU Pagetable Support\n+#\n+# CONFIG_IOMMU_IO_PGTABLE_LPAE is not set\n+# CONFIG_ARM_SMMU is not set\n+\n+#\n+# Remoteproc drivers\n+#\n+# CONFIG_STE_MODEM_RPROC is not set\n+\n+#\n+# Rpmsg drivers\n+#\n+\n+#\n+# SOC (System On Chip) specific Drivers\n+#\n+# CONFIG_SOC_BRCMSTB is not set\n+# CONFIG_SUNXI_SRAM is not set\n+# CONFIG_SOC_TI is not set\n+# CONFIG_PM_DEVFREQ is not set\n+# CONFIG_EXTCON is not set\n+# CONFIG_MEMORY is not set\n+# CONFIG_IIO is not set\n+# CONFIG_PWM is not set\n+CONFIG_IRQCHIP=y\n+CONFIG_ARM_GIC=y\n+# CONFIG_IPACK_BUS is not set\n+# CONFIG_RESET_CONTROLLER is not set\n+# CONFIG_FMC is not set\n+\n+#\n+# PHY Subsystem\n+#\n+# CONFIG_GENERIC_PHY is not set\n+# CONFIG_PHY_PXA_28NM_HSIC is not set\n+# CONFIG_PHY_PXA_28NM_USB2 is not set\n+# CONFIG_BCM_KONA_USB2_PHY is not set\n+# CONFIG_POWERCAP is not set\n+# CONFIG_MCB is not set\n+\n+#\n+# Performance monitor support\n+#\n+CONFIG_ARM_PMU=y\n+# CONFIG_RAS is not set\n+\n+#\n+# Android\n+#\n+# CONFIG_ANDROID is not set\n+# CONFIG_NVMEM is not set\n+# CONFIG_STM is not set\n+# CONFIG_STM_DUMMY is not set\n+# CONFIG_STM_SOURCE_CONSOLE is not set\n+# CONFIG_INTEL_TH is not set\n+\n+#\n+# FPGA Configuration Support\n+#\n+# CONFIG_FPGA is not set\n+\n+#\n+# Firmware Drivers\n+#\n+CONFIG_ARM_PSCI_FW=y\n+# CONFIG_FIRMWARE_MEMMAP is not set\n+\n+#\n+# File systems\n+#\n+CONFIG_DCACHE_WORD_ACCESS=y\n+CONFIG_EXT2_FS=y\n+# CONFIG_EXT2_FS_XATTR is not set\n+CONFIG_EXT3_FS=y\n+# CONFIG_EXT3_FS_POSIX_ACL is not set\n+# CONFIG_EXT3_FS_SECURITY is not set\n+CONFIG_EXT4_FS=y\n+# CONFIG_EXT4_FS_POSIX_ACL is not set\n+# CONFIG_EXT4_FS_SECURITY is not set\n+# CONFIG_EXT4_ENCRYPTION is not set\n+# CONFIG_EXT4_DEBUG is not set\n+CONFIG_JBD2=y\n+# CONFIG_JBD2_DEBUG is not set\n+CONFIG_FS_MBCACHE=y\n+# CONFIG_REISERFS_FS is not set\n+# CONFIG_JFS_FS is not set\n+# CONFIG_BTRFS_FS is not set\n+# CONFIG_NILFS2_FS is not set\n+# CONFIG_F2FS_FS is not set\n+# CONFIG_FS_POSIX_ACL is not set\n+CONFIG_FILE_LOCKING=y\n+CONFIG_FSNOTIFY=y\n+CONFIG_DNOTIFY=y\n+CONFIG_INOTIFY_USER=y\n+# CONFIG_FANOTIFY is not set\n+# CONFIG_QUOTA is not set\n+# CONFIG_QUOTACTL is not set\n+# CONFIG_AUTOFS4_FS is not set\n+# CONFIG_FUSE_FS is not set\n+# CONFIG_OVERLAY_FS is not set\n+\n+#\n+# Caches\n+#\n+# CONFIG_FSCACHE is not set\n+\n+#\n+# CD-ROM/DVD Filesystems\n+#\n+# CONFIG_ISO9660_FS is not set\n+# CONFIG_UDF_FS is not set\n+\n+#\n+# DOS/FAT/NT Filesystems\n+#\n+CONFIG_FAT_FS=y\n+# CONFIG_MSDOS_FS is not set\n+CONFIG_VFAT_FS=y\n+CONFIG_FAT_DEFAULT_CODEPAGE=437\n+CONFIG_FAT_DEFAULT_IOCHARSET=\"iso8859-1\"\n+# CONFIG_NTFS_FS is not set\n+\n+#\n+# Pseudo filesystems\n+#\n+CONFIG_PROC_FS=y\n+CONFIG_PROC_SYSCTL=y\n+CONFIG_PROC_PAGE_MONITOR=y\n+# CONFIG_PROC_CHILDREN is not set\n+CONFIG_KERNFS=y\n+CONFIG_SYSFS=y\n+CONFIG_TMPFS=y\n+# CONFIG_TMPFS_POSIX_ACL is not set\n+# CONFIG_TMPFS_XATTR is not set\n+# CONFIG_HUGETLB_PAGE is not set\n+# CONFIG_CONFIGFS_FS is not set\n+CONFIG_MISC_FILESYSTEMS=y\n+# CONFIG_ADFS_FS is not set\n+# CONFIG_AFFS_FS is not set\n+# CONFIG_HFS_FS is not set\n+# CONFIG_HFSPLUS_FS is not set\n+# CONFIG_BEFS_FS is not set\n+# CONFIG_BFS_FS is not set\n+# CONFIG_EFS_FS is not set\n+CONFIG_JFFS2_FS=y\n+CONFIG_JFFS2_FS_DEBUG=0\n+CONFIG_JFFS2_FS_WRITEBUFFER=y\n+# CONFIG_JFFS2_FS_WBUF_VERIFY is not set\n+# CONFIG_JFFS2_SUMMARY is not set\n+# CONFIG_JFFS2_FS_XATTR is not set\n+# CONFIG_JFFS2_COMPRESSION_OPTIONS is not set\n+CONFIG_JFFS2_ZLIB=y\n+# CONFIG_JFFS2_LZO is not set\n+CONFIG_JFFS2_RTIME=y\n+# CONFIG_JFFS2_RUBIN is not set\n+CONFIG_UBIFS_FS=y\n+# CONFIG_UBIFS_FS_ADVANCED_COMPR is not set\n+CONFIG_UBIFS_FS_LZO=y\n+CONFIG_UBIFS_FS_ZLIB=y\n+# CONFIG_UBIFS_ATIME_SUPPORT is not set\n+# CONFIG_LOGFS is not set\n+CONFIG_CRAMFS=y\n+CONFIG_SQUASHFS=y\n+CONFIG_SQUASHFS_FILE_CACHE=y\n+# CONFIG_SQUASHFS_FILE_DIRECT is not set\n+CONFIG_SQUASHFS_DECOMP_SINGLE=y\n+# CONFIG_SQUASHFS_DECOMP_MULTI is not set\n+# CONFIG_SQUASHFS_DECOMP_MULTI_PERCPU is not set\n+# CONFIG_SQUASHFS_XATTR is not set\n+CONFIG_SQUASHFS_ZLIB=y\n+# CONFIG_SQUASHFS_LZ4 is not set\n+CONFIG_SQUASHFS_LZO=y\n+# CONFIG_SQUASHFS_XZ is not set\n+# CONFIG_SQUASHFS_4K_DEVBLK_SIZE is not set\n+# CONFIG_SQUASHFS_EMBEDDED is not set\n+CONFIG_SQUASHFS_FRAGMENT_CACHE_SIZE=3\n+# CONFIG_VXFS_FS is not set\n+# CONFIG_MINIX_FS is not set\n+# CONFIG_OMFS_FS is not set\n+# CONFIG_HPFS_FS is not set\n+# CONFIG_QNX4FS_FS is not set\n+# CONFIG_QNX6FS_FS is not set\n+# CONFIG_ROMFS_FS is not set\n+# CONFIG_PSTORE is not set\n+# CONFIG_SYSV_FS is not set\n+# CONFIG_UFS_FS is not set\n+CONFIG_NETWORK_FILESYSTEMS=y\n+CONFIG_NFS_FS=y\n+CONFIG_NFS_V2=y\n+CONFIG_NFS_V3=y\n+# CONFIG_NFS_V3_ACL is not set\n+# CONFIG_NFS_V4 is not set\n+# CONFIG_NFS_SWAP is not set\n+CONFIG_ROOT_NFS=y\n+# CONFIG_NFSD is not set\n+CONFIG_GRACE_PERIOD=y\n+CONFIG_LOCKD=y\n+CONFIG_LOCKD_V4=y\n+CONFIG_NFS_COMMON=y\n+CONFIG_SUNRPC=y\n+# CONFIG_SUNRPC_DEBUG is not set\n+# CONFIG_CEPH_FS is not set\n+# CONFIG_CIFS is not set\n+# CONFIG_NCP_FS is not set\n+# CONFIG_CODA_FS is not set\n+# CONFIG_AFS_FS is not set\n+CONFIG_9P_FS=y\n+# CONFIG_9P_FS_POSIX_ACL is not set\n+# CONFIG_9P_FS_SECURITY is not set\n+CONFIG_NLS=y\n+CONFIG_NLS_DEFAULT=\"iso8859-1\"\n+CONFIG_NLS_CODEPAGE_437=y\n+# CONFIG_NLS_CODEPAGE_737 is not set\n+# CONFIG_NLS_CODEPAGE_775 is not set\n+# CONFIG_NLS_CODEPAGE_850 is not set\n+# CONFIG_NLS_CODEPAGE_852 is not set\n+# CONFIG_NLS_CODEPAGE_855 is not set\n+# CONFIG_NLS_CODEPAGE_857 is not set\n+# CONFIG_NLS_CODEPAGE_860 is not set\n+# CONFIG_NLS_CODEPAGE_861 is not set\n+# CONFIG_NLS_CODEPAGE_862 is not set\n+# CONFIG_NLS_CODEPAGE_863 is not set\n+# CONFIG_NLS_CODEPAGE_864 is not set\n+# CONFIG_NLS_CODEPAGE_865 is not set\n+# CONFIG_NLS_CODEPAGE_866 is not set\n+# CONFIG_NLS_CODEPAGE_869 is not set\n+# CONFIG_NLS_CODEPAGE_936 is not set\n+# CONFIG_NLS_CODEPAGE_950 is not set\n+# CONFIG_NLS_CODEPAGE_932 is not set\n+# CONFIG_NLS_CODEPAGE_949 is not set\n+# CONFIG_NLS_CODEPAGE_874 is not set\n+# CONFIG_NLS_ISO8859_8 is not set\n+# CONFIG_NLS_CODEPAGE_1250 is not set\n+# CONFIG_NLS_CODEPAGE_1251 is not set\n+# CONFIG_NLS_ASCII is not set\n+CONFIG_NLS_ISO8859_1=y\n+# CONFIG_NLS_ISO8859_2 is not set\n+# CONFIG_NLS_ISO8859_3 is not set\n+# CONFIG_NLS_ISO8859_4 is not set\n+# CONFIG_NLS_ISO8859_5 is not set\n+# CONFIG_NLS_ISO8859_6 is not set\n+# CONFIG_NLS_ISO8859_7 is not set\n+# CONFIG_NLS_ISO8859_9 is not set\n+# CONFIG_NLS_ISO8859_13 is not set\n+# CONFIG_NLS_ISO8859_14 is not set\n+# CONFIG_NLS_ISO8859_15 is not set\n+# CONFIG_NLS_KOI8_R is not set\n+# CONFIG_NLS_KOI8_U is not set\n+# CONFIG_NLS_MAC_ROMAN is not set\n+# CONFIG_NLS_MAC_CELTIC is not set\n+# CONFIG_NLS_MAC_CENTEURO is not set\n+# CONFIG_NLS_MAC_CROATIAN is not set\n+# CONFIG_NLS_MAC_CYRILLIC is not set\n+# CONFIG_NLS_MAC_GAELIC is not set\n+# CONFIG_NLS_MAC_GREEK is not set\n+# CONFIG_NLS_MAC_ICELAND is not set\n+# CONFIG_NLS_MAC_INUIT is not set\n+# CONFIG_NLS_MAC_ROMANIAN is not set\n+# CONFIG_NLS_MAC_TURKISH is not set\n+# CONFIG_NLS_UTF8 is not set\n+\n+#\n+# Kernel hacking\n+#\n+\n+#\n+# printk and dmesg options\n+#\n+# CONFIG_PRINTK_TIME is not set\n+CONFIG_MESSAGE_LOGLEVEL_DEFAULT=4\n+# CONFIG_BOOT_PRINTK_DELAY is not set\n+# CONFIG_DYNAMIC_DEBUG is not set\n+\n+#\n+# Compile-time checks and compiler options\n+#\n+CONFIG_DEBUG_INFO=y\n+# CONFIG_DEBUG_INFO_REDUCED is not set\n+# CONFIG_DEBUG_INFO_SPLIT is not set\n+# CONFIG_DEBUG_INFO_DWARF4 is not set\n+# CONFIG_GDB_SCRIPTS is not set\n+CONFIG_ENABLE_WARN_DEPRECATED=y\n+CONFIG_ENABLE_MUST_CHECK=y\n+CONFIG_FRAME_WARN=1024\n+# CONFIG_STRIP_ASM_SYMS is not set\n+# CONFIG_READABLE_ASM is not set\n+# CONFIG_UNUSED_SYMBOLS is not set\n+# CONFIG_PAGE_OWNER is not set\n+CONFIG_DEBUG_FS=y\n+# CONFIG_HEADERS_CHECK is not set\n+# CONFIG_DEBUG_SECTION_MISMATCH is not set\n+CONFIG_SECTION_MISMATCH_WARN_ONLY=y\n+# CONFIG_DEBUG_FORCE_WEAK_PER_CPU is not set\n+CONFIG_MAGIC_SYSRQ=y\n+CONFIG_MAGIC_SYSRQ_DEFAULT_ENABLE=0x1\n+CONFIG_DEBUG_KERNEL=y\n+\n+#\n+# Memory Debugging\n+#\n+# CONFIG_PAGE_EXTENSION is not set\n+# CONFIG_DEBUG_PAGEALLOC is not set\n+# CONFIG_DEBUG_OBJECTS is not set\n+# CONFIG_SLUB_DEBUG_ON is not set\n+# CONFIG_SLUB_STATS is not set\n+CONFIG_HAVE_DEBUG_KMEMLEAK=y\n+# CONFIG_DEBUG_KMEMLEAK is not set\n+# CONFIG_DEBUG_STACK_USAGE is not set\n+# CONFIG_DEBUG_VM is not set\n+CONFIG_DEBUG_MEMORY_INIT=y\n+# CONFIG_DEBUG_PER_CPU_MAPS is not set\n+# CONFIG_DEBUG_SHIRQ is not set\n+\n+#\n+# Debug Lockups and Hangs\n+#\n+# CONFIG_LOCKUP_DETECTOR is not set\n+CONFIG_DETECT_HUNG_TASK=y\n+CONFIG_DEFAULT_HUNG_TASK_TIMEOUT=120\n+# CONFIG_BOOTPARAM_HUNG_TASK_PANIC is not set\n+CONFIG_BOOTPARAM_HUNG_TASK_PANIC_VALUE=0\n+# CONFIG_PANIC_ON_OOPS is not set\n+CONFIG_PANIC_ON_OOPS_VALUE=0\n+CONFIG_PANIC_TIMEOUT=0\n+# CONFIG_SCHED_DEBUG is not set\n+# CONFIG_SCHED_INFO is not set\n+# CONFIG_SCHEDSTATS is not set\n+# CONFIG_SCHED_STACK_END_CHECK is not set\n+# CONFIG_DEBUG_TIMEKEEPING is not set\n+# CONFIG_TIMER_STATS is not set\n+\n+#\n+# Lock Debugging (spinlocks, mutexes, etc...)\n+#\n+# CONFIG_DEBUG_RT_MUTEXES is not set\n+# CONFIG_DEBUG_SPINLOCK is not set\n+# CONFIG_DEBUG_MUTEXES is not set\n+# CONFIG_DEBUG_WW_MUTEX_SLOWPATH is not set\n+# CONFIG_DEBUG_LOCK_ALLOC is not set\n+# CONFIG_PROVE_LOCKING is not set\n+# CONFIG_LOCK_STAT is not set\n+# CONFIG_DEBUG_ATOMIC_SLEEP is not set\n+# CONFIG_DEBUG_LOCKING_API_SELFTESTS is not set\n+# CONFIG_LOCK_TORTURE_TEST is not set\n+# CONFIG_STACKTRACE is not set\n+# CONFIG_DEBUG_KOBJECT is not set\n+CONFIG_DEBUG_BUGVERBOSE=y\n+# CONFIG_DEBUG_LIST is not set\n+# CONFIG_DEBUG_PI_LIST is not set\n+# CONFIG_DEBUG_SG is not set\n+# CONFIG_DEBUG_NOTIFIERS is not set\n+# CONFIG_DEBUG_CREDENTIALS is not set\n+\n+#\n+# RCU Debugging\n+#\n+# CONFIG_PROVE_RCU is not set\n+# CONFIG_SPARSE_RCU_POINTER is not set\n+# CONFIG_TORTURE_TEST is not set\n+# CONFIG_RCU_TORTURE_TEST is not set\n+CONFIG_RCU_CPU_STALL_TIMEOUT=21\n+# CONFIG_RCU_TRACE is not set\n+# CONFIG_RCU_EQS_DEBUG is not set\n+# CONFIG_DEBUG_BLOCK_EXT_DEVT is not set\n+# CONFIG_NOTIFIER_ERROR_INJECTION is not set\n+# CONFIG_FAULT_INJECTION is not set\n+CONFIG_HAVE_FUNCTION_TRACER=y\n+CONFIG_HAVE_FUNCTION_GRAPH_TRACER=y\n+CONFIG_HAVE_DYNAMIC_FTRACE=y\n+CONFIG_HAVE_FTRACE_MCOUNT_RECORD=y\n+CONFIG_HAVE_SYSCALL_TRACEPOINTS=y\n+CONFIG_HAVE_C_RECORDMCOUNT=y\n+CONFIG_TRACE_CLOCK=y\n+CONFIG_RING_BUFFER=y\n+CONFIG_RING_BUFFER_ALLOW_SWAP=y\n+CONFIG_TRACING_SUPPORT=y\n+CONFIG_FTRACE=y\n+# CONFIG_FUNCTION_TRACER is not set\n+# CONFIG_IRQSOFF_TRACER is not set\n+# CONFIG_SCHED_TRACER is not set\n+# CONFIG_ENABLE_DEFAULT_TRACERS is not set\n+# CONFIG_FTRACE_SYSCALLS is not set\n+# CONFIG_TRACER_SNAPSHOT is not set\n+CONFIG_BRANCH_PROFILE_NONE=y\n+# CONFIG_PROFILE_ANNOTATED_BRANCHES is not set\n+# CONFIG_PROFILE_ALL_BRANCHES is not set\n+# CONFIG_STACK_TRACER is not set\n+# CONFIG_BLK_DEV_IO_TRACE is not set\n+# CONFIG_UPROBE_EVENT is not set\n+# CONFIG_PROBE_EVENTS is not set\n+# CONFIG_TRACEPOINT_BENCHMARK is not set\n+# CONFIG_RING_BUFFER_BENCHMARK is not set\n+# CONFIG_RING_BUFFER_STARTUP_TEST is not set\n+CONFIG_TRACING_EVENTS_GPIO=y\n+\n+#\n+# Runtime Testing\n+#\n+# CONFIG_LKDTM is not set\n+# CONFIG_TEST_LIST_SORT is not set\n+# CONFIG_BACKTRACE_SELF_TEST is not set\n+# CONFIG_RBTREE_TEST is not set\n+# CONFIG_INTERVAL_TREE_TEST is not set\n+# CONFIG_PERCPU_TEST is not set\n+# CONFIG_ATOMIC64_SELFTEST is not set\n+# CONFIG_TEST_HEXDUMP is not set\n+# CONFIG_TEST_STRING_HELPERS is not set\n+# CONFIG_TEST_KSTRTOX is not set\n+# CONFIG_TEST_PRINTF is not set\n+# CONFIG_TEST_RHASHTABLE is not set\n+# CONFIG_DMA_API_DEBUG is not set\n+# CONFIG_TEST_LKM is not set\n+# CONFIG_TEST_USER_COPY is not set\n+# CONFIG_TEST_BPF is not set\n+# CONFIG_TEST_FIRMWARE is not set\n+# CONFIG_TEST_UDELAY is not set\n+# CONFIG_MEMTEST is not set\n+# CONFIG_TEST_STATIC_KEYS is not set\n+# CONFIG_SAMPLES is not set\n+CONFIG_HAVE_ARCH_KGDB=y\n+# CONFIG_KGDB is not set\n+# CONFIG_ARM_PTDUMP is not set\n+# CONFIG_STRICT_DEVMEM is not set\n+CONFIG_ARM_UNWIND=y\n+CONFIG_DEBUG_USER=y\n+# CONFIG_DEBUG_LL is not set\n+CONFIG_DEBUG_LL_INCLUDE=\"mach/debug-macro.S\"\n+# CONFIG_DEBUG_UART_8250 is not set\n+CONFIG_UNCOMPRESS_INCLUDE=\"debug/uncompress.h\"\n+# CONFIG_PID_IN_CONTEXTIDR is not set\n+# CONFIG_DEBUG_SET_MODULE_RONX is not set\n+# CONFIG_CORESIGHT is not set\n+\n+#\n+# Security options\n+#\n+# CONFIG_KEYS is not set\n+# CONFIG_SECURITY_DMESG_RESTRICT is not set\n+# CONFIG_SECURITY is not set\n+# CONFIG_SECURITYFS is not set\n+CONFIG_DEFAULT_SECURITY_DAC=y\n+CONFIG_DEFAULT_SECURITY=\"\"\n+CONFIG_CRYPTO=y\n+\n+#\n+# Crypto core or helper\n+#\n+CONFIG_CRYPTO_ALGAPI=y\n+CONFIG_CRYPTO_ALGAPI2=y\n+CONFIG_CRYPTO_AEAD=m\n+CONFIG_CRYPTO_AEAD2=y\n+CONFIG_CRYPTO_BLKCIPHER2=y\n+CONFIG_CRYPTO_HASH=y\n+CONFIG_CRYPTO_HASH2=y\n+CONFIG_CRYPTO_RNG=m\n+CONFIG_CRYPTO_RNG2=y\n+CONFIG_CRYPTO_RNG_DEFAULT=m\n+CONFIG_CRYPTO_PCOMP2=y\n+CONFIG_CRYPTO_AKCIPHER2=y\n+# CONFIG_CRYPTO_RSA is not set\n+CONFIG_CRYPTO_MANAGER=m\n+CONFIG_CRYPTO_MANAGER2=y\n+# CONFIG_CRYPTO_USER is not set\n+CONFIG_CRYPTO_MANAGER_DISABLE_TESTS=y\n+# CONFIG_CRYPTO_GF128MUL is not set\n+CONFIG_CRYPTO_NULL=m\n+CONFIG_CRYPTO_NULL2=y\n+# CONFIG_CRYPTO_PCRYPT is not set\n+CONFIG_CRYPTO_WORKQUEUE=y\n+# CONFIG_CRYPTO_CRYPTD is not set\n+# CONFIG_CRYPTO_MCRYPTD is not set\n+# CONFIG_CRYPTO_AUTHENC is not set\n+# CONFIG_CRYPTO_TEST is not set\n+\n+#\n+# Authenticated Encryption with Associated Data\n+#\n+# CONFIG_CRYPTO_CCM is not set\n+# CONFIG_CRYPTO_GCM is not set\n+# CONFIG_CRYPTO_CHACHA20POLY1305 is not set\n+# CONFIG_CRYPTO_SEQIV is not set\n+CONFIG_CRYPTO_ECHAINIV=m\n+\n+#\n+# Block modes\n+#\n+# CONFIG_CRYPTO_CBC is not set\n+# CONFIG_CRYPTO_CTR is not set\n+# CONFIG_CRYPTO_CTS is not set\n+# CONFIG_CRYPTO_ECB is not set\n+# CONFIG_CRYPTO_LRW is not set\n+# CONFIG_CRYPTO_PCBC is not set\n+# CONFIG_CRYPTO_XTS is not set\n+# CONFIG_CRYPTO_KEYWRAP is not set\n+\n+#\n+# Hash modes\n+#\n+# CONFIG_CRYPTO_CMAC is not set\n+CONFIG_CRYPTO_HMAC=m\n+# CONFIG_CRYPTO_XCBC is not set\n+# CONFIG_CRYPTO_VMAC is not set\n+\n+#\n+# Digest\n+#\n+CONFIG_CRYPTO_CRC32C=y\n+# CONFIG_CRYPTO_CRC32 is not set\n+# CONFIG_CRYPTO_CRCT10DIF is not set\n+# CONFIG_CRYPTO_GHASH is not set\n+# CONFIG_CRYPTO_POLY1305 is not set\n+# CONFIG_CRYPTO_MD4 is not set\n+# CONFIG_CRYPTO_MD5 is not set\n+# CONFIG_CRYPTO_MICHAEL_MIC is not set\n+# CONFIG_CRYPTO_RMD128 is not set\n+# CONFIG_CRYPTO_RMD160 is not set\n+# CONFIG_CRYPTO_RMD256 is not set\n+# CONFIG_CRYPTO_RMD320 is not set\n+# CONFIG_CRYPTO_SHA1 is not set\n+CONFIG_CRYPTO_SHA256=m\n+# CONFIG_CRYPTO_SHA512 is not set\n+# CONFIG_CRYPTO_TGR192 is not set\n+# CONFIG_CRYPTO_WP512 is not set\n+\n+#\n+# Ciphers\n+#\n+CONFIG_CRYPTO_AES=y\n+# CONFIG_CRYPTO_ANUBIS is not set\n+# CONFIG_CRYPTO_ARC4 is not set\n+# CONFIG_CRYPTO_BLOWFISH is not set\n+# CONFIG_CRYPTO_CAMELLIA is not set\n+# CONFIG_CRYPTO_CAST5 is not set\n+# CONFIG_CRYPTO_CAST6 is not set\n+# CONFIG_CRYPTO_DES is not set\n+# CONFIG_CRYPTO_FCRYPT is not set\n+# CONFIG_CRYPTO_KHAZAD is not set\n+# CONFIG_CRYPTO_SALSA20 is not set\n+# CONFIG_CRYPTO_CHACHA20 is not set\n+# CONFIG_CRYPTO_SEED is not set\n+# CONFIG_CRYPTO_SERPENT is not set\n+# CONFIG_CRYPTO_TEA is not set\n+# CONFIG_CRYPTO_TWOFISH is not set\n+\n+#\n+# Compression\n+#\n+CONFIG_CRYPTO_DEFLATE=y\n+# CONFIG_CRYPTO_ZLIB is not set\n+CONFIG_CRYPTO_LZO=y\n+# CONFIG_CRYPTO_842 is not set\n+# CONFIG_CRYPTO_LZ4 is not set\n+# CONFIG_CRYPTO_LZ4HC is not set\n+\n+#\n+# Random Number Generation\n+#\n+# CONFIG_CRYPTO_ANSI_CPRNG is not set\n+CONFIG_CRYPTO_DRBG_MENU=m\n+CONFIG_CRYPTO_DRBG_HMAC=y\n+# CONFIG_CRYPTO_DRBG_HASH is not set\n+# CONFIG_CRYPTO_DRBG_CTR is not set\n+CONFIG_CRYPTO_DRBG=m\n+CONFIG_CRYPTO_JITTERENTROPY=m\n+# CONFIG_CRYPTO_USER_API_HASH is not set\n+# CONFIG_CRYPTO_USER_API_SKCIPHER is not set\n+# CONFIG_CRYPTO_USER_API_RNG is not set\n+# CONFIG_CRYPTO_USER_API_AEAD is not set\n+# CONFIG_CRYPTO_HW is not set\n+\n+#\n+# Certificates for signature checking\n+#\n+# CONFIG_ARM_CRYPTO is not set\n+# CONFIG_BINARY_PRINTF is not set\n+\n+#\n+# Library routines\n+#\n+CONFIG_BITREVERSE=y\n+CONFIG_HAVE_ARCH_BITREVERSE=y\n+CONFIG_RATIONAL=y\n+CONFIG_GENERIC_STRNCPY_FROM_USER=y\n+CONFIG_GENERIC_STRNLEN_USER=y\n+CONFIG_GENERIC_NET_UTILS=y\n+CONFIG_GENERIC_PCI_IOMAP=y\n+CONFIG_GENERIC_IO=y\n+CONFIG_ARCH_USE_CMPXCHG_LOCKREF=y\n+# CONFIG_CRC_CCITT is not set\n+CONFIG_CRC16=y\n+# CONFIG_CRC_T10DIF is not set\n+# CONFIG_CRC_ITU_T is not set\n+CONFIG_CRC32=y\n+# CONFIG_CRC32_SELFTEST is not set\n+CONFIG_CRC32_SLICEBY8=y\n+# CONFIG_CRC32_SLICEBY4 is not set\n+# CONFIG_CRC32_SARWATE is not set\n+# CONFIG_CRC32_BIT is not set\n+# CONFIG_CRC7 is not set\n+# CONFIG_LIBCRC32C is not set\n+# CONFIG_CRC8 is not set\n+# CONFIG_AUDIT_ARCH_COMPAT_GENERIC is not set\n+# CONFIG_RANDOM32_SELFTEST is not set\n+CONFIG_ZLIB_INFLATE=y\n+CONFIG_ZLIB_DEFLATE=y\n+CONFIG_LZO_COMPRESS=y\n+CONFIG_LZO_DECOMPRESS=y\n+CONFIG_LZ4_DECOMPRESS=y\n+CONFIG_XZ_DEC=y\n+CONFIG_XZ_DEC_X86=y\n+CONFIG_XZ_DEC_POWERPC=y\n+CONFIG_XZ_DEC_IA64=y\n+CONFIG_XZ_DEC_ARM=y\n+CONFIG_XZ_DEC_ARMTHUMB=y\n+CONFIG_XZ_DEC_SPARC=y\n+CONFIG_XZ_DEC_BCJ=y\n+# CONFIG_XZ_DEC_TEST is not set\n+CONFIG_DECOMPRESS_GZIP=y\n+CONFIG_DECOMPRESS_BZIP2=y\n+CONFIG_DECOMPRESS_LZMA=y\n+CONFIG_DECOMPRESS_XZ=y\n+CONFIG_DECOMPRESS_LZO=y\n+CONFIG_DECOMPRESS_LZ4=y\n+CONFIG_GENERIC_ALLOCATOR=y\n+CONFIG_HAS_IOMEM=y\n+CONFIG_HAS_DMA=y\n+CONFIG_CPU_RMAP=y\n+CONFIG_DQL=y\n+CONFIG_GLOB=y\n+# CONFIG_GLOB_SELFTEST is not set\n+CONFIG_NLATTR=y\n+CONFIG_ARCH_HAS_ATOMIC64_DEC_IF_POSITIVE=y\n+# CONFIG_CORDIC is not set\n+# CONFIG_DDR is not set\n+CONFIG_LIBFDT=y\n+CONFIG_FONT_SUPPORT=y\n+# CONFIG_FONTS is not set\n+CONFIG_FONT_8x8=y\n+CONFIG_FONT_8x16=y\n+# CONFIG_SG_SPLIT is not set\n+CONFIG_ARCH_HAS_SG_CHAIN=y\n+# CONFIG_VIRTUALIZATION is not set"}, {"sha": "12e24ff1af6a2fc505c67887491c9a9fedd6a737", "filename": "src/ci/docker/dist-x86-linux/Dockerfile", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fci%2Fdocker%2Fdist-x86-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fci%2Fdocker%2Fdist-x86-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86-linux%2FDockerfile?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -21,17 +21,7 @@ RUN yum upgrade -y && yum install -y \\\n ENV PATH=/rustroot/bin:$PATH\n ENV LD_LIBRARY_PATH=/rustroot/lib64:/rustroot/lib\n WORKDIR /tmp\n-\n-# binutils < 2.22 has a bug where the 32-bit executables it generates\n-# immediately segfault in Rust, so we need to install our own binutils.\n-#\n-# See https://github.com/rust-lang/rust/issues/20440 for more info\n COPY shared.sh build-binutils.sh /tmp/\n-RUN ./build-binutils.sh\n-\n-# Need a newer version of gcc than centos has to compile LLVM nowadays\n-COPY build-gcc.sh /tmp/\n-RUN ./build-gcc.sh\n \n # We need a build of openssl which supports SNI to download artifacts from\n # static.rust-lang.org. This'll be used to link into libcurl below (and used\n@@ -49,6 +39,16 @@ RUN ./build-openssl.sh\n COPY build-curl.sh /tmp/\n RUN ./build-curl.sh\n \n+# binutils < 2.22 has a bug where the 32-bit executables it generates\n+# immediately segfault in Rust, so we need to install our own binutils.\n+#\n+# See https://github.com/rust-lang/rust/issues/20440 for more info\n+RUN ./build-binutils.sh\n+\n+# Need a newer version of gcc than centos has to compile LLVM nowadays\n+COPY build-gcc.sh /tmp/\n+RUN ./build-gcc.sh\n+\n # CentOS 5.5 has Python 2.4 by default, but LLVM needs 2.7+\n COPY build-python.sh /tmp/\n RUN ./build-python.sh\n@@ -63,6 +63,11 @@ RUN ./build-git.sh\n COPY build-cmake.sh /tmp/\n RUN ./build-cmake.sh\n \n+# for sanitizers, we need kernel headers files newer than the ones CentOS ships\n+# with so we install newer ones here\n+COPY build-headers.sh /tmp/\n+RUN ./build-headers.sh\n+\n RUN curl -Lo /rustroot/dumb-init \\\n       https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64 && \\\n       chmod +x /rustroot/dumb-init\n@@ -76,5 +81,5 @@ RUN curl -L https://api.pub.build.mozilla.org/tooltool/sha512/$SCCACHE_DIGEST |\n ENV HOSTS=i686-unknown-linux-gnu\n ENV HOSTS=$HOSTS,x86_64-unknown-linux-gnu\n \n-ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended\n+ENV RUST_CONFIGURE_ARGS --host=$HOSTS --enable-extended --enable-sanitizers\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "4ce38fd9205e27b4aff8b169f4ead5c31f731993", "filename": "src/ci/docker/dist-x86-linux/build-headers.sh", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-headers.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-headers.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86-linux%2Fbuild-headers.sh?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,25 @@\n+#!/bin/bash\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+set -ex\n+source shared.sh\n+\n+curl https://cdn.kernel.org/pub/linux/kernel/v3.x/linux-3.2.84.tar.xz | unxz | tar x\n+\n+cd linux-3.2.84\n+hide_output make mrproper\n+hide_output make INSTALL_HDR_PATH=dest headers_install\n+\n+find dest/include \\( -name .install -o -name ..install.cmd \\) -delete\n+yes | cp -fr dest/include/* /usr/include\n+\n+cd ..\n+rm -rf linux-3.2.84"}, {"sha": "c6071d704f5f6b7cc66ae6ddded1622e2115690a", "filename": "src/ci/docker/x86_64-gnu-make/Dockerfile", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fci%2Fdocker%2Fx86_64-gnu-make%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fci%2Fdocker%2Fx86_64-gnu-make%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-make%2FDockerfile?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,26 +0,0 @@\n-FROM ubuntu:16.04\n-\n-RUN apt-get update && apt-get install -y --no-install-recommends \\\n-  g++ \\\n-  make \\\n-  file \\\n-  curl \\\n-  ca-certificates \\\n-  python2.7 \\\n-  git \\\n-  cmake \\\n-  sudo \\\n-  gdb \\\n-  xz-utils\n-\n-ENV SCCACHE_DIGEST=7237e38e029342fa27b7ac25412cb9d52554008b12389727320bd533fd7f05b6a96d55485f305caf95e5c8f5f97c3313e10012ccad3e752aba2518f3522ba783\n-RUN curl -L https://api.pub.build.mozilla.org/tooltool/sha512/$SCCACHE_DIGEST | \\\n-      tar xJf - -C /usr/local/bin --strip-components=1\n-\n-RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-init_1.2.0_amd64.deb && \\\n-    dpkg -i dumb-init_*.deb && \\\n-    rm dumb-init_*.deb\n-ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n-\n-ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --disable-rustbuild\n-ENV RUST_CHECK_TARGET check"}, {"sha": "e903b6ddc64cd0ef54c761321cbe154b68a49cae", "filename": "src/ci/docker/x86_64-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -22,5 +22,5 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n     rm dumb-init_*.deb\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n-ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu\n+ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --enable-sanitizers\n ENV SCRIPT python2.7 ../x.py test && python2.7 ../x.py dist"}, {"sha": "960acc4de7d87e2bcd5d297d057d41af05f3e446", "filename": "src/ci/run.sh", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -11,11 +11,13 @@\n \n set -e\n \n-if [ \"$LOCAL_USER_ID\" != \"\" ]; then\n-  useradd --shell /bin/bash -u $LOCAL_USER_ID -o -c \"\" -m user\n-  export HOME=/home/user\n-  unset LOCAL_USER_ID\n-  exec su --preserve-environment -c \"env PATH=$PATH \\\"$0\\\"\" user\n+if [ \"$NO_CHANGE_USER\" = \"\" ]; then\n+  if [ \"$LOCAL_USER_ID\" != \"\" ]; then\n+    useradd --shell /bin/bash -u $LOCAL_USER_ID -o -c \"\" -m user\n+    export HOME=/home/user\n+    unset LOCAL_USER_ID\n+    exec su --preserve-environment -c \"env PATH=$PATH \\\"$0\\\"\" user\n+  fi\n fi\n \n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-sccache\""}, {"sha": "d30da544a8afc5d78391dee270bdf40e74a215d3", "filename": "src/compiler-rt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiler-rt?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1 +1 @@\n-Subproject commit a8fc4c169fac43a5dc204d4fd56ddb1739f8c178\n+Subproject commit d30da544a8afc5d78391dee270bdf40e74a215d3"}, {"sha": "2bf2beb8b7421bb3e973976fbb1e10634c5e8afd", "filename": "src/doc/book/lifetimes.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fdoc%2Fbook%2Flifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fdoc%2Fbook%2Flifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Flifetimes.md?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -108,7 +108,7 @@ fn skip_prefix<'a, 'b>(line: &'a str, prefix: &'b str) -> &'a str {\n \n Let's examine the changes without going too deep into the syntax for now -\n we'll get to that later. The first change was adding the `<'a, 'b>` after the\n-method name. This introduces two lifetime parameters: `'a` and `'b`. Next each\n+method name. This introduces two lifetime parameters: `'a` and `'b`. Next, each\n reference in the function signature was associated with one of the lifetime\n parameters by adding the lifetime name after the `&`. This tells the compiler\n how the lifetimes between different references are related."}, {"sha": "dcf74cbb0a7c47660fede441837ccbf717b3c7fe", "filename": "src/doc/book/structs.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fdoc%2Fbook%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fdoc%2Fbook%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fstructs.md?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -117,6 +117,30 @@ fn main() {\n }\n ```\n \n+Initialization of a data structure (struct, enum, union) can be simplified if\n+fields of the data structure are initialized with variables which has same\n+names as the fields.\n+\n+```\n+#![feature(field_init_shorthand)]\n+\n+#[derive(Debug)]\n+struct Person<'a> {\n+    name: &'a str,\n+    age: u8\n+}\n+\n+fn main() {\n+    // Create struct with field init shorthand\n+    let name = \"Peter\";\n+    let age = 27;\n+    let peter = Person { name, age };\n+\n+    // Print debug struct\n+    println!(\"{:?}\", peter);\n+}\n+```\n+\n # Update syntax\n \n A `struct` can include `..` to indicate that you want to use a copy of some"}, {"sha": "144b786f58d24404eb7fb6e3c94d696c1697037b", "filename": "src/doc/index.md", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -6,32 +6,44 @@ nav {\n }\n </style>\n \n-This is an index of the documentation included with the Rust\n-compiler. For more comprehensive documentation see [the\n-website](https://www.rust-lang.org).\n+This page is an overview of the documentation included with your Rust install.\n+Other unofficial documentation may exist elsewhere; for example, the [Rust\n+Learning] project collects documentation from the community, and [Docs.rs]\n+builds documentation for individual Rust packages.\n \n-[**The Rust Programming Language**][book]. Also known as \"The Book\",\n-The Rust Programming Language is the most comprehensive resource for\n-all topics related to Rust, and is the primary official document of\n-the language.\n+## API Documentation\n \n-[**The Rust Reference**][ref]. While Rust does not have a\n-specification, the reference tries to describe its working in\n-detail. It is accurate, but not necessarily complete.\n+Rust provides a standard library with a number of features; [we host its\n+documentation here][api].\n \n-[**Standard Library API Reference**][api]. Documentation for the\n-standard library.\n+## Reference Documentation\n \n-[**The Rustonomicon**][nomicon]. An entire book dedicated to\n-explaining how to write unsafe Rust code. It is for advanced Rust\n-programmers.\n+Rust does not yet have a formal specification, but we have [a reference document\n+][ref]. It is guaranteed to be accurate, but not complete. We now have a\n+policy that all new features must be included in the reference before\n+stabilization; however, we are still back-filling things that landed before\n+then. That work is being tracked [here][38643].\n \n-[**Compiler Error Index**][err]. Extended explanations of\n-the errors produced by the Rust compiler.\n+## Extended Error Documentation\n \n-[book]: book/index.html\n-[ref]: reference.html\n+Many of Rust's errors come with error codes, and you can request extended\n+diagnostics from the compiler on those errors. We also [have the text of those\n+extended errors on the web][err], if you prefer to read them that way.\n+\n+## The Rust Bookshelf\n+\n+Rust provides a number of book-length sets of documentation, collectively\n+nicknamed 'The Rust Bookshelf.'\n+\n+* [The Rust Programming Language][book] teaches you how to program in Rust.\n+* [The Rustonomicon][nomicon] is your guidebook to the dark arts of unsafe Rust.\n+\n+[Rust Learning]: https://github.com/ctjhoa/rust-learning\n+[Docs.rs]: https://docs.rs/\n [api]: std/index.html\n-[nomicon]: nomicon/index.html\n+[ref]: reference.html\n+[38643]: https://github.com/rust-lang/rust/issues/38643\n [err]: error-index.html\n+[book]: book/index.html\n+[nomicon]: nomicon/index.html\n "}, {"sha": "8aefabe61fdf68b17294ea63662240d7b17908e1", "filename": "src/doc/reference.md", "status": "modified", "additions": 95, "deletions": 14, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1291,15 +1291,18 @@ guaranteed to refer to the same memory address.\n \n Constant values must not have destructors, and otherwise permit most forms of\n data. Constants may refer to the address of other constants, in which case the\n-address will have the `static` lifetime. The compiler is, however, still at\n-liberty to translate the constant many times, so the address referred to may not\n-be stable.\n+address will have elided lifetimes where applicable, otherwise \u2013 in most cases \u2013\n+defaulting to the `static` lifetime. (See below on [static lifetime elision].)\n+The compiler is, however, still at liberty to translate the constant many times,\n+so the address referred to may not be stable.\n+\n+[static lifetime elision]: #static-lifetime-elision\n \n Constants must be explicitly typed. The type may be `bool`, `char`, a number, or\n a type derived from those primitive types. The derived types are references with\n the `static` lifetime, fixed-size arrays, tuples, enum variants, and structs.\n \n-```\n+```rust\n const BIT1: u32 = 1 << 0;\n const BIT2: u32 = 1 << 1;\n \n@@ -1317,6 +1320,8 @@ const BITS_N_STRINGS: BitsNStrings<'static> = BitsNStrings {\n };\n ```\n \n+\n+\n ### Static items\n \n A *static item* is similar to a *constant*, except that it represents a precise\n@@ -1351,7 +1356,7 @@ running in the same process.\n Mutable statics are still very useful, however. They can be used with C\n libraries and can also be bound from C libraries (in an `extern` block).\n \n-```\n+```rust\n # fn atomic_add(_: &mut u32, _: u32) -> u32 { 2 }\n \n static mut LEVELS: u32 = 0;\n@@ -1375,6 +1380,53 @@ unsafe fn bump_levels_unsafe2() -> u32 {\n Mutable statics have the same restrictions as normal statics, except that the\n type of the value is not required to ascribe to `Sync`.\n \n+#### `'static` lifetime elision\n+\n+[Unstable] Both constant and static declarations of reference types have\n+*implicit* `'static` lifetimes unless an explicit lifetime is specified. As\n+such, the constant declarations involving `'static` above may be written\n+without the lifetimes. Returning to our previous example:\n+\n+```rust\n+# #![feature(static_in_const)]\n+const BIT1: u32 = 1 << 0;\n+const BIT2: u32 = 1 << 1;\n+\n+const BITS: [u32; 2] = [BIT1, BIT2];\n+const STRING: &str = \"bitstring\";\n+\n+struct BitsNStrings<'a> {\n+    mybits: [u32; 2],\n+    mystring: &'a str,\n+}\n+\n+const BITS_N_STRINGS: BitsNStrings = BitsNStrings {\n+    mybits: BITS,\n+    mystring: STRING,\n+};\n+```\n+\n+Note that if the `static` or `const` items include function or closure\n+references, which themselves include references, the compiler will first try the\n+standard elision rules ([see discussion in the nomicon][elision-nomicon]). If it\n+is unable to resolve the lifetimes by its usual rules, it will default to using\n+the `'static` lifetime. By way of example:\n+\n+[elision-nomicon]: https://doc.rust-lang.org/nomicon/lifetime-elision.html\n+\n+```rust,ignore\n+// Resolved as `fn<'a>(&'a str) -> &'a str`.\n+const RESOLVED_SINGLE: fn(&str) -> &str = ..\n+\n+// Resolved as `Fn<'a, 'b, 'c>(&'a Foo, &'b Bar, &'c Baz) -> usize`.\n+const RESOLVED_MULTIPLE: Fn(&Foo, &Bar, &Baz) -> usize = ..\n+\n+// There is insufficient information to bound the return reference lifetime\n+// relative to the argument lifetimes, so the signature is resolved as\n+// `Fn(&'static Foo, &'static Bar) -> &'static Baz`.\n+const RESOLVED_STATIC: Fn(&Foo, &Bar) -> &Baz = ..\n+```\n+\n ### Traits\n \n A _trait_ describes an abstract interface that types can\n@@ -2072,7 +2124,9 @@ macro scope.\n \n ### Miscellaneous attributes\n \n-- `deprecated` - mark the item as deprecated; the full attribute is `#[deprecated(since = \"crate version\", note = \"...\")`, where both arguments are optional.\n+- `deprecated` - mark the item as deprecated; the full attribute is \n+  `#[deprecated(since = \"crate version\", note = \"...\")`, where both arguments \n+  are optional.\n - `export_name` - on statics and functions, this determines the name of the\n   exported symbol.\n - `link_section` - on statics and functions, this specifies the section of the\n@@ -2114,10 +2168,15 @@ Sometimes one wants to have different compiler outputs from the same code,\n depending on build target, such as targeted operating system, or to enable\n release builds.\n \n-There are two kinds of configuration options, one that is either defined or not\n-(`#[cfg(foo)]`), and the other that contains a string that can be checked\n-against (`#[cfg(bar = \"baz\")]`). Currently, only compiler-defined configuration\n-options can have the latter form.\n+Configuration options are boolean (on or off) and are named either with a\n+single identifier (e.g. `foo`) or an identifier and a string (e.g. `foo = \"bar\"`;\n+the quotes are required and spaces around the `=` are unimportant). Note that\n+similarly-named options, such as `foo`, `foo=\"bar\"` and `foo=\"baz\"` may each be set\n+or unset independently.\n+\n+Configuration options are either provided by the compiler or passed in on the\n+command line using `--cfg` (e.g. `rustc main.rs --cfg foo --cfg 'bar=\"baz\"'`).\n+Rust code then checks for their presence using the `#[cfg(...)]` attribute:\n \n ```\n // The function is only included in the build when compiling for OSX\n@@ -2196,7 +2255,10 @@ You can also set another attribute based on a `cfg` variable with `cfg_attr`:\n #[cfg_attr(a, b)]\n ```\n \n-Will be the same as `#[b]` if `a` is set by `cfg`, and nothing otherwise.\n+This is the same as `#[b]` if `a` is set by `cfg`, and nothing otherwise.\n+\n+Lastly, configuration options can be used in expressions by invoking the `cfg!`\n+macro: `cfg!(a)` evaluates to `true` if `a` is set, and `false` otherwise.\n \n ### Lint check attributes\n \n@@ -2481,9 +2543,6 @@ The currently implemented features of the reference compiler are:\n             into a Rust program. This capability, especially the signature for the\n             annotated function, is subject to change.\n \n-* `static_in_const` - Enables lifetime elision with a `'static` default for\n-                      `const` and `static` item declarations.\n-\n * `thread_local` - The usage of the `#[thread_local]` attribute is experimental\n                    and should be seen as unstable. This attribute is used to\n                    declare a `static` as being unique per-thread leveraging\n@@ -2757,6 +2816,28 @@ let base = Point3d {x: 1, y: 2, z: 3};\n Point3d {y: 0, z: 10, .. base};\n ```\n \n+#### Struct field init shorthand\n+\n+When initializing a data structure (struct, enum, union) with named fields,\n+allow writing `fieldname` as a shorthand for `fieldname: fieldname`. This\n+allows a compact syntax for initialization, with less duplication.\n+\n+In the initializer for a `struct` with named fields, a `union` with named\n+fields, or an enum variant with named fields, accept an identifier `field` as a\n+shorthand for `field: field`.\n+\n+Example:\n+\n+```\n+# #![feature(field_init_shorthand)]\n+# struct Point3d { x: i32, y: i32, z: i32 }\n+# let x = 0;\n+# let y_value = 0;\n+# let z = 0;\n+Point3d { x: x, y: y_value, z: z };\n+Point3d { x, y: y_value, z };\n+```\n+\n ### Block expressions\n \n A _block expression_ is similar to a module in terms of the declarations that"}, {"sha": "83d54789ff3572a12b8ec6ae4ade1c6fa9d638a0", "filename": "src/etc/Dockerfile", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fetc%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fetc%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2FDockerfile?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,27 +0,0 @@\n-FROM ubuntu:xenial\n-\n-# curl\n-#   Download stage0, see src/bootstrap/bootstrap.py\n-# g++\n-#   Compile LLVM binding in src/rustllvm\n-# gdb\n-#   Used to run tests in src/test/debuginfo\n-# git\n-#   Get commit hash and commit date in version string\n-# make\n-#   Run build scripts in mk\n-# libedit-dev zlib1g-dev\n-#   LLVM dependencies as packaged in Ubuntu\n-#   (They are optional, but Ubuntu package enables them)\n-# llvm-3.7-dev (installed by llvm-3.7-tools)\n-#   LLVM\n-# llvm-3.7-tools\n-#   FileCheck is used to run tests in src/test/codegen\n-\n-RUN apt-get update && apt-get -y install \\\n-    curl g++ gdb git make \\\n-    libedit-dev zlib1g-dev \\\n-    llvm-3.7-tools cmake\n-\n-RUN mkdir /build\n-WORKDIR /build"}, {"sha": "50e30caa2b34b0fa58700b81091da0fe28185b93", "filename": "src/etc/apple-darwin.supp", "status": "removed", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fetc%2Fapple-darwin.supp", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fetc%2Fapple-darwin.supp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fapple-darwin.supp?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,75 +0,0 @@\n-{\n-   osx-frameworks.rs-fails-otherwise-1\n-   Memcheck:Leak\n-   match-leak-kinds: definite,possible\n-   fun:malloc\n-   ...\n-   fun:__CFInitialize\n-   ...\n-}\n-\n-{\n-   osx-frameworks.rs-fails-otherwise-2\n-   Memcheck:Leak\n-   match-leak-kinds: possible\n-   fun:malloc_zone_calloc\n-   ...\n-   fun:__CFInitialize\n-   fun:_ZN16ImageLoaderMachO11doImageInitERKN11ImageLoader11LinkContextE\n-}\n-\n-{\n-   osx-frameworks.rs-fails-otherwise-3\n-   Memcheck:Leak\n-   match-leak-kinds: possible\n-   fun:realloc\n-   ...\n-   fun:_read_images\n-   fun:map_images_nolock\n-   ...\n-   fun:_ZN4dyldL18notifyBatchPartialE17dyld_image_statesbPFPKcS0_jPK15dyld_image_infoE\n-   fun:_ZN4dyld36registerImageStateBatchChangeHandlerE17dyld_image_statesPFPKcS0_jPK15dyld_image_infoE\n-   fun:dyld_register_image_state_change_handler\n-   fun:_objc_init\n-   fun:_os_object_init\n-}\n-\n-{\n-   osx-frameworks.rs-fails-otherwise-4\n-   Memcheck:Leak\n-   match-leak-kinds: definite,possible\n-   fun:calloc\n-   ...\n-   fun:__CFInitialize\n-   fun:_ZN16ImageLoaderMachO11doImageInitERKN11ImageLoader11LinkContextE\n-   fun:_ZN16ImageLoaderMachO16doInitializationERKN11ImageLoader11LinkContextE\n-   fun:_ZN11ImageLoader23recursiveInitializationERKNS_11LinkContextEjRNS_21InitializerTimingListERNS_15UninitedUpwardsE\n-}\n-\n-{\n-   osx-frameworks.rs-fails-otherwise-5\n-   Memcheck:Leak\n-   match-leak-kinds: definite,possible\n-   fun:malloc_zone_malloc\n-   ...\n-   fun:__CFInitialize\n-   ...\n-}\n-\n-{\n-   fails-since-xcode-7.2\n-   Memcheck:Leak\n-   match-leak-kinds: possible\n-   fun:malloc_zone_malloc\n-   fun:_objc_copyClassNamesForImage\n-   fun:_ZL9protocolsv\n-   fun:_Z9readClassP10objc_classbb\n-   fun:gc_init\n-   fun:_ZL33objc_initializeClassPair_internalP10objc_classPKcS0_S0_\n-   fun:layout_string_create\n-   fun:_ZL12realizeClassP10objc_class\n-   fun:_ZL22copySwiftV1MangledNamePKcb\n-   fun:_ZL22copySwiftV1MangledNamePKcb\n-   fun:_ZL22copySwiftV1MangledNamePKcb\n-   fun:_ZL22copySwiftV1MangledNamePKcb\n-}"}, {"sha": "0e103fbcffbad6a0fb1b2f34044b0887200519c8", "filename": "src/etc/check-sanitycheck.py", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fetc%2Fcheck-sanitycheck.py", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fetc%2Fcheck-sanitycheck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck-sanitycheck.py?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,58 +0,0 @@\n-#!/usr/bin/env python\n-#\n-# Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-import os\n-import subprocess\n-import sys\n-import functools\n-\n-STATUS = 0\n-\n-def error_unless_permitted(env_var, message):\n-    global STATUS\n-    if not os.getenv(env_var):\n-        sys.stderr.write(message)\n-        STATUS = 1\n-\n-def only_on(platforms):\n-    def decorator(func):\n-        @functools.wraps(func)\n-        def inner():\n-            if any(map(lambda x: sys.platform.startswith(x), platforms)):\n-                func()\n-        return inner\n-    return decorator\n-\n-@only_on(['linux', 'darwin', 'freebsd', 'openbsd'])\n-def check_rlimit_core():\n-    import resource\n-    soft, hard = resource.getrlimit(resource.RLIMIT_CORE)\n-    if soft > 0:\n-        error_unless_permitted('ALLOW_NONZERO_RLIMIT_CORE', \"\"\"\\\n-RLIMIT_CORE is set to a nonzero value (%d). During debuginfo, the test suite\n-will segfault many rustc's, creating many potentially large core files.\n-set ALLOW_NONZERO_RLIMIT_CORE to ignore this warning\n-\"\"\" % (soft))\n-\n-@only_on(['win32'])\n-def check_console_code_page():\n-    if '65001' not in subprocess.check_output(['cmd', '/c', 'chcp']):\n-        sys.stderr.write('Warning: the console output code page is not UTF-8, \\\n-some tests may fail. Use `cmd /c \"chcp 65001\"` to setup UTF-8 code page.\\n')\n-\n-def main():\n-    check_console_code_page()\n-    check_rlimit_core()\n-\n-if __name__ == '__main__':\n-    main()\n-    sys.exit(STATUS)"}, {"sha": "9312b685c14a2b5dc79d1aacfd31ad11e9901713", "filename": "src/etc/check-summary.py", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fetc%2Fcheck-summary.py", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fetc%2Fcheck-summary.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck-summary.py?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,57 +0,0 @@\n-#!/usr/bin/env python\n-#\n-# Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-import glob\n-import sys\n-\n-if __name__ == '__main__':\n-    summaries = []\n-\n-    def summarise(fname):\n-        summary = {}\n-        with open(fname) as fd:\n-            for line in fd:\n-                splitline = line.strip().split(' ')\n-                if len(splitline) == 1:\n-                    continue\n-                status = splitline[0]\n-                test = splitline[-1]\n-                # track bench runs\n-                if splitline[1] == 'ns/iter':\n-                    status = 'bench'\n-                if status not in summary:\n-                    summary[status] = []\n-                summary[status].append(test)\n-            summaries.append((fname, summary))\n-\n-    def count(t):\n-        return sum(map(lambda f: len(f[1].get(t, [])), summaries))\n-\n-    logfiles = sys.argv[1:]\n-    for files in map(glob.glob, logfiles):\n-        map(summarise, files)\n-    ok = count('ok')\n-    failed = count('failed')\n-    ignored = count('ignored')\n-    measured = count('bench')\n-    print(\"summary of %d test runs: %d passed; %d failed; %d ignored; %d measured\" %\n-          (len(logfiles), ok, failed, ignored, measured))\n-    print(\"\")\n-\n-    if failed > 0:\n-        print(\"failed tests:\")\n-        for f, s in summaries:\n-            failures = s.get('failed', [])\n-            if len(failures) > 0:\n-                print(\"  %s:\" % (f))\n-            for test in failures:\n-                print(\"    %s\" % (test))"}, {"sha": "127251cc802c9ccec20dc19c01901cbad412f43e", "filename": "src/etc/get-stage0.py", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fetc%2Fget-stage0.py", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fetc%2Fget-stage0.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fget-stage0.py?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,46 +0,0 @@\n-#!/usr/bin/env python\n-#\n-# Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-import os\n-import sys\n-\n-path = os.path.abspath(os.path.join(os.path.dirname(__file__), \"../bootstrap\"))\n-sys.path.append(path)\n-\n-import bootstrap\n-\n-def main(triple):\n-    src_root = os.path.abspath(os.path.join(os.path.dirname(__file__), \"../..\"))\n-    data = bootstrap.stage0_data(src_root)\n-\n-    channel, date = data['rustc'].split('-', 1)\n-\n-    dl_dir = 'dl'\n-    if not os.path.exists(dl_dir):\n-        os.makedirs(dl_dir)\n-\n-    filename = 'rustc-{}-{}.tar.gz'.format(channel, triple)\n-    url = 'https://static.rust-lang.org/dist/{}/{}'.format(date, filename)\n-    dst = dl_dir + '/' + filename\n-    bootstrap.get(url, dst)\n-\n-    stage0_dst = triple + '/stage0'\n-    if os.path.exists(stage0_dst):\n-        for root, _, files in os.walk(stage0_dst):\n-            for f in files:\n-                os.unlink(os.path.join(root, f))\n-    else:\n-        os.makedirs(stage0_dst)\n-    bootstrap.unpack(dst, stage0_dst, match='rustc', verbose=True)\n-\n-if __name__ == '__main__':\n-    main(sys.argv[1])"}, {"sha": "ee77206640eab2a70bc8f6f086a9fe1b76ef95db", "filename": "src/etc/local_stage0.sh", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fetc%2Flocal_stage0.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fetc%2Flocal_stage0.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flocal_stage0.sh?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,79 +0,0 @@\n-#!/bin/sh\n-# Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-TARG_DIR=$1\n-PREFIX=$2\n-RUSTLIBDIR=$3\n-\n-LIB_DIR=lib\n-LIB_PREFIX=lib\n-\n-OS=`uname -s`\n-case $OS in\n-    (\"Linux\"|\"FreeBSD\"|\"DragonFly\"|\"Bitrig\"|\"OpenBSD\"|\"SunOS\"|\"Haiku\")\n-    BIN_SUF=\n-    LIB_SUF=.so\n-    ;;\n-    (\"Darwin\")\n-    BIN_SUF=\n-    LIB_SUF=.dylib\n-    ;;\n-    (*)\n-    BIN_SUF=.exe\n-    LIB_SUF=.dll\n-    LIB_DIR=bin\n-    LIB_PREFIX=\n-    ;;\n-esac\n-\n-if [ -z $PREFIX ]; then\n-    echo \"No local rust specified.\"\n-    exit 1\n-fi\n-\n-if [ ! -e ${PREFIX}/bin/rustc${BIN_SUF} ]; then\n-    echo \"No local rust installed at ${PREFIX}\"\n-    exit 1\n-fi\n-\n-if [ -z $TARG_DIR ]; then\n-    echo \"No target directory specified.\"\n-    exit 1\n-fi\n-\n-case \"$TARG_DIR\" in\n---print-rustc-release)\n-  # not actually copying to TARG_DIR, just print the local rustc version and exit\n-  ${PREFIX}/bin/rustc${BIN_SUF} --version --verbose | sed -ne 's/^release: //p'\n-;;\n-*)\n-\n-cp ${PREFIX}/bin/rustc${BIN_SUF} ${TARG_DIR}/stage0/bin/\n-cp ${PREFIX}/${LIB_DIR}/${RUSTLIBDIR}/${TARG_DIR}/${LIB_DIR}/* ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}arena*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}extra*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}rust*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}std*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}syntax*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}flate*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}fmt_macros*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}getopts*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}graphviz*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}log*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}rbml*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}serialize*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}term*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-cp ${PREFIX}/${LIB_DIR}/${LIB_PREFIX}proc_macro*${LIB_SUF} ${TARG_DIR}/stage0/${LIB_DIR}/\n-\n-# do not fail if one of the above fails, as all we need is a working rustc!\n-exit 0\n-\n-esac"}, {"sha": "24b007576aa24ad673a6687d246400f0dd16b459", "filename": "src/etc/mklldeps.py", "status": "removed", "additions": 0, "deletions": 113, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fetc%2Fmklldeps.py", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fetc%2Fmklldeps.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fmklldeps.py?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,113 +0,0 @@\n-# Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-import os\n-import sys\n-import subprocess\n-\n-f = open(sys.argv[1], 'wb')\n-\n-components = sys.argv[2].split() # splits on whitespace\n-enable_static = sys.argv[3]\n-llvm_config = sys.argv[4]\n-stdcpp_name = sys.argv[5]\n-use_libcpp = sys.argv[6]\n-\n-f.write(\"\"\"// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// WARNING: THIS IS A GENERATED FILE, DO NOT MODIFY\n-//          take a look at src/etc/mklldeps.py if you're interested\n-\"\"\")\n-\n-\n-def run(args):\n-    proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n-    out, err = proc.communicate()\n-\n-    if err:\n-        print(\"failed to run llvm_config: args = `{}`\".format(args))\n-        print(err)\n-        sys.exit(1)\n-    return out\n-\n-def runErr(args):\n-    proc = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n-    out, err = proc.communicate()\n-\n-    if err:\n-        return False, out\n-    else:\n-        return True, out\n-\n-f.write(\"\\n\")\n-\n-args = [llvm_config, '--shared-mode']\n-args.extend(components)\n-llvm_shared, out = runErr(args)\n-if llvm_shared:\n-    llvm_shared = 'shared' in out\n-\n-# LLVM libs\n-args = [llvm_config, '--libs', '--system-libs']\n-args.extend(components)\n-out = run(args)\n-for lib in out.strip().replace(\"\\n\", ' ').split(' '):\n-    if len(lib) == 0:\n-        continue\n-    # in some cases we get extra spaces in between libs so ignore those\n-    if len(lib) == 1 and lib == ' ':\n-        continue\n-    # not all libs strictly follow -lfoo, on Bitrig, there is -pthread\n-    if lib[0:2] == '-l':\n-        lib = lib.strip()[2:]\n-    elif lib[0] == '-':\n-        lib = lib.strip()[1:]\n-    # If this actually points at a literal file then we're on MSVC which now\n-    # prints full paths, so get just the name of the library and strip off the\n-    # trailing \".lib\"\n-    elif os.path.exists(lib):\n-        lib = os.path.basename(lib)[:-4]\n-    elif lib[-4:] == '.lib':\n-        lib = lib[:-4]\n-    f.write(\"#[link(name = \\\"\" + lib + \"\\\"\")\n-    if not llvm_shared and 'LLVM' in lib:\n-        f.write(\", kind = \\\"static\\\"\")\n-    f.write(\")]\\n\")\n-\n-# LLVM ldflags\n-out = run([llvm_config, '--ldflags'])\n-for lib in out.strip().split(' '):\n-    if lib[:2] == \"-l\":\n-        f.write(\"#[link(name = \\\"\" + lib[2:] + \"\\\")]\\n\")\n-\n-# C++ runtime library\n-out = run([llvm_config, '--cxxflags'])\n-if enable_static == '1':\n-    assert('stdlib=libc++' not in out)\n-    f.write(\"#[link(name = \\\"\" + stdcpp_name + \"\\\", kind = \\\"static\\\")]\\n\")\n-else:\n-    # Note that we use `cfg_attr` here because on MSVC the C++ standard library\n-    # is not c++ or stdc++, but rather the linker takes care of linking the\n-    # right standard library.\n-    if use_libcpp != \"0\" or 'stdlib=libc++' in out:\n-        f.write(\"#[cfg_attr(not(target_env = \\\"msvc\\\"), link(name = \\\"c++\\\"))]\\n\")\n-    else:\n-        f.write(\"#[cfg_attr(not(target_env = \\\"msvc\\\"), link(name = \\\"\" + stdcpp_name + \"\\\"))]\\n\")\n-\n-# Attach everything to an extern block\n-f.write(\"extern {}\\n\")"}, {"sha": "6e409af79aecfe48f4c49bcd8cc97ae1dbb110b6", "filename": "src/etc/x86.supp", "status": "removed", "additions": 0, "deletions": 65, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fetc%2Fx86.supp", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Fetc%2Fx86.supp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fx86.supp?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,65 +0,0 @@\n-{\n-   goddammit-llvm-why-u-no-valgrind\n-   Memcheck:Cond\n-   fun:*\n-   ...\n-}\n-\n-{\n-   down-with-thread-dtors.rs-fails-otherwise-1\n-   Memcheck:Addr1\n-   ...\n-   fun:tlv_finalize\n-   fun:_pthread_tsd_cleanup\n-   fun:_pthread_exit\n-   ...\n-   fun:_pthread_start\n-   fun:thread_start\n-}\n-\n-{\n-   down-with-thread-dtors.rs-fails-otherwise-2\n-   Memcheck:Addr2\n-   ...\n-   fun:tlv_finalize\n-   fun:_pthread_tsd_cleanup\n-   fun:_pthread_exit\n-   ...\n-   fun:_pthread_start\n-   fun:thread_start\n-}\n-\n-{\n-   down-with-thread-dtors.rs-fails-otherwise-3\n-   Memcheck:Addr4\n-   ...\n-   fun:tlv_finalize\n-   fun:_pthread_tsd_cleanup\n-   fun:_pthread_exit\n-   ...\n-   fun:_pthread_start\n-   fun:thread_start\n-}\n-\n-{\n-   down-with-thread-dtors.rs-fails-otherwise-4\n-   Memcheck:Addr8\n-   ...\n-   fun:tlv_finalize\n-   fun:_pthread_tsd_cleanup\n-   fun:_pthread_exit\n-   ...\n-   fun:_pthread_start\n-   fun:thread_start\n-}\n-\n-{\n-   down-with-thread-dtors.rs-fails-otherwise-5\n-   Memcheck:Leak\n-   match-leak-kinds: definite\n-   fun:malloc\n-   fun:tlv_allocate_and_initialize_for_key\n-   fun:tlv_get_addr\n-   ...\n-   fun:start\n-}"}, {"sha": "a3402bf399427be5dcc61f95f0f6df3b1f98831e", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -21,7 +21,6 @@ use std::process::Command;\n use build_helper::{run, rerun_if_changed_anything_in_dir, up_to_date};\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n     println!(\"cargo:rerun-if-changed=build.rs\");\n \n     // FIXME: This is a hack to support building targets that don't"}, {"sha": "8d81a09f5af0fbf947726145a61a7c8f42235e57", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -30,22 +30,6 @@ pub use imp::*;\n mod imp {\n     use libc::{c_int, c_void, size_t};\n \n-    // Linkage directives to pull in jemalloc and its dependencies.\n-    //\n-    // On some platforms we need to be sure to link in `pthread` which jemalloc\n-    // depends on, and specifically on android we need to also link to libgcc.\n-    // Currently jemalloc is compiled with gcc which will generate calls to\n-    // intrinsics that are libgcc specific (e.g. those intrinsics aren't present in\n-    // libcompiler-rt), so link that in to get that support.\n-    #[link(name = \"jemalloc\", kind = \"static\")]\n-    #[cfg_attr(target_os = \"android\", link(name = \"gcc\"))]\n-    #[cfg_attr(all(not(windows),\n-                   not(target_os = \"android\"),\n-                   not(target_env = \"musl\")),\n-               link(name = \"pthread\"))]\n-    #[cfg(not(cargobuild))]\n-    extern \"C\" {}\n-\n     // Note that the symbols here are prefixed by default on OSX and Windows (we\n     // don't explicitly request it), and on Android and DragonFly we explicitly\n     // request it as unprefixing cause segfaults (mismatches in allocators)."}, {"sha": "02b2171a224d0ae2b0111a5445f83b54fc88c9c3", "filename": "src/libcollections/Cargo.toml", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2FCargo.toml?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -16,7 +16,6 @@ std_unicode = { path = \"../libstd_unicode\" }\n name = \"collectionstest\"\n path = \"../libcollectionstest/lib.rs\"\n \n-# FIXME: need to extract benchmarks to separate crate\n-#[[bench]]\n-#name = \"collectionstest\"\n-#path = \"../libcollectionstest/lib.rs\"\n+[[bench]]\n+name = \"collectionsbenches\"\n+path = \"../libcollections/benches/lib.rs\""}, {"sha": "744afb991b00e99ebf4eff3cc8c7836796d6139c", "filename": "src/libcollections/benches/btree/map.rs", "status": "renamed", "additions": 54, "deletions": 17, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbenches%2Fbtree%2Fmap.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,13 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+\n+use std::iter::Iterator;\n+use std::vec::Vec;\n+use std::collections::BTreeMap;\n+use std::__rand::{Rng, thread_rng};\n+use test::{Bencher, black_box};\n+\n macro_rules! map_insert_rand_bench {\n     ($name: ident, $n: expr, $map: ident) => (\n         #[bench]\n-        pub fn $name(b: &mut ::test::Bencher) {\n-            use std::__rand::{thread_rng, Rng};\n-            use test::black_box;\n-\n+        pub fn $name(b: &mut Bencher) {\n             let n: usize = $n;\n             let mut map = $map::new();\n             // setup\n@@ -39,9 +43,7 @@ macro_rules! map_insert_rand_bench {\n macro_rules! map_insert_seq_bench {\n     ($name: ident, $n: expr, $map: ident) => (\n         #[bench]\n-        pub fn $name(b: &mut ::test::Bencher) {\n-            use test::black_box;\n-\n+        pub fn $name(b: &mut Bencher) {\n             let mut map = $map::new();\n             let n: usize = $n;\n             // setup\n@@ -64,12 +66,7 @@ macro_rules! map_insert_seq_bench {\n macro_rules! map_find_rand_bench {\n     ($name: ident, $n: expr, $map: ident) => (\n         #[bench]\n-        pub fn $name(b: &mut ::test::Bencher) {\n-            use std::iter::Iterator;\n-            use std::__rand::{thread_rng, Rng};\n-            use std::vec::Vec;\n-            use test::black_box;\n-\n+        pub fn $name(b: &mut Bencher) {\n             let mut map = $map::new();\n             let n: usize = $n;\n \n@@ -97,9 +94,7 @@ macro_rules! map_find_rand_bench {\n macro_rules! map_find_seq_bench {\n     ($name: ident, $n: expr, $map: ident) => (\n         #[bench]\n-        pub fn $name(b: &mut ::test::Bencher) {\n-            use test::black_box;\n-\n+        pub fn $name(b: &mut Bencher) {\n             let mut map = $map::new();\n             let n: usize = $n;\n \n@@ -118,3 +113,45 @@ macro_rules! map_find_seq_bench {\n         }\n     )\n }\n+\n+map_insert_rand_bench!{insert_rand_100,    100,    BTreeMap}\n+map_insert_rand_bench!{insert_rand_10_000, 10_000, BTreeMap}\n+\n+map_insert_seq_bench!{insert_seq_100,    100,    BTreeMap}\n+map_insert_seq_bench!{insert_seq_10_000, 10_000, BTreeMap}\n+\n+map_find_rand_bench!{find_rand_100,    100,    BTreeMap}\n+map_find_rand_bench!{find_rand_10_000, 10_000, BTreeMap}\n+\n+map_find_seq_bench!{find_seq_100,    100,    BTreeMap}\n+map_find_seq_bench!{find_seq_10_000, 10_000, BTreeMap}\n+\n+fn bench_iter(b: &mut Bencher, size: i32) {\n+    let mut map = BTreeMap::<i32, i32>::new();\n+    let mut rng = thread_rng();\n+\n+    for _ in 0..size {\n+        map.insert(rng.gen(), rng.gen());\n+    }\n+\n+    b.iter(|| {\n+        for entry in &map {\n+            black_box(entry);\n+        }\n+    });\n+}\n+\n+#[bench]\n+pub fn iter_20(b: &mut Bencher) {\n+    bench_iter(b, 20);\n+}\n+\n+#[bench]\n+pub fn iter_1000(b: &mut Bencher) {\n+    bench_iter(b, 1000);\n+}\n+\n+#[bench]\n+pub fn iter_100000(b: &mut Bencher) {\n+    bench_iter(b, 100000);\n+}", "previous_filename": "src/libcollectionstest/bench.rs"}, {"sha": "f436b0ac0c0375063da64723236781c25f628b41", "filename": "src/libcollections/benches/btree/mod.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Fbtree%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Fbtree%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbenches%2Fbtree%2Fmod.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod map;"}, {"sha": "1a21db5e344e3556e232eda8a5e89a588440e2fd", "filename": "src/libcollections/benches/lib.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbenches%2Flib.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![deny(warnings)]\n+\n+#![feature(rand)]\n+#![feature(test)]\n+\n+extern crate test;\n+\n+mod btree;\n+mod linked_list;\n+mod string;\n+mod str;\n+mod slice;\n+mod vec;\n+mod vec_deque;"}, {"sha": "bbac44553f18a267bfd7b016a3677d5e3e77ede5", "filename": "src/libcollections/benches/linked_list.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbenches%2Flinked_list.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,87 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::collections::LinkedList;\n+use test::Bencher;\n+\n+#[bench]\n+fn bench_collect_into(b: &mut Bencher) {\n+    let v = &[0; 64];\n+    b.iter(|| {\n+        let _: LinkedList<_> = v.iter().cloned().collect();\n+    })\n+}\n+\n+#[bench]\n+fn bench_push_front(b: &mut Bencher) {\n+    let mut m: LinkedList<_> = LinkedList::new();\n+    b.iter(|| {\n+        m.push_front(0);\n+    })\n+}\n+\n+#[bench]\n+fn bench_push_back(b: &mut Bencher) {\n+    let mut m: LinkedList<_> = LinkedList::new();\n+    b.iter(|| {\n+        m.push_back(0);\n+    })\n+}\n+\n+#[bench]\n+fn bench_push_back_pop_back(b: &mut Bencher) {\n+    let mut m: LinkedList<_> = LinkedList::new();\n+    b.iter(|| {\n+        m.push_back(0);\n+        m.pop_back();\n+    })\n+}\n+\n+#[bench]\n+fn bench_push_front_pop_front(b: &mut Bencher) {\n+    let mut m: LinkedList<_> = LinkedList::new();\n+    b.iter(|| {\n+        m.push_front(0);\n+        m.pop_front();\n+    })\n+}\n+\n+#[bench]\n+fn bench_iter(b: &mut Bencher) {\n+    let v = &[0; 128];\n+    let m: LinkedList<_> = v.iter().cloned().collect();\n+    b.iter(|| {\n+        assert!(m.iter().count() == 128);\n+    })\n+}\n+#[bench]\n+fn bench_iter_mut(b: &mut Bencher) {\n+    let v = &[0; 128];\n+    let mut m: LinkedList<_> = v.iter().cloned().collect();\n+    b.iter(|| {\n+        assert!(m.iter_mut().count() == 128);\n+    })\n+}\n+#[bench]\n+fn bench_iter_rev(b: &mut Bencher) {\n+    let v = &[0; 128];\n+    let m: LinkedList<_> = v.iter().cloned().collect();\n+    b.iter(|| {\n+        assert!(m.iter().rev().count() == 128);\n+    })\n+}\n+#[bench]\n+fn bench_iter_mut_rev(b: &mut Bencher) {\n+    let v = &[0; 128];\n+    let mut m: LinkedList<_> = v.iter().cloned().collect();\n+    b.iter(|| {\n+        assert!(m.iter_mut().rev().count() == 128);\n+    })\n+}"}, {"sha": "eb4b76509f913693d45627b0e21aa5d1ea094ad2", "filename": "src/libcollections/benches/slice.rs", "status": "added", "additions": 280, "deletions": 0, "changes": 280, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbenches%2Fslice.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,280 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::{mem, ptr};\n+use std::__rand::{Rng, thread_rng};\n+\n+use test::{Bencher, black_box};\n+\n+#[bench]\n+fn iterator(b: &mut Bencher) {\n+    // peculiar numbers to stop LLVM from optimising the summation\n+    // out.\n+    let v: Vec<_> = (0..100).map(|i| i ^ (i << 1) ^ (i >> 1)).collect();\n+\n+    b.iter(|| {\n+        let mut sum = 0;\n+        for x in &v {\n+            sum += *x;\n+        }\n+        // sum == 11806, to stop dead code elimination.\n+        if sum == 0 {\n+            panic!()\n+        }\n+    })\n+}\n+\n+#[bench]\n+fn mut_iterator(b: &mut Bencher) {\n+    let mut v = vec![0; 100];\n+\n+    b.iter(|| {\n+        let mut i = 0;\n+        for x in &mut v {\n+            *x = i;\n+            i += 1;\n+        }\n+    })\n+}\n+\n+#[bench]\n+fn concat(b: &mut Bencher) {\n+    let xss: Vec<Vec<i32>> = (0..100).map(|i| (0..i).collect()).collect();\n+    b.iter(|| {\n+        xss.concat();\n+    });\n+}\n+\n+#[bench]\n+fn join(b: &mut Bencher) {\n+    let xss: Vec<Vec<i32>> = (0..100).map(|i| (0..i).collect()).collect();\n+    b.iter(|| xss.join(&0));\n+}\n+\n+#[bench]\n+fn push(b: &mut Bencher) {\n+    let mut vec = Vec::<i32>::new();\n+    b.iter(|| {\n+        vec.push(0);\n+        black_box(&vec);\n+    });\n+}\n+\n+#[bench]\n+fn starts_with_same_vector(b: &mut Bencher) {\n+    let vec: Vec<_> = (0..100).collect();\n+    b.iter(|| vec.starts_with(&vec))\n+}\n+\n+#[bench]\n+fn starts_with_single_element(b: &mut Bencher) {\n+    let vec: Vec<_> = vec![0];\n+    b.iter(|| vec.starts_with(&vec))\n+}\n+\n+#[bench]\n+fn starts_with_diff_one_element_at_end(b: &mut Bencher) {\n+    let vec: Vec<_> = (0..100).collect();\n+    let mut match_vec: Vec<_> = (0..99).collect();\n+    match_vec.push(0);\n+    b.iter(|| vec.starts_with(&match_vec))\n+}\n+\n+#[bench]\n+fn ends_with_same_vector(b: &mut Bencher) {\n+    let vec: Vec<_> = (0..100).collect();\n+    b.iter(|| vec.ends_with(&vec))\n+}\n+\n+#[bench]\n+fn ends_with_single_element(b: &mut Bencher) {\n+    let vec: Vec<_> = vec![0];\n+    b.iter(|| vec.ends_with(&vec))\n+}\n+\n+#[bench]\n+fn ends_with_diff_one_element_at_beginning(b: &mut Bencher) {\n+    let vec: Vec<_> = (0..100).collect();\n+    let mut match_vec: Vec<_> = (0..100).collect();\n+    match_vec[0] = 200;\n+    b.iter(|| vec.starts_with(&match_vec))\n+}\n+\n+#[bench]\n+fn contains_last_element(b: &mut Bencher) {\n+    let vec: Vec<_> = (0..100).collect();\n+    b.iter(|| vec.contains(&99))\n+}\n+\n+#[bench]\n+fn zero_1kb_from_elem(b: &mut Bencher) {\n+    b.iter(|| vec![0u8; 1024]);\n+}\n+\n+#[bench]\n+fn zero_1kb_set_memory(b: &mut Bencher) {\n+    b.iter(|| {\n+        let mut v = Vec::<u8>::with_capacity(1024);\n+        unsafe {\n+            let vp = v.as_mut_ptr();\n+            ptr::write_bytes(vp, 0, 1024);\n+            v.set_len(1024);\n+        }\n+        v\n+    });\n+}\n+\n+#[bench]\n+fn zero_1kb_loop_set(b: &mut Bencher) {\n+    b.iter(|| {\n+        let mut v = Vec::<u8>::with_capacity(1024);\n+        unsafe {\n+            v.set_len(1024);\n+        }\n+        for i in 0..1024 {\n+            v[i] = 0;\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn zero_1kb_mut_iter(b: &mut Bencher) {\n+    b.iter(|| {\n+        let mut v = Vec::<u8>::with_capacity(1024);\n+        unsafe {\n+            v.set_len(1024);\n+        }\n+        for x in &mut v {\n+            *x = 0;\n+        }\n+        v\n+    });\n+}\n+\n+#[bench]\n+fn random_inserts(b: &mut Bencher) {\n+    let mut rng = thread_rng();\n+    b.iter(|| {\n+        let mut v = vec![(0, 0); 30];\n+        for _ in 0..100 {\n+            let l = v.len();\n+            v.insert(rng.gen::<usize>() % (l + 1), (1, 1));\n+        }\n+    })\n+}\n+#[bench]\n+fn random_removes(b: &mut Bencher) {\n+    let mut rng = thread_rng();\n+    b.iter(|| {\n+        let mut v = vec![(0, 0); 130];\n+        for _ in 0..100 {\n+            let l = v.len();\n+            v.remove(rng.gen::<usize>() % l);\n+        }\n+    })\n+}\n+\n+fn gen_ascending(len: usize) -> Vec<u64> {\n+    (0..len as u64).collect()\n+}\n+\n+fn gen_descending(len: usize) -> Vec<u64> {\n+    (0..len as u64).rev().collect()\n+}\n+\n+fn gen_random(len: usize) -> Vec<u64> {\n+    let mut rng = thread_rng();\n+    rng.gen_iter::<u64>().take(len).collect()\n+}\n+\n+fn gen_mostly_ascending(len: usize) -> Vec<u64> {\n+    let mut rng = thread_rng();\n+    let mut v = gen_ascending(len);\n+    for _ in (0usize..).take_while(|x| x * x <= len) {\n+        let x = rng.gen::<usize>() % len;\n+        let y = rng.gen::<usize>() % len;\n+        v.swap(x, y);\n+    }\n+    v\n+}\n+\n+fn gen_mostly_descending(len: usize) -> Vec<u64> {\n+    let mut rng = thread_rng();\n+    let mut v = gen_descending(len);\n+    for _ in (0usize..).take_while(|x| x * x <= len) {\n+        let x = rng.gen::<usize>() % len;\n+        let y = rng.gen::<usize>() % len;\n+        v.swap(x, y);\n+    }\n+    v\n+}\n+\n+fn gen_big_random(len: usize) -> Vec<[u64; 16]> {\n+    let mut rng = thread_rng();\n+    rng.gen_iter().map(|x| [x; 16]).take(len).collect()\n+}\n+\n+fn gen_big_ascending(len: usize) -> Vec<[u64; 16]> {\n+    (0..len as u64).map(|x| [x; 16]).take(len).collect()\n+}\n+\n+fn gen_big_descending(len: usize) -> Vec<[u64; 16]> {\n+    (0..len as u64).rev().map(|x| [x; 16]).take(len).collect()\n+}\n+\n+macro_rules! sort_bench {\n+    ($name:ident, $gen:expr, $len:expr) => {\n+        #[bench]\n+        fn $name(b: &mut Bencher) {\n+            b.iter(|| $gen($len).sort());\n+            b.bytes = $len * mem::size_of_val(&$gen(1)[0]) as u64;\n+        }\n+    }\n+}\n+\n+sort_bench!(sort_small_random, gen_random, 10);\n+sort_bench!(sort_small_ascending, gen_ascending, 10);\n+sort_bench!(sort_small_descending, gen_descending, 10);\n+\n+sort_bench!(sort_small_big_random, gen_big_random, 10);\n+sort_bench!(sort_small_big_ascending, gen_big_ascending, 10);\n+sort_bench!(sort_small_big_descending, gen_big_descending, 10);\n+\n+sort_bench!(sort_medium_random, gen_random, 100);\n+sort_bench!(sort_medium_ascending, gen_ascending, 100);\n+sort_bench!(sort_medium_descending, gen_descending, 100);\n+\n+sort_bench!(sort_large_random, gen_random, 10000);\n+sort_bench!(sort_large_ascending, gen_ascending, 10000);\n+sort_bench!(sort_large_descending, gen_descending, 10000);\n+sort_bench!(sort_large_mostly_ascending, gen_mostly_ascending, 10000);\n+sort_bench!(sort_large_mostly_descending, gen_mostly_descending, 10000);\n+\n+sort_bench!(sort_large_big_random, gen_big_random, 10000);\n+sort_bench!(sort_large_big_ascending, gen_big_ascending, 10000);\n+sort_bench!(sort_large_big_descending, gen_big_descending, 10000);\n+\n+#[bench]\n+fn sort_large_random_expensive(b: &mut Bencher) {\n+    let len = 10000;\n+    b.iter(|| {\n+        let mut v = gen_random(len);\n+        let mut count = 0;\n+        v.sort_by(|a: &u64, b: &u64| {\n+            count += 1;\n+            if count % 1_000_000_000 == 0 {\n+                panic!(\"should not happen\");\n+            }\n+            (*a as f64).cos().partial_cmp(&(*b as f64).cos()).unwrap()\n+        });\n+        black_box(count);\n+    });\n+    b.bytes = len as u64 * mem::size_of::<u64>() as u64;\n+}\n\\ No newline at end of file"}, {"sha": "7f727078101c463ef62d85ca1c48e828d02bfa8c", "filename": "src/libcollections/benches/str.rs", "status": "added", "additions": 298, "deletions": 0, "changes": 298, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbenches%2Fstr.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,298 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use test::{Bencher, black_box};\n+\n+#[bench]\n+fn char_iterator(b: &mut Bencher) {\n+    let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n+\n+    b.iter(|| s.chars().count());\n+}\n+\n+#[bench]\n+fn char_iterator_for(b: &mut Bencher) {\n+    let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n+\n+    b.iter(|| {\n+        for ch in s.chars() { black_box(ch); }\n+    });\n+}\n+\n+#[bench]\n+fn char_iterator_ascii(b: &mut Bencher) {\n+    let s = \"Mary had a little lamb, Little lamb\n+    Mary had a little lamb, Little lamb\n+    Mary had a little lamb, Little lamb\n+    Mary had a little lamb, Little lamb\n+    Mary had a little lamb, Little lamb\n+    Mary had a little lamb, Little lamb\";\n+\n+    b.iter(|| s.chars().count());\n+}\n+\n+#[bench]\n+fn char_iterator_rev(b: &mut Bencher) {\n+    let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n+\n+    b.iter(|| s.chars().rev().count());\n+}\n+\n+#[bench]\n+fn char_iterator_rev_for(b: &mut Bencher) {\n+    let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n+\n+    b.iter(|| {\n+        for ch in s.chars().rev() { black_box(ch); }\n+    });\n+}\n+\n+#[bench]\n+fn char_indicesator(b: &mut Bencher) {\n+    let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n+    let len = s.chars().count();\n+\n+    b.iter(|| assert_eq!(s.char_indices().count(), len));\n+}\n+\n+#[bench]\n+fn char_indicesator_rev(b: &mut Bencher) {\n+    let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n+    let len = s.chars().count();\n+\n+    b.iter(|| assert_eq!(s.char_indices().rev().count(), len));\n+}\n+\n+#[bench]\n+fn split_unicode_ascii(b: &mut Bencher) {\n+    let s = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+\n+    b.iter(|| assert_eq!(s.split('V').count(), 3));\n+}\n+\n+#[bench]\n+fn split_ascii(b: &mut Bencher) {\n+    let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n+    let len = s.split(' ').count();\n+\n+    b.iter(|| assert_eq!(s.split(' ').count(), len));\n+}\n+\n+#[bench]\n+fn split_extern_fn(b: &mut Bencher) {\n+    let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n+    let len = s.split(' ').count();\n+    fn pred(c: char) -> bool { c == ' ' }\n+\n+    b.iter(|| assert_eq!(s.split(pred).count(), len));\n+}\n+\n+#[bench]\n+fn split_closure(b: &mut Bencher) {\n+    let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n+    let len = s.split(' ').count();\n+\n+    b.iter(|| assert_eq!(s.split(|c: char| c == ' ').count(), len));\n+}\n+\n+#[bench]\n+fn split_slice(b: &mut Bencher) {\n+    let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n+    let len = s.split(' ').count();\n+\n+    let c: &[char] = &[' '];\n+    b.iter(|| assert_eq!(s.split(c).count(), len));\n+}\n+\n+#[bench]\n+fn bench_join(b: &mut Bencher) {\n+    let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n+    let sep = \"\u2192\";\n+    let v = vec![s, s, s, s, s, s, s, s, s, s];\n+    b.iter(|| {\n+        assert_eq!(v.join(sep).len(), s.len() * 10 + sep.len() * 9);\n+    })\n+}\n+\n+#[bench]\n+fn bench_contains_short_short(b: &mut Bencher) {\n+    let haystack = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\";\n+    let needle = \"sit\";\n+\n+    b.iter(|| {\n+        assert!(haystack.contains(needle));\n+    })\n+}\n+\n+#[bench]\n+fn bench_contains_short_long(b: &mut Bencher) {\n+    let haystack = \"\\\n+Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse quis lorem sit amet dolor \\\n+ultricies condimentum. Praesent iaculis purus elit, ac malesuada quam malesuada in. Duis sed orci \\\n+eros. Suspendisse sit amet magna mollis, mollis nunc luctus, imperdiet mi. Integer fringilla non \\\n+sem ut lacinia. Fusce varius tortor a risus porttitor hendrerit. Morbi mauris dui, ultricies nec \\\n+tempus vel, gravida nec quam.\n+\n+In est dui, tincidunt sed tempus interdum, adipiscing laoreet ante. Etiam tempor, tellus quis \\\n+sagittis interdum, nulla purus mattis sem, quis auctor erat odio ac tellus. In nec nunc sit amet \\\n+diam volutpat molestie at sed ipsum. Vestibulum laoreet consequat vulputate. Integer accumsan \\\n+lorem ac dignissim placerat. Suspendisse convallis faucibus lorem. Aliquam erat volutpat. In vel \\\n+eleifend felis. Sed suscipit nulla lorem, sed mollis est sollicitudin et. Nam fermentum egestas \\\n+interdum. Curabitur ut nisi justo.\n+\n+Sed sollicitudin ipsum tellus, ut condimentum leo eleifend nec. Cras ut velit ante. Phasellus nec \\\n+mollis odio. Mauris molestie erat in arcu mattis, at aliquet dolor vehicula. Quisque malesuada \\\n+lectus sit amet nisi pretium, a condimentum ipsum porta. Morbi at dapibus diam. Praesent egestas \\\n+est sed risus elementum, eu rutrum metus ultrices. Etiam fermentum consectetur magna, id rutrum \\\n+felis accumsan a. Aliquam ut pellentesque libero. Sed mi nulla, lobortis eu tortor id, suscipit \\\n+ultricies neque. Morbi iaculis sit amet risus at iaculis. Praesent eget ligula quis turpis \\\n+feugiat suscipit vel non arcu. Interdum et malesuada fames ac ante ipsum primis in faucibus. \\\n+Aliquam sit amet placerat lorem.\n+\n+Cras a lacus vel ante posuere elementum. Nunc est leo, bibendum ut facilisis vel, bibendum at \\\n+mauris. Nullam adipiscing diam vel odio ornare, luctus adipiscing mi luctus. Nulla facilisi. \\\n+Mauris adipiscing bibendum neque, quis adipiscing lectus tempus et. Sed feugiat erat et nisl \\\n+lobortis pharetra. Donec vitae erat enim. Nullam sit amet felis et quam lacinia tincidunt. Aliquam \\\n+suscipit dapibus urna. Sed volutpat urna in magna pulvinar volutpat. Phasellus nec tellus ac diam \\\n+cursus accumsan.\n+\n+Nam lectus enim, dapibus non nisi tempor, consectetur convallis massa. Maecenas eleifend dictum \\\n+feugiat. Etiam quis mauris vel risus luctus mattis a a nunc. Nullam orci quam, imperdiet id \\\n+vehicula in, porttitor ut nibh. Duis sagittis adipiscing nisl vitae congue. Donec mollis risus eu \\\n+leo suscipit, varius porttitor nulla porta. Pellentesque ut sem nec nisi euismod vehicula. Nulla \\\n+malesuada sollicitudin quam eu fermentum.\";\n+    let needle = \"english\";\n+\n+    b.iter(|| {\n+        assert!(!haystack.contains(needle));\n+    })\n+}\n+\n+#[bench]\n+fn bench_contains_bad_naive(b: &mut Bencher) {\n+    let haystack = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n+    let needle = \"aaaaaaaab\";\n+\n+    b.iter(|| {\n+        assert!(!haystack.contains(needle));\n+    })\n+}\n+\n+#[bench]\n+fn bench_contains_equal(b: &mut Bencher) {\n+    let haystack = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\";\n+    let needle = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\";\n+\n+    b.iter(|| {\n+        assert!(haystack.contains(needle));\n+    })\n+}\n+\n+macro_rules! make_test_inner {\n+    ($s:ident, $code:expr, $name:ident, $str:expr) => {\n+        #[bench]\n+        fn $name(bencher: &mut Bencher) {\n+            let mut $s = $str;\n+            black_box(&mut $s);\n+            bencher.iter(|| $code);\n+        }\n+    }\n+}\n+\n+macro_rules! make_test {\n+    ($name:ident, $s:ident, $code:expr) => {\n+        mod $name {\n+            use test::Bencher;\n+            use test::black_box;\n+\n+            // Short strings: 65 bytes each\n+            make_test_inner!($s, $code, short_ascii,\n+                \"Mary had a little lamb, Little lamb Mary had a littl lamb, lamb!\");\n+            make_test_inner!($s, $code, short_mixed,\n+                \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lam!\");\n+            make_test_inner!($s, $code, short_pile_of_poo,\n+                \"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9!\");\n+            make_test_inner!($s, $code, long_lorem_ipsum,\"\\\n+Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse quis lorem sit amet dolor \\\n+ultricies condimentum. Praesent iaculis purus elit, ac malesuada quam malesuada in. Duis sed orci \\\n+eros. Suspendisse sit amet magna mollis, mollis nunc luctus, imperdiet mi. Integer fringilla non \\\n+sem ut lacinia. Fusce varius tortor a risus porttitor hendrerit. Morbi mauris dui, ultricies nec \\\n+tempus vel, gravida nec quam.\n+\n+In est dui, tincidunt sed tempus interdum, adipiscing laoreet ante. Etiam tempor, tellus quis \\\n+sagittis interdum, nulla purus mattis sem, quis auctor erat odio ac tellus. In nec nunc sit amet \\\n+diam volutpat molestie at sed ipsum. Vestibulum laoreet consequat vulputate. Integer accumsan \\\n+lorem ac dignissim placerat. Suspendisse convallis faucibus lorem. Aliquam erat volutpat. In vel \\\n+eleifend felis. Sed suscipit nulla lorem, sed mollis est sollicitudin et. Nam fermentum egestas \\\n+interdum. Curabitur ut nisi justo.\n+\n+Sed sollicitudin ipsum tellus, ut condimentum leo eleifend nec. Cras ut velit ante. Phasellus nec \\\n+mollis odio. Mauris molestie erat in arcu mattis, at aliquet dolor vehicula. Quisque malesuada \\\n+lectus sit amet nisi pretium, a condimentum ipsum porta. Morbi at dapibus diam. Praesent egestas \\\n+est sed risus elementum, eu rutrum metus ultrices. Etiam fermentum consectetur magna, id rutrum \\\n+felis accumsan a. Aliquam ut pellentesque libero. Sed mi nulla, lobortis eu tortor id, suscipit \\\n+ultricies neque. Morbi iaculis sit amet risus at iaculis. Praesent eget ligula quis turpis \\\n+feugiat suscipit vel non arcu. Interdum et malesuada fames ac ante ipsum primis in faucibus. \\\n+Aliquam sit amet placerat lorem.\n+\n+Cras a lacus vel ante posuere elementum. Nunc est leo, bibendum ut facilisis vel, bibendum at \\\n+mauris. Nullam adipiscing diam vel odio ornare, luctus adipiscing mi luctus. Nulla facilisi. \\\n+Mauris adipiscing bibendum neque, quis adipiscing lectus tempus et. Sed feugiat erat et nisl \\\n+lobortis pharetra. Donec vitae erat enim. Nullam sit amet felis et quam lacinia tincidunt. Aliquam \\\n+suscipit dapibus urna. Sed volutpat urna in magna pulvinar volutpat. Phasellus nec tellus ac diam \\\n+cursus accumsan.\n+\n+Nam lectus enim, dapibus non nisi tempor, consectetur convallis massa. Maecenas eleifend dictum \\\n+feugiat. Etiam quis mauris vel risus luctus mattis a a nunc. Nullam orci quam, imperdiet id \\\n+vehicula in, porttitor ut nibh. Duis sagittis adipiscing nisl vitae congue. Donec mollis risus eu \\\n+leo suscipit, varius porttitor nulla porta. Pellentesque ut sem nec nisi euismod vehicula. Nulla \\\n+malesuada sollicitudin quam eu fermentum!\");\n+        }\n+    }\n+}\n+\n+make_test!(chars_count, s, s.chars().count());\n+\n+make_test!(contains_bang_str, s, s.contains(\"!\"));\n+make_test!(contains_bang_char, s, s.contains('!'));\n+\n+make_test!(match_indices_a_str, s, s.match_indices(\"a\").count());\n+\n+make_test!(split_a_str, s, s.split(\"a\").count());\n+\n+make_test!(trim_ascii_char, s, {\n+    use std::ascii::AsciiExt;\n+    s.trim_matches(|c: char| c.is_ascii())\n+});\n+make_test!(trim_left_ascii_char, s, {\n+    use std::ascii::AsciiExt;\n+    s.trim_left_matches(|c: char| c.is_ascii())\n+});\n+make_test!(trim_right_ascii_char, s, {\n+    use std::ascii::AsciiExt;\n+    s.trim_right_matches(|c: char| c.is_ascii())\n+});\n+\n+make_test!(find_underscore_char, s, s.find('_'));\n+make_test!(rfind_underscore_char, s, s.rfind('_'));\n+make_test!(find_underscore_str, s, s.find(\"_\"));\n+\n+make_test!(find_zzz_char, s, s.find('\\u{1F4A4}'));\n+make_test!(rfind_zzz_char, s, s.rfind('\\u{1F4A4}'));\n+make_test!(find_zzz_str, s, s.find(\"\\u{1F4A4}\"));\n+\n+make_test!(split_space_char, s, s.split(' ').count());\n+make_test!(split_terminator_space_char, s, s.split_terminator(' ').count());\n+\n+make_test!(splitn_space_char, s, s.splitn(10, ' ').count());\n+make_test!(rsplitn_space_char, s, s.rsplitn(10, ' ').count());\n+\n+make_test!(split_space_str, s, s.split(\" \").count());\n+make_test!(split_ad_str, s, s.split(\"ad\").count());"}, {"sha": "36be21d978e1fdac8574e031a233a2915d062762", "filename": "src/libcollections/benches/string.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbenches%2Fstring.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,134 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::iter::repeat;\n+use test::Bencher;\n+\n+#[bench]\n+fn bench_with_capacity(b: &mut Bencher) {\n+    b.iter(|| String::with_capacity(100));\n+}\n+\n+#[bench]\n+fn bench_push_str(b: &mut Bencher) {\n+    let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n+    b.iter(|| {\n+        let mut r = String::new();\n+        r.push_str(s);\n+    });\n+}\n+\n+const REPETITIONS: u64 = 10_000;\n+\n+#[bench]\n+fn bench_push_str_one_byte(b: &mut Bencher) {\n+    b.bytes = REPETITIONS;\n+    b.iter(|| {\n+        let mut r = String::new();\n+        for _ in 0..REPETITIONS {\n+            r.push_str(\"a\")\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn bench_push_char_one_byte(b: &mut Bencher) {\n+    b.bytes = REPETITIONS;\n+    b.iter(|| {\n+        let mut r = String::new();\n+        for _ in 0..REPETITIONS {\n+            r.push('a')\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn bench_push_char_two_bytes(b: &mut Bencher) {\n+    b.bytes = REPETITIONS * 2;\n+    b.iter(|| {\n+        let mut r = String::new();\n+        for _ in 0..REPETITIONS {\n+            r.push('\u00e2')\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn from_utf8_lossy_100_ascii(b: &mut Bencher) {\n+    let s = b\"Hello there, the quick brown fox jumped over the lazy dog! \\\n+              Lorem ipsum dolor sit amet, consectetur. \";\n+\n+    assert_eq!(100, s.len());\n+    b.iter(|| {\n+        let _ = String::from_utf8_lossy(s);\n+    });\n+}\n+\n+#[bench]\n+fn from_utf8_lossy_100_multibyte(b: &mut Bencher) {\n+    let s = \"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u0e1b\u0e23\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\".as_bytes();\n+    assert_eq!(100, s.len());\n+    b.iter(|| {\n+        let _ = String::from_utf8_lossy(s);\n+    });\n+}\n+\n+#[bench]\n+fn from_utf8_lossy_invalid(b: &mut Bencher) {\n+    let s = b\"Hello\\xC0\\x80 There\\xE6\\x83 Goodbye\";\n+    b.iter(|| {\n+        let _ = String::from_utf8_lossy(s);\n+    });\n+}\n+\n+#[bench]\n+fn from_utf8_lossy_100_invalid(b: &mut Bencher) {\n+    let s = repeat(0xf5).take(100).collect::<Vec<_>>();\n+    b.iter(|| {\n+        let _ = String::from_utf8_lossy(&s);\n+    });\n+}\n+\n+#[bench]\n+fn bench_exact_size_shrink_to_fit(b: &mut Bencher) {\n+    let s = \"Hello there, the quick brown fox jumped over the lazy dog! \\\n+             Lorem ipsum dolor sit amet, consectetur. \";\n+    // ensure our operation produces an exact-size string before we benchmark it\n+    let mut r = String::with_capacity(s.len());\n+    r.push_str(s);\n+    assert_eq!(r.len(), r.capacity());\n+    b.iter(|| {\n+        let mut r = String::with_capacity(s.len());\n+        r.push_str(s);\n+        r.shrink_to_fit();\n+        r\n+    });\n+}\n+\n+#[bench]\n+fn bench_from_str(b: &mut Bencher) {\n+    let s = \"Hello there, the quick brown fox jumped over the lazy dog! \\\n+             Lorem ipsum dolor sit amet, consectetur. \";\n+    b.iter(|| String::from(s))\n+}\n+\n+#[bench]\n+fn bench_from(b: &mut Bencher) {\n+    let s = \"Hello there, the quick brown fox jumped over the lazy dog! \\\n+             Lorem ipsum dolor sit amet, consectetur. \";\n+    b.iter(|| String::from(s))\n+}\n+\n+#[bench]\n+fn bench_to_string(b: &mut Bencher) {\n+    let s = \"Hello there, the quick brown fox jumped over the lazy dog! \\\n+             Lorem ipsum dolor sit amet, consectetur. \";\n+    b.iter(|| s.to_string())\n+}"}, {"sha": "414901170683effec41392bb7c3002e44a156d5a", "filename": "src/libcollections/benches/vec.rs", "status": "added", "additions": 492, "deletions": 0, "changes": 492, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbenches%2Fvec.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,492 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use test::Bencher;\n+use std::iter::{FromIterator, repeat};\n+\n+#[bench]\n+fn bench_new(b: &mut Bencher) {\n+    b.iter(|| {\n+        let v: Vec<u32> = Vec::new();\n+        assert_eq!(v.len(), 0);\n+        assert_eq!(v.capacity(), 0);\n+    })\n+}\n+\n+fn do_bench_with_capacity(b: &mut Bencher, src_len: usize) {\n+    b.bytes = src_len as u64;\n+\n+    b.iter(|| {\n+        let v: Vec<u32> = Vec::with_capacity(src_len);\n+        assert_eq!(v.len(), 0);\n+        assert_eq!(v.capacity(), src_len);\n+    })\n+}\n+\n+#[bench]\n+fn bench_with_capacity_0000(b: &mut Bencher) {\n+    do_bench_with_capacity(b, 0)\n+}\n+\n+#[bench]\n+fn bench_with_capacity_0010(b: &mut Bencher) {\n+    do_bench_with_capacity(b, 10)\n+}\n+\n+#[bench]\n+fn bench_with_capacity_0100(b: &mut Bencher) {\n+    do_bench_with_capacity(b, 100)\n+}\n+\n+#[bench]\n+fn bench_with_capacity_1000(b: &mut Bencher) {\n+    do_bench_with_capacity(b, 1000)\n+}\n+\n+fn do_bench_from_fn(b: &mut Bencher, src_len: usize) {\n+    b.bytes = src_len as u64;\n+\n+    b.iter(|| {\n+        let dst = (0..src_len).collect::<Vec<_>>();\n+        assert_eq!(dst.len(), src_len);\n+        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n+    })\n+}\n+\n+#[bench]\n+fn bench_from_fn_0000(b: &mut Bencher) {\n+    do_bench_from_fn(b, 0)\n+}\n+\n+#[bench]\n+fn bench_from_fn_0010(b: &mut Bencher) {\n+    do_bench_from_fn(b, 10)\n+}\n+\n+#[bench]\n+fn bench_from_fn_0100(b: &mut Bencher) {\n+    do_bench_from_fn(b, 100)\n+}\n+\n+#[bench]\n+fn bench_from_fn_1000(b: &mut Bencher) {\n+    do_bench_from_fn(b, 1000)\n+}\n+\n+fn do_bench_from_elem(b: &mut Bencher, src_len: usize) {\n+    b.bytes = src_len as u64;\n+\n+    b.iter(|| {\n+        let dst: Vec<usize> = repeat(5).take(src_len).collect();\n+        assert_eq!(dst.len(), src_len);\n+        assert!(dst.iter().all(|x| *x == 5));\n+    })\n+}\n+\n+#[bench]\n+fn bench_from_elem_0000(b: &mut Bencher) {\n+    do_bench_from_elem(b, 0)\n+}\n+\n+#[bench]\n+fn bench_from_elem_0010(b: &mut Bencher) {\n+    do_bench_from_elem(b, 10)\n+}\n+\n+#[bench]\n+fn bench_from_elem_0100(b: &mut Bencher) {\n+    do_bench_from_elem(b, 100)\n+}\n+\n+#[bench]\n+fn bench_from_elem_1000(b: &mut Bencher) {\n+    do_bench_from_elem(b, 1000)\n+}\n+\n+fn do_bench_from_slice(b: &mut Bencher, src_len: usize) {\n+    let src: Vec<_> = FromIterator::from_iter(0..src_len);\n+\n+    b.bytes = src_len as u64;\n+\n+    b.iter(|| {\n+        let dst = src.clone()[..].to_vec();\n+        assert_eq!(dst.len(), src_len);\n+        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n+    });\n+}\n+\n+#[bench]\n+fn bench_from_slice_0000(b: &mut Bencher) {\n+    do_bench_from_slice(b, 0)\n+}\n+\n+#[bench]\n+fn bench_from_slice_0010(b: &mut Bencher) {\n+    do_bench_from_slice(b, 10)\n+}\n+\n+#[bench]\n+fn bench_from_slice_0100(b: &mut Bencher) {\n+    do_bench_from_slice(b, 100)\n+}\n+\n+#[bench]\n+fn bench_from_slice_1000(b: &mut Bencher) {\n+    do_bench_from_slice(b, 1000)\n+}\n+\n+fn do_bench_from_iter(b: &mut Bencher, src_len: usize) {\n+    let src: Vec<_> = FromIterator::from_iter(0..src_len);\n+\n+    b.bytes = src_len as u64;\n+\n+    b.iter(|| {\n+        let dst: Vec<_> = FromIterator::from_iter(src.clone());\n+        assert_eq!(dst.len(), src_len);\n+        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n+    });\n+}\n+\n+#[bench]\n+fn bench_from_iter_0000(b: &mut Bencher) {\n+    do_bench_from_iter(b, 0)\n+}\n+\n+#[bench]\n+fn bench_from_iter_0010(b: &mut Bencher) {\n+    do_bench_from_iter(b, 10)\n+}\n+\n+#[bench]\n+fn bench_from_iter_0100(b: &mut Bencher) {\n+    do_bench_from_iter(b, 100)\n+}\n+\n+#[bench]\n+fn bench_from_iter_1000(b: &mut Bencher) {\n+    do_bench_from_iter(b, 1000)\n+}\n+\n+fn do_bench_extend(b: &mut Bencher, dst_len: usize, src_len: usize) {\n+    let dst: Vec<_> = FromIterator::from_iter(0..dst_len);\n+    let src: Vec<_> = FromIterator::from_iter(dst_len..dst_len + src_len);\n+\n+    b.bytes = src_len as u64;\n+\n+    b.iter(|| {\n+        let mut dst = dst.clone();\n+        dst.extend(src.clone());\n+        assert_eq!(dst.len(), dst_len + src_len);\n+        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n+    });\n+}\n+\n+#[bench]\n+fn bench_extend_0000_0000(b: &mut Bencher) {\n+    do_bench_extend(b, 0, 0)\n+}\n+\n+#[bench]\n+fn bench_extend_0000_0010(b: &mut Bencher) {\n+    do_bench_extend(b, 0, 10)\n+}\n+\n+#[bench]\n+fn bench_extend_0000_0100(b: &mut Bencher) {\n+    do_bench_extend(b, 0, 100)\n+}\n+\n+#[bench]\n+fn bench_extend_0000_1000(b: &mut Bencher) {\n+    do_bench_extend(b, 0, 1000)\n+}\n+\n+#[bench]\n+fn bench_extend_0010_0010(b: &mut Bencher) {\n+    do_bench_extend(b, 10, 10)\n+}\n+\n+#[bench]\n+fn bench_extend_0100_0100(b: &mut Bencher) {\n+    do_bench_extend(b, 100, 100)\n+}\n+\n+#[bench]\n+fn bench_extend_1000_1000(b: &mut Bencher) {\n+    do_bench_extend(b, 1000, 1000)\n+}\n+\n+fn do_bench_push_all(b: &mut Bencher, dst_len: usize, src_len: usize) {\n+    let dst: Vec<_> = FromIterator::from_iter(0..dst_len);\n+    let src: Vec<_> = FromIterator::from_iter(dst_len..dst_len + src_len);\n+\n+    b.bytes = src_len as u64;\n+\n+    b.iter(|| {\n+        let mut dst = dst.clone();\n+        dst.extend_from_slice(&src);\n+        assert_eq!(dst.len(), dst_len + src_len);\n+        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n+    });\n+}\n+\n+#[bench]\n+fn bench_push_all_0000_0000(b: &mut Bencher) {\n+    do_bench_push_all(b, 0, 0)\n+}\n+\n+#[bench]\n+fn bench_push_all_0000_0010(b: &mut Bencher) {\n+    do_bench_push_all(b, 0, 10)\n+}\n+\n+#[bench]\n+fn bench_push_all_0000_0100(b: &mut Bencher) {\n+    do_bench_push_all(b, 0, 100)\n+}\n+\n+#[bench]\n+fn bench_push_all_0000_1000(b: &mut Bencher) {\n+    do_bench_push_all(b, 0, 1000)\n+}\n+\n+#[bench]\n+fn bench_push_all_0010_0010(b: &mut Bencher) {\n+    do_bench_push_all(b, 10, 10)\n+}\n+\n+#[bench]\n+fn bench_push_all_0100_0100(b: &mut Bencher) {\n+    do_bench_push_all(b, 100, 100)\n+}\n+\n+#[bench]\n+fn bench_push_all_1000_1000(b: &mut Bencher) {\n+    do_bench_push_all(b, 1000, 1000)\n+}\n+\n+fn do_bench_push_all_move(b: &mut Bencher, dst_len: usize, src_len: usize) {\n+    let dst: Vec<_> = FromIterator::from_iter(0..dst_len);\n+    let src: Vec<_> = FromIterator::from_iter(dst_len..dst_len + src_len);\n+\n+    b.bytes = src_len as u64;\n+\n+    b.iter(|| {\n+        let mut dst = dst.clone();\n+        dst.extend(src.clone());\n+        assert_eq!(dst.len(), dst_len + src_len);\n+        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n+    });\n+}\n+\n+#[bench]\n+fn bench_push_all_move_0000_0000(b: &mut Bencher) {\n+    do_bench_push_all_move(b, 0, 0)\n+}\n+\n+#[bench]\n+fn bench_push_all_move_0000_0010(b: &mut Bencher) {\n+    do_bench_push_all_move(b, 0, 10)\n+}\n+\n+#[bench]\n+fn bench_push_all_move_0000_0100(b: &mut Bencher) {\n+    do_bench_push_all_move(b, 0, 100)\n+}\n+\n+#[bench]\n+fn bench_push_all_move_0000_1000(b: &mut Bencher) {\n+    do_bench_push_all_move(b, 0, 1000)\n+}\n+\n+#[bench]\n+fn bench_push_all_move_0010_0010(b: &mut Bencher) {\n+    do_bench_push_all_move(b, 10, 10)\n+}\n+\n+#[bench]\n+fn bench_push_all_move_0100_0100(b: &mut Bencher) {\n+    do_bench_push_all_move(b, 100, 100)\n+}\n+\n+#[bench]\n+fn bench_push_all_move_1000_1000(b: &mut Bencher) {\n+    do_bench_push_all_move(b, 1000, 1000)\n+}\n+\n+fn do_bench_clone(b: &mut Bencher, src_len: usize) {\n+    let src: Vec<usize> = FromIterator::from_iter(0..src_len);\n+\n+    b.bytes = src_len as u64;\n+\n+    b.iter(|| {\n+        let dst = src.clone();\n+        assert_eq!(dst.len(), src_len);\n+        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n+    });\n+}\n+\n+#[bench]\n+fn bench_clone_0000(b: &mut Bencher) {\n+    do_bench_clone(b, 0)\n+}\n+\n+#[bench]\n+fn bench_clone_0010(b: &mut Bencher) {\n+    do_bench_clone(b, 10)\n+}\n+\n+#[bench]\n+fn bench_clone_0100(b: &mut Bencher) {\n+    do_bench_clone(b, 100)\n+}\n+\n+#[bench]\n+fn bench_clone_1000(b: &mut Bencher) {\n+    do_bench_clone(b, 1000)\n+}\n+\n+fn do_bench_clone_from(b: &mut Bencher, times: usize, dst_len: usize, src_len: usize) {\n+    let dst: Vec<_> = FromIterator::from_iter(0..src_len);\n+    let src: Vec<_> = FromIterator::from_iter(dst_len..dst_len + src_len);\n+\n+    b.bytes = (times * src_len) as u64;\n+\n+    b.iter(|| {\n+        let mut dst = dst.clone();\n+\n+        for _ in 0..times {\n+            dst.clone_from(&src);\n+\n+            assert_eq!(dst.len(), src_len);\n+            assert!(dst.iter().enumerate().all(|(i, x)| dst_len + i == *x));\n+        }\n+    });\n+}\n+\n+#[bench]\n+fn bench_clone_from_01_0000_0000(b: &mut Bencher) {\n+    do_bench_clone_from(b, 1, 0, 0)\n+}\n+\n+#[bench]\n+fn bench_clone_from_01_0000_0010(b: &mut Bencher) {\n+    do_bench_clone_from(b, 1, 0, 10)\n+}\n+\n+#[bench]\n+fn bench_clone_from_01_0000_0100(b: &mut Bencher) {\n+    do_bench_clone_from(b, 1, 0, 100)\n+}\n+\n+#[bench]\n+fn bench_clone_from_01_0000_1000(b: &mut Bencher) {\n+    do_bench_clone_from(b, 1, 0, 1000)\n+}\n+\n+#[bench]\n+fn bench_clone_from_01_0010_0010(b: &mut Bencher) {\n+    do_bench_clone_from(b, 1, 10, 10)\n+}\n+\n+#[bench]\n+fn bench_clone_from_01_0100_0100(b: &mut Bencher) {\n+    do_bench_clone_from(b, 1, 100, 100)\n+}\n+\n+#[bench]\n+fn bench_clone_from_01_1000_1000(b: &mut Bencher) {\n+    do_bench_clone_from(b, 1, 1000, 1000)\n+}\n+\n+#[bench]\n+fn bench_clone_from_01_0010_0100(b: &mut Bencher) {\n+    do_bench_clone_from(b, 1, 10, 100)\n+}\n+\n+#[bench]\n+fn bench_clone_from_01_0100_1000(b: &mut Bencher) {\n+    do_bench_clone_from(b, 1, 100, 1000)\n+}\n+\n+#[bench]\n+fn bench_clone_from_01_0010_0000(b: &mut Bencher) {\n+    do_bench_clone_from(b, 1, 10, 0)\n+}\n+\n+#[bench]\n+fn bench_clone_from_01_0100_0010(b: &mut Bencher) {\n+    do_bench_clone_from(b, 1, 100, 10)\n+}\n+\n+#[bench]\n+fn bench_clone_from_01_1000_0100(b: &mut Bencher) {\n+    do_bench_clone_from(b, 1, 1000, 100)\n+}\n+\n+#[bench]\n+fn bench_clone_from_10_0000_0000(b: &mut Bencher) {\n+    do_bench_clone_from(b, 10, 0, 0)\n+}\n+\n+#[bench]\n+fn bench_clone_from_10_0000_0010(b: &mut Bencher) {\n+    do_bench_clone_from(b, 10, 0, 10)\n+}\n+\n+#[bench]\n+fn bench_clone_from_10_0000_0100(b: &mut Bencher) {\n+    do_bench_clone_from(b, 10, 0, 100)\n+}\n+\n+#[bench]\n+fn bench_clone_from_10_0000_1000(b: &mut Bencher) {\n+    do_bench_clone_from(b, 10, 0, 1000)\n+}\n+\n+#[bench]\n+fn bench_clone_from_10_0010_0010(b: &mut Bencher) {\n+    do_bench_clone_from(b, 10, 10, 10)\n+}\n+\n+#[bench]\n+fn bench_clone_from_10_0100_0100(b: &mut Bencher) {\n+    do_bench_clone_from(b, 10, 100, 100)\n+}\n+\n+#[bench]\n+fn bench_clone_from_10_1000_1000(b: &mut Bencher) {\n+    do_bench_clone_from(b, 10, 1000, 1000)\n+}\n+\n+#[bench]\n+fn bench_clone_from_10_0010_0100(b: &mut Bencher) {\n+    do_bench_clone_from(b, 10, 10, 100)\n+}\n+\n+#[bench]\n+fn bench_clone_from_10_0100_1000(b: &mut Bencher) {\n+    do_bench_clone_from(b, 10, 100, 1000)\n+}\n+\n+#[bench]\n+fn bench_clone_from_10_0010_0000(b: &mut Bencher) {\n+    do_bench_clone_from(b, 10, 10, 0)\n+}\n+\n+#[bench]\n+fn bench_clone_from_10_0100_0010(b: &mut Bencher) {\n+    do_bench_clone_from(b, 10, 100, 10)\n+}\n+\n+#[bench]\n+fn bench_clone_from_10_1000_0100(b: &mut Bencher) {\n+    do_bench_clone_from(b, 10, 1000, 100)\n+}"}, {"sha": "380645e7cd03a9236f31f2ff4cdd88b61fa54aac", "filename": "src/libcollections/benches/vec_deque.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbenches%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbenches%2Fvec_deque.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,57 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::collections::VecDeque;\n+use test::{Bencher, black_box};\n+\n+#[bench]\n+fn bench_new(b: &mut Bencher) {\n+    b.iter(|| {\n+        let ring: VecDeque<i32> = VecDeque::new();\n+        black_box(ring);\n+    })\n+}\n+\n+#[bench]\n+fn bench_grow_1025(b: &mut Bencher) {\n+    b.iter(|| {\n+        let mut deq = VecDeque::new();\n+        for i in 0..1025 {\n+            deq.push_front(i);\n+        }\n+        black_box(deq);\n+    })\n+}\n+\n+#[bench]\n+fn bench_iter_1000(b: &mut Bencher) {\n+    let ring: VecDeque<_> = (0..1000).collect();\n+\n+    b.iter(|| {\n+        let mut sum = 0;\n+        for &i in &ring {\n+            sum += i;\n+        }\n+        black_box(sum);\n+    })\n+}\n+\n+#[bench]\n+fn bench_mut_iter_1000(b: &mut Bencher) {\n+    let mut ring: VecDeque<_> = (0..1000).collect();\n+\n+    b.iter(|| {\n+        let mut sum = 0;\n+        for i in &mut ring {\n+            sum += *i;\n+        }\n+        black_box(sum);\n+    })\n+}"}, {"sha": "a5a2f70492dc97daaa05e5ef2ee1a770f32173dc", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -228,6 +228,15 @@ pub struct PeekMut<'a, T: 'a + Ord> {\n     sift: bool,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: Ord + fmt::Debug> fmt::Debug for PeekMut<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"PeekMut\")\n+         .field(&self.heap.data[0])\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n impl<'a, T: Ord> Drop for PeekMut<'a, T> {\n     fn drop(&mut self) {\n@@ -968,6 +977,15 @@ pub struct Iter<'a, T: 'a> {\n     iter: slice::Iter<'a, T>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Iter\")\n+         .field(&self.iter.as_slice())\n+         .finish()\n+    }\n+}\n+\n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n@@ -1016,6 +1034,15 @@ pub struct IntoIter<T> {\n     iter: vec::IntoIter<T>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"IntoIter\")\n+         .field(&self.iter.as_slice())\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Iterator for IntoIter<T> {\n     type Item = T;\n@@ -1051,6 +1078,7 @@ impl<T> FusedIterator for IntoIter<T> {}\n \n /// An iterator that drains a `BinaryHeap`.\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n+#[derive(Debug)]\n pub struct Drain<'a, T: 'a> {\n     iter: vec::Drain<'a, T>,\n }\n@@ -1200,6 +1228,17 @@ where T: Clone + Ord {\n     place: vec::PlaceBack<'a, T>,\n }\n \n+#[unstable(feature = \"collection_placement\",\n+           reason = \"placement protocol is subject to change\",\n+           issue = \"30172\")]\n+impl<'a, T: Clone + Ord + fmt::Debug> fmt::Debug for BinaryHeapPlace<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"BinaryHeapPlace\")\n+         .field(&self.place)\n+         .finish()\n+    }\n+}\n+\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]"}, {"sha": "e1fabe2cc496b2fb18c63fcd6984aec9ddd8279b", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -270,8 +270,16 @@ pub struct Iter<'a, K: 'a, V: 'a> {\n     length: usize,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Iter<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list().entries(self.clone()).finish()\n+    }\n+}\n+\n /// A mutable iterator over a BTreeMap's entries.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Debug)]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n     range: RangeMut<'a, K, V>,\n     length: usize,\n@@ -285,20 +293,46 @@ pub struct IntoIter<K, V> {\n     length: usize,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IntoIter<K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let range = Range {\n+            front: self.front.reborrow(),\n+            back: self.back.reborrow(),\n+        };\n+        f.debug_list().entries(range).finish()\n+    }\n+}\n+\n /// An iterator over a BTreeMap's keys.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Keys<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list().entries(self.inner.clone()).finish()\n+    }\n+}\n+\n /// An iterator over a BTreeMap's values.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Values<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list().entries(self.inner.clone()).finish()\n+    }\n+}\n+\n /// A mutable iterator over a BTreeMap's values.\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n+#[derive(Debug)]\n pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n }\n@@ -309,6 +343,13 @@ pub struct Range<'a, K: 'a, V: 'a> {\n     back: Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Range<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_list().entries(self.clone()).finish()\n+    }\n+}\n+\n /// A mutable iterator over a sub-range of BTreeMap's entries.\n pub struct RangeMut<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>,\n@@ -318,6 +359,17 @@ pub struct RangeMut<'a, K: 'a, V: 'a> {\n     _marker: PhantomData<&'a mut (K, V)>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for RangeMut<'a, K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let range = Range {\n+            front: self.front.reborrow(),\n+            back: self.back.reborrow(),\n+        };\n+        f.debug_list().entries(range).finish()\n+    }\n+}\n+\n /// A view into a single entry in a map, which may either be vacant or occupied.\n /// This enum is constructed from the [`entry`] method on [`BTreeMap`].\n ///"}, {"sha": "bfffa0b8efa1cb074168f78c6217055e5371caed", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -85,13 +85,23 @@ pub struct Iter<'a, T: 'a> {\n     iter: Keys<'a, T, ()>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Iter\")\n+         .field(&self.iter.clone())\n+         .finish()\n+    }\n+}\n+\n /// An owning iterator over a `BTreeSet`'s items.\n ///\n /// This structure is created by the `into_iter` method on [`BTreeSet`]\n /// [`BTreeSet`] (provided by the `IntoIterator` trait).\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Debug)]\n pub struct IntoIter<T> {\n     iter: ::btree_map::IntoIter<T, ()>,\n }\n@@ -102,6 +112,7 @@ pub struct IntoIter<T> {\n ///\n /// [`BTreeSet`]: struct.BTreeSet.html\n /// [`range`]: struct.BTreeSet.html#method.range\n+#[derive(Debug)]\n pub struct Range<'a, T: 'a> {\n     iter: ::btree_map::Range<'a, T, ()>,\n }\n@@ -118,6 +129,15 @@ pub struct Difference<'a, T: 'a> {\n     b: Peekable<Iter<'a, T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Difference<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Difference\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n /// A lazy iterator producing elements in the set symmetric difference (in-order).\n ///\n /// This structure is created by the [`symmetric_difference`] method on\n@@ -131,6 +151,15 @@ pub struct SymmetricDifference<'a, T: 'a> {\n     b: Peekable<Iter<'a, T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for SymmetricDifference<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"SymmetricDifference\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n /// A lazy iterator producing elements in the set intersection (in-order).\n ///\n /// This structure is created by the [`intersection`] method on [`BTreeSet`].\n@@ -143,6 +172,15 @@ pub struct Intersection<'a, T: 'a> {\n     b: Peekable<Iter<'a, T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Intersection<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Intersection\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n /// A lazy iterator producing elements in the set union (in-order).\n ///\n /// This structure is created by the [`union`] method on [`BTreeSet`].\n@@ -155,6 +193,15 @@ pub struct Union<'a, T: 'a> {\n     b: Peekable<Iter<'a, T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Union<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Union\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n impl<T: Ord> BTreeSet<T> {\n     /// Makes a new `BTreeSet` with a reasonable choice of B.\n     ///"}, {"sha": "602e874aaeec0de2d0416b93f67e6733a3ed27a7", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -222,6 +222,14 @@ pub struct Iter<E> {\n     marker: marker::PhantomData<E>,\n }\n \n+impl<E: fmt::Debug> fmt::Debug for Iter<E> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Iter\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n impl<E> Clone for Iter<E> {\n     fn clone(&self) -> Iter<E> {"}, {"sha": "53d5466e12bb0cdec2a72a79295df5dd15f6afe1", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -28,6 +28,7 @@\n \n #![cfg_attr(test, allow(deprecated))] // rand\n #![deny(warnings)]\n+#![deny(missing_debug_implementations)]\n \n #![feature(alloc)]\n #![feature(allow_internal_unstable)]"}, {"sha": "d4f77d625b361d4633f2a538486d02d1fc3dd218", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -65,6 +65,15 @@ pub struct Iter<'a, T: 'a> {\n     marker: PhantomData<&'a Node<T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Iter\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n // FIXME #19839: deriving is too aggressive on the bounds (T doesn't need to be Clone).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n@@ -82,13 +91,31 @@ pub struct IterMut<'a, T: 'a> {\n     len: usize,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"IterMut\")\n+         .field(self.clone())\n+         .finish()\n+    }\n+}\n+\n /// An iterator over the elements of a `LinkedList`.\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {\n     list: LinkedList<T>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"IntoIter\")\n+         .field(self.clone())\n+         .finish()\n+    }\n+}\n+\n impl<T> Node<T> {\n     fn new(element: T) -> Self {\n         Node {\n@@ -1077,6 +1104,17 @@ pub struct FrontPlace<'a, T: 'a> {\n     node: IntermediateBox<Node<T>>,\n }\n \n+#[unstable(feature = \"collection_placement\",\n+           reason = \"struct name and placement protocol are subject to change\",\n+           issue = \"30172\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for FrontPlace<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"FrontPlace\")\n+         .field(self.clone())\n+         .finish()\n+    }\n+}\n+\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]\n@@ -1121,6 +1159,17 @@ pub struct BackPlace<'a, T: 'a> {\n     node: IntermediateBox<Node<T>>,\n }\n \n+#[unstable(feature = \"collection_placement\",\n+           reason = \"struct name and placement protocol are subject to change\",\n+           issue = \"30172\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for BackPlace<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"BackPlace\")\n+         .field(self.clone())\n+         .finish()\n+    }\n+}\n+\n #[unstable(feature = \"collection_placement\",\n            reason = \"placement protocol is subject to change\",\n            issue = \"30172\")]"}, {"sha": "87315fff0a07d915f8ac09aeb5d603e946730409", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -19,6 +19,7 @@\n // It's cleaner to just turn off the unused_imports warning than to fix them.\n #![allow(unused_imports)]\n \n+use core::fmt;\n use core::str as core_str;\n use core::str::pattern::Pattern;\n use core::str::pattern::{Searcher, ReverseSearcher, DoubleEndedSearcher};\n@@ -122,6 +123,13 @@ pub struct EncodeUtf16<'a> {\n     encoder: Utf16Encoder<Chars<'a>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a> fmt::Debug for EncodeUtf16<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"EncodeUtf16 { .. }\")\n+    }\n+}\n+\n #[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n impl<'a> Iterator for EncodeUtf16<'a> {\n     type Item = u16;"}, {"sha": "4c82e2e2e7e35ea15299172a20efaf543874e15a", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1990,6 +1990,13 @@ pub struct Drain<'a> {\n     iter: Chars<'a>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a> fmt::Debug for Drain<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"Drain { .. }\")\n+    }\n+}\n+\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a> Sync for Drain<'a> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]"}, {"sha": "dc0f33d9bc3e00d82e0ca9a5d92d835050bc218a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -2089,6 +2089,15 @@ pub struct Drain<'a, T: 'a> {\n     vec: Shared<Vec<T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Drain\")\n+         .field(&self.iter.as_slice())\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n@@ -2155,6 +2164,7 @@ impl<'a, T> FusedIterator for Drain<'a, T> {}\n #[unstable(feature = \"collection_placement\",\n            reason = \"struct name and placement protocol are subject to change\",\n            issue = \"30172\")]\n+#[derive(Debug)]\n pub struct PlaceBack<'a, T: 'a> {\n     vec: &'a mut Vec<T>,\n }"}, {"sha": "8d42045ff16372cbaccdfc7b80124488d4c444b2", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1856,6 +1856,15 @@ pub struct Iter<'a, T: 'a> {\n     head: usize,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Iter<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Iter\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n // FIXME(#19839) Remove in favor of `#[derive(Clone)]`\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Clone for Iter<'a, T> {\n@@ -1928,6 +1937,15 @@ pub struct IterMut<'a, T: 'a> {\n     head: usize,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for IterMut<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"IterMut\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T> Iterator for IterMut<'a, T> {\n     type Item = &'a mut T;\n@@ -1994,6 +2012,15 @@ pub struct IntoIter<T> {\n     inner: VecDeque<T>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<T: fmt::Debug> fmt::Debug for IntoIter<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"IntoIter\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Iterator for IntoIter<T> {\n     type Item = T;\n@@ -2037,6 +2064,15 @@ pub struct Drain<'a, T: 'a> {\n     deque: Shared<VecDeque<T>>,\n }\n \n+#[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n+impl<'a, T: 'a + fmt::Debug> fmt::Debug for Drain<'a, T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_tuple(\"Drain\")\n+         .field(&self.clone())\n+         .finish()\n+    }\n+}\n+\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n unsafe impl<'a, T: Sync> Sync for Drain<'a, T> {}\n #[stable(feature = \"drain\", since = \"1.6.0\")]"}, {"sha": "11be13426e49cebb93ade022297b828e801485a5", "filename": "src/libcollectionstest/btree/map.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollectionstest%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fbtree%2Fmap.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -606,52 +606,3 @@ fn test_split_off_large_random_sorted() {\n     assert!(map.into_iter().eq(data.clone().into_iter().filter(|x| x.0 < key)));\n     assert!(right.into_iter().eq(data.into_iter().filter(|x| x.0 >= key)));\n }\n-\n-mod bench {\n-    use std::collections::BTreeMap;\n-    use std::__rand::{Rng, thread_rng};\n-\n-    use test::{Bencher, black_box};\n-\n-    map_insert_rand_bench!{insert_rand_100,    100,    BTreeMap}\n-    map_insert_rand_bench!{insert_rand_10_000, 10_000, BTreeMap}\n-\n-    map_insert_seq_bench!{insert_seq_100,    100,    BTreeMap}\n-    map_insert_seq_bench!{insert_seq_10_000, 10_000, BTreeMap}\n-\n-    map_find_rand_bench!{find_rand_100,    100,    BTreeMap}\n-    map_find_rand_bench!{find_rand_10_000, 10_000, BTreeMap}\n-\n-    map_find_seq_bench!{find_seq_100,    100,    BTreeMap}\n-    map_find_seq_bench!{find_seq_10_000, 10_000, BTreeMap}\n-\n-    fn bench_iter(b: &mut Bencher, size: i32) {\n-        let mut map = BTreeMap::<i32, i32>::new();\n-        let mut rng = thread_rng();\n-\n-        for _ in 0..size {\n-            map.insert(rng.gen(), rng.gen());\n-        }\n-\n-        b.iter(|| {\n-            for entry in &map {\n-                black_box(entry);\n-            }\n-        });\n-    }\n-\n-    #[bench]\n-    pub fn iter_20(b: &mut Bencher) {\n-        bench_iter(b, 20);\n-    }\n-\n-    #[bench]\n-    pub fn iter_1000(b: &mut Bencher) {\n-        bench_iter(b, 1000);\n-    }\n-\n-    #[bench]\n-    pub fn iter_100000(b: &mut Bencher) {\n-        bench_iter(b, 100000);\n-    }\n-}"}, {"sha": "57e3c2df059e122775f7d98f0c082980a7a4c7bb", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -35,10 +35,6 @@ extern crate std_unicode;\n use std::hash::{Hash, Hasher};\n use std::collections::hash_map::DefaultHasher;\n \n-#[cfg(test)]\n-#[macro_use]\n-mod bench;\n-\n mod binary_heap;\n mod btree;\n mod cow_str;"}, {"sha": "a59724a017b1241de3e9995727a719782b76ea7f", "filename": "src/libcollectionstest/linked_list.rs", "status": "modified", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollectionstest%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollectionstest%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flinked_list.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -10,8 +10,6 @@\n \n use std::collections::LinkedList;\n \n-use test;\n-\n #[test]\n fn test_basic() {\n     let mut m = LinkedList::<Box<_>>::new();\n@@ -356,81 +354,6 @@ fn test_extend() {\n     assert!(a.iter().eq(&[1, 2, 3, 4, 5, 6, 7]));\n }\n \n-#[bench]\n-fn bench_collect_into(b: &mut test::Bencher) {\n-    let v = &[0; 64];\n-    b.iter(|| {\n-        let _: LinkedList<_> = v.iter().cloned().collect();\n-    })\n-}\n-\n-#[bench]\n-fn bench_push_front(b: &mut test::Bencher) {\n-    let mut m: LinkedList<_> = LinkedList::new();\n-    b.iter(|| {\n-        m.push_front(0);\n-    })\n-}\n-\n-#[bench]\n-fn bench_push_back(b: &mut test::Bencher) {\n-    let mut m: LinkedList<_> = LinkedList::new();\n-    b.iter(|| {\n-        m.push_back(0);\n-    })\n-}\n-\n-#[bench]\n-fn bench_push_back_pop_back(b: &mut test::Bencher) {\n-    let mut m: LinkedList<_> = LinkedList::new();\n-    b.iter(|| {\n-        m.push_back(0);\n-        m.pop_back();\n-    })\n-}\n-\n-#[bench]\n-fn bench_push_front_pop_front(b: &mut test::Bencher) {\n-    let mut m: LinkedList<_> = LinkedList::new();\n-    b.iter(|| {\n-        m.push_front(0);\n-        m.pop_front();\n-    })\n-}\n-\n-#[bench]\n-fn bench_iter(b: &mut test::Bencher) {\n-    let v = &[0; 128];\n-    let m: LinkedList<_> = v.iter().cloned().collect();\n-    b.iter(|| {\n-        assert!(m.iter().count() == 128);\n-    })\n-}\n-#[bench]\n-fn bench_iter_mut(b: &mut test::Bencher) {\n-    let v = &[0; 128];\n-    let mut m: LinkedList<_> = v.iter().cloned().collect();\n-    b.iter(|| {\n-        assert!(m.iter_mut().count() == 128);\n-    })\n-}\n-#[bench]\n-fn bench_iter_rev(b: &mut test::Bencher) {\n-    let v = &[0; 128];\n-    let m: LinkedList<_> = v.iter().cloned().collect();\n-    b.iter(|| {\n-        assert!(m.iter().rev().count() == 128);\n-    })\n-}\n-#[bench]\n-fn bench_iter_mut_rev(b: &mut test::Bencher) {\n-    let v = &[0; 128];\n-    let mut m: LinkedList<_> = v.iter().cloned().collect();\n-    b.iter(|| {\n-        assert!(m.iter_mut().rev().count() == 128);\n-    })\n-}\n-\n #[test]\n fn test_contains() {\n     let mut l = LinkedList::new();"}, {"sha": "a7f7baf38518c186751d04f02574ba9bdac7e7ba", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 0, "deletions": 273, "changes": 273, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1170,276 +1170,3 @@ fn test_copy_from_slice_dst_shorter() {\n     let mut dst = [0; 3];\n     dst.copy_from_slice(&src);\n }\n-\n-mod bench {\n-    use std::{mem, ptr};\n-    use std::__rand::{Rng, thread_rng};\n-\n-    use test::{Bencher, black_box};\n-\n-    #[bench]\n-    fn iterator(b: &mut Bencher) {\n-        // peculiar numbers to stop LLVM from optimising the summation\n-        // out.\n-        let v: Vec<_> = (0..100).map(|i| i ^ (i << 1) ^ (i >> 1)).collect();\n-\n-        b.iter(|| {\n-            let mut sum = 0;\n-            for x in &v {\n-                sum += *x;\n-            }\n-            // sum == 11806, to stop dead code elimination.\n-            if sum == 0 {\n-                panic!()\n-            }\n-        })\n-    }\n-\n-    #[bench]\n-    fn mut_iterator(b: &mut Bencher) {\n-        let mut v = vec![0; 100];\n-\n-        b.iter(|| {\n-            let mut i = 0;\n-            for x in &mut v {\n-                *x = i;\n-                i += 1;\n-            }\n-        })\n-    }\n-\n-    #[bench]\n-    fn concat(b: &mut Bencher) {\n-        let xss: Vec<Vec<i32>> = (0..100).map(|i| (0..i).collect()).collect();\n-        b.iter(|| {\n-            xss.concat();\n-        });\n-    }\n-\n-    #[bench]\n-    fn join(b: &mut Bencher) {\n-        let xss: Vec<Vec<i32>> = (0..100).map(|i| (0..i).collect()).collect();\n-        b.iter(|| xss.join(&0));\n-    }\n-\n-    #[bench]\n-    fn push(b: &mut Bencher) {\n-        let mut vec = Vec::<i32>::new();\n-        b.iter(|| {\n-            vec.push(0);\n-            black_box(&vec);\n-        });\n-    }\n-\n-    #[bench]\n-    fn starts_with_same_vector(b: &mut Bencher) {\n-        let vec: Vec<_> = (0..100).collect();\n-        b.iter(|| vec.starts_with(&vec))\n-    }\n-\n-    #[bench]\n-    fn starts_with_single_element(b: &mut Bencher) {\n-        let vec: Vec<_> = vec![0];\n-        b.iter(|| vec.starts_with(&vec))\n-    }\n-\n-    #[bench]\n-    fn starts_with_diff_one_element_at_end(b: &mut Bencher) {\n-        let vec: Vec<_> = (0..100).collect();\n-        let mut match_vec: Vec<_> = (0..99).collect();\n-        match_vec.push(0);\n-        b.iter(|| vec.starts_with(&match_vec))\n-    }\n-\n-    #[bench]\n-    fn ends_with_same_vector(b: &mut Bencher) {\n-        let vec: Vec<_> = (0..100).collect();\n-        b.iter(|| vec.ends_with(&vec))\n-    }\n-\n-    #[bench]\n-    fn ends_with_single_element(b: &mut Bencher) {\n-        let vec: Vec<_> = vec![0];\n-        b.iter(|| vec.ends_with(&vec))\n-    }\n-\n-    #[bench]\n-    fn ends_with_diff_one_element_at_beginning(b: &mut Bencher) {\n-        let vec: Vec<_> = (0..100).collect();\n-        let mut match_vec: Vec<_> = (0..100).collect();\n-        match_vec[0] = 200;\n-        b.iter(|| vec.starts_with(&match_vec))\n-    }\n-\n-    #[bench]\n-    fn contains_last_element(b: &mut Bencher) {\n-        let vec: Vec<_> = (0..100).collect();\n-        b.iter(|| vec.contains(&99))\n-    }\n-\n-    #[bench]\n-    fn zero_1kb_from_elem(b: &mut Bencher) {\n-        b.iter(|| vec![0u8; 1024]);\n-    }\n-\n-    #[bench]\n-    fn zero_1kb_set_memory(b: &mut Bencher) {\n-        b.iter(|| {\n-            let mut v = Vec::<u8>::with_capacity(1024);\n-            unsafe {\n-                let vp = v.as_mut_ptr();\n-                ptr::write_bytes(vp, 0, 1024);\n-                v.set_len(1024);\n-            }\n-            v\n-        });\n-    }\n-\n-    #[bench]\n-    fn zero_1kb_loop_set(b: &mut Bencher) {\n-        b.iter(|| {\n-            let mut v = Vec::<u8>::with_capacity(1024);\n-            unsafe {\n-                v.set_len(1024);\n-            }\n-            for i in 0..1024 {\n-                v[i] = 0;\n-            }\n-        });\n-    }\n-\n-    #[bench]\n-    fn zero_1kb_mut_iter(b: &mut Bencher) {\n-        b.iter(|| {\n-            let mut v = Vec::<u8>::with_capacity(1024);\n-            unsafe {\n-                v.set_len(1024);\n-            }\n-            for x in &mut v {\n-                *x = 0;\n-            }\n-            v\n-        });\n-    }\n-\n-    #[bench]\n-    fn random_inserts(b: &mut Bencher) {\n-        let mut rng = thread_rng();\n-        b.iter(|| {\n-            let mut v = vec![(0, 0); 30];\n-            for _ in 0..100 {\n-                let l = v.len();\n-                v.insert(rng.gen::<usize>() % (l + 1), (1, 1));\n-            }\n-        })\n-    }\n-    #[bench]\n-    fn random_removes(b: &mut Bencher) {\n-        let mut rng = thread_rng();\n-        b.iter(|| {\n-            let mut v = vec![(0, 0); 130];\n-            for _ in 0..100 {\n-                let l = v.len();\n-                v.remove(rng.gen::<usize>() % l);\n-            }\n-        })\n-    }\n-\n-    fn gen_ascending(len: usize) -> Vec<u64> {\n-        (0..len as u64).collect()\n-    }\n-\n-    fn gen_descending(len: usize) -> Vec<u64> {\n-        (0..len as u64).rev().collect()\n-    }\n-\n-    fn gen_random(len: usize) -> Vec<u64> {\n-        let mut rng = thread_rng();\n-        rng.gen_iter::<u64>().take(len).collect()\n-    }\n-\n-    fn gen_mostly_ascending(len: usize) -> Vec<u64> {\n-        let mut rng = thread_rng();\n-        let mut v = gen_ascending(len);\n-        for _ in (0usize..).take_while(|x| x * x <= len) {\n-            let x = rng.gen::<usize>() % len;\n-            let y = rng.gen::<usize>() % len;\n-            v.swap(x, y);\n-        }\n-        v\n-    }\n-\n-    fn gen_mostly_descending(len: usize) -> Vec<u64> {\n-        let mut rng = thread_rng();\n-        let mut v = gen_descending(len);\n-        for _ in (0usize..).take_while(|x| x * x <= len) {\n-            let x = rng.gen::<usize>() % len;\n-            let y = rng.gen::<usize>() % len;\n-            v.swap(x, y);\n-        }\n-        v\n-    }\n-\n-    fn gen_big_random(len: usize) -> Vec<[u64; 16]> {\n-        let mut rng = thread_rng();\n-        rng.gen_iter().map(|x| [x; 16]).take(len).collect()\n-    }\n-\n-    fn gen_big_ascending(len: usize) -> Vec<[u64; 16]> {\n-        (0..len as u64).map(|x| [x; 16]).take(len).collect()\n-    }\n-\n-    fn gen_big_descending(len: usize) -> Vec<[u64; 16]> {\n-        (0..len as u64).rev().map(|x| [x; 16]).take(len).collect()\n-    }\n-\n-    macro_rules! sort_bench {\n-        ($name:ident, $gen:expr, $len:expr) => {\n-            #[bench]\n-            fn $name(b: &mut Bencher) {\n-                b.iter(|| $gen($len).sort());\n-                b.bytes = $len * mem::size_of_val(&$gen(1)[0]) as u64;\n-            }\n-        }\n-    }\n-\n-    sort_bench!(sort_small_random, gen_random, 10);\n-    sort_bench!(sort_small_ascending, gen_ascending, 10);\n-    sort_bench!(sort_small_descending, gen_descending, 10);\n-\n-    sort_bench!(sort_small_big_random, gen_big_random, 10);\n-    sort_bench!(sort_small_big_ascending, gen_big_ascending, 10);\n-    sort_bench!(sort_small_big_descending, gen_big_descending, 10);\n-\n-    sort_bench!(sort_medium_random, gen_random, 100);\n-    sort_bench!(sort_medium_ascending, gen_ascending, 100);\n-    sort_bench!(sort_medium_descending, gen_descending, 100);\n-\n-    sort_bench!(sort_large_random, gen_random, 10000);\n-    sort_bench!(sort_large_ascending, gen_ascending, 10000);\n-    sort_bench!(sort_large_descending, gen_descending, 10000);\n-    sort_bench!(sort_large_mostly_ascending, gen_mostly_ascending, 10000);\n-    sort_bench!(sort_large_mostly_descending, gen_mostly_descending, 10000);\n-\n-    sort_bench!(sort_large_big_random, gen_big_random, 10000);\n-    sort_bench!(sort_large_big_ascending, gen_big_ascending, 10000);\n-    sort_bench!(sort_large_big_descending, gen_big_descending, 10000);\n-\n-    #[bench]\n-    fn sort_large_random_expensive(b: &mut Bencher) {\n-        let len = 10000;\n-        b.iter(|| {\n-            let mut v = gen_random(len);\n-            let mut count = 0;\n-            v.sort_by(|a: &u64, b: &u64| {\n-                count += 1;\n-                if count % 1_000_000_000 == 0 {\n-                    panic!(\"should not happen\");\n-                }\n-                (*a as f64).cos().partial_cmp(&(*b as f64).cos()).unwrap()\n-            });\n-            black_box(count);\n-        });\n-        b.bytes = len as u64 * mem::size_of::<u64>() as u64;\n-    }\n-}"}, {"sha": "6221888f5e55e7777ed4fdbe43ea6f0493592c30", "filename": "src/libcollectionstest/str.rs", "status": "modified", "additions": 0, "deletions": 291, "changes": 291, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollectionstest%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollectionstest%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstr.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1564,294 +1564,3 @@ fn different_str_pattern_forwarding_lifetimes() {\n \n     foo::<&str>(\"x\");\n }\n-\n-mod bench {\n-    use test::{Bencher, black_box};\n-\n-    #[bench]\n-    fn char_iterator(b: &mut Bencher) {\n-        let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n-\n-        b.iter(|| s.chars().count());\n-    }\n-\n-    #[bench]\n-    fn char_iterator_for(b: &mut Bencher) {\n-        let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n-\n-        b.iter(|| {\n-            for ch in s.chars() { black_box(ch); }\n-        });\n-    }\n-\n-    #[bench]\n-    fn char_iterator_ascii(b: &mut Bencher) {\n-        let s = \"Mary had a little lamb, Little lamb\n-        Mary had a little lamb, Little lamb\n-        Mary had a little lamb, Little lamb\n-        Mary had a little lamb, Little lamb\n-        Mary had a little lamb, Little lamb\n-        Mary had a little lamb, Little lamb\";\n-\n-        b.iter(|| s.chars().count());\n-    }\n-\n-    #[bench]\n-    fn char_iterator_rev(b: &mut Bencher) {\n-        let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n-\n-        b.iter(|| s.chars().rev().count());\n-    }\n-\n-    #[bench]\n-    fn char_iterator_rev_for(b: &mut Bencher) {\n-        let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n-\n-        b.iter(|| {\n-            for ch in s.chars().rev() { black_box(ch); }\n-        });\n-    }\n-\n-    #[bench]\n-    fn char_indicesator(b: &mut Bencher) {\n-        let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n-        let len = s.chars().count();\n-\n-        b.iter(|| assert_eq!(s.char_indices().count(), len));\n-    }\n-\n-    #[bench]\n-    fn char_indicesator_rev(b: &mut Bencher) {\n-        let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n-        let len = s.chars().count();\n-\n-        b.iter(|| assert_eq!(s.char_indices().rev().count(), len));\n-    }\n-\n-    #[bench]\n-    fn split_unicode_ascii(b: &mut Bencher) {\n-        let s = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-\n-        b.iter(|| assert_eq!(s.split('V').count(), 3));\n-    }\n-\n-    #[bench]\n-    fn split_ascii(b: &mut Bencher) {\n-        let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n-        let len = s.split(' ').count();\n-\n-        b.iter(|| assert_eq!(s.split(' ').count(), len));\n-    }\n-\n-    #[bench]\n-    fn split_extern_fn(b: &mut Bencher) {\n-        let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n-        let len = s.split(' ').count();\n-        fn pred(c: char) -> bool { c == ' ' }\n-\n-        b.iter(|| assert_eq!(s.split(pred).count(), len));\n-    }\n-\n-    #[bench]\n-    fn split_closure(b: &mut Bencher) {\n-        let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n-        let len = s.split(' ').count();\n-\n-        b.iter(|| assert_eq!(s.split(|c: char| c == ' ').count(), len));\n-    }\n-\n-    #[bench]\n-    fn split_slice(b: &mut Bencher) {\n-        let s = \"Mary had a little lamb, Little lamb, little-lamb.\";\n-        let len = s.split(' ').count();\n-\n-        let c: &[char] = &[' '];\n-        b.iter(|| assert_eq!(s.split(c).count(), len));\n-    }\n-\n-    #[bench]\n-    fn bench_join(b: &mut Bencher) {\n-        let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n-        let sep = \"\u2192\";\n-        let v = vec![s, s, s, s, s, s, s, s, s, s];\n-        b.iter(|| {\n-            assert_eq!(v.join(sep).len(), s.len() * 10 + sep.len() * 9);\n-        })\n-    }\n-\n-    #[bench]\n-    fn bench_contains_short_short(b: &mut Bencher) {\n-        let haystack = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\";\n-        let needle = \"sit\";\n-\n-        b.iter(|| {\n-            assert!(haystack.contains(needle));\n-        })\n-    }\n-\n-    #[bench]\n-    fn bench_contains_short_long(b: &mut Bencher) {\n-        let haystack = \"\\\n-Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse quis lorem sit amet dolor \\\n-ultricies condimentum. Praesent iaculis purus elit, ac malesuada quam malesuada in. Duis sed orci \\\n-eros. Suspendisse sit amet magna mollis, mollis nunc luctus, imperdiet mi. Integer fringilla non \\\n-sem ut lacinia. Fusce varius tortor a risus porttitor hendrerit. Morbi mauris dui, ultricies nec \\\n-tempus vel, gravida nec quam.\n-\n-In est dui, tincidunt sed tempus interdum, adipiscing laoreet ante. Etiam tempor, tellus quis \\\n-sagittis interdum, nulla purus mattis sem, quis auctor erat odio ac tellus. In nec nunc sit amet \\\n-diam volutpat molestie at sed ipsum. Vestibulum laoreet consequat vulputate. Integer accumsan \\\n-lorem ac dignissim placerat. Suspendisse convallis faucibus lorem. Aliquam erat volutpat. In vel \\\n-eleifend felis. Sed suscipit nulla lorem, sed mollis est sollicitudin et. Nam fermentum egestas \\\n-interdum. Curabitur ut nisi justo.\n-\n-Sed sollicitudin ipsum tellus, ut condimentum leo eleifend nec. Cras ut velit ante. Phasellus nec \\\n-mollis odio. Mauris molestie erat in arcu mattis, at aliquet dolor vehicula. Quisque malesuada \\\n-lectus sit amet nisi pretium, a condimentum ipsum porta. Morbi at dapibus diam. Praesent egestas \\\n-est sed risus elementum, eu rutrum metus ultrices. Etiam fermentum consectetur magna, id rutrum \\\n-felis accumsan a. Aliquam ut pellentesque libero. Sed mi nulla, lobortis eu tortor id, suscipit \\\n-ultricies neque. Morbi iaculis sit amet risus at iaculis. Praesent eget ligula quis turpis \\\n-feugiat suscipit vel non arcu. Interdum et malesuada fames ac ante ipsum primis in faucibus. \\\n-Aliquam sit amet placerat lorem.\n-\n-Cras a lacus vel ante posuere elementum. Nunc est leo, bibendum ut facilisis vel, bibendum at \\\n-mauris. Nullam adipiscing diam vel odio ornare, luctus adipiscing mi luctus. Nulla facilisi. \\\n-Mauris adipiscing bibendum neque, quis adipiscing lectus tempus et. Sed feugiat erat et nisl \\\n-lobortis pharetra. Donec vitae erat enim. Nullam sit amet felis et quam lacinia tincidunt. Aliquam \\\n-suscipit dapibus urna. Sed volutpat urna in magna pulvinar volutpat. Phasellus nec tellus ac diam \\\n-cursus accumsan.\n-\n-Nam lectus enim, dapibus non nisi tempor, consectetur convallis massa. Maecenas eleifend dictum \\\n-feugiat. Etiam quis mauris vel risus luctus mattis a a nunc. Nullam orci quam, imperdiet id \\\n-vehicula in, porttitor ut nibh. Duis sagittis adipiscing nisl vitae congue. Donec mollis risus eu \\\n-leo suscipit, varius porttitor nulla porta. Pellentesque ut sem nec nisi euismod vehicula. Nulla \\\n-malesuada sollicitudin quam eu fermentum.\";\n-        let needle = \"english\";\n-\n-        b.iter(|| {\n-            assert!(!haystack.contains(needle));\n-        })\n-    }\n-\n-    #[bench]\n-    fn bench_contains_bad_naive(b: &mut Bencher) {\n-        let haystack = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n-        let needle = \"aaaaaaaab\";\n-\n-        b.iter(|| {\n-            assert!(!haystack.contains(needle));\n-        })\n-    }\n-\n-    #[bench]\n-    fn bench_contains_equal(b: &mut Bencher) {\n-        let haystack = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\";\n-        let needle = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\";\n-\n-        b.iter(|| {\n-            assert!(haystack.contains(needle));\n-        })\n-    }\n-\n-    macro_rules! make_test_inner {\n-        ($s:ident, $code:expr, $name:ident, $str:expr) => {\n-            #[bench]\n-            fn $name(bencher: &mut Bencher) {\n-                let mut $s = $str;\n-                black_box(&mut $s);\n-                bencher.iter(|| $code);\n-            }\n-        }\n-    }\n-\n-    macro_rules! make_test {\n-        ($name:ident, $s:ident, $code:expr) => {\n-            mod $name {\n-                use test::Bencher;\n-                use test::black_box;\n-\n-                // Short strings: 65 bytes each\n-                make_test_inner!($s, $code, short_ascii,\n-                    \"Mary had a little lamb, Little lamb Mary had a littl lamb, lamb!\");\n-                make_test_inner!($s, $code, short_mixed,\n-                    \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lam!\");\n-                make_test_inner!($s, $code, short_pile_of_poo,\n-                    \"\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9\ud83d\udca9!\");\n-                make_test_inner!($s, $code, long_lorem_ipsum,\"\\\n-Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse quis lorem sit amet dolor \\\n-ultricies condimentum. Praesent iaculis purus elit, ac malesuada quam malesuada in. Duis sed orci \\\n-eros. Suspendisse sit amet magna mollis, mollis nunc luctus, imperdiet mi. Integer fringilla non \\\n-sem ut lacinia. Fusce varius tortor a risus porttitor hendrerit. Morbi mauris dui, ultricies nec \\\n-tempus vel, gravida nec quam.\n-\n-In est dui, tincidunt sed tempus interdum, adipiscing laoreet ante. Etiam tempor, tellus quis \\\n-sagittis interdum, nulla purus mattis sem, quis auctor erat odio ac tellus. In nec nunc sit amet \\\n-diam volutpat molestie at sed ipsum. Vestibulum laoreet consequat vulputate. Integer accumsan \\\n-lorem ac dignissim placerat. Suspendisse convallis faucibus lorem. Aliquam erat volutpat. In vel \\\n-eleifend felis. Sed suscipit nulla lorem, sed mollis est sollicitudin et. Nam fermentum egestas \\\n-interdum. Curabitur ut nisi justo.\n-\n-Sed sollicitudin ipsum tellus, ut condimentum leo eleifend nec. Cras ut velit ante. Phasellus nec \\\n-mollis odio. Mauris molestie erat in arcu mattis, at aliquet dolor vehicula. Quisque malesuada \\\n-lectus sit amet nisi pretium, a condimentum ipsum porta. Morbi at dapibus diam. Praesent egestas \\\n-est sed risus elementum, eu rutrum metus ultrices. Etiam fermentum consectetur magna, id rutrum \\\n-felis accumsan a. Aliquam ut pellentesque libero. Sed mi nulla, lobortis eu tortor id, suscipit \\\n-ultricies neque. Morbi iaculis sit amet risus at iaculis. Praesent eget ligula quis turpis \\\n-feugiat suscipit vel non arcu. Interdum et malesuada fames ac ante ipsum primis in faucibus. \\\n-Aliquam sit amet placerat lorem.\n-\n-Cras a lacus vel ante posuere elementum. Nunc est leo, bibendum ut facilisis vel, bibendum at \\\n-mauris. Nullam adipiscing diam vel odio ornare, luctus adipiscing mi luctus. Nulla facilisi. \\\n-Mauris adipiscing bibendum neque, quis adipiscing lectus tempus et. Sed feugiat erat et nisl \\\n-lobortis pharetra. Donec vitae erat enim. Nullam sit amet felis et quam lacinia tincidunt. Aliquam \\\n-suscipit dapibus urna. Sed volutpat urna in magna pulvinar volutpat. Phasellus nec tellus ac diam \\\n-cursus accumsan.\n-\n-Nam lectus enim, dapibus non nisi tempor, consectetur convallis massa. Maecenas eleifend dictum \\\n-feugiat. Etiam quis mauris vel risus luctus mattis a a nunc. Nullam orci quam, imperdiet id \\\n-vehicula in, porttitor ut nibh. Duis sagittis adipiscing nisl vitae congue. Donec mollis risus eu \\\n-leo suscipit, varius porttitor nulla porta. Pellentesque ut sem nec nisi euismod vehicula. Nulla \\\n-malesuada sollicitudin quam eu fermentum!\");\n-            }\n-        }\n-    }\n-\n-    make_test!(chars_count, s, s.chars().count());\n-\n-    make_test!(contains_bang_str, s, s.contains(\"!\"));\n-    make_test!(contains_bang_char, s, s.contains('!'));\n-\n-    make_test!(match_indices_a_str, s, s.match_indices(\"a\").count());\n-\n-    make_test!(split_a_str, s, s.split(\"a\").count());\n-\n-    make_test!(trim_ascii_char, s, {\n-        use std::ascii::AsciiExt;\n-        s.trim_matches(|c: char| c.is_ascii())\n-    });\n-    make_test!(trim_left_ascii_char, s, {\n-        use std::ascii::AsciiExt;\n-        s.trim_left_matches(|c: char| c.is_ascii())\n-    });\n-    make_test!(trim_right_ascii_char, s, {\n-        use std::ascii::AsciiExt;\n-        s.trim_right_matches(|c: char| c.is_ascii())\n-    });\n-\n-    make_test!(find_underscore_char, s, s.find('_'));\n-    make_test!(rfind_underscore_char, s, s.rfind('_'));\n-    make_test!(find_underscore_str, s, s.find(\"_\"));\n-\n-    make_test!(find_zzz_char, s, s.find('\\u{1F4A4}'));\n-    make_test!(rfind_zzz_char, s, s.rfind('\\u{1F4A4}'));\n-    make_test!(find_zzz_str, s, s.find(\"\\u{1F4A4}\"));\n-\n-    make_test!(split_space_char, s, s.split(' ').count());\n-    make_test!(split_terminator_space_char, s, s.split_terminator(' ').count());\n-\n-    make_test!(splitn_space_char, s, s.splitn(10, ' ').count());\n-    make_test!(rsplitn_space_char, s, s.rsplitn(10, ' ').count());\n-\n-    make_test!(split_space_str, s, s.split(\" \").count());\n-    make_test!(split_ad_str, s, s.split(\"ad\").count());\n-}"}, {"sha": "f77dd510303c74b3564b2acbdda66080aef50a9e", "filename": "src/libcollectionstest/string.rs", "status": "modified", "additions": 0, "deletions": 125, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollectionstest%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollectionstest%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstring.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -9,9 +9,6 @@\n // except according to those terms.\n \n use std::borrow::Cow;\n-use std::iter::repeat;\n-\n-use test::Bencher;\n \n pub trait IntoCow<'a, B: ?Sized> where B: ToOwned {\n     fn into_cow(self) -> Cow<'a, B>;\n@@ -436,125 +433,3 @@ fn test_into_boxed_str() {\n     let ys = xs.into_boxed_str();\n     assert_eq!(&*ys, \"hello my name is bob\");\n }\n-\n-#[bench]\n-fn bench_with_capacity(b: &mut Bencher) {\n-    b.iter(|| String::with_capacity(100));\n-}\n-\n-#[bench]\n-fn bench_push_str(b: &mut Bencher) {\n-    let s = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam; Mary had a little lamb, Little lamb\";\n-    b.iter(|| {\n-        let mut r = String::new();\n-        r.push_str(s);\n-    });\n-}\n-\n-const REPETITIONS: u64 = 10_000;\n-\n-#[bench]\n-fn bench_push_str_one_byte(b: &mut Bencher) {\n-    b.bytes = REPETITIONS;\n-    b.iter(|| {\n-        let mut r = String::new();\n-        for _ in 0..REPETITIONS {\n-            r.push_str(\"a\")\n-        }\n-    });\n-}\n-\n-#[bench]\n-fn bench_push_char_one_byte(b: &mut Bencher) {\n-    b.bytes = REPETITIONS;\n-    b.iter(|| {\n-        let mut r = String::new();\n-        for _ in 0..REPETITIONS {\n-            r.push('a')\n-        }\n-    });\n-}\n-\n-#[bench]\n-fn bench_push_char_two_bytes(b: &mut Bencher) {\n-    b.bytes = REPETITIONS * 2;\n-    b.iter(|| {\n-        let mut r = String::new();\n-        for _ in 0..REPETITIONS {\n-            r.push('\u00e2')\n-        }\n-    });\n-}\n-\n-#[bench]\n-fn from_utf8_lossy_100_ascii(b: &mut Bencher) {\n-    let s = b\"Hello there, the quick brown fox jumped over the lazy dog! \\\n-              Lorem ipsum dolor sit amet, consectetur. \";\n-\n-    assert_eq!(100, s.len());\n-    b.iter(|| {\n-        let _ = String::from_utf8_lossy(s);\n-    });\n-}\n-\n-#[bench]\n-fn from_utf8_lossy_100_multibyte(b: &mut Bencher) {\n-    let s = \"\ud800\udf00\ud800\udf16\ud800\udf0b\ud800\udf04\ud800\udf11\ud800\udf09\u0e1b\u0e23\u062f\u0648\u0644\u0629 \u0627\u0644\u0643\u0648\u064a\u062a\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\ud800\udf45\ud800\udf3f\ud800\udf3b\ud800\udf46\ud800\udf39\ud800\udf3b\ud800\udf30\".as_bytes();\n-    assert_eq!(100, s.len());\n-    b.iter(|| {\n-        let _ = String::from_utf8_lossy(s);\n-    });\n-}\n-\n-#[bench]\n-fn from_utf8_lossy_invalid(b: &mut Bencher) {\n-    let s = b\"Hello\\xC0\\x80 There\\xE6\\x83 Goodbye\";\n-    b.iter(|| {\n-        let _ = String::from_utf8_lossy(s);\n-    });\n-}\n-\n-#[bench]\n-fn from_utf8_lossy_100_invalid(b: &mut Bencher) {\n-    let s = repeat(0xf5).take(100).collect::<Vec<_>>();\n-    b.iter(|| {\n-        let _ = String::from_utf8_lossy(&s);\n-    });\n-}\n-\n-#[bench]\n-fn bench_exact_size_shrink_to_fit(b: &mut Bencher) {\n-    let s = \"Hello there, the quick brown fox jumped over the lazy dog! \\\n-             Lorem ipsum dolor sit amet, consectetur. \";\n-    // ensure our operation produces an exact-size string before we benchmark it\n-    let mut r = String::with_capacity(s.len());\n-    r.push_str(s);\n-    assert_eq!(r.len(), r.capacity());\n-    b.iter(|| {\n-        let mut r = String::with_capacity(s.len());\n-        r.push_str(s);\n-        r.shrink_to_fit();\n-        r\n-    });\n-}\n-\n-#[bench]\n-fn bench_from_str(b: &mut Bencher) {\n-    let s = \"Hello there, the quick brown fox jumped over the lazy dog! \\\n-             Lorem ipsum dolor sit amet, consectetur. \";\n-    b.iter(|| String::from(s))\n-}\n-\n-#[bench]\n-fn bench_from(b: &mut Bencher) {\n-    let s = \"Hello there, the quick brown fox jumped over the lazy dog! \\\n-             Lorem ipsum dolor sit amet, consectetur. \";\n-    b.iter(|| String::from(s))\n-}\n-\n-#[bench]\n-fn bench_to_string(b: &mut Bencher) {\n-    let s = \"Hello there, the quick brown fox jumped over the lazy dog! \\\n-             Lorem ipsum dolor sit amet, consectetur. \";\n-    b.iter(|| s.to_string())\n-}"}, {"sha": "edeedf1d40baf3d37b38d6c36928945c7828558a", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 0, "deletions": 483, "changes": 483, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -10,13 +10,10 @@\n \n use std::ascii::AsciiExt;\n use std::borrow::Cow;\n-use std::iter::{FromIterator, repeat};\n use std::mem::size_of;\n use std::panic;\n use std::vec::{Drain, IntoIter};\n \n-use test::Bencher;\n-\n struct DropCounter<'a> {\n     count: &'a mut u32,\n }\n@@ -633,483 +630,3 @@ fn test_placement_panic() {\n     let _ = panic::catch_unwind(panic::AssertUnwindSafe(|| { vec.place_back() <- mkpanic(); }));\n     assert_eq!(vec.len(), 3);\n }\n-\n-#[bench]\n-fn bench_new(b: &mut Bencher) {\n-    b.iter(|| {\n-        let v: Vec<u32> = Vec::new();\n-        assert_eq!(v.len(), 0);\n-        assert_eq!(v.capacity(), 0);\n-    })\n-}\n-\n-fn do_bench_with_capacity(b: &mut Bencher, src_len: usize) {\n-    b.bytes = src_len as u64;\n-\n-    b.iter(|| {\n-        let v: Vec<u32> = Vec::with_capacity(src_len);\n-        assert_eq!(v.len(), 0);\n-        assert_eq!(v.capacity(), src_len);\n-    })\n-}\n-\n-#[bench]\n-fn bench_with_capacity_0000(b: &mut Bencher) {\n-    do_bench_with_capacity(b, 0)\n-}\n-\n-#[bench]\n-fn bench_with_capacity_0010(b: &mut Bencher) {\n-    do_bench_with_capacity(b, 10)\n-}\n-\n-#[bench]\n-fn bench_with_capacity_0100(b: &mut Bencher) {\n-    do_bench_with_capacity(b, 100)\n-}\n-\n-#[bench]\n-fn bench_with_capacity_1000(b: &mut Bencher) {\n-    do_bench_with_capacity(b, 1000)\n-}\n-\n-fn do_bench_from_fn(b: &mut Bencher, src_len: usize) {\n-    b.bytes = src_len as u64;\n-\n-    b.iter(|| {\n-        let dst = (0..src_len).collect::<Vec<_>>();\n-        assert_eq!(dst.len(), src_len);\n-        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n-    })\n-}\n-\n-#[bench]\n-fn bench_from_fn_0000(b: &mut Bencher) {\n-    do_bench_from_fn(b, 0)\n-}\n-\n-#[bench]\n-fn bench_from_fn_0010(b: &mut Bencher) {\n-    do_bench_from_fn(b, 10)\n-}\n-\n-#[bench]\n-fn bench_from_fn_0100(b: &mut Bencher) {\n-    do_bench_from_fn(b, 100)\n-}\n-\n-#[bench]\n-fn bench_from_fn_1000(b: &mut Bencher) {\n-    do_bench_from_fn(b, 1000)\n-}\n-\n-fn do_bench_from_elem(b: &mut Bencher, src_len: usize) {\n-    b.bytes = src_len as u64;\n-\n-    b.iter(|| {\n-        let dst: Vec<usize> = repeat(5).take(src_len).collect();\n-        assert_eq!(dst.len(), src_len);\n-        assert!(dst.iter().all(|x| *x == 5));\n-    })\n-}\n-\n-#[bench]\n-fn bench_from_elem_0000(b: &mut Bencher) {\n-    do_bench_from_elem(b, 0)\n-}\n-\n-#[bench]\n-fn bench_from_elem_0010(b: &mut Bencher) {\n-    do_bench_from_elem(b, 10)\n-}\n-\n-#[bench]\n-fn bench_from_elem_0100(b: &mut Bencher) {\n-    do_bench_from_elem(b, 100)\n-}\n-\n-#[bench]\n-fn bench_from_elem_1000(b: &mut Bencher) {\n-    do_bench_from_elem(b, 1000)\n-}\n-\n-fn do_bench_from_slice(b: &mut Bencher, src_len: usize) {\n-    let src: Vec<_> = FromIterator::from_iter(0..src_len);\n-\n-    b.bytes = src_len as u64;\n-\n-    b.iter(|| {\n-        let dst = src.clone()[..].to_vec();\n-        assert_eq!(dst.len(), src_len);\n-        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n-    });\n-}\n-\n-#[bench]\n-fn bench_from_slice_0000(b: &mut Bencher) {\n-    do_bench_from_slice(b, 0)\n-}\n-\n-#[bench]\n-fn bench_from_slice_0010(b: &mut Bencher) {\n-    do_bench_from_slice(b, 10)\n-}\n-\n-#[bench]\n-fn bench_from_slice_0100(b: &mut Bencher) {\n-    do_bench_from_slice(b, 100)\n-}\n-\n-#[bench]\n-fn bench_from_slice_1000(b: &mut Bencher) {\n-    do_bench_from_slice(b, 1000)\n-}\n-\n-fn do_bench_from_iter(b: &mut Bencher, src_len: usize) {\n-    let src: Vec<_> = FromIterator::from_iter(0..src_len);\n-\n-    b.bytes = src_len as u64;\n-\n-    b.iter(|| {\n-        let dst: Vec<_> = FromIterator::from_iter(src.clone());\n-        assert_eq!(dst.len(), src_len);\n-        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n-    });\n-}\n-\n-#[bench]\n-fn bench_from_iter_0000(b: &mut Bencher) {\n-    do_bench_from_iter(b, 0)\n-}\n-\n-#[bench]\n-fn bench_from_iter_0010(b: &mut Bencher) {\n-    do_bench_from_iter(b, 10)\n-}\n-\n-#[bench]\n-fn bench_from_iter_0100(b: &mut Bencher) {\n-    do_bench_from_iter(b, 100)\n-}\n-\n-#[bench]\n-fn bench_from_iter_1000(b: &mut Bencher) {\n-    do_bench_from_iter(b, 1000)\n-}\n-\n-fn do_bench_extend(b: &mut Bencher, dst_len: usize, src_len: usize) {\n-    let dst: Vec<_> = FromIterator::from_iter(0..dst_len);\n-    let src: Vec<_> = FromIterator::from_iter(dst_len..dst_len + src_len);\n-\n-    b.bytes = src_len as u64;\n-\n-    b.iter(|| {\n-        let mut dst = dst.clone();\n-        dst.extend(src.clone());\n-        assert_eq!(dst.len(), dst_len + src_len);\n-        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n-    });\n-}\n-\n-#[bench]\n-fn bench_extend_0000_0000(b: &mut Bencher) {\n-    do_bench_extend(b, 0, 0)\n-}\n-\n-#[bench]\n-fn bench_extend_0000_0010(b: &mut Bencher) {\n-    do_bench_extend(b, 0, 10)\n-}\n-\n-#[bench]\n-fn bench_extend_0000_0100(b: &mut Bencher) {\n-    do_bench_extend(b, 0, 100)\n-}\n-\n-#[bench]\n-fn bench_extend_0000_1000(b: &mut Bencher) {\n-    do_bench_extend(b, 0, 1000)\n-}\n-\n-#[bench]\n-fn bench_extend_0010_0010(b: &mut Bencher) {\n-    do_bench_extend(b, 10, 10)\n-}\n-\n-#[bench]\n-fn bench_extend_0100_0100(b: &mut Bencher) {\n-    do_bench_extend(b, 100, 100)\n-}\n-\n-#[bench]\n-fn bench_extend_1000_1000(b: &mut Bencher) {\n-    do_bench_extend(b, 1000, 1000)\n-}\n-\n-fn do_bench_push_all(b: &mut Bencher, dst_len: usize, src_len: usize) {\n-    let dst: Vec<_> = FromIterator::from_iter(0..dst_len);\n-    let src: Vec<_> = FromIterator::from_iter(dst_len..dst_len + src_len);\n-\n-    b.bytes = src_len as u64;\n-\n-    b.iter(|| {\n-        let mut dst = dst.clone();\n-        dst.extend_from_slice(&src);\n-        assert_eq!(dst.len(), dst_len + src_len);\n-        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n-    });\n-}\n-\n-#[bench]\n-fn bench_push_all_0000_0000(b: &mut Bencher) {\n-    do_bench_push_all(b, 0, 0)\n-}\n-\n-#[bench]\n-fn bench_push_all_0000_0010(b: &mut Bencher) {\n-    do_bench_push_all(b, 0, 10)\n-}\n-\n-#[bench]\n-fn bench_push_all_0000_0100(b: &mut Bencher) {\n-    do_bench_push_all(b, 0, 100)\n-}\n-\n-#[bench]\n-fn bench_push_all_0000_1000(b: &mut Bencher) {\n-    do_bench_push_all(b, 0, 1000)\n-}\n-\n-#[bench]\n-fn bench_push_all_0010_0010(b: &mut Bencher) {\n-    do_bench_push_all(b, 10, 10)\n-}\n-\n-#[bench]\n-fn bench_push_all_0100_0100(b: &mut Bencher) {\n-    do_bench_push_all(b, 100, 100)\n-}\n-\n-#[bench]\n-fn bench_push_all_1000_1000(b: &mut Bencher) {\n-    do_bench_push_all(b, 1000, 1000)\n-}\n-\n-fn do_bench_push_all_move(b: &mut Bencher, dst_len: usize, src_len: usize) {\n-    let dst: Vec<_> = FromIterator::from_iter(0..dst_len);\n-    let src: Vec<_> = FromIterator::from_iter(dst_len..dst_len + src_len);\n-\n-    b.bytes = src_len as u64;\n-\n-    b.iter(|| {\n-        let mut dst = dst.clone();\n-        dst.extend(src.clone());\n-        assert_eq!(dst.len(), dst_len + src_len);\n-        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n-    });\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0000_0000(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 0, 0)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0000_0010(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 0, 10)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0000_0100(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 0, 100)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0000_1000(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 0, 1000)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0010_0010(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 10, 10)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_0100_0100(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 100, 100)\n-}\n-\n-#[bench]\n-fn bench_push_all_move_1000_1000(b: &mut Bencher) {\n-    do_bench_push_all_move(b, 1000, 1000)\n-}\n-\n-fn do_bench_clone(b: &mut Bencher, src_len: usize) {\n-    let src: Vec<usize> = FromIterator::from_iter(0..src_len);\n-\n-    b.bytes = src_len as u64;\n-\n-    b.iter(|| {\n-        let dst = src.clone();\n-        assert_eq!(dst.len(), src_len);\n-        assert!(dst.iter().enumerate().all(|(i, x)| i == *x));\n-    });\n-}\n-\n-#[bench]\n-fn bench_clone_0000(b: &mut Bencher) {\n-    do_bench_clone(b, 0)\n-}\n-\n-#[bench]\n-fn bench_clone_0010(b: &mut Bencher) {\n-    do_bench_clone(b, 10)\n-}\n-\n-#[bench]\n-fn bench_clone_0100(b: &mut Bencher) {\n-    do_bench_clone(b, 100)\n-}\n-\n-#[bench]\n-fn bench_clone_1000(b: &mut Bencher) {\n-    do_bench_clone(b, 1000)\n-}\n-\n-fn do_bench_clone_from(b: &mut Bencher, times: usize, dst_len: usize, src_len: usize) {\n-    let dst: Vec<_> = FromIterator::from_iter(0..src_len);\n-    let src: Vec<_> = FromIterator::from_iter(dst_len..dst_len + src_len);\n-\n-    b.bytes = (times * src_len) as u64;\n-\n-    b.iter(|| {\n-        let mut dst = dst.clone();\n-\n-        for _ in 0..times {\n-            dst.clone_from(&src);\n-\n-            assert_eq!(dst.len(), src_len);\n-            assert!(dst.iter().enumerate().all(|(i, x)| dst_len + i == *x));\n-        }\n-    });\n-}\n-\n-#[bench]\n-fn bench_clone_from_01_0000_0000(b: &mut Bencher) {\n-    do_bench_clone_from(b, 1, 0, 0)\n-}\n-\n-#[bench]\n-fn bench_clone_from_01_0000_0010(b: &mut Bencher) {\n-    do_bench_clone_from(b, 1, 0, 10)\n-}\n-\n-#[bench]\n-fn bench_clone_from_01_0000_0100(b: &mut Bencher) {\n-    do_bench_clone_from(b, 1, 0, 100)\n-}\n-\n-#[bench]\n-fn bench_clone_from_01_0000_1000(b: &mut Bencher) {\n-    do_bench_clone_from(b, 1, 0, 1000)\n-}\n-\n-#[bench]\n-fn bench_clone_from_01_0010_0010(b: &mut Bencher) {\n-    do_bench_clone_from(b, 1, 10, 10)\n-}\n-\n-#[bench]\n-fn bench_clone_from_01_0100_0100(b: &mut Bencher) {\n-    do_bench_clone_from(b, 1, 100, 100)\n-}\n-\n-#[bench]\n-fn bench_clone_from_01_1000_1000(b: &mut Bencher) {\n-    do_bench_clone_from(b, 1, 1000, 1000)\n-}\n-\n-#[bench]\n-fn bench_clone_from_01_0010_0100(b: &mut Bencher) {\n-    do_bench_clone_from(b, 1, 10, 100)\n-}\n-\n-#[bench]\n-fn bench_clone_from_01_0100_1000(b: &mut Bencher) {\n-    do_bench_clone_from(b, 1, 100, 1000)\n-}\n-\n-#[bench]\n-fn bench_clone_from_01_0010_0000(b: &mut Bencher) {\n-    do_bench_clone_from(b, 1, 10, 0)\n-}\n-\n-#[bench]\n-fn bench_clone_from_01_0100_0010(b: &mut Bencher) {\n-    do_bench_clone_from(b, 1, 100, 10)\n-}\n-\n-#[bench]\n-fn bench_clone_from_01_1000_0100(b: &mut Bencher) {\n-    do_bench_clone_from(b, 1, 1000, 100)\n-}\n-\n-#[bench]\n-fn bench_clone_from_10_0000_0000(b: &mut Bencher) {\n-    do_bench_clone_from(b, 10, 0, 0)\n-}\n-\n-#[bench]\n-fn bench_clone_from_10_0000_0010(b: &mut Bencher) {\n-    do_bench_clone_from(b, 10, 0, 10)\n-}\n-\n-#[bench]\n-fn bench_clone_from_10_0000_0100(b: &mut Bencher) {\n-    do_bench_clone_from(b, 10, 0, 100)\n-}\n-\n-#[bench]\n-fn bench_clone_from_10_0000_1000(b: &mut Bencher) {\n-    do_bench_clone_from(b, 10, 0, 1000)\n-}\n-\n-#[bench]\n-fn bench_clone_from_10_0010_0010(b: &mut Bencher) {\n-    do_bench_clone_from(b, 10, 10, 10)\n-}\n-\n-#[bench]\n-fn bench_clone_from_10_0100_0100(b: &mut Bencher) {\n-    do_bench_clone_from(b, 10, 100, 100)\n-}\n-\n-#[bench]\n-fn bench_clone_from_10_1000_1000(b: &mut Bencher) {\n-    do_bench_clone_from(b, 10, 1000, 1000)\n-}\n-\n-#[bench]\n-fn bench_clone_from_10_0010_0100(b: &mut Bencher) {\n-    do_bench_clone_from(b, 10, 10, 100)\n-}\n-\n-#[bench]\n-fn bench_clone_from_10_0100_1000(b: &mut Bencher) {\n-    do_bench_clone_from(b, 10, 100, 1000)\n-}\n-\n-#[bench]\n-fn bench_clone_from_10_0010_0000(b: &mut Bencher) {\n-    do_bench_clone_from(b, 10, 10, 0)\n-}\n-\n-#[bench]\n-fn bench_clone_from_10_0100_0010(b: &mut Bencher) {\n-    do_bench_clone_from(b, 10, 100, 10)\n-}\n-\n-#[bench]\n-fn bench_clone_from_10_1000_0100(b: &mut Bencher) {\n-    do_bench_clone_from(b, 10, 1000, 100)\n-}"}, {"sha": "1541061a1984214bf70a4260b2ab35136b98d894", "filename": "src/libcollectionstest/vec_deque.rs", "status": "modified", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollectionstest%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcollectionstest%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec_deque.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -12,8 +12,6 @@ use std::collections::VecDeque;\n use std::fmt::Debug;\n use std::collections::vec_deque::Drain;\n \n-use test;\n-\n use self::Taggy::*;\n use self::Taggypar::*;\n \n@@ -124,51 +122,6 @@ fn test_index_out_of_bounds() {\n     deq[3];\n }\n \n-#[bench]\n-fn bench_new(b: &mut test::Bencher) {\n-    b.iter(|| {\n-        let ring: VecDeque<i32> = VecDeque::new();\n-        test::black_box(ring);\n-    })\n-}\n-\n-#[bench]\n-fn bench_grow_1025(b: &mut test::Bencher) {\n-    b.iter(|| {\n-        let mut deq = VecDeque::new();\n-        for i in 0..1025 {\n-            deq.push_front(i);\n-        }\n-        test::black_box(deq);\n-    })\n-}\n-\n-#[bench]\n-fn bench_iter_1000(b: &mut test::Bencher) {\n-    let ring: VecDeque<_> = (0..1000).collect();\n-\n-    b.iter(|| {\n-        let mut sum = 0;\n-        for &i in &ring {\n-            sum += i;\n-        }\n-        test::black_box(sum);\n-    })\n-}\n-\n-#[bench]\n-fn bench_mut_iter_1000(b: &mut test::Bencher) {\n-    let mut ring: VecDeque<_> = (0..1000).collect();\n-\n-    b.iter(|| {\n-        let mut sum = 0;\n-        for i in &mut ring {\n-            sum += *i;\n-        }\n-        test::black_box(sum);\n-    })\n-}\n-\n #[derive(Clone, PartialEq, Debug)]\n enum Taggy {\n     One(i32),"}, {"sha": "e847c7fa3a0ec9580c82431ebe0d86bd8a88e9c2", "filename": "src/libcore/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2FCargo.toml?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -14,5 +14,5 @@ name = \"coretest\"\n path = \"../libcoretest/lib.rs\"\n \n [[bench]]\n-name = \"corebench\"\n-path = \"../libcore/bench/lib.rs\"\n+name = \"corebenches\"\n+path = \"../libcore/benches/lib.rs\""}, {"sha": "67e02cf9509b6cd8ba71db2be4dd19cea9946ce0", "filename": "src/libcore/benches/any.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fany.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "previous_filename": "src/libcore/bench/any.rs"}, {"sha": "55d9e3e0913801bf2a4106eee84d44015dfe6cb4", "filename": "src/libcore/benches/hash/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fhash%2Fmod.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "previous_filename": "src/libcore/bench/hash/mod.rs"}, {"sha": "3379c85bbec7d5985df61fa213c3da90127faeb3", "filename": "src/libcore/benches/hash/sip.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fhash%2Fsip.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "previous_filename": "src/libcore/bench/hash/sip.rs"}, {"sha": "93d38a5bc83bbf1e392585821c90b82d5a72d3fb", "filename": "src/libcore/benches/iter.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fiter.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "previous_filename": "src/libcore/bench/iter.rs"}, {"sha": "d2db329da799981b3a6d3a372211f21893603b6a", "filename": "src/libcore/benches/lib.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Flib.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "previous_filename": "src/libcore/bench/lib.rs"}, {"sha": "8e541d92a7f170c366b97c57c1912d9bd19f783d", "filename": "src/libcore/benches/mem.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fmem.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "previous_filename": "src/libcore/bench/mem.rs"}, {"sha": "562866e11777cf0e4db920ff0e9b0d4e60ea5c05", "filename": "src/libcore/benches/num/dec2flt/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fdec2flt%2Fmod.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "previous_filename": "src/libcore/bench/num/dec2flt/mod.rs"}, {"sha": "1de2bf4921f589996130885f363b550cbf179695", "filename": "src/libcore/benches/num/flt2dec/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fmod.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "previous_filename": "src/libcore/bench/num/flt2dec/mod.rs"}, {"sha": "6824cf40ed2aec678ae771792ce01f9fb2a573da", "filename": "src/libcore/benches/num/flt2dec/strategy/dragon.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "previous_filename": "src/libcore/bench/num/flt2dec/strategy/dragon.rs"}, {"sha": "82e1a858fca9fc655a15967c43a88d7c6fd17711", "filename": "src/libcore/benches/num/flt2dec/strategy/grisu.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "previous_filename": "src/libcore/bench/num/flt2dec/strategy/grisu.rs"}, {"sha": "55f0bdb57ec820711fc8b8ddec0bc7981eaa6837", "filename": "src/libcore/benches/num/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fnum%2Fmod.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "previous_filename": "src/libcore/bench/num/mod.rs"}, {"sha": "7f36a4b0771aa611d9cb2f07544787da0e28be9c", "filename": "src/libcore/benches/ops.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fbenches%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fops.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "previous_filename": "src/libcore/bench/ops.rs"}, {"sha": "743e3c41170a34d0c99ef3575cd234811eb3deb2", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1318,24 +1318,6 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     u64 AtomicU64 ATOMIC_U64_INIT\n }\n-#[cfg(not(stage0))]\n-#[cfg(target_has_atomic = \"128\")]\n-atomic_int! {\n-    unstable(feature = \"i128\", issue = \"35118\"),\n-    unstable(feature = \"i128\", issue = \"35118\"),\n-    unstable(feature = \"i128\", issue = \"35118\"),\n-    unstable(feature = \"i128\", issue = \"35118\"),\n-    i128 AtomicI128 ATOMIC_I128_INIT\n-}\n-#[cfg(not(stage0))]\n-#[cfg(target_has_atomic = \"128\")]\n-atomic_int! {\n-    unstable(feature = \"i128\", issue = \"35118\"),\n-    unstable(feature = \"i128\", issue = \"35118\"),\n-    unstable(feature = \"i128\", issue = \"35118\"),\n-    unstable(feature = \"i128\", issue = \"35118\"),\n-    u128 AtomicU128 ATOMIC_U128_INIT\n-}\n #[cfg(target_has_atomic = \"ptr\")]\n atomic_int!{\n     stable(feature = \"rust1\", since = \"1.0.0\"),"}, {"sha": "12016980a2c656be8c5ace4d6ea27285865ca26a", "filename": "src/libflate/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibflate%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibflate%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Fbuild.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -11,7 +11,6 @@\n extern crate gcc;\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n     gcc::Config::new()\n         .file(\"../rt/miniz.c\")\n         .compile(\"libminiz.a\");"}, {"sha": "dedec7b1609fadaea92cdaf9e1d970f42dfe4dd9", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -74,10 +74,6 @@ impl Drop for Bytes {\n     }\n }\n \n-#[link(name = \"miniz\", kind = \"static\")]\n-#[cfg(not(cargobuild))]\n-extern \"C\" {}\n-\n extern \"C\" {\n     /// Raw miniz compression function.\n     fn tdefl_compress_mem_to_heap(psrc_buf: *const c_void,"}, {"sha": "84abc6bc4a5132e248470e31ad231cf1e12b8aa5", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -301,10 +301,6 @@ unsafe extern \"C\" fn rust_eh_unwind_resume(panic_ctx: *mut u8) -> ! {\n // with any GCC runtime.\n #[cfg(all(target_os=\"windows\", target_arch = \"x86\", target_env=\"gnu\"))]\n pub mod eh_frame_registry {\n-    #[link(name = \"gcc_eh\")]\n-    #[cfg(not(cargobuild))]\n-    extern \"C\" {}\n-\n     extern \"C\" {\n         fn __register_frame_info(eh_frame_begin: *const u8, object: *mut u8);\n         fn __deregister_frame_info(eh_frame_begin: *const u8, object: *mut u8);"}, {"sha": "2d80fc32c469dc111f37eb8487811ea9940c24ba", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -229,6 +229,7 @@ pub trait CrateStore<'tcx> {\n     fn is_allocator(&self, cnum: CrateNum) -> bool;\n     fn is_panic_runtime(&self, cnum: CrateNum) -> bool;\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool;\n+    fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool;\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy;\n     fn extern_crate(&self, cnum: CrateNum) -> Option<ExternCrate>;\n     /// The name of the crate as it is referred to in source code of the current\n@@ -390,6 +391,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn is_allocator(&self, cnum: CrateNum) -> bool { bug!(\"is_allocator\") }\n     fn is_panic_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_panic_runtime\") }\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool { bug!(\"is_compiler_builtins\") }\n+    fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_sanitizer_runtime\") }\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy {\n         bug!(\"panic_strategy\")\n     }"}, {"sha": "cbb7b2710f506013d69306cb57a2f626c17edb4b", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -63,7 +63,7 @@ macro_rules! newtype_index {\n }\n \n /// Lowered representation of a single function.\n-// Do not implement clone for Mir, its easy to do so accidently and its kind of expensive.\n+// Do not implement clone for Mir, which can be accidently done and kind of expensive.\n #[derive(RustcEncodable, RustcDecodable, Debug)]\n pub struct Mir<'tcx> {\n     /// List of basic blocks. References to basic block use a newtyped index type `BasicBlock`"}, {"sha": "24615f2fa699213346c07cb91034d79e4a60161b", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -51,6 +51,14 @@ pub struct Config {\n     pub uint_type: UintTy,\n }\n \n+#[derive(Clone)]\n+pub enum Sanitizer {\n+    Address,\n+    Leak,\n+    Memory,\n+    Thread,\n+}\n+\n #[derive(Clone, Copy, PartialEq, Hash)]\n pub enum OptLevel {\n     No, // -O0\n@@ -626,11 +634,13 @@ macro_rules! options {\n             Some(\"a number\");\n         pub const parse_panic_strategy: Option<&'static str> =\n             Some(\"either `panic` or `abort`\");\n+        pub const parse_sanitizer: Option<&'static str> =\n+            Some(\"one of: `address`, `leak`, `memory` or `thread`\");\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, SomePasses, AllPasses};\n+        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer};\n         use rustc_back::PanicStrategy;\n \n         $(\n@@ -751,6 +761,17 @@ macro_rules! options {\n             }\n             true\n         }\n+\n+        fn parse_sanitizer(slote: &mut Option<Sanitizer>, v: Option<&str>) -> bool {\n+            match v {\n+                Some(\"address\") => *slote = Some(Sanitizer::Address),\n+                Some(\"leak\") => *slote = Some(Sanitizer::Leak),\n+                Some(\"memory\") => *slote = Some(Sanitizer::Memory),\n+                Some(\"thread\") => *slote = Some(Sanitizer::Thread),\n+                _ => return false,\n+            }\n+            true\n+        }\n     }\n ) }\n \n@@ -949,6 +970,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"encode MIR of all functions into the crate metadata\"),\n     osx_rpath_install_name: bool = (false, parse_bool, [TRACKED],\n           \"pass `-install_name @rpath/...` to the OSX linker\"),\n+    sanitizer: Option<Sanitizer> = (None, parse_sanitizer, [UNTRACKED],\n+                                   \"Use a sanitizer\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "024c14ce9d922b1e1cce6acf464b21078a0bbc15", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 65, "deletions": 13, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -39,6 +39,8 @@ use util::nodemap::{FxHashMap, FxHashSet};\n use std::cmp;\n use std::fmt;\n use syntax::ast;\n+use hir::{intravisit, Local, Pat};\n+use hir::intravisit::{Visitor, NestedVisitorMap};\n use syntax_pos::{DUMMY_SP, Span};\n use errors::DiagnosticBuilder;\n \n@@ -60,6 +62,30 @@ impl<'a, 'gcx, 'tcx> TraitErrorKey<'tcx> {\n     }\n }\n \n+struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n+    infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n+    target_ty: &'a Ty<'tcx>,\n+    found_pattern: Option<&'a Pat>,\n+}\n+\n+impl<'a, 'gcx, 'tcx> Visitor<'a> for FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'a> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_local(&mut self, local: &'a Local) {\n+        if let Some(&ty) = self.infcx.tables.borrow().node_types.get(&local.id) {\n+            let ty = self.infcx.resolve_type_vars_if_possible(&ty);\n+            let is_match = ty.walk().any(|t| t == *self.target_ty);\n+\n+            if is_match && self.found_pattern.is_none() {\n+                self.found_pattern = Some(&*local.pat);\n+            }\n+        }\n+        intravisit::walk_local(self, local);\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn report_fulfillment_errors(&self, errors: &Vec<FulfillmentError<'tcx>>) {\n         for error in errors {\n@@ -775,7 +801,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             self.tcx.lang_items.sized_trait()\n                             .map_or(false, |sized_id| sized_id == trait_ref.def_id())\n                         {\n-                            self.need_type_info(obligation.cause.span, self_ty);\n+                            self.need_type_info(obligation, self_ty);\n                         } else {\n                             let mut err = struct_span_err!(self.tcx.sess,\n                                                            obligation.cause.span, E0283,\n@@ -793,7 +819,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 // Same hacky approach as above to avoid deluging user\n                 // with error messages.\n                 if !ty.references_error() && !self.tcx.sess.has_errors() {\n-                    self.need_type_info(obligation.cause.span, ty);\n+                    self.need_type_info(obligation, ty);\n                 }\n             }\n \n@@ -857,27 +883,53 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n \n-\n-    fn need_type_info(&self, span: Span, ty: Ty<'tcx>) {\n-        let ty = self.resolve_type_vars_if_possible(&ty);\n-        let name = if let ty::TyInfer(ty::TyVar(ty_vid)) = ty.sty {\n+    fn extract_type_name(&self, ty: &'a Ty<'tcx>) -> String {\n+        if let ty::TyInfer(ty::TyVar(ty_vid)) = (*ty).sty {\n             let ty_vars = self.type_variables.borrow();\n             if let TypeVariableOrigin::TypeParameterDefinition(_, name) =\n-                    *ty_vars.var_origin(ty_vid)\n-            {\n+                *ty_vars.var_origin(ty_vid) {\n                 name.to_string()\n             } else {\n                 ty.to_string()\n             }\n         } else {\n             ty.to_string()\n+        }\n+    }\n+\n+    fn need_type_info(&self, obligation: &PredicateObligation<'tcx>, ty: Ty<'tcx>) {\n+        let ty = self.resolve_type_vars_if_possible(&ty);\n+        let name = self.extract_type_name(&ty);\n+        let ref cause = obligation.cause;\n+\n+        let mut err = struct_span_err!(self.tcx.sess,\n+                                       cause.span,\n+                                       E0282,\n+                                       \"type annotations needed\");\n+\n+        err.span_label(cause.span, &format!(\"cannot infer type for `{}`\", name));\n+\n+        let expr = self.tcx.hir.expect_expr(cause.body_id);\n+\n+        let mut local_visitor = FindLocalByTypeVisitor {\n+            infcx: &self,\n+            target_ty: &ty,\n+            found_pattern: None,\n         };\n \n-        let mut err = struct_span_err!(self.tcx.sess, span, E0282,\n-                                       \"unable to infer enough type information about `{}`\",\n-                                       name);\n-        err.note(\"type annotations or generic parameter binding required\");\n-        err.span_label(span, &format!(\"cannot infer type for `{}`\", name));\n+        local_visitor.visit_expr(expr);\n+\n+        if let Some(pattern) = local_visitor.found_pattern {\n+            let pattern_span = pattern.span;\n+            if let Some(simple_name) = pattern.simple_name() {\n+                err.span_label(pattern_span,\n+                               &format!(\"consider giving `{}` a type\",\n+                                        simple_name));\n+            } else {\n+                err.span_label(pattern_span, &format!(\"consider giving a type to pattern\"));\n+            }\n+        }\n+\n         err.emit();\n     }\n "}, {"sha": "2d4872b1fc942513f03712b1b870a14ef80c1188", "filename": "src/librustc_asan/Cargo.toml", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_asan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_asan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2FCargo.toml?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,17 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+build = \"build.rs\"\n+name = \"rustc_asan\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_asan\"\n+path = \"lib.rs\"\n+\n+[build-dependencies]\n+build_helper = { path = \"../build_helper\" }\n+cmake = \"0.1.18\"\n+\n+[dependencies]\n+alloc_system = { path = \"../liballoc_system\" }\n+core = { path = \"../libcore\" }"}, {"sha": "015be14bd495a7213a62e3268b06e8bfca006156", "filename": "src/librustc_asan/build.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_asan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_asan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Fbuild.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate build_helper;\n+extern crate cmake;\n+\n+use std::path::PathBuf;\n+use std::env;\n+\n+use cmake::Config;\n+\n+fn main() {\n+    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        let dst = Config::new(\"../compiler-rt\")\n+            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n+            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n+            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n+            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .build_target(\"asan\")\n+            .build();\n+\n+        println!(\"cargo:rustc-link-search=native={}\",\n+                 dst.join(\"build/lib/linux\").display());\n+        println!(\"cargo:rustc-link-lib=static=clang_rt.asan-x86_64\");\n+\n+        build_helper::rerun_if_changed_anything_in_dir(&PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\")\n+                .unwrap())\n+            .join(\"../compiler-rt\"));\n+    }\n+\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+}"}, {"sha": "71a166b91ebcb843a880d3f5fd1ec55b5cc0e3e3", "filename": "src/librustc_asan/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_asan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_asan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Flib.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg_attr(not(stage0), feature(sanitizer_runtime))]\n+#![cfg_attr(not(stage0), sanitizer_runtime)]\n+#![feature(alloc_system)]\n+#![feature(staged_api)]\n+#![no_std]\n+#![unstable(feature = \"sanitizer_runtime_lib\",\n+            reason = \"internal implementation detail of sanitizers\",\n+            issue = \"0\")]\n+\n+extern crate alloc_system;"}, {"sha": "e7e2ee3f9056a09f8af19394836052c9b8fc81e9", "filename": "src/librustc_back/target/i686_unknown_netbsd.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_netbsd.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::{Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::netbsd_base::opts();\n+    base.cpu = \"pentium4\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.pre_link_args.push(\"-m32\".to_string());\n+\n+    Ok(Target {\n+        llvm_target: \"i686-unknown-netbsdelf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n+        arch: \"x86\".to_string(),\n+        target_os: \"netbsd\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: base,\n+    })\n+}"}, {"sha": "1d5d1e3ab2fc78a22f0ba2a9ac9dc0cbe1a994f8", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -177,6 +177,7 @@ supported_targets! {\n     (\"i686-unknown-openbsd\", i686_unknown_openbsd),\n     (\"x86_64-unknown-openbsd\", x86_64_unknown_openbsd),\n \n+    (\"i686-unknown-netbsd\", i686_unknown_netbsd),\n     (\"sparc64-unknown-netbsd\", sparc64_unknown_netbsd),\n     (\"x86_64-unknown-netbsd\", x86_64_unknown_netbsd),\n     (\"x86_64-rumprun-netbsd\", x86_64_rumprun_netbsd),"}, {"sha": "7724658a9d6fead0f25ec19c116c9b26fd0e654e", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 84, "deletions": 35, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -176,46 +176,32 @@ pub fn decode_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Recreate the edges in the graph that are still clean.\n     let mut clean_work_products = FxHashSet();\n     let mut dirty_work_products = FxHashSet(); // incomplete; just used to suppress debug output\n+    let mut extra_edges = vec![];\n     for (source, targets) in &edge_map {\n         for target in targets {\n-            // If the target is dirty, skip the edge. If this is an edge\n-            // that targets a work-product, we can print the blame\n-            // information now.\n-            if let Some(blame) = dirty_raw_nodes.get(target) {\n-                if let DepNode::WorkProduct(ref wp) = *target {\n-                    if tcx.sess.opts.debugging_opts.incremental_info {\n-                        if dirty_work_products.insert(wp.clone()) {\n-                            // It'd be nice to pretty-print these paths better than just\n-                            // using the `Debug` impls, but wev.\n-                            println!(\"incremental: module {:?} is dirty because {:?} \\\n-                                      changed or was removed\",\n-                                     wp,\n-                                     blame.map_def(|&index| {\n-                                         Some(directory.def_path_string(tcx, index))\n-                                     }).unwrap());\n-                        }\n-                    }\n-                }\n-                continue;\n-            }\n-\n-            // If the source is dirty, the target will be dirty.\n-            assert!(!dirty_raw_nodes.contains_key(source));\n-\n-            // Retrace the source -> target edges to def-ids and then\n-            // create an edge in the graph. Retracing may yield none if\n-            // some of the data happens to have been removed; this ought\n-            // to be impossible unless it is dirty, so we can unwrap.\n-            let source_node = retraced.map(source).unwrap();\n-            let target_node = retraced.map(target).unwrap();\n-            let _task = tcx.dep_graph.in_task(target_node);\n-            tcx.dep_graph.read(source_node);\n-            if let DepNode::WorkProduct(ref wp) = *target {\n-                clean_work_products.insert(wp.clone());\n-            }\n+            process_edges(tcx, source, target, &edge_map, &directory, &retraced, &dirty_raw_nodes,\n+                          &mut clean_work_products, &mut dirty_work_products, &mut extra_edges);\n         }\n     }\n \n+    // Subtle. Sometimes we have intermediate nodes that we can't recreate in the new graph.\n+    // This is pretty unusual but it arises in a scenario like this:\n+    //\n+    //     Hir(X) -> Foo(Y) -> Bar\n+    //\n+    // Note that the `Hir(Y)` is not an input to `Foo(Y)` -- this\n+    // almost never happens, but can happen in some obscure\n+    // scenarios. In that case, if `Y` is removed, then we can't\n+    // recreate `Foo(Y)` (the def-id `Y` no longer exists); what we do\n+    // then is to push the edge `Hir(X) -> Bar` onto `extra_edges`\n+    // (along with any other targets of `Foo(Y)`). We will then add\n+    // the edge from `Hir(X)` to `Bar` (or, if `Bar` itself cannot be\n+    // recreated, to the targets of `Bar`).\n+    while let Some((source, target)) = extra_edges.pop() {\n+        process_edges(tcx, source, target, &edge_map, &directory, &retraced, &dirty_raw_nodes,\n+                      &mut clean_work_products, &mut dirty_work_products, &mut extra_edges);\n+    }\n+\n     // Add in work-products that are still clean, and delete those that are\n     // dirty.\n     reconcile_work_products(tcx, work_products, &clean_work_products);\n@@ -393,3 +379,66 @@ fn load_prev_metadata_hashes(tcx: TyCtxt,\n            serialized_hashes.index_map.len());\n }\n \n+fn process_edges<'a, 'tcx, 'edges>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    source: &'edges DepNode<DefPathIndex>,\n+    target: &'edges DepNode<DefPathIndex>,\n+    edges: &'edges FxHashMap<DepNode<DefPathIndex>, Vec<DepNode<DefPathIndex>>>,\n+    directory: &DefIdDirectory,\n+    retraced: &RetracedDefIdDirectory,\n+    dirty_raw_nodes: &DirtyNodes,\n+    clean_work_products: &mut FxHashSet<Arc<WorkProductId>>,\n+    dirty_work_products: &mut FxHashSet<Arc<WorkProductId>>,\n+    extra_edges: &mut Vec<(&'edges DepNode<DefPathIndex>, &'edges DepNode<DefPathIndex>)>)\n+{\n+    // If the target is dirty, skip the edge. If this is an edge\n+    // that targets a work-product, we can print the blame\n+    // information now.\n+    if let Some(blame) = dirty_raw_nodes.get(target) {\n+        if let DepNode::WorkProduct(ref wp) = *target {\n+            if tcx.sess.opts.debugging_opts.incremental_info {\n+                if dirty_work_products.insert(wp.clone()) {\n+                    // It'd be nice to pretty-print these paths better than just\n+                    // using the `Debug` impls, but wev.\n+                    println!(\"incremental: module {:?} is dirty because {:?} \\\n+                              changed or was removed\",\n+                             wp,\n+                             blame.map_def(|&index| {\n+                                 Some(directory.def_path_string(tcx, index))\n+                             }).unwrap());\n+                }\n+            }\n+        }\n+        return;\n+    }\n+\n+    // If the source is dirty, the target will be dirty.\n+    assert!(!dirty_raw_nodes.contains_key(source));\n+\n+    // Retrace the source -> target edges to def-ids and then create\n+    // an edge in the graph. Retracing may yield none if some of the\n+    // data happens to have been removed.\n+    if let Some(source_node) = retraced.map(source) {\n+        if let Some(target_node) = retraced.map(target) {\n+            let _task = tcx.dep_graph.in_task(target_node);\n+            tcx.dep_graph.read(source_node);\n+            if let DepNode::WorkProduct(ref wp) = *target {\n+                clean_work_products.insert(wp.clone());\n+            }\n+        } else {\n+            // As discussed in `decode_dep_graph` above, sometimes the\n+            // target cannot be recreated again, in which case we add\n+            // edges to go from `source` to the targets of `target`.\n+            extra_edges.extend(\n+                edges[target].iter().map(|t| (source, t)));\n+        }\n+    } else {\n+        // It's also possible that the source can't be created! But we\n+        // can ignore such cases, because (a) if `source` is a HIR\n+        // node, it would be considered dirty; and (b) in other cases,\n+        // there must be some input to this node that is clean, and so\n+        // we'll re-create the edges over in the case where target is\n+        // undefined.\n+    }\n+}\n+"}, {"sha": "8feb07953db81b4df59b70fcc0d677136d0b8432", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -339,6 +339,7 @@ struct ImproperCTypesVisitor<'a, 'tcx: 'a> {\n \n enum FfiResult {\n     FfiSafe,\n+    FfiPhantom,\n     FfiUnsafe(&'static str),\n     FfiBadStruct(DefId, &'static str),\n     FfiBadUnion(DefId, &'static str),\n@@ -383,8 +384,11 @@ fn is_repr_nullable_ptr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     /// Check if the given type is \"ffi-safe\" (has a stable, well-defined\n     /// representation which can be exported to C code).\n-    fn check_type_for_ffi(&self, cache: &mut FxHashSet<Ty<'tcx>>, ty: Ty<'tcx>) -> FfiResult {\n+    fn check_type_for_ffi(&self,\n+                          cache: &mut FxHashSet<Ty<'tcx>>,\n+                          ty: Ty<'tcx>) -> FfiResult {\n         use self::FfiResult::*;\n+\n         let cx = self.cx.tcx;\n \n         // Protect against infinite recursion, for example\n@@ -397,6 +401,9 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n         match ty.sty {\n             ty::TyAdt(def, substs) => {\n+                if def.is_phantom_data() {\n+                    return FfiPhantom;\n+                }\n                 match def.adt_kind() {\n                     AdtKind::Struct => {\n                         if !cx.lookup_repr_hints(def.did).contains(&attr::ReprExtern) {\n@@ -405,18 +412,22 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                               consider adding a #[repr(C)] attribute to the type\");\n                         }\n \n-                        // We can't completely trust repr(C) markings; make sure the\n-                        // fields are actually safe.\n                         if def.struct_variant().fields.is_empty() {\n                             return FfiUnsafe(\"found zero-size struct in foreign module, consider \\\n                                               adding a member to this struct\");\n                         }\n \n+                        // We can't completely trust repr(C) markings; make sure the\n+                        // fields are actually safe.\n+                        let mut all_phantom = true;\n                         for field in &def.struct_variant().fields {\n                             let field_ty = cx.normalize_associated_type(&field.ty(cx, substs));\n                             let r = self.check_type_for_ffi(cache, field_ty);\n                             match r {\n-                                FfiSafe => {}\n+                                FfiSafe => {\n+                                    all_phantom = false;\n+                                }\n+                                FfiPhantom => {}\n                                 FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n                                     return r;\n                                 }\n@@ -425,7 +436,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                 }\n                             }\n                         }\n-                        FfiSafe\n+\n+                        if all_phantom { FfiPhantom } else { FfiSafe }\n                     }\n                     AdtKind::Union => {\n                         if !cx.lookup_repr_hints(def.did).contains(&attr::ReprExtern) {\n@@ -434,11 +446,20 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                               consider adding a #[repr(C)] attribute to the type\");\n                         }\n \n+                        if def.struct_variant().fields.is_empty() {\n+                            return FfiUnsafe(\"found zero-size union in foreign module, consider \\\n+                                              adding a member to this union\");\n+                        }\n+\n+                        let mut all_phantom = true;\n                         for field in &def.struct_variant().fields {\n                             let field_ty = cx.normalize_associated_type(&field.ty(cx, substs));\n                             let r = self.check_type_for_ffi(cache, field_ty);\n                             match r {\n-                                FfiSafe => {}\n+                                FfiSafe => {\n+                                    all_phantom = false;\n+                                }\n+                                FfiPhantom => {}\n                                 FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n                                     return r;\n                                 }\n@@ -447,7 +468,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                 }\n                             }\n                         }\n-                        FfiSafe\n+\n+                        if all_phantom { FfiPhantom } else { FfiSafe }\n                     }\n                     AdtKind::Enum => {\n                         if def.variants.is_empty() {\n@@ -498,6 +520,10 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                     FfiBadStruct(..) | FfiBadUnion(..) | FfiBadEnum(..) => {\n                                         return r;\n                                     }\n+                                    FfiPhantom => {\n+                                        return FfiBadEnum(def.did,\n+                                                          \"Found phantom data in enum variant\");\n+                                    }\n                                     FfiUnsafe(s) => {\n                                         return FfiBadEnum(def.did, s);\n                                     }\n@@ -591,6 +617,12 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n         match self.check_type_for_ffi(&mut FxHashSet(), ty) {\n             FfiResult::FfiSafe => {}\n+            FfiResult::FfiPhantom => {\n+                self.cx.span_lint(IMPROPER_CTYPES,\n+                                  sp,\n+                                  &format!(\"found zero-sized type composed only \\\n+                                            of phantom-data in a foreign-function.\"));\n+            }\n             FfiResult::FfiUnsafe(s) => {\n                 self.cx.span_lint(IMPROPER_CTYPES, sp, s);\n             }"}, {"sha": "c74a9308e4eba4913aff70e4d598d8babf7d9c8b", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -47,8 +47,6 @@ fn detect_llvm_link(llvm_config: &Path) -> (&'static str, Option<&'static str>)\n }\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n-\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n     let llvm_config = env::var_os(\"LLVM_CONFIG\")\n         .map(PathBuf::from)"}, {"sha": "949e949f673a2b39dd084162d20d8c4606bb3d56", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -126,6 +126,9 @@ pub enum Attribute {\n     UWTable         = 17,\n     ZExt            = 18,\n     InReg           = 19,\n+    SanitizeThread  = 20,\n+    SanitizeAddress = 21,\n+    SanitizeMemory  = 22,\n }\n \n /// LLVMIntPredicate\n@@ -1369,14 +1372,14 @@ extern \"C\" {\n     pub fn LLVMRustDIBuilderCreateBasicType(Builder: DIBuilderRef,\n                                             Name: *const c_char,\n                                             SizeInBits: u64,\n-                                            AlignInBits: u64,\n+                                            AlignInBits: u32,\n                                             Encoding: c_uint)\n                                             -> DIBasicType;\n \n     pub fn LLVMRustDIBuilderCreatePointerType(Builder: DIBuilderRef,\n                                               PointeeTy: DIType,\n                                               SizeInBits: u64,\n-                                              AlignInBits: u64,\n+                                              AlignInBits: u32,\n                                               Name: *const c_char)\n                                               -> DIDerivedType;\n \n@@ -1386,7 +1389,7 @@ extern \"C\" {\n                                              File: DIFile,\n                                              LineNumber: c_uint,\n                                              SizeInBits: u64,\n-                                             AlignInBits: u64,\n+                                             AlignInBits: u32,\n                                              Flags: DIFlags,\n                                              DerivedFrom: DIType,\n                                              Elements: DIArray,\n@@ -1401,7 +1404,7 @@ extern \"C\" {\n                                              File: DIFile,\n                                              LineNo: c_uint,\n                                              SizeInBits: u64,\n-                                             AlignInBits: u64,\n+                                             AlignInBits: u32,\n                                              OffsetInBits: u64,\n                                              Flags: DIFlags,\n                                              Ty: DIType)\n@@ -1429,7 +1432,7 @@ extern \"C\" {\n                                                  isLocalToUnit: bool,\n                                                  Val: ValueRef,\n                                                  Decl: DIDescriptor,\n-                                                 AlignInBits: u64)\n+                                                 AlignInBits: u32)\n                                                  -> DIGlobalVariable;\n \n     pub fn LLVMRustDIBuilderCreateVariable(Builder: DIBuilderRef,\n@@ -1442,19 +1445,19 @@ extern \"C\" {\n                                            AlwaysPreserve: bool,\n                                            Flags: DIFlags,\n                                            ArgNo: c_uint,\n-                                           AlignInBits: u64)\n+                                           AlignInBits: u32)\n                                            -> DIVariable;\n \n     pub fn LLVMRustDIBuilderCreateArrayType(Builder: DIBuilderRef,\n                                             Size: u64,\n-                                            AlignInBits: u64,\n+                                            AlignInBits: u32,\n                                             Ty: DIType,\n                                             Subscripts: DIArray)\n                                             -> DIType;\n \n     pub fn LLVMRustDIBuilderCreateVectorType(Builder: DIBuilderRef,\n                                              Size: u64,\n-                                             AlignInBits: u64,\n+                                             AlignInBits: u32,\n                                              Ty: DIType,\n                                              Subscripts: DIArray)\n                                              -> DIType;\n@@ -1489,7 +1492,7 @@ extern \"C\" {\n                                                   File: DIFile,\n                                                   LineNumber: c_uint,\n                                                   SizeInBits: u64,\n-                                                  AlignInBits: u64,\n+                                                  AlignInBits: u32,\n                                                   Elements: DIArray,\n                                                   ClassType: DIType)\n                                                   -> DIType;\n@@ -1500,7 +1503,7 @@ extern \"C\" {\n                                             File: DIFile,\n                                             LineNumber: c_uint,\n                                             SizeInBits: u64,\n-                                            AlignInBits: u64,\n+                                            AlignInBits: u32,\n                                             Flags: DIFlags,\n                                             Elements: DIArray,\n                                             RunTimeLang: c_uint,"}, {"sha": "f300bf16145a736c92f95768eb911ada60f24c3e", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -422,13 +422,3 @@ impl Drop for OperandBundleDef {\n         }\n     }\n }\n-\n-// The module containing the native LLVM dependencies, generated by the build system\n-// Note that this must come after the rustllvm extern declaration so that\n-// parts of LLVM that rustllvm depends on aren't thrown away by the linker.\n-// Works to the above fix for #15460 to ensure LLVM dependencies that\n-// are only used by rustllvm don't get stripped by the linker.\n-#[cfg(not(cargobuild))]\n-mod llvmdeps {\n-    include! { env!(\"CFG_LLVM_LINKAGE_FILE\") }\n-}"}, {"sha": "bc1f2ead76884927592a01b283303000bdebf4f2", "filename": "src/librustc_lsan/Cargo.toml", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_lsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_lsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2FCargo.toml?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,17 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+build = \"build.rs\"\n+name = \"rustc_lsan\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_lsan\"\n+path = \"lib.rs\"\n+\n+[build-dependencies]\n+build_helper = { path = \"../build_helper\" }\n+cmake = \"0.1.18\"\n+\n+[dependencies]\n+alloc_system = { path = \"../liballoc_system\" }\n+core = { path = \"../libcore\" }"}, {"sha": "5773777d1f81b4bf600061dde806da2d0b85b869", "filename": "src/librustc_lsan/build.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_lsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_lsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Fbuild.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate build_helper;\n+extern crate cmake;\n+\n+use std::path::PathBuf;\n+use std::env;\n+\n+use cmake::Config;\n+\n+fn main() {\n+    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        let dst = Config::new(\"../compiler-rt\")\n+            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n+            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n+            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n+            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .build_target(\"lsan\")\n+            .build();\n+\n+        println!(\"cargo:rustc-link-search=native={}\",\n+                 dst.join(\"build/lib/linux\").display());\n+        println!(\"cargo:rustc-link-lib=static=clang_rt.lsan-x86_64\");\n+\n+        build_helper::rerun_if_changed_anything_in_dir(&PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\")\n+                .unwrap())\n+            .join(\"../compiler-rt\"));\n+    }\n+\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+}"}, {"sha": "71a166b91ebcb843a880d3f5fd1ec55b5cc0e3e3", "filename": "src/librustc_lsan/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_lsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_lsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Flib.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg_attr(not(stage0), feature(sanitizer_runtime))]\n+#![cfg_attr(not(stage0), sanitizer_runtime)]\n+#![feature(alloc_system)]\n+#![feature(staged_api)]\n+#![no_std]\n+#![unstable(feature = \"sanitizer_runtime_lib\",\n+            reason = \"internal implementation detail of sanitizers\",\n+            issue = \"0\")]\n+\n+extern crate alloc_system;"}, {"sha": "55dc5aa2876f6bab0002341acdaae62c6a48fdd4", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -17,7 +17,8 @@ use schema::CrateRoot;\n use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::svh::Svh;\n use rustc::middle::cstore::DepKind;\n-use rustc::session::{config, Session};\n+use rustc::session::Session;\n+use rustc::session::config::{Sanitizer, self};\n use rustc_back::PanicStrategy;\n use rustc::session::search_paths::PathKind;\n use rustc::middle;\n@@ -786,6 +787,64 @@ impl<'a> CrateLoader<'a> {\n                                   &|data| data.needs_panic_runtime());\n     }\n \n+    fn inject_sanitizer_runtime(&mut self) {\n+        if let Some(ref sanitizer) = self.sess.opts.debugging_opts.sanitizer {\n+            // Sanitizers can only be used with x86_64 Linux executables linked\n+            // to `std`\n+            if self.sess.target.target.llvm_target != \"x86_64-unknown-linux-gnu\" {\n+                self.sess.err(&format!(\"Sanitizers only work with the \\\n+                                        `x86_64-unknown-linux-gnu` target.\"));\n+                return\n+            }\n+\n+            if !self.sess.crate_types.borrow().iter().all(|ct| {\n+                match *ct {\n+                    // Link the runtime\n+                    config::CrateTypeExecutable => true,\n+                    // This crate will be compiled with the required\n+                    // instrumentation pass\n+                    config::CrateTypeRlib => false,\n+                    _ => {\n+                        self.sess.err(&format!(\"Only executables and rlibs can be \\\n+                                                compiled with `-Z sanitizer`\"));\n+                        false\n+                    }\n+                }\n+            }) {\n+                return\n+            }\n+\n+            let mut uses_std = false;\n+            self.cstore.iter_crate_data(|_, data| {\n+                if data.name == \"std\" {\n+                    uses_std = true;\n+                }\n+            });\n+\n+            if uses_std {\n+                let name = match *sanitizer {\n+                    Sanitizer::Address => \"rustc_asan\",\n+                    Sanitizer::Leak => \"rustc_lsan\",\n+                    Sanitizer::Memory => \"rustc_msan\",\n+                    Sanitizer::Thread => \"rustc_tsan\",\n+                };\n+                info!(\"loading sanitizer: {}\", name);\n+\n+                let symbol = Symbol::intern(name);\n+                let dep_kind = DepKind::Implicit;\n+                let (_, data) =\n+                    self.resolve_crate(&None, symbol, symbol, None, DUMMY_SP,\n+                                       PathKind::Crate, dep_kind);\n+\n+                // Sanity check the loaded crate to ensure it is indeed a sanitizer runtime\n+                if !data.is_sanitizer_runtime() {\n+                    self.sess.err(&format!(\"the crate `{}` is not a sanitizer runtime\",\n+                                           name));\n+                }\n+            }\n+        }\n+    }\n+\n     fn inject_allocator_crate(&mut self) {\n         // Make sure that we actually need an allocator, if none of our\n         // dependencies need one then we definitely don't!\n@@ -982,6 +1041,9 @@ impl<'a> CrateLoader<'a> {\n \n impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n     fn postprocess(&mut self, krate: &ast::Crate) {\n+        // inject the sanitizer runtime before the allocator runtime because all\n+        // sanitizers force the use of the `alloc_system` allocator\n+        self.inject_sanitizer_runtime();\n         self.inject_allocator_crate();\n         self.inject_panic_runtime(krate);\n "}, {"sha": "4709ca6101c7908f11e8ce5ef7e9cd5a96d090ec", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -297,6 +297,11 @@ impl CrateMetadata {\n         attr::contains_name(&attrs, \"compiler_builtins\")\n     }\n \n+    pub fn is_sanitizer_runtime(&self) -> bool {\n+        let attrs = self.get_item_attrs(CRATE_DEF_INDEX);\n+        attr::contains_name(&attrs, \"sanitizer_runtime\")\n+    }\n+\n     pub fn is_no_builtins(&self) -> bool {\n         let attrs = self.get_item_attrs(CRATE_DEF_INDEX);\n         attr::contains_name(&attrs, \"no_builtins\")"}, {"sha": "7b0177bfd23ed966a2b4fef4a5e6195770e7edb5", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -297,6 +297,10 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(cnum).is_compiler_builtins()\n     }\n \n+    fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool {\n+        self.get_crate_data(cnum).is_sanitizer_runtime()\n+    }\n+\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy {\n         self.get_crate_data(cnum).panic_strategy()\n     }"}, {"sha": "45cc6b9839fb81a321e876b2c834744755ac5c56", "filename": "src/librustc_msan/Cargo.toml", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_msan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_msan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2FCargo.toml?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,17 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+build = \"build.rs\"\n+name = \"rustc_msan\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_msan\"\n+path = \"lib.rs\"\n+\n+[build-dependencies]\n+build_helper = { path = \"../build_helper\" }\n+cmake = \"0.1.18\"\n+\n+[dependencies]\n+alloc_system = { path = \"../liballoc_system\" }\n+core = { path = \"../libcore\" }"}, {"sha": "7a4c8f7073933f7d597991cf776cfa8e7662461f", "filename": "src/librustc_msan/build.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_msan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_msan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Fbuild.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate build_helper;\n+extern crate cmake;\n+\n+use std::path::PathBuf;\n+use std::env;\n+\n+use cmake::Config;\n+\n+fn main() {\n+    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        let dst = Config::new(\"../compiler-rt\")\n+            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n+            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n+            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n+            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .build_target(\"msan\")\n+            .build();\n+\n+        println!(\"cargo:rustc-link-search=native={}\",\n+                 dst.join(\"build/lib/linux\").display());\n+        println!(\"cargo:rustc-link-lib=static=clang_rt.msan-x86_64\");\n+\n+        build_helper::rerun_if_changed_anything_in_dir(&PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\")\n+                .unwrap())\n+            .join(\"../compiler-rt\"));\n+    }\n+\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+}"}, {"sha": "71a166b91ebcb843a880d3f5fd1ec55b5cc0e3e3", "filename": "src/librustc_msan/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_msan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_msan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Flib.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg_attr(not(stage0), feature(sanitizer_runtime))]\n+#![cfg_attr(not(stage0), sanitizer_runtime)]\n+#![feature(alloc_system)]\n+#![feature(staged_api)]\n+#![no_std]\n+#![unstable(feature = \"sanitizer_runtime_lib\",\n+            reason = \"internal implementation detail of sanitizers\",\n+            issue = \"0\")]\n+\n+extern crate alloc_system;"}, {"sha": "1cbfa26b705ac8190d6ba15e49477116d767c337", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1031,6 +1031,9 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n         // symbols from the dylib.\n         let src = sess.cstore.used_crate_source(cnum);\n         match data[cnum.as_usize() - 1] {\n+            _ if sess.cstore.is_sanitizer_runtime(cnum) => {\n+                link_sanitizer_runtime(cmd, sess, tmpdir, cnum);\n+            }\n             // compiler-builtins are always placed last to ensure that they're\n             // linked correctly.\n             _ if sess.cstore.is_compiler_builtins(cnum) => {\n@@ -1048,6 +1051,8 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n         }\n     }\n \n+    // compiler-builtins are always placed last to ensure that they're\n+    // linked correctly.\n     // We must always link the `compiler_builtins` crate statically. Even if it\n     // was already \"included\" in a dylib (e.g. `libstd` when `-C prefer-dynamic`\n     // is used)\n@@ -1064,6 +1069,34 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n         }\n     }\n \n+    // We must link the sanitizer runtime using -Wl,--whole-archive but since\n+    // it's packed in a .rlib, it contains stuff that are not objects that will\n+    // make the linker error. So we must remove those bits from the .rlib before\n+    // linking it.\n+    fn link_sanitizer_runtime(cmd: &mut Linker,\n+                              sess: &Session,\n+                              tmpdir: &Path,\n+                              cnum: CrateNum) {\n+        let src = sess.cstore.used_crate_source(cnum);\n+        let cratepath = &src.rlib.unwrap().0;\n+        let dst = tmpdir.join(cratepath.file_name().unwrap());\n+        let cfg = archive_config(sess, &dst, Some(cratepath));\n+        let mut archive = ArchiveBuilder::new(cfg);\n+        archive.update_symbols();\n+\n+        for f in archive.src_files() {\n+            if f.ends_with(\"bytecode.deflate\") ||\n+                f == sess.cstore.metadata_filename() {\n+                    archive.remove_file(&f);\n+                    continue\n+                }\n+        }\n+\n+        archive.build();\n+\n+        cmd.link_whole_rlib(&dst);\n+    }\n+\n     // Adds the static \"rlib\" versions of all crates to the command line.\n     // There's a bit of magic which happens here specifically related to LTO and\n     // dynamic libraries. Specifically:"}, {"sha": "5c4a5a9a4423d3abdf4bd9a96b90cb1884d5417f", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -12,7 +12,7 @@ use back::lto;\n use back::link::{get_linker, remove};\n use back::symbol_export::ExportedSymbols;\n use rustc_incremental::{save_trans_partition, in_incr_comp_dir};\n-use session::config::{OutputFilenames, OutputTypes, Passes, SomePasses, AllPasses};\n+use session::config::{OutputFilenames, OutputTypes, Passes, SomePasses, AllPasses, Sanitizer};\n use session::Session;\n use session::config::{self, OutputType};\n use llvm;\n@@ -27,6 +27,7 @@ use errors::emitter::Emitter;\n use syntax_pos::MultiSpan;\n use context::{is_pie_binary, get_reloc_model};\n \n+use std::cmp;\n use std::ffi::CString;\n use std::fs;\n use std::path::{Path, PathBuf};\n@@ -678,6 +679,22 @@ pub fn run_passes(sess: &Session,\n     let mut modules_config = ModuleConfig::new(tm, sess.opts.cg.passes.clone());\n     let mut metadata_config = ModuleConfig::new(tm, vec![]);\n \n+    if let Some(ref sanitizer) = sess.opts.debugging_opts.sanitizer {\n+        match *sanitizer {\n+            Sanitizer::Address => {\n+                modules_config.passes.push(\"asan\".to_owned());\n+                modules_config.passes.push(\"asan-module\".to_owned());\n+            }\n+            Sanitizer::Memory => {\n+                modules_config.passes.push(\"msan\".to_owned())\n+            }\n+            Sanitizer::Thread => {\n+                modules_config.passes.push(\"tsan\".to_owned())\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     modules_config.opt_level = Some(get_llvm_opt_level(sess.opts.optimize));\n     modules_config.opt_size = Some(get_llvm_opt_size(sess.opts.optimize));\n \n@@ -754,10 +771,13 @@ pub fn run_passes(sess: &Session,\n     }\n \n     // Process the work items, optionally using worker threads.\n-    // NOTE: This code is not really adapted to incremental compilation where\n-    //       the compiler decides the number of codegen units (and will\n-    //       potentially create hundreds of them).\n-    let num_workers = work_items.len() - 1;\n+    // NOTE: We are hardcoding a limit of worker threads for now. With\n+    //       incremental compilation we can run into situations where we would\n+    //       open hundreds of threads otherwise -- which can make things slower\n+    //       if things don't fit into memory anymore, or can cause the compiler\n+    //       to crash because of too many open file handles. See #39280 for\n+    //       some discussion on how to improve this in the future.\n+    let num_workers = cmp::min(work_items.len() - 1, 32);\n     if num_workers <= 1 {\n         run_work_singlethreaded(sess, &trans.exported_symbols, work_items);\n     } else {"}, {"sha": "7578cc74dbf34bf990436ef8a412daaf56c8e99f", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1783,7 +1783,7 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n                                                     is_local_to_unit,\n                                                     global,\n                                                     ptr::null_mut(),\n-                                                    global_align as u64,\n+                                                    global_align,\n         );\n     }\n }"}, {"sha": "729eae15ad696ae85693f1f7c43d47d3cffa7064", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -464,7 +464,7 @@ pub fn declare_local<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n                     cx.sess().opts.optimize != config::OptLevel::No,\n                     DIFlags::FlagZero,\n                     argument_index,\n-                    align as u64,\n+                    align,\n                 )\n             };\n             source_loc::set_debug_location(bcx,"}, {"sha": "15a1c990aadc6aa674f83abde74b3cd8da235673", "filename": "src/librustc_trans/debuginfo/utils.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -24,6 +24,8 @@ use type_::Type;\n use syntax_pos::{self, Span};\n use syntax::ast;\n \n+use std::ops;\n+\n pub fn is_node_local_to_unit(cx: &CrateContext, node_id: ast::NodeId) -> bool\n {\n     // The is_local_to_unit flag indicates whether a function is local to the\n@@ -49,12 +51,13 @@ pub fn span_start(cx: &CrateContext, span: Span) -> syntax_pos::Loc {\n     cx.sess().codemap().lookup_char_pos(span.lo)\n }\n \n-pub fn size_and_align_of(cx: &CrateContext, llvm_type: Type) -> (u64, u64) {\n-    (machine::llsize_of_alloc(cx, llvm_type), machine::llalign_of_min(cx, llvm_type) as u64)\n+pub fn size_and_align_of(cx: &CrateContext, llvm_type: Type) -> (u64, u32) {\n+    (machine::llsize_of_alloc(cx, llvm_type), machine::llalign_of_min(cx, llvm_type))\n }\n \n-pub fn bytes_to_bits(bytes: u64) -> u64 {\n-    bytes * 8\n+pub fn bytes_to_bits<T>(bytes: T) -> T\n+    where T: ops::Mul<Output=T> + From<u8> {\n+    bytes * 8u8.into()\n }\n \n #[inline]"}, {"sha": "7ac482459ee39f5846a3dd4ec807bbde27cb8405", "filename": "src/librustc_trans/declare.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_trans%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_trans%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdeclare.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -23,6 +23,7 @@\n use llvm::{self, ValueRef};\n use llvm::AttributePlace::Function;\n use rustc::ty;\n+use rustc::session::config::Sanitizer;\n use abi::{Abi, FnType};\n use attributes;\n use context::CrateContext;\n@@ -72,6 +73,21 @@ fn declare_raw_fn(ccx: &CrateContext, name: &str, callconv: llvm::CallConv, ty:\n         llvm::Attribute::NoRedZone.apply_llfn(Function, llfn);\n     }\n \n+    if let Some(ref sanitizer) = ccx.tcx().sess.opts.debugging_opts.sanitizer {\n+        match *sanitizer {\n+            Sanitizer::Address => {\n+                llvm::Attribute::SanitizeAddress.apply_llfn(Function, llfn);\n+            },\n+            Sanitizer::Memory => {\n+                llvm::Attribute::SanitizeMemory.apply_llfn(Function, llfn);\n+            },\n+            Sanitizer::Thread => {\n+                llvm::Attribute::SanitizeThread.apply_llfn(Function, llfn);\n+            },\n+            _ => {}\n+        }\n+    }\n+\n     // If we're compiling the compiler-builtins crate, e.g. the equivalent of\n     // compiler-rt, then we want to implicitly compile everything with hidden\n     // visibility as we're going to link this object all over the place but"}, {"sha": "66d6236361ea233e5f13380e106d6cf181a71912", "filename": "src/librustc_tsan/Cargo.toml", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_tsan%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_tsan%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2FCargo.toml?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,17 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+build = \"build.rs\"\n+name = \"rustc_tsan\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"rustc_tsan\"\n+path = \"lib.rs\"\n+\n+[build-dependencies]\n+build_helper = { path = \"../build_helper\" }\n+cmake = \"0.1.18\"\n+\n+[dependencies]\n+alloc_system = { path = \"../liballoc_system\" }\n+core = { path = \"../libcore\" }"}, {"sha": "84326ae8a71060440e436838afbf2080ca889e8e", "filename": "src/librustc_tsan/build.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_tsan%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_tsan%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Fbuild.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate build_helper;\n+extern crate cmake;\n+\n+use std::path::PathBuf;\n+use std::env;\n+\n+use cmake::Config;\n+\n+fn main() {\n+    if let Some(llvm_config) = env::var_os(\"LLVM_CONFIG\") {\n+        let dst = Config::new(\"../compiler-rt\")\n+            .define(\"COMPILER_RT_BUILD_SANITIZERS\", \"ON\")\n+            .define(\"COMPILER_RT_BUILD_BUILTINS\", \"OFF\")\n+            .define(\"COMPILER_RT_BUILD_XRAY\", \"OFF\")\n+            .define(\"LLVM_CONFIG_PATH\", llvm_config)\n+            .build_target(\"tsan\")\n+            .build();\n+\n+        println!(\"cargo:rustc-link-search=native={}\",\n+                 dst.join(\"build/lib/linux\").display());\n+        println!(\"cargo:rustc-link-lib=static=clang_rt.tsan-x86_64\");\n+\n+        build_helper::rerun_if_changed_anything_in_dir(&PathBuf::from(env::var(\"CARGO_MANIFEST_DIR\")\n+                .unwrap())\n+            .join(\"../compiler-rt\"));\n+    }\n+\n+    println!(\"cargo:rerun-if-changed=build.rs\");\n+}"}, {"sha": "71a166b91ebcb843a880d3f5fd1ec55b5cc0e3e3", "filename": "src/librustc_tsan/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_tsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustc_tsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Flib.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg_attr(not(stage0), feature(sanitizer_runtime))]\n+#![cfg_attr(not(stage0), sanitizer_runtime)]\n+#![feature(alloc_system)]\n+#![feature(staged_api)]\n+#![no_std]\n+#![unstable(feature = \"sanitizer_runtime_lib\",\n+            reason = \"internal implementation detail of sanitizers\",\n+            issue = \"0\")]\n+\n+extern crate alloc_system;"}, {"sha": "fcb7af11dce2f061d2abbfd0bcc1e0af72ee6ad0", "filename": "src/librustdoc/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustdoc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustdoc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fbuild.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -11,7 +11,6 @@\n extern crate gcc;\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n     let mut cfg = gcc::Config::new();\n     cfg.file(\"../rt/hoedown/src/autolink.c\")\n        .file(\"../rt/hoedown/src/buffer.c\")"}, {"sha": "c591c09bf20e2701b221f806ad659249bf899d3b", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -671,9 +671,11 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n                 }\n                 _ => {\n                     if f.alternate() {\n-                        write!(f, \"&{}{}{:#}\", lt, m, **ty)\n+                        write!(f, \"&{}{}\", lt, m)?;\n+                        fmt_type(&ty, f, use_absolute)\n                     } else {\n-                        write!(f, \"&amp;{}{}{}\", lt, m, **ty)\n+                        write!(f, \"&amp;{}{}\", lt, m)?;\n+                        fmt_type(&ty, f, use_absolute)\n                     }\n                 }\n             }"}, {"sha": "c7c5aabab97ae8002ce57b674d6623068c5090dd", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -35,6 +35,7 @@ use std::fmt::{self, Write};\n use std::slice;\n use std::str;\n use syntax::feature_gate::UnstableFeatures;\n+use syntax::codemap::Span;\n \n use html::render::derive_id;\n use html::toc::TocBuilder;\n@@ -162,11 +163,6 @@ struct hoedown_buffer {\n     unit: libc::size_t,\n }\n \n-// hoedown FFI\n-#[link(name = \"hoedown\", kind = \"static\")]\n-#[cfg(not(cargobuild))]\n-extern {}\n-\n extern {\n     fn hoedown_html_renderer_new(render_flags: libc::c_uint,\n                                  nesting_level: libc::c_int)\n@@ -429,7 +425,7 @@ pub fn render(w: &mut fmt::Formatter,\n     }\n }\n \n-pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, start_line: usize) {\n+pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Span) {\n     extern fn block(_ob: *mut hoedown_buffer,\n                     text: *const hoedown_buffer,\n                     lang: *const hoedown_buffer,\n@@ -454,11 +450,12 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, start_line:\n             });\n             let text = lines.collect::<Vec<&str>>().join(\"\\n\");\n             let line = tests.get_line() + line;\n+            let filename = tests.get_filename();\n             tests.add_test(text.to_owned(),\n                            block_info.should_panic, block_info.no_run,\n                            block_info.ignore, block_info.test_harness,\n                            block_info.compile_fail, block_info.error_codes,\n-                           line);\n+                           line, filename);\n         }\n     }\n \n@@ -479,7 +476,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, start_line:\n         }\n     }\n \n-    tests.set_line(start_line);\n+    tests.set_position(position);\n     unsafe {\n         let ob = hoedown_buffer_new(DEF_OUNIT);\n         let renderer = hoedown_html_renderer_new(0, 0);"}, {"sha": "6234d89024441b946e3d3aba0ba0503b6d9d2385", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -2132,23 +2132,37 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         <ul class='item-list' id='implementors-list'>\n     \")?;\n     if let Some(implementors) = cache.implementors.get(&it.def_id) {\n-        let mut implementor_count: FxHashMap<&str, usize> = FxHashMap();\n+        // The DefId is for the first Type found with that name. The bool is\n+        // if any Types with the same name but different DefId have been found.\n+        let mut implementor_dups: FxHashMap<&str, (DefId, bool)> = FxHashMap();\n         for implementor in implementors {\n-            if let clean::Type::ResolvedPath {ref path, ..} = implementor.impl_.for_ {\n-                *implementor_count.entry(path.last_name()).or_insert(0) += 1;\n+            match implementor.impl_.for_ {\n+                clean::ResolvedPath { ref path, did, is_generic: false, .. } |\n+                clean::BorrowedRef {\n+                    type_: box clean::ResolvedPath { ref path, did, is_generic: false, .. },\n+                    ..\n+                } => {\n+                    let &mut (prev_did, ref mut has_duplicates) =\n+                        implementor_dups.entry(path.last_name()).or_insert((did, false));\n+                    if prev_did != did {\n+                        *has_duplicates = true;\n+                    }\n+                }\n+                _ => {}\n             }\n         }\n \n         for implementor in implementors {\n             write!(w, \"<li><code>\")?;\n             // If there's already another implementor that has the same abbridged name, use the\n             // full path, for example in `std::iter::ExactSizeIterator`\n-            let use_absolute = if let clean::Type::ResolvedPath {\n-                ref path, ..\n-            } = implementor.impl_.for_ {\n-                implementor_count[path.last_name()] > 1\n-            } else {\n-                false\n+            let use_absolute = match implementor.impl_.for_ {\n+                clean::ResolvedPath { ref path, is_generic: false, .. } |\n+                clean::BorrowedRef {\n+                    type_: box clean::ResolvedPath { ref path, is_generic: false, .. },\n+                    ..\n+                } => implementor_dups[path.last_name()].1,\n+                _ => false,\n             };\n             fmt_impl_for_trait_page(&implementor.impl_, w, use_absolute)?;\n             writeln!(w, \"</code></li>\")?;"}, {"sha": "70ef7c597e4d7ba55f3c81a5f46e477f3db2ea35", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -18,6 +18,7 @@ use getopts;\n use testing;\n use rustc::session::search_paths::SearchPaths;\n use rustc::session::config::Externs;\n+use syntax::codemap::DUMMY_SP;\n \n use externalfiles::{ExternalHtml, LoadStringError, load_string};\n \n@@ -154,9 +155,8 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     let mut opts = TestOptions::default();\n     opts.no_crate_inject = true;\n     let mut collector = Collector::new(input.to_string(), cfgs, libs, externs,\n-                                       true, opts, maybe_sysroot, \"input\".to_string(),\n-                                       None);\n-    find_testable_code(&input_str, &mut collector, 0);\n+                                       true, opts, maybe_sysroot, None);\n+    find_testable_code(&input_str, &mut collector, DUMMY_SP);\n     test_args.insert(0, \"rustdoctest\".to_string());\n     testing::test_main(&test_args, collector.tests);\n     0"}, {"sha": "930cf401e74501b202a0f49b404c07301b34cf7e", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -37,7 +37,7 @@ use rustc_trans::back::link;\n use syntax::ast;\n use syntax::codemap::CodeMap;\n use syntax::feature_gate::UnstableFeatures;\n-use syntax_pos::{BytePos, DUMMY_SP, Pos};\n+use syntax_pos::{BytePos, DUMMY_SP, Pos, Span};\n use errors;\n use errors::emitter::ColorConfig;\n \n@@ -97,15 +97,13 @@ pub fn run(input: &str,\n         link::find_crate_name(None, &hir_forest.krate().attrs, &input)\n     });\n     let opts = scrape_test_config(hir_forest.krate());\n-    let filename = input_path.to_str().unwrap_or(\"\").to_owned();\n     let mut collector = Collector::new(crate_name,\n                                        cfgs,\n                                        libs,\n                                        externs,\n                                        false,\n                                        opts,\n                                        maybe_sysroot,\n-                                       filename,\n                                        Some(codemap));\n \n     {\n@@ -391,15 +389,14 @@ pub struct Collector {\n     cratename: String,\n     opts: TestOptions,\n     maybe_sysroot: Option<PathBuf>,\n-    filename: String,\n-    start_line: usize,\n+    position: Span,\n     codemap: Option<Rc<CodeMap>>,\n }\n \n impl Collector {\n     pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n                use_headers: bool, opts: TestOptions, maybe_sysroot: Option<PathBuf>,\n-               filename: String, codemap: Option<Rc<CodeMap>>) -> Collector {\n+               codemap: Option<Rc<CodeMap>>) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n@@ -412,17 +409,16 @@ impl Collector {\n             cratename: cratename,\n             opts: opts,\n             maybe_sysroot: maybe_sysroot,\n-            filename: filename,\n-            start_line: 0,\n+            position: DUMMY_SP,\n             codemap: codemap,\n         }\n     }\n \n     pub fn add_test(&mut self, test: String,\n                     should_panic: bool, no_run: bool, should_ignore: bool,\n                     as_test_harness: bool, compile_fail: bool, error_codes: Vec<String>,\n-                    line: usize) {\n-        let name = format!(\"{} - line {}\", self.filename, line);\n+                    line: usize, filename: String) {\n+        let name = format!(\"{} - line {}\", filename, line);\n         self.cnt += 1;\n         let cfgs = self.cfgs.clone();\n         let libs = self.libs.clone();\n@@ -467,16 +463,25 @@ impl Collector {\n     }\n \n     pub fn get_line(&self) -> usize {\n-        if let Some(ref codemap) = self.codemap{\n-            let line = codemap.lookup_char_pos(BytePos(self.start_line as u32)).line;\n+        if let Some(ref codemap) = self.codemap {\n+            let line = self.position.lo.to_usize();\n+            let line = codemap.lookup_char_pos(BytePos(line as u32)).line;\n             if line > 0 { line - 1 } else { line }\n         } else {\n-            self.start_line\n+            0\n         }\n     }\n \n-    pub fn set_line(&mut self, start_line: usize) {\n-        self.start_line = start_line;\n+    pub fn set_position(&mut self, position: Span) {\n+        self.position = position;\n+    }\n+\n+    pub fn get_filename(&self) -> String {\n+        if let Some(ref codemap) = self.codemap {\n+            codemap.span_to_filename(self.position)\n+        } else {\n+            \"<input>\".to_owned()\n+        }\n     }\n \n     pub fn register_header(&mut self, name: &str, level: u32) {\n@@ -520,7 +525,7 @@ impl<'a, 'hir> HirCollector<'a, 'hir> {\n         if let Some(doc) = attrs.doc_value() {\n             self.collector.cnt = 0;\n             markdown::find_testable_code(doc, self.collector,\n-                                         attrs.span.unwrap_or(DUMMY_SP).lo.to_usize());\n+                                         attrs.span.unwrap_or(DUMMY_SP));\n         }\n \n         nested(self);"}, {"sha": "2ba7517d3d2023761a0cc24838d184fe2c95d2f4", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -23,13 +23,23 @@ compiler_builtins = { path = \"../libcompiler_builtins\" }\n std_unicode = { path = \"../libstd_unicode\" }\n unwind = { path = \"../libunwind\" }\n \n+[target.x86_64-unknown-linux-gnu.dependencies]\n+rustc_asan = { path = \"../librustc_asan\", optional = true }\n+rustc_lsan = { path = \"../librustc_lsan\", optional = true }\n+rustc_msan = { path = \"../librustc_msan\", optional = true }\n+rustc_tsan = { path = \"../librustc_tsan\", optional = true }\n+\n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n gcc = \"0.3.27\"\n \n [features]\n+asan = [\"rustc_asan\"]\n backtrace = []\n debug-jemalloc = [\"alloc_jemalloc/debug\"]\n jemalloc = [\"alloc_jemalloc\"]\n force_alloc_system = []\n+lsan = [\"rustc_lsan\"]\n+msan = [\"rustc_msan\"]\n panic-unwind = [\"panic_unwind\"]\n+tsan = [\"rustc_tsan\"]"}, {"sha": "0fca374f6e6d1035381faf7ba96498965663378b", "filename": "src/libstd/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -21,7 +21,6 @@ use std::process::Command;\n use build_helper::{run, rerun_if_changed_anything_in_dir, up_to_date};\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n     println!(\"cargo:rerun-if-changed=build.rs\");\n \n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");"}, {"sha": "1ef2cb4ed153c2e5d4e78eba2531e86031ecc29d", "filename": "src/libstd/env.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -24,16 +24,19 @@ use path::{Path, PathBuf};\n use sys;\n use sys::os as os_imp;\n \n-/// Returns the current working directory as a `PathBuf`.\n+/// Returns the current working directory as a [`PathBuf`].\n ///\n /// # Errors\n ///\n-/// Returns an `Err` if the current working directory value is invalid.\n+/// Returns an [`Err`] if the current working directory value is invalid.\n /// Possible cases:\n ///\n /// * Current directory does not exist.\n /// * There are insufficient permissions to access the current directory.\n ///\n+/// [`PathBuf`]: ../../std/path/struct.PathBuf.html\n+/// [`Err`]: ../../std/result/enum.Result.html#method.err\n+///\n /// # Examples\n ///\n /// ```\n@@ -397,15 +400,19 @@ pub struct JoinPathsError {\n     inner: os_imp::JoinPathsError\n }\n \n-/// Joins a collection of `Path`s appropriately for the `PATH`\n+/// Joins a collection of [`Path`]s appropriately for the `PATH`\n /// environment variable.\n ///\n-/// Returns an `OsString` on success.\n+/// Returns an [`OsString`] on success.\n ///\n-/// Returns an `Err` (containing an error message) if one of the input\n-/// `Path`s contains an invalid character for constructing the `PATH`\n+/// Returns an [`Err`][err] (containing an error message) if one of the input\n+/// [`Path`]s contains an invalid character for constructing the `PATH`\n /// variable (a double quote on Windows or a colon on Unix).\n ///\n+/// [`Path`]: ../../std/path/struct.Path.html\n+/// [`OsString`]: ../../std/ffi/struct.OsString.html\n+/// [err]: ../../std/result/enum.Result.html#variant.Err\n+///\n /// # Examples\n ///\n /// ```"}, {"sha": "3a552c060a9b9066d0031e1007213b15561184e4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -261,6 +261,8 @@\n #![feature(generic_param_attrs)]\n #![feature(hashmap_hasher)]\n #![feature(heap_api)]\n+#![feature(i128)]\n+#![feature(i128_type)]\n #![feature(inclusive_range)]\n #![feature(int_error_internals)]\n #![feature(integer_atomics)]\n@@ -304,7 +306,6 @@\n #![feature(unwind_attributes)]\n #![feature(vec_push_all)]\n #![feature(zero_one)]\n-#![feature(i128)]\n #![cfg_attr(test, feature(update_panic_count))]\n \n // Explicitly import the prelude. The compiler uses this same unstable attribute\n@@ -463,9 +464,6 @@ mod panicking;\n mod rand;\n mod memchr;\n \n-// This module just defines per-platform native library dependencies\n-mod rtdeps;\n-\n // The runtime entry point and a few unstable public functions used by the\n // compiler\n pub mod rt;"}, {"sha": "84c4acb8d9247c4365ca33db13653297f405a914", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -456,6 +456,13 @@ impl From<SocketAddrV6> for SocketAddr {\n     }\n }\n \n+#[stable(feature = \"addr_from_into_ip\", since = \"1.17.0\")]\n+impl<I: Into<IpAddr>> From<(I, u16)> for SocketAddr {\n+    fn from(pieces: (I, u16)) -> SocketAddr {\n+        SocketAddr::new(pieces.0.into(), pieces.1)\n+    }\n+}\n+\n impl<'a> IntoInner<(*const c::sockaddr, c::socklen_t)> for &'a SocketAddr {\n     fn into_inner(self) -> (*const c::sockaddr, c::socklen_t) {\n         match *self {"}, {"sha": "5d6e8d319d7b259f31d3e785ad9a9ea2484d038a", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 58, "deletions": 4, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -656,6 +656,13 @@ impl From<[u8; 4]> for Ipv4Addr {\n     }\n }\n \n+#[stable(feature = \"ip_from_slice\", since = \"1.17.0\")]\n+impl From<[u8; 4]> for IpAddr {\n+    fn from(octets: [u8; 4]) -> IpAddr {\n+        IpAddr::V4(Ipv4Addr::from(octets))\n+    }\n+}\n+\n impl Ipv6Addr {\n     /// Creates a new IPv6 address from eight 16-bit segments.\n     ///\n@@ -1149,6 +1156,26 @@ impl FromInner<c::in6_addr> for Ipv6Addr {\n     }\n }\n \n+#[unstable(feature = \"i128\", issue = \"35118\")]\n+impl From<Ipv6Addr> for u128 {\n+    fn from(ip: Ipv6Addr) -> u128 {\n+        let ip = ip.segments();\n+        ((ip[0] as u128) << 112) + ((ip[1] as u128) << 96) + ((ip[2] as u128) << 80) +\n+            ((ip[3] as u128) << 64) + ((ip[4] as u128) << 48) + ((ip[5] as u128) << 32) +\n+            ((ip[6] as u128) << 16) + (ip[7] as u128)\n+    }\n+}\n+#[unstable(feature = \"i128\", issue = \"35118\")]\n+impl From<u128> for Ipv6Addr {\n+    fn from(ip: u128) -> Ipv6Addr {\n+        Ipv6Addr::new(\n+            (ip >> 112) as u16, (ip >> 96) as u16, (ip >> 80) as u16,\n+            (ip >> 64) as u16, (ip >> 48) as u16, (ip >> 32) as u16,\n+            (ip >> 16) as u16, ip as u16,\n+        )\n+    }\n+}\n+\n #[stable(feature = \"ipv6_from_octets\", since = \"1.9.0\")]\n impl From<[u8; 16]> for Ipv6Addr {\n     fn from(octets: [u8; 16]) -> Ipv6Addr {\n@@ -1166,6 +1193,21 @@ impl From<[u16; 8]> for Ipv6Addr {\n     }\n }\n \n+\n+#[stable(feature = \"ip_from_slice\", since = \"1.17.0\")]\n+impl From<[u8; 16]> for IpAddr {\n+    fn from(octets: [u8; 16]) -> IpAddr {\n+        IpAddr::V6(Ipv6Addr::from(octets))\n+    }\n+}\n+\n+#[stable(feature = \"ip_from_slice\", since = \"1.17.0\")]\n+impl From<[u16; 8]> for IpAddr {\n+    fn from(segments: [u16; 8]) -> IpAddr {\n+        IpAddr::V6(Ipv6Addr::from(segments))\n+    }\n+}\n+\n // Tests for this module\n #[cfg(all(test, not(target_os = \"emscripten\")))]\n mod tests {\n@@ -1500,14 +1542,26 @@ mod tests {\n \n     #[test]\n     fn test_ipv4_to_int() {\n-        let a = Ipv4Addr::new(127, 0, 0, 1);\n-        assert_eq!(u32::from(a), 2130706433);\n+        let a = Ipv4Addr::new(0x11, 0x22, 0x33, 0x44);\n+        assert_eq!(u32::from(a), 0x11223344);\n     }\n \n     #[test]\n     fn test_int_to_ipv4() {\n-        let a = Ipv4Addr::new(127, 0, 0, 1);\n-        assert_eq!(Ipv4Addr::from(2130706433), a);\n+        let a = Ipv4Addr::new(0x11, 0x22, 0x33, 0x44);\n+        assert_eq!(Ipv4Addr::from(0x11223344), a);\n+    }\n+\n+    #[test]\n+    fn test_ipv6_to_int() {\n+        let a = Ipv6Addr::new(0x1122, 0x3344, 0x5566, 0x7788, 0x99aa, 0xbbcc, 0xddee, 0xff11);\n+        assert_eq!(u128::from(a), 0x112233445566778899aabbccddeeff11u128);\n+    }\n+\n+    #[test]\n+    fn test_int_to_ipv6() {\n+        let a = Ipv6Addr::new(0x1122, 0x3344, 0x5566, 0x7788, 0x99aa, 0xbbcc, 0xddee, 0xff11);\n+        assert_eq!(Ipv6Addr::from(0x112233445566778899aabbccddeeff11u128), a);\n     }\n \n     #[test]"}, {"sha": "d76e8816ca45f3932b37baf92a35fcdf8fca5028", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -311,12 +311,12 @@ impl<'a> Location<'a> {\n }\n \n fn default_hook(info: &PanicInfo) {\n-    #[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+    #[cfg(feature = \"backtrace\")]\n     use sys_common::backtrace;\n \n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n-    #[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+    #[cfg(feature = \"backtrace\")]\n     let log_backtrace = {\n         let panics = update_panic_count(0);\n \n@@ -341,7 +341,7 @@ fn default_hook(info: &PanicInfo) {\n         let _ = writeln!(err, \"thread '{}' panicked at '{}', {}:{}\",\n                          name, msg, file, line);\n \n-        #[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+        #[cfg(feature = \"backtrace\")]\n         {\n             use sync::atomic::{AtomicBool, Ordering};\n "}, {"sha": "07b43cd89ac711f82d7aeba246184735da033554", "filename": "src/libstd/path.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1265,6 +1265,13 @@ impl Borrow<Path> for PathBuf {\n     }\n }\n \n+#[stable(feature = \"default_for_pathbuf\", since = \"1.16.0\")]\n+impl Default for PathBuf {\n+    fn default() -> Self {\n+        PathBuf::new()\n+    }\n+}\n+\n #[stable(feature = \"cow_from_path\", since = \"1.6.0\")]\n impl<'a> From<&'a Path> for Cow<'a, Path> {\n     #[inline]"}, {"sha": "4ff35738b50fbd085657154c517563fbab6e991c", "filename": "src/libstd/process.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -844,9 +844,9 @@ impl Child {\n     /// guaranteed to repeatedly return a successful exit status so long as the\n     /// child has already exited.\n     ///\n-    /// If the child has exited, then `Ok(status)` is returned. If the exit\n-    /// status is not available at this time then an error is returned with the\n-    /// error kind `WouldBlock`. If an error occurs, then that error is returned.\n+    /// If the child has exited, then `Ok(Some(status))` is returned. If the\n+    /// exit status is not available at this time then `Ok(None)` is returned.\n+    /// If an error occurs, then that error is returned.\n     ///\n     /// Note that unlike `wait`, this function will not attempt to drop stdin.\n     ///\n@@ -857,14 +857,13 @@ impl Child {\n     /// ```no_run\n     /// #![feature(process_try_wait)]\n     ///\n-    /// use std::io;\n     /// use std::process::Command;\n     ///\n     /// let mut child = Command::new(\"ls\").spawn().unwrap();\n     ///\n     /// match child.try_wait() {\n-    ///     Ok(status) => println!(\"exited with: {}\", status),\n-    ///     Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n+    ///     Ok(Some(status)) => println!(\"exited with: {}\", status),\n+    ///     Ok(None) => {\n     ///         println!(\"status not ready yet, let's really wait\");\n     ///         let res = child.wait();\n     ///         println!(\"result: {:?}\", res);\n@@ -873,8 +872,8 @@ impl Child {\n     /// }\n     /// ```\n     #[unstable(feature = \"process_try_wait\", issue = \"38903\")]\n-    pub fn try_wait(&mut self) -> io::Result<ExitStatus> {\n-        self.handle.try_wait().map(ExitStatus)\n+    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n+        Ok(self.handle.try_wait()?.map(ExitStatus))\n     }\n \n     /// Simultaneously waits for the child to exit and collect all remaining"}, {"sha": "5dc6ee2bc8c660921d7f1cac3062ce41525d0e47", "filename": "src/libstd/rtdeps.rs", "status": "removed", "additions": 0, "deletions": 68, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,68 +0,0 @@\n-// Copyright 2013-2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! This module contains the linkage attributes to all runtime dependencies of\n-//! the standard library This varies per-platform, but these libraries are\n-//! necessary for running libstd.\n-\n-#![cfg(not(cargobuild))]\n-\n-// LLVM implements the `frem` instruction as a call to `fmod`, which lives in\n-// libm. Hence, we must explicitly link to it.\n-//\n-// On Linux, librt and libdl are indirect dependencies via std,\n-// and binutils 2.22+ won't add them automatically\n-#[cfg(all(target_os = \"linux\", not(target_env = \"musl\")))]\n-#[link(name = \"dl\")]\n-#[link(name = \"pthread\")]\n-extern {}\n-\n-#[cfg(target_os = \"android\")]\n-#[link(name = \"dl\")]\n-#[link(name = \"log\")]\n-extern {}\n-\n-#[cfg(target_os = \"freebsd\")]\n-#[link(name = \"execinfo\")]\n-#[link(name = \"pthread\")]\n-extern {}\n-\n-#[cfg(any(target_os = \"dragonfly\",\n-          target_os = \"bitrig\",\n-          target_os = \"netbsd\",\n-          target_os = \"openbsd\"))]\n-#[link(name = \"pthread\")]\n-extern {}\n-\n-#[cfg(target_os = \"solaris\")]\n-#[link(name = \"socket\")]\n-#[link(name = \"posix4\")]\n-#[link(name = \"pthread\")]\n-extern {}\n-\n-// For PNaCl targets, nacl_io is a Pepper wrapper for some IO functions\n-// missing (ie always error) in Newlib.\n-#[cfg(all(target_os = \"nacl\", not(test)))]\n-#[link(name = \"nacl_io\", kind = \"static\")]\n-#[link(name = \"c++\", kind = \"static\")] // for `nacl_io` and EH.\n-#[link(name = \"pthread\", kind = \"static\")]\n-extern {}\n-\n-#[cfg(target_os = \"macos\")]\n-#[link(name = \"System\")]\n-extern {}\n-\n-#[cfg(target_os = \"ios\")]\n-#[link(name = \"System\")]\n-extern {}\n-\n-#[cfg(target_os = \"haiku\")]\n-#[link(name = \"network\")]\n-extern {}"}, {"sha": "60dc03fcf47e2aa7b5f0fed92d54aa493cc2d4e5", "filename": "src/libstd/sys/redox/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fprocess.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -502,17 +502,17 @@ impl Process {\n         Ok(ExitStatus(status as i32))\n     }\n \n-    pub fn try_wait(&mut self) -> io::Result<ExitStatus> {\n+    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n         if let Some(status) = self.status {\n-            return Ok(status)\n+            return Ok(Some(status))\n         }\n         let mut status = 0;\n         let pid = cvt(syscall::waitpid(self.pid, &mut status, syscall::WNOHANG))?;\n         if pid == 0 {\n-            Err(io::Error::from_raw_os_error(syscall::EWOULDBLOCK))\n+            Ok(None)\n         } else {\n             self.status = Some(ExitStatus(status as i32));\n-            Ok(ExitStatus(status as i32))\n+            Ok(Some(ExitStatus(status as i32)))\n         }\n     }\n }"}, {"sha": "6e35a472792c464de35268ebcd4897bb91d333eb", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -189,11 +189,6 @@ mod imp {\n             fn objc_msgSend_ul(obj: NsId, sel: Sel, ...) -> NsId;\n         }\n \n-        #[link(name = \"Foundation\", kind = \"framework\")]\n-        #[link(name = \"objc\")]\n-        #[cfg(not(cargobuild))]\n-        extern {}\n-\n         type Sel = *const libc::c_void;\n         type NsId = *const libc::c_void;\n "}, {"sha": "c57751a01d7c1b6f0293da4c000cd33b51e0dab4", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -33,7 +33,7 @@ pub mod weak;\n \n pub mod args;\n pub mod android;\n-#[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+#[cfg(feature = \"backtrace\")]\n pub mod backtrace;\n pub mod condvar;\n pub mod env;"}, {"sha": "a4536520376e8dfe35795facc1ac4999354c3eab", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -439,6 +439,10 @@ mod tests {\n     #[test]\n     #[cfg_attr(target_os = \"macos\", ignore)]\n     #[cfg_attr(target_os = \"nacl\", ignore)] // no signals on NaCl.\n+    // When run under our current QEMU emulation test suite this test fails,\n+    // although the reason isn't very clear as to why. For now this test is\n+    // ignored there.\n+    #[cfg_attr(target_arch = \"arm\", ignore)]\n     fn test_process_mask() {\n         unsafe {\n             // Test to make sure that a signal mask does not get inherited.\n@@ -471,7 +475,7 @@ mod tests {\n             // Either EOF or failure (EPIPE) is okay.\n             let mut buf = [0; 5];\n             if let Ok(ret) = stdout_read.read(&mut buf) {\n-                assert!(ret == 0);\n+                assert_eq!(ret, 0);\n             }\n \n             t!(cat.wait());"}, {"sha": "0bb2e0c1a83d4469a534469b83ef8c363a08d901", "filename": "src/libstd/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -165,7 +165,7 @@ impl Process {\n         Ok(ExitStatus::new(proc_info.rec.return_code))\n     }\n \n-    pub fn try_wait(&mut self) -> io::Result<ExitStatus> {\n+    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n         use default::Default;\n         use sys::process::magenta::*;\n \n@@ -179,7 +179,7 @@ impl Process {\n             match status {\n                 0 => { }, // Success\n                 x if x == ERR_TIMED_OUT => {\n-                    return Err(io::Error::from(io::ErrorKind::WouldBlock));\n+                    return Ok(None);\n                 },\n                 _ => { panic!(\"Failed to wait on process handle: {}\", status); },\n             }\n@@ -192,7 +192,7 @@ impl Process {\n             return Err(io::Error::new(io::ErrorKind::InvalidData,\n                                       \"Failed to get exit status of process\"));\n         }\n-        Ok(ExitStatus::new(proc_info.rec.return_code))\n+        Ok(Some(ExitStatus::new(proc_info.rec.return_code)))\n     }\n }\n "}, {"sha": "bbc987209e300edf7c9ebde5a1cbf2f02f13b211", "filename": "src/libstd/sys/unix/process/process_unix.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -249,19 +249,19 @@ impl Process {\n         Ok(ExitStatus::new(status))\n     }\n \n-    pub fn try_wait(&mut self) -> io::Result<ExitStatus> {\n+    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n         if let Some(status) = self.status {\n-            return Ok(status)\n+            return Ok(Some(status))\n         }\n         let mut status = 0 as c_int;\n         let pid = cvt(unsafe {\n             libc::waitpid(self.pid, &mut status, libc::WNOHANG)\n         })?;\n         if pid == 0 {\n-            Err(io::Error::from_raw_os_error(libc::EWOULDBLOCK))\n+            Ok(None)\n         } else {\n             self.status = Some(ExitStatus::new(status));\n-            Ok(ExitStatus::new(status))\n+            Ok(Some(ExitStatus::new(status)))\n         }\n     }\n }"}, {"sha": "77ebad4e344c24adbcef0ae199fee1c7a9c8168b", "filename": "src/libstd/sys/unix/rand.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Funix%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Frand.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -257,10 +257,6 @@ mod imp {\n     #[allow(non_upper_case_globals)]\n     const kSecRandomDefault: *const SecRandom = ptr::null();\n \n-    #[link(name = \"Security\", kind = \"framework\")]\n-    #[cfg(not(cargobuild))]\n-    extern {}\n-\n     extern {\n         fn SecRandomCopyBytes(rnd: *const SecRandom,\n                               count: size_t, bytes: *mut u8) -> c_int;"}, {"sha": "e5010ca356449cfcf1c56e2145c3aab7c6c44f22", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -833,13 +833,6 @@ pub struct CONSOLE_READCONSOLE_CONTROL {\n }\n pub type PCONSOLE_READCONSOLE_CONTROL = *mut CONSOLE_READCONSOLE_CONTROL;\n \n-#[link(name = \"ws2_32\")]\n-#[link(name = \"userenv\")]\n-#[link(name = \"shell32\")]\n-#[link(name = \"advapi32\")]\n-#[cfg(not(cargobuild))]\n-extern {}\n-\n extern \"system\" {\n     pub fn WSAStartup(wVersionRequested: WORD,\n                       lpWSAData: LPWSADATA) -> c_int;"}, {"sha": "1afb3728c9d72e7d00d20a153631a312b72302e6", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -340,18 +340,18 @@ impl Process {\n         }\n     }\n \n-    pub fn try_wait(&mut self) -> io::Result<ExitStatus> {\n+    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n         unsafe {\n             match c::WaitForSingleObject(self.handle.raw(), 0) {\n                 c::WAIT_OBJECT_0 => {}\n                 c::WAIT_TIMEOUT => {\n-                    return Err(io::Error::from_raw_os_error(c::WSAEWOULDBLOCK))\n+                    return Ok(None);\n                 }\n                 _ => return Err(io::Error::last_os_error()),\n             }\n             let mut status = 0;\n             cvt(c::GetExitCodeProcess(self.handle.raw(), &mut status))?;\n-            Ok(ExitStatus(status))\n+            Ok(Some(ExitStatus(status)))\n         }\n     }\n "}, {"sha": "0bdbeddb112121b0a015925bc83fc866e4dd0b31", "filename": "src/libstd/sys_common/gnu/libbacktrace.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fgnu%2Flibbacktrace.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -39,9 +39,6 @@ pub fn print(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n                       msg: *const libc::c_char,\n                       errnum: libc::c_int);\n     enum backtrace_state {}\n-    #[link(name = \"backtrace\", kind = \"static\")]\n-    #[cfg(all(not(test), not(cargobuild)))]\n-    extern {}\n \n     extern {\n         fn backtrace_create_state(filename: *const libc::c_char,"}, {"sha": "d4d3365dc0198a8129d08c6d10c28f0e85573de3", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -29,7 +29,7 @@ use sync::Once;\n use sys;\n \n pub mod at_exit_imp;\n-#[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+#[cfg(feature = \"backtrace\")]\n pub mod backtrace;\n pub mod condvar;\n pub mod io;\n@@ -50,7 +50,7 @@ pub use sys::net;\n #[cfg(not(target_os = \"redox\"))]\n pub mod net;\n \n-#[cfg(any(not(cargobuild), feature = \"backtrace\"))]\n+#[cfg(feature = \"backtrace\")]\n #[cfg(any(all(unix, not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"emscripten\"))),\n           all(windows, target_env = \"gnu\")))]\n pub mod gnu;"}, {"sha": "cc0a67b3d2e94b64c46ac60f29deffc5a9deebb0", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -328,6 +328,10 @@ declare_features! (\n \n     // `extern \"msp430-interrupt\" fn()`\n     (active, abi_msp430_interrupt, \"1.16.0\", Some(38487)),\n+\n+    // Used to identify crates that contain sanitizer runtimes\n+    // rustc internal\n+    (active, sanitizer_runtime, \"1.17.0\", None),\n );\n \n declare_features! (\n@@ -647,6 +651,12 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                               contains compiler-rt intrinsics and will never be \\\n                                               stable\",\n                                           cfg_fn!(compiler_builtins))),\n+    (\"sanitizer_runtime\", Whitelisted, Gated(Stability::Unstable,\n+                                             \"sanitizer_runtime\",\n+                                             \"the `#[sanitizer_runtime]` attribute is used to \\\n+                                              identify crates that contain the runtime of a \\\n+                                              sanitizer and will never be stable\",\n+                                             cfg_fn!(sanitizer_runtime))),\n \n     (\"allow_internal_unstable\", Normal, Gated(Stability::Unstable,\n                                               \"allow_internal_unstable\",\n@@ -957,12 +967,11 @@ pub const EXPLAIN_ALLOW_INTERNAL_UNSTABLE: &'static str =\n     \"allow_internal_unstable side-steps feature gating and stability checks\";\n \n pub const EXPLAIN_CUSTOM_DERIVE: &'static str =\n-    \"`#[derive]` for custom traits is not stable enough for use. It is deprecated and will \\\n-     be removed in v1.15\";\n+    \"`#[derive]` for custom traits is deprecated and will be removed in the future.\";\n \n pub const EXPLAIN_DEPR_CUSTOM_DERIVE: &'static str =\n-    \"`#[derive]` for custom traits is deprecated and will be removed in v1.15. Prefer using \\\n-     procedural macro custom derive\";\n+    \"`#[derive]` for custom traits is deprecated and will be removed in the future. \\\n+    Prefer using procedural macro custom derive.\";\n \n pub const EXPLAIN_DERIVE_UNDERSCORE: &'static str =\n     \"attributes of the form `#[derive_*]` are reserved for the compiler\";"}, {"sha": "1d67c2a2c2b74023c8f1fa1c7c5e4dc4ca8d9e6b", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 89, "deletions": 78, "changes": 167, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -60,11 +60,95 @@\n //! by two zero-length breaks. The algorithm will try its best to fit it on a\n //! line (which it can't) and so naturally place the content on its own line to\n //! avoid combining it with other lines and making matters even worse.\n+//!\n+//! # Explanation\n+//!\n+//! In case you do not have the paper, here is an explanation of what's going\n+//! on.\n+//!\n+//! There is a stream of input tokens flowing through this printer.\n+//!\n+//! The printer buffers up to 3N tokens inside itself, where N is linewidth.\n+//! Yes, linewidth is chars and tokens are multi-char, but in the worst\n+//! case every token worth buffering is 1 char long, so it's ok.\n+//!\n+//! Tokens are String, Break, and Begin/End to delimit blocks.\n+//!\n+//! Begin tokens can carry an offset, saying \"how far to indent when you break\n+//! inside here\", as well as a flag indicating \"consistent\" or \"inconsistent\"\n+//! breaking. Consistent breaking means that after the first break, no attempt\n+//! will be made to flow subsequent breaks together onto lines. Inconsistent\n+//! is the opposite. Inconsistent breaking example would be, say:\n+//!\n+//! ```\n+//! foo(hello, there, good, friends)\n+//! ```\n+//!\n+//! breaking inconsistently to become\n+//!\n+//! ```\n+//! foo(hello, there\n+//!     good, friends);\n+//! ```\n+//!\n+//! whereas a consistent breaking would yield:\n+//!\n+//! ```\n+//! foo(hello,\n+//!     there\n+//!     good,\n+//!     friends);\n+//! ```\n+//!\n+//! That is, in the consistent-break blocks we value vertical alignment\n+//! more than the ability to cram stuff onto a line. But in all cases if it\n+//! can make a block a one-liner, it'll do so.\n+//!\n+//! Carrying on with high-level logic:\n+//!\n+//! The buffered tokens go through a ring-buffer, 'tokens'. The 'left' and\n+//! 'right' indices denote the active portion of the ring buffer as well as\n+//! describing hypothetical points-in-the-infinite-stream at most 3N tokens\n+//! apart (i.e. \"not wrapped to ring-buffer boundaries\"). The paper will switch\n+//! between using 'left' and 'right' terms to denote the wrapped-to-ring-buffer\n+//! and point-in-infinite-stream senses freely.\n+//!\n+//! There is a parallel ring buffer, 'size', that holds the calculated size of\n+//! each token. Why calculated? Because for Begin/End pairs, the \"size\"\n+//! includes everything between the pair. That is, the \"size\" of Begin is\n+//! actually the sum of the sizes of everything between Begin and the paired\n+//! End that follows. Since that is arbitrarily far in the future, 'size' is\n+//! being rewritten regularly while the printer runs; in fact most of the\n+//! machinery is here to work out 'size' entries on the fly (and give up when\n+//! they're so obviously over-long that \"infinity\" is a good enough\n+//! approximation for purposes of line breaking).\n+//!\n+//! The \"input side\" of the printer is managed as an abstract process called\n+//! SCAN, which uses 'scan_stack', to manage calculating 'size'. SCAN is, in\n+//! other words, the process of calculating 'size' entries.\n+//!\n+//! The \"output side\" of the printer is managed by an abstract process called\n+//! PRINT, which uses 'print_stack', 'margin' and 'space' to figure out what to\n+//! do with each token/size pair it consumes as it goes. It's trying to consume\n+//! the entire buffered window, but can't output anything until the size is >=\n+//! 0 (sizes are set to negative while they're pending calculation).\n+//!\n+//! So SCAN takes input and buffers tokens and pending calculations, while\n+//! PRINT gobbles up completed calculations and tokens from the buffer. The\n+//! theory is that the two can never get more than 3N tokens apart, because\n+//! once there's \"obviously\" too much data to fit on a line, in a size\n+//! calculation, SCAN will write \"infinity\" to the size and let PRINT consume\n+//! it.\n+//!\n+//! In this implementation (following the paper, again) the SCAN process is\n+//! the method called `Printer::pretty_print`, and the 'PRINT' process is the method\n+//! called `Printer::print`.\n \n use std::collections::VecDeque;\n use std::fmt;\n use std::io;\n \n+/// How to break. Described in more detail in the module docs.\n #[derive(Clone, Copy, PartialEq)]\n pub enum Breaks {\n     Consistent,\n@@ -177,81 +261,6 @@ pub fn mk_printer<'a>(out: Box<io::Write+'a>, linewidth: usize) -> Printer<'a> {\n     }\n }\n \n-\n-/// In case you do not have the paper, here is an explanation of what's going\n-/// on.\n-///\n-/// There is a stream of input tokens flowing through this printer.\n-///\n-/// The printer buffers up to 3N tokens inside itself, where N is linewidth.\n-/// Yes, linewidth is chars and tokens are multi-char, but in the worst\n-/// case every token worth buffering is 1 char long, so it's ok.\n-///\n-/// Tokens are String, Break, and Begin/End to delimit blocks.\n-///\n-/// Begin tokens can carry an offset, saying \"how far to indent when you break\n-/// inside here\", as well as a flag indicating \"consistent\" or \"inconsistent\"\n-/// breaking. Consistent breaking means that after the first break, no attempt\n-/// will be made to flow subsequent breaks together onto lines. Inconsistent\n-/// is the opposite. Inconsistent breaking example would be, say:\n-///\n-///  foo(hello, there, good, friends)\n-///\n-/// breaking inconsistently to become\n-///\n-///  foo(hello, there\n-///      good, friends);\n-///\n-/// whereas a consistent breaking would yield:\n-///\n-///  foo(hello,\n-///      there\n-///      good,\n-///      friends);\n-///\n-/// That is, in the consistent-break blocks we value vertical alignment\n-/// more than the ability to cram stuff onto a line. But in all cases if it\n-/// can make a block a one-liner, it'll do so.\n-///\n-/// Carrying on with high-level logic:\n-///\n-/// The buffered tokens go through a ring-buffer, 'tokens'. The 'left' and\n-/// 'right' indices denote the active portion of the ring buffer as well as\n-/// describing hypothetical points-in-the-infinite-stream at most 3N tokens\n-/// apart (i.e. \"not wrapped to ring-buffer boundaries\"). The paper will switch\n-/// between using 'left' and 'right' terms to denote the wrapped-to-ring-buffer\n-/// and point-in-infinite-stream senses freely.\n-///\n-/// There is a parallel ring buffer, 'size', that holds the calculated size of\n-/// each token. Why calculated? Because for Begin/End pairs, the \"size\"\n-/// includes everything between the pair. That is, the \"size\" of Begin is\n-/// actually the sum of the sizes of everything between Begin and the paired\n-/// End that follows. Since that is arbitrarily far in the future, 'size' is\n-/// being rewritten regularly while the printer runs; in fact most of the\n-/// machinery is here to work out 'size' entries on the fly (and give up when\n-/// they're so obviously over-long that \"infinity\" is a good enough\n-/// approximation for purposes of line breaking).\n-///\n-/// The \"input side\" of the printer is managed as an abstract process called\n-/// SCAN, which uses 'scan_stack', to manage calculating 'size'. SCAN is, in\n-/// other words, the process of calculating 'size' entries.\n-///\n-/// The \"output side\" of the printer is managed by an abstract process called\n-/// PRINT, which uses 'print_stack', 'margin' and 'space' to figure out what to\n-/// do with each token/size pair it consumes as it goes. It's trying to consume\n-/// the entire buffered window, but can't output anything until the size is >=\n-/// 0 (sizes are set to negative while they're pending calculation).\n-///\n-/// So SCAN takes input and buffers tokens and pending calculations, while\n-/// PRINT gobbles up completed calculations and tokens from the buffer. The\n-/// theory is that the two can never get more than 3N tokens apart, because\n-/// once there's \"obviously\" too much data to fit on a line, in a size\n-/// calculation, SCAN will write \"infinity\" to the size and let PRINT consume\n-/// it.\n-///\n-/// In this implementation (following the paper, again) the SCAN process is\n-/// the method called 'pretty_print', and the 'PRINT' process is the method\n-/// called 'print'.\n pub struct Printer<'a> {\n     pub out: Box<io::Write+'a>,\n     buf_len: usize,\n@@ -292,7 +301,7 @@ impl<'a> Printer<'a> {\n     pub fn last_token(&mut self) -> Token {\n         self.buf[self.right].token.clone()\n     }\n-    // be very careful with this!\n+    /// be very careful with this!\n     pub fn replace_last_token(&mut self, t: Token) {\n         self.buf[self.right].token = t;\n     }\n@@ -571,19 +580,21 @@ impl<'a> Printer<'a> {\n }\n \n // Convenience functions to talk to the printer.\n-//\n-// \"raw box\"\n+\n+/// \"raw box\"\n pub fn rbox(p: &mut Printer, indent: usize, b: Breaks) -> io::Result<()> {\n     p.pretty_print(Token::Begin(BeginToken {\n         offset: indent as isize,\n         breaks: b\n     }))\n }\n \n+/// Inconsistent breaking box\n pub fn ibox(p: &mut Printer, indent: usize) -> io::Result<()> {\n     rbox(p, indent, Breaks::Inconsistent)\n }\n \n+/// Consistent breaking box\n pub fn cbox(p: &mut Printer, indent: usize) -> io::Result<()> {\n     rbox(p, indent, Breaks::Consistent)\n }"}, {"sha": "f18b694d3d0c70e5feb861718c31b1cee5f161ba", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -11,8 +11,6 @@\n use std::env;\n \n fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n-\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n \n     if target.contains(\"linux\") {"}, {"sha": "7fb58373251a515be8a104da34b7af5829918597", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -240,34 +240,3 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n     }\n }\n } // cfg_if!\n-\n-#[cfg_attr(any(all(target_os = \"linux\", not(target_env = \"musl\")),\n-               target_os = \"freebsd\",\n-               target_os = \"solaris\",\n-               target_os = \"haiku\",\n-               all(target_os = \"linux\",\n-                   target_env = \"musl\",\n-                   not(target_arch = \"x86\"),\n-                   not(target_arch = \"x86_64\"))),\n-           link(name = \"gcc_s\"))]\n-#[cfg_attr(all(target_os = \"linux\",\n-               target_env = \"musl\",\n-               any(target_arch = \"x86\", target_arch = \"x86_64\"),\n-               not(test)),\n-           link(name = \"unwind\", kind = \"static\"))]\n-#[cfg_attr(target_os = \"fuchsia\",\n-           link(name = \"unwind\"))]\n-#[cfg_attr(any(target_os = \"android\", target_os = \"openbsd\"),\n-           link(name = \"gcc\"))]\n-#[cfg_attr(all(target_os = \"netbsd\", not(target_vendor = \"rumprun\")),\n-           link(name = \"gcc\"))]\n-#[cfg_attr(all(target_os = \"netbsd\", target_vendor = \"rumprun\"),\n-           link(name = \"unwind\"))]\n-#[cfg_attr(target_os = \"dragonfly\",\n-           link(name = \"gcc_pic\"))]\n-#[cfg_attr(target_os = \"bitrig\",\n-           link(name = \"c++abi\"))]\n-#[cfg_attr(all(target_os = \"windows\", target_env = \"gnu\"),\n-           link(name = \"gcc_eh\"))]\n-#[cfg(not(cargobuild))]\n-extern \"C\" {}"}, {"sha": "db96079d3e916e1fb789fe88bdab6a39a90de3cb", "filename": "src/rustc/std_shim/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Frustc%2Fstd_shim%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Frustc%2Fstd_shim%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fstd_shim%2FCargo.toml?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -35,8 +35,12 @@ core = { path = \"../../libcore\" }\n \n # Reexport features from std\n [features]\n+asan = [\"std/asan\"]\n backtrace = [\"std/backtrace\"]\n debug-jemalloc = [\"std/debug-jemalloc\"]\n jemalloc = [\"std/jemalloc\"]\n force_alloc_system = [\"std/force_alloc_system\"]\n+lsan = [\"std/lsan\"]\n+msan = [\"std/msan\"]\n panic-unwind = [\"std/panic-unwind\"]\n+tsan = [\"std/tsan\"]"}, {"sha": "f3b52b71b99c12655dfcdbc9fa86294e7af5551e", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -148,6 +148,12 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::ZExt;\n   case InReg:\n     return Attribute::InReg;\n+  case SanitizeThread:\n+    return Attribute::SanitizeThread;\n+  case SanitizeAddress:\n+    return Attribute::SanitizeAddress;\n+  case SanitizeMemory:\n+    return Attribute::SanitizeMemory;\n   }\n   llvm_unreachable(\"bad AttributeKind\");\n }\n@@ -513,7 +519,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateFunction(\n \n extern \"C\" LLVMRustMetadataRef\n LLVMRustDIBuilderCreateBasicType(LLVMRustDIBuilderRef Builder, const char *Name,\n-                                 uint64_t SizeInBits, uint64_t AlignInBits,\n+                                 uint64_t SizeInBits, uint32_t AlignInBits,\n                                  unsigned Encoding) {\n   return wrap(Builder->createBasicType(Name, SizeInBits,\n #if LLVM_VERSION_LE(3, 9)\n@@ -524,15 +530,15 @@ LLVMRustDIBuilderCreateBasicType(LLVMRustDIBuilderRef Builder, const char *Name,\n \n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreatePointerType(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef PointeeTy,\n-    uint64_t SizeInBits, uint64_t AlignInBits, const char *Name) {\n+    uint64_t SizeInBits, uint32_t AlignInBits, const char *Name) {\n   return wrap(Builder->createPointerType(unwrapDI<DIType>(PointeeTy),\n                                          SizeInBits, AlignInBits, Name));\n }\n \n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStructType(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n     LLVMRustMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n-    uint64_t AlignInBits, LLVMRustDIFlags Flags,\n+    uint32_t AlignInBits, LLVMRustDIFlags Flags,\n     LLVMRustMetadataRef DerivedFrom, LLVMRustMetadataRef Elements,\n     unsigned RunTimeLang, LLVMRustMetadataRef VTableHolder,\n     const char *UniqueId) {\n@@ -546,7 +552,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStructType(\n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateMemberType(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n     LLVMRustMetadataRef File, unsigned LineNo, uint64_t SizeInBits,\n-    uint64_t AlignInBits, uint64_t OffsetInBits, LLVMRustDIFlags Flags,\n+    uint32_t AlignInBits, uint64_t OffsetInBits, LLVMRustDIFlags Flags,\n     LLVMRustMetadataRef Ty) {\n   return wrap(Builder->createMemberType(unwrapDI<DIDescriptor>(Scope), Name,\n                                         unwrapDI<DIFile>(File), LineNo,\n@@ -573,7 +579,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Context, const char *Name,\n     const char *LinkageName, LLVMRustMetadataRef File, unsigned LineNo,\n     LLVMRustMetadataRef Ty, bool IsLocalToUnit, LLVMValueRef V,\n-    LLVMRustMetadataRef Decl = nullptr, uint64_t AlignInBits = 0) {\n+    LLVMRustMetadataRef Decl = nullptr, uint32_t AlignInBits = 0) {\n   Constant *InitVal = cast<Constant>(unwrap(V));\n \n #if LLVM_VERSION_GE(4, 0)\n@@ -612,7 +618,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateVariable(\n     LLVMRustDIBuilderRef Builder, unsigned Tag, LLVMRustMetadataRef Scope,\n     const char *Name, LLVMRustMetadataRef File, unsigned LineNo,\n     LLVMRustMetadataRef Ty, bool AlwaysPreserve, LLVMRustDIFlags Flags,\n-    unsigned ArgNo, uint64_t AlignInBits) {\n+    unsigned ArgNo, uint32_t AlignInBits) {\n #if LLVM_VERSION_GE(3, 8)\n   if (Tag == 0x100) { // DW_TAG_auto_variable\n     return wrap(Builder->createAutoVariable(\n@@ -637,7 +643,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateVariable(\n \n extern \"C\" LLVMRustMetadataRef\n LLVMRustDIBuilderCreateArrayType(LLVMRustDIBuilderRef Builder, uint64_t Size,\n-                                 uint64_t AlignInBits, LLVMRustMetadataRef Ty,\n+                                 uint32_t AlignInBits, LLVMRustMetadataRef Ty,\n                                  LLVMRustMetadataRef Subscripts) {\n   return wrap(\n       Builder->createArrayType(Size, AlignInBits, unwrapDI<DIType>(Ty),\n@@ -646,7 +652,7 @@ LLVMRustDIBuilderCreateArrayType(LLVMRustDIBuilderRef Builder, uint64_t Size,\n \n extern \"C\" LLVMRustMetadataRef\n LLVMRustDIBuilderCreateVectorType(LLVMRustDIBuilderRef Builder, uint64_t Size,\n-                                  uint64_t AlignInBits, LLVMRustMetadataRef Ty,\n+                                  uint32_t AlignInBits, LLVMRustMetadataRef Ty,\n                                   LLVMRustMetadataRef Subscripts) {\n   return wrap(\n       Builder->createVectorType(Size, AlignInBits, unwrapDI<DIType>(Ty),\n@@ -687,7 +693,7 @@ LLVMRustDIBuilderCreateEnumerator(LLVMRustDIBuilderRef Builder,\n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateEnumerationType(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n     LLVMRustMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n-    uint64_t AlignInBits, LLVMRustMetadataRef Elements,\n+    uint32_t AlignInBits, LLVMRustMetadataRef Elements,\n     LLVMRustMetadataRef ClassTy) {\n   return wrap(Builder->createEnumerationType(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,\n@@ -698,7 +704,7 @@ extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateEnumerationType(\n extern \"C\" LLVMRustMetadataRef LLVMRustDIBuilderCreateUnionType(\n     LLVMRustDIBuilderRef Builder, LLVMRustMetadataRef Scope, const char *Name,\n     LLVMRustMetadataRef File, unsigned LineNumber, uint64_t SizeInBits,\n-    uint64_t AlignInBits, LLVMRustDIFlags Flags, LLVMRustMetadataRef Elements,\n+    uint32_t AlignInBits, LLVMRustDIFlags Flags, LLVMRustMetadataRef Elements,\n     unsigned RunTimeLang, const char *UniqueId) {\n   return wrap(Builder->createUnionType(\n       unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNumber,"}, {"sha": "0baf5528e9356574397864719da3747f44ed98a8", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -98,6 +98,9 @@ enum LLVMRustAttribute {\n   UWTable = 17,\n   ZExt = 18,\n   InReg = 19,\n+  SanitizeThread = 20,\n+  SanitizeAddress = 21,\n+  SanitizeMemory = 22,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "a18641d824691534bd1934a1cef8969ef724b0dc", "filename": "src/test/compile-fail/feature-gate-sanitizer-runtime.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Ffeature-gate-sanitizer-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Ffeature-gate-sanitizer-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-sanitizer-runtime.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n-    println!(\"cargo:rustc-cfg=cargobuild\");\n-}\n+#![sanitizer_runtime] //~ ERROR the `#[sanitizer_runtime]` attribute is\n+\n+fn main() {}", "previous_filename": "src/tools/compiletest/build.rs"}, {"sha": "346fae11070e15b91e8ef1c8317bda7cf3287292", "filename": "src/test/compile-fail/issue-12187-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12187-1.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -14,7 +14,6 @@ fn new<T>() -> &'static T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~^ ERROR type annotations needed [E0282]\n     //~| NOTE cannot infer type for `_`\n-    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "848174d6fe1e057e1670c5e4d6e4e3161416e038", "filename": "src/test/compile-fail/issue-12187-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12187-2.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -14,7 +14,6 @@ fn new<'r, T>() -> &'r T {\n \n fn main() {\n     let &v = new();\n-    //~^ ERROR unable to infer enough type information about `_` [E0282]\n+    //~^ ERROR type annotations needed [E0282]\n     //~| NOTE cannot infer type for `_`\n-    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "ecf81c8af17f61018f4028cf2c0306ffa1a56876", "filename": "src/test/compile-fail/issue-16966.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-16966.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-16966.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16966.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:type annotations or generic parameter binding required\n+// error-pattern:type annotations needed\n fn main() {\n     panic!(\n         std::default::Default::default()"}, {"sha": "b55863f0dda7af14a55354c721e5c97046a42531", "filename": "src/test/compile-fail/issue-17551.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -13,6 +13,6 @@ use std::marker;\n struct B<T>(marker::PhantomData<T>);\n \n fn main() {\n-    let foo = B(marker::PhantomData); //~ ERROR unable to infer enough type information\n+    let foo = B(marker::PhantomData); //~ ERROR type annotations needed\n     let closure = || foo;\n }"}, {"sha": "8991eded3d6b87d9be86a1b3c4d6d1bacdc46329", "filename": "src/test/compile-fail/issue-18159.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-18159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-18159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18159.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    let x; //~ ERROR unable to infer enough type information\n+    let x; //~ ERROR type annotations needed\n }"}, {"sha": "4dfad4ee3c385d25b164a94393d4100806a18122", "filename": "src/test/compile-fail/issue-23041.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23041.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -15,5 +15,4 @@ fn main()\n     let b:Box<Any> = Box::new(bar as fn(_)->_);\n     b.downcast_ref::<fn(_)->_>(); //~ ERROR E0282\n                                   //~| NOTE cannot infer type for `_`\n-                                  //~| NOTE type annotations or generic parameter binding required\n }"}, {"sha": "28109747b755747db465d323382a6aec6fda0822", "filename": "src/test/compile-fail/issue-23046.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23046.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -25,6 +25,6 @@ pub fn let_<'var, VAR, F: for<'v: 'var> Fn(Expr<'v, VAR>) -> Expr<'v, VAR>>\n \n fn main() {\n     let ex = |x| {\n-        let_(add(x,x), |y| { //~ ERROR unable to infer enough type information about `VAR`\n+        let_(add(x,x), |y| { //~ ERROR type annotations needed\n             let_(add(x, x), |x|x)})};\n }"}, {"sha": "a7232781f6fbcfc710796b5b2de900f64157ccb4", "filename": "src/test/compile-fail/issue-24013.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-24013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-24013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24013.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -13,5 +13,5 @@ fn main() {\n     let a = 1;\n     let b = 2;\n     unsafe {swap::<&mut _>(transmute(&a), transmute(&b))};\n-    //~^ ERROR unable to infer enough type information about `_`\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "78d96398b958710938f672921dc48ea45c8c3008", "filename": "src/test/compile-fail/issue-27433.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-27433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-27433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27433.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let foo = 42u32;\n+    const FOO : u32 = foo;\n+                   //~^ ERROR attempt to use a non-constant value in a constant\n+}"}, {"sha": "ebfa4975d4d75c7ba77b1b444f20d243ac79e5f3", "filename": "src/test/compile-fail/issue-5062.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn main() { format!(\"{:?}\", None); }\n-    //~^ ERROR unable to infer enough type information about `T` [E0282]\n+    //~^ ERROR type annotations needed [E0282]"}, {"sha": "87cf2b3f740c1c7528a5b47b6c0a3bc311b7d345", "filename": "src/test/compile-fail/issue-6458-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -11,5 +11,5 @@\n fn main() {\n     // Unconstrained type:\n     format!(\"{:?}\", None);\n-    //~^ ERROR unable to infer enough type information about `T` [E0282]\n+    //~^ ERROR type annotations needed [E0282]\n }"}, {"sha": "1503da2baa73d24af5146d0f41337c97c30eaef7", "filename": "src/test/compile-fail/issue-6458-3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-3.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -12,7 +12,6 @@ use std::mem;\n \n fn main() {\n     mem::transmute(0);\n-    //~^ ERROR unable to infer enough type information about `U` [E0282]\n+    //~^ ERROR type annotations needed [E0282]\n     //~| NOTE cannot infer type for `U`\n-    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "db4d4e76c11c9ae26a91b738678d6cb99786788d", "filename": "src/test/compile-fail/issue-6458.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -17,9 +17,8 @@ pub fn foo<State>(_: TypeWithState<State>) {}\n \n pub fn bar() {\n    foo(TypeWithState(marker::PhantomData));\n-   //~^ ERROR unable to infer enough type information about `State` [E0282]\n+   //~^ ERROR type annotations needed [E0282]\n    //~| NOTE cannot infer type for `State`\n-   //~| NOTE type annotations or generic parameter binding\n }\n \n fn main() {"}, {"sha": "fdd89058fd3973498140ded97fe2f7b3d1c2d43c", "filename": "src/test/compile-fail/issue-7813.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7813.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let v = &[];\n-    let it = v.iter(); //~ ERROR unable to infer enough type information about `T` [E0282]\n+    let it = v.iter(); //~ ERROR type annotations needed [E0282]\n                        //~| NOTE cannot infer type for `T`\n-                       //~| NOTE type annotations or generic parameter binding\n+                       //~| NOTE consider giving `it` a type\n }"}, {"sha": "608b1eb0872ad8243f502781da1fd75496474fa7", "filename": "src/test/compile-fail/lint-ctypes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -29,6 +29,9 @@ pub type RustBadRet = extern fn() -> Box<u32>;\n pub type CVoidRet = ();\n pub struct Foo;\n \n+#[repr(C)]\n+pub struct ZeroSizeWithPhantomData(::std::marker::PhantomData<i32>);\n+\n extern {\n     pub fn ptr_type1(size: *const Foo); //~ ERROR: found struct without\n     pub fn ptr_type2(size: *const Foo); //~ ERROR: found struct without\n@@ -40,6 +43,9 @@ extern {\n     pub fn tuple_type(p: (i32, i32)); //~ ERROR found Rust tuple type\n     pub fn tuple_type2(p: I32Pair); //~ ERROR found Rust tuple type\n     pub fn zero_size(p: ZeroSize); //~ ERROR found zero-size struct\n+    pub fn zero_size_phantom(p: ZeroSizeWithPhantomData); //~ ERROR found zero-sized type\n+    pub fn zero_size_phantom_toplevel()\n+        -> ::std::marker::PhantomData<bool>; //~ ERROR: found zero-sized type\n     pub fn fn_type(p: RustFn); //~ ERROR found function pointer with Rust\n     pub fn fn_type2(p: fn()); //~ ERROR found function pointer with Rust\n     pub fn fn_contained(p: RustBadRet); //~ ERROR: found struct without"}, {"sha": "9acf5a52166e07d5f5368516d6bc12eda7739a40", "filename": "src/test/compile-fail/method-ambig-one-trait-unknown-int-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-one-trait-unknown-int-type.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -32,7 +32,7 @@ impl foo for Vec<isize> {\n fn m1() {\n     // we couldn't infer the type of the vector just based on calling foo()...\n     let mut x = Vec::new();\n-    //~^ ERROR unable to infer enough type information about `T` [E0282]\n+    //~^ ERROR type annotations needed [E0282]\n     x.foo();\n }\n "}, {"sha": "2e115431c92c45698946c96b3ca2ec4610c3f897", "filename": "src/test/compile-fail/traits-multidispatch-convert-ambig-dest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-multidispatch-convert-ambig-dest.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -34,9 +34,8 @@ where T : Convert<U>\n \n fn a() {\n     test(22, std::default::Default::default());\n-    //~^ ERROR unable to infer enough type information about `U` [E0282]\n+    //~^ ERROR type annotations needed [E0282]\n     //~| NOTE cannot infer type for `U`\n-    //~| NOTE type annotations or generic parameter binding\n }\n \n fn main() {}"}, {"sha": "52ca91e62f8df56337f2c4f46c18af4fe60fc30d", "filename": "src/test/compile-fail/unconstrained-none.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-none.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -11,7 +11,6 @@\n // Issue #5062\n \n fn main() {\n-    None; //~ ERROR unable to infer enough type information about `T` [E0282]\n+    None; //~ ERROR type annotations needed [E0282]\n           //~| NOTE cannot infer type for `T`\n-          //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "6aaed789716a36d7847a4daf2a845c316b643625", "filename": "src/test/compile-fail/unconstrained-ref.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funconstrained-ref.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -13,7 +13,6 @@ struct S<'a, T:'a> {\n }\n \n fn main() {\n-    S { o: &None }; //~ ERROR unable to infer enough type information about `T` [E0282]\n+    S { o: &None }; //~ ERROR type annotations needed [E0282]\n                     //~| NOTE cannot infer type for `T`\n-                    //~| NOTE type annotations or generic parameter binding\n }"}, {"sha": "de229ded463f68570f5ed0a71866e9dbec44548a", "filename": "src/test/compile-fail/vector-no-ann.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -11,7 +11,7 @@\n \n fn main() {\n     let _foo = Vec::new();\n-    //~^ ERROR unable to infer enough type information about `T` [E0282]\n+    //~^ ERROR type annotations needed [E0282]\n     //~| NOTE cannot infer type for `T`\n-    //~| NOTE type annotations or generic parameter binding\n+    //~| NOTE consider giving `_foo` a type\n }"}, {"sha": "5b53e94825300d2219b3b82e40423787e27af80e", "filename": "src/test/incremental/issue-39569.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fincremental%2Fissue-39569.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fincremental%2Fissue-39569.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-39569.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for a weird corner case in our dep-graph reduction\n+// code. When we solve `CoerceUnsized<Foo>`, we find no impls, so we\n+// don't end up with an edge to any HIR nodes, but it still gets\n+// preserved in the dep graph.\n+\n+// revisions:rpass1 rpass2\n+// compile-flags: -Z query-dep-graph\n+\n+use std::sync::Arc;\n+\n+#[cfg(rpass1)]\n+struct Foo { x: usize }\n+\n+#[cfg(rpass1)]\n+fn main() {\n+    let x: Arc<Foo> = Arc::new(Foo { x: 22 });\n+    let y: Arc<Foo> = x;\n+}\n+\n+#[cfg(rpass2)]\n+struct FooX { x: usize }\n+\n+#[cfg(rpass2)]\n+fn main() {\n+    let x: Arc<FooX> = Arc::new(FooX { x: 22 });\n+    let y: Arc<FooX> = x;\n+}\n+"}, {"sha": "023f2218b87ae7e7afaf853e5d953b53363da95e", "filename": "src/test/run-make/atomic-lock-free/atomic_lock_free.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fatomic-lock-free%2Fatomic_lock_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fatomic-lock-free%2Fatomic_lock_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fatomic-lock-free%2Fatomic_lock_free.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(cfg_target_has_atomic, no_core, intrinsics, lang_items, i128_type)]\n+#![feature(cfg_target_has_atomic, no_core, intrinsics, lang_items)]\n #![crate_type=\"rlib\"]\n #![no_core]\n \n@@ -54,14 +54,6 @@ pub unsafe fn atomic_u64(x: *mut u64) {\n pub unsafe fn atomic_i64(x: *mut i64) {\n     atomic_xadd(x, 1);\n }\n-#[cfg(target_has_atomic = \"128\")]\n-pub unsafe fn atomic_u128(x: *mut u128) {\n-    atomic_xadd(x, 1);\n-}\n-#[cfg(target_has_atomic = \"128\")]\n-pub unsafe fn atomic_i128(x: *mut i128) {\n-    atomic_xadd(x, 1);\n-}\n #[cfg(target_has_atomic = \"ptr\")]\n pub unsafe fn atomic_usize(x: *mut usize) {\n     atomic_xadd(x, 1);"}, {"sha": "5931145f3a47d014033ff1a1744043d4edc0d729", "filename": "src/test/run-make/sanitizer-address/Makefile", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-address%2FMakefile?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,11 @@\n+-include ../tools.mk\n+\n+# NOTE the address sanitizer only supports x86_64 linux\n+ifdef SANITIZER_SUPPORT\n+all:\n+\t$(RUSTC) -g -Z sanitizer=address -Z print-link-args overflow.rs | grep -q librustc_asan\n+\t$(TMPDIR)/overflow 2>&1 | grep -q stack-buffer-overflow\n+else\n+all:\n+\n+endif"}, {"sha": "e35c3873f7eb5a23554fb3a10e40e98face92db5", "filename": "src/test/run-make/sanitizer-address/overflow.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-address%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-address%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-address%2Foverflow.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let xs = [0, 1, 2, 3];\n+    let y = unsafe { *xs.as_ptr().offset(4) };\n+}"}, {"sha": "835d5b0d9d8cd32ba85d449828a5de334f0f9cf1", "filename": "src/test/run-make/sanitizer-dylib/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2FMakefile?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,8 @@\n+-include ../tools.mk\n+\n+ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n+all:\n+\t$(RUSTC) -Z sanitizer=leak --crate-type dylib --target $(TARGET) hello.rs 2>&1 | grep -q 'Only executables and rlibs can be compiled with `-Z sanitizer`'\n+else\n+all:\n+endif"}, {"sha": "41782851a1a6d763c5487a0ae35edc01fb71d6fb", "filename": "src/test/run-make/sanitizer-dylib/hello.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2Fhello.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!(\"Hello, world!\");\n+}"}, {"sha": "6a1ce8bab2fb6c064668dd3792d970a50aa30616", "filename": "src/test/run-make/sanitizer-invalid-target/Makefile", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2FMakefile?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,4 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) -Z sanitizer=leak --target i686-unknown-linux-gnu hello.rs 2>&1 | grep -q 'Sanitizers only work with the `x86_64-unknown-linux-gnu` target'"}, {"sha": "e9e46b7702a804ae77f152ba9bc7a4680c759f51", "filename": "src/test/run-make/sanitizer-invalid-target/hello.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-invalid-target%2Fhello.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(no_core)]\n+#![no_core]\n+#![no_main]"}, {"sha": "f02d948fdc84f58460e9fe409e1cfd541e48bc7e", "filename": "src/test/run-make/sanitizer-leak/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-leak%2FMakefile?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,10 @@\n+-include ../tools.mk\n+\n+ifdef SANITIZER_SUPPORT\n+all:\n+\t$(RUSTC) -C opt-level=1 -g -Z sanitizer=leak -Z print-link-args leak.rs | grep -q librustc_lsan\n+\t$(TMPDIR)/leak 2>&1 | grep -q 'detected memory leaks'\n+else\n+all:\n+\n+endif"}, {"sha": "279da6aaae707a0ac11073ab63fa8b8ef35c8089", "filename": "src/test/run-make/sanitizer-leak/leak.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-leak%2Fleak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-leak%2Fleak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-leak%2Fleak.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem;\n+\n+fn main() {\n+    let xs = vec![1, 2, 3, 4];\n+    mem::forget(xs);\n+}"}, {"sha": "08682e5975e5163e80843f3b5a2c14f90e727092", "filename": "src/test/run-make/sanitizer-memory/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-memory%2FMakefile?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,10 @@\n+-include ../tools.mk\n+\n+ifdef SANITIZER_SUPPORT\n+all:\n+\t$(RUSTC) -g -Z sanitizer=memory -Z print-link-args uninit.rs | grep -q librustc_msan\n+\t$(TMPDIR)/uninit 2>&1 | grep -q use-of-uninitialized-value\n+else\n+all:\n+\n+endif"}, {"sha": "8350c7de3acab91c42de3a650e3f7a9e6eb16aac", "filename": "src/test/run-make/sanitizer-memory/uninit.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-memory%2Funinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-memory%2Funinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-memory%2Funinit.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::mem;\n+\n+fn main() {\n+    let xs: [u8; 4] = unsafe { mem::uninitialized() };\n+    let y = xs[0] + xs[1];\n+}"}, {"sha": "8bb89a241cb053007ca3c9ead0c144a8078c6442", "filename": "src/test/run-make/sanitizer-thread/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-thread%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-thread%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-thread%2FMakefile?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,10 @@\n+-include ../tools.mk\n+\n+ifdef SANITIZER_SUPPORT\n+all:\n+\t$(RUSTC) -g -Z sanitizer=thread -Z print-link-args racy.rs | grep -q librustc_tsan\n+\t$(TMPDIR)/racy 2>&1 | grep -q 'data race'\n+else\n+all:\n+\n+endif"}, {"sha": "dc929e004a47979d0f0f6cbd5549057bd91b6d20", "filename": "src/test/run-make/sanitizer-thread/racy.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-thread%2Fracy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-make%2Fsanitizer-thread%2Fracy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-thread%2Fracy.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::thread;\n+\n+static mut ANSWER: i32 = 0;\n+\n+fn main() {\n+    let t1 = thread::spawn(|| unsafe { ANSWER = 42 });\n+    unsafe {\n+        ANSWER = 24;\n+    }\n+    t1.join().ok();\n+}"}, {"sha": "a1b7d42a196e9e77115d96f797f98aecfc113079", "filename": "src/test/run-pass/fds-are-cloexec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffds-are-cloexec.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -35,7 +35,7 @@ fn main() {\n }\n \n fn parent() {\n-    let file = File::open(file!()).unwrap();\n+    let file = File::open(env::current_exe().unwrap()).unwrap();\n     let tcp1 = TcpListener::bind(\"127.0.0.1:0\").unwrap();\n     let tcp2 = tcp1.try_clone().unwrap();\n     let addr = tcp1.local_addr().unwrap();"}, {"sha": "e217d07ed725d86ffc216de1eda7fb0f6b21059c", "filename": "src/test/run-pass/issue-34798.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-pass%2Fissue-34798.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-pass%2Fissue-34798.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-34798.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![forbid(improper_ctypes)]\n+#![allow(dead_code)]\n+\n+#[repr(C)]\n+pub struct Foo {\n+    size: u8,\n+    __value: ::std::marker::PhantomData<i32>,\n+}\n+\n+#[repr(C)]\n+pub struct ZeroSizeWithPhantomData<T>(::std::marker::PhantomData<T>);\n+\n+#[repr(C)]\n+pub struct Bar {\n+    size: u8,\n+    baz: ZeroSizeWithPhantomData<i32>,\n+}\n+\n+extern \"C\" {\n+    pub fn bar(_: *mut Foo, _: *mut Bar);\n+}\n+\n+fn main() {\n+}"}, {"sha": "be87b7b3c87e42fbd50cd4905bc39d9bd9af7a3a", "filename": "src/test/run-pass/try-wait.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-pass%2Ftry-wait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frun-pass%2Ftry-wait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftry-wait.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -13,7 +13,6 @@\n #![feature(process_try_wait)]\n \n use std::env;\n-use std::io;\n use std::process::Command;\n use std::thread;\n use std::time::Duration;\n@@ -32,17 +31,17 @@ fn main() {\n                          .arg(\"sleep\")\n                          .spawn()\n                          .unwrap();\n-    let err = me.try_wait().unwrap_err();\n-    assert_eq!(err.kind(), io::ErrorKind::WouldBlock);\n-    let err = me.try_wait().unwrap_err();\n-    assert_eq!(err.kind(), io::ErrorKind::WouldBlock);\n+    let maybe_status = me.try_wait().unwrap();\n+    assert!(maybe_status.is_none());\n+    let maybe_status = me.try_wait().unwrap();\n+    assert!(maybe_status.is_none());\n \n     me.kill().unwrap();\n     me.wait().unwrap();\n \n-    let status = me.try_wait().unwrap();\n+    let status = me.try_wait().unwrap().unwrap();\n     assert!(!status.success());\n-    let status = me.try_wait().unwrap();\n+    let status = me.try_wait().unwrap().unwrap();\n     assert!(!status.success());\n \n     let mut me = Command::new(env::current_exe().unwrap())\n@@ -51,17 +50,17 @@ fn main() {\n                          .unwrap();\n     loop {\n         match me.try_wait() {\n-            Ok(res) => {\n+            Ok(Some(res)) => {\n                 assert!(res.success());\n                 break\n             }\n-            Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {\n+            Ok(None) => {\n                 thread::sleep(Duration::from_millis(1));\n             }\n             Err(e) => panic!(\"error in try_wait: {}\", e),\n         }\n     }\n \n-    let status = me.try_wait().unwrap();\n+    let status = me.try_wait().unwrap().unwrap();\n     assert!(status.success());\n }"}, {"sha": "afe1daf5983a29f3fbf2f21651d289de918ae99a", "filename": "src/test/rustdoc/impl-disambiguation.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-disambiguation.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+pub trait Foo {}\n+\n+pub struct Bar<T> { field: T }\n+\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl Foo for Bar<u8>\"\n+impl Foo for Bar<u8> {}\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl Foo for Bar<u16>\"\n+impl Foo for Bar<u16> {}\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl<'a> Foo for &'a Bar<u8>\"\n+impl<'a> Foo for &'a Bar<u8> {}\n+\n+pub mod mod1 {\n+    pub struct Baz {}\n+}\n+\n+pub mod mod2 {\n+    pub enum Baz {}\n+}\n+\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl Foo for foo::mod1::Baz\"\n+impl Foo for mod1::Baz {}\n+// @has foo/trait.Foo.html '//*[@class=\"item-list\"]//code' \\\n+//     \"impl<'a> Foo for &'a foo::mod2::Baz\"\n+impl<'a> Foo for &'a mod2::Baz {}"}, {"sha": "51daa8075262228632600e6a17ce339680ac201f", "filename": "src/test/rustdoc/test_option_check/bar.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frustdoc%2Ftest_option_check%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frustdoc%2Ftest_option_check%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftest_option_check%2Fbar.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+// check-test-line-numbers-match\n+\n+/// This looks like another awesome test!\n+///\n+/// ```\n+/// println!(\"foo?\");\n+/// ```\n+pub fn foooo() {}"}, {"sha": "a9578c5f434a23e0ecb291cc0d989699cadd7be2", "filename": "src/test/rustdoc/test_option_check/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frustdoc%2Ftest_option_check%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Frustdoc%2Ftest_option_check%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftest_option_check%2Ftest.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -11,6 +11,8 @@\n // compile-flags: --test\n // check-test-line-numbers-match\n \n+pub mod bar;\n+\n /// This is a Foo;\n ///\n /// ```"}, {"sha": "c476657d207966cdf2d9242e86bda46643a5fba2", "filename": "src/test/ui/codemap_tests/issue-38812-2.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let (x,) = (vec![],);\n+}"}, {"sha": "156a6bdee99799a4b4af722c6f3bc95e0a5e7360", "filename": "src/test/ui/codemap_tests/issue-38812-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812-2.stderr?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,12 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-38812-2.rs:12:17\n+   |\n+12 |     let (x,) = (vec![],);\n+   |         ----    ^^^^^^ cannot infer type for `T`\n+   |         |\n+   |         consider giving a type to pattern\n+   |\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: aborting due to previous error\n+"}, {"sha": "a9943f753366da8d794a144eed344cb7b1597d06", "filename": "src/test/ui/codemap_tests/issue-38812.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //", "previous_filename": "src/test/ui/codemap_tests/repair_span_std_macros.rs"}, {"sha": "6365e761453f90167fb088a5f7cb52c233b3459b", "filename": "src/test/ui/codemap_tests/issue-38812.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-38812.stderr?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,12 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-38812.rs:12:13\n+   |\n+12 |     let x = vec![];\n+   |         -   ^^^^^^ cannot infer type for `T`\n+   |         |\n+   |         consider giving `x` a type\n+   |\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: aborting due to previous error\n+"}, {"sha": "7e0d778a3b205e431bd5ee8b58d7f692292e4867", "filename": "src/test/ui/codemap_tests/repair_span_std_macros.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4268872807cf8bc5c8c435794d1c82d21899d67b/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Frepair_span_std_macros.stderr?ref=4268872807cf8bc5c8c435794d1c82d21899d67b", "patch": "@@ -1,11 +0,0 @@\n-error[E0282]: unable to infer enough type information about `T`\n-  --> $DIR/repair_span_std_macros.rs:12:13\n-   |\n-12 |     let x = vec![];\n-   |             ^^^^^^ cannot infer type for `T`\n-   |\n-   = note: type annotations or generic parameter binding required\n-   = note: this error originates in a macro outside of the current crate\n-\n-error: aborting due to previous error\n-"}, {"sha": "79368587062e8b6fcecac948877846d5cb90a541", "filename": "src/test/ui/missing-items/missing-type-parameter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //"}, {"sha": "a16ae5538bf92d2038afae65670a6d6d909c7b1a", "filename": "src/test/ui/missing-items/missing-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-items%2Fmissing-type-parameter.stderr?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1,10 +1,8 @@\n-error[E0282]: unable to infer enough type information about `X`\n+error[E0282]: type annotations needed\n   --> $DIR/missing-type-parameter.rs:14:5\n    |\n 14 |     foo();\n    |     ^^^ cannot infer type for `X`\n-   |\n-   = note: type annotations or generic parameter binding required\n \n error: aborting due to previous error\n "}, {"sha": "0aefe703c9ca7de3e540801f1ded23012dab2987", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -11,7 +11,7 @@\n extern crate toml;\n extern crate rustc_serialize;\n \n-use std::collections::HashMap;\n+use std::collections::{BTreeMap, HashMap};\n use std::env;\n use std::fs::File;\n use std::io::{self, Read, Write};\n@@ -95,7 +95,6 @@ static MINGW: &'static [&'static str] = &[\n     \"x86_64-pc-windows-gnu\",\n ];\n \n-#[derive(RustcEncodable)]\n struct Manifest {\n     manifest_version: String,\n     date: String,\n@@ -171,8 +170,18 @@ impl Builder {\n         self.cargo_version = self.version(\"cargo\", \"x86_64-unknown-linux-gnu\");\n \n         self.digest_and_sign();\n-        let manifest = self.build_manifest();\n-        let manifest = toml::encode(&manifest).to_string();\n+        let Manifest { manifest_version, date, pkg } = self.build_manifest();\n+\n+        // Unfortunately we can't use derive(RustcEncodable) here because the\n+        // version field is called `manifest-version`, not `manifest_version`.\n+        // In lieu of that just create the table directly here with a `BTreeMap`\n+        // and wrap it up in a `Value::Table`.\n+        let mut manifest = BTreeMap::new();\n+        manifest.insert(\"manifest-version\".to_string(),\n+                        toml::encode(&manifest_version));\n+        manifest.insert(\"date\".to_string(), toml::encode(&date));\n+        manifest.insert(\"pkg\".to_string(), toml::encode(&pkg));\n+        let manifest = toml::Value::Table(manifest).to_string();\n \n         let filename = format!(\"channel-rust-{}.toml\", self.channel);\n         self.write_manifest(&manifest, &filename);\n@@ -317,6 +326,8 @@ impl Builder {\n     fn filename(&self, component: &str, target: &str) -> String {\n         if component == \"rust-src\" {\n             format!(\"rust-src-{}.tar.gz\", self.channel)\n+        } else if component == \"cargo\" {\n+            format!(\"cargo-nightly-{}.tar.gz\", target)\n         } else {\n             format!(\"{}-{}-{}.tar.gz\", component, self.channel, target)\n         }"}, {"sha": "1fc98a78a7c473c73148174942d0e62f82bb9fda", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -2,9 +2,9 @@\n authors = [\"The Rust Project Developers\"]\n name = \"compiletest\"\n version = \"0.0.0\"\n-build = \"build.rs\"\n \n [dependencies]\n log = \"0.3\"\n env_logger = { version = \"0.3.5\", default-features = false }\n rustc-serialize = \"0.3\"\n+filetime = \"0.1\""}, {"sha": "eb8cdcee6e69c495b0219fbebd8415944a5a66bb", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -185,6 +185,9 @@ pub struct Config {\n     // Print one character per test instead of one line\n     pub quiet: bool,\n \n+    // where to find the qemu test client process, if we're using it\n+    pub qemu_test_client: Option<PathBuf>,\n+\n     // Configuration for various run-make tests frobbing things like C compilers\n     // or querying about various LLVM component information.\n     pub cc: String,"}, {"sha": "522cd222c269171efd09f2a2b76e5a527df53d34", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -25,13 +25,15 @@ use extract_gdb_version;\n pub struct EarlyProps {\n     pub ignore: bool,\n     pub should_fail: bool,\n+    pub aux: Vec<String>,\n }\n \n impl EarlyProps {\n     pub fn from_file(config: &Config, testfile: &Path) -> Self {\n         let mut props = EarlyProps {\n             ignore: false,\n             should_fail: false,\n+            aux: Vec::new(),\n         };\n \n         iter_header(testfile,\n@@ -50,6 +52,10 @@ impl EarlyProps {\n                 ignore_lldb(config, ln) ||\n                 ignore_llvm(config, ln);\n \n+            if let Some(s) = parse_aux_build(ln) {\n+                props.aux.push(s);\n+            }\n+\n             props.should_fail = props.should_fail || parse_name_directive(ln, \"should-fail\");\n         });\n "}, {"sha": "5a97f7e3ee9b533321328b2d8548f3367b783687", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 50, "deletions": 13, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -21,24 +21,19 @@\n extern crate libc;\n extern crate test;\n extern crate getopts;\n-\n-#[cfg(cargobuild)]\n extern crate rustc_serialize;\n-#[cfg(not(cargobuild))]\n-extern crate serialize as rustc_serialize;\n-\n #[macro_use]\n extern crate log;\n-\n-#[cfg(cargobuild)]\n extern crate env_logger;\n+extern crate filetime;\n \n use std::env;\n use std::ffi::OsString;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n+use filetime::FileTime;\n use getopts::{optopt, optflag, reqopt};\n use common::Config;\n use common::{Pretty, DebugInfoGdb, DebugInfoLldb, Mode};\n@@ -58,11 +53,7 @@ mod raise_fd_limit;\n mod uidiff;\n \n fn main() {\n-    #[cfg(cargobuild)]\n-    fn log_init() { env_logger::init().unwrap(); }\n-    #[cfg(not(cargobuild))]\n-    fn log_init() {}\n-    log_init();\n+    env_logger::init().unwrap();\n \n     let config = parse_config(env::args().collect());\n \n@@ -116,6 +107,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           reqopt(\"\", \"llvm-components\", \"list of LLVM components built in\", \"LIST\"),\n           reqopt(\"\", \"llvm-cxxflags\", \"C++ flags for LLVM\", \"FLAGS\"),\n           optopt(\"\", \"nodejs\", \"the name of nodejs\", \"PATH\"),\n+          optopt(\"\", \"qemu-test-client\", \"path to the qemu test client\", \"PATH\"),\n           optflag(\"h\", \"help\", \"show this message\")];\n \n     let (argv0, args_) = args.split_first().unwrap();\n@@ -196,6 +188,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         lldb_python_dir: matches.opt_str(\"lldb-python-dir\"),\n         verbose: matches.opt_present(\"verbose\"),\n         quiet: matches.opt_present(\"quiet\"),\n+        qemu_test_client: matches.opt_str(\"qemu-test-client\").map(PathBuf::from),\n \n         cc: matches.opt_str(\"cc\").unwrap(),\n         cxx: matches.opt_str(\"cxx\").unwrap(),\n@@ -302,6 +295,14 @@ pub fn run_tests(config: &Config) {\n             // time.\n             env::set_var(\"RUST_TEST_THREADS\", \"1\");\n         }\n+\n+        DebugInfoGdb => {\n+            if config.qemu_test_client.is_some() {\n+                println!(\"WARNING: debuginfo tests are not available when \\\n+                          testing with QEMU\");\n+                return\n+            }\n+        }\n         _ => { /* proceed */ }\n     }\n \n@@ -468,7 +469,7 @@ pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn\n     };\n \n     // Debugging emscripten code doesn't make sense today\n-    let mut ignore = early_props.ignore;\n+    let mut ignore = early_props.ignore || !up_to_date(config, testpaths, &early_props);\n     if (config.mode == DebugInfoGdb || config.mode == DebugInfoLldb) &&\n         config.target.contains(\"emscripten\") {\n         ignore = true;\n@@ -484,6 +485,42 @@ pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn\n     }\n }\n \n+fn stamp(config: &Config, testpaths: &TestPaths) -> PathBuf {\n+    let stamp_name = format!(\"{}-H-{}-T-{}-S-{}.stamp\",\n+                             testpaths.file.file_name().unwrap()\n+                                           .to_str().unwrap(),\n+                             config.host,\n+                             config.target,\n+                             config.stage_id);\n+    config.build_base.canonicalize()\n+          .unwrap_or(config.build_base.clone())\n+          .join(stamp_name)\n+}\n+\n+fn up_to_date(config: &Config, testpaths: &TestPaths, props: &EarlyProps) -> bool {\n+    let stamp = mtime(&stamp(config, testpaths));\n+    let mut inputs = vec![\n+        mtime(&testpaths.file),\n+        mtime(&config.rustc_path),\n+    ];\n+    for aux in props.aux.iter() {\n+        inputs.push(mtime(&testpaths.file.parent().unwrap()\n+                                         .join(\"auxiliary\")\n+                                         .join(aux)));\n+    }\n+    for lib in config.run_lib_path.read_dir().unwrap() {\n+        let lib = lib.unwrap();\n+        inputs.push(mtime(&lib.path()));\n+    }\n+    inputs.iter().any(|input| *input > stamp)\n+}\n+\n+fn mtime(path: &Path) -> FileTime {\n+    fs::metadata(path).map(|f| {\n+        FileTime::from_last_modification_time(&f)\n+    }).unwrap_or(FileTime::zero())\n+}\n+\n pub fn make_test_name(config: &Config, testpaths: &TestPaths) -> test::TestName {\n     // Convert a complete path to something like\n     //"}, {"sha": "1a3d7a190be366bb1d655a1da9d88fc768252a5f", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 99, "deletions": 26, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -30,6 +30,7 @@ use std::io::{self, BufReader};\n use std::path::{Path, PathBuf};\n use std::process::{Command, Output, ExitStatus};\n use std::str;\n+use std::collections::HashMap;\n \n use extract_gdb_version;\n \n@@ -80,6 +81,8 @@ pub fn run(config: Config, testpaths: &TestPaths) {\n     }\n \n     base_cx.complete_all();\n+\n+    File::create(::stamp(&config, &testpaths)).unwrap();\n }\n \n struct TestCx<'test> {\n@@ -1190,7 +1193,45 @@ actual:\\n\\\n             \"arm-linux-androideabi\" | \"armv7-linux-androideabi\" | \"aarch64-linux-android\" => {\n                 self._arm_exec_compiled_test(env)\n             }\n-            _=> {\n+\n+            // This is pretty similar to below, we're transforming:\n+            //\n+            //      program arg1 arg2\n+            //\n+            // into\n+            //\n+            //      qemu-test-client run program:support-lib.so arg1 arg2\n+            //\n+            // The test-client program will upload `program` to the emulator\n+            // along with all other support libraries listed (in this case\n+            // `support-lib.so`. It will then execute the program on the\n+            // emulator with the arguments specified (in the environment we give\n+            // the process) and then report back the same result.\n+            _ if self.config.qemu_test_client.is_some() => {\n+                let aux_dir = self.aux_output_dir_name();\n+                let mut args = self.make_run_args();\n+                let mut program = args.prog.clone();\n+                if let Ok(entries) = aux_dir.read_dir() {\n+                    for entry in entries {\n+                        let entry = entry.unwrap();\n+                        if !entry.path().is_file() {\n+                            continue\n+                        }\n+                        program.push_str(\":\");\n+                        program.push_str(entry.path().to_str().unwrap());\n+                    }\n+                }\n+                args.args.insert(0, program);\n+                args.args.insert(0, \"run\".to_string());\n+                args.prog = self.config.qemu_test_client.clone().unwrap()\n+                                .into_os_string().into_string().unwrap();\n+                self.compose_and_run(args,\n+                                     env,\n+                                     self.config.run_lib_path.to_str().unwrap(),\n+                                     Some(aux_dir.to_str().unwrap()),\n+                                     None)\n+            }\n+            _ => {\n                 let aux_dir = self.aux_output_dir_name();\n                 self.compose_and_run(self.make_run_args(),\n                                      env,\n@@ -1902,17 +1943,28 @@ actual:\\n\\\n         }\n     }\n \n-    fn check_rustdoc_test_option(&self, res: ProcRes) {\n-        let mut file = fs::File::open(&self.testpaths.file)\n+    fn get_lines<P: AsRef<Path>>(&self, path: &P,\n+                                 mut other_files: Option<&mut Vec<String>>) -> Vec<usize> {\n+        let mut file = fs::File::open(path)\n                                 .expect(\"markdown_test_output_check_entry File::open failed\");\n         let mut content = String::new();\n         file.read_to_string(&mut content)\n             .expect(\"markdown_test_output_check_entry read_to_string failed\");\n         let mut ignore = false;\n-        let mut v: Vec<usize> =\n-            content.lines()\n-                   .enumerate()\n-                   .filter_map(|(line_nb, line)| {\n+        content.lines()\n+               .enumerate()\n+               .filter_map(|(line_nb, line)| {\n+                   if (line.trim_left().starts_with(\"pub mod \") ||\n+                       line.trim_left().starts_with(\"mod \")) &&\n+                      line.ends_with(\";\") {\n+                       if let Some(ref mut other_files) = other_files {\n+                           other_files.push(line.rsplit(\"mod \")\n+                                      .next()\n+                                      .unwrap()\n+                                      .replace(\";\", \"\"));\n+                       }\n+                       None\n+                   } else {\n                        let sline = line.split(\"///\").last().unwrap_or(\"\");\n                        let line = sline.trim_left();\n                        if line.starts_with(\"```\") {\n@@ -1926,36 +1978,57 @@ actual:\\n\\\n                        } else {\n                            None\n                        }\n-                   })\n-                   .collect();\n+                   }\n+               })\n+               .collect()\n+    }\n+\n+    fn check_rustdoc_test_option(&self, res: ProcRes) {\n+        let mut other_files = Vec::new();\n+        let mut files: HashMap<String, Vec<usize>> = HashMap::new();\n+        files.insert(self.testpaths.file.to_str().unwrap().to_owned(),\n+                     self.get_lines(&self.testpaths.file, Some(&mut other_files)));\n+        for other_file in other_files {\n+            let mut path = self.testpaths.file.clone();\n+            path.set_file_name(&format!(\"{}.rs\", other_file));\n+            files.insert(path.to_str().unwrap().to_owned(), self.get_lines(&path, None));\n+        }\n \n         let mut tested = 0;\n         for _ in res.stdout.split(\"\\n\")\n                            .filter(|s| s.starts_with(\"test \"))\n                            .inspect(|s| {\n                                let tmp: Vec<&str> = s.split(\" - line \").collect();\n                                if tmp.len() == 2 {\n-                                   tested += 1;\n-                                   let line = tmp[1].split(\" ...\")\n-                                                    .next()\n-                                                    .unwrap_or(\"0\")\n-                                                    .parse()\n-                                                    .unwrap_or(0);\n-                                   if let Ok(pos) = v.binary_search(&line) {\n-                                       v.remove(pos);\n-                                   } else {\n-                                       self.fatal_proc_rec(\n-                                           &format!(\"Not found doc test: \\\"{}\\\" in {:?}\", s, v),\n-                                           &res);\n+                                   let path = tmp[0].rsplit(\"test \").next().unwrap();\n+                                   if let Some(ref mut v) = files.get_mut(path) {\n+                                       tested += 1;\n+                                       let line = tmp[1].split(\" ...\")\n+                                                        .next()\n+                                                        .unwrap_or(\"0\")\n+                                                        .parse()\n+                                                        .unwrap_or(0);\n+                                       if let Ok(pos) = v.binary_search(&line) {\n+                                           v.remove(pos);\n+                                       } else {\n+                                           self.fatal_proc_rec(\n+                                               &format!(\"Not found doc test: \\\"{}\\\" in \\\"{}\\\":{:?}\",\n+                                                        s, path, v),\n+                                               &res);\n+                                       }\n                                    }\n                                }\n                            }) {}\n         if tested == 0 {\n-            self.fatal_proc_rec(\"No test has been found\", &res);\n-        } else if v.len() != 0 {\n-            self.fatal_proc_rec(&format!(\"Not found test at line{} {:?}\",\n-                                         if v.len() > 1 { \"s\" } else { \"\" }, v),\n-                                &res);\n+            self.fatal_proc_rec(&format!(\"No test has been found... {:?}\", files), &res);\n+        } else {\n+            for (entry, v) in &files {\n+                if v.len() != 0 {\n+                    self.fatal_proc_rec(&format!(\"Not found test at line{} \\\"{}\\\":{:?}\",\n+                                                 if v.len() > 1 { \"s\" } else { \"\" }, entry, v),\n+                                        &res);\n+                }\n+            }\n         }\n     }\n "}, {"sha": "eb326c01de4f69cb2fbdad28827b6385eda120bc", "filename": "src/tools/qemu-test-client/Cargo.toml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fqemu-test-client%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fqemu-test-client%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fqemu-test-client%2FCargo.toml?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,6 @@\n+[package]\n+name = \"qemu-test-client\"\n+version = \"0.1.0\"\n+authors = [\"The Rust Project Developers\"]\n+\n+[dependencies]"}, {"sha": "b7ff4116eb5decc44bdab36ebccb17a5549a00cb", "filename": "src/tools/qemu-test-client/src/main.rs", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fqemu-test-client%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fqemu-test-client%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fqemu-test-client%2Fsrc%2Fmain.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,221 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// This is a small client program intended to pair with `qemu-test-server` in\n+/// this repository. This client connects to the server over TCP and is used to\n+/// push artifacts and run tests on the server instead of locally.\n+///\n+/// Here is also where we bake in the support to spawn the QEMU emulator as\n+/// well.\n+\n+use std::env;\n+use std::fs::File;\n+use std::io::prelude::*;\n+use std::io::{self, BufWriter};\n+use std::net::TcpStream;\n+use std::path::Path;\n+use std::process::{Command, Stdio};\n+use std::thread;\n+use std::time::Duration;\n+\n+macro_rules! t {\n+    ($e:expr) => (match $e {\n+        Ok(e) => e,\n+        Err(e) => panic!(\"{} failed with {}\", stringify!($e), e),\n+    })\n+}\n+\n+fn main() {\n+    let mut args = env::args().skip(1);\n+\n+    match &args.next().unwrap()[..] {\n+        \"spawn-emulator\" => {\n+            spawn_emulator(Path::new(&args.next().unwrap()),\n+                           Path::new(&args.next().unwrap()))\n+        }\n+        \"push\" => {\n+            push(Path::new(&args.next().unwrap()))\n+        }\n+        \"run\" => {\n+            run(args.next().unwrap(), args.collect())\n+        }\n+        cmd => panic!(\"unknown command: {}\", cmd),\n+    }\n+}\n+\n+fn spawn_emulator(rootfs: &Path, tmpdir: &Path) {\n+    // Generate a new rootfs image now that we've updated the test server\n+    // executable. This is the equivalent of:\n+    //\n+    //      find $rootfs -print 0 | cpio --null -o --format=newc > rootfs.img\n+    let rootfs_img = tmpdir.join(\"rootfs.img\");\n+    let mut cmd = Command::new(\"cpio\");\n+    cmd.arg(\"--null\")\n+       .arg(\"-o\")\n+       .arg(\"--format=newc\")\n+       .stdin(Stdio::piped())\n+       .stdout(Stdio::piped())\n+       .current_dir(rootfs);\n+    let mut child = t!(cmd.spawn());\n+    let mut stdin = child.stdin.take().unwrap();\n+    let rootfs = rootfs.to_path_buf();\n+    thread::spawn(move || add_files(&mut stdin, &rootfs, &rootfs));\n+    t!(io::copy(&mut child.stdout.take().unwrap(),\n+                &mut t!(File::create(&rootfs_img))));\n+    assert!(t!(child.wait()).success());\n+\n+    // Start up the emulator, in the background\n+    let mut cmd = Command::new(\"qemu-system-arm\");\n+    cmd.arg(\"-M\").arg(\"vexpress-a15\")\n+       .arg(\"-m\").arg(\"1024\")\n+       .arg(\"-kernel\").arg(\"/tmp/zImage\")\n+       .arg(\"-initrd\").arg(&rootfs_img)\n+       .arg(\"-dtb\").arg(\"/tmp/vexpress-v2p-ca15-tc1.dtb\")\n+       .arg(\"-append\").arg(\"console=ttyAMA0 root=/dev/ram rdinit=/sbin/init init=/sbin/init\")\n+       .arg(\"-nographic\")\n+       .arg(\"-redir\").arg(\"tcp:12345::12345\");\n+    t!(cmd.spawn());\n+\n+    // Wait for the emulator to come online\n+    loop {\n+        let dur = Duration::from_millis(100);\n+        if let Ok(mut client) = TcpStream::connect(\"127.0.0.1:12345\") {\n+            t!(client.set_read_timeout(Some(dur)));\n+            t!(client.set_write_timeout(Some(dur)));\n+            if client.write_all(b\"ping\").is_ok() {\n+                let mut b = [0; 4];\n+                if client.read_exact(&mut b).is_ok() {\n+                    break\n+                }\n+            }\n+        }\n+        thread::sleep(dur);\n+    }\n+\n+    fn add_files(w: &mut Write, root: &Path, cur: &Path) {\n+        for entry in t!(cur.read_dir()) {\n+            let entry = t!(entry);\n+            let path = entry.path();\n+            let to_print = path.strip_prefix(root).unwrap();\n+            t!(write!(w, \"{}\\u{0}\", to_print.to_str().unwrap()));\n+            if t!(entry.file_type()).is_dir() {\n+                add_files(w, root, &path);\n+            }\n+        }\n+    }\n+}\n+\n+fn push(path: &Path) {\n+    let client = t!(TcpStream::connect(\"127.0.0.1:12345\"));\n+    let mut client = BufWriter::new(client);\n+    t!(client.write_all(b\"push\"));\n+    t!(client.write_all(path.file_name().unwrap().to_str().unwrap().as_bytes()));\n+    t!(client.write_all(&[0]));\n+    let mut file = t!(File::open(path));\n+    t!(io::copy(&mut file, &mut client));\n+    t!(client.flush());\n+    println!(\"done pushing {:?}\", path);\n+}\n+\n+fn run(files: String, args: Vec<String>) {\n+    let client = t!(TcpStream::connect(\"127.0.0.1:12345\"));\n+    let mut client = BufWriter::new(client);\n+    t!(client.write_all(b\"run \"));\n+\n+    // Send over the args\n+    for arg in args {\n+        t!(client.write_all(arg.as_bytes()));\n+        t!(client.write_all(&[0]));\n+    }\n+    t!(client.write_all(&[0]));\n+\n+    // Send over env vars\n+    for (k, v) in env::vars() {\n+        if k != \"PATH\" && k != \"LD_LIBRARY_PATH\" {\n+            t!(client.write_all(k.as_bytes()));\n+            t!(client.write_all(&[0]));\n+            t!(client.write_all(v.as_bytes()));\n+            t!(client.write_all(&[0]));\n+        }\n+    }\n+    t!(client.write_all(&[0]));\n+\n+    // Send over support libraries\n+    let mut files = files.split(':');\n+    let exe = files.next().unwrap();\n+    for file in files.map(Path::new) {\n+        t!(client.write_all(file.file_name().unwrap().to_str().unwrap().as_bytes()));\n+        t!(client.write_all(&[0]));\n+        send(&file, &mut client);\n+    }\n+    t!(client.write_all(&[0]));\n+\n+    // Send over the client executable as the last piece\n+    send(exe.as_ref(), &mut client);\n+\n+    println!(\"uploaded {:?}, waiting for result\", exe);\n+\n+    // Ok now it's time to read all the output. We're receiving \"frames\"\n+    // representing stdout/stderr, so we decode all that here.\n+    let mut header = [0; 5];\n+    let mut stderr_done = false;\n+    let mut stdout_done = false;\n+    let mut client = t!(client.into_inner());\n+    let mut stdout = io::stdout();\n+    let mut stderr = io::stderr();\n+    while !stdout_done || !stderr_done {\n+        t!(client.read_exact(&mut header));\n+        let amt = ((header[1] as u64) << 24) |\n+                  ((header[2] as u64) << 16) |\n+                  ((header[3] as u64) <<  8) |\n+                  ((header[4] as u64) <<  0);\n+        if header[0] == 0 {\n+            if amt == 0 {\n+                stdout_done = true;\n+            } else {\n+                t!(io::copy(&mut (&mut client).take(amt), &mut stdout));\n+                t!(stdout.flush());\n+            }\n+        } else {\n+            if amt == 0 {\n+                stderr_done = true;\n+            } else {\n+                t!(io::copy(&mut (&mut client).take(amt), &mut stderr));\n+                t!(stderr.flush());\n+            }\n+        }\n+    }\n+\n+    // Finally, read out the exit status\n+    let mut status = [0; 5];\n+    t!(client.read_exact(&mut status));\n+    let code = ((status[1] as i32) << 24) |\n+               ((status[2] as i32) << 16) |\n+               ((status[3] as i32) <<  8) |\n+               ((status[4] as i32) <<  0);\n+    if status[0] == 0 {\n+        std::process::exit(code);\n+    } else {\n+        println!(\"died due to signal {}\", code);\n+        std::process::exit(3);\n+    }\n+}\n+\n+fn send(path: &Path, dst: &mut Write) {\n+    let mut file = t!(File::open(&path));\n+    let amt = t!(file.metadata()).len();\n+    t!(dst.write_all(&[\n+        (amt >> 24) as u8,\n+        (amt >> 16) as u8,\n+        (amt >>  8) as u8,\n+        (amt >>  0) as u8,\n+    ]));\n+    t!(io::copy(&mut file, dst));\n+}"}, {"sha": "af445a25935152ae45c3d303f4f0b7d21b77e3db", "filename": "src/tools/qemu-test-server/Cargo.toml", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fqemu-test-server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fqemu-test-server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fqemu-test-server%2FCargo.toml?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,6 @@\n+[package]\n+name = \"qemu-test-server\"\n+version = \"0.1.0\"\n+authors = [\"The Rust Project Developers\"]\n+\n+[dependencies]"}, {"sha": "1c5d7b915baacb6885676f0245d43fb716d912a7", "filename": "src/tools/qemu-test-server/src/main.rs", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fqemu-test-server%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Ftools%2Fqemu-test-server%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fqemu-test-server%2Fsrc%2Fmain.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -0,0 +1,232 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// This is a small server which is intended to run inside of an emulator. This\n+/// server pairs with the `qemu-test-client` program in this repository. The\n+/// `qemu-test-client` connects to this server over a TCP socket and performs\n+/// work such as:\n+///\n+/// 1. Pushing shared libraries to the server\n+/// 2. Running tests through the server\n+///\n+/// The server supports running tests concurrently and also supports tests\n+/// themselves having support libraries. All data over the TCP sockets is in a\n+/// basically custom format suiting our needs.\n+\n+use std::fs::{self, File, Permissions};\n+use std::io::prelude::*;\n+use std::io::{self, BufReader};\n+use std::net::{TcpListener, TcpStream};\n+use std::os::unix::prelude::*;\n+use std::sync::{Arc, Mutex};\n+use std::path::Path;\n+use std::str;\n+use std::sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n+use std::thread;\n+use std::process::{Command, Stdio};\n+\n+macro_rules! t {\n+    ($e:expr) => (match $e {\n+        Ok(e) => e,\n+        Err(e) => panic!(\"{} failed with {}\", stringify!($e), e),\n+    })\n+}\n+\n+static TEST: AtomicUsize = ATOMIC_USIZE_INIT;\n+\n+fn main() {\n+    println!(\"starting test server\");\n+    let listener = t!(TcpListener::bind(\"10.0.2.15:12345\"));\n+    println!(\"listening!\");\n+\n+    let work = Path::new(\"/tmp/work\");\n+    t!(fs::create_dir_all(work));\n+\n+    let lock = Arc::new(Mutex::new(()));\n+\n+    for socket in listener.incoming() {\n+        let mut socket = t!(socket);\n+        let mut buf = [0; 4];\n+        t!(socket.read_exact(&mut buf));\n+        if &buf[..] == b\"ping\" {\n+            t!(socket.write_all(b\"pong\"));\n+        } else if &buf[..] == b\"push\" {\n+            handle_push(socket, work);\n+        } else if &buf[..] == b\"run \" {\n+            let lock = lock.clone();\n+            thread::spawn(move || handle_run(socket, work, &lock));\n+        } else {\n+            panic!(\"unknown command {:?}\", buf);\n+        }\n+    }\n+}\n+\n+fn handle_push(socket: TcpStream, work: &Path) {\n+    let mut reader = BufReader::new(socket);\n+    let mut filename = Vec::new();\n+    t!(reader.read_until(0, &mut filename));\n+    filename.pop(); // chop off the 0\n+    let filename = t!(str::from_utf8(&filename));\n+\n+    let path = work.join(filename);\n+    t!(io::copy(&mut reader, &mut t!(File::create(&path))));\n+    t!(fs::set_permissions(&path, Permissions::from_mode(0o755)));\n+}\n+\n+struct RemoveOnDrop<'a> {\n+    inner: &'a Path,\n+}\n+\n+impl<'a> Drop for RemoveOnDrop<'a> {\n+    fn drop(&mut self) {\n+        t!(fs::remove_dir_all(self.inner));\n+    }\n+}\n+\n+fn handle_run(socket: TcpStream, work: &Path, lock: &Mutex<()>) {\n+    let mut arg = Vec::new();\n+    let mut reader = BufReader::new(socket);\n+\n+    // Allocate ourselves a directory that we'll delete when we're done to save\n+    // space.\n+    let n = TEST.fetch_add(1, Ordering::SeqCst);\n+    let path = work.join(format!(\"test{}\", n));\n+    let exe = path.join(\"exe\");\n+    t!(fs::create_dir(&path));\n+    let _a = RemoveOnDrop { inner: &path };\n+\n+    // First up we'll get a list of arguments delimited with 0 bytes. An empty\n+    // argument means that we're done.\n+    let mut cmd = Command::new(&exe);\n+    while t!(reader.read_until(0, &mut arg)) > 1 {\n+        cmd.arg(t!(str::from_utf8(&arg[..arg.len() - 1])));\n+        arg.truncate(0);\n+    }\n+\n+    // Next we'll get a bunch of env vars in pairs delimited by 0s as well\n+    arg.truncate(0);\n+    while t!(reader.read_until(0, &mut arg)) > 1 {\n+        let key_len = arg.len() - 1;\n+        let val_len = t!(reader.read_until(0, &mut arg)) - 1;\n+        {\n+            let key = &arg[..key_len];\n+            let val = &arg[key_len + 1..][..val_len];\n+            let key = t!(str::from_utf8(key));\n+            let val = t!(str::from_utf8(val));\n+            cmd.env(key, val);\n+        }\n+        arg.truncate(0);\n+    }\n+\n+    // The section of code from here down to where we drop the lock is going to\n+    // be a critical section for us. On Linux you can't execute a file which is\n+    // open somewhere for writing, as you'll receive the error \"text file busy\".\n+    // Now here we never have the text file open for writing when we spawn it,\n+    // so why do we still need a critical section?\n+    //\n+    // Process spawning first involves a `fork` on Unix, which clones all file\n+    // descriptors into the child process. This means that it's possible for us\n+    // to open the file for writing (as we're downloading it), then some other\n+    // thread forks, then we close the file and try to exec. At that point the\n+    // other thread created a child process with the file open for writing, and\n+    // we attempt to execute it, so we get an error.\n+    //\n+    // This race is resolve by ensuring that only one thread can writ ethe file\n+    // and spawn a child process at once. Kinda an unfortunate solution, but we\n+    // don't have many other choices with this sort of setup!\n+    //\n+    // In any case the lock is acquired here, before we start writing any files.\n+    // It's then dropped just after we spawn the child. That way we don't lock\n+    // the execution of the child, just the creation of its files.\n+    let lock = lock.lock();\n+\n+    // Next there's a list of dynamic libraries preceded by their filenames.\n+    arg.truncate(0);\n+    while t!(reader.read_until(0, &mut arg)) > 1 {\n+        let dst = path.join(t!(str::from_utf8(&arg[..arg.len() - 1])));\n+        let amt = read_u32(&mut reader) as u64;\n+        t!(io::copy(&mut reader.by_ref().take(amt),\n+                    &mut t!(File::create(&dst))));\n+        t!(fs::set_permissions(&dst, Permissions::from_mode(0o755)));\n+        arg.truncate(0);\n+    }\n+\n+    // Finally we'll get the binary. The other end will tell us how big the\n+    // binary is and then we'll download it all to the exe path we calculated\n+    // earlier.\n+    let amt = read_u32(&mut reader) as u64;\n+    t!(io::copy(&mut reader.by_ref().take(amt),\n+                &mut t!(File::create(&exe))));\n+    t!(fs::set_permissions(&exe, Permissions::from_mode(0o755)));\n+\n+    // Support libraries were uploaded to `work` earlier, so make sure that's\n+    // in `LD_LIBRARY_PATH`. Also include our own current dir which may have\n+    // had some libs uploaded.\n+    cmd.env(\"LD_LIBRARY_PATH\",\n+            format!(\"{}:{}\", work.display(), path.display()));\n+\n+    // Spawn the child and ferry over stdout/stderr to the socket in a framed\n+    // fashion (poor man's style)\n+    let mut child = t!(cmd.stdin(Stdio::null())\n+                          .stdout(Stdio::piped())\n+                          .stderr(Stdio::piped())\n+                          .spawn());\n+    drop(lock);\n+    let mut stdout = child.stdout.take().unwrap();\n+    let mut stderr = child.stderr.take().unwrap();\n+    let socket = Arc::new(Mutex::new(reader.into_inner()));\n+    let socket2 = socket.clone();\n+    let thread = thread::spawn(move || my_copy(&mut stdout, 0, &*socket2));\n+    my_copy(&mut stderr, 1, &*socket);\n+    thread.join().unwrap();\n+\n+    // Finally send over the exit status.\n+    let status = t!(child.wait());\n+    let (which, code) = match status.code() {\n+        Some(n) => (0, n),\n+        None => (1, status.signal().unwrap()),\n+    };\n+    t!(socket.lock().unwrap().write_all(&[\n+        which,\n+        (code >> 24) as u8,\n+        (code >> 16) as u8,\n+        (code >>  8) as u8,\n+        (code >>  0) as u8,\n+    ]));\n+}\n+\n+fn my_copy(src: &mut Read, which: u8, dst: &Mutex<Write>) {\n+    let mut b = [0; 1024];\n+    loop {\n+        let n = t!(src.read(&mut b));\n+        let mut dst = dst.lock().unwrap();\n+        t!(dst.write_all(&[\n+            which,\n+            (n >> 24) as u8,\n+            (n >> 16) as u8,\n+            (n >>  8) as u8,\n+            (n >>  0) as u8,\n+        ]));\n+        if n > 0 {\n+            t!(dst.write_all(&b[..n]));\n+        } else {\n+            break\n+        }\n+    }\n+}\n+\n+fn read_u32(r: &mut Read) -> u32 {\n+    let mut len = [0; 4];\n+    t!(r.read_exact(&mut len));\n+    ((len[0] as u32) << 24) |\n+    ((len[1] as u32) << 16) |\n+    ((len[2] as u32) <<  8) |\n+    ((len[3] as u32) <<  0)\n+}"}, {"sha": "69e2a953a176d45606baf48182ad85c5c2529e8c", "filename": "src/vendor/gcc/.cargo-checksum.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fvendor%2Fgcc%2F.cargo-checksum.json", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fvendor%2Fgcc%2F.cargo-checksum.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fgcc%2F.cargo-checksum.json?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1 +1 @@\n-{\"files\":{\".cargo-ok\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\".gitignore\":\"f9b1ca6ae27d1c18215265024629a8960c31379f206d9ed20f64e0b2dcf79805\",\".travis.yml\":\"675ffe583db77282d010306f29e6d81e5070ab081deddd0300137dfbd2cb83de\",\"Cargo.toml\":\"19bb617b74de761515ef5d087fd0e30912fda1d7c22fd04fa211236dab99a509\",\"LICENSE-APACHE\":\"a60eea817514531668d7e00765731449fe14d059d3249e0bc93b36de45f759f2\",\"LICENSE-MIT\":\"378f5840b258e2779c39418f3f2d7b2ba96f1c7917dd6be0713f88305dbda397\",\"README.md\":\"ecb2d93f4c81edbd48d8742ff7887dc0a4530a5890967839090bbc972d49bebe\",\"appveyor.yml\":\"46c77d913eaa45871296942c2cd96ef092c9dcaf19201cb5c500a5107faeb06f\",\"src/bin/gcc-shim.rs\":\"11edfe1fc6f932bd42ffffda5145833302bc163e0b87dc0d54f4bd0997ad4708\",\"src/lib.rs\":\"7e7c60beccfdd145e876da81bb07dd09c5248dab0b26d93190bab4242799d51a\",\"src/registry.rs\":\"3e2a42581ebb82e325dd5600c6571cef937b35003b2927dc618967f5238a2058\",\"src/windows_registry.rs\":\"1f4211caec5a192b5f05c8a47efb27aa6a0ab976c659b9318a0cf603a28d6746\",\"tests/cc_env.rs\":\"d92c5e3d3d43ac244e63b2cd2c93a521fcf124bf1ccf8d4c6bfa7f8333d88976\",\"tests/support/mod.rs\":\"f4dad5a8133c3dd6678d9a3de057b82e624ef547b9b3e4ac9508a48962fc387b\",\"tests/test.rs\":\"164220f11be2eebc20315826513999970660a82feff8cc4b15b4e9d73d98324e\"},\"package\":\"872db9e59486ef2b14f8e8c10e9ef02de2bccef6363d7f34835dedb386b3d950\"}\n\\ No newline at end of file\n+{\"files\":{\".cargo-ok\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\".gitignore\":\"4cc6445feac7e9a1f8f1e1c51cc3afd0cf7bb931e3c5a6f18c41258401652702\",\".travis.yml\":\"e68f9d10a8e367890cf734239c39952ee480cf0e8da9520b377df4a2b8ccc9e8\",\"Cargo.toml\":\"4c5eb683d4c57fff819ebf564a8db93b5c87284993def6bc066ba1e311d5b090\",\"LICENSE-APACHE\":\"a60eea817514531668d7e00765731449fe14d059d3249e0bc93b36de45f759f2\",\"LICENSE-MIT\":\"378f5840b258e2779c39418f3f2d7b2ba96f1c7917dd6be0713f88305dbda397\",\"README.md\":\"b1a639560fd536f2c3ab708a8e1066b675edd4d018dfa4e5e18d0d7327d81c15\",\"appveyor.yml\":\"46c77d913eaa45871296942c2cd96ef092c9dcaf19201cb5c500a5107faeb06f\",\"src/bin/gcc-shim.rs\":\"d6be9137cb48b86891e7b263adbf492e1193ffe682db9ba4a88eb1079b874b58\",\"src/lib.rs\":\"eb4ca086dd2ffa5e30f022f556d0def6d1142160da392afb328393b3f435e8f7\",\"src/registry.rs\":\"3876ef9573e3bbc050aef41a684b9a510cc1a91b15ae874fe032cf4377b4d116\",\"src/windows_registry.rs\":\"36c6a7f8322407faff2dcfd4789d0876d034885944bc0340ac7c1f7cbfc307f1\",\"tests/cc_env.rs\":\"d92c5e3d3d43ac244e63b2cd2c93a521fcf124bf1ccf8d4c6bfa7f8333d88976\",\"tests/support/mod.rs\":\"56bcfd1e2ff5ae8e581c71229444a3d96094bf689808808dd80e315bd6632083\",\"tests/test.rs\":\"b63e74d571e7d585edc53693bcf0caae88fc040613ace91e32437d4a62cddb6a\"},\"package\":\"c07c758b972368e703a562686adb39125707cc1ef3399da8c019fc6c2498a75d\"}\n\\ No newline at end of file"}, {"sha": "3b874ca574de0550d0ee2608988aeb9655940377", "filename": "src/vendor/gcc/.gitignore", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fvendor%2Fgcc%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fvendor%2Fgcc%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fgcc%2F.gitignore?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1,2 +1,4 @@\n target\n Cargo.lock\n+.idea\n+*.iml"}, {"sha": "10d3d13d876bcee206e5c1171d5038537bf0dd22", "filename": "src/vendor/gcc/.travis.yml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fvendor%2Fgcc%2F.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fvendor%2Fgcc%2F.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fgcc%2F.travis.yml?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -3,6 +3,13 @@ rust:\n   - stable\n   - beta\n   - nightly\n+matrix:\n+  include:\n+    # Minimum version supported\n+    - rust: 1.6.0\n+      install:\n+      script: cargo build\n+\n sudo: false\n install:\n   - if [ \"$TRAVIS_OS_NAME\" = \"linux\" ]; then OS=unknown-linux-gnu; else OS=apple-darwin; fi"}, {"sha": "9fee7788cefc85ef8c593130cc080729563efda4", "filename": "src/vendor/gcc/Cargo.toml", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fvendor%2Fgcc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fvendor%2Fgcc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fgcc%2FCargo.toml?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -1,20 +1,24 @@\n [package]\n \n name = \"gcc\"\n-version = \"0.3.40\"\n+version = \"0.3.43\"\n authors = [\"Alex Crichton <alex@alexcrichton.com>\"]\n license = \"MIT/Apache-2.0\"\n repository = \"https://github.com/alexcrichton/gcc-rs\"\n-documentation = \"http://alexcrichton.com/gcc-rs\"\n+documentation = \"https://docs.rs/gcc\"\n description = \"\"\"\n A build-time dependency for Cargo build scripts to assist in invoking the native\n C compiler to compile native C code into a static archive to be linked into Rust\n code.\n \"\"\"\n keywords = [\"build-dependencies\"]\n \n+[badges]\n+travis-ci = { repository = \"alexcrichton/gcc-rs\" }\n+appveyor = { repository = \"alexcrichton/gcc-rs\" }\n+\n [dependencies]\n-rayon = { version = \"0.4\", optional = true }\n+rayon = { version = \"0.6\", optional = true }\n \n [features]\n parallel = [\"rayon\"]"}, {"sha": "2d3e5ed7387549a5fb81b5caea6c0b3931866f1a", "filename": "src/vendor/gcc/README.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fvendor%2Fgcc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fvendor%2Fgcc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fgcc%2FREADME.md?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -5,7 +5,7 @@ A library to compile C/C++ code into a Rust library/application.\n [![Build Status](https://travis-ci.org/alexcrichton/gcc-rs.svg?branch=master)](https://travis-ci.org/alexcrichton/gcc-rs)\n [![Build status](https://ci.appveyor.com/api/projects/status/onu270iw98h81nwv?svg=true)](https://ci.appveyor.com/project/alexcrichton/gcc-rs)\n \n-[Documentation](http://alexcrichton.com/gcc-rs)\n+[Documentation](https://docs.rs/gcc)\n \n A simple library meant to be used as a build dependency with Cargo packages in\n order to build a set of C/C++ files into a static archive. Note that while this\n@@ -106,7 +106,9 @@ gcc = { version = \"0.3\", features = [\"parallel\"] }\n ```\n \n By default gcc-rs will limit parallelism to `$NUM_JOBS`, or if not present it\n-will limit it to the number of cpus on the machine.\n+will limit it to the number of cpus on the machine. If you are using cargo,\n+use `-jN` option of `build`, `test` and `run` commands as `$NUM_JOBS`\n+is supplied by cargo.\n \n ## Compile-time Requirements\n "}, {"sha": "7fd0ea8fa84b72bbf8da4aeb92d4a91021f46514", "filename": "src/vendor/gcc/src/bin/gcc-shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fvendor%2Fgcc%2Fsrc%2Fbin%2Fgcc-shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fvendor%2Fgcc%2Fsrc%2Fbin%2Fgcc-shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fgcc%2Fsrc%2Fbin%2Fgcc-shim.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60", "patch": "@@ -10,14 +10,14 @@ fn main() {\n     for i in 0.. {\n         let candidate = out_dir.join(format!(\"out{}\", i));\n         if candidate.exists() {\n-            continue\n+            continue;\n         }\n         let mut f = File::create(candidate).unwrap();\n         for arg in env::args().skip(1) {\n             writeln!(f, \"{}\", arg).unwrap();\n         }\n \n         File::create(out_dir.join(\"libfoo.a\")).unwrap();\n-        break\n+        break;\n     }\n }"}, {"sha": "f2d9da7f694218d8016fdb0787c4b8510e99887f", "filename": "src/vendor/gcc/src/lib.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fvendor%2Fgcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fvendor%2Fgcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fgcc%2Fsrc%2Flib.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60"}, {"sha": "a45272344db403c87e1005a7315e14a755f47804", "filename": "src/vendor/gcc/src/registry.rs", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fvendor%2Fgcc%2Fsrc%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60/src%2Fvendor%2Fgcc%2Fsrc%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvendor%2Fgcc%2Fsrc%2Fregistry.rs?ref=ec73ef9dc85b7b1cb986eb7c85fc8093cc668f60"}]}