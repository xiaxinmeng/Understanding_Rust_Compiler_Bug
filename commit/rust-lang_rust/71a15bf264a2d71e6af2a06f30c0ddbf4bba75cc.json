{"sha": "71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxYTE1YmYyNjRhMmQ3MWU2YWYyYTA2ZjMwYzBkZGJmNGJiYTc1Y2M=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-04-06T10:13:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-06T10:13:38Z"}, "message": "Merge pull request #2635 from phansch/split_up_some_match_ui_tests\n\nSplit up some single_match UI tests", "tree": {"sha": "bebe6265ebdc4d43c2f9bbe8f4362a4745ead7cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bebe6265ebdc4d43c2f9bbe8f4362a4745ead7cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJax0hSCRBK7hj4Ov3rIwAAdHIIAEwIvey314v3YIwObDiouGPY\ntCwr+KDMH3lqhXRaDApCaAAyapEIp4rCK2r9oL9elBAvXGJSobBCOwpR4Nl5Kh3F\nradTe350zIJ8N/aVO0U4jg1x1YQtI3JGkKz/TH0YWR95uvGFqBC1DG1td/mjz8Rb\ntzOHThD9mSFX722OmWf+inJRKAB64LQAc3lkr3Ya1XGCt2rTESPlOJkT1yD+DlTE\nHcAMw5xM5cODVYI3VyX0HY9HnvsWpDK8RDULRcLX5WoZtZpn0THxrkpHjwpXN7mL\nhGaiwzU57uZoOLr+e+vgGNVB8AghLIXYcgUaRNN9CMDspib3JnDiGYkL46u00jc=\n=Zb/h\n-----END PGP SIGNATURE-----\n", "payload": "tree bebe6265ebdc4d43c2f9bbe8f4362a4745ead7cf\nparent 62d595b3dc80aff0208dc5945a39263caad94519\nparent 641f0685d075d9b4d719656805ca51465461aad1\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1523009618 +0200\ncommitter GitHub <noreply@github.com> 1523009618 +0200\n\nMerge pull request #2635 from phansch/split_up_some_match_ui_tests\n\nSplit up some single_match UI tests"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc", "html_url": "https://github.com/rust-lang/rust/commit/71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62d595b3dc80aff0208dc5945a39263caad94519", "url": "https://api.github.com/repos/rust-lang/rust/commits/62d595b3dc80aff0208dc5945a39263caad94519", "html_url": "https://github.com/rust-lang/rust/commit/62d595b3dc80aff0208dc5945a39263caad94519"}, {"sha": "641f0685d075d9b4d719656805ca51465461aad1", "url": "https://api.github.com/repos/rust-lang/rust/commits/641f0685d075d9b4d719656805ca51465461aad1", "html_url": "https://github.com/rust-lang/rust/commit/641f0685d075d9b4d719656805ca51465461aad1"}], "stats": {"total": 621, "additions": 314, "deletions": 307}, "files": [{"sha": "92e771e393c2be31b0d80fd4916a7dd0391ac6af", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc", "patch": "@@ -6,11 +6,6 @@\n #![allow(unused, if_let_redundant_pattern_matching)]\n #![warn(single_match_else, match_same_arms)]\n \n-use std::borrow::Cow;\n-\n-enum Foo { Bar, Baz(u8) }\n-use Foo::*;\n-\n enum ExprNode {\n     ExprAddrOf,\n     Butterflies,\n@@ -29,67 +24,6 @@ fn unwrap_addr() -> Option<&'static ExprNode> {\n     }\n }\n \n-fn single_match(){\n-    let x = Some(1u8);\n-\n-    match x {\n-        Some(y) => { println!(\"{:?}\", y); }\n-        _ => ()\n-    };\n-\n-    let z = (1u8,1u8);\n-    match z {\n-        (2...3, 7...9) => dummy(),\n-        _ => {}\n-    };\n-\n-    // Not linted (pattern guards used)\n-    match x {\n-        Some(y) if y == 0 => println!(\"{:?}\", y),\n-        _ => ()\n-    }\n-\n-    // Not linted (no block with statements in the single arm)\n-    match z {\n-        (2...3, 7...9) => println!(\"{:?}\", z),\n-        _ => println!(\"nope\"),\n-    }\n-}\n-\n-fn single_match_know_enum() {\n-    let x = Some(1u8);\n-    let y : Result<_, i8> = Ok(1i8);\n-\n-    match x {\n-        Some(y) => dummy(),\n-        None => ()\n-    };\n-\n-    match y {\n-        Ok(y) => dummy(),\n-        Err(..) => ()\n-    };\n-\n-    let c = Cow::Borrowed(\"\");\n-\n-    match c {\n-        Cow::Borrowed(..) => dummy(),\n-        Cow::Owned(..) => (),\n-    };\n-\n-    let z = Foo::Bar;\n-    // no warning\n-    match z {\n-        Bar => println!(\"42\"),\n-        Baz(_) => (),\n-    }\n-\n-    match z {\n-        Baz(_) => println!(\"42\"),\n-        Bar => (),\n-    }\n-}\n-\n fn match_bool() {\n     let test: bool = true;\n "}, {"sha": "aedf786462437cbf0a111ce08c58d9e465c6a30c", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 194, "deletions": 241, "changes": 435, "blob_url": "https://github.com/rust-lang/rust/blob/71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc", "patch": "@@ -1,473 +1,426 @@\n error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n-  --> $DIR/matches.rs:26:5\n+  --> $DIR/matches.rs:21:5\n    |\n-26 | /     match ExprNode::Butterflies {\n-27 | |         ExprNode::ExprAddrOf => Some(&NODE),\n-28 | |         _ => { let x = 5; None },\n-29 | |     }\n+21 | /     match ExprNode::Butterflies {\n+22 | |         ExprNode::ExprAddrOf => Some(&NODE),\n+23 | |         _ => { let x = 5; None },\n+24 | |     }\n    | |_____^ help: try this: `if let ExprNode::ExprAddrOf = ExprNode::Butterflies { Some(&NODE) } else { let x = 5; None }`\n    |\n    = note: `-D single-match-else` implied by `-D warnings`\n \n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n-  --> $DIR/matches.rs:35:5\n-   |\n-35 | /     match x {\n-36 | |         Some(y) => { println!(\"{:?}\", y); }\n-37 | |         _ => ()\n-38 | |     };\n-   | |_____^ help: try this: `if let Some(y) = x { println!(\"{:?}\", y); }`\n-   |\n-   = note: `-D single-match` implied by `-D warnings`\n-\n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n-  --> $DIR/matches.rs:41:5\n-   |\n-41 | /     match z {\n-42 | |         (2...3, 7...9) => dummy(),\n-43 | |         _ => {}\n-44 | |     };\n-   | |_____^ help: try this: `if let (2...3, 7...9) = z { dummy() }`\n-\n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n-  --> $DIR/matches.rs:63:5\n-   |\n-63 | /     match x {\n-64 | |         Some(y) => dummy(),\n-65 | |         None => ()\n-66 | |     };\n-   | |_____^ help: try this: `if let Some(y) = x { dummy() }`\n-\n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n-  --> $DIR/matches.rs:68:5\n+error: this boolean expression can be simplified\n+  --> $DIR/matches.rs:51:11\n    |\n-68 | /     match y {\n-69 | |         Ok(y) => dummy(),\n-70 | |         Err(..) => ()\n-71 | |     };\n-   | |_____^ help: try this: `if let Ok(y) = y { dummy() }`\n-\n-error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n-  --> $DIR/matches.rs:75:5\n+51 |     match test && test {\n+   |           ^^^^^^^^^^^^ help: try: `test`\n    |\n-75 | /     match c {\n-76 | |         Cow::Borrowed(..) => dummy(),\n-77 | |         Cow::Owned(..) => (),\n-78 | |     };\n-   | |_____^ help: try this: `if let Cow::Borrowed(..) = c { dummy() }`\n-\n-error: this boolean expression can be simplified\n-   --> $DIR/matches.rs:117:11\n-    |\n-117 |     match test && test {\n-    |           ^^^^^^^^^^^^ help: try: `test`\n-    |\n-    = note: `-D nonminimal-bool` implied by `-D warnings`\n+   = note: `-D nonminimal-bool` implied by `-D warnings`\n \n error: you seem to be trying to match on a boolean expression\n-  --> $DIR/matches.rs:96:5\n+  --> $DIR/matches.rs:30:5\n    |\n-96 | /     match test {\n-97 | |         true => 0,\n-98 | |         false => 42,\n-99 | |     };\n+30 | /     match test {\n+31 | |         true => 0,\n+32 | |         false => 42,\n+33 | |     };\n    | |_____^ help: consider using an if/else expression: `if test { 0 } else { 42 }`\n    |\n    = note: `-D match-bool` implied by `-D warnings`\n \n error: you seem to be trying to match on a boolean expression\n-   --> $DIR/matches.rs:102:5\n-    |\n-102 | /     match option == 1 {\n-103 | |         true => 1,\n-104 | |         false => 0,\n-105 | |     };\n-    | |_____^ help: consider using an if/else expression: `if option == 1 { 1 } else { 0 }`\n+  --> $DIR/matches.rs:36:5\n+   |\n+36 | /     match option == 1 {\n+37 | |         true => 1,\n+38 | |         false => 0,\n+39 | |     };\n+   | |_____^ help: consider using an if/else expression: `if option == 1 { 1 } else { 0 }`\n \n error: you seem to be trying to match on a boolean expression\n-   --> $DIR/matches.rs:107:5\n-    |\n-107 | /     match test {\n-108 | |         true => (),\n-109 | |         false => { println!(\"Noooo!\"); }\n-110 | |     };\n-    | |_____^ help: consider using an if/else expression: `if !test { println!(\"Noooo!\"); }`\n+  --> $DIR/matches.rs:41:5\n+   |\n+41 | /     match test {\n+42 | |         true => (),\n+43 | |         false => { println!(\"Noooo!\"); }\n+44 | |     };\n+   | |_____^ help: consider using an if/else expression: `if !test { println!(\"Noooo!\"); }`\n \n error: you seem to be trying to match on a boolean expression\n-   --> $DIR/matches.rs:112:5\n-    |\n-112 | /     match test {\n-113 | |         false => { println!(\"Noooo!\"); }\n-114 | |         _ => (),\n-115 | |     };\n-    | |_____^ help: consider using an if/else expression: `if !test { println!(\"Noooo!\"); }`\n+  --> $DIR/matches.rs:46:5\n+   |\n+46 | /     match test {\n+47 | |         false => { println!(\"Noooo!\"); }\n+48 | |         _ => (),\n+49 | |     };\n+   | |_____^ help: consider using an if/else expression: `if !test { println!(\"Noooo!\"); }`\n \n error: you seem to be trying to match on a boolean expression\n-   --> $DIR/matches.rs:117:5\n-    |\n-117 | /     match test && test {\n-118 | |         false => { println!(\"Noooo!\"); }\n-119 | |         _ => (),\n-120 | |     };\n-    | |_____^ help: consider using an if/else expression: `if !(test && test) { println!(\"Noooo!\"); }`\n+  --> $DIR/matches.rs:51:5\n+   |\n+51 | /     match test && test {\n+52 | |         false => { println!(\"Noooo!\"); }\n+53 | |         _ => (),\n+54 | |     };\n+   | |_____^ help: consider using an if/else expression: `if !(test && test) { println!(\"Noooo!\"); }`\n \n error: equal expressions as operands to `&&`\n-   --> $DIR/matches.rs:117:11\n-    |\n-117 |     match test && test {\n-    |           ^^^^^^^^^^^^\n-    |\n-    = note: `-D eq-op` implied by `-D warnings`\n+  --> $DIR/matches.rs:51:11\n+   |\n+51 |     match test && test {\n+   |           ^^^^^^^^^^^^\n+   |\n+   = note: `-D eq-op` implied by `-D warnings`\n \n error: you seem to be trying to match on a boolean expression\n-   --> $DIR/matches.rs:122:5\n-    |\n-122 | /     match test {\n-123 | |         false => { println!(\"Noooo!\"); }\n-124 | |         true => { println!(\"Yes!\"); }\n-125 | |     };\n-    | |_____^ help: consider using an if/else expression: `if test { println!(\"Yes!\"); } else { println!(\"Noooo!\"); }`\n+  --> $DIR/matches.rs:56:5\n+   |\n+56 | /     match test {\n+57 | |         false => { println!(\"Noooo!\"); }\n+58 | |         true => { println!(\"Yes!\"); }\n+59 | |     };\n+   | |_____^ help: consider using an if/else expression: `if test { println!(\"Yes!\"); } else { println!(\"Noooo!\"); }`\n \n error: you don't need to add `&` to all patterns\n-   --> $DIR/matches.rs:138:9\n-    |\n-138 | /         match v {\n-139 | |             &Some(v) => println!(\"{:?}\", v),\n-140 | |             &None => println!(\"none\"),\n-141 | |         }\n-    | |_________^\n-    |\n-    = note: `-D match-ref-pats` implied by `-D warnings`\n+  --> $DIR/matches.rs:72:9\n+   |\n+72 | /         match v {\n+73 | |             &Some(v) => println!(\"{:?}\", v),\n+74 | |             &None => println!(\"none\"),\n+75 | |         }\n+   | |_________^\n+   |\n+   = note: `-D match-ref-pats` implied by `-D warnings`\n help: instead of prefixing all patterns with `&`, you can dereference the expression\n-    |\n-138 |         match *v {\n-139 |             Some(v) => println!(\"{:?}\", v),\n-140 |             None => println!(\"none\"),\n-    |\n+   |\n+72 |         match *v {\n+73 |             Some(v) => println!(\"{:?}\", v),\n+74 |             None => println!(\"none\"),\n+   |\n \n error: you don't need to add `&` to all patterns\n-   --> $DIR/matches.rs:148:5\n-    |\n-148 | /     match tup {\n-149 | |         &(v, 1) => println!(\"{}\", v),\n-150 | |         _ => println!(\"none\"),\n-151 | |     }\n-    | |_____^\n+  --> $DIR/matches.rs:82:5\n+   |\n+82 | /     match tup {\n+83 | |         &(v, 1) => println!(\"{}\", v),\n+84 | |         _ => println!(\"none\"),\n+85 | |     }\n+   | |_____^\n help: instead of prefixing all patterns with `&`, you can dereference the expression\n-    |\n-148 |     match *tup {\n-149 |         (v, 1) => println!(\"{}\", v),\n-    |\n+   |\n+82 |     match *tup {\n+83 |         (v, 1) => println!(\"{}\", v),\n+   |\n \n error: you don't need to add `&` to both the expression and the patterns\n-   --> $DIR/matches.rs:154:5\n-    |\n-154 | /     match &w {\n-155 | |         &Some(v) => println!(\"{:?}\", v),\n-156 | |         &None => println!(\"none\"),\n-157 | |     }\n-    | |_____^\n+  --> $DIR/matches.rs:88:5\n+   |\n+88 | /     match &w {\n+89 | |         &Some(v) => println!(\"{:?}\", v),\n+90 | |         &None => println!(\"none\"),\n+91 | |     }\n+   | |_____^\n help: try\n-    |\n-154 |     match w {\n-155 |         Some(v) => println!(\"{:?}\", v),\n-156 |         None => println!(\"none\"),\n-    |\n+   |\n+88 |     match w {\n+89 |         Some(v) => println!(\"{:?}\", v),\n+90 |         None => println!(\"none\"),\n+   |\n \n error: you don't need to add `&` to all patterns\n-   --> $DIR/matches.rs:165:5\n+   --> $DIR/matches.rs:99:5\n     |\n-165 | /     if let &None = a {\n-166 | |         println!(\"none\");\n-167 | |     }\n+99  | /     if let &None = a {\n+100 | |         println!(\"none\");\n+101 | |     }\n     | |_____^\n help: instead of prefixing all patterns with `&`, you can dereference the expression\n     |\n-165 |     if let None = *a {\n+99  |     if let None = *a {\n     |\n \n error: you don't need to add `&` to both the expression and the patterns\n-   --> $DIR/matches.rs:170:5\n+   --> $DIR/matches.rs:104:5\n     |\n-170 | /     if let &None = &b {\n-171 | |         println!(\"none\");\n-172 | |     }\n+104 | /     if let &None = &b {\n+105 | |         println!(\"none\");\n+106 | |     }\n     | |_____^\n help: try\n     |\n-170 |     if let None = b {\n+104 |     if let None = b {\n     |\n \n error: some ranges overlap\n-   --> $DIR/matches.rs:179:9\n+   --> $DIR/matches.rs:113:9\n     |\n-179 |         0 ... 10 => println!(\"0 ... 10\"),\n+113 |         0 ... 10 => println!(\"0 ... 10\"),\n     |         ^^^^^^^^\n     |\n     = note: `-D match-overlapping-arm` implied by `-D warnings`\n note: overlaps with this\n-   --> $DIR/matches.rs:180:9\n+   --> $DIR/matches.rs:114:9\n     |\n-180 |         0 ... 11 => println!(\"0 ... 11\"),\n+114 |         0 ... 11 => println!(\"0 ... 11\"),\n     |         ^^^^^^^^\n \n error: some ranges overlap\n-   --> $DIR/matches.rs:185:9\n+   --> $DIR/matches.rs:119:9\n     |\n-185 |         0 ... 5 => println!(\"0 ... 5\"),\n+119 |         0 ... 5 => println!(\"0 ... 5\"),\n     |         ^^^^^^^\n     |\n note: overlaps with this\n-   --> $DIR/matches.rs:187:9\n+   --> $DIR/matches.rs:121:9\n     |\n-187 |         FOO ... 11 => println!(\"0 ... 11\"),\n+121 |         FOO ... 11 => println!(\"0 ... 11\"),\n     |         ^^^^^^^^^^\n \n error: some ranges overlap\n-   --> $DIR/matches.rs:193:9\n+   --> $DIR/matches.rs:127:9\n     |\n-193 |         0 ... 5 => println!(\"0 ... 5\"),\n+127 |         0 ... 5 => println!(\"0 ... 5\"),\n     |         ^^^^^^^\n     |\n note: overlaps with this\n-   --> $DIR/matches.rs:192:9\n+   --> $DIR/matches.rs:126:9\n     |\n-192 |         2 => println!(\"2\"),\n+126 |         2 => println!(\"2\"),\n     |         ^\n \n error: some ranges overlap\n-   --> $DIR/matches.rs:199:9\n+   --> $DIR/matches.rs:133:9\n     |\n-199 |         0 ... 2 => println!(\"0 ... 2\"),\n+133 |         0 ... 2 => println!(\"0 ... 2\"),\n     |         ^^^^^^^\n     |\n note: overlaps with this\n-   --> $DIR/matches.rs:198:9\n+   --> $DIR/matches.rs:132:9\n     |\n-198 |         2 => println!(\"2\"),\n+132 |         2 => println!(\"2\"),\n     |         ^\n \n error: some ranges overlap\n-   --> $DIR/matches.rs:222:9\n+   --> $DIR/matches.rs:156:9\n     |\n-222 |         0 .. 11 => println!(\"0 .. 11\"),\n+156 |         0 .. 11 => println!(\"0 .. 11\"),\n     |         ^^^^^^^\n     |\n note: overlaps with this\n-   --> $DIR/matches.rs:223:9\n+   --> $DIR/matches.rs:157:9\n     |\n-223 |         0 ... 11 => println!(\"0 ... 11\"),\n+157 |         0 ... 11 => println!(\"0 ... 11\"),\n     |         ^^^^^^^^\n \n error: Err(_) will match all errors, maybe not a good idea\n-   --> $DIR/matches.rs:240:9\n+   --> $DIR/matches.rs:174:9\n     |\n-240 |         Err(_) => panic!(\"err\")\n+174 |         Err(_) => panic!(\"err\")\n     |         ^^^^^^\n     |\n     = note: `-D match-wild-err-arm` implied by `-D warnings`\n     = note: to remove this warning, match each error seperately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:239:18\n+   --> $DIR/matches.rs:173:18\n     |\n-239 |         Ok(_) => println!(\"ok\"),\n+173 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n     = note: `-D match-same-arms` implied by `-D warnings`\n note: same as this\n-   --> $DIR/matches.rs:238:18\n+   --> $DIR/matches.rs:172:18\n     |\n-238 |         Ok(3) => println!(\"ok\"),\n+172 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:238:18\n+   --> $DIR/matches.rs:172:18\n     |\n-238 |         Ok(3) => println!(\"ok\"),\n+172 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: Err(_) will match all errors, maybe not a good idea\n-   --> $DIR/matches.rs:246:9\n+   --> $DIR/matches.rs:180:9\n     |\n-246 |         Err(_) => {panic!()}\n+180 |         Err(_) => {panic!()}\n     |         ^^^^^^\n     |\n     = note: to remove this warning, match each error seperately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:245:18\n+   --> $DIR/matches.rs:179:18\n     |\n-245 |         Ok(_) => println!(\"ok\"),\n+179 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:244:18\n+   --> $DIR/matches.rs:178:18\n     |\n-244 |         Ok(3) => println!(\"ok\"),\n+178 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:244:18\n+   --> $DIR/matches.rs:178:18\n     |\n-244 |         Ok(3) => println!(\"ok\"),\n+178 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: Err(_) will match all errors, maybe not a good idea\n-   --> $DIR/matches.rs:252:9\n+   --> $DIR/matches.rs:186:9\n     |\n-252 |         Err(_) => {panic!();}\n+186 |         Err(_) => {panic!();}\n     |         ^^^^^^\n     |\n     = note: to remove this warning, match each error seperately or use unreachable macro\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:251:18\n+   --> $DIR/matches.rs:185:18\n     |\n-251 |         Ok(_) => println!(\"ok\"),\n+185 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:250:18\n+   --> $DIR/matches.rs:184:18\n     |\n-250 |         Ok(3) => println!(\"ok\"),\n+184 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:250:18\n+   --> $DIR/matches.rs:184:18\n     |\n-250 |         Ok(3) => println!(\"ok\"),\n+184 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:258:18\n+   --> $DIR/matches.rs:192:18\n     |\n-258 |         Ok(_) => println!(\"ok\"),\n+192 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:257:18\n+   --> $DIR/matches.rs:191:18\n     |\n-257 |         Ok(3) => println!(\"ok\"),\n+191 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:257:18\n+   --> $DIR/matches.rs:191:18\n     |\n-257 |         Ok(3) => println!(\"ok\"),\n+191 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:265:18\n+   --> $DIR/matches.rs:199:18\n     |\n-265 |         Ok(_) => println!(\"ok\"),\n+199 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:264:18\n+   --> $DIR/matches.rs:198:18\n     |\n-264 |         Ok(3) => println!(\"ok\"),\n+198 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:264:18\n+   --> $DIR/matches.rs:198:18\n     |\n-264 |         Ok(3) => println!(\"ok\"),\n+198 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:271:18\n+   --> $DIR/matches.rs:205:18\n     |\n-271 |         Ok(_) => println!(\"ok\"),\n+205 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:270:18\n+   --> $DIR/matches.rs:204:18\n     |\n-270 |         Ok(3) => println!(\"ok\"),\n+204 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:270:18\n+   --> $DIR/matches.rs:204:18\n     |\n-270 |         Ok(3) => println!(\"ok\"),\n+204 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:277:18\n+   --> $DIR/matches.rs:211:18\n     |\n-277 |         Ok(_) => println!(\"ok\"),\n+211 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:276:18\n+   --> $DIR/matches.rs:210:18\n     |\n-276 |         Ok(3) => println!(\"ok\"),\n+210 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:276:18\n+   --> $DIR/matches.rs:210:18\n     |\n-276 |         Ok(3) => println!(\"ok\"),\n+210 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:298:29\n+   --> $DIR/matches.rs:232:29\n     |\n-298 |         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n+232 |         (Ok(_), Some(x)) => println!(\"ok {}\", x),\n     |                             ^^^^^^^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:297:29\n+   --> $DIR/matches.rs:231:29\n     |\n-297 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n+231 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n     |                             ^^^^^^^^^^^^^^^^^^^^\n note: consider refactoring into `(Ok(x), Some(_)) | (Ok(_), Some(x))`\n-   --> $DIR/matches.rs:297:29\n+   --> $DIR/matches.rs:231:29\n     |\n-297 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n+231 |         (Ok(x), Some(_)) => println!(\"ok {}\", x),\n     |                             ^^^^^^^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:313:18\n+   --> $DIR/matches.rs:247:18\n     |\n-313 |         Ok(_) => println!(\"ok\"),\n+247 |         Ok(_) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     |\n note: same as this\n-   --> $DIR/matches.rs:312:18\n+   --> $DIR/matches.rs:246:18\n     |\n-312 |         Ok(3) => println!(\"ok\"),\n+246 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:312:18\n+   --> $DIR/matches.rs:246:18\n     |\n-312 |         Ok(3) => println!(\"ok\"),\n+246 |         Ok(3) => println!(\"ok\"),\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: use as_ref() instead\n-   --> $DIR/matches.rs:320:33\n+   --> $DIR/matches.rs:254:33\n     |\n-320 |       let borrowed: Option<&()> = match owned {\n+254 |       let borrowed: Option<&()> = match owned {\n     |  _________________________________^\n-321 | |         None => None,\n-322 | |         Some(ref v) => Some(v),\n-323 | |     };\n+255 | |         None => None,\n+256 | |         Some(ref v) => Some(v),\n+257 | |     };\n     | |_____^ help: try this: `owned.as_ref()`\n     |\n     = note: `-D match-as-ref` implied by `-D warnings`\n \n error: use as_mut() instead\n-   --> $DIR/matches.rs:326:39\n+   --> $DIR/matches.rs:260:39\n     |\n-326 |       let borrow_mut: Option<&mut ()> = match mut_owned {\n+260 |       let borrow_mut: Option<&mut ()> = match mut_owned {\n     |  _______________________________________^\n-327 | |         None => None,\n-328 | |         Some(ref mut v) => Some(v),\n-329 | |     };\n+261 | |         None => None,\n+262 | |         Some(ref mut v) => Some(v),\n+263 | |     };\n     | |_____^ help: try this: `mut_owned.as_mut()`\n \n-error: aborting due to 38 previous errors\n+error: aborting due to 33 previous errors\n "}, {"sha": "b064eed5711fe55f6c6ec0e8a7727657ea320ef0", "filename": "tests/ui/single_match.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc/tests%2Fui%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc/tests%2Fui%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match.rs?ref=71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc", "patch": "@@ -0,0 +1,71 @@\n+#![warn(single_match)]\n+\n+fn dummy() {\n+}\n+\n+fn single_match(){\n+    let x = Some(1u8);\n+\n+    match x {\n+        Some(y) => { println!(\"{:?}\", y); }\n+        _ => ()\n+    };\n+\n+    let z = (1u8,1u8);\n+    match z {\n+        (2...3, 7...9) => dummy(),\n+        _ => {}\n+    };\n+\n+    // Not linted (pattern guards used)\n+    match x {\n+        Some(y) if y == 0 => println!(\"{:?}\", y),\n+        _ => ()\n+    }\n+\n+    // Not linted (no block with statements in the single arm)\n+    match z {\n+        (2...3, 7...9) => println!(\"{:?}\", z),\n+        _ => println!(\"nope\"),\n+    }\n+}\n+\n+enum Foo { Bar, Baz(u8) }\n+use Foo::*;\n+use std::borrow::Cow;\n+\n+fn single_match_know_enum() {\n+    let x = Some(1u8);\n+    let y : Result<_, i8> = Ok(1i8);\n+\n+    match x {\n+        Some(y) => dummy(),\n+        None => ()\n+    };\n+\n+    match y {\n+        Ok(y) => dummy(),\n+        Err(..) => ()\n+    };\n+\n+    let c = Cow::Borrowed(\"\");\n+\n+    match c {\n+        Cow::Borrowed(..) => dummy(),\n+        Cow::Owned(..) => (),\n+    };\n+\n+    let z = Foo::Bar;\n+    // no warning\n+    match z {\n+        Bar => println!(\"42\"),\n+        Baz(_) => (),\n+    }\n+\n+    match z {\n+        Baz(_) => println!(\"42\"),\n+        Bar => (),\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "d77211bc12613b937dfda8d06688c919f34ef740", "filename": "tests/ui/single_match.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc/tests%2Fui%2Fsingle_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc/tests%2Fui%2Fsingle_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_match.stderr?ref=71a15bf264a2d71e6af2a06f30c0ddbf4bba75cc", "patch": "@@ -0,0 +1,49 @@\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match.rs:9:5\n+   |\n+9  | /     match x {\n+10 | |         Some(y) => { println!(\"{:?}\", y); }\n+11 | |         _ => ()\n+12 | |     };\n+   | |_____^ help: try this: `if let Some(y) = x { println!(\"{:?}\", y); }`\n+   |\n+   = note: `-D single-match` implied by `-D warnings`\n+\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match.rs:15:5\n+   |\n+15 | /     match z {\n+16 | |         (2...3, 7...9) => dummy(),\n+17 | |         _ => {}\n+18 | |     };\n+   | |_____^ help: try this: `if let (2...3, 7...9) = z { dummy() }`\n+\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match.rs:41:5\n+   |\n+41 | /     match x {\n+42 | |         Some(y) => dummy(),\n+43 | |         None => ()\n+44 | |     };\n+   | |_____^ help: try this: `if let Some(y) = x { dummy() }`\n+\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match.rs:46:5\n+   |\n+46 | /     match y {\n+47 | |         Ok(y) => dummy(),\n+48 | |         Err(..) => ()\n+49 | |     };\n+   | |_____^ help: try this: `if let Ok(y) = y { dummy() }`\n+\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/single_match.rs:53:5\n+   |\n+53 | /     match c {\n+54 | |         Cow::Borrowed(..) => dummy(),\n+55 | |         Cow::Owned(..) => (),\n+56 | |     };\n+   | |_____^ help: try this: `if let Cow::Borrowed(..) = c { dummy() }`\n+\n+error: aborting due to 5 previous errors\n+"}]}