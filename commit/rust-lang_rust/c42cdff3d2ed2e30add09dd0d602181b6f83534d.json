{"sha": "c42cdff3d2ed2e30add09dd0d602181b6f83534d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MmNkZmYzZDJlZDJlMzBhZGQwOWRkMGQ2MDIxODFiNmY4MzUzNGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-17T08:28:44Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-17T08:28:44Z"}, "message": "internal: minimize minicore\n\nWe want to keep minicore small, so let's split out iterator adapters and\nsources into a separate `iterators` region, and use them only when\nneeded.", "tree": {"sha": "b927b06a3f866f6ebac907d7714fa05af7422d4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b927b06a3f866f6ebac907d7714fa05af7422d4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c42cdff3d2ed2e30add09dd0d602181b6f83534d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c42cdff3d2ed2e30add09dd0d602181b6f83534d", "html_url": "https://github.com/rust-lang/rust/commit/c42cdff3d2ed2e30add09dd0d602181b6f83534d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c42cdff3d2ed2e30add09dd0d602181b6f83534d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546", "html_url": "https://github.com/rust-lang/rust/commit/9b3aa591cd0672e9b7bdf3e5aab630cd09a4d546"}], "stats": {"total": 95, "additions": 36, "deletions": 59}, "files": [{"sha": "335d57a0df33118ef8dab0b2398665315e331e38", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c42cdff3d2ed2e30add09dd0d602181b6f83534d/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42cdff3d2ed2e30add09dd0d602181b6f83534d/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=c42cdff3d2ed2e30add09dd0d602181b6f83534d", "patch": "@@ -818,7 +818,7 @@ fn main() {\n     fn shorten_iterators_in_associated_params() {\n         check_types(\n             r#\"\n-//- minicore: iterator\n+//- minicore: iterators\n use core::iter;\n \n pub struct SomeIter<T> {}\n@@ -1126,7 +1126,7 @@ fn main() {\n     fn shorten_iterator_hints() {\n         check_types(\n             r#\"\n-//- minicore: iterator\n+//- minicore: iterators\n use core::iter;\n \n struct MyIter;\n@@ -1357,7 +1357,7 @@ fn main() {\n                 max_length: None,\n             },\n             r#\"\n-//- minicore: iterator\n+//- minicore: iterators\n use core::iter;\n \n struct MyIter;"}, {"sha": "5f2aa016f48cbd5a491e560b5af17754d08db573", "filename": "crates/ide_assists/src/handlers/replace_for_loop_with_for_each.rs", "status": "modified", "additions": 25, "deletions": 53, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c42cdff3d2ed2e30add09dd0d602181b6f83534d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42cdff3d2ed2e30add09dd0d602181b6f83534d/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_for_loop_with_for_each.rs?ref=c42cdff3d2ed2e30add09dd0d602181b6f83534d", "patch": "@@ -186,18 +186,14 @@ fn main() {\n     fn test_for_borrowed() {\n         check_assist(\n             replace_for_loop_with_for_each,\n-            r\"\n-//- minicore: iterator\n-struct Iter;\n-impl Iterator for Iter {\n-    type Item = usize;\n-    fn next(&mut self) -> Option<Self::Item> { None }\n-}\n+            r#\"\n+//- minicore: iterators\n+use core::iter::{Repeat, repeat};\n \n struct S;\n impl S {\n-    fn iter(&self) -> Iter { Iter }\n-    fn iter_mut(&mut self) -> Iter { Iter }\n+    fn iter(&self) -> Repeat<i32> { repeat(92) }\n+    fn iter_mut(&mut self) -> Repeat<i32> { repeat(92) }\n }\n \n fn main() {\n@@ -206,18 +202,14 @@ fn main() {\n         let a = v * 2;\n     }\n }\n-\",\n-            r\"\n-struct Iter;\n-impl Iterator for Iter {\n-    type Item = usize;\n-    fn next(&mut self) -> Option<Self::Item> { None }\n-}\n+\"#,\n+            r#\"\n+use core::iter::{Repeat, repeat};\n \n struct S;\n impl S {\n-    fn iter(&self) -> Iter { Iter }\n-    fn iter_mut(&mut self) -> Iter { Iter }\n+    fn iter(&self) -> Repeat<i32> { repeat(92) }\n+    fn iter_mut(&mut self) -> Repeat<i32> { repeat(92) }\n }\n \n fn main() {\n@@ -226,7 +218,7 @@ fn main() {\n         let a = v * 2;\n     });\n }\n-\",\n+\"#,\n         )\n     }\n \n@@ -259,18 +251,14 @@ fn main() {\n     fn test_for_borrowed_mut() {\n         check_assist(\n             replace_for_loop_with_for_each,\n-            r\"\n-//- minicore: iterator\n-struct Iter;\n-impl Iterator for Iter {\n-    type Item = usize;\n-    fn next(&mut self) -> Option<Self::Item> { None }\n-}\n+            r#\"\n+//- minicore: iterators\n+use core::iter::{Repeat, repeat};\n \n struct S;\n impl S {\n-    fn iter(&self) -> Iter { Iter }\n-    fn iter_mut(&mut self) -> Iter { Iter }\n+    fn iter(&self) -> Repeat<i32> { repeat(92) }\n+    fn iter_mut(&mut self) -> Repeat<i32> { repeat(92) }\n }\n \n fn main() {\n@@ -279,18 +267,14 @@ fn main() {\n         let a = v * 2;\n     }\n }\n-\",\n-            r\"\n-struct Iter;\n-impl Iterator for Iter {\n-    type Item = usize;\n-    fn next(&mut self) -> Option<Self::Item> { None }\n-}\n+\"#,\n+            r#\"\n+use core::iter::{Repeat, repeat};\n \n struct S;\n impl S {\n-    fn iter(&self) -> Iter { Iter }\n-    fn iter_mut(&mut self) -> Iter { Iter }\n+    fn iter(&self) -> Repeat<i32> { repeat(92) }\n+    fn iter_mut(&mut self) -> Repeat<i32> { repeat(92) }\n }\n \n fn main() {\n@@ -299,7 +283,7 @@ fn main() {\n         let a = v * 2;\n     });\n }\n-\",\n+\"#,\n         )\n     }\n \n@@ -332,28 +316,16 @@ fn main() {\n         check_assist(\n             replace_for_loop_with_for_each,\n             r#\"\n-//- minicore: iterator\n-struct Iter;\n-impl Iterator for Iter {\n-    type Item = usize;\n-    fn next(&mut self) -> Option<Self::Item> { None }\n-}\n-\n+//- minicore: iterators\n fn main() {\n-    for$0 a in Iter.take(1) {\n+    for$0 a in core::iter::repeat(92).take(1) {\n         println!(\"{}\", a);\n     }\n }\n \"#,\n             r#\"\n-struct Iter;\n-impl Iterator for Iter {\n-    type Item = usize;\n-    fn next(&mut self) -> Option<Self::Item> { None }\n-}\n-\n fn main() {\n-    Iter.take(1).for_each(|a| {\n+    core::iter::repeat(92).take(1).for_each(|a| {\n         println!(\"{}\", a);\n     });\n }"}, {"sha": "e6d2301c78e03097f2d2b45141360b43116e81a0", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c42cdff3d2ed2e30add09dd0d602181b6f83534d/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c42cdff3d2ed2e30add09dd0d602181b6f83534d/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=c42cdff3d2ed2e30add09dd0d602181b6f83534d", "patch": "@@ -21,6 +21,7 @@\n //!     option:\n //!     result:\n //!     iterator: option\n+//!     iterators: iterator\n \n pub mod marker {\n     // region:sized\n@@ -209,6 +210,7 @@ pub mod task {\n \n // region:iterator\n pub mod iter {\n+    // region:iterators\n     mod adapters {\n         pub struct Take<I> {\n             iter: I,\n@@ -249,6 +251,7 @@ pub mod iter {\n         pub use self::repeat::{repeat, Repeat};\n     }\n     pub use self::sources::{repeat, Repeat};\n+    // endregion:iterators\n \n     mod traits {\n         mod iterator {\n@@ -261,15 +264,17 @@ pub mod iter {\n                 fn nth(&mut self, n: usize) -> Option<Self::Item> {\n                     loop {}\n                 }\n-                fn take(self, n: usize) -> crate::iter::Take<Self> {\n-                    loop {}\n-                }\n                 fn by_ref(&mut self) -> &mut Self\n                 where\n                     Self: Sized,\n                 {\n                     self\n                 }\n+                // region:iterators\n+                fn take(self, n: usize) -> crate::iter::Take<Self> {\n+                    loop {}\n+                }\n+                // endregion:iterators\n             }\n             impl<I: Iterator + ?Sized> Iterator for &mut I {\n                 type Item = I::Item;"}]}