{"sha": "058346219a48ff6ac4c9c2fd38e8f478599ab078", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ODM0NjIxOWE0OGZmNmFjNGM5YzJmZDM4ZThmNDc4NTk5YWIwNzg=", "commit": {"author": {"name": "Jesse Luehrs", "email": "doy@tozt.net", "date": "2013-04-10T03:18:23Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-05-01T23:49:58Z"}, "message": "libc bindings for glob.h\n\nonly tested on linux/x86_64, but i got the values for other platforms\nfrom their system header files.\n\nno bindings for win32, because win32 doesn't include glob.h.\n\nalso, glob() takes a callback for error handling, but i'm just making\nthis a *c_void for now, since i don't know how to represent c calling\nback into rust (if that's even currently possible).", "tree": {"sha": "9022d154d03ae0ffad0caaf11c90fe0942e6c1b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9022d154d03ae0ffad0caaf11c90fe0942e6c1b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/058346219a48ff6ac4c9c2fd38e8f478599ab078", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/058346219a48ff6ac4c9c2fd38e8f478599ab078", "html_url": "https://github.com/rust-lang/rust/commit/058346219a48ff6ac4c9c2fd38e8f478599ab078", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/058346219a48ff6ac4c9c2fd38e8f478599ab078/comments", "author": {"login": "doy", "id": 78547, "node_id": "MDQ6VXNlcjc4NTQ3", "avatar_url": "https://avatars.githubusercontent.com/u/78547?v=4", "gravatar_id": "", "url": "https://api.github.com/users/doy", "html_url": "https://github.com/doy", "followers_url": "https://api.github.com/users/doy/followers", "following_url": "https://api.github.com/users/doy/following{/other_user}", "gists_url": "https://api.github.com/users/doy/gists{/gist_id}", "starred_url": "https://api.github.com/users/doy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/doy/subscriptions", "organizations_url": "https://api.github.com/users/doy/orgs", "repos_url": "https://api.github.com/users/doy/repos", "events_url": "https://api.github.com/users/doy/events{/privacy}", "received_events_url": "https://api.github.com/users/doy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08dd625d455548c7a5795db930ebfc5e3b1eb9c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/08dd625d455548c7a5795db930ebfc5e3b1eb9c4", "html_url": "https://github.com/rust-lang/rust/commit/08dd625d455548c7a5795db930ebfc5e3b1eb9c4"}], "stats": {"total": 108, "additions": 106, "deletions": 2}, "files": [{"sha": "b5c444dedf8a787eccae405e00c2bd9d74e26878", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 106, "deletions": 2, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/058346219a48ff6ac4c9c2fd38e8f478599ab078/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/058346219a48ff6ac4c9c2fd38e8f478599ab078/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=058346219a48ff6ac4c9c2fd38e8f478599ab078", "patch": "@@ -104,6 +104,7 @@ pub use libc::funcs::posix88::unistd::*;\n \n pub use libc::funcs::posix01::stat_::*;\n pub use libc::funcs::posix01::unistd::*;\n+pub use libc::funcs::posix01::glob::*;\n pub use libc::funcs::posix08::unistd::*;\n \n pub use libc::funcs::bsd44::*;\n@@ -210,7 +211,21 @@ pub mod types {\n     #[cfg(target_os = \"android\")]\n     pub mod os {\n         pub mod common {\n-            pub mod posix01 {}\n+            pub mod posix01 {\n+                use libc::types::common::c95::{c_void};\n+                use libc::types::os::arch::c95::{c_char, size_t};\n+                pub struct glob_t {\n+                    gl_pathc: size_t,\n+                    gl_pathv: **c_char,\n+                    gl_offs:  size_t,\n+\n+                    __unused1: *c_void,\n+                    __unused2: *c_void,\n+                    __unused3: *c_void,\n+                    __unused4: *c_void,\n+                    __unused5: *c_void,\n+                }\n+            }\n         }\n \n         #[cfg(target_arch = \"x86\")]\n@@ -369,7 +384,25 @@ pub mod types {\n     #[cfg(target_os = \"freebsd\")]\n     pub mod os {\n         pub mod common {\n-            pub mod posix01 {}\n+            pub mod posix01 {\n+                use libc::types::common::c95::{c_void};\n+                use libc::types::os::arch::c95::{c_char, c_int, size_t};\n+                struct glob_t {\n+                    gl_pathc:  size_t,\n+                    __unused1: size_t,\n+                    gl_offs:   size_t,\n+                    __unused2: c_int,\n+                    gl_pathv:  **c_char,\n+\n+                    __unused3: *c_void,\n+\n+                    __unused4: *c_void,\n+                    __unused5: *c_void,\n+                    __unused6: *c_void,\n+                    __unused7: *c_void,\n+                    __unused8: *c_void,\n+                }\n+            }\n         }\n \n         #[cfg(target_arch = \"x86_64\")]\n@@ -571,6 +604,23 @@ pub mod types {\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n+                use libc::types::common::c95::{c_void};\n+                use libc::types::os::arch::c95::{c_char, c_int, size_t};\n+                struct glob_t {\n+                    gl_pathc:  size_t,\n+                    __unused1: c_int,\n+                    gl_offs:   size_t,\n+                    __unused2: c_int,\n+                    gl_pathv:  **c_char,\n+\n+                    __unused3: *c_void,\n+\n+                    __unused4: *c_void,\n+                    __unused5: *c_void,\n+                    __unused6: *c_void,\n+                    __unused7: *c_void,\n+                    __unused8: *c_void,\n+                }\n             }\n         }\n \n@@ -877,6 +927,18 @@ pub mod consts {\n         }\n         pub mod posix01 {\n             pub static SIGTRAP : int = 5;\n+\n+            pub static GLOB_ERR      : int = 1 << 0;\n+            pub static GLOB_MARK     : int = 1 << 1;\n+            pub static GLOB_NOSORT   : int = 1 << 2;\n+            pub static GLOB_DOOFFS   : int = 1 << 3;\n+            pub static GLOB_NOCHECK  : int = 1 << 4;\n+            pub static GLOB_APPEND   : int = 1 << 5;\n+            pub static GLOB_NOESCAPE : int = 1 << 6;\n+\n+            pub static GLOB_NOSPACE  : int = 1;\n+            pub static GLOB_ABORTED  : int = 2;\n+            pub static GLOB_NOMATCH  : int = 3;\n         }\n         pub mod posix08 {\n         }\n@@ -956,6 +1018,18 @@ pub mod consts {\n         }\n         pub mod posix01 {\n             pub static SIGTRAP : int = 5;\n+\n+            pub static GLOB_APPEND   : int = 0x0001;\n+            pub static GLOB_DOOFFS   : int = 0x0002;\n+            pub static GLOB_ERR      : int = 0x0004;\n+            pub static GLOB_MARK     : int = 0x0008;\n+            pub static GLOB_NOCHECK  : int = 0x0010;\n+            pub static GLOB_NOSORT   : int = 0x0020;\n+            pub static GLOB_NOESCAPE : int = 0x2000;\n+\n+            pub static GLOB_NOSPACE  : int = -1;\n+            pub static GLOB_ABORTED  : int = -2;\n+            pub static GLOB_NOMATCH  : int = -3;\n         }\n         pub mod posix08 {\n         }\n@@ -1036,6 +1110,18 @@ pub mod consts {\n         }\n         pub mod posix01 {\n             pub static SIGTRAP : int = 5;\n+\n+            pub static GLOB_APPEND   : int = 0x0001;\n+            pub static GLOB_DOOFFS   : int = 0x0002;\n+            pub static GLOB_ERR      : int = 0x0004;\n+            pub static GLOB_MARK     : int = 0x0008;\n+            pub static GLOB_NOCHECK  : int = 0x0010;\n+            pub static GLOB_NOSORT   : int = 0x0020;\n+            pub static GLOB_NOESCAPE : int = 0x2000;\n+\n+            pub static GLOB_NOSPACE  : int = -1;\n+            pub static GLOB_ABORTED  : int = -2;\n+            pub static GLOB_NOMATCH  : int = -3;\n         }\n         pub mod posix08 {\n         }\n@@ -1606,6 +1692,21 @@ pub mod funcs {\n                                -> pid_t;\n             }\n         }\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        pub mod glob {\n+            use libc::types::common::c95::{c_void};\n+            use libc::types::os::arch::c95::{c_char, c_int};\n+            use libc::types::os::common::posix01::{glob_t};\n+\n+            pub extern {\n+                unsafe fn glob(pattern: *c_char, flags: c_int,\n+                               errfunc: *c_void, // XXX callback\n+                               pglob: *mut glob_t);\n+                unsafe fn globfree(pglob: *mut glob_t);\n+            }\n+        }\n     }\n \n     #[cfg(target_os = \"win32\")]\n@@ -1615,6 +1716,9 @@ pub mod funcs {\n \n         pub mod unistd {\n         }\n+\n+        pub mod glob {\n+        }\n     }\n \n "}]}