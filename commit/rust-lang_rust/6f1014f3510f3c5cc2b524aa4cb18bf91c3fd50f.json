{"sha": "6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMTAxNGYzNTEwZjNjNWNjMmI1MjRhYTRjYjE4YmY5MWMzZmQ1MGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-04T10:33:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-04T10:33:42Z"}, "message": "Auto merge of #28069 - alexcrichton:rt-atexit, r=brson\n\nThis adds a call to `rt::cleanup` on `process::exit` to make sure we clean up\r\nafter ourselves on the way out from Rust.\r\n\r\nCloses #28065", "tree": {"sha": "e855c86773552140e5f2deca9ba37a4c20f153c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e855c86773552140e5f2deca9ba37a4c20f153c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f", "html_url": "https://github.com/rust-lang/rust/commit/6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4de424e4175eefb4fda6e3ed634acfab3ec0daf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4de424e4175eefb4fda6e3ed634acfab3ec0daf", "html_url": "https://github.com/rust-lang/rust/commit/b4de424e4175eefb4fda6e3ed634acfab3ec0daf"}, {"sha": "04c09f9466c57dca50c643c6099c0f9957d62220", "url": "https://api.github.com/repos/rust-lang/rust/commits/04c09f9466c57dca50c643c6099c0f9957d62220", "html_url": "https://github.com/rust-lang/rust/commit/04c09f9466c57dca50c643c6099c0f9957d62220"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "79f2d16fef4eee051208ce4ba0bc0679416af969", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f", "patch": "@@ -582,6 +582,7 @@ impl Child {\n /// to run.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn exit(code: i32) -> ! {\n+    ::rt::cleanup();\n     ::sys::os::exit(code)\n }\n "}, {"sha": "8de713aeac8e88efdd8bb32f10f0c78cfbed620e", "filename": "src/libstd/rt/args.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f/src%2Flibstd%2Frt%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f/src%2Flibstd%2Frt%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fargs.rs?ref=6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f", "patch": "@@ -64,7 +64,6 @@ mod imp {\n \n     pub unsafe fn cleanup() {\n         take();\n-        LOCK.destroy();\n     }\n \n     pub fn take() -> Option<Vec<Vec<u8>>> {"}, {"sha": "379c86eb2a0fb757d177e6ecdea1ba3f4e3dae50", "filename": "src/libstd/rt/at_exit_imp.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fat_exit_imp.rs?ref=6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f", "patch": "@@ -12,10 +12,6 @@\n //!\n //! Documentation can be found on the `rt::at_exit` function.\n \n-// FIXME: switch this to use atexit. Currently this\n-// segfaults (the queue's memory is mysteriously gone), so\n-// instead the cleanup is tied to the `std::rt` entry point.\n-\n use alloc::boxed::FnBox;\n use boxed::Box;\n use ptr;"}, {"sha": "2cbf81b2fc7c92cddba598974cb7fd8517c41947", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f", "patch": "@@ -23,6 +23,7 @@\n #![allow(missing_docs)]\n \n use prelude::v1::*;\n+use sync::Once;\n use sys;\n use thread;\n \n@@ -124,16 +125,11 @@ pub fn at_exit<F: FnOnce() + Send + 'static>(f: F) -> Result<(), ()> {\n }\n \n /// One-time runtime cleanup.\n-///\n-/// This function is unsafe because it performs no checks to ensure that the\n-/// runtime has completely ceased running. It is the responsibility of the\n-/// caller to ensure that the runtime is entirely shut down and nothing will be\n-/// poking around at the internal components.\n-///\n-/// Invoking cleanup while portions of the runtime are still in use may cause\n-/// undefined behavior.\n-pub unsafe fn cleanup() {\n-    args::cleanup();\n-    sys::stack_overflow::cleanup();\n-    at_exit_imp::cleanup();\n+pub fn cleanup() {\n+    static CLEANUP: Once = Once::new();\n+    CLEANUP.call_once(|| unsafe {\n+        args::cleanup();\n+        sys::stack_overflow::cleanup();\n+        at_exit_imp::cleanup();\n+    });\n }"}, {"sha": "76ecbfd2f223d2945f3c0ca41ebc2b564dbbe624", "filename": "src/test/run-pass/exit-flushes.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f/src%2Ftest%2Frun-pass%2Fexit-flushes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f/src%2Ftest%2Frun-pass%2Fexit-flushes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexit-flushes.rs?ref=6f1014f3510f3c5cc2b524aa4cb18bf91c3fd50f", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::env;\n+use std::process::{exit, Command};\n+\n+fn main() {\n+    if env::args().len() > 1 {\n+        print!(\"hello!\");\n+        exit(0);\n+    } else {\n+        let out = Command::new(env::args().next().unwrap()).arg(\"foo\")\n+                          .output().unwrap();\n+        assert!(out.status.success());\n+        assert_eq!(String::from_utf8(out.stdout).unwrap(), \"hello!\");\n+        assert_eq!(String::from_utf8(out.stderr).unwrap(), \"\");\n+    }\n+}"}]}