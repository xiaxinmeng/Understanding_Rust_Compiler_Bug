{"sha": "1e43cf46bdd1d912d677a9b8a280d62de691c3c3", "node_id": "C_kwDOAAsO6NoAKDFlNDNjZjQ2YmRkMWQ5MTJkNjc3YTliOGEyODBkNjJkZTY5MWMzYzM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-02T01:34:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-02T01:34:26Z"}, "message": "Rollup merge of #95559 - lcnr:inferctxt-typeck, r=oli-obk\n\nsmall type system refactoring", "tree": {"sha": "efb63b4e2ac7bd169381e1d459c4a2e475a8b555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efb63b4e2ac7bd169381e1d459c4a2e475a8b555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e43cf46bdd1d912d677a9b8a280d62de691c3c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiR6giCRBK7hj4Ov3rIwAAmm0IAGBIiIYoApNNNpcMJi7JTnaQ\nkHNAcY6BFFLNNHp8pIjn3k7pykvkFilYhhLZfSPQjxMsgAU0JGnSzIrUNCmPTqzh\nwEl78WdvzI7E3Irnz2NLOIbcK1A1zmBLjDqjyXdQHOiV6FNJVWnJlUyigJv2kH/4\nfwpyaTEdfxd7DzcHaT/lmhSS1LslnYB+rBndHZ6nRX1JvRNRYu8CkWBlTvjx0PZU\nGOR0ba2ueZPC43NcrNQvLgPYsNEPnG94PavykoczVzBNJg3GxFSy9Abm0uRhBx/H\nfZ355jDAqL2UgKUuL6jwqdB49hcstxBrq9xmABz+irnVwrOH2SjZUXX8gwrHvxE=\n=FZo0\n-----END PGP SIGNATURE-----\n", "payload": "tree efb63b4e2ac7bd169381e1d459c4a2e475a8b555\nparent dc11de63e087542e41c5cb8fa1bc51d550c25b69\nparent 389c83b47407747ec96153e04c35717e3ce4d82a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648863266 +0200\ncommitter GitHub <noreply@github.com> 1648863266 +0200\n\nRollup merge of #95559 - lcnr:inferctxt-typeck, r=oli-obk\n\nsmall type system refactoring\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e43cf46bdd1d912d677a9b8a280d62de691c3c3", "html_url": "https://github.com/rust-lang/rust/commit/1e43cf46bdd1d912d677a9b8a280d62de691c3c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc11de63e087542e41c5cb8fa1bc51d550c25b69", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc11de63e087542e41c5cb8fa1bc51d550c25b69", "html_url": "https://github.com/rust-lang/rust/commit/dc11de63e087542e41c5cb8fa1bc51d550c25b69"}, {"sha": "389c83b47407747ec96153e04c35717e3ce4d82a", "url": "https://api.github.com/repos/rust-lang/rust/commits/389c83b47407747ec96153e04c35717e3ce4d82a", "html_url": "https://github.com/rust-lang/rust/commit/389c83b47407747ec96153e04c35717e3ce4d82a"}], "stats": {"total": 69, "additions": 17, "deletions": 52}, "files": [{"sha": "c7fa2527eb2f388b0fae7ad1685720da4ad50b4f", "filename": "compiler/rustc_infer/src/infer/canonical/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fmod.rs?ref=1e43cf46bdd1d912d677a9b8a280d62de691c3c3", "patch": "@@ -49,7 +49,6 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     /// At the end of processing, the substitution S (once\n     /// canonicalized) then represents the values that you computed\n     /// for each of the canonical inputs to your query.\n-\n     pub fn instantiate_canonical_with_fresh_inference_vars<T>(\n         &self,\n         span: Span,"}, {"sha": "86229dbfad746a51b528e1de9fff6d256cf7baff", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=1e43cf46bdd1d912d677a9b8a280d62de691c3c3", "patch": "@@ -27,15 +27,12 @@ use super::glb::Glb;\n use super::lub::Lub;\n use super::sub::Sub;\n use super::type_variable::TypeVariableValue;\n-use super::unify_key::replace_if_possible;\n-use super::unify_key::{ConstVarValue, ConstVariableValue};\n-use super::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use super::{InferCtxt, MiscVariable, TypeTrace};\n-\n use crate::traits::{Obligation, PredicateObligations};\n-\n use rustc_data_structures::sso::SsoHashMap;\n use rustc_hir::def_id::DefId;\n+use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n+use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n@@ -140,8 +137,8 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n             return Ok(a);\n         }\n \n-        let a = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), a);\n-        let b = replace_if_possible(&mut self.inner.borrow_mut().const_unification_table(), b);\n+        let a = self.shallow_resolve(a);\n+        let b = self.shallow_resolve(b);\n \n         let a_is_expected = relation.a_is_expected();\n "}, {"sha": "0a11a81c2942511e461dbd620a5c1da14f09855d", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=1e43cf46bdd1d912d677a9b8a280d62de691c3c3", "patch": "@@ -30,17 +30,13 @@\n //! solving a set of constraints. In contrast, the type inferencer assigns a value to each type\n //! variable only once, and it does so as soon as it can, so it is reasonable to ask what the type\n //! inferencer knows \"so far\".\n-\n+use super::InferCtxt;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_middle::infer::unify_key::ToType;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n-\n-use rustc_data_structures::fx::FxHashMap;\n-\n use std::collections::hash_map::Entry;\n \n-use super::unify_key::ToType;\n-use super::InferCtxt;\n-\n pub struct TypeFreshener<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     ty_freshen_count: u32,"}, {"sha": "cefe7aae396b4d473511f7e6f15a67f43210dc37", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=1e43cf46bdd1d912d677a9b8a280d62de691c3c3", "patch": "@@ -70,8 +70,6 @@ mod sub;\n pub mod type_variable;\n mod undo_log;\n \n-pub use rustc_middle::infer::unify_key;\n-\n #[must_use]\n #[derive(Debug)]\n pub struct InferOk<'tcx, T> {\n@@ -558,9 +556,9 @@ impl<'tcx> fmt::Display for FixupError<'tcx> {\n     }\n }\n \n-/// Helper type of a temporary returned by `tcx.infer_ctxt()`.\n-/// Necessary because we can't write the following bound:\n-/// `F: for<'b, 'tcx> where 'tcx FnOnce(InferCtxt<'b, 'tcx>)`.\n+/// A temporary returned by `tcx.infer_ctxt()`. This is necessary\n+/// for multiple `InferCtxt` to share the same `in_progress_typeck_results`\n+/// without using `Rc` or something similar.\n pub struct InferCtxtBuilder<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     fresh_typeck_results: Option<RefCell<ty::TypeckResults<'tcx>>>,"}, {"sha": "f2627885d030dc5db0eaf680042dcaf5f8c97bc1", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=1e43cf46bdd1d912d677a9b8a280d62de691c3c3", "patch": "@@ -1,13 +1,8 @@\n-use crate::ty::{self, InferConst, Ty, TyCtxt};\n-use rustc_data_structures::snapshot_vec;\n-use rustc_data_structures::undo_log::UndoLogs;\n-use rustc_data_structures::unify::{\n-    self, EqUnifyValue, InPlace, NoError, UnificationTable, UnifyKey, UnifyValue,\n-};\n+use crate::ty::{self, Ty, TyCtxt};\n+use rustc_data_structures::unify::{NoError, UnifyKey, UnifyValue};\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n-\n use std::cmp;\n use std::marker::PhantomData;\n \n@@ -165,23 +160,3 @@ impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n         })\n     }\n }\n-\n-impl<'tcx> EqUnifyValue for ty::Const<'tcx> {}\n-\n-pub fn replace_if_possible<'tcx, V, L>(\n-    table: &mut UnificationTable<InPlace<ty::ConstVid<'tcx>, V, L>>,\n-    c: ty::Const<'tcx>,\n-) -> ty::Const<'tcx>\n-where\n-    V: snapshot_vec::VecLike<unify::Delegate<ty::ConstVid<'tcx>>>,\n-    L: UndoLogs<snapshot_vec::UndoLog<unify::Delegate<ty::ConstVid<'tcx>>>>,\n-{\n-    if let ty::ConstKind::Infer(InferConst::Var(vid)) = c.val() {\n-        match table.probe_value(vid).val.known() {\n-            Some(c) => c,\n-            None => c,\n-        }\n-    } else {\n-        c\n-    }\n-}"}, {"sha": "55a5eb966c2221b27f8188250a14f5009f9e0f68", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fmod.rs?ref=1e43cf46bdd1d912d677a9b8a280d62de691c3c3", "patch": "@@ -14,7 +14,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_infer::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n+use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Const, Ty, TyCtxt};"}, {"sha": "62ca728868b45595cf57a788b65882982a8c0c44", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=1e43cf46bdd1d912d677a9b8a280d62de691c3c3", "patch": "@@ -68,9 +68,9 @@ impl<'a, 'tcx> Deref for Inherited<'a, 'tcx> {\n     }\n }\n \n-/// Helper type of a temporary returned by `Inherited::build(...)`.\n-/// Necessary because we can't write the following bound:\n-/// `F: for<'b, 'tcx> where 'tcx FnOnce(Inherited<'b, 'tcx>)`.\n+/// A temporary returned by `Inherited::build(...)`. This is necessary\n+/// for multiple `InferCtxt` to share the same `in_progress_typeck_results`\n+/// without using `Rc` or something similar.\n pub struct InheritedBuilder<'tcx> {\n     infcx: infer::InferCtxtBuilder<'tcx>,\n     def_id: LocalDefId,"}, {"sha": "6edcc12bcf5a640c964673c834fccf63116b65e2", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e43cf46bdd1d912d677a9b8a280d62de691c3c3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=1e43cf46bdd1d912d677a9b8a280d62de691c3c3", "patch": "@@ -15,8 +15,8 @@ use rustc_hir::def::Namespace;\n use rustc_infer::infer::canonical::OriginalQueryValues;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_infer::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n+use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_middle::middle::stability;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};"}]}