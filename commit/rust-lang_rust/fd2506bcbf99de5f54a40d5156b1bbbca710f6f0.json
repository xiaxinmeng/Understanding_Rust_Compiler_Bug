{"sha": "fd2506bcbf99de5f54a40d5156b1bbbca710f6f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMjUwNmJjYmY5OWRlNWY1NGE0MGQ1MTU2YjFiYmJjYTcxMGY2ZjA=", "commit": {"author": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-01-04T06:19:13Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-24T06:20:34Z"}, "message": "Add type suffixes to unsuffixed method receiver suggestions", "tree": {"sha": "35195c63b05d145362def63f4c42928778c25d6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35195c63b05d145362def63f4c42928778c25d6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd2506bcbf99de5f54a40d5156b1bbbca710f6f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd2506bcbf99de5f54a40d5156b1bbbca710f6f0", "html_url": "https://github.com/rust-lang/rust/commit/fd2506bcbf99de5f54a40d5156b1bbbca710f6f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd2506bcbf99de5f54a40d5156b1bbbca710f6f0/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de07c8490332c17deafa89d29724a6483a1765b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/de07c8490332c17deafa89d29724a6483a1765b3", "html_url": "https://github.com/rust-lang/rust/commit/de07c8490332c17deafa89d29724a6483a1765b3"}], "stats": {"total": 226, "additions": 177, "deletions": 49}, "files": [{"sha": "dbf8e0a9ac47cfcc57b12c4d2ca80c91255cc0f5", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 54, "deletions": 10, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/fd2506bcbf99de5f54a40d5156b1bbbca710f6f0/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2506bcbf99de5f54a40d5156b1bbbca710f6f0/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=fd2506bcbf99de5f54a40d5156b1bbbca710f6f0", "patch": "@@ -7,10 +7,13 @@ use if_chain::if_chain;\n use rustc::declare_lint_pass;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n+use rustc::ty;\n use rustc_errors::Applicability;\n use rustc_session::declare_tool_lint;\n use std::f32::consts as f32_consts;\n use std::f64::consts as f64_consts;\n+use sugg::Sugg;\n+use syntax::ast;\n \n declare_clippy_lint! {\n     /// **What it does:** Looks for floating-point expressions that\n@@ -80,15 +83,53 @@ fn get_specialized_log_method(cx: &LateContext<'_, '_>, base: &Expr) -> Option<&\n     None\n }\n \n-fn check_log_base(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n+// Adds type suffixes and parenthesis to method receivers if necessary\n+fn prepare_receiver_sugg<'a>(cx: &LateContext<'_, '_>, mut expr: &'a Expr<'a>) -> Sugg<'a> {\n+    let mut suggestion = Sugg::hir(cx, expr, \"..\");\n+\n+    if let ExprKind::Unary(UnOp::UnNeg, inner_expr) = &expr.kind {\n+        expr = &inner_expr;\n+    }\n+\n+    if_chain! {\n+        // if the expression is a float literal and it is unsuffixed then\n+        // add a suffix so the suggestion is valid and unambiguous\n+        if let ty::Float(float_ty) = cx.tables.expr_ty(expr).kind;\n+        if let ExprKind::Lit(lit) = &expr.kind;\n+        if let ast::LitKind::Float(sym, ast::LitFloatType::Unsuffixed) = lit.node;\n+        then {\n+            let op = format!(\n+                \"{}{}{}\",\n+                suggestion,\n+                // Check for float literals without numbers following the decimal\n+                // separator such as `2.` and adds a trailing zero\n+                if sym.as_str().ends_with('.') {\n+                    \"0\"\n+                } else {\n+                    \"\"\n+                },\n+                float_ty.name_str()\n+            ).into();\n+\n+            suggestion = match suggestion {\n+                Sugg::MaybeParen(_) => Sugg::MaybeParen(op),\n+                _ => Sugg::NonParen(op)\n+            };\n+        }\n+    }\n+\n+    suggestion.maybe_par()\n+}\n+\n+fn check_log_base(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n     if let Some(method) = get_specialized_log_method(cx, &args[1]) {\n         span_lint_and_sugg(\n             cx,\n             FLOATING_POINT_IMPROVEMENTS,\n             expr.span,\n             \"logarithm for bases 2, 10 and e can be computed more accurately\",\n             \"consider using\",\n-            format!(\"{}.{}()\", sugg::Sugg::hir(cx, &args[0], \"..\"), method),\n+            format!(\"{}.{}()\", Sugg::hir(cx, &args[0], \"..\"), method),\n             Applicability::MachineApplicable,\n         );\n     }\n@@ -113,7 +154,7 @@ fn check_ln1p(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n                 expr.span,\n                 \"ln(1 + x) can be computed more accurately\",\n                 \"consider using\",\n-                format!(\"{}.ln_1p()\", sugg::Sugg::hir(cx, recv, \"..\").maybe_par()),\n+                format!(\"{}.ln_1p()\", prepare_receiver_sugg(cx, recv)),\n                 Applicability::MachineApplicable,\n             );\n         }\n@@ -164,7 +205,7 @@ fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n             expr.span,\n             \"exponent for bases 2 and e can be computed more accurately\",\n             \"consider using\",\n-            format!(\"{}.{}()\", sugg::Sugg::hir(cx, &args[1], \"..\").maybe_par(), method),\n+            format!(\"{}.{}()\", prepare_receiver_sugg(cx, &args[1]), method),\n             Applicability::MachineApplicable,\n         );\n     }\n@@ -187,7 +228,7 @@ fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n                 expr.span,\n                 \"exponentiation with integer powers can be computed more efficiently\",\n                 \"consider using\",\n-                format!(\"{}.powi({})\", sugg::Sugg::hir(cx, &args[0], \"..\"), exponent),\n+                format!(\"{}.powi({})\", Sugg::hir(cx, &args[0], \"..\"), exponent),\n                 Applicability::MachineApplicable,\n             );\n \n@@ -202,7 +243,7 @@ fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n             expr.span,\n             help,\n             \"consider using\",\n-            format!(\"{}.{}()\", sugg::Sugg::hir(cx, &args[0], \"..\"), method),\n+            format!(\"{}.{}()\", Sugg::hir(cx, &args[0], \"..\"), method),\n             Applicability::MachineApplicable,\n         );\n     }\n@@ -218,6 +259,7 @@ fn check_expm1(cx: &LateContext<'_, '_>, expr: &Expr) {\n         if let Some((value, _)) = constant(cx, cx.tables, rhs);\n         if F32(1.0) == value || F64(1.0) == value;\n         if let ExprKind::MethodCall(ref path, _, ref method_args) = lhs.kind;\n+        if cx.tables.expr_ty(&method_args[0]).is_floating_point();\n         if path.ident.name.as_str() == \"exp\";\n         then {\n             span_lint_and_sugg(\n@@ -228,7 +270,7 @@ fn check_expm1(cx: &LateContext<'_, '_>, expr: &Expr) {\n                 \"consider using\",\n                 format!(\n                     \"{}.exp_m1()\",\n-                    sugg::Sugg::hir(cx, &method_args[0], \"..\")\n+                    Sugg::hir(cx, &method_args[0], \"..\")\n                 ),\n                 Applicability::MachineApplicable,\n             );\n@@ -275,7 +317,9 @@ fn check_log_division(cx: &LateContext<'_, '_>, expr: &Expr) {\n         if op.node == BinOpKind::Div;\n         if cx.tables.expr_ty(lhs).is_floating_point();\n         if let ExprKind::MethodCall(left_path, _, left_args) = &lhs.kind;\n+        if cx.tables.expr_ty(&left_args[0]).is_floating_point();\n         if let ExprKind::MethodCall(right_path, _, right_args) = &rhs.kind;\n+        if cx.tables.expr_ty(&right_args[0]).is_floating_point();\n         let left_method = left_path.ident.name.as_str();\n         if left_method == right_path.ident.name.as_str();\n         if log_methods.iter().any(|&method| left_method == method);\n@@ -290,12 +334,12 @@ fn check_log_division(cx: &LateContext<'_, '_>, expr: &Expr) {\n \n             // Reduce the expression further for bases 2, 10 and e\n             let suggestion = if let Some(method) = get_specialized_log_method(cx, right_recv) {\n-                format!(\"{}.{}()\", sugg::Sugg::hir(cx, left_recv, \"..\"), method)\n+                format!(\"{}.{}()\", Sugg::hir(cx, left_recv, \"..\"), method)\n             } else {\n                 format!(\n                     \"{}.log({})\",\n-                    sugg::Sugg::hir(cx, left_recv, \"..\"),\n-                    sugg::Sugg::hir(cx, right_recv, \"..\")\n+                    Sugg::hir(cx, left_recv, \"..\"),\n+                    Sugg::hir(cx, right_recv, \"..\")\n                 )\n             };\n "}, {"sha": "5775d8715d4654798e36be8b541ff1f44c2a3a9d", "filename": "tests/ui/floating_point_log.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd2506bcbf99de5f54a40d5156b1bbbca710f6f0/tests%2Fui%2Ffloating_point_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2506bcbf99de5f54a40d5156b1bbbca710f6f0/tests%2Fui%2Ffloating_point_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.rs?ref=fd2506bcbf99de5f54a40d5156b1bbbca710f6f0", "patch": "@@ -20,6 +20,8 @@ fn check_log_base() {\n \n fn check_ln1p() {\n     let x = 1f32;\n+    let _ = (1f32 + 2.).ln();\n+    let _ = (1f32 + 2.0).ln();\n     let _ = (1.0 + x).ln();\n     let _ = (1.0 + x * 2.0).ln();\n     let _ = (1.0 + x.powi(2)).ln();\n@@ -36,6 +38,8 @@ fn check_ln1p() {\n     let _ = (1.0 + x - 2.0).ln();\n \n     let x = 1f64;\n+    let _ = (1f64 + 2.).ln();\n+    let _ = (1f64 + 2.0).ln();\n     let _ = (1.0 + x).ln();\n     let _ = (1.0 + x * 2.0).ln();\n     let _ = (1.0 + x.powi(2)).ln();"}, {"sha": "cd3142e041a2329e0122795aa5d6625e6dd7eab1", "filename": "tests/ui/floating_point_log.stderr", "status": "modified", "additions": 52, "deletions": 28, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/fd2506bcbf99de5f54a40d5156b1bbbca710f6f0/tests%2Fui%2Ffloating_point_log.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd2506bcbf99de5f54a40d5156b1bbbca710f6f0/tests%2Fui%2Ffloating_point_log.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_log.stderr?ref=fd2506bcbf99de5f54a40d5156b1bbbca710f6f0", "patch": "@@ -51,170 +51,194 @@ LL |     let _ = x.log(std::f64::consts::E);\n error: ln(1 + x) can be computed more accurately\n   --> $DIR/floating_point_log.rs:23:13\n    |\n+LL |     let _ = (1f32 + 2.).ln();\n+   |             ^^^^^^^^^^^^^^^^ help: consider using: `2.0f32.ln_1p()`\n+\n+error: ln(1 + x) can be computed more accurately\n+  --> $DIR/floating_point_log.rs:24:13\n+   |\n+LL |     let _ = (1f32 + 2.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^ help: consider using: `2.0f32.ln_1p()`\n+\n+error: ln(1 + x) can be computed more accurately\n+  --> $DIR/floating_point_log.rs:25:13\n+   |\n LL |     let _ = (1.0 + x).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:24:13\n+  --> $DIR/floating_point_log.rs:26:13\n    |\n LL |     let _ = (1.0 + x * 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:25:13\n+  --> $DIR/floating_point_log.rs:27:13\n    |\n LL |     let _ = (1.0 + x.powi(2)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:26:13\n+  --> $DIR/floating_point_log.rs:28:13\n    |\n LL |     let _ = (1.0 + x.powi(2) * 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x.powi(2) * 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:27:13\n+  --> $DIR/floating_point_log.rs:29:13\n    |\n LL |     let _ = (1.0 + (std::f32::consts::E - 1.0)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `((std::f32::consts::E - 1.0)).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:28:13\n+  --> $DIR/floating_point_log.rs:30:13\n    |\n LL |     let _ = (x + 1.0).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:29:13\n+  --> $DIR/floating_point_log.rs:31:13\n    |\n LL |     let _ = (x.powi(2) + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:30:13\n+  --> $DIR/floating_point_log.rs:32:13\n    |\n LL |     let _ = (x + 2.0 + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x + 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:31:13\n+  --> $DIR/floating_point_log.rs:33:13\n    |\n LL |     let _ = (x * 2.0 + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:39:13\n+  --> $DIR/floating_point_log.rs:41:13\n+   |\n+LL |     let _ = (1f64 + 2.).ln();\n+   |             ^^^^^^^^^^^^^^^^ help: consider using: `2.0f64.ln_1p()`\n+\n+error: ln(1 + x) can be computed more accurately\n+  --> $DIR/floating_point_log.rs:42:13\n+   |\n+LL |     let _ = (1f64 + 2.0).ln();\n+   |             ^^^^^^^^^^^^^^^^^ help: consider using: `2.0f64.ln_1p()`\n+\n+error: ln(1 + x) can be computed more accurately\n+  --> $DIR/floating_point_log.rs:43:13\n    |\n LL |     let _ = (1.0 + x).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:40:13\n+  --> $DIR/floating_point_log.rs:44:13\n    |\n LL |     let _ = (1.0 + x * 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:41:13\n+  --> $DIR/floating_point_log.rs:45:13\n    |\n LL |     let _ = (1.0 + x.powi(2)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:42:13\n+  --> $DIR/floating_point_log.rs:46:13\n    |\n LL |     let _ = (x + 1.0).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:43:13\n+  --> $DIR/floating_point_log.rs:47:13\n    |\n LL |     let _ = (x.powi(2) + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:44:13\n+  --> $DIR/floating_point_log.rs:48:13\n    |\n LL |     let _ = (x + 2.0 + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x + 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_log.rs:45:13\n+  --> $DIR/floating_point_log.rs:49:13\n    |\n LL |     let _ = (x * 2.0 + 1.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:58:13\n+  --> $DIR/floating_point_log.rs:62:13\n    |\n LL |     let _ = x.log2() / y.log2();\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:59:13\n+  --> $DIR/floating_point_log.rs:63:13\n    |\n LL |     let _ = x.log10() / y.log10();\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:60:13\n+  --> $DIR/floating_point_log.rs:64:13\n    |\n LL |     let _ = x.ln() / y.ln();\n    |             ^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:61:13\n+  --> $DIR/floating_point_log.rs:65:13\n    |\n LL |     let _ = x.log(4.0) / y.log(4.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:62:13\n+  --> $DIR/floating_point_log.rs:66:13\n    |\n LL |     let _ = x.log(b) / y.log(b);\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:64:13\n+  --> $DIR/floating_point_log.rs:68:13\n    |\n LL |     let _ = x.log(b) / 2f32.log(b);\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log2()`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:70:13\n+  --> $DIR/floating_point_log.rs:74:13\n    |\n LL |     let _ = x.log2() / y.log2();\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:71:13\n+  --> $DIR/floating_point_log.rs:75:13\n    |\n LL |     let _ = x.log10() / y.log10();\n    |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:72:13\n+  --> $DIR/floating_point_log.rs:76:13\n    |\n LL |     let _ = x.ln() / y.ln();\n    |             ^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:73:13\n+  --> $DIR/floating_point_log.rs:77:13\n    |\n LL |     let _ = x.log(4.0) / y.log(4.0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:74:13\n+  --> $DIR/floating_point_log.rs:78:13\n    |\n LL |     let _ = x.log(b) / y.log(b);\n    |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n \n error: x.log(b) / y.log(b) can be reduced to x.log(y)\n-  --> $DIR/floating_point_log.rs:76:13\n+  --> $DIR/floating_point_log.rs:80:13\n    |\n LL |     let _ = x.log(b) / 2f64.log(b);\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log2()`\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 40 previous errors\n "}, {"sha": "97a1d93a8019c7e22fa32e59c5a204173cdcda61", "filename": "tests/ui/floating_point_powf.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd2506bcbf99de5f54a40d5156b1bbbca710f6f0/tests%2Fui%2Ffloating_point_powf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd2506bcbf99de5f54a40d5156b1bbbca710f6f0/tests%2Fui%2Ffloating_point_powf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.rs?ref=fd2506bcbf99de5f54a40d5156b1bbbca710f6f0", "patch": "@@ -3,7 +3,11 @@\n fn main() {\n     let x = 3f32;\n     let _ = 2f32.powf(x);\n+    let _ = 2f32.powf(3.1);\n+    let _ = 2f32.powf(-3.1);\n     let _ = std::f32::consts::E.powf(x);\n+    let _ = std::f32::consts::E.powf(3.1);\n+    let _ = std::f32::consts::E.powf(-3.1);\n     let _ = x.powf(1.0 / 2.0);\n     let _ = x.powf(1.0 / 3.0);\n     let _ = x.powf(2.0);\n@@ -15,7 +19,11 @@ fn main() {\n \n     let x = 3f64;\n     let _ = 2f64.powf(x);\n+    let _ = 2f64.powf(3.1);\n+    let _ = 2f64.powf(-3.1);\n     let _ = std::f64::consts::E.powf(x);\n+    let _ = std::f64::consts::E.powf(3.1);\n+    let _ = std::f64::consts::E.powf(-3.1);\n     let _ = x.powf(1.0 / 2.0);\n     let _ = x.powf(1.0 / 3.0);\n     let _ = x.powf(2.0);"}, {"sha": "4e16e7af046543c1716ffbc31826151204af004e", "filename": "tests/ui/floating_point_powf.stderr", "status": "modified", "additions": 59, "deletions": 11, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/fd2506bcbf99de5f54a40d5156b1bbbca710f6f0/tests%2Fui%2Ffloating_point_powf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd2506bcbf99de5f54a40d5156b1bbbca710f6f0/tests%2Fui%2Ffloating_point_powf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_powf.stderr?ref=fd2506bcbf99de5f54a40d5156b1bbbca710f6f0", "patch": "@@ -9,68 +9,116 @@ LL |     let _ = 2f32.powf(x);\n error: exponent for bases 2 and e can be computed more accurately\n   --> $DIR/floating_point_powf.rs:6:13\n    |\n+LL |     let _ = 2f32.powf(3.1);\n+   |             ^^^^^^^^^^^^^^ help: consider using: `3.1f32.exp2()`\n+\n+error: exponent for bases 2 and e can be computed more accurately\n+  --> $DIR/floating_point_powf.rs:7:13\n+   |\n+LL |     let _ = 2f32.powf(-3.1);\n+   |             ^^^^^^^^^^^^^^^ help: consider using: `(-3.1f32).exp2()`\n+\n+error: exponent for bases 2 and e can be computed more accurately\n+  --> $DIR/floating_point_powf.rs:8:13\n+   |\n LL |     let _ = std::f32::consts::E.powf(x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n \n+error: exponent for bases 2 and e can be computed more accurately\n+  --> $DIR/floating_point_powf.rs:9:13\n+   |\n+LL |     let _ = std::f32::consts::E.powf(3.1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `3.1f32.exp()`\n+\n+error: exponent for bases 2 and e can be computed more accurately\n+  --> $DIR/floating_point_powf.rs:10:13\n+   |\n+LL |     let _ = std::f32::consts::E.powf(-3.1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-3.1f32).exp()`\n+\n error: square-root of a number can be computed more efficiently and accurately\n-  --> $DIR/floating_point_powf.rs:7:13\n+  --> $DIR/floating_point_powf.rs:11:13\n    |\n LL |     let _ = x.powf(1.0 / 2.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n \n error: cube-root of a number can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:8:13\n+  --> $DIR/floating_point_powf.rs:12:13\n    |\n LL |     let _ = x.powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:9:13\n+  --> $DIR/floating_point_powf.rs:13:13\n    |\n LL |     let _ = x.powf(2.0);\n    |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:10:13\n+  --> $DIR/floating_point_powf.rs:14:13\n    |\n LL |     let _ = x.powf(-2.0);\n    |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:17:13\n+  --> $DIR/floating_point_powf.rs:21:13\n    |\n LL |     let _ = 2f64.powf(x);\n    |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n \n error: exponent for bases 2 and e can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:18:13\n+  --> $DIR/floating_point_powf.rs:22:13\n+   |\n+LL |     let _ = 2f64.powf(3.1);\n+   |             ^^^^^^^^^^^^^^ help: consider using: `3.1f64.exp2()`\n+\n+error: exponent for bases 2 and e can be computed more accurately\n+  --> $DIR/floating_point_powf.rs:23:13\n+   |\n+LL |     let _ = 2f64.powf(-3.1);\n+   |             ^^^^^^^^^^^^^^^ help: consider using: `(-3.1f64).exp2()`\n+\n+error: exponent for bases 2 and e can be computed more accurately\n+  --> $DIR/floating_point_powf.rs:24:13\n    |\n LL |     let _ = std::f64::consts::E.powf(x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n \n+error: exponent for bases 2 and e can be computed more accurately\n+  --> $DIR/floating_point_powf.rs:25:13\n+   |\n+LL |     let _ = std::f64::consts::E.powf(3.1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `3.1f64.exp()`\n+\n+error: exponent for bases 2 and e can be computed more accurately\n+  --> $DIR/floating_point_powf.rs:26:13\n+   |\n+LL |     let _ = std::f64::consts::E.powf(-3.1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-3.1f64).exp()`\n+\n error: square-root of a number can be computed more efficiently and accurately\n-  --> $DIR/floating_point_powf.rs:19:13\n+  --> $DIR/floating_point_powf.rs:27:13\n    |\n LL |     let _ = x.powf(1.0 / 2.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n \n error: cube-root of a number can be computed more accurately\n-  --> $DIR/floating_point_powf.rs:20:13\n+  --> $DIR/floating_point_powf.rs:28:13\n    |\n LL |     let _ = x.powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:21:13\n+  --> $DIR/floating_point_powf.rs:29:13\n    |\n LL |     let _ = x.powf(2.0);\n    |             ^^^^^^^^^^^ help: consider using: `x.powi(2)`\n \n error: exponentiation with integer powers can be computed more efficiently\n-  --> $DIR/floating_point_powf.rs:22:13\n+  --> $DIR/floating_point_powf.rs:30:13\n    |\n LL |     let _ = x.powf(-2.0);\n    |             ^^^^^^^^^^^^ help: consider using: `x.powi(-2)`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 20 previous errors\n "}]}