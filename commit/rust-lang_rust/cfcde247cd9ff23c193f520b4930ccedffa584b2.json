{"sha": "cfcde247cd9ff23c193f520b4930ccedffa584b2", "node_id": "C_kwDOAAsO6NoAKGNmY2RlMjQ3Y2Q5ZmYyM2MxOTNmNTIwYjQ5MzBjY2VkZmZhNTg0YjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-22T17:56:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-22T17:56:26Z"}, "message": "Auto merge of #111754 - lcnr:recursion-depth, r=matthewjasper\n\nfix recursion depth handling after confirmation\n\nfixes #111729\n\nI think having to use `Obligation::with_depth` correctly everywhere is very hard because e.g. the nested obligations from `eq` currently do not have the correct obligation depth.\n\nThe new solver [completely removes `recursion_depth` from obligations](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/traits/solve/struct.Goal.html) and instead tracks the depth in the solver itself which is far easier to get right. Moving the old solver towards this shouldn't be that hard but is probably somewhat annoying.\n\nr? `@matthewjasper`", "tree": {"sha": "f95bbd71d1f4152cff90a9e903b2003f029fd917", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f95bbd71d1f4152cff90a9e903b2003f029fd917"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfcde247cd9ff23c193f520b4930ccedffa584b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfcde247cd9ff23c193f520b4930ccedffa584b2", "html_url": "https://github.com/rust-lang/rust/commit/cfcde247cd9ff23c193f520b4930ccedffa584b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfcde247cd9ff23c193f520b4930ccedffa584b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fe47b966a8ee689d697583be4182262e7b4fd08", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe47b966a8ee689d697583be4182262e7b4fd08", "html_url": "https://github.com/rust-lang/rust/commit/2fe47b966a8ee689d697583be4182262e7b4fd08"}, {"sha": "c5ec1b8bc57797d3a01aa1258139fcfb3c629628", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5ec1b8bc57797d3a01aa1258139fcfb3c629628", "html_url": "https://github.com/rust-lang/rust/commit/c5ec1b8bc57797d3a01aa1258139fcfb3c629628"}], "stats": {"total": 105, "additions": 101, "deletions": 4}, "files": [{"sha": "5b0b40cbfd9bc04e68116671dfc204030364b3f1", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cfcde247cd9ff23c193f520b4930ccedffa584b2/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcde247cd9ff23c193f520b4930ccedffa584b2/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=cfcde247cd9ff23c193f520b4930ccedffa584b2", "patch": "@@ -701,9 +701,9 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n     }\n \n     pub fn borrow_nested_obligations(&self) -> &[N] {\n-        match &self {\n-            ImplSource::UserDefined(i) => &i.nested[..],\n-            ImplSource::Param(n, _) => &n,\n+        match self {\n+            ImplSource::UserDefined(i) => &i.nested,\n+            ImplSource::Param(n, _) => n,\n             ImplSource::Builtin(i) => &i.nested,\n             ImplSource::AutoImpl(d) => &d.nested,\n             ImplSource::Closure(c) => &c.nested,\n@@ -717,6 +717,23 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n         }\n     }\n \n+    pub fn borrow_nested_obligations_mut(&mut self) -> &mut [N] {\n+        match self {\n+            ImplSource::UserDefined(i) => &mut i.nested,\n+            ImplSource::Param(n, _) => n,\n+            ImplSource::Builtin(i) => &mut i.nested,\n+            ImplSource::AutoImpl(d) => &mut d.nested,\n+            ImplSource::Closure(c) => &mut c.nested,\n+            ImplSource::Generator(c) => &mut c.nested,\n+            ImplSource::Future(c) => &mut c.nested,\n+            ImplSource::Object(d) => &mut d.nested,\n+            ImplSource::FnPointer(d) => &mut d.nested,\n+            ImplSource::TraitAlias(d) => &mut d.nested,\n+            ImplSource::TraitUpcasting(d) => &mut d.nested,\n+            ImplSource::ConstDestruct(i) => &mut i.nested,\n+        }\n+    }\n+\n     pub fn map<M, F>(self, f: F) -> ImplSource<'tcx, M>\n     where\n         F: FnMut(N) -> M,"}, {"sha": "0d9f55d4c2edff766c9467fce640e90d63045557", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cfcde247cd9ff23c193f520b4930ccedffa584b2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcde247cd9ff23c193f520b4930ccedffa584b2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=cfcde247cd9ff23c193f520b4930ccedffa584b2", "patch": "@@ -132,6 +132,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n         };\n \n+        // The obligations returned by confirmation are recursively evaluated\n+        // so we need to make sure they have the correct depth.\n+        for subobligation in impl_src.borrow_nested_obligations_mut() {\n+            subobligation.set_depth_from_parent(obligation.recursion_depth);\n+        }\n+\n         if !obligation.predicate.is_const_if_const() {\n             // normalize nested predicates according to parent predicate's constness.\n             impl_src = impl_src.map(|mut o| {"}, {"sha": "aee41c43aefeb75b8acb6757c924e2ad3ea4808b", "filename": "tests/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cfcde247cd9ff23c193f520b4930ccedffa584b2/tests%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfcde247cd9ff23c193f520b4930ccedffa584b2/tests%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=cfcde247cd9ff23c193f520b4930ccedffa584b2", "patch": "@@ -1,9 +1,25 @@\n-error[E0275]: overflow evaluating the requirement `RootDatabase: RefUnwindSafe`\n+error[E0275]: overflow evaluating the requirement `SalsaStorage: RefUnwindSafe`\n   --> $DIR/cycle-cache-err-60010.rs:27:13\n    |\n LL |     _parse: <ParseQuery as Query<RootDatabase>>::Data,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n+note: required because it appears within the type `PhantomData<SalsaStorage>`\n+  --> $SRC_DIR/core/src/marker.rs:LL:COL\n+note: required because it appears within the type `Unique<SalsaStorage>`\n+  --> $SRC_DIR/core/src/ptr/unique.rs:LL:COL\n+note: required because it appears within the type `Box<SalsaStorage>`\n+  --> $SRC_DIR/alloc/src/boxed.rs:LL:COL\n+note: required because it appears within the type `Runtime<RootDatabase>`\n+  --> $DIR/cycle-cache-err-60010.rs:23:8\n+   |\n+LL | struct Runtime<DB: Database> {\n+   |        ^^^^^^^\n+note: required because it appears within the type `RootDatabase`\n+  --> $DIR/cycle-cache-err-60010.rs:20:8\n+   |\n+LL | struct RootDatabase {\n+   |        ^^^^^^^^^^^^\n note: required for `RootDatabase` to implement `SourceDatabase`\n   --> $DIR/cycle-cache-err-60010.rs:44:9\n    |"}, {"sha": "d37943b929a1fe942d0650ee4427331332d9c43b", "filename": "tests/ui/traits/solver-cycles/cycle-via-builtin-auto-trait-impl.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cfcde247cd9ff23c193f520b4930ccedffa584b2/tests%2Fui%2Ftraits%2Fsolver-cycles%2Fcycle-via-builtin-auto-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcde247cd9ff23c193f520b4930ccedffa584b2/tests%2Fui%2Ftraits%2Fsolver-cycles%2Fcycle-via-builtin-auto-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fsolver-cycles%2Fcycle-via-builtin-auto-trait-impl.rs?ref=cfcde247cd9ff23c193f520b4930ccedffa584b2", "patch": "@@ -0,0 +1,34 @@\n+//~ ERROR overflow\n+// A regression test for #111729 checking that we correctly\n+// track recursion depth for obligations returned by confirmation.\n+use std::panic::RefUnwindSafe;\n+\n+trait Database {\n+    type Storage;\n+}\n+trait Query<DB> {\n+    type Data;\n+}\n+struct ParseQuery;\n+struct RootDatabase {\n+    _runtime: Runtime<RootDatabase>,\n+}\n+\n+impl<T: RefUnwindSafe> Database for T {\n+    type Storage = SalsaStorage;\n+}\n+impl Database for RootDatabase {\n+    type Storage = SalsaStorage;\n+}\n+\n+struct Runtime<DB: Database> {\n+    _storage: Box<DB::Storage>,\n+}\n+struct SalsaStorage {\n+    _parse: <ParseQuery as Query<RootDatabase>>::Data,\n+}\n+\n+impl<DB: Database> Query<DB> for ParseQuery {\n+    type Data = RootDatabase;\n+}\n+fn main() {}"}, {"sha": "8f9ce3ef1e99c6ca2d603caf68945ad5f181041e", "filename": "tests/ui/traits/solver-cycles/cycle-via-builtin-auto-trait-impl.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cfcde247cd9ff23c193f520b4930ccedffa584b2/tests%2Fui%2Ftraits%2Fsolver-cycles%2Fcycle-via-builtin-auto-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cfcde247cd9ff23c193f520b4930ccedffa584b2/tests%2Fui%2Ftraits%2Fsolver-cycles%2Fcycle-via-builtin-auto-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fsolver-cycles%2Fcycle-via-builtin-auto-trait-impl.stderr?ref=cfcde247cd9ff23c193f520b4930ccedffa584b2", "patch": "@@ -0,0 +1,24 @@\n+error[E0275]: overflow evaluating the requirement `Runtime<RootDatabase>: RefUnwindSafe`\n+   |\n+   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`cycle_via_builtin_auto_trait_impl`)\n+note: required because it appears within the type `RootDatabase`\n+  --> $DIR/cycle-via-builtin-auto-trait-impl.rs:13:8\n+   |\n+LL | struct RootDatabase {\n+   |        ^^^^^^^^^^^^\n+note: required for `RootDatabase` to implement `Database`\n+  --> $DIR/cycle-via-builtin-auto-trait-impl.rs:17:24\n+   |\n+LL | impl<T: RefUnwindSafe> Database for T {\n+   |         -------------  ^^^^^^^^     ^\n+   |         |\n+   |         unsatisfied trait bound introduced here\n+note: required because it appears within the type `Runtime<RootDatabase>`\n+  --> $DIR/cycle-via-builtin-auto-trait-impl.rs:24:8\n+   |\n+LL | struct Runtime<DB: Database> {\n+   |        ^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0275`."}]}