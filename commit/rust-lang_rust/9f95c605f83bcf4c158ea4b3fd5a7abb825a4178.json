{"sha": "9f95c605f83bcf4c158ea4b3fd5a7abb825a4178", "node_id": "C_kwDOAAsO6NoAKDlmOTVjNjA1ZjgzYmNmNGMxNThlYTRiM2ZkNWE3YWJiODI1YTQxNzg", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-06-29T16:14:11Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-04T12:35:20Z"}, "message": "region obligations, remove `body_id`", "tree": {"sha": "5a9363481cfc41f7f2fbbe9f1dbcc8c5c0f7d27b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a9363481cfc41f7f2fbbe9f1dbcc8c5c0f7d27b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f95c605f83bcf4c158ea4b3fd5a7abb825a4178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f95c605f83bcf4c158ea4b3fd5a7abb825a4178", "html_url": "https://github.com/rust-lang/rust/commit/9f95c605f83bcf4c158ea4b3fd5a7abb825a4178", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f95c605f83bcf4c158ea4b3fd5a7abb825a4178/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0d2d9f315fee7b4ab1275b1fe5500cd5d6f14a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d2d9f315fee7b4ab1275b1fe5500cd5d6f14a1", "html_url": "https://github.com/rust-lang/rust/commit/a0d2d9f315fee7b4ab1275b1fe5500cd5d6f14a1"}], "stats": {"total": 30, "additions": 10, "deletions": 20}, "files": [{"sha": "7120d5ad93455c8fd61684b22e71542bb01fa780", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f95c605f83bcf4c158ea4b3fd5a7abb825a4178/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f95c605f83bcf4c158ea4b3fd5a7abb825a4178/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=9f95c605f83bcf4c158ea4b3fd5a7abb825a4178", "patch": "@@ -128,7 +128,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         let region_constraints = self.with_region_constraints(|region_constraints| {\n             make_query_region_constraints(\n                 tcx,\n-                region_obligations.iter().map(|(_, r_o)| (r_o.sup_type, r_o.sub_region)),\n+                region_obligations.iter().map(|r_o| (r_o.sup_type, r_o.sub_region)),\n                 region_constraints,\n             )\n         });"}, {"sha": "c73302c7e415a49ecb5be7db867ca35b809eeb4a", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f95c605f83bcf4c158ea4b3fd5a7abb825a4178/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f95c605f83bcf4c158ea4b3fd5a7abb825a4178/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=9f95c605f83bcf4c158ea4b3fd5a7abb825a4178", "patch": "@@ -15,7 +15,6 @@ use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::Rollback;\n use rustc_data_structures::unify as ut;\n use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n-use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n@@ -147,7 +146,7 @@ pub struct InferCtxtInner<'tcx> {\n     /// for each body-id in this map, which will process the\n     /// obligations within. This is expected to be done 'late enough'\n     /// that all type inference variables have been bound and so forth.\n-    region_obligations: Vec<(hir::HirId, RegionObligation<'tcx>)>,\n+    region_obligations: Vec<RegionObligation<'tcx>>,\n \n     undo_log: InferCtxtUndoLogs<'tcx>,\n \n@@ -171,7 +170,7 @@ impl<'tcx> InferCtxtInner<'tcx> {\n     }\n \n     #[inline]\n-    pub fn region_obligations(&self) -> &[(hir::HirId, RegionObligation<'tcx>)] {\n+    pub fn region_obligations(&self) -> &[RegionObligation<'tcx>] {\n         &self.region_obligations\n     }\n "}, {"sha": "b839566bec99f5f0a8d655bb0128be4c13e7a7e9", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9f95c605f83bcf4c158ea4b3fd5a7abb825a4178/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f95c605f83bcf4c158ea4b3fd5a7abb825a4178/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=9f95c605f83bcf4c158ea4b3fd5a7abb825a4178", "patch": "@@ -68,7 +68,6 @@ use crate::infer::{\n };\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use rustc_data_structures::undo_log::UndoLogs;\n-use rustc_hir as hir;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n use smallvec::smallvec;\n@@ -79,16 +78,11 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     /// and later processed by regionck, when full type information is\n     /// available (see `region_obligations` field for more\n     /// information).\n-    pub fn register_region_obligation(\n-        &self,\n-        body_id: hir::HirId,\n-        obligation: RegionObligation<'tcx>,\n-    ) {\n-        debug!(\"register_region_obligation(body_id={:?}, obligation={:?})\", body_id, obligation);\n-\n+    #[instrument(level = \"debug\", skip(self))]\n+    pub fn register_region_obligation(&self, obligation: RegionObligation<'tcx>) {\n         let mut inner = self.inner.borrow_mut();\n         inner.undo_log.push(UndoLog::PushRegionObligation);\n-        inner.region_obligations.push((body_id, obligation));\n+        inner.region_obligations.push(obligation);\n     }\n \n     pub fn register_region_obligation_with_cause(\n@@ -108,14 +102,11 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n             )\n         });\n \n-        self.register_region_obligation(\n-            cause.body_id,\n-            RegionObligation { sup_type, sub_region, origin },\n-        );\n+        self.register_region_obligation(RegionObligation { sup_type, sub_region, origin });\n     }\n \n     /// Trait queries just want to pass back type obligations \"as is\"\n-    pub fn take_registered_region_obligations(&self) -> Vec<(hir::HirId, RegionObligation<'tcx>)> {\n+    pub fn take_registered_region_obligations(&self) -> Vec<RegionObligation<'tcx>> {\n         std::mem::take(&mut self.inner.borrow_mut().region_obligations)\n     }\n \n@@ -156,7 +147,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n \n         let my_region_obligations = self.take_registered_region_obligations();\n \n-        for (_body_id, RegionObligation { sup_type, sub_region, origin }) in my_region_obligations {\n+        for RegionObligation { sup_type, sub_region, origin } in my_region_obligations {\n             debug!(\n                 \"process_registered_region_obligations: sup_type={:?} sub_region={:?} origin={:?}\",\n                 sup_type, sub_region, origin"}, {"sha": "c9d46b2810ddbd58f3fae39e649aee0384ee8523", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f95c605f83bcf4c158ea4b3fd5a7abb825a4178/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f95c605f83bcf4c158ea4b3fd5a7abb825a4178/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fcustom.rs?ref=9f95c605f83bcf4c158ea4b3fd5a7abb825a4178", "patch": "@@ -95,7 +95,7 @@ pub fn scrape_region_constraints<'tcx, Op: super::TypeOp<'tcx, Output = R>, R>(\n         infcx.tcx,\n         region_obligations\n             .iter()\n-            .map(|(_, r_o)| (r_o.sup_type, r_o.sub_region))\n+            .map(|r_o| (r_o.sup_type, r_o.sub_region))\n             .map(|(ty, r)| (infcx.resolve_vars_if_possible(ty), r)),\n         &region_constraint_data,\n     );"}]}