{"sha": "c9914cd3aeaaeb59e1067205df9b33a3f1c1aa79", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5OTE0Y2QzYWVhYWViNTllMTA2NzIwNWRmOWIzM2EzZjFjMWFhNzk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-30T08:45:52Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-09-30T08:45:52Z"}, "message": "fix enum variants with multiple fields", "tree": {"sha": "05cd6351a7f40f71117de115b370bf6c78d9e1e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05cd6351a7f40f71117de115b370bf6c78d9e1e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9914cd3aeaaeb59e1067205df9b33a3f1c1aa79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX7iZAAAoJEFbW7qD8Z6xGpTEP/jFJtSCgwnQ0K+/vtAtD/pr6\nmw30sDxlPtVcex2XFRxakTZi4eAy+sanPY9Gy++ya+1ICLW3zxxXpJvIlgk75ZAa\nK0MJGrAcQMKVmhKbKRi5cV7P/wmkIMEKws4AnkhPdTxx2opksrx+Tjfa1HDbVoQM\nNyarm0dDA6FRK4lyUJZoWsN/MoYThq8qiEfjFjR/EjOpixvMAGVqlf8wZDzVdV6Y\ns5sm/+jMOoJsUVuP5CZpcn812b5Vi3FfhpBya+WQH0DCh6E1U50JuM3QBHYZBsQ7\nz1xSHPcWRP1KPrlV72zjr2PAaxzOWuqU3dthh6Y3zjwzqvOuRVvHaBPYKHthMSD6\nosj/CkgygHuuz4aZn6ly+8pbiQ72ooWtv9W2kH89tVBidcsO6spatItjo8uhfrKH\nQNpYW8YTJcmE9k1RT2F7Xh108W5odgAi0lA2Xag2SJQ5C3YyNNfPzqTGE7d9SbQq\npJX9aiRGxGqSw2E452GNKolim/EbMT2+AiS4nlBarJCFW4XH94XaWB7jp45o0PYY\n4h7JZ5Q4JSr8Trj6Qgmvt02wNQ/7s0BjTYijviS0RQeF8aPM4Gcc2Ara/PNL2JZ8\nqCxoWm4I9p0A5VPhI8hgnv80QRotZ0yP5hk6OWrIztuFOAqgP5xGvbT67yMW5bks\nr3vnK/I9jXeFhSMiNNK0\n=mw2Z\n-----END PGP SIGNATURE-----", "payload": "tree 05cd6351a7f40f71117de115b370bf6c78d9e1e4\nparent 8c666b30edb36109d0f18fee9c589c220eaa7213\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1475225152 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1475225152 +0200\n\nfix enum variants with multiple fields"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9914cd3aeaaeb59e1067205df9b33a3f1c1aa79", "html_url": "https://github.com/rust-lang/rust/commit/c9914cd3aeaaeb59e1067205df9b33a3f1c1aa79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9914cd3aeaaeb59e1067205df9b33a3f1c1aa79/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c666b30edb36109d0f18fee9c589c220eaa7213", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c666b30edb36109d0f18fee9c589c220eaa7213", "html_url": "https://github.com/rust-lang/rust/commit/8c666b30edb36109d0f18fee9c589c220eaa7213"}], "stats": {"total": 259, "additions": 251, "deletions": 8}, "files": [{"sha": "573b5c6f8490b6562ff2ec8332323f744fdcdd92", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c9914cd3aeaaeb59e1067205df9b33a3f1c1aa79/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9914cd3aeaaeb59e1067205df9b33a3f1c1aa79/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=c9914cd3aeaaeb59e1067205df9b33a3f1c1aa79", "patch": "@@ -819,11 +819,13 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     Field(field, field_ty) => {\n                         let field_ty = self.monomorphize(field_ty, self.substs());\n                         use rustc::ty::layout::Layout::*;\n-                        let variant = match *base_layout {\n-                            Univariant { ref variant, .. } => variant,\n+                        let field = field.index();\n+                        let offset = match *base_layout {\n+                            Univariant { ref variant, .. } => variant.field_offset(field),\n                             General { ref variants, .. } => {\n                                 if let LvalueExtra::DowncastVariant(variant_idx) = base.extra {\n-                                    &variants[variant_idx]\n+                                    // +1 for the discriminant, which is field 0\n+                                    variants[variant_idx].field_offset(field + 1)\n                                 } else {\n                                     bug!(\"field access on enum had no variant index\");\n                                 }\n@@ -832,12 +834,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 assert_eq!(field.index(), 0);\n                                 return Ok(base);\n                             }\n-                            StructWrappedNullablePointer { ref nonnull, .. } => nonnull,\n+                            StructWrappedNullablePointer { ref nonnull, .. } => nonnull.field_offset(field),\n                             _ => bug!(\"field access on non-product type: {:?}\", base_layout),\n                         };\n \n-                        let offset = variant.field_offset(field.index()).bytes();\n-                        let ptr = base.ptr.offset(offset as isize);\n+                        let ptr = base.ptr.offset(offset.bytes() as isize);\n                         if self.type_is_sized(field_ty) {\n                             ptr\n                         } else {\n@@ -857,9 +858,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     Downcast(_, variant) => {\n                         use rustc::ty::layout::Layout::*;\n                         match *base_layout {\n-                            General { ref variants, .. } => {\n+                            General { .. } => {\n                                 return Ok(Lvalue {\n-                                    ptr: base.ptr.offset(variants[variant].field_offset(1).bytes() as isize),\n+                                    ptr: base.ptr,\n                                     extra: LvalueExtra::DowncastVariant(variant),\n                                 });\n                             }"}, {"sha": "b67ef85acf62d7f9f0c57b08197e6ed6481090e2", "filename": "tests/run-pass/deriving-associated-types.rs", "status": "added", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/c9914cd3aeaaeb59e1067205df9b33a3f1c1aa79/tests%2Frun-pass%2Fderiving-associated-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9914cd3aeaaeb59e1067205df9b33a3f1c1aa79/tests%2Frun-pass%2Fderiving-associated-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fderiving-associated-types.rs?ref=c9914cd3aeaaeb59e1067205df9b33a3f1c1aa79", "patch": "@@ -0,0 +1,208 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait DeclaredTrait {\n+    type Type;\n+}\n+\n+impl DeclaredTrait for i32 {\n+    type Type = i32;\n+}\n+\n+pub trait WhereTrait {\n+    type Type;\n+}\n+\n+impl WhereTrait for i32 {\n+    type Type = i32;\n+}\n+\n+// Make sure we don't add a bound that just shares a name with an associated\n+// type.\n+pub mod module {\n+    pub type Type = i32;\n+}\n+\n+#[derive(PartialEq, Debug)]\n+struct PrivateStruct<T>(T);\n+\n+#[derive(PartialEq, Debug)]\n+struct TupleStruct<A, B: DeclaredTrait, C>(\n+    module::Type,\n+    Option<module::Type>,\n+    A,\n+    PrivateStruct<A>,\n+    B,\n+    B::Type,\n+    Option<B::Type>,\n+    <B as DeclaredTrait>::Type,\n+    Option<<B as DeclaredTrait>::Type>,\n+    C,\n+    C::Type,\n+    Option<C::Type>,\n+    <C as WhereTrait>::Type,\n+    Option<<C as WhereTrait>::Type>,\n+    <i32 as DeclaredTrait>::Type,\n+) where C: WhereTrait;\n+\n+#[derive(PartialEq, Debug)]\n+pub struct Struct<A, B: DeclaredTrait, C> where C: WhereTrait {\n+    m1: module::Type,\n+    m2: Option<module::Type>,\n+    a1: A,\n+    a2: PrivateStruct<A>,\n+    b: B,\n+    b1: B::Type,\n+    b2: Option<B::Type>,\n+    b3: <B as DeclaredTrait>::Type,\n+    b4: Option<<B as DeclaredTrait>::Type>,\n+    c: C,\n+    c1: C::Type,\n+    c2: Option<C::Type>,\n+    c3: <C as WhereTrait>::Type,\n+    c4: Option<<C as WhereTrait>::Type>,\n+    d: <i32 as DeclaredTrait>::Type,\n+}\n+\n+#[derive(PartialEq, Debug)]\n+enum Enum<A, B: DeclaredTrait, C> where C: WhereTrait {\n+    Unit,\n+    Seq(\n+        module::Type,\n+        Option<module::Type>,\n+        A,\n+        PrivateStruct<A>,\n+        B,\n+        B::Type,\n+        Option<B::Type>,\n+        <B as DeclaredTrait>::Type,\n+        Option<<B as DeclaredTrait>::Type>,\n+        C,\n+        C::Type,\n+        Option<C::Type>,\n+        <C as WhereTrait>::Type,\n+        Option<<C as WhereTrait>::Type>,\n+        <i32 as DeclaredTrait>::Type,\n+    ),\n+    Map {\n+        m1: module::Type,\n+        m2: Option<module::Type>,\n+        a1: A,\n+        a2: PrivateStruct<A>,\n+        b: B,\n+        b1: B::Type,\n+        b2: Option<B::Type>,\n+        b3: <B as DeclaredTrait>::Type,\n+        b4: Option<<B as DeclaredTrait>::Type>,\n+        c: C,\n+        c1: C::Type,\n+        c2: Option<C::Type>,\n+        c3: <C as WhereTrait>::Type,\n+        c4: Option<<C as WhereTrait>::Type>,\n+        d: <i32 as DeclaredTrait>::Type,\n+    },\n+}\n+\n+fn main() {\n+\n+    let e: Enum<\n+        i32,\n+        i32,\n+        i32,\n+    > = Enum::Seq(\n+        0,\n+        None,\n+        0,\n+        PrivateStruct(0),\n+        0,\n+        0,\n+        None,\n+        0,\n+        None,\n+        0,\n+        0,\n+        None,\n+        0,\n+        None,\n+        0,\n+    );\n+    assert_eq!(e, e);\n+\n+    let e: Enum<\n+        i32,\n+        i32,\n+        i32,\n+    > = Enum::Map {\n+        m1: 0,\n+        m2: None,\n+        a1: 0,\n+        a2: PrivateStruct(0),\n+        b: 0,\n+        b1: 0,\n+        b2: None,\n+        b3: 0,\n+        b4: None,\n+        c: 0,\n+        c1: 0,\n+        c2: None,\n+        c3: 0,\n+        c4: None,\n+        d: 0,\n+    };\n+    assert_eq!(e, e);\n+        let e: TupleStruct<\n+            i32,\n+            i32,\n+            i32,\n+        > = TupleStruct(\n+            0,\n+            None,\n+            0,\n+            PrivateStruct(0),\n+            0,\n+            0,\n+            None,\n+            0,\n+            None,\n+            0,\n+            0,\n+            None,\n+            0,\n+            None,\n+            0,\n+        );\n+        assert_eq!(e, e);\n+\n+        let e: Struct<\n+            i32,\n+            i32,\n+            i32,\n+        > = Struct {\n+            m1: 0,\n+            m2: None,\n+            a1: 0,\n+            a2: PrivateStruct(0),\n+            b: 0,\n+            b1: 0,\n+            b2: None,\n+            b3: 0,\n+            b4: None,\n+            c: 0,\n+            c1: 0,\n+            c2: None,\n+            c3: 0,\n+            c4: None,\n+            d: 0,\n+        };\n+        assert_eq!(e, e);\n+\n+        let e = Enum::Unit::<i32, i32, i32>;\n+        assert_eq!(e, e);\n+}"}, {"sha": "1f27292904f42a132889ee089b12cfc15778cf5b", "filename": "tests/run-pass/enums.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c9914cd3aeaaeb59e1067205df9b33a3f1c1aa79/tests%2Frun-pass%2Fenums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9914cd3aeaaeb59e1067205df9b33a3f1c1aa79/tests%2Frun-pass%2Fenums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenums.rs?ref=c9914cd3aeaaeb59e1067205df9b33a3f1c1aa79", "patch": "@@ -0,0 +1,34 @@\n+enum MyEnum {\n+    MyEmptyVariant,\n+    MyNewtypeVariant(i32),\n+    MyTupleVariant(i32, i32),\n+    MyStructVariant {\n+        my_first_field: i32,\n+        my_second_field: i32,\n+    }\n+}\n+\n+fn test(me: MyEnum) {\n+    match me {\n+        MyEnum::MyEmptyVariant => {},\n+        MyEnum::MyNewtypeVariant(ref val) => assert_eq!(val, &42),\n+        MyEnum::MyTupleVariant(ref a, ref b) => {\n+            assert_eq!(a, &43);\n+            assert_eq!(b, &44);\n+        },\n+        MyEnum::MyStructVariant { ref my_first_field, ref my_second_field } => {\n+            assert_eq!(my_first_field, &45);\n+            assert_eq!(my_second_field, &46);\n+        },\n+    }\n+}\n+\n+fn main() {\n+    test(MyEnum::MyEmptyVariant);\n+    test(MyEnum::MyNewtypeVariant(42));\n+    test(MyEnum::MyTupleVariant(43, 44));\n+    test(MyEnum::MyStructVariant{\n+        my_first_field: 45,\n+        my_second_field: 46,\n+    });\n+}"}]}