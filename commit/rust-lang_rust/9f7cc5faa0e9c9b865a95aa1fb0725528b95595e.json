{"sha": "9f7cc5faa0e9c9b865a95aa1fb0725528b95595e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmN2NjNWZhYTBlOWM5Yjg2NWE5NWFhMWZiMDcyNTUyOGI5NTU5NWU=", "commit": {"author": {"name": "John Firebaugh", "email": "john.firebaugh@gmail.com", "date": "2016-10-02T19:59:44Z"}, "committer": {"name": "John Firebaugh", "email": "john.firebaugh@gmail.com", "date": "2016-10-02T20:12:35Z"}, "message": "Use a distinct error code for \"if may be missing an else clause\"\n\nIntroduce the possibility of assigning distinct error codes to the various origin types of E0308. Start by assigning E0317 for the \"IfExpressionWithNoElse\" case, and write a long diagnostic specific to this case.\n\nFixes #36596", "tree": {"sha": "a20855d0ca6d8c8a1ce97f7bd5691b36b24f2448", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a20855d0ca6d8c8a1ce97f7bd5691b36b24f2448"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f7cc5faa0e9c9b865a95aa1fb0725528b95595e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f7cc5faa0e9c9b865a95aa1fb0725528b95595e", "html_url": "https://github.com/rust-lang/rust/commit/9f7cc5faa0e9c9b865a95aa1fb0725528b95595e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f7cc5faa0e9c9b865a95aa1fb0725528b95595e/comments", "author": {"login": "jfirebaugh", "id": 98601, "node_id": "MDQ6VXNlcjk4NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/98601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfirebaugh", "html_url": "https://github.com/jfirebaugh", "followers_url": "https://api.github.com/users/jfirebaugh/followers", "following_url": "https://api.github.com/users/jfirebaugh/following{/other_user}", "gists_url": "https://api.github.com/users/jfirebaugh/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfirebaugh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfirebaugh/subscriptions", "organizations_url": "https://api.github.com/users/jfirebaugh/orgs", "repos_url": "https://api.github.com/users/jfirebaugh/repos", "events_url": "https://api.github.com/users/jfirebaugh/events{/privacy}", "received_events_url": "https://api.github.com/users/jfirebaugh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jfirebaugh", "id": 98601, "node_id": "MDQ6VXNlcjk4NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/98601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jfirebaugh", "html_url": "https://github.com/jfirebaugh", "followers_url": "https://api.github.com/users/jfirebaugh/followers", "following_url": "https://api.github.com/users/jfirebaugh/following{/other_user}", "gists_url": "https://api.github.com/users/jfirebaugh/gists{/gist_id}", "starred_url": "https://api.github.com/users/jfirebaugh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jfirebaugh/subscriptions", "organizations_url": "https://api.github.com/users/jfirebaugh/orgs", "repos_url": "https://api.github.com/users/jfirebaugh/repos", "events_url": "https://api.github.com/users/jfirebaugh/events{/privacy}", "received_events_url": "https://api.github.com/users/jfirebaugh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "791fb778ccfb3dc831d99544093a9d4e3cf82a49", "url": "https://api.github.com/repos/rust-lang/rust/commits/791fb778ccfb3dc831d99544093a9d4e3cf82a49", "html_url": "https://github.com/rust-lang/rust/commit/791fb778ccfb3dc831d99544093a9d4e3cf82a49"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "f43cbb2696df357f610417dcc82ba609e70adce7", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f7cc5faa0e9c9b865a95aa1fb0725528b95595e/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7cc5faa0e9c9b865a95aa1fb0725528b95595e/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=9f7cc5faa0e9c9b865a95aa1fb0725528b95595e", "patch": "@@ -1431,6 +1431,21 @@ fn make_child<'elve>(x: &mut &'elve isize, y: &mut &'elve isize) {\n ```\n \"##,\n \n+E0317: r##\"\n+An `if` expression without an `else` block is required to have the type `()`.\n+This error occurs when the `if` block has a type other than `()`. For example:\n+\n+```compile_fail,E0317\n+fn main() {\n+    let x = 5;\n+    let a = if x == 5 { 1 };\n+}\n+```\n+\n+To resolve this error, either add an `else` block having the same type as the\n+`if` block, or adjust the `if` block so that it has the type `()`.\n+\"##,\n+\n E0398: r##\"\n In Rust 1.3, the default object lifetime bounds are expected to change, as\n described in RFC #1156 [1]. You are getting a warning because the compiler"}, {"sha": "f157b02f14d553df4cc4b619ab8fd12ece7e132d", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f7cc5faa0e9c9b865a95aa1fb0725528b95595e/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7cc5faa0e9c9b865a95aa1fb0725528b95595e/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=9f7cc5faa0e9c9b865a95aa1fb0725528b95595e", "patch": "@@ -577,10 +577,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                          terr: &TypeError<'tcx>)\n                                          -> DiagnosticBuilder<'tcx>\n     {\n-        // FIXME: do we want to use a different error code for each origin?\n-        let mut diag = struct_span_err!(\n-            self.tcx.sess, trace.origin.span(), E0308,\n-            \"{}\", trace.origin.as_failure_str()\n+        let mut diag = self.tcx.sess.struct_span_err_with_code(\n+            trace.origin.span(),\n+            trace.origin.as_failure_str(),\n+            trace.origin.as_error_code()\n         );\n         self.note_type_err(&mut diag, trace.origin, None, Some(trace.values), terr);\n         diag"}, {"sha": "036b3ae62846b7f094fd07c5fb74ebfeb43d1f10", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f7cc5faa0e9c9b865a95aa1fb0725528b95595e/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7cc5faa0e9c9b865a95aa1fb0725528b95595e/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=9f7cc5faa0e9c9b865a95aa1fb0725528b95595e", "patch": "@@ -219,6 +219,25 @@ pub enum TypeOrigin {\n }\n \n impl TypeOrigin {\n+    fn as_error_code(&self) -> &'static str {\n+        match self {\n+            // FIXME: use distinct codes for each case\n+            &TypeOrigin::Misc(_) => \"E0308\",\n+            &TypeOrigin::RelateOutputImplTypes(_) => \"E0308\",\n+            &TypeOrigin::ExprAssignable(_) => \"E0308\",\n+            &TypeOrigin::MethodCompatCheck(_) => \"E0308\",\n+            &TypeOrigin::MatchExpressionArm(..) => \"E0308\",\n+            &TypeOrigin::IfExpression(_) => \"E0308\",\n+            &TypeOrigin::IfExpressionWithNoElse(_) => \"E0317\",\n+            &TypeOrigin::RangeExpression(_) => \"E0308\",\n+            &TypeOrigin::EquatePredicate(_) => \"E0308\",\n+            &TypeOrigin::MainFunctionType(_) => \"E0308\",\n+            &TypeOrigin::StartFunctionType(_) => \"E0308\",\n+            &TypeOrigin::IntrinsicType(_) => \"E0308\",\n+            &TypeOrigin::MethodReceiver(_) => \"E0308\",\n+        }\n+    }\n+\n     fn as_failure_str(&self) -> &'static str {\n         match self {\n             &TypeOrigin::Misc(_) |"}, {"sha": "95bcce5a8474afb6aea4e1672143a32a0b0866b8", "filename": "src/test/compile-fail/if-without-else-result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f7cc5faa0e9c9b865a95aa1fb0725528b95595e/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f7cc5faa0e9c9b865a95aa1fb0725528b95595e/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs?ref=9f7cc5faa0e9c9b865a95aa1fb0725528b95595e", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     let a = if true { true };\n-    //~^ ERROR if may be missing an else clause\n+    //~^ ERROR if may be missing an else clause [E0317]\n     //~| expected type `()`\n     //~| found type `bool`\n     //~| expected (), found bool"}]}