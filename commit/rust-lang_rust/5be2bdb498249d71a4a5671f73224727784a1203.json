{"sha": "5be2bdb498249d71a4a5671f73224727784a1203", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZTJiZGI0OTgyNDlkNzFhNGE1NjcxZjczMjI0NzI3Nzg0YTEyMDM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:52:53Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:52:53Z"}, "message": "One must always remember to clean up after themselves", "tree": {"sha": "f89fcdce5e82a35a6472d73d74147fecb73bfb92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f89fcdce5e82a35a6472d73d74147fecb73bfb92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5be2bdb498249d71a4a5671f73224727784a1203", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5be2bdb498249d71a4a5671f73224727784a1203", "html_url": "https://github.com/rust-lang/rust/commit/5be2bdb498249d71a4a5671f73224727784a1203", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5be2bdb498249d71a4a5671f73224727784a1203/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ea91ac531de9e309a495538a84f84ec9653bd51", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea91ac531de9e309a495538a84f84ec9653bd51", "html_url": "https://github.com/rust-lang/rust/commit/5ea91ac531de9e309a495538a84f84ec9653bd51"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "1cc65dcfd1027003ae9258d07fe993d21e0c32e8", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5be2bdb498249d71a4a5671f73224727784a1203/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be2bdb498249d71a4a5671f73224727784a1203/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=5be2bdb498249d71a4a5671f73224727784a1203", "patch": "@@ -924,11 +924,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 // used in a path such as `Foo::<T, U>::new()` will\n                 // use an inference variable for `C` with `[T, U]`\n                 // as the substitutions for the default, `(T, U)`.\n-                let ty_var_id = self.type_variables\n-                                    .borrow_mut()\n-                                    .new_var(self.universe(),\n-                                             false,\n-                                             TypeVariableOrigin::TypeParameterDefinition(span, param.name));\n+                let ty_var_id =\n+                    self.type_variables\n+                        .borrow_mut()\n+                        .new_var(self.universe(),\n+                                    false,\n+                                    TypeVariableOrigin::TypeParameterDefinition(span, param.name));\n \n                 self.tcx.mk_var(ty_var_id).into()\n             }"}]}