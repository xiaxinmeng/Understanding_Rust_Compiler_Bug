{"sha": "445284372082c1e760bc8cc0fac1d69644f27606", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NTI4NDM3MjA4MmMxZTc2MGJjOGNjMGZhYzFkNjk2NDRmMjc2MDY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-14T10:36:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-14T10:36:40Z"}, "message": "update panicking comments in libstd", "tree": {"sha": "1f644bfe650f1268f7e3a434d8c0943eabf5ddfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f644bfe650f1268f7e3a434d8c0943eabf5ddfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/445284372082c1e760bc8cc0fac1d69644f27606", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/445284372082c1e760bc8cc0fac1d69644f27606", "html_url": "https://github.com/rust-lang/rust/commit/445284372082c1e760bc8cc0fac1d69644f27606", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/445284372082c1e760bc8cc0fac1d69644f27606/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c5d8e9b520c12044c818dd3d48f02bcea075ec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5d8e9b520c12044c818dd3d48f02bcea075ec3", "html_url": "https://github.com/rust-lang/rust/commit/9c5d8e9b520c12044c818dd3d48f02bcea075ec3"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "7bc86650a7324d41168871498f2ad8200e3cd8eb", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/445284372082c1e760bc8cc0fac1d69644f27606/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/445284372082c1e760bc8cc0fac1d69644f27606/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=445284372082c1e760bc8cc0fac1d69644f27606", "patch": "@@ -251,21 +251,20 @@ pub unsafe fn r#try<R, F: FnOnce() -> R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     //\n     // We go through a transition where:\n     //\n-    // * First, we set the data to be the closure that we're going to call.\n+    // * First, we set the data field `f` to be the argumentless closure that we're going to call.\n     // * When we make the function call, the `do_call` function below, we take\n-    //   ownership of the function pointer. At this point the `Data` union is\n+    //   ownership of the function pointer. At this point the `data` union is\n     //   entirely uninitialized.\n     // * If the closure successfully returns, we write the return value into the\n-    //   data's return slot. Note that `ptr::write` is used as it's overwriting\n-    //   uninitialized data.\n+    //   data's return slot (field `r`).\n+    // * If the closure panics (`do_catch` below), we write the panic payload into field `p`.\n     // * Finally, when we come back out of the `try` intrinsic we're\n     //   in one of two states:\n     //\n     //      1. The closure didn't panic, in which case the return value was\n-    //         filled in. We move it out of `data` and return it.\n-    //      2. The closure panicked, in which case the return value wasn't\n-    //         filled in. In this case the entire `data` union is invalid, so\n-    //         there is no need to drop anything.\n+    //         filled in. We move it out of `data.r` and return it.\n+    //      2. The closure panicked, in which case the panic payload was\n+    //         filled in. We move it out of `data.p` and return it.\n     //\n     // Once we stack all that together we should have the \"most efficient'\n     // method of calling a catch panic whilst juggling ownership."}]}