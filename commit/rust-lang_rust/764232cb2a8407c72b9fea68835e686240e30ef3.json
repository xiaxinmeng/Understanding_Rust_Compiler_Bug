{"sha": "764232cb2a8407c72b9fea68835e686240e30ef3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NDIzMmNiMmE4NDA3YzcyYjlmZWE2ODgzNWU2ODYyNDBlMzBlZjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-26T11:20:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-26T11:20:18Z"}, "message": "Auto merge of #51805 - pietroalbini:rollup, r=pietroalbini\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #51104 (add `dyn ` to display of dynamic (trait) types)\n - #51153 (Link panic and compile_error docs)\n - #51642 (Fix unknown windows build)\n - #51730 (New safe associated functions for PinMut)\n - #51731 (Fix ICEs when using continue as an array length inside closures (inside loop conditions))\n - #51747 (Add error for using null characters in #[export_name])\n - #51769 (Update broken rustc-guide links)\n - #51786 (Remove unnecessary stat64 pointer casts)\n - #51788 (Fix typo)\n - #51789 (Don't ICE when performing `lower_pattern_unadjusted` on a `TyError`)\n - #51791 (Minify css)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d97ad05cf89b5e952cd58394ea8c5e8b4e82c803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d97ad05cf89b5e952cd58394ea8c5e8b4e82c803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/764232cb2a8407c72b9fea68835e686240e30ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/764232cb2a8407c72b9fea68835e686240e30ef3", "html_url": "https://github.com/rust-lang/rust/commit/764232cb2a8407c72b9fea68835e686240e30ef3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/764232cb2a8407c72b9fea68835e686240e30ef3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "309fd8a6fb059d38ea56274968feff2ef738184b", "url": "https://api.github.com/repos/rust-lang/rust/commits/309fd8a6fb059d38ea56274968feff2ef738184b", "html_url": "https://github.com/rust-lang/rust/commit/309fd8a6fb059d38ea56274968feff2ef738184b"}, {"sha": "a539885450313a6cfd50312ec12a4a84d546d87c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a539885450313a6cfd50312ec12a4a84d546d87c", "html_url": "https://github.com/rust-lang/rust/commit/a539885450313a6cfd50312ec12a4a84d546d87c"}], "stats": {"total": 641, "additions": 397, "deletions": 244}, "files": [{"sha": "b74587e566210aabb4878f9d67285590465753b5", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -1220,7 +1220,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"minifier\"\n-version = \"0.0.11\"\n+version = \"0.0.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"regex 0.2.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2426,7 +2426,7 @@ dependencies = [\n name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n- \"minifier 0.0.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"minifier 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempfile 3.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -3263,7 +3263,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum mdbook 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"90b5a8d7e341ceee5db3882a06078d42661ddcfa2b3687319cc5da76ec4e782f\"\n \"checksum memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796fba70e76612589ed2ce7f45282f5af869e0fdd7cc6199fa1aa1f1d591ba9d\"\n \"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\n-\"checksum minifier 0.0.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"26f3e36a4db1981b16567e4abfd6ddc3641bc9b950bdc868701f656bf9b74bdd\"\n+\"checksum minifier 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"78cb57f9a385530d60f2d67f6e108050b478b7a0ffd0bb9c350803e1356535dd\"\n \"checksum miniz-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"609ce024854aeb19a0ef7567d348aaa5a746b32fb72e336df7fcc16869d7e2b4\"\n \"checksum miow 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9224c91f82b3c47cf53dcf78dfaa20d6888fbcc5d272d5f2fcdf8a697f3c987d\"\n \"checksum nibble_vec 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8d77f3db4bce033f4d04db08079b2ef1c3d02b44e86f25d08886fafa7756ffa\""}, {"sha": "08bd9289ab48758559b14030151c36e343fbb078", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -1119,6 +1119,12 @@ impl<'a, T: ?Sized + Unpin> PinMut<'a, T> {\n     pub fn new(reference: &'a mut T) -> PinMut<'a, T> {\n         PinMut { inner: reference }\n     }\n+\n+    /// Get a mutable reference to the data inside of this `PinMut`.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub fn get_mut(this: PinMut<'a, T>) -> &'a mut T {\n+        this.inner\n+    }\n }\n \n \n@@ -1150,21 +1156,21 @@ impl<'a, T: ?Sized> PinMut<'a, T> {\n     /// the data out of the mutable reference you receive when you call this\n     /// function.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub unsafe fn get_mut(this: PinMut<'a, T>) -> &'a mut T {\n+    pub unsafe fn get_mut_unchecked(this: PinMut<'a, T>) -> &'a mut T {\n         this.inner\n     }\n \n     /// Construct a new pin by mapping the interior value.\n     ///\n-    /// For example, if you  wanted to get a `PinMut` of a field of something, you\n-    /// could use this to get access to that field in one line of code.\n+    /// For example, if you  wanted to get a `PinMut` of a field of something,\n+    /// you could use this to get access to that field in one line of code.\n     ///\n     /// This function is unsafe. You must guarantee that the data you return\n     /// will not move so long as the argument value does not move (for example,\n     /// because it is one of the fields of that value), and also that you do\n     /// not move out of the argument you receive to the interior function.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub unsafe fn map<U, F>(this: PinMut<'a, T>, f: F) -> PinMut<'a, U> where\n+    pub unsafe fn map_unchecked<U, F>(this: PinMut<'a, T>, f: F) -> PinMut<'a, U> where\n         F: FnOnce(&mut T) -> &mut U\n     {\n         PinMut { inner: f(this.inner) }"}, {"sha": "20bc173f7e1548043c5c28bebfb57649e5518472", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -275,7 +275,7 @@ impl<T> Option<T> {\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n     pub fn as_pin_mut<'a>(self: PinMut<'a, Self>) -> Option<PinMut<'a, T>> {\n         unsafe {\n-            PinMut::get_mut(self).as_mut().map(|x| PinMut::new_unchecked(x))\n+            PinMut::get_mut_unchecked(self).as_mut().map(|x| PinMut::new_unchecked(x))\n         }\n     }\n "}, {"sha": "484c41b3a79965c231f57f8d709fe9aaccb9ae25", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -3536,12 +3536,22 @@ impl<'a> LoweringContext<'a> {\n                         this.expr_block(block, ThinVec::new())\n                     })\n                 })\n-            },\n+            }\n             ExprKind::Closure(\n-                capture_clause, asyncness, movability, ref decl, ref body, fn_decl_span) =>\n-            {\n-                self.with_new_scopes(|this| {\n-                    if let IsAsync::Async(async_closure_node_id) = asyncness {\n+                capture_clause, asyncness, movability, ref decl, ref body, fn_decl_span\n+            ) => {\n+                if let IsAsync::Async(async_closure_node_id) = asyncness {\n+                    let outer_decl = FnDecl {\n+                        inputs: decl.inputs.clone(),\n+                        output: FunctionRetTy::Default(fn_decl_span),\n+                        variadic: false,\n+                    };\n+                    // We need to lower the declaration outside the new scope, because we\n+                    // have to conserve the state of being inside a loop condition for the\n+                    // closure argument types.\n+                    let fn_decl = self.lower_fn_decl(&outer_decl, None, false, false);\n+\n+                    self.with_new_scopes(|this| {\n                         // FIXME(cramertj) allow `async` non-`move` closures with\n                         if capture_clause == CaptureBy::Ref &&\n                             !decl.inputs.is_empty()\n@@ -3561,11 +3571,6 @@ impl<'a> LoweringContext<'a> {\n \n                         // Transform `async |x: u8| -> X { ... }` into\n                         // `|x: u8| future_from_generator(|| -> X { ... })`\n-                        let outer_decl = FnDecl {\n-                            inputs: decl.inputs.clone(),\n-                            output: FunctionRetTy::Default(fn_decl_span),\n-                            variadic: false,\n-                        };\n                         let body_id = this.lower_body(Some(&outer_decl), |this| {\n                             let async_ret_ty = if let FunctionRetTy::Ty(ty) = &decl.output {\n                                 Some(&**ty)\n@@ -3579,12 +3584,17 @@ impl<'a> LoweringContext<'a> {\n                         });\n                         hir::ExprClosure(\n                             this.lower_capture_clause(capture_clause),\n-                            this.lower_fn_decl(&outer_decl, None, false, false),\n+                            fn_decl,\n                             body_id,\n                             fn_decl_span,\n                             None,\n                         )\n-                    } else {\n+                    })\n+                } else {\n+                    // Lower outside new scope to preserve `is_in_loop_condition`.\n+                    let fn_decl = self.lower_fn_decl(decl, None, false, false);\n+\n+                    self.with_new_scopes(|this| {\n                         let mut is_generator = false;\n                         let body_id = this.lower_body(Some(decl), |this| {\n                             let e = this.lower_expr(body);\n@@ -3618,13 +3628,13 @@ impl<'a> LoweringContext<'a> {\n                         };\n                         hir::ExprClosure(\n                             this.lower_capture_clause(capture_clause),\n-                            this.lower_fn_decl(decl, None, false, false),\n+                            fn_decl,\n                             body_id,\n                             fn_decl_span,\n                             generator_option,\n                         )\n-                    }\n-                })\n+                    })\n+                }\n             }\n             ExprKind::Block(ref blk, opt_label) => {\n                 hir::ExprBlock(self.lower_block(blk,"}, {"sha": "ef11cc0f4932e6094a238799cddd30d317ceca6a", "filename": "src/librustc/infer/canonical.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -29,7 +29,7 @@\n //! For a more detailed look at what is happening here, check\n //! out the [chapter in the rustc guide][c].\n //!\n-//! [c]: https://rust-lang-nursery.github.io/rustc-guide/traits-canonicalization.html\n+//! [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html\n \n use infer::{InferCtxt, InferOk, InferResult, RegionVariableOrigin, TypeVariableOrigin};\n use rustc_data_structures::indexed_vec::Idx;\n@@ -274,7 +274,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// To get a good understanding of what is happening here, check\n     /// out the [chapter in the rustc guide][c].\n     ///\n-    /// [c]: https://rust-lang-nursery.github.io/rustc-guide/traits-canonicalization.html#processing-the-canonicalized-query-result\n+    /// [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html#processing-the-canonicalized-query-result\n     pub fn instantiate_query_result<R>(\n         &self,\n         cause: &ObligationCause<'tcx>,\n@@ -458,7 +458,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// To get a good understanding of what is happening here, check\n     /// out the [chapter in the rustc guide][c].\n     ///\n-    /// [c]: https://rust-lang-nursery.github.io/rustc-guide/traits-canonicalization.html#canonicalizing-the-query\n+    /// [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html#canonicalizing-the-query\n     pub fn canonicalize_query<V>(&self, value: &V) -> (V::Canonicalized, CanonicalVarValues<'tcx>)\n     where\n         V: Canonicalize<'gcx, 'tcx>,\n@@ -497,7 +497,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// To get a good understanding of what is happening here, check\n     /// out the [chapter in the rustc guide][c].\n     ///\n-    /// [c]: https://rust-lang-nursery.github.io/rustc-guide/traits-canonicalization.html#canonicalizing-the-query-result\n+    /// [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html#canonicalizing-the-query-result\n     pub fn canonicalize_response<V>(\n         &self,\n         value: &V,"}, {"sha": "43ed80b474ad5ebe4e2002f8d443012d5d57601e", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -583,7 +583,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// For more information about how skolemization for HRTBs works, see\n     /// the [rustc guide].\n     ///\n-    /// [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/trait-hrtb.html\n+    /// [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/traits/hrtb.html\n     pub fn skolemize_late_bound_regions<T>(&self,\n                                            binder: &ty::Binder<T>)\n                                            -> (T, SkolemizationMap<'tcx>)"}, {"sha": "6e1c4191173bc8e44fae22c6b17f37b5d69cc46e", "filename": "src/librustc/infer/lexical_region_resolve/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2FREADME.md?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -3,7 +3,7 @@\n > WARNING: This README is obsolete and will be removed soon! For\n > more info on how the current borrowck works, see the [rustc guide].\n \n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir-borrowck.html\n+[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir/borrowck.html\n \n ## Terminology\n "}, {"sha": "61603e6dee6866e7081232760b29c16fbfd73ee4", "filename": "src/librustc/infer/region_constraints/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Finfer%2Fregion_constraints%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Finfer%2Fregion_constraints%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2FREADME.md?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -3,7 +3,7 @@\n > WARNING: This README is obsolete and will be removed soon! For\n > more info on how the current borrowck works, see the [rustc guide].\n \n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir-borrowck.html\n+[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir/borrowck.html\n \n ## Terminology\n "}, {"sha": "c7249c0aa20c881ce5fb87cc113bc17d8720b928", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -14,7 +14,7 @@\n //! For more information about how MIR-based region-checking works,\n //! see the [rustc guide].\n //!\n-//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir-borrowck.html\n+//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir/borrowck.html\n \n use ich::{StableHashingContext, NodeIdHashingMode};\n use util::nodemap::{FxHashMap, FxHashSet};"}, {"sha": "ee6cb398acdceecef12b853bc67886eeeb0a61ee", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -10,7 +10,7 @@\n \n //! MIR datatypes and passes. See the [rustc guide] for more info.\n //!\n-//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir.html\n+//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir/index.html\n \n use graphviz::IntoCow;\n use hir::def::CtorKind;"}, {"sha": "6a6bebdbd8652ca4fdc420419ffd6880af6d3215", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -11,8 +11,8 @@\n //! See rustc guide chapters on [trait-resolution] and [trait-specialization] for more info on how\n //! this works.\n //!\n-//! [trait-resolution]: https://rust-lang-nursery.github.io/rustc-guide/trait-resolution.html\n-//! [trait-specialization]: https://rust-lang-nursery.github.io/rustc-guide/trait-specialization.html\n+//! [trait-resolution]: https://rust-lang-nursery.github.io/rustc-guide/traits/resolution.html\n+//! [trait-specialization]: https://rust-lang-nursery.github.io/rustc-guide/traits/specialization.html\n \n use hir::def_id::{DefId, LOCAL_CRATE};\n use syntax_pos::DUMMY_SP;"}, {"sha": "15f0b8eebc1db92b0d9a6a8271369f4cf20f0cd6", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -10,7 +10,7 @@\n \n //! Trait Resolution. See [rustc guide] for more info on how this works.\n //!\n-//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/trait-resolution.html\n+//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/traits/resolution.html\n \n pub use self::SelectionError::*;\n pub use self::FulfillmentErrorCode::*;"}, {"sha": "fe30b6a2f88b7be9e4ccc8bb73a2b819bd1c00a8", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -10,7 +10,7 @@\n \n //! See [rustc guide] for more info on how this works.\n //!\n-//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/trait-resolution.html#selection\n+//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/traits/resolution.html#selection\n \n use self::SelectionCandidate::*;\n use self::EvaluationResult::*;\n@@ -1047,7 +1047,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     // candidates. See [rustc guide] for more details.\n     //\n     // [rustc guide]:\n-    // https://rust-lang-nursery.github.io/rustc-guide/trait-resolution.html#candidate-assembly\n+    // https://rust-lang-nursery.github.io/rustc-guide/traits/resolution.html#candidate-assembly\n \n     fn candidate_from_obligation<'o>(&mut self,\n                                      stack: &TraitObligationStack<'o, 'tcx>)\n@@ -2415,7 +2415,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     // type error.  See [rustc guide] for more details.\n     //\n     // [rustc guide]:\n-    // https://rust-lang-nursery.github.io/rustc-guide/trait-resolution.html#confirmation\n+    // https://rust-lang-nursery.github.io/rustc-guide/traits/resolution.html#confirmation\n \n     fn confirm_candidate(&mut self,\n                          obligation: &TraitObligation<'tcx>,"}, {"sha": "f6ae5113cb2a5505e3ed72b0e659f9bacfd02605", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -17,7 +17,7 @@\n //! See the [rustc guide] for a bit more detail on how specialization\n //! fits together with the rest of the trait machinery.\n //!\n-//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/trait-specialization.html\n+//! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/traits/specialization.html\n \n use super::{SelectionContext, FulfillmentContext};\n use super::util::impl_trait_ref_and_oblig;"}, {"sha": "d8ca817ff2bd0314021f627f4f6869d4862f8d39", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -1087,7 +1087,7 @@ pub type Region<'tcx> = &'tcx RegionKind;\n ///\n /// [1]: http://smallcultfollowing.com/babysteps/blog/2013/10/29/intermingled-parameter-lists/\n /// [2]: http://smallcultfollowing.com/babysteps/blog/2013/11/04/intermingled-parameter-lists/\n-/// [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/trait-hrtb.html\n+/// [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/traits/hrtb.html\n #[derive(Clone, PartialEq, Eq, Hash, Copy, RustcEncodable, RustcDecodable, PartialOrd, Ord)]\n pub enum RegionKind {\n     // Region bound in a type or fn declaration which will be"}, {"sha": "4fe9c34c140cbdf8136258728b33931570fdffa0", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -1062,10 +1062,14 @@ define_print! {\n                 TyParam(ref param_ty) => write!(f, \"{}\", param_ty),\n                 TyAdt(def, substs) => cx.parameterized(f, substs, def.did, &[]),\n                 TyDynamic(data, r) => {\n-                    data.print(f, cx)?;\n                     let r = r.print_to_string(cx);\n                     if !r.is_empty() {\n-                        write!(f, \" + {}\", r)\n+                        write!(f, \"(\")?;\n+                    }\n+                    write!(f, \"dyn \")?;\n+                    data.print(f, cx)?;\n+                    if !r.is_empty() {\n+                        write!(f, \" + {})\", r)\n                     } else {\n                         Ok(())\n                     }"}, {"sha": "8bc0b4969b8f985f439e855f79b6919e8648657a", "filename": "src/librustc_borrowck/borrowck/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -3,7 +3,7 @@\n > WARNING: This README is more or less obsolete, and will be removed\n > soon! The new system is described in the [rustc guide].\n \n-[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir-borrowck.html\n+[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir/borrowck.html\n \n This pass has the job of enforcing memory safety. This is a subtle\n topic. This docs aim to explain both the practice and the theory"}, {"sha": "94776f17c7989074aea7cf6b89a75776788d76dd", "filename": "src/librustc_codegen_llvm/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc_codegen_llvm%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc_codegen_llvm%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdiagnostics.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -48,8 +48,3 @@ unsafe { simd_add(i32x2(0, 0), i32x2(1, 2)); } // ok!\n \"##,\n \n }\n-\n-\n-register_diagnostics! {\n-    E0558\n-}"}, {"sha": "b9d6486d9174a9117ca38c11d7aed88c4567fb17", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -540,12 +540,12 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     // ==============\n     /// Finds the breakable scope for a given label. This is used for\n     /// resolving `break` and `continue`.\n-    pub fn find_breakable_scope(&mut self,\n+    pub fn find_breakable_scope(&self,\n                            span: Span,\n                            label: region::Scope)\n-                           -> &mut BreakableScope<'tcx> {\n+                           -> &BreakableScope<'tcx> {\n         // find the loop-scope with the correct id\n-        self.breakable_scopes.iter_mut()\n+        self.breakable_scopes.iter()\n             .rev()\n             .filter(|breakable_scope| breakable_scope.region_scope == label)\n             .next()"}, {"sha": "9b92a8b5e7861edff98293cf2e23de07beee3eb3", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -416,7 +416,6 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             }\n \n             PatKind::Slice(ref prefix, ref slice, ref suffix) => {\n-                let ty = self.tables.node_id_to_type(pat.hir_id);\n                 match ty.sty {\n                     ty::TyRef(_, ty, _) =>\n                         PatternKind::Deref {\n@@ -427,11 +426,12 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                                     pat.span, ty, prefix, slice, suffix))\n                             },\n                         },\n-\n                     ty::TySlice(..) |\n                     ty::TyArray(..) =>\n                         self.slice_or_array_pattern(pat.span, ty, prefix, slice, suffix),\n-\n+                    ty::TyError => { // Avoid ICE\n+                        return Pattern { span: pat.span, ty, kind: Box::new(PatternKind::Wild) };\n+                    }\n                     ref sty =>\n                         span_bug!(\n                             pat.span,\n@@ -441,7 +441,6 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             }\n \n             PatKind::Tuple(ref subpatterns, ddpos) => {\n-                let ty = self.tables.node_id_to_type(pat.hir_id);\n                 match ty.sty {\n                     ty::TyTuple(ref tys) => {\n                         let subpatterns =\n@@ -455,7 +454,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n                         PatternKind::Leaf { subpatterns: subpatterns }\n                     }\n-\n+                    ty::TyError => { // Avoid ICE (#50577)\n+                        return Pattern { span: pat.span, ty, kind: Box::new(PatternKind::Wild) };\n+                    }\n                     ref sty => span_bug!(pat.span, \"unexpected type for tuple pattern: {:?}\", sty),\n                 }\n             }\n@@ -464,6 +465,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 let var_ty = self.tables.node_id_to_type(pat.hir_id);\n                 let region = match var_ty.sty {\n                     ty::TyRef(r, _, _) => Some(r),\n+                    ty::TyError => { // Avoid ICE\n+                        return Pattern { span: pat.span, ty, kind: Box::new(PatternKind::Wild) };\n+                    }\n                     _ => None,\n                 };\n                 let bm = *self.tables.pat_binding_modes().get(pat.hir_id)\n@@ -505,12 +509,8 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 let def = self.tables.qpath_def(qpath, pat.hir_id);\n                 let adt_def = match ty.sty {\n                     ty::TyAdt(adt_def, _) => adt_def,\n-                    ty::TyError => {  // Avoid ICE (#50585)\n-                        return Pattern {\n-                            span: pat.span,\n-                            ty,\n-                            kind: Box::new(PatternKind::Wild),\n-                        };\n+                    ty::TyError => { // Avoid ICE (#50585)\n+                        return Pattern { span: pat.span, ty, kind: Box::new(PatternKind::Wild) };\n                     }\n                     _ => span_bug!(pat.span,\n                                    \"tuple struct pattern not applied to an ADT {:?}\","}, {"sha": "889073f6b4ca96a0ba5a9bfa67522c2176c73ce0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -3846,7 +3846,14 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 }\n \n             }\n-            hir::ExprContinue(_) => { tcx.types.never }\n+            hir::ExprContinue(destination) => {\n+                if let Ok(_) = destination.target_id {\n+                    tcx.types.never\n+                } else {\n+                    // There was an error, make typecheck fail\n+                    tcx.types.err\n+                }\n+            }\n             hir::ExprRet(ref expr_opt) => {\n                 if self.ret_coercion.is_none() {\n                     struct_span_err!(self.tcx.sess, expr.span, E0572,"}, {"sha": "c24e20c5699092189f939316583910f7006afb54", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -1898,11 +1898,18 @@ fn codegen_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> Codegen\n                 }\n             });\n         } else if attr.check_name(\"export_name\") {\n-            if let s @ Some(_) = attr.value_str() {\n-                codegen_fn_attrs.export_name = s;\n+            if let Some(s) = attr.value_str() {\n+                if s.as_str().contains(\"\\0\") {\n+                    // `#[export_name = ...]` will be converted to a null-terminated string,\n+                    // so it may not contain any null characters.\n+                    struct_span_err!(tcx.sess, attr.span, E0648,\n+                                     \"`export_name` may not contain null characters\")\n+                        .emit();\n+                }\n+                codegen_fn_attrs.export_name = Some(s);\n             } else {\n                 struct_span_err!(tcx.sess, attr.span, E0558,\n-                                    \"export_name attribute has invalid format\")\n+                                 \"`export_name` attribute has invalid format\")\n                     .span_label(attr.span, \"did you mean #[export_name=\\\"*\\\"]?\")\n                     .emit();\n             }"}, {"sha": "b0b72256edccf69f75bb139a9c789937b7f97e99", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -3709,7 +3709,7 @@ The `export_name` attribute was malformed.\n Erroneous code example:\n \n ```ignore (error-emitted-at-codegen-which-cannot-be-handled-by-compile_fail)\n-#[export_name] // error: export_name attribute has invalid format\n+#[export_name] // error: `export_name` attribute has invalid format\n pub fn something() {}\n \n fn main() {}\n@@ -4545,6 +4545,15 @@ fn start(_: isize, _: *const *const u8) -> isize where (): Copy {\n ```\n \"##,\n \n+E0648: r##\"\n+`export_name` attributes may not contain null characters (`\\0`).\n+\n+```compile_fail,E0648\n+#[export_name=\"\\0foo\"] // error: `export_name` may not contain null characters\n+pub fn bar() {}\n+```\n+\"##,\n+\n E0689: r##\"\n This error indicates that the numeric value for the method being passed exists\n but the type of the numeric value or binding could not be identified."}, {"sha": "f0c40d1d491e21835828b5ecf4a671d91c729de1", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -9,5 +9,5 @@ path = \"lib.rs\"\n \n [dependencies]\n pulldown-cmark = { version = \"0.1.2\", default-features = false }\n-minifier = \"0.0.11\"\n+minifier = \"0.0.14\"\n tempfile = \"3\""}, {"sha": "130451d07af8649bb188549cb6b2fd27c4d17c2c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 31, "deletions": 12, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -42,6 +42,7 @@ use std::collections::{BTreeMap, HashSet, VecDeque};\n use std::default::Default;\n use std::error;\n use std::fmt::{self, Display, Formatter, Write as FmtWrite};\n+use std::ffi::OsStr;\n use std::fs::{self, File, OpenOptions};\n use std::io::prelude::*;\n use std::io::{self, BufWriter, BufReader};\n@@ -756,10 +757,12 @@ fn write_shared(cx: &Context,\n     // Add all the static files. These may already exist, but we just\n     // overwrite them anyway to make sure that they're fresh and up-to-date.\n \n-    write(cx.dst.join(&format!(\"rustdoc{}.css\", cx.shared.resource_suffix)),\n-          include_bytes!(\"static/rustdoc.css\"))?;\n-    write(cx.dst.join(&format!(\"settings{}.css\", cx.shared.resource_suffix)),\n-          include_bytes!(\"static/settings.css\"))?;\n+    write_minify(cx.dst.join(&format!(\"rustdoc{}.css\", cx.shared.resource_suffix)),\n+                 include_str!(\"static/rustdoc.css\"),\n+                 enable_minification)?;\n+    write_minify(cx.dst.join(&format!(\"settings{}.css\", cx.shared.resource_suffix)),\n+                 include_str!(\"static/settings.css\"),\n+                 enable_minification)?;\n \n     // To avoid \"light.css\" to be overwritten, we'll first run over the received themes and only\n     // then we'll run over the \"official\" styles.\n@@ -781,11 +784,13 @@ fn write_shared(cx: &Context,\n           include_bytes!(\"static/brush.svg\"))?;\n     write(cx.dst.join(&format!(\"wheel{}.svg\", cx.shared.resource_suffix)),\n           include_bytes!(\"static/wheel.svg\"))?;\n-    write(cx.dst.join(&format!(\"light{}.css\", cx.shared.resource_suffix)),\n-          include_bytes!(\"static/themes/light.css\"))?;\n+    write_minify(cx.dst.join(&format!(\"light{}.css\", cx.shared.resource_suffix)),\n+                 include_str!(\"static/themes/light.css\"),\n+                 enable_minification)?;\n     themes.insert(\"light\".to_owned());\n-    write(cx.dst.join(&format!(\"dark{}.css\", cx.shared.resource_suffix)),\n-          include_bytes!(\"static/themes/dark.css\"))?;\n+    write_minify(cx.dst.join(&format!(\"dark{}.css\", cx.shared.resource_suffix)),\n+                 include_str!(\"static/themes/dark.css\"),\n+                 enable_minification)?;\n     themes.insert(\"dark\".to_owned());\n \n     let mut themes: Vec<&String> = themes.iter().collect();\n@@ -857,10 +862,19 @@ themePicker.onblur = handleThemeButtonsBlur;\n \n     if let Some(ref css) = cx.shared.css_file_extension {\n         let out = cx.dst.join(&format!(\"theme{}.css\", cx.shared.resource_suffix));\n-        try_err!(fs::copy(css, out), css);\n+        if !enable_minification {\n+            try_err!(fs::copy(css, out), css);\n+        } else {\n+            let mut f = try_err!(File::open(css), css);\n+            let mut buffer = String::with_capacity(1000);\n+\n+            try_err!(f.read_to_string(&mut buffer), css);\n+            write_minify(out, &buffer, enable_minification)?;\n+        }\n     }\n-    write(cx.dst.join(&format!(\"normalize{}.css\", cx.shared.resource_suffix)),\n-          include_bytes!(\"static/normalize.css\"))?;\n+    write_minify(cx.dst.join(&format!(\"normalize{}.css\", cx.shared.resource_suffix)),\n+                 include_str!(\"static/normalize.css\"),\n+                 enable_minification)?;\n     write(cx.dst.join(\"FiraSans-Regular.woff\"),\n           include_bytes!(\"static/FiraSans-Regular.woff\"))?;\n     write(cx.dst.join(\"FiraSans-Medium.woff\"),\n@@ -1051,7 +1065,12 @@ fn write(dst: PathBuf, contents: &[u8]) -> Result<(), Error> {\n \n fn write_minify(dst: PathBuf, contents: &str, enable_minification: bool) -> Result<(), Error> {\n     if enable_minification {\n-        write(dst, minifier::js::minify(contents).as_bytes())\n+        if dst.extension() == Some(&OsStr::new(\"css\")) {\n+            let res = try_none!(minifier::css::minify(contents).ok(), &dst);\n+            write(dst, res.as_bytes())\n+        } else {\n+            write(dst, minifier::js::minify(contents).as_bytes())\n+        }\n     } else {\n         write(dst, contents.as_bytes())\n     }"}, {"sha": "c1cc36f3b419a2364eeef8c4df4d608e075d1a06", "filename": "src/libstd/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -43,7 +43,7 @@ impl<T: Generator<Yield = ()>> !Unpin for GenFuture<T> {}\n impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n     type Output = T::Return;\n     fn poll(self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output> {\n-        set_task_cx(cx, || match unsafe { PinMut::get_mut(self).0.resume() } {\n+        set_task_cx(cx, || match unsafe { PinMut::get_mut_unchecked(self).0.resume() } {\n             GeneratorState::Yielded(()) => Poll::Pending,\n             GeneratorState::Complete(x) => Poll::Ready(x),\n         })"}, {"sha": "75f038407c12714d52729f1d29e77014282e04ba", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -38,10 +38,13 @@\n /// The multi-argument form of this macro panics with a string and has the\n /// [`format!`] syntax for building a string.\n ///\n+/// See also the macro [`compile_error!`], for raising errors during compilation.\n+///\n /// [runwrap]: ../std/result/enum.Result.html#method.unwrap\n /// [`Option`]: ../std/option/enum.Option.html#method.unwrap\n /// [`Result`]: ../std/result/enum.Result.html\n /// [`format!`]: ../std/macro.format.html\n+/// [`compile_error!`]: ../std/macro.compile_error.html\n /// [book]: ../book/second-edition/ch09-01-unrecoverable-errors-with-panic.html\n ///\n /// # Current implementation\n@@ -305,13 +308,16 @@ pub mod builtin {\n     /// Unconditionally causes compilation to fail with the given error message when encountered.\n     ///\n     /// This macro should be used when a crate uses a conditional compilation strategy to provide\n-    /// better error messages for erroneous conditions.\n+    /// better error messages for erroneous conditions. It's the compiler-level form of [`panic!`],\n+    /// which emits an error at *runtime*, rather than during compilation.\n     ///\n     /// # Examples\n     ///\n     /// Two such examples are macros and `#[cfg]` environments.\n     ///\n-    /// Emit better compiler error if a macro is passed invalid values.\n+    /// Emit better compiler error if a macro is passed invalid values. Without the final branch,\n+    /// the compiler would still emit an error, but the error's message would not mention the two\n+    /// valid values.\n     ///\n     /// ```compile_fail\n     /// macro_rules! give_me_foo_or_bar {\n@@ -332,6 +338,8 @@ pub mod builtin {\n     /// #[cfg(not(any(feature = \"foo\", feature = \"bar\")))]\n     /// compile_error!(\"Either feature \\\"foo\\\" or \\\"bar\\\" must be enabled for this crate.\")\n     /// ```\n+    ///\n+    /// [`panic!`]: ../std/macro.panic.html\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[macro_export]\n     macro_rules! compile_error {"}, {"sha": "451420ae88ad8179f1ec1f37efaad1a458bf13fb", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -327,14 +327,9 @@ impl<T: fmt::Debug> fmt::Debug for AssertUnwindSafe<T> {\n impl<'a, F: Future> Future for AssertUnwindSafe<F> {\n     type Output = F::Output;\n \n-    fn poll(mut self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output> {\n-        unsafe {\n-            let pinned_field = PinMut::new_unchecked(\n-                &mut PinMut::get_mut(self.reborrow()).0\n-            );\n-\n-            pinned_field.poll(cx)\n-        }\n+    fn poll(self: PinMut<Self>, cx: &mut task::Context) -> Poll<Self::Output> {\n+        let pinned_field = unsafe { PinMut::map_unchecked(self, |x| &mut x.0) };\n+        pinned_field.poll(cx)\n     }\n }\n "}, {"sha": "c44db3b10722494e4e925987dff53a206bd378b8", "filename": "src/libstd/sys/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibstd%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibstd%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fmod.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -67,6 +67,7 @@ cfg_if! {\n         // (missing things in `libc` which is empty) so just omit everything\n         // with an empty module\n         #[unstable(issue = \"0\", feature = \"std_internals\")]\n+        #[allow(missing_docs)]\n         pub mod unix_ext {}\n     } else {\n         // On other platforms like Windows document the bare bones of unix\n@@ -80,11 +81,13 @@ cfg_if! {\n cfg_if! {\n     if #[cfg(windows)] {\n         // On windows we'll just be documenting what's already available\n+        #[allow(missing_docs)]\n         pub use self::ext as windows_ext;\n     } else if #[cfg(any(target_os = \"cloudabi\", target_arch = \"wasm32\"))] {\n         // On CloudABI and wasm right now the shim below doesn't compile, so\n         // just omit it\n         #[unstable(issue = \"0\", feature = \"std_internals\")]\n+        #[allow(missing_docs)]\n         pub mod windows_ext {}\n     } else {\n         // On all other platforms (aka linux/osx/etc) then pull in a \"minimal\""}, {"sha": "662a76d6725a68d7bb3493c7229330d446e1dd80", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -803,7 +803,7 @@ pub fn stat(p: &Path) -> io::Result<FileAttr> {\n     let p = cstr(p)?;\n     let mut stat: stat64 = unsafe { mem::zeroed() };\n     cvt(unsafe {\n-        stat64(p.as_ptr(), &mut stat as *mut _ as *mut _)\n+        stat64(p.as_ptr(), &mut stat)\n     })?;\n     Ok(FileAttr { stat: stat })\n }\n@@ -812,7 +812,7 @@ pub fn lstat(p: &Path) -> io::Result<FileAttr> {\n     let p = cstr(p)?;\n     let mut stat: stat64 = unsafe { mem::zeroed() };\n     cvt(unsafe {\n-        lstat64(p.as_ptr(), &mut stat as *mut _ as *mut _)\n+        lstat64(p.as_ptr(), &mut stat)\n     })?;\n     Ok(FileAttr { stat: stat })\n }"}, {"sha": "3365d5954033fd6ea73e95461eff85ab9f93d793", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -540,7 +540,7 @@ impl CompilerDesugaringKind {\n             CompilerDesugaringKind::DotFill => \"...\",\n             CompilerDesugaringKind::QuestionMark => \"?\",\n             CompilerDesugaringKind::Catch => \"do catch\",\n-            CompilerDesugaringKind::ExistentialReturnType => \"existental type\",\n+            CompilerDesugaringKind::ExistentialReturnType => \"existential type\",\n         })\n     }\n }"}, {"sha": "7c76cf475d29afe415b27502c5451252a11eb354", "filename": "src/test/compile-fail/cross-borrow-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -18,6 +18,6 @@ impl Trait for Foo {}\n pub fn main() {\n     let x: Box<Trait> = Box::new(Foo);\n     let _y: &Trait = x; //~ ERROR E0308\n-                        //~| expected type `&Trait`\n-                        //~| found type `std::boxed::Box<Trait>`\n+                        //~| expected type `&dyn Trait`\n+                        //~| found type `std::boxed::Box<dyn Trait>`\n }"}, {"sha": "b5acdc12ca048679c0f8ebe259a77995c66e02a0", "filename": "src/test/compile-fail/destructure-trait-ref.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -33,23 +33,23 @@ fn main() {\n     let &&x = &&(&1isize as &T);\n \n     // n == m\n-    let &x = &1isize as &T;      //~ ERROR type `&T` cannot be dereferenced\n-    let &&x = &(&1isize as &T);  //~ ERROR type `&T` cannot be dereferenced\n-    let box x = box 1isize as Box<T>; //~ ERROR type `std::boxed::Box<T>` cannot be dereferenced\n+    let &x = &1isize as &T;      //~ ERROR type `&dyn T` cannot be dereferenced\n+    let &&x = &(&1isize as &T);  //~ ERROR type `&dyn T` cannot be dereferenced\n+    let box x = box 1isize as Box<T>; //~ ERROR type `std::boxed::Box<dyn T>` cannot be dereferenced\n \n     // n > m\n     let &&x = &1isize as &T;\n     //~^ ERROR mismatched types\n-    //~| expected type `T`\n+    //~| expected type `dyn T`\n     //~| found type `&_`\n     //~| expected trait T, found reference\n     let &&&x = &(&1isize as &T);\n     //~^ ERROR mismatched types\n-    //~| expected type `T`\n+    //~| expected type `dyn T`\n     //~| found type `&_`\n     //~| expected trait T, found reference\n     let box box x = box 1isize as Box<T>;\n     //~^ ERROR mismatched types\n-    //~| expected type `T`\n+    //~| expected type `dyn T`\n     //~| found type `std::boxed::Box<_>`\n }"}, {"sha": "2a209a2959bfd7bf08c84b4338d92a636de68c28", "filename": "src/test/compile-fail/dst-bad-assign-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-3.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -42,7 +42,7 @@ pub fn main() {\n     let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.2 = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected type `ToBar`\n+    //~| expected type `dyn ToBar`\n     //~| found type `Bar1`\n     //~| expected trait ToBar, found struct `Bar1`\n     //~| ERROR the size for value values of type"}, {"sha": "e28586c4755e872320a026ee9b195ab5b623e1d6", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -44,7 +44,7 @@ pub fn main() {\n     let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected type `ToBar`\n+    //~| expected type `dyn ToBar`\n     //~| found type `Bar1`\n     //~| expected trait ToBar, found struct `Bar1`\n     //~| ERROR the size for value values of type"}, {"sha": "56d64d77ee2581bccf1b10b293e23d3218defdd4", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -16,15 +16,15 @@ fn main() {\n     let _: () = (box |_: isize| {}) as Box<FnOnce(isize)>;\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n-    //~| found type `std::boxed::Box<std::ops::FnOnce(isize)>`\n+    //~| found type `std::boxed::Box<dyn std::ops::FnOnce(isize)>`\n     let _: () = (box |_: isize, isize| {}) as Box<Fn(isize, isize)>;\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n-    //~| found type `std::boxed::Box<std::ops::Fn(isize, isize)>`\n+    //~| found type `std::boxed::Box<dyn std::ops::Fn(isize, isize)>`\n     let _: () = (box || -> isize { unimplemented!() }) as Box<FnMut() -> isize>;\n     //~^ ERROR mismatched types\n     //~| expected type `()`\n-    //~| found type `std::boxed::Box<std::ops::FnMut() -> isize>`\n+    //~| found type `std::boxed::Box<dyn std::ops::FnMut() -> isize>`\n \n     needs_fn(1);\n     //~^ ERROR : std::ops::Fn<(isize,)>`"}, {"sha": "f1fd617717a5ee5af533bf7bf3b51c44259688d2", "filename": "src/test/compile-fail/issue-13033.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fissue-13033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fissue-13033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13033.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -17,8 +17,8 @@ struct Baz;\n impl Foo for Baz {\n     fn bar(&mut self, other: &Foo) {}\n     //~^ ERROR method `bar` has an incompatible type for trait\n-    //~| expected type `fn(&mut Baz, &mut Foo)`\n-    //~| found type `fn(&mut Baz, &Foo)`\n+    //~| expected type `fn(&mut Baz, &mut dyn Foo)`\n+    //~| found type `fn(&mut Baz, &dyn Foo)`\n }\n \n fn main() {}"}, {"sha": "5282ce4bb8897dd43d09c6a61416193fe6b752e1", "filename": "src/test/compile-fail/issue-20939.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fissue-20939.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fissue-20939.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20939.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -11,6 +11,6 @@\n trait Foo {}\n \n impl<'a> Foo for Foo+'a {}\n-//~^ ERROR the object type `Foo + 'a` automatically implements the trait `Foo`\n+//~^ ERROR the object type `(dyn Foo + 'a)` automatically implements the trait `Foo`\n \n fn main() {}"}, {"sha": "24db822f89ca0fc91cb443602836b7630b99712e", "filename": "src/test/compile-fail/issue-32963.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32963.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -17,5 +17,5 @@ fn size_of_copy<T: Copy+?Sized>() -> usize { mem::size_of::<T>() }\n fn main() {\n     size_of_copy::<Misc+Copy>();\n     //~^ ERROR only auto traits can be used as additional traits in a trait object\n-    //~| ERROR the trait bound `Misc: std::marker::Copy` is not satisfied\n+    //~| ERROR the trait bound `dyn Misc: std::marker::Copy` is not satisfied\n }"}, {"sha": "0509a4387bae415f5999a640f5f55f477edd0626", "filename": "src/test/compile-fail/issue-41139.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fissue-41139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fissue-41139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41139.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -14,5 +14,5 @@ fn get_function<'a>() -> &'a Fn() -> Trait { panic!(\"\") }\n \n fn main() {\n     let t : &Trait = &get_function()();\n-    //~^ ERROR cannot move a value of type Trait + 'static\n+    //~^ ERROR cannot move a value of type (dyn Trait + 'static)\n }"}, {"sha": "9b49886961d7b12b1655d172748e7c0c14521ba8", "filename": "src/test/compile-fail/issue-5153.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fissue-5153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fissue-5153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5153.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -18,5 +18,5 @@ impl Foo for isize {\n \n fn main() {\n     (&5isize as &Foo).foo();\n-    //~^ ERROR: no method named `foo` found for type `&Foo` in the current scope\n+    //~^ ERROR: no method named `foo` found for type `&dyn Foo` in the current scope\n }"}, {"sha": "82b97878549032dff3dc57a10051f0f7766d2628", "filename": "src/test/compile-fail/kindck-send-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -20,12 +20,12 @@ trait Message : Send { }\n \n fn object_ref_with_static_bound_not_ok() {\n     assert_send::<&'static (Dummy+'static)>();\n-    //~^ ERROR `Dummy + 'static` cannot be shared between threads safely [E0277]\n+    //~^ ERROR `(dyn Dummy + 'static)` cannot be shared between threads safely [E0277]\n }\n \n fn box_object_with_no_bound_not_ok<'a>() {\n     assert_send::<Box<Dummy>>();\n-    //~^ ERROR `Dummy` cannot be sent between threads safely\n+    //~^ ERROR `dyn Dummy` cannot be sent between threads safely\n }\n \n fn object_with_send_bound_ok() {"}, {"sha": "853630aa41628a90f2c98d35dab6ee746a328d01", "filename": "src/test/compile-fail/kindck-send-object1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -18,7 +18,7 @@ trait Dummy { }\n // careful with object types, who knows what they close over...\n fn test51<'a>() {\n     assert_send::<&'a Dummy>();\n-    //~^ ERROR `Dummy + 'a` cannot be shared between threads safely [E0277]\n+    //~^ ERROR `(dyn Dummy + 'a)` cannot be shared between threads safely [E0277]\n }\n fn test52<'a>() {\n     assert_send::<&'a (Dummy+Sync)>();\n@@ -37,7 +37,7 @@ fn test61() {\n // them not ok\n fn test_71<'a>() {\n     assert_send::<Box<Dummy+'a>>();\n-    //~^ ERROR `Dummy + 'a` cannot be sent between threads safely\n+    //~^ ERROR `(dyn Dummy + 'a)` cannot be sent between threads safely\n }\n \n fn main() { }"}, {"sha": "0265f888e7c317411a728d9e0021bc80add29c0d", "filename": "src/test/compile-fail/kindck-send-object2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -15,12 +15,12 @@ trait Dummy { }\n \n fn test50() {\n     assert_send::<&'static Dummy>();\n-    //~^ ERROR `Dummy + 'static` cannot be shared between threads safely [E0277]\n+    //~^ ERROR `(dyn Dummy + 'static)` cannot be shared between threads safely [E0277]\n }\n \n fn test53() {\n     assert_send::<Box<Dummy>>();\n-    //~^ ERROR `Dummy` cannot be sent between threads safely\n+    //~^ ERROR `dyn Dummy` cannot be sent between threads safely\n }\n \n // ...unless they are properly bounded"}, {"sha": "e8ff9e817af2ca9d67bda5eda4bb9d4a2731fea1", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -25,5 +25,5 @@ fn main() {\n     let x: Box<HashMap<isize, isize>> = box HashMap::new();\n     let x: Box<Map<isize, isize>> = x;\n     let y: Box<Map<usize, isize>> = Box::new(x);\n-    //~^ ERROR `std::boxed::Box<Map<isize, isize>>: Map<usize, isize>` is not satisfied\n+    //~^ ERROR `std::boxed::Box<dyn Map<isize, isize>>: Map<usize, isize>` is not satisfied\n }"}, {"sha": "2a6e148ca791157c491d92fecbcfe9e1951b0708", "filename": "src/test/compile-fail/non-interger-atomic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-interger-atomic.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -61,22 +61,22 @@ pub unsafe fn test_Foo_cxchg(p: &mut Foo, v: Foo) {\n \n pub unsafe fn test_Bar_load(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_load(p);\n-    //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n+    //~^ ERROR expected basic integer type, found `&dyn std::ops::Fn()`\n }\n \n pub unsafe fn test_Bar_store(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_store(p, v);\n-    //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n+    //~^ ERROR expected basic integer type, found `&dyn std::ops::Fn()`\n }\n \n pub unsafe fn test_Bar_xchg(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_xchg(p, v);\n-    //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n+    //~^ ERROR expected basic integer type, found `&dyn std::ops::Fn()`\n }\n \n pub unsafe fn test_Bar_cxchg(p: &mut Bar, v: Bar) {\n     intrinsics::atomic_cxchg(p, v, v);\n-    //~^ ERROR expected basic integer type, found `&std::ops::Fn()`\n+    //~^ ERROR expected basic integer type, found `&dyn std::ops::Fn()`\n }\n \n pub unsafe fn test_Quux_load(p: &mut Quux, v: Quux) {"}, {"sha": "30f8d5e2f45698c5f37d1dd2b8b33d3f1c59c88a", "filename": "src/test/compile-fail/object-does-not-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-does-not-impl-trait.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -14,5 +14,5 @@\n trait Foo {}\n fn take_foo<F:Foo>(f: F) {}\n fn take_object(f: Box<Foo>) { take_foo(f); }\n-//~^ ERROR `std::boxed::Box<Foo>: Foo` is not satisfied\n+//~^ ERROR `std::boxed::Box<dyn Foo>: Foo` is not satisfied\n fn main() {}"}, {"sha": "e575bbb6ceab102fe8f29e008412915a22962641", "filename": "src/test/compile-fail/object-safety-by-value-self-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-safety-by-value-self-use.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -22,7 +22,7 @@ trait Baz {\n }\n \n fn use_bar(t: Box<Bar>) {\n-    t.bar() //~ ERROR cannot move a value of type Bar\n+    t.bar() //~ ERROR cannot move a value of type (dyn Bar + 'static)\n }\n \n fn main() { }"}, {"sha": "6019369aa2ebb5111d556194a70186b9974e09c1", "filename": "src/test/compile-fail/privacy/associated-item-privacy-type-binding.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-type-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-type-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Fassociated-item-privacy-type-binding.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -19,19 +19,19 @@ mod priv_trait {\n \n     pub macro mac1() {\n         let _: Box<PubTr<AssocTy = u8>>;\n-        //~^ ERROR type `priv_trait::PubTr<AssocTy=u8> + '<empty>` is private\n-        //~| ERROR type `priv_trait::PubTr<AssocTy=u8> + '<empty>` is private\n+        //~^ ERROR type `(dyn priv_trait::PubTr<AssocTy=u8> + '<empty>)` is private\n+        //~| ERROR type `(dyn priv_trait::PubTr<AssocTy=u8> + '<empty>)` is private\n         type InSignatureTy2 = Box<PubTr<AssocTy = u8>>;\n-        //~^ ERROR type `priv_trait::PubTr<AssocTy=u8> + 'static` is private\n+        //~^ ERROR type `(dyn priv_trait::PubTr<AssocTy=u8> + 'static)` is private\n         trait InSignatureTr2: PubTr<AssocTy = u8> {}\n         //~^ ERROR trait `priv_trait::PrivTr` is private\n     }\n     pub macro mac2() {\n         let _: Box<PrivTr<AssocTy = u8>>;\n-        //~^ ERROR type `priv_trait::PrivTr<AssocTy=u8> + '<empty>` is private\n-        //~| ERROR type `priv_trait::PrivTr<AssocTy=u8> + '<empty>` is private\n+        //~^ ERROR type `(dyn priv_trait::PrivTr<AssocTy=u8> + '<empty>)` is private\n+        //~| ERROR type `(dyn priv_trait::PrivTr<AssocTy=u8> + '<empty>)` is private\n         type InSignatureTy1 = Box<PrivTr<AssocTy = u8>>;\n-        //~^ ERROR type `priv_trait::PrivTr<AssocTy=u8> + 'static` is private\n+        //~^ ERROR type `(dyn priv_trait::PrivTr<AssocTy=u8> + 'static)` is private\n         trait InSignatureTr1: PrivTr<AssocTy = u8> {}\n         //~^ ERROR trait `priv_trait::PrivTr` is private\n     }"}, {"sha": "3ca8b1eb2ed3a3d61b36484b2deb13d96a512d41", "filename": "src/test/compile-fail/private-inferred-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -129,7 +129,7 @@ fn main() {\n     m::leak_anon2(); //~ ERROR type `m::Priv` is private\n     m::leak_anon3(); //~ ERROR type `m::Priv` is private\n \n-    m::leak_dyn1(); //~ ERROR type `m::Trait + 'static` is private\n+    m::leak_dyn1(); //~ ERROR type `(dyn m::Trait + 'static)` is private\n     m::leak_dyn2(); //~ ERROR type `m::Priv` is private\n     m::leak_dyn3(); //~ ERROR type `m::Priv` is private\n "}, {"sha": "f8e4f0d596e20d3a005514552b5ea0eecaa42e64", "filename": "src/test/compile-fail/trait-item-privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Ftrait-item-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Ftrait-item-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-item-privacy.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -110,9 +110,9 @@ fn check_assoc_const() {\n     // A, B, C are resolved as inherent items, their traits don't need to be in scope\n     C::A; //~ ERROR associated constant `A` is private\n           //~^ ERROR the trait `assoc_const::C` cannot be made into an object\n-          //~| ERROR the trait bound `assoc_const::C: assoc_const::A` is not satisfied\n+          //~| ERROR the trait bound `dyn assoc_const::C: assoc_const::A` is not satisfied\n     C::B; // ERROR the trait `assoc_const::C` cannot be made into an object\n-          //~^ ERROR the trait bound `assoc_const::C: assoc_const::B` is not satisfied\n+          //~^ ERROR the trait bound `dyn assoc_const::C: assoc_const::B` is not satisfied\n     C::C; // OK\n }\n "}, {"sha": "559871af72ed630e8b0e5d32f38930a077d974e8", "filename": "src/test/compile-fail/traits-repeated-supertrait-ambig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Ftraits-repeated-supertrait-ambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Ftraits-repeated-supertrait-ambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-repeated-supertrait-ambig.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -33,15 +33,15 @@ impl CompareTo<u64> for i64 {\n impl CompareToInts for i64 { }\n \n fn with_obj(c: &CompareToInts) -> bool {\n-    c.same_as(22) //~ ERROR `CompareToInts: CompareTo<i32>` is not satisfied\n+    c.same_as(22) //~ ERROR `dyn CompareToInts: CompareTo<i32>` is not satisfied\n }\n \n fn with_trait<C:CompareToInts>(c: &C) -> bool {\n     c.same_as(22) //~ ERROR `C: CompareTo<i32>` is not satisfied\n }\n \n fn with_ufcs1<C:CompareToInts>(c: &C) -> bool {\n-    CompareToInts::same_as(c, 22) //~ ERROR `CompareToInts: CompareTo<i32>` is not satisfied\n+    CompareToInts::same_as(c, 22) //~ ERROR `dyn CompareToInts: CompareTo<i32>` is not satisfied\n }\n \n fn with_ufcs2<C:CompareToInts>(c: &C) -> bool {"}, {"sha": "3f2bd2ffabf4bad00cd416e10feec06f5092466d", "filename": "src/test/compile-fail/trivial_casts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrivial_casts.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -59,25 +59,25 @@ pub fn main() {\n \n     // unsize trait\n     let x: &Bar = &Bar;\n-    let _ = x as &Foo; //~ERROR trivial cast: `&Bar` as `&Foo`\n-    let _ = x as *const Foo; //~ERROR trivial cast: `&Bar` as `*const Foo`\n+    let _ = x as &Foo; //~ERROR trivial cast: `&Bar` as `&dyn Foo`\n+    let _ = x as *const Foo; //~ERROR trivial cast: `&Bar` as `*const dyn Foo`\n     let _: &Foo = x;\n     let _: *const Foo = x;\n \n     let x: &mut Bar = &mut Bar;\n-    let _ = x as &mut Foo; //~ERROR trivial cast: `&mut Bar` as `&mut Foo`\n-    let _ = x as *mut Foo; //~ERROR trivial cast: `&mut Bar` as `*mut Foo`\n+    let _ = x as &mut Foo; //~ERROR trivial cast: `&mut Bar` as `&mut dyn Foo`\n+    let _ = x as *mut Foo; //~ERROR trivial cast: `&mut Bar` as `*mut dyn Foo`\n     let _: &mut Foo = x;\n     let _: *mut Foo = x;\n \n     let x: Box<Bar> = Box::new(Bar);\n-    let _ = x as Box<Foo>; //~ERROR trivial cast: `std::boxed::Box<Bar>` as `std::boxed::Box<Foo>`\n+    let _ = x as Box<Foo>; //~ERROR `std::boxed::Box<Bar>` as `std::boxed::Box<dyn Foo>`\n     let x: Box<Bar> = Box::new(Bar);\n     let _: Box<Foo> = x;\n \n     // functions\n     fn baz(_x: i32) {}\n-    let _ = &baz as &Fn(i32); //~ERROR trivial cast: `&fn(i32) {main::baz}` as `&std::ops::Fn(i32)`\n+    let _ = &baz as &Fn(i32); //~ERROR `&fn(i32) {main::baz}` as `&dyn std::ops::Fn(i32)`\n     let _: &Fn(i32) = &baz;\n     let x = |_x: i32| {};\n     let _ = &x as &Fn(i32); //~ERROR trivial cast"}, {"sha": "7e93f626cfcfb38ef65c00769270576ecb249950", "filename": "src/test/compile-fail/type-mismatch-same-crate-name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-same-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-same-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-same-crate-name.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -33,7 +33,7 @@ fn main() {\n         //~^ ERROR mismatched types\n         //~| Perhaps two different versions of crate `crate_a1`\n         //~| expected trait `main::a::Bar`\n-        //~| expected type `std::boxed::Box<main::a::Bar + 'static>`\n-        //~| found type `std::boxed::Box<main::a::Bar>`\n+        //~| expected type `std::boxed::Box<(dyn main::a::Bar + 'static)>`\n+        //~| found type `std::boxed::Box<dyn main::a::Bar>`\n     }\n }"}, {"sha": "08988353886451992f644ceac9ab7dcb2ca2a85c", "filename": "src/test/compile-fail/type-parameter-defaults-referencing-Self-ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-defaults-referencing-Self-ppaux.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -23,5 +23,5 @@ fn main() {\n     let x: i32 = 5;\n     let y = x as MyAdd<i32>;\n     //~^ ERROR E0038\n-    //~| ERROR cast to unsized type: `i32` as `MyAdd<i32>`\n+    //~| ERROR cast to unsized type: `i32` as `dyn MyAdd<i32>`\n }"}, {"sha": "30ba14c1bab3af49902b8133b503418a14552e8f", "filename": "src/test/mir-opt/end_region_6.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_6.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -68,17 +68,17 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // fn main::{{closure}}(_1: [closure@NodeId(22) d:&'19s D]) -> i32 {\n //     let mut _0: i32;\n //     ...\n-//     let _2: &'15_0rs D;\n+//     let _2: &'16_0rs D;\n //     ...\n //     let mut _3: i32;\n //     bb0: {\n //         StorageLive(_2);\n-//         _2 = &'15_0rs (*(_1.0: &'19s D));\n+//         _2 = &'16_0rs (*(_1.0: &'19s D));\n //         StorageLive(_3);\n //         _3 = ((*_2).0: i32);\n //         _0 = move _3;\n //         StorageDead(_3);\n-//         EndRegion('15_0rs);\n+//         EndRegion('16_0rs);\n //         StorageDead(_2);\n //         return;\n //     }"}, {"sha": "6d6afa25ae30e4c788b424de4907026cb9db1493", "filename": "src/test/mir-opt/end_region_7.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_7.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -76,17 +76,17 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n // fn main::{{closure}}(_1: [closure@NodeId(22) d:D]) -> i32 {\n //     let mut _0: i32;\n //     ...\n-//     let _2: &'15_0rs D;\n+//     let _2: &'16_0rs D;\n //     ...\n //     let mut _3: i32;\n //     bb0: {\n //         StorageLive(_2);\n-//         _2 = &'15_0rs (_1.0: D);\n+//         _2 = &'16_0rs (_1.0: D);\n //         StorageLive(_3);\n //         _3 = ((*_2).0: i32);\n //         _0 = move _3;\n //         StorageDead(_3);\n-//         EndRegion('15_0rs);\n+//         EndRegion('16_0rs);\n //         StorageDead(_2);\n //         drop(_1) -> [return: bb2, unwind: bb1];\n //     }"}, {"sha": "c331276aade7756857cef58b821cff228c4b0222", "filename": "src/test/mir-opt/validate_1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_1.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -64,14 +64,14 @@ fn main() {\n //     bb0: {\n //         Validate(Acquire, [_1: &ReFree(DefId(0/1:11 ~ validate_1[317d]::main[0]::{{closure}}[0]), BrEnv) [closure@NodeId(50)], _2: &ReFree(DefId(0/1:11 ~ validate_1[317d]::main[0]::{{closure}}[0]), BrAnon(0)) mut i32]);\n //         StorageLive(_3);\n-//         Validate(Suspend(ReScope(Remainder(BlockRemainder { block: ItemLocalId(22), first_statement_index: 0 }))), [(*_2): i32]);\n+//         Validate(Suspend(ReScope(Remainder(BlockRemainder { block: ItemLocalId(25), first_statement_index: 0 }))), [(*_2): i32]);\n //         _3 = &ReErased (*_2);\n-//         Validate(Acquire, [(*_3): i32/ReScope(Remainder(BlockRemainder { block: ItemLocalId(22), first_statement_index: 0 })) (imm)]);\n+//         Validate(Acquire, [(*_3): i32/ReScope(Remainder(BlockRemainder { block: ItemLocalId(25), first_statement_index: 0 })) (imm)]);\n //         StorageLive(_4);\n //         _4 = (*_3);\n //         _0 = move _4;\n //         StorageDead(_4);\n-//         EndRegion(ReScope(Remainder(BlockRemainder { block: ItemLocalId(22), first_statement_index: 0 })));\n+//         EndRegion(ReScope(Remainder(BlockRemainder { block: ItemLocalId(25), first_statement_index: 0 })));\n //         StorageDead(_3);\n //         return;\n //     }"}, {"sha": "b4d4479bab94a62eeed89817efd827950a8b72ce", "filename": "src/test/mir-opt/validate_5.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fvalidate_5.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -53,12 +53,12 @@ fn main() {\n //         StorageLive(_3);\n //         StorageLive(_4);\n //         StorageLive(_5);\n-//         Validate(Suspend(ReScope(Node(ItemLocalId(9)))), [(*_2): i32]);\n+//         Validate(Suspend(ReScope(Node(ItemLocalId(12)))), [(*_2): i32]);\n //         _5 = &ReErased mut (*_2);\n-//         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(9)))]);\n+//         Validate(Acquire, [(*_5): i32/ReScope(Node(ItemLocalId(12)))]);\n //         _4 = move _5 as *mut i32 (Misc);\n //         _3 = move _4;\n-//         EndRegion(ReScope(Node(ItemLocalId(9))));\n+//         EndRegion(ReScope(Node(ItemLocalId(12))));\n //         StorageDead(_4);\n //         StorageDead(_5);\n //         Validate(Release, [_0: bool, _3: *mut i32]);"}, {"sha": "862439e21f4f3737743737ac08e6ab66dcc36ade", "filename": "src/test/run-pass/issue-21058.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21058.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -26,5 +26,5 @@ fn main() {\n         std::intrinsics::type_name::<NT>(),\n         // DST\n         std::intrinsics::type_name::<DST>()\n-    )}, (\"[u8]\", \"str\", \"std::marker::Send\", \"NT\", \"DST\"));\n+    )}, (\"[u8]\", \"str\", \"dyn std::marker::Send\", \"NT\", \"DST\"));\n }"}, {"sha": "809d111d74e65e2ac921756ffcadb05b68e4fae8", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -74,7 +74,7 @@ error[E0631]: type mismatch in closure arguments\n LL |     g1(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n-   |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>) -> _`\n+   |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>) -> _`\n    |\n note: required by `g1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:33:1\n@@ -102,7 +102,7 @@ error[E0631]: type mismatch in closure arguments\n LL |     g3(|_: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n-   |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<for<'r> std::ops::Fn(&'r ()) + 'static>) -> _`\n+   |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n    |\n note: required by `g3`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:35:1\n@@ -130,7 +130,7 @@ error[E0631]: type mismatch in closure arguments\n LL |     h1(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n-   |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<for<'t0> std::ops::Fn(&'t0 ()) + 'static>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n+   |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<(dyn for<'t0> std::ops::Fn(&'t0 ()) + 'static)>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n    |\n note: required by `h1`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:39:1\n@@ -144,7 +144,7 @@ error[E0631]: type mismatch in closure arguments\n LL |     h2(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n-   |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n+   |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n    |\n note: required by `h2`\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:40:1"}, {"sha": "ec9e65fc4c62d3fb8717c1886e4a5d13bfdf4a76", "filename": "src/test/ui/arbitrary-self-types-not-object-safe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farbitrary-self-types-not-object-safe.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -13,7 +13,7 @@ LL |     let x = Box::new(5usize) as Box<Foo>;\n    |             ^^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n    = note: method `foo` has a non-standard `self` type\n-   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<Foo>>` for `std::boxed::Box<usize>`\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Foo>>` for `std::boxed::Box<usize>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1e871d472842097a4df8383d24716837ed788c2b", "filename": "src/test/ui/cast-to-unsized-trait-object-suggestion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast-to-unsized-trait-object-suggestion.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -1,12 +1,12 @@\n-error[E0620]: cast to unsized type: `&{integer}` as `std::marker::Send`\n+error[E0620]: cast to unsized type: `&{integer}` as `dyn std::marker::Send`\n   --> $DIR/cast-to-unsized-trait-object-suggestion.rs:12:5\n    |\n LL |     &1 as Send; //~ ERROR cast to unsized\n    |     ^^^^^^----\n    |           |\n    |           help: try casting to a reference instead: `&Send`\n \n-error[E0620]: cast to unsized type: `std::boxed::Box<{integer}>` as `std::marker::Send`\n+error[E0620]: cast to unsized type: `std::boxed::Box<{integer}>` as `dyn std::marker::Send`\n   --> $DIR/cast-to-unsized-trait-object-suggestion.rs:13:5\n    |\n LL |     Box::new(1) as Send; //~ ERROR cast to unsized"}, {"sha": "2e99921956ab295b1f89dc4bdfe798b7d0bb39aa", "filename": "src/test/ui/closure-array-break-length.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fclosure-array-break-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fclosure-array-break-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-array-break-length.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    |_: [_; continue]| {}; //~ ERROR: `continue` outside of loop\n+\n+    while |_: [_; continue]| {} {} //~ ERROR: `break` or `continue` with no label\n+\n+    while |_: [_; break]| {} {} //~ ERROR: `break` or `continue` with no label\n+}"}, {"sha": "139153992e27402d8a1fd1636ceaff4cd17c17bd", "filename": "src/test/ui/closure-array-break-length.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fclosure-array-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fclosure-array-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-array-break-length.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -0,0 +1,22 @@\n+error[E0268]: `continue` outside of loop\n+  --> $DIR/closure-array-break-length.rs:12:13\n+   |\n+LL |     |_: [_; continue]| {}; //~ ERROR: `continue` outside of loop\n+   |             ^^^^^^^^ cannot break outside of a loop\n+\n+error[E0590]: `break` or `continue` with no label in the condition of a `while` loop\n+  --> $DIR/closure-array-break-length.rs:14:19\n+   |\n+LL |     while |_: [_; continue]| {} {} //~ ERROR: `break` or `continue` with no label\n+   |                   ^^^^^^^^ unlabeled `continue` in the condition of a `while` loop\n+\n+error[E0590]: `break` or `continue` with no label in the condition of a `while` loop\n+  --> $DIR/closure-array-break-length.rs:16:19\n+   |\n+LL |     while |_: [_; break]| {} {} //~ ERROR: `break` or `continue` with no label\n+   |                   ^^^^^ unlabeled `break` in the condition of a `while` loop\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0268, E0590.\n+For more information about an error, try `rustc --explain E0268`."}, {"sha": "d6fc5391ba83111c1f1c3f55461d65b3e99951dc", "filename": "src/test/ui/const-unsized.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fconst-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fconst-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-unsized.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: the size for value values of type `std::fmt::Debug + std::marker::Sync + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:13:29\n    |\n LL | const CONST_0: Debug+Sync = *(&0 as &(Debug+Sync));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Sync + 'static`\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: constant expressions must have a statically known size\n \n@@ -18,13 +18,13 @@ LL | const CONST_FOO: str = *\"foo\";\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: constant expressions must have a statically known size\n \n-error[E0277]: the size for value values of type `std::fmt::Debug + std::marker::Sync + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn std::fmt::Debug + std::marker::Sync + 'static)` cannot be known at compilation time\n   --> $DIR/const-unsized.rs:19:31\n    |\n LL | static STATIC_1: Debug+Sync = *(&1 as &(Debug+Sync));\n    |                               ^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `std::fmt::Debug + std::marker::Sync + 'static`\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn std::fmt::Debug + std::marker::Sync + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: constant expressions must have a statically known size\n "}, {"sha": "33792d4f5b3fa4cb62efff4fe2ae71a42a6b3469", "filename": "src/test/ui/did_you_mean/bad-assoc-ty.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fbad-assoc-ty.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -92,15 +92,15 @@ error[E0223]: ambiguous associated type\n LL | type G = 'static + (Send)::AssocTy;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n    |\n-   = note: specify the type using the syntax `<std::marker::Send + 'static as Trait>::AssocTy`\n+   = note: specify the type using the syntax `<(dyn std::marker::Send + 'static) as Trait>::AssocTy`\n \n error[E0223]: ambiguous associated type\n   --> $DIR/bad-assoc-ty.rs:43:10\n    |\n LL | type H = Fn(u8) -> (u8)::Output;\n    |          ^^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type\n    |\n-   = note: specify the type using the syntax `<std::ops::Fn(u8) -> u8 + 'static as Trait>::Output`\n+   = note: specify the type using the syntax `<(dyn std::ops::Fn(u8) -> u8 + 'static) as Trait>::Output`\n \n error: aborting due to 15 previous errors\n "}, {"sha": "2fac6080f496a263edec158d5909b59270fd88bc", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -12,11 +12,11 @@ LL |     let trait_obj: &SomeTrait = SomeTrait;\n    |\n    = note: method `foo` has no receiver\n \n-error[E0033]: type `&SomeTrait` cannot be dereferenced\n+error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n   --> $DIR/E0033-teach.rs:23:9\n    |\n LL |     let &invalid = trait_obj;\n-   |         ^^^^^^^^ type `&SomeTrait` cannot be dereferenced\n+   |         ^^^^^^^^ type `&dyn SomeTrait` cannot be dereferenced\n    |\n    = note: This error indicates that a pointer to a trait type cannot be implicitly dereferenced by a pattern. Every trait defines a type, but because the size of trait implementors isn't fixed, this type has no compile-time size. Therefore, all accesses to trait types must be through pointers. If you encounter this error you should try to avoid dereferencing the pointer.\n            "}, {"sha": "5d789566beb066e9f0da6536ad9884840fe0123e", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -12,11 +12,11 @@ LL |     let trait_obj: &SomeTrait = SomeTrait;\n    |\n    = note: method `foo` has no receiver\n \n-error[E0033]: type `&SomeTrait` cannot be dereferenced\n+error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n   --> $DIR/E0033.rs:21:9\n    |\n LL |     let &invalid = trait_obj;\n-   |         ^^^^^^^^ type `&SomeTrait` cannot be dereferenced\n+   |         ^^^^^^^^ type `&dyn SomeTrait` cannot be dereferenced\n \n error: aborting due to 3 previous errors\n "}, {"sha": "0777c44058fe81e3cf682c9448413d6789dfff45", "filename": "src/test/ui/error-codes/E0558.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ferror-codes%2FE0558.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ferror-codes%2FE0558.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0558.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -1,4 +1,4 @@\n-error[E0558]: export_name attribute has invalid format\n+error[E0558]: `export_name` attribute has invalid format\n   --> $DIR/E0558.rs:11:1\n    |\n LL | #[export_name]"}, {"sha": "d3eac60de9979e04f13093bf094d3d95fd10b08e", "filename": "src/test/ui/error-codes/E0648.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ferror-codes%2FE0648.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ferror-codes%2FE0648.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0648.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[export_name=\"\\0foo\"] //~ ERROR E0648\n+pub fn bar() {}\n+\n+fn main() {}"}, {"sha": "1e11705e9b9800f49eb6f26ea4895729ba3eccba", "filename": "src/test/ui/error-codes/E0648.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ferror-codes%2FE0648.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ferror-codes%2FE0648.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0648.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -0,0 +1,9 @@\n+error[E0648]: `export_name` may not contain null characters\n+  --> $DIR/E0648.rs:11:1\n+   |\n+LL | #[export_name=\"/0foo\"] //~ ERROR E0648\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0648`."}, {"sha": "fb7f88d5ca977e78adf9c3ef545d78fddbb6670e", "filename": "src/test/ui/error-codes/E0657.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -16,7 +16,7 @@ error[E0308]: mismatched types\n LL |     () //~ ERROR mismatched types\n    |     ^^ expected struct `std::boxed::Box`, found ()\n    |\n-   = note: expected type `std::boxed::Box<Id<_> + 'static>`\n+   = note: expected type `std::boxed::Box<(dyn Id<_> + 'static)>`\n               found type `()`\n \n error[E0308]: mismatched types\n@@ -25,7 +25,7 @@ error[E0308]: mismatched types\n LL |         () //~ ERROR mismatched types\n    |         ^^ expected struct `std::boxed::Box`, found ()\n    |\n-   = note: expected type `std::boxed::Box<Id<_> + 'static>`\n+   = note: expected type `std::boxed::Box<(dyn Id<_> + 'static)>`\n               found type `()`\n \n error: aborting due to 4 previous errors"}, {"sha": "778a4cf1fa01f16de791a08cea0222409da44a71", "filename": "src/test/ui/fat-ptr-cast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -52,7 +52,7 @@ error[E0607]: cannot cast thin pointer `*const i32` to fat pointer `*const [i32]\n LL |     q as *const [i32]; //~ ERROR cannot cast\n    |     ^^^^^^^^^^^^^^^^^\n \n-error[E0606]: casting `usize` as `*mut Trait + 'static` is invalid\n+error[E0606]: casting `usize` as `*mut (dyn Trait + 'static)` is invalid\n   --> $DIR/fat-ptr-cast.rs:32:37\n    |\n LL |     let t: *mut (Trait + 'static) = 0 as *mut _; //~ ERROR casting"}, {"sha": "19a6a8637957eb91de7eb2e4c15ea9d9ab5ae67d", "filename": "src/test/ui/feature-gate-trivial_bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-trivial_bounds.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -98,17 +98,17 @@ LL | struct TwoStrs(str, str) where str: Sized; //~ ERROR\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n \n-error[E0277]: the size for value values of type `A + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn A + 'static)` cannot be known at compilation time\n   --> $DIR/feature-gate-trivial_bounds.rs:65:1\n    |\n LL | / fn unsized_local() where Dst<A>: Sized { //~ ERROR\n LL | |     let x: Dst<A> = *(Box::new(Dst { x: 1 }) as Box<Dst<A>>);\n LL | | }\n    | |_^ doesn't have a size known at compile-time\n    |\n-   = help: within `Dst<A + 'static>`, the trait `std::marker::Sized` is not implemented for `A + 'static`\n+   = help: within `Dst<(dyn A + 'static)>`, the trait `std::marker::Sized` is not implemented for `(dyn A + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n-   = note: required because it appears within the type `Dst<A + 'static>`\n+   = note: required because it appears within the type `Dst<(dyn A + 'static)>`\n    = help: see issue #48214\n    = help: add #![feature(trivial_bounds)] to the crate attributes to enable\n "}, {"sha": "0d9239d72276e899c6424bd26de45e4666faf111", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -1,11 +1,11 @@\n-error[E0277]: `*mut std::ops::Fn() + 'static` cannot be shared between threads safely\n+error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n   --> $DIR/send-sync.rs:18:5\n    |\n LL |     send(format_args!(\"{:?}\", c)); //~ ERROR E0277\n-   |     ^^^^ `*mut std::ops::Fn() + 'static` cannot be shared between threads safely\n+   |     ^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n    |\n-   = help: within `[std::fmt::ArgumentV1<'_>]`, the trait `std::marker::Sync` is not implemented for `*mut std::ops::Fn() + 'static`\n-   = note: required because it appears within the type `std::marker::PhantomData<*mut std::ops::Fn() + 'static>`\n+   = help: within `[std::fmt::ArgumentV1<'_>]`, the trait `std::marker::Sync` is not implemented for `*mut (dyn std::ops::Fn() + 'static)`\n+   = note: required because it appears within the type `std::marker::PhantomData<*mut (dyn std::ops::Fn() + 'static)>`\n    = note: required because it appears within the type `core::fmt::Void`\n    = note: required because it appears within the type `&core::fmt::Void`\n    = note: required because it appears within the type `std::fmt::ArgumentV1<'_>`\n@@ -18,14 +18,14 @@ note: required by `send`\n LL | fn send<T: Send>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: `*mut std::ops::Fn() + 'static` cannot be shared between threads safely\n+error[E0277]: `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n   --> $DIR/send-sync.rs:19:5\n    |\n LL |     sync(format_args!(\"{:?}\", c)); //~ ERROR E0277\n-   |     ^^^^ `*mut std::ops::Fn() + 'static` cannot be shared between threads safely\n+   |     ^^^^ `*mut (dyn std::ops::Fn() + 'static)` cannot be shared between threads safely\n    |\n-   = help: within `std::fmt::Arguments<'_>`, the trait `std::marker::Sync` is not implemented for `*mut std::ops::Fn() + 'static`\n-   = note: required because it appears within the type `std::marker::PhantomData<*mut std::ops::Fn() + 'static>`\n+   = help: within `std::fmt::Arguments<'_>`, the trait `std::marker::Sync` is not implemented for `*mut (dyn std::ops::Fn() + 'static)`\n+   = note: required because it appears within the type `std::marker::PhantomData<*mut (dyn std::ops::Fn() + 'static)>`\n    = note: required because it appears within the type `core::fmt::Void`\n    = note: required because it appears within the type `&core::fmt::Void`\n    = note: required because it appears within the type `std::fmt::ArgumentV1<'_>`"}, {"sha": "07b86228f61182466b75c15c17d784d6a8303cce", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -10,8 +10,8 @@ note: first, the lifetime cannot outlive the lifetime 'a as defined on the funct\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<std::fmt::Debug>\n-              found std::boxed::Box<std::fmt::Debug + 'a>\n+           expected std::boxed::Box<dyn std::fmt::Debug>\n+              found std::boxed::Box<(dyn std::fmt::Debug + 'a)>\n    = note: but, the lifetime must be valid for the static lifetime...\n    = note: ...so that the types are compatible:\n            expected StaticTrait"}, {"sha": "169369c304eb22092fbfebaa2bc3ef638d08c3d3", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -13,8 +13,8 @@ LL | |     }\n    | |_____^\n    = note: ...but the lifetime must also be valid for the static lifetime...\n    = note: ...so that the method type is compatible with trait:\n-           expected fn(&Struct) -> &Trait + 'static\n-              found fn(&Struct) -> &Trait\n+           expected fn(&Struct) -> &(dyn Trait + 'static)\n+              found fn(&Struct) -> &dyn Trait\n \n error: aborting due to previous error\n "}, {"sha": "5432d5f5ed910007cd5b76c1505801a7ad7bc86f", "filename": "src/test/ui/issue-17441.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17441.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -13,10 +13,10 @@ fn main() {\n     //~^ ERROR cast to unsized type: `&[usize; 2]` as `[usize]`\n \n     let _bar = Box::new(1_usize) as std::fmt::Debug;\n-    //~^ ERROR cast to unsized type: `std::boxed::Box<usize>` as `std::fmt::Debug`\n+    //~^ ERROR cast to unsized type: `std::boxed::Box<usize>` as `dyn std::fmt::Debug`\n \n     let _baz = 1_usize as std::fmt::Debug;\n-    //~^ ERROR cast to unsized type: `usize` as `std::fmt::Debug`\n+    //~^ ERROR cast to unsized type: `usize` as `dyn std::fmt::Debug`\n \n     let _quux = [1_usize, 2] as [usize];\n     //~^ ERROR cast to unsized type: `[usize; 2]` as `[usize]`"}, {"sha": "6c7e883f9f9c2c118c5354a6ec93cd9673a9e2c6", "filename": "src/test/ui/issue-17441.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fissue-17441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fissue-17441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17441.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -10,15 +10,15 @@ help: consider using an implicit coercion to `&[usize]` instead\n LL |     let _foo = &[1_usize, 2] as [usize];\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0620]: cast to unsized type: `std::boxed::Box<usize>` as `std::fmt::Debug`\n+error[E0620]: cast to unsized type: `std::boxed::Box<usize>` as `dyn std::fmt::Debug`\n   --> $DIR/issue-17441.rs:15:16\n    |\n LL |     let _bar = Box::new(1_usize) as std::fmt::Debug;\n    |                ^^^^^^^^^^^^^^^^^^^^^---------------\n    |                                     |\n    |                                     help: try casting to a `Box` instead: `Box<std::fmt::Debug>`\n \n-error[E0620]: cast to unsized type: `usize` as `std::fmt::Debug`\n+error[E0620]: cast to unsized type: `usize` as `dyn std::fmt::Debug`\n   --> $DIR/issue-17441.rs:18:16\n    |\n LL |     let _baz = 1_usize as std::fmt::Debug;"}, {"sha": "156ebd920f0d95e0955076b931625c61bd7a105e", "filename": "src/test/ui/issue-20692.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fissue-20692.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fissue-20692.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-20692.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -13,7 +13,7 @@ LL |     let _ = x\n    |             ^ the trait `Array` cannot be made into an object\n    |\n    = note: the trait cannot require that `Self : Sized`\n-   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&Array>` for `&T`\n+   = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Array>` for `&T`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a3bb6872424fc93024feedd0bed3f3ce785c7979", "filename": "src/test/ui/issue-50577.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fissue-50577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fissue-50577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50577.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    enum Foo {\n+        Drop = assert_eq!(1, 1)\n+    }\n+}"}, {"sha": "8751303a0db9b71400edc2242746a07db05a7af9", "filename": "src/test/ui/issue-50577.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50577.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -0,0 +1,13 @@\n+error[E0317]: if may be missing an else clause\n+  --> $DIR/issue-50577.rs:13:16\n+   |\n+LL |         Drop = assert_eq!(1, 1)\n+   |                ^^^^^^^^^^^^^^^^ expected (), found isize\n+   |\n+   = note: expected type `()`\n+              found type `isize`\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0317`."}, {"sha": "7f22dc8739e76a6a42b47382d5eb282e95103ff5", "filename": "src/test/ui/lint-ctypes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-ctypes.rs?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -59,7 +59,7 @@ extern {\n     pub fn char_type(p: char); //~ ERROR uses type `char`\n     pub fn i128_type(p: i128); //~ ERROR uses type `i128`\n     pub fn u128_type(p: u128); //~ ERROR uses type `u128`\n-    pub fn trait_type(p: &Clone); //~ ERROR uses type `std::clone::Clone`\n+    pub fn trait_type(p: &Clone); //~ ERROR uses type `dyn std::clone::Clone`\n     pub fn tuple_type(p: (i32, i32)); //~ ERROR uses type `(i32, i32)`\n     pub fn tuple_type2(p: I32Pair); //~ ERROR uses type `(i32, i32)`\n     pub fn zero_size(p: ZeroSize); //~ ERROR struct has no fields"}, {"sha": "d1ef3a7a19c294b7983399a3c4813b724197b192", "filename": "src/test/ui/lint-ctypes.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint-ctypes.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -73,10 +73,10 @@ error: `extern` block uses type `u128` which is not FFI-safe: 128-bit integers d\n LL |     pub fn u128_type(p: u128); //~ ERROR uses type `u128`\n    |                         ^^^^\n \n-error: `extern` block uses type `std::clone::Clone` which is not FFI-safe: trait objects have no C equivalent\n+error: `extern` block uses type `dyn std::clone::Clone` which is not FFI-safe: trait objects have no C equivalent\n   --> $DIR/lint-ctypes.rs:62:26\n    |\n-LL |     pub fn trait_type(p: &Clone); //~ ERROR uses type `std::clone::Clone`\n+LL |     pub fn trait_type(p: &Clone); //~ ERROR uses type `dyn std::clone::Clone`\n    |                          ^^^^^^\n \n error: `extern` block uses type `(i32, i32)` which is not FFI-safe: tuples have unspecified layout"}, {"sha": "79442bd108a6759fe1ef27761d6e5309935bbf50", "filename": "src/test/ui/lub-glb/old-lub-glb-object.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-glb%2Fold-lub-glb-object.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -9,8 +9,8 @@ LL | |         _ => y,\n LL | |     };\n    | |_____^ expected bound lifetime parameter 'a, found concrete lifetime\n    |\n-   = note: expected type `&for<'a, 'b> Foo<&'a u8, &'b u8>`\n-              found type `&for<'a> Foo<&'a u8, &'a u8>`\n+   = note: expected type `&dyn for<'a, 'b> Foo<&'a u8, &'b u8>`\n+              found type `&dyn for<'a> Foo<&'a u8, &'a u8>`\n    = note: this was previously accepted by the compiler but has been phased out\n    = note: for more information, see https://github.com/rust-lang/rust/issues/45852\n "}, {"sha": "9335795f6b8f322c0d3d0e6355f6ff61d0a025c1", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -162,13 +162,13 @@ error[E0607]: cannot cast thin pointer `*const u8` to fat pointer `*const [u8]`\n LL |     let _ = v as *const [u8]; //~ ERROR cannot cast\n    |             ^^^^^^^^^^^^^^^^\n \n-error[E0606]: casting `&Foo` as `*const str` is invalid\n+error[E0606]: casting `&dyn Foo` as `*const str` is invalid\n   --> $DIR/cast-rfc0401.rs:64:13\n    |\n LL |     let _ = foo as *const str; //~ ERROR is invalid\n    |             ^^^^^^^^^^^^^^^^^\n \n-error[E0606]: casting `&Foo` as `*mut str` is invalid\n+error[E0606]: casting `&dyn Foo` as `*mut str` is invalid\n   --> $DIR/cast-rfc0401.rs:65:13\n    |\n LL |     let _ = foo as *mut str; //~ ERROR is invalid\n@@ -200,15 +200,15 @@ LL |     let _ = fat_sv as usize; //~ ERROR is invalid\n    |\n    = help: cast through a thin pointer first\n \n-error[E0606]: casting `*const Foo` as `*const [u16]` is invalid\n+error[E0606]: casting `*const dyn Foo` as `*const [u16]` is invalid\n   --> $DIR/cast-rfc0401.rs:78:13\n    |\n LL |     let _ = cf as *const [u16]; //~ ERROR is invalid\n    |             ^^^^^^^^^^^^^^^^^^\n    |\n    = note: vtable kinds may not match\n \n-error[E0606]: casting `*const Foo` as `*const Bar` is invalid\n+error[E0606]: casting `*const dyn Foo` as `*const dyn Bar` is invalid\n   --> $DIR/cast-rfc0401.rs:79:13\n    |\n LL |     let _ = cf as *const Bar; //~ ERROR is invalid\n@@ -224,7 +224,7 @@ LL |     let _ = fat_v as *const Foo; //~ ERROR the size for value values of typ\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `[u8]`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n-   = note: required for the cast to the object type `Foo`\n+   = note: required for the cast to the object type `dyn Foo`\n \n error[E0277]: the size for value values of type `str` cannot be known at compilation time\n   --> $DIR/cast-rfc0401.rs:72:13\n@@ -234,7 +234,7 @@ LL |     let _ = a as *const Foo; //~ ERROR the size for value values of type\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n-   = note: required for the cast to the object type `Foo`\n+   = note: required for the cast to the object type `dyn Foo`\n \n error[E0606]: casting `&{float}` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:81:30"}, {"sha": "018ea941d12da20a3aadde361ed388a64718f0ad", "filename": "src/test/ui/mismatched_types/issue-19109.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-19109.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -2,12 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/issue-19109.rs:14:5\n    |\n LL | fn function(t: &mut Trait) {\n-   |                            - help: try adding a return type: `-> *mut Trait`\n+   |                            - help: try adding a return type: `-> *mut dyn Trait`\n LL |     t as *mut Trait\n    |     ^^^^^^^^^^^^^^^ expected (), found *-ptr\n    |\n    = note: expected type `()`\n-              found type `*mut Trait`\n+              found type `*mut dyn Trait`\n \n error: aborting due to previous error\n "}, {"sha": "15c9fd6bf8fe83d0ba22ea764f7eb148e854623c", "filename": "src/test/ui/mismatched_types/trait-bounds-cant-coerce.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ftrait-bounds-cant-coerce.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -4,8 +4,8 @@ error[E0308]: mismatched types\n LL |     a(x); //~ ERROR mismatched types [E0308]\n    |       ^ expected trait `Foo + std::marker::Send`, found trait `Foo`\n    |\n-   = note: expected type `std::boxed::Box<Foo + std::marker::Send + 'static>`\n-              found type `std::boxed::Box<Foo + 'static>`\n+   = note: expected type `std::boxed::Box<(dyn Foo + std::marker::Send + 'static)>`\n+              found type `std::boxed::Box<(dyn Foo + 'static)>`\n \n error: aborting due to previous error\n "}, {"sha": "e07051135779ac6344bf4ba4fee317964e54fa76", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -20,7 +20,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<Anything + '_#2r>\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>\n            ]\n    = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n@@ -60,7 +60,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<Anything + '_#2r>\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>\n            ]\n    = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n@@ -92,7 +92,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<Anything + '_#3r>\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>\n            ]\n    = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n@@ -134,7 +134,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                '_#2r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<Anything + '_#3r>\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>\n            ]\n    = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r"}, {"sha": "39ad96cc6cd8e9ac47a75859080aadccc4a2df21", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -20,7 +20,7 @@ LL |     with_signature(x, |y| y)\n                '_#1r,\n                T,\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<std::fmt::Debug + '_#2r>\n+               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r)>\n            ]\n    = note: number of external vids: 3\n    = note: where T: '_#2r"}, {"sha": "72bd270165fd09240f7bf584f4fff4466e0e96f5", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -1,10 +1,10 @@\n-error[E0277]: the size for value values of type `I + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn I + 'static)` cannot be known at compilation time\n   --> $DIR/issue-5035-2.rs:14:8\n    |\n LL | fn foo(_x: K) {}\n    |        ^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `I + 'static`\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn I + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: all local variables must have a statically known size\n "}, {"sha": "b318e778f8766b6c78f3d23290252a2bbdf67a3e", "filename": "src/test/ui/span/borrowck-object-mutability.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow immutable item `*x` as mutable\n   --> $DIR/borrowck-object-mutability.rs:19:5\n    |\n LL | fn borrowed_receiver(x: &Foo) {\n-   |                         ---- help: consider changing this to be a mutable reference: `&mut Foo`\n+   |                         ---- help: consider changing this to be a mutable reference: `&mut dyn Foo`\n LL |     x.borrowed();\n LL |     x.borrowed_mut(); //~ ERROR cannot borrow\n    |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable"}, {"sha": "9049ffd40909007a94d56a40f5d664da56753e1c", "filename": "src/test/ui/suggestions/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -75,7 +75,7 @@ LL |     w.wrap.not_closure();\n    |\n    = help: did you mean to write `w.wrap.not_closure` instead of `w.wrap.not_closure(...)`?\n \n-error[E0599]: no method named `closure` found for type `Obj<std::boxed::Box<std::boxed::FnBox<(), Output=u32> + 'static>>` in the current scope\n+error[E0599]: no method named `closure` found for type `Obj<std::boxed::Box<(dyn std::boxed::FnBox<(), Output=u32> + 'static)>>` in the current scope\n   --> $DIR/issue-2392.rs:72:24\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {"}, {"sha": "e18018c6f0c0172a074abe4e32b98f6034df6591", "filename": "src/test/ui/trivial-bounds-inconsistent-sized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-sized.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -6,7 +6,7 @@ LL | struct S(str, str) where str: Sized;\n    |\n    = note: #[warn(trivial_bounds)] on by default\n \n-warning: Trait bound for<'a> T<A + 'a>: std::marker::Sized does not depend on any type or lifetime parameters\n+warning: Trait bound for<'a> T<(dyn A + 'a)>: std::marker::Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent-sized.rs:26:1\n    |\n LL | / fn unsized_local() where for<'a> T<A + 'a>: Sized {"}, {"sha": "85b16b17042f640862c23da564c98a017d038434", "filename": "src/test/ui/trivial-bounds-inconsistent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -78,7 +78,7 @@ warning: Trait bound str: std::marker::Sized does not depend on any type or life\n LL | struct TwoStrs(str, str) where str: Sized;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: Trait bound for<'a> Dst<A + 'a>: std::marker::Sized does not depend on any type or lifetime parameters\n+warning: Trait bound for<'a> Dst<(dyn A + 'a)>: std::marker::Sized does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:65:1\n    |\n LL | / fn unsized_local() where for<'a> Dst<A + 'a>: Sized {"}, {"sha": "cb545ca008d6581f503d6360ece9a41723367cfc", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -19,8 +19,8 @@ LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |              ^^^^^\n    = note: but, the lifetime must be valid for the static lifetime...\n    = note: ...so that the expression is assignable:\n-           expected std::boxed::Box<std::iter::Iterator<Item=&T> + 'static>\n-              found std::boxed::Box<std::iter::Iterator<Item=&T>>\n+           expected std::boxed::Box<(dyn std::iter::Iterator<Item=&T> + 'static)>\n+              found std::boxed::Box<dyn std::iter::Iterator<Item=&T>>\n \n error: aborting due to previous error\n "}, {"sha": "1f30c815d30a8be7bba90b1ecee850bfa4bddff6", "filename": "src/test/ui/unsized-enum2.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/764232cb2a8407c72b9fea68835e686240e30ef3/src%2Ftest%2Fui%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-enum2.stderr?ref=764232cb2a8407c72b9fea68835e686240e30ef3", "patch": "@@ -82,43 +82,43 @@ LL |     VH{u: isize, x: [u32]},\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `Foo + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn Foo + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:63:8\n    |\n LL |     VM(Foo),\n    |        ^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Foo + 'static`\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn Foo + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `Bar + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn Bar + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:65:8\n    |\n LL |     VN{x: Bar},\n    |        ^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `Bar + 'static`\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn Bar + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `FooBar + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn FooBar + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:67:15\n    |\n LL |     VO(isize, FooBar),\n    |               ^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `FooBar + 'static`\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn FooBar + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `BarFoo + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn BarFoo + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:69:18\n    |\n LL |     VP{u: isize, x: BarFoo},\n    |                  ^^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `BarFoo + 'static`\n+   = help: the trait `std::marker::Sized` is not implemented for `(dyn BarFoo + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n@@ -162,46 +162,46 @@ LL |     VT{u: isize, x: <&'static [i32] as Deref>::Target},\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `PathHelper1 + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn PathHelper1 + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:53:8\n    |\n LL |     VI(Path1),\n    |        ^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `Path1`, the trait `std::marker::Sized` is not implemented for `PathHelper1 + 'static`\n+   = help: within `Path1`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper1 + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: required because it appears within the type `Path1`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `PathHelper2 + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn PathHelper2 + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:55:8\n    |\n LL |     VJ{x: Path2},\n    |        ^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `Path2`, the trait `std::marker::Sized` is not implemented for `PathHelper2 + 'static`\n+   = help: within `Path2`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper2 + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: required because it appears within the type `Path2`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `PathHelper3 + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn PathHelper3 + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:57:15\n    |\n LL |     VK(isize, Path3),\n    |               ^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `Path3`, the trait `std::marker::Sized` is not implemented for `PathHelper3 + 'static`\n+   = help: within `Path3`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper3 + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: required because it appears within the type `Path3`\n    = note: no field of an enum variant may have a dynamically sized type\n \n-error[E0277]: the size for value values of type `PathHelper4 + 'static` cannot be known at compilation time\n+error[E0277]: the size for value values of type `(dyn PathHelper4 + 'static)` cannot be known at compilation time\n   --> $DIR/unsized-enum2.rs:59:18\n    |\n LL |     VL{u: isize, x: Path4},\n    |                  ^^^^^^^^ doesn't have a size known at compile-time\n    |\n-   = help: within `Path4`, the trait `std::marker::Sized` is not implemented for `PathHelper4 + 'static`\n+   = help: within `Path4`, the trait `std::marker::Sized` is not implemented for `(dyn PathHelper4 + 'static)`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/second-edition/ch19-04-advanced-types.html#dynamically-sized-types--sized>\n    = note: required because it appears within the type `Path4`\n    = note: no field of an enum variant may have a dynamically sized type"}]}