{"sha": "5ac0290f533eed295c6e92564d7530d41cf45d6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYzAyOTBmNTMzZWVkMjk1YzZlOTI1NjRkNzUzMGQ0MWNmNDVkNmU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-20T10:23:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-20T10:23:55Z"}, "message": "Merge #8116\n\n8116: Remove WhereClause::Error r=flodiebold a=flodiebold\n\nChalk doesn't have it, and judging from the removed code, it wasn't useful anyway.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "ebdcea14c479ddfca358bbeabdde1da8f45b2423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebdcea14c479ddfca358bbeabdde1da8f45b2423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ac0290f533eed295c6e92564d7530d41cf45d6e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgVc07CRBK7hj4Ov3rIwAAdHIIAB+R/d7aDtjh8AUCPy4grVfs\n3YYmxzFCZPxSsjkTK6cplXbgmxaMlj7IN3dAtSRlNBHRA4iiETMZws3oOEXtAfIC\nCVhMXMwizzPqT/Se6soZDxDGBNr1dMieV3I5ZIfbqdm7GaIJTBRdBSyWCzr9BUp7\n2ZWR0dcpOfcuZInO+2gukTcPB4FtjoNthFJp6doKg8iptA65aq7H6y84GR7TPw0r\nReJ21pVVPJ//tAPT+ahMQ8GriQw07h+XOr8gH86tbysiO7PkmeEUCep61v93Ud+u\nT91lFJtsoG1/E+FbXx+SrNDmovj5YHsjQPVJ/pVn7Os3emBloNu+eaJrDAyKh0E=\n=MkW9\n-----END PGP SIGNATURE-----\n", "payload": "tree ebdcea14c479ddfca358bbeabdde1da8f45b2423\nparent 3901c3b566a6834c64e029bd6f4fdaaf8b26f809\nparent 8e7e405f6ab0c1ee10bfdd3d55a97628fe4cd6dd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616235835 +0000\ncommitter GitHub <noreply@github.com> 1616235835 +0000\n\nMerge #8116\n\n8116: Remove WhereClause::Error r=flodiebold a=flodiebold\n\nChalk doesn't have it, and judging from the removed code, it wasn't useful anyway.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac0290f533eed295c6e92564d7530d41cf45d6e", "html_url": "https://github.com/rust-lang/rust/commit/5ac0290f533eed295c6e92564d7530d41cf45d6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ac0290f533eed295c6e92564d7530d41cf45d6e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3901c3b566a6834c64e029bd6f4fdaaf8b26f809", "url": "https://api.github.com/repos/rust-lang/rust/commits/3901c3b566a6834c64e029bd6f4fdaaf8b26f809", "html_url": "https://github.com/rust-lang/rust/commit/3901c3b566a6834c64e029bd6f4fdaaf8b26f809"}, {"sha": "8e7e405f6ab0c1ee10bfdd3d55a97628fe4cd6dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7e405f6ab0c1ee10bfdd3d55a97628fe4cd6dd", "html_url": "https://github.com/rust-lang/rust/commit/8e7e405f6ab0c1ee10bfdd3d55a97628fe4cd6dd"}], "stats": {"total": 50, "additions": 8, "deletions": 42}, "files": [{"sha": "4765c99a452c6158b77c20dbb0def5457359682d", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ac0290f533eed295c6e92564d7530d41cf45d6e/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac0290f533eed295c6e92564d7530d41cf45d6e/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=5ac0290f533eed295c6e92564d7530d41cf45d6e", "patch": "@@ -731,16 +731,6 @@ fn write_bounds_like_dyn_trait(\n                 }\n                 ty.hir_fmt(f)?;\n             }\n-            WhereClause::Error => {\n-                if angle_open {\n-                    // impl Trait<X, {error}>\n-                    write!(f, \", \")?;\n-                } else if !first {\n-                    // impl Trait + {error}\n-                    write!(f, \" + \")?;\n-                }\n-                p.hir_fmt(f)?;\n-            }\n         }\n         first = false;\n     }\n@@ -796,7 +786,7 @@ impl HirDisplay for WhereClause {\n                 )?;\n                 ty.hir_fmt(f)?;\n             }\n-            WhereClause::AliasEq(_) | WhereClause::Error => write!(f, \"{{error}}\")?,\n+            WhereClause::AliasEq(_) => write!(f, \"{{error}}\")?,\n         }\n         Ok(())\n     }"}, {"sha": "8de2d422f887d5401129c9a7c5fc44ccae6aaeba", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ac0290f533eed295c6e92564d7530d41cf45d6e/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac0290f533eed295c6e92564d7530d41cf45d6e/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=5ac0290f533eed295c6e92564d7530d41cf45d6e", "patch": "@@ -569,16 +569,9 @@ pub enum WhereClause {\n     Implemented(TraitRef),\n     /// An associated type bindings like in `Iterator<Item = T>`.\n     AliasEq(AliasEq),\n-    /// We couldn't resolve the trait reference. (If some type parameters can't\n-    /// be resolved, they will just be Unknown).\n-    Error,\n }\n \n impl WhereClause {\n-    pub fn is_error(&self) -> bool {\n-        matches!(self, WhereClause::Error)\n-    }\n-\n     pub fn is_implemented(&self) -> bool {\n         matches!(self, WhereClause::Implemented(_))\n     }\n@@ -589,7 +582,7 @@ impl WhereClause {\n             WhereClause::AliasEq(AliasEq { alias: AliasTy::Projection(proj), .. }) => {\n                 Some(proj.trait_ref(db))\n             }\n-            WhereClause::AliasEq(_) | WhereClause::Error => None,\n+            WhereClause::AliasEq(_) => None,\n         }\n     }\n }\n@@ -599,7 +592,6 @@ impl TypeWalk for WhereClause {\n         match self {\n             WhereClause::Implemented(trait_ref) => trait_ref.walk(f),\n             WhereClause::AliasEq(alias_eq) => alias_eq.walk(f),\n-            WhereClause::Error => {}\n         }\n     }\n \n@@ -611,7 +603,6 @@ impl TypeWalk for WhereClause {\n         match self {\n             WhereClause::Implemented(trait_ref) => trait_ref.walk_mut_binders(f, binders),\n             WhereClause::AliasEq(alias_eq) => alias_eq.walk_mut_binders(f, binders),\n-            WhereClause::Error => {}\n         }\n     }\n }"}, {"sha": "cbbb535e554b2442fac14c41d57dab3b26fe87b5", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ac0290f533eed295c6e92564d7530d41cf45d6e/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac0290f533eed295c6e92564d7530d41cf45d6e/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=5ac0290f533eed295c6e92564d7530d41cf45d6e", "patch": "@@ -703,10 +703,10 @@ impl<'a> TyLoweringContext<'a> {\n         let trait_ref = match bound {\n             TypeBound::Path(path) => {\n                 bindings = self.lower_trait_ref_from_path(path, Some(self_ty));\n-                Some(bindings.clone().map_or(WhereClause::Error, WhereClause::Implemented))\n+                bindings.clone().map(WhereClause::Implemented)\n             }\n             TypeBound::Lifetime(_) => None,\n-            TypeBound::Error => Some(WhereClause::Error),\n+            TypeBound::Error => None,\n         };\n         trait_ref.into_iter().chain(\n             bindings\n@@ -919,9 +919,6 @@ pub(crate) fn trait_environment_query(\n     let mut clauses = Vec::new();\n     for pred in resolver.where_predicates_in_scope() {\n         for pred in ctx.lower_where_predicate(pred) {\n-            if pred.is_error() {\n-                continue;\n-            }\n             if let WhereClause::Implemented(tr) = &pred {\n                 traits_in_scope.push((tr.self_type_parameter().clone(), tr.hir_trait_id()));\n             }"}, {"sha": "8f2bdffc03fdd2747f759e3888213d42a64cef7b", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ac0290f533eed295c6e92564d7530d41cf45d6e/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac0290f533eed295c6e92564d7530d41cf45d6e/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=5ac0290f533eed295c6e92564d7530d41cf45d6e", "patch": "@@ -1412,8 +1412,8 @@ fn weird_bounds() {\n             50..51 'b': impl\n             69..70 'c': impl Trait\n             86..87 'd': impl\n-            107..108 'e': impl {error}\n-            123..124 'f': impl Trait + {error}\n+            107..108 'e': impl\n+            123..124 'f': impl Trait\n             147..149 '{}': ()\n         \"#]],\n     );"}, {"sha": "87c92bd12043e5318ee95d452792d182b13ce412", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ac0290f533eed295c6e92564d7530d41cf45d6e/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac0290f533eed295c6e92564d7530d41cf45d6e/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=5ac0290f533eed295c6e92564d7530d41cf45d6e", "patch": "@@ -100,7 +100,6 @@ impl Obligation {\n         match predicate {\n             WhereClause::Implemented(trait_ref) => Some(Obligation::Trait(trait_ref)),\n             WhereClause::AliasEq(alias_eq) => Some(Obligation::AliasEq(alias_eq)),\n-            WhereClause::Error => None,\n         }\n     }\n }"}, {"sha": "734679414bdc1720c7fe2a7012373bcb79daf4a2", "filename": "crates/hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ac0290f533eed295c6e92564d7530d41cf45d6e/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac0290f533eed295c6e92564d7530d41cf45d6e/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=5ac0290f533eed295c6e92564d7530d41cf45d6e", "patch": "@@ -187,13 +187,7 @@ impl<'a> chalk_solve::RustIrDatabase<Interner> for ChalkContext<'a> {\n                 let data = &datas.value.impl_traits[idx as usize];\n                 let bound = OpaqueTyDatumBound {\n                     bounds: make_binders(\n-                        data.bounds\n-                            .value\n-                            .iter()\n-                            .cloned()\n-                            .filter(|b| !b.is_error())\n-                            .map(|b| b.to_chalk(self.db))\n-                            .collect(),\n+                        data.bounds.value.iter().cloned().map(|b| b.to_chalk(self.db)).collect(),\n                         1,\n                     ),\n                     where_clauses: make_binders(vec![], 0),"}, {"sha": "7841c216cb9d74d4fef49ec70d4f4a41bfadb509", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ac0290f533eed295c6e92564d7530d41cf45d6e/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac0290f533eed295c6e92564d7530d41cf45d6e/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=5ac0290f533eed295c6e92564d7530d41cf45d6e", "patch": "@@ -98,7 +98,7 @@ impl ToChalk for Ty {\n             TyKind::Dyn(predicates) => {\n                 let where_clauses = chalk_ir::QuantifiedWhereClauses::from_iter(\n                     &Interner,\n-                    predicates.iter().filter(|p| !p.is_error()).cloned().map(|p| p.to_chalk(db)),\n+                    predicates.iter().cloned().map(|p| p.to_chalk(db)),\n                 );\n                 let bounded_ty = chalk_ir::DynTy {\n                     bounds: make_binders(where_clauses, 1),\n@@ -318,7 +318,6 @@ impl ToChalk for WhereClause {\n                 chalk_ir::WhereClause::AliasEq(alias_eq.to_chalk(db).shifted_in(&Interner)),\n                 0,\n             ),\n-            WhereClause::Error => panic!(\"tried passing GenericPredicate::Error to Chalk\"),\n         }\n     }\n \n@@ -521,10 +520,6 @@ pub(super) fn convert_where_clauses(\n     let generic_predicates = db.generic_predicates(def);\n     let mut result = Vec::with_capacity(generic_predicates.len());\n     for pred in generic_predicates.iter() {\n-        if pred.value.is_error() {\n-            // skip errored predicates completely\n-            continue;\n-        }\n         result.push(pred.clone().subst(substs).to_chalk(db));\n     }\n     result"}]}