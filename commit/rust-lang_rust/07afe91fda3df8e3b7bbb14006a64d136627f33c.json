{"sha": "07afe91fda3df8e3b7bbb14006a64d136627f33c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YWZlOTFmZGEzZGY4ZTNiN2JiYjE0MDA2YTY0ZDEzNjYyN2YzM2M=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-06-05T16:51:23Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-07-22T13:34:00Z"}, "message": "Allow unstable code to be injected by placement-`in` expansion.\n\n(Over time the stability checking has gotten more finicky; in\nparticular one must attach the (whole) span of the original `in PLACE\nBLOCK` expression to the injected references to unstable paths, as\nnoted in the comments.)\n\ncall `push_compiler_expansion` during the placement-`in` expansion.", "tree": {"sha": "d09da26b0a98c9cf03ad223b0d1cdfca41802a53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d09da26b0a98c9cf03ad223b0d1cdfca41802a53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07afe91fda3df8e3b7bbb14006a64d136627f33c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07afe91fda3df8e3b7bbb14006a64d136627f33c", "html_url": "https://github.com/rust-lang/rust/commit/07afe91fda3df8e3b7bbb14006a64d136627f33c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07afe91fda3df8e3b7bbb14006a64d136627f33c/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb5f0b4971481fd8985c78c7a24e422f45ea6560", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb5f0b4971481fd8985c78c7a24e422f45ea6560", "html_url": "https://github.com/rust-lang/rust/commit/cb5f0b4971481fd8985c78c7a24e422f45ea6560"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "faa1e5b2f515fff67234c75677733d14e69e8b85", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/07afe91fda3df8e3b7bbb14006a64d136627f33c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07afe91fda3df8e3b7bbb14006a64d136627f33c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=07afe91fda3df8e3b7bbb14006a64d136627f33c", "patch": "@@ -50,12 +50,23 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             callee: NameAndSpan {\n                 name: expansion_desc.to_string(),\n                 format: CompilerExpansion,\n+\n+                // This does *not* mean code generated after\n+                // `push_compiler_expansion` is automatically exempt\n+                // from stability lints; must also tag such code with\n+                // an appropriate span from `fld.cx.backtrace()`.\n                 allow_internal_unstable: true,\n+\n                 span: None,\n             },\n         });\n     }\n \n+    // Sets the expn_id so that we can use unstable methods.\n+    fn allow_unstable(fld: &mut MacroExpander, span: Span) -> Span {\n+        Span { expn_id: fld.cx.backtrace(), ..span }\n+    }\n+\n     let expr_span = e.span;\n     return e.and_then(|ast::Expr {id, node, span}| match node {\n \n@@ -101,6 +112,8 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n                 &fld.cx.parse_sess.span_diagnostic,\n                 expr_span);\n \n+            push_compiler_expansion(fld, expr_span, \"placement-in expansion\");\n+\n             let value_span = value_expr.span;\n             let placer_span = placer.span;\n \n@@ -121,9 +134,14 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             let inplace_finalize = [\"ops\", \"InPlace\", \"finalize\"];\n \n             let make_call = |fld: &mut MacroExpander, p, args| {\n-                let path = mk_core_path(fld, placer_span, p);\n+                // We feed in the `expr_span` because codemap's span_allows_unstable\n+                // allows the call_site span to inherit the `allow_internal_unstable`\n+                // setting.\n+                let span_unstable = allow_unstable(fld, expr_span);\n+                let path = mk_core_path(fld, span_unstable, p);\n                 let path = fld.cx.expr_path(path);\n-                fld.cx.expr_call(span, path, args)\n+                let expr_span_unstable = allow_unstable(fld, span);\n+                fld.cx.expr_call(expr_span_unstable, path, args)\n             };\n \n             let stmt_let = |fld: &mut MacroExpander, bind, expr| {\n@@ -166,7 +184,9 @@ pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n             };\n \n             let block = fld.cx.block_all(span, vec![s1, s2, s3], expr);\n-            fld.cx.expr_block(block)\n+            let result = fld.cx.expr_block(block);\n+            fld.cx.bt_pop();\n+            result\n         }\n \n         // Issue #22181:"}]}