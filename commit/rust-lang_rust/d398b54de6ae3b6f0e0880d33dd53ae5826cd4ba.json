{"sha": "d398b54de6ae3b6f0e0880d33dd53ae5826cd4ba", "node_id": "C_kwDOAAsO6NoAKGQzOThiNTRkZTZhZTNiNmYwZTA4ODBkMzNkZDUzYWU1ODI2Y2Q0YmE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-16T13:09:38Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-09-19T09:28:32Z"}, "message": "do not implement type traversal for `EarlyBinder`", "tree": {"sha": "7ece558ce86772ca35a81c72cfbe8e3ddb246513", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ece558ce86772ca35a81c72cfbe8e3ddb246513"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d398b54de6ae3b6f0e0880d33dd53ae5826cd4ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d398b54de6ae3b6f0e0880d33dd53ae5826cd4ba", "html_url": "https://github.com/rust-lang/rust/commit/d398b54de6ae3b6f0e0880d33dd53ae5826cd4ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d398b54de6ae3b6f0e0880d33dd53ae5826cd4ba/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efa717bc2d82c19c6957f362a936a6f95169d138", "url": "https://api.github.com/repos/rust-lang/rust/commits/efa717bc2d82c19c6957f362a936a6f95169d138", "html_url": "https://github.com/rust-lang/rust/commit/efa717bc2d82c19c6957f362a936a6f95169d138"}], "stats": {"total": 21, "additions": 8, "deletions": 13}, "files": [{"sha": "13a6cf190098d61f37146ffa0f4e0a8e3545a499", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d398b54de6ae3b6f0e0880d33dd53ae5826cd4ba/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d398b54de6ae3b6f0e0880d33dd53ae5826cd4ba/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=d398b54de6ae3b6f0e0880d33dd53ae5826cd4ba", "patch": "@@ -2770,7 +2770,10 @@ impl<'tcx> ty::Instance<'tcx> {\n                 // track of a polymorphization `ParamEnv` to allow normalizing later.\n                 let mut sig = match *ty.kind() {\n                     ty::FnDef(def_id, substs) => tcx\n-                        .normalize_erasing_regions(tcx.param_env(def_id), tcx.bound_fn_sig(def_id))\n+                        .bound_fn_sig(def_id)\n+                        .map_bound(|fn_sig| {\n+                            tcx.normalize_erasing_regions(tcx.param_env(def_id), fn_sig)\n+                        })\n                         .subst(tcx, substs),\n                     _ => unreachable!(),\n                 };"}, {"sha": "004fcffdc4074152cb8d1ae29f00fb9be00fe9f4", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d398b54de6ae3b6f0e0880d33dd53ae5826cd4ba/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d398b54de6ae3b6f0e0880d33dd53ae5826cd4ba/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=d398b54de6ae3b6f0e0880d33dd53ae5826cd4ba", "patch": "@@ -557,18 +557,6 @@ impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for Box<[T]> {\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::EarlyBinder<T> {\n-    fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n-        self.try_map_bound(|ty| ty.try_fold_with(folder))\n-    }\n-}\n-\n-impl<'tcx, T: TypeVisitable<'tcx>> TypeVisitable<'tcx> for ty::EarlyBinder<T> {\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy> {\n-        self.as_ref().0.visit_with(visitor)\n-    }\n-}\n-\n impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for ty::Binder<'tcx, T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_binder(self)"}, {"sha": "2d78c0c86563a49f392a02fce3950ba900ec078c", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d398b54de6ae3b6f0e0880d33dd53ae5826cd4ba/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d398b54de6ae3b6f0e0880d33dd53ae5826cd4ba/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=d398b54de6ae3b6f0e0880d33dd53ae5826cd4ba", "patch": "@@ -919,6 +919,10 @@ impl<'tcx> PolyExistentialTraitRef<'tcx> {\n #[derive(Encodable, Decodable, HashStable)]\n pub struct EarlyBinder<T>(pub T);\n \n+/// For early binders, you should first call `subst` before using any visitors.\n+impl<'tcx, T> !TypeFoldable<'tcx> for ty::EarlyBinder<T> {}\n+impl<'tcx, T> !TypeVisitable<'tcx> for ty::EarlyBinder<T> {}\n+\n impl<T> EarlyBinder<T> {\n     pub fn as_ref(&self) -> EarlyBinder<&T> {\n         EarlyBinder(&self.0)"}]}