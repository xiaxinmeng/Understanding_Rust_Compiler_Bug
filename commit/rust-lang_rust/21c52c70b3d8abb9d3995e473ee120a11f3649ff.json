{"sha": "21c52c70b3d8abb9d3995e473ee120a11f3649ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYzUyYzcwYjNkOGFiYjlkMzk5NWU0NzNlZTEyMGExMWYzNjQ5ZmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-08T10:45:34Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-08T10:45:34Z"}, "message": "Rustfmt", "tree": {"sha": "36d9aba3d8191a7f675c6ddb0eadaea841f9615a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36d9aba3d8191a7f675c6ddb0eadaea841f9615a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21c52c70b3d8abb9d3995e473ee120a11f3649ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21c52c70b3d8abb9d3995e473ee120a11f3649ff", "html_url": "https://github.com/rust-lang/rust/commit/21c52c70b3d8abb9d3995e473ee120a11f3649ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21c52c70b3d8abb9d3995e473ee120a11f3649ff/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "822a181c8783bdfd365e14ab3bd9d2ab22ed7ee2", "url": "https://api.github.com/repos/rust-lang/rust/commits/822a181c8783bdfd365e14ab3bd9d2ab22ed7ee2", "html_url": "https://github.com/rust-lang/rust/commit/822a181c8783bdfd365e14ab3bd9d2ab22ed7ee2"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "d40c2ec20cd49e3a5c63569f88d16b92277ddbf1", "filename": "src/base.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/21c52c70b3d8abb9d3995e473ee120a11f3649ff/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c52c70b3d8abb9d3995e473ee120a11f3649ff/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=21c52c70b3d8abb9d3995e473ee120a11f3649ff", "patch": "@@ -357,7 +357,7 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                             TypeVariants::TyInt(_) => {\n                                 let zero = fx.bcx.ins().iconst(types::I64, 0);\n                                 fx.bcx.ins().isub(zero, val)\n-                            },\n+                            }\n                             TypeVariants::TyFloat(_) => fx.bcx.ins().fneg(val),\n                             _ => unimplemented!(\"un op Neg for {:?}\", ty),\n                         },\n@@ -422,11 +422,15 @@ fn trans_stmt<'a, 'tcx: 'a>(\n                 Rvalue::Len(lval) => return Err(format!(\"rval len {:?}\", lval)),\n                 Rvalue::NullaryOp(NullOp::Box, ty) => unimplemented!(\"rval box {:?}\", ty),\n                 Rvalue::NullaryOp(NullOp::SizeOf, ty) => {\n-                    assert!(lval.layout().ty.is_sized(fx.tcx.at(DUMMY_SP), ParamEnv::reveal_all()));\n+                    assert!(\n+                        lval.layout()\n+                            .ty\n+                            .is_sized(fx.tcx.at(DUMMY_SP), ParamEnv::reveal_all())\n+                    );\n                     let ty_size = fx.layout_of(ty).size.bytes();\n                     let val = CValue::const_val(fx, fx.tcx.types.usize, ty_size as i64);\n                     lval.write_cvalue(fx, val);\n-                },\n+                }\n                 Rvalue::Aggregate(_, _) => bug!(\"shouldn't exist at trans {:?}\", rval),\n             }\n         }\n@@ -602,7 +606,11 @@ pub fn trans_int_binop<'a, 'tcx: 'a>(\n     signed: bool,\n ) -> CValue<'tcx> {\n     if bin_op != BinOp::Shl && bin_op != BinOp::Shr {\n-        assert_eq!(lhs.layout().ty, rhs.layout().ty, \"int binop requires lhs and rhs of same type\");\n+        assert_eq!(\n+            lhs.layout().ty,\n+            rhs.layout().ty,\n+            \"int binop requires lhs and rhs of same type\"\n+        );\n     }\n     binop_match! {\n         fx, bin_op, signed, lhs, rhs, out_ty, \"int/uint\";\n@@ -644,11 +652,18 @@ pub fn trans_checked_int_binop<'a, 'tcx: 'a>(\n     signed: bool,\n ) -> CValue<'tcx> {\n     if bin_op != BinOp::Shl && bin_op != BinOp::Shr {\n-        assert_eq!(lhs.layout().ty, rhs.layout().ty, \"checked int binop requires lhs and rhs of same type\");\n+        assert_eq!(\n+            lhs.layout().ty,\n+            rhs.layout().ty,\n+            \"checked int binop requires lhs and rhs of same type\"\n+        );\n     }\n     let res_ty = match out_ty.sty {\n         TypeVariants::TyTuple(tys) => tys[0],\n-        _ => bug!(\"Checked int binop requires tuple as output, but got {:?}\", out_ty),\n+        _ => bug!(\n+            \"Checked int binop requires tuple as output, but got {:?}\",\n+            out_ty\n+        ),\n     };\n \n     let res = binop_match! {\n@@ -679,9 +694,13 @@ pub fn trans_checked_int_binop<'a, 'tcx: 'a>(\n     let has_overflow = CValue::const_val(fx, fx.tcx.types.bool, 0);\n \n     let out_place = CPlace::temp(fx, out_ty);\n-    out_place.place_field(fx, mir::Field::new(0)).write_cvalue(fx, res);\n+    out_place\n+        .place_field(fx, mir::Field::new(0))\n+        .write_cvalue(fx, res);\n     println!(\"abc\");\n-    out_place.place_field(fx, mir::Field::new(1)).write_cvalue(fx, has_overflow);\n+    out_place\n+        .place_field(fx, mir::Field::new(1))\n+        .write_cvalue(fx, has_overflow);\n \n     out_place.to_cvalue(fx)\n }"}, {"sha": "35a41dd8a6f6fa1986b01f1797f7f0f917d2f549", "filename": "src/common.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21c52c70b3d8abb9d3995e473ee120a11f3649ff/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c52c70b3d8abb9d3995e473ee120a11f3649ff/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=21c52c70b3d8abb9d3995e473ee120a11f3649ff", "patch": "@@ -303,7 +303,10 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         match layout.ty.sty {\n             TypeVariants::TyArray(elem_ty, _) => {\n                 let elem_layout = fx.layout_of(elem_ty);\n-                let size = fx.bcx.ins().iconst(types::I64, elem_layout.size.bytes() as i64);\n+                let size = fx\n+                    .bcx\n+                    .ins()\n+                    .iconst(types::I64, elem_layout.size.bytes() as i64);\n                 let offset = fx.bcx.ins().imul(size, index);\n                 CPlace::Addr(fx.bcx.ins().iadd(addr, offset), elem_layout)\n             }"}]}