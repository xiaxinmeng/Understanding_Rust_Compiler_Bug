{"sha": "a21b5b25f6aef692968470b9e2aae7600d1f07b4", "node_id": "C_kwDOAAsO6NoAKGEyMWI1YjI1ZjZhZWY2OTI5Njg0NzBiOWUyYWFlNzYwMGQxZjA3YjQ", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-12-01T17:17:38Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-12-01T19:52:41Z"}, "message": "Don't lint `string_lit_as_bytes` in match scrutinees", "tree": {"sha": "3e300deb99cf1d3a1498dca5fa1459d28cc73c6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e300deb99cf1d3a1498dca5fa1459d28cc73c6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a21b5b25f6aef692968470b9e2aae7600d1f07b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a21b5b25f6aef692968470b9e2aae7600d1f07b4", "html_url": "https://github.com/rust-lang/rust/commit/a21b5b25f6aef692968470b9e2aae7600d1f07b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a21b5b25f6aef692968470b9e2aae7600d1f07b4/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d822110d3b5625b9dc80ccc442e06fc3cc851d76", "url": "https://api.github.com/repos/rust-lang/rust/commits/d822110d3b5625b9dc80ccc442e06fc3cc851d76", "html_url": "https://github.com/rust-lang/rust/commit/d822110d3b5625b9dc80ccc442e06fc3cc851d76"}], "stats": {"total": 50, "additions": 36, "deletions": 14}, "files": [{"sha": "bc18cad6d381b0cb165d46e6bd000b7c8305d637", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a21b5b25f6aef692968470b9e2aae7600d1f07b4/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a21b5b25f6aef692968470b9e2aae7600d1f07b4/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=a21b5b25f6aef692968470b9e2aae7600d1f07b4", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::ty::is_type_lang_item;\n+use clippy_utils::{get_expr_use_or_unification_node, peel_blocks, SpanlessEq};\n use clippy_utils::{get_parent_expr, is_lint_allowed, match_function_call, method_calls, paths};\n-use clippy_utils::{peel_blocks, SpanlessEq};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, LangItem, QPath};\n+use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, LangItem, Node, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n@@ -249,6 +249,7 @@ const MAX_LENGTH_BYTE_STRING_LIT: usize = 32;\n declare_lint_pass!(StringLitAsBytes => [STRING_LIT_AS_BYTES, STRING_FROM_UTF8_AS_BYTES]);\n \n impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n+    #[expect(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         use rustc_ast::LitKind;\n \n@@ -316,18 +317,27 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n                     && lit_content.as_str().len() <= MAX_LENGTH_BYTE_STRING_LIT\n                     && !receiver.span.from_expansion()\n                 {\n-                    span_lint_and_sugg(\n-                        cx,\n-                        STRING_LIT_AS_BYTES,\n-                        e.span,\n-                        \"calling `as_bytes()` on a string literal\",\n-                        \"consider using a byte string literal instead\",\n-                        format!(\n-                            \"b{}\",\n-                            snippet_with_applicability(cx, receiver.span, r#\"\"foo\"\"#, &mut applicability)\n-                        ),\n-                        applicability,\n-                    );\n+                    if let Some((parent, id)) = get_expr_use_or_unification_node(cx.tcx, e)\n+                        && let Node::Expr(parent) = parent\n+                        && let ExprKind::Match(scrutinee, ..) = parent.kind\n+                        && scrutinee.hir_id == id\n+                    {\n+                        // Don't lint. Byte strings produce `&[u8; N]` whereas `as_bytes()` produces\n+                        // `&[u8]`. This change would prevent matching with different sized slices.\n+                    } else {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            STRING_LIT_AS_BYTES,\n+                            e.span,\n+                            \"calling `as_bytes()` on a string literal\",\n+                            \"consider using a byte string literal instead\",\n+                            format!(\n+                                \"b{}\",\n+                                snippet_with_applicability(cx, receiver.span, r#\"\"foo\"\"#, &mut applicability)\n+                            ),\n+                            applicability,\n+                        );\n+                    }\n                 }\n             }\n         }"}, {"sha": "506187fc125736f778df20459bfd641c4350901a", "filename": "tests/ui/string_lit_as_bytes.fixed", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a21b5b25f6aef692968470b9e2aae7600d1f07b4/tests%2Fui%2Fstring_lit_as_bytes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a21b5b25f6aef692968470b9e2aae7600d1f07b4/tests%2Fui%2Fstring_lit_as_bytes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.fixed?ref=a21b5b25f6aef692968470b9e2aae7600d1f07b4", "patch": "@@ -25,6 +25,12 @@ fn str_lit_as_bytes() {\n     let includestr = include_bytes!(\"string_lit_as_bytes.rs\");\n \n     let _ = b\"string with newline\\t\\n\";\n+\n+    let _ = match \"x\".as_bytes() {\n+        b\"xx\" => 0,\n+        [b'x', ..] => 1,\n+        _ => 2,\n+    };\n }\n \n fn main() {}"}, {"sha": "2c339f1ddb819334b446e0007f6c5e6146965f29", "filename": "tests/ui/string_lit_as_bytes.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a21b5b25f6aef692968470b9e2aae7600d1f07b4/tests%2Fui%2Fstring_lit_as_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a21b5b25f6aef692968470b9e2aae7600d1f07b4/tests%2Fui%2Fstring_lit_as_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.rs?ref=a21b5b25f6aef692968470b9e2aae7600d1f07b4", "patch": "@@ -25,6 +25,12 @@ fn str_lit_as_bytes() {\n     let includestr = include_str!(\"string_lit_as_bytes.rs\").as_bytes();\n \n     let _ = \"string with newline\\t\\n\".as_bytes();\n+\n+    let _ = match \"x\".as_bytes() {\n+        b\"xx\" => 0,\n+        [b'x', ..] => 1,\n+        _ => 2,\n+    };\n }\n \n fn main() {}"}]}