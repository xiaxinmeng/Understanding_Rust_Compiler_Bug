{"sha": "72e888960f78e3f05cf937bb64a65c602a4430e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZTg4ODk2MGY3OGUzZjA1Y2Y5MzdiYjY0YTY1YzYwMmE0NDMwZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-25T01:51:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-25T01:51:31Z"}, "message": "auto merge of #11764 : Armavica/rust/doc_patmatch, r=pcwalton\n\nI also removed the obsolete '*' wildcard from the manual.", "tree": {"sha": "f6cba4016340b3cd0941ea1518ac5cdd31696207", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6cba4016340b3cd0941ea1518ac5cdd31696207"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72e888960f78e3f05cf937bb64a65c602a4430e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72e888960f78e3f05cf937bb64a65c602a4430e6", "html_url": "https://github.com/rust-lang/rust/commit/72e888960f78e3f05cf937bb64a65c602a4430e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72e888960f78e3f05cf937bb64a65c602a4430e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc48adc69fa86039931244dc8ac0d1633c27c582", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc48adc69fa86039931244dc8ac0d1633c27c582", "html_url": "https://github.com/rust-lang/rust/commit/dc48adc69fa86039931244dc8ac0d1633c27c582"}, {"sha": "7b1d124f6e18a28d2802e485b368ccf3e9116d5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b1d124f6e18a28d2802e485b368ccf3e9116d5d", "html_url": "https://github.com/rust-lang/rust/commit/7b1d124f6e18a28d2802e485b368ccf3e9116d5d"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "27224e6984ccb33f32890d52405454127a43f0e3", "filename": "doc/rust.md", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/72e888960f78e3f05cf937bb64a65c602a4430e6/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/72e888960f78e3f05cf937bb64a65c602a4430e6/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=72e888960f78e3f05cf937bb64a65c602a4430e6", "patch": "@@ -2865,7 +2865,7 @@ match_pat : pat [ \"..\" pat ] ? [ \"if\" expr ] ;\n A `match` expression branches on a *pattern*. The exact form of matching that\n occurs depends on the pattern. Patterns consist of some combination of\n literals, destructured enum constructors, structures, records and tuples, variable binding\n-specifications, wildcards (`*`), and placeholders (`_`). A `match` expression has a *head\n+specifications, wildcards (`..`), and placeholders (`_`). A `match` expression has a *head\n expression*, which is the value to compare to the patterns. The type of the\n patterns must equal the type of the head expression.\n \n@@ -2887,7 +2887,7 @@ match x {\n \n The first pattern matches lists constructed by applying `Cons` to any head value, and a\n tail value of `~Nil`. The second pattern matches _any_ list constructed with `Cons`,\n-ignoring the values of its arguments. The difference between `_` and `*` is that the pattern\n+ignoring the values of its arguments. The difference between `_` and `..` is that the pattern\n `C(_)` is only type-correct if `C` has exactly one argument, while the pattern `C(..)` is\n type-correct for any enum variant `C`, regardless of how many arguments `C` has.\n \n@@ -2939,6 +2939,27 @@ This can be changed to bind to a reference by\n using the `ref` keyword,\n or to a mutable reference using `ref mut`.\n \n+Subpatterns can also be bound to variables by the use of the syntax\n+`variable @ pattern`.\n+For example:\n+\n+~~~~\n+enum List { Nil, Cons(uint, ~List) }\n+\n+fn is_sorted(list: &List) -> bool {\n+    match *list {\n+        Nil | Cons(_, ~Nil) => true,\n+        Cons(x, ref r @ ~Cons(y, _)) => (x <= y) && is_sorted(*r)\n+    }\n+}\n+\n+fn main() {\n+    let a = Cons(6, ~Cons(7, ~Cons(42, ~Nil)));\n+    assert!(is_sorted(&a));\n+}\n+\n+~~~~\n+\n Patterns can also dereference pointers by using the `&`,\n `~` or `@` symbols, as appropriate. For example, these two matches\n on `x: &int` are equivalent:"}, {"sha": "3c8d721626ee89523224e32b9578ce33d98ea8ed", "filename": "doc/tutorial.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72e888960f78e3f05cf937bb64a65c602a4430e6/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/72e888960f78e3f05cf937bb64a65c602a4430e6/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=72e888960f78e3f05cf937bb64a65c602a4430e6", "patch": "@@ -520,6 +520,16 @@ to the value of the matched value inside of the arm's action. Thus, `(0.0,\n y)` matches any tuple whose first element is zero, and binds `y` to\n the second element. `(x, y)` matches any two-element tuple, and binds both\n elements to variables.\n+A subpattern can also be bound to a variable, using `variable @ pattern`. For\n+example:\n+\n+~~~~\n+# let age = 23;\n+match age {\n+    a @ 0..20 => println!(\"{} years old\", a),\n+    _ => println!(\"older than 21\")\n+}\n+~~~~\n \n Any `match` arm can have a guard clause (written `if EXPR`), called a\n *pattern guard*, which is an expression of type `bool` that"}]}