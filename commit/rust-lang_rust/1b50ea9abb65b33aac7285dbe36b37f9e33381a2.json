{"sha": "1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "node_id": "C_kwDOAAsO6NoAKDFiNTBlYTlhYmI2NWIzM2FhYzcyODVkYmUzNmIzN2Y5ZTMzMzgxYTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-16T10:57:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-16T10:57:28Z"}, "message": "Auto merge of #110401 - fee1-dead-contrib:rollup-1f2smz2, r=fee1-dead\n\nRollup of 3 pull requests\n\nSuccessful merges:\n\n - #109665 (Remove `remap_env_constness` in queries)\n - #110345 (Remove `TypeSuper{Foldable,Visitable}` impls for `Region`.)\n - #110396 (Use lint via `lint_defs` instead of `lints`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "470812612f11875dc2c4c766273a787482ce9fe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/470812612f11875dc2c4c766273a787482ce9fe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "html_url": "https://github.com/rust-lang/rust/commit/1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18109d5032b0fd95ae81e30857a71e31e263044a", "url": "https://api.github.com/repos/rust-lang/rust/commits/18109d5032b0fd95ae81e30857a71e31e263044a", "html_url": "https://github.com/rust-lang/rust/commit/18109d5032b0fd95ae81e30857a71e31e263044a"}, {"sha": "7fb14ae84d927c54bcfea57f03ba38fd86326cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb14ae84d927c54bcfea57f03ba38fd86326cb0", "html_url": "https://github.com/rust-lang/rust/commit/7fb14ae84d927c54bcfea57f03ba38fd86326cb0"}], "stats": {"total": 216, "additions": 79, "deletions": 137}, "files": [{"sha": "094eb6fa67efb3f8373d7dfc9da4b5d8909b6d94", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -4775,7 +4775,7 @@ dependencies = [\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_infer\",\n- \"rustc_lint\",\n+ \"rustc_lint_defs\",\n  \"rustc_macros\",\n  \"rustc_middle\",\n  \"rustc_session\","}, {"sha": "a64466884d8b2c5ad6a5cc0bfd78a582a6b0488b", "filename": "compiler/rustc_hir_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_hir_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_hir_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2FCargo.toml?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -23,7 +23,7 @@ rustc_span = { path = \"../rustc_span\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }\n-rustc_lint = { path = \"../rustc_lint\" }\n+rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n rustc_type_ir = { path = \"../rustc_type_ir\" }\n rustc_feature = { path = \"../rustc_feature\" }\n thin-vec = \"0.2.12\""}, {"sha": "0c54fd70c9b5e428493258c29200060944c674d0", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -15,7 +15,7 @@ use rustc_infer::infer::opaque_types::ConstrainOpaqueTypeRegionVisitor;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::{DefiningAnchor, RegionVariableOrigin, TyCtxtInferExt};\n use rustc_infer::traits::{Obligation, TraitEngineExt as _};\n-use rustc_lint::builtin::REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS;\n+use rustc_lint_defs::builtin::REPR_TRANSPARENT_EXTERNAL_PRIVATE_FIELDS;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::stability::EvalResult;\n use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};"}, {"sha": "4d240e90b143ddbe4e1de80b3a58048de78c7075", "filename": "compiler/rustc_hir_analysis/src/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Fmod.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -105,7 +105,7 @@ fn variance_of_opaque(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[ty::Varianc\n             if let ty::RegionKind::ReEarlyBound(ebr) = r.kind() {\n                 self.variances[ebr.index as usize] = ty::Invariant;\n             }\n-            r.super_visit_with(self)\n+            ControlFlow::Continue(())\n         }\n \n         #[instrument(level = \"trace\", skip(self), ret)]"}, {"sha": "ce70bcc5c8511635415b7d6dfc8e7a8651d1411b", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/trait_impl_difference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ftrait_impl_difference.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -13,7 +13,7 @@ use rustc_hir::intravisit::Visitor;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::print::RegionHighlightMode;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeSuperVisitable, TypeVisitor};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n use rustc_span::Span;\n \n use std::ops::ControlFlow;\n@@ -81,7 +81,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                     self.highlight.highlighting_region(r, self.counter);\n                     self.counter += 1;\n                 }\n-                r.super_visit_with(self)\n+                ControlFlow::Continue(())\n             }\n         }\n "}, {"sha": "a8b25ff66d7881c1020449cd94b442366d1339dc", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -112,9 +112,6 @@ struct QueryModifiers {\n     /// Use a separate query provider for local and extern crates\n     separate_provide_extern: Option<Ident>,\n \n-    /// Always remap the ParamEnv's constness before hashing.\n-    remap_env_constness: Option<Ident>,\n-\n     /// Generate a `feed` method to set the query's value from another query.\n     feedable: Option<Ident>,\n }\n@@ -130,7 +127,6 @@ fn parse_query_modifiers(input: ParseStream<'_>) -> Result<QueryModifiers> {\n     let mut eval_always = None;\n     let mut depth_limit = None;\n     let mut separate_provide_extern = None;\n-    let mut remap_env_constness = None;\n     let mut feedable = None;\n \n     while !input.is_empty() {\n@@ -189,8 +185,6 @@ fn parse_query_modifiers(input: ParseStream<'_>) -> Result<QueryModifiers> {\n             try_insert!(depth_limit = modifier);\n         } else if modifier == \"separate_provide_extern\" {\n             try_insert!(separate_provide_extern = modifier);\n-        } else if modifier == \"remap_env_constness\" {\n-            try_insert!(remap_env_constness = modifier);\n         } else if modifier == \"feedable\" {\n             try_insert!(feedable = modifier);\n         } else {\n@@ -211,7 +205,6 @@ fn parse_query_modifiers(input: ParseStream<'_>) -> Result<QueryModifiers> {\n         eval_always,\n         depth_limit,\n         separate_provide_extern,\n-        remap_env_constness,\n         feedable,\n     })\n }\n@@ -332,7 +325,6 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n             eval_always,\n             depth_limit,\n             separate_provide_extern,\n-            remap_env_constness,\n         );\n \n         if modifiers.cache.is_some() {"}, {"sha": "e63121475a15129f1d93c5f4ef208595d3dee3dc", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -348,14 +348,6 @@ impl<'tcx, R> Canonical<'tcx, QueryResponse<'tcx, R>> {\n     }\n }\n \n-impl<'tcx, R> Canonical<'tcx, ty::ParamEnvAnd<'tcx, R>> {\n-    #[inline]\n-    pub fn without_const(mut self) -> Self {\n-        self.value = self.value.without_const();\n-        self\n-    }\n-}\n-\n impl<'tcx, V> Canonical<'tcx, V> {\n     /// Allows you to map the `value` of a canonical while keeping the\n     /// same set of bound variables."}, {"sha": "6fc9190b0905da439895ef767cd27cbb586c9235", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -1094,7 +1094,6 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>\n     ) -> Option<mir::DestructuredConstant<'tcx>> {\n         desc { \"destructuring MIR constant\"}\n-        remap_env_constness\n     }\n \n     /// Dereference a constant reference or raw pointer and turn the result into a constant\n@@ -1103,7 +1102,6 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, mir::ConstantKind<'tcx>>\n     ) -> mir::ConstantKind<'tcx> {\n         desc { \"dereferencing MIR constant\" }\n-        remap_env_constness\n     }\n \n     query const_caller_location(key: (rustc_span::Symbol, u32, u32)) -> ConstValue<'tcx> {\n@@ -1346,32 +1344,26 @@ rustc_queries! {\n     /// `ty.is_copy()`, etc, since that will prune the environment where possible.\n     query is_copy_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` is `Copy`\", env.value }\n-        remap_env_constness\n     }\n     /// Query backing `Ty::is_sized`.\n     query is_sized_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` is `Sized`\", env.value }\n-        remap_env_constness\n     }\n     /// Query backing `Ty::is_freeze`.\n     query is_freeze_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` is freeze\", env.value }\n-        remap_env_constness\n     }\n     /// Query backing `Ty::is_unpin`.\n     query is_unpin_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` is `Unpin`\", env.value }\n-        remap_env_constness\n     }\n     /// Query backing `Ty::needs_drop`.\n     query needs_drop_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` needs drop\", env.value }\n-        remap_env_constness\n     }\n     /// Query backing `Ty::has_significant_drop_raw`.\n     query has_significant_drop_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` has a significant drop\", env.value }\n-        remap_env_constness\n     }\n \n     /// Query backing `Ty::is_structural_eq_shallow`.\n@@ -1411,7 +1403,6 @@ rustc_queries! {\n     ) -> Result<ty::layout::TyAndLayout<'tcx>, ty::layout::LayoutError<'tcx>> {\n         depth_limit\n         desc { \"computing layout of `{}`\", key.value }\n-        remap_env_constness\n     }\n \n     /// Compute a `FnAbi` suitable for indirect calls, i.e. to `fn` pointers.\n@@ -1422,7 +1413,6 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>)>\n     ) -> Result<&'tcx abi::call::FnAbi<'tcx, Ty<'tcx>>, ty::layout::FnAbiError<'tcx>> {\n         desc { \"computing call ABI of `{}` function pointers\", key.value.0 }\n-        remap_env_constness\n     }\n \n     /// Compute a `FnAbi` suitable for declaring/defining an `fn` instance, and for\n@@ -1434,7 +1424,6 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>)>\n     ) -> Result<&'tcx abi::call::FnAbi<'tcx, Ty<'tcx>>, ty::layout::FnAbiError<'tcx>> {\n         desc { \"computing call ABI of `{}`\", key.value.0 }\n-        remap_env_constness\n     }\n \n     query dylib_dependency_formats(_: CrateNum)\n@@ -1937,15 +1926,13 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"normalizing `{}`\", goal.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly: invoke `try_normalize_erasing_regions` instead.\n     query try_normalize_generic_arg_after_erasing_regions(\n         goal: ParamEnvAnd<'tcx, GenericArg<'tcx>>\n     ) -> Result<GenericArg<'tcx>, NoSolution> {\n         desc { \"normalizing `{}`\", goal.value }\n-        remap_env_constness\n     }\n \n     query implied_outlives_bounds(\n@@ -1955,7 +1942,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"computing implied outlives bounds for `{}`\", goal.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly:\n@@ -1967,7 +1953,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"computing dropck types for `{}`\", goal.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly: invoke `infcx.predicate_may_hold()` or\n@@ -1995,7 +1980,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"evaluating `type_op_ascribe_user_type` `{:?}`\", goal.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `Eq` type-op\n@@ -2006,7 +1990,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"evaluating `type_op_eq` `{:?}`\", goal.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `Subtype` type-op\n@@ -2017,7 +2000,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"evaluating `type_op_subtype` `{:?}`\", goal.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `ProvePredicate` type-op\n@@ -2038,7 +2020,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"normalizing `{}`\", goal.value.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `Normalize` type-op\n@@ -2049,7 +2030,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"normalizing `{:?}`\", goal.value.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `Normalize` type-op\n@@ -2060,7 +2040,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"normalizing `{:?}`\", goal.value.value.value }\n-        remap_env_constness\n     }\n \n     /// Do not call this query directly: part of the `Normalize` type-op\n@@ -2071,7 +2050,6 @@ rustc_queries! {\n         NoSolution,\n     > {\n         desc { \"normalizing `{:?}`\", goal.value.value.value }\n-        remap_env_constness\n     }\n \n     query subst_and_check_impossible_predicates(key: (DefId, SubstsRef<'tcx>)) -> bool {\n@@ -2093,7 +2071,6 @@ rustc_queries! {\n         goal: CanonicalTyGoal<'tcx>\n     ) -> MethodAutoderefStepsResult<'tcx> {\n         desc { \"computing autoderef types for `{}`\", goal.value.value }\n-        remap_env_constness\n     }\n \n     query supported_target_features(_: CrateNum) -> &'tcx FxHashMap<String, Option<Symbol>> {\n@@ -2138,7 +2115,6 @@ rustc_queries! {\n         key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>\n     ) -> Result<Option<ty::Instance<'tcx>>, ErrorGuaranteed> {\n         desc { \"resolving instance `{}`\", ty::Instance::new(key.value.0, key.value.1) }\n-        remap_env_constness\n     }\n \n     query resolve_instance_of_const_arg(\n@@ -2148,7 +2124,6 @@ rustc_queries! {\n             \"resolving instance of the const argument `{}`\",\n             ty::Instance::new(key.value.0.to_def_id(), key.value.2),\n         }\n-        remap_env_constness\n     }\n \n     query reveal_opaque_types_in_bounds(key: &'tcx ty::List<ty::Predicate<'tcx>>) -> &'tcx ty::List<ty::Predicate<'tcx>> {"}, {"sha": "25890eb15cde49d0e01b0ae908822cd624ccfafa", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -37,7 +37,8 @@ where\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        let r = r.super_fold_with(self);\n+        // This one is a little different, because `super_fold_with` is not\n+        // implemented on non-recursive `Region`.\n         (self.lt_op)(r)\n     }\n "}, {"sha": "bc202b027bd29891efb18bbcc4fbbd9be4b6eba2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -1850,12 +1850,6 @@ impl<'tcx, T> ParamEnvAnd<'tcx, T> {\n     pub fn into_parts(self) -> (ParamEnv<'tcx>, T) {\n         (self.param_env, self.value)\n     }\n-\n-    #[inline]\n-    pub fn without_const(mut self) -> Self {\n-        self.param_env = self.param_env.without_const();\n-        self\n-    }\n }\n \n #[derive(Copy, Clone, Debug, HashStable, Encodable, Decodable)]"}, {"sha": "af76cf7cc4e0d78b3396ab4f2de7d8a81aff5c7f", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -2518,7 +2518,7 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n                     self.used_region_names.insert(name);\n                 }\n \n-                r.super_visit_with(self)\n+                ControlFlow::Continue(())\n             }\n \n             // We collect types in order to prevent really large types from compiling for"}, {"sha": "97592cbc567d7825f319bbe6066f16a257bd55c1", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -202,16 +202,6 @@ macro_rules! separate_provide_extern_default {\n     };\n }\n \n-macro_rules! opt_remap_env_constness {\n-    ([][$name:ident]) => {};\n-    ([(remap_env_constness) $($rest:tt)*][$name:ident]) => {\n-        let $name = $name.without_const();\n-    };\n-    ([$other:tt $($modifiers:tt)*][$name:ident]) => {\n-        opt_remap_env_constness!([$($modifiers)*][$name])\n-    };\n-}\n-\n macro_rules! define_callbacks {\n     (\n      $($(#[$attr:meta])*\n@@ -353,7 +343,6 @@ macro_rules! define_callbacks {\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n                 let key = key.into_query_param();\n-                opt_remap_env_constness!([$($modifiers)*][key]);\n \n                 match try_get_cached(self.tcx, &self.tcx.query_system.caches.$name, &key) {\n                     Some(_) => return,\n@@ -372,7 +361,6 @@ macro_rules! define_callbacks {\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n                 let key = key.into_query_param();\n-                opt_remap_env_constness!([$($modifiers)*][key]);\n \n                 match try_get_cached(self.tcx, &self.tcx.query_system.caches.$name, &key) {\n                     Some(_) => return,\n@@ -402,7 +390,6 @@ macro_rules! define_callbacks {\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> $V\n             {\n                 let key = key.into_query_param();\n-                opt_remap_env_constness!([$($modifiers)*][key]);\n \n                 restore::<$V>(match try_get_cached(self.tcx, &self.tcx.query_system.caches.$name, &key) {\n                     Some(value) => value,\n@@ -492,7 +479,6 @@ macro_rules! define_feedable {\n             #[inline(always)]\n             pub fn $name(self, value: query_provided::$name<'tcx>) -> $V {\n                 let key = self.key().into_query_param();\n-                opt_remap_env_constness!([$($modifiers)*][key]);\n \n                 let tcx = self.tcx;\n                 let erased = query_provided_to_value::$name(tcx, value);"}, {"sha": "619fcea8b7d4b6e9f8ca5b894e52c74a9781b6c9", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -583,24 +583,6 @@ impl<'tcx> TypeVisitable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n-    fn try_super_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n-        self,\n-        _folder: &mut F,\n-    ) -> Result<Self, F::Error> {\n-        Ok(self)\n-    }\n-}\n-\n-impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n-    fn super_visit_with<V: TypeVisitor<TyCtxt<'tcx>>>(\n-        &self,\n-        _visitor: &mut V,\n-    ) -> ControlFlow<V::BreakTy> {\n-        ControlFlow::Continue(())\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<TyCtxt<'tcx>>>(\n         self,"}, {"sha": "24a1f04c7e3887d06047121168758bcaf6e8d638", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -364,7 +364,7 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for ValidateBoundVars<'tcx> {\n             _ => (),\n         };\n \n-        r.super_visit_with(self)\n+        ControlFlow::Continue(())\n     }\n }\n "}, {"sha": "ed82b9c0152778dc4a4ac4b64f687e1ab451da29", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -450,7 +450,7 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n             {\n                 return ControlFlow::Break(());\n             }\n-            r.super_visit_with(self)\n+            ControlFlow::Continue(())\n         }\n         fn visit_const(&mut self, ct: ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n             if let ty::ConstKind::Param(param) = ct.kind()"}, {"sha": "baa2fbb6751c3c3419b5440663237f7193af67d2", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/prove_predicate.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fprove_predicate.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -32,14 +32,8 @@ impl<'tcx> super::QueryTypeOp<'tcx> for ProvePredicate<'tcx> {\n \n     fn perform_query(\n         tcx: TyCtxt<'tcx>,\n-        mut canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n+        canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, Self>>,\n     ) -> Fallible<CanonicalQueryResponse<'tcx, ()>> {\n-        match canonicalized.value.value.predicate.kind().skip_binder() {\n-            ty::PredicateKind::Clause(ty::Clause::Trait(pred)) => {\n-                canonicalized.value.param_env.remap_constness_with(pred.constness);\n-            }\n-            _ => canonicalized.value.param_env = canonicalized.value.param_env.without_const(),\n-        }\n         tcx.type_op_prove_predicate(canonicalized)\n     }\n }"}, {"sha": "31eea22d72b880809ab0b7293cca490e951ef7d9", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -998,7 +998,7 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for BoundVarsCollector<'tcx> {\n             _ => (),\n         };\n \n-        r.super_visit_with(self)\n+        ControlFlow::Continue(())\n     }\n }\n \n@@ -1048,7 +1048,7 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for NamedBoundVarSubstitutor<'a, 'tcx> {\n             _ => (),\n         };\n \n-        r.super_fold_with(self)\n+        r\n     }\n }\n \n@@ -1142,7 +1142,7 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ParamsSubstitutor<'tcx> {\n                 }\n             },\n \n-            _ => r.super_fold_with(self),\n+            _ => r,\n         }\n     }\n }\n@@ -1223,6 +1223,6 @@ impl<'tcx> TypeVisitor<TyCtxt<'tcx>> for PlaceholdersCollector {\n             _ => (),\n         };\n \n-        r.super_visit_with(self)\n+        ControlFlow::Continue(())\n     }\n }"}, {"sha": "19622112f2a28d446c20ef75db87e9f2d1ce040f", "filename": "compiler/rustc_traits/src/type_op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Ftype_op.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -89,6 +89,7 @@ fn relate_mir_and_user_substs<'tcx>(\n     def_id: hir::def_id::DefId,\n     user_substs: UserSubsts<'tcx>,\n ) -> Result<(), NoSolution> {\n+    let param_env = param_env.without_const();\n     let UserSubsts { user_self_ty, substs } = user_substs;\n     let tcx = ocx.infcx.tcx;\n     let cause = ObligationCause::dummy_with_span(span);"}, {"sha": "371c611912286bca3d10af8840b54ce72e55559b", "filename": "compiler/rustc_type_ir/src/fold.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Ffold.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -16,8 +16,10 @@\n //!   - Types of interest, for which the methods delegate to the folder.\n //!   - All other types, including generic containers like `Vec` and `Option`.\n //!     It defines a \"skeleton\" of how they should be folded.\n-//! - `TypeSuperFoldable`. This is implemented only for each type of interest,\n-//!   and defines the folding \"skeleton\" for these types.\n+//! - `TypeSuperFoldable`. This is implemented only for recursive types of\n+//!   interest, and defines the folding \"skeleton\" for these types. (This\n+//!   excludes `Region` because it is non-recursive, i.e. it never contains\n+//!   other types of interest.)\n //! - `TypeFolder`/`FallibleTypeFolder`. One of these is implemented for each\n //!   folder. This defines how types of interest are folded.\n //!\n@@ -72,9 +74,9 @@ pub trait TypeFoldable<I: Interner>: TypeVisitable<I> {\n \n // This trait is implemented for types of interest.\n pub trait TypeSuperFoldable<I: Interner>: TypeFoldable<I> {\n-    /// Provides a default fold for a type of interest. This should only be\n-    /// called within `TypeFolder` methods, when a non-custom traversal is\n-    /// desired for the value of the type of interest passed to that method.\n+    /// Provides a default fold for a recursive type of interest. This should\n+    /// only be called within `TypeFolder` methods, when a non-custom traversal\n+    /// is desired for the value of the type of interest passed to that method.\n     /// For example, in `MyFolder::try_fold_ty(ty)`, it is valid to call\n     /// `ty.try_super_fold_with(self)`, but any other folding should be done\n     /// with `xyz.try_fold_with(self)`.\n@@ -118,11 +120,11 @@ pub trait TypeFolder<I: Interner>: FallibleTypeFolder<I, Error = !> {\n         t.super_fold_with(self)\n     }\n \n-    fn fold_region(&mut self, r: I::Region) -> I::Region\n-    where\n-        I::Region: TypeSuperFoldable<I>,\n-    {\n-        r.super_fold_with(self)\n+    // The default region folder is a no-op because `Region` is non-recursive\n+    // and has no `super_visit_with` method to call. That also explains the\n+    // lack of `I::Region: TypeSuperFoldable<I>` bound on this method.\n+    fn fold_region(&mut self, r: I::Region) -> I::Region {\n+        r\n     }\n \n     fn fold_const(&mut self, c: I::Const) -> I::Const\n@@ -167,11 +169,11 @@ pub trait FallibleTypeFolder<I: Interner>: Sized {\n         t.try_super_fold_with(self)\n     }\n \n-    fn try_fold_region(&mut self, r: I::Region) -> Result<I::Region, Self::Error>\n-    where\n-        I::Region: TypeSuperFoldable<I>,\n-    {\n-        r.try_super_fold_with(self)\n+    // The default region folder is a no-op because `Region` is non-recursive\n+    // and has no `super_visit_with` method to call. That also explains the\n+    // lack of `I::Region: TypeSuperFoldable<I>` bound on this method.\n+    fn try_fold_region(&mut self, r: I::Region) -> Result<I::Region, Self::Error> {\n+        Ok(r)\n     }\n \n     fn try_fold_const(&mut self, c: I::Const) -> Result<I::Const, Self::Error>\n@@ -216,10 +218,7 @@ where\n         Ok(self.fold_ty(t))\n     }\n \n-    fn try_fold_region(&mut self, r: I::Region) -> Result<I::Region, !>\n-    where\n-        I::Region: TypeSuperFoldable<I>,\n-    {\n+    fn try_fold_region(&mut self, r: I::Region) -> Result<I::Region, !> {\n         Ok(self.fold_region(r))\n     }\n "}, {"sha": "878c7aec6c18e4aa65221424f6fa51d504e499ec", "filename": "compiler/rustc_type_ir/src/visit.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_type_ir%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/compiler%2Frustc_type_ir%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Fvisit.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -13,8 +13,11 @@\n //!   - Types of interest, for which the methods delegate to the visitor.\n //!   - All other types, including generic containers like `Vec` and `Option`.\n //!     It defines a \"skeleton\" of how they should be visited.\n-//! - `TypeSuperVisitable`. This is implemented only for each type of interest,\n-//!   and defines the visiting \"skeleton\" for these types.\n+//! - `TypeSuperVisitable`. This is implemented only for recursive types of\n+//!   interest, and defines the visiting \"skeleton\" for these types. (This\n+//!   excludes `Region` because it is non-recursive, i.e. it never contains\n+//!   other types of interest.)\n+//!\n //! - `TypeVisitor`. This is implemented for each visitor. This defines how\n //!   types of interest are visited.\n //!\n@@ -62,12 +65,13 @@ pub trait TypeVisitable<I: Interner>: fmt::Debug + Clone {\n     fn visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n }\n \n+// This trait is implemented for types of interest.\n pub trait TypeSuperVisitable<I: Interner>: TypeVisitable<I> {\n-    /// Provides a default visit for a type of interest. This should only be\n-    /// called within `TypeVisitor` methods, when a non-custom traversal is\n-    /// desired for the value of the type of interest passed to that method.\n-    /// For example, in `MyVisitor::visit_ty(ty)`, it is valid to call\n-    /// `ty.super_visit_with(self)`, but any other visiting should be done\n+    /// Provides a default visit for a recursive type of interest. This should\n+    /// only be called within `TypeVisitor` methods, when a non-custom\n+    /// traversal is desired for the value of the type of interest passed to\n+    /// that method. For example, in `MyVisitor::visit_ty(ty)`, it is valid to\n+    /// call `ty.super_visit_with(self)`, but any other visiting should be done\n     /// with `xyz.visit_with(self)`.\n     fn super_visit_with<V: TypeVisitor<I>>(&self, visitor: &mut V) -> ControlFlow<V::BreakTy>;\n }\n@@ -92,11 +96,11 @@ pub trait TypeVisitor<I: Interner>: Sized {\n         t.super_visit_with(self)\n     }\n \n-    fn visit_region(&mut self, r: I::Region) -> ControlFlow<Self::BreakTy>\n-    where\n-        I::Region: TypeSuperVisitable<I>,\n-    {\n-        r.super_visit_with(self)\n+    // The default region visitor is a no-op because `Region` is non-recursive\n+    // and has no `super_visit_with` method to call. That also explains the\n+    // lack of `I::Region: TypeSuperVisitable<I>` bound.\n+    fn visit_region(&mut self, _r: I::Region) -> ControlFlow<Self::BreakTy> {\n+        ControlFlow::Continue(())\n     }\n \n     fn visit_const(&mut self, c: I::Const) -> ControlFlow<Self::BreakTy>"}, {"sha": "f6088f4e64a4114e853b55df697864ec078dc3db", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -1,7 +1,7 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n-use rustc_middle::ty::{self, Region, RegionVid, TypeFoldable, TypeSuperFoldable};\n+use rustc_middle::ty::{self, Region, RegionVid, TypeFoldable};\n use rustc_trait_selection::traits::auto_trait::{self, AutoTraitResult};\n use thin_vec::ThinVec;\n \n@@ -740,10 +740,9 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for RegionReplacer<'a, 'tcx> {\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n-        (match *r {\n-            ty::ReVar(vid) => self.vid_to_region.get(&vid).cloned(),\n-            _ => None,\n-        })\n-        .unwrap_or_else(|| r.super_fold_with(self))\n+        match *r {\n+            ty::ReVar(vid) => self.vid_to_region.get(&vid).cloned().unwrap_or(r),\n+            _ => r,\n+        }\n     }\n }"}, {"sha": "7d7cb967c66199d8fd12c0b280b922d82efddc0f", "filename": "tests/ui/rfc-2632-const-trait-impl/trait-method-ptr-in-consts-ice.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/tests%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-method-ptr-in-consts-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b50ea9abb65b33aac7285dbe36b37f9e33381a2/tests%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-method-ptr-in-consts-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Ftrait-method-ptr-in-consts-ice.rs?ref=1b50ea9abb65b33aac7285dbe36b37f9e33381a2", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+\n+struct LazyLock<T> {\n+    data: (Option<T>, fn() -> T),\n+}\n+\n+impl<T> LazyLock<T> {\n+    pub const fn new(f: fn() -> T) -> LazyLock<T> {\n+        LazyLock { data: (None, f) }\n+    }\n+}\n+\n+struct A<T = i32>(Option<T>);\n+\n+impl<T> Default for A<T> {\n+    fn default() -> Self {\n+        A(None)\n+    }\n+}\n+\n+static EMPTY_SET: LazyLock<A<i32>> = LazyLock::new(A::default);\n+\n+fn main() {}"}]}