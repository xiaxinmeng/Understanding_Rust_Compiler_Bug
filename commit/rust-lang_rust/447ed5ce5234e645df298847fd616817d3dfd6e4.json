{"sha": "447ed5ce5234e645df298847fd616817d3dfd6e4", "node_id": "C_kwDOAAsO6NoAKDQ0N2VkNWNlNTIzNGU2NDVkZjI5ODg0N2ZkNjE2ODE3ZDNkZmQ2ZTQ", "commit": {"author": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-01-30T06:39:47Z"}, "committer": {"name": "tamaron", "email": "tamaron1203@gmail.com", "date": "2022-01-30T06:39:47Z"}, "message": "add attributes", "tree": {"sha": "01f16dbd5d611d75566e486e7b8336ec2a12c08e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01f16dbd5d611d75566e486e7b8336ec2a12c08e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/447ed5ce5234e645df298847fd616817d3dfd6e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/447ed5ce5234e645df298847fd616817d3dfd6e4", "html_url": "https://github.com/rust-lang/rust/commit/447ed5ce5234e645df298847fd616817d3dfd6e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/447ed5ce5234e645df298847fd616817d3dfd6e4/comments", "author": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamaroning", "id": 20992019, "node_id": "MDQ6VXNlcjIwOTkyMDE5", "avatar_url": "https://avatars.githubusercontent.com/u/20992019?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamaroning", "html_url": "https://github.com/tamaroning", "followers_url": "https://api.github.com/users/tamaroning/followers", "following_url": "https://api.github.com/users/tamaroning/following{/other_user}", "gists_url": "https://api.github.com/users/tamaroning/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamaroning/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamaroning/subscriptions", "organizations_url": "https://api.github.com/users/tamaroning/orgs", "repos_url": "https://api.github.com/users/tamaroning/repos", "events_url": "https://api.github.com/users/tamaroning/events{/privacy}", "received_events_url": "https://api.github.com/users/tamaroning/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df6ef6059bb977cf57223495dde31d346b22d5f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/df6ef6059bb977cf57223495dde31d346b22d5f9", "html_url": "https://github.com/rust-lang/rust/commit/df6ef6059bb977cf57223495dde31d346b22d5f9"}], "stats": {"total": 82, "additions": 29, "deletions": 53}, "files": [{"sha": "c3a36dcabd1a9392278988dd9150ddd69a847649", "filename": "tests/ui/get_unwrap.fixed", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/447ed5ce5234e645df298847fd616817d3dfd6e4/tests%2Fui%2Fget_unwrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/447ed5ce5234e645df298847fd616817d3dfd6e4/tests%2Fui%2Fget_unwrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.fixed?ref=447ed5ce5234e645df298847fd616817d3dfd6e4", "patch": "@@ -39,6 +39,7 @@ fn main() {\n         let _ = &some_vecdeque[0];\n         let _ = &some_hashmap[&1];\n         let _ = &some_btreemap[&1];\n+        #[allow(clippy::unwrap_used)]\n         let _ = false_positive.get(0).unwrap();\n         // Test with deref\n         let _: u8 = boxed_slice[1];\n@@ -51,9 +52,12 @@ fn main() {\n         some_vec[0] = 1;\n         some_vecdeque[0] = 1;\n         // Check false positives\n-        *some_hashmap.get_mut(&1).unwrap() = 'b';\n-        *some_btreemap.get_mut(&1).unwrap() = 'b';\n-        *false_positive.get_mut(0).unwrap() = 1;\n+        #[allow(clippy::unwrap_used)]\n+        {\n+            *some_hashmap.get_mut(&1).unwrap() = 'b';\n+            *some_btreemap.get_mut(&1).unwrap() = 'b';\n+            *false_positive.get_mut(0).unwrap() = 1;\n+        }\n     }\n \n     {"}, {"sha": "d77a202aa39c3455026a095bd64e71b56c13fa40", "filename": "tests/ui/get_unwrap.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/447ed5ce5234e645df298847fd616817d3dfd6e4/tests%2Fui%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447ed5ce5234e645df298847fd616817d3dfd6e4/tests%2Fui%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.rs?ref=447ed5ce5234e645df298847fd616817d3dfd6e4", "patch": "@@ -39,6 +39,7 @@ fn main() {\n         let _ = some_vecdeque.get(0).unwrap();\n         let _ = some_hashmap.get(&1).unwrap();\n         let _ = some_btreemap.get(&1).unwrap();\n+        #[allow(clippy::unwrap_used)]\n         let _ = false_positive.get(0).unwrap();\n         // Test with deref\n         let _: u8 = *boxed_slice.get(1).unwrap();\n@@ -51,9 +52,12 @@ fn main() {\n         *some_vec.get_mut(0).unwrap() = 1;\n         *some_vecdeque.get_mut(0).unwrap() = 1;\n         // Check false positives\n-        *some_hashmap.get_mut(&1).unwrap() = 'b';\n-        *some_btreemap.get_mut(&1).unwrap() = 'b';\n-        *false_positive.get_mut(0).unwrap() = 1;\n+        #[allow(clippy::unwrap_used)]\n+        {\n+            *some_hashmap.get_mut(&1).unwrap() = 'b';\n+            *some_btreemap.get_mut(&1).unwrap() = 'b';\n+            *false_positive.get_mut(0).unwrap() = 1;\n+        }\n     }\n \n     {"}, {"sha": "cb5f44fbd59ee6114a6f339a533c93cf24dbd5a9", "filename": "tests/ui/get_unwrap.stderr", "status": "modified", "additions": 15, "deletions": 47, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/447ed5ce5234e645df298847fd616817d3dfd6e4/tests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/447ed5ce5234e645df298847fd616817d3dfd6e4/tests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_unwrap.stderr?ref=447ed5ce5234e645df298847fd616817d3dfd6e4", "patch": "@@ -89,135 +89,103 @@ LL |         let _ = some_btreemap.get(&1).unwrap();\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n-error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:42:17\n-   |\n-LL |         let _ = false_positive.get(0).unwrap();\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n-\n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:44:21\n+  --> $DIR/get_unwrap.rs:45:21\n    |\n LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:44:22\n+  --> $DIR/get_unwrap.rs:45:22\n    |\n LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:49:9\n+  --> $DIR/get_unwrap.rs:50:9\n    |\n LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:49:10\n+  --> $DIR/get_unwrap.rs:50:10\n    |\n LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:50:9\n+  --> $DIR/get_unwrap.rs:51:9\n    |\n LL |         *some_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_slice[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:50:10\n+  --> $DIR/get_unwrap.rs:51:10\n    |\n LL |         *some_slice.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:51:9\n+  --> $DIR/get_unwrap.rs:52:9\n    |\n LL |         *some_vec.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:51:10\n+  --> $DIR/get_unwrap.rs:52:10\n    |\n LL |         *some_vec.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:52:9\n+  --> $DIR/get_unwrap.rs:53:9\n    |\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vecdeque[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:52:10\n+  --> $DIR/get_unwrap.rs:53:10\n    |\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n-error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:54:10\n-   |\n-LL |         *some_hashmap.get_mut(&1).unwrap() = 'b';\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n-\n-error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:55:10\n-   |\n-LL |         *some_btreemap.get_mut(&1).unwrap() = 'b';\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n-\n-error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:56:10\n-   |\n-LL |         *false_positive.get_mut(0).unwrap() = 1;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n-\n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:61:17\n+  --> $DIR/get_unwrap.rs:65:17\n    |\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:61:17\n+  --> $DIR/get_unwrap.rs:65:17\n    |\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:62:17\n+  --> $DIR/get_unwrap.rs:66:17\n    |\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:62:17\n+  --> $DIR/get_unwrap.rs:66:17\n    |\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n-error: aborting due to 30 previous errors\n+error: aborting due to 26 previous errors\n "}]}