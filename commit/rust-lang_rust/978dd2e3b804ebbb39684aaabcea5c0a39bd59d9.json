{"sha": "978dd2e3b804ebbb39684aaabcea5c0a39bd59d9", "node_id": "C_kwDOAAsO6NoAKDk3OGRkMmUzYjgwNGViYmIzOTY4NGFhYWJjZWE1YzBhMzliZDU5ZDk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-21T05:53:55Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-21T06:06:46Z"}, "message": "Rename things to be a bit clearer", "tree": {"sha": "ec39375c0b3af674f117a5b1a843bed537822d24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec39375c0b3af674f117a5b1a843bed537822d24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/978dd2e3b804ebbb39684aaabcea5c0a39bd59d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/978dd2e3b804ebbb39684aaabcea5c0a39bd59d9", "html_url": "https://github.com/rust-lang/rust/commit/978dd2e3b804ebbb39684aaabcea5c0a39bd59d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/978dd2e3b804ebbb39684aaabcea5c0a39bd59d9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c09e2bf5afb535aa7e84bbcd8cce509a0e015b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c09e2bf5afb535aa7e84bbcd8cce509a0e015b1", "html_url": "https://github.com/rust-lang/rust/commit/0c09e2bf5afb535aa7e84bbcd8cce509a0e015b1"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "ba1ef3248667cd219575a1e8ea339e7af3655295", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/978dd2e3b804ebbb39684aaabcea5c0a39bd59d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978dd2e3b804ebbb39684aaabcea5c0a39bd59d9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=978dd2e3b804ebbb39684aaabcea5c0a39bd59d9", "patch": "@@ -3147,7 +3147,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         err: &mut Diagnostic,\n         parent_code: &ObligationCauseCode<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        predicate: ty::Predicate<'tcx>,\n+        failed_pred: ty::Predicate<'tcx>,\n         call_hir_id: HirId,\n     ) {\n         let tcx = self.tcx;\n@@ -3183,31 +3183,28 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n \n             if let ObligationCauseCode::ExprBindingObligation(def_id, _, _, idx) = parent_code.deref()\n                 && let Some(node_substs) = typeck_results.node_substs_opt(call_hir_id)\n-                && let predicates = self.tcx.predicates_of(def_id).instantiate(self.tcx, node_substs)\n-                && let Some(pred) = predicates.predicates.get(*idx)\n+                && let where_clauses = self.tcx.predicates_of(def_id).instantiate(self.tcx, node_substs)\n+                && let Some(where_pred) = where_clauses.predicates.get(*idx)\n             {\n-                if let Some(trait_pred) = pred.to_opt_poly_trait_pred()\n-                    && let Some(trait_predicate) = predicate.to_opt_poly_trait_pred()\n+                if let Some(where_pred) = where_pred.to_opt_poly_trait_pred()\n+                    && let Some(failed_pred) = failed_pred.to_opt_poly_trait_pred()\n                 {\n                     let mut c = CollectAllMismatches {\n                         infcx: self.infcx,\n                         param_env,\n                         errors: vec![],\n                     };\n-                    if let Ok(_) = c.relate(trait_pred, trait_predicate) {\n+                    if let Ok(_) = c.relate(where_pred, failed_pred) {\n                         type_diffs = c.errors;\n                     }\n-                } else if let ty::PredicateKind::Clause(\n-                    ty::Clause::Projection(proj)\n-                ) = pred.kind().skip_binder()\n-                    && let ty::PredicateKind::Clause(\n-                        ty::Clause::Projection(projection)\n-                    ) = predicate.kind().skip_binder()\n+                } else if let Some(where_pred) = where_pred.to_opt_poly_projection_pred()\n+                    && let Some(failed_pred) = failed_pred.to_opt_poly_projection_pred()\n+                    && let Some(found) = failed_pred.skip_binder().term.ty()\n                 {\n                     type_diffs = vec![\n                         Sorts(ty::error::ExpectedFound {\n-                            expected: self.tcx.mk_ty(ty::Alias(ty::Projection, proj.projection_ty)),\n-                            found: projection.term.ty().unwrap(),\n+                            expected: self.tcx.mk_ty(ty::Alias(ty::Projection, where_pred.skip_binder().projection_ty)),\n+                            found,\n                         }),\n                     ];\n                 }"}]}