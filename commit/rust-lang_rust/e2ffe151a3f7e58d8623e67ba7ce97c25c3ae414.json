{"sha": "e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414", "node_id": "C_kwDOAAsO6NoAKGUyZmZlMTUxYTNmN2U1OGQ4NjIzZTY3YmE3Y2U5N2MyNWMzYWU0MTQ", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-04-02T08:08:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-02T08:08:34Z"}, "message": "Rollup merge of #109844 - matthiaskrgr:clippy2023_04, r=Nilstrieb\n\na couple clippy::complexity fixes\n\nmap_identity\nfilter_next\noption_as_ref_deref\nunnecessary_find_map\nredundant_slicing\nunnecessary_unwrap\nbool_comparison\nderivable_impls\nmanual_flatten\nneedless_borrowed_reference", "tree": {"sha": "f848e9ebd5d9e72e0cdde1662b6575f877302d0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f848e9ebd5d9e72e0cdde1662b6575f877302d0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkKTgCCRBK7hj4Ov3rIwAATaQIAIMwX83bKC9fPoLmNOpimIQR\n2EbFeDkd5QNyX8Q1uuLeX5jxAkisP4I5u4tHp81mQMSQtNcaqFmSzMCj5O604Eq6\n7uN8jBo0fF4B2qdC979YH4sOyTnfEb8YSTAXI+XkLna0e+38p1k1eRFJLpSpqoSA\nWq2gHoaFA6Z/EFAogBv9HLHs5YTdPmW5gojPP1ykk8d1r2ORdG2e9zUW68WmdEVD\nO/D8oeh1YA6YNiKRU9IzbofQzz8Q4ENA+LeiKlReh1Q8cjQjDq3OrVarzNyrOun+\n+KofLet/rpJOTwf9jmun/J43L3sdohV4do/lvfMDIWRBSdwJqB+Ja8bCprlecxI=\n=oWgx\n-----END PGP SIGNATURE-----\n", "payload": "tree f848e9ebd5d9e72e0cdde1662b6575f877302d0a\nparent 099f3469a9cc15fb7892a4cc1548f5ce150392c6\nparent 8ef3bf29fe47f770a52090212e3a50a0e2bc87f5\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1680422914 +0200\ncommitter GitHub <noreply@github.com> 1680422914 +0200\n\nRollup merge of #109844 - matthiaskrgr:clippy2023_04, r=Nilstrieb\n\na couple clippy::complexity fixes\n\nmap_identity\nfilter_next\noption_as_ref_deref\nunnecessary_find_map\nredundant_slicing\nunnecessary_unwrap\nbool_comparison\nderivable_impls\nmanual_flatten\nneedless_borrowed_reference\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414", "html_url": "https://github.com/rust-lang/rust/commit/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "099f3469a9cc15fb7892a4cc1548f5ce150392c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/099f3469a9cc15fb7892a4cc1548f5ce150392c6", "html_url": "https://github.com/rust-lang/rust/commit/099f3469a9cc15fb7892a4cc1548f5ce150392c6"}, {"sha": "8ef3bf29fe47f770a52090212e3a50a0e2bc87f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef3bf29fe47f770a52090212e3a50a0e2bc87f5", "html_url": "https://github.com/rust-lang/rust/commit/8ef3bf29fe47f770a52090212e3a50a0e2bc87f5"}], "stats": {"total": 53, "additions": 20, "deletions": 33}, "files": [{"sha": "63e8a67db53edc6183615f2243570f3f8c1c2a7f", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414", "patch": "@@ -1190,8 +1190,8 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         // Set KCFI operand bundle\n         let is_indirect_call = unsafe { llvm::LLVMIsAFunction(llfn).is_none() };\n         let kcfi_bundle =\n-            if self.tcx.sess.is_sanitizer_kcfi_enabled() && fn_abi.is_some() && is_indirect_call {\n-                let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi.unwrap());\n+            if let Some(fn_abi) = fn_abi && self.tcx.sess.is_sanitizer_kcfi_enabled() && is_indirect_call {\n+                let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi);\n                 Some(llvm::OperandBundleDef::new(\"kcfi\", &[self.const_u32(kcfi_typeid)]))\n             } else {\n                 None"}, {"sha": "4b1ff0e1df941e974695238b8b789013112235ff", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414", "patch": "@@ -2235,7 +2235,7 @@ impl EmitterWriter {\n             }\n         } else if is_multiline {\n             buffer.puts(*row_num, 0, &self.maybe_anonymized(line_num), Style::LineNumber);\n-            match &highlight_parts[..] {\n+            match &highlight_parts {\n                 [SubstitutionHighlight { start: 0, end }] if *end == line_to_add.len() => {\n                     buffer.puts(*row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n                 }"}, {"sha": "1ae1e0402f745e7cca04853f8f15260bef327912", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414", "patch": "@@ -2399,10 +2399,8 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 let suggestion =\n                     if has_lifetimes { format!(\" + {}\", sub) } else { format!(\": {}\", sub) };\n                 let mut suggestions = vec![(sp, suggestion)];\n-                for add_lt_sugg in add_lt_suggs {\n-                    if let Some(add_lt_sugg) = add_lt_sugg {\n-                        suggestions.push(add_lt_sugg);\n-                    }\n+                for add_lt_sugg in add_lt_suggs.into_iter().flatten() {\n+                    suggestions.push(add_lt_sugg);\n                 }\n                 err.multipart_suggestion_verbose(\n                     format!(\"{msg}...\"),\n@@ -2426,11 +2424,9 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     };\n                     let mut sugg =\n                         vec![(sp, suggestion), (span.shrink_to_hi(), format!(\" + {}\", new_lt))];\n-                    for add_lt_sugg in add_lt_suggs.clone() {\n-                        if let Some(lt) = add_lt_sugg {\n-                            sugg.push(lt);\n-                            sugg.rotate_right(1);\n-                        }\n+                    for lt in add_lt_suggs.clone().into_iter().flatten() {\n+                        sugg.push(lt);\n+                        sugg.rotate_right(1);\n                     }\n                     // `MaybeIncorrect` due to issue #41966.\n                     err.multipart_suggestion(msg, sugg, Applicability::MaybeIncorrect);"}, {"sha": "f41edff8513deff61aa2dcad1841b9ec00ff637b", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414", "patch": "@@ -651,8 +651,8 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n         let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance);\n         let span = tcx.def_span(instance.def_id());\n         let mut path = PathBuf::new();\n-        let was_written = if written_to_path.is_some() {\n-            path = written_to_path.unwrap();\n+        let was_written = if let Some(path2) = written_to_path {\n+            path = path2;\n             Some(())\n         } else {\n             None"}, {"sha": "0bb42a3a71fde1544bc31aa7b08c355f2b3fff74", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414", "patch": "@@ -109,7 +109,7 @@ fn assert_default_hashing_controls<CTX: HashStableContext>(ctx: &CTX, msg: &str)\n         // This is the case for instance when building a hash for name mangling.\n         // Such configuration must not be used for metadata.\n         HashingControls { hash_spans }\n-            if hash_spans == !ctx.unstable_opts_incremental_ignore_spans() => {}\n+            if hash_spans != ctx.unstable_opts_incremental_ignore_spans() => {}\n         other => panic!(\"Attempted hashing of {msg} with non-default HashingControls: {other:?}\"),\n     }\n }"}, {"sha": "fb75ec76729201973700065217838e4c699da35c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414", "patch": "@@ -3888,8 +3888,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         if let Some(slice_ty) = candidate_impls\n             .iter()\n             .map(|trait_ref| trait_ref.trait_ref.self_ty())\n-            .filter(|t| is_slice(*t))\n-            .next()\n+            .find(|t| is_slice(*t))\n         {\n             let msg = &format!(\"convert the array to a `{}` slice instead\", slice_ty);\n \n@@ -3936,7 +3935,7 @@ fn hint_missing_borrow<'tcx>(\n     // This could be a variant constructor, for example.\n     let Some(fn_decl) = found_node.fn_decl() else { return; };\n \n-    let args = fn_decl.inputs.iter().map(|ty| ty);\n+    let args = fn_decl.inputs.iter();\n \n     fn get_deref_type_and_refs(mut ty: Ty<'_>) -> (Ty<'_>, Vec<hir::Mutability>) {\n         let mut refs = vec![];"}, {"sha": "ea8c7e9a67c32133db19a3582d2045b5c1ad54bb", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414", "patch": "@@ -31,18 +31,13 @@ use crate::passes::{self, Condition};\n use crate::scrape_examples::{AllCallLocations, ScrapeExamplesOptions};\n use crate::theme;\n \n-#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, Debug, Default)]\n pub(crate) enum OutputFormat {\n     Json,\n+    #[default]\n     Html,\n }\n \n-impl Default for OutputFormat {\n-    fn default() -> OutputFormat {\n-        OutputFormat::Html\n-    }\n-}\n-\n impl OutputFormat {\n     pub(crate) fn is_json(&self) -> bool {\n         matches!(self, OutputFormat::Json)"}, {"sha": "b61dd57145802323a53ad733da07b4cfd267864e", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414", "patch": "@@ -177,8 +177,8 @@ impl<'a, 'tcx, F: Write> TokenHandler<'a, 'tcx, F> {\n         } else {\n             // We only want to \"open\" the tag ourselves if we have more than one pending and if the\n             // current parent tag is not the same as our pending content.\n-            let close_tag = if self.pending_elems.len() > 1 && current_class.is_some() {\n-                Some(enter_span(self.out, current_class.unwrap(), &self.href_context))\n+            let close_tag = if self.pending_elems.len() > 1 && let Some(current_class) = current_class {\n+                Some(enter_span(self.out, current_class, &self.href_context))\n             } else {\n                 None\n             };"}, {"sha": "455b4e9aefe5541e9e8b73e6dac3ef5c16b75a76", "filename": "src/librustdoc/html/render/sidebar.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/src%2Flibrustdoc%2Fhtml%2Frender%2Fsidebar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/src%2Flibrustdoc%2Fhtml%2Frender%2Fsidebar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsidebar.rs?ref=e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414", "patch": "@@ -113,11 +113,8 @@ pub(super) fn print_sidebar(cx: &Context<'_>, it: &clean::Item, buffer: &mut Buf\n     } else {\n         (\"\", \"\")\n     };\n-    let version = if it.is_crate() {\n-        cx.cache().crate_version.as_ref().map(String::as_str).unwrap_or_default()\n-    } else {\n-        \"\"\n-    };\n+    let version =\n+        if it.is_crate() { cx.cache().crate_version.as_deref().unwrap_or_default() } else { \"\" };\n     let path: String = if !it.is_mod() {\n         cx.current.iter().map(|s| s.as_str()).intersperse(\"::\").collect()\n     } else {"}, {"sha": "1c6ab44a4c784f3df5902b664bd271159a37eb93", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414", "patch": "@@ -810,7 +810,7 @@ fn trait_impls_for<'a>(\n ///\n /// These are common and we should just resolve to the trait in that case.\n fn is_derive_trait_collision<T>(ns: &PerNS<Result<Vec<(Res, T)>, ResolutionFailure<'_>>>) -> bool {\n-    if let (&Ok(ref type_ns), &Ok(ref macro_ns)) = (&ns.type_ns, &ns.macro_ns) {\n+    if let (Ok(type_ns), Ok(macro_ns)) = (&ns.type_ns, &ns.macro_ns) {\n         type_ns.iter().any(|(res, _)| matches!(res, Res::Def(DefKind::Trait, _)))\n             && macro_ns\n                 .iter()"}]}