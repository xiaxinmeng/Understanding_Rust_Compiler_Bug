{"sha": "c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5Nzg4ZmRkNWI4ZDEzNmIxYzMyZTAxMzBmOGUyZmRiYzhmODA3M2I=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-20T17:11:42Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-28T23:57:14Z"}, "message": "Remove no longer necessary ctor checks in rustc_privacy", "tree": {"sha": "6ba278299c864fea6a0a9496bed7ce46ab80074f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ba278299c864fea6a0a9496bed7ce46ab80074f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b", "html_url": "https://github.com/rust-lang/rust/commit/c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b060e25ba80eb2866839335302b31359c18421a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b060e25ba80eb2866839335302b31359c18421a", "html_url": "https://github.com/rust-lang/rust/commit/8b060e25ba80eb2866839335302b31359c18421a"}], "stats": {"total": 74, "additions": 5, "deletions": 69}, "files": [{"sha": "49f2ccb7c57f59865c723449bcc968c7b2e9e61c", "filename": "src/librustc_privacy/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 39, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b/src%2Flibrustc_privacy%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b/src%2Flibrustc_privacy%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Fdiagnostics.rs?ref=c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b", "patch": "@@ -115,45 +115,6 @@ pub enum Foo {\n ```\n \"##,\n \n-E0450: r##\"\n-A tuple constructor was invoked while some of its fields are private. Erroneous\n-code example:\n-\n-```compile_fail\n-mod Bar {\n-    pub struct Foo(isize);\n-}\n-\n-let f = Bar::Foo(0); // error: cannot invoke tuple struct constructor with\n-                     //        private fields\n-```\n-\n-To solve this issue, please ensure that all of the fields of the tuple struct\n-are public. Alternatively, provide a `new()` method to the tuple struct to\n-construct it from a given inner value. Example:\n-\n-```\n-mod Bar {\n-    pub struct Foo(pub isize); // we set its field to public\n-}\n-\n-let f = Bar::Foo(0); // ok!\n-\n-// or:\n-mod bar {\n-    pub struct Foo(isize);\n-\n-    impl Foo {\n-        pub fn new(x: isize) -> Foo {\n-            Foo(x)\n-        }\n-    }\n-}\n-\n-let f = bar::Foo::new(1);\n-```\n-\"##,\n-\n E0451: r##\"\n A struct constructor with private fields was invoked. Erroneous code example:\n \n@@ -204,3 +165,7 @@ let f = Bar::Foo::new(); // ok!\n \"##,\n \n }\n+\n+register_diagnostics! {\n+//  E0450, moved into resolve\n+}"}, {"sha": "9dc94745cff7b72fc64b4c8f142605e058502e40", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b", "patch": "@@ -27,7 +27,7 @@ extern crate syntax_pos;\n \n use rustc::dep_graph::DepNode;\n use rustc::hir::{self, PatKind};\n-use rustc::hir::def::{self, Def, CtorKind};\n+use rustc::hir::def::{self, Def};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::DeepVisitor;\n@@ -478,33 +478,6 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivacyVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ExprPath(hir::QPath::Resolved(_, ref path)) => {\n-                if let Def::StructCtor(_, CtorKind::Fn) = path.def {\n-                    let adt_def = self.tcx.expect_variant_def(path.def);\n-                    let private_indexes = adt_def.fields.iter().enumerate().filter(|&(_, field)| {\n-                        !field.vis.is_accessible_from(self.curitem, self.tcx)\n-                    }).map(|(i, _)| i).collect::<Vec<_>>();\n-\n-                    if !private_indexes.is_empty() {\n-                        let mut error = struct_span_err!(self.tcx.sess, expr.span, E0450,\n-                                                         \"cannot invoke tuple struct constructor \\\n-                                                          with private fields\");\n-                        error.span_label(expr.span,\n-                                         &format!(\"cannot construct with a private field\"));\n-\n-                        if let Some(node_id) = self.tcx.hir.as_local_node_id(adt_def.did) {\n-                            let node = self.tcx.hir.find(node_id);\n-                            if let Some(hir::map::NodeStructCtor(vdata)) = node {\n-                                for i in private_indexes {\n-                                    error.span_label(vdata.fields()[i].span,\n-                                                     &format!(\"private field declared here\"));\n-                                }\n-                            }\n-                        }\n-                        error.emit();\n-                    }\n-                }\n-            }\n             _ => {}\n         }\n "}, {"sha": "442a2f4074215a4f519ea4ec2c792520ca8ebf75", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=c9788fdd5b8d136b1c32e0130f8e2fdbc8f8073b", "patch": "@@ -660,8 +660,6 @@ mod tests {\n         t(\"no_run\",                false,        true,   false,  true,  false, false, Vec::new());\n         t(\"test_harness\",          false,        false,  false,  true,  true,  false, Vec::new());\n         t(\"compile_fail\",          false,        true,   false,  true,  false, true,  Vec::new());\n-        t(\"E0450\",                 false,        false,  false,  true,  false, false,\n-                                   vec![\"E0450\".to_owned()]);\n         t(\"{.no_run .example}\",    false,        true,   false,  true,  false, false, Vec::new());\n         t(\"{.sh .should_panic}\",   true,         false,  false,  true,  false, false, Vec::new());\n         t(\"{.example .rust}\",      false,        false,  false,  true,  false, false, Vec::new());"}]}