{"sha": "926af6493beca5abc0ea0f8ce2a1894fdc103513", "node_id": "C_kwDOAAsO6NoAKDkyNmFmNjQ5M2JlY2E1YWJjMGVhMGY4Y2UyYTE4OTRmZGMxMDM1MTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-05T19:36:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-05T19:36:10Z"}, "message": "Auto merge of #1999 - RalfJung:forward-env, r=oli-obk\n\nadd flag to forward specific env vars (while isolation remains enabled)\n\nThe flag is called `-Zmiri-env-forward=<var>`, but I am open to bikeshedding. ;)", "tree": {"sha": "850414739b8b1bf3f1a6f656b5704b1bfa0e1a8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/850414739b8b1bf3f1a6f656b5704b1bfa0e1a8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/926af6493beca5abc0ea0f8ce2a1894fdc103513", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/926af6493beca5abc0ea0f8ce2a1894fdc103513", "html_url": "https://github.com/rust-lang/rust/commit/926af6493beca5abc0ea0f8ce2a1894fdc103513", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/926af6493beca5abc0ea0f8ce2a1894fdc103513/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0242acc7861e94cce1f23dc18c30cac9079c3d38", "url": "https://api.github.com/repos/rust-lang/rust/commits/0242acc7861e94cce1f23dc18c30cac9079c3d38", "html_url": "https://github.com/rust-lang/rust/commit/0242acc7861e94cce1f23dc18c30cac9079c3d38"}, {"sha": "ceec2b3cebab9072beccd65c678b5bc51f830b5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ceec2b3cebab9072beccd65c678b5bc51f830b5d", "html_url": "https://github.com/rust-lang/rust/commit/ceec2b3cebab9072beccd65c678b5bc51f830b5d"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "3c5af59d3f079a085c63dda82b90026d9fd42f0c", "filename": "README.md", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/926af6493beca5abc0ea0f8ce2a1894fdc103513/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/926af6493beca5abc0ea0f8ce2a1894fdc103513/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=926af6493beca5abc0ea0f8ce2a1894fdc103513", "patch": "@@ -236,10 +236,13 @@ environment variable:\n   execution with a \"permission denied\" error being returned to the program.\n   `warn` prints a full backtrace when that happen; `warn-nobacktrace` is less\n   verbose. `hide` hides the warning entirely.\n-* `-Zmiri-env-exclude=<var>` keeps the `var` environment variable isolated from\n-  the host so that it cannot be accessed by the program.  Can be used multiple\n-  times to exclude several variables.  On Windows, the `TERM` environment\n-  variable is excluded by default.\n+* `-Zmiri-env-exclude=<var>` keeps the `var` environment variable isolated from the host so that it\n+  cannot be accessed by the program. Can be used multiple times to exclude several variables. On\n+  Windows, the `TERM` environment variable is excluded by default. This has no effect unless\n+  `-Zmiri-disable-validation` is also set.\n+* `-Zmiri-env-forward=<var>` forwards the `var` environment variable to the interpreted program. Can\n+  be used multiple times to forward several variables. This has no effect if\n+  `-Zmiri-disable-validation` is set.\n * `-Zmiri-ignore-leaks` disables the memory leak checker, and also allows some\n   remaining threads to exist when the main thread exits.\n * `-Zmiri-measureme=<name>` enables `measureme` profiling for the interpreted program."}, {"sha": "dd7b0b54f4882bb68b423d9163395d26d4ef682c", "filename": "src/bin/miri.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/926af6493beca5abc0ea0f8ce2a1894fdc103513/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/926af6493beca5abc0ea0f8ce2a1894fdc103513/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=926af6493beca5abc0ea0f8ce2a1894fdc103513", "patch": "@@ -399,6 +399,11 @@ fn main() {\n                         .excluded_env_vars\n                         .push(arg.strip_prefix(\"-Zmiri-env-exclude=\").unwrap().to_owned());\n                 }\n+                arg if arg.starts_with(\"-Zmiri-env-forward=\") => {\n+                    miri_config\n+                        .forwarded_env_vars\n+                        .push(arg.strip_prefix(\"-Zmiri-env-forward=\").unwrap().to_owned());\n+                }\n                 arg if arg.starts_with(\"-Zmiri-track-pointer-tag=\") => {\n                     let id: u64 =\n                         match arg.strip_prefix(\"-Zmiri-track-pointer-tag=\").unwrap().parse() {"}, {"sha": "97856d92020b278953c0e280c772a048a565ab58", "filename": "src/eval.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/926af6493beca5abc0ea0f8ce2a1894fdc103513/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/926af6493beca5abc0ea0f8ce2a1894fdc103513/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=926af6493beca5abc0ea0f8ce2a1894fdc103513", "patch": "@@ -86,6 +86,8 @@ pub struct MiriConfig {\n     pub ignore_leaks: bool,\n     /// Environment variables that should always be isolated from the host.\n     pub excluded_env_vars: Vec<String>,\n+    /// Environment variables that should always be forwarded from the host.\n+    pub forwarded_env_vars: Vec<String>,\n     /// Command-line arguments passed to the interpreted program.\n     pub args: Vec<String>,\n     /// The seed to use when non-determinism or randomness are required (e.g. ptr-to-int cast, `getrandom()`).\n@@ -122,6 +124,7 @@ impl Default for MiriConfig {\n             isolated_op: IsolatedOp::Reject(RejectOpWith::Abort),\n             ignore_leaks: false,\n             excluded_env_vars: vec![],\n+            forwarded_env_vars: vec![],\n             args: vec![],\n             seed: None,\n             tracked_pointer_tag: None,\n@@ -157,7 +160,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         MemoryExtra::new(&config),\n     );\n     // Complete initialization.\n-    EnvVars::init(&mut ecx, config.excluded_env_vars)?;\n+    EnvVars::init(&mut ecx, config.excluded_env_vars, config.forwarded_env_vars)?;\n     MemoryExtra::init_extern_statics(&mut ecx)?;\n \n     // Make sure we have MIR. We check MIR for some stable monomorphic function in libcore."}, {"sha": "dfd1ef207d96ad7eecc9d3680d72eb03bf9335a6", "filename": "src/shims/env.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/926af6493beca5abc0ea0f8ce2a1894fdc103513/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/926af6493beca5abc0ea0f8ce2a1894fdc103513/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=926af6493beca5abc0ea0f8ce2a1894fdc103513", "patch": "@@ -39,6 +39,7 @@ impl<'tcx> EnvVars<'tcx> {\n     pub(crate) fn init<'mir>(\n         ecx: &mut InterpCx<'mir, 'tcx, Evaluator<'mir, 'tcx>>,\n         mut excluded_env_vars: Vec<String>,\n+        forwarded_env_vars: Vec<String>,\n     ) -> InterpResult<'tcx> {\n         let target_os = ecx.tcx.sess.target.os.as_str();\n         if target_os == \"windows\" {\n@@ -47,9 +48,14 @@ impl<'tcx> EnvVars<'tcx> {\n             excluded_env_vars.push(\"TERM\".to_owned());\n         }\n \n-        if ecx.machine.communicate() {\n-            for (name, value) in env::vars() {\n-                if !excluded_env_vars.contains(&name) {\n+        // Skip the loop entirely if we don't want to forward anything.\n+        if ecx.machine.communicate() || !forwarded_env_vars.is_empty() {\n+            for (name, value) in env::vars_os() {\n+                let forward = match ecx.machine.communicate() {\n+                    true => !excluded_env_vars.iter().any(|v| v.as_str() == &name),\n+                    false => forwarded_env_vars.iter().any(|v| v.as_str() == &name),\n+                };\n+                if forward {\n                     let var_ptr = match target_os {\n                         \"linux\" | \"macos\" =>\n                             alloc_env_var_as_c_str(name.as_ref(), value.as_ref(), ecx)?,"}, {"sha": "8eebc45f55a71ef4e2a9d9c7ad5ac7326fafa1ce", "filename": "tests/run-pass/env-forward.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/926af6493beca5abc0ea0f8ce2a1894fdc103513/tests%2Frun-pass%2Fenv-forward.rs", "raw_url": "https://github.com/rust-lang/rust/raw/926af6493beca5abc0ea0f8ce2a1894fdc103513/tests%2Frun-pass%2Fenv-forward.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fenv-forward.rs?ref=926af6493beca5abc0ea0f8ce2a1894fdc103513", "patch": "@@ -0,0 +1,5 @@\n+// compile-flags: -Zmiri-env-forward=MIRI_ENV_VAR_TEST\n+\n+fn main() {\n+    assert_eq!(std::env::var(\"MIRI_ENV_VAR_TEST\"), Ok(\"0\".to_owned()));\n+}"}]}