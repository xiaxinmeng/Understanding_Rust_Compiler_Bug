{"sha": "abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZDgxYzlmZjU1YWE1MGVlMmE5OGQxZjhhMmI0NzBhY2I4MWQ0ZTY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-08-03T22:12:02Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-08-03T22:12:15Z"}, "message": "An attempt to fix NLL migration mode so that reports region errors when necessary.\n\nNamely, the code here was trying to be clever, and say \"lets not\nreport diagnostics when we 'know' NLL will report an error about them\nin the future.\"\n\nThe problem is that in migration mode, when no error was reported here,\nthe NLL error that we \"knew\" was coming was downgraded to a warning (!).\n\nThis fixes that by only doing the \"clever\" skipping of region error reporting\nwhen we are not in migration mode.\n\nRather than make a separate test for issue 53026, I just took the test\nthat uncovered this in a first place, and extended it (via our\nrevisions system) to explicitly show all three modes in action:\nACT-borrowck, NLL, and NLL migration mode.\n\n(Tto be honest I hope not to have to add such revisions to many tests.\nInstead I hope to adopt some sort of new `compare-mode` for either\nborrowck=migrate or for the 2018 edition as a whole.)", "tree": {"sha": "c8050eefa99f03785aa7f59dccc2bbf45deb768f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8050eefa99f03785aa7f59dccc2bbf45deb768f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6", "html_url": "https://github.com/rust-lang/rust/commit/abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88e0ff14a81a2122222e32cf7c285f585c516cfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/88e0ff14a81a2122222e32cf7c285f585c516cfd", "html_url": "https://github.com/rust-lang/rust/commit/88e0ff14a81a2122222e32cf7c285f585c516cfd"}], "stats": {"total": 54, "additions": 48, "deletions": 6}, "files": [{"sha": "212821cac2e4aa53d9d5fcdae750d7656c8becb4", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6", "patch": "@@ -303,7 +303,14 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     ) {\n         debug!(\"report_region_errors(): {} errors to start\", errors.len());\n \n-        if will_later_be_reported_by_nll && self.tcx.use_mir_borrowck() {\n+        if will_later_be_reported_by_nll &&\n+            // FIXME: `use_mir_borrowck` seems wrong here...\n+            self.tcx.use_mir_borrowck() &&\n+            // ... this is a band-aid; may be better to explicitly\n+            // match on every borrowck_mode variant to guide decision\n+            // here.\n+            !self.tcx.migrate_borrowck() {\n+\n             // With `#![feature(nll)]`, we want to present a nice user\n             // experience, so don't even mention the errors from the\n             // AST checker."}, {"sha": "db7cedffd8f725d82b01d241814a7b4dd9a06cd1", "filename": "src/test/ui/borrowck/issue-45983.ast.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.ast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.ast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.ast.stderr?ref=abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6", "patch": "@@ -1,5 +1,5 @@\n error: borrowed data cannot be stored outside of its closure\n-  --> $DIR/issue-45983.rs:17:27\n+  --> $DIR/issue-45983.rs:36:27\n    |\n LL |     let x = None;\n    |         - borrowed data cannot be stored into here...", "previous_filename": "src/test/ui/borrowck/issue-45983.stderr"}, {"sha": "db7cedffd8f725d82b01d241814a7b4dd9a06cd1", "filename": "src/test/ui/borrowck/issue-45983.migrate.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.migrate.stderr?ref=abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6", "patch": "@@ -0,0 +1,12 @@\n+error: borrowed data cannot be stored outside of its closure\n+  --> $DIR/issue-45983.rs:36:27\n+   |\n+LL |     let x = None;\n+   |         - borrowed data cannot be stored into here...\n+LL |     give_any(|y| x = Some(y));\n+   |              ---          ^ cannot be stored outside of its closure\n+   |              |\n+   |              ...because it cannot outlive this closure\n+\n+error: aborting due to previous error\n+"}, {"sha": "9d62c7dba75ff068efcec146fdd0109b5ed1a1a6", "filename": "src/test/ui/borrowck/issue-45983.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr?ref=abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6", "patch": "@@ -1,11 +1,11 @@\n warning: not reporting region error due to nll\n-  --> $DIR/issue-45983.rs:17:27\n+  --> $DIR/issue-45983.rs:36:27\n    |\n LL |     give_any(|y| x = Some(y));\n    |                           ^\n \n error: borrowed data escapes outside of closure\n-  --> $DIR/issue-45983.rs:17:18\n+  --> $DIR/issue-45983.rs:36:18\n    |\n LL |     let x = None;\n    |         - `x` is declared here, outside of the closure body\n@@ -15,7 +15,7 @@ LL |     give_any(|y| x = Some(y));\n    |               `y` is a reference that is only valid in the closure body\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n-  --> $DIR/issue-45983.rs:17:18\n+  --> $DIR/issue-45983.rs:36:18\n    |\n LL |     let x = None;\n    |         - help: consider changing this to be mutable: `mut x`"}, {"sha": "bcbe0d1ffc0008fbea2369e31ef73cd95b5f1bd5", "filename": "src/test/ui/borrowck/issue-45983.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.rs?ref=abd81c9ff55aa50ee2a98d1f8a2b470acb81d4e6", "patch": "@@ -8,12 +8,35 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// As documented in Issue #45983, this test is evaluating the quality\n+// of our diagnostics on erroneous code using higher-ranked closures.\n+//\n+// However, as documented on Issue #53026, this test also became a\n+// prime example of our need to test the NLL migration mode\n+// *separately* from the existing test suites that focus solely on\n+// AST-borrwock and NLL.\n+\n+// revisions: ast migrate nll\n+\n+// Since we are testing nll (and migration) explicitly as a separate\n+// revisions, dont worry about the --compare-mode=nll on this test.\n+\n+// ignore-compare-mode-nll\n+\n+//[ast]compile-flags: -Z borrowck=ast\n+//[migrate]compile-flags: -Z borrowck=migrate -Z two-phase-borrows\n+//[nll]compile-flags: -Z borrowck=mir -Z two-phase-borrows\n+\n fn give_any<F: for<'r> FnOnce(&'r ())>(f: F) {\n     f(&());\n }\n \n fn main() {\n     let x = None;\n     give_any(|y| x = Some(y));\n-    //~^ ERROR borrowed data cannot be stored outside of its closure\n+    //[ast]~^ ERROR borrowed data cannot be stored outside of its closure\n+    //[migrate]~^^ ERROR borrowed data cannot be stored outside of its closure\n+    //[nll]~^^^ WARN not reporting region error due to nll\n+    //[nll]~| ERROR borrowed data escapes outside of closure\n+    //[nll]~| ERROR cannot assign to `x`, as it is not declared as mutable\n }"}]}