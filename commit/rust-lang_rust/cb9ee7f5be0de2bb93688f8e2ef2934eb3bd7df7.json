{"sha": "cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiOWVlN2Y1YmUwZGUyYmI5MzY4OGY4ZTJlZjI5MzRlYjNiZDdkZjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-28T23:18:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-30T21:23:45Z"}, "message": "std: Remove ManualThreads spawn mode", "tree": {"sha": "b7797ab53dc525897a22b452c394b302b1d32a51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7797ab53dc525897a22b452c394b302b1d32a51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7", "html_url": "https://github.com/rust-lang/rust/commit/cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0144c83213cb5ce43df61f149274379f49b6d7cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0144c83213cb5ce43df61f149274379f49b6d7cb", "html_url": "https://github.com/rust-lang/rust/commit/0144c83213cb5ce43df61f149274379f49b6d7cb"}], "stats": {"total": 63, "additions": 2, "deletions": 61}, "files": [{"sha": "9dde95d0ac402014fc0604a8c5100b205c1865a5", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7", "patch": "@@ -890,7 +890,7 @@ mod tests {\n     fn test_sem_runtime_friendly_blocking() {\n         // Force the runtime to schedule two threads on the same sched_loop.\n         // When one blocks, it should schedule the other one.\n-        do task::spawn_sched(task::ManualThreads(1)) {\n+        do task::spawn_sched(task::SingleThreaded) {\n             let s = ~Semaphore::new(1);\n             let s2 = ~s.clone();\n             let (p,c) = comm::stream();"}, {"sha": "f78b4085cd080435e3d0265f24ebed892068cb6c", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7", "patch": "@@ -107,8 +107,6 @@ pub enum SchedMode {\n     SingleThreaded,\n     /// Tasks are distributed among available CPUs\n     ThreadPerTask,\n-    /// Tasks are distributed among a fixed number of OS threads\n-    ManualThreads(uint),\n }\n \n /**\n@@ -932,13 +930,6 @@ fn test_try_fail() {\n     }\n }\n \n-#[test]\n-#[should_fail]\n-#[ignore(cfg(windows))]\n-fn test_spawn_sched_no_threads() {\n-    do spawn_sched(ManualThreads(0u)) { }\n-}\n-\n #[test]\n fn test_spawn_sched() {\n     let (po, ch) = stream::<()>();\n@@ -1219,34 +1210,6 @@ fn test_child_doesnt_ref_parent() {\n     task::spawn(child_no(0));\n }\n \n-#[test]\n-fn test_spawn_thread_on_demand() {\n-    let (port, chan) = comm::stream();\n-\n-    do spawn_sched(ManualThreads(2)) || {\n-        unsafe {\n-            let max_threads = rt::rust_sched_threads();\n-            assert_eq!(max_threads as int, 2);\n-            let running_threads = rt::rust_sched_current_nonlazy_threads();\n-            assert_eq!(running_threads as int, 1);\n-\n-            let (port2, chan2) = comm::stream();\n-\n-            do spawn_sched(CurrentScheduler) || {\n-                chan2.send(());\n-            }\n-\n-            let running_threads2 = rt::rust_sched_current_nonlazy_threads();\n-            assert_eq!(running_threads2 as int, 2);\n-\n-            port2.recv();\n-            chan.send(());\n-        }\n-    }\n-\n-    port.recv();\n-}\n-\n #[test]\n fn test_simple_newsched_spawn() {\n     use rt::test::run_in_newsched_task;"}, {"sha": "13c51230dc237d5322beb0e694f18388c8af4d12", "filename": "src/libstd/task/rt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7/src%2Flibstd%2Ftask%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7/src%2Flibstd%2Ftask%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Frt.rs?ref=cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7", "patch": "@@ -36,8 +36,6 @@ extern {\n \n     pub fn rust_get_sched_id() -> sched_id;\n     pub fn rust_new_sched(num_threads: libc::uintptr_t) -> sched_id;\n-    pub fn rust_sched_threads() -> libc::size_t;\n-    pub fn rust_sched_current_nonlazy_threads() -> libc::size_t;\n \n     pub fn get_task_id() -> task_id;\n     #[rust_stack]"}, {"sha": "7f343a15f94f94fa1acf7e42b9af7ef3ac75e051", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7", "patch": "@@ -84,7 +84,7 @@ use local_data;\n use task::local_data_priv::{local_get, local_set, OldHandle};\n use task::rt::rust_task;\n use task::rt;\n-use task::{Failure, ManualThreads, PlatformThread, SchedOpts, SingleThreaded};\n+use task::{Failure, PlatformThread, SchedOpts, SingleThreaded};\n use task::{Success, TaskOpts, TaskResult, ThreadPerTask};\n use task::{ExistingScheduler, SchedulerHandle};\n use task::unkillable;\n@@ -814,12 +814,6 @@ fn spawn_raw_oldsched(mut opts: TaskOpts, f: ~fn()) {\n             ThreadPerTask => {\n                 fail!(\"ThreadPerTask scheduling mode unimplemented\")\n             }\n-            ManualThreads(threads) => {\n-                if threads == 0u {\n-                    fail!(\"can not create a scheduler with no threads\");\n-                }\n-                threads\n-            }\n         };\n \n         unsafe {"}, {"sha": "3c9bff000ead6cc9f905501bf3354fb9ecc4661e", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7", "patch": "@@ -549,18 +549,6 @@ start_task(rust_task *target, fn_env_pair *f) {\n     target->start(f->f, f->env, NULL);\n }\n \n-extern \"C\" CDECL size_t\n-rust_sched_current_nonlazy_threads() {\n-    rust_task *task = rust_get_current_task();\n-    return task->sched->number_of_threads();\n-}\n-\n-extern \"C\" CDECL size_t\n-rust_sched_threads() {\n-    rust_task *task = rust_get_current_task();\n-    return task->sched->max_number_of_threads();\n-}\n-\n // This is called by an intrinsic on the Rust stack and must run\n // entirely in the red zone. Do not call on the C stack.\n extern \"C\" CDECL MUST_CHECK bool"}, {"sha": "ccbff776dcff2a250b084dbe46af511c01037db8", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=cb9ee7f5be0de2bb93688f8e2ef2934eb3bd7df7", "patch": "@@ -41,8 +41,6 @@ rust_log_console_off\n rust_should_log_console\n rust_set_environ\n rust_unset_sigprocmask\n-rust_sched_current_nonlazy_threads\n-rust_sched_threads\n rust_set_exit_status\n rust_start\n rust_env_pairs"}]}