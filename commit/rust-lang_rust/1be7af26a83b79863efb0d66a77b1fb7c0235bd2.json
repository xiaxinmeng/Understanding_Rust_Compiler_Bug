{"sha": "1be7af26a83b79863efb0d66a77b1fb7c0235bd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZTdhZjI2YTgzYjc5ODYzZWZiMGQ2NmE3N2IxZmI3YzAyMzViZDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T15:01:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T15:02:26Z"}, "message": "cleaner shutdown", "tree": {"sha": "1742c2adb8c850cede85a72f06acc5c11ec0d09b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1742c2adb8c850cede85a72f06acc5c11ec0d09b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1be7af26a83b79863efb0d66a77b1fb7c0235bd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1be7af26a83b79863efb0d66a77b1fb7c0235bd2", "html_url": "https://github.com/rust-lang/rust/commit/1be7af26a83b79863efb0d66a77b1fb7c0235bd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1be7af26a83b79863efb0d66a77b1fb7c0235bd2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef", "html_url": "https://github.com/rust-lang/rust/commit/2e165ae82eed1dc62f1f4c68e45440c143c7c8ef"}], "stats": {"total": 43, "additions": 27, "deletions": 16}, "files": [{"sha": "fdb2fe2d5165f7a9465a832b3c5555b502645158", "filename": "codeless/server/src/main.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1be7af26a83b79863efb0d66a77b1fb7c0235bd2/codeless%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be7af26a83b79863efb0d66a77b1fb7c0235bd2/codeless%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fserver%2Fsrc%2Fmain.rs?ref=1be7af26a83b79863efb0d66a77b1fb7c0235bd2", "patch": "@@ -20,7 +20,6 @@ mod caps;\n mod req;\n mod dispatch;\n \n-use languageserver_types::InitializeResult;\n use threadpool::ThreadPool;\n use crossbeam_channel::{bounded, Sender, Receiver};\n use flexi_logger::Logger;\n@@ -46,7 +45,7 @@ fn main() -> Result<()> {\n         Err(_) => {\n             error!(\"server panicked\");\n             bail!(\"server panicked\")\n-        },\n+        }\n     }\n }\n \n@@ -72,7 +71,7 @@ fn initialize(io: &mut Io) -> Result<()> {\n         match io.recv()? {\n             RawMsg::Request(req) => {\n                 if let Some((_params, resp)) = dispatch::expect::<req::Initialize>(io, req)? {\n-                    resp.result(io, InitializeResult {\n+                    resp.result(io, req::InitializeResult {\n                         capabilities: caps::SERVER_CAPABILITIES\n                     })?;\n                     match io.recv()? {\n@@ -107,6 +106,7 @@ fn initialized(io: &mut Io) -> Result<()> {\n     let res = main_loop(io, &mut world, &mut pool, sender, receiver.clone());\n     info!(\"waiting for background jobs to finish...\");\n     receiver.for_each(drop);\n+    pool.join();\n     info!(\"...background jobs have finished\");\n     res\n }\n@@ -148,19 +148,29 @@ fn main_loop(\n \n         match msg {\n             RawMsg::Request(req) => {\n-                if let Some((params, resp)) = dispatch::expect::<req::SyntaxTree>(io, req)? {\n-                    let world = world.snapshot();\n-                    let sender = sender.clone();\n-                    pool.execute(move || {\n-                        let res: Result<String> = (|| {\n-                            let path = params.text_document.uri.to_file_path()\n-                                .map_err(|()| format_err!(\"invalid path\"))?;\n-                            let file = world.file_syntax(&path)?;\n-                            Ok(libeditor::syntax_tree(&file))\n-                        })();\n-\n-                        sender.send(Box::new(|io: &mut Io| resp.response(io, res)))\n-                    });\n+                let req = match dispatch::parse_as::<req::SyntaxTree>(req)? {\n+                    Ok((params, resp)) => {\n+                        let world = world.snapshot();\n+                        let sender = sender.clone();\n+                        pool.execute(move || {\n+                            let res: Result<String> = (|| {\n+                                let path = params.text_document.uri.to_file_path()\n+                                    .map_err(|()| format_err!(\"invalid path\"))?;\n+                                let file = world.file_syntax(&path)?;\n+                                Ok(libeditor::syntax_tree(&file))\n+                            })();\n+\n+                            sender.send(Box::new(|io: &mut Io| resp.response(io, res)))\n+                        });\n+                        continue;\n+                    }\n+                    Err(req) => req,\n+                };\n+\n+                if let Some(((), resp)) = dispatch::expect::<req::Shutdown>(io, req)? {\n+                    info!(\"shutdown request\");\n+                    resp.result(io, ())?;\n+                    return Ok(());\n                 }\n             }\n             msg => {"}, {"sha": "35a20a229f9e7c9840e087c09e770746bc043eaa", "filename": "codeless/server/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1be7af26a83b79863efb0d66a77b1fb7c0235bd2/codeless%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1be7af26a83b79863efb0d66a77b1fb7c0235bd2/codeless%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/codeless%2Fserver%2Fsrc%2Freq.rs?ref=1be7af26a83b79863efb0d66a77b1fb7c0235bd2", "patch": "@@ -1,5 +1,6 @@\n use languageserver_types::TextDocumentIdentifier;\n pub use languageserver_types::request::*;\n+pub use languageserver_types::{InitializeResult};\n \n pub enum SyntaxTree {}\n "}]}