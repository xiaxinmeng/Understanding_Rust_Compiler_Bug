{"sha": "a876a5adcfde858e0bb325e0074025b4fe9805b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NzZhNWFkY2ZkZTg1OGUwYmIzMjVlMDA3NDAyNWI0ZmU5ODA1YjQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-20T21:45:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-20T21:45:00Z"}, "message": "Rollup merge of #73378 - matthewjasper:arena-not-special, r=oli-obk\n\nRemove use of specialization from librustc_arena\n\nThis reworks the macro so that specialization, `transmute` and `#[marker]` are not used.\n\nr? @oli-obk", "tree": {"sha": "e46428024516b01dcdd61176db8fc7036e8a82f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e46428024516b01dcdd61176db8fc7036e8a82f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a876a5adcfde858e0bb325e0074025b4fe9805b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7oNdCRBK7hj4Ov3rIwAAdHIIABZW1EurIPAdPqZYQewEmchs\nJINpFmWcKJaqfM/z1BS5Nqdl7quSh5e2V6cWi6bP07UvOlZTC6qTLGBvj9TNHAcY\nw7RYunD/gGfk85jIzkIlv3RlSvT35OxxwpTwF9o6c1u0PPXGnyN8Uf+60CiMAd0d\nSA+s68andOYsYZV7vWcUgjS2V1VOaOT65iVbYgb1tR7IFBXtCBysPYtxnHrn0uu7\ndq34fgeg9VshalsMiA7BNubF616etmo5J1x3VQRD9fE4H/nrGvLdTTsmERsU+57M\nRkwdQX8z9kcuHxDfkPTO+BK/0duOINB2Il7XJpKgNyE3GR7oc3f31wOY3HjXwCM=\n=NNrj\n-----END PGP SIGNATURE-----\n", "payload": "tree e46428024516b01dcdd61176db8fc7036e8a82f6\nparent 0a8fd43e2d8f0a659086babda97bc358fee31f58\nparent 1b92d592b5c7f8a3d399e5b9005f4b316b316ef1\nauthor Manish Goregaokar <manishsmail@gmail.com> 1592689500 -0700\ncommitter GitHub <noreply@github.com> 1592689500 -0700\n\nRollup merge of #73378 - matthewjasper:arena-not-special, r=oli-obk\n\nRemove use of specialization from librustc_arena\n\nThis reworks the macro so that specialization, `transmute` and `#[marker]` are not used.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a876a5adcfde858e0bb325e0074025b4fe9805b4", "html_url": "https://github.com/rust-lang/rust/commit/a876a5adcfde858e0bb325e0074025b4fe9805b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a876a5adcfde858e0bb325e0074025b4fe9805b4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a8fd43e2d8f0a659086babda97bc358fee31f58", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8fd43e2d8f0a659086babda97bc358fee31f58", "html_url": "https://github.com/rust-lang/rust/commit/0a8fd43e2d8f0a659086babda97bc358fee31f58"}, {"sha": "1b92d592b5c7f8a3d399e5b9005f4b316b316ef1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b92d592b5c7f8a3d399e5b9005f4b316b316ef1", "html_url": "https://github.com/rust-lang/rust/commit/1b92d592b5c7f8a3d399e5b9005f4b316b316ef1"}], "stats": {"total": 98, "additions": 52, "deletions": 46}, "files": [{"sha": "5cf4f97fb886394d5754016d3fb99d6e095ccc12", "filename": "src/librustc_arena/lib.rs", "status": "modified", "additions": 52, "deletions": 43, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/a876a5adcfde858e0bb325e0074025b4fe9805b4/src%2Flibrustc_arena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a5adcfde858e0bb325e0074025b4fe9805b4/src%2Flibrustc_arena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_arena%2Flib.rs?ref=a876a5adcfde858e0bb325e0074025b4fe9805b4", "patch": "@@ -611,62 +611,77 @@ macro_rules! which_arena_for_type {\n \n #[macro_export]\n macro_rules! declare_arena {\n-    ([], [$($a:tt $name:ident: $ty:ty, $gen_ty:ty;)*], $tcx:lifetime) => {\n+    // This macro has to take the same input as\n+    // `impl_arena_allocatable_decoders` which requires a second version of\n+    // each type. We ignore that type until we can fix\n+    // `impl_arena_allocatable_decoders`.\n+    ([], [$($a:tt $name:ident: $ty:ty, $_gen_ty:ty;)*], $tcx:lifetime) => {\n         #[derive(Default)]\n         pub struct Arena<$tcx> {\n             pub dropless: $crate::DroplessArena,\n             drop: $crate::DropArena,\n             $($name: $crate::arena_for_type!($a[$ty]),)*\n         }\n \n-        #[marker]\n-        pub trait ArenaAllocatable<'tcx> {}\n-\n-        impl<'tcx, T: Copy> ArenaAllocatable<'tcx> for T {}\n-\n-        unsafe trait ArenaField<'tcx>: Sized + ArenaAllocatable<'tcx> {\n-            /// Returns a specific arena to allocate from.\n-            /// If `None` is returned, the `DropArena` will be used.\n-            fn arena<'a>(arena: &'a Arena<'tcx>) -> Option<&'a $crate::TypedArena<Self>>;\n+        pub trait ArenaAllocatable<'tcx, T = Self>: Sized {\n+            fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self;\n+            fn allocate_from_iter<'a>(\n+                arena: &'a Arena<'tcx>,\n+                iter: impl ::std::iter::IntoIterator<Item = Self>,\n+            ) -> &'a mut [Self];\n         }\n \n-        unsafe impl<'tcx, T: ArenaAllocatable<'tcx>> ArenaField<'tcx> for T {\n+        impl<'tcx, T: Copy> ArenaAllocatable<'tcx, ()> for T {\n             #[inline]\n-            default fn arena<'a>(_: &'a Arena<'tcx>) -> Option<&'a $crate::TypedArena<Self>> {\n-                panic!()\n+            fn allocate_on<'a>(self, arena: &'a Arena<'tcx>) -> &'a mut Self {\n+                arena.dropless.alloc(self)\n+            }\n+            #[inline]\n+            fn allocate_from_iter<'a>(\n+                arena: &'a Arena<'tcx>,\n+                iter: impl ::std::iter::IntoIterator<Item = Self>,\n+            ) -> &'a mut [Self] {\n+                arena.dropless.alloc_from_iter(iter)\n             }\n-        }\n \n+        }\n         $(\n-            #[allow(unused_lifetimes)]\n-            impl<$tcx> ArenaAllocatable<$tcx> for $ty {}\n-            unsafe impl<$tcx, '_x, '_y, '_z, '_w> ArenaField<$tcx> for $gen_ty where Self: ArenaAllocatable<$tcx> {\n+            impl<$tcx> ArenaAllocatable<$tcx, $ty> for $ty {\n                 #[inline]\n-                fn arena<'a>(_arena: &'a Arena<$tcx>) -> Option<&'a $crate::TypedArena<Self>> {\n-                    // SAFETY: We only implement `ArenaAllocatable<$tcx>` for\n-                    // `$ty`, so `$ty` and Self are the same type\n-                    unsafe {\n-                        ::std::mem::transmute::<\n-                            Option<&'a $crate::TypedArena<$ty>>,\n-                            Option<&'a $crate::TypedArena<Self>>,\n-                        >(\n-                            $crate::which_arena_for_type!($a[&_arena.$name])\n-                        )\n+                fn allocate_on<'a>(self, arena: &'a Arena<$tcx>) -> &'a mut Self {\n+                    if !::std::mem::needs_drop::<Self>() {\n+                        return arena.dropless.alloc(self);\n+                    }\n+                    match $crate::which_arena_for_type!($a[&arena.$name]) {\n+                        ::std::option::Option::<&$crate::TypedArena<Self>>::Some(ty_arena) => {\n+                            ty_arena.alloc(self)\n+                        }\n+                        ::std::option::Option::None => unsafe { arena.drop.alloc(self) },\n+                    }\n+                }\n+\n+                #[inline]\n+                fn allocate_from_iter<'a>(\n+                    arena: &'a Arena<$tcx>,\n+                    iter: impl ::std::iter::IntoIterator<Item = Self>,\n+                ) -> &'a mut [Self] {\n+                    if !::std::mem::needs_drop::<Self>() {\n+                        return arena.dropless.alloc_from_iter(iter);\n+                    }\n+                    match $crate::which_arena_for_type!($a[&arena.$name]) {\n+                        ::std::option::Option::<&$crate::TypedArena<Self>>::Some(ty_arena) => {\n+                            ty_arena.alloc_from_iter(iter)\n+                        }\n+                        ::std::option::Option::None => unsafe { arena.drop.alloc_from_iter(iter) },\n                     }\n                 }\n             }\n         )*\n \n         impl<'tcx> Arena<'tcx> {\n             #[inline]\n-            pub fn alloc<T: ArenaAllocatable<'tcx>>(&self, value: T) -> &mut T {\n-                if !::std::mem::needs_drop::<T>() {\n-                    return self.dropless.alloc(value);\n-                }\n-                match <T as ArenaField<'tcx>>::arena(self) {\n-                    ::std::option::Option::Some(arena) => arena.alloc(value),\n-                    ::std::option::Option::None => unsafe { self.drop.alloc(value) },\n-                }\n+            pub fn alloc<T: ArenaAllocatable<'tcx, U>, U>(&self, value: T) -> &mut T {\n+                value.allocate_on(self)\n             }\n \n             #[inline]\n@@ -677,17 +692,11 @@ macro_rules! declare_arena {\n                 self.dropless.alloc_slice(value)\n             }\n \n-            pub fn alloc_from_iter<'a, T: ArenaAllocatable<'tcx>>(\n+            pub fn alloc_from_iter<'a, T: ArenaAllocatable<'tcx, U>, U>(\n                 &'a self,\n                 iter: impl ::std::iter::IntoIterator<Item = T>,\n             ) -> &'a mut [T] {\n-                if !::std::mem::needs_drop::<T>() {\n-                    return self.dropless.alloc_from_iter(iter);\n-                }\n-                match <T as ArenaField<'tcx>>::arena(self) {\n-                    ::std::option::Option::Some(arena) => arena.alloc_from_iter(iter),\n-                    ::std::option::Option::None => unsafe { self.drop.alloc_from_iter(iter) },\n-                }\n+                T::allocate_from_iter(self, iter)\n             }\n         }\n     }"}, {"sha": "335cc3e61040d5cf95b3c632c2272027f366a861", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a876a5adcfde858e0bb325e0074025b4fe9805b4/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a5adcfde858e0bb325e0074025b4fe9805b4/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=a876a5adcfde858e0bb325e0074025b4fe9805b4", "patch": "@@ -32,8 +32,6 @@\n \n #![feature(array_value_iter)]\n #![feature(crate_visibility_modifier)]\n-#![feature(marker_trait_attr)]\n-#![feature(min_specialization)]\n #![feature(or_patterns)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "2e27ab514d80b242818a98c72ce682bdbeac2ca2", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a876a5adcfde858e0bb325e0074025b4fe9805b4/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876a5adcfde858e0bb325e0074025b4fe9805b4/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=a876a5adcfde858e0bb325e0074025b4fe9805b4", "patch": "@@ -36,7 +36,6 @@\n #![feature(drain_filter)]\n #![feature(never_type)]\n #![feature(exhaustive_patterns)]\n-#![feature(marker_trait_attr)]\n #![feature(extern_types)]\n #![feature(nll)]\n #![feature(option_expect_none)]"}]}