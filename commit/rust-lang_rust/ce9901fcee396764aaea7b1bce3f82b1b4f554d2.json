{"sha": "ce9901fcee396764aaea7b1bce3f82b1b4f554d2", "node_id": "C_kwDOAAsO6NoAKGNlOTkwMWZjZWUzOTY3NjRhYWVhN2IxYmNlM2Y4MmIxYjRmNTU0ZDI", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-05-23T17:37:27Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-05-24T15:48:17Z"}, "message": "typeck: use typed fluent identifiers for diags\n\nUse new typed Fluent identifiers for the \"missing type parameters\"\ndiagnostic in the typeck crate which was manually creating\n`DiagnosticMessage`s previously.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "cf57c70fcc10bdc19b63301a352e7737895aae06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf57c70fcc10bdc19b63301a352e7737895aae06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce9901fcee396764aaea7b1bce3f82b1b4f554d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce9901fcee396764aaea7b1bce3f82b1b4f554d2", "html_url": "https://github.com/rust-lang/rust/commit/ce9901fcee396764aaea7b1bce3f82b1b4f554d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce9901fcee396764aaea7b1bce3f82b1b4f554d2/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "552eb3295a06a1a6841686f064647c4d847552cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/552eb3295a06a1a6841686f064647c4d847552cb", "html_url": "https://github.com/rust-lang/rust/commit/552eb3295a06a1a6841686f064647c4d847552cb"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "d9c9f2920b07911719bd6813d8b1cdd4c51ef5d8", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ce9901fcee396764aaea7b1bce3f82b1b4f554d2/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce9901fcee396764aaea7b1bce3f82b1b4f554d2/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=ce9901fcee396764aaea7b1bce3f82b1b4f554d2", "patch": "@@ -1,7 +1,5 @@\n //! Errors emitted by typeck.\n-use rustc_errors::{\n-    error_code, Applicability, DiagnosticBuilder, DiagnosticMessage, ErrorGuaranteed,\n-};\n+use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_macros::{SessionDiagnostic, SessionSubdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_session::{parse::ParseSess, SessionDiagnostic};\n@@ -264,10 +262,9 @@ pub struct MissingTypeParams {\n // Manual implementation of `SessionDiagnostic` to be able to call `span_to_snippet`.\n impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n     fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n-        static SLUG: &'static str = \"typeck-missing-type-params\";\n         let mut err = sess.span_diagnostic.struct_span_err_with_code(\n             self.span,\n-            DiagnosticMessage::fluent(SLUG),\n+            rustc_errors::fluent::typeck::missing_type_params,\n             error_code!(E0393),\n         );\n         err.set_arg(\"parameterCount\", self.missing_type_params.len());\n@@ -280,7 +277,7 @@ impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n                 .join(\", \"),\n         );\n \n-        err.span_label(self.def_span, DiagnosticMessage::fluent_attr(SLUG, \"label\"));\n+        err.span_label(self.def_span, rustc_errors::fluent::typeck::missing_type_params_label);\n \n         let mut suggested = false;\n         if let (Ok(snippet), true) = (\n@@ -298,18 +295,21 @@ impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n                 // least we can clue them to the correct syntax `Iterator<Type>`.\n                 err.span_suggestion(\n                     self.span,\n-                    DiagnosticMessage::fluent_attr(SLUG, \"suggestion\"),\n+                    rustc_errors::fluent::typeck::missing_type_params_suggestion,\n                     format!(\"{}<{}>\", snippet, self.missing_type_params.join(\", \")),\n                     Applicability::HasPlaceholders,\n                 );\n                 suggested = true;\n             }\n         }\n         if !suggested {\n-            err.span_label(self.span, DiagnosticMessage::fluent_attr(SLUG, \"no-suggestion-label\"));\n+            err.span_label(\n+                self.span,\n+                rustc_errors::fluent::typeck::missing_type_params_no_suggestion_label,\n+            );\n         }\n \n-        err.note(DiagnosticMessage::fluent_attr(SLUG, \"note\"));\n+        err.note(rustc_errors::fluent::typeck::missing_type_params_note);\n         err\n     }\n }"}]}