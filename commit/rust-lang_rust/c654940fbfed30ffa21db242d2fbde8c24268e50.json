{"sha": "c654940fbfed30ffa21db242d2fbde8c24268e50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NTQ5NDBmYmZlZDMwZmZhMjFkYjI0MmQyZmJkZThjMjQyNjhlNTA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-27T11:14:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-27T11:14:24Z"}, "message": "Merge pull request #648 from RalfJung/avoid-full-slice\n\navoid [..]", "tree": {"sha": "fc47de502eccb9db4483277d039876219e7afa37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc47de502eccb9db4483277d039876219e7afa37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c654940fbfed30ffa21db242d2fbde8c24268e50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcdnEQCRBK7hj4Ov3rIwAAdHIIAKbyRdzD84jmzg6lKcFQX3By\ncYbQc8RAItMdp8XAAWU+2LJyQTonaIBDDq9irP7W1xGA30TXqQd2Z3GNoJvVYql3\nOuYoEXEuKgtXr9mT+FXhCuVnlGrV7nqjdVFO42GN3l/yY05IsTr7iZGNA9HrATpT\nxjZeGoR6gqMuFQ9p5PPEQ9PRtvLXmLAFcOPEnZ3Epc217WDvUvhstPKtnPn6ex6L\nEpVeBZjaz5obB0D+vxcYA2KPsycX+pLbzvR0pewRXaWwqcDSgZBcvaFdKl1wUW0m\n6w9rfy8DEKjc+uEJTqTp1y1YnEfEAh+PdLSGo+w8lBUER1NMDxa9fOmp4LjhPng=\n=BjJI\n-----END PGP SIGNATURE-----\n", "payload": "tree fc47de502eccb9db4483277d039876219e7afa37\nparent 820186647e491d942d120c5f8aec762c5490bfc1\nparent a9b03f94110a7ab9a8185acd06eed5aa56e0c56d\nauthor Ralf Jung <post@ralfj.de> 1551266064 +0100\ncommitter GitHub <noreply@github.com> 1551266064 +0100\n\nMerge pull request #648 from RalfJung/avoid-full-slice\n\navoid [..]"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c654940fbfed30ffa21db242d2fbde8c24268e50", "html_url": "https://github.com/rust-lang/rust/commit/c654940fbfed30ffa21db242d2fbde8c24268e50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c654940fbfed30ffa21db242d2fbde8c24268e50/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "820186647e491d942d120c5f8aec762c5490bfc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/820186647e491d942d120c5f8aec762c5490bfc1", "html_url": "https://github.com/rust-lang/rust/commit/820186647e491d942d120c5f8aec762c5490bfc1"}, {"sha": "a9b03f94110a7ab9a8185acd06eed5aa56e0c56d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b03f94110a7ab9a8185acd06eed5aa56e0c56d", "html_url": "https://github.com/rust-lang/rust/commit/a9b03f94110a7ab9a8185acd06eed5aa56e0c56d"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "0c90e8ade0d26f0cac1dfbf586a53fad3019fe04", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c654940fbfed30ffa21db242d2fbde8c24268e50/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c654940fbfed30ffa21db242d2fbde8c24268e50/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=c654940fbfed30ffa21db242d2fbde8c24268e50", "patch": "@@ -201,7 +201,7 @@ fn setup(ask_user: bool) {\n     // Let's see if it is already installed.\n     if std::env::var(\"XARGO_RUST_SRC\").is_err() {\n         let sysroot = Command::new(\"rustc\").args(&[\"--print\", \"sysroot\"]).output().unwrap().stdout;\n-        let sysroot = std::str::from_utf8(&sysroot[..]).unwrap();\n+        let sysroot = std::str::from_utf8(&sysroot).unwrap();\n         let src = Path::new(sysroot.trim_end_matches('\\n')).join(\"lib\").join(\"rustlib\").join(\"src\");\n         if !src.exists() {\n             if ask_user {\n@@ -336,7 +336,7 @@ fn in_cargo_miri() {\n         // So after the first `--`, we add `-Zcargo-miri-marker`.\n         let mut cmd = Command::new(\"cargo\");\n         cmd.arg(\"rustc\");\n-        match (subcommand, &kind[..]) {\n+        match (subcommand, kind.as_str()) {\n             (MiriCommand::Run, \"bin\") => {\n                 // FIXME: we just run all the binaries here.\n                 // We should instead support `cargo miri --bin foo`."}, {"sha": "ce07b04c29c368dc6cf18288675c16ce3fd76201", "filename": "src/fn_call.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c654940fbfed30ffa21db242d2fbde8c24268e50/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c654940fbfed30ffa21db242d2fbde8c24268e50/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=c654940fbfed30ffa21db242d2fbde8c24268e50", "patch": "@@ -60,15 +60,15 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n         let this = self.eval_context_mut();\n         let attrs = this.tcx.get_attrs(def_id);\n         let link_name = match attr::first_attr_value_str_by_name(&attrs, \"link_name\") {\n-            Some(name) => name.as_str(),\n-            None => this.tcx.item_name(def_id).as_str(),\n+            Some(name) => name.as_str().get(),\n+            None => this.tcx.item_name(def_id).as_str().get(),\n         };\n         // Strip linker suffixes (seen on 32-bit macOS).\n         let link_name = link_name.trim_end_matches(\"$UNIX2003\");\n         let tcx = &{this.tcx.tcx};\n \n         // First: functions that could diverge.\n-        match &link_name[..] {\n+        match link_name {\n             \"__rust_start_panic\" | \"panic_impl\" => {\n                 return err!(MachineError(\"the evaluated program panicked\".to_string()));\n             }\n@@ -82,7 +82,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n         // Next: functions that assume a ret and dest.\n         let dest = dest.expect(\"we already checked for a dest\");\n         let ret = ret.expect(\"dest is `Some` but ret is `None`\");\n-        match &link_name[..] {\n+        match link_name {\n             \"malloc\" => {\n                 let size = this.read_scalar(args[0])?.to_usize(this)?;\n                 if size == 0 {"}, {"sha": "2e4c955413ab7252f62c8b4fddd513e021272ec9", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c654940fbfed30ffa21db242d2fbde8c24268e50/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c654940fbfed30ffa21db242d2fbde8c24268e50/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=c654940fbfed30ffa21db242d2fbde8c24268e50", "patch": "@@ -175,7 +175,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                     layout::FieldPlacement::Arbitrary { .. } => {\n                         // Gather the subplaces and sort them before visiting.\n                         let mut places = fields.collect::<EvalResult<'tcx, Vec<MPlaceTy<'tcx, Borrow>>>>()?;\n-                        places[..].sort_by_key(|place| place.ptr.get_ptr_offset(self.ecx()));\n+                        places.sort_by_key(|place| place.ptr.get_ptr_offset(self.ecx()));\n                         self.walk_aggregate(place, places.into_iter().map(Ok))\n                     }\n                     layout::FieldPlacement::Union { .. } => {"}, {"sha": "5b0f0e99ad84e6d323814a1d6d3931a36b3137cc", "filename": "src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c654940fbfed30ffa21db242d2fbde8c24268e50/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c654940fbfed30ffa21db242d2fbde8c24268e50/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=c654940fbfed30ffa21db242d2fbde8c24268e50", "patch": "@@ -27,7 +27,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n         // (as opposed to through a place), we have to remember to erase any tag\n         // that might still hang around!\n \n-        let intrinsic_name = &this.tcx.item_name(instance.def_id()).as_str()[..];\n+        let intrinsic_name = this.tcx.item_name(instance.def_id()).as_str().get();\n         match intrinsic_name {\n             \"arith_offset\" => {\n                 let offset = this.read_scalar(args[1])?.to_isize(this)?;"}, {"sha": "8fc3efd7c23b6bfed862ba1b72557472f34a99fa", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c654940fbfed30ffa21db242d2fbde8c24268e50/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c654940fbfed30ffa21db242d2fbde8c24268e50/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c654940fbfed30ffa21db242d2fbde8c24268e50", "patch": "@@ -461,17 +461,17 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n     ) -> EvalResult<'tcx, Cow<'tcx, Allocation<Borrow, Self::AllocExtra>>> {\n         let attrs = tcx.get_attrs(def_id);\n         let link_name = match attr::first_attr_value_str_by_name(&attrs, \"link_name\") {\n-            Some(name) => name.as_str(),\n-            None => tcx.item_name(def_id).as_str(),\n+            Some(name) => name.as_str().get(),\n+            None => tcx.item_name(def_id).as_str().get(),\n         };\n \n-        let alloc = match &link_name[..] {\n+        let alloc = match link_name {\n             \"__cxa_thread_atexit_impl\" => {\n                 // This should be all-zero, pointer-sized.\n                 let size = tcx.data_layout.pointer_size;\n                 let data = vec![0; size.bytes() as usize];\n                 let extra = AllocationExtra::memory_allocated(size, memory_extra);\n-                Allocation::from_bytes(&data[..], tcx.data_layout.pointer_align.abi, extra)\n+                Allocation::from_bytes(&data, tcx.data_layout.pointer_align.abi, extra)\n             }\n             _ => return err!(Unimplemented(\n                     format!(\"can't access foreign static: {}\", link_name),"}]}