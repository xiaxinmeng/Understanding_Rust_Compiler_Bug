{"sha": "d8d02f8f1806b564603982d8cf25795db744e0ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZDAyZjhmMTgwNmI1NjQ2MDM5ODJkOGNmMjU3OTVkYjc0NGUwZmY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-04-08T18:10:16Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-04T16:53:15Z"}, "message": "On incorrect equality constraint likely to be assoc type, suggest appropriate syntax\n\nWhen encountering `where <A as Foo>::Bar = B`, it is possible that `Bar`\nis an associated type. If so, suggest `where A: Foo<Bar = B>`.\n\nCC #20041.", "tree": {"sha": "a5ce14313858d4345a52c18c89c4cdd3e079dd02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5ce14313858d4345a52c18c89c4cdd3e079dd02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8d02f8f1806b564603982d8cf25795db744e0ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d02f8f1806b564603982d8cf25795db744e0ff", "html_url": "https://github.com/rust-lang/rust/commit/d8d02f8f1806b564603982d8cf25795db744e0ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8d02f8f1806b564603982d8cf25795db744e0ff/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3453db7bfcdd210a1a34c8b4e16b3114d4bee13b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3453db7bfcdd210a1a34c8b4e16b3114d4bee13b", "html_url": "https://github.com/rust-lang/rust/commit/3453db7bfcdd210a1a34c8b4e16b3114d4bee13b"}], "stats": {"total": 146, "additions": 134, "deletions": 12}, "files": [{"sha": "5f47c9eb2c2a624e4d89988c767432a13bd96fdf", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 83, "deletions": 11, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/d8d02f8f1806b564603982d8cf25795db744e0ff/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d02f8f1806b564603982d8cf25795db744e0ff/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=d8d02f8f1806b564603982d8cf25795db744e0ff", "patch": "@@ -23,6 +23,7 @@ use rustc_session::Session;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use std::mem;\n+use std::ops::DerefMut;\n \n const MORE_EXTERN: &str =\n     \"for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\";\n@@ -1113,17 +1114,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n         for predicate in &generics.where_clause.predicates {\n             if let WherePredicate::EqPredicate(ref predicate) = *predicate {\n-                self.err_handler()\n-                    .struct_span_err(\n-                        predicate.span,\n-                        \"equality constraints are not yet supported in `where` clauses\",\n-                    )\n-                    .span_label(predicate.span, \"not supported\")\n-                    .note(\n-                        \"see issue #20041 <https://github.com/rust-lang/rust/issues/20041> \\\n-                         for more information\",\n-                    )\n-                    .emit();\n+                deny_equality_constraints(self, predicate, generics);\n             }\n         }\n \n@@ -1300,6 +1291,87 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n }\n \n+fn deny_equality_constraints(\n+    this: &mut AstValidator<'_>,\n+    predicate: &WhereEqPredicate,\n+    generics: &Generics,\n+) {\n+    let mut err = this.err_handler().struct_span_err(\n+        predicate.span,\n+        \"equality constraints are not yet supported in `where` clauses\",\n+    );\n+    err.span_label(predicate.span, \"not supported\");\n+\n+    // Given `<A as Foo>::Bar = RhsTy`, suggest `A: Foo<Bar = RhsTy>`.\n+    if let TyKind::Path(Some(qself), full_path) = &predicate.lhs_ty.kind {\n+        if let TyKind::Path(None, path) = &qself.ty.kind {\n+            match &path.segments[..] {\n+                [PathSegment { ident, args: None, .. }] => {\n+                    for param in &generics.params {\n+                        if param.ident == *ident {\n+                            let param = ident;\n+                            match &full_path.segments[qself.position..] {\n+                                [PathSegment { ident, .. }] => {\n+                                    // Make a new `Path` from `foo::Bar` to `Foo<Bar = RhsTy>`.\n+                                    let mut assoc_path = full_path.clone();\n+                                    // Remove `Bar` from `Foo::Bar`.\n+                                    assoc_path.segments.pop();\n+                                    let len = assoc_path.segments.len() - 1;\n+                                    // Build `<Bar = RhsTy>`.\n+                                    let arg = AngleBracketedArg::Constraint(AssocTyConstraint {\n+                                        id: rustc_ast::node_id::DUMMY_NODE_ID,\n+                                        ident: *ident,\n+                                        kind: AssocTyConstraintKind::Equality {\n+                                            ty: predicate.rhs_ty.clone(),\n+                                        },\n+                                        span: ident.span,\n+                                    });\n+                                    // Add `<Bar = RhsTy>` to `Foo`.\n+                                    match &mut assoc_path.segments[len].args {\n+                                        Some(args) => match args.deref_mut() {\n+                                            GenericArgs::Parenthesized(_) => continue,\n+                                            GenericArgs::AngleBracketed(args) => {\n+                                                args.args.push(arg);\n+                                            }\n+                                        },\n+                                        empty_args => {\n+                                            *empty_args = AngleBracketedArgs {\n+                                                span: ident.span,\n+                                                args: vec![arg],\n+                                            }\n+                                            .into();\n+                                        }\n+                                    }\n+                                    err.span_suggestion_verbose(\n+                                        predicate.span,\n+                                        &format!(\n+                                            \"if `{}` is an associated type you're trying to set, \\\n+                                            use the associated type binding syntax\",\n+                                            ident\n+                                        ),\n+                                        format!(\n+                                            \"{}: {}\",\n+                                            param,\n+                                            pprust::path_to_string(&assoc_path)\n+                                        ),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n+                                _ => {}\n+                            };\n+                        }\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+    err.note(\n+        \"see issue #20041 <https://github.com/rust-lang/rust/issues/20041> for more information\",\n+    );\n+    err.emit();\n+}\n+\n pub fn check_crate(session: &Session, krate: &Crate, lints: &mut LintBuffer) -> bool {\n     let mut validator = AstValidator {\n         session,"}, {"sha": "364d2388741b0e9664970e9a17bd4ba6a94a3136", "filename": "src/test/ui/generic-associated-types/missing-bounds.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d8d02f8f1806b564603982d8cf25795db744e0ff/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d8d02f8f1806b564603982d8cf25795db744e0ff/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.fixed?ref=d8d02f8f1806b564603982d8cf25795db744e0ff", "patch": "@@ -32,4 +32,15 @@ impl<B: std::ops::Add<Output = B>> Add for D<B> {\n     }\n }\n \n+struct E<B>(B);\n+\n+impl<B: Add> Add for E<B> where B: Add<Output = B>, B: std::ops::Add<Output = B> {\n+    //~^ ERROR equality constraints are not yet supported in `where` clauses\n+    type Output = Self;\n+\n+    fn add(self, rhs: Self) -> Self {\n+        Self(self.0 + rhs.0) //~ ERROR mismatched types\n+    }\n+}\n+\n fn main() {}"}, {"sha": "ffafff5e9f586d2543061aaaa616eec501040f8a", "filename": "src/test/ui/generic-associated-types/missing-bounds.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d8d02f8f1806b564603982d8cf25795db744e0ff/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8d02f8f1806b564603982d8cf25795db744e0ff/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.rs?ref=d8d02f8f1806b564603982d8cf25795db744e0ff", "patch": "@@ -32,4 +32,15 @@ impl<B> Add for D<B> {\n     }\n }\n \n+struct E<B>(B);\n+\n+impl<B: Add> Add for E<B> where <B as Add>::Output = B {\n+    //~^ ERROR equality constraints are not yet supported in `where` clauses\n+    type Output = Self;\n+\n+    fn add(self, rhs: Self) -> Self {\n+        Self(self.0 + rhs.0) //~ ERROR mismatched types\n+    }\n+}\n+\n fn main() {}"}, {"sha": "50536fdaca96e25d04359a9ac5bf05d8c5ee4194", "filename": "src/test/ui/generic-associated-types/missing-bounds.stderr", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d8d02f8f1806b564603982d8cf25795db744e0ff/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d8d02f8f1806b564603982d8cf25795db744e0ff/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr?ref=d8d02f8f1806b564603982d8cf25795db744e0ff", "patch": "@@ -1,3 +1,15 @@\n+error: equality constraints are not yet supported in `where` clauses\n+  --> $DIR/missing-bounds.rs:37:33\n+   |\n+LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B {\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^ not supported\n+   |\n+   = note: see issue #20041 <https://github.com/rust-lang/rust/issues/20041> for more information\n+help: if `Output` is an associated type you're trying to set, use the associated type binding syntax\n+   |\n+LL | impl<B: Add> Add for E<B> where B: Add<Output = B> {\n+   |                                 ^^^^^^^^^^^^^^^^^^\n+\n error[E0308]: mismatched types\n   --> $DIR/missing-bounds.rs:11:11\n    |\n@@ -43,7 +55,23 @@ help: consider restricting type parameter `B`\n LL | impl<B: std::ops::Add<Output = B>> Add for D<B> {\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/missing-bounds.rs:42:14\n+   |\n+LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B {\n+   |      - this type parameter\n+...\n+LL |         Self(self.0 + rhs.0)\n+   |              ^^^^^^^^^^^^^^ expected type parameter `B`, found associated type\n+   |\n+   = note: expected type parameter `B`\n+             found associated type `<B as std::ops::Add>::Output`\n+help: consider further restricting type parameter `B`\n+   |\n+LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B, B: std::ops::Add<Output = B> {\n+   |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n \n Some errors have detailed explanations: E0308, E0369.\n For more information about an error, try `rustc --explain E0308`."}]}