{"sha": "f7b05af814f02681d8973438df4ed5792f581841", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YjA1YWY4MTRmMDI2ODFkODk3MzQzOGRmNGVkNTc5MmY1ODE4NDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-07T22:08:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-07T22:08:30Z"}, "message": "Auto merge of #64269 - Centril:rollup-y4dm32c, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #64052 (Rename test locals to work around LLDB bug)\n - #64066 (Support \"soft\" feature-gating using a lint)\n - #64177 (resolve: Do not afraid to set current module to enums and traits)\n - #64229 (Reduce span to function name in unreachable calls)\n - #64255 (Add methods for converting `bool` to `Option<T>`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d19b29534ae871eaa6fdf621d2658dd041672075", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d19b29534ae871eaa6fdf621d2658dd041672075"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7b05af814f02681d8973438df4ed5792f581841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b05af814f02681d8973438df4ed5792f581841", "html_url": "https://github.com/rust-lang/rust/commit/f7b05af814f02681d8973438df4ed5792f581841", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7b05af814f02681d8973438df4ed5792f581841/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43a5ff4222e1f217ac14331afd59f82ec4204d12", "url": "https://api.github.com/repos/rust-lang/rust/commits/43a5ff4222e1f217ac14331afd59f82ec4204d12", "html_url": "https://github.com/rust-lang/rust/commit/43a5ff4222e1f217ac14331afd59f82ec4204d12"}, {"sha": "cd3cb281da9a4387f5896db75129d7dd73cca8f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3cb281da9a4387f5896db75129d7dd73cca8f4", "html_url": "https://github.com/rust-lang/rust/commit/cd3cb281da9a4387f5896db75129d7dd73cca8f4"}], "stats": {"total": 244, "additions": 185, "deletions": 59}, "files": [{"sha": "32ec26975e375291ec503bd2194c7419e041f917", "filename": "src/libcore/bool.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -0,0 +1,45 @@\n+//! impl bool {}\n+\n+#[cfg(not(boostrap_stdarch_ignore_this))]\n+#[lang = \"bool\"]\n+impl bool {\n+    /// Returns `Some(t)` if the `bool` is `true`, or `None` otherwise.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(bool_to_option)]\n+    ///\n+    /// assert_eq!(false.then(0), None);\n+    /// assert_eq!(true.then(0), Some(0));\n+    /// ```\n+    #[unstable(feature = \"bool_to_option\", issue = \"64260\")]\n+    #[inline]\n+    pub fn then<T>(self, t: T) -> Option<T> {\n+        if self {\n+            Some(t)\n+        } else {\n+            None\n+        }\n+    }\n+\n+    /// Returns `Some(f())` if the `bool` is `true`, or `None` otherwise.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(bool_to_option)]\n+    ///\n+    /// assert_eq!(false.then_with(|| 0), None);\n+    /// assert_eq!(true.then_with(|| 0), Some(0));\n+    /// ```\n+    #[unstable(feature = \"bool_to_option\", issue = \"64260\")]\n+    #[inline]\n+    pub fn then_with<T, F: FnOnce() -> T>(self, f: F) -> Option<T> {\n+        if self {\n+            Some(f())\n+        } else {\n+            None\n+        }\n+    }\n+}"}, {"sha": "690cff483b07c863e875a966a80290e7cdf93d75", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -227,6 +227,7 @@ pub mod task;\n pub mod alloc;\n \n // note: does not need to be public\n+mod bool;\n mod tuple;\n mod unit;\n "}, {"sha": "384bc87499887ad84542a5fd8573e3722b393ff0", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -1236,8 +1236,10 @@ pub(crate) mod builtin {\n     pub macro test($item:item) { /* compiler built-in */ }\n \n     /// Attribute macro applied to a function to turn it into a benchmark test.\n-    #[unstable(feature = \"test\", issue = \"50297\",\n-               reason = \"`bench` is a part of custom test frameworks which are unstable\")]\n+    #[cfg_attr(not(boostrap_stdarch_ignore_this), unstable(soft, feature = \"test\", issue = \"50297\",\n+               reason = \"`bench` is a part of custom test frameworks which are unstable\"))]\n+    #[cfg_attr(boostrap_stdarch_ignore_this, unstable(feature = \"test\", issue = \"50297\",\n+               reason = \"`bench` is a part of custom test frameworks which are unstable\"))]\n     #[allow_internal_unstable(test, rustc_attrs)]\n     #[rustc_builtin_macro]\n     pub macro bench($item:item) { /* compiler built-in */ }"}, {"sha": "0f1e6e89451e9b4294a6aad180c3250e623f2122", "filename": "src/libcore/tests/bool.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibcore%2Ftests%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibcore%2Ftests%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fbool.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -0,0 +1,7 @@\n+#[test]\n+fn test_bool_to_option() {\n+    assert_eq!(false.then(0), None);\n+    assert_eq!(true.then(0), Some(0));\n+    assert_eq!(false.then_with(|| 0), None);\n+    assert_eq!(true.then_with(|| 0), Some(0));\n+}"}, {"sha": "b2c29aa269265a8a4a2935b41abf0c760eaba089", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -1,3 +1,4 @@\n+#![feature(bool_to_option)]\n #![feature(bound_cloned)]\n #![feature(box_syntax)]\n #![feature(cell_update)]\n@@ -40,6 +41,7 @@ mod any;\n mod array;\n mod ascii;\n mod atomic;\n+mod bool;\n mod cell;\n mod char;\n mod clone;"}, {"sha": "a33181e5925cda13aef96e1b5f138237beb138e3", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -115,9 +115,10 @@ for ::syntax::attr::StabilityLevel {\n                                           hasher: &mut StableHasher<W>) {\n         mem::discriminant(self).hash_stable(hcx, hasher);\n         match *self {\n-            ::syntax::attr::StabilityLevel::Unstable { ref reason, ref issue } => {\n+            ::syntax::attr::StabilityLevel::Unstable { ref reason, ref issue, ref is_soft } => {\n                 reason.hash_stable(hcx, hasher);\n                 issue.hash_stable(hcx, hasher);\n+                is_soft.hash_stable(hcx, hasher);\n             }\n             ::syntax::attr::StabilityLevel::Stable { ref since } => {\n                 since.hash_stable(hcx, hasher);"}, {"sha": "dd290572d7bb790208278e70e43dd050050005dd", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -395,6 +395,12 @@ declare_lint! {\n     \"reservation of a two-phased borrow conflicts with other shared borrows\"\n }\n \n+declare_lint! {\n+    pub SOFT_UNSTABLE,\n+    Deny,\n+    \"a feature gate that doesn't break dependent crates\"\n+}\n+\n declare_lint_pass! {\n     /// Does nothing as a lint pass, but registers some `Lint`s\n     /// that are used by other parts of the compiler.\n@@ -460,6 +466,7 @@ declare_lint_pass! {\n         NESTED_IMPL_TRAIT,\n         MUTABLE_BORROW_RESERVATION_CONFLICT,\n         INDIRECT_STRUCTURAL_MATCH,\n+        SOFT_UNSTABLE,\n     ]\n }\n "}, {"sha": "c5d9a722ae18e09c5c9fdbebd9151f1a13295021", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -244,6 +244,7 @@ pub fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> LanguageItems {\n \n language_item_table! {\n //  Variant name,                Name,                 Method name,             Target;\n+    BoolImplItem,                \"bool\",               bool_impl,               Target::Impl;\n     CharImplItem,                \"char\",               char_impl,               Target::Impl;\n     StrImplItem,                 \"str\",                str_impl,                Target::Impl;\n     SliceImplItem,               \"slice\",              slice_impl,              Target::Impl;"}, {"sha": "c06a0feb6a99381f6f8d870e992b80c610832cec", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -438,6 +438,7 @@ impl<'tcx> Index<'tcx> {\n                     level: attr::StabilityLevel::Unstable {\n                         reason: Some(Symbol::intern(reason)),\n                         issue: 27812,\n+                        is_soft: false,\n                     },\n                     feature: sym::rustc_private,\n                     rustc_depr: None,\n@@ -480,7 +481,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n }\n \n pub fn report_unstable(\n-    sess: &Session, feature: Symbol, reason: Option<Symbol>, issue: u32, span: Span\n+    sess: &Session, feature: Symbol, reason: Option<Symbol>, issue: u32, is_soft: bool, span: Span\n ) {\n     let msg = match reason {\n         Some(r) => format!(\"use of unstable library feature '{}': {}\", feature, r),\n@@ -505,7 +506,13 @@ pub fn report_unstable(\n     let error_id = (DiagnosticMessageId::StabilityId(issue), span_key, msg.clone());\n     let fresh = sess.one_time_diagnostics.borrow_mut().insert(error_id);\n     if fresh {\n-        emit_feature_err(&sess.parse_sess, feature, span, GateIssue::Library(Some(issue)), &msg);\n+        if is_soft {\n+            sess.buffer_lint(lint::builtin::SOFT_UNSTABLE, CRATE_NODE_ID, span, &msg);\n+        } else {\n+            emit_feature_err(\n+                &sess.parse_sess, feature, span, GateIssue::Library(Some(issue)), &msg\n+            );\n+        }\n     }\n }\n \n@@ -621,6 +628,7 @@ pub enum EvalResult {\n         feature: Symbol,\n         reason: Option<Symbol>,\n         issue: u32,\n+        is_soft: bool,\n     },\n     /// The item does not have the `#[stable]` or `#[unstable]` marker assigned.\n     Unmarked,\n@@ -720,7 +728,9 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n \n         match stability {\n-            Some(&Stability { level: attr::Unstable { reason, issue }, feature, .. }) => {\n+            Some(&Stability {\n+                level: attr::Unstable { reason, issue, is_soft }, feature, ..\n+            }) => {\n                 if span.allows_unstable(feature) {\n                     debug!(\"stability: skipping span={:?} since it is internal\", span);\n                     return EvalResult::Allow;\n@@ -744,7 +754,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     }\n                 }\n \n-                EvalResult::Deny { feature, reason, issue }\n+                EvalResult::Deny { feature, reason, issue, is_soft }\n             }\n             Some(_) => {\n                 // Stable APIs are always ok to call and deprecated APIs are\n@@ -767,8 +777,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn check_stability(self, def_id: DefId, id: Option<HirId>, span: Span) {\n         match self.eval_stability(def_id, id, span) {\n             EvalResult::Allow => {}\n-            EvalResult::Deny { feature, reason, issue } =>\n-                report_unstable(self.sess, feature, reason, issue, span),\n+            EvalResult::Deny { feature, reason, issue, is_soft } =>\n+                report_unstable(self.sess, feature, reason, issue, is_soft, span),\n             EvalResult::Unmarked => {\n                 // The API could be uncallable for other reasons, for example when a private module\n                 // was referenced."}, {"sha": "0e054013cd779ed30eab29353d0dd4c1c7cc9b33", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -435,7 +435,12 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(INDIRECT_STRUCTURAL_MATCH),\n             reference: \"issue #62411 <https://github.com/rust-lang/rust/issues/62411>\",\n             edition: None,\n-        }\n+        },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(SOFT_UNSTABLE),\n+            reference: \"issue #64266 <https://github.com/rust-lang/rust/issues/64266>\",\n+            edition: None,\n+        },\n         ]);\n \n     // Register renamed and removed lints."}, {"sha": "333509e18504d9c9a2e11cab81af5f6df36c7b12", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -728,9 +728,10 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                                              expansion,\n                                              item.span);\n                 self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n+                self.parent_scope.module = module;\n \n                 for variant in &(*enum_definition).variants {\n-                    self.build_reduced_graph_for_variant(variant, module, vis);\n+                    self.build_reduced_graph_for_variant(variant, vis);\n                 }\n             }\n \n@@ -818,10 +819,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n     // Constructs the reduced graph for one variant. Variants exist in the\n     // type and value namespaces.\n-    fn build_reduced_graph_for_variant(&mut self,\n-                                       variant: &Variant,\n-                                       parent: Module<'a>,\n-                                       vis: ty::Visibility) {\n+    fn build_reduced_graph_for_variant(&mut self, variant: &Variant, vis: ty::Visibility) {\n+        let parent = self.parent_scope.module;\n         let expn_id = self.parent_scope.expansion;\n         let ident = variant.ident;\n \n@@ -1253,9 +1252,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         let expansion = self.parent_scope.expansion;\n         self.r.define(parent, item.ident, ns, (res, vis, item.span, expansion));\n \n-        self.parent_scope.module = parent.parent.unwrap(); // nearest normal ancestor\n         visit::walk_trait_item(self, item);\n-        self.parent_scope.module = parent;\n     }\n \n     fn visit_token(&mut self, t: Token) {"}, {"sha": "6e131c04722a92c6431b43f1c4c5785a5848a93f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -535,7 +535,11 @@ impl<'a> ModuleData<'a> {\n     }\n \n     fn nearest_item_scope(&'a self) -> Module<'a> {\n-        if self.is_trait() { self.parent.unwrap() } else { self }\n+        match self.kind {\n+            ModuleKind::Def(DefKind::Enum, ..) | ModuleKind::Def(DefKind::Trait, ..) =>\n+                self.parent.expect(\"enum or trait module without a parent\"),\n+            _ => self,\n+        }\n     }\n \n     fn is_ancestor_of(&self, mut other: &Self) -> bool {\n@@ -1637,7 +1641,7 @@ impl<'a> Resolver<'a> {\n         }\n \n         if let ModuleKind::Block(..) = module.kind {\n-            return Some(module.parent.unwrap());\n+            return Some(module.parent.unwrap().nearest_item_scope());\n         }\n \n         None"}, {"sha": "87439440463b3ba2265eaeee52e18505eac58a76", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -774,10 +774,10 @@ impl<'a> Resolver<'a> {\n     fn check_stability_and_deprecation(&self, ext: &SyntaxExtension, path: &ast::Path) {\n         let span = path.span;\n         if let Some(stability) = &ext.stability {\n-            if let StabilityLevel::Unstable { reason, issue } = stability.level {\n+            if let StabilityLevel::Unstable { reason, issue, is_soft } = stability.level {\n                 let feature = stability.feature;\n                 if !self.active_features.contains(&feature) && !span.allows_unstable(feature) {\n-                    stability::report_unstable(self.session, feature, reason, issue, span);\n+                    stability::report_unstable(self.session, feature, reason, issue, is_soft, span);\n                 }\n             }\n             if let Some(depr) = &stability.rustc_depr {"}, {"sha": "da72dfd1551829c1a62421a13fee279a2da0a0ce", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -161,6 +161,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Warn for non-block expressions with diverging children.\n         match expr.node {\n             ExprKind::Block(..) | ExprKind::Loop(..) | ExprKind::Match(..) => {},\n+            ExprKind::Call(ref callee, _) =>\n+                self.warn_if_unreachable(expr.hir_id, callee.span, \"call\"),\n+            ExprKind::MethodCall(_, ref span, _) =>\n+                self.warn_if_unreachable(expr.hir_id, *span, \"call\"),\n             _ => self.warn_if_unreachable(expr.hir_id, expr.span, \"expression\"),\n         }\n "}, {"sha": "c8838311e8dbf7a73b06336a47c08d7bf07bc870", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -578,6 +578,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             ty::Param(p) => {\n                 self.assemble_inherent_candidates_from_param(p);\n             }\n+            ty::Bool => {\n+                let lang_def_id = lang_items.bool_impl();\n+                self.assemble_inherent_impl_for_primitive(lang_def_id);\n+            }\n             ty::Char => {\n                 let lang_def_id = lang_items.char_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);"}, {"sha": "e7c2126cfd7277e9c414ef8dca3c459c12b140ee", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -67,6 +67,14 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n             ty::Dynamic(ref data, ..) if data.principal_def_id().is_some() => {\n                 self.check_def_id(item, data.principal_def_id().unwrap());\n             }\n+            ty::Bool => {\n+                self.check_primitive_impl(def_id,\n+                                          lang_items.bool_impl(),\n+                                          None,\n+                                          \"bool\",\n+                                          \"bool\",\n+                                          item.span);\n+            }\n             ty::Char => {\n                 self.check_primitive_impl(def_id,\n                                           lang_items.char_impl(),"}, {"sha": "38eff43bad2be9cd0dbb1328d13661cc913054ab", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -3977,7 +3977,7 @@ fn build_deref_target_impls(cx: &DocContext<'_>,\n             F32 => tcx.lang_items().f32_impl(),\n             F64 => tcx.lang_items().f64_impl(),\n             Char => tcx.lang_items().char_impl(),\n-            Bool => None,\n+            Bool => tcx.lang_items().bool_impl(),\n             Str => tcx.lang_items().str_impl(),\n             Slice => tcx.lang_items().slice_impl(),\n             Array => tcx.lang_items().slice_impl(),"}, {"sha": "d6073cdc1e11dff52e45f79346524d0a3096b029", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -679,6 +679,7 @@ fn primitive_impl(cx: &DocContext<'_>, path_str: &str) -> Option<DefId> {\n         \"f32\" => tcx.lang_items().f32_impl(),\n         \"f64\" => tcx.lang_items().f64_impl(),\n         \"str\" => tcx.lang_items().str_impl(),\n+        \"bool\" => tcx.lang_items().bool_impl(),\n         \"char\" => tcx.lang_items().char_impl(),\n         _ => None,\n     }"}, {"sha": "28c64d0b9638e3d4142eb195ad42e1fe272f9551", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -53,6 +53,7 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n         lang_items.f64_impl(),\n         lang_items.f32_runtime_impl(),\n         lang_items.f64_runtime_impl(),\n+        lang_items.bool_impl(),\n         lang_items.char_impl(),\n         lang_items.str_impl(),\n         lang_items.slice_impl(),"}, {"sha": "b5037b75f79e717387a18a59fbf118d3ef54710b", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -154,23 +154,10 @@ pub struct Stability {\n #[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n pub enum StabilityLevel {\n     // Reason for the current stability level and the relevant rust-lang issue\n-    Unstable { reason: Option<Symbol>, issue: u32 },\n+    Unstable { reason: Option<Symbol>, issue: u32, is_soft: bool },\n     Stable { since: Symbol },\n }\n \n-impl Stability {\n-    pub fn unstable(feature: Symbol, reason: Option<Symbol>, issue: u32) -> Stability {\n-        Stability {\n-            level: StabilityLevel::Unstable { reason, issue },\n-            feature,\n-            rustc_depr: None,\n-            const_stability: None,\n-            promotable: false,\n-            allow_const_fn_ptr: false,\n-        }\n-    }\n-}\n-\n impl StabilityLevel {\n     pub fn is_unstable(&self) -> bool {\n         if let StabilityLevel::Unstable {..} = *self {\n@@ -356,19 +343,27 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                     let mut feature = None;\n                     let mut reason = None;\n                     let mut issue = None;\n+                    let mut is_soft = false;\n                     for meta in metas {\n                         if let Some(mi) = meta.meta_item() {\n                             match mi.name_or_empty() {\n                                 sym::feature => if !get(mi, &mut feature) { continue 'outer },\n                                 sym::reason => if !get(mi, &mut reason) { continue 'outer },\n                                 sym::issue => if !get(mi, &mut issue) { continue 'outer },\n+                                sym::soft => {\n+                                    if !mi.is_word() {\n+                                        let msg = \"`soft` should not have any arguments\";\n+                                        sess.span_diagnostic.span_err(mi.span, msg);\n+                                    }\n+                                    is_soft = true;\n+                                }\n                                 _ => {\n                                     handle_errors(\n                                         sess,\n                                         meta.span(),\n                                         AttrError::UnknownMetaItem(\n                                             mi.path.to_string(),\n-                                            &[\"feature\", \"reason\", \"issue\"]\n+                                            &[\"feature\", \"reason\", \"issue\", \"soft\"]\n                                         ),\n                                     );\n                                     continue 'outer\n@@ -400,7 +395,8 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                                       \"incorrect 'issue'\");\n                                             continue\n                                         }\n-                                    }\n+                                    },\n+                                    is_soft,\n                                 },\n                                 feature,\n                                 rustc_depr: None,"}, {"sha": "ab32d4461ef8775ea73666449e0380ad0f5967a6", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -626,6 +626,7 @@ symbols! {\n         size,\n         slice_patterns,\n         slicing_syntax,\n+        soft,\n         Some,\n         specialization,\n         speed,"}, {"sha": "8709fb681704b7e9867e8a8627a36d996cd76643", "filename": "src/test/debuginfo/boxed-struct.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fboxed-struct.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -8,11 +8,11 @@\n \n // gdb-command:run\n \n-// gdb-command:print *unique\n+// gdb-command:print *boxed_with_padding\n // gdbg-check:$1 = {x = 99, y = 999, z = 9999, w = 99999}\n // gdbr-check:$1 = boxed_struct::StructWithSomePadding {x: 99, y: 999, z: 9999, w: 99999}\n \n-// gdb-command:print *unique_dtor\n+// gdb-command:print *boxed_with_dtor\n // gdbg-check:$2 = {x = 77, y = 777, z = 7777, w = 77777}\n // gdbr-check:$2 = boxed_struct::StructWithDestructor {x: 77, y: 777, z: 7777, w: 77777}\n \n@@ -21,13 +21,13 @@\n \n // lldb-command:run\n \n-// lldb-command:print *unique\n+// lldb-command:print *boxed_with_padding\n // lldbg-check:[...]$0 = StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 }\n-// lldbr-check:(boxed_struct::StructWithSomePadding) *unique = StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 }\n+// lldbr-check:(boxed_struct::StructWithSomePadding) *boxed_with_padding = StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 }\n \n-// lldb-command:print *unique_dtor\n+// lldb-command:print *boxed_with_dtor\n // lldbg-check:[...]$1 = StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 }\n-// lldbr-check:(boxed_struct::StructWithDestructor) *unique_dtor = StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 }\n+// lldbr-check:(boxed_struct::StructWithDestructor) *boxed_with_dtor = StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 }\n \n #![allow(unused_variables)]\n #![feature(box_syntax)]\n@@ -54,9 +54,9 @@ impl Drop for StructWithDestructor {\n \n fn main() {\n \n-    let unique: Box<_> = box StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 };\n+    let boxed_with_padding: Box<_> = box StructWithSomePadding { x: 99, y: 999, z: 9999, w: 99999 };\n \n-    let unique_dtor: Box<_> = box StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 };\n+    let boxed_with_dtor: Box<_> = box StructWithDestructor { x: 77, y: 777, z: 7777, w: 77777 };\n     zzz(); // #break\n }\n "}, {"sha": "afe4dc7d54c9b03339dcb818d3f898bdc34d2328", "filename": "src/test/ui/feature-gates/bench.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -0,0 +1,5 @@\n+#[bench] //~ ERROR use of unstable library feature 'test'\n+         //~| WARN this was previously accepted\n+fn bench() {}\n+\n+fn main() {}"}, {"sha": "b9e24e931d42b9e00a29129098ee445ba19df5ee", "filename": "src/test/ui/feature-gates/bench.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fbench.stderr?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -0,0 +1,12 @@\n+error: use of unstable library feature 'test': `bench` is a part of custom test frameworks which are unstable\n+  --> $DIR/bench.rs:1:3\n+   |\n+LL | #[bench]\n+   |   ^^^^^\n+   |\n+   = note: `#[deny(soft_unstable)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #64266 <https://github.com/rust-lang/rust/issues/64266>\n+\n+error: aborting due to previous error\n+"}, {"sha": "b1b5bf03fe52abf806f9a56a0d4fcc292aec1ca5", "filename": "src/test/ui/never-assign-dead-code.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever-assign-dead-code.stderr?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -11,11 +11,11 @@ LL | #![warn(unused)]\n    |         ^^^^^^\n    = note: `#[warn(unreachable_code)]` implied by `#[warn(unused)]`\n \n-warning: unreachable expression\n+warning: unreachable call\n   --> $DIR/never-assign-dead-code.rs:10:5\n    |\n LL |     drop(x);\n-   |     ^^^^^^^\n+   |     ^^^^\n \n warning: unused variable: `x`\n   --> $DIR/never-assign-dead-code.rs:9:9"}, {"sha": "f2db17e4dfe8e1be6ff3bdd064f3f438738f21b4", "filename": "src/test/ui/reachable/expr_call.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_call.stderr?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -10,11 +10,11 @@ note: lint level defined here\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: unreachable expression\n+error: unreachable call\n   --> $DIR/expr_call.rs:18:5\n    |\n LL |     bar(return);\n-   |     ^^^^^^^^^^^\n+   |     ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "947ea0fee889c9e0c50a0ad9b619f538821e5ebd", "filename": "src/test/ui/reachable/expr_method.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_method.stderr?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -10,11 +10,11 @@ note: lint level defined here\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: unreachable expression\n-  --> $DIR/expr_method.rs:21:5\n+error: unreachable call\n+  --> $DIR/expr_method.rs:21:9\n    |\n LL |     Foo.bar(return);\n-   |     ^^^^^^^^^^^^^^^\n+   |         ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "bc86f94e921cb232ffa63a666363ea0732c438f9", "filename": "src/test/ui/resolve/block-with-trait-parent.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fui%2Fresolve%2Fblock-with-trait-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fui%2Fresolve%2Fblock-with-trait-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fblock-with-trait-parent.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+\n+trait Trait {\n+    fn method(&self) {\n+        // Items inside a block turn it into a module internally.\n+        struct S;\n+        impl Trait for S {}\n+\n+        // OK, `Trait` is in scope here from method resolution point of view.\n+        S.method();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "dd94e79f4d84c717895f8821461dc716529374be", "filename": "src/test/ui/unreachable/unreachable-in-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.rs?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -14,7 +14,7 @@ fn diverge_first() {\n          get_u8()); //~ ERROR unreachable expression\n }\n fn diverge_second() {\n-    call( //~ ERROR unreachable expression\n+    call( //~ ERROR unreachable call\n         get_u8(),\n         diverge());\n }"}, {"sha": "c740011c4a125711bfdbc4ab2314d17009ec2618", "filename": "src/test/ui/unreachable/unreachable-in-call.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7b05af814f02681d8973438df4ed5792f581841/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funreachable%2Funreachable-in-call.stderr?ref=f7b05af814f02681d8973438df4ed5792f581841", "patch": "@@ -10,13 +10,11 @@ note: lint level defined here\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n \n-error: unreachable expression\n+error: unreachable call\n   --> $DIR/unreachable-in-call.rs:17:5\n    |\n-LL | /     call(\n-LL | |         get_u8(),\n-LL | |         diverge());\n-   | |__________________^\n+LL |     call(\n+   |     ^^^^\n \n error: aborting due to 2 previous errors\n "}]}