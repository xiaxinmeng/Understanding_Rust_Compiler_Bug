{"sha": "1d7d0192d264aa03358fab1d683b984ed6eef2d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkN2QwMTkyZDI2NGFhMDMzNThmYWIxZDY4M2I5ODRlZDZlZWYyZDc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-04-17T10:58:55Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-04-18T22:01:58Z"}, "message": "Add backquotes to have better looking rust code", "tree": {"sha": "c2942d463e1fbf823d503cd20f7859c9e96041b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2942d463e1fbf823d503cd20f7859c9e96041b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d7d0192d264aa03358fab1d683b984ed6eef2d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d7d0192d264aa03358fab1d683b984ed6eef2d7", "html_url": "https://github.com/rust-lang/rust/commit/1d7d0192d264aa03358fab1d683b984ed6eef2d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d7d0192d264aa03358fab1d683b984ed6eef2d7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49a94f29bbe49bd26d14cbf87b0955bd4befb8c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/49a94f29bbe49bd26d14cbf87b0955bd4befb8c1", "html_url": "https://github.com/rust-lang/rust/commit/49a94f29bbe49bd26d14cbf87b0955bd4befb8c1"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "055129b35df9eb58a876a30aec490ce23f707f41", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1d7d0192d264aa03358fab1d683b984ed6eef2d7/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d7d0192d264aa03358fab1d683b984ed6eef2d7/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=1d7d0192d264aa03358fab1d683b984ed6eef2d7", "patch": "@@ -75,11 +75,13 @@ the following is invalid as it requires the entire Option<String> to be moved\n into a variable called `op_string` while simultaneously requiring the inner\n String to be moved into a variable called `s`.\n \n+```\n let x = Some(\"s\".to_string());\n match x {\n     op_string @ Some(s) => ...\n     None => ...\n }\n+```\n \n See also Error 303.\n \"##,\n@@ -90,10 +92,12 @@ name is bound by move in a pattern, it should also be moved to wherever it is\n referenced in the pattern guard code. Doing so however would prevent the name\n from being available in the body of the match arm. Consider the following:\n \n+```\n match Some(\"hi\".to_string()) {\n     Some(s) if s.len() == 0 => // use s.\n     ...\n }\n+```\n \n The variable `s` has type String, and its use in the guard is as a variable of\n type String. The guard code effectively executes in a separate scope to the body\n@@ -102,11 +106,13 @@ become unavailable in the body of the arm. Although this example seems\n innocuous, the problem is most clear when considering functions that take their\n argument by value.\n \n+```\n match Some(\"hi\".to_string()) {\n     Some(s) if { drop(s); false } => (),\n     Some(s) => // use s.\n     ...\n }\n+```\n \n The value would be dropped in the guard then become unavailable not only in the\n body of that arm but also in all subsequent arms! The solution is to bind by\n@@ -218,6 +224,7 @@ An if-let pattern attempts to match the pattern, and enters the body if the\n match was succesful. If the match is irrefutable (when it cannot fail to match),\n use a regular `let`-binding instead. For instance:\n \n+```\n struct Irrefutable(i32);\n let irr = Irrefutable(0);\n \n@@ -230,13 +237,15 @@ if let Irrefutable(x) = irr {\n // Try this instead:\n let Irrefutable(x) = irr;\n foo(x);\n+```\n \"##,\n \n E0165: r##\"\n A while-let pattern attempts to match the pattern, and enters the body if the\n match was succesful. If the match is irrefutable (when it cannot fail to match),\n use a regular `let`-binding inside a `loop` instead. For instance:\n \n+```\n struct Irrefutable(i32);\n let irr = Irrefutable(0);\n \n@@ -250,6 +259,7 @@ loop {\n     let Irrefutable(x) = irr;\n     ...\n }\n+```\n \"##,\n \n E0170: r##\"\n@@ -304,6 +314,7 @@ that a name will be extracted in all cases. Instead of pattern matching the\n loop variable, consider using a `match` or `if let` inside the loop body. For\n instance:\n \n+```\n // This fails because `None` is not covered.\n for Some(x) in xs {\n     ...\n@@ -323,6 +334,7 @@ for item in xs {\n         ...\n     }\n }\n+```\n \"##,\n \n E0301: r##\"\n@@ -332,11 +344,13 @@ on which the match depends in such a way, that the match would not be\n exhaustive. For instance, the following would not match any arm if mutable\n borrows were allowed:\n \n+```\n match Some(()) {\n     None => { },\n     option if option.take().is_none() => { /* impossible, option is `Some` */ },\n     Some(_) => { } // When the previous match failed, the option became `None`.\n }\n+```\n \"##,\n \n E0302: r##\"\n@@ -346,21 +360,24 @@ on which the match depends in such a way, that the match would not be\n exhaustive. For instance, the following would not match any arm if assignments\n were allowed:\n \n+```\n match Some(()) {\n     None => { },\n     option if { option = None; false } { },\n     Some(_) => { } // When the previous match failed, the option became `None`.\n }\n+```\n \"##,\n \n E0303: r##\"\n In certain cases it is possible for sub-bindings to violate memory safety.\n Updates to the borrow checker in a future version of Rust may remove this\n restriction, but for now patterns must be rewritten without sub-bindings.\n \n-// Before.\n-match Some(\"hi\".to_string()) {\n-    ref op_string_ref @ Some(ref s) => ...\n+```\n+// Code like this...\n+match Some(5) {\n+    ref op_num @ Some(num) => ...\n     None => ...\n }\n \n@@ -372,6 +389,7 @@ match Some(\"hi\".to_string()) {\n     }\n     None => ...\n }\n+```\n \n The `op_string_ref` binding has type &Option<&String> in both cases.\n "}]}