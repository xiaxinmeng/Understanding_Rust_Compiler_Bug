{"sha": "409d8af3c4455638d017b4d34a16230c34d94771", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwOWQ4YWYzYzQ0NTU2MzhkMDE3YjRkMzRhMTYyMzBjMzRkOTQ3NzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-31T02:52:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-31T02:52:31Z"}, "message": "rustdoc: deny(deprecated_mode)", "tree": {"sha": "477ea8a387aea74af90c93ecba1d8c12e867bd84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/477ea8a387aea74af90c93ecba1d8c12e867bd84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/409d8af3c4455638d017b4d34a16230c34d94771", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/409d8af3c4455638d017b4d34a16230c34d94771", "html_url": "https://github.com/rust-lang/rust/commit/409d8af3c4455638d017b4d34a16230c34d94771", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/409d8af3c4455638d017b4d34a16230c34d94771/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ee94529d902adfef8d7de66285b6730b663fe5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ee94529d902adfef8d7de66285b6730b663fe5b", "html_url": "https://github.com/rust-lang/rust/commit/1ee94529d902adfef8d7de66285b6730b663fe5b"}], "stats": {"total": 139, "additions": 70, "deletions": 69}, "files": [{"sha": "f76084d5fb98232e61c6ef3d5d4910c075996e72", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=409d8af3c4455638d017b4d34a16230c34d94771", "patch": "@@ -62,19 +62,19 @@ impl Srv: Clone {\n     fn clone(&self) -> Srv { copy *self }\n }\n \n-pub fn from_str<T>(source: ~str, owner: SrvOwner<T>) -> T {\n+pub fn from_str<T>(+source: ~str, owner: SrvOwner<T>) -> T {\n     run(owner, copy source, parse::from_str_sess)\n }\n \n-pub fn from_file<T>(file: ~str, owner: SrvOwner<T>) -> T {\n+pub fn from_file<T>(+file: ~str, owner: SrvOwner<T>) -> T {\n     run(owner, copy file, |sess, f| parse::from_file_sess(sess, &Path(f)))\n }\n \n-fn run<T>(owner: SrvOwner<T>, source: ~str, +parse: Parser) -> T {\n+fn run<T>(owner: SrvOwner<T>, +source: ~str, +parse: Parser) -> T {\n \n     let srv_ = Srv({\n         ch: do util::spawn_listener |copy source, move parse, po| {\n-            act(po, copy source, parse);\n+            act(po, copy source, copy parse);\n         }\n     });\n \n@@ -83,7 +83,7 @@ fn run<T>(owner: SrvOwner<T>, source: ~str, +parse: Parser) -> T {\n     move res\n }\n \n-fn act(po: oldcomm::Port<Msg>, source: ~str, parse: Parser) {\n+fn act(po: oldcomm::Port<Msg>, +source: ~str, +parse: Parser) {\n     let sess = build_session();\n \n     let ctxt = build_ctxt("}, {"sha": "c4671f0e8396e56b55df0a7c0733a3221e5efd8a", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=409d8af3c4455638d017b4d34a16230c34d94771", "patch": "@@ -221,7 +221,7 @@ fn fold_trait(\n fn merge_method_attrs(\n     srv: astsrv::Srv,\n     item_id: doc::AstId,\n-    docs: ~[doc::MethodDoc]\n+    +docs: ~[doc::MethodDoc]\n ) -> ~[doc::MethodDoc] {\n \n     // Create an assoc list from method name to attributes\n@@ -319,7 +319,7 @@ mod test {\n     use doc;\n     use extract;\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    pub fn mk_doc(+source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc)"}, {"sha": "81b10666673d51b27a6d9fc10c525d1e6db2f14e", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=409d8af3c4455638d017b4d34a16230c34d94771", "patch": "@@ -39,8 +39,8 @@ enum OmNomNomy {\n }\n \n fn take_my_order_please(\n-    _waitperson: WaitPerson,\n-    _order: ~[OmNomNomy]\n+    +_waitperson: WaitPerson,\n+    +_order: ~[OmNomNomy]\n ) -> uint {\n \n     /*!"}, {"sha": "b6632c602ffc86d4a97ded04e8a89b14b1e5a502", "filename": "src/librustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdesc_to_brief_pass.rs?ref=409d8af3c4455638d017b4d34a16230c34d94771", "patch": "@@ -52,7 +52,7 @@ fn fold_item(fold: &fold::Fold<()>, +doc: doc::ItemDoc) -> doc::ItemDoc {\n     let doc = fold::default_seq_fold_item(fold, doc);\n \n     doc::ItemDoc {\n-        brief: extract(doc.desc),\n+        brief: extract(copy doc.desc),\n         .. doc\n     }\n }\n@@ -62,7 +62,7 @@ fn fold_trait(fold: &fold::Fold<()>, +doc: doc::TraitDoc) -> doc::TraitDoc {\n \n     doc::TraitDoc {\n         methods: par::map(doc.methods, |doc| doc::MethodDoc {\n-            brief: extract(doc.desc),\n+            brief: extract(copy doc.desc),\n             .. copy *doc\n         }),\n         .. doc\n@@ -74,7 +74,7 @@ fn fold_impl(fold: &fold::Fold<()>, +doc: doc::ImplDoc) -> doc::ImplDoc {\n \n     doc::ImplDoc {\n         methods: par::map(doc.methods, |doc| doc::MethodDoc {\n-            brief: extract(doc.desc),\n+            brief: extract(copy doc.desc),\n             .. copy *doc\n         }),\n         .. doc\n@@ -108,7 +108,7 @@ pub mod test {\n     use doc;\n     use extract;\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    pub fn mk_doc(+source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv, doc);\n@@ -117,15 +117,15 @@ pub mod test {\n     }\n }\n \n-fn extract(desc: Option<~str>) -> Option<~str> {\n+fn extract(+desc: Option<~str>) -> Option<~str> {\n     if desc.is_none() {\n         return None\n     }\n \n     parse_desc((copy desc).get())\n }\n \n-fn parse_desc(desc: ~str) -> Option<~str> {\n+fn parse_desc(+desc: ~str) -> Option<~str> {\n \n     const max_brief_len: uint = 120u;\n \n@@ -141,7 +141,7 @@ fn parse_desc(desc: ~str) -> Option<~str> {\n     }\n }\n \n-fn first_sentence(s: ~str) -> Option<~str> {\n+fn first_sentence(+s: ~str) -> Option<~str> {\n     let paras = paragraphs(copy s);\n     if !paras.is_empty() {\n         let first_para = vec::head(paras);\n@@ -151,7 +151,7 @@ fn first_sentence(s: ~str) -> Option<~str> {\n     }\n }\n \n-fn first_sentence_(s: ~str) -> ~str {\n+fn first_sentence_(+s: ~str) -> ~str {\n     let mut dotcount = 0;\n     // The index of the character following a single dot. This allows\n     // Things like [0..1) to appear in the brief description\n@@ -182,7 +182,7 @@ fn first_sentence_(s: ~str) -> ~str {\n     }\n }\n \n-fn paragraphs(s: ~str) -> ~[~str] {\n+fn paragraphs(+s: ~str) -> ~[~str] {\n     let lines = str::lines_any(s);\n     let mut whitespace_lines = 0;\n     let mut accum = ~\"\";\n@@ -233,7 +233,7 @@ fn test_paragraphs_2() {\n #[test]\n fn should_promote_short_descs() {\n     let desc = Some(~\"desc\");\n-    let brief = extract(desc);\n+    let brief = extract(copy desc);\n     assert brief == desc;\n }\n "}, {"sha": "3e14c6f92ce2e11c1f51c9ecdba1576576a25f32", "filename": "src/librustdoc/escape_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fescape_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fescape_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fescape_pass.rs?ref=409d8af3c4455638d017b4d34a16230c34d94771", "patch": "@@ -19,7 +19,7 @@ pub fn mk_pass() -> Pass {\n     text_pass::mk_pass(~\"escape\", escape)\n }\n \n-fn escape(s: ~str) -> ~str {\n+fn escape(s: &str) -> ~str {\n     str::replace(s, ~\"\\\\\", ~\"\\\\\\\\\")\n }\n "}, {"sha": "70e4d547bd4c7bf78e232283276d2998649fb3b6", "filename": "src/librustdoc/extract.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fextract.rs?ref=409d8af3c4455638d017b4d34a16230c34d94771", "patch": "@@ -71,7 +71,7 @@ fn top_moddoc_from_crate(\n     +default_name: ~str\n ) -> doc::ModDoc {\n     moddoc_from_mod(mk_itemdoc(ast::crate_node_id, default_name),\n-                    crate.node.module)\n+                    copy crate.node.module)\n }\n \n fn mk_itemdoc(id: ast::node_id, +name: ~str) -> doc::ItemDoc {\n@@ -88,7 +88,7 @@ fn mk_itemdoc(id: ast::node_id, +name: ~str) -> doc::ItemDoc {\n \n fn moddoc_from_mod(\n     +itemdoc: doc::ItemDoc,\n-    module_: ast::_mod\n+    +module_: ast::_mod\n ) -> doc::ModDoc {\n     doc::ModDoc {\n         item: itemdoc,\n@@ -149,7 +149,7 @@ fn moddoc_from_mod(\n \n fn nmoddoc_from_mod(\n     +itemdoc: doc::ItemDoc,\n-    module_: ast::foreign_mod\n+    +module_: ast::foreign_mod\n ) -> doc::NmodDoc {\n     let mut fns = ~[];\n     for module_.items.each |item| {\n@@ -273,7 +273,7 @@ fn should_extract_trait_methods() {\n \n fn impldoc_from_impl(\n     +itemdoc: doc::ItemDoc,\n-    methods: ~[@ast::method]\n+    +methods: ~[@ast::method]\n ) -> doc::ImplDoc {\n     doc::ImplDoc {\n         item: itemdoc,"}, {"sha": "5c209b7fef44876d9f3910eb765ae6cfb2e97a87", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=409d8af3c4455638d017b4d34a16230c34d94771", "patch": "@@ -81,7 +81,7 @@ fn make_doc_from_pages(page_port: PagePort) -> doc::Doc {\n     }\n }\n \n-fn find_pages(doc: doc::Doc, page_chan: PageChan) {\n+fn find_pages(+doc: doc::Doc, page_chan: PageChan) {\n     let fold = Fold {\n         fold_crate: fold_crate,\n         fold_mod: fold_mod,\n@@ -101,7 +101,7 @@ fn fold_crate(\n     let doc = fold::default_seq_fold_crate(fold, doc);\n \n     let page = doc::CratePage(doc::CrateDoc {\n-        topmod: strip_mod(doc.topmod),\n+        topmod: strip_mod(copy doc.topmod),\n         .. copy doc\n     });\n \n@@ -119,15 +119,15 @@ fn fold_mod(\n \n     if doc.id() != ast::crate_node_id {\n \n-        let doc = strip_mod(doc);\n+        let doc = strip_mod(copy doc);\n         let page = doc::ItemPage(doc::ModTag(doc));\n         oldcomm::send(fold.ctxt.op, Some(page));\n     }\n \n     doc\n }\n \n-fn strip_mod(doc: doc::ModDoc) -> doc::ModDoc {\n+fn strip_mod(+doc: doc::ModDoc) -> doc::ModDoc {\n     doc::ModDoc {\n         items: do doc.items.filtered |item| {\n             match *item {\n@@ -193,15 +193,15 @@ mod test {\n \n     pub fn mk_doc_(\n         output_style: config::OutputStyle,\n-        source: ~str\n+        +source: ~str\n     ) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc, output_style)\n         }\n     }\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    pub fn mk_doc(+source: ~str) -> doc::Doc {\n         mk_doc_(config::DocPerMod, copy source)\n     }\n }"}, {"sha": "49165fbf019cac8418ea94d124b0d5e847a385dd", "filename": "src/librustdoc/prune_hidden_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fprune_hidden_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_hidden_pass.rs?ref=409d8af3c4455638d017b4d34a16230c34d94771", "patch": "@@ -50,7 +50,7 @@ fn fold_mod(\n     }\n }\n \n-fn is_hidden(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {\n+fn is_hidden(srv: astsrv::Srv, +doc: doc::ItemDoc) -> bool {\n     use syntax::ast_map;\n \n     let id = doc.id;\n@@ -76,7 +76,7 @@ pub mod test {\n     use extract;\n     use prune_hidden_pass::run;\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    pub fn mk_doc(+source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc)"}, {"sha": "ad39c1b9855112e4ec10f6411c30c058d8466acf", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=409d8af3c4455638d017b4d34a16230c34d94771", "patch": "@@ -51,7 +51,7 @@ fn fold_mod(\n     }\n }\n \n-fn is_visible(srv: astsrv::Srv, doc: doc::ItemDoc) -> bool {\n+fn is_visible(srv: astsrv::Srv, +doc: doc::ItemDoc) -> bool {\n     use syntax::ast_map;\n     use syntax::ast;\n \n@@ -80,7 +80,7 @@ pub mod test {\n     use extract;\n     use prune_private_pass::run;\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    pub fn mk_doc(+source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc)"}, {"sha": "4fc68ff802c5d22874613c8f33abbbac9b4b884a", "filename": "src/librustdoc/rustdoc.rc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rc?ref=409d8af3c4455638d017b4d34a16230c34d94771", "patch": "@@ -24,7 +24,6 @@\n #[legacy_records];\n \n #[allow(non_implicitly_copyable_typarams)];\n-#[allow(deprecated_mode)];\n #[allow(deprecated_self)];\n \n extern mod core(vers = \"0.6\");\n@@ -89,7 +88,7 @@ fn main() {\n }\n \n /// Runs rustdoc over the given file\n-fn run(config: Config) {\n+fn run(+config: Config) {\n \n     let source_file = copy config.input_crate;\n \n@@ -148,7 +147,7 @@ fn run(config: Config) {\n     }\n }\n \n-fn time<T>(what: ~str, f: fn() -> T) -> T {\n+fn time<T>(+what: ~str, f: fn() -> T) -> T {\n     let start = std::time::precise_time_s();\n     let rv = f();\n     let end = std::time::precise_time_s();"}, {"sha": "d6cf2e7b5e768c6728c3333d646ff96fc8c58459", "filename": "src/librustdoc/sectionalize_pass.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsectionalize_pass.rs?ref=409d8af3c4455638d017b4d34a16230c34d94771", "patch": "@@ -44,7 +44,7 @@ pub fn run(_srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n \n fn fold_item(fold: &fold::Fold<()>, +doc: doc::ItemDoc) -> doc::ItemDoc {\n     let doc = fold::default_seq_fold_item(fold, doc);\n-    let (desc, sections) = sectionalize(doc.desc);\n+    let (desc, sections) = sectionalize(copy doc.desc);\n \n     doc::ItemDoc {\n         desc: desc,\n@@ -58,7 +58,7 @@ fn fold_trait(fold: &fold::Fold<()>, +doc: doc::TraitDoc) -> doc::TraitDoc {\n \n     doc::TraitDoc {\n         methods: do par::map(doc.methods) |method| {\n-            let (desc, sections) = sectionalize(method.desc);\n+            let (desc, sections) = sectionalize(copy method.desc);\n \n             doc::MethodDoc {\n                 desc: desc,\n@@ -75,7 +75,7 @@ fn fold_impl(fold: &fold::Fold<()>, +doc: doc::ImplDoc) -> doc::ImplDoc {\n \n     doc::ImplDoc {\n         methods: do par::map(doc.methods) |method| {\n-            let (desc, sections) = sectionalize(method.desc);\n+            let (desc, sections) = sectionalize(copy method.desc);\n \n             doc::MethodDoc {\n                 desc: desc,\n@@ -87,7 +87,7 @@ fn fold_impl(fold: &fold::Fold<()>, +doc: doc::ImplDoc) -> doc::ImplDoc {\n     }\n }\n \n-fn sectionalize(desc: Option<~str>) -> (Option<~str>, ~[doc::Section]) {\n+fn sectionalize(+desc: Option<~str>) -> (Option<~str>, ~[doc::Section]) {\n \n     /*!\n      * Take a description of the form\n@@ -156,7 +156,7 @@ fn sectionalize(desc: Option<~str>) -> (Option<~str>, ~[doc::Section]) {\n     (new_desc, sections)\n }\n \n-fn parse_header(line: ~str) -> Option<~str> {\n+fn parse_header(+line: ~str) -> Option<~str> {\n     if str::starts_with(line, ~\"# \") {\n         Some(str::slice(line, 2u, str::len(line)))\n     } else {\n@@ -259,7 +259,7 @@ pub mod test {\n     use extract;\n     use sectionalize_pass::run;\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    pub fn mk_doc(+source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv, doc);"}, {"sha": "ac556de74bbf347c8c57ac4cc68e2886a79581c7", "filename": "src/librustdoc/sort_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fsort_pass.rs?ref=409d8af3c4455638d017b4d34a16230c34d94771", "patch": "@@ -27,7 +27,7 @@ pub type ItemLtEqOp = pure fn~(v1: &doc::ItemTag, v2:  &doc::ItemTag) -> bool;\n \n type ItemLtEq = NominalOp<ItemLtEqOp>;\n \n-pub fn mk_pass(name: ~str, +lteq: ItemLtEqOp) -> Pass {\n+pub fn mk_pass(+name: ~str, +lteq: ItemLtEqOp) -> Pass {\n     Pass {\n         name: copy name,\n         f: fn~(move lteq, srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {"}, {"sha": "ac47e25fdcfd33cbc7cd062d389b19f05d4ebdca", "filename": "src/librustdoc/text_pass.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Ftext_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Ftext_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftext_pass.rs?ref=409d8af3c4455638d017b4d34a16230c34d94771", "patch": "@@ -21,17 +21,19 @@ use pass::Pass;\n use util::NominalOp;\n \n use std::par;\n+use std::cell::Cell;\n \n-pub fn mk_pass(name: ~str, +op: fn~(~str) -> ~str) -> Pass {\n+pub fn mk_pass(+name: ~str, +op: fn~(&str) -> ~str) -> Pass {\n+    let op = Cell(op);\n     Pass {\n         name: copy name,\n         f: fn~(move op, srv: astsrv::Srv, +doc: doc::Doc) -> doc::Doc {\n-            run(srv, doc, copy op)\n+            run(srv, doc, op.take())\n         }\n     }\n }\n \n-type Op = fn~(~str) -> ~str;\n+type Op = fn~(&str) -> ~str;\n \n #[allow(non_implicitly_copyable_typarams)]\n fn run(\n@@ -52,8 +54,8 @@ fn run(\n     (fold.fold_doc)(&fold, doc)\n }\n \n-fn maybe_apply_op(op: NominalOp<Op>, s: Option<~str>) -> Option<~str> {\n-    s.map(|s| (op.op)(copy *s) )\n+fn maybe_apply_op(+op: NominalOp<Op>, s: &Option<~str>) -> Option<~str> {\n+    s.map(|s| (op.op)(*s) )\n }\n \n fn fold_item(\n@@ -63,16 +65,16 @@ fn fold_item(\n     let doc = fold::default_seq_fold_item(fold, doc);\n \n     doc::ItemDoc {\n-        brief: maybe_apply_op(fold.ctxt, doc.brief),\n-        desc: maybe_apply_op(fold.ctxt, doc.desc),\n-        sections: apply_to_sections(fold.ctxt, copy doc.sections),\n+        brief: maybe_apply_op(copy fold.ctxt, &doc.brief),\n+        desc: maybe_apply_op(copy fold.ctxt, &doc.desc),\n+        sections: apply_to_sections(copy fold.ctxt, copy doc.sections),\n         .. doc\n     }\n }\n \n fn apply_to_sections(\n-    op: NominalOp<Op>,\n-    sections: ~[doc::Section]\n+    +op: NominalOp<Op>,\n+    +sections: ~[doc::Section]\n ) -> ~[doc::Section] {\n     par::map(sections, |section, copy op| doc::Section {\n         header: (op.op)(copy section.header),\n@@ -89,7 +91,7 @@ fn fold_enum(\n     doc::EnumDoc {\n         variants: do par::map(doc.variants) |variant, copy fold_copy| {\n             doc::VariantDoc {\n-                desc: maybe_apply_op(fold_copy.ctxt, variant.desc),\n+                desc: maybe_apply_op(copy fold_copy.ctxt, &variant.desc),\n                 .. copy *variant\n             }\n         },\n@@ -104,20 +106,20 @@ fn fold_trait(\n     let doc = fold::default_seq_fold_trait(fold, doc);\n \n     doc::TraitDoc {\n-        methods: apply_to_methods(fold.ctxt, copy doc.methods),\n+        methods: apply_to_methods(copy fold.ctxt, copy doc.methods),\n         .. doc\n     }\n }\n \n fn apply_to_methods(\n-    op: NominalOp<Op>,\n-    docs: ~[doc::MethodDoc]\n+    +op: NominalOp<Op>,\n+    +docs: ~[doc::MethodDoc]\n ) -> ~[doc::MethodDoc] {\n     do par::map(docs) |doc, copy op| {\n         doc::MethodDoc {\n-            brief: maybe_apply_op(op, doc.brief),\n-            desc: maybe_apply_op(op, doc.desc),\n-            sections: apply_to_sections(op, copy doc.sections),\n+            brief: maybe_apply_op(copy op, &doc.brief),\n+            desc: maybe_apply_op(copy op, &doc.desc),\n+            sections: apply_to_sections(copy op, copy doc.sections),\n             .. copy *doc\n         }\n     }\n@@ -130,7 +132,7 @@ fn fold_impl(\n     let doc = fold::default_seq_fold_impl(fold, doc);\n \n     doc::ImplDoc {\n-        methods: apply_to_methods(fold.ctxt, copy doc.methods),\n+        methods: apply_to_methods(copy fold.ctxt, copy doc.methods),\n         .. doc\n     }\n }\n@@ -301,7 +303,7 @@ mod test {\n \n     use core::str;\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    pub fn mk_doc(+source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv, doc);"}, {"sha": "c6c289346b1fa1bf55d618d22bc940ee7cdb76f8", "filename": "src/librustdoc/trim_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftrim_pass.rs?ref=409d8af3c4455638d017b4d34a16230c34d94771", "patch": "@@ -43,7 +43,7 @@ mod test {\n     use extract;\n     use trim_pass::mk_pass;\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    pub fn mk_doc(+source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             let doc = (attr_pass::mk_pass().f)(srv, doc);"}, {"sha": "4d279db05961f0adacf77e2ec54b6922771d1288", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=409d8af3c4455638d017b4d34a16230c34d94771", "patch": "@@ -177,7 +177,7 @@ fn fold_trait(\n fn merge_methods(\n     srv: astsrv::Srv,\n     item_id: doc::AstId,\n-    docs: ~[doc::MethodDoc]\n+    +docs: ~[doc::MethodDoc]\n ) -> ~[doc::MethodDoc] {\n     do par::map(docs) |doc| {\n         doc::MethodDoc {\n@@ -190,7 +190,7 @@ fn merge_methods(\n fn get_method_sig(\n     srv: astsrv::Srv,\n     item_id: doc::AstId,\n-    method_name: ~str\n+    +method_name: ~str\n ) -> Option<~str> {\n     do astsrv::exec(srv) |copy method_name, ctxt| {\n         match ctxt.ast_map.get(item_id) {\n@@ -415,7 +415,7 @@ pub mod test {\n     use extract;\n     use tystr_pass::run;\n \n-    pub fn mk_doc(source: ~str) -> doc::Doc {\n+    pub fn mk_doc(+source: ~str) -> doc::Doc {\n         do astsrv::from_str(copy source) |srv| {\n             let doc = extract::from_srv(srv, ~\"\");\n             run(srv, doc)"}, {"sha": "1c53ed5dcce04d7f65b0aa270facbf1d12fb51b5", "filename": "src/librustdoc/unindent_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/409d8af3c4455638d017b4d34a16230c34d94771/src%2Flibrustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Funindent_pass.rs?ref=409d8af3c4455638d017b4d34a16230c34d94771", "patch": "@@ -33,7 +33,7 @@ pub fn mk_pass() -> Pass {\n     text_pass::mk_pass(~\"unindent\", unindent)\n }\n \n-fn unindent(s: ~str) -> ~str {\n+fn unindent(s: &str) -> ~str {\n     let lines = str::lines_any(s);\n     let mut saw_first_line = false;\n     let mut saw_second_line = false;\n@@ -90,7 +90,7 @@ fn unindent(s: ~str) -> ~str {\n         };\n         str::connect(unindented, ~\"\\n\")\n     } else {\n-        copy s\n+        s.to_str()\n     }\n }\n "}]}