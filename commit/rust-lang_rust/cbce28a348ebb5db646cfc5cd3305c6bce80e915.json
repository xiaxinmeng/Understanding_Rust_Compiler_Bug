{"sha": "cbce28a348ebb5db646cfc5cd3305c6bce80e915", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiY2UyOGEzNDhlYmI1ZGI2NDZjZmM1Y2QzMzA1YzZiY2U4MGU5MTU=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-09T12:27:13Z"}, "committer": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-09T12:27:13Z"}, "message": "Reimplement format-hook using a rust binary", "tree": {"sha": "e60851cedc361353b6ca4974dacdc97c8cd08140", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e60851cedc361353b6ca4974dacdc97c8cd08140"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbce28a348ebb5db646cfc5cd3305c6bce80e915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbce28a348ebb5db646cfc5cd3305c6bce80e915", "html_url": "https://github.com/rust-lang/rust/commit/cbce28a348ebb5db646cfc5cd3305c6bce80e915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbce28a348ebb5db646cfc5cd3305c6bce80e915/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e554d551f1510780377158fda8d86ff8c8266fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e554d551f1510780377158fda8d86ff8c8266fe", "html_url": "https://github.com/rust-lang/rust/commit/1e554d551f1510780377158fda8d86ff8c8266fe"}], "stats": {"total": 79, "additions": 52, "deletions": 27}, "files": [{"sha": "c319d33f24c7c33a7fe420715fde4fb1fac272f3", "filename": ".cargo/config", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cbce28a348ebb5db646cfc5cd3305c6bce80e915/.cargo%2Fconfig", "raw_url": "https://github.com/rust-lang/rust/raw/cbce28a348ebb5db646cfc5cd3305c6bce80e915/.cargo%2Fconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.cargo%2Fconfig?ref=cbce28a348ebb5db646cfc5cd3305c6bce80e915", "patch": "@@ -1,10 +1,10 @@\n [alias]\n # Automatically generates the ast and syntax kinds files\n-gen-syntax =   \"run --package tools -- gen-syntax\"\n-gen-tests =    \"run --package tools -- gen-tests\"\n-install-code = \"run --package tools -- install-code\"\n-format =       \"run --package tools -- format\"\n-format-hook =  \"run --package tools -- format-hook\"\n+gen-syntax =   \"run --package tools --bin tools -- gen-syntax\"\n+gen-tests =    \"run --package tools --bin tools -- gen-tests\"\n+install-code = \"run --package tools --bin tools -- install-code\"\n+format =       \"run --package tools --bin tools -- format\"\n+format-hook =  \"run --package tools --bin tools -- format-hook\"\n \n render-test =  \"run --package ra_cli -- render-test\"\n parse =        \"run --package ra_cli -- parse\""}, {"sha": "ca1909479563fa1cfd91663a6249c22f0907ff96", "filename": "crates/tools/src/bin/pre-commit.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/cbce28a348ebb5db646cfc5cd3305c6bce80e915/crates%2Ftools%2Fsrc%2Fbin%2Fpre-commit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbce28a348ebb5db646cfc5cd3305c6bce80e915/crates%2Ftools%2Fsrc%2Fbin%2Fpre-commit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fbin%2Fpre-commit.rs?ref=cbce28a348ebb5db646cfc5cd3305c6bce80e915", "patch": "@@ -0,0 +1,37 @@\n+use std::{\n+    process::{Command},\n+};\n+\n+use tools::{Result, run_rustfmt, run, project_root};\n+use failure::bail;\n+\n+fn main() -> tools::Result<()> {\n+    run_rustfmt(tools::Overwrite)?;\n+    update_staged()\n+}\n+\n+fn update_staged() -> Result<()> {\n+    let root = project_root();\n+    let output = Command::new(\"git\")\n+        .arg(\"diff\")\n+        .arg(\"--name-only\")\n+        .arg(\"--cached\")\n+        .current_dir(&root)\n+        .output()?;\n+    if !output.status.success() {\n+        bail!(\n+            \"`git diff --name-only --cached` exited with {}\",\n+            output.status\n+        );\n+    }\n+    for line in String::from_utf8(output.stdout)?.lines() {\n+        run(\n+            &format!(\n+                \"git update-index --add {}\",\n+                root.join(line).to_string_lossy()\n+            ),\n+            \".\",\n+        )?;\n+    }\n+    Ok(())\n+}"}, {"sha": "95d6e08f048558e7c8f9543907051947c3a4a1d6", "filename": "crates/tools/src/lib.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cbce28a348ebb5db646cfc5cd3305c6bce80e915/crates%2Ftools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbce28a348ebb5db646cfc5cd3305c6bce80e915/crates%2Ftools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Flib.rs?ref=cbce28a348ebb5db646cfc5cd3305c6bce80e915", "patch": "@@ -1,11 +1,9 @@\n use std::{\n     path::{Path, PathBuf},\n     process::{Command, Stdio},\n-    fs::OpenOptions,\n-    io::{Write, Error, ErrorKind}\n+    fs::copy,\n+    io::{Error, ErrorKind}\n };\n-#[cfg(unix)]\n-use std::os::unix::fs::OpenOptionsExt;\n \n use failure::bail;\n use itertools::Itertools;\n@@ -69,7 +67,7 @@ pub fn generate(mode: Mode) -> Result<()> {\n }\n \n pub fn project_root() -> PathBuf {\n-    Path::new(&std::env::var(\"CARGO_MANIFEST_DIR\").unwrap())\n+    Path::new(&env!(\"CARGO_MANIFEST_DIR\"))\n         .ancestors()\n         .nth(2)\n         .unwrap()\n@@ -122,24 +120,14 @@ fn install_rustfmt() -> Result<()> {\n }\n \n pub fn install_format_hook() -> Result<()> {\n-    let path = Path::new(\"./.git/hooks/pre-commit\");\n-    if !path.exists() {\n-        let mut open_options = OpenOptions::new();\n-        #[cfg(unix)]\n-        {\n-            // Set as executable\n-            open_options.mode(0o770);\n+    let result_path = Path::new(\"./.git/hooks/pre-commit\");\n+    if !result_path.exists() {\n+        run(\"cargo build --package tools --bin pre-commit\", \".\")?;\n+        if cfg!(windows) {\n+            copy(\"./target/debug/pre-commit.exe\", result_path)?;\n+        } else {\n+            copy(\"./target/debug/pre-commit\", result_path)?;\n         }\n-        let mut file = open_options.write(true).create(true).open(path)?;\n-        write!(\n-            file,\n-            r#\"#!/bin/sh\n-\n-cargo format\n-for path in $( git diff --name-only --cached ); do\n-    git update-index --add $path\n-done\"#\n-        )?;\n     } else {\n         return Err(Error::new(ErrorKind::AlreadyExists, \"Git hook already created\").into());\n     }"}]}