{"sha": "4fc361823377ca10e6ac38e66824a876012b312e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYzM2MTgyMzM3N2NhMTBlNmFjMzhlNjY4MjRhODc2MDEyYjMxMmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-18T21:11:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-18T21:11:06Z"}, "message": "Change ast::ty_ivec, ty::ty_ivec to ty_vec", "tree": {"sha": "32a10fab303093f438e493811a009819b9df4510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32a10fab303093f438e493811a009819b9df4510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fc361823377ca10e6ac38e66824a876012b312e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fc361823377ca10e6ac38e66824a876012b312e", "html_url": "https://github.com/rust-lang/rust/commit/4fc361823377ca10e6ac38e66824a876012b312e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fc361823377ca10e6ac38e66824a876012b312e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "504ec8b00dec7527bfd1f4be78223c9fd8b6483c", "url": "https://api.github.com/repos/rust-lang/rust/commits/504ec8b00dec7527bfd1f4be78223c9fd8b6483c", "html_url": "https://github.com/rust-lang/rust/commit/504ec8b00dec7527bfd1f4be78223c9fd8b6483c"}], "stats": {"total": 94, "additions": 47, "deletions": 47}, "files": [{"sha": "abe1b053f9adfa9761d2bf5d6ecd330e75ae880d", "filename": "src/comp/front/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Ftest.rs?ref=4fc361823377ca10e6ac38e66824a876012b312e", "patch": "@@ -224,7 +224,7 @@ fn mk_test_desc_ivec_ty(cx: &test_ctxt) -> @ast::ty {\n \n     let ivec_mt: ast::mt = {ty: @test_desc_ty, mut: ast::imm};\n \n-    ret @nospan(ast::ty_ivec(ivec_mt));\n+    ret @nospan(ast::ty_vec(ivec_mt));\n }\n \n fn mk_test_desc_vec(cx: &test_ctxt) -> @ast::expr {\n@@ -286,7 +286,7 @@ fn mk_test_desc_rec(cx: &test_ctxt, test: test) -> @ast::expr {\n fn mk_main(cx: &test_ctxt) -> @ast::item {\n \n     let args_mt: ast::mt = {ty: @nospan(ast::ty_str), mut: ast::imm};\n-    let args_ty: ast::ty = nospan(ast::ty_ivec(args_mt));\n+    let args_ty: ast::ty = nospan(ast::ty_vec(args_mt));\n \n     let args_arg: ast::arg =\n         {mode: ast::val, ty: @args_ty, ident: \"args\", id: cx.next_node_id()};"}, {"sha": "dbde59915588b0a6970e5692d2686835a049205d", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=4fc361823377ca10e6ac38e66824a876012b312e", "patch": "@@ -128,7 +128,7 @@ fn enc_sty(w: &io::writer, cx: &@ctxt, st: &ty::sty) {\n       ty::ty_box(mt) { w.write_char('@'); enc_mt(w, cx, mt); }\n       ty::ty_uniq(t) { w.write_char('~'); enc_ty(w, cx, t); }\n       ty::ty_ptr(mt) { w.write_char('*'); enc_mt(w, cx, mt); }\n-      ty::ty_ivec(mt) { w.write_char('I'); enc_mt(w, cx, mt); }\n+      ty::ty_vec(mt) { w.write_char('I'); enc_mt(w, cx, mt); }\n       ty::ty_rec(fields) {\n         w.write_str(\"R[\");\n         for field: ty::field in fields {"}, {"sha": "5d0afd7154da404dd15b75fae46ad1f624a6dcb4", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=4fc361823377ca10e6ac38e66824a876012b312e", "patch": "@@ -364,7 +364,7 @@ fn check_for(cx: &ctx, local: &@ast::local, seq: &@ast::expr, blk: &ast::blk,\n     // If this is a mutable vector, don't allow it to be touched.\n     let seq_t = ty::expr_ty(cx.tcx, seq);\n     alt ty::struct(cx.tcx, seq_t) {\n-      ty::ty_ivec(mt) {\n+      ty::ty_vec(mt) {\n         if mt.mut != ast::imm { unsafe = ~[seq_t]; }\n       }\n       ty::ty_str. | ty::ty_istr. {/* no-op */ }\n@@ -584,7 +584,7 @@ fn expr_root(cx: &ctx, ex: @ast::expr, autoderef: bool) ->\n           ast::expr_index(base, _) {\n             let auto_unbox = maybe_auto_unbox(cx, ty::expr_ty(cx.tcx, base));\n             alt ty::struct(cx.tcx, auto_unbox.t) {\n-              ty::ty_ivec(mt) {\n+              ty::ty_vec(mt) {\n                 ds +=\n                     ~[@{mut: mt.mut != ast::imm,\n                         kind: index,"}, {"sha": "4501f96fed6746be0fe6321a566868b0f2e7e531", "filename": "src/comp/middle/gc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fmiddle%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fmiddle%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fgc.rs?ref=4fc361823377ca10e6ac38e66824a876012b312e", "patch": "@@ -127,7 +127,7 @@ fn type_is_gc_relevant(cx: &ty::ctxt, ty: &ty::t) -> bool {\n             ret false;\n         }\n \n-        ty::ty_ivec(tm) { ret type_is_gc_relevant(cx, tm.ty); }\n+        ty::ty_vec(tm) { ret type_is_gc_relevant(cx, tm.ty); }\n         ty::ty_constr(sub, _) { ret type_is_gc_relevant(cx, sub); }\n \n         ty::ty_str. | ty::ty_box(_) | ty::ty_uniq(_) |"}, {"sha": "e92f7c95ff060c0d27520ff3ccdb5c32b37e991c", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=4fc361823377ca10e6ac38e66824a876012b312e", "patch": "@@ -343,7 +343,7 @@ fn shape_of(ccx : &@crate_ctxt, t : ty::t) -> [u8] {\n         s += ~[shape_uniq];\n         add_substr(s, shape_of(ccx, subt));\n       }\n-      ty::ty_ivec(mt) {\n+      ty::ty_vec(mt) {\n         s += ~[shape_ivec];\n         add_bool(s, ty::type_is_pod(ccx.tcx, mt.ty));\n         add_size_hint(ccx, s, mt.ty);"}, {"sha": "e8da7cf6d636fd8d0fe2cc095044441e3c700644", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4fc361823377ca10e6ac38e66824a876012b312e", "patch": "@@ -214,7 +214,7 @@ fn type_of_inner(cx: &@crate_ctxt, sp: &span, t: &ty::t) -> TypeRef {\n       ty::ty_tag(did, _) { llty = type_of_tag(cx, sp, did, t); }\n       ty::ty_box(mt) { llty = T_ptr(T_box(type_of_inner(cx, sp, mt.ty))); }\n       ty::ty_uniq(t) { llty = T_ptr(type_of_inner(cx, sp, t)); }\n-      ty::ty_ivec(mt) {\n+      ty::ty_vec(mt) {\n         if ty::type_has_dynamic_size(cx.tcx, mt.ty) {\n             llty = T_opaque_ivec();\n         } else { llty = T_ivec(type_of_inner(cx, sp, mt.ty)); }\n@@ -629,7 +629,7 @@ fn dynamic_size_of(cx: &@block_ctxt, t: ty::t) -> result {\n             } else { max_size_val };\n         ret rslt(bcx, total_size);\n       }\n-      ty::ty_ivec(mt) {\n+      ty::ty_vec(mt) {\n         let rs = size_of(cx, mt.ty);\n         let bcx = rs.bcx;\n         let llunitsz = rs.val;\n@@ -661,7 +661,7 @@ fn dynamic_align_of(cx: &@block_ctxt, t: &ty::t) -> result {\n       ty::ty_tag(_, _) {\n         ret rslt(cx, C_int(1)); // FIXME: stub\n       }\n-      ty::ty_ivec(tm) {\n+      ty::ty_vec(tm) {\n         let rs = align_of(cx, tm.ty);\n         let bcx = rs.bcx;\n         let llunitalign = rs.val;\n@@ -1419,7 +1419,7 @@ fn make_drop_glue(cx: &@block_ctxt, v0: ValueRef, t: &ty::t) {\n     let rs =\n         alt ty::struct(ccx.tcx, t) {\n           ty::ty_str. { decr_refcnt_maybe_free(cx, v0, v0, t) }\n-          ty::ty_ivec(tm) {\n+          ty::ty_vec(tm) {\n             let v1;\n             if ty::type_has_dynamic_size(ccx.tcx, tm.ty) {\n                 v1 = cx.build.PointerCast(v0, T_ptr(T_opaque_ivec()));\n@@ -1866,7 +1866,7 @@ fn iter_structural_ty_full(cx: &@block_ctxt, av: ValueRef, t: &ty::t,\n             cx.build.GEP(av, ~[C_int(0), C_int(abi::obj_field_box)]);\n         ret iter_boxpp(cx, box_cell_a, f);\n       }\n-      ty::ty_ivec(unit_tm) { ret iter_ivec(cx, av, unit_tm.ty, f); }\n+      ty::ty_vec(unit_tm) { ret iter_ivec(cx, av, unit_tm.ty, f); }\n       ty::ty_istr. {\n         let unit_ty = ty::mk_mach(bcx_tcx(cx), ast::ty_u8);\n         ret iter_ivec(cx, av, unit_ty, f);\n@@ -1973,7 +1973,7 @@ fn iter_sequence(cx: @block_ctxt, v: ValueRef, t: &ty::t, f: &val_and_ty_fn)\n         let et = ty::mk_mach(bcx_tcx(cx), ast::ty_u8);\n         ret iter_sequence_body(cx, v, et, f, true, false);\n       }\n-      ty::ty_ivec(elt) {\n+      ty::ty_vec(elt) {\n         ret iter_sequence_body(cx, v, elt.ty, f, false, true);\n       }\n       ty::ty_istr. {\n@@ -2257,7 +2257,7 @@ fn memmove_ty(cx: &@block_ctxt, dst: ValueRef, src: ValueRef, t: &ty::t) ->\n fn duplicate_heap_parts_if_necessary(cx: &@block_ctxt, vptr: ValueRef,\n                                      typ: ty::t) -> result {\n     alt ty::struct(bcx_tcx(cx), typ) {\n-      ty::ty_ivec(tm) { ret ivec::duplicate_heap_part(cx, vptr, tm.ty); }\n+      ty::ty_vec(tm) { ret ivec::duplicate_heap_part(cx, vptr, tm.ty); }\n       ty::ty_istr. {\n         ret ivec::duplicate_heap_part(cx, vptr,\n                                       ty::mk_mach(bcx_tcx(cx), ast::ty_u8));\n@@ -2798,7 +2798,7 @@ mod ivec {\n         let llunitty = type_of_or_i8(cx, unit_ty);\n         alt ty::struct(bcx_tcx(cx), t) {\n           ty::ty_istr. { }\n-          ty::ty_ivec(_) { }\n+          ty::ty_vec(_) { }\n           _ { bcx_tcx(cx).sess.bug(\"non-istr/ivec in trans_append\"); }\n         }\n \n@@ -4769,7 +4769,7 @@ fn trans_ivec(bcx: @block_ctxt, args: &[@ast::expr], id: ast::node_id) ->\n     let typ = node_id_type(bcx_ccx(bcx), id);\n     let unit_ty;\n     alt ty::struct(bcx_tcx(bcx), typ) {\n-      ty::ty_ivec(mt) { unit_ty = mt.ty; }\n+      ty::ty_vec(mt) { unit_ty = mt.ty; }\n       _ { bcx_ccx(bcx).sess.bug(\"non-ivec type in trans_ivec\"); }\n     }\n     let llunitty = type_of_or_i8(bcx, unit_ty);"}, {"sha": "c00b29be1702cbf7c9116d8e7246dfc402a45036", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=4fc361823377ca10e6ac38e66824a876012b312e", "patch": "@@ -129,7 +129,7 @@ export ty_fn_proto;\n export ty_fn_ret;\n export ty_int;\n export ty_istr;\n-export ty_ivec;\n+export ty_vec;\n export ty_machine;\n export ty_native;\n export ty_nil;\n@@ -261,7 +261,7 @@ tag sty {\n     ty_tag(def_id, [t]);\n     ty_box(mt);\n     ty_uniq(t);\n-    ty_ivec(mt);\n+    ty_vec(mt);\n     ty_ptr(mt);\n     ty_rec([field]);\n     ty_fn(ast::proto, [arg], t, controlflow, [@constr]);\n@@ -462,7 +462,7 @@ fn mk_raw_ty(cx: &ctxt, st: &sty, _in_cname: &option::t<str>) -> @raw_t {\n       }\n       ty_box(m) { derive_flags_mt(cx, has_params, has_vars, m); }\n       ty_uniq(tt) { derive_flags_t(cx, has_params, has_vars, tt); }\n-      ty_ivec(m) { derive_flags_mt(cx, has_params, has_vars, m); }\n+      ty_vec(m) { derive_flags_mt(cx, has_params, has_vars, m); }\n       ty_ptr(m) { derive_flags_mt(cx, has_params, has_vars, m); }\n       ty_rec(flds) {\n         for f: field in flds {\n@@ -563,7 +563,7 @@ fn mk_mut_ptr(cx: &ctxt, ty: &t) -> t {\n     ret mk_ptr(cx, {ty: ty, mut: ast::mut});\n }\n \n-fn mk_ivec(cx: &ctxt, tm: &mt) -> t { ret gen_ty(cx, ty_ivec(tm)); }\n+fn mk_ivec(cx: &ctxt, tm: &mt) -> t { ret gen_ty(cx, ty_vec(tm)); }\n \n fn mk_rec(cx: &ctxt, fs: &[field]) -> t { ret gen_ty(cx, ty_rec(fs)); }\n \n@@ -634,7 +634,7 @@ fn walk_ty(cx: &ctxt, walker: ty_walk, ty: t) {\n       ty_type. {/* no-op */ }\n       ty_native(_) {/* no-op */ }\n       ty_box(tm) { walk_ty(cx, walker, tm.ty); }\n-      ty_ivec(tm) { walk_ty(cx, walker, tm.ty); }\n+      ty_vec(tm) { walk_ty(cx, walker, tm.ty); }\n       ty_ptr(tm) { walk_ty(cx, walker, tm.ty); }\n       ty_tag(tid, subtys) {\n         for subty: t in subtys { walk_ty(cx, walker, subty); }\n@@ -708,7 +708,7 @@ fn fold_ty(cx: &ctxt, fld: fold_mode, ty_0: t) -> t {\n       ty_ptr(tm) {\n         ty = mk_ptr(cx, {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut});\n       }\n-      ty_ivec(tm) {\n+      ty_vec(tm) {\n         ty = mk_ivec(cx, {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut});\n       }\n       ty_tag(tid, subtys) {\n@@ -828,7 +828,7 @@ fn type_is_structural(cx: &ctxt, ty: &t) -> bool {\n       ty_fn(_, _, _, _, _) { ret true; }\n       ty_obj(_) { ret true; }\n       ty_res(_, _, _) { ret true; }\n-      ty_ivec(_) { ret true; }\n+      ty_vec(_) { ret true; }\n       ty_istr. { ret true; }\n       _ { ret false; }\n     }\n@@ -846,7 +846,7 @@ fn type_is_sequence(cx: &ctxt, ty: &t) -> bool {\n     alt struct(cx, ty) {\n       ty_str. { ret true; }\n       ty_istr. { ret true; }\n-      ty_ivec(_) { ret true; }\n+      ty_vec(_) { ret true; }\n       _ { ret false; }\n     }\n }\n@@ -863,7 +863,7 @@ fn sequence_is_interior(cx: &ctxt, ty: &t) -> bool {\n     alt struct(cx, ty) {\n \n       ty::ty_str. { ret false; }\n-      ty::ty_ivec(_) { ret true; }\n+      ty::ty_vec(_) { ret true; }\n       ty::ty_istr. { ret true; }\n       _ { cx.sess.bug(\"sequence_is_interior called on non-sequence type\"); }\n     }\n@@ -873,7 +873,7 @@ fn sequence_element_type(cx: &ctxt, ty: &t) -> t {\n     alt struct(cx, ty) {\n       ty_str. { ret mk_mach(cx, ast::ty_u8); }\n       ty_istr. { ret mk_mach(cx, ast::ty_u8); }\n-      ty_ivec(mt) { ret mt.ty; }\n+      ty_vec(mt) { ret mt.ty; }\n       _ { cx.sess.bug(\"sequence_element_type called on non-sequence value\"); }\n     }\n }\n@@ -1053,7 +1053,7 @@ fn type_kind(cx: &ctxt, ty: &t) -> ast::kind {\n \n       // Pointers and unique boxes / vecs raise pinned to shared,\n       // otherwise pass through their pointee kind.\n-      ty_ptr(tm) | ty_ivec(tm) {\n+      ty_ptr(tm) | ty_vec(tm) {\n         let k = type_kind(cx, tm.ty);\n         if k == ast::kind_pinned { k = ast::kind_shared }\n         result = kind::lower_kind(result, k);\n@@ -1134,7 +1134,7 @@ fn type_has_dynamic_size(cx: &ctxt, ty: &t) -> bool {\n         ret false;\n       }\n       ty_box(_) { ret false; }\n-      ty_ivec(mt) { ret type_has_dynamic_size(cx, mt.ty); }\n+      ty_vec(mt) { ret type_has_dynamic_size(cx, mt.ty); }\n       ty_ptr(_) { ret false; }\n       ty_rec(fields) {\n         let i = 0u;\n@@ -1226,7 +1226,7 @@ fn type_owns_heap_mem(cx: &ctxt, ty: &t) -> bool {\n \n     let result = false;\n     alt struct(cx, ty) {\n-      ty_ivec(_) { result = true; }\n+      ty_vec(_) { result = true; }\n       ty_istr. { result = true; }\n \n \n@@ -1303,7 +1303,7 @@ fn type_is_pod(cx : &ctxt, ty : &t) -> bool {\n         }\n \n         // Boxed types\n-        ty_str. | ty_istr. | ty_box(_) | ty_ivec(_) |\n+        ty_str. | ty_istr. | ty_box(_) | ty_vec(_) |\n         ty_fn(_,_,_,_,_) | ty_native_fn(_,_,_) | ty_obj(_) { result = false; }\n \n         // Structural types\n@@ -1466,7 +1466,7 @@ fn hash_type_structure(st: &sty) -> uint {\n         ret h;\n       }\n       ty_box(mt) { ret hash_subty(19u, mt.ty); }\n-      ty_ivec(mt) { ret hash_subty(21u, mt.ty); }\n+      ty_vec(mt) { ret hash_subty(21u, mt.ty); }\n       ty_rec(fields) {\n         let h = 26u;\n         for f: field in fields { h += h << 5u + hash_ty(f.mt.ty); }\n@@ -1627,8 +1627,8 @@ fn equal_type_structures(a: &sty, b: &sty) -> bool {\n       ty_box(mt_a) {\n         alt b { ty_box(mt_b) { ret equal_mt(mt_a, mt_b); } _ { ret false; } }\n       }\n-      ty_ivec(mt_a) {\n-        alt b { ty_ivec(mt_b) { ret equal_mt(mt_a, mt_b); } _ { ret false; } }\n+      ty_vec(mt_a) {\n+        alt b { ty_vec(mt_b) { ret equal_mt(mt_a, mt_b); } _ { ret false; } }\n       }\n       ty_ptr(mt_a) {\n         alt b { ty_ptr(mt_b) { ret equal_mt(mt_a, mt_b); } _ { ret false; } }\n@@ -2475,9 +2475,9 @@ mod unify {\n               _ { ret ures_err(terr_mismatch); }\n             }\n           }\n-          ty::ty_ivec(expected_mt) {\n+          ty::ty_vec(expected_mt) {\n             alt struct(cx.tcx, actual) {\n-              ty::ty_ivec(actual_mt) {\n+              ty::ty_vec(actual_mt) {\n                 let mut;\n                 alt unify_mut(expected_mt.mut, actual_mt.mut) {\n                   none. { ret ures_err(terr_vec_mutability); }\n@@ -3008,7 +3008,7 @@ fn is_binopable(cx: &ctxt, ty: t, op: ast::binop) -> bool {\n           ty_ptr(_) { tycat_int }\n           ty_str. { tycat_str }\n           ty_istr. { tycat_str }\n-          ty_ivec(_) { tycat_vec }\n+          ty_vec(_) { tycat_vec }\n           ty_rec(_) { tycat_struct }\n           ty_tup(_) { tycat_struct }\n           ty_tag(_, _) { tycat_struct }"}, {"sha": "fd1856bf20ebbc7d992c3beb22785951afe51183", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=4fc361823377ca10e6ac38e66824a876012b312e", "patch": "@@ -324,7 +324,7 @@ fn ast_ty_to_ty(tcx: &ty::ctxt, getter: &ty_getter, ast_ty: &@ast::ty) ->\n       ast::ty_box(mt) {\n         typ = ty::mk_box(tcx, ast_mt_to_mt(tcx, getter, mt));\n       }\n-      ast::ty_ivec(mt) {\n+      ast::ty_vec(mt) {\n         typ = ty::mk_ivec(tcx, ast_mt_to_mt(tcx, getter, mt));\n       }\n       ast::ty_ptr(mt) {\n@@ -1987,7 +1987,7 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr,\n         let ety = expr_ty(tcx, seq);\n         alt structure_of(fcx, expr.span, ety) {\n           ty::ty_str. { elt_ty = ty::mk_mach(tcx, ast::ty_u8); }\n-          ty::ty_ivec(vec_elt_ty) { elt_ty = vec_elt_ty.ty; }\n+          ty::ty_vec(vec_elt_ty) { elt_ty = vec_elt_ty.ty; }\n           ty::ty_istr. { elt_ty = ty::mk_mach(tcx, ast::ty_u8); }\n           _ {\n             tcx.sess.span_fatal\n@@ -2291,7 +2291,7 @@ fn check_expr_with_unifier(fcx: &@fn_ctxt, expr: &@ast::expr,\n                               + ty_to_str(tcx, idx_t));\n         }\n         alt structure_of(fcx, expr.span, base_t) {\n-          ty::ty_ivec(mt) { write::ty_only_fixup(fcx, id, mt.ty); }\n+          ty::ty_vec(mt) { write::ty_only_fixup(fcx, id, mt.ty); }\n           ty::ty_str. {\n             let typ = ty::mk_mach(tcx, ast::ty_u8);\n             write::ty_only_fixup(fcx, id, typ);\n@@ -2653,7 +2653,7 @@ fn check_item(ccx: @crate_ctxt, it: &@ast::item) {\n \n fn arg_is_argv_ty(tcx: &ty::ctxt, a: &ty::arg) -> bool {\n     alt ty::struct(tcx, a.ty) {\n-      ty::ty_ivec(mt) {\n+      ty::ty_vec(mt) {\n         if mt.mut != ast::imm { ret false; }\n         alt ty::struct(tcx, mt.ty) {\n           ty::ty_str. { ret true; }"}, {"sha": "f52c243ebe4a0609640c0708feffaf869fb92a15", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=4fc361823377ca10e6ac38e66824a876012b312e", "patch": "@@ -439,7 +439,7 @@ tag ty_ {\n     ty_str;\n     ty_istr; // interior string\n     ty_box(mt);\n-    ty_ivec(mt); // interior vector\n+    ty_vec(mt); // interior vector\n     ty_ptr(mt);\n     ty_task;\n     ty_port(@ty);"}, {"sha": "cc7eb9dcc49d99abeeee5d603fa67f4798034283", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=4fc361823377ca10e6ac38e66824a876012b312e", "patch": "@@ -570,7 +570,7 @@ fn parse_ty(p: &parser, colons_before_params: bool) -> @ast::ty {\n         }\n     } else if (p.peek() == token::LBRACKET) {\n         expect(p, token::LBRACKET);\n-        t = ast::ty_ivec(parse_mt(p));\n+        t = ast::ty_vec(parse_mt(p));\n         hi = p.get_hi_pos();\n         expect(p, token::RBRACKET);\n     } else if (eat_word(p, \"fn\")) {"}, {"sha": "3d8e6f40d5d6c95dc484f337a43444121b4eff39", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=4fc361823377ca10e6ac38e66824a876012b312e", "patch": "@@ -284,7 +284,7 @@ fn print_type(s: &ps, ty: &@ast::ty) {\n       ast::ty_str. { word(s.s, \"str\"); }\n       ast::ty_istr. { word(s.s, \"istr\"); }\n       ast::ty_box(mt) { word(s.s, \"@\"); print_mt(s, mt); }\n-      ast::ty_ivec(mt) {\n+      ast::ty_vec(mt) {\n         word(s.s, \"[\");\n         alt mt.mut {\n           ast::mut. { word_space(s, \"mutable\"); }"}, {"sha": "5534fbed57d7453dc0f730a33c3a9a3f69ce0140", "filename": "src/comp/syntax/untyped_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fsyntax%2Funtyped_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fsyntax%2Funtyped_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Funtyped_ast.rs?ref=4fc361823377ca10e6ac38e66824a876012b312e", "patch": "@@ -174,7 +174,7 @@ tag node_name {\n     n_ty_istr;\n     n_ty_box;\n     n_ty_vec;\n-    n_ty_ivec;\n+    n_ty_vec;\n     n_ty_ptr;\n     n_ty_task;\n     n_ty_port;\n@@ -620,7 +620,7 @@ fn cv_ty(ctx: &ctx, ut: &@ast_node) -> @ty {\n                   [ty_istr, n_ty_istr, []],\n                   [ty_box, n_ty_box, [cv_mt]],\n                   [ty_vec, n_ty_vec, [cv_mt]],\n-                  [ty_ivec, n_ty_ivec, [cv_mt]],\n+                  [ty_vec, n_ty_vec, [cv_mt]],\n                   [ty_ptr, n_ty_ptr, [cv_mt]],\n                   [ty_task, n_ty_task, []],\n                   [ty_port, n_ty_port, [cv_ty]],"}, {"sha": "bd1064af8434ab93d1586d4ecf083affb90aae8a", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=4fc361823377ca10e6ac38e66824a876012b312e", "patch": "@@ -124,7 +124,7 @@ fn visit_ty<E>(t: &@ty, e: &E, v: &vt<E>) {\n       ty_str. {/* no-op */ }\n       ty_istr. {/* no-op */ }\n       ty_box(mt) { v.visit_ty(mt.ty, e, v); }\n-      ty_ivec(mt) { v.visit_ty(mt.ty, e, v); }\n+      ty_vec(mt) { v.visit_ty(mt.ty, e, v); }\n       ty_ptr(mt) { v.visit_ty(mt.ty, e, v); }\n       ty_port(t) { v.visit_ty(t, e, v); }\n       ty_chan(t) { v.visit_ty(t, e, v); }"}, {"sha": "33556b8f1d19ac98c1d79ae3dacfe193e9320eb6", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fc361823377ca10e6ac38e66824a876012b312e/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=4fc361823377ca10e6ac38e66824a876012b312e", "patch": "@@ -92,7 +92,7 @@ fn ty_to_str(cx: &ctxt, typ: &t) -> str {\n       ty_istr. { s += \"istr\"; }\n       ty_box(tm) { s += \"@\" + mt_to_str(cx, tm); }\n       ty_uniq(t) { s += \"~\" + ty_to_str(cx, t); }\n-      ty_ivec(tm) { s += \"[\" + mt_to_str(cx, tm) + \"]\"; }\n+      ty_vec(tm) { s += \"[\" + mt_to_str(cx, tm) + \"]\"; }\n       ty_type. { s += \"type\"; }\n       ty_rec(elems) {\n         let strs: [str] = ~[];"}]}