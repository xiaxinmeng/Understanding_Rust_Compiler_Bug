{"sha": "ef027a1eed4cc8d34d1a4bf9222369e7fef48e93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMDI3YTFlZWQ0Y2M4ZDM0ZDFhNGJmOTIyMjM2OWU3ZmVmNDhlOTM=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2020-10-22T01:18:18Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2020-10-22T03:44:03Z"}, "message": "Duration::zero() ->  Duration::ZERO\n\nDuration::ZERO composes better with match and various other things,\nat the cost of an occasional parens, and results in less work for the\noptimizer, so let's use that instead.", "tree": {"sha": "f414c2f25595c9ca75229a79c612ef3bd6423f4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f414c2f25595c9ca75229a79c612ef3bd6423f4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef027a1eed4cc8d34d1a4bf9222369e7fef48e93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef027a1eed4cc8d34d1a4bf9222369e7fef48e93", "html_url": "https://github.com/rust-lang/rust/commit/ef027a1eed4cc8d34d1a4bf9222369e7fef48e93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef027a1eed4cc8d34d1a4bf9222369e7fef48e93/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d72d5f48c2c534de7382a601e4619de923b7f6a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d72d5f48c2c534de7382a601e4619de923b7f6a9", "html_url": "https://github.com/rust-lang/rust/commit/d72d5f48c2c534de7382a601e4619de923b7f6a9"}], "stats": {"total": 66, "additions": 29, "deletions": 37}, "files": [{"sha": "cc9afaff888ae7b189413a87c70a18695d7338bb", "filename": "library/core/src/time.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ef027a1eed4cc8d34d1a4bf9222369e7fef48e93/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef027a1eed4cc8d34d1a4bf9222369e7fef48e93/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=ef027a1eed4cc8d34d1a4bf9222369e7fef48e93", "patch": "@@ -108,6 +108,21 @@ impl Duration {\n     #[unstable(feature = \"duration_constants\", issue = \"57391\")]\n     pub const NANOSECOND: Duration = Duration::from_nanos(1);\n \n+    /// A duration of zero time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(duration_zero)]\n+    /// use std::time::Duration;\n+    ///\n+    /// let duration = Duration::ZERO;\n+    /// assert!(duration.is_zero());\n+    /// assert_eq!(duration.as_nanos(), 0);\n+    /// ```\n+    #[unstable(feature = \"duration_zero\", issue = \"73544\")]\n+    pub const ZERO: Duration = Duration::from_nanos(0);\n+\n     /// The minimum duration.\n     ///\n     /// # Examples\n@@ -166,24 +181,6 @@ impl Duration {\n         Duration { secs, nanos }\n     }\n \n-    /// Creates a new `Duration` that spans no time.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(duration_zero)]\n-    /// use std::time::Duration;\n-    ///\n-    /// let duration = Duration::zero();\n-    /// assert!(duration.is_zero());\n-    /// assert_eq!(duration.as_nanos(), 0);\n-    /// ```\n-    #[unstable(feature = \"duration_zero\", issue = \"73544\")]\n-    #[inline]\n-    pub const fn zero() -> Duration {\n-        Duration { secs: 0, nanos: 0 }\n-    }\n-\n     /// Creates a new `Duration` from the specified number of whole seconds.\n     ///\n     /// # Examples\n@@ -277,7 +274,7 @@ impl Duration {\n     /// #![feature(duration_zero)]\n     /// use std::time::Duration;\n     ///\n-    /// assert!(Duration::zero().is_zero());\n+    /// assert!(Duration::ZERO.is_zero());\n     /// assert!(Duration::new(0, 0).is_zero());\n     /// assert!(Duration::from_nanos(0).is_zero());\n     /// assert!(Duration::from_secs(0).is_zero());"}, {"sha": "dffbdd0372c1544da4c31f2d4ef490398ebce582", "filename": "library/core/tests/time.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ef027a1eed4cc8d34d1a4bf9222369e7fef48e93/library%2Fcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef027a1eed4cc8d34d1a4bf9222369e7fef48e93/library%2Fcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Ftime.rs?ref=ef027a1eed4cc8d34d1a4bf9222369e7fef48e93", "patch": "@@ -108,26 +108,24 @@ fn sub() {\n \n #[test]\n fn checked_sub() {\n-    let zero = Duration::zero();\n-    assert_eq!(Duration::NANOSECOND.checked_sub(zero), Some(Duration::NANOSECOND));\n+    assert_eq!(Duration::NANOSECOND.checked_sub(Duration::ZERO), Some(Duration::NANOSECOND));\n     assert_eq!(\n         Duration::SECOND.checked_sub(Duration::NANOSECOND),\n         Some(Duration::new(0, 999_999_999))\n     );\n-    assert_eq!(zero.checked_sub(Duration::NANOSECOND), None);\n-    assert_eq!(zero.checked_sub(Duration::SECOND), None);\n+    assert_eq!(Duration::ZERO.checked_sub(Duration::NANOSECOND), None);\n+    assert_eq!(Duration::ZERO.checked_sub(Duration::SECOND), None);\n }\n \n #[test]\n fn saturating_sub() {\n-    let zero = Duration::new(0, 0);\n-    assert_eq!(Duration::NANOSECOND.saturating_sub(zero), Duration::NANOSECOND);\n+    assert_eq!(Duration::NANOSECOND.saturating_sub(Duration::ZERO), Duration::NANOSECOND);\n     assert_eq!(\n         Duration::SECOND.saturating_sub(Duration::NANOSECOND),\n         Duration::new(0, 999_999_999)\n     );\n-    assert_eq!(zero.saturating_sub(Duration::NANOSECOND), Duration::MIN);\n-    assert_eq!(zero.saturating_sub(Duration::SECOND), Duration::MIN);\n+    assert_eq!(Duration::ZERO.saturating_sub(Duration::NANOSECOND), Duration::MIN);\n+    assert_eq!(Duration::ZERO.saturating_sub(Duration::SECOND), Duration::MIN);\n }\n \n #[test]\n@@ -339,10 +337,7 @@ fn duration_const() {\n     const SUB_SEC_NANOS: u32 = DURATION.subsec_nanos();\n     assert_eq!(SUB_SEC_NANOS, 123_456_789);\n \n-    const ZERO: Duration = Duration::zero();\n-    assert_eq!(ZERO, Duration::new(0, 0));\n-\n-    const IS_ZERO: bool = ZERO.is_zero();\n+    const IS_ZERO: bool = Duration::ZERO.is_zero();\n     assert!(IS_ZERO);\n \n     const SECONDS: u64 = Duration::SECOND.as_secs();\n@@ -386,7 +381,7 @@ fn duration_const() {\n     const CHECKED_ADD: Option<Duration> = MAX.checked_add(Duration::SECOND);\n     assert_eq!(CHECKED_ADD, None);\n \n-    const CHECKED_SUB: Option<Duration> = ZERO.checked_sub(Duration::SECOND);\n+    const CHECKED_SUB: Option<Duration> = (Duration::ZERO).checked_sub(Duration::SECOND);\n     assert_eq!(CHECKED_SUB, None);\n \n     const CHECKED_MUL: Option<Duration> = Duration::SECOND.checked_mul(1);\n@@ -416,8 +411,8 @@ fn duration_const() {\n     const SATURATING_ADD: Duration = MAX.saturating_add(Duration::SECOND);\n     assert_eq!(SATURATING_ADD, MAX);\n \n-    const SATURATING_SUB: Duration = ZERO.saturating_sub(Duration::SECOND);\n-    assert_eq!(SATURATING_SUB, ZERO);\n+    const SATURATING_SUB: Duration = (Duration::ZERO).saturating_sub(Duration::SECOND);\n+    assert_eq!(SATURATING_SUB, Duration::ZERO);\n \n     const SATURATING_MUL: Duration = MAX.saturating_mul(2);\n     assert_eq!(SATURATING_MUL, MAX);"}, {"sha": "20c813fdc70ff6f8a833fcb0ed766e5d51f95b07", "filename": "library/std/src/time/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef027a1eed4cc8d34d1a4bf9222369e7fef48e93/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef027a1eed4cc8d34d1a4bf9222369e7fef48e93/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime%2Ftests.rs?ref=ef027a1eed4cc8d34d1a4bf9222369e7fef48e93", "patch": "@@ -75,22 +75,22 @@ fn instant_checked_duration_since_nopanic() {\n     let later = now + Duration::SECOND;\n     assert_eq!(earlier.checked_duration_since(now), None);\n     assert_eq!(later.checked_duration_since(now), Some(Duration::SECOND));\n-    assert_eq!(now.checked_duration_since(now), Some(Duration::zero()));\n+    assert_eq!(now.checked_duration_since(now), Some(Duration::ZERO));\n }\n \n #[test]\n fn instant_saturating_duration_since_nopanic() {\n     let a = Instant::now();\n     let ret = (a - Duration::SECOND).saturating_duration_since(a);\n-    assert_eq!(ret, Duration::zero());\n+    assert_eq!(ret, Duration::ZERO);\n }\n \n #[test]\n fn system_time_math() {\n     let a = SystemTime::now();\n     let b = SystemTime::now();\n     match b.duration_since(a) {\n-        Ok(dur) if dur == Duration::zero() => {\n+        Ok(Duration::ZERO) => {\n             assert_almost_eq!(a, b);\n         }\n         Ok(dur) => {"}]}