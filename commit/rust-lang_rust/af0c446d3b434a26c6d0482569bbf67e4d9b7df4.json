{"sha": "af0c446d3b434a26c6d0482569bbf67e4d9b7df4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMGM0NDZkM2I0MzRhMjZjNmQwNDgyNTY5YmJmNjdlNGQ5YjdkZjQ=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-21T02:30:12Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-11-21T18:17:13Z"}, "message": "libs: add std::os::unix module\n\nThe new `std::os::unix` module exposes several extension traits\nfor extracting file descriptors from `std::io` types.", "tree": {"sha": "af4bf3bede85bda436cf7faa0b72bef9c991ac53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af4bf3bede85bda436cf7faa0b72bef9c991ac53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af0c446d3b434a26c6d0482569bbf67e4d9b7df4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af0c446d3b434a26c6d0482569bbf67e4d9b7df4", "html_url": "https://github.com/rust-lang/rust/commit/af0c446d3b434a26c6d0482569bbf67e4d9b7df4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af0c446d3b434a26c6d0482569bbf67e4d9b7df4/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4156bc44176d93296a0f1834690dd9792390cec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4156bc44176d93296a0f1834690dd9792390cec6", "html_url": "https://github.com/rust-lang/rust/commit/4156bc44176d93296a0f1834690dd9792390cec6"}], "stats": {"total": 108, "additions": 108, "deletions": 0}, "files": [{"sha": "ae3c939bf78bde334f417a208bfc7d09a1720407", "filename": "src/libstd/sys/unix/ext.rs", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/af0c446d3b434a26c6d0482569bbf67e4d9b7df4/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af0c446d3b434a26c6d0482569bbf67e4d9b7df4/src%2Flibstd%2Fsys%2Funix%2Fext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext.rs?ref=af0c446d3b434a26c6d0482569bbf67e4d9b7df4", "patch": "@@ -0,0 +1,107 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Experimental extensions to `std` for Unix platforms.\n+//!\n+//! For now, this module is limited to extracting file descriptors,\n+//! but its functionality will grow over time.\n+//!\n+//! # Example\n+//!\n+//! ```rust,ignore\n+//! #![feature(globs)]\n+//!\n+//! use std::io::fs::File;\n+//! use std::os::unix::prelude::*;\n+//!\n+//! fn main() {\n+//!     let f = File::create(&Path::new(\"foo.txt\")).unwrap();\n+//!     let fd = f.as_raw_fd();\n+//!\n+//!     // use fd with native unix bindings\n+//! }\n+//! ```\n+\n+#![experimental]\n+\n+use sys_common::AsInner;\n+use libc;\n+\n+use io;\n+\n+/// Raw file descriptors.\n+pub type Fd = libc::c_int;\n+\n+/// Extract raw file descriptor\n+pub trait AsRawFd {\n+    /// Extract the raw file descriptor, without taking any ownership.\n+    fn as_raw_fd(&self) -> Fd;\n+}\n+\n+impl AsRawFd for io::fs::File {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawFd for io::pipe::PipeStream {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawFd for io::net::pipe::UnixStream {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawFd for io::net::pipe::UnixListener {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawFd for io::net::pipe::UnixAcceptor {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawFd for io::net::tcp::TcpStream {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawFd for io::net::tcp::TcpListener {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawFd for io::net::tcp::TcpAcceptor {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+impl AsRawFd for io::net::udp::UdpSocket {\n+    fn as_raw_fd(&self) -> Fd {\n+        self.as_inner().fd()\n+    }\n+}\n+\n+/// A prelude for conveniently writing platform-specific code.\n+///\n+/// Includes all extension traits, and some important type definitions.\n+pub mod prelude {\n+    pub use super::{Fd, AsRawFd};\n+}"}, {"sha": "d800c766426033f3a5a5e5c75b7e3e8faaec443f", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af0c446d3b434a26c6d0482569bbf67e4d9b7df4/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af0c446d3b434a26c6d0482569bbf67e4d9b7df4/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=af0c446d3b434a26c6d0482569bbf67e4d9b7df4", "patch": "@@ -33,6 +33,7 @@ macro_rules! helper_init( (static $name:ident: Helper<$m:ty>) => (\n ) )\n \n pub mod c;\n+pub mod ext;\n pub mod fs;\n pub mod os;\n pub mod tcp;"}]}