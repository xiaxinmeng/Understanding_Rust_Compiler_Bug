{"sha": "a2e077e405f9538b42d32e18082d50d0102d2334", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZTA3N2U0MDVmOTUzOGI0MmQzMmUxODA4MmQ1MGQwMTAyZDIzMzQ=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-03T21:17:21Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-03T21:17:21Z"}, "message": "Make `Ipv4Addr` and `Ipv6Addr` const tests unit tests under `library`\n\nThese tests are about the standard library, not the compiler itself, thus should live in `library`, see #76268.", "tree": {"sha": "21ec720c681a2d0e88ff1e9da3b21b1a0336ef1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21ec720c681a2d0e88ff1e9da3b21b1a0336ef1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2e077e405f9538b42d32e18082d50d0102d2334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2e077e405f9538b42d32e18082d50d0102d2334", "html_url": "https://github.com/rust-lang/rust/commit/a2e077e405f9538b42d32e18082d50d0102d2334", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2e077e405f9538b42d32e18082d50d0102d2334/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3edf11cf811707cde49b30a80896c24189649d95", "url": "https://api.github.com/repos/rust-lang/rust/commits/3edf11cf811707cde49b30a80896c24189649d95", "html_url": "https://github.com/rust-lang/rust/commit/3edf11cf811707cde49b30a80896c24189649d95"}], "stats": {"total": 220, "additions": 109, "deletions": 111}, "files": [{"sha": "76a0ae8b9454dfff7576247c997049f8f92c22e8", "filename": "library/std/src/net/ip/tests.rs", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/a2e077e405f9538b42d32e18082d50d0102d2334/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e077e405f9538b42d32e18082d50d0102d2334/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs?ref=a2e077e405f9538b42d32e18082d50d0102d2334", "patch": "@@ -809,3 +809,112 @@ fn is_v6() {\n     assert!(!ip.is_ipv4());\n     assert!(ip.is_ipv6());\n }\n+\n+#[test]\n+fn ipv4_const() {\n+    // test that the methods of `Ipv4Addr` are usable in a const context\n+\n+    const IP_ADDRESS: Ipv4Addr = Ipv4Addr::new(127, 0, 0, 1);\n+    assert_eq!(IP_ADDRESS, Ipv4Addr::LOCALHOST);\n+\n+    const OCTETS: [u8; 4] = IP_ADDRESS.octets();\n+    assert_eq!(OCTETS, [127, 0, 0, 1]);\n+\n+    const IS_UNSPECIFIED: bool = IP_ADDRESS.is_unspecified();\n+    assert!(!IS_UNSPECIFIED);\n+\n+    const IS_LOOPBACK: bool = IP_ADDRESS.is_loopback();\n+    assert!(IS_LOOPBACK);\n+\n+    const IS_PRIVATE: bool = IP_ADDRESS.is_private();\n+    assert!(!IS_PRIVATE);\n+\n+    const IS_LINK_LOCAL: bool = IP_ADDRESS.is_link_local();\n+    assert!(!IS_LINK_LOCAL);\n+\n+    const IS_GLOBAL: bool = IP_ADDRESS.is_global();\n+    assert!(!IS_GLOBAL);\n+\n+    const IS_SHARED: bool = IP_ADDRESS.is_shared();\n+    assert!(!IS_SHARED);\n+\n+    const IS_IETF_PROTOCOL_ASSIGNMENT: bool = IP_ADDRESS.is_ietf_protocol_assignment();\n+    assert!(!IS_IETF_PROTOCOL_ASSIGNMENT);\n+\n+    const IS_BENCHMARKING: bool = IP_ADDRESS.is_benchmarking();\n+    assert!(!IS_BENCHMARKING);\n+\n+    const IS_RESERVED: bool = IP_ADDRESS.is_reserved();\n+    assert!(!IS_RESERVED);\n+\n+    const IS_MULTICAST: bool = IP_ADDRESS.is_multicast();\n+    assert!(!IS_MULTICAST);\n+\n+    const IS_BROADCAST: bool = IP_ADDRESS.is_broadcast();\n+    assert!(!IS_BROADCAST);\n+\n+    const IS_DOCUMENTATION: bool = IP_ADDRESS.is_documentation();\n+    assert!(!IS_DOCUMENTATION);\n+\n+    const IP_V6_COMPATIBLE: Ipv6Addr = IP_ADDRESS.to_ipv6_compatible();\n+    assert_eq!(\n+        IP_V6_COMPATIBLE,\n+        Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 1])\n+    );\n+\n+    const IP_V6_MAPPED: Ipv6Addr = IP_ADDRESS.to_ipv6_mapped();\n+    assert_eq!(\n+        IP_V6_MAPPED,\n+        Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 127, 0, 0, 1])\n+    );\n+}\n+\n+#[test]\n+fn ipv6_const() {\n+    // test that the methods of `Ipv6Addr` are usable in a const context\n+\n+    const IP_ADDRESS: Ipv6Addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1);\n+    assert_eq!(IP_ADDRESS, Ipv6Addr::LOCALHOST);\n+\n+    const SEGMENTS: [u16; 8] = IP_ADDRESS.segments();\n+    assert_eq!(SEGMENTS, [0, 0, 0, 0, 0, 0, 0, 1]);\n+\n+    const OCTETS: [u8; 16] = IP_ADDRESS.octets();\n+    assert_eq!(OCTETS, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]);\n+\n+    const IS_UNSPECIFIED: bool = IP_ADDRESS.is_unspecified();\n+    assert!(!IS_UNSPECIFIED);\n+\n+    const IS_LOOPBACK: bool = IP_ADDRESS.is_loopback();\n+    assert!(IS_LOOPBACK);\n+\n+    const IS_GLOBAL: bool = IP_ADDRESS.is_global();\n+    assert!(!IS_GLOBAL);\n+\n+    const IS_UNIQUE_LOCAL: bool = IP_ADDRESS.is_unique_local();\n+    assert!(!IS_UNIQUE_LOCAL);\n+\n+    const IS_UNICAST_LINK_LOCAL_STRICT: bool = IP_ADDRESS.is_unicast_link_local_strict();\n+    assert!(!IS_UNICAST_LINK_LOCAL_STRICT);\n+\n+    const IS_UNICAST_LINK_LOCAL: bool = IP_ADDRESS.is_unicast_link_local();\n+    assert!(!IS_UNICAST_LINK_LOCAL);\n+\n+    const IS_UNICAST_SITE_LOCAL: bool = IP_ADDRESS.is_unicast_site_local();\n+    assert!(!IS_UNICAST_SITE_LOCAL);\n+\n+    const IS_DOCUMENTATION: bool = IP_ADDRESS.is_documentation();\n+    assert!(!IS_DOCUMENTATION);\n+\n+    const IS_UNICAST_GLOBAL: bool = IP_ADDRESS.is_unicast_global();\n+    assert!(!IS_UNICAST_GLOBAL);\n+\n+    const MULTICAST_SCOPE: Option<Ipv6MulticastScope> = IP_ADDRESS.multicast_scope();\n+    assert_eq!(MULTICAST_SCOPE, None);\n+\n+    const IS_MULTICAST: bool = IP_ADDRESS.is_multicast();\n+    assert!(!IS_MULTICAST);\n+\n+    const IP_V4: Option<Ipv4Addr> = IP_ADDRESS.to_ipv4();\n+    assert_eq!(IP_V4.unwrap(), Ipv4Addr::new(0, 0, 0, 1));\n+}"}, {"sha": "8c676999ae734c1952b339ad6a99b9b6403368d9", "filename": "src/test/ui/consts/std/net/ipv4.rs", "status": "removed", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3edf11cf811707cde49b30a80896c24189649d95/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edf11cf811707cde49b30a80896c24189649d95/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv4.rs?ref=3edf11cf811707cde49b30a80896c24189649d95", "patch": "@@ -1,58 +0,0 @@\n-// run-pass\n-\n-#![feature(ip)]\n-#![feature(const_ipv4)]\n-\n-use std::net::{Ipv4Addr, Ipv6Addr};\n-\n-fn main() {\n-    const IP_ADDRESS: Ipv4Addr = Ipv4Addr::new(127, 0, 0, 1);\n-    assert_eq!(IP_ADDRESS, Ipv4Addr::LOCALHOST);\n-\n-    const OCTETS: [u8; 4] = IP_ADDRESS.octets();\n-    assert_eq!(OCTETS, [127, 0, 0, 1]);\n-\n-    const IS_UNSPECIFIED : bool = IP_ADDRESS.is_unspecified();\n-    assert!(!IS_UNSPECIFIED);\n-\n-    const IS_LOOPBACK : bool = IP_ADDRESS.is_loopback();\n-    assert!(IS_LOOPBACK);\n-\n-    const IS_PRIVATE : bool = IP_ADDRESS.is_private();\n-    assert!(!IS_PRIVATE);\n-\n-    const IS_LINK_LOCAL : bool = IP_ADDRESS.is_link_local();\n-    assert!(!IS_LINK_LOCAL);\n-\n-    const IS_GLOBAL : bool = IP_ADDRESS.is_global();\n-    assert!(!IS_GLOBAL);\n-\n-    const IS_SHARED : bool = IP_ADDRESS.is_shared();\n-    assert!(!IS_SHARED);\n-\n-    const IS_IETF_PROTOCOL_ASSIGNMENT : bool = IP_ADDRESS.is_ietf_protocol_assignment();\n-    assert!(!IS_IETF_PROTOCOL_ASSIGNMENT);\n-\n-    const IS_BENCHMARKING : bool = IP_ADDRESS.is_benchmarking();\n-    assert!(!IS_BENCHMARKING);\n-\n-    const IS_RESERVED : bool = IP_ADDRESS.is_reserved();\n-    assert!(!IS_RESERVED);\n-\n-    const IS_MULTICAST : bool = IP_ADDRESS.is_multicast();\n-    assert!(!IS_MULTICAST);\n-\n-    const IS_BROADCAST : bool = IP_ADDRESS.is_broadcast();\n-    assert!(!IS_BROADCAST);\n-\n-    const IS_DOCUMENTATION : bool = IP_ADDRESS.is_documentation();\n-    assert!(!IS_DOCUMENTATION);\n-\n-    const IP_V6_COMPATIBLE : Ipv6Addr = IP_ADDRESS.to_ipv6_compatible();\n-    assert_eq!(IP_V6_COMPATIBLE,\n-        Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 1]));\n-\n-    const IP_V6_MAPPED : Ipv6Addr = IP_ADDRESS.to_ipv6_mapped();\n-    assert_eq!(IP_V6_MAPPED,\n-        Ipv6Addr::from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 127, 0, 0, 1]));\n-}"}, {"sha": "e3841c38c2231d5c61bf678fc31b149b59e07b17", "filename": "src/test/ui/consts/std/net/ipv6.rs", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3edf11cf811707cde49b30a80896c24189649d95/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3edf11cf811707cde49b30a80896c24189649d95/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstd%2Fnet%2Fipv6.rs?ref=3edf11cf811707cde49b30a80896c24189649d95", "patch": "@@ -1,53 +0,0 @@\n-// run-pass\n-\n-#![feature(ip)]\n-#![feature(const_ipv6)]\n-\n-use std::net::{Ipv4Addr, Ipv6Addr, Ipv6MulticastScope};\n-\n-fn main() {\n-    const IP_ADDRESS : Ipv6Addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1);\n-    assert_eq!(IP_ADDRESS, Ipv6Addr::LOCALHOST);\n-\n-    const SEGMENTS : [u16; 8] = IP_ADDRESS.segments();\n-    assert_eq!(SEGMENTS, [0 ,0 ,0 ,0 ,0 ,0 ,0, 1]);\n-\n-    const OCTETS : [u8; 16] = IP_ADDRESS.octets();\n-    assert_eq!(OCTETS, [0 ,0 ,0 ,0 ,0 ,0 ,0, 0 ,0 ,0 ,0 ,0 ,0 ,0, 0, 1]);\n-\n-    const IS_UNSPECIFIED : bool = IP_ADDRESS.is_unspecified();\n-    assert!(!IS_UNSPECIFIED);\n-\n-    const IS_LOOPBACK : bool = IP_ADDRESS.is_loopback();\n-    assert!(IS_LOOPBACK);\n-\n-    const IS_GLOBAL : bool = IP_ADDRESS.is_global();\n-    assert!(!IS_GLOBAL);\n-\n-    const IS_UNIQUE_LOCAL : bool = IP_ADDRESS.is_unique_local();\n-    assert!(!IS_UNIQUE_LOCAL);\n-\n-    const IS_UNICAST_LINK_LOCAL_STRICT : bool = IP_ADDRESS.is_unicast_link_local_strict();\n-    assert!(!IS_UNICAST_LINK_LOCAL_STRICT);\n-\n-    const IS_UNICAST_LINK_LOCAL : bool = IP_ADDRESS.is_unicast_link_local();\n-    assert!(!IS_UNICAST_LINK_LOCAL);\n-\n-    const IS_UNICAST_SITE_LOCAL : bool = IP_ADDRESS.is_unicast_site_local();\n-    assert!(!IS_UNICAST_SITE_LOCAL);\n-\n-    const IS_DOCUMENTATION : bool = IP_ADDRESS.is_documentation();\n-    assert!(!IS_DOCUMENTATION);\n-\n-    const IS_UNICAST_GLOBAL : bool = IP_ADDRESS.is_unicast_global();\n-    assert!(!IS_UNICAST_GLOBAL);\n-\n-    const MULTICAST_SCOPE : Option<Ipv6MulticastScope> = IP_ADDRESS.multicast_scope();\n-    assert_eq!(MULTICAST_SCOPE, None);\n-\n-    const IS_MULTICAST : bool = IP_ADDRESS.is_multicast();\n-    assert!(!IS_MULTICAST);\n-\n-    const IP_V4 : Option<Ipv4Addr> = IP_ADDRESS.to_ipv4();\n-    assert_eq!(IP_V4.unwrap(), Ipv4Addr::new(0, 0, 0, 1));\n-}"}]}