{"sha": "185c074798ce87429118868c292d2c2c7dc46cfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NWMwNzQ3OThjZTg3NDI5MTE4ODY4YzI5MmQyYzJjN2RjNDZjZmM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-02T10:41:01Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-03T11:10:58Z"}, "message": "Fix backtrace tests for Linux", "tree": {"sha": "596726320f0585e7baf753e33bf2ee24fe54b874", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/596726320f0585e7baf753e33bf2ee24fe54b874"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/185c074798ce87429118868c292d2c2c7dc46cfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/185c074798ce87429118868c292d2c2c7dc46cfc", "html_url": "https://github.com/rust-lang/rust/commit/185c074798ce87429118868c292d2c2c7dc46cfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/185c074798ce87429118868c292d2c2c7dc46cfc/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e23179c85b3706e2ff78ecb0c014e42c56b096d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e23179c85b3706e2ff78ecb0c014e42c56b096d", "html_url": "https://github.com/rust-lang/rust/commit/4e23179c85b3706e2ff78ecb0c014e42c56b096d"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "0b8b43413e9b63be9de0ef52dbfa2cf5d1b3128a", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/185c074798ce87429118868c292d2c2c7dc46cfc/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185c074798ce87429118868c292d2c2c7dc46cfc/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=185c074798ce87429118868c292d2c2c7dc46cfc", "patch": "@@ -176,7 +176,7 @@ pub fn write(w: &mut Writer) -> IoResult<()> {\n         let mut ip = unsafe {\n             uw::_Unwind_GetIPInfo(ctx, &mut ip_before_insn) as *mut libc::c_void\n         };\n-        if ip_before_insn == 0 {\n+        if !ip.is_null() && ip_before_insn == 0 {\n             // this is a non-signaling frame, so `ip` refers to the address\n             // after the calling instruction. account for that.\n             ip = (ip as usize - 1) as *mut _;"}, {"sha": "23aadbc70537ebf508f2aea0a853f386bc8dd220", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/185c074798ce87429118868c292d2c2c7dc46cfc/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/185c074798ce87429118868c292d2c2c7dc46cfc/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=185c074798ce87429118868c292d2c2c7dc46cfc", "patch": "@@ -68,7 +68,7 @@ fn dump_filelines(filelines: &[Pos]) {\n }\n \n #[inline(never)]\n-fn inner(counter: &mut u32, main_pos: Pos, outer_pos: Pos) {\n+fn inner(counter: &mut i32, main_pos: Pos, outer_pos: Pos) {\n     check!(counter; main_pos, outer_pos);\n     check!(counter; main_pos, outer_pos);\n     let inner_pos = pos!(); aux::callback(|aux_pos| {\n@@ -80,12 +80,12 @@ fn inner(counter: &mut u32, main_pos: Pos, outer_pos: Pos) {\n }\n \n #[inline(always)]\n-fn inner_inlined(counter: &mut u32, main_pos: Pos, outer_pos: Pos) {\n+fn inner_inlined(counter: &mut i32, main_pos: Pos, outer_pos: Pos) {\n     check!(counter; main_pos, outer_pos);\n     check!(counter; main_pos, outer_pos);\n \n     #[inline(always)]\n-    fn inner_further_inlined(counter: &mut u32, main_pos: Pos, outer_pos: Pos, inner_pos: Pos) {\n+    fn inner_further_inlined(counter: &mut i32, main_pos: Pos, outer_pos: Pos, inner_pos: Pos) {\n         check!(counter; main_pos, outer_pos, inner_pos);\n     }\n     inner_further_inlined(counter, main_pos, outer_pos, pos!());\n@@ -103,7 +103,7 @@ fn inner_inlined(counter: &mut u32, main_pos: Pos, outer_pos: Pos) {\n }\n \n #[inline(never)]\n-fn outer(mut counter: u32, main_pos: Pos) {\n+fn outer(mut counter: i32, main_pos: Pos) {\n     inner(&mut counter, main_pos, pos!());\n     inner_inlined(&mut counter, main_pos, pos!());\n }"}]}