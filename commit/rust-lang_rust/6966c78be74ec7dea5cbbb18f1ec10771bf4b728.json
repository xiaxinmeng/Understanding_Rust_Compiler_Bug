{"sha": "6966c78be74ec7dea5cbbb18f1ec10771bf4b728", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NjZjNzhiZTc0ZWM3ZGVhNWNiYmIxOGYxZWMxMDc3MWJmNGI3Mjg=", "commit": {"author": {"name": "Mateusz Gacek", "email": "96mateusz.gacek@gmail.com", "date": "2021-03-29T19:51:23Z"}, "committer": {"name": "Mateusz Gacek", "email": "96mateusz.gacek@gmail.com", "date": "2021-03-30T06:46:03Z"}, "message": "wrong_self_convention: fix FP inside trait impl for `to_*` method\n\nWhen the `to_*` method takes `&self` and it is a trait implementation,\nwe don't trigger the lint.", "tree": {"sha": "12ecbb397875cf77cb59d7289abf0ebc0c9417d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12ecbb397875cf77cb59d7289abf0ebc0c9417d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6966c78be74ec7dea5cbbb18f1ec10771bf4b728", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEERpetzLUcfrti7JHEeSCDrkOFe5AFAmBiyTQACgkQeSCDrkOF\ne5A2lwf+LMoiOUM0d1S+B+uR0037VJJwwI7j4eSOuoyHuYMhrnv+MQ0XX6AkNgEe\nmzHjFuBFw7awdlf8hq0OF8yfdoSlI1c/fBeWxTyQV3YOxPQtFuBuS33RqtwhBvz4\nB1mnXLB0X9FqfrvyOKNTxor9iXXeyiqyMG5swKJCKF1NxkcHjcsk/DHAwFcJIb4V\ndRSknsJifLSPDTOMBNGUzoiipjexP3v69c7XZlO3xWw1FhYUDB3YxfijeEieiJ+R\n2SRoDXPgXuDTjV4sKH+Q5eptOkZ+rb2lFKo1KADxz2J/PHYk4uaC+fUq9iTeswKx\n11Gm9gornphlDiJQF9vIO4RW1MQFVA==\n=n2DE\n-----END PGP SIGNATURE-----", "payload": "tree 12ecbb397875cf77cb59d7289abf0ebc0c9417d2\nparent 0e06b3c5f3e8ea001302558f350bbec114bc0ecb\nauthor Mateusz Gacek <96mateusz.gacek@gmail.com> 1617047483 -0700\ncommitter Mateusz Gacek <96mateusz.gacek@gmail.com> 1617086763 -0700\n\nwrong_self_convention: fix FP inside trait impl for `to_*` method\n\nWhen the `to_*` method takes `&self` and it is a trait implementation,\nwe don't trigger the lint.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6966c78be74ec7dea5cbbb18f1ec10771bf4b728", "html_url": "https://github.com/rust-lang/rust/commit/6966c78be74ec7dea5cbbb18f1ec10771bf4b728", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6966c78be74ec7dea5cbbb18f1ec10771bf4b728/comments", "author": {"login": "mgacek8", "id": 24357739, "node_id": "MDQ6VXNlcjI0MzU3NzM5", "avatar_url": "https://avatars.githubusercontent.com/u/24357739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgacek8", "html_url": "https://github.com/mgacek8", "followers_url": "https://api.github.com/users/mgacek8/followers", "following_url": "https://api.github.com/users/mgacek8/following{/other_user}", "gists_url": "https://api.github.com/users/mgacek8/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgacek8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgacek8/subscriptions", "organizations_url": "https://api.github.com/users/mgacek8/orgs", "repos_url": "https://api.github.com/users/mgacek8/repos", "events_url": "https://api.github.com/users/mgacek8/events{/privacy}", "received_events_url": "https://api.github.com/users/mgacek8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mgacek8", "id": 24357739, "node_id": "MDQ6VXNlcjI0MzU3NzM5", "avatar_url": "https://avatars.githubusercontent.com/u/24357739?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgacek8", "html_url": "https://github.com/mgacek8", "followers_url": "https://api.github.com/users/mgacek8/followers", "following_url": "https://api.github.com/users/mgacek8/following{/other_user}", "gists_url": "https://api.github.com/users/mgacek8/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgacek8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgacek8/subscriptions", "organizations_url": "https://api.github.com/users/mgacek8/orgs", "repos_url": "https://api.github.com/users/mgacek8/repos", "events_url": "https://api.github.com/users/mgacek8/events{/privacy}", "received_events_url": "https://api.github.com/users/mgacek8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e06b3c5f3e8ea001302558f350bbec114bc0ecb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e06b3c5f3e8ea001302558f350bbec114bc0ecb", "html_url": "https://github.com/rust-lang/rust/commit/0e06b3c5f3e8ea001302558f350bbec114bc0ecb"}], "stats": {"total": 98, "additions": 81, "deletions": 17}, "files": [{"sha": "9559252392839474a348c434dd7daec83468a4a4", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6966c78be74ec7dea5cbbb18f1ec10771bf4b728/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6966c78be74ec7dea5cbbb18f1ec10771bf4b728/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=6966c78be74ec7dea5cbbb18f1ec10771bf4b728", "patch": "@@ -205,6 +205,13 @@ declare_clippy_lint! {\n     /// |`to_`  | not `_mut` |`self`                 | `Copy`       |\n     /// |`to_`  | not `_mut` |`&self`                | not `Copy`   |\n     ///\n+    /// Note: Clippy doesn't trigger methods with `to_` prefix in:\n+    /// - Traits definition.\n+    /// Clippy can not tell if a type that implements a trait is `Copy` or not.\n+    /// - Traits implementation, when `&self` is taken.\n+    /// The method signature is controlled by the trait and often `&self` is required for all types that implement the trait\n+    /// (see e.g. the `std::string::ToString` trait).\n+    ///\n     /// Please find more info here:\n     /// https://rust-lang.github.io/api-guidelines/naming.html#ad-hoc-conversions-follow-as_-to_-into_-conventions-c-conv\n     ///\n@@ -1850,7 +1857,6 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         let self_ty = cx.tcx.type_of(item.def_id);\n \n         let implements_trait = matches!(item.kind, hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }));\n-\n         if_chain! {\n             if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind;\n             if let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir().body(id)).next();\n@@ -1902,6 +1908,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     self_ty,\n                     first_arg_ty,\n                     first_arg.pat.span,\n+                    implements_trait,\n                     false\n                 );\n             }\n@@ -1972,6 +1979,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     self_ty,\n                     first_arg_ty,\n                     first_arg_span,\n+                    false,\n                     true\n                 );\n             }"}, {"sha": "1e0de249a91f1792c8f5c132ad9cd3f710f8a2ee", "filename": "clippy_lints/src/methods/wrong_self_convention.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6966c78be74ec7dea5cbbb18f1ec10771bf4b728/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6966c78be74ec7dea5cbbb18f1ec10771bf4b728/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs?ref=6966c78be74ec7dea5cbbb18f1ec10771bf4b728", "patch": "@@ -21,8 +21,10 @@ const CONVENTIONS: [(&[Convention], &[SelfKind]); 9] = [\n \n     // Conversion using `to_` can use borrowed (non-Copy types) or owned (Copy types).\n     // Source: https://rust-lang.github.io/api-guidelines/naming.html#ad-hoc-conversions-follow-as_-to_-into_-conventions-c-conv\n-    (&[Convention::StartsWith(\"to_\"), Convention::NotEndsWith(\"_mut\"), Convention::IsSelfTypeCopy(false), Convention::ImplementsTrait(false)], &[SelfKind::Ref]),\n-    (&[Convention::StartsWith(\"to_\"), Convention::NotEndsWith(\"_mut\"), Convention::IsSelfTypeCopy(true), Convention::ImplementsTrait(false)], &[SelfKind::Value]),\n+    (&[Convention::StartsWith(\"to_\"), Convention::NotEndsWith(\"_mut\"), Convention::IsSelfTypeCopy(false), \n+    Convention::IsTraitItem(false)], &[SelfKind::Ref]),\n+    (&[Convention::StartsWith(\"to_\"), Convention::NotEndsWith(\"_mut\"), Convention::IsSelfTypeCopy(true), \n+    Convention::IsTraitItem(false), Convention::ImplementsTrait(false)], &[SelfKind::Value]),\n ];\n \n enum Convention {\n@@ -32,18 +34,27 @@ enum Convention {\n     NotEndsWith(&'static str),\n     IsSelfTypeCopy(bool),\n     ImplementsTrait(bool),\n+    IsTraitItem(bool),\n }\n \n impl Convention {\n     #[must_use]\n-    fn check<'tcx>(&self, cx: &LateContext<'tcx>, self_ty: &'tcx TyS<'tcx>, other: &str, is_trait_def: bool) -> bool {\n+    fn check<'tcx>(\n+        &self,\n+        cx: &LateContext<'tcx>,\n+        self_ty: &'tcx TyS<'tcx>,\n+        other: &str,\n+        implements_trait: bool,\n+        is_trait_item: bool,\n+    ) -> bool {\n         match *self {\n             Self::Eq(this) => this == other,\n             Self::StartsWith(this) => other.starts_with(this) && this != other,\n             Self::EndsWith(this) => other.ends_with(this) && this != other,\n-            Self::NotEndsWith(this) => !Self::EndsWith(this).check(cx, self_ty, other, is_trait_def),\n+            Self::NotEndsWith(this) => !Self::EndsWith(this).check(cx, self_ty, other, implements_trait, is_trait_item),\n             Self::IsSelfTypeCopy(is_true) => is_true == is_copy(cx, self_ty),\n-            Self::ImplementsTrait(is_true) => is_true == is_trait_def,\n+            Self::ImplementsTrait(is_true) => is_true == implements_trait,\n+            Self::IsTraitItem(is_true) => is_true == is_trait_item,\n         }\n     }\n }\n@@ -60,19 +71,25 @@ impl fmt::Display for Convention {\n             },\n             Self::ImplementsTrait(is_true) => {\n                 let (negation, s_suffix) = if is_true { (\"\", \"s\") } else { (\" does not\", \"\") };\n-                format!(\"Method{} implement{} a trait\", negation, s_suffix).fmt(f)\n+                format!(\"method{} implement{} a trait\", negation, s_suffix).fmt(f)\n+            },\n+            Self::IsTraitItem(is_true) => {\n+                let suffix = if is_true { \" is\" } else { \" is not\" };\n+                format!(\"method{} a trait item\", suffix).fmt(f)\n             },\n         }\n     }\n }\n \n+#[allow(clippy::too_many_arguments)]\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     item_name: &str,\n     is_pub: bool,\n     self_ty: &'tcx TyS<'tcx>,\n     first_arg_ty: &'tcx TyS<'tcx>,\n     first_arg_span: Span,\n+    implements_trait: bool,\n     is_trait_item: bool,\n ) {\n     let lint = if is_pub {\n@@ -83,7 +100,7 @@ pub(super) fn check<'tcx>(\n     if let Some((conventions, self_kinds)) = &CONVENTIONS.iter().find(|(convs, _)| {\n         convs\n             .iter()\n-            .all(|conv| conv.check(cx, self_ty, item_name, is_trait_item))\n+            .all(|conv| conv.check(cx, self_ty, item_name, implements_trait, is_trait_item))\n     }) {\n         if !self_kinds.iter().any(|k| k.matches(cx, self_ty, first_arg_ty)) {\n             let suggestion = {\n@@ -99,6 +116,7 @@ pub(super) fn check<'tcx>(\n                         .filter_map(|conv| {\n                             if (cut_ends_with_conv && matches!(conv, Convention::NotEndsWith(_)))\n                                 || matches!(conv, Convention::ImplementsTrait(_))\n+                                || matches!(conv, Convention::IsTraitItem(_))\n                             {\n                                 None\n                             } else {"}, {"sha": "cdfbdb8b0db3e54c263b0033091ec363be665b35", "filename": "tests/ui/wrong_self_convention.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6966c78be74ec7dea5cbbb18f1ec10771bf4b728/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6966c78be74ec7dea5cbbb18f1ec10771bf4b728/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=6966c78be74ec7dea5cbbb18f1ec10771bf4b728", "patch": "@@ -165,15 +165,10 @@ mod issue6307 {\n }\n \n mod issue6727 {\n-    trait ToU64 {\n-        fn to_u64(self) -> u64;\n-        fn to_u64_v2(&self) -> u64;\n-    }\n-\n     #[derive(Clone, Copy)]\n     struct FooCopy;\n \n-    impl ToU64 for FooCopy {\n+    impl FooCopy {\n         fn to_u64(self) -> u64 {\n             1\n         }\n@@ -185,7 +180,7 @@ mod issue6727 {\n \n     struct FooNoCopy;\n \n-    impl ToU64 for FooNoCopy {\n+    impl FooNoCopy {\n         // trigger lint\n         fn to_u64(self) -> u64 {\n             2"}, {"sha": "29f5ba8269545998683319c7d931b0deadca167f", "filename": "tests/ui/wrong_self_convention.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6966c78be74ec7dea5cbbb18f1ec10771bf4b728/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6966c78be74ec7dea5cbbb18f1ec10771bf4b728/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=6966c78be74ec7dea5cbbb18f1ec10771bf4b728", "patch": "@@ -176,15 +176,15 @@ LL |         fn from_i32(self);\n    = help: consider choosing a less ambiguous name\n \n error: methods with the following characteristics: (`to_*` and `self` type is `Copy`) usually take `self` by value\n-  --> $DIR/wrong_self_convention.rs:181:22\n+  --> $DIR/wrong_self_convention.rs:176:22\n    |\n LL |         fn to_u64_v2(&self) -> u64 {\n    |                      ^^^^^\n    |\n    = help: consider choosing a less ambiguous name\n \n error: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\n-  --> $DIR/wrong_self_convention.rs:190:19\n+  --> $DIR/wrong_self_convention.rs:185:19\n    |\n LL |         fn to_u64(self) -> u64 {\n    |                   ^^^^"}, {"sha": "8b42aa59e1323ecb3552a56be6475bdad8bd2a6f", "filename": "tests/ui/wrong_self_convention2.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6966c78be74ec7dea5cbbb18f1ec10771bf4b728/tests%2Fui%2Fwrong_self_convention2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6966c78be74ec7dea5cbbb18f1ec10771bf4b728/tests%2Fui%2Fwrong_self_convention2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention2.rs?ref=6966c78be74ec7dea5cbbb18f1ec10771bf4b728", "patch": "@@ -0,0 +1,32 @@\n+// edition:2018\n+#![warn(clippy::wrong_self_convention)]\n+#![warn(clippy::wrong_pub_self_convention)]\n+#![allow(dead_code)]\n+\n+fn main() {}\n+\n+mod issue6983 {\n+    pub struct Thing;\n+    pub trait Trait {\n+        fn to_thing(&self) -> Thing;\n+    }\n+\n+    impl Trait for u8 {\n+        // don't trigger, e.g. `ToString` from `std` requires `&self`\n+        fn to_thing(&self) -> Thing {\n+            Thing\n+        }\n+    }\n+\n+    trait ToU64 {\n+        fn to_u64(self) -> u64;\n+    }\n+\n+    struct FooNoCopy;\n+    // trigger lint\n+    impl ToU64 for FooNoCopy {\n+        fn to_u64(self) -> u64 {\n+            2\n+        }\n+    }\n+}"}, {"sha": "0ca1a390974a0ca63c7644880fd59c09ea26f68a", "filename": "tests/ui/wrong_self_convention2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6966c78be74ec7dea5cbbb18f1ec10771bf4b728/tests%2Fui%2Fwrong_self_convention2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6966c78be74ec7dea5cbbb18f1ec10771bf4b728/tests%2Fui%2Fwrong_self_convention2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention2.stderr?ref=6966c78be74ec7dea5cbbb18f1ec10771bf4b728", "patch": "@@ -0,0 +1,11 @@\n+error: methods with the following characteristics: (`to_*` and `self` type is not `Copy`) usually take `self` by reference\n+  --> $DIR/wrong_self_convention2.rs:28:19\n+   |\n+LL |         fn to_u64(self) -> u64 {\n+   |                   ^^^^\n+   |\n+   = note: `-D clippy::wrong-self-convention` implied by `-D warnings`\n+   = help: consider choosing a less ambiguous name\n+\n+error: aborting due to previous error\n+"}]}