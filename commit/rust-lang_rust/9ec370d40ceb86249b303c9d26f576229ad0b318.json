{"sha": "9ec370d40ceb86249b303c9d26f576229ad0b318", "node_id": "C_kwDOAAsO6NoAKDllYzM3MGQ0MGNlYjg2MjQ5YjMwM2M5ZDI2ZjU3NjIyOWFkMGIzMTg", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-06-07T10:04:53Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-06-12T07:34:10Z"}, "message": "bless both 32bit and 64bit variants of mir-opt when available", "tree": {"sha": "cad1a3f12907abb887e54bec3be521f5db10baea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cad1a3f12907abb887e54bec3be521f5db10baea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ec370d40ceb86249b303c9d26f576229ad0b318", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmSGynIACgkQzXazX3c0\ndp7Rsg//Uq3FxYDlpZiX/MW9wKVCtNVBXM7k/WE0sVomM2JU0VrlS55gXZEBMPQI\n1Zu7VJ4tH9x8GnhfjW6q+U9x0KsgwlcSRrKymq9V9Y9hjumZaz3XCMrdpBw+Qv/m\nkesXsC9+fRlyJMatm3YE9pjY5ZG6H7Pc9dsaKIxEXfnqe6sjPObyqruEDUGNOxHo\npN7ARVQlOcc33sGSNgvNySDl3hr8sNiG/VMfkChhOlIQ7AVfYz4W5MNHvN3DwlZN\nYaMs0wl7OJ2mZq3nbwzfooZkl223c4BpOeIoQRVEQgRCR8zVhjfZnkwf/ax3URAe\ndKiHeNYUMU/cNSqUf/ej72rclG8YvVhrohNFgEGnZAZc7CnEpmBIfAOP0Oalvc8k\nWiW4CsBS3Ho8J6zyp5AEdQXhpfFkk5fT67WcmxA1H9zI8iLbdPNbnB3QyjW/rTlv\nuOd/plQWJssY7+xyua7JYQyXm8eqAReEgdLgJBhBpsZT/WXG4TnH2jFSrgLO5jnx\nCD4ApN+4ajfXKc2bW6K8AKunJ4h13YC6OGkJWvAfNKpDnk+uLfLwP/1ObAzgeWsz\n9S6eyYnsf9tHzQNw+cT4q6xyG4xnyoV2NKAEH7M0j9VfdbeeWZz3sR18PY5fauCB\njtvXEC3szE6LRP7AULcWhamxJzzOsr2HNwxZ0m23ZlVdEU0O4z8=\n=wkNr\n-----END PGP SIGNATURE-----", "payload": "tree cad1a3f12907abb887e54bec3be521f5db10baea\nparent 1c26f1b48f159f3c476d29acbc466c4e7f0c86b9\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1686132293 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1686555250 +0200\n\nbless both 32bit and 64bit variants of mir-opt when available\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec370d40ceb86249b303c9d26f576229ad0b318", "html_url": "https://github.com/rust-lang/rust/commit/9ec370d40ceb86249b303c9d26f576229ad0b318", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ec370d40ceb86249b303c9d26f576229ad0b318/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c26f1b48f159f3c476d29acbc466c4e7f0c86b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c26f1b48f159f3c476d29acbc466c4e7f0c86b9", "html_url": "https://github.com/rust-lang/rust/commit/1c26f1b48f159f3c476d29acbc466c4e7f0c86b9"}], "stats": {"total": 78, "additions": 70, "deletions": 8}, "files": [{"sha": "5ecac833d27dfa03d42d24536359aef759603caa", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 70, "deletions": 8, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/9ec370d40ceb86249b303c9d26f576229ad0b318/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ec370d40ceb86249b303c9d26f576229ad0b318/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=9ec370d40ceb86249b303c9d26f576229ad0b318", "patch": "@@ -30,6 +30,22 @@ use crate::{envify, CLang, DocTests, GitRepo, Mode};\n \n const ADB_TEST_DIR: &str = \"/data/local/tmp/work\";\n \n+// mir-opt tests have different variants depending on whether a target is 32bit or 64bit, and\n+// blessing them requires blessing with each target. To aid developers, when blessing the mir-opt\n+// test suite the corresponding target of the opposite pointer size is also blessed.\n+//\n+// This array serves as the known mappings between 32bit and 64bit targets. If you're developing on\n+// a target where a target with the opposite pointer size exists, feel free to add it here.\n+const MIR_OPT_BLESS_TARGET_MAPPING: &[(&str, &str)] = &[\n+    // (32bit, 64bit)\n+    (\"i686-unknown-linux-gnu\", \"x86_64-unknown-linux-gnu\"),\n+    (\"i686-unknown-linux-musl\", \"x86_64-unknown-linux-musl\"),\n+    (\"i686-pc-windows-msvc\", \"x86_64-pc-windows-msvc\"),\n+    (\"i686-pc-windows-gnu\", \"x86_64-pc-windows-gnu\"),\n+    (\"i686-apple-darwin\", \"x86_64-apple-darwin\"),\n+    (\"i686-apple-darwin\", \"aarch64-apple-darwin\"),\n+];\n+\n fn try_run(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n     if !builder.fail_fast {\n         if !builder.try_run(cmd) {\n@@ -1319,14 +1335,60 @@ impl Step for MirOpt {\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n-        builder.ensure(Compiletest {\n-            compiler: self.compiler,\n-            target: self.target,\n-            mode: \"mir-opt\",\n-            suite: \"mir-opt\",\n-            path: \"tests/mir-opt\",\n-            compare_mode: None,\n-        });\n+        let run = |target| {\n+            builder.ensure(Compiletest {\n+                compiler: self.compiler,\n+                target: target,\n+                mode: \"mir-opt\",\n+                suite: \"mir-opt\",\n+                path: \"tests/mir-opt\",\n+                compare_mode: None,\n+            })\n+        };\n+\n+        // We use custom logic to bless the mir-opt suite: mir-opt tests have multiple variants\n+        // (32bit vs 64bit), and all of them needs to be blessed. When blessing, we try best-effort\n+        // to also bless the other variants, to aid developers.\n+        if builder.config.cmd.bless() {\n+            let targets = MIR_OPT_BLESS_TARGET_MAPPING\n+                .iter()\n+                .filter(|(target_32bit, target_64bit)| {\n+                    *target_32bit == &*self.target.triple || *target_64bit == &*self.target.triple\n+                })\n+                .next()\n+                .map(|(target_32bit, target_64bit)| {\n+                    let target_32bit = TargetSelection::from_user(target_32bit);\n+                    let target_64bit = TargetSelection::from_user(target_64bit);\n+\n+                    // Running compiletest requires a C compiler to be available, but it might not\n+                    // have been detected by bootstrap if the target we're testing wasn't in the\n+                    // --target flags.\n+                    if !builder.cc.borrow().contains_key(&target_32bit) {\n+                        crate::cc_detect::find_target(builder, target_32bit);\n+                    }\n+                    if !builder.cc.borrow().contains_key(&target_64bit) {\n+                        crate::cc_detect::find_target(builder, target_64bit);\n+                    }\n+\n+                    vec![target_32bit, target_64bit]\n+                })\n+                .unwrap_or_else(|| {\n+                    eprintln!(\n+                        \"\\\n+Note that not all variants of mir-opt tests are going to be blessed, as no mapping between\n+a 32bit and a 64bit target was found for {target}.\n+You can add that mapping by changing MIR_OPT_BLESS_TARGET_MAPPING in src/bootstrap/test.rs\",\n+                        target = self.target,\n+                    );\n+                    vec![self.target]\n+                });\n+\n+            for target in targets {\n+                run(target);\n+            }\n+        } else {\n+            run(self.target);\n+        }\n     }\n }\n "}]}