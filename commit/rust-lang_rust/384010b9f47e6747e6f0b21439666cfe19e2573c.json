{"sha": "384010b9f47e6747e6f0b21439666cfe19e2573c", "node_id": "C_kwDOAAsO6NoAKDM4NDAxMGI5ZjQ3ZTY3NDdlNmYwYjIxNDM5NjY2Y2ZlMTllMjU3M2M", "commit": {"author": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2022-09-05T18:38:36Z"}, "committer": {"name": "Rejyr", "email": "jerrylwang123@gmail.com", "date": "2023-01-09T22:07:25Z"}, "message": "migrate: `non_fmt_panic.rs`", "tree": {"sha": "4d65fae889eed6388d7640d03ace98e97dd0a511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d65fae889eed6388d7640d03ace98e97dd0a511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/384010b9f47e6747e6f0b21439666cfe19e2573c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/384010b9f47e6747e6f0b21439666cfe19e2573c", "html_url": "https://github.com/rust-lang/rust/commit/384010b9f47e6747e6f0b21439666cfe19e2573c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/384010b9f47e6747e6f0b21439666cfe19e2573c/comments", "author": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Rejyr", "id": 88239847, "node_id": "MDQ6VXNlcjg4MjM5ODQ3", "avatar_url": "https://avatars.githubusercontent.com/u/88239847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Rejyr", "html_url": "https://github.com/Rejyr", "followers_url": "https://api.github.com/users/Rejyr/followers", "following_url": "https://api.github.com/users/Rejyr/following{/other_user}", "gists_url": "https://api.github.com/users/Rejyr/gists{/gist_id}", "starred_url": "https://api.github.com/users/Rejyr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Rejyr/subscriptions", "organizations_url": "https://api.github.com/users/Rejyr/orgs", "repos_url": "https://api.github.com/users/Rejyr/repos", "events_url": "https://api.github.com/users/Rejyr/events{/privacy}", "received_events_url": "https://api.github.com/users/Rejyr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9bbe31519b250fb331347351b47345fcbfe7932", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9bbe31519b250fb331347351b47345fcbfe7932", "html_url": "https://github.com/rust-lang/rust/commit/a9bbe31519b250fb331347351b47345fcbfe7932"}], "stats": {"total": 86, "additions": 53, "deletions": 33}, "files": [{"sha": "8a249ebf24d0ca693ebda497e506a8ac63d8c9ed", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/384010b9f47e6747e6f0b21439666cfe19e2573c/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384010b9f47e6747e6f0b21439666cfe19e2573c/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=384010b9f47e6747e6f0b21439666cfe19e2573c", "patch": "@@ -6,6 +6,43 @@ use rustc_span::{symbol::Ident, Span, Symbol};\n \n use crate::LateContext;\n \n+pub struct NonFmtPanicUnused {\n+    pub count: usize,\n+    pub suggestion: Option<Span>,\n+}\n+\n+impl<G: EmissionGuarantee> DecorateLint<'_, G> for NonFmtPanicUnused {\n+    fn decorate_lint(self, diag: rustc_errors::LintDiagnosticBuilder<'_, G>) {\n+        let mut diag = diag.build(fluent::lint_non_fmt_panic_unused);\n+        diag.set_arg(\"count\", self.count);\n+        diag.note(fluent::note);\n+        if let Some(span) = self.suggestion {\n+            diag.span_suggestion(\n+                span.shrink_to_hi(),\n+                fluent::add_args_suggestion,\n+                \", ...\",\n+                Applicability::HasPlaceholders,\n+            );\n+            diag.span_suggestion(\n+                span.shrink_to_lo(),\n+                fluent::add_fmt_suggestion,\n+                \"\\\"{}\\\", \",\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+        diag.emit();\n+    }\n+}\n+\n+#[derive(LintDiagnostic)]\n+#[diag(lint_non_fmt_panic_braces)]\n+#[note]\n+pub struct NonFmtPanicBraces {\n+    pub count: usize,\n+    #[suggestion(code = \"\\\"{{}}\\\", \", applicability = \"machine-applicable\")]\n+    pub suggestion: Option<Span>,\n+}\n+\n #[derive(LintDiagnostic)]\n #[diag(lint_non_camel_case_type)]\n pub struct NonCamelCaseType<'a> {"}, {"sha": "b86097a4bfc4a9c6a7368c7d3a70c120d3f10796", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 16, "deletions": 33, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/384010b9f47e6747e6f0b21439666cfe19e2573c/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384010b9f47e6747e6f0b21439666cfe19e2573c/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=384010b9f47e6747e6f0b21439666cfe19e2573c", "patch": "@@ -1,3 +1,6 @@\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n+use crate::lints::{NonFmtPanicBraces, NonFmtPanicUnused};\n use crate::{LateContext, LateLintPass, LintContext};\n use rustc_ast as ast;\n use rustc_errors::{fluent, Applicability};\n@@ -118,6 +121,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n         arg_span = expn.call_site;\n     }\n \n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     cx.struct_span_lint(NON_FMT_PANICS, arg_span, fluent::lint_non_fmt_panic, |lint| {\n         lint.set_arg(\"name\", symbol);\n         lint.note(fluent::note);\n@@ -253,25 +257,14 @@ fn check_panic_str<'tcx>(\n                 .map(|span| fmt_span.from_inner(InnerSpan::new(span.start, span.end)))\n                 .collect(),\n         };\n-        cx.struct_span_lint(NON_FMT_PANICS, arg_spans, fluent::lint_non_fmt_panic_unused, |lint| {\n-            lint.set_arg(\"count\", n_arguments);\n-            lint.note(fluent::note);\n-            if is_arg_inside_call(arg.span, span) {\n-                lint.span_suggestion(\n-                    arg.span.shrink_to_hi(),\n-                    fluent::add_args_suggestion,\n-                    \", ...\",\n-                    Applicability::HasPlaceholders,\n-                );\n-                lint.span_suggestion(\n-                    arg.span.shrink_to_lo(),\n-                    fluent::add_fmt_suggestion,\n-                    \"\\\"{}\\\", \",\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-            lint\n-        });\n+        cx.emit_spanned_lint(\n+            NON_FMT_PANICS,\n+            arg_spans,\n+            NonFmtPanicUnused {\n+                count: n_arguments,\n+                suggestion: is_arg_inside_call(arg.span, span).then_some(arg.span),\n+            },\n+        );\n     } else {\n         let brace_spans: Option<Vec<_>> =\n             snippet.filter(|s| s.starts_with('\"') || s.starts_with(\"r#\")).map(|s| {\n@@ -281,22 +274,12 @@ fn check_panic_str<'tcx>(\n                     .collect()\n             });\n         let count = brace_spans.as_ref().map(|v| v.len()).unwrap_or(/* any number >1 */ 2);\n-        cx.struct_span_lint(\n+        cx.emit_spanned_lint(\n             NON_FMT_PANICS,\n             brace_spans.unwrap_or_else(|| vec![span]),\n-            fluent::lint_non_fmt_panic_braces,\n-            |lint| {\n-                lint.set_arg(\"count\", count);\n-                lint.note(fluent::note);\n-                if is_arg_inside_call(arg.span, span) {\n-                    lint.span_suggestion(\n-                        arg.span.shrink_to_lo(),\n-                        fluent::suggestion,\n-                        \"\\\"{}\\\", \",\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-                lint\n+            NonFmtPanicBraces {\n+                count,\n+                suggestion: is_arg_inside_call(arg.span, span).then_some(arg.span.shrink_to_lo()),\n             },\n         );\n     }"}]}