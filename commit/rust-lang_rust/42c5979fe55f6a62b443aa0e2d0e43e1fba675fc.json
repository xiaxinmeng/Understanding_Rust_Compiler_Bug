{"sha": "42c5979fe55f6a62b443aa0e2d0e43e1fba675fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYzU5NzlmZTU1ZjZhNjJiNDQzYWEwZTJkMGU0M2UxZmJhNjc1ZmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-20T17:18:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-20T17:18:44Z"}, "message": "Merge #7364\n\n7364: DefMap: hide remaining crate-visible fields r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "37ae4250681b38d1e485afbf864d774e86e91eb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37ae4250681b38d1e485afbf864d774e86e91eb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42c5979fe55f6a62b443aa0e2d0e43e1fba675fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgCGX0CRBK7hj4Ov3rIwAAdHIIAIjGDmVk/EA+VwhhQu5XNfzE\nBATK/E5nm4mGiI5hlMgp2us/eWjuiKb+TuU35+HZABS7112W1lI69FZyEw7tI2xR\n9OceDCOYhXyzJXpKEdTIudCQ8tgfvwW0DEQiS6/R/JxR7jfqmjQjjg61/jqm129c\nJCPzOq5H41Zc27ZlD4aGEXSMdxI5JhnoM2PJ2mJetNQ1AAkWPHpmm/My0MWFmpaw\nNousrWzFfaxXUFk104aWwPkq78Q8Obpbe81b60U2asYd7fpVLryWEO+hPNIirVI8\nEs9Xm+BXt6aPSjo3chyHJYsaMQE3rV6YC2aSmJj72NTlNHAX6+aZzUoYYWXzC6c=\n=5KHB\n-----END PGP SIGNATURE-----\n", "payload": "tree 37ae4250681b38d1e485afbf864d774e86e91eb1\nparent e62533c3ec74358d3488e8e4b7967c78459b238f\nparent 5f319ca7eeec52f311135117156fa06186146b07\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1611163124 +0000\ncommitter GitHub <noreply@github.com> 1611163124 +0000\n\nMerge #7364\n\n7364: DefMap: hide remaining crate-visible fields r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42c5979fe55f6a62b443aa0e2d0e43e1fba675fc", "html_url": "https://github.com/rust-lang/rust/commit/42c5979fe55f6a62b443aa0e2d0e43e1fba675fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42c5979fe55f6a62b443aa0e2d0e43e1fba675fc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e62533c3ec74358d3488e8e4b7967c78459b238f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e62533c3ec74358d3488e8e4b7967c78459b238f", "html_url": "https://github.com/rust-lang/rust/commit/e62533c3ec74358d3488e8e4b7967c78459b238f"}, {"sha": "5f319ca7eeec52f311135117156fa06186146b07", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f319ca7eeec52f311135117156fa06186146b07", "html_url": "https://github.com/rust-lang/rust/commit/5f319ca7eeec52f311135117156fa06186146b07"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "2c2c999dd0a7ca2b56b6235080b119ea77bdb156", "filename": "crates/hir_def/src/body.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42c5979fe55f6a62b443aa0e2d0e43e1fba675fc/crates%2Fhir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c5979fe55f6a62b443aa0e2d0e43e1fba675fc/crates%2Fhir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody.rs?ref=42c5979fe55f6a62b443aa0e2d0e43e1fba675fc", "patch": "@@ -122,7 +122,7 @@ impl Expander {\n \n         let mut err = None;\n         let call_id =\n-            macro_call.as_call_id_with_errors(db, self.crate_def_map.krate, resolver, &mut |e| {\n+            macro_call.as_call_id_with_errors(db, self.crate_def_map.krate(), resolver, &mut |e| {\n                 err.get_or_insert(e);\n             });\n         let call_id = match call_id {"}, {"sha": "db2d125aeac3cf35497dec13707d93e6496ababa", "filename": "crates/hir_def/src/find_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42c5979fe55f6a62b443aa0e2d0e43e1fba675fc/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c5979fe55f6a62b443aa0e2d0e43e1fba675fc/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ffind_path.rs?ref=42c5979fe55f6a62b443aa0e2d0e43e1fba675fc", "patch": "@@ -136,15 +136,15 @@ fn find_path_inner(\n     }\n \n     // - if the item is the crate root of a dependency crate, return the name from the extern prelude\n-    for (name, def_id) in &def_map.extern_prelude {\n+    for (name, def_id) in def_map.extern_prelude() {\n         if item == ItemInNs::Types(*def_id) {\n             let name = scope_name.unwrap_or_else(|| name.clone());\n             return Some(ModPath::from_segments(PathKind::Plain, vec![name]));\n         }\n     }\n \n     // - if the item is in the prelude, return the name from there\n-    if let Some(prelude_module) = def_map.prelude {\n+    if let Some(prelude_module) = def_map.prelude() {\n         let prelude_def_map = db.crate_def_map(prelude_module.krate);\n         let prelude_scope: &crate::item_scope::ItemScope =\n             &prelude_def_map[prelude_module.local_id].scope;"}, {"sha": "23f960ad490f99f753a9e0f00495c3798dbf96ff", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/42c5979fe55f6a62b443aa0e2d0e43e1fba675fc/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c5979fe55f6a62b443aa0e2d0e43e1fba675fc/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=42c5979fe55f6a62b443aa0e2d0e43e1fba675fc", "patch": "@@ -77,12 +77,12 @@ use crate::{\n pub struct DefMap {\n     root: LocalModuleId,\n     modules: Arena<ModuleData>,\n-    pub(crate) krate: CrateId,\n+    krate: CrateId,\n     /// The prelude module for this crate. This either comes from an import\n     /// marked with the `prelude_import` attribute, or (in the normal case) from\n     /// a dependency (`std` or `core`).\n-    pub(crate) prelude: Option<ModuleId>,\n-    pub(crate) extern_prelude: FxHashMap<Name, ModuleDefId>,\n+    prelude: Option<ModuleId>,\n+    extern_prelude: FxHashMap<Name, ModuleDefId>,\n \n     edition: Edition,\n     diagnostics: Vec<DefDiagnostic>,\n@@ -216,6 +216,18 @@ impl DefMap {\n         self.root\n     }\n \n+    pub(crate) fn krate(&self) -> CrateId {\n+        self.krate\n+    }\n+\n+    pub(crate) fn prelude(&self) -> Option<ModuleId> {\n+        self.prelude\n+    }\n+\n+    pub(crate) fn extern_prelude(&self) -> impl Iterator<Item = (&Name, &ModuleDefId)> + '_ {\n+        self.extern_prelude.iter()\n+    }\n+\n     pub(crate) fn resolve_path(\n         &self,\n         db: &dyn DefDatabase,"}, {"sha": "d48029b7d487782452eb9f279b3a7a5dfe1cdf56", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/42c5979fe55f6a62b443aa0e2d0e43e1fba675fc/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42c5979fe55f6a62b443aa0e2d0e43e1fba675fc/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=42c5979fe55f6a62b443aa0e2d0e43e1fba675fc", "patch": "@@ -416,7 +416,7 @@ impl Resolver {\n         let mut traits = FxHashSet::default();\n         for scope in &self.scopes {\n             if let Scope::ModuleScope(m) = scope {\n-                if let Some(prelude) = m.crate_def_map.prelude {\n+                if let Some(prelude) = m.crate_def_map.prelude() {\n                     let prelude_def_map = db.crate_def_map(prelude.krate);\n                     traits.extend(prelude_def_map[prelude.local_id].scope.traits());\n                 }\n@@ -446,11 +446,11 @@ impl Resolver {\n \n     pub fn module(&self) -> Option<ModuleId> {\n         let (def_map, local_id) = self.module_scope()?;\n-        Some(ModuleId { krate: def_map.krate, local_id })\n+        Some(ModuleId { krate: def_map.krate(), local_id })\n     }\n \n     pub fn krate(&self) -> Option<CrateId> {\n-        self.module_scope().map(|t| t.0.krate)\n+        self.module_scope().map(|t| t.0.krate())\n     }\n \n     pub fn where_predicates_in_scope<'a>(\n@@ -509,13 +509,13 @@ impl Scope {\n                     seen.insert((name.clone(), scope));\n                     f(name.clone(), ScopeDef::PerNs(scope));\n                 });\n-                m.crate_def_map.extern_prelude.iter().for_each(|(name, &def)| {\n+                m.crate_def_map.extern_prelude().for_each(|(name, &def)| {\n                     f(name.clone(), ScopeDef::PerNs(PerNs::types(def, Visibility::Public)));\n                 });\n                 BUILTIN_SCOPE.iter().for_each(|(name, &def)| {\n                     f(name.clone(), ScopeDef::PerNs(def));\n                 });\n-                if let Some(prelude) = m.crate_def_map.prelude {\n+                if let Some(prelude) = m.crate_def_map.prelude() {\n                     let prelude_def_map = db.crate_def_map(prelude.krate);\n                     prelude_def_map[prelude.local_id].scope.entries().for_each(|(name, def)| {\n                         let seen_tuple = (name.clone(), def);"}]}