{"sha": "f2da425bfff80bb0bf47921c873b5e89ed5597a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZGE0MjViZmZmODBiYjBiZjQ3OTIxYzg3M2I1ZTg5ZWQ1NTk3YTk=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-02-15T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-02-16T22:52:05Z"}, "message": "./x.py fmt", "tree": {"sha": "ea43cb82f96225e0fd2d152732cb863b9b54caac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea43cb82f96225e0fd2d152732cb863b9b54caac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2da425bfff80bb0bf47921c873b5e89ed5597a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2da425bfff80bb0bf47921c873b5e89ed5597a9", "html_url": "https://github.com/rust-lang/rust/commit/f2da425bfff80bb0bf47921c873b5e89ed5597a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2da425bfff80bb0bf47921c873b5e89ed5597a9/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d06a2a368df2d15cd4e9c3e1c3e8c86727307502", "url": "https://api.github.com/repos/rust-lang/rust/commits/d06a2a368df2d15cd4e9c3e1c3e8c86727307502", "html_url": "https://github.com/rust-lang/rust/commit/d06a2a368df2d15cd4e9c3e1c3e8c86727307502"}], "stats": {"total": 60, "additions": 34, "deletions": 26}, "files": [{"sha": "1ba87358b1c3d4b9bd7df15726d3feed6044cd4c", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f2da425bfff80bb0bf47921c873b5e89ed5597a9/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2da425bfff80bb0bf47921c873b5e89ed5597a9/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=f2da425bfff80bb0bf47921c873b5e89ed5597a9", "patch": "@@ -577,24 +577,25 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // the last field).  Can't have foreign types here, how would we\n                 // adjust alignment and size for them?\n                 let field = layout.field(self, layout.fields.count() - 1)?;\n-                let (unsized_size, unsized_align) = match self.size_and_align_of(metadata, &field)? {\n-                    Some(size_and_align) => size_and_align,\n-                    None => {\n-                        // A field with extern type.  If this field is at offset 0, we behave\n-                        // like the underlying extern type.\n-                        // FIXME: Once we have made decisions for how to handle size and alignment\n-                        // of `extern type`, this should be adapted.  It is just a temporary hack\n-                        // to get some code to work that probably ought to work.\n-                        if sized_size == Size::ZERO {\n-                            return Ok(None);\n-                        } else {\n-                            span_bug!(\n-                                self.cur_span(),\n-                                \"Fields cannot be extern types, unless they are at offset 0\"\n-                            )\n+                let (unsized_size, unsized_align) =\n+                    match self.size_and_align_of(metadata, &field)? {\n+                        Some(size_and_align) => size_and_align,\n+                        None => {\n+                            // A field with extern type.  If this field is at offset 0, we behave\n+                            // like the underlying extern type.\n+                            // FIXME: Once we have made decisions for how to handle size and alignment\n+                            // of `extern type`, this should be adapted.  It is just a temporary hack\n+                            // to get some code to work that probably ought to work.\n+                            if sized_size == Size::ZERO {\n+                                return Ok(None);\n+                            } else {\n+                                span_bug!(\n+                                    self.cur_span(),\n+                                    \"Fields cannot be extern types, unless they are at offset 0\"\n+                                )\n+                            }\n                         }\n-                    }\n-                };\n+                    };\n \n                 // FIXME (#26403, #27023): We should be adding padding\n                 // to `sized_size` (to accommodate the `unsized_align`"}, {"sha": "c4039f2f15e940b5f41c7b082a5e07f07ebf46ce", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f2da425bfff80bb0bf47921c873b5e89ed5597a9/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2da425bfff80bb0bf47921c873b5e89ed5597a9/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=f2da425bfff80bb0bf47921c873b5e89ed5597a9", "patch": "@@ -226,8 +226,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let l = self.read_immediate(&args[0])?;\n                 let r = self.read_immediate(&args[1])?;\n                 let is_add = intrinsic_name == sym::saturating_add;\n-                let (val, overflowed, _ty) =\n-                    self.overflowing_binary_op(if is_add { BinOp::Add } else { BinOp::Sub }, &l, &r)?;\n+                let (val, overflowed, _ty) = self.overflowing_binary_op(\n+                    if is_add { BinOp::Add } else { BinOp::Sub },\n+                    &l,\n+                    &r,\n+                )?;\n                 let val = if overflowed {\n                     let num_bits = l.layout.size.bits();\n                     if l.layout.abi.is_signed() {"}, {"sha": "0807949a2d91beed6efc23ba86b7b8ddbf76a058", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2da425bfff80bb0bf47921c873b5e89ed5597a9/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2da425bfff80bb0bf47921c873b5e89ed5597a9/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=f2da425bfff80bb0bf47921c873b5e89ed5597a9", "patch": "@@ -83,7 +83,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     Some((dest, ret)) => {\n                         dest_place = self.eval_place(dest)?;\n                         Some((&dest_place, ret))\n-                    },\n+                    }\n                     None => None,\n                 };\n                 self.eval_fn_call(fn_val, abi, &args[..], ret, *cleanup)?;"}, {"sha": "32edca6f3dff9629ce15ede2cea11c8f811a4abb", "filename": "compiler/rustc_mir/src/interpret/visitor.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2da425bfff80bb0bf47921c873b5e89ed5597a9/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2da425bfff80bb0bf47921c873b5e89ed5597a9/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvisitor.rs?ref=f2da425bfff80bb0bf47921c873b5e89ed5597a9", "patch": "@@ -18,7 +18,8 @@ pub trait Value<'mir, 'tcx, M: Machine<'mir, 'tcx>>: Copy {\n     fn layout(&self) -> TyAndLayout<'tcx>;\n \n     /// Makes this into an `OpTy`.\n-    fn to_op(&self, ecx: &InterpCx<'mir, 'tcx, M>) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>>;\n+    fn to_op(&self, ecx: &InterpCx<'mir, 'tcx, M>)\n+    -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>>;\n \n     /// Creates this from an `MPlaceTy`.\n     fn from_mem_place(mplace: MPlaceTy<'tcx, M::PointerTag>) -> Self;\n@@ -31,8 +32,11 @@ pub trait Value<'mir, 'tcx, M: Machine<'mir, 'tcx>>: Copy {\n     ) -> InterpResult<'tcx, Self>;\n \n     /// Projects to the n-th field.\n-    fn project_field(&self, ecx: &InterpCx<'mir, 'tcx, M>, field: usize)\n-    -> InterpResult<'tcx, Self>;\n+    fn project_field(\n+        &self,\n+        ecx: &InterpCx<'mir, 'tcx, M>,\n+        field: usize,\n+    ) -> InterpResult<'tcx, Self>;\n }\n \n // Operands and memory-places are both values."}, {"sha": "8ef831d4f3b1880c49b4e7e1270578c9d7419292", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2da425bfff80bb0bf47921c873b5e89ed5597a9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2da425bfff80bb0bf47921c873b5e89ed5597a9/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=f2da425bfff80bb0bf47921c873b5e89ed5597a9", "patch": "@@ -1198,9 +1198,9 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                             // This can be `None` if the lhs wasn't const propagated and we just\n                             // triggered the assert on the value of the rhs.\n                             match self.eval_operand(op, source_info) {\n-                                Some(op) => {\n-                                    DbgVal::Val(self.ecx.read_immediate(&op).unwrap().to_const_int())\n-                                }\n+                                Some(op) => DbgVal::Val(\n+                                    self.ecx.read_immediate(&op).unwrap().to_const_int(),\n+                                ),\n                                 None => DbgVal::Underscore,\n                             }\n                         };"}]}