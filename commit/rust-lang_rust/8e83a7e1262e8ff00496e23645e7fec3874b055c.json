{"sha": "8e83a7e1262e8ff00496e23645e7fec3874b055c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlODNhN2UxMjYyZThmZjAwNDk2ZTIzNjQ1ZTdmZWMzODc0YjA1NWM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-31T19:30:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-31T19:30:01Z"}, "message": "Rollup merge of #72807 - xiaotianrandom:fix-assoc-type-diagnostics, r=estebank\n\nAvoid setting wrong obligation cause span of associated type mismatch\n\nRemoves code that sets wrong obligation cause span of associated type mismatch. See the linked issue for details.\n\nCloses #72806.", "tree": {"sha": "2192e86d44596fb432606124449c07734a6ca88d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2192e86d44596fb432606124449c07734a6ca88d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e83a7e1262e8ff00496e23645e7fec3874b055c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe1AW6CRBK7hj4Ov3rIwAAdHIIAA5J0hC6rd/zGSMHKbSkNK9r\ntuww544PyEiCedG9sjMJtI7sXiAFADMnIc5y62Aogf4ccoHmAUNfsuFpd5ro2OjZ\nAO8tPbHtiJkGa59zR0QDDbR4R6HVlWjRNX1DO9Co9xExXZnYk2lji4tZV0NP/NYX\n6ZitueVvIUYmtMRBrupjaZsucUmdjpdmQdIlfGDmXR5HrgzC4TL3RlZ+IYbanAqu\n9Z7qgs+TgQhR5OMGyMliTR/xi5KICFWCN9a6Q+q/cZMKr/Nn7tex3yW62qK3l0fS\n0QuCHHmW+k2cBvjbAwLeCQ3dpURMwCd31yghN3BjCCXceVU0fvnGBvzGqkZhui4=\n=DJQR\n-----END PGP SIGNATURE-----\n", "payload": "tree 2192e86d44596fb432606124449c07734a6ca88d\nparent 6cd9a67314a07ecb29f096f821d76ea0855b1156\nparent 1a68c8e8d957e8df19e5adced776879bbe3d5344\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590953401 +0200\ncommitter GitHub <noreply@github.com> 1590953401 +0200\n\nRollup merge of #72807 - xiaotianrandom:fix-assoc-type-diagnostics, r=estebank\n\nAvoid setting wrong obligation cause span of associated type mismatch\n\nRemoves code that sets wrong obligation cause span of associated type mismatch. See the linked issue for details.\n\nCloses #72806.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e83a7e1262e8ff00496e23645e7fec3874b055c", "html_url": "https://github.com/rust-lang/rust/commit/8e83a7e1262e8ff00496e23645e7fec3874b055c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e83a7e1262e8ff00496e23645e7fec3874b055c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cd9a67314a07ecb29f096f821d76ea0855b1156", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cd9a67314a07ecb29f096f821d76ea0855b1156", "html_url": "https://github.com/rust-lang/rust/commit/6cd9a67314a07ecb29f096f821d76ea0855b1156"}, {"sha": "1a68c8e8d957e8df19e5adced776879bbe3d5344", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a68c8e8d957e8df19e5adced776879bbe3d5344", "html_url": "https://github.com/rust-lang/rust/commit/1a68c8e8d957e8df19e5adced776879bbe3d5344"}], "stats": {"total": 60, "additions": 41, "deletions": 19}, "files": [{"sha": "39c7528a6324032977d919fbd7f3ecbf1109802b", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8e83a7e1262e8ff00496e23645e7fec3874b055c/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e83a7e1262e8ff00496e23645e7fec3874b055c/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=8e83a7e1262e8ff00496e23645e7fec3874b055c", "patch": "@@ -172,25 +172,18 @@ fn extend_cause_with_original_assoc_item_obligation<'tcx>(\n         };\n     match pred.kind() {\n         ty::PredicateKind::Projection(proj) => {\n-            // The obligation comes not from the current `impl` nor the `trait` being\n-            // implemented, but rather from a \"second order\" obligation, like in\n-            // `src/test/ui/associated-types/point-at-type-on-obligation-failure.rs`.\n-            let trait_assoc_item = tcx.associated_item(proj.projection_def_id());\n-            if let Some(impl_item_span) =\n-                items.iter().find(|item| item.ident == trait_assoc_item.ident).map(fix_span)\n-            {\n-                cause.span = impl_item_span;\n-            } else {\n-                let kind = &proj.ty().skip_binder().kind;\n-                if let ty::Projection(projection_ty) = kind {\n-                    // This happens when an associated type has a projection coming from another\n-                    // associated type. See `traits-assoc-type-in-supertrait-bad.rs`.\n-                    let trait_assoc_item = tcx.associated_item(projection_ty.item_def_id);\n-                    if let Some(impl_item_span) =\n-                        items.iter().find(|item| item.ident == trait_assoc_item.ident).map(fix_span)\n-                    {\n-                        cause.span = impl_item_span;\n-                    }\n+            // The obligation comes not from the current `impl` nor the `trait` being implemented,\n+            // but rather from a \"second order\" obligation, where an associated type has a\n+            // projection coming from another associated type. See\n+            // `src/test/ui/associated-types/point-at-type-on-obligation-failure.rs` and\n+            // `traits-assoc-type-in-supertrait-bad.rs`.\n+            let kind = &proj.ty().skip_binder().kind;\n+            if let ty::Projection(projection_ty) = kind {\n+                let trait_assoc_item = tcx.associated_item(projection_ty.item_def_id);\n+                if let Some(impl_item_span) =\n+                    items.iter().find(|item| item.ident == trait_assoc_item.ident).map(fix_span)\n+                {\n+                    cause.span = impl_item_span;\n                 }\n             }\n         }"}, {"sha": "ae63781d568a1bc8d669d244e05717a84933398e", "filename": "src/test/ui/associated-types/issue-72806.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8e83a7e1262e8ff00496e23645e7fec3874b055c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e83a7e1262e8ff00496e23645e7fec3874b055c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.rs?ref=8e83a7e1262e8ff00496e23645e7fec3874b055c", "patch": "@@ -0,0 +1,20 @@\n+trait Bar {\n+    type Ok;\n+    type Sibling: Bar2<Ok=char>;\n+}\n+trait Bar2 {\n+    type Ok;\n+}\n+\n+struct Foo;\n+struct Foo2;\n+\n+impl Bar for Foo {  //~ ERROR type mismatch resolving `<Foo2 as Bar2>::Ok == char`\n+    type Ok = ();\n+    type Sibling = Foo2;\n+}\n+impl Bar2 for Foo2 {\n+    type Ok = u32;\n+}\n+\n+fn main() {}"}, {"sha": "03a6565848dc3524717f6de4112eaf1fc5d4e78e", "filename": "src/test/ui/associated-types/issue-72806.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e83a7e1262e8ff00496e23645e7fec3874b055c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e83a7e1262e8ff00496e23645e7fec3874b055c/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-72806.stderr?ref=8e83a7e1262e8ff00496e23645e7fec3874b055c", "patch": "@@ -0,0 +1,9 @@\n+error[E0271]: type mismatch resolving `<Foo2 as Bar2>::Ok == char`\n+  --> $DIR/issue-72806.rs:12:6\n+   |\n+LL | impl Bar for Foo {\n+   |      ^^^ expected `u32`, found `char`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0271`."}]}