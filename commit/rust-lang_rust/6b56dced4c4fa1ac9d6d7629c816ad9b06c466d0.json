{"sha": "6b56dced4c4fa1ac9d6d7629c816ad9b06c466d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNTZkY2VkNGM0ZmExYWM5ZDZkNzYyOWM4MTZhZDliMDZjNDY2ZDA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-09T10:30:51Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-12T19:50:47Z"}, "message": "Fix tidy.", "tree": {"sha": "fef2c2b047f76024640e9bfcc5d6574d7f0e38e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fef2c2b047f76024640e9bfcc5d6574d7f0e38e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b56dced4c4fa1ac9d6d7629c816ad9b06c466d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b56dced4c4fa1ac9d6d7629c816ad9b06c466d0", "html_url": "https://github.com/rust-lang/rust/commit/6b56dced4c4fa1ac9d6d7629c816ad9b06c466d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b56dced4c4fa1ac9d6d7629c816ad9b06c466d0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9ff78bdd546b2a420fbb0056cc9d1a6a0e40132", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9ff78bdd546b2a420fbb0056cc9d1a6a0e40132", "html_url": "https://github.com/rust-lang/rust/commit/f9ff78bdd546b2a420fbb0056cc9d1a6a0e40132"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "d4e33ee8b6f33e904267ffcc1c462b32557fe29d", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b56dced4c4fa1ac9d6d7629c816ad9b06c466d0/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b56dced4c4fa1ac9d6d7629c816ad9b06c466d0/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=6b56dced4c4fa1ac9d6d7629c816ad9b06c466d0", "patch": "@@ -480,7 +480,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let layout = cx.layout_of(self.monomorphize(&ty));\n                 match bx.tcx().const_eval(param_env.and(cid)) {\n                     Ok(val) => match val.val {\n-                        ty::ConstKind::Value(mir::interpret::ConstValue::ByRef { alloc, offset }) => {\n+                        ty::ConstKind::Value(mir::interpret::ConstValue::ByRef {\n+                            alloc, offset\n+                        }) => {\n                             bx.cx().from_const_alloc(layout, alloc, offset)\n                         }\n                         _ => bug!(\"promoteds should have an allocation: {:?}\", val),"}, {"sha": "9894fa647791072a5822bd2307d35c8b84a3d9dc", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b56dced4c4fa1ac9d6d7629c816ad9b06c466d0/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b56dced4c4fa1ac9d6d7629c816ad9b06c466d0/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=6b56dced4c4fa1ac9d6d7629c816ad9b06c466d0", "patch": "@@ -327,7 +327,9 @@ impl PatternFolder<'tcx> for LiteralExpander<'tcx> {\n                         span: pat.span,\n                         kind: box PatKind::Constant {\n                             value: self.tcx.mk_const(Const {\n-                                val: ty::ConstKind::Value(self.fold_const_value_deref(*val, rty, crty)),\n+                                val: ty::ConstKind::Value(\n+                                    self.fold_const_value_deref(*val, rty, crty)\n+                                ),\n                                 ty: rty,\n                             }),\n                         },\n@@ -1256,7 +1258,9 @@ impl<'tcx> IntRange<'tcx> {\n     ) -> Option<IntRange<'tcx>> {\n         if let Some((target_size, bias)) = Self::integral_size_and_signed_bias(tcx, value.ty) {\n             let ty = value.ty;\n-            let val = if let ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { data, size })) = value.val {\n+            let val = if let ty::ConstKind::Value(ConstValue::Scalar(\n+                Scalar::Raw { data, size }\n+            )) = value.val {\n                 // For this specific pattern we can skip a lot of effort and go\n                 // straight to the result, after doing a bit of checking. (We\n                 // could remove this branch and just use the next branch, which"}]}