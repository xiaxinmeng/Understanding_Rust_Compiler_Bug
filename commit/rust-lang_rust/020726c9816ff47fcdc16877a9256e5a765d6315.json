{"sha": "020726c9816ff47fcdc16877a9256e5a765d6315", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyMDcyNmM5ODE2ZmY0N2ZjZGMxNjg3N2E5MjU2ZTVhNzY1ZDYzMTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-20T17:25:21Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T23:19:28Z"}, "message": "update trans_c_stack_native_call() to use type_of_explicit_args()\n\ncurrently trans_c_stack_native_call() had some ad-hoc code for\ndetermining the type of the arguments. this code was not in\nagreement with the rest of trans. now it uses the same code path.", "tree": {"sha": "ee0ec30965873fd82732b41f1dc9cf9efcddad4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee0ec30965873fd82732b41f1dc9cf9efcddad4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/020726c9816ff47fcdc16877a9256e5a765d6315", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/020726c9816ff47fcdc16877a9256e5a765d6315", "html_url": "https://github.com/rust-lang/rust/commit/020726c9816ff47fcdc16877a9256e5a765d6315", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/020726c9816ff47fcdc16877a9256e5a765d6315/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67d3d9308f9a73513f23cee5ea9a32b43f449866", "url": "https://api.github.com/repos/rust-lang/rust/commits/67d3d9308f9a73513f23cee5ea9a32b43f449866", "html_url": "https://github.com/rust-lang/rust/commit/67d3d9308f9a73513f23cee5ea9a32b43f449866"}], "stats": {"total": 46, "additions": 18, "deletions": 28}, "files": [{"sha": "8391f40df47e1bd50be08a9d20ae677c4527717b", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/020726c9816ff47fcdc16877a9256e5a765d6315/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020726c9816ff47fcdc16877a9256e5a765d6315/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=020726c9816ff47fcdc16877a9256e5a765d6315", "patch": "@@ -3831,25 +3831,23 @@ fn trans_c_stack_native_call(bcx: @block_ctxt, f: @ast::expr,\n     // Translate the callee.\n     let { params: _, ty: fn_ty } = ty::expr_ty_params_and_ty(bcx_tcx(bcx), f);\n     let fn_arg_tys = ty::ty_fn_args(bcx_tcx(bcx), fn_ty);\n+    let llargtys = type_of_explicit_args(ccx, f.span, fn_arg_tys);\n \n     // Translate arguments.\n     let (to_zero, to_revoke) = ([], []);\n-    let llargs = vec::map2({ |ty_arg, arg|\n-        let arg_ty = ty_arg.ty;\n-\n-        let static, llargty;\n-        if check type_has_static_size(ccx, arg_ty) {\n-            static = true;\n-            llargty = type_of(ccx, f.span, arg_ty);\n-        } else {\n-            static = false;\n-            llargty = T_ptr(T_i8());\n-        }\n-\n+    let i = 0u, n = vec::len(args);\n+    let llargs = [];\n+    while i < n {\n+        let ty_arg = fn_arg_tys[i];\n+        let arg = args[i];\n+        let llargty = llargtys[i];\n         let r = trans_arg_expr(bcx, ty_arg, llargty, to_zero, to_revoke, arg);\n         let llargval = r.val; bcx = r.bcx;\n-        { llval: llargval, llty: llargty, static: static, mode: ty_arg.mode }\n-    }, fn_arg_tys, args);\n+        llargs += [\n+            { llval: llargval, llty: llargty }\n+        ];\n+        i += 1u;\n+    }\n \n     // Allocate the argument bundle.\n     let llargbundlety = T_struct(vec::map({ |r| r.llty }, llargs));\n@@ -3859,20 +3857,12 @@ fn trans_c_stack_native_call(bcx: @block_ctxt, f: @ast::expr,\n     let llargbundle = PointerCast(bcx, llrawargbundle, T_ptr(llargbundlety));\n \n     // Copy in arguments.\n-    vec::eachi({ |llarg, i|\n-        let llargval;\n-        if llarg.static {\n-            // FIXME: This load is unfortunate. It won't be necessary once we\n-            // have reference types again.\n-            llargval = alt llarg.mode {\n-              ast::by_val. | ast::by_mut_ref. { llarg.llval }\n-              ast::by_ref. | ast::mode_infer. { Load(bcx, llarg.llval) }\n-            };\n-        } else {\n-            llargval = llarg.llval;\n-        }\n-        store_inbounds(bcx, llargval, llargbundle, [C_int(0), C_uint(i)]);\n-    }, llargs);\n+    let i = 0u, n = vec::len(llargs);\n+    while i < n {\n+        let llarg = llargs[i].llval;\n+        store_inbounds(bcx, llarg, llargbundle, [C_int(0), C_uint(i)]);\n+        i += 1u;\n+    }\n \n     // Call.\n     // TODO: Invoke instead."}]}