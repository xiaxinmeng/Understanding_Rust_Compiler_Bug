{"sha": "15530a1c84b6ccc7f321ac855a76702677de2563", "node_id": "C_kwDOAAsO6NoAKDE1NTMwYTFjODRiNmNjYzdmMzIxYWM4NTVhNzY3MDI2NzdkZTI1NjM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-27T17:18:26Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-06T21:11:44Z"}, "message": "Create a forever red node and use it to force side effects.", "tree": {"sha": "75a0c62ebcfeffb9cbfb033b8197e843be9eafc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75a0c62ebcfeffb9cbfb033b8197e843be9eafc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15530a1c84b6ccc7f321ac855a76702677de2563", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15530a1c84b6ccc7f321ac855a76702677de2563", "html_url": "https://github.com/rust-lang/rust/commit/15530a1c84b6ccc7f321ac855a76702677de2563", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15530a1c84b6ccc7f321ac855a76702677de2563/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "682f57656ed83c1017ad7288940280386f80efae", "url": "https://api.github.com/repos/rust-lang/rust/commits/682f57656ed83c1017ad7288940280386f80efae", "html_url": "https://github.com/rust-lang/rust/commit/682f57656ed83c1017ad7288940280386f80efae"}], "stats": {"total": 63, "additions": 26, "deletions": 37}, "files": [{"sha": "cbc45526e89fbc2d8b2f6229e1ffabb9954973e6", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15530a1c84b6ccc7f321ac855a76702677de2563/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15530a1c84b6ccc7f321ac855a76702677de2563/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=15530a1c84b6ccc7f321ac855a76702677de2563", "patch": "@@ -20,12 +20,6 @@ rustc_queries! {\n         desc { \"trigger a delay span bug\" }\n     }\n \n-    /// Create a new definition within the incr. comp. engine.\n-    query register_def(_: ty::RawLocalDefId) -> LocalDefId {\n-        eval_always\n-        desc { \"register a DefId with the incr. comp. engine\" }\n-    }\n-\n     query resolutions(_: ()) -> &'tcx ty::ResolverOutputs {\n         eval_always\n         no_hash"}, {"sha": "2beac30426674fecc5706d8b3431d4db35a1cf1d", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/15530a1c84b6ccc7f321ac855a76702677de2563/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15530a1c84b6ccc7f321ac855a76702677de2563/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=15530a1c84b6ccc7f321ac855a76702677de2563", "patch": "@@ -123,9 +123,6 @@ impl<'tcx> Interner for TyCtxt<'tcx> {\n     type PlaceholderRegion = ty::PlaceholderRegion;\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n-pub struct RawLocalDefId(LocalDefId);\n-\n /// A type that is not publicly constructable. This prevents people from making [`TyKind::Error`]s\n /// except through the error-reporting functions on a [`tcx`][TyCtxt].\n #[derive(Copy, Clone, Debug, Eq, Hash, PartialEq, PartialOrd, Ord)]\n@@ -1477,23 +1474,15 @@ impl<'tcx> TyCtxt<'tcx> {\n         let def_id = self.definitions.write().create_def(parent, data);\n \n         // We need to ensure that these side effects are re-run by the incr. comp. engine.\n-        // When the incr. comp. engine considers marking this query as green, eval_always requires\n-        // we run the function to run.  To invoke it, the parameter cannot be reconstructed from\n-        // the DepNode, so the caller query is run.  Luckily, we are inside the caller query,\n-        // therefore the definition is properly created.\n-        debug_assert!({\n-            use rustc_query_system::dep_graph::{DepContext, DepNodeParams};\n-            self.is_eval_always(crate::dep_graph::DepKind::register_def)\n-                && !<RawLocalDefId as DepNodeParams<TyCtxt<'_>>>::fingerprint_style()\n-                    .reconstructible()\n-        });\n+        use rustc_query_system::dep_graph::DepNodeIndex;\n+        self.dep_graph.read_index(DepNodeIndex::FOREVER_RED_NODE);\n \n         // Any LocalDefId which is used within queries, either as key or result, either:\n         // - has been created before the construction of the TyCtxt;\n-        // - has been created by this call to `register_def`.\n+        // - has been created by this call to `create_def`.\n         // As a consequence, this LocalDefId is always re-created before it is needed by the incr.\n         // comp. engine itself.\n-        self.register_def(RawLocalDefId(def_id))\n+        def_id\n     }\n \n     pub fn iter_local_def_id(self) -> impl Iterator<Item = LocalDefId> + 'tcx {\n@@ -3033,5 +3022,4 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         // We want to check if the panic handler was defined in this crate\n         tcx.lang_items().panic_impl().map_or(false, |did| did.is_local())\n     };\n-    providers.register_def = |_, raw_id| raw_id.0;\n }"}, {"sha": "3a795af2121d0e409640353eb36da77e0b4f89de", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15530a1c84b6ccc7f321ac855a76702677de2563/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15530a1c84b6ccc7f321ac855a76702677de2563/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=15530a1c84b6ccc7f321ac855a76702677de2563", "patch": "@@ -72,8 +72,8 @@ pub use self::consts::{\n pub use self::context::{\n     tls, CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n     CtxtInterners, DelaySpanBugEmitted, FreeRegionInfo, GeneratorDiagnosticData,\n-    GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, RawLocalDefId, TyCtxt,\n-    TypeckResults, UserType, UserTypeAnnotationIndex,\n+    GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, TyCtxt, TypeckResults, UserType,\n+    UserTypeAnnotationIndex,\n };\n pub use self::instance::{Instance, InstanceDef};\n pub use self::list::List;"}, {"sha": "6fbafeb1d32b3c40c51ce563d534e2a1488b29b9", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/15530a1c84b6ccc7f321ac855a76702677de2563/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15530a1c84b6ccc7f321ac855a76702677de2563/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=15530a1c84b6ccc7f321ac855a76702677de2563", "patch": "@@ -39,17 +39,6 @@ impl Key for () {\n     }\n }\n \n-impl Key for ty::RawLocalDefId {\n-    #[inline(always)]\n-    fn query_crate_is_local(&self) -> bool {\n-        true\n-    }\n-\n-    fn default_span(&self, _: TyCtxt<'_>) -> Span {\n-        DUMMY_SP\n-    }\n-}\n-\n impl<'tcx> Key for ty::InstanceDef<'tcx> {\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {"}, {"sha": "d218e3b77531402b0c44820ca1d93c66fdb7545d", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/15530a1c84b6ccc7f321ac855a76702677de2563/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15530a1c84b6ccc7f321ac855a76702677de2563/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=15530a1c84b6ccc7f321ac855a76702677de2563", "patch": "@@ -43,6 +43,7 @@ rustc_index::newtype_index! {\n impl DepNodeIndex {\n     pub const INVALID: DepNodeIndex = DepNodeIndex::MAX;\n     pub const SINGLETON_DEPENDENCYLESS_ANON_NODE: DepNodeIndex = DepNodeIndex::from_u32(0);\n+    pub const FOREVER_RED_NODE: DepNodeIndex = DepNodeIndex::from_u32(1);\n }\n \n impl std::convert::From<DepNodeIndex> for QueryInvocationId {\n@@ -124,6 +125,8 @@ impl<K: DepKind> DepGraph<K> {\n             record_stats,\n         );\n \n+        let colors = DepNodeColorMap::new(prev_graph_node_count);\n+\n         // Instantiate a dependy-less node only once for anonymous queries.\n         let _green_node_index = current.intern_new_node(\n             profiler,\n@@ -133,14 +136,26 @@ impl<K: DepKind> DepGraph<K> {\n         );\n         debug_assert_eq!(_green_node_index, DepNodeIndex::SINGLETON_DEPENDENCYLESS_ANON_NODE);\n \n+        // Instantiate a dependy-less red node only once for anonymous queries.\n+        let (_red_node_index, _prev_and_index) = current.intern_node(\n+            profiler,\n+            &prev_graph,\n+            DepNode { kind: DepKind::NULL, hash: Fingerprint::ZERO.into() },\n+            smallvec![],\n+            None,\n+            false,\n+        );\n+        debug_assert_eq!(_red_node_index, DepNodeIndex::FOREVER_RED_NODE);\n+        debug_assert!(matches!(_prev_and_index, None | Some((_, DepNodeColor::Red))));\n+\n         DepGraph {\n             data: Some(Lrc::new(DepGraphData {\n                 previous_work_products: prev_work_products,\n                 dep_node_debug: Default::default(),\n                 current,\n                 processed_side_effects: Default::default(),\n                 previous: prev_graph,\n-                colors: DepNodeColorMap::new(prev_graph_node_count),\n+                colors,\n                 debug_loaded_from_disk: Default::default(),\n             })),\n             virtual_dep_node_index: Lrc::new(AtomicU32::new(0)),\n@@ -965,6 +980,9 @@ impl<K: DepKind> CurrentDepGraph<K> {\n         let nanos = duration.as_secs() * 1_000_000_000 + duration.subsec_nanos() as u64;\n         let mut stable_hasher = StableHasher::new();\n         nanos.hash(&mut stable_hasher);\n+        let anon_id_seed = stable_hasher.finish();\n+        // We rely on the fact that `anon_id_seed` is not zero when creating static nodes.\n+        debug_assert_ne!(anon_id_seed, Fingerprint::ZERO);\n \n         #[cfg(debug_assertions)]\n         let forbidden_edge = match env::var(\"RUST_FORBID_DEP_GRAPH_EDGE\") {\n@@ -1000,7 +1018,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n                 )\n             }),\n             prev_index_to_index: Lock::new(IndexVec::from_elem_n(None, prev_graph_node_count)),\n-            anon_id_seed: stable_hasher.finish(),\n+            anon_id_seed,\n             #[cfg(debug_assertions)]\n             forbidden_edge,\n             total_read_count: AtomicU64::new(0),"}]}