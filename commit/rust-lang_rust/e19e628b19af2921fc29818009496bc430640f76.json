{"sha": "e19e628b19af2921fc29818009496bc430640f76", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxOWU2MjhiMTlhZjI5MjFmYzI5ODE4MDA5NDk2YmM0MzA2NDBmNzY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-26T00:39:22Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-26T05:13:05Z"}, "message": "Demode iter-trait", "tree": {"sha": "9e4d4d161b7de4b33cd4335dbe8355fa93bd8463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e4d4d161b7de4b33cd4335dbe8355fa93bd8463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e19e628b19af2921fc29818009496bc430640f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e19e628b19af2921fc29818009496bc430640f76", "html_url": "https://github.com/rust-lang/rust/commit/e19e628b19af2921fc29818009496bc430640f76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e19e628b19af2921fc29818009496bc430640f76/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "473a866733b085419b41b2d2f2708a49c079f89e", "url": "https://api.github.com/repos/rust-lang/rust/commits/473a866733b085419b41b2d2f2708a49c079f89e", "html_url": "https://github.com/rust-lang/rust/commit/473a866733b085419b41b2d2f2708a49c079f89e"}], "stats": {"total": 138, "additions": 70, "deletions": 68}, "files": [{"sha": "fe42fe9e36cce491d7de8b39841251949b1ed322", "filename": "src/libcore/iter-trait.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Flibcore%2Fiter-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Flibcore%2Fiter-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -2,17 +2,19 @@\n // workaround our lack of traits and lack of macros.  See core.{rc,rs} for\n // how this file is used.\n \n+#[warn(deprecated_mode)];\n+\n use cmp::{Eq, Ord};\n use inst::{IMPL_T, EACH, SIZE_HINT};\n export extensions;\n \n impl<A> IMPL_T<A>: iter::BaseIter<A> {\n-    pure fn each(blk: fn(v: &A) -> bool) { EACH(self, blk) }\n-    pure fn size_hint() -> Option<uint> { SIZE_HINT(self) }\n+    pure fn each(blk: fn(v: &A) -> bool) { EACH(&self, blk) }\n+    pure fn size_hint() -> Option<uint> { SIZE_HINT(&self) }\n }\n \n impl<A> IMPL_T<A>: iter::ExtendedIter<A> {\n-    pure fn eachi(blk: fn(uint, v: &A) -> bool) { iter::eachi(self, blk) }\n+    pure fn eachi(blk: fn(uint, v: &A) -> bool) { iter::eachi(&self, blk) }\n     pure fn all(blk: fn(A) -> bool) -> bool { iter::all(self, blk) }\n     pure fn any(blk: fn(A) -> bool) -> bool { iter::any(self, blk) }\n     pure fn foldl<B>(+b0: B, blk: fn(B, A) -> B) -> B {\n@@ -24,8 +26,8 @@ impl<A> IMPL_T<A>: iter::ExtendedIter<A> {\n }\n \n impl<A: Eq> IMPL_T<A>: iter::EqIter<A> {\n-    pure fn contains(x: A) -> bool { iter::contains(self, x) }\n-    pure fn count(x: A) -> uint { iter::count(self, x) }\n+    pure fn contains(x: &A) -> bool { iter::contains(self, x) }\n+    pure fn count(x: &A) -> uint { iter::count(self, x) }\n }\n \n impl<A: Copy> IMPL_T<A>: iter::CopyableIter<A> {"}, {"sha": "1cf28f81dcc904674846193fab4d7ed2b63b9130", "filename": "src/libcore/iter-trait/dlist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdlist.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -8,7 +8,7 @@ type IMPL_T<A> = dlist::DList<A>;\n  * e.g. breadth-first search with in-place enqueues), but removing the current\n  * node is forbidden.\n  */\n-pure fn EACH<A>(self: IMPL_T<A>, f: fn(v: &A) -> bool) {\n+pure fn EACH<A>(self: &IMPL_T<A>, f: fn(v: &A) -> bool) {\n     let mut link = self.peek_n();\n     while option::is_some(&link) {\n         let nobe = option::get(&link);\n@@ -29,6 +29,6 @@ pure fn EACH<A>(self: IMPL_T<A>, f: fn(v: &A) -> bool) {\n     }\n }\n \n-pure fn SIZE_HINT<A>(self: IMPL_T<A>) -> Option<uint> {\n+pure fn SIZE_HINT<A>(self: &IMPL_T<A>) -> Option<uint> {\n     Some(self.len())\n }"}, {"sha": "049b13da265d4764a772b8b58fdbcdc0c9e2d81e", "filename": "src/libcore/iter-trait/dvec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Flibcore%2Fiter-trait%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Flibcore%2Fiter-trait%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdvec.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -6,7 +6,7 @@ type IMPL_T<A> = dvec::DVec<A>;\n  *\n  * Attempts to access this dvec during iteration will fail.\n  */\n-pure fn EACH<A>(self: IMPL_T<A>, f: fn(v: &A) -> bool) {\n+pure fn EACH<A>(self: &IMPL_T<A>, f: fn(v: &A) -> bool) {\n     unsafe {\n         do self.swap |v| {\n             v.each(f);\n@@ -15,6 +15,6 @@ pure fn EACH<A>(self: IMPL_T<A>, f: fn(v: &A) -> bool) {\n     }\n }\n \n-pure fn SIZE_HINT<A>(self: IMPL_T<A>) -> Option<uint> {\n+pure fn SIZE_HINT<A>(self: &IMPL_T<A>) -> Option<uint> {\n     Some(self.len())\n }"}, {"sha": "2f7f7a4be7b1ecbd181a2298f745bb480a05c4ff", "filename": "src/libcore/iter-trait/option.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Flibcore%2Fiter-trait%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Flibcore%2Fiter-trait%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Foption.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -1,16 +1,16 @@\n #[allow(non_camel_case_types)]\n type IMPL_T<A> = Option<A>;\n \n-pure fn EACH<A>(self: IMPL_T<A>, f: fn(v: &A) -> bool) {\n-    match self {\n+pure fn EACH<A>(self: &IMPL_T<A>, f: fn(v: &A) -> bool) {\n+    match *self {\n       None => (),\n       Some(ref a) => { f(a); }\n     }\n }\n \n-pure fn SIZE_HINT<A>(self: IMPL_T<A>) -> Option<uint> {\n-    match self {\n-      None => Some(0u),\n-      Some(_) => Some(1u)\n+pure fn SIZE_HINT<A>(self: &IMPL_T<A>) -> Option<uint> {\n+    match *self {\n+      None => Some(0),\n+      Some(_) => Some(1)\n     }\n }"}, {"sha": "dade851473b8d2ba2e5dc6174eef43eabc974079", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -23,8 +23,8 @@ trait ExtendedIter<A> {\n }\n \n trait EqIter<A:Eq> {\n-    pure fn contains(x: A) -> bool;\n-    pure fn count(x: A) -> uint;\n+    pure fn contains(x: &A) -> bool;\n+    pure fn count(x: &A) -> uint;\n }\n \n trait Times {\n@@ -66,11 +66,11 @@ trait Buildable<A> {\n                                 builder: fn(push: pure fn(+v: A))) -> self;\n }\n \n-pure fn eachi<A,IA:BaseIter<A>>(self: IA, blk: fn(uint, v: &A) -> bool) {\n-    let mut i = 0u;\n+pure fn eachi<A,IA:BaseIter<A>>(self: &IA, blk: fn(uint, v: &A) -> bool) {\n+    let mut i = 0;\n     for self.each |a| {\n         if !blk(i, a) { break; }\n-        i += 1u;\n+        i += 1;\n     }\n }\n \n@@ -130,17 +130,17 @@ pure fn to_vec<A:Copy,IA:BaseIter<A>>(self: IA) -> ~[A] {\n     foldl::<A,~[A],IA>(self, ~[], |r, a| vec::append(copy r, ~[a]))\n }\n \n-pure fn contains<A:Eq,IA:BaseIter<A>>(self: IA, x: A) -> bool {\n+pure fn contains<A:Eq,IA:BaseIter<A>>(self: IA, x: &A) -> bool {\n     for self.each |a| {\n-        if *a == x { return true; }\n+        if *a == *x { return true; }\n     }\n     return false;\n }\n \n-pure fn count<A:Eq,IA:BaseIter<A>>(self: IA, x: A) -> uint {\n-    do foldl(self, 0u) |count, value| {\n-        if value == x {\n-            count + 1u\n+pure fn count<A:Eq,IA:BaseIter<A>>(self: IA, x: &A) -> uint {\n+    do foldl(self, 0) |count, value| {\n+        if value == *x {\n+            count + 1\n         } else {\n             count\n         }"}, {"sha": "13fb22600452cff850fe9f24e0c97769d01b739b", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -377,7 +377,7 @@ fn unshift_char(s: &mut ~str, ch: char) {\n pure fn trim_left_chars(s: &str, chars_to_trim: &[char]) -> ~str {\n     if chars_to_trim.is_empty() { return from_slice(s); }\n \n-    match find(s, |c| !chars_to_trim.contains(c)) {\n+    match find(s, |c| !chars_to_trim.contains(&c)) {\n       None => ~\"\",\n       Some(first) => unsafe { raw::slice_bytes(s, first, s.len()) }\n     }\n@@ -395,7 +395,7 @@ pure fn trim_left_chars(s: &str, chars_to_trim: &[char]) -> ~str {\n pure fn trim_right_chars(s: &str, chars_to_trim: &[char]) -> ~str {\n     if chars_to_trim.is_empty() { return str::from_slice(s); }\n \n-    match rfind(s, |c| !chars_to_trim.contains(c)) {\n+    match rfind(s, |c| !chars_to_trim.contains(&c)) {\n       None => ~\"\",\n       Some(last) => {\n         let {next, _} = char_range_at(s, last);"}, {"sha": "7c5f242e8ba4e78bc9bb66e84cad0ca5eb94cd9c", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -1873,7 +1873,7 @@ impl<A> &[A]: iter::BaseIter<A> {\n }\n \n impl<A> &[A]: iter::ExtendedIter<A> {\n-    pure fn eachi(blk: fn(uint, v: &A) -> bool) { iter::eachi(self, blk) }\n+    pure fn eachi(blk: fn(uint, v: &A) -> bool) { iter::eachi(&self, blk) }\n     pure fn all(blk: fn(A) -> bool) -> bool { iter::all(self, blk) }\n     pure fn any(blk: fn(A) -> bool) -> bool { iter::any(self, blk) }\n     pure fn foldl<B>(+b0: B, blk: fn(B, A) -> B) -> B {\n@@ -1885,8 +1885,8 @@ impl<A> &[A]: iter::ExtendedIter<A> {\n }\n \n impl<A: Eq> &[A]: iter::EqIter<A> {\n-    pure fn contains(x: A) -> bool { iter::contains(self, x) }\n-    pure fn count(x: A) -> uint { iter::count(self, x) }\n+    pure fn contains(x: &A) -> bool { iter::contains(self, x) }\n+    pure fn count(x: &A) -> uint { iter::count(self, x) }\n }\n \n impl<A: Copy> &[A]: iter::CopyableIter<A> {"}, {"sha": "8116bd4fb309d0457fb6078dfe0203a144b6b4e6", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -524,7 +524,7 @@ fn get_authority(rawurl: &str) ->\n \n     let host_is_end_plus_one: &fn() -> bool = || {\n         end+1 == len\n-            && !['?', '#', '/'].contains(rawurl[end] as char)\n+            && !['?', '#', '/'].contains(&(rawurl[end] as char))\n     };\n \n     // finish up"}, {"sha": "0306d0dbb18910119865d03c461922b563d4a61b", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -140,12 +140,12 @@ fn run_compiler(args: ~[~str], demitter: diagnostic::emitter) {\n \n     let lint_flags = vec::append(getopts::opt_strs(matches, ~\"W\"),\n                                  getopts::opt_strs(matches, ~\"warn\"));\n-    if lint_flags.contains(~\"help\") {\n+    if lint_flags.contains(&~\"help\") {\n         describe_warnings();\n         return;\n     }\n \n-    if getopts::opt_strs(matches, ~\"Z\").contains(~\"help\") {\n+    if getopts::opt_strs(matches, ~\"Z\").contains(&~\"help\") {\n         describe_debug_flags();\n         return;\n     }"}, {"sha": "cedab91b04e87f78194f238e872c253b0ac6154a", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -204,7 +204,7 @@ impl check_loan_ctxt {\n                 let did = ast_util::def_id_of_def(def);\n                 let is_fn_arg =\n                     did.crate == ast::local_crate &&\n-                    (*self.fn_args).contains(did.node);\n+                    (*self.fn_args).contains(&(did.node));\n                 if is_fn_arg { return; } // case (a) above\n               }\n               ast::expr_fn_block(*) | ast::expr_fn(*) |\n@@ -251,7 +251,7 @@ impl check_loan_ctxt {\n             let def = self.tcx().def_map.get(expr.id);\n             let did = ast_util::def_id_of_def(def);\n             did.crate == ast::local_crate &&\n-                (*self.fn_args).contains(did.node)\n+                (*self.fn_args).contains(&(did.node))\n           }\n           ast::expr_fn_block(*) | ast::expr_fn(*) => {\n             self.is_stack_closure(expr.id)"}, {"sha": "32801ed760ce0f0c4662f9533a96557e99c1193f", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -275,7 +275,7 @@ fn missing_ctor(tcx: ty::ctxt, m: matrix, left_ty: ty::t) -> Option<ctor> {\n         let variants = ty::enum_variants(tcx, eid);\n         if found.len() != (*variants).len() {\n             for vec::each(*variants) |v| {\n-                if !found.contains(variant(v.id)) {\n+                if !found.contains(&(variant(v.id))) {\n                     return Some(variant(v.id));\n                 }\n             }"}, {"sha": "53bdf3db8687b8b95467b16317c9217a7565c73f", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -169,7 +169,7 @@ fn check_item_recursion(sess: session, ast_map: ast_map::map,\n     visitor.visit_item(it, env, visitor);\n \n     fn visit_item(it: @item, &&env: env, v: visit::vt<env>) {\n-        if (*env.idstack).contains(it.id) {\n+        if (*env.idstack).contains(&(it.id)) {\n             env.sess.span_fatal(env.root_it.span, ~\"recursive constant\");\n         }\n         (*env.idstack).push(it.id);"}, {"sha": "4f9045ec77ea0ee8f4834adddf7e380b8d523ede", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -199,13 +199,13 @@ fn check_fn(fk: visit::fn_kind, decl: fn_decl, body: blk, sp: span,\n             let id = ast_util::def_id_of_def(fv.def).node;\n \n             // skip over free variables that appear in the cap clause\n-            if captured_vars.contains(id) { loop; }\n+            if captured_vars.contains(&id) { loop; }\n \n             // if this is the last use of the variable, then it will be\n             // a move and not a copy\n             let is_move = {\n                 match cx.last_use_map.find(fn_id) {\n-                  Some(vars) => (*vars).contains(id),\n+                  Some(vars) => (*vars).contains(&id),\n                   None => false\n                 }\n             };\n@@ -588,7 +588,7 @@ fn check_cast_for_escaping_regions(\n     do ty::walk_ty(source_ty) |ty| {\n         match ty::get(ty).sty {\n           ty::ty_param(source_param) => {\n-            if target_params.contains(source_param) {\n+            if target_params.contains(&source_param) {\n                 /* case (2) */\n             } else {\n                 check_owned(cx.tcx, ty, source.span); /* case (3) */"}, {"sha": "4d291ceb590dc7c5d92d6b569b8564ca8b482d58", "filename": "src/rustc/middle/privacy.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fprivacy.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -56,7 +56,7 @@ fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n                             if method.vis == private &&\n                                     (impl_id.crate != local_crate ||\n                                      !privileged_items\n-                                     .contains(impl_id.node)) {\n+                                     .contains(&(impl_id.node))) {\n                                 tcx.sess.span_err(span,\n                                                   fmt!(\"method `%s` is \\\n                                                         private\",\n@@ -95,9 +95,9 @@ fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n                                     }\n                                     match methods[method_num] {\n                                         provided(method)\n-                                                if method.vis == private &&\n-                                                !privileged_items\n-                                                .contains(trait_id.node) => {\n+                                             if method.vis == private &&\n+                                             !privileged_items\n+                                             .contains(&(trait_id.node)) => {\n                                             tcx.sess.span_err(span,\n                                                               fmt!(\"method\n                                                                     `%s` \\\n@@ -157,7 +157,7 @@ fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n                     match ty::get(ty::expr_ty(tcx, base)).sty {\n                         ty_class(id, _)\n                         if id.crate != local_crate ||\n-                           !privileged_items.contains(id.node) => {\n+                           !privileged_items.contains(&(id.node)) => {\n                             match method_map.find(expr.id) {\n                                 None => {\n                                     debug!(\"(privacy checking) checking \\\n@@ -178,7 +178,7 @@ fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n                     match ty::get(ty::expr_ty(tcx, expr)).sty {\n                         ty_class(id, _) => {\n                             if id.crate != local_crate ||\n-                                    !privileged_items.contains(id.node) {\n+                                    !privileged_items.contains(&(id.node)) {\n                                 for fields.each |field| {\n                                         debug!(\"(privacy checking) checking \\\n                                                 field in struct literal\");\n@@ -205,7 +205,7 @@ fn check_crate(tcx: ty::ctxt, method_map: &method_map, crate: @ast::crate) {\n                     match ty::get(ty::pat_ty(tcx, pattern)).sty {\n                         ty_class(id, _) => {\n                             if id.crate != local_crate ||\n-                                    !privileged_items.contains(id.node) {\n+                                    !privileged_items.contains(&(id.node)) {\n                                 for fields.each |field| {\n                                         debug!(\"(privacy checking) checking \\\n                                                 struct pattern\");"}, {"sha": "ae1c739b26b0ec07b6def144db2f4d38e948ad5f", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -485,7 +485,7 @@ impl determine_rp_ctxt {\n             }\n         };\n         let dep = {ambient_variance: self.ambient_variance, id: self.item_id};\n-        if !vec.contains(dep) { vec.push(dep); }\n+        if !vec.contains(&dep) { vec.push(dep); }\n     }\n \n     // Determines whether a reference to a region that appears in the"}, {"sha": "17a1ff112cd988f8178378aba8aea3a58b7bc7e0", "filename": "src/rustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -813,7 +813,7 @@ fn trans_local_var(bcx: block, ref_id: ast::node_id, def: ast::def) -> Datum {\n                   nid: ast::node_id) -> Datum {\n         let is_last_use = match bcx.ccx().maps.last_use_map.find(ref_id) {\n             None => false,\n-            Some(vars) => (*vars).contains(nid)\n+            Some(vars) => (*vars).contains(&nid)\n         };\n \n         let source = if is_last_use {FromLastUseLvalue} else {FromLvalue};"}, {"sha": "d08d3e9b8478abbd7cb87f85beafd216763c3349", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -182,7 +182,7 @@ impl LookupContext {\n             ty_enum(did, _) => {\n                 // Watch out for newtype'd enums like \"enum t = @T\".\n                 // See discussion in typeck::check::do_autoderef().\n-                if enum_dids.contains(did) {\n+                if enum_dids.contains(&did) {\n                     return None;\n                 }\n                 enum_dids.push(did);"}, {"sha": "50ebef05afbec49ffbaba75d903021f3a4a133cd", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -5,7 +5,7 @@ use config::Config;\n \n fn main(args: ~[~str]) {\n \n-    if args.contains(~\"-h\") || args.contains(~\"--help\") {\n+    if args.contains(&~\"-h\") || args.contains(&~\"--help\") {\n         config::usage();\n         return;\n     }"}, {"sha": "2bbbbf7ef178c5ffa0ede988f288ffc4dfd6c0f2", "filename": "src/test/run-pass/early-vtbl-resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -9,7 +9,7 @@ fn foo_func<A, B: thing<A>>(x: B) -> Option<A> { x.foo() }\n \n fn main() {\n \n-    for iter::eachi(Some({a: 0})) |i, a| { \n+    for iter::eachi(&(Some({a: 0}))) |i, a| { \n         #debug[\"%u %d\", i, a.a];\n     }\n "}, {"sha": "6036b5b2d24b7ba6b2481cb5056f31efe795902e", "filename": "src/test/run-pass/iter-contains.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Ftest%2Frun-pass%2Fiter-contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Ftest%2Frun-pass%2Fiter-contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-contains.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -1,10 +1,10 @@\n fn main() {\n-    assert []/_.contains(22u) == false;\n-    assert [1u, 3u]/_.contains(22u) == false;\n-    assert [22u, 1u, 3u]/_.contains(22u) == true;\n-    assert [1u, 22u, 3u]/_.contains(22u) == true;\n-    assert [1u, 3u, 22u]/_.contains(22u) == true;\n-    assert None.contains(22u) == false;\n-    assert Some(1u).contains(22u) == false;\n-    assert Some(22u).contains(22u) == true;\n+    assert []/_.contains(&22u) == false;\n+    assert [1u, 3u]/_.contains(&22u) == false;\n+    assert [22u, 1u, 3u]/_.contains(&22u) == true;\n+    assert [1u, 22u, 3u]/_.contains(&22u) == true;\n+    assert [1u, 3u, 22u]/_.contains(&22u) == true;\n+    assert None.contains(&22u) == false;\n+    assert Some(1u).contains(&22u) == false;\n+    assert Some(22u).contains(&22u) == true;\n }"}, {"sha": "0b6f94367be3109b8d5b80dde0995570ea5c6bfd", "filename": "src/test/run-pass/iter-count.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e19e628b19af2921fc29818009496bc430640f76/src%2Ftest%2Frun-pass%2Fiter-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19e628b19af2921fc29818009496bc430640f76/src%2Ftest%2Frun-pass%2Fiter-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-count.rs?ref=e19e628b19af2921fc29818009496bc430640f76", "patch": "@@ -1,9 +1,9 @@\n fn main() {\n-    assert []/_.count(22u) == 0u;\n-    assert [1u, 3u]/_.count(22u) == 0u;\n-    assert [22u, 1u, 3u]/_.count(22u) == 1u;\n-    assert [22u, 1u, 22u]/_.count(22u) == 2u;\n-    assert None.count(22u) == 0u;\n-    assert Some(1u).count(22u) == 0u;\n-    assert Some(22u).count(22u) == 1u;\n+    assert []/_.count(&22u) == 0u;\n+    assert [1u, 3u]/_.count(&22u) == 0u;\n+    assert [22u, 1u, 3u]/_.count(&22u) == 1u;\n+    assert [22u, 1u, 22u]/_.count(&22u) == 2u;\n+    assert None.count(&22u) == 0u;\n+    assert Some(1u).count(&22u) == 0u;\n+    assert Some(22u).count(&22u) == 1u;\n }"}]}