{"sha": "abd747cd153c1ef3648831916017fb692200387d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZDc0N2NkMTUzYzFlZjM2NDg4MzE5MTYwMTdmYjY5MjIwMDM4N2Q=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-01T19:10:38Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-01T19:10:38Z"}, "message": "Rollup merge of #23847 - bcoopers:read_clarification, r=sfackler\n\nThis introduces no functional changes except for reducing a few unnecessary operations and variables.  Vec has the behavior that, if you request space past the capacity with reserve(), it will round up to the nearest power of 2.  What that effectively means is that after the first call to reserve(16), we are doubling our capacity every time.  So using the DEFAULT_BUF_SIZE and doubling cap_size() here is meaningless and has no effect on the call to reserve().\r\n\r\nNote that with #23842 implemented this will hopefully have a clearer API and less of a need for commenting.  If #23842 is not implemented then the most clear implementation would be to call reserve_exact(buf.capacity()) at every step (and making sure that buf.capacity() is not zero at the beginning of the function of course).\r\n\r\nEdit- functional change now introduced.  We will now zero 16 bytes of the vector first, then double to 32, then 64, etc. until we read 64kB.  This stops us from zeroing the entire vector when we double it, some of which may be wasted work.  Reallocation still follows the doubling strategy, but the responsibility has been moved to vec.extend(), which calls reserve() and push_back().", "tree": {"sha": "4bdf5661fc617f76443b4c56b78199674b5d6d60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bdf5661fc617f76443b4c56b78199674b5d6d60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abd747cd153c1ef3648831916017fb692200387d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abd747cd153c1ef3648831916017fb692200387d", "html_url": "https://github.com/rust-lang/rust/commit/abd747cd153c1ef3648831916017fb692200387d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abd747cd153c1ef3648831916017fb692200387d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d17e6eb1e181ef37cbb2d2df05bc84db7e4be8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d17e6eb1e181ef37cbb2d2df05bc84db7e4be8f", "html_url": "https://github.com/rust-lang/rust/commit/1d17e6eb1e181ef37cbb2d2df05bc84db7e4be8f"}, {"sha": "240734c31e529557583a0dc8e97abf858b4a375d", "url": "https://api.github.com/repos/rust-lang/rust/commits/240734c31e529557583a0dc8e97abf858b4a375d", "html_url": "https://github.com/rust-lang/rust/commit/240734c31e529557583a0dc8e97abf858b4a375d"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "c6335015d7251d67d73bd1cf5dc90ac03a57e31a", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/abd747cd153c1ef3648831916017fb692200387d/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abd747cd153c1ef3648831916017fb692200387d/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=abd747cd153c1ef3648831916017fb692200387d", "patch": "@@ -101,18 +101,14 @@ fn append_to_string<F>(buf: &mut String, f: F) -> Result<usize>\n fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize> {\n     let start_len = buf.len();\n     let mut len = start_len;\n-    let mut cap_bump = 16;\n+    let mut new_write_size = 16;\n     let ret;\n     loop {\n         if len == buf.len() {\n-            if buf.capacity() == buf.len() {\n-                if cap_bump < DEFAULT_BUF_SIZE {\n-                    cap_bump *= 2;\n-                }\n-                buf.reserve(cap_bump);\n+            if new_write_size < DEFAULT_BUF_SIZE {\n+                new_write_size *= 2;\n             }\n-            let new_area = buf.capacity() - buf.len();\n-            buf.extend(iter::repeat(0).take(new_area));\n+            buf.extend(iter::repeat(0).take(new_write_size));\n         }\n \n         match r.read(&mut buf[len..]) {"}]}