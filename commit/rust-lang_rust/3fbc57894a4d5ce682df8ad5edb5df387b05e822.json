{"sha": "3fbc57894a4d5ce682df8ad5edb5df387b05e822", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYmM1Nzg5NGE0ZDVjZTY4MmRmOGFkNWVkYjVkZjM4N2IwNWU4MjI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-20T17:04:57Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-04-22T16:06:56Z"}, "message": "rustc: de-@ param_substs.", "tree": {"sha": "7a3baaaa831d4107dae89e7d85e4755f9b388d91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a3baaaa831d4107dae89e7d85e4755f9b388d91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fbc57894a4d5ce682df8ad5edb5df387b05e822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fbc57894a4d5ce682df8ad5edb5df387b05e822", "html_url": "https://github.com/rust-lang/rust/commit/3fbc57894a4d5ce682df8ad5edb5df387b05e822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fbc57894a4d5ce682df8ad5edb5df387b05e822/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772", "html_url": "https://github.com/rust-lang/rust/commit/7b3d6afe0a1d7fb2c918e9ba1ed8c2d859c6e772"}], "stats": {"total": 126, "additions": 61, "deletions": 65}, "files": [{"sha": "086989f2874b4b0116d6b5c9cda62327658a8ee3", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 30, "deletions": 34, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=3fbc57894a4d5ce682df8ad5edb5df387b05e822", "patch": "@@ -1112,15 +1112,15 @@ pub fn new_fn_ctxt<'a>(ccx: &'a CrateContext,\n                        id: ast::NodeId,\n                        has_env: bool,\n                        output_type: ty::t,\n-                       param_substs: Option<@param_substs>,\n+                       param_substs: Option<&'a param_substs>,\n                        sp: Option<Span>,\n                        block_arena: &'a TypedArena<Block<'a>>)\n                        -> FunctionContext<'a> {\n     for p in param_substs.iter() { p.validate(); }\n \n     debug!(\"new_fn_ctxt(path={}, id={}, param_substs={})\",\n            if id == -1 { \"\".to_owned() } else { ccx.tcx.map.path_to_str(id) },\n-           id, param_substs.repr(ccx.tcx()));\n+           id, param_substs.map(|s| s.repr(ccx.tcx())));\n \n     let substd_output_type = match param_substs {\n         None => output_type,\n@@ -1166,11 +1166,9 @@ pub fn new_fn_ctxt<'a>(ccx: &'a CrateContext,\n \n /// Performs setup on a newly created function, creating the entry scope block\n /// and allocating space for the return pointer.\n-pub fn init_function<'a>(\n-                     fcx: &'a FunctionContext<'a>,\n-                     skip_retptr: bool,\n-                     output_type: ty::t,\n-                     param_substs: Option<@param_substs>) {\n+pub fn init_function<'a>(fcx: &'a FunctionContext<'a>,\n+                         skip_retptr: bool,\n+                         output_type: ty::t) {\n     let entry_bcx = fcx.new_temp_block(\"entry-block\");\n \n     *fcx.entry_bcx.borrow_mut() = Some(entry_bcx);\n@@ -1182,7 +1180,9 @@ pub fn init_function<'a>(\n         llvm::LLVMGetFirstInstruction(entry_bcx.llbb)\n     }));\n \n-    let substd_output_type = match param_substs {\n+    // This shouldn't need to recompute the return type,\n+    // as new_fn_ctxt did it already.\n+    let substd_output_type = match fcx.param_substs {\n         None => output_type,\n         Some(substs) => {\n             ty::subst_tps(fcx.ccx.tcx(),\n@@ -1329,7 +1329,7 @@ pub fn trans_closure(ccx: &CrateContext,\n                      decl: &ast::FnDecl,\n                      body: &ast::Block,\n                      llfndecl: ValueRef,\n-                     param_substs: Option<@param_substs>,\n+                     param_substs: Option<&param_substs>,\n                      id: ast::NodeId,\n                      _attributes: &[ast::Attribute],\n                      output_type: ty::t,\n@@ -1340,7 +1340,7 @@ pub fn trans_closure(ccx: &CrateContext,\n     set_uwtable(llfndecl);\n \n     debug!(\"trans_closure(..., param_substs={})\",\n-           param_substs.repr(ccx.tcx()));\n+           param_substs.map(|s| s.repr(ccx.tcx())));\n \n     let has_env = match ty::get(ty::node_id_to_type(ccx.tcx(), id)).sty {\n         ty::ty_closure(_) => true,\n@@ -1353,10 +1353,10 @@ pub fn trans_closure(ccx: &CrateContext,\n                           id,\n                           has_env,\n                           output_type,\n-                          param_substs,\n+                          param_substs.map(|s| &*s),\n                           Some(body.span),\n                           &arena);\n-    init_function(&fcx, false, output_type, param_substs);\n+    init_function(&fcx, false, output_type);\n \n     // cleanup scope for the incoming arguments\n     let arg_scope = fcx.push_custom_cleanup_scope();\n@@ -1429,11 +1429,11 @@ pub fn trans_fn(ccx: &CrateContext,\n                 decl: &ast::FnDecl,\n                 body: &ast::Block,\n                 llfndecl: ValueRef,\n-                param_substs: Option<@param_substs>,\n+                param_substs: Option<&param_substs>,\n                 id: ast::NodeId,\n                 attrs: &[ast::Attribute]) {\n     let _s = StatRecorder::new(ccx, ccx.tcx.map.path_to_str(id));\n-    debug!(\"trans_fn(param_substs={})\", param_substs.repr(ccx.tcx()));\n+    debug!(\"trans_fn(param_substs={})\", param_substs.map(|s| s.repr(ccx.tcx())));\n     let _icx = push_ctxt(\"trans_fn\");\n     let output_type = ty::ty_fn_ret(ty::node_id_to_type(ccx.tcx(), id));\n     trans_closure(ccx, decl, body, llfndecl,\n@@ -1445,7 +1445,7 @@ pub fn trans_enum_variant(ccx: &CrateContext,\n                           variant: &ast::Variant,\n                           _args: &[ast::VariantArg],\n                           disr: ty::Disr,\n-                          param_substs: Option<@param_substs>,\n+                          param_substs: Option<&param_substs>,\n                           llfndecl: ValueRef) {\n     let _icx = push_ctxt(\"trans_enum_variant\");\n \n@@ -1460,7 +1460,7 @@ pub fn trans_enum_variant(ccx: &CrateContext,\n pub fn trans_tuple_struct(ccx: &CrateContext,\n                           _fields: &[ast::StructField],\n                           ctor_id: ast::NodeId,\n-                          param_substs: Option<@param_substs>,\n+                          param_substs: Option<&param_substs>,\n                           llfndecl: ValueRef) {\n     let _icx = push_ctxt(\"trans_tuple_struct\");\n \n@@ -1475,24 +1475,20 @@ pub fn trans_tuple_struct(ccx: &CrateContext,\n fn trans_enum_variant_or_tuple_like_struct(ccx: &CrateContext,\n                                            ctor_id: ast::NodeId,\n                                            disr: ty::Disr,\n-                                           param_substs: Option<@param_substs>,\n+                                           param_substs: Option<&param_substs>,\n                                            llfndecl: ValueRef) {\n-    let no_substs: &[ty::t] = [];\n-    let ty_param_substs = match param_substs {\n-        Some(ref substs) => {\n-            let v: &[ty::t] = substs.tys.as_slice();\n-            v\n-        }\n-        None => {\n-            let v: &[ty::t] = no_substs;\n-            v\n-        }\n-    };\n+    let ctor_ty = {\n+        let no_substs: &[ty::t] = [];\n+        let ty_param_substs: &[ty::t] = match param_substs {\n+            Some(substs) => substs.tys.as_slice(),\n+            None => no_substs\n+        };\n \n-    let ctor_ty = ty::subst_tps(ccx.tcx(),\n-                                ty_param_substs,\n-                                None,\n-                                ty::node_id_to_type(ccx.tcx(), ctor_id));\n+        ty::subst_tps(ccx.tcx(),\n+                      ty_param_substs,\n+                      None,\n+                      ty::node_id_to_type(ccx.tcx(), ctor_id))\n+    };\n \n     let result_ty = match ty::get(ctor_ty).sty {\n         ty::ty_bare_fn(ref bft) => bft.sig.output,\n@@ -1504,8 +1500,8 @@ fn trans_enum_variant_or_tuple_like_struct(ccx: &CrateContext,\n \n     let arena = TypedArena::new();\n     let fcx = new_fn_ctxt(ccx, llfndecl, ctor_id, false, result_ty,\n-                          param_substs, None, &arena);\n-    init_function(&fcx, false, result_ty, param_substs);\n+                          param_substs.map(|s| &*s), None, &arena);\n+    init_function(&fcx, false, result_ty);\n \n     let arg_tys = ty::ty_fn_args(ctor_ty);\n "}, {"sha": "05636666f9ca3dfd1b71877d29d04389bc2d302b", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=3fbc57894a4d5ce682df8ad5edb5df387b05e822", "patch": "@@ -203,15 +203,15 @@ fn resolve_default_method_vtables(bcx: &Block,\n \n     // Build up a param_substs that we are going to resolve the\n     // trait_vtables under.\n-    let param_substs = Some(@param_substs {\n+    let param_substs = param_substs {\n         tys: substs.tps.clone(),\n         self_ty: substs.self_ty,\n         vtables: impl_vtables.clone(),\n         self_vtables: None\n-    });\n+    };\n \n     let mut param_vtables = resolve_vtables_under_param_substs(\n-        bcx.tcx(), param_substs, impl_res.trait_vtables.as_slice());\n+        bcx.tcx(), Some(&param_substs), impl_res.trait_vtables.as_slice());\n \n     // Now we pull any vtables for parameters on the actual method.\n     let num_method_vtables = method.generics.type_param_defs().len();\n@@ -231,7 +231,7 @@ fn resolve_default_method_vtables(bcx: &Block,\n     }\n \n     let self_vtables = resolve_param_vtables_under_param_substs(\n-        bcx.tcx(), param_substs, impl_res.self_vtables.as_slice());\n+        bcx.tcx(), Some(&param_substs), impl_res.self_vtables.as_slice());\n \n     (param_vtables, self_vtables)\n }"}, {"sha": "df17fb516a7e72d3bf2c10668bea1267462ed744", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=3fbc57894a4d5ce682df8ad5edb5df387b05e822", "patch": "@@ -466,7 +466,7 @@ pub fn get_wrapper_for_bare_fn(ccx: &CrateContext,\n \n     let arena = TypedArena::new();\n     let fcx = new_fn_ctxt(ccx, llfn, -1, true, f.sig.output, None, None, &arena);\n-    init_function(&fcx, true, f.sig.output, None);\n+    init_function(&fcx, true, f.sig.output);\n     let bcx = fcx.entry_bcx.borrow().clone().unwrap();\n \n     let args = create_datums_for_fn_args(&fcx,"}, {"sha": "d3f140fdd7020e4b563d35d4b6eb91825201c9e7", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=3fbc57894a4d5ce682df8ad5edb5df387b05e822", "patch": "@@ -274,7 +274,7 @@ pub struct FunctionContext<'a> {\n \n     // If this function is being monomorphized, this contains the type\n     // substitutions used.\n-    pub param_substs: Option<@param_substs>,\n+    pub param_substs: Option<&'a param_substs>,\n \n     // The source span and nesting context where this function comes from, for\n     // error reporting and symbol generation.\n@@ -688,7 +688,7 @@ pub fn is_null(val: ValueRef) -> bool {\n \n pub fn monomorphize_type(bcx: &Block, t: ty::t) -> ty::t {\n     match bcx.fcx.param_substs {\n-        Some(substs) => {\n+        Some(ref substs) => {\n             ty::subst_tps(bcx.tcx(), substs.tys.as_slice(), substs.self_ty, t)\n         }\n         _ => {\n@@ -742,12 +742,12 @@ pub fn node_id_type_params(bcx: &Block, node: ExprOrMethodCall) -> Vec<ty::t> {\n     }\n \n     match bcx.fcx.param_substs {\n-      Some(substs) => {\n-        params.iter().map(|t| {\n-            ty::subst_tps(tcx, substs.tys.as_slice(), substs.self_ty, *t)\n-        }).collect()\n-      }\n-      _ => params\n+        Some(ref substs) => {\n+            params.iter().map(|t| {\n+                ty::subst_tps(tcx, substs.tys.as_slice(), substs.self_ty, *t)\n+            }).collect()\n+        }\n+        _ => params\n     }\n }\n \n@@ -769,7 +769,7 @@ pub fn resolve_vtables_in_fn_ctxt(fcx: &FunctionContext,\n }\n \n pub fn resolve_vtables_under_param_substs(tcx: &ty::ctxt,\n-                                          param_substs: Option<@param_substs>,\n+                                          param_substs: Option<&param_substs>,\n                                           vts: &[typeck::vtable_param_res])\n                                           -> typeck::vtable_res {\n     vts.iter().map(|ds| {\n@@ -781,7 +781,7 @@ pub fn resolve_vtables_under_param_substs(tcx: &ty::ctxt,\n \n pub fn resolve_param_vtables_under_param_substs(\n     tcx: &ty::ctxt,\n-    param_substs: Option<@param_substs>,\n+    param_substs: Option<&param_substs>,\n     ds: &[typeck::vtable_origin])\n     -> typeck::vtable_param_res {\n     ds.iter().map(|d| {\n@@ -794,7 +794,7 @@ pub fn resolve_param_vtables_under_param_substs(\n \n \n pub fn resolve_vtable_under_param_substs(tcx: &ty::ctxt,\n-                                         param_substs: Option<@param_substs>,\n+                                         param_substs: Option<&param_substs>,\n                                          vt: &typeck::vtable_origin)\n                                          -> typeck::vtable_origin {\n     match *vt {"}, {"sha": "ffab654e964ee4a9a059481faf9489451cfe0201", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=3fbc57894a4d5ce682df8ad5edb5df387b05e822", "patch": "@@ -609,7 +609,7 @@ pub fn start_emitting_source_locations(fcx: &FunctionContext) {\n /// indicates why no debuginfo should be created for the function.\n pub fn create_function_debug_context(cx: &CrateContext,\n                                      fn_ast_id: ast::NodeId,\n-                                     param_substs: Option<@param_substs>,\n+                                     param_substs: Option<&param_substs>,\n                                      llfn: ValueRef) -> FunctionDebugContext {\n     if cx.sess().opts.debuginfo == NoDebugInfo {\n         return FunctionDebugContext { repr: DebugInfoDisabled };\n@@ -775,7 +775,7 @@ pub fn create_function_debug_context(cx: &CrateContext,\n     fn get_function_signature(cx: &CrateContext,\n                               fn_ast_id: ast::NodeId,\n                               fn_decl: &ast::FnDecl,\n-                              param_substs: Option<@param_substs>,\n+                              param_substs: Option<&param_substs>,\n                               error_span: Span) -> DIArray {\n         if cx.sess().opts.debuginfo == LimitedDebugInfo {\n             return create_DIArray(DIB(cx), []);\n@@ -828,7 +828,7 @@ pub fn create_function_debug_context(cx: &CrateContext,\n \n     fn get_template_parameters(cx: &CrateContext,\n                                generics: &ast::Generics,\n-                               param_substs: Option<@param_substs>,\n+                               param_substs: Option<&param_substs>,\n                                file_metadata: DIFile,\n                                name_to_append_suffix_to: &mut StrBuf)\n                                -> DIArray {"}, {"sha": "6414322c3ec321561d20ed72f73f0997e6d287de", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=3fbc57894a4d5ce682df8ad5edb5df387b05e822", "patch": "@@ -466,7 +466,7 @@ fn make_generic_glue(ccx: &CrateContext,\n     let arena = TypedArena::new();\n     let fcx = new_fn_ctxt(ccx, llfn, -1, false, ty::mk_nil(), None, None, &arena);\n \n-    init_function(&fcx, false, ty::mk_nil(), None);\n+    init_function(&fcx, false, ty::mk_nil());\n \n     lib::llvm::SetLinkage(llfn, lib::llvm::InternalLinkage);\n     ccx.stats.n_glues_created.set(ccx.stats.n_glues_created.get() + 1u);"}, {"sha": "dc5946201f3f882ddddaa852c9fa5424a15f6fc4", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=3fbc57894a4d5ce682df8ad5edb5df387b05e822", "patch": "@@ -85,7 +85,7 @@ pub fn get_simple_intrinsic(ccx: &CrateContext, item: &ast::ForeignItem) -> Opti\n pub fn trans_intrinsic(ccx: &CrateContext,\n                        decl: ValueRef,\n                        item: &ast::ForeignItem,\n-                       substs: @param_substs,\n+                       substs: &param_substs,\n                        ref_id: Option<ast::NodeId>) {\n     debug!(\"trans_intrinsic(item.ident={})\", token::get_ident(item.ident));\n \n@@ -194,8 +194,8 @@ pub fn trans_intrinsic(ccx: &CrateContext,\n \n     let arena = TypedArena::new();\n     let fcx = new_fn_ctxt(ccx, decl, item.id, false, output_type,\n-                          Some(substs), Some(item.span), &arena);\n-    init_function(&fcx, true, output_type, Some(substs));\n+                          Some(&*substs), Some(item.span), &arena);\n+    init_function(&fcx, true, output_type);\n \n     set_always_inline(fcx.llfn);\n "}, {"sha": "7a026c2b45d62e802ed25c64e5c5264dbfef9f2d", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=3fbc57894a4d5ce682df8ad5edb5df387b05e822", "patch": "@@ -84,7 +84,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n         None => ()\n     }\n \n-    let psubsts = @param_substs {\n+    let psubsts = param_substs {\n         tys: real_substs.tps.clone(),\n         vtables: vtables,\n         self_ty: real_substs.self_ty.clone(),\n@@ -221,7 +221,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n               } => {\n                   let d = mk_lldecl();\n                   set_llvm_fn_attrs(i.attrs.as_slice(), d);\n-                  trans_fn(ccx, decl, body, d, Some(psubsts), fn_id.node, []);\n+                  trans_fn(ccx, decl, body, d, Some(&psubsts), fn_id.node, []);\n                   d\n               }\n               _ => {\n@@ -235,7 +235,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n                 Some(decl) => decl,\n                 None => {\n                     let d = mk_lldecl();\n-                    intrinsic::trans_intrinsic(ccx, d, i, psubsts, ref_id);\n+                    intrinsic::trans_intrinsic(ccx, d, i, &psubsts, ref_id);\n                     d\n                 }\n             }\n@@ -253,7 +253,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n                                        v,\n                                        args.as_slice(),\n                                        this_tv.disr_val,\n-                                       Some(psubsts),\n+                                       Some(&psubsts),\n                                        d);\n                 }\n                 ast::StructVariantKind(_) =>\n@@ -264,15 +264,15 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n         ast_map::NodeMethod(mth) => {\n             let d = mk_lldecl();\n             set_llvm_fn_attrs(mth.attrs.as_slice(), d);\n-            trans_fn(ccx, mth.decl, mth.body, d, Some(psubsts), mth.id, []);\n+            trans_fn(ccx, mth.decl, mth.body, d, Some(&psubsts), mth.id, []);\n             d\n         }\n         ast_map::NodeTraitMethod(method) => {\n             match *method {\n                 ast::Provided(mth) => {\n                     let d = mk_lldecl();\n                     set_llvm_fn_attrs(mth.attrs.as_slice(), d);\n-                    trans_fn(ccx, mth.decl, mth.body, d, Some(psubsts), mth.id, []);\n+                    trans_fn(ccx, mth.decl, mth.body, d, Some(&psubsts), mth.id, []);\n                     d\n                 }\n                 _ => {\n@@ -288,7 +288,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n                                      struct_def.fields.as_slice(),\n                                      struct_def.ctor_id.expect(\"ast-mapped tuple struct \\\n                                                                 didn't have a ctor id\"),\n-                                     Some(psubsts),\n+                                     Some(&psubsts),\n                                      d);\n             d\n         }"}, {"sha": "1ccdecfaaf420d48b5546baa7430d0545ce6753f", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fbc57894a4d5ce682df8ad5edb5df387b05e822/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=3fbc57894a4d5ce682df8ad5edb5df387b05e822", "patch": "@@ -307,7 +307,7 @@ impl<'a> Reflector<'a> {\n                 let arena = TypedArena::new();\n                 let fcx = new_fn_ctxt(ccx, llfdecl, -1, false,\n                                       ty::mk_u64(), None, None, &arena);\n-                init_function(&fcx, false, ty::mk_u64(), None);\n+                init_function(&fcx, false, ty::mk_u64());\n \n                 let arg = unsafe {\n                     //"}]}