{"sha": "206d4f00dc628cf0c7680ae2dc5b3ab6771c32e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNmQ0ZjAwZGM2MjhjZjBjNzY4MGFlMmRjNWIzYWI2NzcxYzMyZTQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-27T14:01:21Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-27T14:20:42Z"}, "message": "Convert vec::retain to a method.", "tree": {"sha": "f71add3cb10985b3422f831806e1eb8bd17d4a6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f71add3cb10985b3422f831806e1eb8bd17d4a6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/206d4f00dc628cf0c7680ae2dc5b3ab6771c32e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/206d4f00dc628cf0c7680ae2dc5b3ab6771c32e4", "html_url": "https://github.com/rust-lang/rust/commit/206d4f00dc628cf0c7680ae2dc5b3ab6771c32e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/206d4f00dc628cf0c7680ae2dc5b3ab6771c32e4/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4470d14388b1637a1e4862c0650baddf6ed7c430", "url": "https://api.github.com/repos/rust-lang/rust/commits/4470d14388b1637a1e4862c0650baddf6ed7c430", "html_url": "https://github.com/rust-lang/rust/commit/4470d14388b1637a1e4862c0650baddf6ed7c430"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "65c394f032c57ccf8b45e274312e540db108a1c2", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/206d4f00dc628cf0c7680ae2dc5b3ab6771c32e4/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/206d4f00dc628cf0c7680ae2dc5b3ab6771c32e4/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=206d4f00dc628cf0c7680ae2dc5b3ab6771c32e4", "patch": "@@ -687,26 +687,6 @@ pub fn filtered<T:Copy>(v: &[T], f: &fn(t: &T) -> bool) -> ~[T] {\n     result\n }\n \n-/**\n- * Like `filter()`, but in place.  Preserves order of `v`.  Linear time.\n- */\n-pub fn retain<T>(v: &mut ~[T], f: &fn(t: &T) -> bool) {\n-    let len = v.len();\n-    let mut deleted: uint = 0;\n-\n-    for uint::range(0, len) |i| {\n-        if !f(&v[i]) {\n-            deleted += 1;\n-        } else if deleted > 0 {\n-            swap(*v, i - deleted, i);\n-        }\n-    }\n-\n-    if deleted > 0 {\n-        v.truncate(len - deleted);\n-    }\n-}\n-\n /// Flattens a vector of vectors of T into a single vector of T.\n pub fn concat<T:Copy>(v: &[~[T]]) -> ~[T] { v.concat_vec() }\n \n@@ -1820,9 +1800,25 @@ impl<T> OwnedVector<T> for ~[T] {\n         unsafe { raw::set_len(self, newlen); }\n     }\n \n-    #[inline]\n+\n+    /**\n+     * Like `filter()`, but in place.  Preserves order of `v`.  Linear time.\n+     */\n     fn retain(&mut self, f: &fn(t: &T) -> bool) {\n-        retain(self, f);\n+        let len = self.len();\n+        let mut deleted: uint = 0;\n+\n+        for uint::range(0, len) |i| {\n+            if !f(&self[i]) {\n+                deleted += 1;\n+            } else if deleted > 0 {\n+                swap(*self, i - deleted, i);\n+            }\n+        }\n+\n+        if deleted > 0 {\n+            self.truncate(len - deleted);\n+        }\n     }\n \n     #[inline]"}]}