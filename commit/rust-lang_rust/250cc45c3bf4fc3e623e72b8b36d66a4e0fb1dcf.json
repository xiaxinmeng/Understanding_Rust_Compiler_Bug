{"sha": "250cc45c3bf4fc3e623e72b8b36d66a4e0fb1dcf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1MGNjNDVjM2JmNGZjM2U2MjNlNzJiOGIzNmQ2NmE0ZTBmYjFkY2Y=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-18T04:48:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-18T20:09:49Z"}, "message": "Remove oldvecs from runtime command line processing", "tree": {"sha": "90fec5ec67f8c29d90b339c5b34600334aad510d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90fec5ec67f8c29d90b339c5b34600334aad510d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/250cc45c3bf4fc3e623e72b8b36d66a4e0fb1dcf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/250cc45c3bf4fc3e623e72b8b36d66a4e0fb1dcf", "html_url": "https://github.com/rust-lang/rust/commit/250cc45c3bf4fc3e623e72b8b36d66a4e0fb1dcf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/250cc45c3bf4fc3e623e72b8b36d66a4e0fb1dcf/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a8bffceb3ba25b12926bbd42ed3d282f573c9a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8bffceb3ba25b12926bbd42ed3d282f573c9a0", "html_url": "https://github.com/rust-lang/rust/commit/0a8bffceb3ba25b12926bbd42ed3d282f573c9a0"}], "stats": {"total": 49, "additions": 19, "deletions": 30}, "files": [{"sha": "9522ca2a95de829ceb8fed7d30cbbdd7f1713fd4", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/250cc45c3bf4fc3e623e72b8b36d66a4e0fb1dcf/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/250cc45c3bf4fc3e623e72b8b36d66a4e0fb1dcf/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=250cc45c3bf4fc3e623e72b8b36d66a4e0fb1dcf", "patch": "@@ -7,19 +7,18 @@ command_line_args : public kernel_owned<command_line_args>\n     rust_task *task;\n     int argc;\n     char **argv;\n+    rust_str **strs;\n \n-    // vec[str] passed to rust_task::start.\n-    rust_vec *args;\n-    rust_ivec *args_ivec;\n+    // [str] passed to rust_task::start.\n+    rust_ivec *args;\n \n     command_line_args(rust_task *task,\n                       int sys_argc,\n                       char **sys_argv)\n         : kernel(task->kernel),\n           task(task),\n           argc(sys_argc),\n-          argv(sys_argv),\n-          args(NULL)\n+          argv(sys_argv)\n     {\n #if defined(__WIN32__)\n         LPCWSTR cmdline = GetCommandLineW();\n@@ -40,10 +39,9 @@ command_line_args : public kernel_owned<command_line_args>\n         LocalFree(wargv);\n #endif\n         size_t vec_fill = sizeof(rust_str *) * argc;\n-        size_t vec_alloc = next_power_of_two(sizeof(rust_vec) + vec_fill);\n+        size_t vec_alloc = next_power_of_two(vec_fill);\n         void *mem = kernel->malloc(vec_alloc, \"command line\");\n-        args = new (mem) rust_vec(vec_alloc, 0, NULL);\n-        rust_str **strs = (rust_str**) &args->data[0];\n+        strs = (rust_str**) mem;\n         for (int i = 0; i < argc; ++i) {\n             size_t str_fill = strlen(argv[i]) + 1;\n             size_t str_alloc = next_power_of_two(sizeof(rust_str) + str_fill);\n@@ -52,38 +50,29 @@ command_line_args : public kernel_owned<command_line_args>\n                                          (uint8_t const *)argv[i]);\n             strs[i]->ref_count++;\n         }\n-        args->fill = vec_fill;\n-        // If the caller has a declared args array, they may drop; but\n-        // we don't know if they have such an array. So we pin the args\n-        // array here to ensure it survives to program-shutdown.\n-        args->ref();\n \n         size_t ivec_interior_sz =\n             sizeof(size_t) * 2 + sizeof(rust_str *) * 4;\n-        args_ivec = (rust_ivec *)\n+        args = (rust_ivec *)\n             kernel->malloc(ivec_interior_sz,\n                            \"command line arg interior\");\n-        args_ivec->fill = 0;\n+        args->fill = 0;\n         size_t ivec_exterior_sz = sizeof(rust_str *) * argc;\n-        args_ivec->alloc = ivec_exterior_sz;\n-        // NB: This is freed by some ivec machinery, probably the drop\n-        // glue in main, so we don't free it ourselves\n-        args_ivec->payload.ptr = (rust_ivec_heap *)\n+        args->alloc = ivec_exterior_sz;\n+        // NB: _rust_main owns the ivec payload and will be responsible for\n+        // freeing it\n+        args->payload.ptr = (rust_ivec_heap *)\n             kernel->malloc(ivec_exterior_sz + sizeof(size_t),\n                            \"command line arg exterior\");\n-        args_ivec->payload.ptr->fill = ivec_exterior_sz;\n-        memcpy(&args_ivec->payload.ptr->data, strs, ivec_exterior_sz);\n+        args->payload.ptr->fill = ivec_exterior_sz;\n+        memcpy(&args->payload.ptr->data, strs, ivec_exterior_sz);\n     }\n \n     ~command_line_args() {\n-        kernel->free(args_ivec);\n-        if (args) {\n-            // Drop the args we've had pinned here.\n-            rust_str **strs = (rust_str**) &args->data[0];\n-            for (int i = 0; i < argc; ++i)\n-                kernel->free(strs[i]);\n-            kernel->free(args);\n-        }\n+        kernel->free(args);\n+        for (int i = 0; i < argc; ++i)\n+            kernel->free(strs[i]);\n+        kernel->free(strs);\n \n #ifdef __WIN32__\n         for (int i = 0; i < argc; ++i) {\n@@ -127,7 +116,7 @@ rust_start(uintptr_t main_fn, int argc, char **argv,\n         DLOG(sched, dom, \"startup: arg[%d] = '%s'\", i, args->argv[i]);\n     }\n \n-    root_task->start(main_fn, (uintptr_t)args->args_ivec);\n+    root_task->start(main_fn, (uintptr_t)args->args);\n     root_task->deref();\n     root_task = NULL;\n "}]}