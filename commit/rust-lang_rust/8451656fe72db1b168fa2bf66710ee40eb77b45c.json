{"sha": "8451656fe72db1b168fa2bf66710ee40eb77b45c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NTE2NTZmZTcyZGIxYjE2OGZhMmJmNjY3MTBlZTQwZWI3N2I0NWM=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-01-23T21:31:43Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-01-23T21:33:19Z"}, "message": "Fix maximum SIMD lane count, and expose it to other crates.  Disallow SIMD vectors with non-power-of-two lengths.", "tree": {"sha": "102b4c0b3d04b2b70c5fcb8f48eb17cd9613dd1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/102b4c0b3d04b2b70c5fcb8f48eb17cd9613dd1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8451656fe72db1b168fa2bf66710ee40eb77b45c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8451656fe72db1b168fa2bf66710ee40eb77b45c", "html_url": "https://github.com/rust-lang/rust/commit/8451656fe72db1b168fa2bf66710ee40eb77b45c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8451656fe72db1b168fa2bf66710ee40eb77b45c/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0", "html_url": "https://github.com/rust-lang/rust/commit/07db2bfe395a2787376c3cf068bbfe9e1e2eb4d0"}], "stats": {"total": 317, "additions": 148, "deletions": 169}, "files": [{"sha": "aea640645fff60949ff4259bde6b4faa38e0272c", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -165,6 +165,13 @@ pub const FAT_PTR_ADDR: usize = 0;\n /// - For a slice, this is the length.\n pub const FAT_PTR_EXTRA: usize = 1;\n \n+/// The maximum supported number of lanes in a SIMD vector.\n+///\n+/// This value is selected based on backend support:\n+/// * LLVM does not appear to have a vector width limit.\n+/// * Cranelift stores the base-2 log of the lane count in a 4 bit integer.\n+pub const MAX_SIMD_LANES: u64 = 1 << 0xF;\n+\n #[derive(Copy, Clone, Debug, TyEncodable, TyDecodable)]\n pub enum LayoutError<'tcx> {\n     Unknown(Ty<'tcx>),\n@@ -700,10 +707,15 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 // Can't be caught in typeck if the array length is generic.\n                 if e_len == 0 {\n                     tcx.sess.fatal(&format!(\"monomorphising SIMD type `{}` of zero length\", ty));\n-                } else if e_len > 65536 {\n+                } else if !e_len.is_power_of_two() {\n                     tcx.sess.fatal(&format!(\n-                        \"monomorphising SIMD type `{}` of length greater than 65536\",\n-                        ty,\n+                        \"monomorphising SIMD type `{}` of non-power-of-two length\",\n+                        ty\n+                    ));\n+                } else if e_len > MAX_SIMD_LANES {\n+                    tcx.sess.fatal(&format!(\n+                        \"monomorphising SIMD type `{}` of length greater than {}\",\n+                        ty, MAX_SIMD_LANES,\n                     ));\n                 }\n "}, {"sha": "f86bb8eb8c9dc6ce602efc282c9ed4481d46e983", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -12,6 +12,7 @@ use rustc_hir::{ItemKind, Node};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{RegionVariableOrigin, TyCtxtInferExt};\n use rustc_middle::ty::fold::TypeFoldable;\n+use rustc_middle::ty::layout::MAX_SIMD_LANES;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt, Representability};\n use rustc_middle::ty::{self, ParamEnv, RegionKind, ToPredicate, Ty, TyCtxt};\n@@ -1108,12 +1109,22 @@ pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: LocalDefId) {\n                 if len == 0 {\n                     struct_span_err!(tcx.sess, sp, E0075, \"SIMD vector cannot be empty\").emit();\n                     return;\n-                } else if len > 65536 {\n+                } else if !len.is_power_of_two() {\n                     struct_span_err!(\n                         tcx.sess,\n                         sp,\n                         E0075,\n-                        \"SIMD vector cannot have more than 65536 elements\"\n+                        \"SIMD vector length must be a power of two\"\n+                    )\n+                    .emit();\n+                    return;\n+                } else if len > MAX_SIMD_LANES {\n+                    struct_span_err!(\n+                        tcx.sess,\n+                        sp,\n+                        E0075,\n+                        \"SIMD vector cannot have more than {} elements\",\n+                        MAX_SIMD_LANES,\n                     )\n                     .emit();\n                     return;"}, {"sha": "9e5cb0d4eb1f83156d9b10f98974661a4a7d20bd", "filename": "src/test/ui/consts/const-eval/simd/insert_extract.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract.rs?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -8,7 +8,7 @@\n \n #[repr(simd)] struct i8x1(i8);\n #[repr(simd)] struct u16x2(u16, u16);\n-#[repr(simd)] struct f32x3(f32, f32, f32);\n+#[repr(simd)] struct f32x4(f32, f32, f32, f32);\n \n extern \"platform-intrinsic\" {\n     #[rustc_const_stable(feature = \"foo\", since = \"1.3.37\")]\n@@ -39,19 +39,23 @@ fn main() {\n         assert_eq!(Y1, 42);\n     }\n     {\n-        const U: f32x3 = f32x3(13., 14., 15.);\n-        const V: f32x3 = unsafe { simd_insert(U, 1_u32, 42_f32) };\n+        const U: f32x4 = f32x4(13., 14., 15., 16.);\n+        const V: f32x4 = unsafe { simd_insert(U, 1_u32, 42_f32) };\n         const X0: f32 = V.0;\n         const X1: f32 = V.1;\n         const X2: f32 = V.2;\n+        const X3: f32 = V.3;\n         const Y0: f32 = unsafe { simd_extract(V, 0) };\n         const Y1: f32 = unsafe { simd_extract(V, 1) };\n         const Y2: f32 = unsafe { simd_extract(V, 2) };\n+        const Y3: f32 = unsafe { simd_extract(V, 3) };\n         assert_eq!(X0, 13.);\n         assert_eq!(X1, 42.);\n         assert_eq!(X2, 15.);\n+        assert_eq!(X3, 16.);\n         assert_eq!(Y0, 13.);\n         assert_eq!(Y1, 42.);\n         assert_eq!(Y2, 15.);\n+        assert_eq!(Y3, 16.);\n     }\n }"}, {"sha": "49cfbab9a3e6fdd42411d0683085e4b60d7d4473", "filename": "src/test/ui/issues/issue-17170.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fissues%2Fissue-17170.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fissues%2Fissue-17170.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17170.rs?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -1,8 +1,8 @@\n-// run-pass\n #![feature(repr_simd)]\n \n #[repr(simd)]\n struct T(f64, f64, f64);\n+//~^ ERROR SIMD vector length must be a power of two\n \n static X: T = T(0.0, 0.0, 0.0);\n "}, {"sha": "b35c3c4dc980d7ffcb076322f5b7b39f84b7f14b", "filename": "src/test/ui/issues/issue-17170.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fissues%2Fissue-17170.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fissues%2Fissue-17170.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17170.stderr?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -0,0 +1,11 @@\n+error[E0075]: SIMD vector length must be a power of two\n+  --> $DIR/issue-17170.rs:4:1\n+   |\n+LL | struct T(f64, f64, f64);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: monomorphising SIMD type `T` of non-power-of-two length\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0075`."}, {"sha": "7d5969265121caa0cf8c6ff6b2086f9d0a8a7ce9", "filename": "src/test/ui/issues/issue-39720.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fissues%2Fissue-39720.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fissues%2Fissue-39720.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39720.rs?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -1,15 +1,16 @@\n-// run-pass\n // ignore-emscripten FIXME(#45351)\n \n #![feature(repr_simd, platform_intrinsics)]\n \n #[repr(simd)]\n #[derive(Copy, Clone, Debug)]\n pub struct Char3(pub i8, pub i8, pub i8);\n+//~^ ERROR SIMD vector length must be a power of two\n \n #[repr(simd)]\n #[derive(Copy, Clone, Debug)]\n pub struct Short3(pub i16, pub i16, pub i16);\n+//~^ ERROR SIMD vector length must be a power of two\n \n extern \"platform-intrinsic\" {\n     fn simd_cast<T, U>(x: T) -> U;"}, {"sha": "355ceff00508aa0d44e692d41314f5390216162e", "filename": "src/test/ui/issues/issue-39720.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fissues%2Fissue-39720.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fissues%2Fissue-39720.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39720.stderr?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -0,0 +1,15 @@\n+error[E0075]: SIMD vector length must be a power of two\n+  --> $DIR/issue-39720.rs:7:1\n+   |\n+LL | pub struct Char3(pub i8, pub i8, pub i8);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0075]: SIMD vector length must be a power of two\n+  --> $DIR/issue-39720.rs:12:1\n+   |\n+LL | pub struct Short3(pub i16, pub i16, pub i16);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0075`."}, {"sha": "493cd7a477c7a861686519145ecb0355b2a320fd", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-elements.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.rs?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -9,10 +9,6 @@ struct i32x2(i32, i32);\n #[repr(simd)]\n #[derive(Copy, Clone)]\n #[allow(non_camel_case_types)]\n-struct i32x3(i32, i32, i32);\n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-#[allow(non_camel_case_types)]\n struct i32x4(i32, i32, i32, i32);\n #[repr(simd)]\n #[derive(Copy, Clone)]\n@@ -27,10 +23,6 @@ struct f32x2(f32, f32);\n #[repr(simd)]\n #[derive(Copy, Clone)]\n #[allow(non_camel_case_types)]\n-struct f32x3(f32, f32, f32);\n-#[repr(simd)]\n-#[derive(Copy, Clone)]\n-#[allow(non_camel_case_types)]\n struct f32x4(f32, f32, f32, f32);\n #[repr(simd)]\n #[derive(Copy, Clone)]\n@@ -43,7 +35,6 @@ extern \"platform-intrinsic\" {\n     fn simd_extract<T, E>(x: T, idx: u32) -> E;\n \n     fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n-    fn simd_shuffle3<T, U>(x: T, y: T, idx: [u32; 3]) -> U;\n     fn simd_shuffle4<T, U>(x: T, y: T, idx: [u32; 4]) -> U;\n     fn simd_shuffle8<T, U>(x: T, y: T, idx: [u32; 8]) -> U;\n }\n@@ -61,28 +52,22 @@ fn main() {\n \n         simd_shuffle2::<i32, i32>(0, 0, [0; 2]);\n         //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n-        simd_shuffle3::<i32, i32>(0, 0, [0; 3]);\n-        //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_shuffle4::<i32, i32>(0, 0, [0; 4]);\n         //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n         simd_shuffle8::<i32, i32>(0, 0, [0; 8]);\n         //~^ ERROR expected SIMD input type, found non-SIMD `i32`\n \n         simd_shuffle2::<_, f32x2>(x, x, [0; 2]);\n //~^ ERROR element type `i32` (element of input `i32x4`), found `f32x2` with element type `f32`\n-        simd_shuffle3::<_, f32x3>(x, x, [0; 3]);\n-//~^ ERROR element type `i32` (element of input `i32x4`), found `f32x3` with element type `f32`\n         simd_shuffle4::<_, f32x4>(x, x, [0; 4]);\n //~^ ERROR element type `i32` (element of input `i32x4`), found `f32x4` with element type `f32`\n         simd_shuffle8::<_, f32x8>(x, x, [0; 8]);\n //~^ ERROR element type `i32` (element of input `i32x4`), found `f32x8` with element type `f32`\n \n         simd_shuffle2::<_, i32x8>(x, x, [0; 2]);\n         //~^ ERROR expected return type of length 2, found `i32x8` with length 8\n-        simd_shuffle3::<_, i32x4>(x, x, [0; 3]);\n-        //~^ ERROR expected return type of length 3, found `i32x4` with length 4\n-        simd_shuffle4::<_, i32x3>(x, x, [0; 4]);\n-        //~^ ERROR expected return type of length 4, found `i32x3` with length 3\n+        simd_shuffle4::<_, i32x8>(x, x, [0; 4]);\n+        //~^ ERROR expected return type of length 4, found `i32x8` with length 8\n         simd_shuffle8::<_, i32x2>(x, x, [0; 8]);\n         //~^ ERROR expected return type of length 8, found `i32x2` with length 2\n     }"}, {"sha": "703e64d1ddcc83c31a952cc5203a263ca114cb86", "filename": "src/test/ui/simd-intrinsic/simd-intrinsic-generic-elements.stderr", "status": "modified", "additions": 15, "deletions": 33, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fsimd-intrinsic-generic-elements.stderr?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -1,93 +1,75 @@\n error[E0511]: invalid monomorphization of `simd_insert` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:55:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:46:9\n    |\n LL |         simd_insert(0, 0, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_insert` intrinsic: expected inserted type `i32` (element of input `i32x4`), found `f64`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:57:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:48:9\n    |\n LL |         simd_insert(x, 0, 1.0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_extract` intrinsic: expected return type `i32` (element of input `i32x4`), found `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:59:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:50:9\n    |\n LL |         simd_extract::<_, f32>(x, 0);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:62:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:53:9\n    |\n LL |         simd_shuffle2::<i32, i32>(0, 0, [0; 2]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0511]: invalid monomorphization of `simd_shuffle3` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:64:9\n-   |\n-LL |         simd_shuffle3::<i32, i32>(0, 0, [0; 3]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:66:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:55:9\n    |\n LL |         simd_shuffle4::<i32, i32>(0, 0, [0; 4]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected SIMD input type, found non-SIMD `i32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:68:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:57:9\n    |\n LL |         simd_shuffle8::<i32, i32>(0, 0, [0; 8]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x2` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:71:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:60:9\n    |\n LL |         simd_shuffle2::<_, f32x2>(x, x, [0; 2]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0511]: invalid monomorphization of `simd_shuffle3` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x3` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:73:9\n-   |\n-LL |         simd_shuffle3::<_, f32x3>(x, x, [0; 3]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x4` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:75:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:62:9\n    |\n LL |         simd_shuffle4::<_, f32x4>(x, x, [0; 4]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected return element type `i32` (element of input `i32x4`), found `f32x8` with element type `f32`\n-  --> $DIR/simd-intrinsic-generic-elements.rs:77:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:64:9\n    |\n LL |         simd_shuffle8::<_, f32x8>(x, x, [0; 8]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle2` intrinsic: expected return type of length 2, found `i32x8` with length 8\n-  --> $DIR/simd-intrinsic-generic-elements.rs:80:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:67:9\n    |\n LL |         simd_shuffle2::<_, i32x8>(x, x, [0; 2]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0511]: invalid monomorphization of `simd_shuffle3` intrinsic: expected return type of length 3, found `i32x4` with length 4\n-  --> $DIR/simd-intrinsic-generic-elements.rs:82:9\n+error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return type of length 4, found `i32x8` with length 8\n+  --> $DIR/simd-intrinsic-generic-elements.rs:69:9\n    |\n-LL |         simd_shuffle3::<_, i32x4>(x, x, [0; 3]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0511]: invalid monomorphization of `simd_shuffle4` intrinsic: expected return type of length 4, found `i32x3` with length 3\n-  --> $DIR/simd-intrinsic-generic-elements.rs:84:9\n-   |\n-LL |         simd_shuffle4::<_, i32x3>(x, x, [0; 4]);\n+LL |         simd_shuffle4::<_, i32x8>(x, x, [0; 4]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0511]: invalid monomorphization of `simd_shuffle8` intrinsic: expected return type of length 8, found `i32x2` with length 2\n-  --> $DIR/simd-intrinsic-generic-elements.rs:86:9\n+  --> $DIR/simd-intrinsic-generic-elements.rs:71:9\n    |\n LL |         simd_shuffle8::<_, i32x2>(x, x, [0; 8]);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 15 previous errors\n+error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0511`."}, {"sha": "bd0d457b35e2763ef03dbdc5bf089f57979d7551", "filename": "src/test/ui/simd-type-generic-monomorphisation-oversized.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-oversized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-oversized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-oversized.rs?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -2,11 +2,11 @@\n \n #![feature(repr_simd, platform_intrinsics)]\n \n-// error-pattern:monomorphising SIMD type `Simd<65537_usize>` of length greater than 65536\n+// error-pattern:monomorphising SIMD type `Simd<65536_usize>` of length greater than 32768\n \n #[repr(simd)]\n struct Simd<const N: usize>([f32; N]);\n \n fn main() {\n-    let _ = Simd::<65537>([0.; 65537]);\n+    let _ = Simd::<65536>([0.; 65536]);\n }"}, {"sha": "f4418350115321c9e8be87b778251e4ed363ef6a", "filename": "src/test/ui/simd-type-generic-monomorphisation-oversized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-oversized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-oversized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-oversized.stderr?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -1,4 +1,4 @@\n-error: monomorphising SIMD type `Simd<65537_usize>` of length greater than 65536\n+error: monomorphising SIMD type `Simd<65536_usize>` of length greater than 32768\n \n error: aborting due to previous error\n "}, {"sha": "3a0b9e02663d81b64882dc84470ab05bcc75df6b", "filename": "src/test/ui/simd-type-generic-monomorphisation-power-of-two.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-power-of-two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-power-of-two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-power-of-two.rs?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -0,0 +1,12 @@\n+// build-fail\n+\n+#![feature(repr_simd, platform_intrinsics)]\n+\n+// error-pattern:monomorphising SIMD type `Simd<3_usize>` of non-power-of-two length\n+\n+#[repr(simd)]\n+struct Simd<const N: usize>([f32; N]);\n+\n+fn main() {\n+    let _ = Simd::<3>([0.; 3]);\n+}"}, {"sha": "82cc0d8714aba77a2de487f1241506d6b62946b7", "filename": "src/test/ui/simd-type-generic-monomorphisation-power-of-two.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-power-of-two.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-power-of-two.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-type-generic-monomorphisation-power-of-two.stderr?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -0,0 +1,4 @@\n+error: monomorphising SIMD type `Simd<3_usize>` of non-power-of-two length\n+\n+error: aborting due to previous error\n+"}, {"sha": "87df26434d7d303f6aa9613e6be91516c2b97d77", "filename": "src/test/ui/simd-type.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-type.rs?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -9,6 +9,9 @@ struct empty; //~ ERROR SIMD vector cannot be empty\n #[repr(simd)]\n struct empty2([f32; 0]); //~ ERROR SIMD vector cannot be empty\n \n+#[repr(simd)]\n+struct pow2([f32; 7]); //~ ERROR SIMD vector length must be a power of two\n+\n #[repr(simd)]\n struct i64f64(i64, f64); //~ ERROR SIMD vector should be homogeneous\n \n@@ -21,9 +24,9 @@ struct FooV(Foo, Foo); //~ ERROR SIMD vector element type should be a primitive\n struct FooV2([Foo; 2]); //~ ERROR SIMD vector element type should be a primitive scalar (integer/float/pointer) type\n \n #[repr(simd)]\n-struct TooBig([f32; 65537]); //~ ERROR SIMD vector cannot have more than 65536 elements\n+struct TooBig([f32; 65536]); //~ ERROR SIMD vector cannot have more than 32768 elements\n \n #[repr(simd)]\n-struct JustRight([u128; 65536]);\n+struct JustRight([u128; 32768]);\n \n fn main() {}"}, {"sha": "8b15ef05e032b4f461e81d0f0e1d89f7ea583ce4", "filename": "src/test/ui/simd-type.stderr", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-type.stderr?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -10,31 +10,37 @@ error[E0075]: SIMD vector cannot be empty\n LL | struct empty2([f32; 0]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0076]: SIMD vector should be homogeneous\n+error[E0075]: SIMD vector length must be a power of two\n   --> $DIR/simd-type.rs:13:1\n    |\n+LL | struct pow2([f32; 7]);\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0076]: SIMD vector should be homogeneous\n+  --> $DIR/simd-type.rs:16:1\n+   |\n LL | struct i64f64(i64, f64);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ SIMD elements must have the same type\n \n error[E0077]: SIMD vector element type should be a primitive scalar (integer/float/pointer) type\n-  --> $DIR/simd-type.rs:18:1\n+  --> $DIR/simd-type.rs:21:1\n    |\n LL | struct FooV(Foo, Foo);\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0077]: SIMD vector element type should be a primitive scalar (integer/float/pointer) type\n-  --> $DIR/simd-type.rs:21:1\n+  --> $DIR/simd-type.rs:24:1\n    |\n LL | struct FooV2([Foo; 2]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0075]: SIMD vector cannot have more than 65536 elements\n-  --> $DIR/simd-type.rs:24:1\n+error[E0075]: SIMD vector cannot have more than 32768 elements\n+  --> $DIR/simd-type.rs:27:1\n    |\n-LL | struct TooBig([f32; 65537]);\n+LL | struct TooBig([f32; 65536]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n Some errors have detailed explanations: E0075, E0076, E0077.\n For more information about an error, try `rustc --explain E0075`."}, {"sha": "a85ec7c58235ba8554c7ab750a4def27c2f9dd4e", "filename": "src/test/ui/simd/simd-intrinsic-generic-elements.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-elements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-elements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-intrinsic-generic-elements.rs?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -10,10 +10,6 @@ struct i32x2(i32, i32);\n #[repr(simd)]\n #[derive(Copy, Clone, Debug, PartialEq)]\n #[allow(non_camel_case_types)]\n-struct i32x3(i32, i32, i32);\n-#[repr(simd)]\n-#[derive(Copy, Clone, Debug, PartialEq)]\n-#[allow(non_camel_case_types)]\n struct i32x4(i32, i32, i32, i32);\n #[repr(simd)]\n #[derive(Copy, Clone, Debug, PartialEq)]\n@@ -26,7 +22,6 @@ extern \"platform-intrinsic\" {\n     fn simd_extract<T, E>(x: T, idx: u32) -> E;\n \n     fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n-    fn simd_shuffle3<T, U>(x: T, y: T, idx: [u32; 3]) -> U;\n     fn simd_shuffle4<T, U>(x: T, y: T, idx: [u32; 4]) -> U;\n     fn simd_shuffle8<T, U>(x: T, y: T, idx: [u32; 8]) -> U;\n }\n@@ -45,17 +40,12 @@ macro_rules! all_eq {\n \n fn main() {\n     let x2 = i32x2(20, 21);\n-    let x3 = i32x3(30, 31, 32);\n     let x4 = i32x4(40, 41, 42, 43);\n     let x8 = i32x8(80, 81, 82, 83, 84, 85, 86, 87);\n     unsafe {\n         all_eq!(simd_insert(x2, 0, 100), i32x2(100, 21));\n         all_eq!(simd_insert(x2, 1, 100), i32x2(20, 100));\n \n-        all_eq!(simd_insert(x3, 0, 100), i32x3(100, 31, 32));\n-        all_eq!(simd_insert(x3, 1, 100), i32x3(30, 100, 32));\n-        all_eq!(simd_insert(x3, 2, 100), i32x3(30, 31, 100));\n-\n         all_eq!(simd_insert(x4, 0, 100), i32x4(100, 41, 42, 43));\n         all_eq!(simd_insert(x4, 1, 100), i32x4(40, 100, 42, 43));\n         all_eq!(simd_insert(x4, 2, 100), i32x4(40, 41, 100, 43));\n@@ -73,10 +63,6 @@ fn main() {\n         all_eq!(simd_extract(x2, 0), 20);\n         all_eq!(simd_extract(x2, 1), 21);\n \n-        all_eq!(simd_extract(x3, 0), 30);\n-        all_eq!(simd_extract(x3, 1), 31);\n-        all_eq!(simd_extract(x3, 2), 32);\n-\n         all_eq!(simd_extract(x4, 0), 40);\n         all_eq!(simd_extract(x4, 1), 41);\n         all_eq!(simd_extract(x4, 2), 42);\n@@ -93,30 +79,20 @@ fn main() {\n     }\n \n     let y2 = i32x2(120, 121);\n-    let y3 = i32x3(130, 131, 132);\n     let y4 = i32x4(140, 141, 142, 143);\n     let y8 = i32x8(180, 181, 182, 183, 184, 185, 186, 187);\n     unsafe {\n         all_eq!(simd_shuffle2(x2, y2, [3, 0]), i32x2(121, 20));\n-        all_eq!(simd_shuffle3(x2, y2, [3, 0, 1]), i32x3(121, 20, 21));\n         all_eq!(simd_shuffle4(x2, y2, [3, 0, 1, 2]), i32x4(121, 20, 21, 120));\n         all_eq!(simd_shuffle8(x2, y2, [3, 0, 1, 2, 1, 2, 3, 0]),\n                 i32x8(121, 20, 21, 120, 21, 120, 121, 20));\n \n-        all_eq!(simd_shuffle2(x3, y3, [4, 2]), i32x2(131, 32));\n-        all_eq!(simd_shuffle3(x3, y3, [4, 2, 3]), i32x3(131, 32, 130));\n-        all_eq!(simd_shuffle4(x3, y3, [4, 2, 3, 0]), i32x4(131, 32, 130, 30));\n-        all_eq!(simd_shuffle8(x3, y3, [4, 2, 3, 0, 1, 5, 5, 1]),\n-                i32x8(131, 32, 130, 30, 31, 132, 132, 31));\n-\n         all_eq!(simd_shuffle2(x4, y4, [7, 2]), i32x2(143, 42));\n-        all_eq!(simd_shuffle3(x4, y4, [7, 2, 5]), i32x3(143, 42, 141));\n         all_eq!(simd_shuffle4(x4, y4, [7, 2, 5, 0]), i32x4(143, 42, 141, 40));\n         all_eq!(simd_shuffle8(x4, y4, [7, 2, 5, 0, 3, 6, 4, 1]),\n                 i32x8(143, 42, 141, 40, 43, 142, 140, 41));\n \n         all_eq!(simd_shuffle2(x8, y8, [11, 5]), i32x2(183, 85));\n-        all_eq!(simd_shuffle3(x8, y8, [11, 5, 15]), i32x3(183, 85, 187));\n         all_eq!(simd_shuffle4(x8, y8, [11, 5, 15, 0]), i32x4(183, 85, 187, 80));\n         all_eq!(simd_shuffle8(x8, y8, [11, 5, 15, 0, 3, 8, 12, 1]),\n                 i32x8(183, 85, 187, 80, 83, 180, 184, 81));"}, {"sha": "0afa4947225d3b719a0b92bd3fcf6d9280fccf48", "filename": "src/test/ui/simd/simd-size-align.rs", "status": "modified", "additions": 30, "deletions": 73, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd%2Fsimd-size-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8451656fe72db1b168fa2bf66710ee40eb77b45c/src%2Ftest%2Fui%2Fsimd%2Fsimd-size-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fsimd-size-align.rs?ref=8451656fe72db1b168fa2bf66710ee40eb77b45c", "patch": "@@ -10,87 +10,44 @@ use std::mem;\n /// `T` should satisfy `size_of T (mod min_align_of T) === 0` to be stored at `Vec<T>` properly\n /// Please consult the issue #20460\n fn check<T>() {\n-    assert_eq!(mem::size_of::<T>() % mem::min_align_of::<T>(), 0)\n+    assert_eq!(mem::size_of::<T>() % mem::min_align_of::<T>(), 0);\n+    assert_eq!(mem::size_of::<T>() % mem::min_align_of::<T>(), 0);\n+    assert_eq!(mem::size_of::<T>() % mem::min_align_of::<T>(), 0);\n }\n \n-fn main() {\n-    check::<u8x2>();\n-    check::<u8x3>();\n-    check::<u8x4>();\n-    check::<u8x5>();\n-    check::<u8x6>();\n-    check::<u8x7>();\n-    check::<u8x8>();\n+#[repr(simd)]\n+struct U8<const N: usize>([u8; N]);\n \n-    check::<i16x2>();\n-    check::<i16x3>();\n-    check::<i16x4>();\n-    check::<i16x5>();\n-    check::<i16x6>();\n-    check::<i16x7>();\n-    check::<i16x8>();\n+#[repr(simd)]\n+struct I16<const N: usize>([i16; N]);\n \n-    check::<f32x2>();\n-    check::<f32x3>();\n-    check::<f32x4>();\n-    check::<f32x5>();\n-    check::<f32x6>();\n-    check::<f32x7>();\n-    check::<f32x8>();\n+#[repr(simd)]\n+struct F32<const N: usize>([f32; N]);\n \n-    check::<usizex2>();\n-    check::<usizex3>();\n-    check::<usizex4>();\n-    check::<usizex5>();\n-    check::<usizex6>();\n-    check::<usizex7>();\n-    check::<usizex8>();\n+#[repr(simd)]\n+struct Usize<const N: usize>([usize; N]);\n \n-    check::<isizex2>();\n-    check::<isizex3>();\n-    check::<isizex4>();\n-    check::<isizex5>();\n-    check::<isizex6>();\n-    check::<isizex7>();\n-    check::<isizex8>();\n-}\n+#[repr(simd)]\n+struct Isize<const N: usize>([isize; N]);\n \n-#[repr(simd)] struct u8x2(u8, u8);\n-#[repr(simd)] struct u8x3(u8, u8, u8);\n-#[repr(simd)] struct u8x4(u8, u8, u8, u8);\n-#[repr(simd)] struct u8x5(u8, u8, u8, u8, u8);\n-#[repr(simd)] struct u8x6(u8, u8, u8, u8, u8, u8);\n-#[repr(simd)] struct u8x7(u8, u8, u8, u8, u8, u8, u8);\n-#[repr(simd)] struct u8x8(u8, u8, u8, u8, u8, u8, u8, u8);\n+fn main() {\n+    check::<U8<2>>();\n+    check::<U8<4>>();\n+    check::<U8<8>>();\n \n-#[repr(simd)] struct i16x2(i16, i16);\n-#[repr(simd)] struct i16x3(i16, i16, i16);\n-#[repr(simd)] struct i16x4(i16, i16, i16, i16);\n-#[repr(simd)] struct i16x5(i16, i16, i16, i16, i16);\n-#[repr(simd)] struct i16x6(i16, i16, i16, i16, i16, i16);\n-#[repr(simd)] struct i16x7(i16, i16, i16, i16, i16, i16, i16);\n-#[repr(simd)] struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n+    check::<I16<2>>();\n+    check::<I16<4>>();\n+    check::<I16<8>>();\n \n-#[repr(simd)] struct f32x2(f32, f32);\n-#[repr(simd)] struct f32x3(f32, f32, f32);\n-#[repr(simd)] struct f32x4(f32, f32, f32, f32);\n-#[repr(simd)] struct f32x5(f32, f32, f32, f32, f32);\n-#[repr(simd)] struct f32x6(f32, f32, f32, f32, f32, f32);\n-#[repr(simd)] struct f32x7(f32, f32, f32, f32, f32, f32, f32);\n-#[repr(simd)] struct f32x8(f32, f32, f32, f32, f32, f32, f32, f32);\n+    check::<F32<2>>();\n+    check::<F32<4>>();\n+    check::<F32<8>>();\n \n-#[repr(simd)] struct usizex2(usize, usize);\n-#[repr(simd)] struct usizex3(usize, usize, usize);\n-#[repr(simd)] struct usizex4(usize, usize, usize, usize);\n-#[repr(simd)] struct usizex5(usize, usize, usize, usize, usize);\n-#[repr(simd)] struct usizex6(usize, usize, usize, usize, usize, usize);\n-#[repr(simd)] struct usizex7(usize, usize, usize, usize, usize, usize, usize);\n-#[repr(simd)] struct usizex8(usize, usize, usize, usize, usize, usize, usize, usize);\n+    check::<Usize<2>>();\n+    check::<Usize<4>>();\n+    check::<Usize<8>>();\n \n-#[repr(simd)] struct isizex2(isize, isize);\n-#[repr(simd)] struct isizex3(isize, isize, isize);\n-#[repr(simd)] struct isizex4(isize, isize, isize, isize);\n-#[repr(simd)] struct isizex5(isize, isize, isize, isize, isize);\n-#[repr(simd)] struct isizex6(isize, isize, isize, isize, isize, isize);\n-#[repr(simd)] struct isizex7(isize, isize, isize, isize, isize, isize, isize);\n-#[repr(simd)] struct isizex8(isize, isize, isize, isize, isize, isize, isize, isize);\n+    check::<Isize<2>>();\n+    check::<Isize<4>>();\n+    check::<Isize<8>>();\n+}"}]}