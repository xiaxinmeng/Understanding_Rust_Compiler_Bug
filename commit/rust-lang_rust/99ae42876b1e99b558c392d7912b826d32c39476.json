{"sha": "99ae42876b1e99b558c392d7912b826d32c39476", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YWU0Mjg3NmIxZTk5YjU1OGMzOTJkNzkxMmI4MjZkMzJjMzk0NzY=", "commit": {"author": {"name": "DeeDeeG", "email": "DeeDeeG@users.noreply.github.com", "date": "2020-03-21T19:33:06Z"}, "committer": {"name": "DeeDeeG", "email": "DeeDeeG@users.noreply.github.com", "date": "2020-03-21T22:12:29Z"}, "message": "Improve E0308 error message wording", "tree": {"sha": "6dfd09f293b587b4234f3d7e0fef54a1c7af6110", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dfd09f293b587b4234f3d7e0fef54a1c7af6110"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99ae42876b1e99b558c392d7912b826d32c39476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99ae42876b1e99b558c392d7912b826d32c39476", "html_url": "https://github.com/rust-lang/rust/commit/99ae42876b1e99b558c392d7912b826d32c39476", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99ae42876b1e99b558c392d7912b826d32c39476/comments", "author": {"login": "DeeDeeG", "id": 20157115, "node_id": "MDQ6VXNlcjIwMTU3MTE1", "avatar_url": "https://avatars.githubusercontent.com/u/20157115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeeDeeG", "html_url": "https://github.com/DeeDeeG", "followers_url": "https://api.github.com/users/DeeDeeG/followers", "following_url": "https://api.github.com/users/DeeDeeG/following{/other_user}", "gists_url": "https://api.github.com/users/DeeDeeG/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeeDeeG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeeDeeG/subscriptions", "organizations_url": "https://api.github.com/users/DeeDeeG/orgs", "repos_url": "https://api.github.com/users/DeeDeeG/repos", "events_url": "https://api.github.com/users/DeeDeeG/events{/privacy}", "received_events_url": "https://api.github.com/users/DeeDeeG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DeeDeeG", "id": 20157115, "node_id": "MDQ6VXNlcjIwMTU3MTE1", "avatar_url": "https://avatars.githubusercontent.com/u/20157115?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeeDeeG", "html_url": "https://github.com/DeeDeeG", "followers_url": "https://api.github.com/users/DeeDeeG/followers", "following_url": "https://api.github.com/users/DeeDeeG/following{/other_user}", "gists_url": "https://api.github.com/users/DeeDeeG/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeeDeeG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeeDeeG/subscriptions", "organizations_url": "https://api.github.com/users/DeeDeeG/orgs", "repos_url": "https://api.github.com/users/DeeDeeG/repos", "events_url": "https://api.github.com/users/DeeDeeG/events{/privacy}", "received_events_url": "https://api.github.com/users/DeeDeeG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38114ff16e7856f98b2b4be7ab4cd29b38bed59a", "url": "https://api.github.com/repos/rust-lang/rust/commits/38114ff16e7856f98b2b4be7ab4cd29b38bed59a", "html_url": "https://github.com/rust-lang/rust/commit/38114ff16e7856f98b2b4be7ab4cd29b38bed59a"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "b2c8437049001950fc5f8b16698c88076392788b", "filename": "src/librustc_error_codes/error_codes/E0308.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99ae42876b1e99b558c392d7912b826d32c39476/src%2Flibrustc_error_codes%2Ferror_codes%2FE0308.md", "raw_url": "https://github.com/rust-lang/rust/raw/99ae42876b1e99b558c392d7912b826d32c39476/src%2Flibrustc_error_codes%2Ferror_codes%2FE0308.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0308.md?ref=99ae42876b1e99b558c392d7912b826d32c39476", "patch": "@@ -13,7 +13,7 @@ let x: i32 = \"I am not a number!\";\n ```\n \n This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can occur for several cases, the most common of which is a\n-mismatch in the expected type that the compiler inferred for a variable's\n-initializing expression, and the actual type explicitly assigned to the\n-variable.\n+variable. It can happen in several cases, the most common being a mismatch\n+between the type that the compiler inferred for a variable based on its\n+initializing expression, on the one hand, and the type the author explicitly\n+assigned to the variable, on the other hand."}, {"sha": "99f91cc881617f53537a03cc8cbdc392fa0077ec", "filename": "src/test/ui/json-bom-plus-crlf-multifile.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/99ae42876b1e99b558c392d7912b826d32c39476/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99ae42876b1e99b558c392d7912b826d32c39476/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf-multifile.stderr?ref=99ae42876b1e99b558c392d7912b826d32c39476", "patch": "@@ -13,10 +13,10 @@ let x: i32 = \\\"I am not a number!\\\";\n ```\n \n This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can occur for several cases, the most common of which is a\n-mismatch in the expected type that the compiler inferred for a variable's\n-initializing expression, and the actual type explicitly assigned to the\n-variable.\n+variable. It can happen in several cases, the most common being a mismatch\n+between the type that the compiler inferred for a variable based on its\n+initializing expression, on the one hand, and the type the author explicitly\n+assigned to the variable, on the other hand.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":612,\"byte_end\":618,\"line_start\":17,\"line_end\":17,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":621,\"byte_end\":622,\"line_start\":17,\"line_end\":17,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:17:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n@@ -34,10 +34,10 @@ let x: i32 = \\\"I am not a number!\\\";\n ```\n \n This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can occur for several cases, the most common of which is a\n-mismatch in the expected type that the compiler inferred for a variable's\n-initializing expression, and the actual type explicitly assigned to the\n-variable.\n+variable. It can happen in several cases, the most common being a mismatch\n+between the type that the compiler inferred for a variable based on its\n+initializing expression, on the one hand, and the type the author explicitly\n+assigned to the variable, on the other hand.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":672,\"byte_end\":678,\"line_start\":19,\"line_end\":19,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":681,\"byte_end\":682,\"line_start\":19,\"line_end\":19,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:19:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n@@ -55,10 +55,10 @@ let x: i32 = \\\"I am not a number!\\\";\n ```\n \n This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can occur for several cases, the most common of which is a\n-mismatch in the expected type that the compiler inferred for a variable's\n-initializing expression, and the actual type explicitly assigned to the\n-variable.\n+variable. It can happen in several cases, the most common being a mismatch\n+between the type that the compiler inferred for a variable based on its\n+initializing expression, on the one hand, and the type the author explicitly\n+assigned to the variable, on the other hand.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":735,\"byte_end\":741,\"line_start\":22,\"line_end\":22,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":745,\"byte_end\":746,\"line_start\":23,\"line_end\":23,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:23:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n@@ -76,10 +76,10 @@ let x: i32 = \\\"I am not a number!\\\";\n ```\n \n This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can occur for several cases, the most common of which is a\n-mismatch in the expected type that the compiler inferred for a variable's\n-initializing expression, and the actual type explicitly assigned to the\n-variable.\n+variable. It can happen in several cases, the most common being a mismatch\n+between the type that the compiler inferred for a variable based on its\n+initializing expression, on the one hand, and the type the author explicitly\n+assigned to the variable, on the other hand.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":801,\"byte_end\":809,\"line_start\":25,\"line_end\":26,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs\",\"byte_start\":792,\"byte_end\":798,\"line_start\":25,\"line_end\":25,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf-multifile-aux.rs:25:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors"}, {"sha": "3e84f5ef54d2c14e7ecb0223fc04cdd809a1cb61", "filename": "src/test/ui/json-bom-plus-crlf.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/99ae42876b1e99b558c392d7912b826d32c39476/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99ae42876b1e99b558c392d7912b826d32c39476/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fjson-bom-plus-crlf.stderr?ref=99ae42876b1e99b558c392d7912b826d32c39476", "patch": "@@ -13,10 +13,10 @@ let x: i32 = \\\"I am not a number!\\\";\n ```\n \n This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can occur for several cases, the most common of which is a\n-mismatch in the expected type that the compiler inferred for a variable's\n-initializing expression, and the actual type explicitly assigned to the\n-variable.\n+variable. It can happen in several cases, the most common being a mismatch\n+between the type that the compiler inferred for a variable based on its\n+initializing expression, on the one hand, and the type the author explicitly\n+assigned to the variable, on the other hand.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":597,\"byte_end\":603,\"line_start\":16,\"line_end\":16,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":606,\"byte_end\":607,\"line_start\":16,\"line_end\":16,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1;  // Error in the middle of line.\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:16:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n@@ -34,10 +34,10 @@ let x: i32 = \\\"I am not a number!\\\";\n ```\n \n This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can occur for several cases, the most common of which is a\n-mismatch in the expected type that the compiler inferred for a variable's\n-initializing expression, and the actual type explicitly assigned to the\n-variable.\n+variable. It can happen in several cases, the most common being a mismatch\n+between the type that the compiler inferred for a variable based on its\n+initializing expression, on the one hand, and the type the author explicitly\n+assigned to the variable, on the other hand.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":657,\"byte_end\":663,\"line_start\":18,\"line_end\":18,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":666,\"byte_end\":667,\"line_start\":18,\"line_end\":18,\"column_start\":22,\"column_end\":23,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = 1\",\"highlight_start\":22,\"highlight_end\":23}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:18:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n@@ -55,10 +55,10 @@ let x: i32 = \\\"I am not a number!\\\";\n ```\n \n This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can occur for several cases, the most common of which is a\n-mismatch in the expected type that the compiler inferred for a variable's\n-initializing expression, and the actual type explicitly assigned to the\n-variable.\n+variable. It can happen in several cases, the most common being a mismatch\n+between the type that the compiler inferred for a variable based on its\n+initializing expression, on the one hand, and the type the author explicitly\n+assigned to the variable, on the other hand.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":\"expected struct `std::string::String`, found integer\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":720,\"byte_end\":726,\"line_start\":21,\"line_end\":21,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String =\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"try using a conversion method\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":730,\"byte_end\":731,\"line_start\":22,\"line_end\":22,\"column_start\":1,\"column_end\":2,\"is_primary\":true,\"text\":[{\"text\":\"1;  // Error after the newline.\",\"highlight_start\":1,\"highlight_end\":2}],\"label\":null,\"suggested_replacement\":\"1.to_string()\",\"suggestion_applicability\":\"MaybeIncorrect\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:22:1: error[E0308]: mismatched types\n \"}\n {\"message\":\"mismatched types\",\"code\":{\"code\":\"E0308\",\"explanation\":\"Expected type did not match the received type.\n@@ -76,10 +76,10 @@ let x: i32 = \\\"I am not a number!\\\";\n ```\n \n This error occurs when the compiler was unable to infer the concrete type of a\n-variable. It can occur for several cases, the most common of which is a\n-mismatch in the expected type that the compiler inferred for a variable's\n-initializing expression, and the actual type explicitly assigned to the\n-variable.\n+variable. It can happen in several cases, the most common being a mismatch\n+between the type that the compiler inferred for a variable based on its\n+initializing expression, on the one hand, and the type the author explicitly\n+assigned to the variable, on the other hand.\n \"},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":786,\"byte_end\":794,\"line_start\":24,\"line_end\":25,\"column_start\":22,\"column_end\":6,\"is_primary\":true,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":22,\"highlight_end\":23},{\"text\":\"    );  // Error spanning the newline.\",\"highlight_start\":1,\"highlight_end\":6}],\"label\":\"expected struct `std::string::String`, found `()`\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/json-bom-plus-crlf.rs\",\"byte_start\":777,\"byte_end\":783,\"line_start\":24,\"line_end\":24,\"column_start\":13,\"column_end\":19,\"is_primary\":false,\"text\":[{\"text\":\"    let s : String = (\",\"highlight_start\":13,\"highlight_end\":19}],\"label\":\"expected due to this\",\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[],\"rendered\":\"$DIR/json-bom-plus-crlf.rs:24:22: error[E0308]: mismatched types\n \"}\n {\"message\":\"aborting due to 4 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 4 previous errors"}]}