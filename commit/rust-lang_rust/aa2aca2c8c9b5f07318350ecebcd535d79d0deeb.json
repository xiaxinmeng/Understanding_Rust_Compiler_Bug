{"sha": "aa2aca2c8c9b5f07318350ecebcd535d79d0deeb", "node_id": "C_kwDOAAsO6NoAKGFhMmFjYTJjOGM5YjVmMDczMTgzNTBlY2ViY2Q1MzVkNzlkMGRlZWI", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:26:36Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:26:36Z"}, "message": "Move Result::unwrap_or_default", "tree": {"sha": "602994df738d22555d18167d7138fa38f8a50b3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/602994df738d22555d18167d7138fa38f8a50b3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa2aca2c8c9b5f07318350ecebcd535d79d0deeb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHN+dwACgkQ+boUO5X/\nbYK3Zg/9H3VC1Vj54G94Wh/ILrlO20mWyVjDhTSAY7JCjNkKQpyPg7wD4pIJFX75\nZ+LVmQRv4QNvop7X/UZ9P74X6mVzRbIXBswVOkZNc1ZzcJAFQXPf39yngEE6JsSN\noqcJWu0Nu9lPMN+wQFbownt+jxXh0TD4iRbRoXgZ1OrkZe9OTg/WIZ5WqN97UDT5\nD1cN893VRtOEFrtxCHM+zo7zjB78bX9vyDB1QOPEaWFwJKXOJ45nszb54hCmaU1k\ncIJmpReCx68CUjxdUe8ZoEYnOKsjhcHwv1Ovnc4LewsdTcGtGAhMnA3hHP88d37r\nH41ALqmowF1VMaXj602li2mPfIxEDmqyyEgsJRucjEeAw3hRMd81c+VJOhmNnyjT\nbuQqF3ZWIMl60OZuPCVeuYx7w+agLr5sPI7ILkIzcgovLOpD3HxovLZyv6/FIEZX\nHr3WTKFGa2DjCTnSuXtDOdFisgkSYuhNBuYDNjGzrP00BEij4xZ1O8D7sLw5tnSR\n77Gc1hyCk/Jy/2xSFLQRK0b1Kqp/NLSUI8/eoSiHXBWKnvNczQLd/6Wh6HvypNqe\nEpgAe+aGEE4gGBTrn+i/Vo4VoLwcXw/vwaUQkMP55OsZ6QJ3rg/K5f4D/xTOjeAg\nuLgD0DGvlxi7oKFCmdLdWKYHOTj/qrEuNj4eWGS1rycGvnwzHCI=\n=w7r/\n-----END PGP SIGNATURE-----", "payload": "tree 602994df738d22555d18167d7138fa38f8a50b3f\nparent 15f57a6c59125c9f08efa2688675a998a869f9b9\nauthor David Tolnay <dtolnay@gmail.com> 1640888796 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1640888796 -0800\n\nMove Result::unwrap_or_default\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa2aca2c8c9b5f07318350ecebcd535d79d0deeb", "html_url": "https://github.com/rust-lang/rust/commit/aa2aca2c8c9b5f07318350ecebcd535d79d0deeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa2aca2c8c9b5f07318350ecebcd535d79d0deeb/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15f57a6c59125c9f08efa2688675a998a869f9b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/15f57a6c59125c9f08efa2688675a998a869f9b9", "html_url": "https://github.com/rust-lang/rust/commit/15f57a6c59125c9f08efa2688675a998a869f9b9"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "7d0e647bd91ce33c0ee22cf612e2b7b8462f5a12", "filename": "library/core/src/result.rs", "status": "modified", "additions": 37, "deletions": 36, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/aa2aca2c8c9b5f07318350ecebcd535d79d0deeb/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa2aca2c8c9b5f07318350ecebcd535d79d0deeb/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=aa2aca2c8c9b5f07318350ecebcd535d79d0deeb", "patch": "@@ -1077,6 +1077,43 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n+    /// Returns the contained [`Ok`] value or a default\n+    ///\n+    /// Consumes the `self` argument then, if [`Ok`], returns the contained\n+    /// value, otherwise if [`Err`], returns the default value for that\n+    /// type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Converts a string to an integer, turning poorly-formed strings\n+    /// into 0 (the default value for integers). [`parse`] converts\n+    /// a string to any other type that implements [`FromStr`], returning an\n+    /// [`Err`] on error.\n+    ///\n+    /// ```\n+    /// let good_year_from_input = \"1909\";\n+    /// let bad_year_from_input = \"190blarg\";\n+    /// let good_year = good_year_from_input.parse().unwrap_or_default();\n+    /// let bad_year = bad_year_from_input.parse().unwrap_or_default();\n+    ///\n+    /// assert_eq!(1909, good_year);\n+    /// assert_eq!(0, bad_year);\n+    /// ```\n+    ///\n+    /// [`parse`]: str::parse\n+    /// [`FromStr`]: crate::str::FromStr\n+    #[inline]\n+    #[stable(feature = \"result_unwrap_or_default\", since = \"1.16.0\")]\n+    pub fn unwrap_or_default(self) -> T\n+    where\n+        T: Default,\n+    {\n+        match self {\n+            Ok(x) => x,\n+            Err(_) => Default::default(),\n+        }\n+    }\n+\n     ////////////////////////////////////////////////////////////////////////\n     // Boolean operations on the values, eager and lazy\n     /////////////////////////////////////////////////////////////////////////\n@@ -1458,42 +1495,6 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     }\n }\n \n-impl<T: Default, E> Result<T, E> {\n-    /// Returns the contained [`Ok`] value or a default\n-    ///\n-    /// Consumes the `self` argument then, if [`Ok`], returns the contained\n-    /// value, otherwise if [`Err`], returns the default value for that\n-    /// type.\n-    ///\n-    /// # Examples\n-    ///\n-    /// Converts a string to an integer, turning poorly-formed strings\n-    /// into 0 (the default value for integers). [`parse`] converts\n-    /// a string to any other type that implements [`FromStr`], returning an\n-    /// [`Err`] on error.\n-    ///\n-    /// ```\n-    /// let good_year_from_input = \"1909\";\n-    /// let bad_year_from_input = \"190blarg\";\n-    /// let good_year = good_year_from_input.parse().unwrap_or_default();\n-    /// let bad_year = bad_year_from_input.parse().unwrap_or_default();\n-    ///\n-    /// assert_eq!(1909, good_year);\n-    /// assert_eq!(0, bad_year);\n-    /// ```\n-    ///\n-    /// [`parse`]: str::parse\n-    /// [`FromStr`]: crate::str::FromStr\n-    #[inline]\n-    #[stable(feature = \"result_unwrap_or_default\", since = \"1.16.0\")]\n-    pub fn unwrap_or_default(self) -> T {\n-        match self {\n-            Ok(x) => x,\n-            Err(_) => Default::default(),\n-        }\n-    }\n-}\n-\n #[unstable(feature = \"unwrap_infallible\", reason = \"newly added\", issue = \"61695\")]\n impl<T, E: Into<!>> Result<T, E> {\n     /// Returns the contained [`Ok`] value, but never panics."}]}