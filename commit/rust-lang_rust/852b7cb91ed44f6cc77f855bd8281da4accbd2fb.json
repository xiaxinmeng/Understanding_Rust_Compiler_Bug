{"sha": "852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1MmI3Y2I5MWVkNDRmNmNjNzdmODU1YmQ4MjgxZGE0YWNjYmQyZmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-23T04:48:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-23T04:48:15Z"}, "message": "Auto merge of #42165 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 8 pull requests\n\n- Successful merges: #42016, #42122, #42144, #42145, #42151, #42152, #42160, #42163\n- Failed merges:", "tree": {"sha": "0baca5f9b17776de133ffdd4f67bd728006279b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0baca5f9b17776de133ffdd4f67bd728006279b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "html_url": "https://github.com/rust-lang/rust/commit/852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e9139197e908435673c62a14381fbd4f8166319", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e9139197e908435673c62a14381fbd4f8166319", "html_url": "https://github.com/rust-lang/rust/commit/2e9139197e908435673c62a14381fbd4f8166319"}, {"sha": "aa7762f91fc6ee18faf477800d9e5bddb8637507", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa7762f91fc6ee18faf477800d9e5bddb8637507", "html_url": "https://github.com/rust-lang/rust/commit/aa7762f91fc6ee18faf477800d9e5bddb8637507"}], "stats": {"total": 505, "additions": 319, "deletions": 186}, "files": [{"sha": "456a683dc33c89fcc53c5712c4510eec272028d0", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -49,7 +49,6 @@\n     - [link_llvm_intrinsics](language-features/link-llvm-intrinsics.md)\n     - [linkage](language-features/linkage.md)\n     - [log_syntax](language-features/log-syntax.md)\n-    - [loop_break_value](language-features/loop-break-value.md)\n     - [macro_reexport](language-features/macro-reexport.md)\n     - [macro_vis_matcher](language-features/macro-vis-matcher.md)\n     - [main](language-features/main.md)"}, {"sha": "60741a74400d2e50007610ab1ed27b291d56ee0a", "filename": "src/doc/unstable-book/src/language-features/attr-literals.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fattr-literals.md?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -6,5 +6,25 @@ The tracking issue for this feature is: [#34981]\n \n ------------------------\n \n+At present, literals are only accepted as the value of a key-value pair in\n+attributes. What's more, only _string_ literals are accepted. This means that\n+literals can only appear in forms of `#[attr(name = \"value\")]` or\n+`#[attr = \"value\"]`.\n \n+The `attr_literals` unstable feature allows other types of literals to be used\n+in attributes. Here are some examples of attributes that can now be used with\n+this feature enabled:\n+\n++```rust,ignore\n++#[attr]\n++#[attr(true)]\n++#[attr(ident)]\n++#[attr(ident, 100, true, \"true\", ident = 100, ident = \"hello\", ident(100))]\n++#[attr(100)]\n++#[attr(enabled = true)]\n++#[enabled(true)]\n++#[attr(\"hello\")]\n++#[repr(C, align = 4)]\n++#[repr(C, align(4))]\n++```\n "}, {"sha": "fbd213dca569949fc8b9e38c20f3a2de10f2778e", "filename": "src/doc/unstable-book/src/language-features/catch-expr.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcatch-expr.md?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -5,3 +5,26 @@ The tracking issue for this feature is: [#31436]\n [#31436]: https://github.com/rust-lang/rust/issues/31436\n \n ------------------------\n+\n+The `catch_expr` feature adds support for a `catch` expression. The `catch`\n+expression creates a new scope one can use the `?` operator in.\n+\n+```rust\n+#![feature(catch_expr)]\n+\n+use std::num::ParseIntError;\n+\n+let result: Result<i32, ParseIntError> = do catch {\n+    Ok(\"1\".parse::<i32>()?\n+        + \"2\".parse::<i32>()?\n+        + \"3\".parse::<i32>()?)\n+};\n+assert_eq!(result, Ok(6));\n+\n+let result: Result<i32, ParseIntError> = do catch {\n+    Ok(\"1\".parse::<i32>()?\n+        + \"foo\".parse::<i32>()?\n+        + \"3\".parse::<i32>()?)\n+};\n+assert!(result.is_err());\n+```"}, {"sha": "e8fefe3b73344b4376cfce092dc8b9d37cf21bff", "filename": "src/doc/unstable-book/src/language-features/loop-break-value.md", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/2e9139197e908435673c62a14381fbd4f8166319/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Floop-break-value.md", "raw_url": "https://github.com/rust-lang/rust/raw/2e9139197e908435673c62a14381fbd4f8166319/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Floop-break-value.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Floop-break-value.md?ref=2e9139197e908435673c62a14381fbd4f8166319", "patch": "@@ -1,83 +0,0 @@\n-# `loop_break_value`\n-\n-The tracking issue for this feature is: [#37339]\n-\n-[#37339]: https://github.com/rust-lang/rust/issues/37339\n-\n-Documentation to be appended to section G of the book.\n-\n-------------------------\n-\n-### Loops as expressions\n-\n-Like most things in Rust, loops are expressions, and have a value; normally `()` unless the loop\n-never exits.\n-A `loop` can instead evaluate to a useful value via *break with value*:\n-\n-```rust\n-#![feature(loop_break_value)]\n-\n-// Find the first square number over 1000:\n-let mut n = 1;\n-let square = loop {\n-    if n * n > 1000 {\n-        break n * n;\n-    }\n-    n += 1;\n-};\n-```\n-\n-The evaluation type may be specified externally:\n-\n-```rust\n-#![feature(loop_break_value)]\n-\n-// Declare that value returned is unsigned 64-bit:\n-let n: u64 = loop {\n-    break 1;\n-};\n-```\n-\n-It is an error if types do not agree, either between a \"break\" value and an external requirement,\n-or between multiple \"break\" values:\n-\n-```no_compile\n-#![feature(loop_break_value)]\n-\n-loop {\n-    if true {\n-        break 1u32;\n-    } else {\n-        break 0u8;  // error: types do not agree\n-    }\n-};\n-\n-let n: i32 = loop {\n-    break 0u32; // error: type does not agree with external requirement\n-};\n-```\n-\n-#### Break: label, value\n-\n-Four forms of `break` are available, where EXPR is some expression which evaluates to a value:\n-\n-1.  `break;`\n-2.  `break 'label;`\n-3.  `break EXPR;`\n-4.  `break 'label EXPR;`\n-\n-When no value is given, the value `()` is assumed, thus `break;` is equivalent to `break ();`.\n-\n-Using a label allows returning a value from an inner loop:\n-\n-```rust\n-#![feature(loop_break_value)]\n-\n-let result = 'outer: loop {\n-    for n in 1..10 {\n-        if n > 4 {\n-            break 'outer n;\n-        }\n-    }\n-};\n-```"}, {"sha": "9eea3fccbbc17e39ad591fb72f94893f0027d5f5", "filename": "src/doc/unstable-book/src/language-features/on-unimplemented.md", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fon-unimplemented.md?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -6,5 +6,42 @@ The tracking issue for this feature is: [#29628]\n \n ------------------------\n \n+The `on_unimplemented` feature provides the `#[rustc_on_unimplemented]`\n+attribute, which allows trait definitions to add specialized notes to error\n+messages when an implementation was expected but not found.\n \n+For example:\n+\n+```rust,compile_fail\n+#![feature(on_unimplemented)]\n+\n+#[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be built from an \\\n+                          iterator over elements of type `{A}`\"]\n+trait MyIterator<A> {\n+    fn next(&mut self) -> A;\n+}\n+\n+fn iterate_chars<I: MyIterator<char>>(i: I) {\n+    // ...\n+}\n+\n+fn main() {\n+    iterate_chars(&[1, 2, 3][..]);\n+}\n+```\n+\n+When the user compiles this, they will see the following;\n+\n+```txt\n+error[E0277]: the trait bound `&[{integer}]: MyIterator<char>` is not satisfied\n+  --> <anon>:14:5\n+   |\n+14 |     iterate_chars(&[1, 2, 3][..]);\n+   |     ^^^^^^^^^^^^^ the trait `MyIterator<char>` is not implemented for `&[{integer}]`\n+   |\n+   = note: a collection of type `&[{integer}]` cannot be built from an iterator over elements of type `char`\n+   = note: required by `iterate_chars`\n+\n+error: aborting due to previous error\n+```\n "}, {"sha": "5696f5fe6a7ba80bdc6d15383dbd785db3547476", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -1410,6 +1410,9 @@ impl<T> [T] {\n \n     /// Converts `self` into a vector without clones or allocation.\n     ///\n+    /// The resulting vector can be converted back into a box via\n+    /// `Vec<T>`'s `into_boxed_slice` method.\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "e825acad4713e2a6973b242a0e5f11be102d266f", "filename": "src/libcore/option.rs", "status": "modified", "additions": 60, "deletions": 26, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -174,7 +174,7 @@ impl<T> Option<T> {\n     // Querying the contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Returns `true` if the option is a `Some` value.\n+    /// Returns `true` if the option is a [`Some`] value.\n     ///\n     /// # Examples\n     ///\n@@ -185,6 +185,8 @@ impl<T> Option<T> {\n     /// let x: Option<u32> = None;\n     /// assert_eq!(x.is_some(), false);\n     /// ```\n+    ///\n+    /// [`Some`]: #variant.Some\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_some(&self) -> bool {\n@@ -194,7 +196,7 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns `true` if the option is a `None` value.\n+    /// Returns `true` if the option is a [`None`] value.\n     ///\n     /// # Examples\n     ///\n@@ -205,6 +207,8 @@ impl<T> Option<T> {\n     /// let x: Option<u32> = None;\n     /// assert_eq!(x.is_none(), true);\n     /// ```\n+    ///\n+    /// [`None`]: #variant.None\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_none(&self) -> bool {\n@@ -269,13 +273,14 @@ impl<T> Option<T> {\n     // Getting to contained values\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Unwraps an option, yielding the content of a `Some`.\n+    /// Unwraps an option, yielding the content of a [`Some`].\n     ///\n     /// # Panics\n     ///\n     /// Panics if the value is a [`None`] with a custom panic message provided by\n     /// `msg`.\n     ///\n+    /// [`Some`]: #variant.Some\n     /// [`None`]: #variant.None\n     ///\n     /// # Examples\n@@ -298,16 +303,17 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Moves the value `v` out of the `Option<T>` if it is `Some(v)`.\n+    /// Moves the value `v` out of the `Option<T>` if it is [`Some(v)`].\n     ///\n     /// In general, because this function may panic, its use is discouraged.\n-    /// Instead, prefer to use pattern matching and handle the `None`\n+    /// Instead, prefer to use pattern matching and handle the [`None`]\n     /// case explicitly.\n     ///\n     /// # Panics\n     ///\n     /// Panics if the self value equals [`None`].\n     ///\n+    /// [`Some(v)`]: #variant.Some\n     /// [`None`]: #variant.None\n     ///\n     /// # Examples\n@@ -395,7 +401,9 @@ impl<T> Option<T> {\n     }\n \n     /// Applies a function to the contained value (if any),\n-    /// or returns a `default` (if not).\n+    /// or returns a [`default`][] (if not).\n+    ///\n+    /// [`default`]: ../default/trait.Default.html#tymethod.default\n     ///\n     /// # Examples\n     ///\n@@ -416,7 +424,9 @@ impl<T> Option<T> {\n     }\n \n     /// Applies a function to the contained value (if any),\n-    /// or computes a `default` (if not).\n+    /// or computes a [`default`][] (if not).\n+    ///\n+    /// [`default`]: ../default/trait.Default.html#tymethod.default\n     ///\n     /// # Examples\n     ///\n@@ -438,12 +448,14 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to\n-    /// [`Ok(v)`] and `None` to [`Err(err)`][Err].\n+    /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to\n+    /// [`Ok(v)`] and [`None`] to [`Err(err)`].\n     ///\n     /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n     /// [`Ok(v)`]: ../../std/result/enum.Result.html#variant.Ok\n-    /// [Err]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`Err(err)`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`None`]: #variant.None\n+    /// [`Some(v)`]: #variant.Some\n     ///\n     /// # Examples\n     ///\n@@ -463,12 +475,14 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping `Some(v)` to\n-    /// [`Ok(v)`] and `None` to [`Err(err())`][Err].\n+    /// Transforms the `Option<T>` into a [`Result<T, E>`], mapping [`Some(v)`] to\n+    /// [`Ok(v)`] and [`None`] to [`Err(err())`].\n     ///\n     /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n     /// [`Ok(v)`]: ../../std/result/enum.Result.html#variant.Ok\n-    /// [Err]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`Err(err())`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`None`]: #variant.None\n+    /// [`Some(v)`]: #variant.Some\n     ///\n     /// # Examples\n     ///\n@@ -534,7 +548,9 @@ impl<T> Option<T> {\n     // Boolean operations on the values, eager and lazy\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Returns `None` if the option is `None`, otherwise returns `optb`.\n+    /// Returns [`None`] if the option is [`None`], otherwise returns `optb`.\n+    ///\n+    /// [`None`]: #variant.None\n     ///\n     /// # Examples\n     ///\n@@ -564,11 +580,13 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns `None` if the option is `None`, otherwise calls `f` with the\n+    /// Returns [`None`] if the option is [`None`], otherwise calls `f` with the\n     /// wrapped value and returns the result.\n     ///\n     /// Some languages call this operation flatmap.\n     ///\n+    /// [`None`]: #variant.None\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -645,9 +663,11 @@ impl<T> Option<T> {\n     // Entry-like operations to insert if None and return a reference\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Inserts `v` into the option if it is `None`, then\n+    /// Inserts `v` into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///\n+    /// [`None`]: #variant.None\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -678,9 +698,11 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Inserts a value computed from `f` into the option if it is `None`, then\n+    /// Inserts a value computed from `f` into the option if it is [`None`], then\n     /// returns a mutable reference to the contained value.\n     ///\n+    /// [`None`]: #variant.None\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -715,7 +737,9 @@ impl<T> Option<T> {\n     // Misc\n     /////////////////////////////////////////////////////////////////////////\n \n-    /// Takes the value out of the option, leaving a `None` in its place.\n+    /// Takes the value out of the option, leaving a [`None`] in its place.\n+    ///\n+    /// [`None`]: #variant.None\n     ///\n     /// # Examples\n     ///\n@@ -757,16 +781,16 @@ impl<'a, T: Clone> Option<&'a T> {\n impl<T: Default> Option<T> {\n     /// Returns the contained value or a default\n     ///\n-    /// Consumes the `self` argument then, if `Some`, returns the contained\n-    /// value, otherwise if `None`, returns the default value for that\n+    /// Consumes the `self` argument then, if [`Some`], returns the contained\n+    /// value, otherwise if [`None`], returns the default value for that\n     /// type.\n     ///\n     /// # Examples\n     ///\n     /// Convert a string to an integer, turning poorly-formed strings\n-    /// into 0 (the default value for integers). `parse` converts\n-    /// a string to any other type that implements `FromStr`, returning\n-    /// `None` on error.\n+    /// into 0 (the default value for integers). [`parse`] converts\n+    /// a string to any other type that implements [`FromStr`], returning\n+    /// [`None`] on error.\n     ///\n     /// ```\n     /// let good_year_from_input = \"1909\";\n@@ -777,6 +801,11 @@ impl<T: Default> Option<T> {\n     /// assert_eq!(1909, good_year);\n     /// assert_eq!(0, bad_year);\n     /// ```\n+    ///\n+    /// [`Some`]: #variant.Some\n+    /// [`None`]: #variant.None\n+    /// [`parse`]: ../../std/primitive.str.html#method.parse\n+    /// [`FromStr`]: ../../std/str/trait.FromStr.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unwrap_or_default(self) -> T {\n@@ -801,7 +830,9 @@ fn expect_failed(msg: &str) -> ! {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> Default for Option<T> {\n-    /// Returns None.\n+    /// Returns [`None`].\n+    ///\n+    /// [`None`]: #variant.None\n     #[inline]\n     fn default() -> Option<T> { None }\n }\n@@ -1020,8 +1051,8 @@ unsafe impl<A> TrustedLen for IntoIter<A> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n-    /// Takes each element in the `Iterator`: if it is `None`, no further\n-    /// elements are taken, and the `None` is returned. Should no `None` occur, a\n+    /// Takes each element in the [`Iterator`]: if it is [`None`], no further\n+    /// elements are taken, and the [`None`] is returned. Should no [`None`] occur, a\n     /// container with the values of each `Option` is returned.\n     ///\n     /// Here is an example which increments every integer in a vector,\n@@ -1037,6 +1068,9 @@ impl<A, V: FromIterator<A>> FromIterator<Option<A>> for Option<V> {\n     /// ).collect();\n     /// assert!(res == Some(vec![2, 3]));\n     /// ```\n+    ///\n+    /// [`Iterator`]: ../iter/trait.Iterator.html\n+    /// [`None`]: enum.Option.html#variant.None\n     #[inline]\n     fn from_iter<I: IntoIterator<Item=Option<A>>>(iter: I) -> Option<V> {\n         // FIXME(#11084): This could be replaced with Iterator::scan when this"}, {"sha": "2b4b5cc73337b7306dc5d6a9d3c3bda7ce9fd7a9", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -30,7 +30,6 @@\n #![feature(core_intrinsics)]\n #![feature(i128_type)]\n #![feature(libc)]\n-#![feature(loop_break_value)]\n #![feature(never_type)]\n #![feature(nonzero)]\n #![feature(quote)]\n@@ -45,6 +44,7 @@\n #![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n #![cfg_attr(stage0, feature(rustc_private))]\n #![cfg_attr(stage0, feature(staged_api))]\n+#![cfg_attr(stage0, feature(loop_break_value))]\n \n #![recursion_limit=\"128\"]\n "}, {"sha": "7ecd7c5412e03920a8297674fa07f8c596b4988f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -23,7 +23,6 @@\n #![deny(warnings)]\n \n #![feature(box_syntax)]\n-#![feature(loop_break_value)]\n #![feature(libc)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n@@ -32,6 +31,7 @@\n #![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n #![cfg_attr(stage0, feature(rustc_private))]\n #![cfg_attr(stage0, feature(staged_api))]\n+#![cfg_attr(stage0, feature(loop_break_value))]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "6f2c73b892567f343f174113bc6ee49b29d7029a", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -76,14 +76,14 @@ This API is completely unstable and subject to change.\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(conservative_impl_trait)]\n-#![feature(loop_break_value)]\n #![feature(never_type)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n \n #![cfg_attr(stage0, unstable(feature = \"rustc_private\", issue = \"27812\"))]\n #![cfg_attr(stage0, feature(rustc_private))]\n #![cfg_attr(stage0, feature(staged_api))]\n+#![cfg_attr(stage0, feature(loop_break_value))]\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "141efe471af5fe1cdae32198ed4ea7add4d767e7", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -41,26 +41,11 @@ use super::Clean;\n ///\n /// The returned value is `None` if the definition could not be inlined,\n /// and `Some` of a vector of items if it was successfully expanded.\n-pub fn try_inline(cx: &DocContext, def: Def, into: Option<ast::Name>)\n+pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name)\n                   -> Option<Vec<clean::Item>> {\n     if def == Def::Err { return None }\n     let did = def.def_id();\n     if did.is_local() { return None }\n-    try_inline_def(cx, def).map(|vec| {\n-        vec.into_iter().map(|mut item| {\n-            match into {\n-                Some(into) if item.name.is_some() => {\n-                    item.name = Some(into.clean(cx));\n-                }\n-                _ => {}\n-            }\n-            item\n-        }).collect()\n-    })\n-}\n-\n-fn try_inline_def(cx: &DocContext, def: Def) -> Option<Vec<clean::Item>> {\n-    let tcx = cx.tcx;\n     let mut ret = Vec::new();\n     let inner = match def {\n         Def::Trait(did) => {\n@@ -112,16 +97,15 @@ fn try_inline_def(cx: &DocContext, def: Def) -> Option<Vec<clean::Item>> {\n         }\n         _ => return None,\n     };\n-    let did = def.def_id();\n     cx.renderinfo.borrow_mut().inlined.insert(did);\n     ret.push(clean::Item {\n-        source: tcx.def_span(did).clean(cx),\n-        name: Some(tcx.item_name(did).to_string()),\n+        source: cx.tcx.def_span(did).clean(cx),\n+        name: Some(name.clean(cx)),\n         attrs: load_attrs(cx, did),\n         inner: inner,\n         visibility: Some(clean::Public),\n-        stability: tcx.lookup_stability(did).clean(cx),\n-        deprecation: tcx.lookup_deprecation(did).clean(cx),\n+        stability: cx.tcx.lookup_stability(did).clean(cx),\n+        deprecation: cx.tcx.lookup_deprecation(did).clean(cx),\n         def_id: did,\n     });\n     Some(ret)\n@@ -463,7 +447,7 @@ fn build_module(cx: &DocContext, did: DefId) -> clean::Module {\n             let def_id = item.def.def_id();\n             if cx.tcx.sess.cstore.visibility(def_id) == ty::Visibility::Public {\n                 if !visited.insert(def_id) { continue }\n-                if let Some(i) = try_inline_def(cx, item.def) {\n+                if let Some(i) = try_inline(cx, item.def, item.name) {\n                     items.extend(i)\n                 }\n             }"}, {"sha": "48d387f812d2548df1868fe197a082531d4ccdd4", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -2618,7 +2618,7 @@ impl Clean<Vec<Item>> for doctree::Import {\n         } else {\n             let name = self.name;\n             if !denied {\n-                if let Some(items) = inline::try_inline(cx, path.def, Some(name)) {\n+                if let Some(items) = inline::try_inline(cx, path.def, name) {\n                     return items;\n                 }\n             }"}, {"sha": "1167c39dba8eef63c9589777b6a0928b4de61029", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 74, "deletions": 30, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -23,18 +23,20 @@ use ptr;\n use slice;\n use str::{self, Utf8Error};\n \n-/// A type representing an owned C-compatible string\n+/// A type representing an owned C-compatible string.\n ///\n /// This type serves the primary purpose of being able to safely generate a\n /// C-compatible string from a Rust byte slice or vector. An instance of this\n /// type is a static guarantee that the underlying bytes contain no interior 0\n /// bytes and the final byte is 0.\n ///\n-/// A `CString` is created from either a byte slice or a byte vector.  A `u8`\n-/// slice can be obtained with the `as_bytes` method.  Slices produced from a\n+/// A `CString` is created from either a byte slice or a byte vector. A [`u8`]\n+/// slice can be obtained with the `as_bytes` method. Slices produced from a\n /// `CString` do *not* contain the trailing nul terminator unless otherwise\n /// specified.\n ///\n+/// [`u8`]: ../primitive.u8.html\n+///\n /// # Examples\n ///\n /// ```no_run\n@@ -81,12 +83,14 @@ pub struct CString {\n ///\n /// Note that this structure is **not** `repr(C)` and is not recommended to be\n /// placed in the signatures of FFI functions. Instead safe wrappers of FFI\n-/// functions may leverage the unsafe `from_ptr` constructor to provide a safe\n+/// functions may leverage the unsafe [`from_ptr`] constructor to provide a safe\n /// interface to other consumers.\n ///\n+/// [`from_ptr`]: #method.from_ptr\n+///\n /// # Examples\n ///\n-/// Inspecting a foreign C string\n+/// Inspecting a foreign C string:\n ///\n /// ```no_run\n /// use std::ffi::CStr;\n@@ -100,7 +104,7 @@ pub struct CString {\n /// }\n /// ```\n ///\n-/// Passing a Rust-originating C string\n+/// Passing a Rust-originating C string:\n ///\n /// ```no_run\n /// use std::ffi::{CString, CStr};\n@@ -116,7 +120,9 @@ pub struct CString {\n /// work(&s);\n /// ```\n ///\n-/// Converting a foreign C string into a Rust `String`\n+/// Converting a foreign C string into a Rust [`String`]:\n+///\n+/// [`String`]: ../string/struct.String.html\n ///\n /// ```no_run\n /// use std::ffi::CStr;\n@@ -142,14 +148,18 @@ pub struct CStr {\n     inner: [c_char]\n }\n \n-/// An error returned from `CString::new` to indicate that a nul byte was found\n+/// An error returned from [`CString::new`] to indicate that a nul byte was found\n /// in the vector provided.\n+///\n+/// [`CString::new`]: struct.CString.html#method.new\n #[derive(Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct NulError(usize, Vec<u8>);\n \n-/// An error returned from `CStr::from_bytes_with_nul` to indicate that a nul\n+/// An error returned from [`CStr::from_bytes_with_nul`] to indicate that a nul\n /// byte was found too early in the slice provided or one wasn't found at all.\n+///\n+/// [`CStr::from_bytes_with_nul`]: struct.CStr.html#method.from_bytes_with_nul\n #[derive(Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n pub struct FromBytesWithNulError {\n@@ -175,8 +185,10 @@ impl FromBytesWithNulError {\n     }\n }\n \n-/// An error returned from `CString::into_string` to indicate that a UTF-8 error\n+/// An error returned from [`CString::into_string`] to indicate that a UTF-8 error\n /// was encountered during the conversion.\n+///\n+/// [`CString::into_string`]: struct.CString.html#method.into_string\n #[derive(Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n pub struct IntoStringError {\n@@ -224,10 +236,12 @@ impl CString {\n     /// Creates a C-compatible string from a byte vector without checking for\n     /// interior 0 bytes.\n     ///\n-    /// This method is equivalent to `new` except that no runtime assertion\n+    /// This method is equivalent to [`new`] except that no runtime assertion\n     /// is made that `v` contains no 0 bytes, and it requires an actual\n     /// byte vector, not anything that can be converted to one with Into.\n     ///\n+    /// [`new`]: #method.new\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -252,9 +266,11 @@ impl CString {\n     /// # Safety\n     ///\n     /// This should only ever be called with a pointer that was earlier\n-    /// obtained by calling `into_raw` on a `CString`. Other usage (e.g. trying to take\n+    /// obtained by calling [`into_raw`] on a `CString`. Other usage (e.g. trying to take\n     /// ownership of a string that was allocated by foreign code) is likely to lead\n     /// to undefined behavior or allocator corruption.\n+    ///\n+    /// [`into_raw`]: #method.into_raw\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub unsafe fn from_raw(ptr: *mut c_char) -> CString {\n         let len = libc::strlen(ptr) + 1; // Including the NUL byte\n@@ -265,19 +281,23 @@ impl CString {\n     /// Transfers ownership of the string to a C caller.\n     ///\n     /// The pointer must be returned to Rust and reconstituted using\n-    /// `from_raw` to be properly deallocated. Specifically, one\n+    /// [`from_raw`] to be properly deallocated. Specifically, one\n     /// should *not* use the standard C `free` function to deallocate\n     /// this string.\n     ///\n-    /// Failure to call `from_raw` will lead to a memory leak.\n+    /// Failure to call [`from_raw`] will lead to a memory leak.\n+    ///\n+    /// [`from_raw`]: #method.from_raw\n     #[stable(feature = \"cstr_memory\", since = \"1.4.0\")]\n     pub fn into_raw(self) -> *mut c_char {\n         Box::into_raw(self.into_inner()) as *mut c_char\n     }\n \n-    /// Converts the `CString` into a `String` if it contains valid Unicode data.\n+    /// Converts the `CString` into a [`String`] if it contains valid Unicode data.\n     ///\n     /// On failure, ownership of the original `CString` is returned.\n+    ///\n+    /// [`String`]: ../string/struct.String.html\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_string(self) -> Result<String, IntoStringError> {\n         String::from_utf8(self.into_bytes())\n@@ -299,8 +319,10 @@ impl CString {\n         vec\n     }\n \n-    /// Equivalent to the `into_bytes` function except that the returned vector\n+    /// Equivalent to the [`into_bytes`] function except that the returned vector\n     /// includes the trailing nul byte.\n+    ///\n+    /// [`into_bytes`]: #method.into_bytes\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_bytes_with_nul(self) -> Vec<u8> {\n         self.into_inner().into_vec()\n@@ -315,26 +337,34 @@ impl CString {\n         &self.inner[..self.inner.len() - 1]\n     }\n \n-    /// Equivalent to the `as_bytes` function except that the returned slice\n+    /// Equivalent to the [`as_bytes`] function except that the returned slice\n     /// includes the trailing nul byte.\n+    ///\n+    /// [`as_bytes`]: #method.as_bytes\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_bytes_with_nul(&self) -> &[u8] {\n         &self.inner\n     }\n \n-    /// Extracts a `CStr` slice containing the entire string.\n+    /// Extracts a [`CStr`] slice containing the entire string.\n+    ///\n+    /// [`CStr`]: struct.CStr.html\n     #[unstable(feature = \"as_c_str\", issue = \"40380\")]\n     pub fn as_c_str(&self) -> &CStr {\n         &*self\n     }\n \n-    /// Converts this `CString` into a boxed `CStr`.\n+    /// Converts this `CString` into a boxed [`CStr`].\n+    ///\n+    /// [`CStr`]: struct.CStr.html\n     #[unstable(feature = \"into_boxed_c_str\", issue = \"40380\")]\n     pub fn into_boxed_c_str(self) -> Box<CStr> {\n         unsafe { mem::transmute(self.into_inner()) }\n     }\n \n-    // Bypass \"move out of struct which implements `Drop` trait\" restriction.\n+    // Bypass \"move out of struct which implements [`Drop`] trait\" restriction.\n+    ///\n+    /// [`Drop`]: ../ops/trait.Drop.html\n     fn into_inner(self) -> Box<[u8]> {\n         unsafe {\n             let result = ptr::read(&self.inner);\n@@ -443,7 +473,9 @@ impl Default for Box<CStr> {\n \n impl NulError {\n     /// Returns the position of the nul byte in the slice that was provided to\n-    /// `CString::new`.\n+    /// [`CString::new`].\n+    ///\n+    /// [`CString::new`]: struct.CString.html#method.new\n     ///\n     /// # Examples\n     ///\n@@ -518,8 +550,10 @@ impl fmt::Display for FromBytesWithNulError {\n }\n \n impl IntoStringError {\n-    /// Consumes this error, returning original `CString` which generated the\n+    /// Consumes this error, returning original [`CString`] which generated the\n     /// error.\n+    ///\n+    /// [`CString`]: struct.CString.html\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n     pub fn into_cstring(self) -> CString {\n         self.inner\n@@ -557,9 +591,9 @@ impl CStr {\n     /// allows inspection and interoperation of non-owned C strings. This method\n     /// is unsafe for a number of reasons:\n     ///\n-    /// * There is no guarantee to the validity of `ptr`\n+    /// * There is no guarantee to the validity of `ptr`.\n     /// * The returned lifetime is not guaranteed to be the actual lifetime of\n-    ///   `ptr`\n+    ///   `ptr`.\n     /// * There is no guarantee that the memory pointed to by `ptr` contains a\n     ///   valid nul terminator byte at the end of the string.\n     ///\n@@ -703,26 +737,30 @@ impl CStr {\n \n     /// Converts this C string to a byte slice containing the trailing 0 byte.\n     ///\n-    /// This function is the equivalent of `to_bytes` except that it will retain\n+    /// This function is the equivalent of [`to_bytes`] except that it will retain\n     /// the trailing nul instead of chopping it off.\n     ///\n     /// > **Note**: This method is currently implemented as a 0-cost cast, but\n     /// > it is planned to alter its definition in the future to perform the\n     /// > length calculation whenever this method is called.\n+    ///\n+    /// [`to_bytes`]: #method.to_bytes\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes_with_nul(&self) -> &[u8] {\n         unsafe { mem::transmute(&self.inner) }\n     }\n \n-    /// Yields a `&str` slice if the `CStr` contains valid UTF-8.\n+    /// Yields a [`&str`] slice if the `CStr` contains valid UTF-8.\n     ///\n     /// This function will calculate the length of this string and check for\n-    /// UTF-8 validity, and then return the `&str` if it's valid.\n+    /// UTF-8 validity, and then return the [`&str`] if it's valid.\n     ///\n     /// > **Note**: This method is currently implemented to check for validity\n     /// > after a 0-cost cast, but it is planned to alter its definition in the\n     /// > future to perform the length calculation in addition to the UTF-8\n     /// > check whenever this method is called.\n+    ///\n+    /// [`&str`]: ../primitive.str.html\n     #[stable(feature = \"cstr_to_str\", since = \"1.4.0\")]\n     pub fn to_str(&self) -> Result<&str, str::Utf8Error> {\n         // NB: When CStr is changed to perform the length check in .to_bytes()\n@@ -732,23 +770,29 @@ impl CStr {\n         str::from_utf8(self.to_bytes())\n     }\n \n-    /// Converts a `CStr` into a `Cow<str>`.\n+    /// Converts a `CStr` into a [`Cow`]`<`[`str`]`>`.\n     ///\n     /// This function will calculate the length of this string (which normally\n     /// requires a linear amount of work to be done) and then return the\n-    /// resulting slice as a `Cow<str>`, replacing any invalid UTF-8 sequences\n+    /// resulting slice as a [`Cow`]`<`[`str`]`>`, replacing any invalid UTF-8 sequences\n     /// with `U+FFFD REPLACEMENT CHARACTER`.\n     ///\n     /// > **Note**: This method is currently implemented to check for validity\n     /// > after a 0-cost cast, but it is planned to alter its definition in the\n     /// > future to perform the length calculation in addition to the UTF-8\n     /// > check whenever this method is called.\n+    ///\n+    /// [`Cow`]: ../borrow/enum.Cow.html\n+    /// [`str`]: ../primitive.str.html\n     #[stable(feature = \"cstr_to_str\", since = \"1.4.0\")]\n     pub fn to_string_lossy(&self) -> Cow<str> {\n         String::from_utf8_lossy(self.to_bytes())\n     }\n \n-    /// Converts a `Box<CStr>` into a `CString` without copying or allocating.\n+    /// Converts a [`Box`]`<CStr>` into a [`CString`] without copying or allocating.\n+    ///\n+    /// [`Box`]: ../boxed/struct.Box.html\n+    /// [`CString`]: struct.CString.html\n     #[unstable(feature = \"into_boxed_c_str\", issue = \"40380\")]\n     pub fn into_c_string(self: Box<CStr>) -> CString {\n         unsafe { mem::transmute(self) }"}, {"sha": "e1b7d4681ad160c38c613af52e931c48b0a5ff49", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -297,9 +297,6 @@ declare_features! (\n \n     (active, use_extern_macros, \"1.15.0\", Some(35896)),\n \n-    // Allows `break {expr}` with a value inside `loop`s.\n-    (active, loop_break_value, \"1.14.0\", Some(37339)),\n-\n     // Allows #[target_feature(...)]\n     (active, target_feature, \"1.15.0\", None),\n \n@@ -423,6 +420,8 @@ declare_features! (\n     (accepted, pub_restricted, \"1.18.0\", Some(32409)),\n     // The #![windows_subsystem] attribute\n     (accepted, windows_subsystem, \"1.18.0\", Some(37499)),\n+    // Allows `break {expr}` with a value inside `loop`s.\n+    (accepted, loop_break_value, \"1.19.0\", Some(37339)),\n );\n // If you change this, please modify src/doc/unstable-book as well. You must\n // move that documentation into the relevant place in the other docs, and\n@@ -1301,10 +1300,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                     }\n                 }\n             }\n-            ast::ExprKind::Break(_, Some(_)) => {\n-                gate_feature_post!(&self, loop_break_value, e.span,\n-                                   \"`break` with a value is experimental\");\n-            }\n             ast::ExprKind::Lit(ref lit) => {\n                 if let ast::LitKind::Int(_, ref ty) = lit.node {\n                     match *ty {"}, {"sha": "63de780e109eb6b0b38888d1dc6e38a1df429cff", "filename": "src/test/compile-fail/isssue-38821.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftest%2Fcompile-fail%2Fisssue-38821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftest%2Fcompile-fail%2Fisssue-38821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fisssue-38821.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Nullable<T: NotNull>(T);\n+\n+pub trait NotNull {}\n+\n+pub trait IntoNullable {\n+    type Nullable;\n+}\n+\n+impl<T: NotNull> IntoNullable for T {\n+    type Nullable = Nullable<T>;\n+}\n+\n+impl<T: NotNull> IntoNullable for Nullable<T> {\n+    type Nullable = Nullable<T>;\n+}\n+\n+pub trait Expression {\n+    type SqlType;\n+}\n+\n+pub trait Column: Expression {}\n+\n+#[derive(Debug, Copy, Clone)]\n+//~^ ERROR the trait bound `<Col as Expression>::SqlType: NotNull` is not satisfied\n+pub enum ColumnInsertValue<Col, Expr> where\n+    Col: Column,\n+    Expr: Expression<SqlType=<Col::SqlType as IntoNullable>::Nullable>,\n+{\n+    Expression(Col, Expr),\n+    Default(Col),\n+}\n+\n+fn main() {}"}, {"sha": "938f7fba2a0324320b3616e4b68e8acc66ec5ce9", "filename": "src/test/compile-fail/loop-break-value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftest%2Fcompile-fail%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftest%2Fcompile-fail%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Floop-break-value.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(loop_break_value)]\n #![feature(never_type)]\n \n fn main() {"}, {"sha": "723a98bcdfa0d85a894e7aea8d20739afdc0aff0", "filename": "src/test/run-pass/diverging-fallback-control-flow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiverging-fallback-control-flow.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -15,7 +15,6 @@\n // like to revisit these and potentially change them. --nmatsakis\n \n #![feature(never_type)]\n-#![feature(loop_break_value)]\n \n trait BadDefault {\n     fn default() -> Self;"}, {"sha": "1d5c83bc20d9554c3244eaa3d7513d1982d7f255", "filename": "src/test/run-pass/loop-break-value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftest%2Frun-pass%2Floop-break-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftest%2Frun-pass%2Floop-break-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-value.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(loop_break_value)]\n #![feature(never_type)]\n \n #[allow(unused)]"}, {"sha": "9f7a259a7db03ace211c67b828a26873189beae1", "filename": "src/test/rustdoc/inline_cross/auxiliary/renamed-via-module.rs", "status": "renamed", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Frenamed-via-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Frenamed-via-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Frenamed-via-module.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,8 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n-    loop {\n-        break 123; //~ ERROR `break` with a value is experimental\n+#![crate_name = \"foo\"]\n+\n+pub mod iter {\n+    mod range {\n+        pub struct StepBy;\n     }\n+    pub use self::range::StepBy as DeprecatedStepBy;\n+    pub struct StepBy;\n }", "previous_filename": "src/test/compile-fail/feature-gate-loop-break-value.rs"}, {"sha": "a4e01543761425ad82fe175a30b09f9596367d03", "filename": "src/test/rustdoc/inline_cross/renamed-via-module.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftest%2Frustdoc%2Finline_cross%2Frenamed-via-module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftest%2Frustdoc%2Finline_cross%2Frenamed-via-module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Frenamed-via-module.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:renamed-via-module.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+#![crate_name = \"bar\"]\n+\n+extern crate foo;\n+\n+// @has foo/iter/index.html\n+// @has - '//a/[@href=\"struct.DeprecatedStepBy.html\"]' \"DeprecatedStepBy\"\n+// @has - '//a/[@href=\"struct.StepBy.html\"]' \"StepBy\"\n+// @has foo/iter/struct.DeprecatedStepBy.html\n+// @has - '//h1' \"Struct foo::iter::DeprecatedStepBy\"\n+// @has foo/iter/struct.StepBy.html\n+// @has - '//h1' \"Struct foo::iter::StepBy\"\n+\n+// @has bar/iter/index.html\n+// @has - '//a/[@href=\"struct.DeprecatedStepBy.html\"]' \"DeprecatedStepBy\"\n+// @has - '//a/[@href=\"struct.StepBy.html\"]' \"StepBy\"\n+// @has bar/iter/struct.DeprecatedStepBy.html\n+// @has - '//h1' \"Struct bar::iter::DeprecatedStepBy\"\n+// @has bar/iter/struct.StepBy.html\n+// @has - '//h1' \"Struct bar::iter::StepBy\"\n+pub use foo::iter;"}, {"sha": "b52d540fd75119dc5d24c87f7ca06f9888f5a4ab", "filename": "src/test/ui/loop-break-value-no-repeat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftest%2Fui%2Floop-break-value-no-repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftest%2Fui%2Floop-break-value-no-repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floop-break-value-no-repeat.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(loop_break_value)]\n #![allow(unused_variables)]\n \n use std::ptr;"}, {"sha": "c154ea6f8c2d68e76a7ff04e24ad6b2a5b2b5017", "filename": "src/test/ui/loop-break-value-no-repeat.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftest%2Fui%2Floop-break-value-no-repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftest%2Fui%2Floop-break-value-no-repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floop-break-value-no-repeat.stderr?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -1,7 +1,7 @@\n error[E0571]: `break` with value from a `for` loop\n-  --> $DIR/loop-break-value-no-repeat.rs:23:9\n+  --> $DIR/loop-break-value-no-repeat.rs:22:9\n    |\n-23 |         break 22\n+22 |         break 22\n    |         ^^^^^^^^ can only break with a value inside `loop`\n \n error: aborting due to previous error"}, {"sha": "1bec6f6af83814c6f725ff3b529602c040b36a59", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/852b7cb91ed44f6cc77f855bd8281da4accbd2fb/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=852b7cb91ed44f6cc77f855bd8281da4accbd2fb", "patch": "@@ -2415,11 +2415,11 @@ actual:\\n\\\n         println!(\"expected {}:\\n{}\\n\", kind, expected);\n         println!(\"diff of {}:\\n\", kind);\n \n-        for diff in diff::lines(actual, expected) {\n+        for diff in diff::lines(expected, actual) {\n             match diff {\n-                diff::Result::Left(l)    => println!(\"+{}\", l),\n+                diff::Result::Left(l)    => println!(\"-{}\", l),\n                 diff::Result::Both(l, _) => println!(\" {}\", l),\n-                diff::Result::Right(r)   => println!(\"-{}\", r),\n+                diff::Result::Right(r)   => println!(\"+{}\", r),\n             }\n         }\n "}]}