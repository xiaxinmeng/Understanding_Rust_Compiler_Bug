{"sha": "27a0269501637d7fa27356caa9c13ab66fe5c8b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YTAyNjk1MDE2MzdkN2ZhMjczNTZjYWE5YzEzYWI2NmZlNWM4YjA=", "commit": {"author": {"name": "Leah Hanson", "email": "astrieanna@gmail.com", "date": "2013-04-13T02:15:56Z"}, "committer": {"name": "Leah Hanson", "email": "astrieanna@gmail.com", "date": "2013-04-13T02:15:56Z"}, "message": "Add comments for the implementations of from_base64 and to_base64 for .", "tree": {"sha": "c0702774578a5c0686e777b13fab70f9ec9fc769", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0702774578a5c0686e777b13fab70f9ec9fc769"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27a0269501637d7fa27356caa9c13ab66fe5c8b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27a0269501637d7fa27356caa9c13ab66fe5c8b0", "html_url": "https://github.com/rust-lang/rust/commit/27a0269501637d7fa27356caa9c13ab66fe5c8b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27a0269501637d7fa27356caa9c13ab66fe5c8b0/comments", "author": {"login": "astrieanna", "id": 1205394, "node_id": "MDQ6VXNlcjEyMDUzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1205394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/astrieanna", "html_url": "https://github.com/astrieanna", "followers_url": "https://api.github.com/users/astrieanna/followers", "following_url": "https://api.github.com/users/astrieanna/following{/other_user}", "gists_url": "https://api.github.com/users/astrieanna/gists{/gist_id}", "starred_url": "https://api.github.com/users/astrieanna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/astrieanna/subscriptions", "organizations_url": "https://api.github.com/users/astrieanna/orgs", "repos_url": "https://api.github.com/users/astrieanna/repos", "events_url": "https://api.github.com/users/astrieanna/events{/privacy}", "received_events_url": "https://api.github.com/users/astrieanna/received_events", "type": "User", "site_admin": false}, "committer": {"login": "astrieanna", "id": 1205394, "node_id": "MDQ6VXNlcjEyMDUzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1205394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/astrieanna", "html_url": "https://github.com/astrieanna", "followers_url": "https://api.github.com/users/astrieanna/followers", "following_url": "https://api.github.com/users/astrieanna/following{/other_user}", "gists_url": "https://api.github.com/users/astrieanna/gists{/gist_id}", "starred_url": "https://api.github.com/users/astrieanna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/astrieanna/subscriptions", "organizations_url": "https://api.github.com/users/astrieanna/orgs", "repos_url": "https://api.github.com/users/astrieanna/repos", "events_url": "https://api.github.com/users/astrieanna/events{/privacy}", "received_events_url": "https://api.github.com/users/astrieanna/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ec2d99bbd1a15a8f278b3cb82ddfa9ebafa96b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec2d99bbd1a15a8f278b3cb82ddfa9ebafa96b3", "html_url": "https://github.com/rust-lang/rust/commit/2ec2d99bbd1a15a8f278b3cb82ddfa9ebafa96b3"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "618f5ecccf73ca49b05983ce1108e311447c922d", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/27a0269501637d7fa27356caa9c13ab66fe5c8b0/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a0269501637d7fa27356caa9c13ab66fe5c8b0/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=27a0269501637d7fa27356caa9c13ab66fe5c8b0", "patch": "@@ -26,6 +26,21 @@ static CHARS: [char, ..64] = [\n     '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'\n ];\n \n+/**\n+ * Turn a vector of `u8` bytes into a string representing them in base64.\n+ *\n+ * *Example*:\n+ *\n+ * ~~~~\n+ * extern mod std;\n+ * use std::base64::ToBase64;\n+ *\n+ * fn main () {\n+ *   let str = [52,32].to_base64();\n+ *   println(fmt!(\"%s\", str));\n+ * }\n+ * ~~~~\n+ */\n impl<'self> ToBase64 for &'self [u8] {\n     fn to_base64(&self) -> ~str {\n         let mut s = ~\"\";\n@@ -102,6 +117,25 @@ pub trait FromBase64 {\n     fn from_base64(&self) -> ~[u8];\n }\n \n+/**\n+ * Turn a vector of `u8`s representing characters\n+ * encoding byte values in base64 into the vector of `u8` byte values.\n+ *\n+ * *Example*:\n+ *\n+ * ~~~~\n+ * extern mod std;\n+ * use std::base64::ToBase64;\n+ * use std::base64::FromBase64;\n+ *\n+ * fn main () {\n+ *   let str = [52,32].to_base64();\n+ *   println(fmt!(\"%s\", str));\n+ *   let bytes = str.from_base64();\n+ *   println(fmt!(\"%?\",bytes));\n+ * }\n+ * ~~~~\n+ */\n impl FromBase64 for ~[u8] {\n     fn from_base64(&self) -> ~[u8] {\n         if self.len() % 4u != 0u { fail!(~\"invalid base64 length\"); }"}]}