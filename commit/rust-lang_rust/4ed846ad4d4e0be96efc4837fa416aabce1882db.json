{"sha": "4ed846ad4d4e0be96efc4837fa416aabce1882db", "node_id": "C_kwDOAAsO6NoAKDRlZDg0NmFkNGQ0ZTBiZTk2ZWZjNDgzN2ZhNDE2YWFiY2UxODgyZGI", "commit": {"author": {"name": "Javier Blazquez", "email": "jblazquez@riotgames.com", "date": "2021-10-11T19:09:32Z"}, "committer": {"name": "Javier Blazquez", "email": "jblazquez@riotgames.com", "date": "2021-10-11T19:09:32Z"}, "message": "Add -Z no-unique-section-names to reduce ELF header bloat.\n\nThis change adds a new compiler flag that can help reduce the size of\nELF binaries that contain many functions.\n\nBy default, when enabling function sections (which is the default for most\ntargets), the LLVM backend will generate different section names for each\nfunction. For example, a function \"func\" would generate a section called\n\".text.func\". Normally this is fine because the linker will merge all those\nsections into a single one in the binary. However, starting with LLVM 12\n(llvm/llvm-project@ee5d1a0), the backend will\nalso generate unique section names for exception handling, resulting in\nthousands of \".gcc_except_table.*\" sections ending up in the final binary\nbecause some linkers don't currently merge or strip these EH sections.\nThis can bloat the ELF headers and string table significantly in\nbinaries that contain many functions.\n\nThe new option is analogous to Clang's -fno-unique-section-names, and\ninstructs LLVM to generate the same \".text\" and \".gcc_except_table\"\nsection for each function, resulting in smaller object files and\npotentially a smaller final binary.", "tree": {"sha": "6e7b9ea268fc26c35e3c3da2071e2b63e158bb1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e7b9ea268fc26c35e3c3da2071e2b63e158bb1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ed846ad4d4e0be96efc4837fa416aabce1882db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ed846ad4d4e0be96efc4837fa416aabce1882db", "html_url": "https://github.com/rust-lang/rust/commit/4ed846ad4d4e0be96efc4837fa416aabce1882db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ed846ad4d4e0be96efc4837fa416aabce1882db/comments", "author": {"login": "jblazquez", "id": 5482684, "node_id": "MDQ6VXNlcjU0ODI2ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5482684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jblazquez", "html_url": "https://github.com/jblazquez", "followers_url": "https://api.github.com/users/jblazquez/followers", "following_url": "https://api.github.com/users/jblazquez/following{/other_user}", "gists_url": "https://api.github.com/users/jblazquez/gists{/gist_id}", "starred_url": "https://api.github.com/users/jblazquez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jblazquez/subscriptions", "organizations_url": "https://api.github.com/users/jblazquez/orgs", "repos_url": "https://api.github.com/users/jblazquez/repos", "events_url": "https://api.github.com/users/jblazquez/events{/privacy}", "received_events_url": "https://api.github.com/users/jblazquez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jblazquez", "id": 5482684, "node_id": "MDQ6VXNlcjU0ODI2ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5482684?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jblazquez", "html_url": "https://github.com/jblazquez", "followers_url": "https://api.github.com/users/jblazquez/followers", "following_url": "https://api.github.com/users/jblazquez/following{/other_user}", "gists_url": "https://api.github.com/users/jblazquez/gists{/gist_id}", "starred_url": "https://api.github.com/users/jblazquez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jblazquez/subscriptions", "organizations_url": "https://api.github.com/users/jblazquez/orgs", "repos_url": "https://api.github.com/users/jblazquez/repos", "events_url": "https://api.github.com/users/jblazquez/events{/privacy}", "received_events_url": "https://api.github.com/users/jblazquez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25ec8273855fde2d72ae877b397e054de5300e10", "url": "https://api.github.com/repos/rust-lang/rust/commits/25ec8273855fde2d72ae877b397e054de5300e10", "html_url": "https://github.com/rust-lang/rust/commit/25ec8273855fde2d72ae877b397e054de5300e10"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "d6c122aabdbb51e50d1e55bf04f3ff082b043ba7", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ed846ad4d4e0be96efc4837fa416aabce1882db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed846ad4d4e0be96efc4837fa416aabce1882db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=4ed846ad4d4e0be96efc4837fa416aabce1882db", "patch": "@@ -161,6 +161,7 @@ pub fn target_machine_factory(\n     let ffunction_sections =\n         sess.opts.debugging_opts.function_sections.unwrap_or(sess.target.function_sections);\n     let fdata_sections = ffunction_sections;\n+    let funique_section_names = !sess.opts.debugging_opts.no_unique_section_names;\n \n     let code_model = to_llvm_code_model(sess.code_model());\n \n@@ -205,6 +206,7 @@ pub fn target_machine_factory(\n                 use_softfp,\n                 ffunction_sections,\n                 fdata_sections,\n+                funique_section_names,\n                 trap_unreachable,\n                 singlethread,\n                 asm_comments,"}, {"sha": "3e7048e7b80db707aa4a5b931ed93867c22835f9", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ed846ad4d4e0be96efc4837fa416aabce1882db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed846ad4d4e0be96efc4837fa416aabce1882db/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=4ed846ad4d4e0be96efc4837fa416aabce1882db", "patch": "@@ -2153,6 +2153,7 @@ extern \"C\" {\n         UseSoftFP: bool,\n         FunctionSections: bool,\n         DataSections: bool,\n+        UniqueSectionNames: bool,\n         TrapUnreachable: bool,\n         Singlethread: bool,\n         AsmComments: bool,"}, {"sha": "021afde8c62ac317125863e31a3d65243edbedf4", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ed846ad4d4e0be96efc4837fa416aabce1882db/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed846ad4d4e0be96efc4837fa416aabce1882db/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=4ed846ad4d4e0be96efc4837fa416aabce1882db", "patch": "@@ -740,6 +740,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(new_llvm_pass_manager, Some(true));\n     tracked!(no_generate_arange_section, true);\n     tracked!(no_link, true);\n+    tracked!(no_unique_section_names, true);\n     tracked!(no_profiler_runtime, true);\n     tracked!(osx_rpath_install_name, true);\n     tracked!(panic_abort_tests, true);"}, {"sha": "42d2c13b783d52a6c3573cdce611551a0e46611f", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ed846ad4d4e0be96efc4837fa416aabce1882db/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4ed846ad4d4e0be96efc4837fa416aabce1882db/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=4ed846ad4d4e0be96efc4837fa416aabce1882db", "patch": "@@ -459,6 +459,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     LLVMRustCodeGenOptLevel RustOptLevel, bool UseSoftFloat,\n     bool FunctionSections,\n     bool DataSections,\n+    bool UniqueSectionNames,\n     bool TrapUnreachable,\n     bool Singlethread,\n     bool AsmComments,\n@@ -488,6 +489,7 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n   }\n   Options.DataSections = DataSections;\n   Options.FunctionSections = FunctionSections;\n+  Options.UniqueSectionNames = UniqueSectionNames;\n   Options.MCOptions.AsmVerbose = AsmComments;\n   Options.MCOptions.PreserveAsmComments = AsmComments;\n   Options.MCOptions.ABIName = ABIStr;"}, {"sha": "b76ea98e637da4b8b69424ed56cda89e29ae327d", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4ed846ad4d4e0be96efc4837fa416aabce1882db/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ed846ad4d4e0be96efc4837fa416aabce1882db/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=4ed846ad4d4e0be96efc4837fa416aabce1882db", "patch": "@@ -1188,6 +1188,8 @@ options! {\n         \"compile without linking\"),\n     no_parallel_llvm: bool = (false, parse_no_flag, [UNTRACKED],\n         \"run LLVM in non-parallel mode (while keeping codegen-units and ThinLTO)\"),\n+    no_unique_section_names: bool = (false, parse_bool, [TRACKED],\n+        \"do not use unique names for text and data sections when -Z function-sections is used\"),\n     no_profiler_runtime: bool = (false, parse_no_flag, [TRACKED],\n         \"prevent automatic injection of the profiler_builtins crate\"),\n     normalize_docs: bool = (false, parse_bool, [TRACKED],"}, {"sha": "5c1c7cda7013e9615259fa53bd090306435180f7", "filename": "src/doc/unstable-book/src/compiler-flags/no-unique-section-names.md", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ed846ad4d4e0be96efc4837fa416aabce1882db/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fno-unique-section-names.md", "raw_url": "https://github.com/rust-lang/rust/raw/4ed846ad4d4e0be96efc4837fa416aabce1882db/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fno-unique-section-names.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fno-unique-section-names.md?ref=4ed846ad4d4e0be96efc4837fa416aabce1882db", "patch": "@@ -0,0 +1,9 @@\n+# `no-unique-section-names`\n+\n+------------------------\n+\n+This flag currently applies only to ELF-based targets using the LLVM codegen backend. It prevents the generation of unique ELF section names for each separate code and data item when `-Z function-sections` is also in use, which is the default for most targets. This option can reduce the size of object files, and depending on the linker, the final ELF binary as well.\n+\n+For example, a function `func` will by default generate a code section called `.text.func`. Normally this is fine because the linker will merge all those `.text.*` sections into a single one in the binary. However, starting with [LLVM 12](https://github.com/llvm/llvm-project/commit/ee5d1a04), the backend will also generate unique section names for exception handling, so you would see a section name of `.gcc_except_table.func` in the object file and potentially in the final ELF binary, which could add significant bloat to programs that contain many functions.\n+\n+This flag instructs LLVM to use the same `.text` and `.gcc_except_table` section name for each function, and it is analogous to Clang's `-fno-unique-section-names` option."}]}