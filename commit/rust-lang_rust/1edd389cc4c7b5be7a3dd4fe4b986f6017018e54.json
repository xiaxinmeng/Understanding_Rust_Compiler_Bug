{"sha": "1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZGQzODljYzRjN2I1YmU3YTNkZDRmZTRiOTg2ZjYwMTcwMThlNTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-23T18:48:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-23T18:48:02Z"}, "message": "Auto merge of #70330 - Centril:rollup-ts0clvx, r=Centril\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #68700 (Add Wake trait for safe construction of Wakers.)\n - #69494 (Stabilize --crate-version option in rustdoc)\n - #70080 (rustc_mir: remove extra space when pretty-printing MIR.)\n - #70195 (Add test for issue #53275)\n - #70199 (Revised span-to-lines conversion to produce an empty vec on DUMMY_SP.)\n - #70299 (add err_machine_stop macro)\n - #70300 (Reword unused variable warning)\n - #70315 (Rename remaining occurences of Void to Opaque.)\n - #70318 (Split long derive lists into two derive attributes.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "fa016e97f3653421cb503f322cfff32876f5a2bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa016e97f3653421cb503f322cfff32876f5a2bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "html_url": "https://github.com/rust-lang/rust/commit/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55299b2ba99432d10f925cd28ff52fe397577371", "url": "https://api.github.com/repos/rust-lang/rust/commits/55299b2ba99432d10f925cd28ff52fe397577371", "html_url": "https://github.com/rust-lang/rust/commit/55299b2ba99432d10f925cd28ff52fe397577371"}, {"sha": "5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01", "html_url": "https://github.com/rust-lang/rust/commit/5b29348cfe67f5ec7b81dbf9cde03eb7a9c8ff01"}], "stats": {"total": 882, "additions": 296, "deletions": 586}, "files": [{"sha": "ba644e611182779520548a59fd96ee7e2febb735", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -52,12 +52,7 @@ fn main() {\n     // Bootstrap's Cargo-command builder sets this variable to the current Rust version; let's pick\n     // it up so we can make rustdoc print this into the docs\n     if let Some(version) = env::var_os(\"RUSTDOC_CRATE_VERSION\") {\n-        // This \"unstable-options\" can be removed when `--crate-version` is stabilized\n-        if !has_unstable {\n-            cmd.arg(\"-Z\").arg(\"unstable-options\");\n-        }\n         cmd.arg(\"--crate-version\").arg(version);\n-        has_unstable = true;\n     }\n \n     // Needed to be able to run all rustdoc tests."}, {"sha": "04da3cc1015b82e3540dc75923f09c3cf142be64", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -313,6 +313,9 @@ impl Step for Standalone {\n             }\n \n             let mut cmd = builder.rustdoc_cmd(compiler);\n+            // Needed for --index-page flag\n+            cmd.arg(\"-Z\").arg(\"unstable-options\");\n+\n             cmd.arg(\"--html-after-content\")\n                 .arg(&footer)\n                 .arg(\"--html-before-content\")\n@@ -395,7 +398,7 @@ impl Step for Std {\n \n             // Keep a whitelist so we do not build internal stdlib crates, these will be\n             // build by the rustc step later if enabled.\n-            cargo.arg(\"-Z\").arg(\"unstable-options\").arg(\"-p\").arg(package);\n+            cargo.arg(\"-p\").arg(package);\n             // Create all crate output directories first to make sure rustdoc uses\n             // relative links.\n             // FIXME: Cargo should probably do this itself.\n@@ -406,6 +409,8 @@ impl Step for Std {\n                 .arg(\"rust.css\")\n                 .arg(\"--markdown-no-toc\")\n                 .arg(\"--generate-redirect-pages\")\n+                .arg(\"-Z\")\n+                .arg(\"unstable-options\")\n                 .arg(\"--resource-suffix\")\n                 .arg(crate::channel::CFG_RELEASE_NUM)\n                 .arg(\"--index-page\")"}, {"sha": "c46380f1505dfe14a886d6bc46a5ad89b4055d88", "filename": "src/doc/rustc/src/json.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Fdoc%2Frustc%2Fsrc%2Fjson.md", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Fdoc%2Frustc%2Fsrc%2Fjson.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fjson.md?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -168,7 +168,7 @@ Diagnostics have the following format:\n             \"rendered\": null\n         },\n         {\n-            \"message\": \"consider prefixing with an underscore\",\n+            \"message\": \"if this is intentional, prefix it with an underscore\",\n             \"code\": null,\n             \"level\": \"help\",\n             \"spans\": [\n@@ -201,7 +201,7 @@ Diagnostics have the following format:\n     /* Optional string of the rendered version of the diagnostic as displayed\n        by rustc. Note that this may be influenced by the `--json` flag.\n     */\n-    \"rendered\": \"warning: unused variable: `x`\\n --> lib.rs:2:9\\n  |\\n2 |     let x = 123;\\n  |         ^ help: consider prefixing with an underscore: `_x`\\n  |\\n  = note: `#[warn(unused_variables)]` on by default\\n\\n\"\n+    \"rendered\": \"warning: unused variable: `x`\\n --> lib.rs:2:9\\n  |\\n2 |     let x = 123;\\n  |         ^ help: if this is intentional, prefix it with an underscore: `_x`\\n  |\\n  = note: `#[warn(unused_variables)]` on by default\\n\\n\"\n }\n ```\n "}, {"sha": "31e002810ce4b9f46a2c7186101da02c162da79b", "filename": "src/doc/rustdoc/src/command-line-arguments.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fcommand-line-arguments.md?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -390,3 +390,15 @@ the same CSS rules as the official `light` theme.\n `--check-theme` is a separate mode in `rustdoc`. When `rustdoc` sees the\n `--check-theme` flag, it discards all other flags and only performs the CSS rule\n comparison operation.\n+\n+### `--crate-version`: control the crate version\n+\n+Using this flag looks like this:\n+\n+```bash\n+$ rustdoc src/lib.rs --crate-version 1.3.37\n+```\n+\n+When `rustdoc` receives this flag, it will print an extra \"Version (version)\" into the sidebar of\n+the crate root's docs. You can use this flag to differentiate between different versions of your\n+library's documentation."}, {"sha": "84e1ebe5e01f581523a3f6eec83a4db8155f103d", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -248,18 +248,6 @@ Markdown file, the URL given to `--markdown-playground-url` will take precedence\n `--playground-url` and `#![doc(html_playground_url = \"url\")]` are present when rendering crate docs,\n the attribute will take precedence.\n \n-### `--crate-version`: control the crate version\n-\n-Using this flag looks like this:\n-\n-```bash\n-$ rustdoc src/lib.rs -Z unstable-options --crate-version 1.3.37\n-```\n-\n-When `rustdoc` receives this flag, it will print an extra \"Version (version)\" into the sidebar of\n-the crate root's docs. You can use this flag to differentiate between different versions of your\n-library's documentation.\n-\n ### `--sort-modules-by-appearance`: control how items on module pages are sorted\n \n Using this flag looks like this:"}, {"sha": "d55a1a3b63584185cdb60e86ee6f26d650334796", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -161,6 +161,8 @@ pub mod str;\n pub mod string;\n #[cfg(target_has_atomic = \"ptr\")]\n pub mod sync;\n+#[cfg(target_has_atomic = \"ptr\")]\n+pub mod task;\n #[cfg(test)]\n mod tests;\n pub mod vec;"}, {"sha": "981095302c73002f623ccee646545c3e013dc31f", "filename": "src/liballoc/task.rs", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Fliballoc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Fliballoc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftask.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -0,0 +1,87 @@\n+#![unstable(feature = \"wake_trait\", issue = \"69912\")]\n+//! Types and Traits for working with asynchronous tasks.\n+use core::mem::{self, ManuallyDrop};\n+use core::task::{RawWaker, RawWakerVTable, Waker};\n+\n+use crate::sync::Arc;\n+\n+/// The implementation of waking a task on an executor.\n+///\n+/// This trait can be used to create a [`Waker`]. An executor can define an\n+/// implementation of this trait, and use that to construct a Waker to pass\n+/// to the tasks that are executed on that executor.\n+///\n+/// This trait is a memory-safe and ergonomic alternative to constructing a\n+/// [`RawWaker`]. It supports the common executor design in which the data\n+/// used to wake up a task is stored in an [`Arc`]. Some executors (especially\n+/// those for embedded systems) cannot use this API, which is why [`RawWaker`]\n+/// exists as an alternative for those systems.\n+#[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+pub trait Wake {\n+    /// Wake this task.\n+    #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+    fn wake(self: Arc<Self>);\n+\n+    /// Wake this task without consuming the waker.\n+    ///\n+    /// If an executor supports a cheaper way to wake without consuming the\n+    /// waker, it should override this method. By default, it clones the\n+    /// [`Arc`] and calls `wake` on the clone.\n+    #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+    fn wake_by_ref(self: &Arc<Self>) {\n+        self.clone().wake();\n+    }\n+}\n+\n+#[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for Waker {\n+    fn from(waker: Arc<W>) -> Waker {\n+        // SAFETY: This is safe because raw_waker safely constructs\n+        // a RawWaker from Arc<W>.\n+        unsafe { Waker::from_raw(raw_waker(waker)) }\n+    }\n+}\n+\n+#[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for RawWaker {\n+    fn from(waker: Arc<W>) -> RawWaker {\n+        raw_waker(waker)\n+    }\n+}\n+\n+// NB: This private function for constructing a RawWaker is used, rather than\n+// inlining this into the `From<Arc<W>> for RawWaker` impl, to ensure that\n+// the safety of `From<Arc<W>> for Waker` does not depend on the correct\n+// trait dispatch - instead both impls call this function directly and\n+// explicitly.\n+#[inline(always)]\n+fn raw_waker<W: Wake + Send + Sync + 'static>(waker: Arc<W>) -> RawWaker {\n+    // Increment the reference count of the arc to clone it.\n+    unsafe fn clone_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) -> RawWaker {\n+        let waker: Arc<W> = Arc::from_raw(waker as *const W);\n+        mem::forget(Arc::clone(&waker));\n+        raw_waker(waker)\n+    }\n+\n+    // Wake by value, moving the Arc into the Wake::wake function\n+    unsafe fn wake<W: Wake + Send + Sync + 'static>(waker: *const ()) {\n+        let waker: Arc<W> = Arc::from_raw(waker as *const W);\n+        <W as Wake>::wake(waker);\n+    }\n+\n+    // Wake by reference, wrap the waker in ManuallyDrop to avoid dropping it\n+    unsafe fn wake_by_ref<W: Wake + Send + Sync + 'static>(waker: *const ()) {\n+        let waker: ManuallyDrop<Arc<W>> = ManuallyDrop::new(Arc::from_raw(waker as *const W));\n+        <W as Wake>::wake_by_ref(&waker);\n+    }\n+\n+    // Decrement the reference count of the Arc on drop\n+    unsafe fn drop_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) {\n+        mem::drop(Arc::from_raw(waker as *const W));\n+    }\n+\n+    RawWaker::new(\n+        Arc::into_raw(waker) as *const (),\n+        &RawWakerVTable::new(clone_waker::<W>, wake::<W>, wake_by_ref::<W>, drop_waker::<W>),\n+    )\n+}"}, {"sha": "fe728d42c76f7be47735240e3cf98d1a4de1eafd", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -282,10 +282,10 @@ impl<'a> ArgumentV1<'a> {\n         // SAFETY: `mem::transmute(x)` is safe because\n         //     1. `&'b T` keeps the lifetime it originated with `'b`\n         //              (so as to not have an unbounded lifetime)\n-        //     2. `&'b T` and `&'b Void` have the same memory layout\n+        //     2. `&'b T` and `&'b Opaque` have the same memory layout\n         //              (when `T` is `Sized`, as it is here)\n         // `mem::transmute(f)` is safe since `fn(&T, &mut Formatter<'_>) -> Result`\n-        // and `fn(&Void, &mut Formatter<'_>) -> Result` have the same ABI\n+        // and `fn(&Opaque, &mut Formatter<'_>) -> Result` have the same ABI\n         // (as long as `T` is `Sized`)\n         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }\n     }"}, {"sha": "7cde57e1f13f6eefbde1180a61294c6c5820d1c8", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -489,19 +489,8 @@ impl<'tcx> DepNodeParams<'tcx> for HirId {\n /// some independent path or string that persists between runs without\n /// the need to be mapped or unmapped. (This ensures we can serialize\n /// them even in the absence of a tcx.)\n-#[derive(\n-    Clone,\n-    Copy,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub struct WorkProductId {\n     hash: Fingerprint,\n }"}, {"sha": "3a9d3c56dcead0632fb38a913a6dc687efbb31bf", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -40,18 +40,8 @@ impl CrateSource {\n     }\n }\n \n-#[derive(\n-    RustcEncodable,\n-    RustcDecodable,\n-    Copy,\n-    Clone,\n-    Ord,\n-    PartialOrd,\n-    Eq,\n-    PartialEq,\n-    Debug,\n-    HashStable\n-)]\n+#[derive(RustcEncodable, RustcDecodable, Copy, Clone, Ord, PartialOrd, Eq, PartialEq, Debug)]\n+#[derive(HashStable)]\n pub enum DepKind {\n     /// A dependency that is only used for its macros.\n     MacrosOnly,"}, {"sha": "73251ee2680df49bb8b6e708670ecc2e96d7c5d8", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -80,18 +80,8 @@ use std::fmt;\n // placate the same deriving in `ty::FreeRegion`, but we may want to\n // actually attach a more meaningful ordering to scopes than the one\n // generated via deriving here.\n-#[derive(\n-    Clone,\n-    PartialEq,\n-    PartialOrd,\n-    Eq,\n-    Ord,\n-    Hash,\n-    Copy,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Copy, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub struct Scope {\n     pub id: hir::ItemLocalId,\n     pub data: ScopeData,\n@@ -114,19 +104,8 @@ impl fmt::Debug for Scope {\n     }\n }\n \n-#[derive(\n-    Clone,\n-    PartialEq,\n-    PartialOrd,\n-    Eq,\n-    Ord,\n-    Hash,\n-    Debug,\n-    Copy,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, Debug, Copy, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub enum ScopeData {\n     Node,\n "}, {"sha": "946b6add40a7e353f32f507f31d438825b825cc6", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -15,18 +15,8 @@ use std::ops::{Deref, DerefMut, Range};\n \n // NOTE: When adding new fields, make sure to adjust the `Snapshot` impl in\n // `src/librustc_mir/interpret/snapshot.rs`.\n-#[derive(\n-    Clone,\n-    Debug,\n-    Eq,\n-    PartialEq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub struct Allocation<Tag = (), Extra = ()> {\n     /// The actual bytes of the allocation.\n     /// Note that the bytes of a pointer represent the offset of the pointer.\n@@ -759,18 +749,8 @@ type Block = u64;\n \n /// A bitmask where each bit refers to the byte with the same index. If the bit is `true`, the byte\n /// is defined. If it is `false` the byte is undefined.\n-#[derive(\n-    Clone,\n-    Debug,\n-    Eq,\n-    PartialEq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub struct UndefMask {\n     blocks: Vec<Block>,\n     len: Size,"}, {"sha": "a2f7a2d847e9febc3570e961e8be6e73372b4fc5", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -46,6 +46,13 @@ macro_rules! err_exhaust {\n     };\n }\n \n+#[macro_export]\n+macro_rules! err_machine_stop {\n+    ($($tt:tt)*) => {\n+        $crate::mir::interpret::InterpError::MachineStop(Box::new($($tt)*))\n+    };\n+}\n+\n // In the `throw_*` macros, avoid `return` to make them work with `try {}`.\n #[macro_export]\n macro_rules! throw_unsup {\n@@ -79,9 +86,7 @@ macro_rules! throw_exhaust {\n \n #[macro_export]\n macro_rules! throw_machine_stop {\n-    ($($tt:tt)*) => {\n-        Err::<!, _>($crate::mir::interpret::InterpError::MachineStop(Box::new($($tt)*)))?\n-    };\n+    ($($tt:tt)*) => { Err::<!, _>(err_machine_stop!($($tt)*))? };\n }\n \n mod allocation;"}, {"sha": "7d862d43bba6bb93682c6f95b76d0a36990a2e4b", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -111,18 +111,8 @@ impl<T: layout::HasDataLayout> PointerArithmetic for T {}\n ///\n /// `Pointer` is also generic over the `Tag` associated with each pointer,\n /// which is used to do provenance tracking during execution.\n-#[derive(\n-    Copy,\n-    Clone,\n-    Eq,\n-    PartialEq,\n-    Ord,\n-    PartialOrd,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Hash,\n-    HashStable\n-)]\n+#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(HashStable)]\n pub struct Pointer<Tag = (), Id = AllocId> {\n     pub alloc_id: Id,\n     pub offset: Size,"}, {"sha": "59e6b1b0c3788c258154518799ff978fe6d208b2", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -23,19 +23,8 @@ pub struct RawConst<'tcx> {\n \n /// Represents a constant value in Rust. `Scalar` and `Slice` are optimizations for\n /// array length computations, enum discriminants and the pattern matching logic.\n-#[derive(\n-    Copy,\n-    Clone,\n-    Debug,\n-    Eq,\n-    PartialEq,\n-    PartialOrd,\n-    Ord,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Hash,\n-    HashStable\n-)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(HashStable)]\n pub enum ConstValue<'tcx> {\n     /// Used only for types with `layout::abi::Scalar` ABI and ZSTs.\n     ///\n@@ -98,18 +87,8 @@ impl<'tcx> ConstValue<'tcx> {\n /// `memory::Allocation`. It is in many ways like a small chunk of a `Allocation`, up to 8 bytes in\n /// size. Like a range of bytes in an `Allocation`, a `Scalar` can either represent the raw bytes\n /// of a simple value or a pointer into another `Allocation`\n-#[derive(\n-    Clone,\n-    Copy,\n-    Eq,\n-    PartialEq,\n-    Ord,\n-    PartialOrd,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Hash,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(HashStable)]\n pub enum Scalar<Tag = (), Id = AllocId> {\n     /// The raw bytes of a simple value.\n     Raw {"}, {"sha": "5b1b6bb08bf5a04ad895eb6ca6b0a0b8630aa3fa", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -69,18 +69,8 @@ impl<'tcx> HasLocalDecls<'tcx> for Body<'tcx> {\n /// The various \"big phases\" that MIR goes through.\n ///\n /// Warning: ordering of variants is significant.\n-#[derive(\n-    Copy,\n-    Clone,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord\n-)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(HashStable)]\n pub enum MirPhase {\n     Build = 0,\n     Const = 1,\n@@ -439,18 +429,8 @@ pub struct SourceInfo {\n ///////////////////////////////////////////////////////////////////////////\n // Borrow kinds\n \n-#[derive(\n-    Copy,\n-    Clone,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub enum BorrowKind {\n     /// Data must be immutable and is aliasable.\n     Shared,"}, {"sha": "78b0ee271fb740d15f5f019c5fba0756251802ad", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -2642,19 +2642,8 @@ impl<'tcx> FieldDef {\n ///\n /// You can get the environment type of a closure using\n /// `tcx.closure_env_ty()`.\n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialOrd,\n-    Ord,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    Debug,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, PartialOrd, Ord, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub enum ClosureKind {\n     // Warning: Ordering is significant here! The ordering is chosen\n     // because the trait Fn is a subtrait of FnMut and so in turn, and"}, {"sha": "0c14580717f92c0e9fc5bc0d2878c76df84657a9", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 24, "deletions": 152, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -31,57 +31,24 @@ use std::cmp::Ordering;\n use std::marker::PhantomData;\n use std::ops::Range;\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    Debug,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable,\n-    TypeFoldable,\n-    Lift\n-)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable, TypeFoldable, Lift)]\n pub struct TypeAndMut<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub mutbl: hir::Mutability,\n }\n \n-#[derive(\n-    Clone,\n-    PartialEq,\n-    PartialOrd,\n-    Eq,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Copy,\n-    HashStable\n-)]\n+#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(HashStable)]\n /// A \"free\" region `fr` can be interpreted as \"some region\n /// at least as big as the scope `fr.scope`\".\n pub struct FreeRegion {\n     pub scope: DefId,\n     pub bound_region: BoundRegion,\n }\n \n-#[derive(\n-    Clone,\n-    PartialEq,\n-    PartialOrd,\n-    Eq,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Copy,\n-    HashStable\n-)]\n+#[derive(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, RustcEncodable, RustcDecodable, Copy)]\n+#[derive(HashStable)]\n pub enum BoundRegion {\n     /// An anonymous region parameter for a given fn (&T)\n     BrAnon(u32),\n@@ -119,18 +86,8 @@ impl BoundRegion {\n \n /// N.B., if you change this, you'll probably want to change the corresponding\n /// AST structure in `librustc_ast/ast.rs` as well.\n-#[derive(\n-    Clone,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable,\n-    Debug\n-)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(HashStable)]\n #[rustc_diagnostic_item = \"TyKind\"]\n pub enum TyKind<'tcx> {\n     /// The primitive boolean type. Written as `bool`.\n@@ -1147,18 +1104,8 @@ impl<'tcx> PolyFnSig<'tcx> {\n \n pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<FnSig<'tcx>>>;\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub struct ParamTy {\n     pub index: u32,\n     pub name: Symbol,\n@@ -1182,18 +1129,8 @@ impl<'tcx> ParamTy {\n     }\n }\n \n-#[derive(\n-    Copy,\n-    Clone,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Eq,\n-    PartialEq,\n-    Ord,\n-    PartialOrd,\n-    HashStable\n-)]\n+#[derive(Copy, Clone, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq, Ord, PartialOrd)]\n+#[derive(HashStable)]\n pub struct ParamConst {\n     pub index: u32,\n     pub name: Symbol,\n@@ -1465,18 +1402,8 @@ impl Atom for RegionVid {\n     }\n }\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub enum InferTy {\n     TyVar(TyVid),\n     IntVar(IntVid),\n@@ -1494,37 +1421,15 @@ rustc_index::newtype_index! {\n     pub struct BoundVar { .. }\n }\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    Debug,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub struct BoundTy {\n     pub var: BoundVar,\n     pub kind: BoundTyKind,\n }\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    Debug,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable)]\n pub enum BoundTyKind {\n     Anon,\n     Param(Symbol),\n@@ -2358,19 +2263,8 @@ impl<'tcx> TyS<'tcx> {\n }\n \n /// Typed constant value.\n-#[derive(\n-    Copy,\n-    Clone,\n-    Debug,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Eq,\n-    PartialEq,\n-    Ord,\n-    PartialOrd,\n-    HashStable\n-)]\n+#[derive(Copy, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq, Ord, PartialOrd)]\n+#[derive(HashStable)]\n pub struct Const<'tcx> {\n     pub ty: Ty<'tcx>,\n \n@@ -2499,19 +2393,8 @@ impl<'tcx> Const<'tcx> {\n impl<'tcx> rustc_serialize::UseSpecializedDecodable for &'tcx Const<'tcx> {}\n \n /// Represents a constant in Rust.\n-#[derive(\n-    Copy,\n-    Clone,\n-    Debug,\n-    Eq,\n-    PartialEq,\n-    PartialOrd,\n-    Ord,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Hash,\n-    HashStable\n-)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(HashStable)]\n pub enum ConstKind<'tcx> {\n     /// A const generic parameter.\n     Param(ParamConst),\n@@ -2549,19 +2432,8 @@ impl<'tcx> ConstKind<'tcx> {\n }\n \n /// An inference variable for a const, for use in const generics.\n-#[derive(\n-    Copy,\n-    Clone,\n-    Debug,\n-    Eq,\n-    PartialEq,\n-    PartialOrd,\n-    Ord,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Hash,\n-    HashStable\n-)]\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash)]\n+#[derive(HashStable)]\n pub enum InferConst<'tcx> {\n     /// Infer the value of the const.\n     Var(ConstVid<'tcx>),"}, {"sha": "c796a3755316440e467ec6845cd639c0b5825ee5", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 10, "deletions": 65, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -684,19 +684,8 @@ pub enum PatKind {\n     MacCall(MacCall),\n }\n \n-#[derive(\n-    Clone,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Debug,\n-    Copy,\n-    HashStable_Generic\n-)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(HashStable_Generic)]\n pub enum Mutability {\n     Mut,\n     Not,\n@@ -1321,19 +1310,8 @@ pub enum CaptureBy {\n \n /// The movability of a generator / closure literal:\n /// whether a generator contains self-references, causing it to be `!Unpin`.\n-#[derive(\n-    Clone,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Debug,\n-    Copy,\n-    HashStable_Generic\n-)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug, Copy)]\n+#[derive(HashStable_Generic)]\n pub enum Movability {\n     /// May contain self-references, `!Unpin`.\n     Static,\n@@ -1614,19 +1592,8 @@ pub struct FnSig {\n     pub decl: P<FnDecl>,\n }\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    HashStable_Generic,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Debug\n-)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum FloatTy {\n     F32,\n     F64,\n@@ -1655,19 +1622,8 @@ impl FloatTy {\n     }\n }\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    HashStable_Generic,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Debug\n-)]\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum IntTy {\n     Isize,\n     I8,\n@@ -1731,19 +1687,8 @@ impl IntTy {\n     }\n }\n \n-#[derive(\n-    Clone,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    HashStable_Generic,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Copy,\n-    Debug\n-)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Copy, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum UintTy {\n     Usize,\n     U8,"}, {"sha": "a16b79993912d93b625591b3f0f09af986264763", "filename": "src/librustc_attr/builtin.rs", "status": "modified", "additions": 8, "deletions": 46, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_attr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_attr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_attr%2Fbuiltin.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -120,35 +120,17 @@ pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Op\n }\n \n /// Represents the #[stable], #[unstable], #[rustc_deprecated] attributes.\n-#[derive(\n-    RustcEncodable,\n-    RustcDecodable,\n-    Copy,\n-    Clone,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    HashStable_Generic\n-)]\n+#[derive(RustcEncodable, RustcDecodable, Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(HashStable_Generic)]\n pub struct Stability {\n     pub level: StabilityLevel,\n     pub feature: Symbol,\n     pub rustc_depr: Option<RustcDeprecation>,\n }\n \n /// Represents the #[rustc_const_unstable] and #[rustc_const_stable] attributes.\n-#[derive(\n-    RustcEncodable,\n-    RustcDecodable,\n-    Copy,\n-    Clone,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    HashStable_Generic\n-)]\n+#[derive(RustcEncodable, RustcDecodable, Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+#[derive(HashStable_Generic)]\n pub struct ConstStability {\n     pub level: StabilityLevel,\n     pub feature: Symbol,\n@@ -159,18 +141,8 @@ pub struct ConstStability {\n }\n \n /// The available stability levels.\n-#[derive(\n-    RustcEncodable,\n-    RustcDecodable,\n-    PartialEq,\n-    PartialOrd,\n-    Copy,\n-    Clone,\n-    Debug,\n-    Eq,\n-    Hash,\n-    HashStable_Generic\n-)]\n+#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n+#[derive(HashStable_Generic)]\n pub enum StabilityLevel {\n     // Reason for the current stability level and the relevant rust-lang issue\n     Unstable { reason: Option<Symbol>, issue: Option<NonZeroU32>, is_soft: bool },\n@@ -186,18 +158,8 @@ impl StabilityLevel {\n     }\n }\n \n-#[derive(\n-    RustcEncodable,\n-    RustcDecodable,\n-    PartialEq,\n-    PartialOrd,\n-    Copy,\n-    Clone,\n-    Debug,\n-    Eq,\n-    Hash,\n-    HashStable_Generic\n-)]\n+#[derive(RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Copy, Clone, Debug, Eq, Hash)]\n+#[derive(HashStable_Generic)]\n pub struct RustcDeprecation {\n     pub since: Symbol,\n     pub reason: Symbol,"}, {"sha": "94053b98cd75b47ef74343528779dce888b7e2dc", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -1574,7 +1574,7 @@ impl EmitterWriter {\n                 .span_to_lines(parts[0].span)\n                 .expect(\"span_to_lines failed when emitting suggestion\");\n \n-            assert!(!lines.lines.is_empty());\n+            assert!(!lines.lines.is_empty() || parts[0].span.is_dummy());\n \n             let line_start = sm.lookup_char_pos(parts[0].span.lo()).line;\n             draw_col_separator_no_space(&mut buffer, 1, max_line_num_len + 1);"}, {"sha": "a21314afb1e3b1d7a3bdd90121b69899262c2a62", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -194,7 +194,7 @@ impl CodeSuggestion {\n                 let bounding_span = Span::with_root_ctxt(lo, hi);\n                 // The different spans might belong to different contexts, if so ignore suggestion.\n                 let lines = sm.span_to_lines(bounding_span).ok()?;\n-                assert!(!lines.lines.is_empty());\n+                assert!(!lines.lines.is_empty() || bounding_span.is_dummy());\n \n                 // We can't splice anything if the source is unavailable.\n                 if !sm.ensure_source_file_source_present(lines.file.clone()) {\n@@ -213,8 +213,8 @@ impl CodeSuggestion {\n                 let sf = &lines.file;\n                 let mut prev_hi = sm.lookup_char_pos(bounding_span.lo());\n                 prev_hi.col = CharPos::from_usize(0);\n-\n-                let mut prev_line = sf.get_line(lines.lines[0].line_index);\n+                let mut prev_line =\n+                    lines.lines.get(0).and_then(|line0| sf.get_line(line0.line_index));\n                 let mut buf = String::new();\n \n                 for part in &substitution.parts {"}, {"sha": "dc23eba643e3e17a7c365206dbc7cae99ca63811", "filename": "src/librustc_mir/const_eval/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ferror.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -5,7 +5,7 @@ use rustc::mir::AssertKind;\n use rustc_span::Symbol;\n \n use super::InterpCx;\n-use crate::interpret::{ConstEvalErr, InterpError, InterpErrorInfo, Machine};\n+use crate::interpret::{ConstEvalErr, InterpErrorInfo, Machine};\n \n /// The CTFE machine has some custom error kinds.\n #[derive(Clone, Debug)]\n@@ -21,7 +21,7 @@ pub enum ConstEvalErrKind {\n // handle these.\n impl<'tcx> Into<InterpErrorInfo<'tcx>> for ConstEvalErrKind {\n     fn into(self) -> InterpErrorInfo<'tcx> {\n-        InterpError::MachineStop(Box::new(self.to_string())).into()\n+        err_machine_stop!(self.to_string()).into()\n     }\n }\n "}, {"sha": "4c380d1141806ba017848152ee926f52450cf14f", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -561,7 +561,7 @@ fn write_mir_sig(\n \n     ty::print::with_forced_impl_filename_line(|| {\n         // see notes on #41697 elsewhere\n-        write!(w, \" {}\", tcx.def_path_str(src.def_id()))\n+        write!(w, \"{}\", tcx.def_path_str(src.def_id()))\n     })?;\n \n     if src.promoted.is_none() && is_function {"}, {"sha": "97f6457d397367b37d1553f5721abdd32bc6d11d", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -1565,7 +1565,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n                             }\n                         } else {\n                             err.multipart_suggestion(\n-                                \"consider prefixing with an underscore\",\n+                                \"if this is intentional, prefix it with an underscore\",\n                                 spans.iter().map(|span| (*span, format!(\"_{}\", name))).collect(),\n                                 Applicability::MachineApplicable,\n                             );"}, {"sha": "3551220c5c54a1965a81d4925b7e668e20784eb8", "filename": "src/librustc_span/def_id.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -105,19 +105,8 @@ impl ::std::fmt::Debug for CrateNum {\n     }\n }\n \n-#[derive(\n-    Copy,\n-    Clone,\n-    Hash,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Debug,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable_Generic\n-)]\n+#[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable_Generic)]\n pub struct DefPathHash(pub Fingerprint);\n \n impl Borrow<Fingerprint> for DefPathHash {"}, {"sha": "b1ac7f04321eb99dd0146c8e24c2b699c9268f1f", "filename": "src/librustc_span/edition.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_span%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_span%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fedition.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -5,18 +5,8 @@ use std::str::FromStr;\n use rustc_macros::HashStable_Generic;\n \n /// The edition of the compiler (RFC 2052)\n-#[derive(\n-    Clone,\n-    Copy,\n-    Hash,\n-    PartialEq,\n-    PartialOrd,\n-    Debug,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Eq,\n-    HashStable_Generic\n-)]\n+#[derive(Clone, Copy, Hash, PartialEq, PartialOrd, Debug, RustcEncodable, RustcDecodable, Eq)]\n+#[derive(HashStable_Generic)]\n pub enum Edition {\n     // editions must be kept in order, oldest to newest\n     /// The 2015 edition"}, {"sha": "0afa2333e0615eedc796c59ce21e91279f4c50c4", "filename": "src/librustc_span/hygiene.rs", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_span%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_span%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fhygiene.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -59,18 +59,8 @@ pub struct ExpnId(u32);\n \n /// A property of a macro expansion that determines how identifiers\n /// produced by that expansion are resolved.\n-#[derive(\n-    Copy,\n-    Clone,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Hash,\n-    Debug,\n-    RustcEncodable,\n-    RustcDecodable,\n-    HashStable_Generic\n-)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable_Generic)]\n pub enum Transparency {\n     /// Identifier produced by a transparent expansion is always resolved at call-site.\n     /// Call-site spans in procedural macros, hygiene opt-out in `macro` should use this.\n@@ -747,17 +737,8 @@ impl ExpnKind {\n }\n \n /// The kind of macro invocation or definition.\n-#[derive(\n-    Clone,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Hash,\n-    Debug,\n-    HashStable_Generic\n-)]\n+#[derive(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum MacroKind {\n     /// A bang macro `foo!()`.\n     Bang,"}, {"sha": "3ebcef947bc37fd359088bbf2236e9b4377616f6", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -72,18 +72,8 @@ impl Globals {\n scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n \n /// Differentiates between real files and common virtual files.\n-#[derive(\n-    Debug,\n-    Eq,\n-    PartialEq,\n-    Clone,\n-    Ord,\n-    PartialOrd,\n-    Hash,\n-    RustcDecodable,\n-    RustcEncodable,\n-    HashStable_Generic\n-)]\n+#[derive(Debug, Eq, PartialEq, Clone, Ord, PartialOrd, Hash, RustcDecodable, RustcEncodable)]\n+#[derive(HashStable_Generic)]\n pub enum FileName {\n     Real(PathBuf),\n     /// Call to `quote!`."}, {"sha": "fa5baffbe48da84f17d7add772c4ad807238447c", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -535,6 +535,10 @@ impl SourceMap {\n         let (lo, hi) = self.is_valid_span(sp)?;\n         assert!(hi.line >= lo.line);\n \n+        if sp.is_dummy() {\n+            return Ok(FileLines { file: lo.file, lines: Vec::new() });\n+        }\n+\n         let mut lines = Vec::with_capacity(hi.line - lo.line + 1);\n \n         // The span starts partway through the first line,\n@@ -545,6 +549,9 @@ impl SourceMap {\n         // and to the end of the line. Be careful because the line\n         // numbers in Loc are 1-based, so we subtract 1 to get 0-based\n         // lines.\n+        //\n+        // FIXME: now that we handle DUMMY_SP up above, we should consider\n+        // asserting that the line numbers here are all indeed 1-based.\n         let hi_line = hi.line.saturating_sub(1);\n         for line_index in lo.line.saturating_sub(1)..hi_line {\n             let line_len = lo.file.get_line(line_index).map(|s| s.chars().count()).unwrap_or(0);"}, {"sha": "1736063cc5f7c5f9be2514ea448e79c44e42847f", "filename": "src/librustc_target/spec/abi.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_target%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustc_target%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fabi.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -5,19 +5,8 @@ use rustc_macros::HashStable_Generic;\n #[cfg(test)]\n mod tests;\n \n-#[derive(\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord,\n-    Hash,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Clone,\n-    Copy,\n-    Debug,\n-    HashStable_Generic\n-)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, Clone, Copy, Debug)]\n+#[derive(HashStable_Generic)]\n pub enum Abi {\n     // N.B., this ordering MUST match the AbiDatas array below.\n     // (This is ensured by the test indices_are_correct().)"}, {"sha": "33cabad9193c4f251b9a9dec2dd08519c792dbbb", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -267,7 +267,7 @@ fn opts() -> Vec<RustcOptGroup> {\n         unstable(\"display-warnings\", |o| {\n             o.optflag(\"\", \"display-warnings\", \"to print code warnings when testing doc\")\n         }),\n-        unstable(\"crate-version\", |o| {\n+        stable(\"crate-version\", |o| {\n             o.optopt(\"\", \"crate-version\", \"crate version to print into documentation\", \"VERSION\")\n         }),\n         unstable(\"sort-modules-by-appearance\", |o| {"}, {"sha": "e5dad307a209accac25554c99f92cace197cc740", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -310,6 +310,7 @@\n #![feature(untagged_unions)]\n #![feature(unwind_attributes)]\n #![feature(vec_into_raw_parts)]\n+#![feature(wake_trait)]\n // NB: the above list is sorted to minimize merge conflicts.\n #![default_lib_allocator]\n \n@@ -463,9 +464,14 @@ pub mod time;\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub mod task {\n     //! Types and Traits for working with asynchronous tasks.\n+\n     #[doc(inline)]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub use core::task::*;\n+\n+    #[doc(inline)]\n+    #[unstable(feature = \"wake_trait\", issue = \"69912\")]\n+    pub use alloc::task::*;\n }\n \n #[stable(feature = \"futures_api\", since = \"1.36.0\")]"}, {"sha": "a0a7a760c2da5576b8dc834c67c6076b5609a3a9", "filename": "src/test/mir-opt/retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fmir-opt%2Fretag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fmir-opt%2Fretag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -121,7 +121,7 @@ fn main() {\n // }\n // END rustc.main-{{closure}}.SimplifyCfg-elaborate-drops.after.mir\n // START rustc.ptr-drop_in_place.Test.SimplifyCfg-make_shim.after.mir\n-// fn  std::intrinsics::drop_in_place(_1: *mut Test) -> () {\n+// fn std::intrinsics::drop_in_place(_1: *mut Test) -> () {\n //     ...\n //     bb0: {\n //         Retag([raw] _1);"}, {"sha": "893af5c61332d1009dc471ab4f8f33c7b24e976e", "filename": "src/test/rustdoc/crate-version.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Frustdoc%2Fcrate-version.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Frustdoc%2Fcrate-version.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcrate-version.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -1,3 +1,3 @@\n-// compile-flags: --crate-version=1.3.37 -Z unstable-options\n+// compile-flags: --crate-version=1.3.37\n \n // @has 'crate_version/index.html' '//div[@class=\"block version\"]/p' 'Version 1.3.37'"}, {"sha": "72f0b333c5a356046d36276eea0c4b49e0089caf", "filename": "src/test/ui/const-generics/issues/issue-62187-encountered-polymorphic-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62187-encountered-polymorphic-const.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -10,7 +10,7 @@ warning: unused variable: `foo`\n   --> $DIR/issue-62187-encountered-polymorphic-const.rs:15:9\n    |\n LL |     let foo = <[u8; 2]>::BIT_LEN;\n-   |         ^^^ help: consider prefixing with an underscore: `_foo`\n+   |         ^^^ help: if this is intentional, prefix it with an underscore: `_foo`\n    |\n    = note: `#[warn(unused_variables)]` on by default\n "}, {"sha": "4a1ef7350b8cbacd97e03fce85cce75e239e9d06", "filename": "src/test/ui/issues/issue-17999.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fissues%2Fissue-17999.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fissues%2Fissue-17999.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17999.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -2,7 +2,7 @@ error: unused variable: `x`\n   --> $DIR/issue-17999.rs:5:13\n    |\n LL |         let x = ();\n-   |             ^ help: consider prefixing with an underscore: `_x`\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n    |\n note: the lint level is defined here\n   --> $DIR/issue-17999.rs:1:9\n@@ -14,7 +14,7 @@ error: unused variable: `a`\n   --> $DIR/issue-17999.rs:7:13\n    |\n LL |             a => {}\n-   |             ^ help: consider prefixing with an underscore: `_a`\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2b34830d08427c9235701b00d7ce3af983d9c8b4", "filename": "src/test/ui/issues/issue-22599.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fissues%2Fissue-22599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fissues%2Fissue-22599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22599.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -2,7 +2,7 @@ error: unused variable: `a`\n   --> $DIR/issue-22599.rs:8:19\n    |\n LL |     v = match 0 { a => 0 };\n-   |                   ^ help: consider prefixing with an underscore: `_a`\n+   |                   ^ help: if this is intentional, prefix it with an underscore: `_a`\n    |\n note: the lint level is defined here\n   --> $DIR/issue-22599.rs:1:9"}, {"sha": "5ae6fb2d47249ced97e69fc1ddf183897522f3c1", "filename": "src/test/ui/issues/issue-53275.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fissues%2Fissue-53275.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fissues%2Fissue-53275.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53275.rs?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -0,0 +1,9 @@\n+// build-pass\n+\n+#![crate_type = \"lib\"]\n+#![allow(unconditional_panic)]\n+struct S(u8);\n+\n+pub fn ice() {\n+    S([][0]);\n+}"}, {"sha": "eccb71095acc70df351051d1c8fb00f0b18543df", "filename": "src/test/ui/issues/issue-56685.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fissues%2Fissue-56685.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fissues%2Fissue-56685.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56685.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -9,7 +9,7 @@ note: the lint level is defined here\n    |\n LL | #![deny(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^\n-help: consider prefixing with an underscore\n+help: if this is intentional, prefix it with an underscore\n    |\n LL |         E::A(_x) | E::B(_x) => {}\n    |              ^^         ^^\n@@ -20,7 +20,7 @@ error: unused variable: `x`\n LL |         F::A(x, y) | F::B(x, y) => { y },\n    |              ^            ^\n    |\n-help: consider prefixing with an underscore\n+help: if this is intentional, prefix it with an underscore\n    |\n LL |         F::A(_x, y) | F::B(_x, y) => { y },\n    |              ^^            ^^\n@@ -29,21 +29,21 @@ error: unused variable: `a`\n   --> $DIR/issue-56685.rs:27:14\n    |\n LL |         F::C(a, b) => { 3 }\n-   |              ^ help: consider prefixing with an underscore: `_a`\n+   |              ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n   --> $DIR/issue-56685.rs:27:17\n    |\n LL |         F::C(a, b) => { 3 }\n-   |                 ^ help: consider prefixing with an underscore: `_b`\n+   |                 ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `x`\n   --> $DIR/issue-56685.rs:32:25\n    |\n LL |     let _ = if let F::A(x, y) | F::B(x, y) = F::A(1, 2) {\n    |                         ^            ^\n    |\n-help: consider prefixing with an underscore\n+help: if this is intentional, prefix it with an underscore\n    |\n LL |     let _ = if let F::A(_x, y) | F::B(_x, y) = F::A(1, 2) {\n    |                         ^^            ^^\n@@ -54,7 +54,7 @@ error: unused variable: `x`\n LL |     while let F::A(x, y) | F::B(x, y) = F::A(1, 2) {\n    |                    ^            ^\n    |\n-help: consider prefixing with an underscore\n+help: if this is intentional, prefix it with an underscore\n    |\n LL |     while let F::A(_x, y) | F::B(_x, y) = F::A(1, 2) {\n    |                    ^^            ^^"}, {"sha": "cc675a709a2c6a90d5634c85e88015f510ce4984", "filename": "src/test/ui/lint/issue-47390-unused-variable-in-struct-pattern.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-47390-unused-variable-in-struct-pattern.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -2,7 +2,7 @@ warning: unused variable: `i_think_continually`\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:26:9\n    |\n LL |     let i_think_continually = 2;\n-   |         ^^^^^^^^^^^^^^^^^^^ help: consider prefixing with an underscore: `_i_think_continually`\n+   |         ^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_i_think_continually`\n    |\n note: the lint level is defined here\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:5:9\n@@ -15,19 +15,19 @@ warning: unused variable: `mut_unused_var`\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:33:13\n    |\n LL |     let mut mut_unused_var = 1;\n-   |             ^^^^^^^^^^^^^^ help: consider prefixing with an underscore: `_mut_unused_var`\n+   |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mut_unused_var`\n \n warning: unused variable: `var`\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:14\n    |\n LL |     let (mut var, unused_var) = (1, 2);\n-   |              ^^^ help: consider prefixing with an underscore: `_var`\n+   |              ^^^ help: if this is intentional, prefix it with an underscore: `_var`\n \n warning: unused variable: `unused_var`\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:37:19\n    |\n LL |     let (mut var, unused_var) = (1, 2);\n-   |                   ^^^^^^^^^^ help: consider prefixing with an underscore: `_unused_var`\n+   |                   ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_unused_var`\n \n warning: unused variable: `corridors_of_light`\n   --> $DIR/issue-47390-unused-variable-in-struct-pattern.rs:45:26"}, {"sha": "1bc0e41fd550c2318c764bc1735859f73a0b16cc", "filename": "src/test/ui/lint/lint-match-arms.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-match-arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-match-arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-match-arms.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -2,7 +2,7 @@ error: unused variable: `y`\n   --> $DIR/lint-match-arms.rs:5:9\n    |\n LL |         y => (),\n-   |         ^ help: consider prefixing with an underscore: `_y`\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_y`\n    |\n note: the lint level is defined here\n   --> $DIR/lint-match-arms.rs:3:16"}, {"sha": "029334c2eb67c3cb283b79bc53f82b77bfcf6f08", "filename": "src/test/ui/lint/lint-removed-allow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-removed-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-removed-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-removed-allow.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -2,7 +2,7 @@ error: unused variable: `unused`\n   --> $DIR/lint-removed-allow.rs:8:17\n    |\n LL | fn main() { let unused = (); }\n-   |                 ^^^^^^ help: consider prefixing with an underscore: `_unused`\n+   |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_unused`\n    |\n note: the lint level is defined here\n   --> $DIR/lint-removed-allow.rs:7:8"}, {"sha": "4adc18cc2ce5d70b5d4d1234a1fc69d91b963a8e", "filename": "src/test/ui/lint/lint-removed-cmdline.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-removed-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-removed-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-removed-cmdline.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -18,7 +18,7 @@ error: unused variable: `unused`\n   --> $DIR/lint-removed-cmdline.rs:12:17\n    |\n LL | fn main() { let unused = (); }\n-   |                 ^^^^^^ help: consider prefixing with an underscore: `_unused`\n+   |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_unused`\n    |\n note: the lint level is defined here\n   --> $DIR/lint-removed-cmdline.rs:11:8"}, {"sha": "190e10c8a9944c9dc023e9c6ca83def0cbbf9ecd", "filename": "src/test/ui/lint/lint-removed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-removed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-removed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-removed.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -10,7 +10,7 @@ error: unused variable: `unused`\n   --> $DIR/lint-removed.rs:8:17\n    |\n LL | fn main() { let unused = (); }\n-   |                 ^^^^^^ help: consider prefixing with an underscore: `_unused`\n+   |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_unused`\n    |\n note: the lint level is defined here\n   --> $DIR/lint-removed.rs:7:8"}, {"sha": "46f6a10de2743c291a6cfb5dbbcc846e38059d86", "filename": "src/test/ui/lint/lint-renamed-allow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-renamed-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-renamed-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-renamed-allow.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -2,7 +2,7 @@ error: unused variable: `unused`\n   --> $DIR/lint-renamed-allow.rs:8:17\n    |\n LL | fn main() { let unused = (); }\n-   |                 ^^^^^^ help: consider prefixing with an underscore: `_unused`\n+   |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_unused`\n    |\n note: the lint level is defined here\n   --> $DIR/lint-renamed-allow.rs:7:8"}, {"sha": "ef617dfe31f025b27c3e74b9b51990a49a130da0", "filename": "src/test/ui/lint/lint-renamed-cmdline.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-renamed-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-renamed-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-renamed-cmdline.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -18,7 +18,7 @@ error: unused variable: `unused`\n   --> $DIR/lint-renamed-cmdline.rs:8:17\n    |\n LL | fn main() { let unused = (); }\n-   |                 ^^^^^^ help: consider prefixing with an underscore: `_unused`\n+   |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_unused`\n    |\n note: the lint level is defined here\n   --> $DIR/lint-renamed-cmdline.rs:7:8"}, {"sha": "0225e22623424c4ee861e6587860fd79cc91b212", "filename": "src/test/ui/lint/lint-renamed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-renamed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-renamed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-renamed.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -10,7 +10,7 @@ error: unused variable: `unused`\n   --> $DIR/lint-renamed.rs:4:17\n    |\n LL | fn main() { let unused = (); }\n-   |                 ^^^^^^ help: consider prefixing with an underscore: `_unused`\n+   |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_unused`\n    |\n note: the lint level is defined here\n   --> $DIR/lint-renamed.rs:3:8"}, {"sha": "d6e684e83065177f280897ecd9db7ebaef900ccc", "filename": "src/test/ui/lint/lint-unused-variables.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -2,7 +2,7 @@ error: unused variable: `a`\n   --> $DIR/lint-unused-variables.rs:8:5\n    |\n LL |     a: i32,\n-   |     ^ help: consider prefixing with an underscore: `_a`\n+   |     ^ help: if this is intentional, prefix it with an underscore: `_a`\n    |\n note: the lint level is defined here\n   --> $DIR/lint-unused-variables.rs:5:9\n@@ -14,61 +14,61 @@ error: unused variable: `b`\n   --> $DIR/lint-unused-variables.rs:14:5\n    |\n LL |     b: i32,\n-   |     ^ help: consider prefixing with an underscore: `_b`\n+   |     ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n   --> $DIR/lint-unused-variables.rs:68:9\n    |\n LL |         a: i32,\n-   |         ^ help: consider prefixing with an underscore: `_a`\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n   --> $DIR/lint-unused-variables.rs:74:9\n    |\n LL |         b: i32,\n-   |         ^ help: consider prefixing with an underscore: `_b`\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `b`\n   --> $DIR/lint-unused-variables.rs:42:9\n    |\n LL |         b: i32,\n-   |         ^ help: consider prefixing with an underscore: `_b`\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `b`\n   --> $DIR/lint-unused-variables.rs:47:9\n    |\n LL |         b: i32,\n-   |         ^ help: consider prefixing with an underscore: `_b`\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `a`\n   --> $DIR/lint-unused-variables.rs:22:9\n    |\n LL |         a: i32,\n-   |         ^ help: consider prefixing with an underscore: `_a`\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n   --> $DIR/lint-unused-variables.rs:29:9\n    |\n LL |         b: i32,\n-   |         ^ help: consider prefixing with an underscore: `_b`\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `b`\n   --> $DIR/lint-unused-variables.rs:34:9\n    |\n LL |         b: i32,\n-   |         ^ help: consider prefixing with an underscore: `_b`\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `b`\n   --> $DIR/lint-unused-variables.rs:55:9\n    |\n LL |         b: i32,\n-   |         ^ help: consider prefixing with an underscore: `_b`\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `b`\n   --> $DIR/lint-unused-variables.rs:60:9\n    |\n LL |         b: i32,\n-   |         ^ help: consider prefixing with an underscore: `_b`\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "1d7e0909e40abdb260aafcf8ebcf5f51698f6f3a", "filename": "src/test/ui/lint/lint-uppercase-variables.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-uppercase-variables.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -22,7 +22,7 @@ warning: unused variable: `Foo`\n   --> $DIR/lint-uppercase-variables.rs:22:9\n    |\n LL |         Foo => {}\n-   |         ^^^ help: consider prefixing with an underscore: `_Foo`\n+   |         ^^^ help: if this is intentional, prefix it with an underscore: `_Foo`\n    |\n note: the lint level is defined here\n   --> $DIR/lint-uppercase-variables.rs:1:9\n@@ -35,13 +35,13 @@ warning: unused variable: `Foo`\n   --> $DIR/lint-uppercase-variables.rs:28:9\n    |\n LL |     let Foo = foo::Foo::Foo;\n-   |         ^^^ help: consider prefixing with an underscore: `_Foo`\n+   |         ^^^ help: if this is intentional, prefix it with an underscore: `_Foo`\n \n warning: unused variable: `Foo`\n   --> $DIR/lint-uppercase-variables.rs:33:17\n    |\n LL |     fn in_param(Foo: foo::Foo) {}\n-   |                 ^^^ help: consider prefixing with an underscore: `_Foo`\n+   |                 ^^^ help: if this is intentional, prefix it with an underscore: `_Foo`\n \n error: structure field `X` should have a snake case name\n   --> $DIR/lint-uppercase-variables.rs:10:5"}, {"sha": "42187330a3eb1ef88569e6f3d2e6b4e4626d6cf6", "filename": "src/test/ui/liveness/liveness-unused.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-unused.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -17,7 +17,7 @@ error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:8:7\n    |\n LL | fn f1(x: isize) {\n-   |       ^ help: consider prefixing with an underscore: `_x`\n+   |       ^ help: if this is intentional, prefix it with an underscore: `_x`\n    |\n note: the lint level is defined here\n   --> $DIR/liveness-unused.rs:2:9\n@@ -29,19 +29,19 @@ error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:12:8\n    |\n LL | fn f1b(x: &mut isize) {\n-   |        ^ help: consider prefixing with an underscore: `_x`\n+   |        ^ help: if this is intentional, prefix it with an underscore: `_x`\n \n error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:20:9\n    |\n LL |     let x: isize;\n-   |         ^ help: consider prefixing with an underscore: `_x`\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n \n error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:25:9\n    |\n LL |     let x = 3;\n-   |         ^ help: consider prefixing with an underscore: `_x`\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n \n error: variable `x` is assigned to, but never used\n   --> $DIR/liveness-unused.rs:30:13\n@@ -76,25 +76,25 @@ error: unused variable: `i`\n   --> $DIR/liveness-unused.rs:59:12\n    |\n LL |       Some(i) => {\n-   |            ^ help: consider prefixing with an underscore: `_i`\n+   |            ^ help: if this is intentional, prefix it with an underscore: `_i`\n \n error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:79:9\n    |\n LL |     for x in 1..10 { }\n-   |         ^ help: consider prefixing with an underscore: `_x`\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n \n error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:84:10\n    |\n LL |     for (x, _) in [1, 2, 3].iter().enumerate() { }\n-   |          ^ help: consider prefixing with an underscore: `_x`\n+   |          ^ help: if this is intentional, prefix it with an underscore: `_x`\n \n error: unused variable: `x`\n   --> $DIR/liveness-unused.rs:89:13\n    |\n LL |     for (_, x) in [1, 2, 3].iter().enumerate() {\n-   |             ^ help: consider prefixing with an underscore: `_x`\n+   |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n \n error: variable `x` is assigned to, but never used\n   --> $DIR/liveness-unused.rs:112:9"}, {"sha": "5525802c2511a59047f24d1bfa13bc5769bcd0aa", "filename": "src/test/ui/never_type/never-assign-dead-code.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fnever-assign-dead-code.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -25,7 +25,7 @@ warning: unused variable: `x`\n   --> $DIR/never-assign-dead-code.rs:9:9\n    |\n LL |     let x: ! = panic!(\"aah\");\n-   |         ^ help: consider prefixing with an underscore: `_x`\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_x`\n    |\n note: the lint level is defined here\n   --> $DIR/never-assign-dead-code.rs:6:9"}, {"sha": "bfbcf68b6c7e6bab1d15914f6cbf6ee2919d7dd6", "filename": "src/test/ui/proc-macro/attributes-included.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-included.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-included.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattributes-included.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -2,7 +2,7 @@ warning: unused variable: `a`\n   --> $DIR/attributes-included.rs:17:9\n    |\n LL |     let a: i32 = \"foo\";\n-   |         ^ help: consider prefixing with an underscore: `_a`\n+   |         ^ help: if this is intentional, prefix it with an underscore: `_a`\n    |\n note: the lint level is defined here\n   --> $DIR/attributes-included.rs:4:9"}, {"sha": "1ced8d8a14a53e1c2430455510c162bf8048f6de", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-cfg.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -2,7 +2,7 @@ error: unused variable: `a`\n   --> $DIR/param-attrs-cfg.rs:24:23\n    |\n LL |     #[cfg(something)] a: i32,\n-   |                       ^ help: consider prefixing with an underscore: `_a`\n+   |                       ^ help: if this is intentional, prefix it with an underscore: `_a`\n    |\n note: the lint level is defined here\n   --> $DIR/param-attrs-cfg.rs:5:9\n@@ -14,109 +14,109 @@ error: unused variable: `b`\n   --> $DIR/param-attrs-cfg.rs:30:23\n    |\n LL |     #[cfg(something)] b: i32,\n-   |                       ^ help: consider prefixing with an underscore: `_b`\n+   |                       ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `c`\n   --> $DIR/param-attrs-cfg.rs:32:40\n    |\n LL |     #[cfg_attr(nothing, cfg(nothing))] c: i32,\n-   |                                        ^ help: consider prefixing with an underscore: `_c`\n+   |                                        ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n error: unused variable: `a`\n   --> $DIR/param-attrs-cfg.rs:107:27\n    |\n LL |         #[cfg(something)] a: i32,\n-   |                           ^ help: consider prefixing with an underscore: `_a`\n+   |                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n   --> $DIR/param-attrs-cfg.rs:113:27\n    |\n LL |         #[cfg(something)] b: i32,\n-   |                           ^ help: consider prefixing with an underscore: `_b`\n+   |                           ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `c`\n   --> $DIR/param-attrs-cfg.rs:115:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n-   |                                            ^ help: consider prefixing with an underscore: `_c`\n+   |                                            ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n error: unused variable: `b`\n   --> $DIR/param-attrs-cfg.rs:67:27\n    |\n LL |         #[cfg(something)] b: i32,\n-   |                           ^ help: consider prefixing with an underscore: `_b`\n+   |                           ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `c`\n   --> $DIR/param-attrs-cfg.rs:69:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n-   |                                            ^ help: consider prefixing with an underscore: `_c`\n+   |                                            ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n error: unused variable: `b`\n   --> $DIR/param-attrs-cfg.rs:75:27\n    |\n LL |         #[cfg(something)] b: i32,\n-   |                           ^ help: consider prefixing with an underscore: `_b`\n+   |                           ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `c`\n   --> $DIR/param-attrs-cfg.rs:77:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n-   |                                            ^ help: consider prefixing with an underscore: `_c`\n+   |                                            ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n error: unused variable: `a`\n   --> $DIR/param-attrs-cfg.rs:41:27\n    |\n LL |         #[cfg(something)] a: i32,\n-   |                           ^ help: consider prefixing with an underscore: `_a`\n+   |                           ^ help: if this is intentional, prefix it with an underscore: `_a`\n \n error: unused variable: `b`\n   --> $DIR/param-attrs-cfg.rs:48:27\n    |\n LL |         #[cfg(something)] b: i32,\n-   |                           ^ help: consider prefixing with an underscore: `_b`\n+   |                           ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `c`\n   --> $DIR/param-attrs-cfg.rs:50:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n-   |                                            ^ help: consider prefixing with an underscore: `_c`\n+   |                                            ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n error: unused variable: `b`\n   --> $DIR/param-attrs-cfg.rs:56:27\n    |\n LL |         #[cfg(something)] b: i32,\n-   |                           ^ help: consider prefixing with an underscore: `_b`\n+   |                           ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `c`\n   --> $DIR/param-attrs-cfg.rs:58:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n-   |                                            ^ help: consider prefixing with an underscore: `_c`\n+   |                                            ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n error: unused variable: `b`\n   --> $DIR/param-attrs-cfg.rs:86:27\n    |\n LL |         #[cfg(something)] b: i32,\n-   |                           ^ help: consider prefixing with an underscore: `_b`\n+   |                           ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `c`\n   --> $DIR/param-attrs-cfg.rs:88:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n-   |                                            ^ help: consider prefixing with an underscore: `_c`\n+   |                                            ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n error: unused variable: `b`\n   --> $DIR/param-attrs-cfg.rs:94:27\n    |\n LL |         #[cfg(something)] b: i32,\n-   |                           ^ help: consider prefixing with an underscore: `_b`\n+   |                           ^ help: if this is intentional, prefix it with an underscore: `_b`\n \n error: unused variable: `c`\n   --> $DIR/param-attrs-cfg.rs:96:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n-   |                                            ^ help: consider prefixing with an underscore: `_c`\n+   |                                            ^ help: if this is intentional, prefix it with an underscore: `_c`\n \n error: aborting due to 19 previous errors\n "}, {"sha": "2a090f442cc5f66930357aa86aebafcb23b54a6b", "filename": "src/test/ui/span/issue-24690.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -2,7 +2,7 @@ warning: unused variable: `theOtherTwo`\n   --> $DIR/issue-24690.rs:13:9\n    |\n LL |     let theOtherTwo = 2;\n-   |         ^^^^^^^^^^^ help: consider prefixing with an underscore: `_theOtherTwo`\n+   |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_theOtherTwo`\n    |\n note: the lint level is defined here\n   --> $DIR/issue-24690.rs:8:9"}, {"sha": "55195ce50a13ec364fe6b74250652e9b0f671ecc", "filename": "src/test/ui/suggestions/unused-closure-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fsuggestions%2Funused-closure-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1edd389cc4c7b5be7a3dd4fe4b986f6017018e54/src%2Ftest%2Fui%2Fsuggestions%2Funused-closure-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funused-closure-argument.stderr?ref=1edd389cc4c7b5be7a3dd4fe4b986f6017018e54", "patch": "@@ -14,7 +14,7 @@ error: unused variable: `x`\n   --> $DIR/unused-closure-argument.rs:17:15\n    |\n LL |         .map(|x| 4)\n-   |               ^ help: consider prefixing with an underscore: `_x`\n+   |               ^ help: if this is intentional, prefix it with an underscore: `_x`\n \n error: aborting due to 2 previous errors\n "}]}