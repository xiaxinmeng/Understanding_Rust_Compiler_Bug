{"sha": "3e4ed61c0987d73af4c291b68cf76adfeaa349c6", "node_id": "C_kwDOAAsO6NoAKDNlNGVkNjFjMDk4N2Q3M2FmNGMyOTFiNjhjZjc2YWRmZWFhMzQ5YzY", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-05-18T13:00:30Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-05-18T13:00:30Z"}, "message": "do not overwrite obligations", "tree": {"sha": "68d6fb32b049b28070488e41edccfc2d45ee9946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68d6fb32b049b28070488e41edccfc2d45ee9946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e4ed61c0987d73af4c291b68cf76adfeaa349c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e4ed61c0987d73af4c291b68cf76adfeaa349c6", "html_url": "https://github.com/rust-lang/rust/commit/3e4ed61c0987d73af4c291b68cf76adfeaa349c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e4ed61c0987d73af4c291b68cf76adfeaa349c6/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a673ad6b5746a6256cb898edb8b888163df1872c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a673ad6b5746a6256cb898edb8b888163df1872c", "html_url": "https://github.com/rust-lang/rust/commit/a673ad6b5746a6256cb898edb8b888163df1872c"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "b88ba04b2737939562c8676c35b847e5da6a70ca", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3e4ed61c0987d73af4c291b68cf76adfeaa349c6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4ed61c0987d73af4c291b68cf76adfeaa349c6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=3e4ed61c0987d73af4c291b68cf76adfeaa349c6", "patch": "@@ -530,19 +530,18 @@ impl<'tcx> InferCtxt<'tcx> {\n         // these are the same span, but not in cases like `-> (impl\n         // Foo, impl Bar)`.\n         let span = cause.span;\n-\n-        let mut obligations = vec![];\n         let prev = self.inner.borrow_mut().opaque_types().register(\n             OpaqueTypeKey { def_id, substs },\n             OpaqueHiddenType { ty: hidden_ty, span },\n             origin,\n         );\n-        if let Some(prev) = prev {\n-            obligations = self\n-                .at(&cause, param_env)\n+        let mut obligations = if let Some(prev) = prev {\n+            self.at(&cause, param_env)\n                 .eq_exp(DefineOpaqueTypes::Yes, a_is_expected, prev, hidden_ty)?\n-                .obligations;\n-        }\n+                .obligations\n+        } else {\n+            Vec::new()\n+        };\n \n         let item_bounds = tcx.explicit_item_bounds(def_id);\n "}]}