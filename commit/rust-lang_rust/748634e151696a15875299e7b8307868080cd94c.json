{"sha": "748634e151696a15875299e7b8307868080cd94c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ODYzNGUxNTE2OTZhMTU4NzUyOTllN2I4MzA3ODY4MDgwY2Q5NGM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-17T19:44:44Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-17T21:15:20Z"}, "message": "Use intra doc links in std::str", "tree": {"sha": "6af11772550e0b244ea749ffc0e78106abf0017a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6af11772550e0b244ea749ffc0e78106abf0017a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/748634e151696a15875299e7b8307868080cd94c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/748634e151696a15875299e7b8307868080cd94c", "html_url": "https://github.com/rust-lang/rust/commit/748634e151696a15875299e7b8307868080cd94c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/748634e151696a15875299e7b8307868080cd94c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91314e2d279374bb9eec79754b3480d359d7a412", "url": "https://api.github.com/repos/rust-lang/rust/commits/91314e2d279374bb9eec79754b3480d359d7a412", "html_url": "https://github.com/rust-lang/rust/commit/91314e2d279374bb9eec79754b3480d359d7a412"}], "stats": {"total": 226, "additions": 73, "deletions": 153}, "files": [{"sha": "faf58cafbb70b626d582c91b31822a316800d807", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 73, "deletions": 153, "changes": 226, "blob_url": "https://github.com/rust-lang/rust/blob/748634e151696a15875299e7b8307868080cd94c/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/748634e151696a15875299e7b8307868080cd94c/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=748634e151696a15875299e7b8307868080cd94c", "patch": "@@ -31,9 +31,8 @@ pub mod lossy;\n /// `FromStr`'s [`from_str`] method is often used implicitly, through\n /// [`str`]'s [`parse`] method. See [`parse`]'s documentation for examples.\n ///\n-/// [`from_str`]: #tymethod.from_str\n-/// [`str`]: ../../std/primitive.str.html\n-/// [`parse`]: ../../std/primitive.str.html#method.parse\n+/// [`from_str`]: FromStr::from_str\n+/// [`parse`]: str::parse\n ///\n /// `FromStr` does not have a lifetime parameter, and so you can only parse types\n /// that do not contain a lifetime parameter themselves. In other words, you can\n@@ -143,7 +142,7 @@ impl FromStr for bool {\n \n /// An error returned when parsing a `bool` using [`from_str`] fails\n ///\n-/// [`from_str`]: ../../std/primitive.bool.html#method.from_str\n+/// [`from_str`]: FromStr::from_str\n #[derive(Debug, Clone, PartialEq, Eq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ParseBoolError {\n@@ -266,8 +265,7 @@ impl Utf8Error {\n /// that it is valid UTF-8. `from_utf8()` checks to ensure that the bytes are valid\n /// UTF-8, and then does the conversion.\n ///\n-/// [`&str`]: ../../std/primitive.str.html\n-/// [`u8`]: ../../std/primitive.u8.html\n+/// [`&str`]: str\n /// [byteslice]: ../../std/primitive.slice.html\n ///\n /// If you are sure that the byte slice is valid UTF-8, and you don't want to\n@@ -398,7 +396,7 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n /// it are valid UTF-8. If this constraint is violated, undefined behavior\n /// results, as the rest of Rust assumes that [`&str`]s are valid UTF-8.\n ///\n-/// [`&str`]: ../../std/primitive.str.html\n+/// [`&str`]: str\n ///\n /// # Examples\n ///\n@@ -429,9 +427,7 @@ pub unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n /// Converts a slice of bytes to a string slice without checking\n /// that the string contains valid UTF-8; mutable version.\n ///\n-/// See the immutable version, [`from_utf8_unchecked()`][fromutf8], for more information.\n-///\n-/// [fromutf8]: fn.from_utf8_unchecked.html\n+/// See the immutable version, [`from_utf8_unchecked()`] for more information.\n ///\n /// # Examples\n ///\n@@ -476,13 +472,11 @@ Section: Iterators\n \n /// An iterator over the [`char`]s of a string slice.\n ///\n-/// [`char`]: ../../std/primitive.char.html\n ///\n /// This struct is created by the [`chars`] method on [`str`].\n /// See its documentation for more.\n ///\n-/// [`chars`]: ../../std/primitive.str.html#method.chars\n-/// [`str`]: ../../std/primitive.str.html\n+/// [`chars`]: str::chars\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chars<'a> {\n@@ -676,13 +670,10 @@ impl<'a> Chars<'a> {\n \n /// An iterator over the [`char`]s of a string slice, and their positions.\n ///\n-/// [`char`]: ../../std/primitive.char.html\n-///\n /// This struct is created by the [`char_indices`] method on [`str`].\n /// See its documentation for more.\n ///\n-/// [`char_indices`]: ../../std/primitive.str.html#method.char_indices\n-/// [`str`]: ../../std/primitive.str.html\n+/// [`char_indices`]: str::char_indices\n #[derive(Clone, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct CharIndices<'a> {\n@@ -756,8 +747,7 @@ impl<'a> CharIndices<'a> {\n /// This struct is created by the [`bytes`] method on [`str`].\n /// See its documentation for more.\n ///\n-/// [`bytes`]: ../../std/primitive.str.html#method.bytes\n-/// [`str`]: ../../std/primitive.str.html\n+/// [`bytes`]: str::bytes\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone, Debug)]\n pub struct Bytes<'a>(Copied<slice::Iter<'a, u8>>);\n@@ -1249,12 +1239,12 @@ generate_pattern_iterators! {\n     forward:\n         /// Created with the method [`split`].\n         ///\n-        /// [`split`]: ../../std/primitive.str.html#method.split\n+        /// [`split`]: str::split\n         struct Split;\n     reverse:\n         /// Created with the method [`rsplit`].\n         ///\n-        /// [`rsplit`]: ../../std/primitive.str.html#method.rsplit\n+        /// [`rsplit`]: str::rsplit\n         struct RSplit;\n     stability:\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1267,12 +1257,12 @@ generate_pattern_iterators! {\n     forward:\n         /// Created with the method [`split_terminator`].\n         ///\n-        /// [`split_terminator`]: ../../std/primitive.str.html#method.split_terminator\n+        /// [`split_terminator`]: str::split_terminator\n         struct SplitTerminator;\n     reverse:\n         /// Created with the method [`rsplit_terminator`].\n         ///\n-        /// [`rsplit_terminator`]: ../../std/primitive.str.html#method.rsplit_terminator\n+        /// [`rsplit_terminator`]: str::rsplit_terminator\n         struct RSplitTerminator;\n     stability:\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1343,12 +1333,12 @@ generate_pattern_iterators! {\n     forward:\n         /// Created with the method [`splitn`].\n         ///\n-        /// [`splitn`]: ../../std/primitive.str.html#method.splitn\n+        /// [`splitn`]: str::splitn\n         struct SplitN;\n     reverse:\n         /// Created with the method [`rsplitn`].\n         ///\n-        /// [`rsplitn`]: ../../std/primitive.str.html#method.rsplitn\n+        /// [`rsplitn`]: str::rsplitn\n         struct RSplitN;\n     stability:\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1398,12 +1388,12 @@ generate_pattern_iterators! {\n     forward:\n         /// Created with the method [`match_indices`].\n         ///\n-        /// [`match_indices`]: ../../std/primitive.str.html#method.match_indices\n+        /// [`match_indices`]: str::match_indices\n         struct MatchIndices;\n     reverse:\n         /// Created with the method [`rmatch_indices`].\n         ///\n-        /// [`rmatch_indices`]: ../../std/primitive.str.html#method.rmatch_indices\n+        /// [`rmatch_indices`]: str::rmatch_indices\n         struct RMatchIndices;\n     stability:\n         #[stable(feature = \"str_match_indices\", since = \"1.5.0\")]\n@@ -1455,12 +1445,12 @@ generate_pattern_iterators! {\n     forward:\n         /// Created with the method [`matches`].\n         ///\n-        /// [`matches`]: ../../std/primitive.str.html#method.matches\n+        /// [`matches`]: str::matches\n         struct Matches;\n     reverse:\n         /// Created with the method [`rmatches`].\n         ///\n-        /// [`rmatches`]: ../../std/primitive.str.html#method.rmatches\n+        /// [`rmatches`]: str::rmatches\n         struct RMatches;\n     stability:\n         #[stable(feature = \"str_matches\", since = \"1.2.0\")]\n@@ -1474,8 +1464,7 @@ generate_pattern_iterators! {\n /// This struct is created with the [`lines`] method on [`str`].\n /// See its documentation for more.\n ///\n-/// [`lines`]: ../../std/primitive.str.html#method.lines\n-/// [`str`]: ../../std/primitive.str.html\n+/// [`lines`]: str::lines\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone, Debug)]\n pub struct Lines<'a>(Map<SplitTerminator<'a, char>, LinesAnyMap>);\n@@ -1513,7 +1502,7 @@ impl FusedIterator for Lines<'_> {}\n \n /// Created with the method [`lines_any`].\n ///\n-/// [`lines_any`]: ../../std/primitive.str.html#method.lines_any\n+/// [`lines_any`]: str::lines_any\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.4.0\", reason = \"use lines()/Lines instead now\")]\n #[derive(Clone, Debug)]\n@@ -2347,9 +2336,7 @@ impl str {\n     }\n \n     /// Converts a string slice to a byte slice. To convert the byte slice back\n-    /// into a string slice, use the [`str::from_utf8`] function.\n-    ///\n-    /// [`str::from_utf8`]: ./str/fn.from_utf8.html\n+    /// into a string slice, use the [`from_utf8`] function.\n     ///\n     /// # Examples\n     ///\n@@ -2429,8 +2416,7 @@ impl str {\n     /// The caller must ensure that the returned pointer is never written to.\n     /// If you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n     ///\n-    /// [`u8`]: primitive.u8.html\n-    /// [`as_mut_ptr`]: #method.as_mut_ptr\n+    /// [`as_mut_ptr`]: str::as_mut_ptr\n     ///\n     /// # Examples\n     ///\n@@ -2455,8 +2441,6 @@ impl str {\n     ///\n     /// It is your responsibility to make sure that the string slice only gets\n     /// modified in a way that it remains valid UTF-8.\n-    ///\n-    /// [`u8`]: primitive.u8.html\n     #[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]\n     #[inline]\n     pub fn as_mut_ptr(&mut self) -> *mut u8 {\n@@ -2468,8 +2452,6 @@ impl str {\n     /// This is the non-panicking alternative to indexing the `str`. Returns\n     /// [`None`] whenever equivalent indexing operation would panic.\n     ///\n-    /// [`None`]: option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2495,8 +2477,6 @@ impl str {\n     /// This is the non-panicking alternative to indexing the `str`. Returns\n     /// [`None`] whenever equivalent indexing operation would panic.\n     ///\n-    /// [`None`]: option/enum.Option.html#variant.None\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -2600,16 +2580,15 @@ impl str {\n     /// This is generally not recommended, use with caution! For a safe\n     /// alternative see [`str`] and [`Index`].\n     ///\n-    /// [`str`]: primitive.str.html\n-    /// [`Index`]: ops/trait.Index.html\n+    /// [`Index`]: crate::ops::Index\n     ///\n     /// This new slice goes from `begin` to `end`, including `begin` but\n     /// excluding `end`.\n     ///\n     /// To get a mutable string slice instead, see the\n     /// [`slice_mut_unchecked`] method.\n     ///\n-    /// [`slice_mut_unchecked`]: #method.slice_mut_unchecked\n+    /// [`slice_mut_unchecked`]: str::slice_mut_unchecked\n     ///\n     /// # Safety\n     ///\n@@ -2652,16 +2631,15 @@ impl str {\n     /// This is generally not recommended, use with caution! For a safe\n     /// alternative see [`str`] and [`IndexMut`].\n     ///\n-    /// [`str`]: primitive.str.html\n-    /// [`IndexMut`]: ops/trait.IndexMut.html\n+    /// [`IndexMut`]: crate::ops::IndexMut\n     ///\n     /// This new slice goes from `begin` to `end`, including `begin` but\n     /// excluding `end`.\n     ///\n     /// To get an immutable string slice instead, see the\n     /// [`slice_unchecked`] method.\n     ///\n-    /// [`slice_unchecked`]: #method.slice_unchecked\n+    /// [`slice_unchecked`]: str::slice_unchecked\n     ///\n     /// # Safety\n     ///\n@@ -2692,7 +2670,7 @@ impl str {\n     /// To get mutable string slices instead, see the [`split_at_mut`]\n     /// method.\n     ///\n-    /// [`split_at_mut`]: #method.split_at_mut\n+    /// [`split_at_mut`]: str::split_at_mut\n     ///\n     /// # Panics\n     ///\n@@ -2733,7 +2711,7 @@ impl str {\n     ///\n     /// To get immutable string slices instead, see the [`split_at`] method.\n     ///\n-    /// [`split_at`]: #method.split_at\n+    /// [`split_at`]: str::split_at\n     ///\n     /// # Panics\n     ///\n@@ -2913,7 +2891,7 @@ impl str {\n     /// Core Property `White_Space`. If you only want to split on ASCII whitespace\n     /// instead, use [`split_ascii_whitespace`].\n     ///\n-    /// [`split_ascii_whitespace`]: #method.split_ascii_whitespace\n+    /// [`split_ascii_whitespace`]: str::split_ascii_whitespace\n     ///\n     /// # Examples\n     ///\n@@ -2954,7 +2932,7 @@ impl str {\n     ///\n     /// To split by Unicode `Whitespace` instead, use [`split_whitespace`].\n     ///\n-    /// [`split_whitespace`]: #method.split_whitespace\n+    /// [`split_whitespace`]: str::split_whitespace\n     ///\n     /// # Examples\n     ///\n@@ -3068,8 +3046,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Examples\n     ///\n@@ -3095,8 +3072,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Examples\n     ///\n@@ -3121,8 +3097,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Examples\n     ///\n@@ -3150,9 +3125,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`None`]: option/enum.Option.html#variant.None\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Examples\n     ///\n@@ -3199,9 +3172,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`None`]: option/enum.Option.html#variant.None\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Examples\n     ///\n@@ -3247,21 +3218,18 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator will be a [`DoubleEndedIterator`] if the pattern\n     /// allows a reverse search and forward/reverse search yields the same\n     /// elements. This is true for, e.g., [`char`], but not for `&str`.\n     ///\n-    /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n-    ///\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rsplit`] method can be used.\n     ///\n-    /// [`rsplit`]: #method.rsplit\n+    /// [`rsplit`]: str::rsplit\n     ///\n     /// # Examples\n     ///\n@@ -3348,7 +3316,7 @@ impl str {\n     ///\n     /// Use [`split_whitespace`] for this behavior.\n     ///\n-    /// [`split_whitespace`]: #method.split_whitespace\n+    /// [`split_whitespace`]: str::split_whitespace\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> {\n@@ -3369,8 +3337,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Examples\n     ///\n@@ -3409,20 +3376,17 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator requires that the pattern supports a reverse\n     /// search, and it will be a [`DoubleEndedIterator`] if a forward/reverse\n     /// search yields the same elements.\n     ///\n-    /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n-    ///\n     /// For iterating from the front, the [`split`] method can be used.\n     ///\n-    /// [`split`]: #method.split\n+    /// [`split`]: str::split\n     ///\n     /// # Examples\n     ///\n@@ -3463,13 +3427,12 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// Equivalent to [`split`], except that the trailing substring\n     /// is skipped if empty.\n     ///\n-    /// [`split`]: #method.split\n+    /// [`split`]: str::split\n     ///\n     /// This method can be used for string data that is _terminated_,\n     /// rather than _separated_ by a pattern.\n@@ -3480,12 +3443,10 @@ impl str {\n     /// allows a reverse search and forward/reverse search yields the same\n     /// elements. This is true for, e.g., [`char`], but not for `&str`.\n     ///\n-    /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n-    ///\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rsplit_terminator`] method can be used.\n     ///\n-    /// [`rsplit_terminator`]: #method.rsplit_terminator\n+    /// [`rsplit_terminator`]: str::rsplit_terminator\n     ///\n     /// # Examples\n     ///\n@@ -3510,13 +3471,12 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// Equivalent to [`split`], except that the trailing substring is\n     /// skipped if empty.\n     ///\n-    /// [`split`]: #method.split\n+    /// [`split`]: str::split\n     ///\n     /// This method can be used for string data that is _terminated_,\n     /// rather than _separated_ by a pattern.\n@@ -3530,7 +3490,7 @@ impl str {\n     /// For iterating from the front, the [`split_terminator`] method can be\n     /// used.\n     ///\n-    /// [`split_terminator`]: #method.split_terminator\n+    /// [`split_terminator`]: str::split_terminator\n     ///\n     /// # Examples\n     ///\n@@ -3559,8 +3519,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3570,7 +3529,7 @@ impl str {\n     /// If the pattern allows a reverse search, the [`rsplitn`] method can be\n     /// used.\n     ///\n-    /// [`rsplitn`]: #method.rsplitn\n+    /// [`rsplitn`]: str::rsplitn\n     ///\n     /// # Examples\n     ///\n@@ -3612,8 +3571,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3622,7 +3580,7 @@ impl str {\n     ///\n     /// For splitting from the front, the [`splitn`] method can be used.\n     ///\n-    /// [`splitn`]: #method.splitn\n+    /// [`splitn`]: str::splitn\n     ///\n     /// # Examples\n     ///\n@@ -3660,21 +3618,18 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator will be a [`DoubleEndedIterator`] if the pattern\n     /// allows a reverse search and forward/reverse search yields the same\n     /// elements. This is true for, e.g., [`char`], but not for `&str`.\n     ///\n-    /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n-    ///\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rmatches`] method can be used.\n     ///\n-    /// [`rmatches`]: #method.rmatches\n+    /// [`rmatches`]: str::matches\n     ///\n     /// # Examples\n     ///\n@@ -3699,20 +3654,17 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator requires that the pattern supports a reverse\n     /// search, and it will be a [`DoubleEndedIterator`] if a forward/reverse\n     /// search yields the same elements.\n     ///\n-    /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n-    ///\n     /// For iterating from the front, the [`matches`] method can be used.\n     ///\n-    /// [`matches`]: #method.matches\n+    /// [`matches`]: str::matches\n     ///\n     /// # Examples\n     ///\n@@ -3743,21 +3695,18 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator will be a [`DoubleEndedIterator`] if the pattern\n     /// allows a reverse search and forward/reverse search yields the same\n     /// elements. This is true for, e.g., [`char`], but not for `&str`.\n     ///\n-    /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n-    ///\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rmatch_indices`] method can be used.\n     ///\n-    /// [`rmatch_indices`]: #method.rmatch_indices\n+    /// [`rmatch_indices`]: str::match_indices\n     ///\n     /// # Examples\n     ///\n@@ -3788,20 +3737,17 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Iterator behavior\n     ///\n     /// The returned iterator requires that the pattern supports a reverse\n     /// search, and it will be a [`DoubleEndedIterator`] if a forward/reverse\n     /// search yields the same elements.\n     ///\n-    /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n-    ///\n     /// For iterating from the front, the [`match_indices`] method can be used.\n     ///\n-    /// [`match_indices`]: #method.match_indices\n+    /// [`match_indices`]: str::match_indices\n     ///\n     /// # Examples\n     ///\n@@ -4009,8 +3955,7 @@ impl str {\n     /// The [pattern] can be a [`char`], a slice of [`char`]s, or a function\n     /// or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Examples\n     ///\n@@ -4057,8 +4002,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Text directionality\n     ///\n@@ -4102,8 +4046,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Examples\n     ///\n@@ -4130,8 +4073,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Examples\n     ///\n@@ -4157,8 +4099,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Text directionality\n     ///\n@@ -4206,8 +4147,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Text directionality\n     ///\n@@ -4243,8 +4183,7 @@ impl str {\n     /// The [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\n     /// function or closure that determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n-    /// [pattern]: str/pattern/index.html\n+    /// [pattern]: self::pattern\n     ///\n     /// # Text directionality\n     ///\n@@ -4292,15 +4231,14 @@ impl str {\n     /// you're trying to parse into.\n     ///\n     /// `parse` can parse any type that implements the [`FromStr`] trait.\n-    ///\n-    /// [`FromStr`]: str/trait.FromStr.html\n+\n     ///\n     /// # Errors\n     ///\n     /// Will return [`Err`] if it's not possible to parse this string slice into\n     /// the desired type.\n     ///\n-    /// [`Err`]: str/trait.FromStr.html#associatedtype.Err\n+    /// [`Err`]: FromStr::Err\n     ///\n     /// # Examples\n     ///\n@@ -4428,8 +4366,6 @@ impl str {\n     /// Note: only extended grapheme codepoints that begin the string will be\n     /// escaped.\n     ///\n-    /// [`char::escape_debug`]: ../std/primitive.char.html#method.escape_debug\n-    ///\n     /// # Examples\n     ///\n     /// As an iterator:\n@@ -4474,8 +4410,6 @@ impl str {\n \n     /// Return an iterator that escapes each char in `self` with [`char::escape_default`].\n     ///\n-    /// [`char::escape_default`]: ../std/primitive.char.html#method.escape_default\n-    ///\n     /// # Examples\n     ///\n     /// As an iterator:\n@@ -4512,8 +4446,6 @@ impl str {\n \n     /// Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n     ///\n-    /// [`char::escape_unicode`]: ../std/primitive.char.html#method.escape_unicode\n-    ///\n     /// # Examples\n     ///\n     /// As an iterator:\n@@ -4596,8 +4528,7 @@ impl Default for &mut str {\n /// This struct is created by the [`split_whitespace`] method on [`str`].\n /// See its documentation for more.\n ///\n-/// [`split_whitespace`]: ../../std/primitive.str.html#method.split_whitespace\n-/// [`str`]: ../../std/primitive.str.html\n+/// [`split_whitespace`]: str::split_whitespace\n #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n #[derive(Clone, Debug)]\n pub struct SplitWhitespace<'a> {\n@@ -4610,8 +4541,7 @@ pub struct SplitWhitespace<'a> {\n /// This struct is created by the [`split_ascii_whitespace`] method on [`str`].\n /// See its documentation for more.\n ///\n-/// [`split_ascii_whitespace`]: ../../std/primitive.str.html#method.split_ascii_whitespace\n-/// [`str`]: ../../std/primitive.str.html\n+/// [`split_ascii_whitespace`]: str::split_ascii_whitespace\n #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n #[derive(Clone, Debug)]\n pub struct SplitAsciiWhitespace<'a> {\n@@ -4626,8 +4556,7 @@ pub struct SplitAsciiWhitespace<'a> {\n /// This struct is created by the [`split_inclusive`] method on [`str`].\n /// See its documentation for more.\n ///\n-/// [`split_inclusive`]: ../../std/primitive.str.html#method.split_inclusive\n-/// [`str`]: ../../std/primitive.str.html\n+/// [`split_inclusive`]: str::split_inclusive\n #[unstable(feature = \"split_inclusive\", issue = \"72360\")]\n pub struct SplitInclusive<'a, P: Pattern<'a>>(SplitInternal<'a, P>);\n \n@@ -4761,13 +4690,10 @@ impl<'a, P: Pattern<'a>> FusedIterator for SplitInclusive<'a, P> {}\n \n /// An iterator of [`u16`] over the string encoded as UTF-16.\n ///\n-/// [`u16`]: ../../std/primitive.u16.html\n-///\n /// This struct is created by the [`encode_utf16`] method on [`str`].\n /// See its documentation for more.\n ///\n-/// [`encode_utf16`]: ../../std/primitive.str.html#method.encode_utf16\n-/// [`str`]: ../../std/primitive.str.html\n+/// [`encode_utf16`]: str::encode_utf16\n #[derive(Clone)]\n #[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n pub struct EncodeUtf16<'a> {\n@@ -4818,8 +4744,6 @@ impl<'a> Iterator for EncodeUtf16<'a> {\n impl FusedIterator for EncodeUtf16<'_> {}\n \n /// The return type of [`str::escape_debug`].\n-///\n-/// [`str::escape_debug`]: ../../std/primitive.str.html#method.escape_debug\n #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n #[derive(Clone, Debug)]\n pub struct EscapeDebug<'a> {\n@@ -4830,17 +4754,13 @@ pub struct EscapeDebug<'a> {\n }\n \n /// The return type of [`str::escape_default`].\n-///\n-/// [`str::escape_default`]: ../../std/primitive.str.html#method.escape_default\n #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n #[derive(Clone, Debug)]\n pub struct EscapeDefault<'a> {\n     inner: FlatMap<Chars<'a>, char::EscapeDefault, CharEscapeDefault>,\n }\n \n /// The return type of [`str::escape_unicode`].\n-///\n-/// [`str::escape_unicode`]: ../../std/primitive.str.html#method.escape_unicode\n #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n #[derive(Clone, Debug)]\n pub struct EscapeUnicode<'a> {"}]}