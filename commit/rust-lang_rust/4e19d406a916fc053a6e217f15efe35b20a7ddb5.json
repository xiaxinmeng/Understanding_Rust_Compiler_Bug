{"sha": "4e19d406a916fc053a6e217f15efe35b20a7ddb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMTlkNDA2YTkxNmZjMDUzYTZlMjE3ZjE1ZWZlMzViMjBhN2RkYjU=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-03-26T23:44:30Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-03-26T23:44:30Z"}, "message": "upper_case_acronyms: only lint enum variants if the enum is not public", "tree": {"sha": "30ebb0a8c1b878777982fab9b192d1df4174910d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30ebb0a8c1b878777982fab9b192d1df4174910d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e19d406a916fc053a6e217f15efe35b20a7ddb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e19d406a916fc053a6e217f15efe35b20a7ddb5", "html_url": "https://github.com/rust-lang/rust/commit/4e19d406a916fc053a6e217f15efe35b20a7ddb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e19d406a916fc053a6e217f15efe35b20a7ddb5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f2a6fe84fc811c04b5693531042deb44b077233", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f2a6fe84fc811c04b5693531042deb44b077233", "html_url": "https://github.com/rust-lang/rust/commit/6f2a6fe84fc811c04b5693531042deb44b077233"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "f8023d07437f3d1dcf905666047e27b09f0775e5", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4e19d406a916fc053a6e217f15efe35b20a7ddb5/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e19d406a916fc053a6e217f15efe35b20a7ddb5/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=4e19d406a916fc053a6e217f15efe35b20a7ddb5", "patch": "@@ -99,21 +99,21 @@ fn check_ident(cx: &EarlyContext<'_>, ident: &Ident, be_aggressive: bool) {\n \n impl EarlyLintPass for UpperCaseAcronyms {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, it: &Item) {\n-        if_chain! {\n-            if !in_external_macro(cx.sess(), it.span);\n+        // do not lint public items or in macros\n+        if !in_external_macro(cx.sess(), it.span) && !matches!(it.vis.kind, VisibilityKind::Public) {\n             if matches!(\n                 it.kind,\n-                ItemKind::TyAlias(..) | ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Trait(..)\n-            );\n-            // do not lint public items\n-            if !matches!(it.vis.kind, VisibilityKind::Public);\n-            then {\n+                ItemKind::TyAlias(..) | ItemKind::Struct(..) | ItemKind::Trait(..)\n+            ) {\n                 check_ident(cx, &it.ident, self.upper_case_acronyms_aggressive);\n+            } else if let ItemKind::Enum(ref enumdef, _) = it.kind {\n+                // check enum variants seperately because again we only want to lint on private enums and\n+                // the fn check_variant does not know about the vis of the enum of its variants\n+                &enumdef\n+                    .variants\n+                    .iter()\n+                    .for_each(|variant| check_ident(cx, &variant.ident, self.upper_case_acronyms_aggressive));\n             }\n         }\n     }\n-\n-    fn check_variant(&mut self, cx: &EarlyContext<'_>, v: &Variant) {\n-        check_ident(cx, &v.ident, self.upper_case_acronyms_aggressive);\n-    }\n }"}]}