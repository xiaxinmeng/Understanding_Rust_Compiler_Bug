{"sha": "4f14826e091e08f1ee4ff06d3ca6d5015045cfb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMTQ4MjZlMDkxZTA4ZjFlZTRmZjA2ZDNjYTZkNTAxNTA0NWNmYjU=", "commit": {"author": {"name": "xiongmao86", "email": "xiongmao86dev@sina.com", "date": "2020-04-06T13:48:38Z"}, "committer": {"name": "xiongmao86", "email": "xiongmao86dev@sina.com", "date": "2020-04-06T14:53:59Z"}, "message": "Lint on opt.as_ref().map(|x| &**x).", "tree": {"sha": "262d133706802023f349ec7b8a478f9b3b54f4d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/262d133706802023f349ec7b8a478f9b3b54f4d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f14826e091e08f1ee4ff06d3ca6d5015045cfb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f14826e091e08f1ee4ff06d3ca6d5015045cfb5", "html_url": "https://github.com/rust-lang/rust/commit/4f14826e091e08f1ee4ff06d3ca6d5015045cfb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f14826e091e08f1ee4ff06d3ca6d5015045cfb5/comments", "author": {"login": "xiongmao86", "id": 1770218, "node_id": "MDQ6VXNlcjE3NzAyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1770218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiongmao86", "html_url": "https://github.com/xiongmao86", "followers_url": "https://api.github.com/users/xiongmao86/followers", "following_url": "https://api.github.com/users/xiongmao86/following{/other_user}", "gists_url": "https://api.github.com/users/xiongmao86/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiongmao86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiongmao86/subscriptions", "organizations_url": "https://api.github.com/users/xiongmao86/orgs", "repos_url": "https://api.github.com/users/xiongmao86/repos", "events_url": "https://api.github.com/users/xiongmao86/events{/privacy}", "received_events_url": "https://api.github.com/users/xiongmao86/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xiongmao86", "id": 1770218, "node_id": "MDQ6VXNlcjE3NzAyMTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1770218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xiongmao86", "html_url": "https://github.com/xiongmao86", "followers_url": "https://api.github.com/users/xiongmao86/followers", "following_url": "https://api.github.com/users/xiongmao86/following{/other_user}", "gists_url": "https://api.github.com/users/xiongmao86/gists{/gist_id}", "starred_url": "https://api.github.com/users/xiongmao86/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xiongmao86/subscriptions", "organizations_url": "https://api.github.com/users/xiongmao86/orgs", "repos_url": "https://api.github.com/users/xiongmao86/repos", "events_url": "https://api.github.com/users/xiongmao86/events{/privacy}", "received_events_url": "https://api.github.com/users/xiongmao86/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c211cea3e99e04c2980a853b6637de22881b72eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c211cea3e99e04c2980a853b6637de22881b72eb", "html_url": "https://github.com/rust-lang/rust/commit/c211cea3e99e04c2980a853b6637de22881b72eb"}], "stats": {"total": 73, "additions": 55, "deletions": 18}, "files": [{"sha": "7cc21e4bdd23a3e4c312b81de35a70b2284de0f8", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f14826e091e08f1ee4ff06d3ca6d5015045cfb5/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14826e091e08f1ee4ff06d3ca6d5015045cfb5/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=4f14826e091e08f1ee4ff06d3ca6d5015045cfb5", "patch": "@@ -654,15 +654,15 @@ fn combine_branches(b1: NeverLoopResult, b2: NeverLoopResult) -> NeverLoopResult\n \n fn never_loop_block(block: &Block<'_>, main_loop_id: HirId) -> NeverLoopResult {\n     let stmts = block.stmts.iter().map(stmt_to_expr);\n-    let expr = once(block.expr.as_ref().map(|p| &**p));\n+    let expr = once(block.expr.as_deref());\n     let mut iter = stmts.chain(expr).filter_map(|e| e);\n     never_loop_expr_seq(&mut iter, main_loop_id)\n }\n \n fn stmt_to_expr<'tcx>(stmt: &Stmt<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n     match stmt.kind {\n         StmtKind::Semi(ref e, ..) | StmtKind::Expr(ref e, ..) => Some(e),\n-        StmtKind::Local(ref local) => local.init.as_ref().map(|p| &**p),\n+        StmtKind::Local(ref local) => local.init.as_deref(),\n         _ => None,\n     }\n }"}, {"sha": "6f85d1d69596fa3610aaf898c8d1b0e913bb96e1", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 34, "deletions": 15, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4f14826e091e08f1ee4ff06d3ca6d5015045cfb5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14826e091e08f1ee4ff06d3ca6d5015045cfb5/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=4f14826e091e08f1ee4ff06d3ca6d5015045cfb5", "patch": "@@ -3159,6 +3159,8 @@ fn lint_option_as_ref_deref<'a, 'tcx>(\n     map_args: &[hir::Expr<'_>],\n     is_mut: bool,\n ) {\n+    let same_mutability = |m| (is_mut && m == &hir::Mutability::Mut) || (!is_mut && m == &hir::Mutability::Not);\n+\n     let option_ty = cx.tables.expr_ty(&as_ref_args[0]);\n     if !match_type(cx, option_ty, &paths::OPTION) {\n         return;\n@@ -3181,23 +3183,40 @@ fn lint_option_as_ref_deref<'a, 'tcx>(\n         hir::ExprKind::Closure(_, _, body_id, _, _) => {\n             let closure_body = cx.tcx.hir().body(body_id);\n             let closure_expr = remove_blocks(&closure_body.value);\n-            if_chain! {\n-                if let hir::ExprKind::MethodCall(_, _, args) = &closure_expr.kind;\n-                if args.len() == 1;\n-                if let hir::ExprKind::Path(qpath) = &args[0].kind;\n-                if let hir::def::Res::Local(local_id) = cx.tables.qpath_res(qpath, args[0].hir_id);\n-                if closure_body.params[0].pat.hir_id == local_id;\n-                let adj = cx.tables.expr_adjustments(&args[0]).iter().map(|x| &x.kind).collect::<Box<[_]>>();\n-                if let [ty::adjustment::Adjust::Deref(None), ty::adjustment::Adjust::Borrow(_)] = *adj;\n-                then {\n-                    let method_did = cx.tables.type_dependent_def_id(closure_expr.hir_id).unwrap();\n-                    deref_aliases.iter().any(|path| match_def_path(cx, method_did, path))\n-                } else {\n-                    false\n-                }\n+\n+            match &closure_expr.kind {\n+                hir::ExprKind::MethodCall(_, _, args) => {\n+                    if_chain! {\n+                        if args.len() == 1;\n+                        if let hir::ExprKind::Path(qpath) = &args[0].kind;\n+                        if let hir::def::Res::Local(local_id) = cx.tables.qpath_res(qpath, args[0].hir_id);\n+                        if closure_body.params[0].pat.hir_id == local_id;\n+                        let adj = cx.tables.expr_adjustments(&args[0]).iter().map(|x| &x.kind).collect::<Box<[_]>>();\n+                        if let [ty::adjustment::Adjust::Deref(None), ty::adjustment::Adjust::Borrow(_)] = *adj;\n+                        then {\n+                            let method_did = cx.tables.type_dependent_def_id(closure_expr.hir_id).unwrap();\n+                            deref_aliases.iter().any(|path| match_def_path(cx, method_did, path))\n+                        } else {\n+                            false\n+                        }\n+                    }\n+                },\n+                hir::ExprKind::AddrOf(hir::BorrowKind::Ref, m, ref inner) if same_mutability(m) => {\n+                    if_chain! {\n+                        if let hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner1) = inner.kind;\n+                        if let hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner2) = inner1.kind;\n+                        if let hir::ExprKind::Path(ref qpath) = inner2.kind;\n+                        if let hir::def::Res::Local(local_id) = cx.tables.qpath_res(qpath, inner2.hir_id);\n+                        then {\n+                            closure_body.params[0].pat.hir_id == local_id\n+                        } else {\n+                            false\n+                        }\n+                    }\n+                },\n+                _ => false,\n             }\n         },\n-\n         _ => false,\n     };\n "}, {"sha": "076692e6445175da398e3ae788c803c5b57ba901", "filename": "tests/ui/option_as_ref_deref.fixed", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f14826e091e08f1ee4ff06d3ca6d5015045cfb5/tests%2Fui%2Foption_as_ref_deref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4f14826e091e08f1ee4ff06d3ca6d5015045cfb5/tests%2Fui%2Foption_as_ref_deref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.fixed?ref=4f14826e091e08f1ee4ff06d3ca6d5015045cfb5", "patch": "@@ -35,4 +35,7 @@ fn main() {\n     let _ = Some(1_usize).as_ref().map(|x| vc[*x].as_str()); // should not be linted\n \n     let _: Option<&str> = Some(&String::new()).as_ref().map(|x| x.as_str()); // should not be linted\n+\n+    let _ = opt.as_deref();\n+    let _ = opt.as_deref_mut();\n }"}, {"sha": "3bf5f715f8339525b8ad547d75eea77a96b0c1f2", "filename": "tests/ui/option_as_ref_deref.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f14826e091e08f1ee4ff06d3ca6d5015045cfb5/tests%2Fui%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f14826e091e08f1ee4ff06d3ca6d5015045cfb5/tests%2Fui%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.rs?ref=4f14826e091e08f1ee4ff06d3ca6d5015045cfb5", "patch": "@@ -38,4 +38,7 @@ fn main() {\n     let _ = Some(1_usize).as_ref().map(|x| vc[*x].as_str()); // should not be linted\n \n     let _: Option<&str> = Some(&String::new()).as_ref().map(|x| x.as_str()); // should not be linted\n+\n+    let _ = opt.as_ref().map(|x| &**x);\n+    let _ = opt.as_mut().map(|x| &mut **x);\n }"}, {"sha": "6c2bf8517060a0b2bfed9ce9860a8dc69581b052", "filename": "tests/ui/option_as_ref_deref.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4f14826e091e08f1ee4ff06d3ca6d5015045cfb5/tests%2Fui%2Foption_as_ref_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f14826e091e08f1ee4ff06d3ca6d5015045cfb5/tests%2Fui%2Foption_as_ref_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_as_ref_deref.stderr?ref=4f14826e091e08f1ee4ff06d3ca6d5015045cfb5", "patch": "@@ -88,5 +88,17 @@ error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases\n LL |     let _ = opt.clone().as_mut().map(|x| x.deref_mut()).map(|x| x.len());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.clone().as_deref_mut()`\n \n-error: aborting due to 14 previous errors\n+error: called `.as_ref().map(Deref::deref)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref()` instead\n+  --> $DIR/option_as_ref_deref.rs:42:13\n+   |\n+LL |     let _ = opt.as_ref().map(|x| &**x);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref instead: `opt.as_deref()`\n+\n+error: called `.as_mut().map(DerefMut::deref_mut)` (or with one of deref aliases) on an Option value. This can be done more directly by calling `opt.as_deref_mut()` instead\n+  --> $DIR/option_as_ref_deref.rs:43:13\n+   |\n+LL |     let _ = opt.as_mut().map(|x| &mut **x);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using as_deref_mut instead: `opt.as_deref_mut()`\n+\n+error: aborting due to 16 previous errors\n "}]}