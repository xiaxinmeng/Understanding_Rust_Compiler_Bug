{"sha": "123a456a4f6b1ddc02cf9fe54b55d2af076da0f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyM2E0NTZhNGY2YjFkZGMwMmNmOWZlNTRiNTVkMmFmMDc2ZGEwZjY=", "commit": {"author": {"name": "Edd Barrett", "email": "vext01@gmail.com", "date": "2019-05-01T14:34:51Z"}, "committer": {"name": "Edd Barrett", "email": "vext01@gmail.com", "date": "2019-05-24T13:14:36Z"}, "message": "Make place projections concrete.\n\nOnce upon a time (commit 9bd35c07c26) there were two kinds of\nprojection: one for places, and one for constants. It therefore made\nsense to share the `Projection` struct for both. Although the different\nuse-cases used different concrete types, sharing was made possible by\ntype-parameterisation of `Projection`.\n\nSince then, however, the usage of projections in constants has\ndisappeared, meaning that (forgetting lifetimes for a moment) the\nparameterised type is only every instantiated under one guise. So it may\nas well be a concrete type.", "tree": {"sha": "dfbf26c72565dddb276ec24829ad92868c868bdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfbf26c72565dddb276ec24829ad92868c868bdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6", "html_url": "https://github.com/rust-lang/rust/commit/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/comments", "author": {"login": "vext01", "id": 604955, "node_id": "MDQ6VXNlcjYwNDk1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/604955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vext01", "html_url": "https://github.com/vext01", "followers_url": "https://api.github.com/users/vext01/followers", "following_url": "https://api.github.com/users/vext01/following{/other_user}", "gists_url": "https://api.github.com/users/vext01/gists{/gist_id}", "starred_url": "https://api.github.com/users/vext01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vext01/subscriptions", "organizations_url": "https://api.github.com/users/vext01/orgs", "repos_url": "https://api.github.com/users/vext01/repos", "events_url": "https://api.github.com/users/vext01/events{/privacy}", "received_events_url": "https://api.github.com/users/vext01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vext01", "id": 604955, "node_id": "MDQ6VXNlcjYwNDk1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/604955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vext01", "html_url": "https://github.com/vext01", "followers_url": "https://api.github.com/users/vext01/followers", "following_url": "https://api.github.com/users/vext01/following{/other_user}", "gists_url": "https://api.github.com/users/vext01/gists{/gist_id}", "starred_url": "https://api.github.com/users/vext01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vext01/subscriptions", "organizations_url": "https://api.github.com/users/vext01/orgs", "repos_url": "https://api.github.com/users/vext01/repos", "events_url": "https://api.github.com/users/vext01/events{/privacy}", "received_events_url": "https://api.github.com/users/vext01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46805805abe58c287fa16963f897fd09d5d97467", "url": "https://api.github.com/repos/rust-lang/rust/commits/46805805abe58c287fa16963f897fd09d5d97467", "html_url": "https://github.com/rust-lang/rust/commit/46805805abe58c287fa16963f897fd09d5d97467"}], "stats": {"total": 122, "additions": 55, "deletions": 67}, "files": [{"sha": "6de4350c2aa988ad2eddebc850aec65bd685ca54", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 32, "deletions": 44, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=123a456a4f6b1ddc02cf9fe54b55d2af076da0f6", "patch": "@@ -1914,7 +1914,7 @@ pub enum Place<'tcx> {\n     Base(PlaceBase<'tcx>),\n \n     /// projection out of a place (access a field, deref a pointer, etc)\n-    Projection(Box<PlaceProjection<'tcx>>),\n+    Projection(Box<Projection<'tcx>>),\n }\n \n #[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable, HashStable)]\n@@ -1944,16 +1944,13 @@ impl_stable_hash_for!(struct Static<'tcx> {\n     kind\n });\n \n-/// The `Projection` data structure defines things of the form `B.x`\n-/// or `*B` or `B[index]`. Note that it is parameterized because it is\n-/// shared between `Constant` and `Place`. See the aliases\n-/// `PlaceProjection` etc below.\n+/// The `Projection` data structure defines things of the form `base.x`, `*b` or `b[index]`.\n #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord,\n          Hash, RustcEncodable, RustcDecodable, HashStable)]\n-pub struct Projection<B, V, T> {\n-    pub base: B,\n-    pub elem: ProjectionElem<V, T>,\n-}\n+pub struct Projection<'tcx> {\n+    pub base: Place<'tcx>,\n+    pub elem: PlaceElem<'tcx>,\n+ }\n \n #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord,\n          Hash, RustcEncodable, RustcDecodable, HashStable)]\n@@ -1996,10 +1993,6 @@ pub enum ProjectionElem<V, T> {\n     Downcast(Option<Symbol>, VariantIdx),\n }\n \n-/// Alias for projections as they appear in places, where the base is a place\n-/// and the index is a local.\n-pub type PlaceProjection<'tcx> = Projection<Place<'tcx>, Local, Ty<'tcx>>;\n-\n /// Alias for projections as they appear in places, where the base is a place\n /// and the index is a local.\n pub type PlaceElem<'tcx> = ProjectionElem<Local, Ty<'tcx>>;\n@@ -2045,7 +2038,7 @@ impl<'tcx> Place<'tcx> {\n     }\n \n     pub fn elem(self, elem: PlaceElem<'tcx>) -> Place<'tcx> {\n-        Place::Projection(Box::new(PlaceProjection { base: self, elem }))\n+        Place::Projection(Box::new(Projection { base: self, elem }))\n     }\n \n     /// Finds the innermost `Local` from this `Place`, *if* it is either a local itself or\n@@ -2076,22 +2069,22 @@ impl<'tcx> Place<'tcx> {\n     }\n \n     /// Recursively \"iterates\" over place components, generating a `PlaceBase` and\n-    /// `PlaceProjections` list and invoking `op` with a `PlaceProjectionsIter`.\n+    /// `Projections` list and invoking `op` with a `ProjectionsIter`.\n     pub fn iterate<R>(\n         &self,\n-        op: impl FnOnce(&PlaceBase<'tcx>, PlaceProjectionsIter<'_, 'tcx>) -> R,\n+        op: impl FnOnce(&PlaceBase<'tcx>, ProjectionsIter<'_, 'tcx>) -> R,\n     ) -> R {\n-        self.iterate2(&PlaceProjections::Empty, op)\n+        self.iterate2(&Projections::Empty, op)\n     }\n \n     fn iterate2<R>(\n         &self,\n-        next: &PlaceProjections<'_, 'tcx>,\n-        op: impl FnOnce(&PlaceBase<'tcx>, PlaceProjectionsIter<'_, 'tcx>) -> R,\n+        next: &Projections<'_, 'tcx>,\n+        op: impl FnOnce(&PlaceBase<'tcx>, ProjectionsIter<'_, 'tcx>) -> R,\n     ) -> R {\n         match self {\n             Place::Projection(interior) => interior.base.iterate2(\n-                &PlaceProjections::List {\n+                &Projections::List {\n                     projection: interior,\n                     next,\n                 },\n@@ -2111,26 +2104,26 @@ impl<'tcx> Place<'tcx> {\n /// N.B., this particular impl strategy is not the most obvious. It was\n /// chosen because it makes a measurable difference to NLL\n /// performance, as this code (`borrow_conflicts_with_place`) is somewhat hot.\n-pub enum PlaceProjections<'p, 'tcx: 'p> {\n+pub enum Projections<'p, 'tcx: 'p> {\n     Empty,\n \n     List {\n-        projection: &'p PlaceProjection<'tcx>,\n-        next: &'p PlaceProjections<'p, 'tcx>,\n+        projection: &'p Projection<'tcx>,\n+        next: &'p Projections<'p, 'tcx>,\n     }\n }\n \n-impl<'p, 'tcx> PlaceProjections<'p, 'tcx> {\n-    fn iter(&self) -> PlaceProjectionsIter<'_, 'tcx> {\n-        PlaceProjectionsIter { value: self }\n+impl<'p, 'tcx> Projections<'p, 'tcx> {\n+    fn iter(&self) -> ProjectionsIter<'_, 'tcx> {\n+        ProjectionsIter { value: self }\n     }\n }\n \n-impl<'p, 'tcx> IntoIterator for &'p PlaceProjections<'p, 'tcx> {\n-    type Item = &'p PlaceProjection<'tcx>;\n-    type IntoIter = PlaceProjectionsIter<'p, 'tcx>;\n+impl<'p, 'tcx> IntoIterator for &'p Projections<'p, 'tcx> {\n+    type Item = &'p Projection<'tcx>;\n+    type IntoIter = ProjectionsIter<'p, 'tcx>;\n \n-    /// Converts a list of `PlaceProjection` components into an iterator;\n+    /// Converts a list of `Projection` components into an iterator;\n     /// this iterator yields up a never-ending stream of `Option<&Place>`.\n     /// These begin with the \"innermost\" projection and then with each\n     /// projection therefrom. So given a place like `a.b.c` it would\n@@ -2144,21 +2137,21 @@ impl<'p, 'tcx> IntoIterator for &'p PlaceProjections<'p, 'tcx> {\n     }\n }\n \n-/// Iterator over components; see `PlaceProjections::iter` for more\n+/// Iterator over components; see `Projections::iter` for more\n /// information.\n ///\n /// N.B., this is not a *true* Rust iterator -- the code above just\n /// manually invokes `next`. This is because we (sometimes) want to\n /// keep executing even after `None` has been returned.\n-pub struct PlaceProjectionsIter<'p, 'tcx: 'p> {\n-    pub value: &'p PlaceProjections<'p, 'tcx>,\n+pub struct ProjectionsIter<'p, 'tcx: 'p> {\n+    pub value: &'p Projections<'p, 'tcx>,\n }\n \n-impl<'p, 'tcx> Iterator for PlaceProjectionsIter<'p, 'tcx> {\n-    type Item = &'p PlaceProjection<'tcx>;\n+impl<'p, 'tcx> Iterator for ProjectionsIter<'p, 'tcx> {\n+    type Item = &'p Projection<'tcx>;\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        if let &PlaceProjections::List { projection, next } = self.value {\n+        if let &Projections::List { projection, next } = self.value {\n             self.value = next;\n             Some(projection)\n         } else {\n@@ -2167,7 +2160,7 @@ impl<'p, 'tcx> Iterator for PlaceProjectionsIter<'p, 'tcx> {\n     }\n }\n \n-impl<'p, 'tcx> FusedIterator for PlaceProjectionsIter<'p, 'tcx> {}\n+impl<'p, 'tcx> FusedIterator for ProjectionsIter<'p, 'tcx> {}\n \n impl<'tcx> Debug for Place<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n@@ -2758,7 +2751,7 @@ impl<'tcx> UserTypeProjections {\n #[derive(Clone, Debug, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, HashStable)]\n pub struct UserTypeProjection {\n     pub base: UserTypeAnnotationIndex,\n-    pub projs: Vec<ProjectionElem<(), ()>>,\n+    pub projs: Vec<ProjectionKind>,\n }\n \n impl Copy for ProjectionKind { }\n@@ -3587,12 +3580,7 @@ impl<'tcx> TypeFoldable<'tcx> for Operand<'tcx> {\n     }\n }\n \n-impl<'tcx, B, V, T> TypeFoldable<'tcx> for Projection<B, V, T>\n-where\n-    B: TypeFoldable<'tcx>,\n-    V: TypeFoldable<'tcx>,\n-    T: TypeFoldable<'tcx>,\n-{\n+impl<'tcx> TypeFoldable<'tcx> for Projection<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         use crate::mir::ProjectionElem::*;\n "}, {"sha": "64ffd80e21ec0d5e269acc6f0c110afd6ff17959", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=123a456a4f6b1ddc02cf9fe54b55d2af076da0f6", "patch": "@@ -152,7 +152,7 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn visit_projection(&mut self,\n-                                place: & $($mutability)? PlaceProjection<'tcx>,\n+                                place: & $($mutability)? Projection<'tcx>,\n                                 context: PlaceContext,\n                                 location: Location) {\n                 self.super_projection(place, context, location);\n@@ -689,7 +689,7 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn super_projection(&mut self,\n-                                proj: & $($mutability)? PlaceProjection<'tcx>,\n+                                proj: & $($mutability)? Projection<'tcx>,\n                                 context: PlaceContext,\n                                 location: Location) {\n                 let Projection { base, elem } = proj;"}, {"sha": "4253962f144513d67f5289eaf5ff1f7bc3f71f9c", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=123a456a4f6b1ddc02cf9fe54b55d2af076da0f6", "patch": "@@ -2,7 +2,7 @@ use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::mir::{\n     self, AggregateKind, BindingForm, BorrowKind, ClearCrossCrate, ConstraintCategory, Local,\n-    LocalDecl, LocalKind, Location, Operand, Place, PlaceBase, PlaceProjection,\n+    LocalDecl, LocalKind, Location, Operand, Place, PlaceBase, Projection,\n     ProjectionElem, Rvalue, Statement, StatementKind, TerminatorKind, VarBindingForm,\n };\n use rustc::ty::{self, Ty};\n@@ -619,7 +619,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 // union being accessed and the field that was being accessed so we can check the\n                 // second borrowed place for the same union and a access to a different field.\n                 let mut current = first_borrowed_place;\n-                while let Place::Projection(box PlaceProjection { base, elem }) = current {\n+                while let Place::Projection(box Projection { base, elem }) = current {\n                     match elem {\n                         ProjectionElem::Field(field, _) if is_union(base) => {\n                             return Some((base, field));\n@@ -633,7 +633,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 // With the place of a union and a field access into it, we traverse the second\n                 // borrowed place and look for a access to a different field of the same union.\n                 let mut current = second_borrowed_place;\n-                while let Place::Projection(box PlaceProjection { base, elem }) = current {\n+                while let Place::Projection(box Projection { base, elem }) = current {\n                     match elem {\n                         ProjectionElem::Field(field, _) if {\n                             is_union(base) && field != target_field && base == target_base\n@@ -1495,7 +1495,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             Place::Base(PlaceBase::Static(_)) => {\n                 StorageDeadOrDrop::LocalStorageDead\n             }\n-            Place::Projection(box PlaceProjection { base, elem }) => {\n+            Place::Projection(box Projection { base, elem }) => {\n                 let base_access = self.classify_drop_access_kind(base);\n                 match elem {\n                     ProjectionElem::Deref => match base_access {"}, {"sha": "549f3b905559d002834a2d1a811b8af59676e5c5", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=123a456a4f6b1ddc02cf9fe54b55d2af076da0f6", "patch": "@@ -352,7 +352,7 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                 ..\n             } => {\n                 let try_remove_deref = match move_from {\n-                    Place::Projection(box PlaceProjection {\n+                    Place::Projection(box Projection {\n                         elem: ProjectionElem::Deref,\n                         ..\n                     }) => true,"}, {"sha": "ac44364aa695ebc1a89371ebc54fe914a4b60460", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=123a456a4f6b1ddc02cf9fe54b55d2af076da0f6", "patch": "@@ -2370,7 +2370,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             \"add_reborrow_constraint({:?}, {:?}, {:?})\",\n             location, borrow_region, borrowed_place\n         );\n-        while let Place::Projection(box PlaceProjection { base, elem }) = borrowed_place {\n+        while let Place::Projection(box Projection { base, elem }) = borrowed_place {\n             debug!(\"add_reborrow_constraint - iteration {:?}\", borrowed_place);\n \n             match *elem {"}, {"sha": "c9e8d9894783b7c55ab17672431f01f4409b4311", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=123a456a4f6b1ddc02cf9fe54b55d2af076da0f6", "patch": "@@ -3,7 +3,7 @@ use crate::borrow_check::Overlap;\n use crate::borrow_check::{Deep, Shallow, AccessDepth};\n use rustc::hir;\n use rustc::mir::{\n-    BorrowKind, Mir, Place, PlaceBase, PlaceProjection, ProjectionElem, PlaceProjectionsIter,\n+    BorrowKind, Mir, Place, PlaceBase, Projection, ProjectionElem, ProjectionsIter,\n     StaticKind\n };\n use rustc::ty::{self, TyCtxt};\n@@ -86,9 +86,9 @@ pub(super) fn borrow_conflicts_with_place<'gcx, 'tcx>(\n fn place_components_conflict<'gcx, 'tcx>(\n     tcx: TyCtxt<'_, 'gcx, 'tcx>,\n     mir: &Mir<'tcx>,\n-    borrow_projections: (&PlaceBase<'tcx>, PlaceProjectionsIter<'_, 'tcx>),\n+    borrow_projections: (&PlaceBase<'tcx>, ProjectionsIter<'_, 'tcx>),\n     borrow_kind: BorrowKind,\n-    access_projections: (&PlaceBase<'tcx>, PlaceProjectionsIter<'_, 'tcx>),\n+    access_projections: (&PlaceBase<'tcx>, ProjectionsIter<'_, 'tcx>),\n     access: AccessDepth,\n     bias: PlaceConflictBias,\n ) -> bool {\n@@ -368,8 +368,8 @@ fn place_base_conflict<'a, 'gcx: 'tcx, 'tcx>(\n fn place_projection_conflict<'a, 'gcx: 'tcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     mir: &Mir<'tcx>,\n-    pi1: &PlaceProjection<'tcx>,\n-    pi2: &PlaceProjection<'tcx>,\n+    pi1: &Projection<'tcx>,\n+    pi2: &Projection<'tcx>,\n     bias: PlaceConflictBias,\n ) -> Overlap {\n     match (&pi1.elem, &pi2.elem) {"}, {"sha": "66ca4b4dc8922aff37035690aaa216ff20b5c338", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=123a456a4f6b1ddc02cf9fe54b55d2af076da0f6", "patch": "@@ -10,7 +10,7 @@ pub fn move_path_children_matching<'tcx, F>(move_data: &MoveData<'tcx>,\n                                         path: MovePathIndex,\n                                         mut cond: F)\n                                         -> Option<MovePathIndex>\n-    where F: FnMut(&mir::PlaceProjection<'tcx>) -> bool\n+    where F: FnMut(&mir::Projection<'tcx>) -> bool\n {\n     let mut next_child = move_data.move_paths[path].first_child;\n     while let Some(child_index) = next_child {"}, {"sha": "7eb4428bf29530fa24a8daed0f69fc8574a945b9", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=123a456a4f6b1ddc02cf9fe54b55d2af076da0f6", "patch": "@@ -114,7 +114,7 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n \n     fn move_path_for_projection(&mut self,\n                                 place: &Place<'tcx>,\n-                                proj: &PlaceProjection<'tcx>)\n+                                proj: &Projection<'tcx>)\n                                 -> Result<MovePathIndex, MoveError<'tcx>>\n     {\n         let base = self.move_path_for(&proj.base)?;"}, {"sha": "dca2836839373f9711762e9c34ed251b15a42724", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=123a456a4f6b1ddc02cf9fe54b55d2af076da0f6", "patch": "@@ -161,7 +161,7 @@ trait Qualif {\n \n     fn in_projection_structurally(\n         cx: &ConstCx<'_, 'tcx>,\n-        proj: &PlaceProjection<'tcx>,\n+        proj: &Projection<'tcx>,\n     ) -> bool {\n         let base_qualif = Self::in_place(cx, &proj.base);\n         let qualif = base_qualif && Self::mask_for_ty(\n@@ -181,7 +181,7 @@ trait Qualif {\n         }\n     }\n \n-    fn in_projection(cx: &ConstCx<'_, 'tcx>, proj: &PlaceProjection<'tcx>) -> bool {\n+    fn in_projection(cx: &ConstCx<'_, 'tcx>, proj: &Projection<'tcx>) -> bool {\n         Self::in_projection_structurally(cx, proj)\n     }\n \n@@ -387,7 +387,7 @@ impl Qualif for IsNotPromotable {\n         }\n     }\n \n-    fn in_projection(cx: &ConstCx<'_, 'tcx>, proj: &PlaceProjection<'tcx>) -> bool {\n+    fn in_projection(cx: &ConstCx<'_, 'tcx>, proj: &Projection<'tcx>) -> bool {\n         match proj.elem {\n             ProjectionElem::Deref |\n             ProjectionElem::Downcast(..) => return true,"}, {"sha": "a2433ab838d07ee56be3fc929c90e69550eeb4d1", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/123a456a4f6b1ddc02cf9fe54b55d2af076da0f6/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=123a456a4f6b1ddc02cf9fe54b55d2af076da0f6", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'tcx> UniformArrayMoveOutVisitor<'a, 'tcx> {\n     fn uniform(&mut self,\n                location: Location,\n                dst_place: &Place<'tcx>,\n-               proj: &PlaceProjection<'tcx>,\n+               proj: &Projection<'tcx>,\n                item_ty: &'tcx ty::TyS<'tcx>,\n                size: u32) {\n         match proj.elem {\n@@ -103,7 +103,7 @@ impl<'a, 'tcx> UniformArrayMoveOutVisitor<'a, 'tcx> {\n                                           Place::Base(PlaceBase::Local(temp)),\n                                           Rvalue::Use(\n                                               Operand::Move(\n-                                                  Place::Projection(box PlaceProjection{\n+                                                  Place::Projection(box Projection{\n                                                       base: proj.base.clone(),\n                                                       elem: ProjectionElem::ConstantIndex{\n                                                           offset: i,\n@@ -133,7 +133,7 @@ impl<'a, 'tcx> UniformArrayMoveOutVisitor<'a, 'tcx> {\n                                       dst_place.clone(),\n                                       Rvalue::Use(\n                                           Operand::Move(\n-                                              Place::Projection(box PlaceProjection{\n+                                              Place::Projection(box Projection{\n                                                   base: proj.base.clone(),\n                                                   elem: ProjectionElem::ConstantIndex{\n                                                       offset: size - offset,\n@@ -246,7 +246,7 @@ impl RestoreSubsliceArrayMoveOut {\n                              dst_place.clone(),\n                              Rvalue::Use(\n                                  Operand::Move(\n-                                     Place::Projection(box PlaceProjection{\n+                                     Place::Projection(box Projection{\n                                          base: opt_src_place.unwrap().clone(),\n                                          elem: ProjectionElem::Subslice{\n                                              from: min, to: size - max - 1}}))));\n@@ -261,7 +261,7 @@ impl RestoreSubsliceArrayMoveOut {\n                 let statement = &block.statements[location.statement_index];\n                 if let StatementKind::Assign(\n                     Place::Base(PlaceBase::Local(_)),\n-                    box Rvalue::Use(Operand::Move(Place::Projection(box PlaceProjection{\n+                    box Rvalue::Use(Operand::Move(Place::Projection(box Projection{\n                         ref base, elem: ProjectionElem::ConstantIndex{\n                             offset, min_length: _, from_end: false}})))) = statement.kind {\n                     return Some((offset, base))"}]}