{"sha": "af999f152bcec9a0fb9c792bbb14eba093ddeec8", "node_id": "C_kwDOAAsO6NoAKGFmOTk5ZjE1MmJjZWM5YTBmYjljNzkyYmJiMTRlYmEwOTNkZGVlYzg", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-17T15:38:56Z"}, "committer": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-05-02T13:56:13Z"}, "message": "Reformat VSCode client code", "tree": {"sha": "8ddbc1d9f350b28d01af0bc09650e173bbe799ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ddbc1d9f350b28d01af0bc09650e173bbe799ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af999f152bcec9a0fb9c792bbb14eba093ddeec8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af999f152bcec9a0fb9c792bbb14eba093ddeec8", "html_url": "https://github.com/rust-lang/rust/commit/af999f152bcec9a0fb9c792bbb14eba093ddeec8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af999f152bcec9a0fb9c792bbb14eba093ddeec8/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1721b11e923df58489578b48fbc15105e960aa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1721b11e923df58489578b48fbc15105e960aa4", "html_url": "https://github.com/rust-lang/rust/commit/d1721b11e923df58489578b48fbc15105e960aa4"}], "stats": {"total": 77, "additions": 36, "deletions": 41}, "files": [{"sha": "7fe32754c90303b82a650b6bd67c253e63761c15", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af999f152bcec9a0fb9c792bbb14eba093ddeec8/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/af999f152bcec9a0fb9c792bbb14eba093ddeec8/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=af999f152bcec9a0fb9c792bbb14eba093ddeec8", "patch": "@@ -8,7 +8,7 @@ import { applySnippetWorkspaceEdit, applySnippetTextEdits } from \"./snippets\";\n import { spawnSync } from \"child_process\";\n import { RunnableQuickPick, selectRunnable, createTask, createArgs } from \"./run\";\n import { AstInspector } from \"./ast_inspector\";\n-import { isRustDocument, isCargoTomlDocument, sleep, isRustEditor, RustEditor } from './util';\n+import { isRustDocument, isCargoTomlDocument, sleep, isRustEditor, RustEditor } from \"./util\";\n import { startDebugSession, makeDebugConfig } from \"./debug\";\n import { LanguageClient } from \"vscode-languageclient/node\";\n import { LINKED_COMMANDS } from \"./client\";"}, {"sha": "ea42b249ff9416e21d2659036f16264a89d804b0", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/af999f152bcec9a0fb9c792bbb14eba093ddeec8/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/af999f152bcec9a0fb9c792bbb14eba093ddeec8/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=af999f152bcec9a0fb9c792bbb14eba093ddeec8", "patch": "@@ -3,19 +3,24 @@ import * as lc from \"vscode-languageclient/node\";\n import * as ra from \"./lsp_ext\";\n import * as path from \"path\";\n \n-import {Config, prepareVSCodeConfig} from './config';\n-import {createClient} from './client';\n+import {Config, prepareVSCodeConfig} from \"./config\";\n+import {createClient} from \"./client\";\n import {\n     executeDiscoverProject,\n     isRustDocument,\n     isRustEditor,\n     LazyOutputChannel,\n     log,\n     RustEditor,\n-} from './util';\n-import {ServerStatusParams} from './lsp_ext';\n-import { Dependency, DependencyFile, RustDependenciesProvider, DependencyId } from './dependencies_provider';\n-import { execRevealDependency } from './commands';\n+} from \"./util\";\n+import {ServerStatusParams} from \"./lsp_ext\";\n+import {\n+    Dependency,\n+    DependencyFile,\n+    RustDependenciesProvider,\n+    DependencyId,\n+} from \"./dependencies_provider\";\n+import { execRevealDependency } from \"./commands\";\n import {\n     Dependency,\n     DependencyFile,"}, {"sha": "18a96be1248667c0b3c30c03436f888a5de614b8", "filename": "editors/code/src/dependencies_provider.ts", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/af999f152bcec9a0fb9c792bbb14eba093ddeec8/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "raw_url": "https://github.com/rust-lang/rust/raw/af999f152bcec9a0fb9c792bbb14eba093ddeec8/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts?ref=af999f152bcec9a0fb9c792bbb14eba093ddeec8", "patch": "@@ -7,7 +7,9 @@ import { FetchDependencyGraphResult } from \"./lsp_ext\";\n \n \n \n-export class RustDependenciesProvider implements vscode.TreeDataProvider<Dependency | DependencyFile>{\n+export class RustDependenciesProvider\n+    implements vscode.TreeDataProvider<Dependency | DependencyFile>\n+{\n \n     dependenciesMap: { [id: string]: Dependency | DependencyFile };ctx: CtxInit;\n \n@@ -49,7 +51,9 @@ export class RustDependenciesProvider implements vscode.TreeDataProvider<Depende\n         return element;\n     }\n \n-    getChildren(element?: Dependency | DependencyFile): vscode.ProviderResult<Dependency[] | DependencyFile[]> {\n+    getChildren(\n+        element?: Dependency | DependencyFile\n+    ): vscode.ProviderResult<Dependency[] | DependencyFile[]> {\n         return new Promise((resolve, _reject) => {\n             if (!this.workspaceRoot) {\n                 void vscode.window.showInformationMessage(\"No dependency in empty workspace\");\n@@ -61,19 +65,12 @@ export class RustDependenciesProvider implements vscode.TreeDataProvider<Depende\n                     const filePath = fspath.join(element.dependencyPath, fileName);\n                     const collapsibleState = fs.lstatSync(filePath).isDirectory()\n                         ? vscode.TreeItemCollapsibleState.Collapsed\n-                        :vscode.TreeItemCollapsibleState.None;\n-                    const dep = new DependencyFile(\n-                        fileName,\n-                        filePath,\n-                        element,\n-                        collapsibleState);\n-\n+                        : vscode.TreeItemCollapsibleState.None;\n+                    const dep = new DependencyFile(fileName, filePath, element, collapsibleState);\n                     this.dependenciesMap[dep.dependencyPath.toLowerCase()] = dep;\n                     return dep;\n                 });\n-                return resolve(\n-                    files\n-                );\n+                return resolve(files);\n             } else {\n                 return resolve(this.getRootDependencies());\n             }\n@@ -118,7 +115,6 @@ export class Dependency extends vscode.TreeItem {\n }\n \n export class DependencyFile extends vscode.TreeItem {\n-\n     constructor(\n         readonly label: string,\n         readonly dependencyPath: string,"}, {"sha": "2d23e8c35ed59264395420dd6b56361c7b81ac74", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/af999f152bcec9a0fb9c792bbb14eba093ddeec8/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/af999f152bcec9a0fb9c792bbb14eba093ddeec8/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=af999f152bcec9a0fb9c792bbb14eba093ddeec8", "patch": "@@ -103,12 +103,12 @@ export class Cargo {\n         return await new Promise((resolve, reject) => {\n             const crates: Crate[] = [];\n \n-            const cargo = cp.spawn(pathToCargo, ['tree', '--prefix', 'none'], {\n-                stdio: ['ignore', 'pipe', 'pipe'],\n-                cwd: this.rootFolder\n+            const cargo = cp.spawn(pathToCargo, [\"tree\", \"--prefix\", \"none\"], {\n+                stdio: [\"ignore\", \"pipe\", \"pipe\"],\n+                cwd: this.rootFolder,\n             });\n             const rl = readline.createInterface({ input: cargo.stdout });\n-            rl.on('line', line => {\n+            rl.on(\"line\", (line) => {\n                 const match = line.match(TREE_LINE_PATTERN);\n                 if (match) {\n                     const name = match[1];\n@@ -121,18 +121,15 @@ export class Cargo {\n                     crates.push({ name, version });\n                 }\n             });\n-            cargo.on('exit', (exitCode, _) => {\n-                if (exitCode === 0)\n-                    resolve(crates);\n-                else\n-                    reject(new Error(`exit code: ${exitCode}.`));\n+            cargo.on(\"exit\", (exitCode, _) => {\n+                if (exitCode === 0) resolve(crates);\n+                else reject(new Error(`exit code: ${exitCode}.`));\n             });\n-\n         });\n     }\n \n     private shouldIgnore(extraInfo: string): boolean {\n-        return extraInfo !== undefined && (extraInfo === '*' || path.isAbsolute(extraInfo));\n+        return extraInfo !== undefined && (extraInfo === \"*\" || path.isAbsolute(extraInfo));\n     }\n \n     private async runCargo(\n@@ -169,26 +166,23 @@ export class Cargo {\n export async function activeToolchain(): Promise<string> {\n     const pathToRustup = await rustupPath();\n     return await new Promise((resolve, reject) => {\n-        const execution = cp.spawn(pathToRustup, ['show', 'active-toolchain'], {\n-            stdio: ['ignore', 'pipe', 'pipe'],\n-            cwd: os.homedir()\n+        const execution = cp.spawn(pathToRustup, [\"show\", \"active-toolchain\"], {\n+            stdio: [\"ignore\", \"pipe\", \"pipe\"],\n+            cwd: os.homedir(),\n         });\n         const rl = readline.createInterface({ input: execution.stdout });\n \n         let currToolchain: string | undefined = undefined;\n-        rl.on('line', line => {\n+        rl.on(\"line\", (line) => {\n             const match = line.match(TOOLCHAIN_PATTERN);\n             if (match) {\n                 currToolchain = match[1];\n             }\n         });\n-        execution.on('exit', (exitCode, _) => {\n-            if (exitCode === 0 && currToolchain)\n-                resolve(currToolchain);\n-            else\n-                reject(new Error(`exit code: ${exitCode}.`));\n+        execution.on(\"exit\", (exitCode, _) => {\n+            if (exitCode === 0 && currToolchain) resolve(currToolchain);\n+            else reject(new Error(`exit code: ${exitCode}.`));\n         });\n-\n     });\n }\n "}]}