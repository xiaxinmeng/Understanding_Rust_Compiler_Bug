{"sha": "0970c3454baa0164df81a9ff665430d486687331", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NzBjMzQ1NGJhYTAxNjRkZjgxYTlmZjY2NTQzMGQ0ODY2ODczMzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-06T14:01:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-06T14:10:35Z"}, "message": "Rename", "tree": {"sha": "3fda8da782dd8606dfc8dd20c5158c0c1b034dda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fda8da782dd8606dfc8dd20c5158c0c1b034dda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0970c3454baa0164df81a9ff665430d486687331", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0970c3454baa0164df81a9ff665430d486687331", "html_url": "https://github.com/rust-lang/rust/commit/0970c3454baa0164df81a9ff665430d486687331", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0970c3454baa0164df81a9ff665430d486687331/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdd4df97ba5ce1f59abf9e945052fc6f3e077c3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdd4df97ba5ce1f59abf9e945052fc6f3e077c3a", "html_url": "https://github.com/rust-lang/rust/commit/fdd4df97ba5ce1f59abf9e945052fc6f3e077c3a"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "af6756d17bda1b3f375cb7eccc4eb3bbe81195aa", "filename": "crates/ra_assists/src/assist_ctx.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0970c3454baa0164df81a9ff665430d486687331/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0970c3454baa0164df81a9ff665430d486687331/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassist_ctx.rs?ref=0970c3454baa0164df81a9ff665430d486687331", "patch": "@@ -22,16 +22,16 @@ pub(crate) struct Assist(pub(crate) Vec<AssistInfo>);\n pub(crate) struct AssistInfo {\n     pub(crate) label: AssistLabel,\n     pub(crate) group_label: Option<GroupLabel>,\n-    pub(crate) action: Option<SourceChange>,\n+    pub(crate) source_change: Option<SourceChange>,\n }\n \n impl AssistInfo {\n     fn new(label: AssistLabel) -> AssistInfo {\n-        AssistInfo { label, group_label: None, action: None }\n+        AssistInfo { label, group_label: None, source_change: None }\n     }\n \n-    fn resolved(self, action: SourceChange) -> AssistInfo {\n-        AssistInfo { action: Some(action), ..self }\n+    fn resolved(self, source_change: SourceChange) -> AssistInfo {\n+        AssistInfo { source_change: Some(source_change), ..self }\n     }\n \n     fn with_group(self, group_label: GroupLabel) -> AssistInfo {\n@@ -40,7 +40,7 @@ impl AssistInfo {\n \n     pub(crate) fn into_resolved(self) -> Option<ResolvedAssist> {\n         let label = self.label;\n-        self.action.map(|action| ResolvedAssist { label, action })\n+        self.source_change.map(|source_change| ResolvedAssist { label, source_change })\n     }\n }\n \n@@ -104,12 +104,12 @@ impl<'a> AssistCtx<'a> {\n         let change_label = label.label.clone();\n         let mut info = AssistInfo::new(label);\n         if self.should_compute_edit {\n-            let action = {\n+            let source_change = {\n                 let mut edit = ActionBuilder::new(&self);\n                 f(&mut edit);\n                 edit.build(change_label, self.frange.file_id)\n             };\n-            info = info.resolved(action)\n+            info = info.resolved(source_change)\n         };\n \n         Some(Assist(vec![info]))\n@@ -163,12 +163,12 @@ impl<'a> AssistGroup<'a> {\n         let change_label = label.label.clone();\n         let mut info = AssistInfo::new(label).with_group(self.group.clone());\n         if self.ctx.should_compute_edit {\n-            let action = {\n+            let source_change = {\n                 let mut edit = ActionBuilder::new(&self.ctx);\n                 f(&mut edit);\n                 edit.build(change_label, self.ctx.frange.file_id)\n             };\n-            info = info.resolved(action)\n+            info = info.resolved(source_change)\n         };\n \n         self.assists.push(info)"}, {"sha": "6e81ea8eec58e31b299dcfc74cfb3ab9e2cbd7b9", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0970c3454baa0164df81a9ff665430d486687331/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0970c3454baa0164df81a9ff665430d486687331/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=0970c3454baa0164df81a9ff665430d486687331", "patch": "@@ -59,7 +59,7 @@ impl AssistLabel {\n #[derive(Debug, Clone)]\n pub struct ResolvedAssist {\n     pub label: AssistLabel,\n-    pub action: SourceChange,\n+    pub source_change: SourceChange,\n }\n \n #[derive(Debug, Clone, Copy)]"}, {"sha": "17e3ece9f60868c41f9908c06c589412d5eccc02", "filename": "crates/ra_assists/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0970c3454baa0164df81a9ff665430d486687331/crates%2Fra_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0970c3454baa0164df81a9ff665430d486687331/crates%2Fra_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftests.rs?ref=0970c3454baa0164df81a9ff665430d486687331", "patch": "@@ -57,7 +57,7 @@ fn check_doc_test(assist_id: &str, before: &str, after: &str) {\n         });\n \n     let actual = {\n-        let change = assist.action.source_file_edits.pop().unwrap();\n+        let change = assist.source_change.source_file_edits.pop().unwrap();\n         let mut actual = before.clone();\n         change.edit.apply(&mut actual);\n         actual\n@@ -94,7 +94,7 @@ fn check(assist: Handler, before: &str, expected: ExpectedResult) {\n \n     match (assist(assist_ctx), expected) {\n         (Some(assist), ExpectedResult::After(after)) => {\n-            let mut action = assist.0[0].action.clone().unwrap();\n+            let mut action = assist.0[0].source_change.clone().unwrap();\n             let change = action.source_file_edits.pop().unwrap();\n \n             let mut actual = db.file_text(change.file_id).as_ref().to_owned();"}, {"sha": "737f8710919bb1ea41e8432a18531b6cedbce0f4", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0970c3454baa0164df81a9ff665430d486687331/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0970c3454baa0164df81a9ff665430d486687331/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=0970c3454baa0164df81a9ff665430d486687331", "patch": "@@ -478,7 +478,7 @@ impl Analysis {\n                     id: assist.label.id,\n                     label: assist.label.label,\n                     group_label: assist.label.group.map(|it| it.0),\n-                    source_change: assist.action,\n+                    source_change: assist.source_change,\n                 })\n                 .collect()\n         })"}]}