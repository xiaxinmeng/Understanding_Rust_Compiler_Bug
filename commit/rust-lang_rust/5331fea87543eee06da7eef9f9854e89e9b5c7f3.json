{"sha": "5331fea87543eee06da7eef9f9854e89e9b5c7f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMzFmZWE4NzU0M2VlZTA2ZGE3ZWVmOWY5ODU0ZTg5ZTliNWM3ZjM=", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-06-03T07:31:27Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-07-27T20:26:50Z"}, "message": "Update tests", "tree": {"sha": "04bcd149bff857eab7c84fc4bf514d82022d61ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04bcd149bff857eab7c84fc4bf514d82022d61ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5331fea87543eee06da7eef9f9854e89e9b5c7f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5331fea87543eee06da7eef9f9854e89e9b5c7f3", "html_url": "https://github.com/rust-lang/rust/commit/5331fea87543eee06da7eef9f9854e89e9b5c7f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5331fea87543eee06da7eef9f9854e89e9b5c7f3/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8", "html_url": "https://github.com/rust-lang/rust/commit/ea988afcda8fc0e4d91b394c57b5f2b9ac57adb8"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "bce4c81b78aa104709dd0a238f923a2f44de6451", "filename": "tests/ui/transmute.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5331fea87543eee06da7eef9f9854e89e9b5c7f3/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5331fea87543eee06da7eef9f9854e89e9b5c7f3/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=5331fea87543eee06da7eef9f9854e89e9b5c7f3", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_fn_transmute)]\n #![allow(dead_code)]\n \n extern crate core;"}, {"sha": "e31accb982af39e3d502d9cdb94f94d2633bccee", "filename": "tests/ui/transmute.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5331fea87543eee06da7eef9f9854e89e9b5c7f3/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5331fea87543eee06da7eef9f9854e89e9b5c7f3/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=5331fea87543eee06da7eef9f9854e89e9b5c7f3", "patch": "@@ -1,155 +1,155 @@\n error: transmute from a type (`&T`) to itself\n-  --> $DIR/transmute.rs:20:20\n+  --> $DIR/transmute.rs:19:20\n    |\n LL |     let _: &'a T = core::intrinsics::transmute(t);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::useless-transmute` implied by `-D warnings`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:24:23\n+  --> $DIR/transmute.rs:23:23\n    |\n LL |     let _: *const T = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:26:21\n+  --> $DIR/transmute.rs:25:21\n    |\n LL |     let _: *mut T = core::intrinsics::transmute(t);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T as *mut T`\n \n error: transmute from a reference to a pointer\n-  --> $DIR/transmute.rs:28:23\n+  --> $DIR/transmute.rs:27:23\n    |\n LL |     let _: *const U = core::intrinsics::transmute(t);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `t as *const T as *const U`\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:34:27\n+  --> $DIR/transmute.rs:33:27\n    |\n LL |         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:36:27\n+  --> $DIR/transmute.rs:35:27\n    |\n LL |         let _: Vec<i32> = core::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:38:27\n+  --> $DIR/transmute.rs:37:27\n    |\n LL |         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:40:27\n+  --> $DIR/transmute.rs:39:27\n    |\n LL |         let _: Vec<i32> = std::mem::transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`std::vec::Vec<i32>`) to itself\n-  --> $DIR/transmute.rs:42:27\n+  --> $DIR/transmute.rs:41:27\n    |\n LL |         let _: Vec<i32> = my_transmute(my_vec());\n    |                           ^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from an integer to a pointer\n-  --> $DIR/transmute.rs:44:31\n+  --> $DIR/transmute.rs:43:31\n    |\n LL |         let _: *const usize = std::mem::transmute(5_isize);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `5_isize as *const usize`\n \n error: transmute from an integer to a pointer\n-  --> $DIR/transmute.rs:48:31\n+  --> $DIR/transmute.rs:47:31\n    |\n LL |         let _: *const usize = std::mem::transmute(1 + 1usize);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(1 + 1usize) as *const usize`\n \n error: transmute from a type (`*const Usize`) to the type that it points to (`Usize`)\n-  --> $DIR/transmute.rs:63:24\n+  --> $DIR/transmute.rs:62:24\n    |\n LL |         let _: Usize = core::intrinsics::transmute(int_const_ptr);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::crosspointer-transmute` implied by `-D warnings`\n \n error: transmute from a type (`*mut Usize`) to the type that it points to (`Usize`)\n-  --> $DIR/transmute.rs:65:24\n+  --> $DIR/transmute.rs:64:24\n    |\n LL |         let _: Usize = core::intrinsics::transmute(int_mut_ptr);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`Usize`) to a pointer to that type (`*const Usize`)\n-  --> $DIR/transmute.rs:67:31\n+  --> $DIR/transmute.rs:66:31\n    |\n LL |         let _: *const Usize = core::intrinsics::transmute(my_int());\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a type (`Usize`) to a pointer to that type (`*mut Usize`)\n-  --> $DIR/transmute.rs:69:29\n+  --> $DIR/transmute.rs:68:29\n    |\n LL |         let _: *mut Usize = core::intrinsics::transmute(my_int());\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: transmute from a `u32` to a `char`\n-  --> $DIR/transmute.rs:75:28\n+  --> $DIR/transmute.rs:74:28\n    |\n LL |     let _: char = unsafe { std::mem::transmute(0_u32) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_u32).unwrap()`\n    |\n    = note: `-D clippy::transmute-int-to-char` implied by `-D warnings`\n \n error: transmute from a `i32` to a `char`\n-  --> $DIR/transmute.rs:76:28\n+  --> $DIR/transmute.rs:75:28\n    |\n LL |     let _: char = unsafe { std::mem::transmute(0_i32) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::char::from_u32(0_i32 as u32).unwrap()`\n \n error: transmute from a `u8` to a `bool`\n-  --> $DIR/transmute.rs:81:28\n+  --> $DIR/transmute.rs:80:28\n    |\n LL |     let _: bool = unsafe { std::mem::transmute(0_u8) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `0_u8 != 0`\n    |\n    = note: `-D clippy::transmute-int-to-bool` implied by `-D warnings`\n \n error: transmute from a `u32` to a `f32`\n-  --> $DIR/transmute.rs:87:31\n+  --> $DIR/transmute.rs:86:31\n    |\n LL |         let _: f32 = unsafe { std::mem::transmute(0_u32) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_u32)`\n    |\n    = note: `-D clippy::transmute-int-to-float` implied by `-D warnings`\n \n error: transmute from a `i32` to a `f32`\n-  --> $DIR/transmute.rs:88:31\n+  --> $DIR/transmute.rs:87:31\n    |\n LL |         let _: f32 = unsafe { std::mem::transmute(0_i32) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f32::from_bits(0_i32 as u32)`\n \n error: transmute from a `u64` to a `f64`\n-  --> $DIR/transmute.rs:89:31\n+  --> $DIR/transmute.rs:88:31\n    |\n LL |         let _: f64 = unsafe { std::mem::transmute(0_u64) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_u64)`\n \n error: transmute from a `i64` to a `f64`\n-  --> $DIR/transmute.rs:90:31\n+  --> $DIR/transmute.rs:89:31\n    |\n LL |         let _: f64 = unsafe { std::mem::transmute(0_i64) };\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `f64::from_bits(0_i64 as u64)`\n \n error: transmute from a `&[u8]` to a `&str`\n-  --> $DIR/transmute.rs:108:28\n+  --> $DIR/transmute.rs:107:28\n    |\n LL |     let _: &str = unsafe { std::mem::transmute(b) };\n    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8(b).unwrap()`\n    |\n    = note: `-D clippy::transmute-bytes-to-str` implied by `-D warnings`\n \n error: transmute from a `&mut [u8]` to a `&mut str`\n-  --> $DIR/transmute.rs:109:32\n+  --> $DIR/transmute.rs:108:32\n    |\n LL |     let _: &mut str = unsafe { std::mem::transmute(mb) };\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::str::from_utf8_mut(mb).unwrap()`"}, {"sha": "806b2d77dc77de8945ae875a22db7b5e3fe4c3eb", "filename": "tests/ui/transmute_float_to_int.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5331fea87543eee06da7eef9f9854e89e9b5c7f3/tests%2Fui%2Ftransmute_float_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5331fea87543eee06da7eef9f9854e89e9b5c7f3/tests%2Fui%2Ftransmute_float_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_float_to_int.rs?ref=5331fea87543eee06da7eef9f9854e89e9b5c7f3", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_fn_transmute)]\n #![warn(clippy::transmute_float_to_int)]\n \n fn float_to_int() {"}, {"sha": "eb786bb39f95aa5c1f7110d053acf78cd96b340b", "filename": "tests/ui/transmute_float_to_int.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5331fea87543eee06da7eef9f9854e89e9b5c7f3/tests%2Fui%2Ftransmute_float_to_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5331fea87543eee06da7eef9f9854e89e9b5c7f3/tests%2Fui%2Ftransmute_float_to_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_float_to_int.stderr?ref=5331fea87543eee06da7eef9f9854e89e9b5c7f3", "patch": "@@ -1,37 +1,37 @@\n error: transmute from a `f32` to a `u32`\n-  --> $DIR/transmute_float_to_int.rs:5:27\n+  --> $DIR/transmute_float_to_int.rs:4:27\n    |\n LL |     let _: u32 = unsafe { std::mem::transmute(1f32) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f32.to_bits()`\n    |\n    = note: `-D clippy::transmute-float-to-int` implied by `-D warnings`\n \n error: transmute from a `f32` to a `i32`\n-  --> $DIR/transmute_float_to_int.rs:6:27\n+  --> $DIR/transmute_float_to_int.rs:5:27\n    |\n LL |     let _: i32 = unsafe { std::mem::transmute(1f32) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f32.to_bits() as i32`\n \n error: transmute from a `f64` to a `u64`\n-  --> $DIR/transmute_float_to_int.rs:7:27\n+  --> $DIR/transmute_float_to_int.rs:6:27\n    |\n LL |     let _: u64 = unsafe { std::mem::transmute(1f64) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f64.to_bits()`\n \n error: transmute from a `f64` to a `i64`\n-  --> $DIR/transmute_float_to_int.rs:8:27\n+  --> $DIR/transmute_float_to_int.rs:7:27\n    |\n LL |     let _: i64 = unsafe { std::mem::transmute(1f64) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f64.to_bits() as i64`\n \n error: transmute from a `f64` to a `u64`\n-  --> $DIR/transmute_float_to_int.rs:9:27\n+  --> $DIR/transmute_float_to_int.rs:8:27\n    |\n LL |     let _: u64 = unsafe { std::mem::transmute(1.0) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1.0f64.to_bits()`\n \n error: transmute from a `f64` to a `u64`\n-  --> $DIR/transmute_float_to_int.rs:10:27\n+  --> $DIR/transmute_float_to_int.rs:9:27\n    |\n LL |     let _: u64 = unsafe { std::mem::transmute(-1.0) };\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-1.0f64).to_bits()`"}]}