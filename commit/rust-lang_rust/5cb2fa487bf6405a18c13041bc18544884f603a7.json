{"sha": "5cb2fa487bf6405a18c13041bc18544884f603a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYjJmYTQ4N2JmNjQwNWExOGMxMzA0MWJjMTg1NDQ4ODRmNjAzYTc=", "commit": {"author": {"name": "Dolpheyn", "email": "farissufyan99@gmail.com", "date": "2020-05-04T14:14:25Z"}, "committer": {"name": "Dolpheyn", "email": "farissufyan99@gmail.com", "date": "2020-05-04T23:27:43Z"}, "message": "Document From trait for Option implementations", "tree": {"sha": "bee64bfe8bd39cb0a7c4891fe73ffa8fe654b52a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bee64bfe8bd39cb0a7c4891fe73ffa8fe654b52a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cb2fa487bf6405a18c13041bc18544884f603a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cb2fa487bf6405a18c13041bc18544884f603a7", "html_url": "https://github.com/rust-lang/rust/commit/5cb2fa487bf6405a18c13041bc18544884f603a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cb2fa487bf6405a18c13041bc18544884f603a7/comments", "author": {"login": "Dolpheyn", "id": 47665123, "node_id": "MDQ6VXNlcjQ3NjY1MTIz", "avatar_url": "https://avatars.githubusercontent.com/u/47665123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dolpheyn", "html_url": "https://github.com/Dolpheyn", "followers_url": "https://api.github.com/users/Dolpheyn/followers", "following_url": "https://api.github.com/users/Dolpheyn/following{/other_user}", "gists_url": "https://api.github.com/users/Dolpheyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dolpheyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dolpheyn/subscriptions", "organizations_url": "https://api.github.com/users/Dolpheyn/orgs", "repos_url": "https://api.github.com/users/Dolpheyn/repos", "events_url": "https://api.github.com/users/Dolpheyn/events{/privacy}", "received_events_url": "https://api.github.com/users/Dolpheyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Dolpheyn", "id": 47665123, "node_id": "MDQ6VXNlcjQ3NjY1MTIz", "avatar_url": "https://avatars.githubusercontent.com/u/47665123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dolpheyn", "html_url": "https://github.com/Dolpheyn", "followers_url": "https://api.github.com/users/Dolpheyn/followers", "following_url": "https://api.github.com/users/Dolpheyn/following{/other_user}", "gists_url": "https://api.github.com/users/Dolpheyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dolpheyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dolpheyn/subscriptions", "organizations_url": "https://api.github.com/users/Dolpheyn/orgs", "repos_url": "https://api.github.com/users/Dolpheyn/repos", "events_url": "https://api.github.com/users/Dolpheyn/events{/privacy}", "received_events_url": "https://api.github.com/users/Dolpheyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6318d24ad8440fa30428b405be1174478e9536e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6318d24ad8440fa30428b405be1174478e9536e3", "html_url": "https://github.com/rust-lang/rust/commit/6318d24ad8440fa30428b405be1174478e9536e3"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "a87f3c1804cb0a8d98dc391b72f728e5ef1db3e2", "filename": "src/libcore/option.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/5cb2fa487bf6405a18c13041bc18544884f603a7/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cb2fa487bf6405a18c13041bc18544884f603a7/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=5cb2fa487bf6405a18c13041bc18544884f603a7", "patch": "@@ -1357,12 +1357,38 @@ impl<'a, T> IntoIterator for &'a mut Option<T> {\n \n #[stable(since = \"1.12.0\", feature = \"option_from\")]\n impl<T> From<T> for Option<T> {\n+    /// Copies val to a new Option::Some\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let o: Option<u8> = Option::from(67);\n+    /// assert_eq!(Some(67), o);\n+    /// ```\n     fn from(val: T) -> Option<T> {\n         Some(val)\n     }\n }\n \n #[stable(feature = \"option_ref_from_ref_option\", since = \"1.30.0\")]\n+    /// Converts from &Option<T> to Option<&T>\n+    ///\n+    /// # Examples\n+    /// Converts an `Option<`[`String`]`>` into an `Option<`[`usize`]`>`, preserving the original.\n+    /// The [`map`] method takes the `self` argument by value, consuming the original,\n+    /// so this technique uses `as_ref` to first take an `Option` to a reference\n+    /// to the value inside the original.\n+    ///\n+    /// [`map`]: enum.Option.html#method.map\n+    /// [`String`]: ../../std/string/struct.String.html\n+    /// [`usize`]: ../../std/primitive.usize.html\n+    ///\n+    /// ```\n+    /// let s: Option<String> = Some(String::from(\"Hello, Rustaceans!\"));\n+    /// let o: Option<usize> = Option::from(&s).map(|ss: &String| ss.len());\n+    /// println!(\"Can still print s: {}\", s);\n+    /// assert_eq!(o, Some(18));\n+    /// ```\n impl<'a, T> From<&'a Option<T>> for Option<&'a T> {\n     fn from(o: &'a Option<T>) -> Option<&'a T> {\n         o.as_ref()\n@@ -1371,6 +1397,19 @@ impl<'a, T> From<&'a Option<T>> for Option<&'a T> {\n \n #[stable(feature = \"option_ref_from_ref_option\", since = \"1.30.0\")]\n impl<'a, T> From<&'a mut Option<T>> for Option<&'a mut T> {\n+    /// Converts from &mut Option<T> to Option<&mut T>\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut s = Some(String::from(\"Hello\"));\n+    /// let o: Option<&mut String> = Option::from(&mut s);\n+    /// match o {\n+    ///     Some(t) => *t = String::from(\"Hello, Rustaceans!\"),\n+    ///     None => (),\n+    /// }\n+    /// assert_eq!(s, Some(String::from(\"Hello, Rustaceans!\")));\n+    /// ```\n     fn from(o: &'a mut Option<T>) -> Option<&'a mut T> {\n         o.as_mut()\n     }"}]}