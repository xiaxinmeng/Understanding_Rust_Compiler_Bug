{"sha": "0f6e0107c3c6d7152eb870f5bced2ea5b1743626", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNmUwMTA3YzNjNmQ3MTUyZWI4NzBmNWJjZWQyZWE1YjE3NDM2MjY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-11-08T09:09:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-08T09:09:15Z"}, "message": "Rollup merge of #45582 - GuillaumeGomez:doc-unix-missing-links, r=frewsxcv\n\nAdd missing links and examples\n\nr? @rust-lang/docs", "tree": {"sha": "44609dfde56ba3d61f17a170b177002ec5ff207b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44609dfde56ba3d61f17a170b177002ec5ff207b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f6e0107c3c6d7152eb870f5bced2ea5b1743626", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6e0107c3c6d7152eb870f5bced2ea5b1743626", "html_url": "https://github.com/rust-lang/rust/commit/0f6e0107c3c6d7152eb870f5bced2ea5b1743626", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f6e0107c3c6d7152eb870f5bced2ea5b1743626/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e177df3d5c4a5a9432f33f54ee459ea25bf7f2d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e177df3d5c4a5a9432f33f54ee459ea25bf7f2d2", "html_url": "https://github.com/rust-lang/rust/commit/e177df3d5c4a5a9432f33f54ee459ea25bf7f2d2"}, {"sha": "cef05737342292958f17f5fa9f8266a6e1c15799", "url": "https://api.github.com/repos/rust-lang/rust/commits/cef05737342292958f17f5fa9f8266a6e1c15799", "html_url": "https://github.com/rust-lang/rust/commit/cef05737342292958f17f5fa9f8266a6e1c15799"}], "stats": {"total": 74, "additions": 70, "deletions": 4}, "files": [{"sha": "15f858bca164310d7a27e6c49f697ad80b20c922", "filename": "src/libstd/sys/unix/ext/fs.rs", "status": "modified", "additions": 70, "deletions": 4, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0f6e0107c3c6d7152eb870f5bced2ea5b1743626/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6e0107c3c6d7152eb870f5bced2ea5b1743626/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Ffs.rs?ref=0f6e0107c3c6d7152eb870f5bced2ea5b1743626", "patch": "@@ -20,7 +20,9 @@ use sys;\n use sys_common::{FromInner, AsInner, AsInnerMut};\n use sys::platform::fs::MetadataExt as UnixMetadataExt;\n \n-/// Unix-specific extensions to `File`\n+/// Unix-specific extensions to [`File`].\n+///\n+/// [`File`]: ../../../../std/fs/struct.File.html\n #[stable(feature = \"file_offset\", since = \"1.15.0\")]\n pub trait FileExt {\n     /// Reads a number of bytes starting from a given offset.\n@@ -515,19 +517,79 @@ impl MetadataExt for fs::Metadata {\n     fn blocks(&self) -> u64 { self.st_blocks() }\n }\n \n-/// Add special unix types (block/char device, fifo and socket)\n+/// Add support for special unix types (block/char device, fifo and socket).\n #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n pub trait FileTypeExt {\n     /// Returns whether this file type is a block device.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::fs::FileTypeExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"block_device_file\")?;\n+    /// let file_type = meta.file_type();\n+    /// assert!(file_type.is_block_device());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n     fn is_block_device(&self) -> bool;\n     /// Returns whether this file type is a char device.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::fs::FileTypeExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"char_device_file\")?;\n+    /// let file_type = meta.file_type();\n+    /// assert!(file_type.is_char_device());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n     fn is_char_device(&self) -> bool;\n     /// Returns whether this file type is a fifo.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::fs::FileTypeExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"fifo_file\")?;\n+    /// let file_type = meta.file_type();\n+    /// assert!(file_type.is_fifo());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n     fn is_fifo(&self) -> bool;\n     /// Returns whether this file type is a socket.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::fs;\n+    /// use std::os::unix::fs::FileTypeExt;\n+    ///\n+    /// # use std::io;\n+    /// # fn f() -> io::Result<()> {\n+    /// let meta = fs::metadata(\"unix.socket\")?;\n+    /// let file_type = meta.file_type();\n+    /// assert!(file_type.is_socket());\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n     #[stable(feature = \"file_type_ext\", since = \"1.5.0\")]\n     fn is_socket(&self) -> bool;\n }\n@@ -540,7 +602,9 @@ impl FileTypeExt for fs::FileType {\n     fn is_socket(&self) -> bool { self.as_inner().is(libc::S_IFSOCK) }\n }\n \n-/// Unix-specific extension methods for `fs::DirEntry`\n+/// Unix-specific extension methods for [`fs::DirEntry`].\n+///\n+/// [`fs::DirEntry`]: ../../../../std/fs/struct.DirEntry.html\n #[stable(feature = \"dir_entry_ext\", since = \"1.1.0\")]\n pub trait DirEntryExt {\n     /// Returns the underlying `d_ino` field in the contained `dirent`\n@@ -600,7 +664,9 @@ pub fn symlink<P: AsRef<Path>, Q: AsRef<Path>>(src: P, dst: Q) -> io::Result<()>\n }\n \n #[stable(feature = \"dir_builder\", since = \"1.6.0\")]\n-/// An extension trait for `fs::DirBuilder` for unix-specific options.\n+/// An extension trait for [`fs::DirBuilder`] for unix-specific options.\n+///\n+/// [`fs::DirBuilder`]: ../../../../std/fs/struct.DirBuilder.html\n pub trait DirBuilderExt {\n     /// Sets the mode to create new directories with. This option defaults to\n     /// 0o777."}]}