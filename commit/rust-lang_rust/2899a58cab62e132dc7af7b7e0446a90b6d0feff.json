{"sha": "2899a58cab62e132dc7af7b7e0446a90b6d0feff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4OTlhNThjYWI2MmUxMzJkYzdhZjdiN2UwNDQ2YTkwYjZkMGZlZmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-07T18:11:47Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-18T14:08:25Z"}, "message": "extract error_cannot_declare_mod_here", "tree": {"sha": "feea6afab0dc7fa227fdfb107256223aca6f34a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feea6afab0dc7fa227fdfb107256223aca6f34a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2899a58cab62e132dc7af7b7e0446a90b6d0feff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2899a58cab62e132dc7af7b7e0446a90b6d0feff", "html_url": "https://github.com/rust-lang/rust/commit/2899a58cab62e132dc7af7b7e0446a90b6d0feff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2899a58cab62e132dc7af7b7e0446a90b6d0feff/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc75cba23feb45b2d1b67ee07e6eb8264c0d5fd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc75cba23feb45b2d1b67ee07e6eb8264c0d5fd6", "html_url": "https://github.com/rust-lang/rust/commit/bc75cba23feb45b2d1b67ee07e6eb8264c0d5fd6"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "43d93e39575835480de23f62f255f7e1bf94394d", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2899a58cab62e132dc7af7b7e0446a90b6d0feff/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2899a58cab62e132dc7af7b7e0446a90b6d0feff/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=2899a58cab62e132dc7af7b7e0446a90b6d0feff", "patch": "@@ -142,41 +142,41 @@ impl<'a> Parser<'a> {\n                 }\n                 Err(err)\n             }\n-            DirectoryOwnership::UnownedViaMod => {\n-                let mut err =\n-                    self.struct_span_err(id_sp, \"cannot declare a new module at this location\");\n-                if !id_sp.is_dummy() {\n-                    let src_path = self.sess.source_map().span_to_filename(id_sp);\n-                    if let FileName::Real(src_path) = src_path {\n-                        if let Some(stem) = src_path.file_stem() {\n-                            let mut dest_path = src_path.clone();\n-                            dest_path.set_file_name(stem);\n-                            dest_path.push(\"mod.rs\");\n-                            err.span_note(\n-                                id_sp,\n-                                &format!(\n-                                    \"maybe move this module `{}` to its own \\\n-                                                directory via `{}`\",\n-                                    src_path.display(),\n-                                    dest_path.display()\n-                                ),\n-                            );\n-                        }\n-                    }\n-                }\n-                if paths.path_exists {\n+            DirectoryOwnership::UnownedViaMod => self.error_cannot_declare_mod_here(id_sp, paths),\n+        }\n+    }\n+\n+    fn error_cannot_declare_mod_here<T>(&self, id_sp: Span, paths: ModulePath) -> PResult<'a, T> {\n+        let mut err = self.struct_span_err(id_sp, \"cannot declare a new module at this location\");\n+        if !id_sp.is_dummy() {\n+            if let FileName::Real(src_path) = self.sess.source_map().span_to_filename(id_sp) {\n+                if let Some(stem) = src_path.file_stem() {\n+                    let mut dest_path = src_path.clone();\n+                    dest_path.set_file_name(stem);\n+                    dest_path.push(\"mod.rs\");\n                     err.span_note(\n                         id_sp,\n                         &format!(\n-                            \"... or maybe `use` the module `{}` instead \\\n-                                            of possibly redeclaring it\",\n-                            paths.name\n+                            \"maybe move this module `{}` to its own \\\n+                                    directory via `{}`\",\n+                            src_path.display(),\n+                            dest_path.display()\n                         ),\n                     );\n                 }\n-                Err(err)\n             }\n         }\n+        if paths.path_exists {\n+            err.span_note(\n+                id_sp,\n+                &format!(\n+                    \"... or maybe `use` the module `{}` instead \\\n+                                of possibly redeclaring it\",\n+                    paths.name\n+                ),\n+            );\n+        }\n+        Err(err)\n     }\n \n     /// Derive a submodule path from the first found `#[path = \"path_string\"]`."}]}