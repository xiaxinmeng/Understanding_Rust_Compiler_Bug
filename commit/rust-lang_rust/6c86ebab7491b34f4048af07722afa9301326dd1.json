{"sha": "6c86ebab7491b34f4048af07722afa9301326dd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjODZlYmFiNzQ5MWIzNGY0MDQ4YWYwNzcyMmFmYTkzMDEzMjZkZDE=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-31T00:29:47Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-31T00:38:31Z"}, "message": "Remove FIXME\n\nCo-authored-by: Joshua Nelson <jyn514@gmail.com>", "tree": {"sha": "2fbfbc03f5f18175af59ccede723e905ecb954ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fbfbc03f5f18175af59ccede723e905ecb954ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c86ebab7491b34f4048af07722afa9301326dd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c86ebab7491b34f4048af07722afa9301326dd1", "html_url": "https://github.com/rust-lang/rust/commit/6c86ebab7491b34f4048af07722afa9301326dd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c86ebab7491b34f4048af07722afa9301326dd1/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75705ab3a92bdc5bd5de1aba93013ecd852be6f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/75705ab3a92bdc5bd5de1aba93013ecd852be6f7", "html_url": "https://github.com/rust-lang/rust/commit/75705ab3a92bdc5bd5de1aba93013ecd852be6f7"}], "stats": {"total": 1, "additions": 0, "deletions": 1}, "files": [{"sha": "2e116da6ff5dd4751add025d83fb39b857c4ca52", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6c86ebab7491b34f4048af07722afa9301326dd1/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c86ebab7491b34f4048af07722afa9301326dd1/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=6c86ebab7491b34f4048af07722afa9301326dd1", "patch": "@@ -768,7 +768,6 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n         use rustc_middle::ty::DefIdTree;\n \n         let parent_node = if item.is_fake() {\n-            // FIXME: is this correct?\n             None\n         } else {\n             find_nearest_parent_module(self.cx.tcx, item.def_id)"}]}