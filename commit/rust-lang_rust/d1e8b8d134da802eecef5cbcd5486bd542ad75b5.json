{"sha": "d1e8b8d134da802eecef5cbcd5486bd542ad75b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZThiOGQxMzRkYTgwMmVlY2VmNWNiY2Q1NDg2YmQ1NDJhZDc1YjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T16:42:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T16:42:17Z"}, "message": "Fix tests", "tree": {"sha": "8da32b9af06851c2d2bc0d815f9d6dbccba2e90f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8da32b9af06851c2d2bc0d815f9d6dbccba2e90f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1e8b8d134da802eecef5cbcd5486bd542ad75b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e8b8d134da802eecef5cbcd5486bd542ad75b5", "html_url": "https://github.com/rust-lang/rust/commit/d1e8b8d134da802eecef5cbcd5486bd542ad75b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1e8b8d134da802eecef5cbcd5486bd542ad75b5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad204f7562747150c4f570d7ce648f2539530b76", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad204f7562747150c4f570d7ce648f2539530b76", "html_url": "https://github.com/rust-lang/rust/commit/ad204f7562747150c4f570d7ce648f2539530b76"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "1343043ddf183b63cf77668006fc94cbf893b384", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d1e8b8d134da802eecef5cbcd5486bd542ad75b5/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e8b8d134da802eecef5cbcd5486bd542ad75b5/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=d1e8b8d134da802eecef5cbcd5486bd542ad75b5", "patch": "@@ -168,16 +168,27 @@ mod assists {\n \n #[cfg(test)]\n mod helpers {\n-    use ra_db::{fixture::WithFixture, FileRange};\n-    use ra_ide_db::RootDatabase;\n+    use std::sync::Arc;\n+\n+    use ra_db::{fixture::WithFixture, FileId, FileRange, SourceDatabaseExt};\n+    use ra_ide_db::{symbol_index::SymbolsDatabase, RootDatabase};\n     use ra_syntax::TextRange;\n     use test_utils::{add_cursor, assert_eq_text, extract_offset, extract_range};\n \n     use crate::{Assist, AssistCtx};\n \n+    pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n+        let (mut db, file_id) = RootDatabase::with_single_file(text);\n+        // FIXME: ideally, this should be done by the above `RootDatabase::with_single_file`,\n+        // but it looks like this might need specialization? :(\n+        let local_roots = vec![db.file_source_root(file_id)];\n+        db.set_local_roots(Arc::new(local_roots));\n+        (db, file_id)\n+    }\n+\n     pub(crate) fn check_assist(assist: fn(AssistCtx) -> Option<Assist>, before: &str, after: &str) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = RootDatabase::with_single_file(&before);\n+        let (db, file_id) = with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist =\n@@ -205,7 +216,7 @@ mod helpers {\n         after: &str,\n     ) {\n         let (range, before) = extract_range(before);\n-        let (db, file_id) = RootDatabase::with_single_file(&before);\n+        let (db, file_id) = with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist =\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n@@ -227,7 +238,7 @@ mod helpers {\n         target: &str,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = RootDatabase::with_single_file(&before);\n+        let (db, file_id) = with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist =\n@@ -247,7 +258,7 @@ mod helpers {\n         target: &str,\n     ) {\n         let (range, before) = extract_range(before);\n-        let (db, file_id) = RootDatabase::with_single_file(&before);\n+        let (db, file_id) = with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist =\n             AssistCtx::with_ctx(&db, frange, true, assist).expect(\"code action is not applicable\");\n@@ -265,7 +276,7 @@ mod helpers {\n         before: &str,\n     ) {\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = RootDatabase::with_single_file(&before);\n+        let (db, file_id) = with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n@@ -277,7 +288,7 @@ mod helpers {\n         before: &str,\n     ) {\n         let (range, before) = extract_range(before);\n-        let (db, file_id) = RootDatabase::with_single_file(&before);\n+        let (db, file_id) = with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assist = AssistCtx::with_ctx(&db, frange, true, assist);\n         assert!(assist.is_none());\n@@ -286,17 +297,17 @@ mod helpers {\n \n #[cfg(test)]\n mod tests {\n-    use ra_db::{fixture::WithFixture, FileRange};\n+    use ra_db::FileRange;\n     use ra_syntax::TextRange;\n     use test_utils::{extract_offset, extract_range};\n \n-    use ra_ide_db::RootDatabase;\n+    use crate::helpers;\n \n     #[test]\n     fn assist_order_field_struct() {\n         let before = \"struct Foo { <|>bar: u32 }\";\n         let (before_cursor_pos, before) = extract_offset(before);\n-        let (db, file_id) = RootDatabase::with_single_file(&before);\n+        let (db, file_id) = helpers::with_single_file(&before);\n         let frange =\n             FileRange { file_id, range: TextRange::offset_len(before_cursor_pos, 0.into()) };\n         let assists = super::assists(&db, frange);\n@@ -320,7 +331,7 @@ mod tests {\n             }\n         }\";\n         let (range, before) = extract_range(before);\n-        let (db, file_id) = RootDatabase::with_single_file(&before);\n+        let (db, file_id) = helpers::with_single_file(&before);\n         let frange = FileRange { file_id, range };\n         let assists = super::assists(&db, frange);\n         let mut assists = assists.iter();"}, {"sha": "7889067232a6298cafeb1c1e8973a4ed631fec9f", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1e8b8d134da802eecef5cbcd5486bd542ad75b5/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1e8b8d134da802eecef5cbcd5486bd542ad75b5/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=d1e8b8d134da802eecef5cbcd5486bd542ad75b5", "patch": "@@ -92,7 +92,7 @@ pub fn classify_name(\n             ast::FnDef(it) => {\n                 let src = name.with_value(it);\n                 let def: hir::Function = sb.to_def(src)?;\n-                if parent.parent().and_then(ast::ItemList::cast).is_some() {\n+                if parent.parent().and_then(ast::ItemList::cast).map_or(false, |it| it.syntax().parent().and_then(ast::Module::cast).is_none()) {\n                     Some(from_assoc_item(sb.db, def.into()))\n                 } else {\n                     Some(from_module_def(sb.db, def.into(), None))"}]}