{"sha": "5837acce532e0cd65a1c0cb8c03cc18a4c22f327", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MzdhY2NlNTMyZTBjZDY1YTFjMGNiOGMwM2NjMThhNGMyMmYzMjc=", "commit": {"author": {"name": "Aaron Loucks", "email": "aloucks@cofront.net", "date": "2020-05-31T15:33:48Z"}, "committer": {"name": "Aaron Loucks", "email": "aloucks@cofront.net", "date": "2020-06-03T10:46:07Z"}, "message": "Add basic hover and completion doc tests for macro generated items", "tree": {"sha": "fa162f2dc57a53be9a6090fb3776cc9586332551", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa162f2dc57a53be9a6090fb3776cc9586332551"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5837acce532e0cd65a1c0cb8c03cc18a4c22f327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5837acce532e0cd65a1c0cb8c03cc18a4c22f327", "html_url": "https://github.com/rust-lang/rust/commit/5837acce532e0cd65a1c0cb8c03cc18a4c22f327", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5837acce532e0cd65a1c0cb8c03cc18a4c22f327/comments", "author": {"login": "aloucks", "id": 221559, "node_id": "MDQ6VXNlcjIyMTU1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/221559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aloucks", "html_url": "https://github.com/aloucks", "followers_url": "https://api.github.com/users/aloucks/followers", "following_url": "https://api.github.com/users/aloucks/following{/other_user}", "gists_url": "https://api.github.com/users/aloucks/gists{/gist_id}", "starred_url": "https://api.github.com/users/aloucks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aloucks/subscriptions", "organizations_url": "https://api.github.com/users/aloucks/orgs", "repos_url": "https://api.github.com/users/aloucks/repos", "events_url": "https://api.github.com/users/aloucks/events{/privacy}", "received_events_url": "https://api.github.com/users/aloucks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aloucks", "id": 221559, "node_id": "MDQ6VXNlcjIyMTU1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/221559?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aloucks", "html_url": "https://github.com/aloucks", "followers_url": "https://api.github.com/users/aloucks/followers", "following_url": "https://api.github.com/users/aloucks/following{/other_user}", "gists_url": "https://api.github.com/users/aloucks/gists{/gist_id}", "starred_url": "https://api.github.com/users/aloucks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aloucks/subscriptions", "organizations_url": "https://api.github.com/users/aloucks/orgs", "repos_url": "https://api.github.com/users/aloucks/repos", "events_url": "https://api.github.com/users/aloucks/events{/privacy}", "received_events_url": "https://api.github.com/users/aloucks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c655c01f31ceffae4f8219f9706992e0e7f188a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c655c01f31ceffae4f8219f9706992e0e7f188a", "html_url": "https://github.com/rust-lang/rust/commit/4c655c01f31ceffae4f8219f9706992e0e7f188a"}], "stats": {"total": 184, "additions": 182, "deletions": 2}, "files": [{"sha": "ab43cd3d339544ffb88887b4494eaa2d2a99e05d", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5837acce532e0cd65a1c0cb8c03cc18a4c22f327/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5837acce532e0cd65a1c0cb8c03cc18a4c22f327/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=5837acce532e0cd65a1c0cb8c03cc18a4c22f327", "patch": "@@ -109,6 +109,6 @@ fn expand_doc_attrs(owner: &dyn ast::AttrsOwner) -> Option<String> {\n     if docs.is_empty() {\n         None\n     } else {\n-        Some(docs)\n+        Some(docs.trim_end_matches(\"\\n\\n\").to_owned())\n     }\n }"}, {"sha": "a721e23c6934544bacf9c8593bf97f7fe1823779", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/5837acce532e0cd65a1c0cb8c03cc18a4c22f327/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5837acce532e0cd65a1c0cb8c03cc18a4c22f327/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=5837acce532e0cd65a1c0cb8c03cc18a4c22f327", "patch": "@@ -125,3 +125,81 @@ pub(crate) fn completions(\n \n     Some(acc)\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::completion::completion_config::CompletionConfig;\n+    use crate::mock_analysis::analysis_and_position;\n+\n+    struct DetailAndDocumentation<'a> {\n+        detail: &'a str,\n+        documentation: &'a str,\n+    }\n+\n+    fn check_detail_and_documentation(fixture: &str, expected: DetailAndDocumentation) {\n+        let (analysis, position) = analysis_and_position(fixture);\n+        let config = CompletionConfig::default();\n+        let completions = analysis.completions(&config, position).unwrap().unwrap();\n+        for item in completions {\n+            if item.detail() == Some(expected.detail) {\n+                let opt = item.documentation();\n+                let doc = opt.as_ref().map(|it| it.as_str());\n+                assert_eq!(doc, Some(expected.documentation));\n+                return;\n+            }\n+        }\n+        panic!(\"completion detail not found: {}\", expected.detail)\n+    }\n+\n+    #[test]\n+    fn test_completion_detail_from_macro_generated_struct_fn_doc_attr() {\n+        check_detail_and_documentation(\n+            r#\"\n+            //- /lib.rs\n+            macro_rules! bar {\n+                () => {\n+                    struct Bar;\n+                    impl Bar {\n+                        #[doc = \"Do the foo\"]\n+                        fn foo(&self) {}\n+                    }\n+                }\n+            }\n+\n+            bar!();\n+\n+            fn foo() {\n+                let bar = Bar;\n+                bar.fo<|>;\n+            }\n+            \"#,\n+            DetailAndDocumentation { detail: \"fn foo(&self)\", documentation: \"Do the foo\" },\n+        );\n+    }\n+\n+    #[test]\n+    fn test_completion_detail_from_macro_generated_struct_fn_doc_comment() {\n+        check_detail_and_documentation(\n+            r#\"\n+            //- /lib.rs\n+            macro_rules! bar {\n+                () => {\n+                    struct Bar;\n+                    impl Bar {\n+                        /// Do the foo\n+                        fn foo(&self) {}\n+                    }\n+                }\n+            }\n+\n+            bar!();\n+\n+            fn foo() {\n+                let bar = Bar;\n+                bar.fo<|>;\n+            }\n+            \"#,\n+            DetailAndDocumentation { detail: \"fn foo(&self)\", documentation: \" Do the foo\" },\n+        );\n+    }\n+}"}, {"sha": "731fc36735355fab0a4a885bd28a1b27329df256", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 103, "deletions": 1, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/5837acce532e0cd65a1c0cb8c03cc18a4c22f327/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5837acce532e0cd65a1c0cb8c03cc18a4c22f327/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=5837acce532e0cd65a1c0cb8c03cc18a4c22f327", "patch": "@@ -256,7 +256,7 @@ fn expand_doc_attrs(owner: &dyn ast::AttrsOwner) -> Option<String> {\n     if docs.is_empty() {\n         None\n     } else {\n-        Some(docs)\n+        Some(docs.trim_end_matches(\"\\n\\n\").to_owned())\n     }\n }\n \n@@ -996,4 +996,106 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             &[\"mod my\"],\n         );\n     }\n+\n+    #[test]\n+    fn test_hover_struct_doc_comment() {\n+        check_hover_result(\n+            r#\"\n+            //- /lib.rs\n+            /// bar docs\n+            struct Bar;\n+\n+            fn foo() {\n+                let bar = Ba<|>r;\n+            }\n+            \"#,\n+            &[\"struct Bar\\n```\\n___\\n\\nbar docs\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_struct_doc_attr() {\n+        check_hover_result(\n+            r#\"\n+            //- /lib.rs\n+            #[doc = \"bar docs\"]\n+            struct Bar;\n+\n+            fn foo() {\n+                let bar = Ba<|>r;\n+            }\n+            \"#,\n+            &[\"struct Bar\\n```\\n___\\n\\nbar docs\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_struct_doc_attr_multiple_and_mixed() {\n+        check_hover_result(\n+            r#\"\n+            //- /lib.rs\n+            /// bar docs 0\n+            #[doc = \"bar docs 1\"]\n+            #[doc = \"bar docs 2\"]\n+            struct Bar;\n+\n+            fn foo() {\n+                let bar = Ba<|>r;\n+            }\n+            \"#,\n+            &[\"struct Bar\\n```\\n___\\n\\nbar docs 0\\n\\nbar docs 1\\n\\nbar docs 2\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_macro_generated_struct_fn_doc_comment() {\n+        check_hover_result(\n+            r#\"\n+            //- /lib.rs\n+            macro_rules! bar {\n+                () => {\n+                    struct Bar;\n+                    impl Bar {\n+                        /// Do the foo\n+                        fn foo(&self) {}\n+                    }\n+                }\n+            }\n+\n+            bar!();\n+\n+            fn foo() {\n+                let bar = Bar;\n+                bar.fo<|>o();\n+            }\n+            \"#,\n+            &[\"Bar\\n```\\n\\n```rust\\nfn foo(&self)\\n```\\n___\\n\\n Do the foo\"],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_macro_generated_struct_fn_doc_attr() {\n+        check_hover_result(\n+            r#\"\n+            //- /lib.rs\n+            macro_rules! bar {\n+                () => {\n+                    struct Bar;\n+                    impl Bar {\n+                        #[doc = \"Do the foo\"]\n+                        fn foo(&self) {}\n+                    }\n+                }\n+            }\n+\n+            bar!();\n+\n+            fn foo() {\n+                let bar = Bar;\n+                bar.fo<|>o();\n+            }\n+            \"#,\n+            &[\"Bar\\n```\\n\\n```rust\\nfn foo(&self)\\n```\\n___\\n\\nDo the foo\"],\n+        );\n+    }\n }"}]}