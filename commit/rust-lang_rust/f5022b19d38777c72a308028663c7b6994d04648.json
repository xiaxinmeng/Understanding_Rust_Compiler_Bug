{"sha": "f5022b19d38777c72a308028663c7b6994d04648", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MDIyYjE5ZDM4Nzc3YzcyYTMwODAyODY2M2M3YjY5OTRkMDQ2NDg=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-02T13:43:23Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-10-02T13:43:23Z"}, "message": "Fix dangling pointer bug for zero-sized reads", "tree": {"sha": "ff9645a780bf17cb1800258140b8abfeca66249d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff9645a780bf17cb1800258140b8abfeca66249d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5022b19d38777c72a308028663c7b6994d04648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5022b19d38777c72a308028663c7b6994d04648", "html_url": "https://github.com/rust-lang/rust/commit/f5022b19d38777c72a308028663c7b6994d04648", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5022b19d38777c72a308028663c7b6994d04648/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78e0d309efe507afab2e71a2e3a0f8bec1cd4f1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/78e0d309efe507afab2e71a2e3a0f8bec1cd4f1a", "html_url": "https://github.com/rust-lang/rust/commit/78e0d309efe507afab2e71a2e3a0f8bec1cd4f1a"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "9d3e3d261625ba4c520828ecd7132be84930d9e4", "filename": "src/shims/io.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f5022b19d38777c72a308028663c7b6994d04648/src%2Fshims%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5022b19d38777c72a308028663c7b6994d04648/src%2Fshims%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fio.rs?ref=f5022b19d38777c72a308028663c7b6994d04648", "patch": "@@ -150,21 +150,27 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let tcx = &{ this.tcx.tcx };\n \n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n-        let buf = this.force_ptr(this.read_scalar(buf_op)?.not_undef()?)?;\n+        let buf_scalar = this.read_scalar(buf_op)?.not_undef()?;\n         let count = this.read_scalar(count_op)?.to_usize(&*this.tcx)?;\n \n         // Remove the file handle to avoid borrowing issues\n         this.remove_handle_and(fd, |mut handle, this| {\n             // Don't use `?` to avoid returning before reinserting the handle\n-            let bytes = this\n-                .memory_mut()\n-                .get_mut(buf.alloc_id).and_then(|alloc|\n-                    alloc.get_bytes_mut(tcx, buf, Size::from_bytes(count))\n-                    .map(|buffer| handle.file.read(buffer).map(|bytes| bytes as i64))\n-                );\n+            let bytes =\n+            if count == 0 {\n+                Ok(handle.file.read(&mut []))\n+            } else {\n+                this.force_ptr(buf_scalar).and_then(|buf| this\n+                    .memory_mut()\n+                    .get_mut(buf.alloc_id).and_then(|alloc|\n+                        alloc.get_bytes_mut(tcx, buf, Size::from_bytes(count))\n+                        .map(|buffer| handle.file.read(buffer))\n+                    ))\n+\n+            };\n             // Reinsert the file handle\n             this.machine.file_handler.handles.insert(fd, handle);\n-            this.consume_result(bytes?)\n+            this.consume_result(bytes?.map(|bytes| bytes as i64))\n         })\n     }\n "}, {"sha": "a17f948980a935bce931b1a2f4c13f2c39cac3a2", "filename": "tests/run-pass/file_read.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f5022b19d38777c72a308028663c7b6994d04648/tests%2Frun-pass%2Ffile_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5022b19d38777c72a308028663c7b6994d04648/tests%2Frun-pass%2Ffile_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffile_read.rs?ref=f5022b19d38777c72a308028663c7b6994d04648", "patch": "@@ -6,14 +6,18 @@ use std::io::{ Read, Write };\n \n fn main() {\n     // FIXME: remove the file and delete it when `rm` is implemented.\n-\n+    let path = \"./tests/hello.txt\";\n+    let bytes = b\"Hello, World!\\n\";\n     // Test creating, writing and closing a file (closing is tested when `file` is dropped).\n-    let mut file = File::create(\"./tests/hello.txt\").unwrap();\n-    file.write(b\"Hello, World!\\n\").unwrap();\n-\n+    let mut file = File::create(path).unwrap();\n+    file.write(bytes).unwrap();\n     // Test opening, reading and closing a file.\n-    let mut file = File::open(\"./tests/hello.txt\").unwrap();\n-    let mut contents = String::new();\n-    file.read_to_string(&mut contents).unwrap();\n-    assert_eq!(\"Hello, World!\\n\", contents);\n+    let mut file = File::open(path).unwrap();\n+    let mut contents = Vec::new();\n+    // Reading 0 bytes should not fill `contents`.\n+    file.read(&mut contents).unwrap();\n+    assert!(contents.is_empty());\n+    // Reading until EOF should get the whole text.\n+    file.read_to_end(&mut contents).unwrap();\n+    assert_eq!(bytes, contents.as_slice());\n }"}]}