{"sha": "432eb8a094322a3aa2e40c439f9b50c0d7947d61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMmViOGEwOTQzMjJhM2FhMmU0MGM0MzlmOWI1MGMwZDc5NDdkNjE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-31T19:10:38Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-04-02T20:32:18Z"}, "message": "Add `Crate` and `Restricted` variants to `ast::Visibility`", "tree": {"sha": "4c06b3810117f425326ff2d03201bfca344a6be9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c06b3810117f425326ff2d03201bfca344a6be9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/432eb8a094322a3aa2e40c439f9b50c0d7947d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/432eb8a094322a3aa2e40c439f9b50c0d7947d61", "html_url": "https://github.com/rust-lang/rust/commit/432eb8a094322a3aa2e40c439f9b50c0d7947d61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/432eb8a094322a3aa2e40c439f9b50c0d7947d61/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc355244df5ae74eaabe9a1e19200b9160010505", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc355244df5ae74eaabe9a1e19200b9160010505", "html_url": "https://github.com/rust-lang/rust/commit/bc355244df5ae74eaabe9a1e19200b9160010505"}], "stats": {"total": 48, "additions": 40, "deletions": 8}, "files": [{"sha": "66b9e217bd387d448103c5c0e2d3103335fec2b1", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/432eb8a094322a3aa2e40c439f9b50c0d7947d61/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432eb8a094322a3aa2e40c439f9b50c0d7947d61/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=432eb8a094322a3aa2e40c439f9b50c0d7947d61", "patch": "@@ -1706,10 +1706,11 @@ pub fn lower_capture_clause(_lctx: &LoweringContext, c: CaptureBy) -> hir::Captu\n     }\n }\n \n-pub fn lower_visibility(_lctx: &LoweringContext, v: &Visibility) -> hir::Visibility {\n+pub fn lower_visibility(lctx: &LoweringContext, v: &Visibility) -> hir::Visibility {\n     match *v {\n         Visibility::Public => hir::Public,\n         Visibility::Inherited => hir::Inherited,\n+        _ => panic!(lctx.diagnostic().fatal(\"pub(restricted) is not implemented yet!\"))\n     }\n }\n "}, {"sha": "a441f2990cd1a23d36e2bfad46982ac7491a9266", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/432eb8a094322a3aa2e40c439f9b50c0d7947d61/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432eb8a094322a3aa2e40c439f9b50c0d7947d61/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=432eb8a094322a3aa2e40c439f9b50c0d7947d61", "patch": "@@ -1871,6 +1871,8 @@ pub struct PolyTraitRef {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Visibility {\n     Public,\n+    Crate,\n+    Restricted { path: P<Path>, id: NodeId },\n     Inherited,\n }\n "}, {"sha": "46bcb8067a3b004faf65b7f7db2c9699adcea462", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/432eb8a094322a3aa2e40c439f9b50c0d7947d61/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432eb8a094322a3aa2e40c439f9b50c0d7947d61/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=432eb8a094322a3aa2e40c439f9b50c0d7947d61", "patch": "@@ -288,6 +288,10 @@ pub trait Folder : Sized {\n         noop_fold_where_predicate(where_predicate, self)\n     }\n \n+    fn fold_vis(&mut self, vis: Visibility) -> Visibility {\n+        noop_fold_vis(vis, self)\n+    }\n+\n     fn new_id(&mut self, i: NodeId) -> NodeId {\n         i\n     }\n@@ -992,7 +996,7 @@ pub fn noop_fold_impl_item<T: Folder>(i: ImplItem, folder: &mut T)\n         id: folder.new_id(i.id),\n         ident: folder.fold_ident(i.ident),\n         attrs: fold_attrs(i.attrs, folder),\n-        vis: i.vis,\n+        vis: folder.fold_vis(i.vis),\n         defaultness: i.defaultness,\n         node: match i.node  {\n             ast::ImplItemKind::Const(ty, expr) => {\n@@ -1082,7 +1086,7 @@ pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span}\n         ident: folder.fold_ident(ident),\n         attrs: fold_attrs(attrs, folder),\n         node: node,\n-        vis: vis,\n+        vis: folder.fold_vis(vis),\n         span: folder.new_span(span)\n     }\n }\n@@ -1100,7 +1104,7 @@ pub fn noop_fold_foreign_item<T: Folder>(ni: ForeignItem, folder: &mut T) -> For\n                 ForeignItemKind::Static(folder.fold_ty(t), m)\n             }\n         },\n-        vis: ni.vis,\n+        vis: folder.fold_vis(ni.vis),\n         span: folder.new_span(ni.span)\n     }\n }\n@@ -1391,6 +1395,16 @@ pub fn noop_fold_stmt<T: Folder>(Spanned {node, span}: Stmt, folder: &mut T)\n     }\n }\n \n+pub fn noop_fold_vis<T: Folder>(vis: Visibility, folder: &mut T) -> Visibility {\n+    match vis {\n+        Visibility::Restricted { path, id } => Visibility::Restricted {\n+            path: path.map(|path| folder.fold_path(path)),\n+            id: folder.new_id(id)\n+        },\n+        _ => vis,\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use std::io;"}, {"sha": "aff1f77665a77f9e08ed32aacba2cdd4939e5331", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/432eb8a094322a3aa2e40c439f9b50c0d7947d61/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432eb8a094322a3aa2e40c439f9b50c0d7947d61/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=432eb8a094322a3aa2e40c439f9b50c0d7947d61", "patch": "@@ -3842,7 +3842,7 @@ impl<'a> Parser<'a> {\n                          attrs: Vec<Attribute> ) -> PResult<'a, StructField> {\n         let lo = match pr {\n             Visibility::Inherited => self.span.lo,\n-            Visibility::Public => self.last_span.lo,\n+            _ => self.last_span.lo,\n         };\n         let name = self.parse_ident()?;\n         self.expect(&token::Colon)?;\n@@ -4970,7 +4970,8 @@ impl<'a> Parser<'a> {\n \n     fn complain_if_pub_macro(&mut self, visa: &Visibility, span: Span) {\n         match *visa {\n-            Visibility::Public => {\n+            Visibility::Inherited => (),\n+            _ => {\n                 let is_macro_rules: bool = match self.token {\n                     token::Ident(sid, _) => sid.name == intern(\"macro_rules\"),\n                     _ => false,\n@@ -4988,7 +4989,6 @@ impl<'a> Parser<'a> {\n                                      .emit();\n                 }\n             }\n-            Visibility::Inherited => (),\n         }\n     }\n \n@@ -6096,7 +6096,7 @@ impl<'a> Parser<'a> {\n         // FAILURE TO PARSE ITEM\n         match visibility {\n             Visibility::Inherited => {}\n-            Visibility::Public => {\n+            _ => {\n                 let last_span = self.last_span;\n                 return Err(self.span_fatal(last_span, \"unmatched visibility `pub`\"));\n             }"}, {"sha": "a8f28ed3d9e0d7764e120462d952a8e8e2dafaf5", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/432eb8a094322a3aa2e40c439f9b50c0d7947d61/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432eb8a094322a3aa2e40c439f9b50c0d7947d61/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=432eb8a094322a3aa2e40c439f9b50c0d7947d61", "patch": "@@ -435,6 +435,8 @@ pub fn mac_to_string(arg: &ast::Mac) -> String {\n pub fn visibility_qualified(vis: &ast::Visibility, s: &str) -> String {\n     match *vis {\n         ast::Visibility::Public => format!(\"pub {}\", s),\n+        ast::Visibility::Crate => format!(\"pub(crate) {}\", s),\n+        ast::Visibility::Restricted { ref path, .. } => format!(\"pub({}) {}\", path, s),\n         ast::Visibility::Inherited => s.to_string()\n     }\n }\n@@ -1384,6 +1386,9 @@ impl<'a> State<'a> {\n     pub fn print_visibility(&mut self, vis: &ast::Visibility) -> io::Result<()> {\n         match *vis {\n             ast::Visibility::Public => self.word_nbsp(\"pub\"),\n+            ast::Visibility::Crate => self.word_nbsp(\"pub(crate)\"),\n+            ast::Visibility::Restricted { ref path, .. } =>\n+                self.word_nbsp(&format!(\"pub({})\", path)),\n             ast::Visibility::Inherited => Ok(())\n         }\n     }"}, {"sha": "1251f9bfe13501599d4084ed42f1b705b6b928c9", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/432eb8a094322a3aa2e40c439f9b50c0d7947d61/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432eb8a094322a3aa2e40c439f9b50c0d7947d61/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=432eb8a094322a3aa2e40c439f9b50c0d7947d61", "patch": "@@ -129,6 +129,9 @@ pub trait Visitor<'v> : Sized {\n     fn visit_macro_def(&mut self, macro_def: &'v MacroDef) {\n         walk_macro_def(self, macro_def)\n     }\n+    fn visit_vis(&mut self, vis: &'v Visibility) {\n+        walk_vis(self, vis)\n+    }\n }\n \n #[macro_export]\n@@ -807,3 +810,10 @@ pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm) {\n     visitor.visit_expr(&arm.body);\n     walk_list!(visitor, visit_attribute, &arm.attrs);\n }\n+\n+pub fn walk_vis<'v, V: Visitor<'v>>(visitor: &mut V, vis: &'v Visibility) {\n+    match *vis {\n+        Visibility::Restricted { ref path, id } => visitor.visit_path(path, id),\n+        _ => {}\n+    }\n+}"}]}