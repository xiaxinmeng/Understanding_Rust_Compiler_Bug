{"sha": "9a6b0c3326f3577f330d8828d3b706c0eea9cf29", "node_id": "C_kwDOAAsO6NoAKDlhNmIwYzMzMjZmMzU3N2YzMzBkODgyOGQzYjcwNmMwZWVhOWNmMjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-23T09:51:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-23T09:51:32Z"}, "message": "Auto merge of #108355 - dpaoliello:dlltoolm, r=michaelwoerister\n\nFix cross-compiling with dlltool for raw-dylib\n\nFix for #103939\n\nIssue Details:\nWhen attempting to cross-compile using the `raw-dylib` feature and the GNU toolchain, rustc would attempt to find a cross-compiling version of dlltool (e.g., `i686-w64-mingw32-dlltool`). The has two issues 1) on Windows dlltool is always `dlltool` (no cross-compiling named versions exist) and 2) it only supported compiling to i686 and x86_64 resulting in ARM 32 and 64 compiling as x86_64.\n\nFix Details:\n* On Windows always use the normal `dlltool` binary.\n* Add the ARM64 cross-compiling dlltool name (support for this is coming: https://sourceware.org/bugzilla/show_bug.cgi?id=29964)\n* Provide the `-m` argument to dlltool to indicate the target machine type.\n\n(This is the first of two PRs to fix the remaining issues for the `raw-dylib` feature (#58713) that is blocking stabilization (#104218))", "tree": {"sha": "9569e32141556b66313fd454efd9a794fc1b423a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9569e32141556b66313fd454efd9a794fc1b423a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a6b0c3326f3577f330d8828d3b706c0eea9cf29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6b0c3326f3577f330d8828d3b706c0eea9cf29", "html_url": "https://github.com/rust-lang/rust/commit/9a6b0c3326f3577f330d8828d3b706c0eea9cf29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84dd6dfd9d19176cc3c94bc1448a841e44d57890", "url": "https://api.github.com/repos/rust-lang/rust/commits/84dd6dfd9d19176cc3c94bc1448a841e44d57890", "html_url": "https://github.com/rust-lang/rust/commit/84dd6dfd9d19176cc3c94bc1448a841e44d57890"}, {"sha": "a90f342b033c14171916ae019b4dfbd0bb408908", "url": "https://api.github.com/repos/rust-lang/rust/commits/a90f342b033c14171916ae019b4dfbd0bb408908", "html_url": "https://github.com/rust-lang/rust/commit/a90f342b033c14171916ae019b4dfbd0bb408908"}], "stats": {"total": 101, "additions": 87, "deletions": 14}, "files": [{"sha": "a570f2af0f0e5dda96addff18fbf11700dfd6f02", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=9a6b0c3326f3577f330d8828d3b706c0eea9cf29", "patch": "@@ -189,6 +189,15 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n                 path.push(lib_name);\n                 path\n             };\n+            // dlltool target architecture args from:\n+            // https://github.com/llvm/llvm-project-release-prs/blob/llvmorg-15.0.6/llvm/lib/ToolDrivers/llvm-dlltool/DlltoolDriver.cpp#L69\n+            let (dlltool_target_arch, dlltool_target_bitness) = match sess.target.arch.as_ref() {\n+                \"x86_64\" => (\"i386:x86-64\", \"--64\"),\n+                \"x86\" => (\"i386\", \"--32\"),\n+                \"aarch64\" => (\"arm64\", \"--64\"),\n+                \"arm\" => (\"arm\", \"--32\"),\n+                _ => panic!(\"unsupported arch {}\", sess.target.arch),\n+            };\n             let result = std::process::Command::new(dlltool)\n                 .args([\n                     \"-d\",\n@@ -197,6 +206,10 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n                     lib_name,\n                     \"-l\",\n                     output_path.to_str().unwrap(),\n+                    \"-m\",\n+                    dlltool_target_arch,\n+                    \"-f\",\n+                    dlltool_target_bitness,\n                     \"--no-leading-underscore\",\n                     \"--temp-prefix\",\n                     temp_prefix.to_str().unwrap(),\n@@ -422,24 +435,22 @@ fn find_binutils_dlltool(sess: &Session) -> OsString {\n         return dlltool_path.clone().into_os_string();\n     }\n \n-    let mut tool_name: OsString = if sess.host.arch != sess.target.arch {\n-        // We are cross-compiling, so we need the tool with the prefix matching our target\n-        if sess.target.arch == \"x86\" {\n-            \"i686-w64-mingw32-dlltool\"\n-        } else {\n-            \"x86_64-w64-mingw32-dlltool\"\n-        }\n+    let tool_name: OsString = if sess.host.options.is_like_windows {\n+        // If we're compiling on Windows, always use \"dlltool.exe\".\n+        \"dlltool.exe\"\n     } else {\n-        // We are not cross-compiling, so we just want `dlltool`\n-        \"dlltool\"\n+        // On other platforms, use the architecture-specific name.\n+        match sess.target.arch.as_ref() {\n+            \"x86_64\" => \"x86_64-w64-mingw32-dlltool\",\n+            \"x86\" => \"i686-w64-mingw32-dlltool\",\n+            \"aarch64\" => \"aarch64-w64-mingw32-dlltool\",\n+\n+            // For non-standard architectures (e.g., aarch32) fallback to \"dlltool\".\n+            _ => \"dlltool\",\n+        }\n     }\n     .into();\n \n-    if sess.host.options.is_like_windows {\n-        // If we're compiling on Windows, add the .exe suffix\n-        tool_name.push(\".exe\");\n-    }\n-\n     // NOTE: it's not clear how useful it is to explicitly search PATH.\n     for dir in env::split_paths(&env::var_os(\"PATH\").unwrap_or_default()) {\n         let full_path = dir.join(&tool_name);"}, {"sha": "b5abf6564a6334a51938fc083b8fc1c5574cf01e", "filename": "src/ci/docker/host-x86_64/i686-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fi686-gnu%2FDockerfile?ref=9a6b0c3326f3577f330d8828d3b706c0eea9cf29", "patch": "@@ -16,6 +16,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   zlib1g-dev \\\n   lib32z1-dev \\\n   xz-utils \\\n+  mingw-w64 \\\n   && rm -rf /var/lib/apt/lists/*\n \n "}, {"sha": "21dcf29b4a9f9e9a039a127b3540e8c517340dfd", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-14-stage1/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-14-stage1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-14-stage1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-14-stage1%2FDockerfile?ref=9a6b0c3326f3577f330d8828d3b706c0eea9cf29", "patch": "@@ -22,6 +22,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   zlib1g-dev \\\n   xz-utils \\\n   nodejs \\\n+  mingw-w64 \\\n   && rm -rf /var/lib/apt/lists/*\n \n COPY scripts/sccache.sh /scripts/"}, {"sha": "cfb638e8b07aa5b5d8b21166c9232626fb97eb50", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-14/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-14%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-14%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-14%2FDockerfile?ref=9a6b0c3326f3577f330d8828d3b706c0eea9cf29", "patch": "@@ -23,6 +23,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   zlib1g-dev \\\n   xz-utils \\\n   nodejs \\\n+  mingw-w64 \\\n   && rm -rf /var/lib/apt/lists/*\n \n # Install powershell (universal package) so we can test x.ps1 on Linux"}, {"sha": "fb5037e3b973d95521a66c775c024fbf72e94e02", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-15/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-15%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-15%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-15%2FDockerfile?ref=9a6b0c3326f3577f330d8828d3b706c0eea9cf29", "patch": "@@ -25,6 +25,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   zlib1g-dev \\\n   xz-utils \\\n   nodejs \\\n+  mingw-w64 \\\n   && rm -rf /var/lib/apt/lists/*\n \n # Install powershell (universal package) so we can test x.ps1 on Linux"}, {"sha": "fbec368c9ee55ec7fad9387577f610f7898cba57", "filename": "src/ci/docker/host-x86_64/x86_64-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu%2FDockerfile?ref=9a6b0c3326f3577f330d8828d3b706c0eea9cf29", "patch": "@@ -16,6 +16,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   libssl-dev \\\n   pkg-config \\\n   xz-utils \\\n+  mingw-w64 \\\n   && rm -rf /var/lib/apt/lists/*\n \n COPY scripts/sccache.sh /scripts/"}, {"sha": "5bc9d9afcb9d172baea4195e9c8bd7d1bfe20f1d", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=9a6b0c3326f3577f330d8828d3b706c0eea9cf29", "patch": "@@ -964,6 +964,19 @@ pub fn make_test_description<R: Read>(\n         .join(if config.host.contains(\"windows\") { \"rust-lld.exe\" } else { \"rust-lld\" })\n         .exists();\n \n+    fn is_on_path(file: &'static str) -> impl Fn() -> bool {\n+        move || env::split_paths(&env::var_os(\"PATH\").unwrap()).any(|dir| dir.join(file).is_file())\n+    }\n+\n+    // On Windows, dlltool.exe is used for all architectures.\n+    #[cfg(windows)]\n+    let (has_i686_dlltool, has_x86_64_dlltool) =\n+        (is_on_path(\"dlltool.exe\"), is_on_path(\"dlltool.exe\"));\n+    // For non-Windows, there are architecture specific dlltool binaries.\n+    #[cfg(not(windows))]\n+    let (has_i686_dlltool, has_x86_64_dlltool) =\n+        (is_on_path(\"i686-w64-mingw32-dlltool\"), is_on_path(\"x86_64-w64-mingw32-dlltool\"));\n+\n     iter_header(path, src, &mut |revision, ln| {\n         if revision.is_some() && revision != cfg {\n             return;\n@@ -1031,6 +1044,8 @@ pub fn make_test_description<R: Read>(\n         reason!(config.debugger == Some(Debugger::Gdb) && ignore_gdb(config, ln));\n         reason!(config.debugger == Some(Debugger::Lldb) && ignore_lldb(config, ln));\n         reason!(!has_rust_lld && config.parse_name_directive(ln, \"needs-rust-lld\"));\n+        reason!(config.parse_name_directive(ln, \"needs-i686-dlltool\") && !has_i686_dlltool());\n+        reason!(config.parse_name_directive(ln, \"needs-x86_64-dlltool\") && !has_x86_64_dlltool());\n         should_fail |= config.parse_name_directive(ln, \"should-fail\");\n     });\n "}, {"sha": "2a714f3a11fea1da4cd281568b24d7f565c507cd", "filename": "tests/run-make/raw-dylib-cross-compilation/Makefile", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/tests%2Frun-make%2Fraw-dylib-cross-compilation%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/tests%2Frun-make%2Fraw-dylib-cross-compilation%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fraw-dylib-cross-compilation%2FMakefile?ref=9a6b0c3326f3577f330d8828d3b706c0eea9cf29", "patch": "@@ -0,0 +1,22 @@\n+# Tests that raw-dylib cross compilation works correctly\n+\n+# only-gnu\n+# needs-i686-dlltool\n+# needs-x86_64-dlltool\n+\n+# i686 dlltool.exe can't product x64 binaries.\n+# ignore-i686-pc-windows-gnu\n+\n+include ../../run-make-fulldeps/tools.mk\n+\n+all:\n+\t# Build as x86 and make sure that we have x86 objects only.\n+\t$(RUSTC) --crate-type lib --crate-name i686_raw_dylib_test --target i686-pc-windows-gnu lib.rs\n+\t\"$(LLVM_BIN_DIR)\"/llvm-objdump -a $(TMPDIR)/libi686_raw_dylib_test.rlib > $(TMPDIR)/i686.objdump.txt\n+\t$(CGREP) \"file format coff-i386\" < $(TMPDIR)/i686.objdump.txt\n+\t$(CGREP) -v \"file format coff-x86-64\" < $(TMPDIR)/i686.objdump.txt\n+\t# Build as x64 and make sure that we have x64 objects only.\n+\t$(RUSTC) --crate-type lib --crate-name x64_raw_dylib_test --target x86_64-pc-windows-gnu lib.rs\n+\t\"$(LLVM_BIN_DIR)\"/llvm-objdump -a $(TMPDIR)/libx64_raw_dylib_test.rlib > $(TMPDIR)/x64.objdump.txt\n+\t$(CGREP) \"file format coff-x86-64\" < $(TMPDIR)/x64.objdump.txt\n+\t$(CGREP) -v \"file format coff-i386\" < $(TMPDIR)/x64.objdump.txt"}, {"sha": "51bf2ec6b6e11423c92edfd00606835fdcb96005", "filename": "tests/run-make/raw-dylib-cross-compilation/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/tests%2Frun-make%2Fraw-dylib-cross-compilation%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a6b0c3326f3577f330d8828d3b706c0eea9cf29/tests%2Frun-make%2Fraw-dylib-cross-compilation%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fraw-dylib-cross-compilation%2Flib.rs?ref=9a6b0c3326f3577f330d8828d3b706c0eea9cf29", "patch": "@@ -0,0 +1,20 @@\n+#![feature(raw_dylib)]\n+#![feature(no_core, lang_items)]\n+#![no_std]\n+#![no_core]\n+#![crate_type = \"lib\"]\n+\n+// This is needed because of #![no_core]:\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+#[link(name = \"extern_1\", kind = \"raw-dylib\")]\n+extern {\n+    fn extern_fn();\n+}\n+\n+pub fn extern_fn_caller() {\n+    unsafe {\n+        extern_fn();\n+    }\n+}"}]}