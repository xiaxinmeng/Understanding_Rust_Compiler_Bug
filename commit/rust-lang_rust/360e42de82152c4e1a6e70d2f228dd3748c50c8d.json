{"sha": "360e42de82152c4e1a6e70d2f228dd3748c50c8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MGU0MmRlODIxNTJjNGUxYTZlNzBkMmYyMjhkZDM3NDhjNTBjOGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-01T14:21:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-01T14:21:03Z"}, "message": "Auto merge of #69380 - Zoxc:parent-module, r=michaelwoerister\n\nUse a query to get parent modules\n\nSplit out from https://github.com/rust-lang/rust/pull/69015 / https://github.com/rust-lang/rust/pull/68944.\n\nr? @michaelwoerister", "tree": {"sha": "c64f4cd86c10f1e7226185177bdf958ae18e1332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c64f4cd86c10f1e7226185177bdf958ae18e1332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/360e42de82152c4e1a6e70d2f228dd3748c50c8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/360e42de82152c4e1a6e70d2f228dd3748c50c8d", "html_url": "https://github.com/rust-lang/rust/commit/360e42de82152c4e1a6e70d2f228dd3748c50c8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/360e42de82152c4e1a6e70d2f228dd3748c50c8d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b2983af1a85d857ae3a9345ac93ba0564ab7a73", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2983af1a85d857ae3a9345ac93ba0564ab7a73", "html_url": "https://github.com/rust-lang/rust/commit/6b2983af1a85d857ae3a9345ac93ba0564ab7a73"}, {"sha": "98251d8fb25eac95df205b79b11217b45d924efd", "url": "https://api.github.com/repos/rust-lang/rust/commits/98251d8fb25eac95df205b79b11217b45d924efd", "html_url": "https://github.com/rust-lang/rust/commit/98251d8fb25eac95df205b79b11217b45d924efd"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "4f7c4153ea173e773f6787188497e4830a441eac", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=360e42de82152c4e1a6e70d2f228dd3748c50c8d", "patch": "@@ -746,15 +746,9 @@ impl<'hir> Map<'hir> {\n         hir_id\n     }\n \n-    /// Returns the `DefId` of `id`'s nearest module parent, or `id` itself if no\n-    /// module parent is in this map.\n-    pub fn get_module_parent(&self, id: HirId) -> DefId {\n-        self.local_def_id(self.get_module_parent_node(id))\n-    }\n-\n     /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no\n     /// module parent is in this map.\n-    pub fn get_module_parent_node(&self, hir_id: HirId) -> HirId {\n+    pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> HirId {\n         for (hir_id, node) in self.parent_iter(hir_id) {\n             if let Node::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {\n                 return hir_id;"}, {"sha": "1aa3b27bd1a5dfb418bdb590ce8dc1098fd70b13", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=360e42de82152c4e1a6e70d2f228dd3748c50c8d", "patch": "@@ -7,9 +7,10 @@ pub mod map;\n \n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n-use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::print;\n use rustc_hir::Crate;\n+use rustc_hir::HirId;\n use std::ops::Deref;\n \n /// A wrapper type which allows you to access HIR.\n@@ -45,9 +46,17 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn hir(self) -> Hir<'tcx> {\n         Hir { tcx: self, map: &self.hir_map }\n     }\n+\n+    pub fn parent_module(self, id: HirId) -> DefId {\n+        self.parent_module_from_def_id(DefId::local(id.owner))\n+    }\n }\n \n pub fn provide(providers: &mut Providers<'_>) {\n+    providers.parent_module_from_def_id = |tcx, id| {\n+        let hir = tcx.hir();\n+        hir.local_def_id(hir.get_module_parent_node(hir.as_local_hir_id(id).unwrap()))\n+    };\n     providers.hir_crate = |tcx, _| tcx.hir_map.untracked_krate();\n     map::provide(providers);\n }"}, {"sha": "b3315cc3701daf1a3b52629b74244b1220892e37", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=360e42de82152c4e1a6e70d2f228dd3748c50c8d", "patch": "@@ -98,6 +98,10 @@ rustc_queries! {\n             eval_always\n             desc { \"computing the lint levels for items in this crate\" }\n         }\n+\n+        query parent_module_from_def_id(_: DefId) -> DefId {\n+            eval_always\n+        }\n     }\n \n     Codegen {"}, {"sha": "c9e58b6c771c0883480e3b31c056c81451157108", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=360e42de82152c4e1a6e70d2f228dd3748c50c8d", "patch": "@@ -385,9 +385,7 @@ impl Visibility {\n                 Res::Err => Visibility::Public,\n                 def => Visibility::Restricted(def.def_id()),\n             },\n-            hir::VisibilityKind::Inherited => {\n-                Visibility::Restricted(tcx.hir().get_module_parent(id))\n-            }\n+            hir::VisibilityKind::Inherited => Visibility::Restricted(tcx.parent_module(id)),\n         }\n     }\n \n@@ -3087,7 +3085,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             Some(actual_expansion) => {\n                 self.hir().definitions().parent_module_of_macro_def(actual_expansion)\n             }\n-            None => self.hir().get_module_parent(block),\n+            None => self.parent_module(block),\n         };\n         (ident, scope)\n     }"}, {"sha": "02f04b2345932cbe27cceebe415fa92cd9d6fcb0", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=360e42de82152c4e1a6e70d2f228dd3748c50c8d", "patch": "@@ -124,8 +124,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             descr_post: &str,\n             plural_len: usize,\n         ) -> bool {\n-            if ty.is_unit()\n-                || cx.tcx.is_ty_uninhabited_from(cx.tcx.hir().get_module_parent(expr.hir_id), ty)\n+            if ty.is_unit() || cx.tcx.is_ty_uninhabited_from(cx.tcx.parent_module(expr.hir_id), ty)\n             {\n                 return true;\n             }"}, {"sha": "d0eefb2e4d14f0e4ecbab35bd3760cf93475dd64", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=360e42de82152c4e1a6e70d2f228dd3748c50c8d", "patch": "@@ -142,7 +142,7 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n     }\n \n     fn check_in_cx(&self, hir_id: HirId, f: impl FnOnce(MatchCheckCtxt<'_, 'tcx>)) {\n-        let module = self.tcx.hir().get_module_parent(hir_id);\n+        let module = self.tcx.parent_module(hir_id);\n         MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module, |cx| f(cx));\n     }\n "}, {"sha": "5b6d0fc74e80f2966221980b663f38057893f294", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=360e42de82152c4e1a6e70d2f228dd3748c50c8d", "patch": "@@ -1125,7 +1125,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::Call(ref f, ref args) => {\n-                let m = self.ir.tcx.hir().get_module_parent(expr.hir_id);\n+                let m = self.ir.tcx.parent_module(expr.hir_id);\n                 let succ = if self.ir.tcx.is_ty_uninhabited_from(m, self.tables.expr_ty(expr)) {\n                     self.s.exit_ln\n                 } else {\n@@ -1136,7 +1136,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::MethodCall(.., ref args) => {\n-                let m = self.ir.tcx.hir().get_module_parent(expr.hir_id);\n+                let m = self.ir.tcx.parent_module(expr.hir_id);\n                 let succ = if self.ir.tcx.is_ty_uninhabited_from(m, self.tables.expr_ty(expr)) {\n                     self.s.exit_ln\n                 } else {"}, {"sha": "24696b203326f428df0519be4306c1c81dc7cf36", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=360e42de82152c4e1a6e70d2f228dd3748c50c8d", "patch": "@@ -327,7 +327,7 @@ fn def_id_visibility<'tcx>(\n                 }\n                 Node::Expr(expr) => {\n                     return (\n-                        ty::Visibility::Restricted(tcx.hir().get_module_parent(expr.hir_id)),\n+                        ty::Visibility::Restricted(tcx.parent_module(expr.hir_id)),\n                         expr.span,\n                         \"private\",\n                     );"}, {"sha": "95faa353e9b65c0b12ea1cef72b7103746d62654", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=360e42de82152c4e1a6e70d2f228dd3748c50c8d", "patch": "@@ -427,7 +427,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         });\n \n                     if let Some((field, field_ty)) = field_receiver {\n-                        let scope = self.tcx.hir().get_module_parent(self.body_id);\n+                        let scope = self.tcx.parent_module(self.body_id);\n                         let is_accessible = field.vis.is_accessible_from(scope, self.tcx);\n \n                         if is_accessible {\n@@ -824,7 +824,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         mut msg: String,\n         candidates: Vec<DefId>,\n     ) {\n-        let module_did = self.tcx.hir().get_module_parent(self.body_id);\n+        let module_did = self.tcx.parent_module(self.body_id);\n         let module_id = self.tcx.hir().as_local_hir_id(module_did).unwrap();\n         let krate = self.tcx.hir().krate();\n         let (span, found_use) = UsePlacementFinder::check(self.tcx, krate, module_id);"}, {"sha": "7aa90d667813fb8ecb40f8fdf3baa725291e439c", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/360e42de82152c4e1a6e70d2f228dd3748c50c8d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=360e42de82152c4e1a6e70d2f228dd3748c50c8d", "patch": "@@ -348,7 +348,7 @@ impl<'a, 'tcx> DocFolder for LinkCollector<'a, 'tcx> {\n         let parent_node = self.cx.as_local_hir_id(item.def_id).and_then(|hir_id| {\n             // FIXME: this fails hard for impls in non-module scope, but is necessary for the\n             // current `resolve()` implementation.\n-            match self.cx.tcx.hir().get_module_parent_node(hir_id) {\n+            match self.cx.as_local_hir_id(self.cx.tcx.parent_module(hir_id)).unwrap() {\n                 id if id != hir_id => Some(id),\n                 _ => None,\n             }"}]}