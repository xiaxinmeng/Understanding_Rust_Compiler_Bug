{"sha": "86e92c00335672ed1aa3b9e2d7698a464823d118", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZTkyYzAwMzM1NjcyZWQxYWEzYjllMmQ3Njk4YTQ2NDgyM2QxMTg=", "commit": {"author": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2021-08-18T04:40:59Z"}, "committer": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2021-08-26T09:29:28Z"}, "message": "Update common tool docs on type implement trait check\n\nCommon tool documentation uses `match_trait_method` which is deprecated.\nAdditionally, adds information on why `is_trait_method` is not the\npreferred way.", "tree": {"sha": "89dcb23de6510f903093f62aaa11ca85d9852af6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89dcb23de6510f903093f62aaa11ca85d9852af6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86e92c00335672ed1aa3b9e2d7698a464823d118", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86e92c00335672ed1aa3b9e2d7698a464823d118", "html_url": "https://github.com/rust-lang/rust/commit/86e92c00335672ed1aa3b9e2d7698a464823d118", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86e92c00335672ed1aa3b9e2d7698a464823d118/comments", "author": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de80188c642d266fcbaab9e0e09bebf9777f41e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/de80188c642d266fcbaab9e0e09bebf9777f41e1", "html_url": "https://github.com/rust-lang/rust/commit/de80188c642d266fcbaab9e0e09bebf9777f41e1"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "45f13de29a32d0ea535ea82167f62bc06a444ea1", "filename": "doc/common_tools_writing_lints.md", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/86e92c00335672ed1aa3b9e2d7698a464823d118/doc%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/86e92c00335672ed1aa3b9e2d7698a464823d118/doc%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcommon_tools_writing_lints.md?ref=86e92c00335672ed1aa3b9e2d7698a464823d118", "patch": "@@ -75,20 +75,21 @@ impl LateLintPass<'_> for MyStructLint {\n \n # Checking if a type implements a specific trait\n \n-There are two ways to do this, depending if the target trait is part of lang items.\n+There are three ways to do this, depending on if the target trait has a diagnostic item, lang item or neither.\n \n ```rust\n-use clippy_utils::{implements_trait, match_trait_method, paths};\n+use clippy_utils::{implements_trait, is_trait_method, match_trait_method};\n+use rustc_span::symbol::sym;\n \n impl LateLintPass<'_> for MyStructLint {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n-        // 1. Using expression and Clippy's convenient method\n-        // we use `match_trait_method` function from Clippy's toolbox\n-        if match_trait_method(cx, expr, &paths::INTO) {\n-            // `expr` implements `Into` trait\n+        // 1. Using diagnostic items with the expression\n+        // we use `is_trait_method` function from Clippy's utils\n+        if is_trait_method(cx, expr, sym::Iterator) {\n+            // method call in `expr` belongs to `Iterator` trait\n         }\n \n-        // 2. Using type context `TyCtxt`\n+        // 2. Using lang items with the expression type\n         let ty = cx.typeck_results().expr_ty(expr);\n         if cx.tcx.lang_items()\n             // we are looking for the `DefId` of `Drop` trait in lang items\n@@ -97,15 +98,20 @@ impl LateLintPass<'_> for MyStructLint {\n             .map_or(false, |id| implements_trait(cx, ty, id, &[])) {\n                 // `expr` implements `Drop` trait\n             }\n+\n+        // 3. Using the type path with the expression\n+        // we use `match_trait_method` function from Clippy's utils\n+        if match_trait_method(cx, expr, &paths::INTO) {\n+            // `expr` implements `Into` trait\n+        }\n     }\n }\n ```\n \n-> Prefer using lang items, if the target trait is available there.\n-\n-A list of defined paths for Clippy can be found in [paths.rs][paths]\n+> Prefer using diagnostic and lang items, if the target trait has one.\n \n We access lang items through the type context `tcx`. `tcx` is of type [`TyCtxt`][TyCtxt] and is defined in the `rustc_middle` crate.\n+A list of defined paths for Clippy can be found in [paths.rs][paths]\n \n # Checking if a type defines a specific method\n "}]}