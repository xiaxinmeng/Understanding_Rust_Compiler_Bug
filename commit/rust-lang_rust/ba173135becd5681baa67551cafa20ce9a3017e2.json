{"sha": "ba173135becd5681baa67551cafa20ce9a3017e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMTczMTM1YmVjZDU2ODFiYWE2NzU1MWNhZmEyMGNlOWEzMDE3ZTI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-04-12T18:36:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-12T18:36:18Z"}, "message": "Rollup merge of #59892 - rylev:as-raw-fd, r=alexcrichton\n\nImpl RawFd conversion traits for WASI TcpListener, TcpStream and UdpSocket\n\nr? @alexcrichton", "tree": {"sha": "88b517801dd2593d0992630b646615f5ee8497a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88b517801dd2593d0992630b646615f5ee8497a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba173135becd5681baa67551cafa20ce9a3017e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcsNqiCRBK7hj4Ov3rIwAAdHIIAJQ7pqeWGCxwoIY5CCaSJ4Ga\nhPYuus+x3RTUff6pJN0PYi32nj5fnv6t0nmURChIgkFJwb6m4Zk1VOiS32oOUgYm\n03ZaakacLAf8eMw/i0OEhi4w2G2dtuOFevDUEMkRkmEnWervun+Y5HHrF8VeDG+9\nXifp0y4/Yg4jgaTAqteMFus3fLIQgYW2nsuCcwsaK14wCFGvFsDJwVT3n7YwgGuR\n6aHGR1kR/ZXiZ8BpP+X1SGQvBP/CuQXyUWO5lzVHRm5b3zzhfoQJZcWJaAaU7KNc\nO3JzaWqOmxk8Ad/w50NX6Vp7hcJQZZvox8rPpMnWSOkCpMTOCmRb9Y+GSM53WXs=\n=X1Sj\n-----END PGP SIGNATURE-----\n", "payload": "tree 88b517801dd2593d0992630b646615f5ee8497a6\nparent af4acd05338dcb0d47e235862b303c37d655951f\nparent 8678164483bd1509137ce0ee7992f6c25e55df10\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1555094178 +0200\ncommitter GitHub <noreply@github.com> 1555094178 +0200\n\nRollup merge of #59892 - rylev:as-raw-fd, r=alexcrichton\n\nImpl RawFd conversion traits for WASI TcpListener, TcpStream and UdpSocket\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba173135becd5681baa67551cafa20ce9a3017e2", "html_url": "https://github.com/rust-lang/rust/commit/ba173135becd5681baa67551cafa20ce9a3017e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba173135becd5681baa67551cafa20ce9a3017e2/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af4acd05338dcb0d47e235862b303c37d655951f", "url": "https://api.github.com/repos/rust-lang/rust/commits/af4acd05338dcb0d47e235862b303c37d655951f", "html_url": "https://github.com/rust-lang/rust/commit/af4acd05338dcb0d47e235862b303c37d655951f"}, {"sha": "8678164483bd1509137ce0ee7992f6c25e55df10", "url": "https://api.github.com/repos/rust-lang/rust/commits/8678164483bd1509137ce0ee7992f6c25e55df10", "html_url": "https://github.com/rust-lang/rust/commit/8678164483bd1509137ce0ee7992f6c25e55df10"}], "stats": {"total": 257, "additions": 190, "deletions": 67}, "files": [{"sha": "12afd1d42dc19ce3c534cae33d3fc7ade818c9d3", "filename": "src/libstd/sys/wasi/ext/io.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/ba173135becd5681baa67551cafa20ce9a3017e2/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba173135becd5681baa67551cafa20ce9a3017e2/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fio.rs?ref=ba173135becd5681baa67551cafa20ce9a3017e2", "patch": "@@ -5,6 +5,7 @@\n use crate::fs;\n use crate::io;\n use crate::sys;\n+use crate::net;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n /// Raw file descriptors.\n@@ -50,6 +51,60 @@ pub trait IntoRawFd {\n     fn into_raw_fd(self) -> RawFd;\n }\n \n+impl AsRawFd for net::TcpStream {\n+    fn as_raw_fd(&self) -> RawFd {\n+        self.as_inner().fd().as_raw()\n+    }\n+}\n+\n+impl FromRawFd for net::TcpStream {\n+    unsafe fn from_raw_fd(fd: RawFd) -> net::TcpStream {\n+        net::TcpStream::from_inner(sys::net::TcpStream::from_inner(fd))\n+    }\n+}\n+\n+impl IntoRawFd for net::TcpStream {\n+    fn into_raw_fd(self) -> RawFd {\n+        self.into_inner().into_fd().into_raw()\n+    }\n+}\n+\n+impl AsRawFd for net::TcpListener {\n+    fn as_raw_fd(&self) -> RawFd {\n+        self.as_inner().fd().as_raw()\n+    }\n+}\n+\n+impl FromRawFd for net::TcpListener {\n+    unsafe fn from_raw_fd(fd: RawFd) -> net::TcpListener {\n+        net::TcpListener::from_inner(sys::net::TcpListener::from_inner(fd))\n+    }\n+}\n+\n+impl IntoRawFd for net::TcpListener {\n+    fn into_raw_fd(self) -> RawFd {\n+        self.into_inner().into_fd().into_raw()\n+    }\n+}\n+\n+impl AsRawFd for net::UdpSocket {\n+    fn as_raw_fd(&self) -> RawFd {\n+        self.as_inner().fd().as_raw()\n+    }\n+}\n+\n+impl FromRawFd for net::UdpSocket {\n+    unsafe fn from_raw_fd(fd: RawFd) -> net::UdpSocket {\n+        net::UdpSocket::from_inner(sys::net::UdpSocket::from_inner(fd))\n+    }\n+}\n+\n+impl IntoRawFd for net::UdpSocket {\n+    fn into_raw_fd(self) -> RawFd {\n+        self.into_inner().into_fd().into_raw()\n+    }\n+}\n+\n impl AsRawFd for fs::File {\n     fn as_raw_fd(&self) -> RawFd {\n         self.as_inner().fd().as_raw()"}, {"sha": "5486cdec4c044110e54ff51f790315aea6294a05", "filename": "src/libstd/sys/wasi/net.rs", "status": "modified", "additions": 135, "deletions": 67, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/ba173135becd5681baa67551cafa20ce9a3017e2/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba173135becd5681baa67551cafa20ce9a3017e2/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fnet.rs?ref=ba173135becd5681baa67551cafa20ce9a3017e2", "patch": "@@ -4,8 +4,12 @@ use crate::net::{SocketAddr, Shutdown, Ipv4Addr, Ipv6Addr};\n use crate::time::Duration;\n use crate::sys::{unsupported, Void};\n use crate::convert::TryFrom;\n+use crate::sys::fd::{WasiFd};\n+use crate::sys_common::FromInner;\n \n-pub struct TcpStream(Void);\n+pub struct TcpStream {\n+    fd: WasiFd,\n+}\n \n impl TcpStream {\n     pub fn connect(_: io::Result<&SocketAddr>) -> io::Result<TcpStream> {\n@@ -17,273 +21,337 @@ impl TcpStream {\n     }\n \n     pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn read(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn read_vectored(&self, _: &mut [IoVecMut<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn write(&self, _: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn write_vectored(&self, _: &[IoVec<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn shutdown(&self, _: Shutdown) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpStream> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn set_nodelay(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn nodelay(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n+    }\n+\n+    pub fn fd(&self) -> &WasiFd {\n+        &self.fd\n+    }\n+\n+    pub fn into_fd(self) -> WasiFd {\n+        self.fd\n+    }\n+}\n+\n+impl FromInner<u32> for TcpStream {\n+    fn from_inner(fd: u32) -> TcpStream {\n+        unsafe {\n+            TcpStream {\n+                fd: WasiFd::from_raw(fd),\n+            }\n+        }\n     }\n }\n \n impl fmt::Debug for TcpStream {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"TcpStream\")\n+            .field(\"fd\", &self.fd.as_raw())\n+            .finish()\n     }\n }\n \n-pub struct TcpListener(Void);\n+pub struct TcpListener {\n+    fd: WasiFd\n+}\n \n impl TcpListener {\n     pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<TcpListener> {\n         unsupported()\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn accept(&self) -> io::Result<(TcpStream, SocketAddr)> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn duplicate(&self) -> io::Result<TcpListener> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn set_only_v6(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn only_v6(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n+    }\n+\n+    pub fn fd(&self) -> &WasiFd {\n+        &self.fd\n+    }\n+\n+    pub fn into_fd(self) -> WasiFd {\n+        self.fd\n+    }\n+}\n+\n+impl FromInner<u32> for TcpListener {\n+    fn from_inner(fd: u32) -> TcpListener {\n+        unsafe {\n+            TcpListener {\n+                fd: WasiFd::from_raw(fd),\n+            }\n+        }\n     }\n }\n \n impl fmt::Debug for TcpListener {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"TcpListener\")\n+            .field(\"fd\", &self.fd.as_raw())\n+            .finish()\n     }\n }\n \n-pub struct UdpSocket(Void);\n+pub struct UdpSocket {\n+    fd: WasiFd,\n+}\n \n impl UdpSocket {\n     pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {\n         unsupported()\n     }\n \n     pub fn peer_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn socket_addr(&self) -> io::Result<SocketAddr> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn recv_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn peek_from(&self, _: &mut [u8]) -> io::Result<(usize, SocketAddr)> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn send_to(&self, _: &[u8], _: &SocketAddr) -> io::Result<usize> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn duplicate(&self) -> io::Result<UdpSocket> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn set_read_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn set_write_timeout(&self, _: Option<Duration>) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn read_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn write_timeout(&self) -> io::Result<Option<Duration>> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn set_broadcast(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn broadcast(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn set_multicast_loop_v4(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn multicast_loop_v4(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn set_multicast_ttl_v4(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn multicast_ttl_v4(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn set_multicast_loop_v6(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn multicast_loop_v6(&self) -> io::Result<bool> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn join_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr)\n                          -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn join_multicast_v6(&self, _: &Ipv6Addr, _: u32)\n                          -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn leave_multicast_v4(&self, _: &Ipv4Addr, _: &Ipv4Addr)\n                           -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn leave_multicast_v6(&self, _: &Ipv6Addr, _: u32)\n                           -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn set_ttl(&self, _: u32) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn ttl(&self) -> io::Result<u32> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn take_error(&self) -> io::Result<Option<io::Error>> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn set_nonblocking(&self, _: bool) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn recv(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn peek(&self, _: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn send(&self, _: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n+        unsupported()\n     }\n \n     pub fn connect(&self, _: io::Result<&SocketAddr>) -> io::Result<()> {\n-        match self.0 {}\n+        unsupported()\n+    }\n+\n+    pub fn fd(&self) -> &WasiFd {\n+        &self.fd\n+    }\n+\n+    pub fn into_fd(self) -> WasiFd {\n+        self.fd\n+    }\n+}\n+\n+impl FromInner<u32> for UdpSocket {\n+    fn from_inner(fd: u32) -> UdpSocket {\n+        unsafe {\n+            UdpSocket {\n+                fd: WasiFd::from_raw(fd),\n+            }\n+        }\n     }\n }\n \n impl fmt::Debug for UdpSocket {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"UdpSocket\")\n+            .field(\"fd\", &self.fd.as_raw())\n+            .finish()\n     }\n }\n "}]}