{"sha": "25c9718c04e43b5aa18b6345e0c384f9d1236e2c", "node_id": "C_kwDOAAsO6NoAKDI1Yzk3MThjMDRlNDNiNWFhMThiNjM0NWUwYzM4NGY5ZDEyMzZlMmM", "commit": {"author": {"name": "naosense", "email": "pingao777@gmail.com", "date": "2022-12-09T03:40:50Z"}, "committer": {"name": "naosense", "email": "pingao777@gmail.com", "date": "2022-12-13T08:52:55Z"}, "message": "check ranges with .contains calls", "tree": {"sha": "bd0c09b13dd3a63cd87fa21d8ed6eedea6c17668", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd0c09b13dd3a63cd87fa21d8ed6eedea6c17668"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25c9718c04e43b5aa18b6345e0c384f9d1236e2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25c9718c04e43b5aa18b6345e0c384f9d1236e2c", "html_url": "https://github.com/rust-lang/rust/commit/25c9718c04e43b5aa18b6345e0c384f9d1236e2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25c9718c04e43b5aa18b6345e0c384f9d1236e2c/comments", "author": {"login": "naosense", "id": 2225426, "node_id": "MDQ6VXNlcjIyMjU0MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2225426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/naosense", "html_url": "https://github.com/naosense", "followers_url": "https://api.github.com/users/naosense/followers", "following_url": "https://api.github.com/users/naosense/following{/other_user}", "gists_url": "https://api.github.com/users/naosense/gists{/gist_id}", "starred_url": "https://api.github.com/users/naosense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/naosense/subscriptions", "organizations_url": "https://api.github.com/users/naosense/orgs", "repos_url": "https://api.github.com/users/naosense/repos", "events_url": "https://api.github.com/users/naosense/events{/privacy}", "received_events_url": "https://api.github.com/users/naosense/received_events", "type": "User", "site_admin": false}, "committer": {"login": "naosense", "id": 2225426, "node_id": "MDQ6VXNlcjIyMjU0MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2225426?v=4", "gravatar_id": "", "url": "https://api.github.com/users/naosense", "html_url": "https://github.com/naosense", "followers_url": "https://api.github.com/users/naosense/followers", "following_url": "https://api.github.com/users/naosense/following{/other_user}", "gists_url": "https://api.github.com/users/naosense/gists{/gist_id}", "starred_url": "https://api.github.com/users/naosense/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/naosense/subscriptions", "organizations_url": "https://api.github.com/users/naosense/orgs", "repos_url": "https://api.github.com/users/naosense/repos", "events_url": "https://api.github.com/users/naosense/events{/privacy}", "received_events_url": "https://api.github.com/users/naosense/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "911864df46dc5d4fae2f809126f4e6f090434e8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/911864df46dc5d4fae2f809126f4e6f090434e8f", "html_url": "https://github.com/rust-lang/rust/commit/911864df46dc5d4fae2f809126f4e6f090434e8f"}], "stats": {"total": 93, "additions": 54, "deletions": 39}, "files": [{"sha": "39e7145b479221fd8fbe86b3b950b5d5de65bf24", "filename": "clippy_lints/src/manual_is_ascii_check.rs", "status": "modified", "additions": 41, "deletions": 34, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/25c9718c04e43b5aa18b6345e0c384f9d1236e2c/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c9718c04e43b5aa18b6345e0c384f9d1236e2c/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_is_ascii_check.rs?ref=25c9718c04e43b5aa18b6345e0c384f9d1236e2c", "patch": "@@ -1,11 +1,11 @@\n use clippy_utils::msrvs::{self, Msrv};\n-use clippy_utils::{diagnostics::span_lint_and_sugg, in_constant, macros::root_macro_call, source::snippet};\n+use clippy_utils::{diagnostics::span_lint_and_sugg, higher, in_constant, macros::root_macro_call, source::snippet};\n use rustc_ast::LitKind::{Byte, Char};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, PatKind, RangeEnd};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::{def_id::DefId, sym};\n+use rustc_span::{def_id::DefId, sym, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -75,47 +75,54 @@ impl<'tcx> LateLintPass<'tcx> for ManualIsAsciiCheck {\n             return;\n         }\n \n-        let Some(macro_call) = root_macro_call(expr.span) else { return };\n-\n-        if is_matches_macro(cx, macro_call.def_id) {\n+        if let Some(macro_call) = root_macro_call(expr.span)\n+            && is_matches_macro(cx, macro_call.def_id) {\n             if let ExprKind::Match(recv, [arm, ..], _) = expr.kind {\n                 let range = check_pat(&arm.pat.kind);\n-\n-                if let Some(sugg) = match range {\n-                    CharRange::UpperChar => Some(\"is_ascii_uppercase\"),\n-                    CharRange::LowerChar => Some(\"is_ascii_lowercase\"),\n-                    CharRange::FullChar => Some(\"is_ascii_alphabetic\"),\n-                    CharRange::Digit => Some(\"is_ascii_digit\"),\n-                    CharRange::Otherwise => None,\n-                } {\n-                    let default_snip = \"..\";\n-                    // `snippet_with_applicability` may set applicability to `MaybeIncorrect` for\n-                    // macro span, so we check applicability manually by comparing `recv` is not default.\n-                    let recv = snippet(cx, recv.span, default_snip);\n-\n-                    let applicability = if recv == default_snip {\n-                        Applicability::HasPlaceholders\n-                    } else {\n-                        Applicability::MachineApplicable\n-                    };\n-\n-                    span_lint_and_sugg(\n-                        cx,\n-                        MANUAL_IS_ASCII_CHECK,\n-                        macro_call.span,\n-                        \"manual check for common ascii range\",\n-                        \"try\",\n-                        format!(\"{recv}.{sugg}()\"),\n-                        applicability,\n-                    );\n-                }\n+                check_is_ascii(cx, macro_call.span, recv, &range);\n             }\n+        } else if let ExprKind::MethodCall(path, receiver, [arg], ..) = expr.kind\n+            && path.ident.name == sym!(contains)\n+            && let Some(higher::Range { start: Some(start), end: Some(end), .. }) = higher::Range::hir(receiver) {\n+                let range = check_range(start, end);\n+                check_is_ascii(cx, expr.span, arg, &range);\n         }\n     }\n \n     extract_msrv_attr!(LateContext);\n }\n \n+fn check_is_ascii(cx: &LateContext<'_>, span: Span, recv: &Expr<'_>, range: &CharRange) {\n+    if let Some(sugg) = match range {\n+        CharRange::UpperChar => Some(\"is_ascii_uppercase\"),\n+        CharRange::LowerChar => Some(\"is_ascii_lowercase\"),\n+        CharRange::FullChar => Some(\"is_ascii_alphabetic\"),\n+        CharRange::Digit => Some(\"is_ascii_digit\"),\n+        CharRange::Otherwise => None,\n+    } {\n+        let default_snip = \"..\";\n+        // `snippet_with_applicability` may set applicability to `MaybeIncorrect` for\n+        // macro span, so we check applicability manually by comparing `recv` is not default.\n+        let recv = snippet(cx, recv.span, default_snip);\n+\n+        let applicability = if recv == default_snip {\n+            Applicability::HasPlaceholders\n+        } else {\n+            Applicability::MachineApplicable\n+        };\n+\n+        span_lint_and_sugg(\n+            cx,\n+            MANUAL_IS_ASCII_CHECK,\n+            span,\n+            \"manual check for common ascii range\",\n+            \"try\",\n+            format!(\"{recv}.{sugg}()\"),\n+            applicability,\n+        );\n+    }\n+}\n+\n fn check_pat(pat_kind: &PatKind<'_>) -> CharRange {\n     match pat_kind {\n         PatKind::Or(pats) => {"}, {"sha": "bfba6dd7cd8d54ce994fc9f1ca5801e918e6a41e", "filename": "tests/ui/manual_is_ascii_check.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25c9718c04e43b5aa18b6345e0c384f9d1236e2c/tests%2Fui%2Fmanual_is_ascii_check.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/25c9718c04e43b5aa18b6345e0c384f9d1236e2c/tests%2Fui%2Fmanual_is_ascii_check.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.fixed?ref=25c9718c04e43b5aa18b6345e0c384f9d1236e2c", "patch": "@@ -15,6 +15,7 @@ fn main() {\n     assert!('x'.is_ascii_alphabetic());\n \n     assert!(matches!('x', 'A'..='Z' | 'a'..='z' | '_'));\n+    assert!(&b'0'.is_ascii_digit());\n }\n \n #[clippy::msrv = \"1.23\"]"}, {"sha": "c929f30f729eec2d94001e91283ce69c1c9722cc", "filename": "tests/ui/manual_is_ascii_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25c9718c04e43b5aa18b6345e0c384f9d1236e2c/tests%2Fui%2Fmanual_is_ascii_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c9718c04e43b5aa18b6345e0c384f9d1236e2c/tests%2Fui%2Fmanual_is_ascii_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.rs?ref=25c9718c04e43b5aa18b6345e0c384f9d1236e2c", "patch": "@@ -15,6 +15,7 @@ fn main() {\n     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n \n     assert!(matches!('x', 'A'..='Z' | 'a'..='z' | '_'));\n+    assert!((b'0'..=b'9').contains(&b'0'));\n }\n \n #[clippy::msrv = \"1.23\"]"}, {"sha": "888924f938611d28f9d2fb323bcfc628da32b318", "filename": "tests/ui/manual_is_ascii_check.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/25c9718c04e43b5aa18b6345e0c384f9d1236e2c/tests%2Fui%2Fmanual_is_ascii_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25c9718c04e43b5aa18b6345e0c384f9d1236e2c/tests%2Fui%2Fmanual_is_ascii_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_is_ascii_check.stderr?ref=25c9718c04e43b5aa18b6345e0c384f9d1236e2c", "patch": "@@ -43,28 +43,34 @@ LL |     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_alphabetic()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:29:13\n+  --> $DIR/manual_is_ascii_check.rs:18:13\n+   |\n+LL |     assert!((b'0'..=b'9').contains(&b'0'));\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&b'0'.is_ascii_digit()`\n+\n+error: manual check for common ascii range\n+  --> $DIR/manual_is_ascii_check.rs:30:13\n    |\n LL |     assert!(matches!(b'1', b'0'..=b'9'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `b'1'.is_ascii_digit()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:30:13\n+  --> $DIR/manual_is_ascii_check.rs:31:13\n    |\n LL |     assert!(matches!('X', 'A'..='Z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'X'.is_ascii_uppercase()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:31:13\n+  --> $DIR/manual_is_ascii_check.rs:32:13\n    |\n LL |     assert!(matches!('x', 'A'..='Z' | 'a'..='z'));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_alphabetic()`\n \n error: manual check for common ascii range\n-  --> $DIR/manual_is_ascii_check.rs:41:23\n+  --> $DIR/manual_is_ascii_check.rs:42:23\n    |\n LL |     const FOO: bool = matches!('x', '0'..='9');\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `'x'.is_ascii_digit()`\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n "}]}