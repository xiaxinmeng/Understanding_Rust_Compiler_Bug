{"sha": "e58d0627b8e12644bdf4e915b5c5bc0d3c37be29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1OGQwNjI3YjhlMTI2NDRiZGY0ZTkxNWI1YzViYzBkM2MzN2JlMjk=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-20T21:59:34Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2020-09-20T21:59:34Z"}, "message": "Update Clippy testcases\n\nUpdate the test `redundant_pattern_matching`: check if `is_some` and `is_none` are suggested within const contexts.", "tree": {"sha": "11a5f7e195b939dc137a1545da83a5c8710cc5a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11a5f7e195b939dc137a1545da83a5c8710cc5a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e58d0627b8e12644bdf4e915b5c5bc0d3c37be29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e58d0627b8e12644bdf4e915b5c5bc0d3c37be29", "html_url": "https://github.com/rust-lang/rust/commit/e58d0627b8e12644bdf4e915b5c5bc0d3c37be29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e58d0627b8e12644bdf4e915b5c5bc0d3c37be29/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f859fbcfc9080687f4a52a96e0ec98290e02f19", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f859fbcfc9080687f4a52a96e0ec98290e02f19", "html_url": "https://github.com/rust-lang/rust/commit/4f859fbcfc9080687f4a52a96e0ec98290e02f19"}], "stats": {"total": 156, "additions": 91, "deletions": 65}, "files": [{"sha": "8084fdefdc23eced3f6b2a54643b16b637f667d8", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e58d0627b8e12644bdf4e915b5c5bc0d3c37be29/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e58d0627b8e12644bdf4e915b5c5bc0d3c37be29/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.fixed?ref=e58d0627b8e12644bdf4e915b5c5bc0d3c37be29", "patch": "@@ -76,7 +76,6 @@ fn main() {\n     takes_bool(x);\n \n     issue5504();\n-    issue5697();\n     issue6067();\n \n     let _ = if gen_opt().is_some() {\n@@ -129,41 +128,31 @@ fn issue5504() {\n     while m!().is_some() {}\n }\n \n-// None of these should be linted because none of the suggested methods\n-// are `const fn` without toggling a feature.\n-const fn issue5697() {\n-    if let Some(_) = Some(42) {}\n-\n-    if let None = None::<()> {}\n-\n-    while let Some(_) = Some(42) {}\n-\n-    while let None = None::<()> {}\n-\n-    match Some(42) {\n-        Some(_) => true,\n-        None => false,\n-    };\n-\n-    match None::<()> {\n-        Some(_) => false,\n-        None => true,\n-    };\n-}\n-\n // Methods that are unstable const should not be suggested within a const context, see issue #5697.\n-// However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result` were stabilized as const,\n-// so the following should be linted.\n+// However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result`, and `is_some` and `is_none`\n+// of `Option` were stabilized as const, so the following should be linted.\n const fn issue6067() {\n     if Ok::<i32, i32>(42).is_ok() {}\n \n     if Err::<i32, i32>(42).is_err() {}\n \n+    if Some(42).is_some() {}\n+\n+    if None::<()>.is_none() {}\n+\n     while Ok::<i32, i32>(10).is_ok() {}\n \n     while Ok::<i32, i32>(10).is_err() {}\n \n+    while Some(42).is_some() {}\n+\n+    while None::<()>.is_none() {}\n+\n     Ok::<i32, i32>(42).is_ok();\n \n     Err::<i32, i32>(42).is_err();\n+\n+    Some(42).is_some();\n+\n+    None::<()>.is_none();\n }"}, {"sha": "48a32cb1c7b7d9452908407aaa345a592fa2baf6", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 20, "deletions": 25, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e58d0627b8e12644bdf4e915b5c5bc0d3c37be29/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58d0627b8e12644bdf4e915b5c5bc0d3c37be29/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.rs?ref=e58d0627b8e12644bdf4e915b5c5bc0d3c37be29", "patch": "@@ -97,7 +97,6 @@ fn main() {\n     takes_bool(x);\n \n     issue5504();\n-    issue5697();\n     issue6067();\n \n     let _ = if let Some(_) = gen_opt() {\n@@ -150,40 +149,26 @@ fn issue5504() {\n     while let Some(_) = m!() {}\n }\n \n-// None of these should be linted because none of the suggested methods\n-// are `const fn` without toggling a feature.\n-const fn issue5697() {\n-    if let Some(_) = Some(42) {}\n-\n-    if let None = None::<()> {}\n-\n-    while let Some(_) = Some(42) {}\n-\n-    while let None = None::<()> {}\n-\n-    match Some(42) {\n-        Some(_) => true,\n-        None => false,\n-    };\n-\n-    match None::<()> {\n-        Some(_) => false,\n-        None => true,\n-    };\n-}\n-\n // Methods that are unstable const should not be suggested within a const context, see issue #5697.\n-// However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result` were stabilized as const,\n-// so the following should be linted.\n+// However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result`, and `is_some` and `is_none`\n+// of `Option` were stabilized as const, so the following should be linted.\n const fn issue6067() {\n     if let Ok(_) = Ok::<i32, i32>(42) {}\n \n     if let Err(_) = Err::<i32, i32>(42) {}\n \n+    if let Some(_) = Some(42) {}\n+\n+    if let None = None::<()> {}\n+\n     while let Ok(_) = Ok::<i32, i32>(10) {}\n \n     while let Err(_) = Ok::<i32, i32>(10) {}\n \n+    while let Some(_) = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n     match Ok::<i32, i32>(42) {\n         Ok(_) => true,\n         Err(_) => false,\n@@ -193,4 +178,14 @@ const fn issue6067() {\n         Ok(_) => false,\n         Err(_) => true,\n     };\n+\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n }"}, {"sha": "17185217e8950de05cf517424230ee39bd7ca400", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 57, "deletions": 15, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e58d0627b8e12644bdf4e915b5c5bc0d3c37be29/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e58d0627b8e12644bdf4e915b5c5bc0d3c37be29/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.stderr?ref=e58d0627b8e12644bdf4e915b5c5bc0d3c37be29", "patch": "@@ -149,79 +149,103 @@ LL |     let x = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:103:20\n+  --> $DIR/redundant_pattern_matching.rs:102:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:105:19\n+  --> $DIR/redundant_pattern_matching.rs:104:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:107:19\n+  --> $DIR/redundant_pattern_matching.rs:106:19\n    |\n LL |     } else if let Ok(_) = gen_res() {\n    |            -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:109:19\n+  --> $DIR/redundant_pattern_matching.rs:108:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:142:19\n+  --> $DIR/redundant_pattern_matching.rs:141:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:143:16\n+  --> $DIR/redundant_pattern_matching.rs:142:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:149:12\n+  --> $DIR/redundant_pattern_matching.rs:148:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:150:15\n+  --> $DIR/redundant_pattern_matching.rs:149:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:179:12\n+  --> $DIR/redundant_pattern_matching.rs:156:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:181:12\n+  --> $DIR/redundant_pattern_matching.rs:158:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching.rs:160:12\n+   |\n+LL |     if let Some(_) = Some(42) {}\n+   |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching.rs:162:12\n+   |\n+LL |     if let None = None::<()> {}\n+   |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n+\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:183:15\n+  --> $DIR/redundant_pattern_matching.rs:164:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:185:15\n+  --> $DIR/redundant_pattern_matching.rs:166:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching.rs:168:15\n+   |\n+LL |     while let Some(_) = Some(42) {}\n+   |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching.rs:170:15\n+   |\n+LL |     while let None = None::<()> {}\n+   |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n+\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:187:5\n+  --> $DIR/redundant_pattern_matching.rs:172:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -230,13 +254,31 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:192:5\n+  --> $DIR/redundant_pattern_matching.rs:177:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n LL | |         Err(_) => true,\n LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n-error: aborting due to 35 previous errors\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching.rs:182:5\n+   |\n+LL | /     match Some(42) {\n+LL | |         Some(_) => true,\n+LL | |         None => false,\n+LL | |     };\n+   | |_____^ help: try this: `Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching.rs:187:5\n+   |\n+LL | /     match None::<()> {\n+LL | |         Some(_) => false,\n+LL | |         None => true,\n+LL | |     };\n+   | |_____^ help: try this: `None::<()>.is_none()`\n+\n+error: aborting due to 41 previous errors\n "}]}