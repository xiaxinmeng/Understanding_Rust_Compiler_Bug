{"sha": "4cac9786c527bf4f9e14bfc03e8b5adf5cef2b1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYWM5Nzg2YzUyN2JmNGY5ZTE0YmZjMDNlOGI1YWRmNWNlZjJiMWQ=", "commit": {"author": {"name": "pmk21", "email": "prithvikrishna49@gmail.com", "date": "2020-03-31T10:20:15Z"}, "committer": {"name": "pmk21", "email": "prithvikrishna49@gmail.com", "date": "2020-03-31T10:20:15Z"}, "message": "Skip single_match lints in macro rules", "tree": {"sha": "43123c35bb8103ae0ccc78e1ee6691ae72f60af2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43123c35bb8103ae0ccc78e1ee6691ae72f60af2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cac9786c527bf4f9e14bfc03e8b5adf5cef2b1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cac9786c527bf4f9e14bfc03e8b5adf5cef2b1d", "html_url": "https://github.com/rust-lang/rust/commit/4cac9786c527bf4f9e14bfc03e8b5adf5cef2b1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cac9786c527bf4f9e14bfc03e8b5adf5cef2b1d/comments", "author": {"login": "pmk21", "id": 32909711, "node_id": "MDQ6VXNlcjMyOTA5NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/32909711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmk21", "html_url": "https://github.com/pmk21", "followers_url": "https://api.github.com/users/pmk21/followers", "following_url": "https://api.github.com/users/pmk21/following{/other_user}", "gists_url": "https://api.github.com/users/pmk21/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmk21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmk21/subscriptions", "organizations_url": "https://api.github.com/users/pmk21/orgs", "repos_url": "https://api.github.com/users/pmk21/repos", "events_url": "https://api.github.com/users/pmk21/events{/privacy}", "received_events_url": "https://api.github.com/users/pmk21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmk21", "id": 32909711, "node_id": "MDQ6VXNlcjMyOTA5NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/32909711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmk21", "html_url": "https://github.com/pmk21", "followers_url": "https://api.github.com/users/pmk21/followers", "following_url": "https://api.github.com/users/pmk21/following{/other_user}", "gists_url": "https://api.github.com/users/pmk21/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmk21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmk21/subscriptions", "organizations_url": "https://api.github.com/users/pmk21/orgs", "repos_url": "https://api.github.com/users/pmk21/repos", "events_url": "https://api.github.com/users/pmk21/events{/privacy}", "received_events_url": "https://api.github.com/users/pmk21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "793403a2a8fc5243770f13f8f0f225f5b14a41cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/793403a2a8fc5243770f13f8f0f225f5b14a41cd", "html_url": "https://github.com/rust-lang/rust/commit/793403a2a8fc5243770f13f8f0f225f5b14a41cd"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "20b793f95dedb91e894d99cef29c2fdb4dbe00a2", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4cac9786c527bf4f9e14bfc03e8b5adf5cef2b1d/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cac9786c527bf4f9e14bfc03e8b5adf5cef2b1d/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=4cac9786c527bf4f9e14bfc03e8b5adf5cef2b1d", "patch": "@@ -447,6 +447,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Matches {\n #[rustfmt::skip]\n fn check_single_match(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n     if arms.len() == 2 && arms[0].guard.is_none() && arms[1].guard.is_none() {\n+        if in_macro(expr.span) {\n+            // Don't lint match expressions present in\n+            // macro_rules! block\n+            return;\n+        }\n         if let PatKind::Or(..) = arms[0].pat.kind {\n             // don't lint for or patterns for now, this makes\n             // the lint noisy in unnecessary situations"}]}