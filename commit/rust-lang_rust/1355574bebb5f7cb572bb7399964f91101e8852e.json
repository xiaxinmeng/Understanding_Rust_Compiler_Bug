{"sha": "1355574bebb5f7cb572bb7399964f91101e8852e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNTU1NzRiZWJiNWY3Y2I1NzJiYjczOTk5NjRmOTExMDFlODg1MmU=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:00:39Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:26:36Z"}, "message": "Delete remaining tls entries after all destructors completed.", "tree": {"sha": "6742506bd638ccbf4ae86539f99427c475eb0f9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6742506bd638ccbf4ae86539f99427c475eb0f9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1355574bebb5f7cb572bb7399964f91101e8852e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1355574bebb5f7cb572bb7399964f91101e8852e", "html_url": "https://github.com/rust-lang/rust/commit/1355574bebb5f7cb572bb7399964f91101e8852e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1355574bebb5f7cb572bb7399964f91101e8852e/comments", "author": null, "committer": null, "parents": [{"sha": "df2ca53b6978c7ac2ec6e271a5ee73fba70877c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/df2ca53b6978c7ac2ec6e271a5ee73fba70877c5", "html_url": "https://github.com/rust-lang/rust/commit/df2ca53b6978c7ac2ec6e271a5ee73fba70877c5"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "d5ea430dd2768d759da581ee02e9e45a4568a092", "filename": "src/shims/tls.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1355574bebb5f7cb572bb7399964f91101e8852e/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1355574bebb5f7cb572bb7399964f91101e8852e/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=1355574bebb5f7cb572bb7399964f91101e8852e", "patch": "@@ -211,6 +211,14 @@ impl<'tcx> TlsData<'tcx> {\n             false\n         }\n     }\n+\n+    /// Delete all TLS entries for the given thread. This function should be\n+    /// called after all TLS destructors have already finished.\n+    fn delete_all_thread_tls(&mut self, thread_id: ThreadId) {\n+        for TlsEntry { data, .. } in self.keys.values_mut() {\n+            data.remove(&thread_id);\n+        }\n+    }\n }\n \n impl<'mir, 'tcx: 'mir> EvalContextPrivExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n@@ -271,8 +279,9 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(())\n     }\n \n-    /// Schedule a pthread TLS destructor.\n-    fn schedule_pthread_tls_dtors(&mut self) -> InterpResult<'tcx> {\n+    /// Schedule a pthread TLS destructor. Returns `true` if found\n+    /// a destructor to schedule, and `false` otherwise.\n+    fn schedule_pthread_tls_dtors(&mut self) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n         let active_thread = this.get_active_thread()?;\n \n@@ -300,11 +309,11 @@ trait EvalContextPrivExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             )?;\n \n             this.enable_thread(active_thread)?;\n-            return Ok(());\n+            return Ok(true);\n         }\n         this.machine.tls.dtors_running.get_mut(&active_thread).unwrap().last_dtor_key = None;\n \n-        Ok(())\n+        Ok(false)\n     }\n }\n \n@@ -322,16 +331,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n         let active_thread = this.get_active_thread()?;\n \n-        if this.tcx.sess.target.target.target_os == \"windows\" {\n+        let finished = if this.tcx.sess.target.target.target_os == \"windows\" {\n             if !this.machine.tls.set_dtors_running_for_thread(active_thread) {\n                 this.schedule_windows_tls_dtors()?;\n             }\n+            true\n         } else {\n             this.machine.tls.set_dtors_running_for_thread(active_thread);\n             // The macOS thread wide destructor runs \"before any TLS slots get\n             // freed\", so do that first.\n             this.schedule_macos_tls_dtor()?;\n-            this.schedule_pthread_tls_dtors()?;\n+            this.schedule_pthread_tls_dtors()?\n+        };\n+\n+        if finished {\n+            this.machine.tls.delete_all_thread_tls(active_thread);\n         }\n \n         Ok(())"}]}