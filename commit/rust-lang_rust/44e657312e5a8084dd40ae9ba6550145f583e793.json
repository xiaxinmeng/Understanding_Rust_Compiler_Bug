{"sha": "44e657312e5a8084dd40ae9ba6550145f583e793", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZTY1NzMxMmU1YTgwODRkZDQwYWU5YmE2NTUwMTQ1ZjU4M2U3OTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-09T01:16:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-09T01:16:54Z"}, "message": "Auto merge of #28198 - alexcrichton:from-raw-mut, r=aturon\n\nConventionally in C `*mut T` is a transfer of ownership where `*const T` is a\r\nloan, so `*mut T` is likely the more appropriate return type for these\r\nfunctions. Additionally, this more closely mirrors the APIs on `Box` for this\r\nsort of functionality.\r\n\r\ncc #27769", "tree": {"sha": "9e40ae14f581b0bda8b7f97014d407cf5157d690", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e40ae14f581b0bda8b7f97014d407cf5157d690"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44e657312e5a8084dd40ae9ba6550145f583e793", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44e657312e5a8084dd40ae9ba6550145f583e793", "html_url": "https://github.com/rust-lang/rust/commit/44e657312e5a8084dd40ae9ba6550145f583e793", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44e657312e5a8084dd40ae9ba6550145f583e793/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24e54aebd09de2a75c1c6ef9763ee05c9d281e71", "url": "https://api.github.com/repos/rust-lang/rust/commits/24e54aebd09de2a75c1c6ef9763ee05c9d281e71", "html_url": "https://github.com/rust-lang/rust/commit/24e54aebd09de2a75c1c6ef9763ee05c9d281e71"}, {"sha": "6bb2c5d32299b4664c3876793b4e759d8fbc0008", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb2c5d32299b4664c3876793b4e759d8fbc0008", "html_url": "https://github.com/rust-lang/rust/commit/6bb2c5d32299b4664c3876793b4e759d8fbc0008"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "587eb0f1cea27d6d531c769ccafef2968562d1d1", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/44e657312e5a8084dd40ae9ba6550145f583e793/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44e657312e5a8084dd40ae9ba6550145f583e793/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=44e657312e5a8084dd40ae9ba6550145f583e793", "patch": "@@ -209,7 +209,7 @@ impl CString {\n                issue = \"27769\")]\n     #[deprecated(since = \"1.4.0\", reason = \"renamed to from_raw\")]\n     pub unsafe fn from_ptr(ptr: *const libc::c_char) -> CString {\n-        CString::from_raw(ptr)\n+        CString::from_raw(ptr as *mut _)\n     }\n \n     /// Retakes ownership of a CString that was transferred to C.\n@@ -219,7 +219,7 @@ impl CString {\n     /// using the pointer.\n     #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n                issue = \"27769\")]\n-    pub unsafe fn from_raw(ptr: *const libc::c_char) -> CString {\n+    pub unsafe fn from_raw(ptr: *mut libc::c_char) -> CString {\n         let len = libc::strlen(ptr) + 1; // Including the NUL byte\n         let slice = slice::from_raw_parts(ptr, len as usize);\n         CString { inner: mem::transmute(slice) }\n@@ -237,7 +237,7 @@ impl CString {\n                issue = \"27769\")]\n     #[deprecated(since = \"1.4.0\", reason = \"renamed to into_raw\")]\n     pub fn into_ptr(self) -> *const libc::c_char {\n-        self.into_raw()\n+        self.into_raw() as *const _\n     }\n \n     /// Transfers ownership of the string to a C caller.\n@@ -250,11 +250,8 @@ impl CString {\n     /// Failure to call `from_ptr` will lead to a memory leak.\n     #[unstable(feature = \"cstr_memory\", reason = \"recently added\",\n                issue = \"27769\")]\n-    pub fn into_raw(self) -> *const libc::c_char {\n-        // It is important that the bytes be sized to fit - we need\n-        // the capacity to be determinable from the string length, and\n-        // shrinking to fit is the only way to be sure.\n-        Box::into_raw(self.inner) as *const libc::c_char\n+    pub fn into_raw(self) -> *mut libc::c_char {\n+        Box::into_raw(self.inner) as *mut libc::c_char\n     }\n \n     /// Returns the contents of this `CString` as a slice of bytes."}]}