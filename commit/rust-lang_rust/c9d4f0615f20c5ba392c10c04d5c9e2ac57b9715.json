{"sha": "c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZDRmMDYxNWYyMGM1YmEzOTJjMTBjMDRkNWM5ZTJhYzU3Yjk3MTU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-29T10:59:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-02T14:38:33Z"}, "message": "use `ty::TraitRef::identity` where possible\n\nCo-authored-by: Tyler Mandry <tmandry@gmail.com>", "tree": {"sha": "6e584885a3935cf24fa4f93b98eb866f6ebe5b64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e584885a3935cf24fa4f93b98eb866f6ebe5b64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715", "html_url": "https://github.com/rust-lang/rust/commit/c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c15163cb9101d9a9cc8a41fe98b253cce351857", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c15163cb9101d9a9cc8a41fe98b253cce351857", "html_url": "https://github.com/rust-lang/rust/commit/5c15163cb9101d9a9cc8a41fe98b253cce351857"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "83128ba75d5827e25ef060703e1ffc20b02b2a15", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715", "patch": "@@ -23,7 +23,6 @@ use hir::def_id::DefId;\n use lint;\n use traits;\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n-use ty::subst::Substs;\n use ty::util::ExplicitSelf;\n use std::borrow::Cow;\n use syntax::ast;\n@@ -173,10 +172,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         trait_def_id: DefId,\n         supertraits_only: bool) -> bool\n     {\n-        let trait_ref = ty::Binder::dummy(ty::TraitRef {\n-            def_id: trait_def_id,\n-            substs: Substs::identity_for_item(self, trait_def_id)\n-        });\n+        let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(self, trait_def_id));\n         let predicates = if supertraits_only {\n             self.super_predicates_of(trait_def_id)\n         } else {\n@@ -391,10 +387,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n                     // Compute supertraits of current trait lazily.\n                     if supertraits.is_none() {\n-                        let trait_ref = ty::Binder::bind(ty::TraitRef {\n-                            def_id: trait_def_id,\n-                            substs: Substs::identity_for_item(self, trait_def_id)\n-                        });\n+                        let trait_ref = ty::Binder::bind(\n+                            ty::TraitRef::identity(self, trait_def_id),\n+                        );\n                         supertraits = Some(traits::supertraits(self, trait_ref).collect());\n                     }\n "}, {"sha": "f93da53e0436d16f69f8ee23e76ebc737793f98d", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715", "patch": "@@ -614,6 +614,15 @@ impl<'tcx> TraitRef<'tcx> {\n         TraitRef { def_id: def_id, substs: substs }\n     }\n \n+    /// Returns a TraitRef of the form `P0: Foo<P1..Pn>` where `Pi`\n+    /// are the parameters defined on trait.\n+    pub fn identity<'a, 'gcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>, def_id: DefId) -> TraitRef<'tcx> {\n+        TraitRef {\n+            def_id,\n+            substs: Substs::identity_for_item(tcx, def_id),\n+        }\n+    }\n+\n     pub fn self_ty(&self) -> Ty<'tcx> {\n         self.substs.type_at(0)\n     }"}, {"sha": "5eb8c93b510aedd6ebfb5634201046109e7e2ed5", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715", "patch": "@@ -15,7 +15,6 @@ use rustc::hir::{self, ImplPolarity};\n use rustc::traits::{Clause, Clauses, DomainGoal, Goal, PolyDomainGoal, ProgramClause,\n                     WhereClause, FromEnv, WellFormed};\n use rustc::ty::query::Providers;\n-use rustc::ty::subst::Substs;\n use rustc::ty::{self, Slice, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use std::mem;\n@@ -225,10 +224,7 @@ fn program_clauses_for_trait<'a, 'tcx>(\n \n     // `Self: Trait<P1..Pn>`\n     let trait_pred = ty::TraitPredicate {\n-        trait_ref: ty::TraitRef {\n-            def_id,\n-            substs: Substs::identity_for_item(tcx, def_id),\n-        },\n+        trait_ref: ty::TraitRef::identity(tcx, def_id),\n     };\n \n     // `Implemented(Self: Trait<P1..Pn>)`"}, {"sha": "3c956d8b4306cba3296fbf42fee63ce2ce6f8eef", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c9d4f0615f20c5ba392c10c04d5c9e2ac57b9715", "patch": "@@ -274,10 +274,9 @@ fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 ItemTrait(_, _, ref generics, ..) => {\n                     // Implied `Self: Trait` and supertrait bounds.\n                     if param_id == item_node_id {\n-                        result.predicates.push(ty::TraitRef {\n-                            def_id: item_def_id,\n-                            substs: Substs::identity_for_item(tcx, item_def_id)\n-                        }.to_predicate());\n+                        result.predicates.push(\n+                            ty::TraitRef::identity(tcx, item_def_id).to_predicate()\n+                        );\n                     }\n                     generics\n                 }\n@@ -1359,10 +1358,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 ItemUnion(_, ref generics) => generics,\n \n                 ItemTrait(_, _, ref generics, .., ref items) => {\n-                    is_trait = Some((ty::TraitRef {\n-                        def_id,\n-                        substs: Substs::identity_for_item(tcx, def_id)\n-                    }, items));\n+                    is_trait = Some((ty::TraitRef::identity(tcx, def_id), items));\n                     generics\n                 }\n                 ItemExistential(ref exist_ty) => {"}]}