{"sha": "509510152865d5a9a47723ad56047904986c9dd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOTUxMDE1Mjg2NWQ1YTlhNDc3MjNhZDU2MDQ3OTA0OTg2YzlkZDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-31T12:58:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-31T12:58:10Z"}, "message": "Auto merge of #67752 - Dylan-DPC:rollup-7f9v4nx, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #67430 (doc: minus (U+2212) instead of dash (U+002D) for negative infinity)\n - #67697 (Move the region_scope_tree query to librustc_passes.)\n - #67719 (Add self to .mailmap)\n - #67723 (Add error code explanation for E0477)\n - #67735 (Support `-Z ui-testing=yes/no`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "d9ee7734e8761c217d43c5f2cc3e8bd90ae754e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9ee7734e8761c217d43c5f2cc3e8bd90ae754e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/509510152865d5a9a47723ad56047904986c9dd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/509510152865d5a9a47723ad56047904986c9dd9", "html_url": "https://github.com/rust-lang/rust/commit/509510152865d5a9a47723ad56047904986c9dd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/509510152865d5a9a47723ad56047904986c9dd9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71bb0ff33e3759ee71ea19c230492c11e5e32b87", "url": "https://api.github.com/repos/rust-lang/rust/commits/71bb0ff33e3759ee71ea19c230492c11e5e32b87", "html_url": "https://github.com/rust-lang/rust/commit/71bb0ff33e3759ee71ea19c230492c11e5e32b87"}, {"sha": "529a42a1a6b6523e8376610556d9890479b9524c", "url": "https://api.github.com/repos/rust-lang/rust/commits/529a42a1a6b6523e8376610556d9890479b9524c", "html_url": "https://github.com/rust-lang/rust/commit/529a42a1a6b6523e8376610556d9890479b9524c"}], "stats": {"total": 1830, "additions": 921, "deletions": 909}, "files": [{"sha": "1634c2da518cc4850fb4e2851f861d0fb020f72f", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -139,6 +139,7 @@ Jorge Aparicio <japaric@linux.com> <japaricious@gmail.com>\n Joseph Martin <pythoner6@gmail.com>\n Joseph T. Lyons <JosephTLyons@gmail.com> <josephtlyons@gmail.com>\n Joseph T. Lyons <JosephTLyons@gmail.com> <JosephTLyons@users.noreply.github.com>\n+jumbatm <jumbatm@gmail.com> <30644300+jumbatm@users.noreply.github.com>\n Junyoung Cho <june0.cho@samsung.com>\n Jyun-Yan You <jyyou.tw@gmail.com> <jyyou@cs.nctu.edu.tw>\n Kang Seonghoon <kang.seonghoon@mearie.org> <public+git@mearie.org>"}, {"sha": "505484c2a49dcc056a6c980bf279ee499d99b9a3", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -62,7 +62,7 @@ pub const NAN: f32 = 0.0_f32 / 0.0_f32;\n /// Infinity (\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const INFINITY: f32 = 1.0_f32 / 0.0_f32;\n-/// Negative infinity (-\u221e).\n+/// Negative infinity (\u2212\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NEG_INFINITY: f32 = -1.0_f32 / 0.0_f32;\n "}, {"sha": "8f3af42d25d80b79143d5e238712ff84ab0aa667", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -62,7 +62,7 @@ pub const NAN: f64 = 0.0_f64 / 0.0_f64;\n /// Infinity (\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const INFINITY: f64 = 1.0_f64 / 0.0_f64;\n-/// Negative infinity (-\u221e).\n+/// Negative infinity (\u2212\u221e).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const NEG_INFINITY: f64 = -1.0_f64 / 0.0_f64;\n "}, {"sha": "a4c489735a96d56159ec88b00b221c40de7df05c", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 10, "deletions": 876, "changes": 886, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -1,4 +1,4 @@\n-//! This file builds up the `ScopeTree`, which describes\n+//! This file declares the `ScopeTree` type, which describes\n //! the parent links in the region hierarchy.\n //!\n //! For more information about how MIR-based region-checking works,\n@@ -8,22 +8,17 @@\n \n use crate::hir;\n use crate::hir::def_id::DefId;\n-use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use crate::hir::Node;\n-use crate::hir::{Arm, Block, Expr, Local, Pat, PatKind, Stmt};\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n-use crate::ty::query::Providers;\n use crate::ty::{self, DefIdTree, TyCtxt};\n-use crate::util::nodemap::{FxHashMap, FxHashSet};\n+use crate::util::nodemap::FxHashMap;\n \n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_index::vec::Idx;\n use rustc_macros::HashStable;\n-use syntax::source_map;\n use syntax_pos::{Span, DUMMY_SP};\n \n use std::fmt;\n-use std::mem;\n \n /// Represents a statically-describable scope that can be used to\n /// bound the lifetime/region for values.\n@@ -232,20 +227,20 @@ pub type ScopeDepth = u32;\n #[derive(Default, Debug)]\n pub struct ScopeTree {\n     /// If not empty, this body is the root of this region hierarchy.\n-    root_body: Option<hir::HirId>,\n+    pub root_body: Option<hir::HirId>,\n \n     /// The parent of the root body owner, if the latter is an\n     /// an associated const or method, as impls/traits can also\n     /// have lifetime parameters free in this body.\n-    root_parent: Option<hir::HirId>,\n+    pub root_parent: Option<hir::HirId>,\n \n     /// Maps from a scope ID to the enclosing scope id;\n     /// this is usually corresponding to the lexical nesting, though\n     /// in the case of closures the parent scope is the innermost\n     /// conditional expression or repeating block. (Note that the\n     /// enclosing scope ID for the block associated with a closure is\n     /// the closure itself.)\n-    parent_map: FxHashMap<Scope, (Scope, ScopeDepth)>,\n+    pub parent_map: FxHashMap<Scope, (Scope, ScopeDepth)>,\n \n     /// Maps from a variable or binding ID to the block in which that\n     /// variable is declared.\n@@ -345,12 +340,12 @@ pub struct ScopeTree {\n     /// The reason is that semantically, until the `box` expression returns,\n     /// the values are still owned by their containing expressions. So\n     /// we'll see that `&x`.\n-    yield_in_scope: FxHashMap<Scope, YieldData>,\n+    pub yield_in_scope: FxHashMap<Scope, YieldData>,\n \n     /// The number of visit_expr and visit_pat calls done in the body.\n     /// Used to sanity check visit_expr/visit_pat call count when\n     /// calculating generator interiors.\n-    body_expr_count: FxHashMap<hir::BodyId, usize>,\n+    pub body_expr_count: FxHashMap<hir::BodyId, usize>,\n }\n \n #[derive(Debug, Copy, Clone, RustcEncodable, RustcDecodable, HashStable)]\n@@ -362,101 +357,6 @@ pub struct YieldData {\n     pub source: hir::YieldSource,\n }\n \n-#[derive(Debug, Copy, Clone)]\n-pub struct Context {\n-    /// The root of the current region tree. This is typically the id\n-    /// of the innermost fn body. Each fn forms its own disjoint tree\n-    /// in the region hierarchy. These fn bodies are themselves\n-    /// arranged into a tree. See the \"Modeling closures\" section of\n-    /// the README in `infer::region_constraints` for more\n-    /// details.\n-    root_id: Option<hir::ItemLocalId>,\n-\n-    /// The scope that contains any new variables declared, plus its depth in\n-    /// the scope tree.\n-    var_parent: Option<(Scope, ScopeDepth)>,\n-\n-    /// Region parent of expressions, etc., plus its depth in the scope tree.\n-    parent: Option<(Scope, ScopeDepth)>,\n-}\n-\n-struct RegionResolutionVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-\n-    // The number of expressions and patterns visited in the current body.\n-    expr_and_pat_count: usize,\n-    // When this is `true`, we record the `Scopes` we encounter\n-    // when processing a Yield expression. This allows us to fix\n-    // up their indices.\n-    pessimistic_yield: bool,\n-    // Stores scopes when `pessimistic_yield` is `true`.\n-    fixup_scopes: Vec<Scope>,\n-    // The generated scope tree.\n-    scope_tree: ScopeTree,\n-\n-    cx: Context,\n-\n-    /// `terminating_scopes` is a set containing the ids of each\n-    /// statement, or conditional/repeating expression. These scopes\n-    /// are calling \"terminating scopes\" because, when attempting to\n-    /// find the scope of a temporary, by default we search up the\n-    /// enclosing scopes until we encounter the terminating scope. A\n-    /// conditional/repeating expression is one which is not\n-    /// guaranteed to execute exactly once upon entering the parent\n-    /// scope. This could be because the expression only executes\n-    /// conditionally, such as the expression `b` in `a && b`, or\n-    /// because the expression may execute many times, such as a loop\n-    /// body. The reason that we distinguish such expressions is that,\n-    /// upon exiting the parent scope, we cannot statically know how\n-    /// many times the expression executed, and thus if the expression\n-    /// creates temporaries we cannot know statically how many such\n-    /// temporaries we would have to cleanup. Therefore, we ensure that\n-    /// the temporaries never outlast the conditional/repeating\n-    /// expression, preventing the need for dynamic checks and/or\n-    /// arbitrary amounts of stack space. Terminating scopes end\n-    /// up being contained in a DestructionScope that contains the\n-    /// destructor's execution.\n-    terminating_scopes: FxHashSet<hir::ItemLocalId>,\n-}\n-\n-struct ExprLocatorVisitor {\n-    hir_id: hir::HirId,\n-    result: Option<usize>,\n-    expr_and_pat_count: usize,\n-}\n-\n-// This visitor has to have the same `visit_expr` calls as `RegionResolutionVisitor`\n-// since `expr_count` is compared against the results there.\n-impl<'tcx> Visitor<'tcx> for ExprLocatorVisitor {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::None\n-    }\n-\n-    fn visit_pat(&mut self, pat: &'tcx Pat<'tcx>) {\n-        intravisit::walk_pat(self, pat);\n-\n-        self.expr_and_pat_count += 1;\n-\n-        if pat.hir_id == self.hir_id {\n-            self.result = Some(self.expr_and_pat_count);\n-        }\n-    }\n-\n-    fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n-        debug!(\"ExprLocatorVisitor - pre-increment {} expr = {:?}\", self.expr_and_pat_count, expr);\n-\n-        intravisit::walk_expr(self, expr);\n-\n-        self.expr_and_pat_count += 1;\n-\n-        debug!(\"ExprLocatorVisitor - post-increment {} expr = {:?}\", self.expr_and_pat_count, expr);\n-\n-        if expr.hir_id == self.hir_id {\n-            self.result = Some(self.expr_and_pat_count);\n-        }\n-    }\n-}\n-\n impl<'tcx> ScopeTree {\n     pub fn record_scope_parent(&mut self, child: Scope, parent: Option<(Scope, ScopeDepth)>) {\n         debug!(\"{:?}.parent = {:?}\", child, parent);\n@@ -497,7 +397,7 @@ impl<'tcx> ScopeTree {\n     /// Records that `sub_closure` is defined within `sup_closure`. These IDs\n     /// should be the ID of the block that is the fn body, which is\n     /// also the root of the region hierarchy for that fn.\n-    fn record_closure_parent(\n+    pub fn record_closure_parent(\n         &mut self,\n         sub_closure: hir::ItemLocalId,\n         sup_closure: hir::ItemLocalId,\n@@ -511,13 +411,13 @@ impl<'tcx> ScopeTree {\n         assert!(previous.is_none());\n     }\n \n-    fn record_var_scope(&mut self, var: hir::ItemLocalId, lifetime: Scope) {\n+    pub fn record_var_scope(&mut self, var: hir::ItemLocalId, lifetime: Scope) {\n         debug!(\"record_var_scope(sub={:?}, sup={:?})\", var, lifetime);\n         assert!(var != lifetime.item_local_id());\n         self.var_map.insert(var, lifetime);\n     }\n \n-    fn record_rvalue_scope(&mut self, var: hir::ItemLocalId, lifetime: Option<Scope>) {\n+    pub fn record_rvalue_scope(&mut self, var: hir::ItemLocalId, lifetime: Option<Scope>) {\n         debug!(\"record_rvalue_scope(sub={:?}, sup={:?})\", var, lifetime);\n         if let Some(lifetime) = lifetime {\n             assert!(var != lifetime.item_local_id());\n@@ -732,23 +632,6 @@ impl<'tcx> ScopeTree {\n         self.yield_in_scope.get(&scope).cloned()\n     }\n \n-    /// Checks whether the given scope contains a `yield` and if that yield could execute\n-    /// after `expr`. If so, it returns the span of that `yield`.\n-    /// `scope` must be inside the body.\n-    pub fn yield_in_scope_for_expr(\n-        &self,\n-        scope: Scope,\n-        expr_hir_id: hir::HirId,\n-        body: &'tcx hir::Body<'tcx>,\n-    ) -> Option<Span> {\n-        self.yield_in_scope(scope).and_then(|YieldData { span, expr_and_pat_count, .. }| {\n-            let mut visitor =\n-                ExprLocatorVisitor { hir_id: expr_hir_id, result: None, expr_and_pat_count: 0 };\n-            visitor.visit_body(body);\n-            if expr_and_pat_count >= visitor.result.unwrap() { Some(span) } else { None }\n-        })\n-    }\n-\n     /// Gives the number of expressions visited in a body.\n     /// Used to sanity check visit_expr call count when\n     /// calculating generator interiors.\n@@ -757,755 +640,6 @@ impl<'tcx> ScopeTree {\n     }\n }\n \n-/// Records the lifetime of a local variable as `cx.var_parent`\n-fn record_var_lifetime(\n-    visitor: &mut RegionResolutionVisitor<'_>,\n-    var_id: hir::ItemLocalId,\n-    _sp: Span,\n-) {\n-    match visitor.cx.var_parent {\n-        None => {\n-            // this can happen in extern fn declarations like\n-            //\n-            // extern fn isalnum(c: c_int) -> c_int\n-        }\n-        Some((parent_scope, _)) => visitor.scope_tree.record_var_scope(var_id, parent_scope),\n-    }\n-}\n-\n-fn resolve_block<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, blk: &'tcx hir::Block<'tcx>) {\n-    debug!(\"resolve_block(blk.hir_id={:?})\", blk.hir_id);\n-\n-    let prev_cx = visitor.cx;\n-\n-    // We treat the tail expression in the block (if any) somewhat\n-    // differently from the statements. The issue has to do with\n-    // temporary lifetimes. Consider the following:\n-    //\n-    //    quux({\n-    //        let inner = ... (&bar()) ...;\n-    //\n-    //        (... (&foo()) ...) // (the tail expression)\n-    //    }, other_argument());\n-    //\n-    // Each of the statements within the block is a terminating\n-    // scope, and thus a temporary (e.g., the result of calling\n-    // `bar()` in the initializer expression for `let inner = ...;`)\n-    // will be cleaned up immediately after its corresponding\n-    // statement (i.e., `let inner = ...;`) executes.\n-    //\n-    // On the other hand, temporaries associated with evaluating the\n-    // tail expression for the block are assigned lifetimes so that\n-    // they will be cleaned up as part of the terminating scope\n-    // *surrounding* the block expression. Here, the terminating\n-    // scope for the block expression is the `quux(..)` call; so\n-    // those temporaries will only be cleaned up *after* both\n-    // `other_argument()` has run and also the call to `quux(..)`\n-    // itself has returned.\n-\n-    visitor.enter_node_scope_with_dtor(blk.hir_id.local_id);\n-    visitor.cx.var_parent = visitor.cx.parent;\n-\n-    {\n-        // This block should be kept approximately in sync with\n-        // `intravisit::walk_block`. (We manually walk the block, rather\n-        // than call `walk_block`, in order to maintain precise\n-        // index information.)\n-\n-        for (i, statement) in blk.stmts.iter().enumerate() {\n-            match statement.kind {\n-                hir::StmtKind::Local(..) | hir::StmtKind::Item(..) => {\n-                    // Each declaration introduces a subscope for bindings\n-                    // introduced by the declaration; this subscope covers a\n-                    // suffix of the block. Each subscope in a block has the\n-                    // previous subscope in the block as a parent, except for\n-                    // the first such subscope, which has the block itself as a\n-                    // parent.\n-                    visitor.enter_scope(Scope {\n-                        id: blk.hir_id.local_id,\n-                        data: ScopeData::Remainder(FirstStatementIndex::new(i)),\n-                    });\n-                    visitor.cx.var_parent = visitor.cx.parent;\n-                }\n-                hir::StmtKind::Expr(..) | hir::StmtKind::Semi(..) => {}\n-            }\n-            visitor.visit_stmt(statement)\n-        }\n-        walk_list!(visitor, visit_expr, &blk.expr);\n-    }\n-\n-    visitor.cx = prev_cx;\n-}\n-\n-fn resolve_arm<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, arm: &'tcx hir::Arm<'tcx>) {\n-    let prev_cx = visitor.cx;\n-\n-    visitor.enter_scope(Scope { id: arm.hir_id.local_id, data: ScopeData::Node });\n-    visitor.cx.var_parent = visitor.cx.parent;\n-\n-    visitor.terminating_scopes.insert(arm.body.hir_id.local_id);\n-\n-    if let Some(hir::Guard::If(ref expr)) = arm.guard {\n-        visitor.terminating_scopes.insert(expr.hir_id.local_id);\n-    }\n-\n-    intravisit::walk_arm(visitor, arm);\n-\n-    visitor.cx = prev_cx;\n-}\n-\n-fn resolve_pat<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, pat: &'tcx hir::Pat<'tcx>) {\n-    visitor.record_child_scope(Scope { id: pat.hir_id.local_id, data: ScopeData::Node });\n-\n-    // If this is a binding then record the lifetime of that binding.\n-    if let PatKind::Binding(..) = pat.kind {\n-        record_var_lifetime(visitor, pat.hir_id.local_id, pat.span);\n-    }\n-\n-    debug!(\"resolve_pat - pre-increment {} pat = {:?}\", visitor.expr_and_pat_count, pat);\n-\n-    intravisit::walk_pat(visitor, pat);\n-\n-    visitor.expr_and_pat_count += 1;\n-\n-    debug!(\"resolve_pat - post-increment {} pat = {:?}\", visitor.expr_and_pat_count, pat);\n-}\n-\n-fn resolve_stmt<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, stmt: &'tcx hir::Stmt<'tcx>) {\n-    let stmt_id = stmt.hir_id.local_id;\n-    debug!(\"resolve_stmt(stmt.id={:?})\", stmt_id);\n-\n-    // Every statement will clean up the temporaries created during\n-    // execution of that statement. Therefore each statement has an\n-    // associated destruction scope that represents the scope of the\n-    // statement plus its destructors, and thus the scope for which\n-    // regions referenced by the destructors need to survive.\n-    visitor.terminating_scopes.insert(stmt_id);\n-\n-    let prev_parent = visitor.cx.parent;\n-    visitor.enter_node_scope_with_dtor(stmt_id);\n-\n-    intravisit::walk_stmt(visitor, stmt);\n-\n-    visitor.cx.parent = prev_parent;\n-}\n-\n-fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n-    debug!(\"resolve_expr - pre-increment {} expr = {:?}\", visitor.expr_and_pat_count, expr);\n-\n-    let prev_cx = visitor.cx;\n-    visitor.enter_node_scope_with_dtor(expr.hir_id.local_id);\n-\n-    {\n-        let terminating_scopes = &mut visitor.terminating_scopes;\n-        let mut terminating = |id: hir::ItemLocalId| {\n-            terminating_scopes.insert(id);\n-        };\n-        match expr.kind {\n-            // Conditional or repeating scopes are always terminating\n-            // scopes, meaning that temporaries cannot outlive them.\n-            // This ensures fixed size stacks.\n-            hir::ExprKind::Binary(\n-                source_map::Spanned { node: hir::BinOpKind::And, .. },\n-                _,\n-                ref r,\n-            )\n-            | hir::ExprKind::Binary(\n-                source_map::Spanned { node: hir::BinOpKind::Or, .. },\n-                _,\n-                ref r,\n-            ) => {\n-                // For shortcircuiting operators, mark the RHS as a terminating\n-                // scope since it only executes conditionally.\n-                terminating(r.hir_id.local_id);\n-            }\n-\n-            hir::ExprKind::Loop(ref body, _, _) => {\n-                terminating(body.hir_id.local_id);\n-            }\n-\n-            hir::ExprKind::DropTemps(ref expr) => {\n-                // `DropTemps(expr)` does not denote a conditional scope.\n-                // Rather, we want to achieve the same behavior as `{ let _t = expr; _t }`.\n-                terminating(expr.hir_id.local_id);\n-            }\n-\n-            hir::ExprKind::AssignOp(..)\n-            | hir::ExprKind::Index(..)\n-            | hir::ExprKind::Unary(..)\n-            | hir::ExprKind::Call(..)\n-            | hir::ExprKind::MethodCall(..) => {\n-                // FIXME(https://github.com/rust-lang/rfcs/issues/811) Nested method calls\n-                //\n-                // The lifetimes for a call or method call look as follows:\n-                //\n-                // call.id\n-                // - arg0.id\n-                // - ...\n-                // - argN.id\n-                // - call.callee_id\n-                //\n-                // The idea is that call.callee_id represents *the time when\n-                // the invoked function is actually running* and call.id\n-                // represents *the time to prepare the arguments and make the\n-                // call*.  See the section \"Borrows in Calls\" borrowck/README.md\n-                // for an extended explanation of why this distinction is\n-                // important.\n-                //\n-                // record_superlifetime(new_cx, expr.callee_id);\n-            }\n-\n-            _ => {}\n-        }\n-    }\n-\n-    let prev_pessimistic = visitor.pessimistic_yield;\n-\n-    // Ordinarily, we can rely on the visit order of HIR intravisit\n-    // to correspond to the actual execution order of statements.\n-    // However, there's a weird corner case with compund assignment\n-    // operators (e.g. `a += b`). The evaluation order depends on whether\n-    // or not the operator is overloaded (e.g. whether or not a trait\n-    // like AddAssign is implemented).\n-\n-    // For primitive types (which, despite having a trait impl, don't actually\n-    // end up calling it), the evluation order is right-to-left. For example,\n-    // the following code snippet:\n-    //\n-    //    let y = &mut 0;\n-    //    *{println!(\"LHS!\"); y} += {println!(\"RHS!\"); 1};\n-    //\n-    // will print:\n-    //\n-    // RHS!\n-    // LHS!\n-    //\n-    // However, if the operator is used on a non-primitive type,\n-    // the evaluation order will be left-to-right, since the operator\n-    // actually get desugared to a method call. For example, this\n-    // nearly identical code snippet:\n-    //\n-    //     let y = &mut String::new();\n-    //    *{println!(\"LHS String\"); y} += {println!(\"RHS String\"); \"hi\"};\n-    //\n-    // will print:\n-    // LHS String\n-    // RHS String\n-    //\n-    // To determine the actual execution order, we need to perform\n-    // trait resolution. Unfortunately, we need to be able to compute\n-    // yield_in_scope before type checking is even done, as it gets\n-    // used by AST borrowcheck.\n-    //\n-    // Fortunately, we don't need to know the actual execution order.\n-    // It suffices to know the 'worst case' order with respect to yields.\n-    // Specifically, we need to know the highest 'expr_and_pat_count'\n-    // that we could assign to the yield expression. To do this,\n-    // we pick the greater of the two values from the left-hand\n-    // and right-hand expressions. This makes us overly conservative\n-    // about what types could possibly live across yield points,\n-    // but we will never fail to detect that a type does actually\n-    // live across a yield point. The latter part is critical -\n-    // we're already overly conservative about what types will live\n-    // across yield points, as the generated MIR will determine\n-    // when things are actually live. However, for typecheck to work\n-    // properly, we can't miss any types.\n-\n-    match expr.kind {\n-        // Manually recurse over closures, because they are the only\n-        // case of nested bodies that share the parent environment.\n-        hir::ExprKind::Closure(.., body, _, _) => {\n-            let body = visitor.tcx.hir().body(body);\n-            visitor.visit_body(body);\n-        }\n-        hir::ExprKind::AssignOp(_, ref left_expr, ref right_expr) => {\n-            debug!(\n-                \"resolve_expr - enabling pessimistic_yield, was previously {}\",\n-                prev_pessimistic\n-            );\n-\n-            let start_point = visitor.fixup_scopes.len();\n-            visitor.pessimistic_yield = true;\n-\n-            // If the actual execution order turns out to be right-to-left,\n-            // then we're fine. However, if the actual execution order is left-to-right,\n-            // then we'll assign too low a count to any `yield` expressions\n-            // we encounter in 'right_expression' - they should really occur after all of the\n-            // expressions in 'left_expression'.\n-            visitor.visit_expr(&right_expr);\n-            visitor.pessimistic_yield = prev_pessimistic;\n-\n-            debug!(\"resolve_expr - restoring pessimistic_yield to {}\", prev_pessimistic);\n-            visitor.visit_expr(&left_expr);\n-            debug!(\"resolve_expr - fixing up counts to {}\", visitor.expr_and_pat_count);\n-\n-            // Remove and process any scopes pushed by the visitor\n-            let target_scopes = visitor.fixup_scopes.drain(start_point..);\n-\n-            for scope in target_scopes {\n-                let mut yield_data = visitor.scope_tree.yield_in_scope.get_mut(&scope).unwrap();\n-                let count = yield_data.expr_and_pat_count;\n-                let span = yield_data.span;\n-\n-                // expr_and_pat_count never decreases. Since we recorded counts in yield_in_scope\n-                // before walking the left-hand side, it should be impossible for the recorded\n-                // count to be greater than the left-hand side count.\n-                if count > visitor.expr_and_pat_count {\n-                    bug!(\n-                        \"Encountered greater count {} at span {:?} - expected no greater than {}\",\n-                        count,\n-                        span,\n-                        visitor.expr_and_pat_count\n-                    );\n-                }\n-                let new_count = visitor.expr_and_pat_count;\n-                debug!(\n-                    \"resolve_expr - increasing count for scope {:?} from {} to {} at span {:?}\",\n-                    scope, count, new_count, span\n-                );\n-\n-                yield_data.expr_and_pat_count = new_count;\n-            }\n-        }\n-\n-        _ => intravisit::walk_expr(visitor, expr),\n-    }\n-\n-    visitor.expr_and_pat_count += 1;\n-\n-    debug!(\"resolve_expr post-increment {}, expr = {:?}\", visitor.expr_and_pat_count, expr);\n-\n-    if let hir::ExprKind::Yield(_, source) = &expr.kind {\n-        // Mark this expr's scope and all parent scopes as containing `yield`.\n-        let mut scope = Scope { id: expr.hir_id.local_id, data: ScopeData::Node };\n-        loop {\n-            let data = YieldData {\n-                span: expr.span,\n-                expr_and_pat_count: visitor.expr_and_pat_count,\n-                source: *source,\n-            };\n-            visitor.scope_tree.yield_in_scope.insert(scope, data);\n-            if visitor.pessimistic_yield {\n-                debug!(\"resolve_expr in pessimistic_yield - marking scope {:?} for fixup\", scope);\n-                visitor.fixup_scopes.push(scope);\n-            }\n-\n-            // Keep traversing up while we can.\n-            match visitor.scope_tree.parent_map.get(&scope) {\n-                // Don't cross from closure bodies to their parent.\n-                Some(&(superscope, _)) => match superscope.data {\n-                    ScopeData::CallSite => break,\n-                    _ => scope = superscope,\n-                },\n-                None => break,\n-            }\n-        }\n-    }\n-\n-    visitor.cx = prev_cx;\n-}\n-\n-fn resolve_local<'tcx>(\n-    visitor: &mut RegionResolutionVisitor<'tcx>,\n-    pat: Option<&'tcx hir::Pat<'tcx>>,\n-    init: Option<&'tcx hir::Expr<'tcx>>,\n-) {\n-    debug!(\"resolve_local(pat={:?}, init={:?})\", pat, init);\n-\n-    let blk_scope = visitor.cx.var_parent.map(|(p, _)| p);\n-\n-    // As an exception to the normal rules governing temporary\n-    // lifetimes, initializers in a let have a temporary lifetime\n-    // of the enclosing block. This means that e.g., a program\n-    // like the following is legal:\n-    //\n-    //     let ref x = HashMap::new();\n-    //\n-    // Because the hash map will be freed in the enclosing block.\n-    //\n-    // We express the rules more formally based on 3 grammars (defined\n-    // fully in the helpers below that implement them):\n-    //\n-    // 1. `E&`, which matches expressions like `&<rvalue>` that\n-    //    own a pointer into the stack.\n-    //\n-    // 2. `P&`, which matches patterns like `ref x` or `(ref x, ref\n-    //    y)` that produce ref bindings into the value they are\n-    //    matched against or something (at least partially) owned by\n-    //    the value they are matched against. (By partially owned,\n-    //    I mean that creating a binding into a ref-counted or managed value\n-    //    would still count.)\n-    //\n-    // 3. `ET`, which matches both rvalues like `foo()` as well as places\n-    //    based on rvalues like `foo().x[2].y`.\n-    //\n-    // A subexpression `<rvalue>` that appears in a let initializer\n-    // `let pat [: ty] = expr` has an extended temporary lifetime if\n-    // any of the following conditions are met:\n-    //\n-    // A. `pat` matches `P&` and `expr` matches `ET`\n-    //    (covers cases where `pat` creates ref bindings into an rvalue\n-    //     produced by `expr`)\n-    // B. `ty` is a borrowed pointer and `expr` matches `ET`\n-    //    (covers cases where coercion creates a borrow)\n-    // C. `expr` matches `E&`\n-    //    (covers cases `expr` borrows an rvalue that is then assigned\n-    //     to memory (at least partially) owned by the binding)\n-    //\n-    // Here are some examples hopefully giving an intuition where each\n-    // rule comes into play and why:\n-    //\n-    // Rule A. `let (ref x, ref y) = (foo().x, 44)`. The rvalue `(22, 44)`\n-    // would have an extended lifetime, but not `foo()`.\n-    //\n-    // Rule B. `let x = &foo().x`. The rvalue `foo()` would have extended\n-    // lifetime.\n-    //\n-    // In some cases, multiple rules may apply (though not to the same\n-    // rvalue). For example:\n-    //\n-    //     let ref x = [&a(), &b()];\n-    //\n-    // Here, the expression `[...]` has an extended lifetime due to rule\n-    // A, but the inner rvalues `a()` and `b()` have an extended lifetime\n-    // due to rule C.\n-\n-    if let Some(expr) = init {\n-        record_rvalue_scope_if_borrow_expr(visitor, &expr, blk_scope);\n-\n-        if let Some(pat) = pat {\n-            if is_binding_pat(pat) {\n-                record_rvalue_scope(visitor, &expr, blk_scope);\n-            }\n-        }\n-    }\n-\n-    // Make sure we visit the initializer first, so expr_and_pat_count remains correct\n-    if let Some(expr) = init {\n-        visitor.visit_expr(expr);\n-    }\n-    if let Some(pat) = pat {\n-        visitor.visit_pat(pat);\n-    }\n-\n-    /// Returns `true` if `pat` match the `P&` non-terminal.\n-    ///\n-    ///     P& = ref X\n-    ///        | StructName { ..., P&, ... }\n-    ///        | VariantName(..., P&, ...)\n-    ///        | [ ..., P&, ... ]\n-    ///        | ( ..., P&, ... )\n-    ///        | ... \"|\" P& \"|\" ...\n-    ///        | box P&\n-    fn is_binding_pat(pat: &hir::Pat<'_>) -> bool {\n-        // Note that the code below looks for *explicit* refs only, that is, it won't\n-        // know about *implicit* refs as introduced in #42640.\n-        //\n-        // This is not a problem. For example, consider\n-        //\n-        //      let (ref x, ref y) = (Foo { .. }, Bar { .. });\n-        //\n-        // Due to the explicit refs on the left hand side, the below code would signal\n-        // that the temporary value on the right hand side should live until the end of\n-        // the enclosing block (as opposed to being dropped after the let is complete).\n-        //\n-        // To create an implicit ref, however, you must have a borrowed value on the RHS\n-        // already, as in this example (which won't compile before #42640):\n-        //\n-        //      let Foo { x, .. } = &Foo { x: ..., ... };\n-        //\n-        // in place of\n-        //\n-        //      let Foo { ref x, .. } = Foo { ... };\n-        //\n-        // In the former case (the implicit ref version), the temporary is created by the\n-        // & expression, and its lifetime would be extended to the end of the block (due\n-        // to a different rule, not the below code).\n-        match pat.kind {\n-            PatKind::Binding(hir::BindingAnnotation::Ref, ..)\n-            | PatKind::Binding(hir::BindingAnnotation::RefMut, ..) => true,\n-\n-            PatKind::Struct(_, ref field_pats, _) => {\n-                field_pats.iter().any(|fp| is_binding_pat(&fp.pat))\n-            }\n-\n-            PatKind::Slice(ref pats1, ref pats2, ref pats3) => {\n-                pats1.iter().any(|p| is_binding_pat(&p))\n-                    || pats2.iter().any(|p| is_binding_pat(&p))\n-                    || pats3.iter().any(|p| is_binding_pat(&p))\n-            }\n-\n-            PatKind::Or(ref subpats)\n-            | PatKind::TupleStruct(_, ref subpats, _)\n-            | PatKind::Tuple(ref subpats, _) => subpats.iter().any(|p| is_binding_pat(&p)),\n-\n-            PatKind::Box(ref subpat) => is_binding_pat(&subpat),\n-\n-            PatKind::Ref(_, _)\n-            | PatKind::Binding(hir::BindingAnnotation::Unannotated, ..)\n-            | PatKind::Binding(hir::BindingAnnotation::Mutable, ..)\n-            | PatKind::Wild\n-            | PatKind::Path(_)\n-            | PatKind::Lit(_)\n-            | PatKind::Range(_, _, _) => false,\n-        }\n-    }\n-\n-    /// If `expr` matches the `E&` grammar, then records an extended rvalue scope as appropriate:\n-    ///\n-    ///     E& = & ET\n-    ///        | StructName { ..., f: E&, ... }\n-    ///        | [ ..., E&, ... ]\n-    ///        | ( ..., E&, ... )\n-    ///        | {...; E&}\n-    ///        | box E&\n-    ///        | E& as ...\n-    ///        | ( E& )\n-    fn record_rvalue_scope_if_borrow_expr<'tcx>(\n-        visitor: &mut RegionResolutionVisitor<'tcx>,\n-        expr: &hir::Expr<'_>,\n-        blk_id: Option<Scope>,\n-    ) {\n-        match expr.kind {\n-            hir::ExprKind::AddrOf(_, _, ref subexpr) => {\n-                record_rvalue_scope_if_borrow_expr(visitor, &subexpr, blk_id);\n-                record_rvalue_scope(visitor, &subexpr, blk_id);\n-            }\n-            hir::ExprKind::Struct(_, fields, _) => {\n-                for field in fields {\n-                    record_rvalue_scope_if_borrow_expr(visitor, &field.expr, blk_id);\n-                }\n-            }\n-            hir::ExprKind::Array(subexprs) | hir::ExprKind::Tup(subexprs) => {\n-                for subexpr in subexprs {\n-                    record_rvalue_scope_if_borrow_expr(visitor, &subexpr, blk_id);\n-                }\n-            }\n-            hir::ExprKind::Cast(ref subexpr, _) => {\n-                record_rvalue_scope_if_borrow_expr(visitor, &subexpr, blk_id)\n-            }\n-            hir::ExprKind::Block(ref block, _) => {\n-                if let Some(ref subexpr) = block.expr {\n-                    record_rvalue_scope_if_borrow_expr(visitor, &subexpr, blk_id);\n-                }\n-            }\n-            _ => {}\n-        }\n-    }\n-\n-    /// Applied to an expression `expr` if `expr` -- or something owned or partially owned by\n-    /// `expr` -- is going to be indirectly referenced by a variable in a let statement. In that\n-    /// case, the \"temporary lifetime\" or `expr` is extended to be the block enclosing the `let`\n-    /// statement.\n-    ///\n-    /// More formally, if `expr` matches the grammar `ET`, record the rvalue scope of the matching\n-    /// `<rvalue>` as `blk_id`:\n-    ///\n-    ///     ET = *ET\n-    ///        | ET[...]\n-    ///        | ET.f\n-    ///        | (ET)\n-    ///        | <rvalue>\n-    ///\n-    /// Note: ET is intended to match \"rvalues or places based on rvalues\".\n-    fn record_rvalue_scope<'tcx>(\n-        visitor: &mut RegionResolutionVisitor<'tcx>,\n-        expr: &hir::Expr<'_>,\n-        blk_scope: Option<Scope>,\n-    ) {\n-        let mut expr = expr;\n-        loop {\n-            // Note: give all the expressions matching `ET` with the\n-            // extended temporary lifetime, not just the innermost rvalue,\n-            // because in codegen if we must compile e.g., `*rvalue()`\n-            // into a temporary, we request the temporary scope of the\n-            // outer expression.\n-            visitor.scope_tree.record_rvalue_scope(expr.hir_id.local_id, blk_scope);\n-\n-            match expr.kind {\n-                hir::ExprKind::AddrOf(_, _, ref subexpr)\n-                | hir::ExprKind::Unary(hir::UnDeref, ref subexpr)\n-                | hir::ExprKind::Field(ref subexpr, _)\n-                | hir::ExprKind::Index(ref subexpr, _) => {\n-                    expr = &subexpr;\n-                }\n-                _ => {\n-                    return;\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-impl<'tcx> RegionResolutionVisitor<'tcx> {\n-    /// Records the current parent (if any) as the parent of `child_scope`.\n-    /// Returns the depth of `child_scope`.\n-    fn record_child_scope(&mut self, child_scope: Scope) -> ScopeDepth {\n-        let parent = self.cx.parent;\n-        self.scope_tree.record_scope_parent(child_scope, parent);\n-        // If `child_scope` has no parent, it must be the root node, and so has\n-        // a depth of 1. Otherwise, its depth is one more than its parent's.\n-        parent.map_or(1, |(_p, d)| d + 1)\n-    }\n-\n-    /// Records the current parent (if any) as the parent of `child_scope`,\n-    /// and sets `child_scope` as the new current parent.\n-    fn enter_scope(&mut self, child_scope: Scope) {\n-        let child_depth = self.record_child_scope(child_scope);\n-        self.cx.parent = Some((child_scope, child_depth));\n-    }\n-\n-    fn enter_node_scope_with_dtor(&mut self, id: hir::ItemLocalId) {\n-        // If node was previously marked as a terminating scope during the\n-        // recursive visit of its parent node in the AST, then we need to\n-        // account for the destruction scope representing the scope of\n-        // the destructors that run immediately after it completes.\n-        if self.terminating_scopes.contains(&id) {\n-            self.enter_scope(Scope { id, data: ScopeData::Destruction });\n-        }\n-        self.enter_scope(Scope { id, data: ScopeData::Node });\n-    }\n-}\n-\n-impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::None\n-    }\n-\n-    fn visit_block(&mut self, b: &'tcx Block<'tcx>) {\n-        resolve_block(self, b);\n-    }\n-\n-    fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n-        let body_id = body.id();\n-        let owner_id = self.tcx.hir().body_owner(body_id);\n-\n-        debug!(\n-            \"visit_body(id={:?}, span={:?}, body.id={:?}, cx.parent={:?})\",\n-            owner_id,\n-            self.tcx.sess.source_map().span_to_string(body.value.span),\n-            body_id,\n-            self.cx.parent\n-        );\n-\n-        let outer_ec = mem::replace(&mut self.expr_and_pat_count, 0);\n-        let outer_cx = self.cx;\n-        let outer_ts = mem::take(&mut self.terminating_scopes);\n-        self.terminating_scopes.insert(body.value.hir_id.local_id);\n-\n-        if let Some(root_id) = self.cx.root_id {\n-            self.scope_tree.record_closure_parent(body.value.hir_id.local_id, root_id);\n-        }\n-        self.cx.root_id = Some(body.value.hir_id.local_id);\n-\n-        self.enter_scope(Scope { id: body.value.hir_id.local_id, data: ScopeData::CallSite });\n-        self.enter_scope(Scope { id: body.value.hir_id.local_id, data: ScopeData::Arguments });\n-\n-        // The arguments and `self` are parented to the fn.\n-        self.cx.var_parent = self.cx.parent.take();\n-        for param in body.params {\n-            self.visit_pat(&param.pat);\n-        }\n-\n-        // The body of the every fn is a root scope.\n-        self.cx.parent = self.cx.var_parent;\n-        if self.tcx.hir().body_owner_kind(owner_id).is_fn_or_closure() {\n-            self.visit_expr(&body.value)\n-        } else {\n-            // Only functions have an outer terminating (drop) scope, while\n-            // temporaries in constant initializers may be 'static, but only\n-            // according to rvalue lifetime semantics, using the same\n-            // syntactical rules used for let initializers.\n-            //\n-            // e.g., in `let x = &f();`, the temporary holding the result from\n-            // the `f()` call lives for the entirety of the surrounding block.\n-            //\n-            // Similarly, `const X: ... = &f();` would have the result of `f()`\n-            // live for `'static`, implying (if Drop restrictions on constants\n-            // ever get lifted) that the value *could* have a destructor, but\n-            // it'd get leaked instead of the destructor running during the\n-            // evaluation of `X` (if at all allowed by CTFE).\n-            //\n-            // However, `const Y: ... = g(&f());`, like `let y = g(&f());`,\n-            // would *not* let the `f()` temporary escape into an outer scope\n-            // (i.e., `'static`), which means that after `g` returns, it drops,\n-            // and all the associated destruction scope rules apply.\n-            self.cx.var_parent = None;\n-            resolve_local(self, None, Some(&body.value));\n-        }\n-\n-        if body.generator_kind.is_some() {\n-            self.scope_tree.body_expr_count.insert(body_id, self.expr_and_pat_count);\n-        }\n-\n-        // Restore context we had at the start.\n-        self.expr_and_pat_count = outer_ec;\n-        self.cx = outer_cx;\n-        self.terminating_scopes = outer_ts;\n-    }\n-\n-    fn visit_arm(&mut self, a: &'tcx Arm<'tcx>) {\n-        resolve_arm(self, a);\n-    }\n-    fn visit_pat(&mut self, p: &'tcx Pat<'tcx>) {\n-        resolve_pat(self, p);\n-    }\n-    fn visit_stmt(&mut self, s: &'tcx Stmt<'tcx>) {\n-        resolve_stmt(self, s);\n-    }\n-    fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n-        resolve_expr(self, ex);\n-    }\n-    fn visit_local(&mut self, l: &'tcx Local<'tcx>) {\n-        resolve_local(self, Some(&l.pat), l.init.as_ref().map(|e| &**e));\n-    }\n-}\n-\n-fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n-    let closure_base_def_id = tcx.closure_base_def_id(def_id);\n-    if closure_base_def_id != def_id {\n-        return tcx.region_scope_tree(closure_base_def_id);\n-    }\n-\n-    let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    let scope_tree = if let Some(body_id) = tcx.hir().maybe_body_owned_by(id) {\n-        let mut visitor = RegionResolutionVisitor {\n-            tcx,\n-            scope_tree: ScopeTree::default(),\n-            expr_and_pat_count: 0,\n-            cx: Context { root_id: None, parent: None, var_parent: None },\n-            terminating_scopes: Default::default(),\n-            pessimistic_yield: false,\n-            fixup_scopes: vec![],\n-        };\n-\n-        let body = tcx.hir().body(body_id);\n-        visitor.scope_tree.root_body = Some(body.value.hir_id);\n-\n-        // If the item is an associated const or a method,\n-        // record its impl/trait parent, as it can also have\n-        // lifetime parameters free in this body.\n-        match tcx.hir().get(id) {\n-            Node::ImplItem(_) | Node::TraitItem(_) => {\n-                visitor.scope_tree.root_parent = Some(tcx.hir().get_parent_item(id));\n-            }\n-            _ => {}\n-        }\n-\n-        visitor.visit_body(body);\n-\n-        visitor.scope_tree\n-    } else {\n-        ScopeTree::default()\n-    };\n-\n-    tcx.arena.alloc(scope_tree)\n-}\n-\n-pub fn provide(providers: &mut Providers<'_>) {\n-    *providers = Providers { region_scope_tree, ..*providers };\n-}\n-\n impl<'a> HashStable<StableHashingContext<'a>> for ScopeTree {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let ScopeTree {"}, {"sha": "272147e28a4196c7254574803822e591415f5244", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -238,6 +238,7 @@ E0463: include_str!(\"./error_codes/E0463.md\"),\n E0466: include_str!(\"./error_codes/E0466.md\"),\n E0468: include_str!(\"./error_codes/E0468.md\"),\n E0469: include_str!(\"./error_codes/E0469.md\"),\n+E0477: include_str!(\"./error_codes/E0477.md\"),\n E0478: include_str!(\"./error_codes/E0478.md\"),\n E0491: include_str!(\"./error_codes/E0491.md\"),\n E0492: include_str!(\"./error_codes/E0492.md\"),\n@@ -531,7 +532,6 @@ E0745: include_str!(\"./error_codes/E0745.md\"),\n     E0474, // captured variable `..` does not outlive the enclosing closure\n     E0475, // index of slice outside its lifetime\n     E0476, // lifetime of the source pointer does not outlive lifetime bound...\n-    E0477, // the type `..` does not fulfill the required lifetime...\n     E0479, // the type `..` (provided as the value of a type parameter) is...\n     E0480, // lifetime of method receiver does not outlive the method call\n     E0481, // lifetime of function argument does not outlive the function call"}, {"sha": "794456451ef33eeea41a0f1e71811b9122290e7e", "filename": "src/librustc_error_codes/error_codes/E0477.md", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0477.md", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc_error_codes%2Ferror_codes%2FE0477.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0477.md?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -0,0 +1,45 @@\n+The type does not fulfill the required lifetime.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0477\n+use std::sync::Mutex;\n+\n+struct MyString<'a> {\n+    data: &'a str,\n+}\n+\n+fn i_want_static_closure<F>(a: F)\n+    where F: Fn() + 'static {}\n+\n+fn print_string<'a>(s: Mutex<MyString<'a>>) {\n+\n+    i_want_static_closure(move || {     // error: this closure has lifetime 'a\n+                                        //        rather than 'static\n+        println!(\"{}\", s.lock().unwrap().data);\n+    });\n+}\n+```\n+\n+In this example, the closure does not satisfy the `'static` lifetime constraint.\n+To fix this error, you need to double check the lifetime of the type. Here, we\n+can fix this problem by giving `s` a static lifetime:\n+\n+```\n+use std::sync::Mutex;\n+\n+struct MyString<'a> {\n+    data: &'a str,\n+}\n+\n+fn i_want_static_closure<F>(a: F)\n+    where F: Fn() + 'static {}\n+\n+fn print_string(s: Mutex<MyString<'static>>) {\n+\n+    i_want_static_closure(move || {     // error: this closure has lifetime 'a\n+                                        //        rather than 'static\n+        println!(\"{}\", s.lock().unwrap().data);\n+    });\n+}\n+```"}, {"sha": "c30f3e68110e8317a651470bc486319feb25513e", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -686,7 +686,6 @@ pub fn default_provide(providers: &mut ty::query::Providers<'_>) {\n     stability::provide(providers);\n     rustc_passes::provide(providers);\n     rustc_traits::provide(providers);\n-    middle::region::provide(providers);\n     rustc_metadata::provide(providers);\n     lint::provide(providers);\n     rustc_lint::provide(providers);"}, {"sha": "8a10c8fe89d6278c26d708fd73f762bb9a7686dc", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -31,6 +31,7 @@ mod lib_features;\n mod liveness;\n pub mod loops;\n mod reachable;\n+mod region;\n \n pub fn provide(providers: &mut Providers<'_>) {\n     check_const::provide(providers);\n@@ -41,4 +42,5 @@ pub fn provide(providers: &mut Providers<'_>) {\n     liveness::provide(providers);\n     intrinsicck::provide(providers);\n     reachable::provide(providers);\n+    region::provide(providers);\n }"}, {"sha": "7630e3e8950c17268d2e0db178f9c3a2755f0a6f", "filename": "src/librustc_passes/region.rs", "status": "added", "additions": 835, "deletions": 0, "changes": 835, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -0,0 +1,835 @@\n+//! This file builds up the `ScopeTree`, which describes\n+//! the parent links in the region hierarchy.\n+//!\n+//! For more information about how MIR-based region-checking works,\n+//! see the [rustc guide].\n+//!\n+//! [rustc guide]: https://rust-lang.github.io/rustc-guide/mir/borrowck.html\n+\n+use rustc::hir;\n+use rustc::hir::def_id::DefId;\n+use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc::hir::Node;\n+use rustc::hir::{Arm, Block, Expr, Local, Pat, PatKind, Stmt};\n+use rustc::middle::region::*;\n+use rustc::ty::query::Providers;\n+use rustc::ty::TyCtxt;\n+use rustc::util::nodemap::FxHashSet;\n+\n+use rustc_index::vec::Idx;\n+use syntax::source_map;\n+use syntax_pos::Span;\n+\n+use std::mem;\n+\n+#[derive(Debug, Copy, Clone)]\n+pub struct Context {\n+    /// The root of the current region tree. This is typically the id\n+    /// of the innermost fn body. Each fn forms its own disjoint tree\n+    /// in the region hierarchy. These fn bodies are themselves\n+    /// arranged into a tree. See the \"Modeling closures\" section of\n+    /// the README in `infer::region_constraints` for more\n+    /// details.\n+    root_id: Option<hir::ItemLocalId>,\n+\n+    /// The scope that contains any new variables declared, plus its depth in\n+    /// the scope tree.\n+    var_parent: Option<(Scope, ScopeDepth)>,\n+\n+    /// Region parent of expressions, etc., plus its depth in the scope tree.\n+    parent: Option<(Scope, ScopeDepth)>,\n+}\n+\n+struct RegionResolutionVisitor<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+\n+    // The number of expressions and patterns visited in the current body.\n+    expr_and_pat_count: usize,\n+    // When this is `true`, we record the `Scopes` we encounter\n+    // when processing a Yield expression. This allows us to fix\n+    // up their indices.\n+    pessimistic_yield: bool,\n+    // Stores scopes when `pessimistic_yield` is `true`.\n+    fixup_scopes: Vec<Scope>,\n+    // The generated scope tree.\n+    scope_tree: ScopeTree,\n+\n+    cx: Context,\n+\n+    /// `terminating_scopes` is a set containing the ids of each\n+    /// statement, or conditional/repeating expression. These scopes\n+    /// are calling \"terminating scopes\" because, when attempting to\n+    /// find the scope of a temporary, by default we search up the\n+    /// enclosing scopes until we encounter the terminating scope. A\n+    /// conditional/repeating expression is one which is not\n+    /// guaranteed to execute exactly once upon entering the parent\n+    /// scope. This could be because the expression only executes\n+    /// conditionally, such as the expression `b` in `a && b`, or\n+    /// because the expression may execute many times, such as a loop\n+    /// body. The reason that we distinguish such expressions is that,\n+    /// upon exiting the parent scope, we cannot statically know how\n+    /// many times the expression executed, and thus if the expression\n+    /// creates temporaries we cannot know statically how many such\n+    /// temporaries we would have to cleanup. Therefore, we ensure that\n+    /// the temporaries never outlast the conditional/repeating\n+    /// expression, preventing the need for dynamic checks and/or\n+    /// arbitrary amounts of stack space. Terminating scopes end\n+    /// up being contained in a DestructionScope that contains the\n+    /// destructor's execution.\n+    terminating_scopes: FxHashSet<hir::ItemLocalId>,\n+}\n+\n+/// Records the lifetime of a local variable as `cx.var_parent`\n+fn record_var_lifetime(\n+    visitor: &mut RegionResolutionVisitor<'_>,\n+    var_id: hir::ItemLocalId,\n+    _sp: Span,\n+) {\n+    match visitor.cx.var_parent {\n+        None => {\n+            // this can happen in extern fn declarations like\n+            //\n+            // extern fn isalnum(c: c_int) -> c_int\n+        }\n+        Some((parent_scope, _)) => visitor.scope_tree.record_var_scope(var_id, parent_scope),\n+    }\n+}\n+\n+fn resolve_block<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, blk: &'tcx hir::Block<'tcx>) {\n+    debug!(\"resolve_block(blk.hir_id={:?})\", blk.hir_id);\n+\n+    let prev_cx = visitor.cx;\n+\n+    // We treat the tail expression in the block (if any) somewhat\n+    // differently from the statements. The issue has to do with\n+    // temporary lifetimes. Consider the following:\n+    //\n+    //    quux({\n+    //        let inner = ... (&bar()) ...;\n+    //\n+    //        (... (&foo()) ...) // (the tail expression)\n+    //    }, other_argument());\n+    //\n+    // Each of the statements within the block is a terminating\n+    // scope, and thus a temporary (e.g., the result of calling\n+    // `bar()` in the initializer expression for `let inner = ...;`)\n+    // will be cleaned up immediately after its corresponding\n+    // statement (i.e., `let inner = ...;`) executes.\n+    //\n+    // On the other hand, temporaries associated with evaluating the\n+    // tail expression for the block are assigned lifetimes so that\n+    // they will be cleaned up as part of the terminating scope\n+    // *surrounding* the block expression. Here, the terminating\n+    // scope for the block expression is the `quux(..)` call; so\n+    // those temporaries will only be cleaned up *after* both\n+    // `other_argument()` has run and also the call to `quux(..)`\n+    // itself has returned.\n+\n+    visitor.enter_node_scope_with_dtor(blk.hir_id.local_id);\n+    visitor.cx.var_parent = visitor.cx.parent;\n+\n+    {\n+        // This block should be kept approximately in sync with\n+        // `intravisit::walk_block`. (We manually walk the block, rather\n+        // than call `walk_block`, in order to maintain precise\n+        // index information.)\n+\n+        for (i, statement) in blk.stmts.iter().enumerate() {\n+            match statement.kind {\n+                hir::StmtKind::Local(..) | hir::StmtKind::Item(..) => {\n+                    // Each declaration introduces a subscope for bindings\n+                    // introduced by the declaration; this subscope covers a\n+                    // suffix of the block. Each subscope in a block has the\n+                    // previous subscope in the block as a parent, except for\n+                    // the first such subscope, which has the block itself as a\n+                    // parent.\n+                    visitor.enter_scope(Scope {\n+                        id: blk.hir_id.local_id,\n+                        data: ScopeData::Remainder(FirstStatementIndex::new(i)),\n+                    });\n+                    visitor.cx.var_parent = visitor.cx.parent;\n+                }\n+                hir::StmtKind::Expr(..) | hir::StmtKind::Semi(..) => {}\n+            }\n+            visitor.visit_stmt(statement)\n+        }\n+        walk_list!(visitor, visit_expr, &blk.expr);\n+    }\n+\n+    visitor.cx = prev_cx;\n+}\n+\n+fn resolve_arm<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, arm: &'tcx hir::Arm<'tcx>) {\n+    let prev_cx = visitor.cx;\n+\n+    visitor.enter_scope(Scope { id: arm.hir_id.local_id, data: ScopeData::Node });\n+    visitor.cx.var_parent = visitor.cx.parent;\n+\n+    visitor.terminating_scopes.insert(arm.body.hir_id.local_id);\n+\n+    if let Some(hir::Guard::If(ref expr)) = arm.guard {\n+        visitor.terminating_scopes.insert(expr.hir_id.local_id);\n+    }\n+\n+    intravisit::walk_arm(visitor, arm);\n+\n+    visitor.cx = prev_cx;\n+}\n+\n+fn resolve_pat<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, pat: &'tcx hir::Pat<'tcx>) {\n+    visitor.record_child_scope(Scope { id: pat.hir_id.local_id, data: ScopeData::Node });\n+\n+    // If this is a binding then record the lifetime of that binding.\n+    if let PatKind::Binding(..) = pat.kind {\n+        record_var_lifetime(visitor, pat.hir_id.local_id, pat.span);\n+    }\n+\n+    debug!(\"resolve_pat - pre-increment {} pat = {:?}\", visitor.expr_and_pat_count, pat);\n+\n+    intravisit::walk_pat(visitor, pat);\n+\n+    visitor.expr_and_pat_count += 1;\n+\n+    debug!(\"resolve_pat - post-increment {} pat = {:?}\", visitor.expr_and_pat_count, pat);\n+}\n+\n+fn resolve_stmt<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, stmt: &'tcx hir::Stmt<'tcx>) {\n+    let stmt_id = stmt.hir_id.local_id;\n+    debug!(\"resolve_stmt(stmt.id={:?})\", stmt_id);\n+\n+    // Every statement will clean up the temporaries created during\n+    // execution of that statement. Therefore each statement has an\n+    // associated destruction scope that represents the scope of the\n+    // statement plus its destructors, and thus the scope for which\n+    // regions referenced by the destructors need to survive.\n+    visitor.terminating_scopes.insert(stmt_id);\n+\n+    let prev_parent = visitor.cx.parent;\n+    visitor.enter_node_scope_with_dtor(stmt_id);\n+\n+    intravisit::walk_stmt(visitor, stmt);\n+\n+    visitor.cx.parent = prev_parent;\n+}\n+\n+fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n+    debug!(\"resolve_expr - pre-increment {} expr = {:?}\", visitor.expr_and_pat_count, expr);\n+\n+    let prev_cx = visitor.cx;\n+    visitor.enter_node_scope_with_dtor(expr.hir_id.local_id);\n+\n+    {\n+        let terminating_scopes = &mut visitor.terminating_scopes;\n+        let mut terminating = |id: hir::ItemLocalId| {\n+            terminating_scopes.insert(id);\n+        };\n+        match expr.kind {\n+            // Conditional or repeating scopes are always terminating\n+            // scopes, meaning that temporaries cannot outlive them.\n+            // This ensures fixed size stacks.\n+            hir::ExprKind::Binary(\n+                source_map::Spanned { node: hir::BinOpKind::And, .. },\n+                _,\n+                ref r,\n+            )\n+            | hir::ExprKind::Binary(\n+                source_map::Spanned { node: hir::BinOpKind::Or, .. },\n+                _,\n+                ref r,\n+            ) => {\n+                // For shortcircuiting operators, mark the RHS as a terminating\n+                // scope since it only executes conditionally.\n+                terminating(r.hir_id.local_id);\n+            }\n+\n+            hir::ExprKind::Loop(ref body, _, _) => {\n+                terminating(body.hir_id.local_id);\n+            }\n+\n+            hir::ExprKind::DropTemps(ref expr) => {\n+                // `DropTemps(expr)` does not denote a conditional scope.\n+                // Rather, we want to achieve the same behavior as `{ let _t = expr; _t }`.\n+                terminating(expr.hir_id.local_id);\n+            }\n+\n+            hir::ExprKind::AssignOp(..)\n+            | hir::ExprKind::Index(..)\n+            | hir::ExprKind::Unary(..)\n+            | hir::ExprKind::Call(..)\n+            | hir::ExprKind::MethodCall(..) => {\n+                // FIXME(https://github.com/rust-lang/rfcs/issues/811) Nested method calls\n+                //\n+                // The lifetimes for a call or method call look as follows:\n+                //\n+                // call.id\n+                // - arg0.id\n+                // - ...\n+                // - argN.id\n+                // - call.callee_id\n+                //\n+                // The idea is that call.callee_id represents *the time when\n+                // the invoked function is actually running* and call.id\n+                // represents *the time to prepare the arguments and make the\n+                // call*.  See the section \"Borrows in Calls\" borrowck/README.md\n+                // for an extended explanation of why this distinction is\n+                // important.\n+                //\n+                // record_superlifetime(new_cx, expr.callee_id);\n+            }\n+\n+            _ => {}\n+        }\n+    }\n+\n+    let prev_pessimistic = visitor.pessimistic_yield;\n+\n+    // Ordinarily, we can rely on the visit order of HIR intravisit\n+    // to correspond to the actual execution order of statements.\n+    // However, there's a weird corner case with compund assignment\n+    // operators (e.g. `a += b`). The evaluation order depends on whether\n+    // or not the operator is overloaded (e.g. whether or not a trait\n+    // like AddAssign is implemented).\n+\n+    // For primitive types (which, despite having a trait impl, don't actually\n+    // end up calling it), the evluation order is right-to-left. For example,\n+    // the following code snippet:\n+    //\n+    //    let y = &mut 0;\n+    //    *{println!(\"LHS!\"); y} += {println!(\"RHS!\"); 1};\n+    //\n+    // will print:\n+    //\n+    // RHS!\n+    // LHS!\n+    //\n+    // However, if the operator is used on a non-primitive type,\n+    // the evaluation order will be left-to-right, since the operator\n+    // actually get desugared to a method call. For example, this\n+    // nearly identical code snippet:\n+    //\n+    //     let y = &mut String::new();\n+    //    *{println!(\"LHS String\"); y} += {println!(\"RHS String\"); \"hi\"};\n+    //\n+    // will print:\n+    // LHS String\n+    // RHS String\n+    //\n+    // To determine the actual execution order, we need to perform\n+    // trait resolution. Unfortunately, we need to be able to compute\n+    // yield_in_scope before type checking is even done, as it gets\n+    // used by AST borrowcheck.\n+    //\n+    // Fortunately, we don't need to know the actual execution order.\n+    // It suffices to know the 'worst case' order with respect to yields.\n+    // Specifically, we need to know the highest 'expr_and_pat_count'\n+    // that we could assign to the yield expression. To do this,\n+    // we pick the greater of the two values from the left-hand\n+    // and right-hand expressions. This makes us overly conservative\n+    // about what types could possibly live across yield points,\n+    // but we will never fail to detect that a type does actually\n+    // live across a yield point. The latter part is critical -\n+    // we're already overly conservative about what types will live\n+    // across yield points, as the generated MIR will determine\n+    // when things are actually live. However, for typecheck to work\n+    // properly, we can't miss any types.\n+\n+    match expr.kind {\n+        // Manually recurse over closures, because they are the only\n+        // case of nested bodies that share the parent environment.\n+        hir::ExprKind::Closure(.., body, _, _) => {\n+            let body = visitor.tcx.hir().body(body);\n+            visitor.visit_body(body);\n+        }\n+        hir::ExprKind::AssignOp(_, ref left_expr, ref right_expr) => {\n+            debug!(\n+                \"resolve_expr - enabling pessimistic_yield, was previously {}\",\n+                prev_pessimistic\n+            );\n+\n+            let start_point = visitor.fixup_scopes.len();\n+            visitor.pessimistic_yield = true;\n+\n+            // If the actual execution order turns out to be right-to-left,\n+            // then we're fine. However, if the actual execution order is left-to-right,\n+            // then we'll assign too low a count to any `yield` expressions\n+            // we encounter in 'right_expression' - they should really occur after all of the\n+            // expressions in 'left_expression'.\n+            visitor.visit_expr(&right_expr);\n+            visitor.pessimistic_yield = prev_pessimistic;\n+\n+            debug!(\"resolve_expr - restoring pessimistic_yield to {}\", prev_pessimistic);\n+            visitor.visit_expr(&left_expr);\n+            debug!(\"resolve_expr - fixing up counts to {}\", visitor.expr_and_pat_count);\n+\n+            // Remove and process any scopes pushed by the visitor\n+            let target_scopes = visitor.fixup_scopes.drain(start_point..);\n+\n+            for scope in target_scopes {\n+                let mut yield_data = visitor.scope_tree.yield_in_scope.get_mut(&scope).unwrap();\n+                let count = yield_data.expr_and_pat_count;\n+                let span = yield_data.span;\n+\n+                // expr_and_pat_count never decreases. Since we recorded counts in yield_in_scope\n+                // before walking the left-hand side, it should be impossible for the recorded\n+                // count to be greater than the left-hand side count.\n+                if count > visitor.expr_and_pat_count {\n+                    bug!(\n+                        \"Encountered greater count {} at span {:?} - expected no greater than {}\",\n+                        count,\n+                        span,\n+                        visitor.expr_and_pat_count\n+                    );\n+                }\n+                let new_count = visitor.expr_and_pat_count;\n+                debug!(\n+                    \"resolve_expr - increasing count for scope {:?} from {} to {} at span {:?}\",\n+                    scope, count, new_count, span\n+                );\n+\n+                yield_data.expr_and_pat_count = new_count;\n+            }\n+        }\n+\n+        _ => intravisit::walk_expr(visitor, expr),\n+    }\n+\n+    visitor.expr_and_pat_count += 1;\n+\n+    debug!(\"resolve_expr post-increment {}, expr = {:?}\", visitor.expr_and_pat_count, expr);\n+\n+    if let hir::ExprKind::Yield(_, source) = &expr.kind {\n+        // Mark this expr's scope and all parent scopes as containing `yield`.\n+        let mut scope = Scope { id: expr.hir_id.local_id, data: ScopeData::Node };\n+        loop {\n+            let data = YieldData {\n+                span: expr.span,\n+                expr_and_pat_count: visitor.expr_and_pat_count,\n+                source: *source,\n+            };\n+            visitor.scope_tree.yield_in_scope.insert(scope, data);\n+            if visitor.pessimistic_yield {\n+                debug!(\"resolve_expr in pessimistic_yield - marking scope {:?} for fixup\", scope);\n+                visitor.fixup_scopes.push(scope);\n+            }\n+\n+            // Keep traversing up while we can.\n+            match visitor.scope_tree.parent_map.get(&scope) {\n+                // Don't cross from closure bodies to their parent.\n+                Some(&(superscope, _)) => match superscope.data {\n+                    ScopeData::CallSite => break,\n+                    _ => scope = superscope,\n+                },\n+                None => break,\n+            }\n+        }\n+    }\n+\n+    visitor.cx = prev_cx;\n+}\n+\n+fn resolve_local<'tcx>(\n+    visitor: &mut RegionResolutionVisitor<'tcx>,\n+    pat: Option<&'tcx hir::Pat<'tcx>>,\n+    init: Option<&'tcx hir::Expr<'tcx>>,\n+) {\n+    debug!(\"resolve_local(pat={:?}, init={:?})\", pat, init);\n+\n+    let blk_scope = visitor.cx.var_parent.map(|(p, _)| p);\n+\n+    // As an exception to the normal rules governing temporary\n+    // lifetimes, initializers in a let have a temporary lifetime\n+    // of the enclosing block. This means that e.g., a program\n+    // like the following is legal:\n+    //\n+    //     let ref x = HashMap::new();\n+    //\n+    // Because the hash map will be freed in the enclosing block.\n+    //\n+    // We express the rules more formally based on 3 grammars (defined\n+    // fully in the helpers below that implement them):\n+    //\n+    // 1. `E&`, which matches expressions like `&<rvalue>` that\n+    //    own a pointer into the stack.\n+    //\n+    // 2. `P&`, which matches patterns like `ref x` or `(ref x, ref\n+    //    y)` that produce ref bindings into the value they are\n+    //    matched against or something (at least partially) owned by\n+    //    the value they are matched against. (By partially owned,\n+    //    I mean that creating a binding into a ref-counted or managed value\n+    //    would still count.)\n+    //\n+    // 3. `ET`, which matches both rvalues like `foo()` as well as places\n+    //    based on rvalues like `foo().x[2].y`.\n+    //\n+    // A subexpression `<rvalue>` that appears in a let initializer\n+    // `let pat [: ty] = expr` has an extended temporary lifetime if\n+    // any of the following conditions are met:\n+    //\n+    // A. `pat` matches `P&` and `expr` matches `ET`\n+    //    (covers cases where `pat` creates ref bindings into an rvalue\n+    //     produced by `expr`)\n+    // B. `ty` is a borrowed pointer and `expr` matches `ET`\n+    //    (covers cases where coercion creates a borrow)\n+    // C. `expr` matches `E&`\n+    //    (covers cases `expr` borrows an rvalue that is then assigned\n+    //     to memory (at least partially) owned by the binding)\n+    //\n+    // Here are some examples hopefully giving an intuition where each\n+    // rule comes into play and why:\n+    //\n+    // Rule A. `let (ref x, ref y) = (foo().x, 44)`. The rvalue `(22, 44)`\n+    // would have an extended lifetime, but not `foo()`.\n+    //\n+    // Rule B. `let x = &foo().x`. The rvalue `foo()` would have extended\n+    // lifetime.\n+    //\n+    // In some cases, multiple rules may apply (though not to the same\n+    // rvalue). For example:\n+    //\n+    //     let ref x = [&a(), &b()];\n+    //\n+    // Here, the expression `[...]` has an extended lifetime due to rule\n+    // A, but the inner rvalues `a()` and `b()` have an extended lifetime\n+    // due to rule C.\n+\n+    if let Some(expr) = init {\n+        record_rvalue_scope_if_borrow_expr(visitor, &expr, blk_scope);\n+\n+        if let Some(pat) = pat {\n+            if is_binding_pat(pat) {\n+                record_rvalue_scope(visitor, &expr, blk_scope);\n+            }\n+        }\n+    }\n+\n+    // Make sure we visit the initializer first, so expr_and_pat_count remains correct\n+    if let Some(expr) = init {\n+        visitor.visit_expr(expr);\n+    }\n+    if let Some(pat) = pat {\n+        visitor.visit_pat(pat);\n+    }\n+\n+    /// Returns `true` if `pat` match the `P&` non-terminal.\n+    ///\n+    /// ```text\n+    ///     P& = ref X\n+    ///        | StructName { ..., P&, ... }\n+    ///        | VariantName(..., P&, ...)\n+    ///        | [ ..., P&, ... ]\n+    ///        | ( ..., P&, ... )\n+    ///        | ... \"|\" P& \"|\" ...\n+    ///        | box P&\n+    /// ```\n+    fn is_binding_pat(pat: &hir::Pat<'_>) -> bool {\n+        // Note that the code below looks for *explicit* refs only, that is, it won't\n+        // know about *implicit* refs as introduced in #42640.\n+        //\n+        // This is not a problem. For example, consider\n+        //\n+        //      let (ref x, ref y) = (Foo { .. }, Bar { .. });\n+        //\n+        // Due to the explicit refs on the left hand side, the below code would signal\n+        // that the temporary value on the right hand side should live until the end of\n+        // the enclosing block (as opposed to being dropped after the let is complete).\n+        //\n+        // To create an implicit ref, however, you must have a borrowed value on the RHS\n+        // already, as in this example (which won't compile before #42640):\n+        //\n+        //      let Foo { x, .. } = &Foo { x: ..., ... };\n+        //\n+        // in place of\n+        //\n+        //      let Foo { ref x, .. } = Foo { ... };\n+        //\n+        // In the former case (the implicit ref version), the temporary is created by the\n+        // & expression, and its lifetime would be extended to the end of the block (due\n+        // to a different rule, not the below code).\n+        match pat.kind {\n+            PatKind::Binding(hir::BindingAnnotation::Ref, ..)\n+            | PatKind::Binding(hir::BindingAnnotation::RefMut, ..) => true,\n+\n+            PatKind::Struct(_, ref field_pats, _) => {\n+                field_pats.iter().any(|fp| is_binding_pat(&fp.pat))\n+            }\n+\n+            PatKind::Slice(ref pats1, ref pats2, ref pats3) => {\n+                pats1.iter().any(|p| is_binding_pat(&p))\n+                    || pats2.iter().any(|p| is_binding_pat(&p))\n+                    || pats3.iter().any(|p| is_binding_pat(&p))\n+            }\n+\n+            PatKind::Or(ref subpats)\n+            | PatKind::TupleStruct(_, ref subpats, _)\n+            | PatKind::Tuple(ref subpats, _) => subpats.iter().any(|p| is_binding_pat(&p)),\n+\n+            PatKind::Box(ref subpat) => is_binding_pat(&subpat),\n+\n+            PatKind::Ref(_, _)\n+            | PatKind::Binding(hir::BindingAnnotation::Unannotated, ..)\n+            | PatKind::Binding(hir::BindingAnnotation::Mutable, ..)\n+            | PatKind::Wild\n+            | PatKind::Path(_)\n+            | PatKind::Lit(_)\n+            | PatKind::Range(_, _, _) => false,\n+        }\n+    }\n+\n+    /// If `expr` matches the `E&` grammar, then records an extended rvalue scope as appropriate:\n+    ///\n+    /// ```text\n+    ///     E& = & ET\n+    ///        | StructName { ..., f: E&, ... }\n+    ///        | [ ..., E&, ... ]\n+    ///        | ( ..., E&, ... )\n+    ///        | {...; E&}\n+    ///        | box E&\n+    ///        | E& as ...\n+    ///        | ( E& )\n+    /// ```\n+    fn record_rvalue_scope_if_borrow_expr<'tcx>(\n+        visitor: &mut RegionResolutionVisitor<'tcx>,\n+        expr: &hir::Expr<'_>,\n+        blk_id: Option<Scope>,\n+    ) {\n+        match expr.kind {\n+            hir::ExprKind::AddrOf(_, _, ref subexpr) => {\n+                record_rvalue_scope_if_borrow_expr(visitor, &subexpr, blk_id);\n+                record_rvalue_scope(visitor, &subexpr, blk_id);\n+            }\n+            hir::ExprKind::Struct(_, fields, _) => {\n+                for field in fields {\n+                    record_rvalue_scope_if_borrow_expr(visitor, &field.expr, blk_id);\n+                }\n+            }\n+            hir::ExprKind::Array(subexprs) | hir::ExprKind::Tup(subexprs) => {\n+                for subexpr in subexprs {\n+                    record_rvalue_scope_if_borrow_expr(visitor, &subexpr, blk_id);\n+                }\n+            }\n+            hir::ExprKind::Cast(ref subexpr, _) => {\n+                record_rvalue_scope_if_borrow_expr(visitor, &subexpr, blk_id)\n+            }\n+            hir::ExprKind::Block(ref block, _) => {\n+                if let Some(ref subexpr) = block.expr {\n+                    record_rvalue_scope_if_borrow_expr(visitor, &subexpr, blk_id);\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+\n+    /// Applied to an expression `expr` if `expr` -- or something owned or partially owned by\n+    /// `expr` -- is going to be indirectly referenced by a variable in a let statement. In that\n+    /// case, the \"temporary lifetime\" or `expr` is extended to be the block enclosing the `let`\n+    /// statement.\n+    ///\n+    /// More formally, if `expr` matches the grammar `ET`, record the rvalue scope of the matching\n+    /// `<rvalue>` as `blk_id`:\n+    ///\n+    /// ```text\n+    ///     ET = *ET\n+    ///        | ET[...]\n+    ///        | ET.f\n+    ///        | (ET)\n+    ///        | <rvalue>\n+    /// ```\n+    ///\n+    /// Note: ET is intended to match \"rvalues or places based on rvalues\".\n+    fn record_rvalue_scope<'tcx>(\n+        visitor: &mut RegionResolutionVisitor<'tcx>,\n+        expr: &hir::Expr<'_>,\n+        blk_scope: Option<Scope>,\n+    ) {\n+        let mut expr = expr;\n+        loop {\n+            // Note: give all the expressions matching `ET` with the\n+            // extended temporary lifetime, not just the innermost rvalue,\n+            // because in codegen if we must compile e.g., `*rvalue()`\n+            // into a temporary, we request the temporary scope of the\n+            // outer expression.\n+            visitor.scope_tree.record_rvalue_scope(expr.hir_id.local_id, blk_scope);\n+\n+            match expr.kind {\n+                hir::ExprKind::AddrOf(_, _, ref subexpr)\n+                | hir::ExprKind::Unary(hir::UnDeref, ref subexpr)\n+                | hir::ExprKind::Field(ref subexpr, _)\n+                | hir::ExprKind::Index(ref subexpr, _) => {\n+                    expr = &subexpr;\n+                }\n+                _ => {\n+                    return;\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+impl<'tcx> RegionResolutionVisitor<'tcx> {\n+    /// Records the current parent (if any) as the parent of `child_scope`.\n+    /// Returns the depth of `child_scope`.\n+    fn record_child_scope(&mut self, child_scope: Scope) -> ScopeDepth {\n+        let parent = self.cx.parent;\n+        self.scope_tree.record_scope_parent(child_scope, parent);\n+        // If `child_scope` has no parent, it must be the root node, and so has\n+        // a depth of 1. Otherwise, its depth is one more than its parent's.\n+        parent.map_or(1, |(_p, d)| d + 1)\n+    }\n+\n+    /// Records the current parent (if any) as the parent of `child_scope`,\n+    /// and sets `child_scope` as the new current parent.\n+    fn enter_scope(&mut self, child_scope: Scope) {\n+        let child_depth = self.record_child_scope(child_scope);\n+        self.cx.parent = Some((child_scope, child_depth));\n+    }\n+\n+    fn enter_node_scope_with_dtor(&mut self, id: hir::ItemLocalId) {\n+        // If node was previously marked as a terminating scope during the\n+        // recursive visit of its parent node in the AST, then we need to\n+        // account for the destruction scope representing the scope of\n+        // the destructors that run immediately after it completes.\n+        if self.terminating_scopes.contains(&id) {\n+            self.enter_scope(Scope { id, data: ScopeData::Destruction });\n+        }\n+        self.enter_scope(Scope { id, data: ScopeData::Node });\n+    }\n+}\n+\n+impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_block(&mut self, b: &'tcx Block<'tcx>) {\n+        resolve_block(self, b);\n+    }\n+\n+    fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n+        let body_id = body.id();\n+        let owner_id = self.tcx.hir().body_owner(body_id);\n+\n+        debug!(\n+            \"visit_body(id={:?}, span={:?}, body.id={:?}, cx.parent={:?})\",\n+            owner_id,\n+            self.tcx.sess.source_map().span_to_string(body.value.span),\n+            body_id,\n+            self.cx.parent\n+        );\n+\n+        let outer_ec = mem::replace(&mut self.expr_and_pat_count, 0);\n+        let outer_cx = self.cx;\n+        let outer_ts = mem::take(&mut self.terminating_scopes);\n+        self.terminating_scopes.insert(body.value.hir_id.local_id);\n+\n+        if let Some(root_id) = self.cx.root_id {\n+            self.scope_tree.record_closure_parent(body.value.hir_id.local_id, root_id);\n+        }\n+        self.cx.root_id = Some(body.value.hir_id.local_id);\n+\n+        self.enter_scope(Scope { id: body.value.hir_id.local_id, data: ScopeData::CallSite });\n+        self.enter_scope(Scope { id: body.value.hir_id.local_id, data: ScopeData::Arguments });\n+\n+        // The arguments and `self` are parented to the fn.\n+        self.cx.var_parent = self.cx.parent.take();\n+        for param in body.params {\n+            self.visit_pat(&param.pat);\n+        }\n+\n+        // The body of the every fn is a root scope.\n+        self.cx.parent = self.cx.var_parent;\n+        if self.tcx.hir().body_owner_kind(owner_id).is_fn_or_closure() {\n+            self.visit_expr(&body.value)\n+        } else {\n+            // Only functions have an outer terminating (drop) scope, while\n+            // temporaries in constant initializers may be 'static, but only\n+            // according to rvalue lifetime semantics, using the same\n+            // syntactical rules used for let initializers.\n+            //\n+            // e.g., in `let x = &f();`, the temporary holding the result from\n+            // the `f()` call lives for the entirety of the surrounding block.\n+            //\n+            // Similarly, `const X: ... = &f();` would have the result of `f()`\n+            // live for `'static`, implying (if Drop restrictions on constants\n+            // ever get lifted) that the value *could* have a destructor, but\n+            // it'd get leaked instead of the destructor running during the\n+            // evaluation of `X` (if at all allowed by CTFE).\n+            //\n+            // However, `const Y: ... = g(&f());`, like `let y = g(&f());`,\n+            // would *not* let the `f()` temporary escape into an outer scope\n+            // (i.e., `'static`), which means that after `g` returns, it drops,\n+            // and all the associated destruction scope rules apply.\n+            self.cx.var_parent = None;\n+            resolve_local(self, None, Some(&body.value));\n+        }\n+\n+        if body.generator_kind.is_some() {\n+            self.scope_tree.body_expr_count.insert(body_id, self.expr_and_pat_count);\n+        }\n+\n+        // Restore context we had at the start.\n+        self.expr_and_pat_count = outer_ec;\n+        self.cx = outer_cx;\n+        self.terminating_scopes = outer_ts;\n+    }\n+\n+    fn visit_arm(&mut self, a: &'tcx Arm<'tcx>) {\n+        resolve_arm(self, a);\n+    }\n+    fn visit_pat(&mut self, p: &'tcx Pat<'tcx>) {\n+        resolve_pat(self, p);\n+    }\n+    fn visit_stmt(&mut self, s: &'tcx Stmt<'tcx>) {\n+        resolve_stmt(self, s);\n+    }\n+    fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n+        resolve_expr(self, ex);\n+    }\n+    fn visit_local(&mut self, l: &'tcx Local<'tcx>) {\n+        resolve_local(self, Some(&l.pat), l.init.as_ref().map(|e| &**e));\n+    }\n+}\n+\n+fn region_scope_tree(tcx: TyCtxt<'_>, def_id: DefId) -> &ScopeTree {\n+    let closure_base_def_id = tcx.closure_base_def_id(def_id);\n+    if closure_base_def_id != def_id {\n+        return tcx.region_scope_tree(closure_base_def_id);\n+    }\n+\n+    let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+    let scope_tree = if let Some(body_id) = tcx.hir().maybe_body_owned_by(id) {\n+        let mut visitor = RegionResolutionVisitor {\n+            tcx,\n+            scope_tree: ScopeTree::default(),\n+            expr_and_pat_count: 0,\n+            cx: Context { root_id: None, parent: None, var_parent: None },\n+            terminating_scopes: Default::default(),\n+            pessimistic_yield: false,\n+            fixup_scopes: vec![],\n+        };\n+\n+        let body = tcx.hir().body(body_id);\n+        visitor.scope_tree.root_body = Some(body.value.hir_id);\n+\n+        // If the item is an associated const or a method,\n+        // record its impl/trait parent, as it can also have\n+        // lifetime parameters free in this body.\n+        match tcx.hir().get(id) {\n+            Node::ImplItem(_) | Node::TraitItem(_) => {\n+                visitor.scope_tree.root_parent = Some(tcx.hir().get_parent_item(id));\n+            }\n+            _ => {}\n+        }\n+\n+        visitor.visit_body(body);\n+\n+        visitor.scope_tree\n+    } else {\n+        ScopeTree::default()\n+    };\n+\n+    tcx.arena.alloc(scope_tree)\n+}\n+\n+pub fn provide(providers: &mut Providers<'_>) {\n+    *providers = Providers { region_scope_tree, ..*providers };\n+}"}, {"sha": "75bd6babe16ec5607eb074e05a0ce1bd5513814c", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -593,6 +593,12 @@ impl Options {\n     }\n }\n \n+impl DebuggingOptions {\n+    pub fn ui_testing(&self) -> bool {\n+        self.ui_testing.unwrap_or(false)\n+    }\n+}\n+\n // The type of entry function, so users can have their own entry functions\n #[derive(Copy, Clone, PartialEq, Hash, Debug)]\n pub enum EntryFnType {"}, {"sha": "3683daf7a87de801419d69dc9ad8616056654beb", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -904,7 +904,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `mir` (the MIR), or `mir-cfg` (graphviz formatted MIR)\"),\n     run_dsymutil: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"run `dsymutil` and delete intermediate object files\"),\n-    ui_testing: bool = (false, parse_bool, [UNTRACKED],\n+    ui_testing: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n         \"format compiler diagnostics in a way that's better suitable for UI testing\"),\n     embed_bitcode: bool = (false, parse_bool, [TRACKED],\n         \"embed LLVM bitcode in object files\"),"}, {"sha": "8e9de69539a86afb954047721f584b34092b8c20", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -869,7 +869,7 @@ fn default_emitter(\n                     short,\n                     external_macro_backtrace,\n                 );\n-                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n+                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing()))\n             } else {\n                 let emitter = match dst {\n                     None => EmitterWriter::stderr(\n@@ -890,7 +890,7 @@ fn default_emitter(\n                         external_macro_backtrace,\n                     ),\n                 };\n-                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n+                Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing()))\n             }\n         }\n         (config::ErrorOutputType::Json { pretty, json_rendered }, None) => Box::new(\n@@ -901,7 +901,7 @@ fn default_emitter(\n                 json_rendered,\n                 external_macro_backtrace,\n             )\n-            .ui_testing(sopts.debugging_opts.ui_testing),\n+            .ui_testing(sopts.debugging_opts.ui_testing()),\n         ),\n         (config::ErrorOutputType::Json { pretty, json_rendered }, Some(dst)) => Box::new(\n             JsonEmitter::new(\n@@ -912,7 +912,7 @@ fn default_emitter(\n                 json_rendered,\n                 external_macro_backtrace,\n             )\n-            .ui_testing(sopts.debugging_opts.ui_testing),\n+            .ui_testing(sopts.debugging_opts.ui_testing()),\n         ),\n     }\n }"}, {"sha": "25a892062fcbb01bd273fb8484c60d43b8d2a3b9", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -273,7 +273,7 @@ impl Options {\n             error_format,\n             None,\n             debugging_options.treat_err_as_bug,\n-            debugging_options.ui_testing,\n+            debugging_options.ui_testing(),\n         );\n \n         // check for deprecated options"}, {"sha": "b0496dabc72134830ce7ff6aa7cb71e6e29c7832", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -449,7 +449,7 @@ fn main_options(options: config::Options) -> i32 {\n         options.error_format,\n         None,\n         options.debugging_options.treat_err_as_bug,\n-        options.debugging_options.ui_testing,\n+        options.debugging_options.ui_testing(),\n     );\n \n     match (options.should_test, options.markdown_input()) {\n@@ -466,7 +466,7 @@ fn main_options(options: config::Options) -> i32 {\n     let diag_opts = (\n         options.error_format,\n         options.debugging_options.treat_err_as_bug,\n-        options.debugging_options.ui_testing,\n+        options.debugging_options.ui_testing(),\n         options.edition,\n     );\n     let show_coverage = options.show_coverage;"}, {"sha": "be9da569f8be11f5ef929cb98d53b5a480d75a94", "filename": "src/test/ui/issues/issue-26217.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftest%2Fui%2Fissues%2Fissue-26217.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftest%2Fui%2Fissues%2Fissue-26217.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26217.stderr?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -8,3 +8,4 @@ LL |     foo::<&'a i32>();\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0477`."}, {"sha": "62aacee811110503b084cb877ab3dbdb60970573", "filename": "src/test/ui/issues/issue-54943.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftest%2Fui%2Fissues%2Fissue-54943.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftest%2Fui%2Fissues%2Fissue-54943.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54943.stderr?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -8,3 +8,4 @@ LL |     let x = foo::<&'a u32>();\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0477`."}, {"sha": "2075fdd311e61b345226979159ed1d112df38583", "filename": "src/test/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -76,4 +76,5 @@ LL |     let a: Box<dyn Gettable<Foo>> = t;\n \n error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0477.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "b2e89087e387f1220b79924ccf109f856b7d5bbb", "filename": "src/test/ui/kindck/kindck-send-object1.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.stderr?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -33,4 +33,5 @@ LL |     assert_send::<Box<dyn Dummy + 'a>>();\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0277`.\n+Some errors have detailed explanations: E0277, E0477.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "c72d6483c28f4f457bf3b33cd0184919e74f2eee", "filename": "src/test/ui/regions/regions-bounded-by-trait-requiring-static.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.stderr?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -48,3 +48,4 @@ LL |     assert_send::<*mut &'a isize>();\n \n error: aborting due to 6 previous errors\n \n+For more information about this error, try `rustc --explain E0477`."}, {"sha": "66b61b1349d2b4745dce1dd34382c9616ee54549", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.stderr?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -8,3 +8,4 @@ LL |     Foo.some_method::<&'a isize>();\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0477`."}, {"sha": "901263c5bf8d2e18fa9c9d8e841c57171bcbd7c8", "filename": "src/test/ui/ui-testing-optout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftest%2Fui%2Fui-testing-optout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftest%2Fui%2Fui-testing-optout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fui-testing-optout.rs?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -1,4 +1,4 @@\n-// disable-ui-testing-normalization\n+// compile-flags: -Z ui-testing=no\n \n // Line number < 10\n type A = B; //~ ERROR"}, {"sha": "691b8d3ccfd39c28e4862de975386f77c6e6e76c", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -376,8 +376,6 @@ pub struct TestProps {\n     pub fail_mode: Option<FailMode>,\n     // rustdoc will test the output of the `--test` option\n     pub check_test_line_numbers_match: bool,\n-    // Do not pass `-Z ui-testing` to UI tests\n-    pub disable_ui_testing_normalization: bool,\n     // customized normalization rules\n     pub normalize_stdout: Vec<(String, String)>,\n     pub normalize_stderr: Vec<(String, String)>,\n@@ -422,7 +420,6 @@ impl TestProps {\n             fail_mode: None,\n             ignore_pass: false,\n             check_test_line_numbers_match: false,\n-            disable_ui_testing_normalization: false,\n             normalize_stdout: vec![],\n             normalize_stderr: vec![],\n             failure_status: -1,\n@@ -569,11 +566,6 @@ impl TestProps {\n                 self.ignore_pass = config.parse_ignore_pass(ln);\n             }\n \n-            if !self.disable_ui_testing_normalization {\n-                self.disable_ui_testing_normalization =\n-                    config.parse_disable_ui_testing_normalization(ln);\n-            }\n-\n             if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stdout\") {\n                 self.normalize_stdout.push(rule);\n             }\n@@ -826,10 +818,6 @@ impl Config {\n         }\n     }\n \n-    fn parse_disable_ui_testing_normalization(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"disable-ui-testing-normalization\")\n-    }\n-\n     fn parse_check_test_line_numbers_match(&self, line: &str) -> bool {\n         self.parse_name_directive(line, \"check-test-line-numbers-match\")\n     }"}, {"sha": "226a12c6734b70b404118b0f7a55f238726bd3c2", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509510152865d5a9a47723ad56047904986c9dd9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=509510152865d5a9a47723ad56047904986c9dd9", "patch": "@@ -1863,17 +1863,13 @@ impl<'test> TestCx<'test> {\n                 if self.props.error_patterns.is_empty() {\n                     rustc.args(&[\"--error-format\", \"json\"]);\n                 }\n-                if !self.props.disable_ui_testing_normalization {\n-                    rustc.arg(\"-Zui-testing\");\n-                }\n+                rustc.arg(\"-Zui-testing\");\n             }\n             Ui => {\n                 if !self.props.compile_flags.iter().any(|s| s.starts_with(\"--error-format\")) {\n                     rustc.args(&[\"--error-format\", \"json\"]);\n                 }\n-                if !self.props.disable_ui_testing_normalization {\n-                    rustc.arg(\"-Zui-testing\");\n-                }\n+                rustc.arg(\"-Zui-testing\");\n             }\n             MirOpt => {\n                 rustc.args(&["}]}