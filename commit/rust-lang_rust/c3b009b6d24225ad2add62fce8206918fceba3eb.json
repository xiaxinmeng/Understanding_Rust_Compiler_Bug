{"sha": "c3b009b6d24225ad2add62fce8206918fceba3eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYjAwOWI2ZDI0MjI1YWQyYWRkNjJmY2U4MjA2OTE4ZmNlYmEzZWI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-02-10T09:54:34Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-02-10T09:54:34Z"}, "message": "Merge #45\n\n45: Types r=matklad a=matklad\n\nbors r+", "tree": {"sha": "6e68e8242bbc181e5a846754466d4109783b6a2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e68e8242bbc181e5a846754466d4109783b6a2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3b009b6d24225ad2add62fce8206918fceba3eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3b009b6d24225ad2add62fce8206918fceba3eb", "html_url": "https://github.com/rust-lang/rust/commit/c3b009b6d24225ad2add62fce8206918fceba3eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3b009b6d24225ad2add62fce8206918fceba3eb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "419b9b7e5efd895249934551cb2588b27a956f58", "url": "https://api.github.com/repos/rust-lang/rust/commits/419b9b7e5efd895249934551cb2588b27a956f58", "html_url": "https://github.com/rust-lang/rust/commit/419b9b7e5efd895249934551cb2588b27a956f58"}, {"sha": "dd6e5371ebddeaeecb3d1e2d3d6c8b3c9050bb05", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6e5371ebddeaeecb3d1e2d3d6c8b3c9050bb05", "html_url": "https://github.com/rust-lang/rust/commit/dd6e5371ebddeaeecb3d1e2d3d6c8b3c9050bb05"}], "stats": {"total": 168, "additions": 134, "deletions": 34}, "files": [{"sha": "c38bf654d5d181130bfe6533df01b30b4a4d30a2", "filename": "grammar.ron", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3b009b6d24225ad2add62fce8206918fceba3eb/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/c3b009b6d24225ad2add62fce8206918fceba3eb/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=c3b009b6d24225ad2add62fce8206918fceba3eb", "patch": "@@ -26,6 +26,7 @@ Grammar(\n         \"static\",\n         \"mut\",\n         \"unsafe\",\n+        \"type\",\n     ],\n     contextual_keywords: [\n         \"auto\",\n@@ -98,6 +99,7 @@ Grammar(\n         \"CONST_ITEM\",\n         \"TRAIT_ITEM\",\n         \"IMPL_ITEM\",\n+        \"TYPE_ITEM\",\n \n         \"EXTERN_BLOCK\",\n         \"ENUM_VARIANT\",\n@@ -112,6 +114,7 @@ Grammar(\n         \"ALIAS\",\n         \"VISIBILITY\",\n         \"TYPE_PARAM_LIST\",\n+        \"WHERE_CLAUSE\",\n         \"LIFETIME_PARAM\",\n         \"TYPE_PARAM\",\n         \"ABI\","}, {"sha": "ffe86fa97630c3aeab292ec31936b7e3e4e032be", "filename": "src/parser/grammar/items/mod.rs", "status": "modified", "additions": 52, "deletions": 28, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/c3b009b6d24225ad2add62fce8206918fceba3eb/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b009b6d24225ad2add62fce8206918fceba3eb/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs?ref=c3b009b6d24225ad2add62fce8206918fceba3eb", "patch": "@@ -150,7 +150,14 @@ fn item(p: &mut Parser) {\n                 }\n             }\n         }\n-\n+        FN_KW => {\n+            fn_item(p);\n+            FN_ITEM\n+        }\n+        TYPE_KW => {\n+            type_item(p);\n+            TYPE_ITEM\n+        }\n         MOD_KW => {\n             mod_item(p);\n             MOD_ITEM\n@@ -163,10 +170,6 @@ fn item(p: &mut Parser) {\n             structs::enum_item(p);\n             ENUM_ITEM\n         }\n-        FN_KW => {\n-            fn_item(p);\n-            FN_ITEM\n-        }\n         L_CURLY => {\n             item.abandon(p);\n             error_block(p, \"expected item\");\n@@ -203,29 +206,6 @@ fn extern_block(p: &mut Parser) {\n     p.expect(R_CURLY);\n }\n \n-fn mod_item(p: &mut Parser) {\n-    assert!(p.at(MOD_KW));\n-    p.bump();\n-\n-    if p.expect(IDENT) && !p.eat(SEMI) {\n-        if p.expect(L_CURLY) {\n-            mod_contents(p, true);\n-            p.expect(R_CURLY);\n-        }\n-    }\n-}\n-\n-fn abi(p: &mut Parser) {\n-    assert!(p.at(EXTERN_KW));\n-    let abi = p.start();\n-    p.bump();\n-    match p.current() {\n-        STRING | RAW_STRING => p.bump(),\n-        _ => (),\n-    }\n-    abi.complete(p, ABI);\n-}\n-\n fn fn_item(p: &mut Parser) {\n     assert!(p.at(FN_KW));\n     p.bump();\n@@ -248,3 +228,47 @@ fn fn_item(p: &mut Parser) {\n         p.expect(R_PAREN);\n     }\n }\n+\n+// test type_item\n+// type Foo = Bar;\n+fn type_item(p: &mut Parser) {\n+    assert!(p.at(TYPE_KW));\n+    p.bump();\n+\n+    p.expect(IDENT);\n+\n+    // test type_item_type_params\n+    // type Result<T> = ();\n+    type_params::list(p);\n+\n+    // test type_item_where_clause\n+    // type Foo where Foo: Copy = ();\n+    type_params::where_clause(p);\n+\n+    p.expect(EQ);\n+    types::type_ref(p);\n+    p.expect(SEMI);\n+}\n+\n+fn mod_item(p: &mut Parser) {\n+    assert!(p.at(MOD_KW));\n+    p.bump();\n+\n+    if p.expect(IDENT) && !p.eat(SEMI) {\n+        if p.expect(L_CURLY) {\n+            mod_contents(p, true);\n+            p.expect(R_CURLY);\n+        }\n+    }\n+}\n+\n+fn abi(p: &mut Parser) {\n+    assert!(p.at(EXTERN_KW));\n+    let abi = p.start();\n+    p.bump();\n+    match p.current() {\n+        STRING | RAW_STRING => p.bump(),\n+        _ => (),\n+    }\n+    abi.complete(p, ABI);\n+}"}, {"sha": "8f62a471cc9171b6ab392192696e5f94d4b400ad", "filename": "src/parser/grammar/type_params.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3b009b6d24225ad2add62fce8206918fceba3eb/src%2Fparser%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b009b6d24225ad2add62fce8206918fceba3eb/src%2Fparser%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Ftype_params.rs?ref=c3b009b6d24225ad2add62fce8206918fceba3eb", "patch": "@@ -70,6 +70,11 @@ pub(super) fn list(p: &mut Parser) {\n \n pub(super) fn where_clause(p: &mut Parser) {\n     if p.at(WHERE_KW) {\n+        let m = p.start();\n         p.bump();\n+        p.expect(IDENT);\n+        p.expect(COLON);\n+        p.expect(IDENT);\n+        m.complete(p, WHERE_CLAUSE);\n     }\n }"}, {"sha": "c798edd08a4d671ec87f8651c2bcd7b68dc2cc6f", "filename": "src/parser/grammar/types.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3b009b6d24225ad2add62fce8206918fceba3eb/src%2Fparser%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b009b6d24225ad2add62fce8206918fceba3eb/src%2Fparser%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Ftypes.rs?ref=c3b009b6d24225ad2add62fce8206918fceba3eb", "patch": "@@ -1,5 +1,14 @@\n use super::*;\n \n pub(super) fn type_ref(p: &mut Parser) {\n-    p.expect(IDENT);\n+    match p.current() {\n+        IDENT => p.bump(),\n+        L_PAREN => {\n+            p.bump();\n+            p.expect(R_PAREN);\n+        }\n+        _ => {\n+            p.error(\"expected type\");\n+        }\n+    }\n }"}, {"sha": "dc287f0f40ad0ef417d55d63fa9cf9730e08d4e5", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c3b009b6d24225ad2add62fce8206918fceba3eb/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b009b6d24225ad2add62fce8206918fceba3eb/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=c3b009b6d24225ad2add62fce8206918fceba3eb", "patch": "@@ -83,6 +83,7 @@ pub enum SyntaxKind {\n     STATIC_KW,\n     MUT_KW,\n     UNSAFE_KW,\n+    TYPE_KW,\n     AUTO_KW,\n     DEFAULT_KW,\n     UNION_KW,\n@@ -97,6 +98,7 @@ pub enum SyntaxKind {\n     CONST_ITEM,\n     TRAIT_ITEM,\n     IMPL_ITEM,\n+    TYPE_ITEM,\n     EXTERN_BLOCK,\n     ENUM_VARIANT,\n     NAMED_FIELD,\n@@ -110,6 +112,7 @@ pub enum SyntaxKind {\n     ALIAS,\n     VISIBILITY,\n     TYPE_PARAM_LIST,\n+    WHERE_CLAUSE,\n     LIFETIME_PARAM,\n     TYPE_PARAM,\n     ABI,\n@@ -203,6 +206,7 @@ impl SyntaxKind {\n             STATIC_KW => &SyntaxInfo { name: \"STATIC_KW\" },\n             MUT_KW => &SyntaxInfo { name: \"MUT_KW\" },\n             UNSAFE_KW => &SyntaxInfo { name: \"UNSAFE_KW\" },\n+            TYPE_KW => &SyntaxInfo { name: \"TYPE_KW\" },\n             AUTO_KW => &SyntaxInfo { name: \"AUTO_KW\" },\n             DEFAULT_KW => &SyntaxInfo { name: \"DEFAULT_KW\" },\n             UNION_KW => &SyntaxInfo { name: \"UNION_KW\" },\n@@ -217,6 +221,7 @@ impl SyntaxKind {\n             CONST_ITEM => &SyntaxInfo { name: \"CONST_ITEM\" },\n             TRAIT_ITEM => &SyntaxInfo { name: \"TRAIT_ITEM\" },\n             IMPL_ITEM => &SyntaxInfo { name: \"IMPL_ITEM\" },\n+            TYPE_ITEM => &SyntaxInfo { name: \"TYPE_ITEM\" },\n             EXTERN_BLOCK => &SyntaxInfo { name: \"EXTERN_BLOCK\" },\n             ENUM_VARIANT => &SyntaxInfo { name: \"ENUM_VARIANT\" },\n             NAMED_FIELD => &SyntaxInfo { name: \"NAMED_FIELD\" },\n@@ -230,6 +235,7 @@ impl SyntaxKind {\n             ALIAS => &SyntaxInfo { name: \"ALIAS\" },\n             VISIBILITY => &SyntaxInfo { name: \"VISIBILITY\" },\n             TYPE_PARAM_LIST => &SyntaxInfo { name: \"TYPE_PARAM_LIST\" },\n+            WHERE_CLAUSE => &SyntaxInfo { name: \"WHERE_CLAUSE\" },\n             LIFETIME_PARAM => &SyntaxInfo { name: \"LIFETIME_PARAM\" },\n             TYPE_PARAM => &SyntaxInfo { name: \"TYPE_PARAM\" },\n             ABI => &SyntaxInfo { name: \"ABI\" },\n@@ -268,6 +274,7 @@ pub(crate) fn ident_to_keyword(ident: &str) -> Option<SyntaxKind> {\n         \"static\" => Some(STATIC_KW),\n         \"mut\" => Some(MUT_KW),\n         \"unsafe\" => Some(UNSAFE_KW),\n+        \"type\" => Some(TYPE_KW),\n         _ => None,\n     }\n }"}, {"sha": "7a9509f3cdd9531f60029b18e54e90de74510634", "filename": "tests/data/lexer/0011_keywords.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Fdata%2Flexer%2F0011_keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Fdata%2Flexer%2F0011_keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.rs?ref=c3b009b6d24225ad2add62fce8206918fceba3eb", "patch": "@@ -1,3 +1,3 @@\n fn use struct trait enum impl true false as extern crate\n mod pub self super in where for loop while if match const\n-static mut\n+static mut type"}, {"sha": "96528952b0df5f9a7479d42bba24460ed1916f3f", "filename": "tests/data/lexer/0011_keywords.txt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Fdata%2Flexer%2F0011_keywords.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Fdata%2Flexer%2F0011_keywords.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0011_keywords.txt?ref=c3b009b6d24225ad2add62fce8206918fceba3eb", "patch": "@@ -47,4 +47,6 @@ WHITESPACE 1 \"\\n\"\n STATIC_KW 6 \"static\"\n WHITESPACE 1 \" \"\n MUT_KW 3 \"mut\"\n+WHITESPACE 1 \" \"\n+TYPE_KW 4 \"type\"\n WHITESPACE 1 \"\\n\""}, {"sha": "defd110c4922ec7a1f1720f447cb8c3177d588a9", "filename": "tests/data/parser/inline/0014_type_item_type_params.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Fdata%2Fparser%2Finline%2F0014_type_item_type_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Fdata%2Fparser%2Finline%2F0014_type_item_type_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0014_type_item_type_params.rs?ref=c3b009b6d24225ad2add62fce8206918fceba3eb", "patch": "@@ -0,0 +1 @@\n+type Result<T> = ();"}, {"sha": "b0f0f83375415aba7d67671207cb044184a25192", "filename": "tests/data/parser/inline/0014_type_item_type_params.txt", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Fdata%2Fparser%2Finline%2F0014_type_item_type_params.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Fdata%2Fparser%2Finline%2F0014_type_item_type_params.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0014_type_item_type_params.txt?ref=c3b009b6d24225ad2add62fce8206918fceba3eb", "patch": "@@ -0,0 +1,17 @@\n+FILE@[0; 21)\n+  TYPE_ITEM@[0; 21)\n+    TYPE_KW@[0; 4)\n+    WHITESPACE@[4; 5)\n+    IDENT@[5; 11) \"Result\"\n+    TYPE_PARAM_LIST@[11; 15)\n+      L_ANGLE@[11; 12)\n+      TYPE_PARAM@[12; 13)\n+        IDENT@[12; 13) \"T\"\n+      R_ANGLE@[13; 14)\n+      WHITESPACE@[14; 15)\n+    EQ@[15; 16)\n+    WHITESPACE@[16; 17)\n+    L_PAREN@[17; 18)\n+    R_PAREN@[18; 19)\n+    SEMI@[19; 20)\n+    WHITESPACE@[20; 21)"}, {"sha": "04c0344fa3641f0a3ce226d05680e2b1eb58a4e3", "filename": "tests/data/parser/inline/0015_type_item.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Fdata%2Fparser%2Finline%2F0015_type_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Fdata%2Fparser%2Finline%2F0015_type_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0015_type_item.rs?ref=c3b009b6d24225ad2add62fce8206918fceba3eb", "patch": "@@ -0,0 +1 @@\n+type Foo = Bar;"}, {"sha": "382d7ece0c5f5b9c44076fdc32f26a4d7de72906", "filename": "tests/data/parser/inline/0015_type_item.txt", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Fdata%2Fparser%2Finline%2F0015_type_item.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Fdata%2Fparser%2Finline%2F0015_type_item.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0015_type_item.txt?ref=c3b009b6d24225ad2add62fce8206918fceba3eb", "patch": "@@ -0,0 +1,11 @@\n+FILE@[0; 16)\n+  TYPE_ITEM@[0; 16)\n+    TYPE_KW@[0; 4)\n+    WHITESPACE@[4; 5)\n+    IDENT@[5; 8) \"Foo\"\n+    WHITESPACE@[8; 9)\n+    EQ@[9; 10)\n+    WHITESPACE@[10; 11)\n+    IDENT@[11; 14) \"Bar\"\n+    SEMI@[14; 15)\n+    WHITESPACE@[15; 16)"}, {"sha": "a602d07f03bdb825be188470d81dff1ba82de998", "filename": "tests/data/parser/inline/0016_type_item_where_clause.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Fdata%2Fparser%2Finline%2F0016_type_item_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Fdata%2Fparser%2Finline%2F0016_type_item_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0016_type_item_where_clause.rs?ref=c3b009b6d24225ad2add62fce8206918fceba3eb", "patch": "@@ -0,0 +1 @@\n+type Foo where Foo: Copy = ();"}, {"sha": "ddd335870619befd6d35b5a2cebbbcfc34591016", "filename": "tests/data/parser/inline/0016_type_item_where_clause.txt", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Fdata%2Fparser%2Finline%2F0016_type_item_where_clause.txt", "raw_url": "https://github.com/rust-lang/rust/raw/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Fdata%2Fparser%2Finline%2F0016_type_item_where_clause.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0016_type_item_where_clause.txt?ref=c3b009b6d24225ad2add62fce8206918fceba3eb", "patch": "@@ -0,0 +1,20 @@\n+FILE@[0; 31)\n+  TYPE_ITEM@[0; 31)\n+    TYPE_KW@[0; 4)\n+    WHITESPACE@[4; 5)\n+    IDENT@[5; 8) \"Foo\"\n+    WHERE_CLAUSE@[8; 25)\n+      WHITESPACE@[8; 9)\n+      WHERE_KW@[9; 14)\n+      WHITESPACE@[14; 15)\n+      IDENT@[15; 18) \"Foo\"\n+      COLON@[18; 19)\n+      WHITESPACE@[19; 20)\n+      IDENT@[20; 24) \"Copy\"\n+      WHITESPACE@[24; 25)\n+    EQ@[25; 26)\n+    WHITESPACE@[26; 27)\n+    L_PAREN@[27; 28)\n+    R_PAREN@[28; 29)\n+    SEMI@[29; 30)\n+    WHITESPACE@[30; 31)"}, {"sha": "d181e455b1d7ed48184688b8d28b0705015aa331", "filename": "tests/testutils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Ftestutils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b009b6d24225ad2add62fce8206918fceba3eb/tests%2Ftestutils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftestutils%2Fsrc%2Flib.rs?ref=c3b009b6d24225ad2add62fce8206918fceba3eb", "patch": "@@ -76,15 +76,14 @@ fn test_from_dir(dir: &Path) -> Vec<PathBuf> {\n fn print_difference(expected: &str, actual: &str, path: &Path) {\n     let dir = project_dir();\n     let path = path.strip_prefix(&dir).unwrap_or_else(|_| path);\n-    println!(\"\\nfile: {}\", path.display());\n     if expected.trim() == actual.trim() {\n-        println!(\"whitespace difference\");\n-        println!(\"rewriting the file\");\n+        println!(\"whitespace difference, rewriting\");\n         file::put_text(path, actual).unwrap();\n     } else {\n         let changeset = Changeset::new(actual, expected, \"\\n\");\n-        println!(\"{}\", changeset);\n+        print!(\"{}\", changeset);\n     }\n+    println!(\"file: {}\\n\", path.display());\n     panic!(\"Comparison failed\")\n }\n "}]}