{"sha": "582ad8ffc28429714b84d2dd8f01c780afb00b15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MmFkOGZmYzI4NDI5NzE0Yjg0ZDJkZDhmMDFjNzgwYWZiMDBiMTU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-28T23:54:56Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-30T05:55:49Z"}, "message": "rustdoc: only filter lines starting with '# ' from the shown code.\n\nCurrently any line starting with `#` is filtered from the output,\nincluding line like `#[deriving]`; this patch makes it so lines are only\nfiltered when followed by a space similar to the current behaviour of\nthe tutorial/manual tester.", "tree": {"sha": "1d5003b30950178e1f2ee31e7972b5cd0e4d4114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d5003b30950178e1f2ee31e7972b5cd0e4d4114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/582ad8ffc28429714b84d2dd8f01c780afb00b15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/582ad8ffc28429714b84d2dd8f01c780afb00b15", "html_url": "https://github.com/rust-lang/rust/commit/582ad8ffc28429714b84d2dd8f01c780afb00b15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/582ad8ffc28429714b84d2dd8f01c780afb00b15/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9477c49a7b4eec2c2a3e0d9a28c4129e3d1fa6ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/9477c49a7b4eec2c2a3e0d9a28c4129e3d1fa6ec", "html_url": "https://github.com/rust-lang/rust/commit/9477c49a7b4eec2c2a3e0d9a28c4129e3d1fa6ec"}], "stats": {"total": 51, "additions": 46, "deletions": 5}, "files": [{"sha": "16bcf8d6dd857cdd26328fdae189f23609edd43e", "filename": "doc/rustdoc.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/582ad8ffc28429714b84d2dd8f01c780afb00b15/doc%2Frustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/582ad8ffc28429714b84d2dd8f01c780afb00b15/doc%2Frustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frustdoc.md?ref=582ad8ffc28429714b84d2dd8f01c780afb00b15", "patch": "@@ -132,9 +132,10 @@ specifiers that can be used to dictate how a code block is tested:\n ~~~\n \n Rustdoc also supplies some extra sugar for helping with some tedious\n-documentation examples. If a line is prefixed with a `#` character, then the\n-line will not show up in the HTML documentation, but it will be used when\n-testing the code block.\n+documentation examples. If a line is prefixed with `# `, then the line\n+will not show up in the HTML documentation, but it will be used when\n+testing the code block (NB. the space after the `#` is required, so\n+that one can still write things like `#[deriving(Eq)]`).\n \n ~~~\n ```rust"}, {"sha": "f445e11aa02039ac040f7635d7140c293b1ca677", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/582ad8ffc28429714b84d2dd8f01c780afb00b15/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582ad8ffc28429714b84d2dd8f01c780afb00b15/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=582ad8ffc28429714b84d2dd8f01c780afb00b15", "patch": "@@ -101,7 +101,7 @@ pub fn render(w: &mut io::Writer, s: &str) {\n             vec::raw::buf_as_slice((*text).data, (*text).size as uint, |text| {\n                 let text = str::from_utf8(text);\n                 let mut lines = text.lines().filter(|l| {\n-                    !l.trim().starts_with(\"#\")\n+                    !l.trim().starts_with(\"# \")\n                 });\n                 let text = lines.to_owned_vec().connect(\"\\n\");\n \n@@ -169,7 +169,9 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n             vec::raw::buf_as_slice((*text).data, (*text).size as uint, |text| {\n                 let tests: &mut ::test::Collector = intrinsics::transmute(opaque);\n                 let text = str::from_utf8(text);\n-                let mut lines = text.lines().map(|l| l.trim_chars(&'#'));\n+                let mut lines = text.lines().map(|l| {\n+                            if l.starts_with(\"# \") {l.slice_from(2)} else {l}\n+                        });\n                 let text = lines.to_owned_vec().connect(\"\\n\");\n                 tests.add_test(text, ignore, shouldfail);\n             })"}, {"sha": "60e4643991039a4e1cbf463d53abadad80220e15", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/582ad8ffc28429714b84d2dd8f01c780afb00b15/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582ad8ffc28429714b84d2dd8f01c780afb00b15/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=582ad8ffc28429714b84d2dd8f01c780afb00b15", "patch": "@@ -171,6 +171,7 @@ impl Collector {\n         self.cnt += 1;\n         let libs = (*self.libs).clone();\n         let cratename = self.cratename.to_owned();\n+        debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(test::TestDescAndFn {\n             desc: test::TestDesc {\n                 name: test::DynTestName(name),"}, {"sha": "7e6f8fe105e922c3044ae1f3625c19b1509c8934", "filename": "src/test/run-make/rustdoc-hidden-line/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/582ad8ffc28429714b84d2dd8f01c780afb00b15/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/582ad8ffc28429714b84d2dd8f01c780afb00b15/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2FMakefile?ref=582ad8ffc28429714b84d2dd8f01c780afb00b15", "patch": "@@ -0,0 +1,7 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTDOC) --test foo.rs\n+\t$(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n+\tcp verify.sh $(TMPDIR)\n+\t$(call RUN,verify.sh) $(TMPDIR)"}, {"sha": "69c7683780b2fc43f9c44aa5545d36652e703f4d", "filename": "src/test/run-make/rustdoc-hidden-line/foo.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/582ad8ffc28429714b84d2dd8f01c780afb00b15/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/582ad8ffc28429714b84d2dd8f01c780afb00b15/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Ffoo.rs?ref=582ad8ffc28429714b84d2dd8f01c780afb00b15", "patch": "@@ -0,0 +1,22 @@\n+#[crate_id=\"foo#0.1\"];\n+\n+/// The '# ' lines should be removed from the output, but the #[deriving] should be\n+/// retained.\n+///\n+/// ```rust\n+/// mod to_make_deriving_work { // FIXME #4913\n+///\n+/// # #[deriving(Eq)] // invisible\n+/// # struct Foo; // invisible\n+///\n+/// #[deriving(Eq)] // Bar\n+/// struct Bar(Foo);\n+///\n+/// fn test() {\n+///     let x = Bar(Foo);\n+///     assert!(x == x); // check that the derivings worked\n+/// }\n+///\n+/// }\n+/// ```\n+pub fn foo() {}"}, {"sha": "c1d817c998d2972df80c2163bdff944b7fab5a59", "filename": "src/test/run-make/rustdoc-hidden-line/verify.sh", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/582ad8ffc28429714b84d2dd8f01c780afb00b15/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Fverify.sh", "raw_url": "https://github.com/rust-lang/rust/raw/582ad8ffc28429714b84d2dd8f01c780afb00b15/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Fverify.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Fverify.sh?ref=582ad8ffc28429714b84d2dd8f01c780afb00b15", "patch": "@@ -0,0 +1,8 @@\n+#!/bin/sh\n+\n+file=\"$1/doc/foo/fn.foo.html\"\n+\n+grep -v 'invisible' $file &&\n+grep '#\\[deriving(Eq)\\] // Bar' $file\n+\n+exit $?"}]}