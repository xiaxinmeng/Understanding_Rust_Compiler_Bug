{"sha": "fbc7398badef55d58476b5410e7e911bb872f537", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYzczOThiYWRlZjU1ZDU4NDc2YjU0MTBlN2U5MTFiYjg3MmY1Mzc=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-08-08T10:25:22Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-08-11T10:11:38Z"}, "message": "Use ItemLocalId as key for TypeckTables::cast_kinds.", "tree": {"sha": "4401b521d32fb9b315fd996b20807f49652120ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4401b521d32fb9b315fd996b20807f49652120ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbc7398badef55d58476b5410e7e911bb872f537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc7398badef55d58476b5410e7e911bb872f537", "html_url": "https://github.com/rust-lang/rust/commit/fbc7398badef55d58476b5410e7e911bb872f537", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbc7398badef55d58476b5410e7e911bb872f537/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "801dd07a950b047150aa291e461ba53a7d29489e", "url": "https://api.github.com/repos/rust-lang/rust/commits/801dd07a950b047150aa291e461ba53a7d29489e", "html_url": "https://github.com/rust-lang/rust/commit/801dd07a950b047150aa291e461ba53a7d29489e"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "7b98eb0fb71784d08d8afa71e3a379eb48d3e777", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbc7398badef55d58476b5410e7e911bb872f537/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc7398badef55d58476b5410e7e911bb872f537/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=fbc7398badef55d58476b5410e7e911bb872f537", "patch": "@@ -658,7 +658,7 @@ for ty::TypeckTables<'gcx> {\n             ich::hash_stable_itemlocalmap(hcx, hasher, closure_kinds);\n             ich::hash_stable_itemlocalmap(hcx, hasher, liberated_fn_sigs);\n             ich::hash_stable_itemlocalmap(hcx, hasher, fru_field_types);\n-            ich::hash_stable_nodemap(hcx, hasher, cast_kinds);\n+            ich::hash_stable_itemlocalmap(hcx, hasher, cast_kinds);\n \n             ich::hash_stable_hashset(hcx, hasher, used_trait_imports, |hcx, def_id| {\n                 hcx.def_path_hash(*def_id)"}, {"sha": "bf412b57007198756fe508d967ec9b06c339ede8", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fbc7398badef55d58476b5410e7e911bb872f537/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc7398badef55d58476b5410e7e911bb872f537/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=fbc7398badef55d58476b5410e7e911bb872f537", "patch": "@@ -257,7 +257,7 @@ pub struct TypeckTables<'tcx> {\n \n     /// Maps a cast expression to its kind. This is keyed on the\n     /// *from* expression of the cast, not the cast itself.\n-    pub cast_kinds: NodeMap<ty::cast::CastKind>,\n+    pub cast_kinds: ItemLocalMap<ty::cast::CastKind>,\n \n     /// Set of trait imports actually used in the method resolution.\n     /// This is used for warning unused imports.\n@@ -287,7 +287,8 @@ impl<'tcx> TypeckTables<'tcx> {\n             closure_kinds: ItemLocalMap(),\n             liberated_fn_sigs: ItemLocalMap(),\n             fru_field_types: ItemLocalMap(),\n-            cast_kinds: NodeMap(),\n+            cast_kinds: ItemLocalMap(),\n+            lints: lint::LintTable::new(),\n             used_trait_imports: DefIdSet(),\n             tainted_by_errors: false,\n             free_region_map: FreeRegionMap::new(),"}, {"sha": "05709fed0af8a5ac8b05c775cbeb53af307f9848", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fbc7398badef55d58476b5410e7e911bb872f537/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc7398badef55d58476b5410e7e911bb872f537/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=fbc7398badef55d58476b5410e7e911bb872f537", "patch": "@@ -551,7 +551,10 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         hir::ExprCast(ref source, _) => {\n             // Check to see if this cast is a \"coercion cast\", where the cast is actually done\n             // using a coercion (or is a no-op).\n-            if let Some(&TyCastKind::CoercionCast) = cx.tables().cast_kinds.get(&source.id) {\n+            cx.tables().validate_hir_id(source.hir_id);\n+            if let Some(&TyCastKind::CoercionCast) = cx.tables()\n+                                                       .cast_kinds\n+                                                       .get(&source.hir_id.local_id) {\n                 // Convert the lexpr to a vexpr.\n                 ExprKind::Use { source: source.to_ref() }\n             } else {"}, {"sha": "4a2925175c271941d000070249a0e4d6e780eb2e", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fbc7398badef55d58476b5410e7e911bb872f537/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc7398badef55d58476b5410e7e911bb872f537/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=fbc7398badef55d58476b5410e7e911bb872f537", "patch": "@@ -320,7 +320,8 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n         }\n         hir::ExprCast(ref from, _) => {\n             debug!(\"Checking const cast(id={})\", from.id);\n-            match v.tables.cast_kinds.get(&from.id) {\n+            v.tables.validate_hir_id(from.hir_id);\n+            match v.tables.cast_kinds.get(&from.hir_id.local_id) {\n                 None => span_bug!(e.span, \"no kind for cast\"),\n                 Some(&CastKind::PtrAddrCast) | Some(&CastKind::FnPtrAddrCast) => {\n                     v.promotable = false;"}, {"sha": "2be427eee1b919a80cf86b20f340edcb0732f41d", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fbc7398badef55d58476b5410e7e911bb872f537/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbc7398badef55d58476b5410e7e911bb872f537/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=fbc7398badef55d58476b5410e7e911bb872f537", "patch": "@@ -330,12 +330,16 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n         } else if self.try_coercion_cast(fcx) {\n             self.trivial_cast_lint(fcx);\n             debug!(\" -> CoercionCast\");\n-            fcx.tables.borrow_mut().cast_kinds.insert(self.expr.id, CastKind::CoercionCast);\n+            let mut tables = fcx.tables.borrow_mut();\n+            tables.validate_hir_id(self.expr.hir_id);\n+            tables.cast_kinds.insert(self.expr.hir_id.local_id, CastKind::CoercionCast);\n         } else {\n             match self.do_check(fcx) {\n                 Ok(k) => {\n                     debug!(\" -> {:?}\", k);\n-                    fcx.tables.borrow_mut().cast_kinds.insert(self.expr.id, k);\n+                    let mut tables = fcx.tables.borrow_mut();\n+                    tables.validate_hir_id(self.expr.hir_id);\n+                    tables.cast_kinds.insert(self.expr.hir_id.local_id, k);\n                 }\n                 Err(e) => self.report_cast_error(fcx, e),\n             };"}]}