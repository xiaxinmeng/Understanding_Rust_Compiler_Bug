{"sha": "135ba946a233c1d32b98943180d3eaacc9ff26f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNWJhOTQ2YTIzM2MxZDMyYjk4OTQzMTgwZDNlYWFjYzlmZjI2ZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-12T08:19:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-12T08:19:38Z"}, "message": "auto merge of #7064 : luqmana/rust/issue-7062, r=sanxiyn\n\nFixes #7062", "tree": {"sha": "856dd904585d2f83a5e9e46c0d9461e102f8db20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/856dd904585d2f83a5e9e46c0d9461e102f8db20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/135ba946a233c1d32b98943180d3eaacc9ff26f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/135ba946a233c1d32b98943180d3eaacc9ff26f2", "html_url": "https://github.com/rust-lang/rust/commit/135ba946a233c1d32b98943180d3eaacc9ff26f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/135ba946a233c1d32b98943180d3eaacc9ff26f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a52ff078623137ac451ff9ed0bfa145183bfa56", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a52ff078623137ac451ff9ed0bfa145183bfa56", "html_url": "https://github.com/rust-lang/rust/commit/4a52ff078623137ac451ff9ed0bfa145183bfa56"}, {"sha": "aa9a992f3e4134f06bd005fb3299688ac6314659", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa9a992f3e4134f06bd005fb3299688ac6314659", "html_url": "https://github.com/rust-lang/rust/commit/aa9a992f3e4134f06bd005fb3299688ac6314659"}], "stats": {"total": 76, "additions": 60, "deletions": 16}, "files": [{"sha": "af8cd758fc5bc8cd92a30975aa6ccf01b4a1512e", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/135ba946a233c1d32b98943180d3eaacc9ff26f2/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ba946a233c1d32b98943180d3eaacc9ff26f2/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=135ba946a233c1d32b98943180d3eaacc9ff26f2", "patch": "@@ -1226,11 +1226,25 @@ impl Resolver {\n                 // the same module that declared the type.\n \n                 // Bail out early if there are no static methods.\n+                let mut methods_seen = HashMap::new();\n                 let mut has_static_methods = false;\n                 for methods.each |method| {\n                     match method.explicit_self.node {\n                         sty_static => has_static_methods = true,\n-                        _ => {}\n+                        _ => {\n+                            // Make sure you can't define duplicate methods\n+                            let ident = method.ident;\n+                            let span = method.span;\n+                            let old_sp = methods_seen.find_or_insert(ident, span);\n+                            if *old_sp != span {\n+                                self.session.span_err(span,\n+                                                      fmt!(\"duplicate definition of method `%s`\",\n+                                                           *self.session.str_of(ident)));\n+                                self.session.span_note(*old_sp,\n+                                                       fmt!(\"first definition of method `%s` here\",\n+                                                            *self.session.str_of(ident)));\n+                            }\n+                        }\n                     }\n                 }\n \n@@ -1333,7 +1347,7 @@ impl Resolver {\n                 }\n \n                 // Add the names of all the methods to the trait info.\n-                let mut method_names = HashSet::new();\n+                let mut method_names = HashMap::new();\n                 for methods.each |method| {\n                     let ty_m = trait_method_to_ty_method(method);\n \n@@ -1357,13 +1371,22 @@ impl Resolver {\n                                                               ty_m.span);\n                         }\n                         _ => {\n-                            method_names.insert(ident);\n+                            // Make sure you can't define duplicate methods\n+                            let old_sp = method_names.find_or_insert(ident, ty_m.span);\n+                            if *old_sp != ty_m.span {\n+                                self.session.span_err(ty_m.span,\n+                                                      fmt!(\"duplicate definition of method `%s`\",\n+                                                           *self.session.str_of(ident)));\n+                                self.session.span_note(*old_sp,\n+                                                       fmt!(\"first definition of method `%s` here\",\n+                                                            *self.session.str_of(ident)));\n+                            }\n                         }\n                     }\n                 }\n \n                 let def_id = local_def(item.id);\n-                for method_names.each |name| {\n+                for method_names.each |name, _| {\n                     if !self.method_map.contains_key(name) {\n                         self.method_map.insert(*name, HashSet::new());\n                     }"}, {"sha": "2c3cdd2b684aba9c7b810ed20dbb93fc223b17c6", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/135ba946a233c1d32b98943180d3eaacc9ff26f2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ba946a233c1d32b98943180d3eaacc9ff26f2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=135ba946a233c1d32b98943180d3eaacc9ff26f2", "patch": "@@ -722,11 +722,6 @@ impl FnCtxt {\n         }\n     }\n \n-    pub fn expr_to_str(&self, expr: @ast::expr) -> ~str {\n-        fmt!(\"expr(%?:%s)\", expr.id,\n-             pprust::expr_to_str(expr, self.tcx().sess.intr()))\n-    }\n-\n     pub fn block_region(&self) -> ty::Region {\n         ty::re_scope(self.region_lb)\n     }"}, {"sha": "8dd80be4f9c4cec2b08ddcb8c2498a0600d265c6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/135ba946a233c1d32b98943180d3eaacc9ff26f2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ba946a233c1d32b98943180d3eaacc9ff26f2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=135ba946a233c1d32b98943180d3eaacc9ff26f2", "patch": "@@ -1063,13 +1063,6 @@ impl Parser {\n         }\n     }\n \n-    pub fn token_is_lifetime(&self, tok: &token::Token) -> bool {\n-        match *tok {\n-            token::LIFETIME(_) => true,\n-            _ => false\n-        }\n-    }\n-\n     /// Parses a single lifetime\n     // matches lifetime = ( LIFETIME ) | ( IDENT / )\n     pub fn parse_lifetime(&self) -> ast::Lifetime {"}, {"sha": "ec766e5ce9b9380f9c14cb8992df51a8df8a28d0", "filename": "src/test/compile-fail/impl-duplicate-methods.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/135ba946a233c1d32b98943180d3eaacc9ff26f2/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ba946a233c1d32b98943180d3eaacc9ff26f2/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-duplicate-methods.rs?ref=135ba946a233c1d32b98943180d3eaacc9ff26f2", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo;\n+impl Foo {\n+    fn orange(&self){}\n+    fn orange(&self){}   //~ ERROR error: duplicate definition of method `orange`\n+}\n+\n+fn main() {}"}, {"sha": "e2ba5267eba8eb64c9371e202c3198059c12cceb", "filename": "src/test/compile-fail/trait-duplicate-methods.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/135ba946a233c1d32b98943180d3eaacc9ff26f2/src%2Ftest%2Fcompile-fail%2Ftrait-duplicate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/135ba946a233c1d32b98943180d3eaacc9ff26f2/src%2Ftest%2Fcompile-fail%2Ftrait-duplicate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-duplicate-methods.rs?ref=135ba946a233c1d32b98943180d3eaacc9ff26f2", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn orange(&self);\n+    fn orange(&self);   //~ ERROR error: duplicate definition of method `orange`\n+}\n+\n+fn main() {}"}]}