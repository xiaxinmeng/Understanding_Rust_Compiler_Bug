{"sha": "b9d94d73a2682be4418cb5de4f77cbd8db7b6901", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZDk0ZDczYTI2ODJiZTQ0MThjYjVkZTRmNzdjYmQ4ZGI3YjY5MDE=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-02-19T03:54:23Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-02-19T03:56:27Z"}, "message": "Use proper range for hover on macro arguments", "tree": {"sha": "d40f659ebe5b3835c5475c26f5a1f5f6e23ad0ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d40f659ebe5b3835c5475c26f5a1f5f6e23ad0ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9d94d73a2682be4418cb5de4f77cbd8db7b6901", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d94d73a2682be4418cb5de4f77cbd8db7b6901", "html_url": "https://github.com/rust-lang/rust/commit/b9d94d73a2682be4418cb5de4f77cbd8db7b6901", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9d94d73a2682be4418cb5de4f77cbd8db7b6901/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20252efb32bfdfe7392934a95a6c6d6b583d10e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/20252efb32bfdfe7392934a95a6c6d6b583d10e7", "html_url": "https://github.com/rust-lang/rust/commit/20252efb32bfdfe7392934a95a6c6d6b583d10e7"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "0bbaa08555678df4f44664223d5a7e2175fdd7e7", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b9d94d73a2682be4418cb5de4f77cbd8db7b6901/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9d94d73a2682be4418cb5de4f77cbd8db7b6901/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=b9d94d73a2682be4418cb5de4f77cbd8db7b6901", "patch": "@@ -13,7 +13,7 @@ use ra_syntax::{\n \n use crate::{\n     display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel},\n-    expand::descend_into_macros,\n+    expand::{descend_into_macros, original_range},\n     references::{classify_name, classify_name_ref, NameKind, NameKind::*},\n     FilePosition, FileRange, RangeInfo,\n };\n@@ -148,17 +148,18 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     let mut res = HoverResult::new();\n \n     let mut sb = SourceBinder::new(db);\n-    if let Some((range, name_kind)) = match_ast! {\n+    if let Some((node, name_kind)) = match_ast! {\n         match (token.value.parent()) {\n             ast::NameRef(name_ref) => {\n-                classify_name_ref(&mut sb, token.with_value(&name_ref)).map(|d| (name_ref.syntax().text_range(), d.kind))\n+                classify_name_ref(&mut sb, token.with_value(&name_ref)).map(|d| (name_ref.syntax().clone(), d.kind))\n             },\n             ast::Name(name) => {\n-                classify_name(&mut sb, token.with_value(&name)).map(|d| (name.syntax().text_range(), d.kind))\n+                classify_name(&mut sb, token.with_value(&name)).map(|d| (name.syntax().clone(), d.kind))\n             },\n             _ => None,\n         }\n     } {\n+        let range = original_range(db, token.with_value(&node)).range;\n         res.extend(hover_text_from_name_kind(db, name_kind));\n \n         if !res.is_empty() {\n@@ -171,8 +172,7 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         .ancestors()\n         .find(|n| ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some())?;\n \n-    // The following logic will not work if token is coming from a macro\n-    let frange = FileRange { file_id: position.file_id, range: node.text_range() };\n+    let frange = original_range(db, token.with_value(&node));\n     res.extend(type_of(db, frange).map(rust_code_markup));\n     if res.is_empty() {\n         return None;\n@@ -220,6 +220,7 @@ mod tests {\n     use crate::mock_analysis::{\n         analysis_and_position, single_file_with_position, single_file_with_range,\n     };\n+    use ra_db::FileLoader;\n     use ra_syntax::TextRange;\n \n     fn trim_markup(s: &str) -> &str {\n@@ -230,7 +231,7 @@ mod tests {\n         s.map(trim_markup)\n     }\n \n-    fn check_hover_result(fixture: &str, expected: &[&str]) {\n+    fn check_hover_result(fixture: &str, expected: &[&str]) -> String {\n         let (analysis, position) = analysis_and_position(fixture);\n         let hover = analysis.hover(position).unwrap().unwrap();\n         let mut results = Vec::from(hover.info.results());\n@@ -243,6 +244,9 @@ mod tests {\n         }\n \n         assert_eq!(hover.info.len(), expected.len());\n+\n+        let content = analysis.db.file_text(position.file_id);\n+        content[hover.range].to_string()\n     }\n \n     #[test]\n@@ -711,7 +715,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n \n     #[test]\n     fn test_hover_through_macro() {\n-        check_hover_result(\n+        let hover_on = check_hover_result(\n             \"\n             //- /lib.rs\n             macro_rules! id {\n@@ -726,11 +730,13 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             \",\n             &[\"fn foo()\"],\n         );\n+\n+        assert_eq!(hover_on, \"foo\")\n     }\n \n     #[test]\n     fn test_hover_through_expr_in_macro() {\n-        check_hover_result(\n+        let hover_on = check_hover_result(\n             \"\n             //- /lib.rs\n             macro_rules! id {\n@@ -742,5 +748,7 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             \",\n             &[\"u32\"],\n         );\n+\n+        assert_eq!(hover_on, \"bar\")\n     }\n }"}]}