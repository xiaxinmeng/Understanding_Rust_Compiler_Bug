{"sha": "4c2f3ff44263b813d4211150613edff0c5c92c30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMmYzZmY0NDI2M2I4MTNkNDIxMTE1MDYxM2VkZmYwYzVjOTJjMzA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-24T15:01:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-09-06T15:18:10Z"}, "message": "remove the \"misc-items\" from meta-data\n\nIt was duplicating information available elsewhere.", "tree": {"sha": "35f39866228ba4189e86546f196702e0eb86dc64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35f39866228ba4189e86546f196702e0eb86dc64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c2f3ff44263b813d4211150613edff0c5c92c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2f3ff44263b813d4211150613edff0c5c92c30", "html_url": "https://github.com/rust-lang/rust/commit/4c2f3ff44263b813d4211150613edff0c5c92c30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c2f3ff44263b813d4211150613edff0c5c92c30/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a84449169b3c882e101a68eb156800fe8ff24c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a84449169b3c882e101a68eb156800fe8ff24c3", "html_url": "https://github.com/rust-lang/rust/commit/2a84449169b3c882e101a68eb156800fe8ff24c3"}], "stats": {"total": 50, "additions": 9, "deletions": 41}, "files": [{"sha": "29b9cc0d1d923a6b0eb6af5816e71ba3b7823344", "filename": "src/librustc_metadata/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c2f3ff44263b813d4211150613edff0c5c92c30/src%2Flibrustc_metadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2f3ff44263b813d4211150613edff0c5c92c30/src%2Flibrustc_metadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcommon.rs?ref=4c2f3ff44263b813d4211150613edff0c5c92c30", "patch": "@@ -149,9 +149,9 @@ pub const tag_items_data_item_visibility: usize = 0x78;\n pub const tag_items_data_item_inherent_impl: usize = 0x79;\n // GAP 0x7a\n pub const tag_mod_child: usize = 0x7b;\n-pub const tag_misc_info: usize = 0x108; // top-level only\n-pub const tag_misc_info_crate_items: usize = 0x7c;\n+// GAP 0x7c\n \n+// GAP 0x108\n pub const tag_impls: usize = 0x109; // top-level only\n pub const tag_impls_trait: usize = 0x7d;\n pub const tag_impls_trait_impl: usize = 0x7e;"}, {"sha": "d75d5a3b35443a24c384d6b33061e5954edcb3b6", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c2f3ff44263b813d4211150613edff0c5c92c30/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2f3ff44263b813d4211150613edff0c5c92c30/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=4c2f3ff44263b813d4211150613edff0c5c92c30", "patch": "@@ -23,6 +23,7 @@ use index;\n use tls_context;\n use tydecode::TyDecoder;\n \n+use rustc::hir::def_id::CRATE_DEF_INDEX;\n use rustc::hir::svh::Svh;\n use rustc::hir::map as hir_map;\n use rustc::hir::map::DefKey;\n@@ -732,15 +733,7 @@ pub fn each_top_level_item_of_crate<F, G>(cdata: Cmd, get_crate_data: G, callbac\n     where F: FnMut(DefLike, ast::Name, ty::Visibility),\n           G: FnMut(ast::CrateNum) -> Rc<CrateMetadata>,\n {\n-    let root_doc = rbml::Doc::new(cdata.data());\n-    let misc_info_doc = reader::get_doc(root_doc, tag_misc_info);\n-    let crate_items_doc = reader::get_doc(misc_info_doc,\n-                                          tag_misc_info_crate_items);\n-\n-    each_child_of_item_or_crate(cdata,\n-                                crate_items_doc,\n-                                get_crate_data,\n-                                callback)\n+    each_child_of_item(cdata, CRATE_DEF_INDEX, get_crate_data, callback)\n }\n \n pub fn get_item_name(cdata: Cmd, id: DefIndex) -> ast::Name {"}, {"sha": "603b7a483b90c5cfbd1cf4b3a161bb967a810f49", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 30, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4c2f3ff44263b813d4211150613edff0c5c92c30/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c2f3ff44263b813d4211150613edff0c5c92c30/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=4c2f3ff44263b813d4211150613edff0c5c92c30", "patch": "@@ -1693,30 +1693,6 @@ fn encode_impls<'a>(ecx: &'a EncodeContext,\n     rbml_w.end_tag();\n }\n \n-fn encode_misc_info(ecx: &EncodeContext,\n-                    krate: &hir::Crate,\n-                    rbml_w: &mut Encoder) {\n-    rbml_w.start_tag(tag_misc_info);\n-    rbml_w.start_tag(tag_misc_info_crate_items);\n-    for item_id in &krate.module.item_ids {\n-        rbml_w.wr_tagged_u64(tag_mod_child,\n-                             def_to_u64(ecx.tcx.map.local_def_id(item_id.id)));\n-\n-        let item = ecx.tcx.map.expect_item(item_id.id);\n-        each_auxiliary_node_id(item, |auxiliary_node_id| {\n-            rbml_w.wr_tagged_u64(tag_mod_child,\n-                                 def_to_u64(ecx.tcx.map.local_def_id(auxiliary_node_id)));\n-            true\n-        });\n-    }\n-\n-    // Encode reexports for the root module.\n-    encode_reexports(ecx, rbml_w, 0);\n-\n-    rbml_w.end_tag();\n-    rbml_w.end_tag();\n-}\n-\n // Encodes all reachable symbols in this crate into the metadata.\n //\n // This pass is seeded off the reachability list calculated in the\n@@ -1861,7 +1837,7 @@ fn encode_metadata_inner(rbml_w: &mut Encoder,\n         codemap_bytes: u64,\n         macro_defs_bytes: u64,\n         impl_bytes: u64,\n-        misc_bytes: u64,\n+        reachable_bytes: u64,\n         item_bytes: u64,\n         index_bytes: u64,\n         xref_bytes: u64,\n@@ -1877,7 +1853,7 @@ fn encode_metadata_inner(rbml_w: &mut Encoder,\n         codemap_bytes: 0,\n         macro_defs_bytes: 0,\n         impl_bytes: 0,\n-        misc_bytes: 0,\n+        reachable_bytes: 0,\n         item_bytes: 0,\n         index_bytes: 0,\n         xref_bytes: 0,\n@@ -1931,11 +1907,10 @@ fn encode_metadata_inner(rbml_w: &mut Encoder,\n     encode_impls(&ecx, krate, rbml_w);\n     stats.impl_bytes = rbml_w.writer.seek(SeekFrom::Current(0)).unwrap() - i;\n \n-    // Encode miscellaneous info.\n+    // Encode reachability info.\n     i = rbml_w.writer.seek(SeekFrom::Current(0)).unwrap();\n-    encode_misc_info(&ecx, krate, rbml_w);\n     encode_reachable(&ecx, rbml_w);\n-    stats.misc_bytes = rbml_w.writer.seek(SeekFrom::Current(0)).unwrap() - i;\n+    stats.reachable_bytes = rbml_w.writer.seek(SeekFrom::Current(0)).unwrap() - i;\n \n     // Encode and index the items.\n     rbml_w.start_tag(tag_items);\n@@ -1972,7 +1947,7 @@ fn encode_metadata_inner(rbml_w: &mut Encoder,\n         println!(\"         codemap bytes: {}\", stats.codemap_bytes);\n         println!(\"       macro def bytes: {}\", stats.macro_defs_bytes);\n         println!(\"            impl bytes: {}\", stats.impl_bytes);\n-        println!(\"            misc bytes: {}\", stats.misc_bytes);\n+        println!(\"       reachable bytes: {}\", stats.reachable_bytes);\n         println!(\"            item bytes: {}\", stats.item_bytes);\n         println!(\"           index bytes: {}\", stats.index_bytes);\n         println!(\"            xref bytes: {}\", stats.xref_bytes);"}]}