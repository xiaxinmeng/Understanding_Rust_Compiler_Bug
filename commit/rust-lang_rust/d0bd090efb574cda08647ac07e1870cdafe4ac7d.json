{"sha": "d0bd090efb574cda08647ac07e1870cdafe4ac7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYmQwOTBlZmI1NzRjZGEwODY0N2FjMDdlMTg3MGNkYWZlNGFjN2Q=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-23T18:54:57Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-26T22:24:17Z"}, "message": "Consider all whitespace when preparing span", "tree": {"sha": "e4188458fa2636a08f7364eb1b437e4a0fb8b7c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4188458fa2636a08f7364eb1b437e4a0fb8b7c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0bd090efb574cda08647ac07e1870cdafe4ac7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0bd090efb574cda08647ac07e1870cdafe4ac7d", "html_url": "https://github.com/rust-lang/rust/commit/d0bd090efb574cda08647ac07e1870cdafe4ac7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0bd090efb574cda08647ac07e1870cdafe4ac7d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8f77e12fca0072d08745feb8c32900c5a46967a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f77e12fca0072d08745feb8c32900c5a46967a", "html_url": "https://github.com/rust-lang/rust/commit/a8f77e12fca0072d08745feb8c32900c5a46967a"}], "stats": {"total": 104, "additions": 73, "deletions": 31}, "files": [{"sha": "7bcd8a185453b11004648411493a1bf70febb5dd", "filename": "src/librustc_borrowck/borrowck/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0bd090efb574cda08647ac07e1870cdafe4ac7d/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bd090efb574cda08647ac07e1870cdafe4ac7d/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Funused.rs?ref=d0bd090efb574cda08647ac07e1870cdafe4ac7d", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'tcx> UnusedMutCx<'a, 'tcx> {\n                 continue\n             }\n \n-            let mut_span = tcx.sess.codemap().span_through_char(ids[0].2, ' ');\n+            let mut_span = tcx.sess.codemap().span_until_non_whitespace(ids[0].2);\n \n             // Ok, every name wasn't used mutably, so issue a warning that this\n             // didn't need to be mutable."}, {"sha": "c9b524a0c8973fbdcbef4bd4d979eb2b9f971d3c", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d0bd090efb574cda08647ac07e1870cdafe4ac7d/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bd090efb574cda08647ac07e1870cdafe4ac7d/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=d0bd090efb574cda08647ac07e1870cdafe4ac7d", "patch": "@@ -592,8 +592,32 @@ impl CodeMap {\n         }\n     }\n \n-    /// Given a `Span`, try to get a shorter span ending just after the first\n-    /// occurrence of `char` `c`.\n+    /// Given a `Span`, get a new `Span` covering the first token and all its trailing whitespace or\n+    /// the original `Span`.\n+    ///\n+    /// If `sp` points to `\"let mut x\"`, then a span pointing at `\"let \"` will be returned.\n+    pub fn span_until_non_whitespace(&self, sp: Span) -> Span {\n+        if let Ok(snippet) = self.span_to_snippet(sp) {\n+            let mut offset = 0;\n+            let mut pos = 0;\n+            // get the bytes width of all the non-whitespace characters\n+            for (i, c) in snippet.chars().take_while(|c| !c.is_whitespace()).enumerate() {\n+                offset += c.len_utf8();\n+                pos = i + 1;\n+            }\n+            // get the bytes width of all the whitespace characters after that\n+            for c in snippet[pos..].chars().take_while(|c| c.is_whitespace()) {\n+                offset += c.len_utf8();\n+            }\n+            if offset != 0 {\n+                return sp.with_hi(BytePos(sp.lo().0 + offset as u32));\n+            }\n+        }\n+        sp\n+    }\n+\n+    /// Given a `Span`, try to get a shorter span ending just after the first occurrence of `char`\n+    /// `c`.\n     pub fn span_through_char(&self, sp: Span, c: char) -> Span {\n         if let Ok(snippet) = self.span_to_snippet(sp) {\n             if let Some(offset) = snippet.find(c) {"}, {"sha": "e35675eacd835cc88f1d7f7e7e25165ec751f7c0", "filename": "src/test/ui/lint/suggestions.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d0bd090efb574cda08647ac07e1870cdafe4ac7d/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0bd090efb574cda08647ac07e1870cdafe4ac7d/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs?ref=d0bd090efb574cda08647ac07e1870cdafe4ac7d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-tab\n+\n #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n #![feature(no_debug)]\n \n@@ -46,11 +48,15 @@ fn main() {\n         let mut a = (1); // should suggest no `mut`, no parens\n         //~^ WARN does not need to be mutable\n         //~| WARN unnecessary parentheses\n+        // the line after `mut` has a `\\t` at the beginning, this is on purpose\n+        let mut\n+\t        b = 1;\n+        //~^^ WARN does not need to be mutable\n         let d = Equinox { warp_factor: 9.975 };\n         match d {\n             Equinox { warp_factor: warp_factor } => {} // should suggest shorthand\n             //~^ WARN this pattern is redundant\n         }\n-        println!(\"{}\", a);\n+        println!(\"{} {}\", a, b);\n     }\n }"}, {"sha": "90d6bd312e419505974bf7d8db881e1f323c87f4", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 39, "deletions": 27, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d0bd090efb574cda08647ac07e1870cdafe4ac7d/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d0bd090efb574cda08647ac07e1870cdafe4ac7d/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=d0bd090efb574cda08647ac07e1870cdafe4ac7d", "patch": "@@ -1,101 +1,113 @@\n warning: unnecessary parentheses around assigned value\n-  --> $DIR/suggestions.rs:46:21\n+  --> $DIR/suggestions.rs:48:21\n    |\n-46 |         let mut a = (1); // should suggest no `mut`, no parens\n+48 |         let mut a = (1); // should suggest no `mut`, no parens\n    |                     ^^^ help: remove these parentheses\n    |\n note: lint level defined here\n-  --> $DIR/suggestions.rs:11:21\n+  --> $DIR/suggestions.rs:13:21\n    |\n-11 | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n+13 | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n    |                     ^^^^^^^^^^^^^\n \n warning: use of deprecated attribute `no_debug`: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand. See https://github.com/rust-lang/rust/issues/29721\n-  --> $DIR/suggestions.rs:41:1\n+  --> $DIR/suggestions.rs:43:1\n    |\n-41 | #[no_debug] // should suggest removal of deprecated attribute\n+43 | #[no_debug] // should suggest removal of deprecated attribute\n    | ^^^^^^^^^^^ help: remove this attribute\n    |\n    = note: #[warn(deprecated)] on by default\n \n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:46:13\n+  --> $DIR/suggestions.rs:48:13\n    |\n-46 |         let mut a = (1); // should suggest no `mut`, no parens\n+48 |         let mut a = (1); // should suggest no `mut`, no parens\n    |             ----^\n    |             |\n    |             help: remove this `mut`\n    |\n note: lint level defined here\n-  --> $DIR/suggestions.rs:11:9\n+  --> $DIR/suggestions.rs:13:9\n    |\n-11 | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n+13 | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n    |         ^^^^^^^^^^\n \n+warning: variable does not need to be mutable\n+  --> $DIR/suggestions.rs:52:13\n+   |\n+52 |            let mut\n+   |   _____________^\n+   |  |_____________|\n+   | ||\n+53 | ||             b = 1;\n+   | ||____________-^\n+   |  |____________|\n+   |               help: remove this `mut`\n+\n warning: static is marked #[no_mangle], but not exported\n-  --> $DIR/suggestions.rs:14:14\n+  --> $DIR/suggestions.rs:16:14\n    |\n-14 | #[no_mangle] static SHENZHOU: usize = 1; // should suggest `pub`\n+16 | #[no_mangle] static SHENZHOU: usize = 1; // should suggest `pub`\n    |              -^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              help: try making it public: `pub`\n    |\n    = note: #[warn(private_no_mangle_statics)] on by default\n \n error: const items should never be #[no_mangle]\n-  --> $DIR/suggestions.rs:16:14\n+  --> $DIR/suggestions.rs:18:14\n    |\n-16 | #[no_mangle] const DISCOVERY: usize = 1; // should suggest `pub static` rather than `const`\n+18 | #[no_mangle] const DISCOVERY: usize = 1; // should suggest `pub static` rather than `const`\n    |              -----^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              help: try a static value: `pub static`\n    |\n    = note: #[deny(no_mangle_const_items)] on by default\n \n warning: functions generic over types must be mangled\n-  --> $DIR/suggestions.rs:20:1\n+  --> $DIR/suggestions.rs:22:1\n    |\n-19 | #[no_mangle] // should suggest removal (generics can't be no-mangle)\n+21 | #[no_mangle] // should suggest removal (generics can't be no-mangle)\n    | ------------ help: remove this attribute\n-20 | pub fn defiant<T>(_t: T) {}\n+22 | pub fn defiant<T>(_t: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(no_mangle_generic_items)] on by default\n \n warning: function is marked #[no_mangle], but not exported\n-  --> $DIR/suggestions.rs:24:1\n+  --> $DIR/suggestions.rs:26:1\n    |\n-24 | fn rio_grande() {} // should suggest `pub`\n+26 | fn rio_grande() {} // should suggest `pub`\n    | -^^^^^^^^^^^^^^^^^\n    | |\n    | help: try making it public: `pub`\n    |\n    = note: #[warn(private_no_mangle_fns)] on by default\n \n warning: static is marked #[no_mangle], but not exported\n-  --> $DIR/suggestions.rs:31:18\n+  --> $DIR/suggestions.rs:33:18\n    |\n-31 |     #[no_mangle] pub static DAUNTLESS: bool = true;\n+33 |     #[no_mangle] pub static DAUNTLESS: bool = true;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: function is marked #[no_mangle], but not exported\n-  --> $DIR/suggestions.rs:33:18\n+  --> $DIR/suggestions.rs:35:18\n    |\n-33 |     #[no_mangle] pub fn val_jean() {}\n+35 |     #[no_mangle] pub fn val_jean() {}\n    |                  ^^^^^^^^^^^^^^^^^^^^\n \n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/suggestions.rs:44:5\n+  --> $DIR/suggestions.rs:46:5\n    |\n-44 |     while true { // should suggest `loop`\n+46 |     while true { // should suggest `loop`\n    |     ^^^^^^^^^^ help: use `loop`\n    |\n    = note: #[warn(while_true)] on by default\n \n warning: the `warp_factor:` in this pattern is redundant\n-  --> $DIR/suggestions.rs:51:23\n+  --> $DIR/suggestions.rs:57:23\n    |\n-51 |             Equinox { warp_factor: warp_factor } => {} // should suggest shorthand\n+57 |             Equinox { warp_factor: warp_factor } => {} // should suggest shorthand\n    |                       ------------^^^^^^^^^^^^\n    |                       |\n    |                       help: remove this"}]}