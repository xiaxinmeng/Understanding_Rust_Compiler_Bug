{"sha": "8175a1f905d1bf8ffd33c1be48476161d30b885e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNzVhMWY5MDVkMWJmOGZmZDMzYzFiZTQ4NDc2MTYxZDMwYjg4NWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-09T12:26:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-09T12:26:18Z"}, "message": "clarify that debug_assert does not completely omits the code\n\nTIL that debug_assert is implemented using `if cfg!(debug_assertions)`\nrather than `#[cfg(debug_assertions)]`. This means one can not use API\ngated with `#[cfg(debug_assertions)]` in `debug_assert` family of\nmacros.", "tree": {"sha": "155e4687acd3bf9a4ba65cf921356e39aba782f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/155e4687acd3bf9a4ba65cf921356e39aba782f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8175a1f905d1bf8ffd33c1be48476161d30b885e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8175a1f905d1bf8ffd33c1be48476161d30b885e", "html_url": "https://github.com/rust-lang/rust/commit/8175a1f905d1bf8ffd33c1be48476161d30b885e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8175a1f905d1bf8ffd33c1be48476161d30b885e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88953840ac9fc3e7f90af537b8b4177b76ae0d87", "url": "https://api.github.com/repos/rust-lang/rust/commits/88953840ac9fc3e7f90af537b8b4177b76ae0d87", "html_url": "https://github.com/rust-lang/rust/commit/88953840ac9fc3e7f90af537b8b4177b76ae0d87"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "da28afd97c3fd679514956ed66b1e64af6c71dc7", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8175a1f905d1bf8ffd33c1be48476161d30b885e/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8175a1f905d1bf8ffd33c1be48476161d30b885e/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=8175a1f905d1bf8ffd33c1be48476161d30b885e", "patch": "@@ -145,11 +145,11 @@ macro_rules! assert_ne {\n /// # Uses\n ///\n /// Unlike [`assert!`], `debug_assert!` statements are only enabled in non\n-/// optimized builds by default. An optimized build will omit all\n+/// optimized builds by default. An optimized build will not execute\n /// `debug_assert!` statements unless `-C debug-assertions` is passed to the\n /// compiler. This makes `debug_assert!` useful for checks that are too\n /// expensive to be present in a release build but may be helpful during\n-/// development.\n+/// development. `debug_assert!` statements are always type checked.\n ///\n /// An unchecked assertion allows a program in an inconsistent state to keep\n /// running, which might have unexpected consequences but does not introduce\n@@ -190,11 +190,11 @@ macro_rules! debug_assert {\n /// debug representations.\n ///\n /// Unlike [`assert_eq!`], `debug_assert_eq!` statements are only enabled in non\n-/// optimized builds by default. An optimized build will omit all\n+/// optimized builds by default. An optimized build will not execute\n /// `debug_assert_eq!` statements unless `-C debug-assertions` is passed to the\n /// compiler. This makes `debug_assert_eq!` useful for checks that are too\n /// expensive to be present in a release build but may be helpful during\n-/// development.\n+/// development. `debug_assert_eq!` statements are always type checked.\n ///\n /// [`assert_eq!`]: ../std/macro.assert_eq.html\n ///\n@@ -217,11 +217,11 @@ macro_rules! debug_assert_eq {\n /// debug representations.\n ///\n /// Unlike [`assert_ne!`], `debug_assert_ne!` statements are only enabled in non\n-/// optimized builds by default. An optimized build will omit all\n+/// optimized builds by default. An optimized build will not execute\n /// `debug_assert_ne!` statements unless `-C debug-assertions` is passed to the\n /// compiler. This makes `debug_assert_ne!` useful for checks that are too\n /// expensive to be present in a release build but may be helpful during\n-/// development.\n+/// development. `debug_assert_ne!` statements are always type checked.\n ///\n /// [`assert_ne!`]: ../std/macro.assert_ne.html\n ///"}]}