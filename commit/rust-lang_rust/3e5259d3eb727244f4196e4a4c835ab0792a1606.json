{"sha": "3e5259d3eb727244f4196e4a4c835ab0792a1606", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNTI1OWQzZWI3MjcyNDRmNDE5NmU0YTRjODM1YWIwNzkyYTE2MDY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-02-10T19:50:16Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-14T13:10:56Z"}, "message": "Move IntercrateAmbiguityCause back to rustc::traits::select.", "tree": {"sha": "64bb0b35489c30e6faefa8dafd74a7d64357f9a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64bb0b35489c30e6faefa8dafd74a7d64357f9a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e5259d3eb727244f4196e4a4c835ab0792a1606", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e5259d3eb727244f4196e4a4c835ab0792a1606", "html_url": "https://github.com/rust-lang/rust/commit/3e5259d3eb727244f4196e4a4c835ab0792a1606", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e5259d3eb727244f4196e4a4c835ab0792a1606/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ed3453af9db9c516e564e25ba9ee28056d48103", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ed3453af9db9c516e564e25ba9ee28056d48103", "html_url": "https://github.com/rust-lang/rust/commit/5ed3453af9db9c516e564e25ba9ee28056d48103"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "d316d7659e222b1ef4c3fdb22a2ef92d4d796409", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3e5259d3eb727244f4196e4a4c835ab0792a1606/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5259d3eb727244f4196e4a4c835ab0792a1606/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=3e5259d3eb727244f4196e4a4c835ab0792a1606", "patch": "@@ -288,3 +288,44 @@ impl<T: Clone> WithDepNode<T> {\n         self.cached_value.clone()\n     }\n }\n+\n+#[derive(Clone, Debug)]\n+pub enum IntercrateAmbiguityCause {\n+    DownstreamCrate { trait_desc: String, self_desc: Option<String> },\n+    UpstreamCrateUpdate { trait_desc: String, self_desc: Option<String> },\n+    ReservationImpl { message: String },\n+}\n+\n+impl IntercrateAmbiguityCause {\n+    /// Emits notes when the overlap is caused by complex intercrate ambiguities.\n+    /// See #23980 for details.\n+    pub fn add_intercrate_ambiguity_hint(&self, err: &mut rustc_errors::DiagnosticBuilder<'_>) {\n+        err.note(&self.intercrate_ambiguity_hint());\n+    }\n+\n+    pub fn intercrate_ambiguity_hint(&self) -> String {\n+        match self {\n+            &IntercrateAmbiguityCause::DownstreamCrate { ref trait_desc, ref self_desc } => {\n+                let self_desc = if let &Some(ref ty) = self_desc {\n+                    format!(\" for type `{}`\", ty)\n+                } else {\n+                    String::new()\n+                };\n+                format!(\"downstream crates may implement trait `{}`{}\", trait_desc, self_desc)\n+            }\n+            &IntercrateAmbiguityCause::UpstreamCrateUpdate { ref trait_desc, ref self_desc } => {\n+                let self_desc = if let &Some(ref ty) = self_desc {\n+                    format!(\" for type `{}`\", ty)\n+                } else {\n+                    String::new()\n+                };\n+                format!(\n+                    \"upstream crates may add a new impl of trait `{}`{} \\\n+                     in future versions\",\n+                    trait_desc, self_desc\n+                )\n+            }\n+            &IntercrateAmbiguityCause::ReservationImpl { ref message } => message.clone(),\n+        }\n+    }\n+}"}, {"sha": "5c805731f25645bca166caa25047d87744387331", "filename": "src/librustc_infer/traits/select.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3e5259d3eb727244f4196e4a4c835ab0792a1606/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e5259d3eb727244f4196e4a4c835ab0792a1606/src%2Flibrustc_infer%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fselect.rs?ref=3e5259d3eb727244f4196e4a4c835ab0792a1606", "patch": "@@ -95,47 +95,6 @@ pub struct SelectionContext<'cx, 'tcx> {\n     query_mode: TraitQueryMode,\n }\n \n-#[derive(Clone, Debug)]\n-pub enum IntercrateAmbiguityCause {\n-    DownstreamCrate { trait_desc: String, self_desc: Option<String> },\n-    UpstreamCrateUpdate { trait_desc: String, self_desc: Option<String> },\n-    ReservationImpl { message: String },\n-}\n-\n-impl IntercrateAmbiguityCause {\n-    /// Emits notes when the overlap is caused by complex intercrate ambiguities.\n-    /// See #23980 for details.\n-    pub fn add_intercrate_ambiguity_hint(&self, err: &mut rustc_errors::DiagnosticBuilder<'_>) {\n-        err.note(&self.intercrate_ambiguity_hint());\n-    }\n-\n-    pub fn intercrate_ambiguity_hint(&self) -> String {\n-        match self {\n-            &IntercrateAmbiguityCause::DownstreamCrate { ref trait_desc, ref self_desc } => {\n-                let self_desc = if let &Some(ref ty) = self_desc {\n-                    format!(\" for type `{}`\", ty)\n-                } else {\n-                    String::new()\n-                };\n-                format!(\"downstream crates may implement trait `{}`{}\", trait_desc, self_desc)\n-            }\n-            &IntercrateAmbiguityCause::UpstreamCrateUpdate { ref trait_desc, ref self_desc } => {\n-                let self_desc = if let &Some(ref ty) = self_desc {\n-                    format!(\" for type `{}`\", ty)\n-                } else {\n-                    String::new()\n-                };\n-                format!(\n-                    \"upstream crates may add a new impl of trait `{}`{} \\\n-                     in future versions\",\n-                    trait_desc, self_desc\n-                )\n-            }\n-            &IntercrateAmbiguityCause::ReservationImpl { ref message } => message.clone(),\n-        }\n-    }\n-}\n-\n // A stack that walks back up the stack frame.\n struct TraitObligationStack<'prev, 'tcx> {\n     obligation: &'prev TraitObligation<'tcx>,"}]}