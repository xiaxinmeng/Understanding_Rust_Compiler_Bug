{"sha": "be84a112a75f4e9acac76c497d714aba8d465ed2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlODRhMTEyYTc1ZjRlOWFjYWM3NmM0OTdkNzE0YWJhOGQ0NjVlZDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T17:53:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T17:53:30Z"}, "message": "show types in local variable hovers", "tree": {"sha": "206ca6d0bb186c01a1fa979023afbb76147a5853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/206ca6d0bb186c01a1fa979023afbb76147a5853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be84a112a75f4e9acac76c497d714aba8d465ed2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be84a112a75f4e9acac76c497d714aba8d465ed2", "html_url": "https://github.com/rust-lang/rust/commit/be84a112a75f4e9acac76c497d714aba8d465ed2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be84a112a75f4e9acac76c497d714aba8d465ed2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee461a211195b093269ead477f01fcf63f20cf34", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee461a211195b093269ead477f01fcf63f20cf34", "html_url": "https://github.com/rust-lang/rust/commit/ee461a211195b093269ead477f01fcf63f20cf34"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "8217df305bf6d904cc4117186627d6ebe363717c", "filename": "crates/ra_analysis/src/hover.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/be84a112a75f4e9acac76c497d714aba8d465ed2/crates%2Fra_analysis%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be84a112a75f4e9acac76c497d714aba8d465ed2/crates%2Fra_analysis%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhover.rs?ref=be84a112a75f4e9acac76c497d714aba8d465ed2", "patch": "@@ -14,23 +14,28 @@ pub(crate) fn hover(\n ) -> Cancelable<Option<RangeInfo<String>>> {\n     let file = db.source_file(position.file_id);\n     let mut res = Vec::new();\n-    let range = if let Some(name_ref) =\n-        find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset)\n-    {\n+\n+    let mut range = None;\n+    if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset) {\n         let navs = crate::goto_defenition::reference_defenition(db, position.file_id, name_ref)?;\n         for nav in navs {\n             res.extend(doc_text_for(db, nav)?)\n         }\n-        name_ref.syntax().range()\n-    } else {\n+        if !res.is_empty() {\n+            range = Some(name_ref.syntax().range())\n+        }\n+    }\n+    if range.is_none() {\n         let expr: ast::Expr = ctry!(find_node_at_offset(file.syntax(), position.offset));\n         let frange = FileRange {\n             file_id: position.file_id,\n             range: expr.syntax().range(),\n         };\n         res.extend(type_of(db, frange)?);\n-        expr.syntax().range()\n+        range = Some(expr.syntax().range());\n     };\n+\n+    let range = ctry!(range);\n     if res.is_empty() {\n         return Ok(None);\n     }\n@@ -41,7 +46,13 @@ pub(crate) fn hover(\n pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Cancelable<Option<String>> {\n     let file = db.source_file(frange.file_id);\n     let syntax = file.syntax();\n-    let node = find_covering_node(syntax, frange.range);\n+    let leaf_node = find_covering_node(syntax, frange.range);\n+    // if we picked identifier, expand to pattern/expression\n+    let node = leaf_node\n+        .ancestors()\n+        .take_while(|it| it.range() == leaf_node.range())\n+        .find(|&it| ast::Expr::cast(it).is_some() || ast::Pat::cast(it).is_some())\n+        .unwrap_or(leaf_node);\n     let parent_fn = ctry!(node.ancestors().find_map(ast::FnDef::cast));\n     let function = ctry!(hir::source_binder::function_from_source(\n         db,\n@@ -156,7 +167,6 @@ impl NavigationTarget {\n #[cfg(test)]\n mod tests {\n     use ra_syntax::TextRange;\n-\n     use crate::mock_analysis::single_file_with_position;\n \n     #[test]\n@@ -168,10 +178,17 @@ mod tests {\n             fn main() {\n                 let foo_test = foo()<|>;\n             }\n-        \",\n+            \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n         assert_eq!(hover.range, TextRange::from_to(95.into(), 100.into()));\n         assert_eq!(hover.info, \"u32\");\n     }\n+\n+    #[test]\n+    fn hover_for_local_variable() {\n+        let (analysis, position) = single_file_with_position(\"fn func(foo: i32) { fo<|>o; }\");\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(hover.info, \"i32\");\n+    }\n }"}, {"sha": "390c31c3fa0d95996558444498b0177f738ecdf0", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be84a112a75f4e9acac76c497d714aba8d465ed2/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be84a112a75f4e9acac76c497d714aba8d465ed2/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=be84a112a75f4e9acac76c497d714aba8d465ed2", "patch": "@@ -228,7 +228,7 @@ impl Query {\n ///\n /// Typically, a `NavigationTarget` corresponds to some element in the source\n /// code, like a function or a struct, but this is not strictly required.\n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n pub struct NavigationTarget {\n     file_id: FileId,\n     name: SmolStr,"}]}