{"sha": "397dbd909ab1a91bc2136ba32ebd9521977a42a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5N2RiZDkwOWFiMWE5MWJjMjEzNmJhMzJlYmQ5NTIxOTc3YTQyYTE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T05:15:53Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T05:15:53Z"}, "message": "Add initial support for different int sizes.", "tree": {"sha": "7c65879c7177587da25e329390b784da33d0d5e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c65879c7177587da25e329390b784da33d0d5e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/397dbd909ab1a91bc2136ba32ebd9521977a42a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/397dbd909ab1a91bc2136ba32ebd9521977a42a1", "html_url": "https://github.com/rust-lang/rust/commit/397dbd909ab1a91bc2136ba32ebd9521977a42a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/397dbd909ab1a91bc2136ba32ebd9521977a42a1/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f96b3a12207ce3b60edffc6d591b738526c4b55", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f96b3a12207ce3b60edffc6d591b738526c4b55", "html_url": "https://github.com/rust-lang/rust/commit/3f96b3a12207ce3b60edffc6d591b738526c4b55"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "c33c7874fbfdc49adbd8f75c7dd9af36b115b4ee", "filename": "src/interpreter.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/397dbd909ab1a91bc2136ba32ebd9521977a42a1/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/397dbd909ab1a91bc2136ba32ebd9521977a42a1/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=397dbd909ab1a91bc2136ba32ebd9521977a42a1", "patch": "@@ -5,7 +5,7 @@ use rustc::mir::repr as mir;\n use std::error::Error;\n use std::fmt;\n \n-use memory::{FieldRepr, Memory, Pointer, Repr};\n+use memory::{FieldRepr, IntRepr, Memory, Pointer, Repr};\n \n const TRACE_EXECUTION: bool = true;\n \n@@ -321,13 +321,14 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n                         ty::AdtKind::Struct => self.assign_to_product(dest, &dest_repr, operands),\n \n                         ty::AdtKind::Enum => match dest_repr {\n-                            Repr::Sum { discr_size, ref variants, .. } =>\n+                            Repr::Sum { discr_size, ref variants, .. } => {\n                                 // TODO(tsion): Write the discriminant value.\n                                 self.assign_to_product(\n                                     dest.offset(discr_size),\n                                     &variants[variant_idx],\n                                     operands\n-                                ),\n+                                )\n+                            }\n                             _ => panic!(\"expected Repr::Sum target\"),\n                         }\n                     },\n@@ -416,7 +417,8 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n         match *const_val {\n             Float(_f) => unimplemented!(),\n             Int(n) => {\n-                let ptr = self.memory.allocate(Repr::Int.size());\n+                // TODO(tsion): Check int constant type.\n+                let ptr = self.memory.allocate(8);\n                 try!(self.memory.write_int(ptr, n));\n                 Ok(ptr)\n             }\n@@ -449,9 +451,16 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n \n     // TODO(tsion): Cache these outputs.\n     fn ty_to_repr(&self, ty: ty::Ty<'tcx>) -> Repr {\n+        use syntax::ast::IntTy;\n         match ty.sty {\n             ty::TyBool => Repr::Bool,\n-            ty::TyInt(_) => Repr::Int,\n+\n+            ty::TyInt(IntTy::Is) => unimplemented!(),\n+            ty::TyInt(IntTy::I8) => Repr::Int(IntRepr::I8),\n+            ty::TyInt(IntTy::I16) => Repr::Int(IntRepr::I16),\n+            ty::TyInt(IntTy::I32) => Repr::Int(IntRepr::I32),\n+            ty::TyInt(IntTy::I64) => Repr::Int(IntRepr::I64),\n+\n             ty::TyTuple(ref fields) => self.make_product_repr(fields.iter().cloned()),\n \n             ty::TyEnum(adt_def, ref subst) => {"}, {"sha": "9b4ed9b584a03208a7113c068d0a4bd50ea7a988", "filename": "src/memory.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/397dbd909ab1a91bc2136ba32ebd9521977a42a1/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/397dbd909ab1a91bc2136ba32ebd9521977a42a1/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=397dbd909ab1a91bc2136ba32ebd9521977a42a1", "patch": "@@ -1,6 +1,5 @@\n use byteorder::{self, ByteOrder};\n use std::collections::HashMap;\n-use std::mem;\n use std::ptr;\n \n use interpreter::{EvalError, EvalResult};\n@@ -26,6 +25,9 @@ pub struct Pointer {\n     pub offset: usize,\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub enum IntRepr { I8, I16, I32, I64 }\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct FieldRepr {\n     pub offset: usize,\n@@ -35,7 +37,7 @@ pub struct FieldRepr {\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum Repr {\n     Bool,\n-    Int,\n+    Int(IntRepr),\n \n     /// The representation for product types including tuples, structs, and the contents of enum\n     /// variants.\n@@ -118,11 +120,11 @@ impl Memory {\n     }\n \n     pub fn read_int(&self, ptr: Pointer) -> EvalResult<i64> {\n-        self.get_bytes(ptr, Repr::Int.size()).map(byteorder::NativeEndian::read_i64)\n+        self.get_bytes(ptr, 8).map(byteorder::NativeEndian::read_i64)\n     }\n \n     pub fn write_int(&mut self, ptr: Pointer, n: i64) -> EvalResult<()> {\n-        let bytes = try!(self.get_bytes_mut(ptr, Repr::Int.size()));\n+        let bytes = try!(self.get_bytes_mut(ptr, 8));\n         byteorder::NativeEndian::write_i64(bytes, n);\n         Ok(())\n     }\n@@ -164,7 +166,10 @@ impl Repr {\n     pub fn size(&self) -> usize {\n         match *self {\n             Repr::Bool => 1,\n-            Repr::Int => mem::size_of::<i64>(),\n+            Repr::Int(IntRepr::I8) => 1,\n+            Repr::Int(IntRepr::I16) => 2,\n+            Repr::Int(IntRepr::I32) => 4,\n+            Repr::Int(IntRepr::I64) => 8,\n             Repr::Product { size, .. } => size,\n             Repr::Sum { discr_size, max_variant_size, .. } => discr_size + max_variant_size,\n         }"}, {"sha": "1885ba48340dd22317a761d24a3673615fd81977", "filename": "test/ints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/397dbd909ab1a91bc2136ba32ebd9521977a42a1/test%2Fints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/397dbd909ab1a91bc2136ba32ebd9521977a42a1/test%2Fints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fints.rs?ref=397dbd909ab1a91bc2136ba32ebd9521977a42a1", "patch": "@@ -30,7 +30,7 @@ fn arith() -> i64 {\n \n #[miri_run]\n fn match_int() -> i64 {\n-    let n = 2;\n+    let n = 2i64;\n     match n {\n         0 => 0,\n         1 => 10,"}]}