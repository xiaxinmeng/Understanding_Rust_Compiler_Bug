{"sha": "1fce886ac364ccf3134b779fef8028b9dc30776a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmY2U4ODZhYzM2NGNjZjMxMzRiNzc5ZmVmODAyOGI5ZGMzMDc3NmE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-28T12:08:10Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-28T12:08:10Z"}, "message": "Make some things public that are required by priroda", "tree": {"sha": "2e7a6b5b4c83de766426f0c83f1830f70549fafe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e7a6b5b4c83de766426f0c83f1830f70549fafe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fce886ac364ccf3134b779fef8028b9dc30776a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlmkB7UACgkQpp+NIls6\n19kMWxAAr8Xbb/wt9FjVffraOT1VpnTADy7body9ayaAldE5ugxaDshAYMsfv+Jb\nGonTe69fMGbJTW/imTiPmQC464PO9E/483cPgCNJVFEoPxIOuOZhUSEp25gd19Gj\nVJL6TH3bio4EIezkcL4YjM0HkJwuogYNrfkeT7GZ/mSLrt/PwTDK/LYByvgkAp9D\nnbLT/jgS8usc+Z6opMcaF4fGA5g6raWqKAwBifrdBPPZl7JGDAPhmBYINLNFhlSV\nWQpC37zVQeNvG4VOaJa4C4dWDeCtYupu7NwAd/M1VVkqISUDExkq2NBqmseLaYNp\njC1OiUE43ojGFoGZvcLzaagu24SJ+wWUyFEvWl7ulFCf63cx1TV5I/g8W1kpsxTl\nbXhTNqJoiTh6yvtnjmf1LYv5BAsOWj8CI3gVVeC6Pe+2Tq19SMm5WJP8mQ7/Erc4\nARy5qiphoOgjtsSidA9hLSV4wQmxI46ZuUxsNOySBZleL42VFioXcFufdi/hsjMD\nII1utAJNUt0CtShwImLUP1TAY9IlqciM8YGkAG6DPBa/gE3JN6/sYL6RVPjJ3qWm\nmoSkEYuJexMDxa+P+UgwmuM4WD/vHcxs1NgJ5uf/L1IAmvSCD1H0+ZUu7O2vW+Yu\niVySWEL8yDVnHjUcxocJBipS3SAEXdu+Gc3NGUsC4RYJkTqBsXs=\n=/9Ga\n-----END PGP SIGNATURE-----", "payload": "tree 2e7a6b5b4c83de766426f0c83f1830f70549fafe\nparent b6d05976eade1ccbd75d084d8f3071be7b6cbba0\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503922090 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1503922090 +0200\n\nMake some things public that are required by priroda\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fce886ac364ccf3134b779fef8028b9dc30776a", "html_url": "https://github.com/rust-lang/rust/commit/1fce886ac364ccf3134b779fef8028b9dc30776a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fce886ac364ccf3134b779fef8028b9dc30776a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6d05976eade1ccbd75d084d8f3071be7b6cbba0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6d05976eade1ccbd75d084d8f3071be7b6cbba0", "html_url": "https://github.com/rust-lang/rust/commit/b6d05976eade1ccbd75d084d8f3071be7b6cbba0"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "159f8035f2c185b4c58952b8c2c41911e7a91708", "filename": "miri/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1fce886ac364ccf3134b779fef8028b9dc30776a/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fce886ac364ccf3134b779fef8028b9dc30776a/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=1fce886ac364ccf3134b779fef8028b9dc30776a", "patch": "@@ -146,9 +146,9 @@ pub fn eval_main<'a, 'tcx: 'a>(\n     }\n }\n \n-struct Evaluator;\n+pub struct Evaluator;\n #[derive(Default)]\n-struct EvaluatorData {\n+pub struct EvaluatorData {\n     /// Environment variables set by `setenv`\n     /// Miri does not expose env vars from the host to the emulated program\n     pub(crate) env_vars: HashMap<Vec<u8>, MemoryPointer>,\n@@ -163,7 +163,7 @@ pub struct TlsEntry<'tcx> {\n }\n \n #[derive(Default)]\n-struct MemoryData<'tcx> {\n+pub struct MemoryData<'tcx> {\n     /// The Key to use for the next thread-local allocation.\n     next_thread_local: TlsKey,\n "}, {"sha": "4c441460cb5cca6a204d59e6dcd3f1b6d66fdab8", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1fce886ac364ccf3134b779fef8028b9dc30776a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fce886ac364ccf3134b779fef8028b9dc30776a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=1fce886ac364ccf3134b779fef8028b9dc30776a", "patch": "@@ -79,7 +79,7 @@ impl LockInfo {\n pub struct AllocId(u64);\n \n #[derive(Debug)]\n-enum AllocIdKind {\n+pub enum AllocIdKind {\n     /// We can't ever have more than `usize::max_value` functions at the same time\n     /// since we never \"deallocate\" functions\n     Function(usize),\n@@ -89,7 +89,7 @@ enum AllocIdKind {\n }\n \n impl AllocIdKind {\n-    fn into_alloc_id(self) -> AllocId {\n+    pub fn into_alloc_id(self) -> AllocId {\n         match self {\n             AllocIdKind::Function(n) => AllocId(n as u64),\n             AllocIdKind::Runtime(n) => AllocId((1 << 63) | n),\n@@ -103,10 +103,10 @@ impl AllocId {\n         self.0 >> 63\n     }\n     /// Yields everything but the discriminant bits\n-    fn index(self) -> u64 {\n+    pub fn index(self) -> u64 {\n         self.0 & ((1 << 63) - 1)\n     }\n-    fn into_alloc_id_kind(self) -> AllocIdKind {\n+    pub fn into_alloc_id_kind(self) -> AllocIdKind {\n         match self.discriminant() {\n             0 => AllocIdKind::Function(self.index() as usize),\n             1 => AllocIdKind::Runtime(self.index()),"}, {"sha": "603451a9442545ef1e62a1e535a72b5182a5775c", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1fce886ac364ccf3134b779fef8028b9dc30776a/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fce886ac364ccf3134b779fef8028b9dc30776a/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=1fce886ac364ccf3134b779fef8028b9dc30776a", "patch": "@@ -27,7 +27,7 @@ pub use self::eval_context::{EvalContext, Frame, ResourceLimits, StackPopCleanup\n \n pub use self::lvalue::{Lvalue, LvalueExtra, GlobalId};\n \n-pub use self::memory::{AllocId, Memory, MemoryPointer, MemoryKind, HasMemory};\n+pub use self::memory::{AllocId, Memory, MemoryPointer, MemoryKind, HasMemory, AllocIdKind};\n \n use self::memory::{PointerArithmetic, Lock, AccessKind};\n "}]}