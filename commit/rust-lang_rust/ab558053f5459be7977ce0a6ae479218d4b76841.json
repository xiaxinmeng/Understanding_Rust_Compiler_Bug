{"sha": "ab558053f5459be7977ce0a6ae479218d4b76841", "node_id": "C_kwDOAAsO6NoAKGFiNTU4MDUzZjU0NTliZTc5NzdjZTBhNmFlNDc5MjE4ZDRiNzY4NDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-09T15:40:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-09T15:40:45Z"}, "message": "Auto merge of #12198 - jonas-schievink:ide-resolve-supertrait-assoc-types, r=jonas-schievink\n\nfix: Resolve assoc. types of supertraits in the IDE layer\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/12166", "tree": {"sha": "3e9438dd6e211175d1204beb4664720c0ddbc88f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e9438dd6e211175d1204beb4664720c0ddbc88f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab558053f5459be7977ce0a6ae479218d4b76841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab558053f5459be7977ce0a6ae479218d4b76841", "html_url": "https://github.com/rust-lang/rust/commit/ab558053f5459be7977ce0a6ae479218d4b76841", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab558053f5459be7977ce0a6ae479218d4b76841/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c42cb9af480f610600144313e3e2280ee8322fca", "url": "https://api.github.com/repos/rust-lang/rust/commits/c42cb9af480f610600144313e3e2280ee8322fca", "html_url": "https://github.com/rust-lang/rust/commit/c42cb9af480f610600144313e3e2280ee8322fca"}, {"sha": "2156815f120438ab09acdbc76c181b609ad39ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2156815f120438ab09acdbc76c181b609ad39ef2", "html_url": "https://github.com/rust-lang/rust/commit/2156815f120438ab09acdbc76c181b609ad39ef2"}], "stats": {"total": 41, "additions": 34, "deletions": 7}, "files": [{"sha": "39f88937d6e699fbfcbcd6460592daa12ab7b362", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab558053f5459be7977ce0a6ae479218d4b76841/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab558053f5459be7977ce0a6ae479218d4b76841/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=ab558053f5459be7977ce0a6ae479218d4b76841", "patch": "@@ -54,7 +54,7 @@ use hir_def::{\n };\n use hir_expand::{name::name, MacroCallKind};\n use hir_ty::{\n-    autoderef,\n+    all_super_traits, autoderef,\n     consteval::{unknown_const_as_generic, ComputedExpr, ConstEvalError, ConstExt},\n     diagnostics::BodyValidationDiagnostic,\n     method_resolution::{self, TyFingerprint},\n@@ -1676,6 +1676,11 @@ impl Trait {\n         db.trait_data(self.id).items.iter().map(|(_name, it)| (*it).into()).collect()\n     }\n \n+    pub fn items_with_supertraits(self, db: &dyn HirDatabase) -> Vec<AssocItem> {\n+        let traits = all_super_traits(db.upcast(), self.into());\n+        traits.iter().flat_map(|tr| Trait::from(*tr).items(db)).collect()\n+    }\n+\n     pub fn is_auto(self, db: &dyn HirDatabase) -> bool {\n         db.trait_data(self.id).is_auto\n     }"}, {"sha": "034a229702ba6a5229b0749e288bd136e8eab85e", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab558053f5459be7977ce0a6ae479218d4b76841/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab558053f5459be7977ce0a6ae479218d4b76841/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=ab558053f5459be7977ce0a6ae479218d4b76841", "patch": "@@ -168,8 +168,9 @@ pub(crate) fn complete_type_path(acc: &mut Completions, ctx: &CompletionContext)\n                     if let Some(hir::PathResolution::Def(hir::ModuleDef::Trait(trait_))) =\n                         ctx.sema.resolve_path(&path_seg.parent_path())\n                     {\n-                        trait_.items(ctx.sema.db).into_iter().for_each(|it| {\n+                        trait_.items_with_supertraits(ctx.sema.db).into_iter().for_each(|it| {\n                             if let hir::AssocItem::TypeAlias(alias) = it {\n+                                cov_mark::hit!(complete_assoc_type_in_generics_list);\n                                 acc.add_type_alias_with_eq(ctx, alias)\n                             }\n                         });"}, {"sha": "1e1b3f3efb98ea58784d21bbe29c6cc4b7cb4350", "filename": "crates/ide-completion/src/tests/type_pos.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ab558053f5459be7977ce0a6ae479218d4b76841/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab558053f5459be7977ce0a6ae479218d4b76841/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=ab558053f5459be7977ce0a6ae479218d4b76841", "patch": "@@ -336,9 +336,13 @@ fn foo<'lt, T, const C: usize>() {\n \n #[test]\n fn completes_types_and_const_in_arg_list() {\n+    cov_mark::check!(complete_assoc_type_in_generics_list);\n     check(\n         r#\"\n-trait Trait2 {\n+trait Trait1 {\n+    type Super;\n+}\n+trait Trait2: Trait1 {\n     type Foo;\n }\n \n@@ -348,14 +352,16 @@ fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n             ct CONST\n             cp CONST_PARAM\n             en Enum\n-            ma makro!(\u2026)          macro_rules! makro\n+            ma makro!(\u2026)            macro_rules! makro\n             md module\n             st Record\n             st Tuple\n             st Unit\n             tt Trait\n+            tt Trait1\n             tt Trait2\n-            ta Foo =  (as Trait2) type Foo\n+            ta Foo =  (as Trait2)   type Foo\n+            ta Super =  (as Trait1) type Super\n             tp T\n             un Union\n             bt u32"}, {"sha": "bea6f24523deba8f1cb6d374dc4d107f96bb8529", "filename": "crates/ide-db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ab558053f5459be7977ce0a6ae479218d4b76841/crates%2Fide-db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab558053f5459be7977ce0a6ae479218d4b76841/crates%2Fide-db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fdefs.rs?ref=ab558053f5459be7977ce0a6ae479218d4b76841", "patch": "@@ -386,9 +386,8 @@ impl NameRefClass {\n                     let containing_path = name_ref.syntax().ancestors().find_map(ast::Path::cast)?;\n                     let resolved = sema.resolve_path(&containing_path)?;\n                     if let PathResolution::Def(ModuleDef::Trait(tr)) = resolved {\n-                        // FIXME: resolve in supertraits\n                         if let Some(ty) = tr\n-                            .items(sema.db)\n+                            .items_with_supertraits(sema.db)\n                             .iter()\n                             .filter_map(|&assoc| match assoc {\n                                 hir::AssocItem::TypeAlias(it) => Some(it),"}, {"sha": "30f48819e6b8f7ee14b065d68d24a8acd665178e", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab558053f5459be7977ce0a6ae479218d4b76841/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab558053f5459be7977ce0a6ae479218d4b76841/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=ab558053f5459be7977ce0a6ae479218d4b76841", "patch": "@@ -1012,6 +1012,22 @@ fn f() -> impl Iterator<Item$0 = u8> {}\n         );\n     }\n \n+    #[test]\n+    fn goto_def_for_super_assoc_ty_in_path() {\n+        check(\n+            r#\"\n+trait Super {\n+    type Item;\n+       //^^^^\n+}\n+\n+trait Sub: Super {}\n+\n+fn f() -> impl Sub<Item$0 = u8> {}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn unknown_assoc_ty() {\n         check_unresolved("}]}