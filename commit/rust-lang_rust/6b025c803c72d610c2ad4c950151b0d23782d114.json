{"sha": "6b025c803c72d610c2ad4c950151b0d23782d114", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMDI1YzgwM2M3MmQ2MTBjMmFkNGM5NTAxNTFiMGQyMzc4MmQxMTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-15T22:06:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-15T22:06:26Z"}, "message": "auto merge of #12272 : alexcrichton/rust/snapshot, r=kballard\n\nThis notably contains the `extern mod` => `extern crate` change.\r\n\r\nCloses #9880", "tree": {"sha": "c003da4005d796d11ba0dd7cc0e05eee5693ebdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c003da4005d796d11ba0dd7cc0e05eee5693ebdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b025c803c72d610c2ad4c950151b0d23782d114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b025c803c72d610c2ad4c950151b0d23782d114", "html_url": "https://github.com/rust-lang/rust/commit/6b025c803c72d610c2ad4c950151b0d23782d114", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b025c803c72d610c2ad4c950151b0d23782d114/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af28c98fac5bc36a93527b79c77081eedfb554b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af28c98fac5bc36a93527b79c77081eedfb554b", "html_url": "https://github.com/rust-lang/rust/commit/4af28c98fac5bc36a93527b79c77081eedfb554b"}, {"sha": "a41b0c25295e06b8eebc4bdcb3021354f766cba0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a41b0c25295e06b8eebc4bdcb3021354f766cba0", "html_url": "https://github.com/rust-lang/rust/commit/a41b0c25295e06b8eebc4bdcb3021354f766cba0"}], "stats": {"total": 1412, "additions": 694, "deletions": 718}, "files": [{"sha": "15aa68aaebbdf77b345a25df3e61b12673db1be1", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,8 +13,8 @@\n #[allow(non_camel_case_types)];\n #[deny(warnings)];\n \n-extern mod extra;\n-extern mod getopts;\n+extern crate extra;\n+extern crate getopts;\n \n use std::os;\n use std::io;"}, {"sha": "b68c58c9b6176685c5ed62927268143de98d6e37", "filename": "src/doc/favicon.inc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Ffavicon.inc", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Ffavicon.inc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ffavicon.inc?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -1 +1 @@\n-<link rel=\"shortcut icon\" href=\"http://www.rust-lang.org/favicon.ico\" />\n\\ No newline at end of file\n+<link rel=\"shortcut icon\" href=\"http://www.rust-lang.org/favicon.ico\" />"}, {"sha": "6d5d90e2617fe5f5dfbbaff0f1a85054cc0d6f4c", "filename": "src/doc/guide-runtime.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fguide-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fguide-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-runtime.md?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -232,7 +232,7 @@ fn main() {}\n Whereas this program explicitly opts into using a particular runtime\n \n ~~~{.rust}\n-extern mod green;\n+extern crate green;\n \n #[start]\n fn start(argc: int, argv: **u8) -> int {"}, {"sha": "813b61dc8fb39f649a1aa5b6b5953e9e5b82146f", "filename": "src/doc/guide-tasks.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fguide-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fguide-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-tasks.md?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -285,7 +285,7 @@ later.\n The basic example below illustrates this.\n \n ~~~\n-# extern mod sync;\n+# extern crate sync;\n \n # fn main() {\n # fn make_a_sandwich() {};\n@@ -310,7 +310,7 @@ Here is another example showing how futures allow you to background computations\n be distributed on the available cores.\n \n ~~~\n-# extern mod sync;\n+# extern crate sync;\n # use std::vec;\n fn partial_sum(start: uint) -> f64 {\n     let mut local_sum = 0f64;\n@@ -346,7 +346,7 @@ Here is a small example showing how to use Arcs. We wish to run concurrently sev\n a single large vector of floats. Each task needs the full vector to perform its duty.\n \n ~~~\n-# extern mod sync;\n+# extern crate sync;\n # use std::vec;\n # use std::rand;\n use sync::Arc;\n@@ -379,7 +379,7 @@ at the power given as argument and takes the inverse power of this value). The A\n created by the line\n \n ~~~\n-# extern mod sync;\n+# extern crate sync;\n # use sync::Arc;\n # use std::vec;\n # use std::rand;\n@@ -392,7 +392,7 @@ let numbers_arc=Arc::new(numbers);\n and a clone of it is sent to each task\n \n ~~~\n-# extern mod sync;\n+# extern crate sync;\n # use sync::Arc;\n # use std::vec;\n # use std::rand;\n@@ -409,7 +409,7 @@ copying only the wrapper and not its contents.\n Each task recovers the underlying data by\n \n ~~~\n-# extern mod sync;\n+# extern crate sync;\n # use sync::Arc;\n # use std::vec;\n # use std::rand;\n@@ -499,7 +499,7 @@ the string in response.  The child terminates when it receives `0`.\n Here is the function that implements the child task:\n \n ~~~\n-# extern mod sync;\n+# extern crate sync;\n # fn main() {\n # use sync::DuplexStream;\n     fn stringifier(channel: &DuplexStream<~str, uint>) {\n@@ -524,7 +524,7 @@ response itself is simply the stringified version of the received value,\n Here is the code for the parent task:\n \n ~~~\n-# extern mod sync;\n+# extern crate sync;\n # use std::task::spawn;\n # use sync::DuplexStream;\n # fn stringifier(channel: &DuplexStream<~str, uint>) {"}, {"sha": "e51988565b0312c090fd2f48e3005012983b6d67", "filename": "src/doc/guide-testing.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fguide-testing.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fguide-testing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-testing.md?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -185,7 +185,7 @@ amount.\n For example:\n \n ~~~\n-extern mod extra;\n+extern crate extra;\n use std::vec;\n use extra::test::BenchHarness;\n \n@@ -243,7 +243,7 @@ recognize that some calculation has no external effects and remove\n it entirely.\n \n ~~~\n-extern mod extra;\n+extern crate extra;\n use extra::test::BenchHarness;\n \n #[bench]"}, {"sha": "72ef1d5a0102bd840b99945074fd7bb6a60a8ff0", "filename": "src/doc/po/ja/complement-cheatsheet.md.po", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Fcomplement-cheatsheet.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Fcomplement-cheatsheet.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fcomplement-cheatsheet.md.po?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -273,7 +273,7 @@ msgstr \"## \u30bf\u30d7\u30eb\"\n #. type: Plain text\n #: src/doc/complement-cheatsheet.md:122\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~\\n\"\n \"struct Foo {\\n\"\n@@ -282,7 +282,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n "}, {"sha": "a65d6eec4198cbc2f2843f34e147d8e5ab25d3b8", "filename": "src/doc/po/ja/guide-conditions.md.po", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Fguide-conditions.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Fguide-conditions.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fguide-conditions.md.po?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -79,13 +79,13 @@ msgstr \"# \u95a2\u6570\"\n #: src/doc/guide-conditions.md:262\n #, fuzzy\n #| msgid \"\"\n-#| \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \"\n+#| \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \"\n #| \"\\\" + world::explore()); } ~~~~\"\n msgid \"fn main() {\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n "}, {"sha": "23e1c7734f0b478d2a9a298b0ebbff508afb195c", "filename": "src/doc/po/ja/guide-container.md.po", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Fguide-container.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Fguide-container.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fguide-container.md.po?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -74,7 +74,7 @@ msgstr \"# \u30a4\u30f3\u30c8\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\"\n #. type: Plain text\n #: src/doc/guide-container.md:85\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"impl Iterator<int> for ZeroStream {\\n\"\n \"    fn next(&mut self) -> Option<int> {\\n\"\n@@ -85,7 +85,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n "}, {"sha": "3155b9f65053f9d81358def0fd9216df1a5fbb8d", "filename": "src/doc/po/ja/guide-ffi.md.po", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Fguide-ffi.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Fguide-ffi.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fguide-ffi.md.po?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -70,7 +70,7 @@ msgstr \"## \u6700\u5c0f\u9650\u306e\u4f8b\"\n #. type: Plain text\n #: src/doc/guide-ffi.md:323\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"struct RustObject {\\n\"\n \"    a: i32,\\n\"\n@@ -79,7 +79,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n "}, {"sha": "2b130821c4c9ab6a1e9394ebcc6ba46cf63dea32", "filename": "src/doc/po/ja/guide-pointers.md.po", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Fguide-pointers.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Fguide-pointers.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fguide-pointers.md.po?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -154,7 +154,7 @@ msgstr \"\"\n #: src/doc/guide-pointers.md:141 src/doc/guide-pointers.md:221\n #: src/doc/guide-pointers.md:238 src/doc/guide-pointers.md:300\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~rust\\n\"\n \"struct Point {\\n\"\n@@ -164,7 +164,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -222,7 +222,7 @@ msgstr \"# \u30c7\u30fc\u30bf\u69cb\u9020\"\n #. type: Plain text\n #: src/doc/guide-pointers.md:189\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~rust\\n\"\n \"enum List<T> {\\n\"\n@@ -232,7 +232,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -304,7 +304,7 @@ msgstr \"## \u30de\u30cd\u30fc\u30b8\u30c9\u30dc\u30c3\u30af\u30b9\"\n #. type: Plain text\n #: src/doc/guide-pointers.md:269\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~rust{.ignore}\\n\"\n \"struct Point {\\n\"\n@@ -314,7 +314,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -372,7 +372,7 @@ msgstr \"\"\n #. type: Plain text\n #: src/doc/guide-pointers.md:341\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"struct Point {\\n\"\n \"    x: f32,\\n\"\n@@ -381,7 +381,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -402,7 +402,7 @@ msgstr \"\"\n #. type: Plain text\n #: src/doc/guide-pointers.md:378\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~rust{.ignore}\\n\"\n \"fn main() {\\n\"\n@@ -413,7 +413,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -499,7 +499,7 @@ msgstr \"\"\n #. type: Plain text\n #: src/doc/guide-pointers.md:450\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"fn main() {\\n\"\n \"    let x = ~5;\\n\"\n@@ -509,7 +509,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -530,7 +530,7 @@ msgstr \"\"\n #. type: Plain text\n #: src/doc/guide-pointers.md:463\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"fn main() {\\n\"\n \"    let x = ~5;\\n\"\n@@ -540,14 +540,14 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n #. type: Plain text\n #: src/doc/guide-pointers.md:477\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"fn main() {\\n\"\n \"    let x = ~5;\\n\"\n@@ -557,7 +557,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n "}, {"sha": "2e02fe344ebaf82c4a8c8e48b25ed801e34e177b", "filename": "src/doc/po/ja/guide-runtime.md.po", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Fguide-runtime.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Fguide-runtime.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fguide-runtime.md.po?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -83,21 +83,21 @@ msgstr \"## \u4ed6\u306e\u30af\u30ec\u30fc\u30c8\u306e\u5229\u7528\"\n #: src/doc/guide-runtime.md:231\n #, fuzzy\n #| msgid \"\"\n-#| \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \"\n+#| \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \"\n #| \"\\\" + world::explore()); } ~~~~\"\n msgid \"~~~{.rust} fn main() {} ~~~\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n #. type: Plain text\n #: src/doc/guide-runtime.md:236\n #, fuzzy\n #| msgid \"~~~~ {.ignore} let foo = 10;\"\n-msgid \"~~~{.rust} extern mod green;\"\n+msgid \"~~~{.rust} extern crate green;\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"let foo = 10;\"\n@@ -106,13 +106,13 @@ msgstr \"\"\n #: src/doc/guide-runtime.md:246\n #, fuzzy\n #| msgid \"\"\n-#| \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \"\n+#| \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \"\n #| \"\\\" + world::explore()); } ~~~~\"\n msgid \"fn main() {} ~~~\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n "}, {"sha": "6ec1a4467da86bdb187f4838703145c719082b6d", "filename": "src/doc/po/ja/guide-testing.md.po", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Fguide-testing.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Fguide-testing.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Fguide-testing.md.po?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -61,7 +61,7 @@ msgstr \"## \u6700\u5c0f\u9650\u306e\u4f8b\"\n #: src/doc/guide-testing.md:131\n #, fuzzy\n #| msgid \"~~~~ use std::task::spawn;\"\n-msgid \"~~~ extern mod extra; use std::vec;\"\n+msgid \"~~~ extern crate extra; use std::vec;\"\n msgstr \"\"\n \"~~~~\\n\"\n \"use std::task::spawn;\""}, {"sha": "0e96f4db84bf4bdbd999a0b1d7587652fb147120", "filename": "src/doc/po/ja/rust.md.po", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Frust.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Frust.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Frust.md.po?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -310,14 +310,14 @@ msgstr \"## \u4ed6\u306e\u30af\u30ec\u30fc\u30c8\u306e\u5229\u7528\"\n #: src/doc/rust.md:786\n #, fuzzy\n #| msgid \"## Using other crates\"\n-msgid \"Four examples of `extern mod` declarations:\"\n+msgid \"Four examples of `extern crate` declarations:\"\n msgstr \"## \u4ed6\u306e\u30af\u30ec\u30fc\u30c8\u306e\u5229\u7528\"\n \n #. type: Plain text\n #: src/doc/rust.md:789\n #, fuzzy\n #| msgid \"~~~~ {.ignore} let foo = 10;\"\n-msgid \"~~~~ {.ignore} extern mod pcre;\"\n+msgid \"~~~~ {.ignore} extern crate pcre;\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"let foo = 10;\"\n@@ -365,7 +365,7 @@ msgstr \"## \u6700\u5c0f\u9650\u306e\u4f8b\"\n #| msgid \"~~~~ {.ignore} let foo = 10;\"\n msgid \"\"\n \"mod foo {\\n\"\n-\"    extern mod extra;\\n\"\n+\"    extern crate extra;\\n\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"let foo = 10;\"\n@@ -374,13 +374,13 @@ msgstr \"\"\n #: src/doc/rust.md:901\n #, fuzzy\n #| msgid \"\"\n-#| \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \"\n+#| \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \"\n #| \"\\\" + world::explore()); } ~~~~\"\n msgid \"fn main() {} ~~~~\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -751,7 +751,7 @@ msgstr \"# \u30a4\u30f3\u30c8\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\"\n #. type: Plain text\n #: src/doc/rust.md:1420\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"struct Circle {\\n\"\n \"    radius: f64,\\n\"\n@@ -760,7 +760,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -775,13 +775,13 @@ msgstr \"## \u672c\u66f8\u306e\u8868\u8a18\u306b\u3064\u3044\u3066\"\n #: src/doc/rust.md:1644 src/doc/rust.md:1665\n #, fuzzy\n #| msgid \"\"\n-#| \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \"\n+#| \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \"\n #| \"\\\" + world::explore()); } ~~~~\"\n msgid \"# fn main() {} ~~~~\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -866,7 +866,7 @@ msgstr \"## \u51cd\u7d50\"\n #. type: Plain text\n #: src/doc/rust.md:1953\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~~\\n\"\n \"#[deriving(Eq, Clone)]\\n\"\n@@ -878,7 +878,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -1254,7 +1254,7 @@ msgstr \"\"\n #. type: Plain text\n #: src/doc/rust.md:2702\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"while i < 10 {\\n\"\n \"    println!(\\\"hello\\\");\\n\"\n@@ -1264,7 +1264,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -1306,7 +1306,7 @@ msgstr \"## \u6700\u5c0f\u9650\u306e\u4f8b\"\n #. type: Plain text\n #: src/doc/rust.md:2774\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"for e in v.iter() {\\n\"\n \"    bar(*e);\\n\"\n@@ -1315,7 +1315,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -1637,7 +1637,7 @@ msgstr \"## \u6700\u5c0f\u9650\u306e\u4f8b\"\n #. type: Plain text\n #: src/doc/rust.md:3314\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~~\\n\"\n \"trait Printable {\\n\"\n@@ -1646,29 +1646,29 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n #. type: Plain text\n #: src/doc/rust.md:3318\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"impl Printable for int {\\n\"\n \"  fn to_string(&self) -> ~str { self.to_str() }\\n\"\n \"}\\n\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n #. type: Plain text\n #: src/doc/rust.md:3327\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"fn main() {\\n\"\n \"   print(@10 as @Printable);\\n\"\n@@ -1677,7 +1677,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -1698,7 +1698,7 @@ msgstr \"# \u30af\u30ed\u30fc\u30b8\u30e3\"\n #. type: Plain text\n #: src/doc/rust.md:3359\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~~\\n\"\n \"trait Printable {\\n\"\n@@ -1707,14 +1707,14 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n #. type: Plain text\n #: src/doc/rust.md:3366\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"impl Printable for ~str {\\n\"\n \"    fn make_string(&self) -> ~str {\\n\"\n@@ -1725,7 +1725,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n "}, {"sha": "34769b320b7d0724bcd4fc1abebe93556d14ceb9", "filename": "src/doc/po/ja/tutorial.md.po", "status": "modified", "additions": 63, "deletions": 63, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Ftutorial.md.po", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fpo%2Fja%2Ftutorial.md.po", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fpo%2Fja%2Ftutorial.md.po?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -431,7 +431,7 @@ msgstr \"\"\n #. type: Plain text\n #: src/doc/tutorial.md:136\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~~\\n\"\n \"fn main() {\\n\"\n@@ -441,7 +441,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -634,7 +634,7 @@ msgstr \"\"\n #. type: Plain text\n #: src/doc/tutorial.md:222\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"while count < 10 {\\n\"\n \"    println!(\\\"count is {}\\\", count);\\n\"\n@@ -644,7 +644,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -1413,7 +1413,7 @@ msgstr \"\"\n #. type: Plain text\n #: src/doc/tutorial.md:602\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~~\\n\"\n \"struct Point {\\n\"\n@@ -1424,7 +1424,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -2187,7 +2187,7 @@ msgstr \"# \u30dc\u30c3\u30af\u30b9\"\n #. type: Plain text\n #: src/doc/tutorial.md:986\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"struct Foo {\\n\"\n \"    a: u32,\\n\"\n@@ -2198,7 +2198,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -2312,7 +2312,7 @@ msgstr \"\u4f8b\u3068\u3057\u3066\u3001\u30b7\u30f3\u30d7\u30eb\u306a\u69cb\u9020\u4f53\u578b\u306e `Point` \u306b\u3064\u3044\u3066\u8003\u3048\n #. type: Plain text\n #: src/doc/tutorial.md:1376\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~\\n\"\n \"struct Point {\\n\"\n@@ -2323,7 +2323,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -3688,7 +3688,7 @@ msgstr \"\"\n #. type: Plain text\n #: src/doc/tutorial.md:2110\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~\\n\"\n \"struct TimeBomb {\\n\"\n@@ -3697,7 +3697,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -3735,7 +3735,7 @@ msgstr \"\"\n #. type: Plain text\n #: src/doc/tutorial.md:2135\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~~\\n\"\n \"trait Printable {\\n\"\n@@ -3745,7 +3745,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -3774,15 +3774,15 @@ msgstr \"[impls]: #\u30e1\u30bd\u30c3\u30c9\"\n #. type: Plain text\n #: src/doc/tutorial.md:2160 src/doc/tutorial.md:2206\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"impl Printable for ~str {\\n\"\n \"    fn print(&self) { println!(\\\"{}\\\", *self) }\\n\"\n \"}\\n\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -3821,15 +3821,15 @@ msgstr \"## \u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u306e\u5c0e\u51fa\"\n #. type: Plain text\n #: src/doc/tutorial.md:2185\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"impl Printable for bool {\\n\"\n \"    fn print(&self) { println!(\\\"{:?}\\\", *self) }\\n\"\n \"}\\n\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -3864,7 +3864,7 @@ msgstr \"## \u30bf\u30d7\u30eb\"\n #. type: Plain text\n #: src/doc/tutorial.md:2235\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~~\\n\"\n \"trait Seq<T> {\\n\"\n@@ -3873,14 +3873,14 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n #. type: Plain text\n #: src/doc/tutorial.md:2240\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"impl<T> Seq<T> for ~[T] {\\n\"\n \"    fn length(&self) -> uint { self.len() }\\n\"\n@@ -3889,7 +3889,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -4447,7 +4447,7 @@ msgstr \"## \u30af\u30ec\u30fc\u30c8\"\n #. type: Plain text\n #: src/doc/tutorial.md:2554\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~~\\n\"\n \"// `main.rs`\\n\"\n@@ -4458,7 +4458,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -4487,7 +4487,7 @@ msgstr \"## \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\"\n #. type: Plain text\n #: src/doc/tutorial.md:2587\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"fn main() {\\n\"\n \"    println!(\\\"Hello farm!\\\");\\n\"\n@@ -4496,7 +4496,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -4510,21 +4510,21 @@ msgstr \"## \u30de\u30cd\u30fc\u30b8\u30c9\u30af\u30ed\u30fc\u30b8\u30e3\"\n #. type: Plain text\n #: src/doc/tutorial.md:2607\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"fn main() {\\n\"\n \"    println!(\\\"Hello chicken!\\\");\\n\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n #. type: Plain text\n #: src/doc/tutorial.md:2639\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"fn main() {\\n\"\n \"    println!(\\\"Hello chicken!\\\");\\n\"\n@@ -4534,7 +4534,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -4573,7 +4573,7 @@ msgstr \"# \u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u30af\u30ec\u30fc\u30c8\"\n #. type: Plain text\n #: src/doc/tutorial.md:2719\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"fn main() {\\n\"\n \"    println!(\\\"Hello farm!\\\");\\n\"\n@@ -4583,7 +4583,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -4653,34 +4653,34 @@ msgstr \"\"\n #: src/doc/tutorial.md:2897\n #, fuzzy\n #| msgid \"\"\n-#| \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \"\n+#| \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \"\n #| \"\\\" + world::explore()); } ~~~~\"\n msgid \"fn main() { cow() } ~~~\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n #. type: Plain text\n #: src/doc/tutorial.md:2916\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"fn main() {\\n\"\n \"    println!(\\\"Hello farm!\\\");\\n\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n #. type: Plain text\n #: src/doc/tutorial.md:2923\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"    // Can now refer to those names directly:\\n\"\n \"    chicken();\\n\"\n@@ -4691,45 +4691,45 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n #. type: Plain text\n #: src/doc/tutorial.md:2932\n #, fuzzy\n #| msgid \"\"\n-#| \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \"\n+#| \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \"\n #| \"\\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~{.ignore} // `a.rs` - crate root use b::foo; mod b; fn main() { foo(); } \"\n \"~~~\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n #. type: Plain text\n #: src/doc/tutorial.md:2939\n #, fuzzy\n #| msgid \"\"\n-#| \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \"\n+#| \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \"\n #| \"\\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"~~~{.ignore} // `b.rs` use b::c::bar; pub mod c; pub fn foo() { bar(); } ~~~\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n #. type: Plain text\n #: src/doc/tutorial.md:2985\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"fn main() {\\n\"\n \"    egg_layer();\\n\"\n@@ -4738,7 +4738,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -4752,7 +4752,7 @@ msgstr \"# \u30dd\u30a4\u30f3\u30bf\u306e\u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\"\n #. type: Plain text\n #: src/doc/tutorial.md:3014\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"fn main() {\\n\"\n \"    farm::chicken();\\n\"\n@@ -4763,7 +4763,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -4778,13 +4778,13 @@ msgstr \"## \u4ed6\u306e\u30af\u30ec\u30fc\u30c8\u306e\u5229\u7528\"\n #: src/doc/tutorial.md:3035\n #, fuzzy\n #| msgid \"## Using other crates\"\n-msgid \"For that, Rust offers you the `extern mod` declaration:\"\n+msgid \"For that, Rust offers you the `extern crate` declaration:\"\n msgstr \"## \u4ed6\u306e\u30af\u30ec\u30fc\u30c8\u306e\u5229\u7528\"\n \n #. type: Plain text\n #: src/doc/tutorial.md:3045\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"fn main() {\\n\"\n \"    // The rational number '1/2':\\n\"\n@@ -4794,23 +4794,23 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n #. type: Plain text\n #: src/doc/tutorial.md:3068\n #, fuzzy\n #| msgid \"~~~~ {.ignore} let foo = 10;\"\n-msgid \"~~~ extern mod extra;\"\n+msgid \"~~~ extern crate extra;\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"let foo = 10;\"\n \n #. type: Plain text\n #: src/doc/tutorial.md:3081\n #, fuzzy, no-wrap\n-#| msgid \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n+#| msgid \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \\\" + world::explore()); } ~~~~\"\n msgid \"\"\n \"fn main() {\\n\"\n \"    farm::dog();\\n\"\n@@ -4820,7 +4820,7 @@ msgid \"\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -4835,17 +4835,17 @@ msgstr \"## \u69cb\u9020\u4f53\"\n #: src/doc/tutorial.md:3123\n #, fuzzy\n #| msgid \"\"\n-#| \"~~~~ {.ignore} extern mod farm; extern mod my_farm (name = \\\"farm\\\", vers \"\n-#| \"= \\\"2.5\\\"); extern mod my_auxiliary_farm (name = \\\"farm\\\", author = \\\"mjh\"\n+#| \"~~~~ {.ignore} extern crate farm; extern crate my_farm (name = \\\"farm\\\", vers \"\n+#| \"= \\\"2.5\\\"); extern crate my_auxiliary_farm (name = \\\"farm\\\", author = \\\"mjh\"\n #| \"\\\"); ~~~~\"\n msgid \"\"\n-\"~~~~ {.ignore} extern mod farm; extern mod farm = \\\"farm#2.5\\\"; extern mod \"\n+\"~~~~ {.ignore} extern crate farm; extern crate farm = \\\"farm#2.5\\\"; extern crate \"\n \"my_farm = \\\"farm\\\"; ~~~~\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n-\"extern mod farm;\\n\"\n-\"extern mod my_farm (name = \\\"farm\\\", vers = \\\"2.5\\\");\\n\"\n-\"extern mod my_auxiliary_farm (name = \\\"farm\\\", author = \\\"mjh\\\");\\n\"\n+\"extern crate farm;\\n\"\n+\"extern crate my_farm (name = \\\"farm\\\", vers = \\\"2.5\\\");\\n\"\n+\"extern crate my_auxiliary_farm (name = \\\"farm\\\", author = \\\"mjh\\\");\\n\"\n \"~~~~\"\n \n #. type: Plain text\n@@ -4891,7 +4891,7 @@ msgstr \"\"\n #| \"~~~~ // world.rs #[link(name = \\\"world\\\", vers = \\\"1.0\\\")]; pub fn \"\n #| \"explore() -> &str { \\\"world\\\" } ~~~~\"\n msgid \"\"\n-\"~~~~ // `world.rs` #[crate_id = \\\"world#0.42\\\"]; # extern mod extra; pub fn \"\n+\"~~~~ // `world.rs` #[crate_id = \\\"world#0.42\\\"]; # extern crate extra; pub fn \"\n \"explore() -> &'static str { \\\"world\\\" } # fn main() {} ~~~~\"\n msgstr \"\"\n \"~~~~\\n\"\n@@ -4904,15 +4904,15 @@ msgstr \"\"\n #: src/doc/tutorial.md:3159\n #, fuzzy\n #| msgid \"\"\n-#| \"~~~~ {.ignore} // main.rs extern mod world; fn main() { println(~\\\"hello \"\n+#| \"~~~~ {.ignore} // main.rs extern crate world; fn main() { println(~\\\"hello \"\n #| \"\\\" + world::explore()); } ~~~~\"\n msgid \"\"\n-\"~~~~ {.ignore} // `main.rs` extern mod world; fn main() { println!(\\\"hello \"\n+\"~~~~ {.ignore} // `main.rs` extern crate world; fn main() { println!(\\\"hello \"\n \"{}\\\", world::explore()); } ~~~~\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"// main.rs\\n\"\n-\"extern mod world;\\n\"\n+\"extern crate world;\\n\"\n \"fn main() { println(~\\\"hello \\\" + world::explore()); }\\n\"\n \"~~~~\"\n \n@@ -4977,7 +4977,7 @@ msgstr \"## \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\"\n #: src/doc/tutorial.md:3187\n #, fuzzy\n #| msgid \"~~~~ {.ignore} let foo = 10;\"\n-msgid \"~~~ {.ignore} extern mod std; ~~~\"\n+msgid \"~~~ {.ignore} extern crate std; ~~~\"\n msgstr \"\"\n \"~~~~ {.ignore}\\n\"\n \"let foo = 10;\""}, {"sha": "c605ed06ffd1f8858bf72dd6ad4c6874dbcef10d", "filename": "src/doc/rust.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -759,7 +759,7 @@ A view item manages the namespace of a module.\n View items do not define new items, but rather, simply change other items' visibility.\n There are several kinds of view item:\n \n- * [`extern mod` declarations](#extern-mod-declarations)\n+ * [`extern crate` declarations](#extern-mod-declarations)\n  * [`use` declarations](#use-declarations)\n \n ##### Extern mod declarations\n@@ -770,7 +770,7 @@ link_attrs : link_attr [ ',' link_attrs ] + ;\n link_attr : ident '=' literal ;\n ~~~~\n \n-An _`extern mod` declaration_ specifies a dependency on an external crate.\n+An _`extern crate` declaration_ specifies a dependency on an external crate.\n The external crate is then bound into the declaring scope\n as the `ident` provided in the `extern_mod_decl`.\n \n@@ -782,16 +782,16 @@ against the `crateid` attributes that were declared on the external crate when\n it was compiled.  If no `crateid` is provided, a default `name` attribute is\n assumed, equal to the `ident` given in the `extern_mod_decl`.\n \n-Four examples of `extern mod` declarations:\n+Four examples of `extern crate` declarations:\n \n ~~~~ {.ignore}\n-extern mod pcre;\n+extern crate pcre;\n \n-extern mod extra; // equivalent to: extern mod extra = \"extra\";\n+extern crate extra; // equivalent to: extern crate extra = \"extra\";\n \n-extern mod rustextra = \"extra\"; // linking to 'extra' under another name\n+extern crate rustextra = \"extra\"; // linking to 'extra' under another name\n \n-extern mod foo = \"some/where/rust-foo#foo:1.0\"; // a full package ID for external tools\n+extern crate foo = \"some/where/rust-foo#foo:1.0\"; // a full package ID for external tools\n ~~~~\n \n ##### Use declarations\n@@ -813,7 +813,7 @@ module item. These declarations may appear at the top of [modules](#modules) and\n \n *Note*: Unlike in many languages,\n `use` declarations in Rust do *not* declare linkage dependency with external crates.\n-Rather, [`extern mod` declarations](#extern-mod-declarations) declare linkage dependencies.\n+Rather, [`extern crate` declarations](#extern-mod-declarations) declare linkage dependencies.\n \n Use declarations support a number of convenient shortcuts:\n \n@@ -869,7 +869,7 @@ This also means that top-level module declarations should be at the crate root i\n of the declared modules within `use` items is desired.  It is also possible to use `self` and `super`\n at the beginning of a `use` item to refer to the current and direct parent modules respectively.\n All rules regarding accessing declared modules in `use` declarations applies to both module declarations\n-and `extern mod` declarations.\n+and `extern crate` declarations.\n \n An example of what will and will not work for `use` items:\n \n@@ -879,7 +879,7 @@ use foo::extra;          // good: foo is at the root of the crate\n use foo::baz::foobaz;    // good: foo is at the root of the crate\n \n mod foo {\n-    extern mod extra;\n+    extern crate extra;\n \n     use foo::extra::time;  // good: foo is at crate root\n //  use extra::*;          // bad:  extra is not at the crate root"}, {"sha": "83d1275ab970f00df1964bd12aaf0407cd445733", "filename": "src/doc/rustdoc.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Frustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Frustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc.md?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -53,7 +53,7 @@ struct Whizbang;\n \n To generate the docs, run `rustdoc universe.rs`. By default, it generates a\n directory called `doc`, with the documentation for `universe` being in\n-`doc/universe/index.html`. If you are using other crates with `extern mod`,\n+`doc/universe/index.html`. If you are using other crates with `extern crate`,\n rustdoc will even link to them when you use their types, as long as their\n documentation has already been generated by a previous run of rustdoc, or the\n crate advertises that its documentation is hosted at a given URL.\n@@ -176,7 +176,7 @@ rustdoc --test lib.rs --test-args '--ignored'\n \n When testing a library, code examples will often show how functions are used,\n and this code often requires `use`-ing paths from the crate. To accomodate this,\n-rustdoc will implicitly add `extern mod <crate>;` where `<crate>` is the name of\n+rustdoc will implicitly add `extern crate <crate>;` where `<crate>` is the name of\n the crate being tested to the top of each code example. This means that rustdoc\n must be able to find a compiled version of the library crate being tested. Extra\n search paths may be added via the `-L` flag to `rustdoc`."}, {"sha": "d5181f4cea42946e0ad1de907b47b248ee851dd4", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -2581,7 +2581,7 @@ As you can see, your module hierarchy is now three modules deep: There is the cr\n function, and the module `farm`. The module `farm` also contains two functions and a third module `barn`,\n which contains a function `hay`.\n \n-(In case you already stumbled over `extern mod`: It isn't directly related to a bare `mod`, we'll get to it later. )\n+(In case you already stumbled over `extern crate`: It isn't directly related to a bare `mod`, we'll get to it later. )\n \n ## Paths and visibility\n \n@@ -3018,10 +3018,10 @@ as there really is no reason to start from scratch each time you start a new pro\n \n In Rust terminology, we need a way to refer to other crates.\n \n-For that, Rust offers you the `extern mod` declaration:\n+For that, Rust offers you the `extern crate` declaration:\n \n ~~~\n-extern mod num;\n+extern crate num;\n // `num` ships with Rust (much like `extra`; more details further down).\n \n fn main() {\n@@ -3030,28 +3030,28 @@ fn main() {\n }\n ~~~\n \n-Despite its name, `extern mod` is a distinct construct from regular `mod` declarations:\n-A statement of the form `extern mod foo;` will cause `rustc` to search for the crate `foo`,\n+Despite its name, `extern crate` is a distinct construct from regular `mod` declarations:\n+A statement of the form `extern crate foo;` will cause `rustc` to search for the crate `foo`,\n and if it finds a matching binary it lets you use it from inside your crate.\n \n The effect it has on your module hierarchy mirrors aspects of both `mod` and `use`:\n \n - Like `mod`, it causes `rustc` to actually emit code:\n   The linkage information the binary needs to use the library `foo`.\n \n-- But like `use`, all `extern mod` statements that refer to the same library are interchangeable,\n+- But like `use`, all `extern crate` statements that refer to the same library are interchangeable,\n   as each one really just presents an alias to an external module (the crate root of the library\n   you're linking against).\n \n Remember how `use`-statements have to go before local declarations because the latter shadows the former?\n-Well, `extern mod` statements also have their own rules in that regard:\n-Both `use` and local declarations can shadow them, so the rule is that `extern mod` has to go in front\n+Well, `extern crate` statements also have their own rules in that regard:\n+Both `use` and local declarations can shadow them, so the rule is that `extern crate` has to go in front\n of both `use` and local declarations.\n \n Which can result in something like this:\n \n ~~~\n-extern mod num;\n+extern crate num;\n \n use farm::dog;\n use num::rational::Ratio;\n@@ -3071,7 +3071,7 @@ they model most closely what people expect to shadow.\n \n ## Package ids\n \n-If you use `extern mod`, per default `rustc` will look for libraries in the library search path (which you can\n+If you use `extern crate`, per default `rustc` will look for libraries in the library search path (which you can\n extend with the `-L` switch).\n \n ## Crate metadata and settings\n@@ -3098,14 +3098,14 @@ Therefore, if you plan to compile your crate as a library, you should annotate i\n # fn farm() {}\n ~~~~\n \n-You can also specify package ID information in a `extern mod` statement.  For\n-example, these `extern mod` statements would both accept and select the\n+You can also specify package ID information in a `extern crate` statement.  For\n+example, these `extern crate` statements would both accept and select the\n crate define above:\n \n ~~~~ {.ignore}\n-extern mod farm;\n-extern mod farm = \"farm#2.5\";\n-extern mod my_farm = \"farm\";\n+extern crate farm;\n+extern crate farm = \"farm#2.5\";\n+extern crate my_farm = \"farm\";\n ~~~~\n \n Other crate settings and metadata include things like enabling/disabling certain errors or warnings,\n@@ -3133,14 +3133,14 @@ We define two crates, and use one of them as a library in the other.\n ~~~~\n // `world.rs`\n #[crate_id = \"world#0.42\"];\n-# extern mod extra;\n+# extern crate extra;\n pub fn explore() -> &'static str { \"world\" }\n # fn main() {}\n ~~~~\n \n ~~~~ {.ignore}\n // `main.rs`\n-extern mod world;\n+extern crate world;\n fn main() { println!(\"hello {}\", world::explore()); }\n ~~~~\n \n@@ -3169,7 +3169,7 @@ in the `std` library, which is a crate that ships with Rust.\n The only magical thing that happens is that `rustc` automatically inserts this line into your crate root:\n \n ~~~ {.ignore}\n-extern mod std;\n+extern crate std;\n ~~~\n \n As well as this line into every module body:\n@@ -3221,7 +3221,7 @@ See the [API documentation][stddoc] for details.\n \n Rust ships with crates such as the [extra library], an accumulation of useful things,\n that are however not important enough to deserve a place in the standard\n-library.  You can link to a library such as `extra` with an `extern mod extra;`.\n+library.  You can link to a library such as `extra` with an `extern crate extra;`.\n \n [extra library]: extra/index.html\n "}, {"sha": "06008d16f5db0c9de3ac3fd8505a8a4f7df612d6", "filename": "src/doc/version_info.html.template", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fversion_info.html.template", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdoc%2Fversion_info.html.template", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fversion_info.html.template?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -3,4 +3,4 @@\n   <span class=\"white-sticker\"><a href=\"http://rust-lang.org\">Rust</a> VERSION</span><br>\n   <a href=\"http://github.com/mozilla/rust/commit/STAMP\"\n     class=\"hash white-sticker\">SHORT_HASH</a>\n-</div>\n\\ No newline at end of file\n+</div>"}, {"sha": "ca462fc7a39226b9386b3775e0a5431248655949", "filename": "src/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fdriver.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n #[cfg(rustdoc)]\n-extern mod this = \"rustdoc\";\n+extern crate this = \"rustdoc\";\n \n #[cfg(rustc)]\n-extern mod this = \"rustc\";\n+extern crate this = \"rustc\";\n \n fn main() { this::main() }"}, {"sha": "c972392a4a0b3167604eb7d3d259db5280ac3026", "filename": "src/etc/combine-tests.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fetc%2Fcombine-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fetc%2Fcombine-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcombine-tests.py?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -71,8 +71,8 @@ def scrub(b):\n \"\"\"\n // AUTO-GENERATED FILE: DO NOT EDIT\n #[feature(globs, managed_boxes)];\n-extern mod extra;\n-extern mod run_pass_stage2;\n+extern crate extra;\n+extern crate run_pass_stage2;\n use run_pass_stage2::*;\n use std::io;\n use std::io::Writer;"}, {"sha": "4e1c74c31df919f35d454f4c7e50784aba9c72cb", "filename": "src/etc/emacs/rust-mode.el", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fetc%2Femacs%2Frust-mode.el", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fetc%2Femacs%2Frust-mode.el", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Femacs%2Frust-mode.el?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -129,8 +129,7 @@\n (defconst rust-mode-keywords\n   '(\"as\"\n     \"break\"\n-    \"continue\"\n-    \"crate\"\n+    \"continue\" \"crate\"\n     \"do\"\n     \"else\" \"enum\" \"extern\"\n     \"false\" \"fn\" \"for\"\n@@ -368,7 +367,7 @@ With argument, do it that many times.\n Negative argument -N means move back to Nth preceding end of defun.\n \n Assume that this is called after beginning-of-defun. So point is\n-at the beginning of the defun body. \n+at the beginning of the defun body.\n \n This is written mainly to be used as `end-of-defun-function' for Rust.\"\n   (interactive \"p\")"}, {"sha": "2900023ea2b43fd2f599cfe8f6cf422382e821d0", "filename": "src/etc/extract-tests.py", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fetc%2Fextract-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fetc%2Fextract-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fextract-tests.py?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -28,7 +28,7 @@\n COMMENT_REGEX = re.compile(r'^# ')\n COMPILER_DIRECTIVE_REGEX = re.compile(r'\\#\\[(.*)\\];')\n ELLIPSES_REGEX = re.compile(r'\\.\\.\\.')\n-EXTERN_MOD_REGEX = re.compile(r'\\bextern mod extra\\b')\n+EXTERN_CRATE_REGEX = re.compile(r'\\bextern crate extra\\b')\n MAIN_FUNCTION_REGEX = re.compile(r'\\bfn main\\b')\n TAGS_REGEX = re.compile(r'\\.([\\w-]*)')\n \n@@ -49,12 +49,12 @@\n \n def add_extern_mod(block):\n     if not has_extern_mod(block):\n-        # add `extern mod extra;` after compiler directives\n+        # add `extern crate extra;` after compiler directives\n         directives = []\n         while len(block) and is_compiler_directive(block[0]):\n             directives.append(block.popleft())\n \n-        block.appendleft(\"\\nextern mod extra;\\n\\n\")\n+        block.appendleft(\"\\nextern crate extra;\\n\\n\")\n         block.extendleft(reversed(directives))\n \n     return block\n@@ -112,8 +112,8 @@ def extract_code_fragments(dest_dir, lines):\n \n \n def has_extern_mod(block):\n-    \"\"\"Checks if a code block has the line `extern mod extra`.\"\"\"\n-    find_extern_mod = lambda x: re.search(EXTERN_MOD_REGEX, x)\n+    \"\"\"Checks if a code block has the line `extern crate extra`.\"\"\"\n+    find_extern_mod = lambda x: re.search(EXTERN_CRATE_REGEX, x)\n     return any(imap(find_extern_mod, block))\n \n "}, {"sha": "ecf58d55576cfcbbf415a5fb5d5de78acff6a84d", "filename": "src/etc/generate-deriving-span-tests.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fetc%2Fgenerate-deriving-span-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fetc%2Fgenerate-deriving-span-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgenerate-deriving-span-tests.py?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -38,7 +38,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n {error_deriving}\n struct Error;"}, {"sha": "d827e45eddb8777d79424d2b97b17170ae109ebb", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -22,9 +22,7 @@\n #[allow(missing_doc)];\n #[feature(managed_boxes)];\n \n-extern mod collections;\n-\n-#[cfg(test)] extern mod extra;\n+extern crate collections;\n \n use collections::list::{List, Cons, Nil};\n use collections::list;\n@@ -506,8 +504,9 @@ impl<T> Drop for TypedArena<T> {\n \n #[cfg(test)]\n mod test {\n+    extern crate extra;\n     use super::{Arena, TypedArena};\n-    use extra::test::BenchHarness;\n+    use self::extra::test::BenchHarness;\n \n     struct Point {\n         x: int,"}, {"sha": "e97eeac4f6628b4ce84f7c04ac3b58f5db42c384", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -19,9 +19,8 @@\n \n #[feature(macro_rules, managed_boxes)];\n \n-#[cfg(test)] extern mod extra;\n-\n-extern mod serialize;\n+extern crate serialize;\n+#[cfg(test)] extern crate extra; // benchmark tests need this\n \n pub use bitv::Bitv;\n pub use btree::BTree;\n@@ -43,4 +42,4 @@ pub mod lru_cache;\n pub mod priority_queue;\n pub mod ringbuf;\n pub mod smallintmap;\n-pub mod treemap;\n\\ No newline at end of file\n+pub mod treemap;"}, {"sha": "a0ca9eca1bda862b8ef39414670cf227e088c864", "filename": "src/libextra/json.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -59,7 +59,7 @@ the code for these traits: `#[deriving(Decodable, Encodable)]`\n To encode using Encodable :\n \n ```rust\n-extern mod serialize;\n+extern crate serialize;\n use extra::json;\n use std::io;\n use serialize::Encodable;\n@@ -98,7 +98,7 @@ A basic `ToJson` example using a TreeMap of attribute name / attribute value:\n \n \n ```rust\n-extern mod collections;\n+extern crate collections;\n \n use extra::json;\n use extra::json::ToJson;\n@@ -128,7 +128,7 @@ fn main() {\n To decode a json string using `Decodable` trait :\n \n ```rust\n-extern mod serialize;\n+extern crate serialize;\n use serialize::Decodable;\n \n #[deriving(Decodable)]\n@@ -154,7 +154,7 @@ Create a struct called TestStruct1 and serialize and deserialize it to and from\n using the serialization API, using the derived serialization code.\n \n ```rust\n-extern mod serialize;\n+extern crate serialize;\n use extra::json;\n use serialize::{Encodable, Decodable};\n \n@@ -186,8 +186,8 @@ This example use the ToJson impl to unserialize the json string.\n Example of `ToJson` trait implementation for TestStruct1.\n \n ```rust\n-extern mod serialize;\n-extern mod collections;\n+extern crate serialize;\n+extern crate collections;\n \n use extra::json;\n use extra::json::ToJson;"}, {"sha": "be7aa216e30243d845ecdf17adc337b4dcf16203", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -34,10 +34,10 @@ Rust extras are part of the standard Rust distribution.\n #[deny(non_camel_case_types)];\n #[deny(missing_doc)];\n \n-extern mod sync;\n-extern mod serialize;\n+extern crate sync;\n+extern crate serialize;\n \n-extern mod collections;\n+extern crate collections;\n \n // Utility modules\n "}, {"sha": "07327227d8504fd7b39fa9c45959a214afdc6adb", "filename": "src/libextra/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -15,8 +15,8 @@\n // simplest interface possible for representing and running tests\n // while providing a base that other test frameworks may build off of.\n \n-extern mod getopts;\n-extern mod term;\n+extern crate getopts;\n+extern crate term;\n \n use json::ToJson;\n use json;"}, {"sha": "270416305dd1c793a8f967eea51d57f74a39e6db", "filename": "src/libfourcc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibfourcc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibfourcc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfourcc%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -23,7 +23,7 @@ To load the extension and use it:\n \n ```rust,ignore\n #[phase(syntax)]\n-extern mod fourcc;\n+extern crate fourcc;\n \n fn main() {\n     let val = fourcc!(\"\\xC0\\xFF\\xEE!\");\n@@ -46,7 +46,7 @@ fn main() {\n \n #[feature(macro_registrar, managed_boxes)];\n \n-extern mod syntax;\n+extern crate syntax;\n \n use syntax::ast;\n use syntax::ast::Name;"}, {"sha": "537c2d40c66bf0439da823b718bd8e4b8336f475", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -30,7 +30,7 @@\n //! file name following `-o`, and accepts both `-h` and `--help` as optional flags.\n //!\n //! ~~~{.rust}\n-//! extern mod getopts;\n+//! extern crate getopts;\n //! use getopts::{optopt,optflag,getopts,OptGroup};\n //! use std::os;\n //!"}, {"sha": "8758eb1179ef91dd5005fedab407860d58d223d0", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -113,7 +113,7 @@\n //! # Starting with libgreen\n //!\n //! ```rust\n-//! extern mod green;\n+//! extern crate green;\n //!\n //! #[start]\n //! fn start(argc: int, argv: **u8) -> int { green::start(argc, argv, main) }"}, {"sha": "c28a1175494f938957e454ffbaba7c3e8a498fec", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -17,7 +17,7 @@\n //! # Starting with libnative\n //!\n //! ```rust\n-//! extern mod native;\n+//! extern crate native;\n //!\n //! #[start]\n //! fn start(argc: int, argv: **u8) -> int { native::start(argc, argv, main) }\n@@ -30,7 +30,7 @@\n //! # Force spawning a native task\n //!\n //! ```rust\n-//! extern mod native;\n+//! extern crate native;\n //!\n //! fn main() {\n //!     // We're not sure whether this main function is run in 1:1 or M:N mode."}, {"sha": "8d5338451bd93bbcd708dc7f6ac5cb8bba45b975", "filename": "src/libnum/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibnum%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibnum%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -15,7 +15,7 @@\n #[crate_type = \"dylib\"];\n #[license = \"MIT/ASL2\"];\n \n-extern mod extra;\n+extern crate extra;\n \n pub mod bigint;\n pub mod rational;"}, {"sha": "be9fcf4a1e9ae87ef608e4f192d106dc3372f9c5", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -275,7 +275,7 @@ We're going to be building a module that looks more or less like:\n \n mod __test {\n   #[!resolve_unexported]\n-  extern mod extra (name = \"extra\", vers = \"...\");\n+  extern crate extra (name = \"extra\", vers = \"...\");\n   fn main() {\n     #[main];\n     extra::test::test_main_static(::os::args(), tests)"}, {"sha": "0d615fe19928bd7a0ea897f5bc5ff26a174ccc43", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -31,14 +31,14 @@ This API is completely unstable and subject to change.\n #[allow(unknown_features)]; // Note: remove it after a snapshot.\n #[feature(quote)];\n \n-extern mod extra;\n-extern mod flate;\n-extern mod arena;\n-extern mod syntax;\n-extern mod serialize;\n-extern mod sync;\n-extern mod getopts;\n-extern mod collections;\n+extern crate extra;\n+extern crate flate;\n+extern crate arena;\n+extern crate syntax;\n+extern crate serialize;\n+extern crate sync;\n+extern crate getopts;\n+extern crate collections;\n \n use back::link;\n use driver::session;"}, {"sha": "901e8982c83d2502a499276cf081f5a013466314", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -169,7 +169,7 @@ fn extract_crate_info(i: &ast::ViewItem) -> Option<CrateInfo> {\n     match i.node {\n         ast::ViewItemExternMod(ident, ref path_opt, id) => {\n             let ident = token::get_ident(ident);\n-            debug!(\"resolving extern mod stmt. ident: {:?} path_opt: {:?}\",\n+            debug!(\"resolving extern crate stmt. ident: {:?} path_opt: {:?}\",\n                    ident, path_opt);\n             let (name, version) = match *path_opt {\n                 Some((ref path_str, _)) => {"}, {"sha": "4febde6d443e0325c23e3fa29e0cf937dd7d0429", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -69,7 +69,7 @@ pub struct CStore {\n     intr: @IdentInterner\n }\n \n-// Map from NodeId's of local extern mod statements to crate numbers\n+// Map from NodeId's of local extern crate statements to crate numbers\n type extern_mod_crate_map = HashMap<ast::NodeId, ast::CrateNum>;\n \n impl CStore {"}, {"sha": "1d28c781ea0c80019d0326a85eb36e181a9ff55a", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -418,7 +418,7 @@ struct Module {\n     imports: RefCell<~[@ImportDirective]>,\n \n     // The external module children of this node that were declared with\n-    // `extern mod`.\n+    // `extern crate`.\n     external_module_children: RefCell<HashMap<Name, @Module>>,\n \n     // The anonymous children of this node. Anonymous children are pseudo-\n@@ -2679,7 +2679,7 @@ impl Resolver {\n                         };\n                         self.resolve_error(span,\n                                               format!(\"unresolved import. maybe \\\n-                                                    a missing `extern mod \\\n+                                                    a missing `extern crate \\\n                                                     {}`?\",\n                                                     segment_name));\n                         return Failed;"}, {"sha": "c7c4aae35e3f3c27aa910acd61e836fb1dd861c8", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -1021,7 +1021,7 @@ fn item_module(w: &mut Writer, cx: &Context,\n             clean::ViewItemItem(ref item) => {\n                 match item.inner {\n                     clean::ExternMod(ref name, ref src, _) => {\n-                        if_ok!(write!(w, \"<tr><td><code>extern mod {}\",\n+                        if_ok!(write!(w, \"<tr><td><code>extern crate {}\",\n                                       name.as_slice()));\n                         match *src {\n                             Some(ref src) => if_ok!(write!(w, \" = \\\"{}\\\"\","}, {"sha": "e9072fb37bb95a5bb1229178068d58e58a8b4f39", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -15,13 +15,13 @@\n \n #[feature(globs, struct_variant, managed_boxes)];\n \n-extern mod syntax;\n-extern mod rustc;\n-extern mod extra;\n-extern mod serialize;\n-extern mod sync;\n-extern mod getopts;\n-extern mod collections;\n+extern crate syntax;\n+extern crate rustc;\n+extern crate extra;\n+extern crate serialize;\n+extern crate sync;\n+extern crate getopts;\n+extern crate collections;\n \n use std::local_data;\n use std::io;"}, {"sha": "4b32cdb77eabd406f2b9e7efb3eff2d652b79990", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -144,10 +144,10 @@ fn maketest(s: &str, cratename: &str) -> ~str {\n #[allow(unused_variable, dead_assignment, unused_mut, attribute_usage, dead_code)];\n \";\n     if s.contains(\"extra\") {\n-        prog.push_str(\"extern mod extra;\\n\");\n+        prog.push_str(\"extern crate extra;\\n\");\n     }\n     if s.contains(cratename) {\n-        prog.push_str(format!(\"extern mod {};\\n\", cratename));\n+        prog.push_str(format!(\"extern crate {};\\n\", cratename));\n     }\n     if s.contains(\"fn main\") {\n         prog.push_str(s);"}, {"sha": "e44f65296f5cc7e96cc6d2a4bafeeff174fdc531", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -42,7 +42,7 @@ via `close` and `delete` methods.\n #[feature(macro_rules)];\n #[deny(unused_result, unused_must_use)];\n \n-#[cfg(test)] extern mod green;\n+#[cfg(test)] extern crate green;\n \n use std::cast;\n use std::io;"}, {"sha": "918c5e85857db2b6d950c6f50fd61829e4601d42", "filename": "src/libserialize/base64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibserialize%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibserialize%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fbase64.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -63,7 +63,7 @@ impl<'a> ToBase64 for &'a [u8] {\n      * # Example\n      *\n      * ```rust\n-     * extern mod serialize;\n+     * extern crate serialize;\n      * use serialize::base64::{ToBase64, STANDARD};\n      *\n      * fn main () {\n@@ -189,7 +189,7 @@ impl<'a> FromBase64 for &'a str {\n      * This converts a string literal to base64 and back.\n      *\n      * ```rust\n-     * extern mod serialize;\n+     * extern crate serialize;\n      * use serialize::base64::{ToBase64, FromBase64, STANDARD};\n      * use std::str;\n      *"}, {"sha": "08a3dda854e3aed0ed93c62a2a3b2e8b8e2dcc4c", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -28,7 +28,7 @@ impl<'a> ToHex for &'a [u8] {\n      * # Example\n      *\n      * ```rust\n-     * extern mod serialize;\n+     * extern crate serialize;\n      * use serialize::hex::ToHex;\n      *\n      * fn main () {\n@@ -89,7 +89,7 @@ impl<'a> FromHex for &'a str {\n      * This converts a string literal to hexadecimal and back.\n      *\n      * ```rust\n-     * extern mod serialize;\n+     * extern crate serialize;\n      * use serialize::hex::{FromHex, ToHex};\n      * use std::str;\n      *"}, {"sha": "7a4b1cff6e47c0643e61867d0c65e699979cd551", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -24,7 +24,7 @@ Core encoding and decoding interfaces.\n \n // test harness access\n #[cfg(test)]\n-extern mod extra;\n+extern crate extra;\n \n pub use self::serialize::{Decoder, Encoder, Decodable, Encodable,\n     DecoderHelpers, EncoderHelpers};"}, {"sha": "1ac599d0654fbd0e162982f839c4af6e265b6c0c", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -56,7 +56,7 @@ use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n use clone::Clone;\n use cmp::{Eq, Equiv, max};\n use default::Default;\n-#[cfg(not(stage0))] use fmt;\n+use fmt;\n use hash::Hash;\n use iter;\n use iter::{Iterator, FromIterator, Extendable};\n@@ -66,7 +66,7 @@ use num;\n use option::{None, Option, Some};\n use rand::Rng;\n use rand;\n-#[cfg(not(stage0))] use result::{Ok, Err};\n+use result::{Ok, Err};\n use vec::{ImmutableVector, MutableVector, OwnedVector, Items, MutItems};\n use vec_ng;\n use vec_ng::Vec;\n@@ -597,7 +597,6 @@ impl<K:Hash + Eq + Clone,V:Clone> Clone for HashMap<K,V> {\n     }\n }\n \n-#[cfg(not(stage0))]\n impl<A: fmt::Show + Hash + Eq, B: fmt::Show> fmt::Show for HashMap<A, B> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         if_ok!(write!(f.buf, r\"\\{\"))\n@@ -876,7 +875,6 @@ impl<T:Hash + Eq + Clone> Clone for HashSet<T> {\n     }\n }\n \n-#[cfg(not(stage0))]\n impl<A: fmt::Show + Hash + Eq> fmt::Show for HashSet<A> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         if_ok!(write!(f.buf, r\"\\{\"))"}, {"sha": "4452482b7e8ceee4c6c3ced6498d055de746c9ee", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -30,7 +30,7 @@\n //! `std` is imported at the topmost level of every crate by default, as\n //! if the first line of each crate was\n //!\n-//!     extern mod std;\n+//!     extern crate std;\n //!\n //! This means that the contents of std can be accessed from any context\n //! with the `std::` path prefix, as in `use std::vec`, `use std::task::spawn`,\n@@ -64,15 +64,15 @@\n // When testing libstd, bring in libuv as the I/O backend so tests can print\n // things and all of the std::io tests have an I/O interface to run on top\n // of\n-#[cfg(test)] extern mod rustuv = \"rustuv\";\n-#[cfg(test)] extern mod native = \"native\";\n-#[cfg(test)] extern mod green = \"green\";\n+#[cfg(test)] extern crate rustuv = \"rustuv\";\n+#[cfg(test)] extern crate native = \"native\";\n+#[cfg(test)] extern crate green = \"green\";\n \n // Make extra accessible for benchmarking\n-#[cfg(test)] extern mod extra = \"extra\";\n+#[cfg(test)] extern crate extra = \"extra\";\n \n // Make std testable by not duplicating lang items. See #2912\n-#[cfg(test)] extern mod realstd = \"std\";\n+#[cfg(test)] extern crate realstd = \"std\";\n #[cfg(test)] pub use kinds = realstd::kinds;\n #[cfg(test)] pub use ops = realstd::ops;\n #[cfg(test)] pub use cmp = realstd::cmp;"}, {"sha": "94f56d42613fd7ee26158db6bb4df7ec6fd8e44b", "filename": "src/libstd/rt/env.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibstd%2Frt%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibstd%2Frt%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fenv.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,8 +10,6 @@\n \n //! Runtime environment settings\n \n-// NOTE: remove `POISON_ON_FREE` after a snapshot\n-\n use from_str::from_str;\n use option::{Some, None};\n use os;\n@@ -23,7 +21,6 @@ static mut MIN_STACK: uint = 2 * 1024 * 1024;\n /// This default corresponds to 20M of cache per scheduler (at the default size).\n static mut MAX_CACHED_STACKS: uint = 10;\n static mut DEBUG_BORROW: bool = false;\n-static mut POISON_ON_FREE: bool = false;\n \n pub fn init() {\n     unsafe {\n@@ -43,10 +40,6 @@ pub fn init() {\n             Some(_) => DEBUG_BORROW = true,\n             None => ()\n         }\n-        match os::getenv(\"RUST_POISON_ON_FREE\") {\n-            Some(_) => POISON_ON_FREE = true,\n-            None => ()\n-        }\n     }\n }\n \n@@ -61,7 +54,3 @@ pub fn max_cached_stacks() -> uint {\n pub fn debug_borrow() -> bool {\n     unsafe { DEBUG_BORROW }\n }\n-\n-pub fn poison_on_free() -> bool {\n-    unsafe { POISON_ON_FREE }\n-}"}, {"sha": "f3474b9401e1a2562db2549d7e24abc08930a0d5", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -17,7 +17,6 @@ use ops::Drop;\n use option::{Option, None, Some};\n use ptr;\n use ptr::RawPtr;\n-use rt::env;\n use rt::global_heap;\n use rt::local::Local;\n use rt::task::Task;\n@@ -41,7 +40,6 @@ pub struct MemoryRegion {\n pub struct LocalHeap {\n     priv memory_region: MemoryRegion,\n \n-    priv poison_on_free: bool,\n     priv live_allocs: *mut raw::Box<()>,\n }\n \n@@ -54,7 +52,6 @@ impl LocalHeap {\n         };\n         LocalHeap {\n             memory_region: region,\n-            poison_on_free: env::poison_on_free(),\n             live_allocs: ptr::mut_null(),\n         }\n     }"}, {"sha": "9d0cc6022afdc9224b3b2d7ffc9d5781afc09ba2", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -109,14 +109,14 @@ use container::{Container, Mutable};\n use cmp::{Eq, TotalOrd, Ordering, Less, Equal, Greater};\n use cmp;\n use default::Default;\n-#[cfg(not(stage0))] use fmt;\n+use fmt;\n use iter::*;\n use num::{Integer, CheckedAdd, Saturating, checked_next_power_of_two};\n use option::{None, Option, Some};\n use ptr;\n use ptr::RawPtr;\n use rt::global_heap::{malloc_raw, realloc_raw, exchange_free};\n-#[cfg(not(stage0))] use result::{Ok, Err};\n+use result::{Ok, Err};\n use mem;\n use mem::size_of;\n use kinds::marker;\n@@ -2643,7 +2643,6 @@ impl<A: DeepClone> DeepClone for ~[A] {\n     }\n }\n \n-#[cfg(not(stage0))]\n impl<'a, T: fmt::Show> fmt::Show for &'a [T] {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         if_ok!(write!(f.buf, \"[\"));\n@@ -2660,7 +2659,6 @@ impl<'a, T: fmt::Show> fmt::Show for &'a [T] {\n     }\n }\n \n-#[cfg(not(stage0))]\n impl<T: fmt::Show> fmt::Show for ~[T] {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         self.as_slice().fmt(f)"}, {"sha": "8489773bd881424bc2e535a6170f3ad931cea75c", "filename": "src/libsync/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibsync%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibsync%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fsync%2Fmutex.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -495,7 +495,7 @@ impl Drop for Mutex {\n \n #[cfg(test)]\n mod test {\n-    extern mod native;\n+    extern crate native;\n     use super::{Mutex, StaticMutex, MUTEX_INIT};\n \n     #[test]"}, {"sha": "a3025d394dab5a99983e33d2f1a6544bac7673ee", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -1058,7 +1058,7 @@ pub enum ViewItem_ {\n     // ident: name used to refer to this crate in the code\n     // optional (InternedString,StrStyle): if present, this is a location\n     // (containing arbitrary characters) from which to fetch the crate sources\n-    // For example, extern mod whatever = \"github.com/mozilla/rust\"\n+    // For example, extern crate whatever = \"github.com/mozilla/rust\"\n     ViewItemExternMod(Ident, Option<(InternedString,StrStyle)>, NodeId),\n     ViewItemUse(~[@ViewPath]),\n }"}, {"sha": "3cbdad9a71d7e29532b96f9e380f16fc3f04eccf", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -32,10 +32,10 @@ This API is completely unstable and subject to change.\n \n #[deny(non_camel_case_types)];\n \n-#[cfg(test)] extern mod extra;\n-extern mod serialize;\n-extern mod term;\n-extern mod collections;\n+#[cfg(test)] extern crate extra;\n+extern crate serialize;\n+extern crate term;\n+extern crate collections;\n \n pub mod util {\n     pub mod interner;"}, {"sha": "6cde22fad107cfa293333bf5251eb6e93020585c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -4528,7 +4528,7 @@ impl Parser {\n     // parse one of the items or view items allowed by the\n     // flags; on failure, return IoviNone.\n     // NB: this function no longer parses the items inside an\n-    // extern mod.\n+    // extern crate.\n     fn parse_item_or_view_item(&mut self,\n                                attrs: ~[Attribute],\n                                macros_allowed: bool)\n@@ -4566,13 +4566,12 @@ impl Parser {\n             let next_is_mod = self.eat_keyword(keywords::Mod);\n \n             if next_is_mod || self.eat_keyword(keywords::Crate) {\n-                // NOTE(flaper87): Uncomment this when this changes gets into stage0\n-                //\n-                // if next_is_mod {\n-                //    self.span_err(self.span,\n-                //                   format!(\"`extern mod` is obsolete, use `extern crate` instead \\\n-                //                           to refer to external crates.\"))\n-                // }\n+                if next_is_mod {\n+                   self.span_err(mk_sp(lo, self.last_span.hi),\n+                                 format!(\"`extern mod` is obsolete, use \\\n+                                          `extern crate` instead \\\n+                                          to refer to external crates.\"))\n+                }\n                 return self.parse_item_extern_crate(lo, visibility, attrs);\n             }\n \n@@ -4971,7 +4970,7 @@ impl Parser {\n         let mut items = ~[];\n \n         // I think this code would probably read better as a single\n-        // loop with a mutable three-state-variable (for extern mods,\n+        // loop with a mutable three-state-variable (for extern crates,\n         // view items, and regular items) ... except that because\n         // of macros, I'd like to delay that entire check until later.\n         loop {\n@@ -4987,12 +4986,12 @@ impl Parser {\n                 IoviViewItem(view_item) => {\n                     match view_item.node {\n                         ViewItemUse(..) => {\n-                            // `extern mod` must precede `use`.\n+                            // `extern crate` must precede `use`.\n                             extern_mod_allowed = false;\n                         }\n                         ViewItemExternMod(..) if !extern_mod_allowed => {\n                             self.span_err(view_item.span,\n-                                          \"\\\"extern mod\\\" declarations are not allowed here\");\n+                                          \"\\\"extern crate\\\" declarations are not allowed here\");\n                         }\n                         ViewItemExternMod(..) => {}\n                     }\n@@ -5020,7 +5019,7 @@ impl Parser {\n                 IoviViewItem(view_item) => {\n                     attrs = self.parse_outer_attributes();\n                     self.span_err(view_item.span,\n-                                  \"`use` and `extern mod` declarations must precede items\");\n+                                  \"`use` and `extern crate` declarations must precede items\");\n                 }\n                 IoviItem(item) => {\n                     attrs = self.parse_outer_attributes();\n@@ -5060,7 +5059,7 @@ impl Parser {\n                 IoviViewItem(view_item) => {\n                     // I think this can't occur:\n                     self.span_err(view_item.span,\n-                                  \"`use` and `extern mod` declarations must precede items\");\n+                                  \"`use` and `extern crate` declarations must precede items\");\n                 }\n                 IoviItem(item) => {\n                     // FIXME #5668: this will occur for a macro invocation:"}, {"sha": "ceaa7d1a9a151febce4ec36a07806afbbab4101c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -2061,7 +2061,7 @@ pub fn print_view_item(s: &mut State, item: &ast::ViewItem) -> io::IoResult<()>\n     if_ok!(print_visibility(s, item.vis));\n     match item.node {\n         ast::ViewItemExternMod(id, ref optional_path, _) => {\n-            if_ok!(head(s, \"extern mod\"));\n+            if_ok!(head(s, \"extern crate\"));\n             if_ok!(print_ident(s, id));\n             for &(ref p, style) in optional_path.iter() {\n                 if_ok!(space(&mut s.s));"}, {"sha": "180838d41325c38d95a56d82f9c3f13e3f4c1c56", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -61,8 +61,8 @@ Examples of string representations:\n \n // test harness access\n #[cfg(test)]\n-extern mod extra;\n-extern mod serialize;\n+extern crate extra;\n+extern crate serialize;\n \n use std::str;\n use std::vec;"}, {"sha": "f3011aaea10b9307ef2fb9b675769dda1db0f3a0", "filename": "src/snapshots.txt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fsnapshots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Fsnapshots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsnapshots.txt?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -1,3 +1,11 @@\n+S 2014-02-14 18477ac\n+  freebsd-x86_64 102df7dfab2a1c59d9e2f16a3f02f368310dd022\n+  linux-i386 fcf5891e9b3c7c9ef5ee5ea37e62089346099425\n+  linux-x86_64 d7c2df185fd2e25b4b8f5b2caad277b5ba664b81\n+  macos-i386 c15faa408339ceebbb68e952e9bf7f2624ceb9e0\n+  macos-x86_64 445c6759db5e69250b8a8631ea7751d1474e4250\n+  winnt-i386 f78a892f47627f34233e44c2ff4a00b68063a2ce\n+\n S 2014-02-12 c62f6ce\n   freebsd-x86_64 737a423c5f803119ff5a692eac432fa9d0c595a8\n   linux-i386 a7e90e27e8b6a3fa79ddc15f0ed217ccbade875d"}, {"sha": "aa263f34841bbffcc7a33ec9d889e5301a07b2c6", "filename": "src/test/auxiliary/crateresolve4b-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-1.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,6 +13,6 @@\n #[crate_id=\"crateresolve4b#0.1\"];\n #[crate_type = \"lib\"];\n \n-extern mod crateresolve4a = \"crateresolve4a#0.2\";\n+extern crate crateresolve4a = \"crateresolve4a#0.2\";\n \n pub fn f() -> int { crateresolve4a::g() }"}, {"sha": "e72a6cb163f32f54d56fb6f8e215cc403244ca1b", "filename": "src/test/auxiliary/crateresolve4b-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve4b-2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,6 +13,6 @@\n #[crate_id=\"crateresolve4b#0.2\"];\n #[crate_type = \"lib\"];\n \n-extern mod crateresolve4a = \"crateresolve4a#0.1\";\n+extern crate crateresolve4a = \"crateresolve4a#0.1\";\n \n pub fn g() -> int { crateresolve4a::f() }"}, {"sha": "5cf5c6d178d94afbfbd139d13a9ca412be981ec7", "filename": "src/test/auxiliary/crateresolve7x.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve7x.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -14,11 +14,11 @@\n \n // These both have the same version but differ in other metadata\n pub mod a {\n-    extern mod cr_1 (name = \"crateresolve_calories\", vers = \"0.1\", calories=\"100\");\n+    extern crate cr_1 (name = \"crateresolve_calories\", vers = \"0.1\", calories=\"100\");\n     pub fn f() -> int { cr_1::f() }\n }\n \n pub mod b {\n-    extern mod cr_2 (name = \"crateresolve_calories\", vers = \"0.1\", calories=\"200\");\n+    extern crate cr_2 (name = \"crateresolve_calories\", vers = \"0.1\", calories=\"200\");\n     pub fn f() -> int { cr_2::f() }\n }"}, {"sha": "54219de810707ac151bf5e7aa5b514bb598bd1dd", "filename": "src/test/auxiliary/crateresolve_calories-1.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-1.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,11 +9,6 @@\n // except according to those terms.\n \n #[crate_id=\"crateresolve_calories#0.1\"];\n-// NOTE: remove after the next snapshot\n-#[link(name = \"crateresolve_calories\",\n-       vers = \"0.1\",\n-       calories = \"100\")];\n-\n #[crate_type = \"lib\"];\n \n pub fn f() -> int { 100 }"}, {"sha": "3b949b48613e46e5b35a4bfee6ca1e279f12aaef", "filename": "src/test/auxiliary/crateresolve_calories-2.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve_calories-2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,11 +9,6 @@\n // except according to those terms.\n \n #[crate_id=\"crateresolve_calories#0.1\"];\n-// NOTE: remove after the next snapshot\n-#[link(name = \"crateresolve_calories\",\n-       vers = \"0.1\",\n-       calories = \"200\")];\n-\n #[crate_type = \"lib\"];\n \n pub fn f() -> int { 200 }"}, {"sha": "177b735ead7a106e54ea5c30d7eb855f1e0284fe", "filename": "src/test/auxiliary/issue-2414-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fissue-2414-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fissue-2414-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2414-b.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,4 +13,4 @@\n #[crate_id=\"b#0.1\"];\n #[crate_type = \"lib\"];\n \n-extern mod a;\n+extern crate a;"}, {"sha": "701c9f643ff4796cc8205529a3618de4918129c2", "filename": "src/test/auxiliary/issue-2526.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fissue-2526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2526.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n #[crate_id=\"issue_2526#0.2\"];\n #[crate_type = \"lib\"];\n \n-extern mod extra;\n+extern crate extra;\n \n struct arc_destruct<T> {\n   _data: int,"}, {"sha": "5c5a80e5d00238da52c07e208246d5d04656f8ba", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,7 +12,7 @@\n #[crate_id=\"req\"];\n #[crate_type = \"lib\"];\n \n-extern mod extra;\n+extern crate extra;\n \n use std::cell::RefCell;\n use std::hashmap::HashMap;"}, {"sha": "d1a6755c1e941e422064b12215649af0a3bf4780", "filename": "src/test/auxiliary/issue-9906.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fissue-9906.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fissue-9906.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-9906.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-fast windows doesn't like extern mod\n+// ignore-fast windows doesn't like extern crate\n // aux-build:issue-9906.rs\n \n pub use other::FooBar;"}, {"sha": "1ec6ab906968f01f1e68d865ec83e27a2e955661", "filename": "src/test/auxiliary/issue2378b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fissue2378b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fissue2378b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue2378b.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n #[crate_type = \"lib\"];\n \n-extern mod issue2378a;\n+extern crate issue2378a;\n \n use issue2378a::maybe;\n "}, {"sha": "077f39502173047077fe82d5cd11d402d21afdfe", "filename": "src/test/auxiliary/issue_2242_c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2242_c.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n #[crate_id=\"c#0.1\"];\n #[crate_type = \"lib\"];\n \n-extern mod a;\n+extern crate a;\n \n use a::to_strz;\n "}, {"sha": "36af01fe6c600e349ac9585e4d71879c03abcc21", "filename": "src/test/auxiliary/issue_2316_b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n #[allow(unused_imports)];\n #[feature(globs)];\n \n-extern mod issue_2316_a;\n+extern crate issue_2316_a;\n \n pub mod cloth {\n     use issue_2316_a::*;"}, {"sha": "1a0fb8fe62990c8dc4afdde51699c7772ffac081", "filename": "src/test/auxiliary/macro_crate_outlive_expansion_phase.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fmacro_crate_outlive_expansion_phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fmacro_crate_outlive_expansion_phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_outlive_expansion_phase.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,7 +12,7 @@\n \n #[feature(macro_registrar)];\n \n-extern mod syntax;\n+extern crate syntax;\n \n use std::any::Any;\n use std::local_data;"}, {"sha": "b8baffcfea5fcbc4c3feb562a7f91c045b3e9870", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,7 +12,7 @@\n \n #[feature(globs, macro_registrar, macro_rules, quote)];\n \n-extern mod syntax;\n+extern crate syntax;\n \n use syntax::ast::{Name, TokenTree};\n use syntax::codemap::Span;"}, {"sha": "d59d7f2a6136c87b6b489a93215776d9f3f833b2", "filename": "src/test/auxiliary/pub_use_xcrate2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fpub_use_xcrate2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Fpub_use_xcrate2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fpub_use_xcrate2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod pub_use_xcrate1;\n+extern crate pub_use_xcrate1;\n \n pub use pub_use_xcrate1::Foo;"}, {"sha": "6a8c03ec6ad349a322093d9d59b5fb672904c1fb", "filename": "src/test/auxiliary/trait_default_method_xc_aux_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux_2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:trait_default_method_xc_aux.rs\n \n-extern mod aux = \"trait_default_method_xc_aux\";\n+extern crate aux = \"trait_default_method_xc_aux\";\n use aux::A;\n \n pub struct a_struct { x: int }"}, {"sha": "61b3ccd1f54f68b53cf48435b55850ca0df4dad1", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n-extern mod collections;\n+extern crate extra;\n+extern crate collections;\n \n use extra::time;\n use collections::TreeMap;"}, {"sha": "41c48d92692a53c89a23bac28404667676677a9d", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,8 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n-extern mod collections;\n+extern crate extra;\n+extern crate collections;\n \n use collections::bitv::BitvSet;\n use collections::TreeSet;"}, {"sha": "9c29b691173963d5e407a46e51248d2ce7454e2b", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,7 +12,7 @@\n \n #[feature(macro_rules)];\n \n-extern mod extra;\n+extern crate extra;\n \n use extra::time::precise_time_s;\n use std::mem::swap;"}, {"sha": "ae1ae0a436775fa1fd1f69ca16bb708936da0d01", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -18,7 +18,7 @@\n // different scalability characteristics compared to the select\n // version.\n \n-extern mod extra;\n+extern crate extra;\n \n use std::comm;\n use std::os;"}, {"sha": "ca06e96f0c0ee918356dd5a66b56300e6a0a89b1", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -14,7 +14,7 @@\n //\n // I *think* it's the same, more or less.\n \n-extern mod extra;\n+extern crate extra;\n \n use std::os;\n use std::task;"}, {"sha": "5dcccf8d861b6ba8f4790607abb123b4487bb92f", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -15,8 +15,8 @@\n \n // This also serves as a pipes test, because Arcs are implemented with pipes.\n \n-extern mod extra;\n-extern mod sync;\n+extern crate extra;\n+extern crate sync;\n \n use sync::Arc;\n use sync::MutexArc;"}, {"sha": "3d619f2e31381d916a6874c470f5282dd9f967ee", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -15,8 +15,8 @@\n \n // This also serves as a pipes test, because Arcs are implemented with pipes.\n \n-extern mod extra;\n-extern mod sync;\n+extern crate extra;\n+extern crate sync;\n \n use sync::RWArc;\n use sync::Future;"}, {"sha": "0cecb5d752724af1cc61a836d8b6236359049e9d", "filename": "src/test/bench/rt-messaging-ping-pong.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -17,7 +17,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n \n use std::os;\n use std::uint;"}, {"sha": "0512c2a3c967c4da5947d4834fac14e41d6f050b", "filename": "src/test/bench/rt-parfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Frt-parfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Frt-parfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-parfib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n \n use std::os;\n use std::uint;"}, {"sha": "40e6a0a7beda2fe0150f2a203c80525023830636", "filename": "src/test/bench/rt-spawn-rate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Frt-spawn-rate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Frt-spawn-rate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-spawn-rate.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n \n use std::task::spawn;\n use std::os;"}, {"sha": "d308ed6a7d1d70ea21c2d5a3c2edb578476f3f22", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n \n use std::os;\n "}, {"sha": "18df07868727e1a372e1432945057d4984a4f230", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod sync;\n-extern mod arena;\n+extern crate sync;\n+extern crate arena;\n \n use std::iter::range_step;\n use sync::Future;"}, {"sha": "a6bbea0ac14da759acc2b7882e69aec2e77a6d8e", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // chameneos\n \n-extern mod extra;\n+extern crate extra;\n \n use std::option;\n use std::os;"}, {"sha": "4a4b2e8e875caf909920b0927572530ee68e1939", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n \n use std::os;\n "}, {"sha": "737e5c98214c900e3c659cebd1f026a0fdaeacf6", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,7 +13,7 @@\n // ignore-pretty the `let to_child` line gets an extra newline\n // multi tasking k-nucleotide\n \n-extern mod extra;\n+extern crate extra;\n \n use std::cmp::Ord;\n use std::comm;"}, {"sha": "9190ff69347eb4a2b5ff7403b6f56147e8891599", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-test\n \n-extern mod extra;\n+extern crate extra;\n \n use std::cast::transmute;\n use std::i32::range;"}, {"sha": "48aaa7d5b0ab07b49c093c410dbbe377c1f739f2", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -18,8 +18,8 @@\n \n */\n \n-extern mod extra;\n-extern mod getopts;\n+extern crate extra;\n+extern crate getopts;\n \n use extra::time;\n use std::os;"}, {"sha": "93ef2b7bb82510cac24c6309e894ad33c6f19911", "filename": "src/test/bench/shootout-pidigits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-pidigits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-pidigits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pidigits.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod num;\n+extern crate num;\n \n use std::from_str::FromStr;\n use std::num::One;"}, {"sha": "02b3cfae1f4fd7ea5a9badfa7c944b1f43ec48aa", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-test arcs no longer unwrap\n \n-extern mod sync;\n+extern crate sync;\n \n use std::from_str::FromStr;\n use std::iter::count;"}, {"sha": "6f9c6abea1b4703bbeb4084bdd8a91eb4c156978", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,8 +10,8 @@\n \n // Microbenchmark for the smallintmap library\n \n-extern mod extra;\n-extern mod collections;\n+extern crate extra;\n+extern crate collections;\n \n use collections::SmallIntMap;\n use std::os;"}, {"sha": "a4041ae1816444dd395a0953a4739883211ce6e5", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,7 +12,7 @@\n \n #[feature(managed_boxes)];\n \n-extern mod extra;\n+extern crate extra;\n \n use std::io;\n use std::io::stdio::StdReader;"}, {"sha": "013df3b3675d00a00bc6c3402cf2d00f9d4b4639", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,8 +10,8 @@\n \n #[feature(managed_boxes)];\n \n-extern mod extra;\n-extern mod collections;\n+extern crate extra;\n+extern crate collections;\n \n use collections::list::{List, Cons, Nil};\n use extra::time::precise_time_s;"}, {"sha": "a7a0243853018c573f7e9de31ab36c01cfa2d355", "filename": "src/test/compile-fail/ambig_impl_2_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_2_exe.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-fast aux-build\n // aux-build:ambig_impl_2_lib.rs\n-extern mod ambig_impl_2_lib;\n+extern crate ambig_impl_2_lib;\n use ambig_impl_2_lib::me;\n trait me {\n     fn me(&self) -> uint;"}, {"sha": "151f4940d5702937dbed732b640c89ba0993252c", "filename": "src/test/compile-fail/arc-cant-nest-rw-arc-3177.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Farc-cant-nest-rw-arc-3177.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Farc-cant-nest-rw-arc-3177.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-cant-nest-rw-arc-3177.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod sync;\n+extern crate sync;\n use sync::RWArc;\n \n fn main() {"}, {"sha": "71d42d46e7c5f4409cfdcef5b76561610c8fb0f1", "filename": "src/test/compile-fail/arc-rw-cond-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Farc-rw-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Farc-rw-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-cond-shouldnt-escape.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern: lifetime of return value does not outlive the function call\n-extern mod sync;\n+extern crate sync;\n use sync::RWArc;\n fn main() {\n     let x = ~RWArc::new(1);"}, {"sha": "1787cd5d0b46c47b0ed0668ffad3e3908882c4ea", "filename": "src/test/compile-fail/arc-rw-read-mode-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-read-mode-shouldnt-escape.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod sync;\n+extern crate sync;\n use sync::RWArc;\n fn main() {\n     let x = ~RWArc::new(1);"}, {"sha": "cccca050696a34682891a1c28887debcfb44788c", "filename": "src/test/compile-fail/arc-rw-state-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Farc-rw-state-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Farc-rw-state-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-state-shouldnt-escape.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod sync;\n+extern crate sync;\n use sync::RWArc;\n fn main() {\n     let x = ~RWArc::new(1);"}, {"sha": "a08cb055020a531dfc8d3321a2b33dc886f794c7", "filename": "src/test/compile-fail/arc-rw-write-mode-cond-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-cond-shouldnt-escape.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern: lifetime of variable does not enclose its declaration\n-extern mod sync;\n+extern crate sync;\n use sync::RWArc;\n fn main() {\n     let x = ~RWArc::new(1);"}, {"sha": "8f93d672b90161fd77e0aeedfc5d62f794532887", "filename": "src/test/compile-fail/arc-rw-write-mode-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-rw-write-mode-shouldnt-escape.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern: lifetime of variable does not enclose its declaration\n-extern mod sync;\n+extern crate sync;\n use sync::RWArc;\n fn main() {\n     let x = ~RWArc::new(1);"}, {"sha": "bd85141171eb4aabf37536c4dc5364512e47d676", "filename": "src/test/compile-fail/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -15,7 +15,7 @@\n // Test for traits inheriting from the builtin kinds cross-crate.\n // Mostly tests correctness of metadata.\n \n-extern mod trait_superkinds_in_metadata;\n+extern crate trait_superkinds_in_metadata;\n use trait_superkinds_in_metadata::{RequiresRequiresFreezeAndSend, RequiresFreeze};\n \n struct X<T>(T);"}, {"sha": "dcecbd5658de33e64cb8b892c187e4fb5023ad9a", "filename": "src/test/compile-fail/coherence_inherent_cc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fcoherence_inherent_cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fcoherence_inherent_cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence_inherent_cc.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -14,7 +14,7 @@\n // Tests that methods that implement a trait cannot be invoked\n // unless the trait is imported.\n \n-extern mod coherence_inherent_cc_lib;\n+extern crate coherence_inherent_cc_lib;\n \n mod Import {\n     // Trait is in scope here:"}, {"sha": "6c7722bbd254df5df8b101b9748fa013caafb29f", "filename": "src/test/compile-fail/conflicting-implementations-aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fconflicting-implementations-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fconflicting-implementations-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconflicting-implementations-aux.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,7 +12,7 @@\n // 'conflicting implementations' error message.\n \n // aux-build:trait_impl_conflict.rs\n-extern mod trait_impl_conflict;\n+extern crate trait_impl_conflict;\n use trait_impl_conflict::Foo;\n \n impl<A> Foo for A {"}, {"sha": "8c3dbda68020128c12036867b328b50b97c02f4e", "filename": "src/test/compile-fail/crateresolve1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fcrateresolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fcrateresolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcrateresolve1.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,7 +13,7 @@\n // aux-build:crateresolve1-3.rs\n // error-pattern:multiple matching crates for `crateresolve1`\n \n-extern mod crateresolve1;\n+extern crate crateresolve1;\n \n fn main() {\n }"}, {"sha": "c5e9d1281526d9585c7f9142c2fba696cca36500", "filename": "src/test/compile-fail/crateresolve2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fcrateresolve2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fcrateresolve2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcrateresolve2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,10 +13,10 @@\n // aux-build:crateresolve2-3.rs\n // error-pattern:using multiple versions of crate `crateresolve2`\n \n-extern mod crateresolve2 = \"crateresolve2#0.1\";\n+extern crate crateresolve2 = \"crateresolve2#0.1\";\n \n mod m {\n-    pub extern mod crateresolve2 = \"crateresolve2#0.2\";\n+    pub extern crate crateresolve2 = \"crateresolve2#0.2\";\n }\n \n fn main() {"}, {"sha": "124696630cc089f802e8d31a99444bca9de6d10a", "filename": "src/test/compile-fail/crateresolve5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fcrateresolve5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fcrateresolve5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcrateresolve5.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,8 +12,8 @@\n // aux-build:crateresolve5-1.rs\n // aux-build:crateresolve5-2.rs\n \n-extern mod cr5_1 = \"crateresolve5#0.1\";\n-extern mod cr5_2 = \"crateresolve5#0.2\";\n+extern crate cr5_1 = \"crateresolve5#0.1\";\n+extern crate cr5_2 = \"crateresolve5#0.2\";\n \n \n fn main() {"}, {"sha": "89839c06f3baae981489647d2defbc14a2ad797a", "filename": "src/test/compile-fail/deriving-span-Clone-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "4c47e77dd8178fb0b2d3a124cc97e45bba9515d8", "filename": "src/test/compile-fail/deriving-span-Clone-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "1a2eb3fc6403e776391271b46b303d1ddc1fd43f", "filename": "src/test/compile-fail/deriving-span-Clone-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "03fb284b50b8310b07167adf0553efb9994307be", "filename": "src/test/compile-fail/deriving-span-Clone-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "7cee7b8ee0d0a326ef421140262183f7e594183b", "filename": "src/test/compile-fail/deriving-span-DeepClone-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-enum-struct-variant.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n #[deriving(Clone)]\n struct Error;"}, {"sha": "c18ebe1758d3ea72d190bb713a00581f8081227a", "filename": "src/test/compile-fail/deriving-span-DeepClone-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-enum.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n #[deriving(Clone)]\n struct Error;"}, {"sha": "7d33cd1a28df1ef398857dc92f8e8c532928205b", "filename": "src/test/compile-fail/deriving-span-DeepClone-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n #[deriving(Clone)]\n struct Error;"}, {"sha": "42dd608f61781780202ebb4db97b44c8dc784720", "filename": "src/test/compile-fail/deriving-span-DeepClone-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-DeepClone-tuple-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n #[deriving(Clone)]\n struct Error;"}, {"sha": "21da9fef3982fd6a96f29382470391827a194665", "filename": "src/test/compile-fail/deriving-span-Default-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "2cfc7e2a259a3b3fed03303328a7da7fbc87dc92", "filename": "src/test/compile-fail/deriving-span-Default-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "ce3d84a2e9b410f8049048b289b0a81d2234e48b", "filename": "src/test/compile-fail/deriving-span-Eq-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum-struct-variant.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "c59a81fd147c64a6ef0d0c3f22ec181e4ff7c53d", "filename": "src/test/compile-fail/deriving-span-Eq-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "b797a0d7790a3854f677abc46454d646989f9537", "filename": "src/test/compile-fail/deriving-span-Eq-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "fb4d850ed11e2d29f14aad4a16babd6e5618522f", "filename": "src/test/compile-fail/deriving-span-Eq-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-tuple-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "e3e442e70cf99d3ffa667d8f8a84dd33b6d10676", "filename": "src/test/compile-fail/deriving-span-Ord-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum-struct-variant.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "41e6c2c9e8dad7970c3f801f39d0ced5aeca6d38", "filename": "src/test/compile-fail/deriving-span-Ord-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "2caf68a26fcc24f51426d3b64582336f83fb2212", "filename": "src/test/compile-fail/deriving-span-Ord-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "c783befa3919c9b3aee04439bcf31af18e58ca10", "filename": "src/test/compile-fail/deriving-span-Ord-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-tuple-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "615112c129e220edaa3952d9bd40a11a2a918f10", "filename": "src/test/compile-fail/deriving-span-Rand-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "a1943941e4171ffb9db59865705ab6e709d86369", "filename": "src/test/compile-fail/deriving-span-Rand-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "00d9c1de5c55f438758b5cab21e9fb8f6f978e11", "filename": "src/test/compile-fail/deriving-span-Rand-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "c61a7c76bfb16de5248997e1db3c030244559f23", "filename": "src/test/compile-fail/deriving-span-Rand-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "e22b51d19e56ef5b676176bfdc1060127079391b", "filename": "src/test/compile-fail/deriving-span-Show-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "fffbd49a2bb3858a51daa51ba559d7f5d94b4db5", "filename": "src/test/compile-fail/deriving-span-Show-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "45afd4454e86b98a1ba79d6112bb13be57731350", "filename": "src/test/compile-fail/deriving-span-Show-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "1a199974eba0fbd89481659e23795613bed4f7d7", "filename": "src/test/compile-fail/deriving-span-Show-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "f054e9e7e77f655239f331ab19998d77f23182a9", "filename": "src/test/compile-fail/deriving-span-TotalEq-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "38b8d55bcd83a16c1c5dd41f69b615795a8a61d2", "filename": "src/test/compile-fail/deriving-span-TotalEq-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "66e5ef57a00b5555827efd00825302427920dea1", "filename": "src/test/compile-fail/deriving-span-TotalEq-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "dd0be2dc04a6588e345937351c66222b2bac4540", "filename": "src/test/compile-fail/deriving-span-TotalEq-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "76bcd3325624010ba0ed4e562b3f11f8abdb8e3d", "filename": "src/test/compile-fail/deriving-span-TotalOrd-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n #[deriving(TotalEq)]\n struct Error;"}, {"sha": "303e35108feea1c388a981ffa56823eaf85ec45e", "filename": "src/test/compile-fail/deriving-span-TotalOrd-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n #[deriving(TotalEq)]\n struct Error;"}, {"sha": "bbcc3ae7e047a775cc7dd3fcca1663b1422c9a0b", "filename": "src/test/compile-fail/deriving-span-TotalOrd-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n #[deriving(TotalEq)]\n struct Error;"}, {"sha": "4e8697749e76e519ad2131145f26bece8a3c082f", "filename": "src/test/compile-fail/deriving-span-TotalOrd-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n #[deriving(TotalEq)]\n struct Error;"}, {"sha": "7256b1179dbf4f359f77ac7adde56c7258a50642", "filename": "src/test/compile-fail/deriving-span-Zero-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "d483a86fddbb864a5168c7960ff62feaaafb98db", "filename": "src/test/compile-fail/deriving-span-Zero-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n #[feature(struct_variant)];\n-extern mod extra;\n+extern crate extra;\n \n \n struct Error;"}, {"sha": "244ae47a277e73471ba2637a4d01cbd85e7dc2b3", "filename": "src/test/compile-fail/functional-struct-update-noncopyable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffunctional-struct-update-noncopyable.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // issue 7327\n \n // ignore-fast #7103\n-extern mod sync;\n+extern crate sync;\n use sync::Arc;\n \n struct A { y: Arc<int>, x: Arc<int> }"}, {"sha": "e44efc140a5e309a1b876d3c1797f9a3a5141169", "filename": "src/test/compile-fail/future_not_copyable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Ffuture_not_copyable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Ffuture_not_copyable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffuture_not_copyable.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod sync;\n+extern crate sync;\n \n use sync::Future;\n "}, {"sha": "f37a6aa354a5fa7e0de0478f80e027066ed9009b", "filename": "src/test/compile-fail/gated-non-ascii-idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,7 +12,7 @@\n \n #[feature(struct_variant)];\n \n-extern mod b\u00e4z; //~ ERROR non-ascii idents\n+extern crate b\u00e4z; //~ ERROR non-ascii idents\n \n use f\u00f6\u00f6::bar; //~ ERROR non-ascii idents\n "}, {"sha": "416a7691ceb5fbfc65fa83f41b86c7b6c60530fc", "filename": "src/test/compile-fail/gated-phase.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fgated-phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fgated-phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-phase.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,6 +12,6 @@\n \n #[phase(syntax)]\n //~^ ERROR compile time crate loading is experimental and possibly buggy\n-extern mod macro_crate_test;\n+extern crate macro_crate_test;\n \n fn main() {}"}, {"sha": "59c44bff3c79d846d1ded404a09b4c2811884daa", "filename": "src/test/compile-fail/gated-simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fgated-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fgated-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-simd.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,4 +11,4 @@\n #[simd]\n pub struct i64x2(i64, i64); //~ ERROR: SIMD types are experimental\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "ecc584d81b0e10d5d9afef848fad14a72fd3c190", "filename": "src/test/compile-fail/issue-11593.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fissue-11593.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fissue-11593.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11593.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:private_trait_xc.rs\n \n-extern mod private_trait_xc;\n+extern crate private_trait_xc;\n \n struct Bar;\n "}, {"sha": "038b2b0d87624a680a803ade94f98b21c0c7e130", "filename": "src/test/compile-fail/issue-3021-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-b.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n \n fn siphash(k0 : u64) {\n "}, {"sha": "392cc2f3c9006a3f40ca08ab8693f4163a4e0bc5", "filename": "src/test/compile-fail/issue-3021-c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-c.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n \n fn siphash<T>() {\n "}, {"sha": "95c0eb711e8f72fdc17a99341c4457c38c2e5ea0", "filename": "src/test/compile-fail/issue-3021-d.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021-d.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n \n trait siphash {\n     fn result(&self) -> u64;"}, {"sha": "7bb1faf514a04f50b5feec83687e29090cac36f5", "filename": "src/test/compile-fail/issue-3021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3021.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n \n trait SipHash {\n     fn reset(&self);"}, {"sha": "5d292531b49ff7dc2faaa6e9383e8ffe7e5b5309", "filename": "src/test/compile-fail/issue-3907.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3907.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:issue_3907.rs\n-extern mod issue_3907;\n+extern crate issue_3907;\n \n type Foo = issue_3907::Foo; //~ ERROR: reference to trait\n "}, {"sha": "6c85a97f7f57fe6106d1d0aefedea138b5641ad6", "filename": "src/test/compile-fail/issue-5844.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fissue-5844.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fissue-5844.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5844.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n //aux-build:issue_5844_aux.rs\n \n-extern mod issue_5844_aux;\n+extern crate issue_5844_aux;\n \n fn main () {\n     issue_5844_aux::rand(); //~ ERROR: requires unsafe"}, {"sha": "da90c4ee7531e92f83758f6482ab429b694950f6", "filename": "src/test/compile-fail/issue-9957.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fissue-9957.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fissue-9957.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-9957.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub extern mod std; //~ ERROR: `pub` visibility is not allowed\n-priv extern mod std; //~ ERROR: unnecessary visibility qualifier\n-extern mod std;\n+pub extern crate std; //~ ERROR: `pub` visibility is not allowed\n+priv extern crate std; //~ ERROR: unnecessary visibility qualifier\n+extern crate std;\n \n pub use std::bool;\n priv use std::bool; //~ ERROR: unnecessary visibility qualifier"}, {"sha": "f45f654229f5449a223e33d55bc5a6ccb9bba511", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -18,7 +18,7 @@\n #[allow(dead_code)];\n \n mod cross_crate {\n-    extern mod lint_stability;\n+    extern crate lint_stability;\n     use self::lint_stability::*;\n \n     fn test() {"}, {"sha": "63c66e53c5ee8909ccb4fb9c5f47405fbccd3d54", "filename": "src/test/compile-fail/log-syntax-gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Flog-syntax-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Flog-syntax-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flog-syntax-gate.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,4 +10,4 @@\n \n fn main() {\n     log_syntax!() //~ ERROR `log_syntax!` is not stable enough\n-}\n\\ No newline at end of file\n+}"}, {"sha": "aaf89807ced318a3af490e6a22e2408c4fc9651b", "filename": "src/test/compile-fail/macro-crate-unexported-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fmacro-crate-unexported-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fmacro-crate-unexported-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-crate-unexported-macro.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -15,7 +15,7 @@\n #[feature(phase)];\n \n #[phase(syntax)]\n-extern mod macro_crate_test;\n+extern crate macro_crate_test;\n \n fn main() {\n     assert_eq!(3, unexported_macro!()); //~ ERROR macro undefined: 'unexported_macro'"}, {"sha": "3301eb145ce271df34693d6b28d11af83c6d872e", "filename": "src/test/compile-fail/macro-crate-unknown-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fmacro-crate-unknown-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fmacro-crate-unknown-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-crate-unknown-crate.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,6 +11,6 @@\n #[feature(phase)];\n \n #[phase(syntax)]\n-extern mod doesnt_exist; //~ ERROR can't find crate\n+extern crate doesnt_exist; //~ ERROR can't find crate\n \n fn main() {}"}, {"sha": "97a2b00ba424c0ce0d747ab303d2db22a8929099", "filename": "src/test/compile-fail/moves-based-on-type-cyclic-types-issue-4821.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-cyclic-types-issue-4821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-cyclic-types-issue-4821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-cyclic-types-issue-4821.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,7 +12,7 @@\n // temporary kinds wound up being stored in a cache and used later.\n // See middle::ty::type_contents() for more information.\n \n-extern mod extra;\n+extern crate extra;\n \n struct List { key: int, next: Option<~List> }\n "}, {"sha": "34c56f98404d31aed246fb4777aae49886d0e0e3", "filename": "src/test/compile-fail/mutex-arc-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutex-arc-nested.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod sync;\n+extern crate sync;\n \n use std::task;\n use sync::MutexArc;"}, {"sha": "8df156d8332fed3a341757f0770fa45734fb78fd", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern: use of moved value\n \n-extern mod sync;\n+extern crate sync;\n use sync::Arc;\n \n use std::task;"}, {"sha": "b387d3a1719e9f2bd4f2d83db8dfa9a0acddbb71", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod sync;\n+extern crate sync;\n use sync::Arc;\n \n use std::task;"}, {"sha": "7091995fa7729459d1fe7c5d1cfbf43df7b449d8", "filename": "src/test/compile-fail/noexporttypeexe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:noexporttypelib.rs\n \n-extern mod noexporttypelib;\n+extern crate noexporttypelib;\n \n fn main() {\n     // Here, the type returned by foo() is not exported."}, {"sha": "675dcf95595a8e09a351de0b773bc15c2e7d58f5", "filename": "src/test/compile-fail/once-cant-call-twice-on-heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,7 +12,7 @@\n // This program would segfault if it were legal.\n \n #[feature(once_fns)];\n-extern mod sync;\n+extern crate sync;\n use sync::Arc;\n \n fn foo(blk: proc()) {"}, {"sha": "48dd484c1c26be7f670107d9f82a315bbb052f8f", "filename": "src/test/compile-fail/once-cant-call-twice-on-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,7 +12,7 @@\n // This program would segfault if it were legal.\n \n #[feature(once_fns)];\n-extern mod sync;\n+extern crate sync;\n use sync::Arc;\n \n fn foo(blk: once ||) {"}, {"sha": "804ea46b4266f8852be0a52a71d753730eb17102", "filename": "src/test/compile-fail/once-cant-move-out-of-non-once-on-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-move-out-of-non-once-on-stack.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // Testing guarantees provided by once functions.\n // This program would segfault if it were legal.\n \n-extern mod sync;\n+extern crate sync;\n use sync::Arc;\n \n fn foo(blk: ||) {"}, {"sha": "e58c4b146858835faa860d4910c183b653ab865a", "filename": "src/test/compile-fail/pattern-tyvar-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar-2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-extern mod extra;\n+extern crate extra;\n \n enum bar { t1((), Option<~[int]>), t2, }\n "}, {"sha": "b687a225754e03da2ff36a19f30692e0755d36d1", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n \n // error-pattern: mismatched types\n "}, {"sha": "8efa910f7c6aac74da2744f80866d84fa2f87889", "filename": "src/test/compile-fail/phase-syntax-doesnt-resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fphase-syntax-doesnt-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fphase-syntax-doesnt-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fphase-syntax-doesnt-resolve.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -15,7 +15,7 @@\n #[feature(phase)];\n \n #[phase(syntax)]\n-extern mod macro_crate_test;\n+extern crate macro_crate_test;\n \n fn main() {\n     macro_crate_test::foo();"}, {"sha": "2e79c0f46adb5e3f7a1a066853f64383883bc4f0", "filename": "src/test/compile-fail/private-method-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method-cross-crate.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-fast\n // aux-build:cci_class_5.rs\n-extern mod cci_class_5;\n+extern crate cci_class_5;\n use cci_class_5::kitties::cat;\n \n fn main() {"}, {"sha": "0993ac9a64ad377c01912cb5cc59ccf83313ce83", "filename": "src/test/compile-fail/private-struct-field-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:cci_class.rs\n-extern mod cci_class;\n+extern crate cci_class;\n use cci_class::kitties::cat;\n \n fn main() {"}, {"sha": "5a252eb2975275f63e02c59c26494e83e63cc20d", "filename": "src/test/compile-fail/private-variant-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fprivate-variant-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fprivate-variant-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-xc.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-test\n // aux-build:private_variant_xc.rs\n \n-extern mod private_variant_xc;\n+extern crate private_variant_xc;\n \n pub fn main() {\n     let _ = private_variant_xc::Bar;"}, {"sha": "4afbe7ed48b1c2db141ee8a26cb26dde4efef712", "filename": "src/test/compile-fail/private_variant_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fprivate_variant_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fprivate_variant_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate_variant_2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-test\n // aux-build:private_variant_1.rs\n \n-extern mod private_variant_1;\n+extern crate private_variant_1;\n \n fn main() {\n     let _x = private_variant_1::super_sekrit::baz; //~ ERROR baz is private"}, {"sha": "d45759e38d99e4e5085f841209166fd8a59fe6e0", "filename": "src/test/compile-fail/qquote-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-1.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,8 +12,8 @@\n \n #[feature(quote)];\n \n-extern mod extra;\n-extern mod syntax;\n+extern crate extra;\n+extern crate syntax;\n \n use io::*;\n "}, {"sha": "b5c2dee61c73699d95e5d5d9de8cf05e59da02c5", "filename": "src/test/compile-fail/qquote-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fqquote-2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,8 +12,8 @@\n \n #[feature(quote)];\n \n-extern mod extra;\n-extern mod syntax;\n+extern crate extra;\n+extern crate syntax;\n \n use extra::io::*;\n "}, {"sha": "8453ace2b51d9eb2e703e1152f4001967ef2fbb9", "filename": "src/test/compile-fail/regions-glb-free-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-glb-free-free.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n mod argparse {\n-    extern mod extra;\n+    extern crate extra;\n \n     pub struct Flag<'a> {\n         name: &'a str,"}, {"sha": "f543d442a23914e4ce2e88fcdeae796e4a020cdd", "filename": "src/test/compile-fail/seq-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fseq-args.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n fn main() {\n trait seq { }\n "}, {"sha": "e82c49d977f67ba3e98f54f90c6a6438061aea36", "filename": "src/test/compile-fail/spawn-non-nil-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fspawn-non-nil-fn.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern: mismatched types\n \n-extern mod extra;\n+extern crate extra;\n \n use std::task;\n "}, {"sha": "98b37242c03a64ad3491ac5c604ec85b82c955ac", "filename": "src/test/compile-fail/static-priv-by-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:static_priv_by_default.rs\n \n-extern mod static_priv_by_default;\n+extern crate static_priv_by_default;\n \n mod child {\n     pub mod childs_child {"}, {"sha": "2141099c7aa0ecbb6843068cb563ebe99f695dcb", "filename": "src/test/compile-fail/static-priv-by-default2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-priv-by-default2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:static_priv_by_default.rs\n \n-extern mod static_priv_by_default;\n+extern crate static_priv_by_default;\n \n mod child {\n     pub mod childs_child {"}, {"sha": "d298d331a3f871cb7f4ec821028711978725129b", "filename": "src/test/compile-fail/struct-field-privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-privacy.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:struct-field-privacy.rs\n \n-extern mod xc = \"struct-field-privacy\";\n+extern crate xc = \"struct-field-privacy\";\n \n struct A {\n     a: int,"}, {"sha": "4ba1c5c7cfeec458e2525486c38b70a23ec43e41", "filename": "src/test/compile-fail/sync-cond-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsync-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsync-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-cond-shouldnt-escape.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern: lifetime of variable does not enclose its declaration\n-extern mod sync;\n+extern crate sync;\n use sync::Mutex;\n \n fn main() {"}, {"sha": "697858f40da6084b761f1005317c464de2d26e56", "filename": "src/test/compile-fail/sync-rwlock-cond-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-cond-shouldnt-escape.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern: lifetime of method receiver does not outlive the method call\n-extern mod sync;\n+extern crate sync;\n use sync::RWLock;\n fn main() {\n     let x = ~RWLock::new();"}, {"sha": "30ed0912f6a8a9242b1f683ae1e6687fc7a7b8cf", "filename": "src/test/compile-fail/sync-rwlock-read-mode-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-read-mode-shouldnt-escape.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern: cannot infer\n-extern mod sync;\n+extern crate sync;\n use sync::RWLock;\n fn main() {\n     let x = ~RWLock::new();"}, {"sha": "09b4e34ea8c135b99608252e93a5dd1aaf5cfd82", "filename": "src/test/compile-fail/sync-rwlock-write-mode-cond-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-cond-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-cond-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-cond-shouldnt-escape.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern: lifetime of variable does not enclose its declaration\n-extern mod sync;\n+extern crate sync;\n use sync::RWLock;\n fn main() {\n     let x = ~RWLock::new();"}, {"sha": "0fca360d0ce3d76bf48c122b3cb8158e1e931392", "filename": "src/test/compile-fail/sync-rwlock-write-mode-shouldnt-escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-shouldnt-escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-shouldnt-escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsync-rwlock-write-mode-shouldnt-escape.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern: lifetime of variable does not enclose its declaration\n-extern mod sync;\n+extern crate sync;\n use sync::RWLock;\n fn main() {\n     let x = ~RWLock::new();"}, {"sha": "920726a4870135a92329c8dcb38bf81bdca37ef7", "filename": "src/test/compile-fail/syntax-extension-fourcc-bad-len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-bad-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-bad-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-bad-len.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -15,7 +15,7 @@\n #[feature(phase)];\n \n #[phase(syntax)]\n-extern mod fourcc;\n+extern crate fourcc;\n \n fn main() {\n     let val = fourcc!(\"foo\"); //~ ERROR string literal with len != 4 in fourcc!"}, {"sha": "08ee57a2d94eae25cee2d69616d58ac7f731933b", "filename": "src/test/compile-fail/syntax-extension-fourcc-invalid-endian.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-invalid-endian.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-invalid-endian.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-invalid-endian.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -15,7 +15,7 @@\n #[feature(phase)];\n \n #[phase(syntax)]\n-extern mod fourcc;\n+extern crate fourcc;\n \n fn main() {\n     let val = fourcc!(\"foo \", bork); //~ ERROR invalid endian directive in fourcc!"}, {"sha": "af49d9988d890a72cd67f8f7936584db1175d3af", "filename": "src/test/compile-fail/syntax-extension-fourcc-non-ascii-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-ascii-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-ascii-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-ascii-str.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -15,7 +15,7 @@\n #[feature(phase)];\n \n #[phase(syntax)]\n-extern mod fourcc;\n+extern crate fourcc;\n \n fn main() {\n     let v = fourcc!(\"foo\u03bb\"); //~ ERROR fourcc! literal character out of range 0-255"}, {"sha": "b4195ed9bc88bac14e5086e9f37fba6ef52b227e", "filename": "src/test/compile-fail/syntax-extension-fourcc-non-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-literal.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -15,7 +15,7 @@\n #[feature(phase)];\n \n #[phase(syntax)]\n-extern mod fourcc;\n+extern crate fourcc;\n \n fn main() {\n     let val = fourcc!(foo); //~ ERROR non-literal in fourcc!"}, {"sha": "1997b7ad8e7629a74cadda212d4cd63b8d1c2662", "filename": "src/test/compile-fail/syntax-extension-fourcc-unsupported-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-unsupported-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-unsupported-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-unsupported-literal.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -15,7 +15,7 @@\n #[feature(phase)];\n \n #[phase(syntax)]\n-extern mod fourcc;\n+extern crate fourcc;\n \n fn main() {\n     let val = fourcc!(45f32); //~ ERROR unsupported literal in fourcc!"}, {"sha": "a39ffa64dfd769fb537afff5d2e622258512828a", "filename": "src/test/compile-fail/unresolved-extern-mod-suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Funresolved-extern-mod-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Funresolved-extern-mod-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funresolved-extern-mod-suggestion.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n use extra; //~ ERROR unresolved import (maybe you meant `extra::*`?)\n \n fn main() {}"}, {"sha": "cb009163697f76eb99f3f85e828d95a29a41b19f", "filename": "src/test/compile-fail/unresolved-import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funresolved-import.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use foo::bar; //~ ERROR unresolved import. maybe a missing `extern mod foo`?\n+use foo::bar; //~ ERROR unresolved import. maybe a missing `extern crate foo`?\n               //~^ ERROR failed to resolve import `foo::bar`\n use x = bar::baz; //~ ERROR unresolved import: there is no `baz` in `bar`\n                   //~^ ERROR failed to resolve import `bar::baz`"}, {"sha": "d45387ed1a25bc42dbd6c8206c75231e3dfee611", "filename": "src/test/compile-fail/use-from-trait-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fuse-from-trait-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fuse-from-trait-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-from-trait-xc.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:use_from_trait_xc.rs\n \n-extern mod use_from_trait_xc;\n+extern crate use_from_trait_xc;\n \n use use_from_trait_xc::Trait::foo;  //~ ERROR cannot import from a trait or type implementation\n //~^ ERROR failed to resolve import"}, {"sha": "0d84a59fc9ec3d983c50c7acfca20de83edb4948", "filename": "src/test/compile-fail/use-meta-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fuse-meta-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fuse-meta-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-meta-mismatch.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,6 +10,6 @@\n \n // error-pattern:can't find crate for `extra`\n \n-extern mod extra = \"fake-crate\";\n+extern crate extra = \"fake-crate\";\n \n fn main() { }"}, {"sha": "9cb84c5400adc313ad92a41bb31d3f42f025c7f3", "filename": "src/test/compile-fail/use-meta.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fuse-meta.rc", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fuse-meta.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-meta.rc?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:can't find crate for `std`\n \n-extern mod std = \"std#bogus\";\n+extern crate std = \"std#bogus\";"}, {"sha": "d4b25b6baeb41950d47e254aed3867f0bbf60c62", "filename": "src/test/compile-fail/view-items-at-top.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fview-items-at-top.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fview-items-at-top.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fview-items-at-top.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n \n fn f() {\n }\n \n-use extra::net;    //~ ERROR `use` and `extern mod` declarations must precede items\n+use extra::net;    //~ ERROR `use` and `extern crate` declarations must precede items\n \n fn main() {\n }"}, {"sha": "503c8da70be4106b6de856a50bf111506a5847b6", "filename": "src/test/compile-fail/xc-private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fxc-private-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fxc-private-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fxc-private-method.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast\n // aux-build:xc_private_method_lib.rs\n \n-extern mod xc_private_method_lib;\n+extern crate xc_private_method_lib;\n \n fn main() {\n     let _ = xc_private_method_lib::Struct::static_meth_struct();"}, {"sha": "978ec39a06e1ff8e702103f8b86650561eb083a1", "filename": "src/test/compile-fail/xc-private-method2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fxc-private-method2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fxc-private-method2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fxc-private-method2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast\n // aux-build:xc_private_method_lib.rs\n \n-extern mod xc_private_method_lib;\n+extern crate xc_private_method_lib;\n \n fn main() {\n     let _ = xc_private_method_lib::Struct{ x: 10 }.meth_struct();"}, {"sha": "70b2ea87ac180ae583b55d1ae9ded8a566ebd215", "filename": "src/test/compile-fail/xcrate-private-by-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fxcrate-private-by-default.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:static_priv_by_default.rs\n \n-extern mod static_priv_by_default;\n+extern crate static_priv_by_default;\n \n fn foo<T>() {}\n "}, {"sha": "cccb7e500213f4871ce96b61639ae27d4fbfbe75", "filename": "src/test/compile-fail/xcrate-unit-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fxcrate-unit-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fcompile-fail%2Fxcrate-unit-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fxcrate-unit-struct.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,7 +13,7 @@\n // Make sure that when we have cross-crate unit structs we don't accidentally\n // make values out of cross-crate structs that aren't unit.\n \n-extern mod xcrate_unit_struct;\n+extern crate xcrate_unit_struct;\n \n fn main() {\n     let _ = xcrate_unit_struct::StructWithFields; //~ ERROR: unresolved name"}, {"sha": "026293e7524260f4cfc7a0947001b4c721f7dca9", "filename": "src/test/pretty/raw-str-nonexpr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fraw-str-nonexpr.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -14,6 +14,6 @@\n #[feature(asm)];\n \n #[cfg = r#\"just parse this\"#]\n-extern mod blah = r##\"blah\"##;\n+extern crate blah = r##\"blah\"##;\n \n fn main() { unsafe { asm!(r###\"blah\"###); } }"}, {"sha": "d51a2728d3aa32d5f9ea2ee2a0c5a9e9a9246626", "filename": "src/test/run-fail/fail-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Ffail-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Ffail-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffail-main.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n // error-pattern:moop\n-extern mod extra;\n+extern crate extra;\n fn main() { fail!(\"moop\"); }"}, {"sha": "ada9e698e657ed023a860336946b6407ca73f478", "filename": "src/test/run-fail/fmt-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Ffmt-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Ffmt-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffmt-fail.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // error-pattern:meh\n-extern mod extra;\n+extern crate extra;\n \n fn main() { let str_var: ~str = ~\"meh\"; fail!(\"{}\", str_var); }"}, {"sha": "f3e8c9d298ce46da6c876ff0562e221282e83885", "filename": "src/test/run-fail/for-each-loop-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffor-each-loop-fail.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // error-pattern:moop\n-extern mod extra;\n+extern crate extra;\n \n fn main() { for _ in range(0u, 10u) { fail!(\"moop\"); } }"}, {"sha": "41221b526f390794d9add71c3e2a7c37e0cd68ef", "filename": "src/test/run-fail/issue-2444.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Fissue-2444.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-2444.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:explicit failure\n \n-extern mod sync;\n+extern crate sync;\n use sync::Arc;\n \n enum e<T> { e(Arc<T>) }"}, {"sha": "fb5fdffffeca544e0f73a7bb9b8cf55a392a7a45", "filename": "src/test/run-fail/linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Flinked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Flinked-failure.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-test linked failure\n // error-pattern:1 == 2\n \n-extern mod extra;\n+extern crate extra;\n \n use std::comm;\n use std::task;"}, {"sha": "08ab065598de4fe90e9166dd7561c3d1eb9a1465", "filename": "src/test/run-fail/morestack2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -16,7 +16,7 @@\n // See the hack in upcall_call_shim_on_c_stack where it messes\n // with the stack limit.\n \n-extern mod extra;\n+extern crate extra;\n \n use std::libc;\n use std::task;"}, {"sha": "b15be7402312e063cc7423d5653ca12428f9b2cc", "filename": "src/test/run-fail/morestack3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Fmorestack3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack3.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,7 +13,7 @@\n \n // Just testing unwinding\n \n-extern mod extra;\n+extern crate extra;\n \n use std::task;\n "}, {"sha": "7cd19410bfc49e0e2b05853349e15f579fa0f5d3", "filename": "src/test/run-fail/morestack4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack4.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,7 +13,7 @@\n \n // Just testing unwinding\n \n-extern mod extra;\n+extern crate extra;\n \n use std::task;\n "}, {"sha": "da00bdf5e0aefeb575a75c810d4d7e0aa892c63d", "filename": "src/test/run-fail/native-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Fnative-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Fnative-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fnative-failure.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,7 +13,7 @@\n \n #[no_uv];\n \n-extern mod native;\n+extern crate native;\n \n #[start]\n fn start(argc: int, argv: **u8) -> int {"}, {"sha": "c25eef44683c3e0a56d38c0a928d20e155eb3b95", "filename": "src/test/run-fail/run-unexported-tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frun-unexported-tests.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,7 +12,7 @@\n // compile-flags:--test\n // check-stdout\n \n-extern mod extra;\n+extern crate extra;\n \n mod m {\n     pub fn exported() { }"}, {"sha": "01bc966e90ad2bc27b2a5e23512c8a22b873e124", "filename": "src/test/run-fail/spawnfail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Fspawnfail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-fail%2Fspawnfail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fspawnfail.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-test linked failure\n // error-pattern:explicit\n \n-extern mod extra;\n+extern crate extra;\n \n use std::task;\n "}, {"sha": "920474ea9bd58bbddc1aa548b3eca558fcb2e122", "filename": "src/test/run-make/bootstrap-from-c-with-green/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-green%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,8 +12,8 @@\n #[crate_type=\"dylib\"];\n #[no_uv];\n \n-extern mod rustuv;\n-extern mod green;\n+extern crate rustuv;\n+extern crate green;\n \n #[no_mangle] // this needs to get called from C\n pub extern \"C\" fn foo(argc: int, argv: **u8) -> int {"}, {"sha": "2bc0dbb777031e625331c2db1721edf5e5074669", "filename": "src/test/run-make/bootstrap-from-c-with-native/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fbootstrap-from-c-with-native%2Flib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,7 +12,7 @@\n #[crate_type=\"dylib\"];\n #[no_uv];\n \n-extern mod native;\n+extern crate native;\n \n #[no_mangle] // this needs to get called from C\n pub extern \"C\" fn foo(argc: int, argv: **u8) -> int {"}, {"sha": "37b120decd1a8a1ef43e426c1d158da5f7a18d3d", "filename": "src/test/run-make/c-dynamic-dylib/bar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-dylib%2Fbar.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod foo;\n+extern crate foo;\n \n fn main() {\n     foo::rsfoo();"}, {"sha": "37b120decd1a8a1ef43e426c1d158da5f7a18d3d", "filename": "src/test/run-make/c-dynamic-rlib/bar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-dynamic-rlib%2Fbar.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod foo;\n+extern crate foo;\n \n fn main() {\n     foo::rsfoo();"}, {"sha": "37b120decd1a8a1ef43e426c1d158da5f7a18d3d", "filename": "src/test/run-make/c-static-dylib/bar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fc-static-dylib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fc-static-dylib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-dylib%2Fbar.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod foo;\n+extern crate foo;\n \n fn main() {\n     foo::rsfoo();"}, {"sha": "37b120decd1a8a1ef43e426c1d158da5f7a18d3d", "filename": "src/test/run-make/c-static-rlib/bar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fc-static-rlib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fc-static-rlib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fc-static-rlib%2Fbar.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod foo;\n+extern crate foo;\n \n fn main() {\n     foo::rsfoo();"}, {"sha": "9adeaa1a20a107ddb1f1df5e97b0efc3fa92c141", "filename": "src/test/run-make/dylib-chain/m2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n #[crate_type = \"dylib\"];\n-extern mod m1;\n+extern crate m1;\n \n pub fn m2() { m1::m1() }"}, {"sha": "0a284e52445c86eb769a22b90cb890b3e7ddc1e0", "filename": "src/test/run-make/dylib-chain/m3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm3.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n #[crate_type = \"dylib\"];\n-extern mod m2;\n+extern crate m2;\n \n pub fn m3() { m2::m2() }"}, {"sha": "6c2a66858028e04988ef470b1885001db8c7586c", "filename": "src/test/run-make/dylib-chain/m4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdylib-chain%2Fm4.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod m3;\n+extern crate m3;\n \n fn main() { m3::m3() }"}, {"sha": "e12ac9e01dc17ecaa8b256aaab05723524f09176", "filename": "src/test/run-make/lto-smoke/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Flto-smoke%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Flto-smoke%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-smoke%2Fmain.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod lib;\n+extern crate lib;\n \n fn main() {}"}, {"sha": "ae5cce0224528c4e4e817f3a3776a99039a2b305", "filename": "src/test/run-make/mixing-deps/dylib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fmixing-deps%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fmixing-deps%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-deps%2Fdylib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #[crate_type = \"dylib\"];\n-extern mod both;\n+extern crate both;\n \n use std::cast;\n "}, {"sha": "ed8675eb7064fa508450a8bebebde0a1c8f17f77", "filename": "src/test/run-make/mixing-deps/prog.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fmixing-deps%2Fprog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fmixing-deps%2Fprog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-deps%2Fprog.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod dylib;\n-extern mod both;\n+extern crate dylib;\n+extern crate both;\n \n use std::cast;\n "}, {"sha": "08a972ef8e6e2f0b55a136f92f598980b453b03c", "filename": "src/test/run-make/mixing-libs/dylib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fmixing-libs%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fmixing-libs%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-libs%2Fdylib.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n #[crate_type = \"dylib\"];\n-extern mod rlib;\n+extern crate rlib;\n \n pub fn dylib() { rlib::rlib() }"}, {"sha": "5e1a4274756c309672643e3a541b4f1670c3e973", "filename": "src/test/run-make/mixing-libs/prog.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fmixing-libs%2Fprog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fmixing-libs%2Fprog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fmixing-libs%2Fprog.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod dylib;\n-extern mod rlib;\n+extern crate dylib;\n+extern crate rlib;\n \n fn main() {\n     dylib::dylib();"}, {"sha": "858ef492acef598fa85c0adf1c281679ff2a7195", "filename": "src/test/run-make/prefer-dylib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fprefer-dylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fprefer-dylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprefer-dylib%2Ffoo.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod bar;\n+extern crate bar;\n \n fn main() {\n     bar::bar();"}, {"sha": "858ef492acef598fa85c0adf1c281679ff2a7195", "filename": "src/test/run-make/prefer-rlib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fprefer-rlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fprefer-rlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprefer-rlib%2Ffoo.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod bar;\n+extern crate bar;\n \n fn main() {\n     bar::bar();"}, {"sha": "40c1575d0695c74537a60dc0af216154d1c45ba6", "filename": "src/test/run-make/rlib-chain/m2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Frlib-chain%2Fm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Frlib-chain%2Fm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-chain%2Fm2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n #[crate_type = \"rlib\"];\n-extern mod m1;\n+extern crate m1;\n \n pub fn m2() { m1::m1() }"}, {"sha": "3d3be554757bb7a3fce7d0f6494c15a450c72de9", "filename": "src/test/run-make/rlib-chain/m3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Frlib-chain%2Fm3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Frlib-chain%2Fm3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-chain%2Fm3.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n #[crate_type = \"rlib\"];\n-extern mod m2;\n+extern crate m2;\n \n pub fn m3() { m2::m2() }"}, {"sha": "6c2a66858028e04988ef470b1885001db8c7586c", "filename": "src/test/run-make/rlib-chain/m4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Frlib-chain%2Fm4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Frlib-chain%2Fm4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frlib-chain%2Fm4.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod m3;\n+extern crate m3;\n \n fn main() { m3::m3() }"}, {"sha": "858ef492acef598fa85c0adf1c281679ff2a7195", "filename": "src/test/run-make/simple-dylib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fsimple-dylib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fsimple-dylib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimple-dylib%2Ffoo.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod bar;\n+extern crate bar;\n \n fn main() {\n     bar::bar();"}, {"sha": "858ef492acef598fa85c0adf1c281679ff2a7195", "filename": "src/test/run-make/simple-rlib/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fsimple-rlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fsimple-rlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsimple-rlib%2Ffoo.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod bar;\n+extern crate bar;\n \n fn main() {\n     bar::bar();"}, {"sha": "08777490f212b2e83ba2dfcf39981650f6a003c9", "filename": "src/test/run-make/static-unwinding/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstatic-unwinding%2Fmain.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod lib;\n+extern crate lib;\n \n use std::task;\n "}, {"sha": "80ebf54559fbebf188b82df1d8843390a64568aa", "filename": "src/test/run-pass-fulldeps/macro-crate-outlive-expansion-phase.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-outlive-expansion-phase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-outlive-expansion-phase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate-outlive-expansion-phase.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -16,6 +16,6 @@\n #[feature(phase)];\n \n #[phase(syntax)]\n-extern mod macro_crate_outlive_expansion_phase;\n+extern crate macro_crate_outlive_expansion_phase;\n \n pub fn main() {}"}, {"sha": "6738bd245e34118c14ca8b2614fb1f21f362fced", "filename": "src/test/run-pass-fulldeps/macro-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -16,7 +16,7 @@\n #[feature(phase)];\n \n #[phase(syntax)]\n-extern mod macro_crate_test;\n+extern crate macro_crate_test;\n \n pub fn main() {\n     assert_eq!(1, make_a_1!());"}, {"sha": "0e31cbd2e955ce83200951192a04ef9144bfadfb", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,8 +13,8 @@\n \n #[feature(quote)];\n \n-extern mod extra;\n-extern mod syntax;\n+extern crate extra;\n+extern crate syntax;\n \n use std::io::*;\n "}, {"sha": "b11515ac24bd98c7cd551ab5db31aa63e78e413e", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,7 +13,7 @@\n #[feature(quote)];\n #[feature(managed_boxes)];\n \n-extern mod syntax;\n+extern crate syntax;\n \n use syntax::ext::base::ExtCtxt;\n "}, {"sha": "ac8d361bf5aa40a064b28a262e7177b2550f2213", "filename": "src/test/run-pass-fulldeps/quote-unused-sp-no-warning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-unused-sp-no-warning.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,7 +13,7 @@\n #[feature(quote)];\n #[deny(unused_variable)];\n \n-extern mod syntax;\n+extern crate syntax;\n \n use syntax::ext::base::ExtCtxt;\n "}, {"sha": "a6f118d77faab96c4780dc40850e83136b29e948", "filename": "src/test/run-pass-fulldeps/syntax-extension-fourcc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-fourcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-fourcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fsyntax-extension-fourcc.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -16,7 +16,7 @@\n #[feature(phase)];\n \n #[phase(syntax)]\n-extern mod fourcc;\n+extern crate fourcc;\n \n static static_val: u32 = fourcc!(\"foo \");\n static static_val_be: u32 = fourcc!(\"foo \", big);"}, {"sha": "8cadf4825f684a51f0a1eb30fa051c45a3701178", "filename": "src/test/run-pass/anon-extern-mod-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast\n // ignore-pretty\n // aux-build:anon-extern-mod-cross-crate-1.rs\n-extern mod anonexternmod;\n+extern crate anonexternmod;\n \n use anonexternmod::rust_get_test_int;\n "}, {"sha": "c66a8a9d2ca45c050a12777cc3119256ba0381b9", "filename": "src/test/run-pass/anon_trait_static_method_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fanon_trait_static_method_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fanon_trait_static_method_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon_trait_static_method_exe.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast - check-fast doesn't understand aux-build\n // aux-build:anon_trait_static_method_lib.rs\n \n-extern mod anon_trait_static_method_lib;\n+extern crate anon_trait_static_method_lib;\n use anon_trait_static_method_lib::Foo;\n \n pub fn main() {"}, {"sha": "30d4315f081ac10e9b1a40e34a5f7cb22e7cd0aa", "filename": "src/test/run-pass/attr-before-view-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // error-pattern:expected item\n \n #[foo = \"bar\"]\n-extern mod extra;\n+extern crate extra;\n \n pub fn main() {\n }"}, {"sha": "0d099841c0b3934798c3f02b8be59a6d5cb448ac", "filename": "src/test/run-pass/attr-before-view-item2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,7 +12,7 @@\n \n mod m {\n     #[foo = \"bar\"]\n-    extern mod extra;\n+    extern crate extra;\n }\n \n pub fn main() {"}, {"sha": "caf9a92bba3b462f7b64f70ff4732dab603e7b5d", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,7 +13,7 @@\n \n #[feature(managed_boxes)];\n \n-extern mod extra;\n+extern crate extra;\n \n // These tests used to be separate files, but I wanted to refactor all\n // the common code."}, {"sha": "e8cbd03743441f2826c4a10b122fd0fe0fe9613a", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-fast\n-extern mod sync;\n+extern crate sync;\n use sync::Arc;\n fn dispose(_x: Arc<bool>) { }\n "}, {"sha": "20b3ca0b3bae7d79137267231fc9dab007cd212b", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod collections;\n+extern crate collections;\n use collections::Bitv;\n \n fn bitv_test() {"}, {"sha": "c149afb87822c8ef8972bedbb7613703486d04cd", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n \n fn asSendfn(f: proc() -> uint) -> uint {\n    return f();"}, {"sha": "b67edf245b2d9af883bd4b090774a631b7cd8fcd", "filename": "src/test/run-pass/builtin-superkinds-capabilities-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -15,7 +15,7 @@\n // Tests \"capabilities\" granted by traits with super-builtin-kinds,\n // even when using them cross-crate.\n \n-extern mod trait_superkinds_in_metadata;\n+extern crate trait_superkinds_in_metadata;\n use trait_superkinds_in_metadata::{RequiresRequiresFreezeAndSend, RequiresFreeze};\n \n #[deriving(Eq)]"}, {"sha": "8cecd5019a395aa3cb40e2ebbd39770fa36f6efa", "filename": "src/test/run-pass/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -14,7 +14,7 @@\n \n // Tests (correct) usage of trait super-builtin-kinds cross-crate.\n \n-extern mod trait_superkinds_in_metadata;\n+extern crate trait_superkinds_in_metadata;\n use trait_superkinds_in_metadata::{RequiresRequiresFreezeAndSend, RequiresFreeze};\n use trait_superkinds_in_metadata::{RequiresPod};\n "}, {"sha": "2473911483ce812aabee043c8c5fcda7003f635a", "filename": "src/test/run-pass/capturing-logging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,7 +13,7 @@\n // exec-env:RUST_LOG=info\n \n #[no_uv];\n-extern mod native;\n+extern crate native;\n \n use std::fmt;\n use std::io::{PortReader, ChanWriter};"}, {"sha": "cb77c63d4511a740f8cddbd5cd1656f7632867c5", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,7 +13,7 @@\n \n #[feature(managed_boxes)];\n \n-extern mod cci_borrow_lib;\n+extern crate cci_borrow_lib;\n use cci_borrow_lib::foo;\n \n pub fn main() {"}, {"sha": "fa96f65243ead3fb1053f4b956cf4d8c815a5077", "filename": "src/test/run-pass/cci_capture_clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -14,7 +14,7 @@\n // This test makes sure we can do cross-crate inlining on functions\n // that use capture clauses.\n \n-extern mod cci_capture_clause;\n+extern crate cci_capture_clause;\n \n pub fn main() {\n     cci_capture_clause::foo(()).recv()"}, {"sha": "e5e1736044c5db738765f58b443ac6d0f3e307d1", "filename": "src/test/run-pass/cci_impl_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast - check-fast doesn't understand aux-build\n // aux-build:cci_impl_lib.rs\n \n-extern mod cci_impl_lib;\n+extern crate cci_impl_lib;\n use cci_impl_lib::uint_helpers;\n \n pub fn main() {"}, {"sha": "41717177f75bc8b7b6b1158c0c18e17825b64d3a", "filename": "src/test/run-pass/cci_iter_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast - check-fast doesn't understand aux-build\n // aux-build:cci_iter_lib.rs\n \n-extern mod cci_iter_lib;\n+extern crate cci_iter_lib;\n \n pub fn main() {\n     //let bt0 = sys::rusti::frame_address(1u32);"}, {"sha": "3810f7919ac267dcf53fb02536675b3ccc568e32", "filename": "src/test/run-pass/cci_nested_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_nested_exe.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,7 +13,7 @@\n \n #[feature(globs, managed_boxes)];\n \n-extern mod cci_nested_lib;\n+extern crate cci_nested_lib;\n use cci_nested_lib::*;\n \n pub fn main() {"}, {"sha": "faa2a350117043241a73b214922ccc680b9df3da", "filename": "src/test/run-pass/cci_no_inline_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast - check-fast doesn't understand aux-build\n // aux-build:cci_no_inline_lib.rs\n \n-extern mod cci_no_inline_lib;\n+extern crate cci_no_inline_lib;\n use cci_no_inline_lib::iter;\n \n pub fn main() {"}, {"sha": "08951dfd50e2e968543c087e9cb5be0bf440332c", "filename": "src/test/run-pass/cfg_inner_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcfg_inner_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcfg_inner_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg_inner_static.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // aux-build:cfg_inner_static.rs\n // ignore-fast\n \n-extern mod cfg_inner_static;\n+extern crate cfg_inner_static;\n \n pub fn main() {\n     cfg_inner_static::foo();"}, {"sha": "746342ae97345272dda99c6043960cc6eaaf0438", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-fast\n // aux-build:cci_class_cast.rs\n-extern mod cci_class_cast;\n+extern crate cci_class_cast;\n use std::to_str::ToStr;\n use cci_class_cast::kitty::cat;\n "}, {"sha": "caa4a3b2feb6f9e349f2942039cd96695ea43cbc", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-fast\n // aux-build:cci_class_trait.rs\n-extern mod cci_class_trait;\n+extern crate cci_class_trait;\n use cci_class_trait::animals::noisy;\n \n struct cat {"}, {"sha": "8ee367d281f2c92f0032a60aa9e8dc41a6a632a8", "filename": "src/test/run-pass/class-method-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-fast\n // aux-build:cci_class_2.rs\n-extern mod cci_class_2;\n+extern crate cci_class_2;\n use cci_class_2::kitties::cat;\n \n pub fn main() {"}, {"sha": "ca3b491844f127e5f94b21d8d7a982a5afd6fb6b", "filename": "src/test/run-pass/class-methods-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-fast\n // aux-build:cci_class_3.rs\n-extern mod cci_class_3;\n+extern crate cci_class_3;\n use cci_class_3::kitties::cat;\n \n pub fn main() {"}, {"sha": "671d7a403531bbe50c1a820d0b6f12ed01f1c848", "filename": "src/test/run-pass/class-poly-methods-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-fast\n // aux-build:cci_class_6.rs\n-extern mod cci_class_6;\n+extern crate cci_class_6;\n use cci_class_6::kitties::cat;\n \n pub fn main() {"}, {"sha": "2e1d19b9dda2d86044a3c5bdd9bd156623994bc6", "filename": "src/test/run-pass/classes-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-fast\n // aux-build:cci_class_4.rs\n-extern mod cci_class_4;\n+extern crate cci_class_4;\n use cci_class_4::kitties::cat;\n \n pub fn main() {"}, {"sha": "6d816e725b9b9030b0133ae2a9007e33d621f397", "filename": "src/test/run-pass/classes-simple-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-fast\n // aux-build:cci_class.rs\n-extern mod cci_class;\n+extern crate cci_class;\n use cci_class::kitties::cat;\n \n pub fn main() {"}, {"sha": "091cebcc0633bac955bcc2c2611a46445caebfdc", "filename": "src/test/run-pass/clone-with-exterior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n use std::task::spawn;\n \n struct Pair {"}, {"sha": "c8dc98baac6be8d647ad748ea09443baf4417463", "filename": "src/test/run-pass/const-cross-crate-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-const.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast\n // aux-build:cci_const.rs\n \n-extern mod cci_const;\n+extern crate cci_const;\n static foo: &'static str = cci_const::foopy;\n static a: uint = cci_const::uint_val;\n static b: uint = cci_const::uint_expr + 5;"}, {"sha": "75a0bac0293cacd4502a0bb227228ef1bac9ee44", "filename": "src/test/run-pass/const-cross-crate-extern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-cross-crate-extern.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast\n // aux-build:cci_const.rs\n \n-extern mod cci_const;\n+extern crate cci_const;\n use cci_const::bar;\n static foo: extern \"C\" fn() = bar;\n "}, {"sha": "1b563d33433c353c91f250751b1de7f18c5c189f", "filename": "src/test/run-pass/crate-method-reexport-grrrrrrr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -17,7 +17,7 @@\n // ignore-fast\n // aux-build:crate-method-reexport-grrrrrrr2.rs\n \n-extern mod crate_method_reexport_grrrrrrr2;\n+extern crate crate_method_reexport_grrrrrrr2;\n \n pub fn main() {\n     use crate_method_reexport_grrrrrrr2::rust::add;"}, {"sha": "bf13e66690cd1eb8cc97e08e1764d2e816ac96b6", "filename": "src/test/run-pass/crateresolve1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcrateresolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcrateresolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve1.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,7 +13,7 @@\n // aux-build:crateresolve1-2.rs\n // aux-build:crateresolve1-3.rs\n \n-extern mod crateresolve1 = \"crateresolve1#0.2\";\n+extern crate crateresolve1 = \"crateresolve1#0.2\";\n \n pub fn main() {\n     assert_eq!(crateresolve1::f(), 20);"}, {"sha": "1419d68ad6837a02761dd976953715549dedd430", "filename": "src/test/run-pass/crateresolve2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -14,17 +14,17 @@\n // aux-build:crateresolve2-3.rs\n \n mod a {\n-    extern mod crateresolve2 = \"crateresolve2#0.1\";\n+    extern crate crateresolve2 = \"crateresolve2#0.1\";\n     pub fn f() { assert!(crateresolve2::f() == 10); }\n }\n \n mod b {\n-    extern mod crateresolve2 = \"crateresolve2#0.2\";\n+    extern crate crateresolve2 = \"crateresolve2#0.2\";\n     pub fn f() { assert!(crateresolve2::f() == 20); }\n }\n \n mod c {\n-    extern mod crateresolve2 = \"crateresolve2#0.3\";\n+    extern crate crateresolve2 = \"crateresolve2#0.3\";\n     pub fn f() { assert!(crateresolve2::f() == 30); }\n }\n "}, {"sha": "fd83c8f515a5145cc848cf8d61d5d5b5453a62fa", "filename": "src/test/run-pass/crateresolve3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -16,12 +16,12 @@\n // as long as no name collision on invoked functions.\n \n mod a {\n-    extern mod crateresolve3 = \"crateresolve3#0.1\";\n+    extern crate crateresolve3 = \"crateresolve3#0.1\";\n     pub fn f() { assert!(crateresolve3::f() == 10); }\n }\n \n mod b {\n-    extern mod crateresolve3 = \"crateresolve3#0.2\";\n+    extern crate crateresolve3 = \"crateresolve3#0.2\";\n     pub fn f() { assert!(crateresolve3::g() == 20); }\n }\n "}, {"sha": "3243c909e03a926e57bb93de90334954cb17139c", "filename": "src/test/run-pass/crateresolve4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcrateresolve4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcrateresolve4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve4.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -15,12 +15,12 @@\n // aux-build:crateresolve4b-2.rs\n \n pub mod a {\n-    extern mod crateresolve4b = \"crateresolve4b#0.1\";\n+    extern crate crateresolve4b = \"crateresolve4b#0.1\";\n     pub fn f() { assert!(crateresolve4b::f() == 20); }\n }\n \n pub mod b {\n-    extern mod crateresolve4b = \"crateresolve4b#0.2\";\n+    extern crate crateresolve4b = \"crateresolve4b#0.2\";\n     pub fn f() { assert!(crateresolve4b::g() == 10); }\n }\n "}, {"sha": "ca690b9089bb53e0f59315669787669a42d5794f", "filename": "src/test/run-pass/crateresolve5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcrateresolve5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcrateresolve5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve5.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,8 +12,8 @@\n // aux-build:crateresolve5-1.rs\n // aux-build:crateresolve5-2.rs\n \n-extern mod cr5_1 = \"crateresolve5#0.1\";\n-extern mod cr5_2 = \"crateresolve5#0.2\";\n+extern crate cr5_1 = \"crateresolve5#0.1\";\n+extern crate cr5_2 = \"crateresolve5#0.2\";\n \n pub fn main() {\n     // Structural types can be used between two versions of the same crate"}, {"sha": "46ccb01f66048980d3e25ce61bf0498c0ac13e80", "filename": "src/test/run-pass/crateresolve8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcrateresolve8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcrateresolve8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve8.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,8 +13,8 @@\n \n #[crate_id=\"crateresolve8#0.1\"];\n \n-extern mod crateresolve8 = \"crateresolve8#0.1\";\n-//extern mod crateresolve8(vers = \"0.1\");\n+extern crate crateresolve8 = \"crateresolve8#0.1\";\n+//extern crate crateresolve8(vers = \"0.1\");\n \n pub fn main() {\n     assert_eq!(crateresolve8::f(), 20);"}, {"sha": "9e3a43469f2ef7d475df298ddd48c49b277994ce", "filename": "src/test/run-pass/cross-crate-const-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcross-crate-const-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcross-crate-const-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcross-crate-const-pat.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast\n // aux-build:cci_const.rs\n \n-extern mod cci_const;\n+extern crate cci_const;\n \n pub fn main() {\n     let x = cci_const::uint_val;"}, {"sha": "8988ee52b1649b9f7d0094ac5ededd88ee5698ab", "filename": "src/test/run-pass/cross-crate-newtype-struct-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcross-crate-newtype-struct-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fcross-crate-newtype-struct-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcross-crate-newtype-struct-pat.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast\n // aux-build:newtype_struct_xc.rs\n \n-extern mod newtype_struct_xc;\n+extern crate newtype_struct_xc;\n \n pub fn main() {\n     let x = newtype_struct_xc::Au(21);"}, {"sha": "50ccac793c265c07f8a56d792dbdc0321ffd6869", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -16,7 +16,7 @@\n \n #[feature(struct_variant, managed_boxes)];\n \n-extern mod serialize;\n+extern crate serialize;\n \n use std::io::MemWriter;\n use std::rand::{random, Rand};"}, {"sha": "544a8c2b00af84bb51d2b01c239b68eb743fb615", "filename": "src/test/run-pass/deriving-global.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-global.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-fast #7103 `extern mod` does not work on check-fast\n+// ignore-fast #7103 `extern crate` does not work on check-fast\n // ignore-pretty - does not converge\n \n // Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n@@ -21,7 +21,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod serialize; // {En,De}codable\n+extern crate serialize; // {En,De}codable\n mod submod {\n     // if any of these are implemented without global calls for any\n     // function calls, then being in a submodule will (correctly)"}, {"sha": "c710eb5eafb0f248bca5dcb3d8bdb9adfd0c327d", "filename": "src/test/run-pass/duplicate-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fduplicate-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fduplicate-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fduplicate-use.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-test\n \n-extern mod extra;\n+extern crate extra;\n \n use list = extra::oldmap::chained;\n use extra::list;"}, {"sha": "b50fd7cbb34cd515248ef8fcee2d8960c632f9e1", "filename": "src/test/run-pass/duplicated-external-mods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fduplicated-external-mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fduplicated-external-mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fduplicated-external-mods.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast\n // aux-build:anon-extern-mod-cross-crate-1.rs\n // aux-build:anon-extern-mod-cross-crate-1.rs\n-extern mod anonexternmod;\n+extern crate anonexternmod;\n \n pub fn main() { }\n "}, {"sha": "a3c5256c2d3651fa94867df3b6158d80cfc00b72", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n \n /**\n  * A function that returns a hash of a value"}, {"sha": "ce805fcf7371393cc79b2e3b045abfa95ed2c530", "filename": "src/test/run-pass/explicit_self_xcrate_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fexplicit_self_xcrate_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fexplicit_self_xcrate_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit_self_xcrate_exe.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast\n // aux-build:explicit_self_xcrate.rs\n \n-extern mod explicit_self_xcrate;\n+extern crate explicit_self_xcrate;\n use explicit_self_xcrate::{Foo, Bar};\n \n pub fn main() {"}, {"sha": "b895466cf7ebe7cb8e0d0ee757e09ff6e16ceeba", "filename": "src/test/run-pass/extern-calling-convention-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fextern-calling-convention-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fextern-calling-convention-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-calling-convention-test.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast: aux-build not compatible with fast\n // aux-build:extern_calling_convention.rs\n \n-extern mod extern_calling_convention;\n+extern crate extern_calling_convention;\n \n use extern_calling_convention::foo;\n "}, {"sha": "ccd79600a15a71edf6876d8e18f21fda6bc159be", "filename": "src/test/run-pass/extern-crosscrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // ignore-fast\n //aux-build:extern-crosscrate-source.rs\n \n-extern mod externcallback = \"externcallback#0.1\";\n+extern crate externcallback = \"externcallback#0.1\";\n \n fn fact(n: uint) -> uint {\n     unsafe {"}, {"sha": "1c5df4acf73c755e1cc9f5c8cdacb399ad5130fc", "filename": "src/test/run-pass/extern-foreign-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fextern-foreign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fextern-foreign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-foreign-crate.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n extern crate extra;\n-extern mod mystd = \"std\";\n+extern crate mystd = \"std\";\n \n pub fn main() {}"}, {"sha": "f228c0c099253c65a50ccdb6ab9d6e8e6f319292", "filename": "src/test/run-pass/extern-mod-ordering-exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fextern-mod-ordering-exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fextern-mod-ordering-exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-mod-ordering-exe.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // aux-build:extern_mod_ordering_lib.rs\n // ignore-fast\n \n-extern mod extern_mod_ordering_lib;\n+extern crate extern_mod_ordering_lib;\n \n use extern_mod_ordering_lib::extern_mod_ordering_lib;\n "}, {"sha": "fdea2716d5f2963a699b70e86c5d26a385514808", "filename": "src/test/run-pass/extern-mod-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-mod-syntax.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -12,7 +12,7 @@\n \n #[allow(unused_imports)];\n \n-extern mod extra;\n+extern crate extra;\n use extra::json::Object;\n \n pub fn main() {"}, {"sha": "66c84d52745cdbf7c9c62e4847689f4052d79ab5", "filename": "src/test/run-pass/float-nan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Ffloat-nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Ffloat-nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat-nan.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n \n use std::num::Float;\n "}, {"sha": "b9d8d622731d3b6bfd3727d7c0e63e0c24fbfb07", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod extra;\n+extern crate extra;\n \n mod libc {\n     use std::libc::{c_char, size_t};"}, {"sha": "412e780f8a23b51acf8a2155f5309f7fd1a2b697", "filename": "src/test/run-pass/generic-default-type-params-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -15,7 +15,7 @@\n \n #[allow(default_type_param_usage)];\n \n-extern mod default_type_params_xc;\n+extern crate default_type_params_xc;\n \n struct Vec<T, A = default_type_params_xc::Heap>;\n "}, {"sha": "55ecf919b7240f80ca087c08793a991884d998f5", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -10,7 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern mod getopts;\n+extern crate getopts;\n \n use getopts::{optopt, getopts};\n "}, {"sha": "c1e6f04e67d0d0759361cc20d864b793f0fd88e9", "filename": "src/test/run-pass/glob-std.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fglob-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fglob-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fglob-std.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-fast check-fast doesn't like 'extern mod extra'\n+// ignore-fast check-fast doesn't like 'extern crate extra'\n // ignore-win32 TempDir may cause IoError on windows: #10462\n \n-extern mod extra;\n-extern mod glob;\n+extern crate extra;\n+extern crate glob;\n \n use glob::glob;\n use extra::tempfile::TempDir;"}, {"sha": "9665d4d684d9c2701ed43b15dbdbe2091228333b", "filename": "src/test/run-pass/impl-privacy-xc-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fimpl-privacy-xc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fimpl-privacy-xc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-privacy-xc-1.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // aux-build:impl_privacy_xc_1.rs\n // ignore-fast\n \n-extern mod impl_privacy_xc_1;\n+extern crate impl_privacy_xc_1;\n \n pub fn main() {\n     let fish = impl_privacy_xc_1::Fish { x: 1 };"}, {"sha": "8e67a5c74c5d8ae349c844a36bb296665fafa60a", "filename": "src/test/run-pass/impl-privacy-xc-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fimpl-privacy-xc-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fimpl-privacy-xc-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-privacy-xc-2.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -11,7 +11,7 @@\n // aux-build:impl_privacy_xc_2.rs\n // ignore-fast\n \n-extern mod impl_privacy_xc_2;\n+extern crate impl_privacy_xc_2;\n \n pub fn main() {\n     let fish1 = impl_privacy_xc_2::Fish { x: 1 };"}, {"sha": "f2117efb0bbe66c6490815d3c3867059f9b952f2", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b025c803c72d610c2ad4c950151b0d23782d114/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=6b025c803c72d610c2ad4c950151b0d23782d114", "patch": "@@ -13,7 +13,7 @@\n #[feature(globs)];\n #[allow(dead_assignment)];\n \n-extern mod extra;\n+extern crate extra;\n use std::vec::*;\n \n pub fn main() {"}]}