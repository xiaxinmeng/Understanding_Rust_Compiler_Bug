{"sha": "5aff0e7cec9a3833ea67477bca13efcb4d950db7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhZmYwZTdjZWM5YTM4MzNlYTY3NDc3YmNhMTNlZmNiNGQ5NTBkYjc=", "commit": {"author": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-05-30T04:17:49Z"}, "committer": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-05-30T05:02:57Z"}, "message": "Fix the handling of assignments to owning pointer paths in check_loans\n\nMake check_for_assignment_to_restricted_or_frozen_location treat\nmutation through an owning pointer the same way it treats mutation\nthrough an &mut pointer, where mutability must be inherited from the\nbase path.\n\nI also included GC pointers in this check, as that is what the\ncorresponding code in gather_loans/restrictions.rs does, but I don't\nthink there is a way to test this with the current language.\n\nFixes #14498.", "tree": {"sha": "f5158518c790ed91d3f76ee8a47e1a7b1c833809", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5158518c790ed91d3f76ee8a47e1a7b1c833809"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aff0e7cec9a3833ea67477bca13efcb4d950db7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aff0e7cec9a3833ea67477bca13efcb4d950db7", "html_url": "https://github.com/rust-lang/rust/commit/5aff0e7cec9a3833ea67477bca13efcb4d950db7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aff0e7cec9a3833ea67477bca13efcb4d950db7/comments", "author": null, "committer": null, "parents": [{"sha": "81c022317a67042f6eef9491a12d6bdb10cf6e46", "url": "https://api.github.com/repos/rust-lang/rust/commits/81c022317a67042f6eef9491a12d6bdb10cf6e46", "html_url": "https://github.com/rust-lang/rust/commit/81c022317a67042f6eef9491a12d6bdb10cf6e46"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "77fad454e6ec4126d04a2e2ef1ad48e0c98fef5a", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aff0e7cec9a3833ea67477bca13efcb4d950db7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aff0e7cec9a3833ea67477bca13efcb4d950db7/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=5aff0e7cec9a3833ea67477bca13efcb4d950db7", "patch": "@@ -641,6 +641,8 @@ impl<'a> CheckLoanCtxt<'a> {\n                     // with inherited mutability and with `&mut`\n                     // pointers.\n                     LpExtend(ref lp_base, mc::McInherited, _) |\n+                    LpExtend(ref lp_base, _, LpDeref(mc::OwnedPtr)) |\n+                    LpExtend(ref lp_base, _, LpDeref(mc::GcPtr)) |\n                     LpExtend(ref lp_base, _, LpDeref(mc::BorrowedPtr(ty::MutBorrow, _))) => {\n                         lp_base.clone()\n                     }"}, {"sha": "45dda5fee5a32921a1b0a6e46b4f79826c3e5912", "filename": "src/test/compile-fail/borrowck-issue-14498.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/5aff0e7cec9a3833ea67477bca13efcb4d950db7/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aff0e7cec9a3833ea67477bca13efcb4d950db7/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-issue-14498.rs?ref=5aff0e7cec9a3833ea67477bca13efcb4d950db7", "patch": "@@ -0,0 +1,63 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This tests that we can't modify Box<&mut T> contents while they\n+// are borrowed.\n+\n+struct A { a: int }\n+struct B<'a> { a: Box<&'a mut int> }\n+\n+fn borrow_in_var_from_var() {\n+    let mut x: int = 1;\n+    let y = box &mut x;\n+    let p = &y;\n+    let q = &***p;\n+    **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n+    drop(p);\n+    drop(q);\n+}\n+\n+fn borrow_in_var_from_field() {\n+    let mut x = A { a: 1 };\n+    let y = box &mut x.a;\n+    let p = &y;\n+    let q = &***p;\n+    **y = 2; //~ ERROR cannot assign to `**y` because it is borrowed\n+    drop(p);\n+    drop(q);\n+}\n+\n+fn borrow_in_field_from_var() {\n+    let mut x: int = 1;\n+    let y = B { a: box &mut x };\n+    let p = &y.a;\n+    let q = &***p;\n+    **y.a = 2; //~ ERROR cannot assign to `**y.a` because it is borrowed\n+    drop(p);\n+    drop(q);\n+}\n+\n+fn borrow_in_field_from_field() {\n+    let mut x = A { a: 1 };\n+    let y = B { a: box &mut x.a };\n+    let p = &y.a;\n+    let q = &***p;\n+    **y.a = 2; //~ ERROR cannot assign to `**y.a` because it is borrowed\n+    drop(p);\n+    drop(q);\n+}\n+\n+fn main() {\n+    borrow_in_var_from_var();\n+    borrow_in_var_from_field();\n+    borrow_in_field_from_var();\n+    borrow_in_field_from_field();\n+}\n+"}]}