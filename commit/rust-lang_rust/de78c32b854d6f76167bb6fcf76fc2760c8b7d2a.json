{"sha": "de78c32b854d6f76167bb6fcf76fc2760c8b7d2a", "node_id": "C_kwDOAAsO6NoAKGRlNzhjMzJiODU0ZDZmNzYxNjdiYjZmY2Y3NmZjMjc2MGM4YjdkMmE", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-10-23T23:11:25Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-10-23T23:11:25Z"}, "message": "Cleanup message and bless tests", "tree": {"sha": "96d756157db501e46c62a39789a22642207100b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96d756157db501e46c62a39789a22642207100b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de78c32b854d6f76167bb6fcf76fc2760c8b7d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de78c32b854d6f76167bb6fcf76fc2760c8b7d2a", "html_url": "https://github.com/rust-lang/rust/commit/de78c32b854d6f76167bb6fcf76fc2760c8b7d2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de78c32b854d6f76167bb6fcf76fc2760c8b7d2a/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65ef62597b82778a1cb7b295932663671a0156c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/65ef62597b82778a1cb7b295932663671a0156c8", "html_url": "https://github.com/rust-lang/rust/commit/65ef62597b82778a1cb7b295932663671a0156c8"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "3f51005a5f03d8766bb783791eecb579cb9bcc03", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de78c32b854d6f76167bb6fcf76fc2760c8b7d2a/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de78c32b854d6f76167bb6fcf76fc2760c8b7d2a/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=de78c32b854d6f76167bb6fcf76fc2760c8b7d2a", "patch": "@@ -122,7 +122,7 @@ fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_>, decl: &hir::FnDecl<'_>, abi: Abi\n     const CONVENTIONS_UNSTABLE: &str = \"`C`, `cdecl`, `win64`, `sysv64` or `efiapi`\";\n     const CONVENTIONS_STABLE: &str = \"`C` or `cdecl`\";\n     const UNSTABLE_EXPLAIN: &str =\n-        \"using different calling convention than `C` or `cdecl` for varargs functions is unstable\";\n+        \"using calling conventions other than `C` or `cdecl` for varargs functions is unstable\";\n \n     if !decl.c_variadic || matches!(abi, Abi::C { .. } | Abi::Cdecl { .. }) {\n         return;"}, {"sha": "087743e505d25362f06c04b61e5d87cf4e1c14bb", "filename": "src/test/ui/c-variadic/feature-gate-extended_varargs_abi_support.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de78c32b854d6f76167bb6fcf76fc2760c8b7d2a/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de78c32b854d6f76167bb6fcf76fc2760c8b7d2a/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.rs?ref=de78c32b854d6f76167bb6fcf76fc2760c8b7d2a", "patch": "@@ -1,18 +1,18 @@\n #![feature(abi_efiapi)]\n \n fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n-    //~^ ERROR: C-variadic function must have a compatible calling convention, like C or cdecl\n-    //~^^ ERROR: using different calling convention than C or cdecl for varargs functions is unstable\n+    //~^ ERROR: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n+    //~^^ ERROR: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n     f(22, 44);\n }\n fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n-    //~^ ERROR: C-variadic function must have a compatible calling convention, like C or cdecl\n-    //~^^ ERROR: using different calling convention than C or cdecl for varargs functions is unstable\n+    //~^ ERROR: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n+    //~^^ ERROR: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n     f(22, 44);\n }\n fn win(f: extern \"win64\" fn(usize, ...)) {\n-    //~^ ERROR: C-variadic function must have a compatible calling convention, like C or cdecl\n-    //~^^ ERROR: using different calling convention than C or cdecl for varargs functions is unstable\n+    //~^ ERROR: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n+    //~^^ ERROR: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n     f(22, 44);\n }\n "}, {"sha": "007d7d7953c9403b40fc7936e3ac23e5ff9a0c17", "filename": "src/test/ui/c-variadic/feature-gate-extended_varargs_abi_support.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de78c32b854d6f76167bb6fcf76fc2760c8b7d2a/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de78c32b854d6f76167bb6fcf76fc2760c8b7d2a/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.stderr?ref=de78c32b854d6f76167bb6fcf76fc2760c8b7d2a", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: using different calling convention than C or cdecl for varargs functions is unstable\n+error[E0658]: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n   --> $DIR/feature-gate-extended_varargs_abi_support.rs:3:14\n    |\n LL | fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n@@ -7,13 +7,13 @@ LL | fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n    = note: see issue #100189 <https://github.com/rust-lang/rust/issues/100189> for more information\n    = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable\n \n-error[E0045]: C-variadic function must have a compatible calling convention, like C or cdecl\n+error[E0045]: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n   --> $DIR/feature-gate-extended_varargs_abi_support.rs:3:14\n    |\n LL | fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n \n-error[E0658]: using different calling convention than C or cdecl for varargs functions is unstable\n+error[E0658]: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n   --> $DIR/feature-gate-extended_varargs_abi_support.rs:8:12\n    |\n LL | fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n@@ -22,13 +22,13 @@ LL | fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n    = note: see issue #100189 <https://github.com/rust-lang/rust/issues/100189> for more information\n    = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable\n \n-error[E0045]: C-variadic function must have a compatible calling convention, like C or cdecl\n+error[E0045]: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n   --> $DIR/feature-gate-extended_varargs_abi_support.rs:8:12\n    |\n LL | fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n \n-error[E0658]: using different calling convention than C or cdecl for varargs functions is unstable\n+error[E0658]: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n   --> $DIR/feature-gate-extended_varargs_abi_support.rs:13:11\n    |\n LL | fn win(f: extern \"win64\" fn(usize, ...)) {\n@@ -37,7 +37,7 @@ LL | fn win(f: extern \"win64\" fn(usize, ...)) {\n    = note: see issue #100189 <https://github.com/rust-lang/rust/issues/100189> for more information\n    = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable\n \n-error[E0045]: C-variadic function must have a compatible calling convention, like C or cdecl\n+error[E0045]: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n   --> $DIR/feature-gate-extended_varargs_abi_support.rs:13:11\n    |\n LL | fn win(f: extern \"win64\" fn(usize, ...)) {"}, {"sha": "4beea83d8a5287b2a6216c24caa4ceb2fb157598", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de78c32b854d6f76167bb6fcf76fc2760c8b7d2a/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de78c32b854d6f76167bb6fcf76fc2760c8b7d2a/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=de78c32b854d6f76167bb6fcf76fc2760c8b7d2a", "patch": "@@ -1,4 +1,4 @@\n-error[E0045]: C-variadic function must have a compatible calling convention, like C or cdecl\n+error[E0045]: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n   --> $DIR/variadic-ffi-1.rs:9:5\n    |\n LL |     fn printf(_: *const u8, ...);"}, {"sha": "4e74c9d922786be95c85b5c0494e6637f9408f65", "filename": "src/test/ui/c-variadic/variadic-ffi-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de78c32b854d6f76167bb6fcf76fc2760c8b7d2a/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de78c32b854d6f76167bb6fcf76fc2760c8b7d2a/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr?ref=de78c32b854d6f76167bb6fcf76fc2760c8b7d2a", "patch": "@@ -1,4 +1,4 @@\n-error[E0045]: C-variadic function must have a compatible calling convention, like C, cdecl, win64, sysv64 or efiapi\n+error[E0045]: C-variadic function must have a compatible calling convention, like `C`, `cdecl`, `win64`, `sysv64` or `efiapi`\n   --> $DIR/variadic-ffi-2.rs:5:11\n    |\n LL | fn baz(f: extern \"stdcall\" fn(usize, ...)) {"}, {"sha": "fcc613b11b8d1de8ef73431fd4072acd78a60c34", "filename": "src/test/ui/error-codes/E0045.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de78c32b854d6f76167bb6fcf76fc2760c8b7d2a/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de78c32b854d6f76167bb6fcf76fc2760c8b7d2a/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0045.stderr?ref=de78c32b854d6f76167bb6fcf76fc2760c8b7d2a", "patch": "@@ -1,4 +1,4 @@\n-error[E0045]: C-variadic function must have a compatible calling convention, like C or cdecl\n+error[E0045]: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n   --> $DIR/E0045.rs:1:17\n    |\n LL | extern \"Rust\" { fn foo(x: u8, ...); }"}]}