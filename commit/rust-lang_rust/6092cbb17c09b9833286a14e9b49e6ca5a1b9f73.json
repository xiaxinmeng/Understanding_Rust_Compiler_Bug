{"sha": "6092cbb17c09b9833286a14e9b49e6ca5a1b9f73", "node_id": "C_kwDOAAsO6NoAKDYwOTJjYmIxN2MwOWI5ODMzMjg2YTE0ZTliNDllNmNhNWExYjlmNzM", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-02-16T14:26:09Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-05-21T11:21:12Z"}, "message": "Remove fields_stripped fields (and equivalents)", "tree": {"sha": "7b8b65cdfcd05842067957646702dd8de7873ee7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b8b65cdfcd05842067957646702dd8de7873ee7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73", "html_url": "https://github.com/rust-lang/rust/commit/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f372b14dea58cbff1dd76bb651f9c035d3f6e7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f372b14dea58cbff1dd76bb651f9c035d3f6e7b", "html_url": "https://github.com/rust-lang/rust/commit/4f372b14dea58cbff1dd76bb651f9c035d3f6e7b"}], "stats": {"total": 117, "additions": 64, "deletions": 53}, "files": [{"sha": "43c33e498a74b2c6cfc35dda24805ba5672a1e35", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=6092cbb17c09b9833286a14e9b49e6ca5a1b9f73", "patch": "@@ -236,7 +236,6 @@ fn build_enum(cx: &mut DocContext<'_>, did: DefId) -> clean::Enum {\n \n     clean::Enum {\n         generics: clean_ty_generics(cx, cx.tcx.generics_of(did), predicates),\n-        variants_stripped: false,\n         variants: cx.tcx.adt_def(did).variants().iter().map(|v| v.clean(cx)).collect(),\n     }\n }\n@@ -249,7 +248,6 @@ fn build_struct(cx: &mut DocContext<'_>, did: DefId) -> clean::Struct {\n         struct_type: variant.ctor_kind,\n         generics: clean_ty_generics(cx, cx.tcx.generics_of(did), predicates),\n         fields: variant.fields.iter().map(|x| x.clean(cx)).collect(),\n-        fields_stripped: false,\n     }\n }\n \n@@ -259,7 +257,7 @@ fn build_union(cx: &mut DocContext<'_>, did: DefId) -> clean::Union {\n \n     let generics = clean_ty_generics(cx, cx.tcx.generics_of(did), predicates);\n     let fields = variant.fields.iter().map(|x| x.clean(cx)).collect();\n-    clean::Union { generics, fields, fields_stripped: false }\n+    clean::Union { generics, fields }\n }\n \n fn build_type_alias(cx: &mut DocContext<'_>, did: DefId) -> clean::Typedef {"}, {"sha": "d2c32c8ba07ecad1867f8826770a62238b4694db", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6092cbb17c09b9833286a14e9b49e6ca5a1b9f73", "patch": "@@ -1771,7 +1771,6 @@ impl Clean<VariantStruct> for rustc_hir::VariantData<'_> {\n         VariantStruct {\n             struct_type: CtorKind::from_hir(self),\n             fields: self.fields().iter().map(|x| x.clean(cx)).collect(),\n-            fields_stripped: false,\n         }\n     }\n }\n@@ -1791,7 +1790,6 @@ impl Clean<Item> for ty::VariantDef {\n             }\n             CtorKind::Fictive => Variant::Struct(VariantStruct {\n                 struct_type: CtorKind::Fictive,\n-                fields_stripped: false,\n                 fields: self.fields.iter().map(|field| field.clean(cx)).collect(),\n             }),\n         };\n@@ -1900,7 +1898,6 @@ fn clean_maybe_renamed_item(\n             ItemKind::Enum(ref def, ref generics) => EnumItem(Enum {\n                 variants: def.variants.iter().map(|v| v.clean(cx)).collect(),\n                 generics: generics.clean(cx),\n-                variants_stripped: false,\n             }),\n             ItemKind::TraitAlias(ref generics, bounds) => TraitAliasItem(TraitAlias {\n                 generics: generics.clean(cx),\n@@ -1909,13 +1906,11 @@ fn clean_maybe_renamed_item(\n             ItemKind::Union(ref variant_data, ref generics) => UnionItem(Union {\n                 generics: generics.clean(cx),\n                 fields: variant_data.fields().iter().map(|x| x.clean(cx)).collect(),\n-                fields_stripped: false,\n             }),\n             ItemKind::Struct(ref variant_data, ref generics) => StructItem(Struct {\n                 struct_type: CtorKind::from_hir(variant_data),\n                 generics: generics.clean(cx),\n                 fields: variant_data.fields().iter().map(|x| x.clean(cx)).collect(),\n-                fields_stripped: false,\n             }),\n             ItemKind::Impl(ref impl_) => return clean_impl(impl_, item.hir_id(), cx),\n             // proc macros can have a name set by attributes"}, {"sha": "2a8f61ffb2b42a8c15d4489af509585d7b4dc4e1", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6092cbb17c09b9833286a14e9b49e6ca5a1b9f73", "patch": "@@ -619,11 +619,12 @@ impl Item {\n             _ => false,\n         }\n     }\n-    pub(crate) fn has_stripped_fields(&self) -> Option<bool> {\n+    pub(crate) fn has_stripped_entries(&self) -> Option<bool> {\n         match *self.kind {\n-            StructItem(ref _struct) => Some(_struct.fields_stripped),\n-            UnionItem(ref union) => Some(union.fields_stripped),\n-            VariantItem(Variant::Struct(ref vstruct)) => Some(vstruct.fields_stripped),\n+            StructItem(ref struct_) => Some(struct_.has_stripped_entries()),\n+            UnionItem(ref union_) => Some(union_.has_stripped_entries()),\n+            EnumItem(ref enum_) => Some(enum_.has_stripped_entries()),\n+            VariantItem(ref v) => v.has_stripped_entries(),\n             _ => None,\n         }\n     }\n@@ -2030,14 +2031,24 @@ pub(crate) struct Struct {\n     pub(crate) struct_type: CtorKind,\n     pub(crate) generics: Generics,\n     pub(crate) fields: Vec<Item>,\n-    pub(crate) fields_stripped: bool,\n+}\n+\n+impl Struct {\n+    pub(crate) fn has_stripped_entries(&self) -> bool {\n+        self.fields.iter().any(|f| f.is_stripped())\n+    }\n }\n \n #[derive(Clone, Debug)]\n pub(crate) struct Union {\n     pub(crate) generics: Generics,\n     pub(crate) fields: Vec<Item>,\n-    pub(crate) fields_stripped: bool,\n+}\n+\n+impl Union {\n+    pub(crate) fn has_stripped_entries(&self) -> bool {\n+        self.fields.iter().any(|f| f.is_stripped())\n+    }\n }\n \n /// This is a more limited form of the standard Struct, different in that\n@@ -2047,14 +2058,28 @@ pub(crate) struct Union {\n pub(crate) struct VariantStruct {\n     pub(crate) struct_type: CtorKind,\n     pub(crate) fields: Vec<Item>,\n-    pub(crate) fields_stripped: bool,\n+}\n+\n+impl VariantStruct {\n+    pub(crate) fn has_stripped_entries(&self) -> bool {\n+        self.fields.iter().any(|f| f.is_stripped())\n+    }\n }\n \n #[derive(Clone, Debug)]\n pub(crate) struct Enum {\n     pub(crate) variants: IndexVec<VariantIdx, Item>,\n     pub(crate) generics: Generics,\n-    pub(crate) variants_stripped: bool,\n+}\n+\n+impl Enum {\n+    pub(crate) fn has_stripped_entries(&self) -> bool {\n+        self.variants.iter().any(|f| f.is_stripped())\n+    }\n+\n+    pub(crate) fn variants(&self) -> impl Iterator<Item = &Item> {\n+        self.variants.iter().filter(|v| !v.is_stripped())\n+    }\n }\n \n #[derive(Clone, Debug)]\n@@ -2064,6 +2089,15 @@ pub(crate) enum Variant {\n     Struct(VariantStruct),\n }\n \n+impl Variant {\n+    pub(crate) fn has_stripped_entries(&self) -> Option<bool> {\n+        match *self {\n+            Self::Struct(ref struct_) => Some(struct_.has_stripped_entries()),\n+            Self::CLike | Self::Tuple(_) => None,\n+        }\n+    }\n+}\n+\n /// Small wrapper around [`rustc_span::Span`] that adds helper methods\n /// and enforces calling [`rustc_span::Span::source_callsite()`].\n #[derive(Copy, Clone, Debug)]"}, {"sha": "336448904d1652786a81bbb24ae9a04b75765997", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=6092cbb17c09b9833286a14e9b49e6ca5a1b9f73", "patch": "@@ -18,30 +18,15 @@ pub(crate) trait DocFolder: Sized {\n             StrippedItem(..) => unreachable!(),\n             ModuleItem(i) => ModuleItem(self.fold_mod(i)),\n             StructItem(mut i) => {\n-                let num_fields = i.fields.len();\n                 i.fields = i.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                if !i.fields_stripped {\n-                    i.fields_stripped =\n-                        num_fields != i.fields.len() || i.fields.iter().any(|f| f.is_stripped());\n-                }\n                 StructItem(i)\n             }\n             UnionItem(mut i) => {\n-                let num_fields = i.fields.len();\n                 i.fields = i.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                if !i.fields_stripped {\n-                    i.fields_stripped =\n-                        num_fields != i.fields.len() || i.fields.iter().any(|f| f.is_stripped());\n-                }\n                 UnionItem(i)\n             }\n             EnumItem(mut i) => {\n-                let num_variants = i.variants.len();\n                 i.variants = i.variants.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                if !i.variants_stripped {\n-                    i.variants_stripped = num_variants != i.variants.len()\n-                        || i.variants.iter().any(|f| f.is_stripped());\n-                }\n                 EnumItem(i)\n             }\n             TraitItem(mut i) => {\n@@ -54,12 +39,7 @@ pub(crate) trait DocFolder: Sized {\n             }\n             VariantItem(i) => match i {\n                 Variant::Struct(mut j) => {\n-                    let num_fields = j.fields.len();\n                     j.fields = j.fields.into_iter().filter_map(|x| self.fold_item(x)).collect();\n-                    if !j.fields_stripped {\n-                        j.fields_stripped = num_fields != j.fields.len()\n-                            || j.fields.iter().any(|f| f.is_stripped());\n-                    }\n                     VariantItem(Variant::Struct(j))\n                 }\n                 Variant::Tuple(fields) => {"}, {"sha": "1b4a2cf1cb0ac2a76e4a868f5661d0b570069b50", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=6092cbb17c09b9833286a14e9b49e6ca5a1b9f73", "patch": "@@ -2363,8 +2363,7 @@ fn sidebar_enum(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, e: &clean:\n     let mut sidebar = Buffer::new();\n \n     let mut variants = e\n-        .variants\n-        .iter()\n+        .variants()\n         .filter_map(|v| {\n             v.name\n                 .as_ref()"}, {"sha": "70ec40f9e1c9c7be8425c6169f814d72e954c91c", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=6092cbb17c09b9833286a14e9b49e6ca5a1b9f73", "patch": "@@ -1139,6 +1139,7 @@ fn print_tuple_struct_fields(w: &mut Buffer, cx: &Context<'_>, s: &[clean::Item]\n }\n \n fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum) {\n+    let count_variants = e.variants().count();\n     wrap_into_docblock(w, |w| {\n         wrap_item(w, \"enum\", |w| {\n             render_attributes_in_pre(w, it, \"\");\n@@ -1150,16 +1151,16 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 e.generics.print(cx),\n                 print_where_clause(&e.generics, cx, 0, true),\n             );\n-            if e.variants.is_empty() && !e.variants_stripped {\n+            let variants_stripped = e.has_stripped_entries();\n+            if count_variants == 0 && !variants_stripped {\n                 w.write_str(\" {}\");\n             } else {\n                 w.write_str(\" {\\n\");\n-                let count_variants = e.variants.len();\n                 let toggle = should_hide_fields(count_variants);\n                 if toggle {\n                     toggle_open(w, format_args!(\"{} variants\", count_variants));\n                 }\n-                for v in &e.variants {\n+                for v in e.variants() {\n                     w.write_str(\"    \");\n                     let name = v.name.unwrap();\n                     match *v.kind {\n@@ -1188,7 +1189,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                     w.write_str(\",\\n\");\n                 }\n \n-                if e.variants_stripped {\n+                if variants_stripped {\n                     w.write_str(\"    // some variants omitted\\n\");\n                 }\n                 if toggle {\n@@ -1201,15 +1202,15 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n \n     document(w, cx, it, None, HeadingOffset::H2);\n \n-    if !e.variants.is_empty() {\n+    if count_variants != 0 {\n         write!(\n             w,\n             \"<h2 id=\\\"variants\\\" class=\\\"variants small-section-header\\\">\\\n                    Variants{}<a href=\\\"#variants\\\" class=\\\"anchor\\\"></a></h2>\",\n             document_non_exhaustive_header(it)\n         );\n         document_non_exhaustive(w, it);\n-        for variant in &e.variants {\n+        for variant in e.variants() {\n             let id = cx.derive_id(format!(\"{}.{}\", ItemType::Variant, variant.name.unwrap()));\n             write!(\n                 w,\n@@ -1653,7 +1654,7 @@ fn render_union(\n         }\n     }\n \n-    if it.has_stripped_fields().unwrap() {\n+    if it.has_stripped_entries().unwrap() {\n         write!(w, \"    /* private fields */\\n{}\", tab);\n     }\n     if toggle {\n@@ -1709,11 +1710,11 @@ fn render_struct(\n             }\n \n             if has_visible_fields {\n-                if it.has_stripped_fields().unwrap() {\n+                if it.has_stripped_entries().unwrap() {\n                     write!(w, \"\\n{}    /* private fields */\", tab);\n                 }\n                 write!(w, \"\\n{}\", tab);\n-            } else if it.has_stripped_fields().unwrap() {\n+            } else if it.has_stripped_entries().unwrap() {\n                 write!(w, \" /* private fields */ \");\n             }\n             if toggle {"}, {"sha": "2e7990a27e923af4a247b4e1e7fc6c4bbe37ad5e", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=6092cbb17c09b9833286a14e9b49e6ca5a1b9f73", "patch": "@@ -249,7 +249,8 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n \n impl FromWithTcx<clean::Struct> for Struct {\n     fn from_tcx(struct_: clean::Struct, tcx: TyCtxt<'_>) -> Self {\n-        let clean::Struct { struct_type, generics, fields, fields_stripped } = struct_;\n+        let fields_stripped = struct_.has_stripped_entries();\n+        let clean::Struct { struct_type, generics, fields } = struct_;\n         Struct {\n             struct_type: from_ctor_kind(struct_type),\n             generics: generics.into_tcx(tcx),\n@@ -261,8 +262,9 @@ impl FromWithTcx<clean::Struct> for Struct {\n }\n \n impl FromWithTcx<clean::Union> for Union {\n-    fn from_tcx(struct_: clean::Union, tcx: TyCtxt<'_>) -> Self {\n-        let clean::Union { generics, fields, fields_stripped } = struct_;\n+    fn from_tcx(union_: clean::Union, tcx: TyCtxt<'_>) -> Self {\n+        let fields_stripped = union_.has_stripped_entries();\n+        let clean::Union { generics, fields } = union_;\n         Union {\n             generics: generics.into_tcx(tcx),\n             fields_stripped,\n@@ -586,7 +588,8 @@ pub(crate) fn from_function_method(\n \n impl FromWithTcx<clean::Enum> for Enum {\n     fn from_tcx(enum_: clean::Enum, tcx: TyCtxt<'_>) -> Self {\n-        let clean::Enum { variants, generics, variants_stripped } = enum_;\n+        let variants_stripped = enum_.has_stripped_entries();\n+        let clean::Enum { variants, generics } = enum_;\n         Enum {\n             generics: generics.into_tcx(tcx),\n             variants_stripped,\n@@ -598,7 +601,8 @@ impl FromWithTcx<clean::Enum> for Enum {\n \n impl FromWithTcx<clean::VariantStruct> for Struct {\n     fn from_tcx(struct_: clean::VariantStruct, _tcx: TyCtxt<'_>) -> Self {\n-        let clean::VariantStruct { struct_type, fields, fields_stripped } = struct_;\n+        let fields_stripped = struct_.has_stripped_entries();\n+        let clean::VariantStruct { struct_type, fields } = struct_;\n         Struct {\n             struct_type: from_ctor_kind(struct_type),\n             generics: Default::default(),"}, {"sha": "a8012185a6d148e48e508ba15191d549a220133f", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6092cbb17c09b9833286a14e9b49e6ca5a1b9f73/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=6092cbb17c09b9833286a14e9b49e6ca5a1b9f73", "patch": "@@ -40,7 +40,7 @@ impl<'a> DocFolder for Stripper<'a> {\n             debug!(\"strip_hidden: stripping {:?} {:?}\", i.type_(), i.name);\n             // use a dedicated hidden item for given item type if any\n             match *i.kind {\n-                clean::StructFieldItem(..) | clean::ModuleItem(..) => {\n+                clean::StructFieldItem(..) | clean::ModuleItem(..) | clean::VariantItem(..) => {\n                     // We need to recurse into stripped modules to\n                     // strip things like impl methods but when doing so\n                     // we must not add any items to the `retained` set."}]}