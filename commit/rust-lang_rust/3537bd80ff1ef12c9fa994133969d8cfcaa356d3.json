{"sha": "3537bd80ff1ef12c9fa994133969d8cfcaa356d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MzdiZDgwZmYxZWYxMmM5ZmE5OTQxMzM5NjlkOGNmY2FhMzU2ZDM=", "commit": {"author": {"name": "J. Ryan Stinnett", "email": "jryans@gmail.com", "date": "2020-12-06T00:39:07Z"}, "committer": {"name": "J. Ryan Stinnett", "email": "jryans@gmail.com", "date": "2020-12-09T10:12:15Z"}, "message": "Replace tabs earlier in diagnostics\n\nThis replaces tabs earlier in the diagnostics emitting process, which allows\nvarious margin calculations to ignore the existence of tabs. It does add a\nstring copy for the source lines that are emitted.", "tree": {"sha": "1797cfc244e96590fe3f061b961a63a3b64d74cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1797cfc244e96590fe3f061b961a63a3b64d74cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3537bd80ff1ef12c9fa994133969d8cfcaa356d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3537bd80ff1ef12c9fa994133969d8cfcaa356d3", "html_url": "https://github.com/rust-lang/rust/commit/3537bd80ff1ef12c9fa994133969d8cfcaa356d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3537bd80ff1ef12c9fa994133969d8cfcaa356d3/comments", "author": {"login": "jryans", "id": 279572, "node_id": "MDQ6VXNlcjI3OTU3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/279572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jryans", "html_url": "https://github.com/jryans", "followers_url": "https://api.github.com/users/jryans/followers", "following_url": "https://api.github.com/users/jryans/following{/other_user}", "gists_url": "https://api.github.com/users/jryans/gists{/gist_id}", "starred_url": "https://api.github.com/users/jryans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jryans/subscriptions", "organizations_url": "https://api.github.com/users/jryans/orgs", "repos_url": "https://api.github.com/users/jryans/repos", "events_url": "https://api.github.com/users/jryans/events{/privacy}", "received_events_url": "https://api.github.com/users/jryans/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jryans", "id": 279572, "node_id": "MDQ6VXNlcjI3OTU3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/279572?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jryans", "html_url": "https://github.com/jryans", "followers_url": "https://api.github.com/users/jryans/followers", "following_url": "https://api.github.com/users/jryans/following{/other_user}", "gists_url": "https://api.github.com/users/jryans/gists{/gist_id}", "starred_url": "https://api.github.com/users/jryans/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jryans/subscriptions", "organizations_url": "https://api.github.com/users/jryans/orgs", "repos_url": "https://api.github.com/users/jryans/repos", "events_url": "https://api.github.com/users/jryans/events{/privacy}", "received_events_url": "https://api.github.com/users/jryans/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ca8b7724f753e71f26cb442e11bb1f1c40ebf0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ca8b7724f753e71f26cb442e11bb1f1c40ebf0a", "html_url": "https://github.com/rust-lang/rust/commit/8ca8b7724f753e71f26cb442e11bb1f1c40ebf0a"}], "stats": {"total": 52, "additions": 23, "deletions": 29}, "files": [{"sha": "00882bb287a4fa3772d6c491107cd55c8ddfac10", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3537bd80ff1ef12c9fa994133969d8cfcaa356d3/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3537bd80ff1ef12c9fa994133969d8cfcaa356d3/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=3537bd80ff1ef12c9fa994133969d8cfcaa356d3", "patch": "@@ -644,6 +644,8 @@ impl EmitterWriter {\n         code_offset: usize,\n         margin: Margin,\n     ) {\n+        // Tabs are assumed to have been replaced by spaces in calling code.\n+        assert!(!source_string.contains('\\t'));\n         let line_len = source_string.len();\n         // Create the source line we will highlight.\n         let left = margin.left(line_len);\n@@ -707,7 +709,7 @@ impl EmitterWriter {\n         }\n \n         let source_string = match file.get_line(line.line_index - 1) {\n-            Some(s) => s,\n+            Some(s) => replace_tabs(&*s),\n             None => return Vec::new(),\n         };\n \n@@ -1376,8 +1378,17 @@ impl EmitterWriter {\n                     let file = annotated_file.file.clone();\n                     let line = &annotated_file.lines[line_idx];\n                     if let Some(source_string) = file.get_line(line.line_index - 1) {\n-                        let leading_whitespace =\n-                            source_string.chars().take_while(|c| c.is_whitespace()).count();\n+                        let leading_whitespace = source_string\n+                            .chars()\n+                            .take_while(|c| c.is_whitespace())\n+                            .map(|c| {\n+                                match c {\n+                                    // Tabs are displayed as 4 spaces\n+                                    '\\t' => 4,\n+                                    _ => 1,\n+                                }\n+                            })\n+                            .sum();\n                         if source_string.chars().any(|c| !c.is_whitespace()) {\n                             whitespace_margin = min(whitespace_margin, leading_whitespace);\n                         }\n@@ -1502,7 +1513,7 @@ impl EmitterWriter {\n \n                             self.draw_line(\n                                 &mut buffer,\n-                                &unannotated_line,\n+                                &replace_tabs(&unannotated_line),\n                                 annotated_file.lines[line_idx + 1].line_index - 1,\n                                 last_buffer_line_num,\n                                 width_offset,\n@@ -1598,7 +1609,7 @@ impl EmitterWriter {\n                 );\n                 // print the suggestion\n                 draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n-                buffer.append(row_num, line, Style::NoStyle);\n+                buffer.append(row_num, &replace_tabs(line), Style::NoStyle);\n                 row_num += 1;\n             }\n \n@@ -1930,6 +1941,10 @@ impl FileWithAnnotatedLines {\n     }\n }\n \n+fn replace_tabs(str: &str) -> String {\n+    str.replace('\\t', \"    \")\n+}\n+\n fn draw_col_separator(buffer: &mut StyledBuffer, line: usize, col: usize) {\n     buffer.puts(line, col, \"| \", Style::LineNumber);\n }"}, {"sha": "a4dd0f391bd3a788fd9cd3f10f77c0f9f58a7620", "filename": "compiler/rustc_errors/src/styled_buffer.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3537bd80ff1ef12c9fa994133969d8cfcaa356d3/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3537bd80ff1ef12c9fa994133969d8cfcaa356d3/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fstyled_buffer.rs?ref=3537bd80ff1ef12c9fa994133969d8cfcaa356d3", "patch": "@@ -13,34 +13,13 @@ impl StyledBuffer {\n         StyledBuffer { text: vec![], styles: vec![] }\n     }\n \n-    fn replace_tabs(&mut self) {\n-        for (line_pos, line) in self.text.iter_mut().enumerate() {\n-            let mut tab_pos = vec![];\n-            for (pos, c) in line.iter().enumerate() {\n-                if *c == '\\t' {\n-                    tab_pos.push(pos);\n-                }\n-            }\n-            // start with the tabs at the end of the line to replace them with 4 space chars\n-            for pos in tab_pos.iter().rev() {\n-                assert_eq!(line.remove(*pos), '\\t');\n-                // fix the position of the style to match up after replacing the tabs\n-                let s = self.styles[line_pos].remove(*pos);\n-                for _ in 0..4 {\n-                    line.insert(*pos, ' ');\n-                    self.styles[line_pos].insert(*pos, s);\n-                }\n-            }\n-        }\n-    }\n+    pub fn render(&self) -> Vec<Vec<StyledString>> {\n+        // Tabs are assumed to have been replaced by spaces in calling code.\n+        assert!(self.text.iter().all(|r| !r.contains(&'\\t')));\n \n-    pub fn render(&mut self) -> Vec<Vec<StyledString>> {\n         let mut output: Vec<Vec<StyledString>> = vec![];\n         let mut styled_vec: Vec<StyledString> = vec![];\n \n-        // before we render, replace tabs with spaces\n-        self.replace_tabs();\n-\n         for (row, row_style) in self.text.iter().zip(&self.styles) {\n             let mut current_style = Style::NoStyle;\n             let mut current_text = String::new();"}]}