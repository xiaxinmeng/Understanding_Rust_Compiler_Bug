{"sha": "9bcc107ffe037a7329b94bf533c3af255981180f", "node_id": "C_kwDOAAsO6NoAKDliY2MxMDdmZmUwMzdhNzMyOWI5NGJmNTMzYzNhZjI1NTk4MTE4MGY", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-09-13T21:18:24Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-09-13T21:18:24Z"}, "message": "Update async-await-let-else for drop tracking", "tree": {"sha": "a441e0538910a0e840be9c1036dcc9bf783a2f07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a441e0538910a0e840be9c1036dcc9bf783a2f07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bcc107ffe037a7329b94bf533c3af255981180f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bcc107ffe037a7329b94bf533c3af255981180f", "html_url": "https://github.com/rust-lang/rust/commit/9bcc107ffe037a7329b94bf533c3af255981180f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bcc107ffe037a7329b94bf533c3af255981180f/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c84083b08e2db69fcf270c4045837fa02663a3bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c84083b08e2db69fcf270c4045837fa02663a3bf", "html_url": "https://github.com/rust-lang/rust/commit/c84083b08e2db69fcf270c4045837fa02663a3bf"}], "stats": {"total": 147, "additions": 130, "deletions": 17}, "files": [{"sha": "3be7f370da3f59cc176d6270805c719250085b9e", "filename": "src/test/ui/async-await/async-await-let-else.drop-tracking.stderr", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/9bcc107ffe037a7329b94bf533c3af255981180f/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bcc107ffe037a7329b94bf533c3af255981180f/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.drop-tracking.stderr?ref=9bcc107ffe037a7329b94bf533c3af255981180f", "patch": "@@ -0,0 +1,110 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:48:13\n+   |\n+LL |     is_send(foo(Some(true)));\n+   |             ^^^^^^^^^^^^^^^ future returned by `foo` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:11:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+LL |     };\n+   |     - `r` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error[E0277]: `Rc<()>` cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:50:13\n+   |\n+LL | async fn foo2(x: Option<bool>) {\n+   |                                - within this `impl Future<Output = ()>`\n+...\n+LL |     is_send(foo2(Some(true)));\n+   |     ------- ^^^^^^^^^^^^^^^^ `Rc<()>` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/async-await-let-else.rs:27:29\n+   |\n+LL |   async fn bar2<T>(_: T) -> ! {\n+   |  _____________________________^\n+LL | |     panic!()\n+LL | | }\n+   | |_^\n+   = note: required because it captures the following types: `ResumeTy`, `Option<bool>`, `impl Future<Output = !>`, `()`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/async-await-let-else.rs:21:32\n+   |\n+LL |   async fn foo2(x: Option<bool>) {\n+   |  ________________________________^\n+LL | |     let Some(_) = x else {\n+LL | |         bar2(Rc::new(())).await\n+LL | |     };\n+LL | | }\n+   | |_^\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:52:13\n+   |\n+LL |     is_send(foo3(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo3` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:33:28\n+   |\n+LL |         (Rc::new(()), bar().await);\n+   |          -----------       ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n+   |          |\n+   |          has type `Rc<()>` which is not `Send`\n+note: `Rc::new(())` is later dropped here\n+  --> $DIR/async-await-let-else.rs:33:35\n+   |\n+LL |         (Rc::new(()), bar().await);\n+   |                                   ^\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/async-await-let-else.rs:54:13\n+   |\n+LL |     is_send(foo4(Some(true)));\n+   |             ^^^^^^^^^^^^^^^^ future returned by `foo4` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/async-await-let-else.rs:41:14\n+   |\n+LL |         let r = Rc::new(());\n+   |             - has type `Rc<()>` which is not `Send`\n+LL |         bar().await;\n+   |              ^^^^^^ await occurs here, with `r` maybe used later\n+...\n+LL |     };\n+   |     - `r` is later dropped here\n+note: required by a bound in `is_send`\n+  --> $DIR/async-await-let-else.rs:19:15\n+   |\n+LL | fn is_send<T: Send>(_: T) {}\n+   |               ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "435cc845870f626619d5fd90d37acd691b27778d", "filename": "src/test/ui/async-await/async-await-let-else.no-drop-tracking.stderr", "status": "renamed", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9bcc107ffe037a7329b94bf533c3af255981180f/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.no-drop-tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9bcc107ffe037a7329b94bf533c3af255981180f/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.no-drop-tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.no-drop-tracking.stderr?ref=9bcc107ffe037a7329b94bf533c3af255981180f", "patch": "@@ -1,12 +1,12 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/async-await-let-else.rs:45:13\n+  --> $DIR/async-await-let-else.rs:48:13\n    |\n LL |     is_send(foo(Some(true)));\n    |             ^^^^^^^^^^^^^^^ future returned by `foo` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:8:14\n+  --> $DIR/async-await-let-else.rs:11:14\n    |\n LL |         let r = Rc::new(());\n    |             - has type `Rc<()>` which is not `Send`\n@@ -15,20 +15,20 @@ LL |         bar().await\n LL |     };\n    |     - `r` is later dropped here\n note: required by a bound in `is_send`\n-  --> $DIR/async-await-let-else.rs:16:15\n+  --> $DIR/async-await-let-else.rs:19:15\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |               ^^^^ required by this bound in `is_send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/async-await-let-else.rs:47:13\n+  --> $DIR/async-await-let-else.rs:50:13\n    |\n LL |     is_send(foo2(Some(true)));\n    |             ^^^^^^^^^^^^^^^^ future returned by `foo2` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:20:26\n+  --> $DIR/async-await-let-else.rs:23:26\n    |\n LL |         bar2(Rc::new(())).await\n    |              ----------- ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n@@ -37,45 +37,45 @@ LL |         bar2(Rc::new(())).await\n LL |     };\n    |      - `Rc::new(())` is later dropped here\n note: required by a bound in `is_send`\n-  --> $DIR/async-await-let-else.rs:16:15\n+  --> $DIR/async-await-let-else.rs:19:15\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |               ^^^^ required by this bound in `is_send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/async-await-let-else.rs:49:13\n+  --> $DIR/async-await-let-else.rs:52:13\n    |\n LL |     is_send(foo3(Some(true)));\n    |             ^^^^^^^^^^^^^^^^ future returned by `foo3` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:30:28\n+  --> $DIR/async-await-let-else.rs:33:28\n    |\n LL |         (Rc::new(()), bar().await);\n    |          -----------       ^^^^^^ await occurs here, with `Rc::new(())` maybe used later\n    |          |\n    |          has type `Rc<()>` which is not `Send`\n note: `Rc::new(())` is later dropped here\n-  --> $DIR/async-await-let-else.rs:30:35\n+  --> $DIR/async-await-let-else.rs:33:35\n    |\n LL |         (Rc::new(()), bar().await);\n    |                                   ^\n note: required by a bound in `is_send`\n-  --> $DIR/async-await-let-else.rs:16:15\n+  --> $DIR/async-await-let-else.rs:19:15\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |               ^^^^ required by this bound in `is_send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/async-await-let-else.rs:51:13\n+  --> $DIR/async-await-let-else.rs:54:13\n    |\n LL |     is_send(foo4(Some(true)));\n    |             ^^^^^^^^^^^^^^^^ future returned by `foo4` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `Rc<()>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/async-await-let-else.rs:38:14\n+  --> $DIR/async-await-let-else.rs:41:14\n    |\n LL |         let r = Rc::new(());\n    |             - has type `Rc<()>` which is not `Send`\n@@ -85,7 +85,7 @@ LL |         bar().await;\n LL |     };\n    |     - `r` is later dropped here\n note: required by a bound in `is_send`\n-  --> $DIR/async-await-let-else.rs:16:15\n+  --> $DIR/async-await-let-else.rs:19:15\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |               ^^^^ required by this bound in `is_send`", "previous_filename": "src/test/ui/async-await/async-await-let-else.stderr"}, {"sha": "4b287159d13e7791cf22ceeb4387de450d069dc0", "filename": "src/test/ui/async-await/async-await-let-else.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bcc107ffe037a7329b94bf533c3af255981180f/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bcc107ffe037a7329b94bf533c3af255981180f/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.rs?ref=9bcc107ffe037a7329b94bf533c3af255981180f", "patch": "@@ -1,4 +1,7 @@\n // edition:2021\n+// revisions: drop-tracking no-drop-tracking\n+// [drop-tracking] compile-flags: -Zdrop-tracking=yes\n+// [no-drop-tracking] compile-flags: -Zdrop-tracking=no\n #![feature(let_else)]\n use std::rc::Rc;\n \n@@ -43,11 +46,11 @@ async fn foo4(x: Option<bool>) {\n \n fn main() {\n     is_send(foo(Some(true)));\n-    //~^ ERROR future cannot be sent between threads safely\n+    //~^ ERROR cannot be sent between threads safely\n     is_send(foo2(Some(true)));\n-    //~^ ERROR future cannot be sent between threads safely\n+    //~^ ERROR cannot be sent between threads safely\n     is_send(foo3(Some(true)));\n-    //~^ ERROR future cannot be sent between threads safely\n+    //~^ ERROR cannot be sent between threads safely\n     is_send(foo4(Some(true)));\n-    //~^ ERROR future cannot be sent between threads safely\n+    //~^ ERROR cannot be sent between threads safely\n }"}]}