{"sha": "c2c6986733ff26f17beb1b5ea7d413b6ad30a240", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYzY5ODY3MzNmZjI2ZjE3YmViMWI1ZWE3ZDQxM2I2YWQzMGEyNDA=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-07-12T12:25:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-12T12:25:27Z"}, "message": "Rollup merge of #52220 - ljedrz:dyn_bootstrap, r=kennytm\n\nDeny bare trait objects in `src/bootstrap`\n\nEnforce `#![deny(bare_trait_objects)]` in `src/bootstrap`.", "tree": {"sha": "cf6f6f6f53fc44784c71d7eba7221f493afae2c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf6f6f6f53fc44784c71d7eba7221f493afae2c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2c6986733ff26f17beb1b5ea7d413b6ad30a240", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbR0i3CRBK7hj4Ov3rIwAAdHIIAFQGouNwa/ZjP9KrJodfHh6l\nUefX0uyS/uSaUH6Fkp5mKiSD3aHKCZnbBuf4LrNdxUtXKWJlYJE6WQyPGb3flF26\nyIHkigEzm3R8q8ZtOoTJCyjBazm/E1YJ9xCSrZnFcgc1NCfKAYaamS4OnnMmmxzh\ncDci/SpauNn4lUqRhRNYTGTl2N4nUVrRlboxxYTuhyXfliTXgPiLSjMZqVeeGs2z\n0H7Hkt/T+qhAVKS3IBdFROVEmJFr5UGaEB4clQPny0u9/fUJQQBJZrliiDPK7/Iv\n9jkW4qLaCIjv8KOQV8eEOC0oAhsKzL6k51vVwDiyUVPuV56IcrCwp+TNXP2BGfQ=\n=GXB7\n-----END PGP SIGNATURE-----\n", "payload": "tree cf6f6f6f53fc44784c71d7eba7221f493afae2c4\nparent 8fba84fe0ab499de894c023612c6af5327bba956\nparent 72b908ffbe42d97dfbad848e0fc53e7e9eecfed9\nauthor kennytm <kennytm@gmail.com> 1531398327 +0800\ncommitter GitHub <noreply@github.com> 1531398327 +0800\n\nRollup merge of #52220 - ljedrz:dyn_bootstrap, r=kennytm\n\nDeny bare trait objects in `src/bootstrap`\n\nEnforce `#![deny(bare_trait_objects)]` in `src/bootstrap`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c6986733ff26f17beb1b5ea7d413b6ad30a240", "html_url": "https://github.com/rust-lang/rust/commit/c2c6986733ff26f17beb1b5ea7d413b6ad30a240", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2c6986733ff26f17beb1b5ea7d413b6ad30a240/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fba84fe0ab499de894c023612c6af5327bba956", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fba84fe0ab499de894c023612c6af5327bba956", "html_url": "https://github.com/rust-lang/rust/commit/8fba84fe0ab499de894c023612c6af5327bba956"}, {"sha": "72b908ffbe42d97dfbad848e0fc53e7e9eecfed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/72b908ffbe42d97dfbad848e0fc53e7e9eecfed9", "html_url": "https://github.com/rust-lang/rust/commit/72b908ffbe42d97dfbad848e0fc53e7e9eecfed9"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "eb534cb685e87a2afef58e8d5b53e79c99c11286", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2c6986733ff26f17beb1b5ea7d413b6ad30a240/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c6986733ff26f17beb1b5ea7d413b6ad30a240/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c2c6986733ff26f17beb1b5ea7d413b6ad30a240", "patch": "@@ -44,7 +44,7 @@ pub struct Builder<'a> {\n     pub top_stage: u32,\n     pub kind: Kind,\n     cache: Cache,\n-    stack: RefCell<Vec<Box<Any>>>,\n+    stack: RefCell<Vec<Box<dyn Any>>>,\n     time_spent_on_dependencies: Cell<Duration>,\n     pub paths: Vec<PathBuf>,\n     graph_nodes: RefCell<HashMap<String, NodeIndex>>,"}, {"sha": "bca5ff85ba23e846052ed1ed1b073f02579fe2ce", "filename": "src/bootstrap/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2c6986733ff26f17beb1b5ea7d413b6ad30a240/src%2Fbootstrap%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c6986733ff26f17beb1b5ea7d413b6ad30a240/src%2Fbootstrap%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcache.rs?ref=c2c6986733ff26f17beb1b5ea7d413b6ad30a240", "patch": "@@ -249,7 +249,7 @@ lazy_static! {\n pub struct Cache(\n     RefCell<HashMap<\n         TypeId,\n-        Box<Any>, // actually a HashMap<Step, Interned<Step::Output>>\n+        Box<dyn Any>, // actually a HashMap<Step, Interned<Step::Output>>\n     >>\n );\n "}, {"sha": "7d94bac66f7706aaf2fd10c19450c086954bae61", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2c6986733ff26f17beb1b5ea7d413b6ad30a240/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c6986733ff26f17beb1b5ea7d413b6ad30a240/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=c2c6986733ff26f17beb1b5ea7d413b6ad30a240", "patch": "@@ -1189,7 +1189,7 @@ pub fn run_cargo(builder: &Builder, cargo: &mut Command, stamp: &Path, is_check:\n pub fn stream_cargo(\n     builder: &Builder,\n     cargo: &mut Command,\n-    cb: &mut FnMut(CargoMessage),\n+    cb: &mut dyn FnMut(CargoMessage),\n ) -> bool {\n     if builder.config.dry_run {\n         return true;"}, {"sha": "cd9a639e82e2f9c85580e40152ab5b9ce59dbdc2", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c2c6986733ff26f17beb1b5ea7d413b6ad30a240/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c6986733ff26f17beb1b5ea7d413b6ad30a240/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=c2c6986733ff26f17beb1b5ea7d413b6ad30a240", "patch": "@@ -113,6 +113,7 @@\n //! More documentation can be found in each respective module below, and you can\n //! also check out the `src/bootstrap/README.md` file for more information.\n \n+#![deny(bare_trait_objects)]\n #![deny(warnings)]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n@@ -1174,13 +1175,13 @@ impl Build {\n     /// Copies the `src` directory recursively to `dst`. Both are assumed to exist\n     /// when this function is called. Unwanted files or directories can be skipped\n     /// by returning `false` from the filter function.\n-    pub fn cp_filtered(&self, src: &Path, dst: &Path, filter: &Fn(&Path) -> bool) {\n+    pub fn cp_filtered(&self, src: &Path, dst: &Path, filter: &dyn Fn(&Path) -> bool) {\n         // Immediately recurse with an empty relative path\n         self.recurse_(src, dst, Path::new(\"\"), filter)\n     }\n \n     // Inner function does the actual work\n-    fn recurse_(&self, src: &Path, dst: &Path, relative: &Path, filter: &Fn(&Path) -> bool) {\n+    fn recurse_(&self, src: &Path, dst: &Path, relative: &Path, filter: &dyn Fn(&Path) -> bool) {\n         for f in self.read_dir(src) {\n             let path = f.path();\n             let name = path.file_name().unwrap();"}]}