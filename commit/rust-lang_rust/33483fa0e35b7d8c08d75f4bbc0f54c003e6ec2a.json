{"sha": "33483fa0e35b7d8c08d75f4bbc0f54c003e6ec2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNDgzZmEwZTM1YjdkOGMwOGQ3NWY0YmJjMGY1NGMwMDNlNmVjMmE=", "commit": {"author": {"name": "redroc", "email": "philipp.koppenstein@udo.edu", "date": "2018-08-04T01:36:58Z"}, "committer": {"name": "redroc", "email": "philipp.koppenstein@udo.edu", "date": "2018-08-04T01:36:58Z"}, "message": "fixed broken links to char", "tree": {"sha": "928ca8eeffbaba8ae896e583ad0f1c92df6aa661", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/928ca8eeffbaba8ae896e583ad0f1c92df6aa661"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33483fa0e35b7d8c08d75f4bbc0f54c003e6ec2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33483fa0e35b7d8c08d75f4bbc0f54c003e6ec2a", "html_url": "https://github.com/rust-lang/rust/commit/33483fa0e35b7d8c08d75f4bbc0f54c003e6ec2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33483fa0e35b7d8c08d75f4bbc0f54c003e6ec2a/comments", "author": {"login": "r3drock", "id": 38569066, "node_id": "MDQ6VXNlcjM4NTY5MDY2", "avatar_url": "https://avatars.githubusercontent.com/u/38569066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r3drock", "html_url": "https://github.com/r3drock", "followers_url": "https://api.github.com/users/r3drock/followers", "following_url": "https://api.github.com/users/r3drock/following{/other_user}", "gists_url": "https://api.github.com/users/r3drock/gists{/gist_id}", "starred_url": "https://api.github.com/users/r3drock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r3drock/subscriptions", "organizations_url": "https://api.github.com/users/r3drock/orgs", "repos_url": "https://api.github.com/users/r3drock/repos", "events_url": "https://api.github.com/users/r3drock/events{/privacy}", "received_events_url": "https://api.github.com/users/r3drock/received_events", "type": "User", "site_admin": false}, "committer": {"login": "r3drock", "id": 38569066, "node_id": "MDQ6VXNlcjM4NTY5MDY2", "avatar_url": "https://avatars.githubusercontent.com/u/38569066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r3drock", "html_url": "https://github.com/r3drock", "followers_url": "https://api.github.com/users/r3drock/followers", "following_url": "https://api.github.com/users/r3drock/following{/other_user}", "gists_url": "https://api.github.com/users/r3drock/gists{/gist_id}", "starred_url": "https://api.github.com/users/r3drock/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r3drock/subscriptions", "organizations_url": "https://api.github.com/users/r3drock/orgs", "repos_url": "https://api.github.com/users/r3drock/repos", "events_url": "https://api.github.com/users/r3drock/events{/privacy}", "received_events_url": "https://api.github.com/users/r3drock/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3edb355b75a2c8315da5942f6a4d40c5d9b5ccbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/3edb355b75a2c8315da5942f6a4d40c5d9b5ccbf", "html_url": "https://github.com/rust-lang/rust/commit/3edb355b75a2c8315da5942f6a4d40c5d9b5ccbf"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "8be4c0babc24892a312d33951420381cfd0cb949", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/33483fa0e35b7d8c08d75f4bbc0f54c003e6ec2a/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33483fa0e35b7d8c08d75f4bbc0f54c003e6ec2a/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=33483fa0e35b7d8c08d75f4bbc0f54c003e6ec2a", "patch": "@@ -2117,7 +2117,7 @@ impl str {\n     /// This length is in bytes, not [`char`]s or graphemes. In other words,\n     /// it may not be what a human considers the length of the string.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Examples\n     ///\n@@ -2590,7 +2590,7 @@ impl str {\n     /// Value, and may not match your idea of what a 'character' is. Iteration\n     /// over grapheme clusters may be what you actually want.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Examples\n     ///\n@@ -2643,7 +2643,7 @@ impl str {\n     /// The iterator yields tuples. The position is first, the [`char`] is\n     /// second.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Examples\n     ///\n@@ -2946,7 +2946,7 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     /// [`None`]: option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n@@ -2994,7 +2994,7 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     /// [`None`]: option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n@@ -3050,7 +3050,7 @@ impl str {\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rsplit`] method can be used.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     /// [`rsplit`]: #method.rsplit\n     ///\n     /// # Examples\n@@ -3157,7 +3157,7 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines the\n     /// split.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3224,7 +3224,7 @@ impl str {\n     /// elements. This is true for, eg, [`char`] but not for `&str`.\n     ///\n     /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rsplit_terminator`] method can be used.\n@@ -3259,7 +3259,7 @@ impl str {\n     /// Additional libraries might provide more complex patterns like\n     /// regular expressions.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// Equivalent to [`split`], except that the trailing substring is\n     /// skipped if empty.\n@@ -3306,7 +3306,7 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines the\n     /// split.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3361,7 +3361,7 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that\n     /// determines the split.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3407,7 +3407,7 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that\n     /// determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3416,7 +3416,7 @@ impl str {\n     /// elements. This is true for, eg, [`char`] but not for `&str`.\n     ///\n     /// [`DoubleEndedIterator`]: iter/trait.DoubleEndedIterator.html\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// If the pattern allows a reverse search but its results might differ\n     /// from a forward search, the [`rmatches`] method can be used.\n@@ -3446,7 +3446,7 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3488,7 +3488,7 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines\n     /// if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3532,7 +3532,7 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if a\n     /// character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Iterator behavior\n     ///\n@@ -3665,7 +3665,7 @@ impl str {\n     /// The pattern can be a [`char`] or a closure that determines if a\n     /// character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Examples\n     ///\n@@ -3711,7 +3711,7 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that determines if\n     /// a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Text directionality\n     ///\n@@ -3750,7 +3750,7 @@ impl str {\n     /// The pattern can be a `&str`, [`char`], or a closure that\n     /// determines if a character matches.\n     ///\n-    /// [`char`]: primitive.char.html\n+    /// [`char`]: ../../std/primitive.char.html\n     ///\n     /// # Text directionality\n     ///"}]}