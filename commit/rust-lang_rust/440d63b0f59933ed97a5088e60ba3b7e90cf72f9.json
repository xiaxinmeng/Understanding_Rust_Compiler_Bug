{"sha": "440d63b0f59933ed97a5088e60ba3b7e90cf72f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MGQ2M2IwZjU5OTMzZWQ5N2E1MDg4ZTYwYmEzYjdlOTBjZjcyZjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-17T07:28:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-18T18:22:12Z"}, "message": "rustdoc: Improve diagnostics on lockfile failures\n\ncc #19872, this may help give some insight", "tree": {"sha": "47ff1931184f4626aea330cfad2a847b7f91a049", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47ff1931184f4626aea330cfad2a847b7f91a049"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/440d63b0f59933ed97a5088e60ba3b7e90cf72f9", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/440d63b0f59933ed97a5088e60ba3b7e90cf72f9", "html_url": "https://github.com/rust-lang/rust/commit/440d63b0f59933ed97a5088e60ba3b7e90cf72f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/440d63b0f59933ed97a5088e60ba3b7e90cf72f9/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee2bfae011e368e224d6d4f4c9fad13606ee99da", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2bfae011e368e224d6d4f4c9fad13606ee99da", "html_url": "https://github.com/rust-lang/rust/commit/ee2bfae011e368e224d6d4f4c9fad13606ee99da"}], "stats": {"total": 16, "additions": 11, "deletions": 5}, "files": [{"sha": "0084acd99e03e892ae61391c258892e419cfb132", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/440d63b0f59933ed97a5088e60ba3b7e90cf72f9/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440d63b0f59933ed97a5088e60ba3b7e90cf72f9/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=440d63b0f59933ed97a5088e60ba3b7e90cf72f9", "patch": "@@ -22,6 +22,7 @@ pub use self::imp::Lock;\n mod imp {\n     use std::ffi::CString;\n     use libc;\n+    use std::os as stdos;\n \n     #[cfg(target_os = \"linux\")]\n     mod os {\n@@ -116,7 +117,8 @@ mod imp {\n                 libc::open(buf.as_ptr(), libc::O_RDWR | libc::O_CREAT,\n                            libc::S_IRWXU)\n             };\n-            assert!(fd > 0);\n+            assert!(fd > 0, \"failed to open lockfile: [{}] {}\",\n+                    stdos::errno(), stdos::last_os_error());\n             let flock = os::flock {\n                 l_start: 0,\n                 l_len: 0,\n@@ -129,8 +131,10 @@ mod imp {\n                 libc::fcntl(fd, os::F_SETLKW, &flock as *const os::flock)\n             };\n             if ret == -1 {\n+                let errno = stdos::errno();\n                 unsafe { libc::close(fd); }\n-                panic!(\"could not lock `{}`\", p.display())\n+                panic!(\"could not lock `{}`: [{}] {}\", p.display(),\n+                       errno, stdos::error_string(errno))\n             }\n             Lock { fd: fd }\n         }\n@@ -199,17 +203,19 @@ mod imp {\n                                   ptr::null_mut())\n             };\n             if handle == libc::INVALID_HANDLE_VALUE {\n-                panic!(\"create file error: {}\", os::last_os_error());\n+                panic!(\"create file error: [{}] {}\",\n+                       os::errno(), os::last_os_error());\n             }\n             let mut overlapped: libc::OVERLAPPED = unsafe { mem::zeroed() };\n             let ret = unsafe {\n                 LockFileEx(handle, LOCKFILE_EXCLUSIVE_LOCK, 0, 100, 0,\n                            &mut overlapped)\n             };\n             if ret == 0 {\n+                let errno = os::errno();\n                 unsafe { libc::CloseHandle(handle); }\n-                panic!(\"could not lock `{}`: {}\", p.display(),\n-                      os::last_os_error())\n+                panic!(\"could not lock `{}`: [{}] {}\", p.display(),\n+                       errno, os::error_string(errno));\n             }\n             Lock { handle: handle }\n         }"}]}