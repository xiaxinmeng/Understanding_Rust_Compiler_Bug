{"sha": "8a2dec6e583bc6425a91b277bdc6c602088845f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMmRlYzZlNTgzYmM2NDI1YTkxYjI3N2JkYzZjNjAyMDg4ODQ1ZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-16T18:03:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-16T18:03:39Z"}, "message": "Auto merge of #53804 - RalfJung:ptr-invalid, r=nagisa\n\nfix some uses of pointer intrinsics with invalid pointers\n\n[Found by miri](https://github.com/solson/miri/pull/446):\n\n* `Vec::into_iter` calls `ptr::read` (and the underlying `copy_nonoverlapping`) with an unaligned pointer to a ZST. [According to LLVM devs](https://bugs.llvm.org/show_bug.cgi?id=38583), this is UB because it contradicts the metadata we are attaching to that pointer.\n* `HashMap` creation calls `ptr:.write_bytes` on a NULL pointer with a count of 0. This is likely not currently UB *currently*, but it violates the rules we are setting in https://github.com/rust-lang/rust/pull/53783, and we might want to exploit those rules later (e.g. with more `nonnull` attributes for LLVM).\n\n    Probably what `HashMap` really should do is use `NonNull::dangling()` instead of 0 for the empty case, but that would require a more careful analysis of the code.\n\nIt seems like ideally, we should do a review of usage of such intrinsics all over libstd to ensure that they use valid pointers even when the size is 0. Is it worth opening an issue for that?", "tree": {"sha": "0177aaa3b37f91f57eb87954ee64513ca66ff34e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0177aaa3b37f91f57eb87954ee64513ca66ff34e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a2dec6e583bc6425a91b277bdc6c602088845f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a2dec6e583bc6425a91b277bdc6c602088845f1", "html_url": "https://github.com/rust-lang/rust/commit/8a2dec6e583bc6425a91b277bdc6c602088845f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a2dec6e583bc6425a91b277bdc6c602088845f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17", "html_url": "https://github.com/rust-lang/rust/commit/d3cba9b4b4959d63eaaf5ffd647e4a5fc6d43e17"}, {"sha": "357c5dacee1015dc03583287d0c7a132d9fe7880", "url": "https://api.github.com/repos/rust-lang/rust/commits/357c5dacee1015dc03583287d0c7a132d9fe7880", "html_url": "https://github.com/rust-lang/rust/commit/357c5dacee1015dc03583287d0c7a132d9fe7880"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "7fc4453fec5b07986fa108b0c5a82fec43b663e9", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a2dec6e583bc6425a91b277bdc6c602088845f1/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2dec6e583bc6425a91b277bdc6c602088845f1/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=8a2dec6e583bc6425a91b277bdc6c602088845f1", "patch": "@@ -2410,9 +2410,8 @@ impl<T> Iterator for IntoIter<T> {\n                     // same pointer.\n                     self.ptr = arith_offset(self.ptr as *const i8, 1) as *mut T;\n \n-                    // Use a non-null pointer value\n-                    // (self.ptr might be null because of wrapping)\n-                    Some(ptr::read(1 as *mut T))\n+                    // Make up a value of this ZST.\n+                    Some(mem::zeroed())\n                 } else {\n                     let old = self.ptr;\n                     self.ptr = self.ptr.offset(1);\n@@ -2451,9 +2450,8 @@ impl<T> DoubleEndedIterator for IntoIter<T> {\n                     // See above for why 'ptr.offset' isn't used\n                     self.end = arith_offset(self.end as *const i8, -1) as *mut T;\n \n-                    // Use a non-null pointer value\n-                    // (self.end might be null because of wrapping)\n-                    Some(ptr::read(1 as *mut T))\n+                    // Make up a value of this ZST.\n+                    Some(mem::zeroed())\n                 } else {\n                     self.end = self.end.offset(-1);\n "}, {"sha": "547f97cc8acee1bccb45bae7ef94922087be66a3", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a2dec6e583bc6425a91b277bdc6c602088845f1/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2dec6e583bc6425a91b277bdc6c602088845f1/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=8a2dec6e583bc6425a91b277bdc6c602088845f1", "patch": "@@ -742,7 +742,9 @@ impl<K, V> RawTable<K, V> {\n     ) -> Result<RawTable<K, V>, CollectionAllocErr> {\n         unsafe {\n             let ret = RawTable::new_uninitialized_internal(capacity, fallibility)?;\n-            ptr::write_bytes(ret.hashes.ptr(), 0, capacity);\n+            if capacity > 0 {\n+                ptr::write_bytes(ret.hashes.ptr(), 0, capacity);\n+            }\n             Ok(ret)\n         }\n     }"}]}