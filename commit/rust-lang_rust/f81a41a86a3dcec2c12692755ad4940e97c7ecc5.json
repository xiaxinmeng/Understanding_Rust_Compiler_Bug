{"sha": "f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MWE0MWE4NmEzZGNlYzJjMTI2OTI3NTVhZDQ5NDBlOTdjN2VjYzU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-27T20:15:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-27T20:15:04Z"}, "message": "Rollup merge of #71558 - petrochenkov:tlsm, r=Amanieu\n\nCleanup and document `-Z tls-model`\n\nr? @Amanieu", "tree": {"sha": "935f74e1d4947f4f83b873c9867ca0bb5daeda2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/935f74e1d4947f4f83b873c9867ca0bb5daeda2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepz1ICRBK7hj4Ov3rIwAAdHIIAKBvMP4e3CRiFsqSEa1KvjPR\nzoobZ+gKdEhYC9ke41pTdXLfAz2JSaZQBoII1yVPI3iwmcjdnO1QHzjXSa8S8MPp\n3Q45JoATqJu4yd+lFJuzdRlsn3eUMY+aXInipoi149zEgON4RGRfKEIfTvp9lQBS\n4EupIlj9DGnHI42GZfOuu5eDmvgo7PqxGTeEKREMOrY0AULV2OkJkFwuG6T3XuFX\nUjUiKRRtj8Fr0asWXPNgi7aTKU0s5drk0+DRN7YYYcX5DpMDZo7NabtZZc5c+x5T\nphL1CuLi7O5vhYbnfAMvn9oVBInH/3bidHNKoI8y7Z6/sqVx7uy6SdaILPfMYjc=\n=0GEF\n-----END PGP SIGNATURE-----\n", "payload": "tree 935f74e1d4947f4f83b873c9867ca0bb5daeda2f\nparent e2976c13710605094282cc38072afbb0601c95b2\nparent 45dc4350c3119db37945fa72e8cae174949e0ee0\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588018504 +0200\ncommitter GitHub <noreply@github.com> 1588018504 +0200\n\nRollup merge of #71558 - petrochenkov:tlsm, r=Amanieu\n\nCleanup and document `-Z tls-model`\n\nr? @Amanieu\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "html_url": "https://github.com/rust-lang/rust/commit/f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2976c13710605094282cc38072afbb0601c95b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2976c13710605094282cc38072afbb0601c95b2", "html_url": "https://github.com/rust-lang/rust/commit/e2976c13710605094282cc38072afbb0601c95b2"}, {"sha": "45dc4350c3119db37945fa72e8cae174949e0ee0", "url": "https://api.github.com/repos/rust-lang/rust/commits/45dc4350c3119db37945fa72e8cae174949e0ee0", "html_url": "https://github.com/rust-lang/rust/commit/45dc4350c3119db37945fa72e8cae174949e0ee0"}], "stats": {"total": 163, "additions": 119, "deletions": 44}, "files": [{"sha": "0aefaa7fb01773794d5ca522ab18952ea8bc79cb", "filename": "src/doc/unstable-book/src/compiler-flags/tls-model.md", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftls-model.md", "raw_url": "https://github.com/rust-lang/rust/raw/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftls-model.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftls-model.md?ref=f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "patch": "@@ -0,0 +1,25 @@\n+# `tls_model`\n+\n+The tracking issue for this feature is: None.\n+\n+------------------------\n+\n+Option `-Z tls-model` controls [TLS model](https://www.akkadia.org/drepper/tls.pdf) used to\n+generate code for accessing `#[thread_local]` `static` items.\n+\n+Supported values for this option are:\n+\n+- `global-dynamic` - General Dynamic TLS Model (alternatively called Global Dynamic) is the most\n+general option usable in all circumstances, even if the TLS data is defined in a shared library\n+loaded at runtime and is accessed from code outside of that library.  \n+This is the default for most targets.\n+- `local-dynamic` - model usable if the TLS data is only accessed from the shared library or\n+executable it is defined in. The TLS data may be in a library loaded after startup (via `dlopen`).\n+- `initial-exec` - model usable if the TLS data is defined in the executable or in a shared library\n+loaded at program startup.\n+The TLS data must not be in a library loaded after startup (via `dlopen`).\n+- `local-exec` - model usable only if the TLS data is defined directly in the executable,\n+but not in a shared library, and is accessed only from that executable.\n+\n+`rustc` and LLVM may use a more optimized model than specified if they know that we are producing\n+and executable rather than a library, or that the `static` item is private enough."}, {"sha": "3ec7ef831b54b5b0af59c206dd647901b14f763d", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "patch": "@@ -43,13 +43,6 @@ pub const CODE_GEN_MODEL_ARGS: &[(&str, llvm::CodeModel)] = &[\n     (\"large\", llvm::CodeModel::Large),\n ];\n \n-pub const TLS_MODEL_ARGS: [(&str, llvm::ThreadLocalMode); 4] = [\n-    (\"global-dynamic\", llvm::ThreadLocalMode::GeneralDynamic),\n-    (\"local-dynamic\", llvm::ThreadLocalMode::LocalDynamic),\n-    (\"initial-exec\", llvm::ThreadLocalMode::InitialExec),\n-    (\"local-exec\", llvm::ThreadLocalMode::LocalExec),\n-];\n-\n pub fn llvm_err(handler: &rustc_errors::Handler, msg: &str) -> FatalError {\n     match llvm::last_error() {\n         Some(err) => handler.fatal(&format!(\"{}: {}\", msg, err)),"}, {"sha": "f868385ee869a5908ecfee7441bae94c2ef2fc65", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "patch": "@@ -21,7 +21,7 @@ use rustc_session::Session;\n use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::Symbol;\n use rustc_target::abi::{HasDataLayout, LayoutOf, PointeeInfo, Size, TargetDataLayout, VariantIdx};\n-use rustc_target::spec::{HasTargetSpec, RelocModel, Target};\n+use rustc_target::spec::{HasTargetSpec, RelocModel, Target, TlsModel};\n \n use std::cell::{Cell, RefCell};\n use std::ffi::CStr;\n@@ -87,19 +87,12 @@ pub struct CodegenCx<'ll, 'tcx> {\n     local_gen_sym_counter: Cell<usize>,\n }\n \n-fn get_tls_model(sess: &Session) -> llvm::ThreadLocalMode {\n-    let tls_model_arg = match sess.opts.debugging_opts.tls_model {\n-        Some(ref s) => &s[..],\n-        None => &sess.target.target.options.tls_model[..],\n-    };\n-\n-    match crate::back::write::TLS_MODEL_ARGS.iter().find(|&&arg| arg.0 == tls_model_arg) {\n-        Some(x) => x.1,\n-        _ => {\n-            sess.err(&format!(\"{:?} is not a valid TLS model\", tls_model_arg));\n-            sess.abort_if_errors();\n-            bug!();\n-        }\n+fn to_llvm_tls_model(tls_model: TlsModel) -> llvm::ThreadLocalMode {\n+    match tls_model {\n+        TlsModel::GeneralDynamic => llvm::ThreadLocalMode::GeneralDynamic,\n+        TlsModel::LocalDynamic => llvm::ThreadLocalMode::LocalDynamic,\n+        TlsModel::InitialExec => llvm::ThreadLocalMode::InitialExec,\n+        TlsModel::LocalExec => llvm::ThreadLocalMode::LocalExec,\n     }\n }\n \n@@ -267,7 +260,7 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n \n         let check_overflow = tcx.sess.overflow_checks();\n \n-        let tls_model = get_tls_model(&tcx.sess);\n+        let tls_model = to_llvm_tls_model(tcx.sess.tls_model());\n \n         let (llcx, llmod) = (&*llvm_module.llcx, llvm_module.llmod());\n "}, {"sha": "42302a56b41883d78ecb5bc907a8bf0d465f78f4", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "patch": "@@ -216,7 +216,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n             }\n             PrintRequest::TlsModels => {\n                 println!(\"Available TLS models:\");\n-                for &(name, _) in back::write::TLS_MODEL_ARGS.iter() {\n+                for name in &[\"global-dynamic\", \"local-dynamic\", \"initial-exec\", \"local-exec\"] {\n                     println!(\"    {}\", name);\n                 }\n                 println!();"}, {"sha": "cee2e5b5becdb350c3d833805522370f86d06a19", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "patch": "@@ -14,7 +14,8 @@ use rustc_session::{build_session, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n use rustc_span::SourceFileHashAlgorithm;\n-use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelocModel, RelroLevel};\n+use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy};\n+use rustc_target::spec::{RelocModel, RelroLevel, TlsModel};\n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n use std::path::PathBuf;\n@@ -567,7 +568,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(symbol_mangling_version, SymbolManglingVersion::V0);\n     tracked!(teach, true);\n     tracked!(thinlto, Some(true));\n-    tracked!(tls_model, Some(String::from(\"tls model\")));\n+    tracked!(tls_model, Some(TlsModel::GeneralDynamic));\n     tracked!(treat_err_as_bug, Some(1));\n     tracked!(unleash_the_miri_inside_of_you, true);\n     tracked!(verify_llvm_ir, true);"}, {"sha": "0dfc391d9cd3bf6634c77b32e937d3bbe52cad60", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "patch": "@@ -1315,10 +1315,6 @@ fn collect_print_requests(\n         prints.push(PrintRequest::CodeModels);\n         cg.code_model = None;\n     }\n-    if dopts.tls_model.as_ref().map_or(false, |s| s == \"help\") {\n-        prints.push(PrintRequest::TlsModels);\n-        dopts.tls_model = None;\n-    }\n \n     prints.extend(matches.opt_strs(\"print\").into_iter().map(|s| match &*s {\n         \"crate-name\" => PrintRequest::CrateName,\n@@ -2001,7 +1997,8 @@ crate mod dep_tracking {\n     use crate::utils::NativeLibraryKind;\n     use rustc_feature::UnstableFeatures;\n     use rustc_span::edition::Edition;\n-    use rustc_target::spec::{MergeFunctions, PanicStrategy, RelocModel, RelroLevel, TargetTriple};\n+    use rustc_target::spec::{MergeFunctions, PanicStrategy, RelocModel};\n+    use rustc_target::spec::{RelroLevel, TargetTriple, TlsModel};\n     use std::collections::hash_map::DefaultHasher;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;\n@@ -2050,6 +2047,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<Vec<String>>);\n     impl_dep_tracking_hash_via_hash!(Option<MergeFunctions>);\n     impl_dep_tracking_hash_via_hash!(Option<RelocModel>);\n+    impl_dep_tracking_hash_via_hash!(Option<TlsModel>);\n     impl_dep_tracking_hash_via_hash!(Option<PanicStrategy>);\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);"}, {"sha": "5b983d1105de46039ca8d18c959ca5376ee2a3dc", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "patch": "@@ -6,7 +6,8 @@ use crate::search_paths::SearchPath;\n use crate::utils::NativeLibraryKind;\n \n use rustc_target::spec::TargetTriple;\n-use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelocModel, RelroLevel};\n+use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy};\n+use rustc_target::spec::{RelocModel, RelroLevel, TlsModel};\n \n use rustc_feature::UnstableFeatures;\n use rustc_span::edition::Edition;\n@@ -267,6 +268,8 @@ macro_rules! options {\n         pub const parse_src_file_hash: &str = \"either `md5` or `sha1`\";\n         pub const parse_relocation_model: &str =\n             \"one of supported relocation models (`rustc --print relocation-models`)\";\n+        pub const parse_tls_model: &str =\n+            \"one of supported TLS models (`rustc --print tls-models`)\";\n     }\n \n     #[allow(dead_code)]\n@@ -606,6 +609,14 @@ macro_rules! options {\n             true\n         }\n \n+        fn parse_tls_model(slot: &mut Option<TlsModel>, v: Option<&str>) -> bool {\n+            match v.and_then(|s| TlsModel::from_str(s).ok()) {\n+                Some(tls_model) => *slot = Some(tls_model),\n+                _ => return false,\n+            }\n+            true\n+        }\n+\n         fn parse_symbol_mangling_version(\n             slot: &mut SymbolManglingVersion,\n             v: Option<&str>,\n@@ -977,7 +988,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"measure time of each LLVM pass (default: no)\"),\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each rustc pass (default: no)\"),\n-    tls_model: Option<String> = (None, parse_opt_string, [TRACKED],\n+    tls_model: Option<TlsModel> = (None, parse_tls_model, [TRACKED],\n         \"choose the TLS model to use (`rustc --print tls-models` for details)\"),\n     trace_macros: bool = (false, parse_bool, [UNTRACKED],\n         \"for every macro invocation, print its name and arguments (default: no)\"),"}, {"sha": "42f9a8d6b05949320ebd5146e7bad7e452c4d1e8", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "patch": "@@ -22,7 +22,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorReported\n use rustc_span::edition::Edition;\n use rustc_span::source_map::{self, FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n use rustc_span::SourceFileHashAlgorithm;\n-use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, Target, TargetTriple};\n+use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, Target, TargetTriple, TlsModel};\n \n use std::cell::{self, RefCell};\n use std::env;\n@@ -588,6 +588,10 @@ impl Session {\n         self.opts.cg.relocation_model.unwrap_or(self.target.target.options.relocation_model)\n     }\n \n+    pub fn tls_model(&self) -> TlsModel {\n+        self.opts.debugging_opts.tls_model.unwrap_or(self.target.target.options.tls_model)\n+    }\n+\n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n         // \"mcount\" function relies on stack pointer.\n         // See <https://sourceware.org/binutils/docs/gprof/Implementation.html>."}, {"sha": "3659c9ecdfca654cd206a37583b39a75c1bfda19", "filename": "src/librustc_target/spec/cloudabi_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_target%2Fspec%2Fcloudabi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_target%2Fspec%2Fcloudabi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fcloudabi_base.rs?ref=f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, RelroLevel, TargetOptions, TlsModel};\n \n pub fn opts() -> TargetOptions {\n     let mut args = LinkArgs::new();\n@@ -29,7 +29,7 @@ pub fn opts() -> TargetOptions {\n         // (Global Offset Table) to obtain the effective address of a\n         // thread-local variable. Using a GOT is useful only when doing\n         // dynamic linking.\n-        tls_model: \"local-exec\".to_string(),\n+        tls_model: TlsModel::LocalExec,\n         relro_level: RelroLevel::Full,\n         ..Default::default()\n     }"}, {"sha": "18fb2aa3d5693f00ab0afbde139a8fb1ec5d8d84", "filename": "src/librustc_target/spec/hermit_base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_base.rs?ref=f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy};\n+use crate::spec::{RelocModel, TargetOptions, TlsModel};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n@@ -17,7 +18,7 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         relocation_model: RelocModel::Static,\n         target_family: None,\n-        tls_model: \"initial-exec\".to_string(),\n+        tls_model: TlsModel::InitialExec,\n         ..Default::default()\n     }\n }"}, {"sha": "7f2dada714d8f721145d3968dc3ce4924a0befa5", "filename": "src/librustc_target/spec/hermit_kernel_base.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fhermit_kernel_base.rs?ref=f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "patch": "@@ -1,4 +1,5 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy};\n+use crate::spec::{RelocModel, TargetOptions, TlsModel};\n \n pub fn opts() -> TargetOptions {\n     let mut pre_link_args = LinkArgs::new();\n@@ -18,7 +19,7 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         relocation_model: RelocModel::Static,\n         target_family: None,\n-        tls_model: \"initial-exec\".to_string(),\n+        tls_model: TlsModel::InitialExec,\n         ..Default::default()\n     }\n }"}, {"sha": "e853c07632f9043fb744750373580bca2e9e620c", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 51, "deletions": 3, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "patch": "@@ -305,6 +305,42 @@ impl ToJson for RelocModel {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Hash, Debug)]\n+pub enum TlsModel {\n+    GeneralDynamic,\n+    LocalDynamic,\n+    InitialExec,\n+    LocalExec,\n+}\n+\n+impl FromStr for TlsModel {\n+    type Err = ();\n+\n+    fn from_str(s: &str) -> Result<TlsModel, ()> {\n+        Ok(match s {\n+            // Note the difference \"general\" vs \"global\" difference. The model name is \"general\",\n+            // but the user-facing option name is \"global\" for consistency with other compilers.\n+            \"global-dynamic\" => TlsModel::GeneralDynamic,\n+            \"local-dynamic\" => TlsModel::LocalDynamic,\n+            \"initial-exec\" => TlsModel::InitialExec,\n+            \"local-exec\" => TlsModel::LocalExec,\n+            _ => return Err(()),\n+        })\n+    }\n+}\n+\n+impl ToJson for TlsModel {\n+    fn to_json(&self) -> Json {\n+        match *self {\n+            TlsModel::GeneralDynamic => \"global-dynamic\",\n+            TlsModel::LocalDynamic => \"local-dynamic\",\n+            TlsModel::InitialExec => \"initial-exec\",\n+            TlsModel::LocalExec => \"local-exec\",\n+        }\n+        .to_json()\n+    }\n+}\n+\n pub enum LoadTargetError {\n     BuiltinTargetNotFound(String),\n     Other(String),\n@@ -660,7 +696,7 @@ pub struct TargetOptions {\n     pub code_model: Option<String>,\n     /// TLS model to use. Options are \"global-dynamic\" (default), \"local-dynamic\", \"initial-exec\"\n     /// and \"local-exec\". This is similar to the -ftls-model option in GCC/Clang.\n-    pub tls_model: String,\n+    pub tls_model: TlsModel,\n     /// Do not emit code that uses the \"red zone\", if the ABI has one. Defaults to false.\n     pub disable_redzone: bool,\n     /// Eliminate frame pointers from stack frames if possible. Defaults to true.\n@@ -863,7 +899,7 @@ impl Default for TargetOptions {\n             executables: false,\n             relocation_model: RelocModel::Pic,\n             code_model: None,\n-            tls_model: \"global-dynamic\".to_string(),\n+            tls_model: TlsModel::GeneralDynamic,\n             disable_redzone: false,\n             eliminate_frame_pointer: true,\n             function_sections: true,\n@@ -1060,6 +1096,18 @@ impl Target {\n                     Some(Ok(()))\n                 })).unwrap_or(Ok(()))\n             } );\n+            ($key_name:ident, TlsModel) => ( {\n+                let name = (stringify!($key_name)).replace(\"_\", \"-\");\n+                obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n+                    match s.parse::<TlsModel>() {\n+                        Ok(tls_model) => base.options.$key_name = tls_model,\n+                        _ => return Some(Err(format!(\"'{}' is not a valid TLS model. \\\n+                                                      Run `rustc --print tls-models` to \\\n+                                                      see the list of supported values.\", s))),\n+                    }\n+                    Some(Ok(()))\n+                })).unwrap_or(Ok(()))\n+            } );\n             ($key_name:ident, PanicStrategy) => ( {\n                 let name = (stringify!($key_name)).replace(\"_\", \"-\");\n                 obj.find(&name[..]).and_then(|o| o.as_string().and_then(|s| {\n@@ -1200,7 +1248,7 @@ impl Target {\n         key!(executables, bool);\n         key!(relocation_model, RelocModel)?;\n         key!(code_model, optional);\n-        key!(tls_model);\n+        key!(tls_model, TlsModel)?;\n         key!(disable_redzone, bool);\n         key!(eliminate_frame_pointer, bool);\n         key!(function_sections, bool);"}, {"sha": "bb19b9d00e8bf5e235541665332e47296a9e7d14", "filename": "src/librustc_target/spec/wasm32_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f81a41a86a3dcec2c12692755ad4940e97c7ecc5/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwasm32_base.rs?ref=f81a41a86a3dcec2c12692755ad4940e97c7ecc5", "patch": "@@ -1,4 +1,4 @@\n-use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions};\n+use super::{LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions, TlsModel};\n use std::collections::BTreeMap;\n \n pub fn options() -> TargetOptions {\n@@ -138,7 +138,7 @@ pub fn options() -> TargetOptions {\n         // `has_elf_tls`) and we need to get it to work by specifying\n         // `local-exec` as that's all that's implemented in LLVM today for wasm.\n         has_elf_tls: true,\n-        tls_model: \"local-exec\".to_string(),\n+        tls_model: TlsModel::LocalExec,\n \n         // gdb scripts don't work on wasm blobs\n         emit_debug_gdb_scripts: false,"}]}