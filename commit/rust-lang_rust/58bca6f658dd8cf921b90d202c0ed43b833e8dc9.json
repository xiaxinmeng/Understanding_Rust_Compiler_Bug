{"sha": "58bca6f658dd8cf921b90d202c0ed43b833e8dc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YmNhNmY2NThkZDhjZjkyMWI5MGQyMDJjMGVkNDNiODMzZThkYzk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-12-06T21:22:59Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-16T19:07:26Z"}, "message": "Iterate on explicit_predicates.", "tree": {"sha": "fb882c4eb6e0d64e4456e62ab2a48a082b1d82b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb882c4eb6e0d64e4456e62ab2a48a082b1d82b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58bca6f658dd8cf921b90d202c0ed43b833e8dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58bca6f658dd8cf921b90d202c0ed43b833e8dc9", "html_url": "https://github.com/rust-lang/rust/commit/58bca6f658dd8cf921b90d202c0ed43b833e8dc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58bca6f658dd8cf921b90d202c0ed43b833e8dc9/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dda31b97c8833d612842b87d9dd67bf76a0fc572", "url": "https://api.github.com/repos/rust-lang/rust/commits/dda31b97c8833d612842b87d9dd67bf76a0fc572", "html_url": "https://github.com/rust-lang/rust/commit/dda31b97c8833d612842b87d9dd67bf76a0fc572"}], "stats": {"total": 16, "additions": 1, "deletions": 15}, "files": [{"sha": "f042b5ad8e48bb7d95e7eb5cafc6f1a9c23da40a", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/58bca6f658dd8cf921b90d202c0ed43b833e8dc9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58bca6f658dd8cf921b90d202c0ed43b833e8dc9/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=58bca6f658dd8cf921b90d202c0ed43b833e8dc9", "patch": "@@ -905,6 +905,7 @@ impl EncodeContext<'a, 'tcx> {\n             }\n             let g = tcx.generics_of(def_id);\n             record!(self.tables.generics[def_id] <- g);\n+            record!(self.tables.explicit_predicates[def_id] <- self.tcx.explicit_predicates_of(def_id));\n         }\n         let inherent_impls = tcx.crate_inherent_impls(LOCAL_CRATE);\n         for (def_id, implementations) in inherent_impls.inherent_impls.iter() {\n@@ -950,7 +951,6 @@ impl EncodeContext<'a, 'tcx> {\n                 record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(ctor_def_id));\n             }\n         }\n-        self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n     }\n \n@@ -973,7 +973,6 @@ impl EncodeContext<'a, 'tcx> {\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n-        self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n     }\n \n@@ -1033,7 +1032,6 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.kind[def_id] <- EntryKind::Field);\n         self.encode_ident_span(def_id, field.ident);\n         self.encode_item_type(def_id);\n-        self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n     }\n \n@@ -1054,16 +1052,9 @@ impl EncodeContext<'a, 'tcx> {\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n-        self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n     }\n \n-    fn encode_explicit_predicates(&mut self, def_id: DefId) {\n-        debug!(\"EncodeContext::encode_explicit_predicates({:?})\", def_id);\n-        record!(self.tables.explicit_predicates[def_id] <-\n-            self.tcx.explicit_predicates_of(def_id));\n-    }\n-\n     fn encode_inferred_outlives(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_inferred_outlives({:?})\", def_id);\n         let inferred_outlives = self.tcx.inferred_outlives_of(def_id);\n@@ -1152,7 +1143,6 @@ impl EncodeContext<'a, 'tcx> {\n         if trait_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n-        self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n     }\n \n@@ -1211,7 +1201,6 @@ impl EncodeContext<'a, 'tcx> {\n         if impl_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n-        self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n     }\n \n@@ -1489,7 +1478,6 @@ impl EncodeContext<'a, 'tcx> {\n             | hir::ItemKind::OpaqueTy(..)\n             | hir::ItemKind::Trait(..)\n             | hir::ItemKind::TraitAlias(..) => {\n-                self.encode_explicit_predicates(def_id);\n                 self.encode_inferred_outlives(def_id);\n             }\n             _ => {}\n@@ -1551,7 +1539,6 @@ impl EncodeContext<'a, 'tcx> {\n \n         record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(qualifs, const_data));\n         self.encode_item_type(def_id.to_def_id());\n-        self.encode_explicit_predicates(def_id.to_def_id());\n         self.encode_inferred_outlives(def_id.to_def_id());\n     }\n \n@@ -1832,7 +1819,6 @@ impl EncodeContext<'a, 'tcx> {\n         if let hir::ForeignItemKind::Fn(..) = nitem.kind {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n-        self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n     }\n }"}]}