{"sha": "2e2642efccd5855e4158b01a006e7884a96982bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMjY0MmVmY2NkNTg1NWU0MTU4YjAxYTAwNmU3ODg0YTk2OTgyYmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T18:51:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T18:51:43Z"}, "message": "Remove TypeAscriptionOwner", "tree": {"sha": "de4342a453b3b504178dd17c46fab3e1d6e995d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de4342a453b3b504178dd17c46fab3e1d6e995d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e2642efccd5855e4158b01a006e7884a96982bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e2642efccd5855e4158b01a006e7884a96982bb", "html_url": "https://github.com/rust-lang/rust/commit/2e2642efccd5855e4158b01a006e7884a96982bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e2642efccd5855e4158b01a006e7884a96982bb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbe60a2e284035d16c2a1ee743ee88db418689aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe60a2e284035d16c2a1ee743ee88db418689aa", "html_url": "https://github.com/rust-lang/rust/commit/fbe60a2e284035d16c2a1ee743ee88db418689aa"}], "stats": {"total": 154, "additions": 64, "deletions": 90}, "files": [{"sha": "e69f0a89b20b58a6903d7cedd709f19fc521bc54", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -1,6 +1,6 @@\n use hir::HirDisplay;\n use ra_syntax::{\n-    ast::{self, AstNode, LetStmt, NameOwner, TypeAscriptionOwner},\n+    ast::{self, AstNode, LetStmt, NameOwner},\n     TextRange,\n };\n \n@@ -22,20 +22,20 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // }\n // ```\n pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let stmt = ctx.find_node_at_offset::<LetStmt>()?;\n-    let module = ctx.sema.scope(stmt.syntax()).module()?;\n-    let expr = stmt.initializer()?;\n+    let let_stmt = ctx.find_node_at_offset::<LetStmt>()?;\n+    let module = ctx.sema.scope(let_stmt.syntax()).module()?;\n+    let expr = let_stmt.initializer()?;\n     // Must be a binding\n-    let pat = match stmt.pat()? {\n+    let pat = match let_stmt.pat()? {\n         ast::Pat::BindPat(bind_pat) => bind_pat,\n         _ => return None,\n     };\n     let pat_range = pat.syntax().text_range();\n     // The binding must have a name\n     let name = pat.name()?;\n     let name_range = name.syntax().text_range();\n-    let stmt_range = stmt.syntax().text_range();\n-    let eq_range = stmt.eq_token()?.text_range();\n+    let stmt_range = let_stmt.syntax().text_range();\n+    let eq_range = let_stmt.eq_token()?.text_range();\n     // Assist should only be applicable if cursor is between 'let' and '='\n     let let_range = TextRange::new(stmt_range.start(), eq_range.start());\n     let cursor_in_range = let_range.contains_range(ctx.frange.range);\n@@ -44,7 +44,7 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     }\n     // Assist not applicable if the type has already been specified\n     // and it has no placeholders\n-    let ascribed_ty = stmt.ascribed_type();\n+    let ascribed_ty = let_stmt.ty();\n     if let Some(ty) = &ascribed_ty {\n         if ty.syntax().descendants().find_map(ast::PlaceholderType::cast).is_none() {\n             return None;"}, {"sha": "b84aa24b6c760b5e8a27a37dfa03627b9d5b1865", "filename": "crates/ra_assists/src/handlers/generate_new.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -1,9 +1,6 @@\n use hir::Adt;\n use ra_syntax::{\n-    ast::{\n-        self, AstNode, GenericParamsOwner, NameOwner, StructKind, TypeAscriptionOwner,\n-        VisibilityOwner,\n-    },\n+    ast::{self, AstNode, GenericParamsOwner, NameOwner, StructKind, VisibilityOwner},\n     T,\n };\n use stdx::{format_to, SepBy};\n@@ -54,9 +51,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n \n         let params = field_list\n             .fields()\n-            .filter_map(|f| {\n-                Some(format!(\"{}: {}\", f.name()?.syntax(), f.ascribed_type()?.syntax()))\n-            })\n+            .filter_map(|f| Some(format!(\"{}: {}\", f.name()?.syntax(), f.ty()?.syntax())))\n             .sep_by(\", \");\n         let fields = field_list.fields().filter_map(|f| f.name()).sep_by(\", \");\n "}, {"sha": "c3134f64d0592574511ac8b397916aa794de366d", "filename": "crates/ra_assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -1,5 +1,5 @@\n use ra_syntax::{\n-    ast::{self, GenericParamsOwner, NameOwner, TypeAscriptionOwner},\n+    ast::{self, GenericParamsOwner, NameOwner},\n     AstNode, SyntaxKind, TextRange, TextSize,\n };\n use rustc_hash::FxHashSet;\n@@ -67,7 +67,7 @@ fn generate_fn_def_assist(\n         // otherwise, if there's a single reference parameter without a named liftime, use that\n         let fn_params_without_lifetime: Vec<_> = param_list\n             .params()\n-            .filter_map(|param| match param.ascribed_type() {\n+            .filter_map(|param| match param.ty() {\n                 Some(ast::TypeRef::ReferenceType(ascribed_type))\n                     if ascribed_type.lifetime_token() == None =>\n                 {"}, {"sha": "f8523d03fa5ab1509424cef55489d7f3cbf9a327", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -8,7 +8,7 @@ use hir_expand::{\n     InFile,\n };\n use ra_arena::{map::ArenaMap, Arena};\n-use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner, VisibilityOwner};\n+use ra_syntax::ast::{self, NameOwner, VisibilityOwner};\n \n use crate::{\n     body::{CfgExpander, LowerCtx},\n@@ -251,7 +251,7 @@ fn lower_struct(\n                     || Either::Right(fd.clone()),\n                     || FieldData {\n                         name: fd.name().map(|n| n.as_name()).unwrap_or_else(Name::missing),\n-                        type_ref: TypeRef::from_ast_opt(&ctx, fd.ascribed_type()),\n+                        type_ref: TypeRef::from_ast_opt(&ctx, fd.ty()),\n                         visibility: RawVisibility::from_ast(db, ast.with_value(fd.visibility())),\n                     },\n                 );"}, {"sha": "288ca76c31ed9612ffbf63ca45866760019757db", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -11,7 +11,7 @@ use ra_arena::Arena;\n use ra_syntax::{\n     ast::{\n         self, ArgListOwner, ArrayExprKind, LiteralKind, LoopBodyOwner, ModuleItemOwner, NameOwner,\n-        SlicePatComponents, TypeAscriptionOwner,\n+        SlicePatComponents,\n     },\n     AstNode, AstPtr,\n };\n@@ -466,8 +466,7 @@ impl ExprCollector<'_> {\n                 if let Some(pl) = e.param_list() {\n                     for param in pl.params() {\n                         let pat = self.collect_pat_opt(param.pat());\n-                        let type_ref =\n-                            param.ascribed_type().map(|it| TypeRef::from_ast(&self.ctx(), it));\n+                        let type_ref = param.ty().map(|it| TypeRef::from_ast(&self.ctx(), it));\n                         args.push(pat);\n                         arg_types.push(type_ref);\n                     }\n@@ -607,8 +606,7 @@ impl ExprCollector<'_> {\n             .map(|s| match s {\n                 ast::Stmt::LetStmt(stmt) => {\n                     let pat = self.collect_pat_opt(stmt.pat());\n-                    let type_ref =\n-                        stmt.ascribed_type().map(|it| TypeRef::from_ast(&self.ctx(), it));\n+                    let type_ref = stmt.ty().map(|it| TypeRef::from_ast(&self.ctx(), it));\n                     let initializer = stmt.initializer().map(|e| self.collect_expr(e));\n                     Statement::Let { pat, type_ref, initializer }\n                 }"}, {"sha": "a67e75dac069000341344ae64240b792e2ab202f", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -13,7 +13,7 @@ use std::{\n     sync::Arc,\n };\n \n-use ast::{AstNode, AttrsOwner, NameOwner, StructKind, TypeAscriptionOwner};\n+use ast::{AstNode, AttrsOwner, NameOwner, StructKind};\n use either::Either;\n use hir_expand::{\n     ast_id_map::FileAstId,"}, {"sha": "f0ced1f7953348c0703404d04803b5e857944590", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -209,7 +209,7 @@ impl Ctx {\n     fn lower_record_field(&mut self, field: &ast::RecordField) -> Option<Field> {\n         let name = field.name()?.as_name();\n         let visibility = self.lower_visibility(field);\n-        let type_ref = self.lower_type_ref_opt(field.ascribed_type());\n+        let type_ref = self.lower_type_ref_opt(field.ty());\n         let res = Field { name, type_ref, visibility };\n         Some(res)\n     }\n@@ -286,7 +286,7 @@ impl Ctx {\n         let mut has_self_param = false;\n         if let Some(param_list) = func.param_list() {\n             if let Some(self_param) = param_list.self_param() {\n-                let self_type = match self_param.ascribed_type() {\n+                let self_type = match self_param.ty() {\n                     Some(type_ref) => TypeRef::from_ast(&self.body_ctx, type_ref),\n                     None => {\n                         let self_type = TypeRef::Path(name![Self].into());\n@@ -305,7 +305,7 @@ impl Ctx {\n                 has_self_param = true;\n             }\n             for param in param_list.params() {\n-                let type_ref = TypeRef::from_ast_opt(&self.body_ctx, param.ascribed_type());\n+                let type_ref = TypeRef::from_ast_opt(&self.body_ctx, param.ty());\n                 params.push(type_ref);\n             }\n         }\n@@ -370,7 +370,7 @@ impl Ctx {\n \n     fn lower_static(&mut self, static_: &ast::Static) -> Option<FileItemTreeId<Static>> {\n         let name = static_.name()?.as_name();\n-        let type_ref = self.lower_type_ref_opt(static_.ascribed_type());\n+        let type_ref = self.lower_type_ref_opt(static_.ty());\n         let visibility = self.lower_visibility(static_);\n         let mutable = static_.mut_token().is_some();\n         let ast_id = self.source_ast_id_map.ast_id(static_);\n@@ -380,7 +380,7 @@ impl Ctx {\n \n     fn lower_const(&mut self, konst: &ast::Const) -> FileItemTreeId<Const> {\n         let name = konst.name().map(|it| it.as_name());\n-        let type_ref = self.lower_type_ref_opt(konst.ascribed_type());\n+        let type_ref = self.lower_type_ref_opt(konst.ty());\n         let visibility = self.lower_visibility(konst);\n         let ast_id = self.source_ast_id_map.ast_id(konst);\n         let res = Const { name, visibility, type_ref, ast_id };"}, {"sha": "dfab15948ab3fd6d1908318a089d7b11f5caba08", "filename": "crates/ra_hir_def/src/path/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower.rs?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -9,7 +9,7 @@ use hir_expand::{\n     hygiene::Hygiene,\n     name::{name, AsName},\n };\n-use ra_syntax::ast::{self, AstNode, TypeAscriptionOwner, TypeBoundsOwner};\n+use ra_syntax::ast::{self, AstNode, TypeBoundsOwner};\n \n use super::AssociatedTypeBinding;\n use crate::{\n@@ -189,7 +189,7 @@ fn lower_generic_args_from_fn_path(\n     if let Some(params) = params {\n         let mut param_types = Vec::new();\n         for param in params.params() {\n-            let type_ref = TypeRef::from_ast_opt(&ctx, param.ascribed_type());\n+            let type_ref = TypeRef::from_ast_opt(&ctx, param.ty());\n             param_types.push(type_ref);\n         }\n         let arg = GenericArg::Type(TypeRef::Tuple(param_types));"}, {"sha": "4059302dfc18a2d80db047026274b3ece57a389d", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -1,7 +1,7 @@\n //! HIR for references to types. Paths in these are not yet resolved. They can\n //! be directly created from an ast::TypeRef, without further queries.\n \n-use ra_syntax::ast::{self, TypeAscriptionOwner};\n+use ra_syntax::ast::{self};\n \n use crate::{body::LowerCtx, path::Path};\n \n@@ -124,10 +124,7 @@ impl TypeRef {\n                         is_varargs = param.dotdotdot_token().is_some();\n                     }\n \n-                    pl.params()\n-                        .map(|p| p.ascribed_type())\n-                        .map(|it| TypeRef::from_ast_opt(&ctx, it))\n-                        .collect()\n+                    pl.params().map(|p| p.ty()).map(|it| TypeRef::from_ast_opt(&ctx, it)).collect()\n                 } else {\n                     Vec::new()\n                 };"}, {"sha": "bddf1bd47474def5b96dc4a51638182b6b6bf221", "filename": "crates/ra_ide/src/display/short_label.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use ra_syntax::ast::{self, AstNode, NameOwner, TypeAscriptionOwner, VisibilityOwner};\n+use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n use stdx::format_to;\n \n pub(crate) trait ShortLabel {\n@@ -55,19 +55,19 @@ impl ShortLabel for ast::TypeAlias {\n \n impl ShortLabel for ast::Const {\n     fn short_label(&self) -> Option<String> {\n-        short_label_from_ascribed_node(self, \"const \")\n+        short_label_from_ty(self, self.ty(), \"const \")\n     }\n }\n \n impl ShortLabel for ast::Static {\n     fn short_label(&self) -> Option<String> {\n-        short_label_from_ascribed_node(self, \"static \")\n+        short_label_from_ty(self, self.ty(), \"static \")\n     }\n }\n \n impl ShortLabel for ast::RecordField {\n     fn short_label(&self) -> Option<String> {\n-        short_label_from_ascribed_node(self, \"\")\n+        short_label_from_ty(self, self.ty(), \"\")\n     }\n }\n \n@@ -77,13 +77,13 @@ impl ShortLabel for ast::Variant {\n     }\n }\n \n-fn short_label_from_ascribed_node<T>(node: &T, prefix: &str) -> Option<String>\n+fn short_label_from_ty<T>(node: &T, ty: Option<ast::TypeRef>, prefix: &str) -> Option<String>\n where\n-    T: NameOwner + VisibilityOwner + TypeAscriptionOwner,\n+    T: NameOwner + VisibilityOwner,\n {\n     let mut buf = short_label_from_node(node, prefix)?;\n \n-    if let Some(type_ref) = node.ascribed_type() {\n+    if let Some(type_ref) = ty {\n         format_to!(buf, \": {}\", type_ref.syntax());\n     }\n "}, {"sha": "22cf8637a8b5915c27fdb5b112dd6e867a4b0622", "filename": "crates/ra_ide/src/file_structure.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -1,5 +1,5 @@\n use ra_syntax::{\n-    ast::{self, AttrsOwner, GenericParamsOwner, NameOwner, TypeAscriptionOwner},\n+    ast::{self, AttrsOwner, GenericParamsOwner, NameOwner},\n     match_ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, TextRange, WalkEvent,\n };\n \n@@ -52,18 +52,11 @@ pub fn file_structure(file: &SourceFile) -> Vec<StructureNode> {\n \n fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n     fn decl<N: NameOwner + AttrsOwner>(node: N) -> Option<StructureNode> {\n-        decl_with_detail(node, None)\n-    }\n-\n-    fn decl_with_ascription<N: NameOwner + AttrsOwner + TypeAscriptionOwner>(\n-        node: N,\n-    ) -> Option<StructureNode> {\n-        let ty = node.ascribed_type();\n-        decl_with_type_ref(node, ty)\n+        decl_with_detail(&node, None)\n     }\n \n     fn decl_with_type_ref<N: NameOwner + AttrsOwner>(\n-        node: N,\n+        node: &N,\n         type_ref: Option<ast::TypeRef>,\n     ) -> Option<StructureNode> {\n         let detail = type_ref.map(|type_ref| {\n@@ -75,7 +68,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n     }\n \n     fn decl_with_detail<N: NameOwner + AttrsOwner>(\n-        node: N,\n+        node: &N,\n         detail: Option<String>,\n     ) -> Option<StructureNode> {\n         let name = node.name()?;\n@@ -124,21 +117,18 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                     collapse_ws(ret_type.syntax(), &mut detail);\n                 }\n \n-                decl_with_detail(it, Some(detail))\n+                decl_with_detail(&it, Some(detail))\n             },\n             ast::Struct(it) => decl(it),\n             ast::Union(it) => decl(it),\n             ast::Enum(it) => decl(it),\n             ast::Variant(it) => decl(it),\n             ast::Trait(it) => decl(it),\n             ast::Module(it) => decl(it),\n-            ast::TypeAlias(it) => {\n-                let ty = it.type_ref();\n-                decl_with_type_ref(it, ty)\n-            },\n-            ast::RecordField(it) => decl_with_ascription(it),\n-            ast::Const(it) => decl_with_ascription(it),\n-            ast::Static(it) => decl_with_ascription(it),\n+            ast::TypeAlias(it) => decl_with_type_ref(&it, it.type_ref()),\n+            ast::RecordField(it) => decl_with_type_ref(&it, it.ty()),\n+            ast::Const(it) => decl_with_type_ref(&it, it.ty()),\n+            ast::Static(it) => decl_with_type_ref(&it, it.ty()),\n             ast::Impl(it) => {\n                 let target_type = it.target_type()?;\n                 let target_trait = it.target_trait();"}, {"sha": "4bbbcd258f36025d98e2632c94c36e4ad23a346f", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -2,7 +2,7 @@ use hir::{Adt, Callable, HirDisplay, Semantics, Type};\n use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n-    ast::{self, ArgListOwner, AstNode, TypeAscriptionOwner},\n+    ast::{self, ArgListOwner, AstNode},\n     match_ast, Direction, NodeOrToken, SmolStr, SyntaxKind, TextRange, T,\n };\n use stdx::to_lower_snake_case;\n@@ -230,10 +230,10 @@ fn should_not_display_type_hint(db: &RootDatabase, bind_pat: &ast::BindPat, pat_\n         match_ast! {\n             match node {\n                 ast::LetStmt(it) => {\n-                    return it.ascribed_type().is_some()\n+                    return it.ty().is_some()\n                 },\n                 ast::Param(it) => {\n-                    return it.ascribed_type().is_some()\n+                    return it.ty().is_some()\n                 },\n                 ast::MatchArm(_it) => {\n                     return pat_is_enum_variant(db, bind_pat, pat_ty);"}, {"sha": "31654bf791778954f480e0338ef207b343f71c78", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -7,7 +7,8 @@ use ra_ide_db::{\n     RootDatabase,\n };\n use ra_syntax::{\n-    algo::find_node_at_offset, ast, ast::NameOwner, ast::TypeAscriptionOwner,\n+    algo::find_node_at_offset,\n+    ast::{self, NameOwner},\n     lex_single_valid_syntax_kind, match_ast, AstNode, SyntaxKind, SyntaxNode, SyntaxToken,\n };\n use ra_text_edit::TextEdit;\n@@ -155,7 +156,7 @@ fn rename_to_self(\n         return None; // method already has self param\n     }\n     let first_param = params.params().next()?;\n-    let mutable = match first_param.ascribed_type() {\n+    let mutable = match first_param.ty() {\n         Some(ast::TypeRef::ReferenceType(rt)) => rt.mut_token().is_some(),\n         _ => return None, // not renaming other types\n     };"}, {"sha": "2078269796310c7d1ce80586c2c63eb6dca44231", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -35,12 +35,12 @@ pub struct Const {\n impl ast::AttrsOwner for Const {}\n impl ast::NameOwner for Const {}\n impl ast::VisibilityOwner for Const {}\n-impl ast::TypeAscriptionOwner for Const {}\n impl Const {\n     pub fn default_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![default]) }\n     pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n     pub fn underscore_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![_]) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n@@ -148,11 +148,11 @@ pub struct Static {\n impl ast::AttrsOwner for Static {}\n impl ast::NameOwner for Static {}\n impl ast::VisibilityOwner for Static {}\n-impl ast::TypeAscriptionOwner for Static {}\n impl Static {\n     pub fn static_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![static]) }\n     pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n@@ -361,7 +361,6 @@ pub struct SelfParam {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ast::AttrsOwner for SelfParam {}\n-impl ast::TypeAscriptionOwner for SelfParam {}\n impl SelfParam {\n     pub fn amp_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![&]) }\n     pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n@@ -370,16 +369,17 @@ impl SelfParam {\n     pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n     pub fn self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![self]) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Param {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ast::AttrsOwner for Param {}\n-impl ast::TypeAscriptionOwner for Param {}\n impl Param {\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n     pub fn dotdotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![...]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -414,9 +414,9 @@ pub struct RecordField {\n impl ast::AttrsOwner for RecordField {}\n impl ast::NameOwner for RecordField {}\n impl ast::VisibilityOwner for RecordField {}\n-impl ast::TypeAscriptionOwner for RecordField {}\n impl RecordField {\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TupleField {\n@@ -495,10 +495,10 @@ pub struct ConstParam {\n }\n impl ast::AttrsOwner for ConstParam {}\n impl ast::NameOwner for ConstParam {}\n-impl ast::TypeAscriptionOwner for ConstParam {}\n impl ConstParam {\n     pub fn const_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![const]) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn default_val(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n@@ -1203,11 +1203,11 @@ pub struct LetStmt {\n     pub(crate) syntax: SyntaxNode,\n }\n impl ast::AttrsOwner for LetStmt {}\n-impl ast::TypeAscriptionOwner for LetStmt {}\n impl LetStmt {\n     pub fn let_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![let]) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n+    pub fn ty(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn initializer(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }"}, {"sha": "3a56b1674c8d5d7be400ef76b5f5fd5f1ff75eb0", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -9,12 +9,6 @@ use crate::{\n     SyntaxToken, T,\n };\n \n-pub trait TypeAscriptionOwner: AstNode {\n-    fn ascribed_type(&self) -> Option<ast::TypeRef> {\n-        support::child(self.syntax())\n-    }\n-}\n-\n pub trait NameOwner: AstNode {\n     fn name(&self) -> Option<ast::Name> {\n         support::child(self.syntax())"}, {"sha": "45b788bdbafc6b969266f2fb4fb59899ab1a9091", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -660,7 +660,6 @@ fn extract_struct_traits(ast: &mut AstSrc) {\n         (\"GenericParamsOwner\", &[\"generic_param_list\", \"where_clause\"]),\n         (\"TypeBoundsOwner\", &[\"type_bound_list\", \"colon_token\"]),\n         (\"ModuleItemOwner\", &[\"items\"]),\n-        (\"TypeAscriptionOwner\", &[\"ascribed_type\"]),\n         (\"LoopBodyOwner\", &[\"label\", \"loop_body\"]),\n         (\"ArgListOwner\", &[\"arg_list\"]),\n     ];"}, {"sha": "e09bc875a0d720064cbb75ebc69ebf212381a571", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e2642efccd5855e4158b01a006e7884a96982bb/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/2e2642efccd5855e4158b01a006e7884a96982bb/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=2e2642efccd5855e4158b01a006e7884a96982bb", "patch": "@@ -61,13 +61,13 @@ ParamList =\n SelfParam =\n   Attr* (\n     ('&' 'lifetime'?)? 'mut'? 'self'\n-  | 'mut'? 'self' ':' ascribed_type:TypeRef\n+  | 'mut'? 'self' ':' ty:TypeRef\n   )\n \n Param =\n   Attr* (\n-    Pat (':' ascribed_type:TypeRef)\n-  | ascribed_type:TypeRef\n+    Pat (':' ty:TypeRef)\n+  | ty:TypeRef\n   | '...'\n   )\n \n@@ -88,7 +88,7 @@ RecordFieldList =\n  '{' fields:(RecordField (',' RecordField)* ','?)? '}'\n \n RecordField =\n-  Attr* Visibility? Name ':' ascribed_type:TypeRef\n+  Attr* Visibility? Name ':' ty:TypeRef\n \n TupleFieldList =\n   '(' fields:(TupleField (',' TupleField)* ','?)? ')'\n@@ -115,11 +115,11 @@ Union =\n   RecordFieldList\n \n Const =\n-  Attr* Visibility? 'default'? 'const' (Name | '_') ':' ascribed_type:TypeRef\n+  Attr* Visibility? 'default'? 'const' (Name | '_') ':' ty:TypeRef\n   '=' body:Expr ';'\n \n Static =\n-  Attr* Visibility? 'static'? 'mut'? Name ':' ascribed_type:TypeRef\n+  Attr* Visibility? 'static'? 'mut'? Name ':' ty:TypeRef\n   '=' body:Expr ';'\n \n Trait =\n@@ -166,7 +166,7 @@ TypeParam =\n   ('=' default_type:TypeRef)?\n \n ConstParam =\n-  Attr* 'const' Name ':' ascribed_type:TypeRef\n+  Attr* 'const' Name ':' ty:TypeRef\n   ('=' default_val:Expr)?\n \n LifetimeParam =\n@@ -439,7 +439,7 @@ ExprStmt =\n   Attr* Expr ';'\n \n LetStmt =\n-  Attr* 'let' Pat (':' ascribed_type:TypeRef)\n+  Attr* 'let' Pat (':' ty:TypeRef)\n   '=' initializer:Expr ';'\n \n Path ="}]}