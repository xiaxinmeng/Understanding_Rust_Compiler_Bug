{"sha": "752485083151de5cb6056289db74ffee6407a4ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MjQ4NTA4MzE1MWRlNWNiNjA1NjI4OWRiNzRmZmVlNjQwN2E0ZmY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-04T18:25:16Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-04T18:58:12Z"}, "message": "Render documentation for derive completion", "tree": {"sha": "97a910e5076f236834eec9c21760948be52c8d95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97a910e5076f236834eec9c21760948be52c8d95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/752485083151de5cb6056289db74ffee6407a4ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/752485083151de5cb6056289db74ffee6407a4ff", "html_url": "https://github.com/rust-lang/rust/commit/752485083151de5cb6056289db74ffee6407a4ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/752485083151de5cb6056289db74ffee6407a4ff/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98395f29a417b37a5969594f0cac5ae23585da85", "url": "https://api.github.com/repos/rust-lang/rust/commits/98395f29a417b37a5969594f0cac5ae23585da85", "html_url": "https://github.com/rust-lang/rust/commit/98395f29a417b37a5969594f0cac5ae23585da85"}], "stats": {"total": 96, "additions": 56, "deletions": 40}, "files": [{"sha": "b7e72b7900227e7b15e225e4d616f129ee7116e9", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/752485083151de5cb6056289db74ffee6407a4ff/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752485083151de5cb6056289db74ffee6407a4ff/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=752485083151de5cb6056289db74ffee6407a4ff", "patch": "@@ -36,6 +36,10 @@ use crate::{\n pub struct Documentation(String);\n \n impl Documentation {\n+    pub fn new(s: impl Into<String>) -> Self {\n+        Documentation(s.into())\n+    }\n+\n     pub fn as_str(&self) -> &str {\n         &self.0\n     }"}, {"sha": "d526824fbdb3cd9779b3a7409142b9f48e41e995", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 41, "deletions": 39, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/752485083151de5cb6056289db74ffee6407a4ff/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752485083151de5cb6056289db74ffee6407a4ff/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=752485083151de5cb6056289db74ffee6407a4ff", "patch": "@@ -1,6 +1,7 @@\n //! Completion for derives\n+use hir::HasAttrs;\n use itertools::Itertools;\n-use rustc_hash::FxHashSet;\n+use rustc_hash::FxHashMap;\n use syntax::ast;\n \n use crate::{\n@@ -15,66 +16,64 @@ pub(super) fn complete_derive(\n     derive_input: ast::TokenTree,\n ) {\n     if let Some(existing_derives) = super::parse_comma_sep_input(derive_input) {\n-        for derive_completion in DEFAULT_DERIVE_COMPLETIONS\n-            .iter()\n-            .filter(|completion| !existing_derives.contains(completion.label))\n-        {\n-            let mut components = vec![derive_completion.label];\n-            components.extend(\n-                derive_completion\n-                    .dependencies\n-                    .iter()\n-                    .filter(|&&dependency| !existing_derives.contains(dependency)),\n-            );\n-            let lookup = components.join(\", \");\n-            let label = components.iter().rev().join(\", \");\n+        for (derive, docs) in get_derive_names_in_scope(ctx) {\n+            let (label, lookup) = if let Some(derive_completion) = DEFAULT_DERIVE_COMPLETIONS\n+                .iter()\n+                .find(|derive_completion| derive_completion.label == derive)\n+            {\n+                let mut components = vec![derive_completion.label];\n+                components.extend(\n+                    derive_completion\n+                        .dependencies\n+                        .iter()\n+                        .filter(|&&dependency| !existing_derives.contains(dependency)),\n+                );\n+                let lookup = components.join(\", \");\n+                let label = components.iter().rev().join(\", \");\n+                (label, Some(lookup))\n+            } else {\n+                (derive, None)\n+            };\n             let mut item =\n                 CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n-            item.lookup_by(lookup).kind(CompletionItemKind::Attribute);\n-            item.add_to(acc);\n-        }\n-\n-        for custom_derive_name in get_derive_names_in_scope(ctx).difference(&existing_derives) {\n-            let mut item = CompletionItem::new(\n-                CompletionKind::Attribute,\n-                ctx.source_range(),\n-                custom_derive_name,\n-            );\n             item.kind(CompletionItemKind::Attribute);\n+            if let Some(docs) = docs {\n+                item.documentation(docs);\n+            }\n+            if let Some(lookup) = lookup {\n+                item.lookup_by(lookup);\n+            }\n             item.add_to(acc);\n         }\n     }\n }\n \n-fn get_derive_names_in_scope(ctx: &CompletionContext) -> FxHashSet<String> {\n-    let mut result = FxHashSet::default();\n+fn get_derive_names_in_scope(\n+    ctx: &CompletionContext,\n+) -> FxHashMap<String, Option<hir::Documentation>> {\n+    let mut result = FxHashMap::default();\n     ctx.scope.process_all_names(&mut |name, scope_def| {\n         if let hir::ScopeDef::MacroDef(mac) = scope_def {\n             if mac.kind() == hir::MacroKind::Derive {\n-                result.insert(name.to_string());\n+                result.insert(name.to_string(), mac.docs(ctx.db));\n             }\n         }\n     });\n     result\n }\n \n-struct DeriveCompletion {\n+struct DeriveDependencies {\n     label: &'static str,\n     dependencies: &'static [&'static str],\n }\n \n-/// Standard Rust derives and the information about their dependencies\n+/// Standard Rust derives that have dependencies\n /// (the dependencies are needed so that the main derive don't break the compilation when added)\n-const DEFAULT_DERIVE_COMPLETIONS: &[DeriveCompletion] = &[\n-    DeriveCompletion { label: \"Clone\", dependencies: &[] },\n-    DeriveCompletion { label: \"Copy\", dependencies: &[\"Clone\"] },\n-    DeriveCompletion { label: \"Debug\", dependencies: &[] },\n-    DeriveCompletion { label: \"Default\", dependencies: &[] },\n-    DeriveCompletion { label: \"Hash\", dependencies: &[] },\n-    DeriveCompletion { label: \"PartialEq\", dependencies: &[] },\n-    DeriveCompletion { label: \"Eq\", dependencies: &[\"PartialEq\"] },\n-    DeriveCompletion { label: \"PartialOrd\", dependencies: &[\"PartialEq\"] },\n-    DeriveCompletion { label: \"Ord\", dependencies: &[\"PartialOrd\", \"Eq\", \"PartialEq\"] },\n+const DEFAULT_DERIVE_COMPLETIONS: &[DeriveDependencies] = &[\n+    DeriveDependencies { label: \"Copy\", dependencies: &[\"Clone\"] },\n+    DeriveDependencies { label: \"Eq\", dependencies: &[\"PartialEq\"] },\n+    DeriveDependencies { label: \"Ord\", dependencies: &[\"PartialOrd\", \"Eq\", \"PartialEq\"] },\n+    DeriveDependencies { label: \"PartialOrd\", dependencies: &[\"PartialEq\"] },\n ];\n \n #[cfg(test)]\n@@ -94,6 +93,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[ignore] // FIXME: Fixtures cant test proc-macros/derives yet as we cant specify them in fixtures\n     fn empty_derive() {\n         check(\n             r#\"#[derive($0)] struct Test;\"#,\n@@ -112,6 +112,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[ignore] // FIXME: Fixtures cant test proc-macros/derives yet as we cant specify them in fixtures\n     fn derive_with_input() {\n         check(\n             r#\"#[derive(serde::Serialize, PartialEq, $0)] struct Test;\"#,\n@@ -129,6 +130,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[ignore] // FIXME: Fixtures cant test proc-macros/derives yet as we cant specify them in fixtures\n     fn derive_with_input2() {\n         check(\n             r#\"#[derive($0 serde::Serialize, PartialEq)] struct Test;\"#,"}, {"sha": "ca99e975926893aef79bbe75cee352f3da4c650d", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/752485083151de5cb6056289db74ffee6407a4ff/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/752485083151de5cb6056289db74ffee6407a4ff/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=752485083151de5cb6056289db74ffee6407a4ff", "patch": "@@ -24,7 +24,8 @@ pub(super) fn complete_lint(\n                 ctx.source_range(),\n                 lint_completion.label,\n             );\n-            item.kind(CompletionItemKind::Attribute).detail(lint_completion.description);\n+            item.kind(CompletionItemKind::Attribute)\n+                .documentation(hir::Documentation::new(lint_completion.description.to_owned()));\n             item.add_to(acc)\n         }\n     }\n@@ -61,4 +62,13 @@ mod tests {\n             r#\"#[allow(keyword_idents, deprecated)] struct Test;\"#,\n         )\n     }\n+\n+    #[test]\n+    fn check_feature() {\n+        check_edit(\n+            \"box_syntax\",\n+            r#\"#[feature(box_$0)] struct Test;\"#,\n+            r#\"#[feature(box_syntax)] struct Test;\"#,\n+        )\n+    }\n }"}]}