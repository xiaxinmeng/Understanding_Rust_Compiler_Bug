{"sha": "617535393bb5ccc7adf0bac8a3b9a9c306454e79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNzUzNTM5M2JiNWNjYzdhZGYwYmFjOGEzYjlhOWMzMDY0NTRlNzk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-25T21:18:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-25T21:18:57Z"}, "message": "Merge #8658\n\n8658: Check more carefully for cases where a rename can't be done r=Veykril a=dzhu\n\nAttempting to rename an element of a tuple field would previously replace the type with the new name, which doesn't make sense; now it fails instead.\n\nThe check is done in both `prepare_rename` and `rename` so that the case is caught before the user is prompted for a new name. Some other existing failure cases are also now additionally checked in `prepare_rename`.\n\nCloses: #8592\n\n(I threw in some doc edits for a relevant type; of course, I can remove those if the policy here is to be strict about scope of changes within a PR.)\n\nCo-authored-by: Danny Zhu <dzhu@dzhu.us>", "tree": {"sha": "c0271bccd902abfbbc429e186d208b9a92ca79db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0271bccd902abfbbc429e186d208b9a92ca79db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/617535393bb5ccc7adf0bac8a3b9a9c306454e79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghdzBCRBK7hj4Ov3rIwAAcCQIADI0slPoolio3lvibHVfSuIe\nuVi/cXvm9kOKIb97WP3e4FGoQPYdfAoY+KTrIlasUGGqjVKK2Zf0Tu60lLEbO3Eo\nRp34Zs3z8helAKMUKF3U/IiFkGfZkcavThi8VvATrYgiY2sRp+usWQXm1LhM4j9N\nPx62kqvce1wUbOjCvTsLsrvLHcluDVHxtUgrq28cw9V5W1LfY9R0tozt/SBhCb7a\n7+Q8bO/61wh4X+vqUYjT25rF75x7FNlQYRuZHf1b2c3rFaHSmlDodYO9+m9ug1Bk\nr+5eMp6zylEFERNyGnDgO4Jn9dGUvVupNhh91gBLvdxIM1RiBtQIPbq2D0TeWT8=\n=dD5z\n-----END PGP SIGNATURE-----\n", "payload": "tree c0271bccd902abfbbc429e186d208b9a92ca79db\nparent d8578bf9bf36708ca0095c77e2856c78ed3fd8ec\nparent 09fc5e1dd7f8635d111c12e745cf782fe3b58d95\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1619385537 +0000\ncommitter GitHub <noreply@github.com> 1619385537 +0000\n\nMerge #8658\n\n8658: Check more carefully for cases where a rename can't be done r=Veykril a=dzhu\n\nAttempting to rename an element of a tuple field would previously replace the type with the new name, which doesn't make sense; now it fails instead.\n\nThe check is done in both `prepare_rename` and `rename` so that the case is caught before the user is prompted for a new name. Some other existing failure cases are also now additionally checked in `prepare_rename`.\n\nCloses: #8592\n\n(I threw in some doc edits for a relevant type; of course, I can remove those if the policy here is to be strict about scope of changes within a PR.)\n\nCo-authored-by: Danny Zhu <dzhu@dzhu.us>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/617535393bb5ccc7adf0bac8a3b9a9c306454e79", "html_url": "https://github.com/rust-lang/rust/commit/617535393bb5ccc7adf0bac8a3b9a9c306454e79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/617535393bb5ccc7adf0bac8a3b9a9c306454e79/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8578bf9bf36708ca0095c77e2856c78ed3fd8ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8578bf9bf36708ca0095c77e2856c78ed3fd8ec", "html_url": "https://github.com/rust-lang/rust/commit/d8578bf9bf36708ca0095c77e2856c78ed3fd8ec"}, {"sha": "09fc5e1dd7f8635d111c12e745cf782fe3b58d95", "url": "https://api.github.com/repos/rust-lang/rust/commits/09fc5e1dd7f8635d111c12e745cf782fe3b58d95", "html_url": "https://github.com/rust-lang/rust/commit/09fc5e1dd7f8635d111c12e745cf782fe3b58d95"}], "stats": {"total": 111, "additions": 105, "deletions": 6}, "files": [{"sha": "2079c22a37e07144498b17470e9656e8380693bd", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/617535393bb5ccc7adf0bac8a3b9a9c306454e79/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/617535393bb5ccc7adf0bac8a3b9a9c306454e79/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=617535393bb5ccc7adf0bac8a3b9a9c306454e79", "patch": "@@ -20,7 +20,7 @@ use syntax::{\n \n use crate::FileSymbol;\n \n-/// `NavigationTarget` represents and element in the editor's UI which you can\n+/// `NavigationTarget` represents an element in the editor's UI which you can\n /// click on to navigate to a particular piece of code.\n ///\n /// Typically, a `NavigationTarget` corresponds to some element in the source\n@@ -35,12 +35,10 @@ pub struct NavigationTarget {\n     /// Clients should use this range to answer \"is the cursor inside the\n     /// element?\" question.\n     pub full_range: TextRange,\n-    /// A \"most interesting\" range withing the `full_range`.\n+    /// A \"most interesting\" range within the `full_range`.\n     ///\n     /// Typically, `full_range` is the whole syntax node, including doc\n-    /// comments, and `focus_range` is the range of the identifier. \"Most\n-    /// interesting\" range within the full range, typically the range of\n-    /// identifier.\n+    /// comments, and `focus_range` is the range of the identifier.\n     ///\n     /// Clients should place the cursor on this range when navigating to this target.\n     pub focus_range: Option<TextRange>,"}, {"sha": "175e7a31d897811c8831b07612caca6a83f7482a", "filename": "crates/ide/src/references/rename.rs", "status": "modified", "additions": 102, "deletions": 1, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/617535393bb5ccc7adf0bac8a3b9a9c306454e79/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/617535393bb5ccc7adf0bac8a3b9a9c306454e79/crates%2Fide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences%2Frename.rs?ref=617535393bb5ccc7adf0bac8a3b9a9c306454e79", "patch": "@@ -50,6 +50,17 @@ pub(crate) fn prepare_rename(\n     let sema = Semantics::new(db);\n     let source_file = sema.parse(position.file_id);\n     let syntax = source_file.syntax();\n+\n+    let def = find_definition(&sema, syntax, position)?;\n+    match def {\n+        Definition::SelfType(_) => bail!(\"Cannot rename `Self`\"),\n+        Definition::ModuleDef(ModuleDef::BuiltinType(_)) => bail!(\"Cannot rename builtin type\"),\n+        _ => {}\n+    };\n+    let nav =\n+        def.try_to_nav(sema.db).ok_or_else(|| format_err!(\"No references found at position\"))?;\n+    nav.focus_range.ok_or_else(|| format_err!(\"No identifier available to rename\"))?;\n+\n     let name_like = sema\n         .find_node_at_offset_with_descend(&syntax, position.offset)\n         .ok_or_else(|| format_err!(\"No references found at position\"))?;\n@@ -507,7 +518,8 @@ fn source_edit_from_def(\n         def.try_to_nav(sema.db).ok_or_else(|| format_err!(\"No references found at position\"))?;\n \n     let mut replacement_text = String::new();\n-    let mut repl_range = nav.focus_or_full_range();\n+    let mut repl_range =\n+        nav.focus_range.ok_or_else(|| format_err!(\"No identifier available to rename\"))?;\n     if let Definition::Local(local) = def {\n         if let Either::Left(pat) = local.source(sema.db).value {\n             if matches!(\n@@ -625,6 +637,49 @@ foo!(Foo$0);\",\n         check_prepare(r\"struct$0 Foo;\", expect![[r#\"No references found at position\"#]]);\n     }\n \n+    #[test]\n+    fn test_prepare_rename_tuple_field() {\n+        check_prepare(\n+            r#\"\n+struct Foo(i32);\n+\n+fn baz() {\n+    let mut x = Foo(4);\n+    x.0$0 = 5;\n+}\n+\"#,\n+            expect![[r#\"No identifier available to rename\"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_prepare_rename_builtin() {\n+        check_prepare(\n+            r#\"\n+fn foo() {\n+    let x: i32$0 = 0;\n+}\n+\"#,\n+            expect![[r#\"Cannot rename builtin type\"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_prepare_rename_self() {\n+        check_prepare(\n+            r#\"\n+struct Foo {}\n+\n+impl Foo {\n+    fn foo(self) -> Self$0 {\n+        self\n+    }\n+}\n+\"#,\n+            expect![[r#\"Cannot rename `Self`\"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_rename_to_underscore() {\n         check(\"_\", r#\"fn main() { let i$0 = 1; }\"#, r#\"fn main() { let _ = 1; }\"#);\n@@ -1787,4 +1842,50 @@ fn foo() {\n \"#,\n         )\n     }\n+\n+    #[test]\n+    fn test_rename_tuple_field() {\n+        check(\n+            \"foo\",\n+            r#\"\n+struct Foo(i32);\n+\n+fn baz() {\n+    let mut x = Foo(4);\n+    x.0$0 = 5;\n+}\n+\"#,\n+            \"error: No identifier available to rename\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_rename_builtin() {\n+        check(\n+            \"foo\",\n+            r#\"\n+fn foo() {\n+    let x: i32$0 = 0;\n+}\n+\"#,\n+            \"error: Cannot rename builtin type\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_rename_self() {\n+        check(\n+            \"foo\",\n+            r#\"\n+struct Foo {}\n+\n+impl Foo {\n+    fn foo(self) -> Self$0 {\n+        self\n+    }\n+}\n+\"#,\n+            \"error: Cannot rename `Self`\",\n+        );\n+    }\n }"}]}