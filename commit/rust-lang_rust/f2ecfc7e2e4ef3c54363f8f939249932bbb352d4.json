{"sha": "f2ecfc7e2e4ef3c54363f8f939249932bbb352d4", "node_id": "C_kwDOAAsO6NoAKGYyZWNmYzdlMmU0ZWYzYzU0MzYzZjhmOTM5MjQ5OTMyYmJiMzUyZDQ", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T21:18:52Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-03T21:18:52Z"}, "message": "rustdoc: Rename bounds to bindings where appropriate", "tree": {"sha": "0fc76fde09a9654fca9333d5192ae0879d6cd1b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fc76fde09a9654fca9333d5192ae0879d6cd1b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2ecfc7e2e4ef3c54363f8f939249932bbb352d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ecfc7e2e4ef3c54363f8f939249932bbb352d4", "html_url": "https://github.com/rust-lang/rust/commit/f2ecfc7e2e4ef3c54363f8f939249932bbb352d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2ecfc7e2e4ef3c54363f8f939249932bbb352d4/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff2439b7b9bafcfdff86b7847128014699df8442", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2439b7b9bafcfdff86b7847128014699df8442", "html_url": "https://github.com/rust-lang/rust/commit/ff2439b7b9bafcfdff86b7847128014699df8442"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "3267e30871069505499908079aa1ad88d99a7c5d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2ecfc7e2e4ef3c54363f8f939249932bbb352d4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2ecfc7e2e4ef3c54363f8f939249932bbb352d4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f2ecfc7e2e4ef3c54363f8f939249932bbb352d4", "patch": "@@ -119,7 +119,7 @@ impl Clean<GenericBound> for hir::GenericBound<'_> {\n \n impl Clean<Path> for (ty::TraitRef<'_>, &[TypeBinding]) {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Path {\n-        let (trait_ref, bounds) = *self;\n+        let (trait_ref, bindings) = *self;\n         let kind = cx.tcx.def_kind(trait_ref.def_id).into();\n         if !matches!(kind, ItemType::Trait | ItemType::TraitAlias) {\n             span_bug!(\n@@ -129,7 +129,7 @@ impl Clean<Path> for (ty::TraitRef<'_>, &[TypeBinding]) {\n             );\n         }\n         inline::record_extern_fqn(cx, trait_ref.def_id, kind);\n-        let path = external_path(cx, trait_ref.def_id, true, bounds.to_vec(), trait_ref.substs);\n+        let path = external_path(cx, trait_ref.def_id, true, bindings.to_vec(), trait_ref.substs);\n \n         debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", trait_ref.substs);\n \n@@ -145,7 +145,7 @@ impl Clean<Path> for ty::TraitRef<'tcx> {\n \n impl Clean<GenericBound> for (ty::PolyTraitRef<'_>, &[TypeBinding]) {\n     fn clean(&self, cx: &mut DocContext<'_>) -> GenericBound {\n-        let (poly_trait_ref, bounds) = *self;\n+        let (poly_trait_ref, bindings) = *self;\n         let poly_trait_ref = poly_trait_ref.lift_to_tcx(cx.tcx).unwrap();\n \n         // collect any late bound regions\n@@ -164,7 +164,7 @@ impl Clean<GenericBound> for (ty::PolyTraitRef<'_>, &[TypeBinding]) {\n \n         GenericBound::TraitBound(\n             PolyTrait {\n-                trait_: (poly_trait_ref.skip_binder(), bounds).clean(cx),\n+                trait_: (poly_trait_ref.skip_binder(), bindings).clean(cx),\n                 generic_params: late_bound_regions,\n             },\n             hir::TraitBoundModifier::None,"}]}