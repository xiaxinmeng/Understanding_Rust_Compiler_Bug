{"sha": "ad55481043d780d341ee526a0902e080646aae4f", "node_id": "C_kwDOAAsO6NoAKGFkNTU0ODEwNDNkNzgwZDM0MWVlNTI2YTA5MDJlMDgwNjQ2YWFlNGY", "commit": {"author": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-06-05T13:23:06Z"}, "committer": {"name": "Yoshiki Matsuda", "email": "myskjp@gmail.com", "date": "2022-07-02T13:54:37Z"}, "message": "add some comments for encode_and_write_metadata", "tree": {"sha": "974987894f5dbea838f3aaa247f99b1bfa64d2ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/974987894f5dbea838f3aaa247f99b1bfa64d2ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad55481043d780d341ee526a0902e080646aae4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad55481043d780d341ee526a0902e080646aae4f", "html_url": "https://github.com/rust-lang/rust/commit/ad55481043d780d341ee526a0902e080646aae4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad55481043d780d341ee526a0902e080646aae4f/comments", "author": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ysk", "id": 47472854, "node_id": "MDQ6VXNlcjQ3NDcyODU0", "avatar_url": "https://avatars.githubusercontent.com/u/47472854?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ysk", "html_url": "https://github.com/m-ysk", "followers_url": "https://api.github.com/users/m-ysk/followers", "following_url": "https://api.github.com/users/m-ysk/following{/other_user}", "gists_url": "https://api.github.com/users/m-ysk/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ysk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ysk/subscriptions", "organizations_url": "https://api.github.com/users/m-ysk/orgs", "repos_url": "https://api.github.com/users/m-ysk/repos", "events_url": "https://api.github.com/users/m-ysk/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ysk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63dec941e1fb1a70e7dba9043e92a856cf7cd01a", "url": "https://api.github.com/repos/rust-lang/rust/commits/63dec941e1fb1a70e7dba9043e92a856cf7cd01a", "html_url": "https://github.com/rust-lang/rust/commit/63dec941e1fb1a70e7dba9043e92a856cf7cd01a"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "7661eec7006b3e430d13ef26791261d51e7d3872", "filename": "compiler/rustc_metadata/src/fs.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad55481043d780d341ee526a0902e080646aae4f/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad55481043d780d341ee526a0902e080646aae4f/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ffs.rs?ref=ad55481043d780d341ee526a0902e080646aae4f", "patch": "@@ -69,6 +69,8 @@ pub fn encode_and_write_metadata(\n     let metadata_tmpdir = MaybeTempDir::new(metadata_tmpdir, tcx.sess.opts.cg.save_temps);\n     let metadata_filename = metadata_tmpdir.as_ref().join(METADATA_FILENAME);\n \n+    // Always create a file at `metadata_filename`, even if we have nothing to write to it.\n+    // This simplifies the creation of the output `out_filename` when requested.\n     match metadata_kind {\n         MetadataKind::None => {\n             std::fs::File::create(&metadata_filename).unwrap_or_else(|e| {\n@@ -86,6 +88,9 @@ pub fn encode_and_write_metadata(\n \n     let _prof_timer = tcx.sess.prof.generic_activity(\"write_crate_metadata\");\n \n+    // If the user requests metadata as output, rename `metadata_filename`\n+    // to the expected output `out_filename`.  The match above should ensure\n+    // this file always exists.\n     let need_metadata_file = tcx.sess.opts.output_types.contains_key(&OutputType::Metadata);\n     let (metadata_filename, metadata_tmpdir) = if need_metadata_file {\n         if let Err(e) = non_durable_rename(&metadata_filename, &out_filename) {\n@@ -102,6 +107,7 @@ pub fn encode_and_write_metadata(\n         (metadata_filename, Some(metadata_tmpdir))\n     };\n \n+    // Load metadata back to memory: codegen may need to include it in object files.\n     let metadata =\n         EncodedMetadata::from_path(metadata_filename, metadata_tmpdir).unwrap_or_else(|e| {\n             tcx.sess.fatal(&format!(\"failed to create encoded metadata from file: {}\", e))"}]}