{"sha": "b4d739ef1285bc983383ec726314d9455f6bfb77", "node_id": "C_kwDOAAsO6NoAKGI0ZDczOWVmMTI4NWJjOTgzMzgzZWM3MjYzMTRkOTQ1NWY2YmZiNzc", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-18T19:53:08Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-12-18T19:53:08Z"}, "message": "Use `#[derive]` instead of custom syntax in all `newtype_index`", "tree": {"sha": "52fd9101c6bc8743f509d400072f36cad0859884", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52fd9101c6bc8743f509d400072f36cad0859884"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4d739ef1285bc983383ec726314d9455f6bfb77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d739ef1285bc983383ec726314d9455f6bfb77", "html_url": "https://github.com/rust-lang/rust/commit/b4d739ef1285bc983383ec726314d9455f6bfb77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4d739ef1285bc983383ec726314d9455f6bfb77/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37efc8107293edb5970551920ba1128240b87c68", "url": "https://api.github.com/repos/rust-lang/rust/commits/37efc8107293edb5970551920ba1128240b87c68", "html_url": "https://github.com/rust-lang/rust/commit/37efc8107293edb5970551920ba1128240b87c68"}], "stats": {"total": 40, "additions": 14, "deletions": 26}, "files": [{"sha": "46f5ead5942bb82e7dc4a4284d7f9dde6255e596", "filename": "compiler/rustc_macros/src/newtype.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4d739ef1285bc983383ec726314d9455f6bfb77/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d739ef1285bc983383ec726314d9455f6bfb77/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs?ref=b4d739ef1285bc983383ec726314d9455f6bfb77", "patch": "@@ -1,11 +1,9 @@\n use proc_macro2::{Span, TokenStream};\n use quote::quote;\n use syn::parse::*;\n-use syn::punctuated::Punctuated;\n use syn::*;\n \n mod kw {\n-    syn::custom_keyword!(derive);\n     syn::custom_keyword!(DEBUG_FORMAT);\n     syn::custom_keyword!(MAX);\n     syn::custom_keyword!(ENCODABLE);\n@@ -57,16 +55,6 @@ impl Parse for Newtype {\n             body.parse::<Token![..]>()?;\n         } else {\n             loop {\n-                if body.lookahead1().peek(kw::derive) {\n-                    body.parse::<kw::derive>()?;\n-                    let derives;\n-                    bracketed!(derives in body);\n-                    let derives: Punctuated<Path, Token![,]> =\n-                        derives.parse_terminated(Path::parse)?;\n-                    try_comma()?;\n-                    derive_paths.extend(derives);\n-                    continue;\n-                }\n                 if body.lookahead1().peek(kw::DEBUG_FORMAT) {\n                     body.parse::<kw::DEBUG_FORMAT>()?;\n                     body.parse::<Token![=]>()?;"}, {"sha": "dfe71dc9257704f7dce2f6913a8ce6ebe137c351", "filename": "compiler/rustc_middle/src/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4d739ef1285bc983383ec726314d9455f6bfb77/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d739ef1285bc983383ec726314d9455f6bfb77/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fregion.rs?ref=b4d739ef1285bc983383ec726314d9455f6bfb77", "patch": "@@ -147,8 +147,8 @@ rustc_index::newtype_index! {\n     ///\n     /// * The subscope with `first_statement_index == 1` is scope of `c`,\n     ///   and thus does not include EXPR_2, but covers the `...`.\n+    #[derive(HashStable)]\n     pub struct FirstStatementIndex {\n-        derive [HashStable]\n     }\n }\n "}, {"sha": "173c8967eec8a9d93a205b81ccb9b032b17e732e", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4d739ef1285bc983383ec726314d9455f6bfb77/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d739ef1285bc983383ec726314d9455f6bfb77/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=b4d739ef1285bc983383ec726314d9455f6bfb77", "patch": "@@ -10,8 +10,8 @@ rustc_index::newtype_index! {\n     /// CounterValueReference.as_u32() (which ascend from 1) or an ExpressionOperandId.as_u32()\n     /// (which _*descend*_ from u32::MAX). Id value `0` (zero) represents a virtual counter with a\n     /// constant value of `0`.\n+    #[derive(HashStable)]\n     pub struct ExpressionOperandId {\n-        derive [HashStable]\n         DEBUG_FORMAT = \"ExpressionOperandId({})\",\n         MAX = 0xFFFF_FFFF,\n     }\n@@ -32,8 +32,8 @@ impl ExpressionOperandId {\n }\n \n rustc_index::newtype_index! {\n+    #[derive(HashStable)]\n     pub struct CounterValueReference {\n-        derive [HashStable]\n         DEBUG_FORMAT = \"CounterValueReference({})\",\n         MAX = 0xFFFF_FFFF,\n     }\n@@ -56,8 +56,8 @@ rustc_index::newtype_index! {\n     /// InjectedExpressionId.as_u32() converts to ExpressionOperandId.as_u32()\n     ///\n     /// Values descend from u32::MAX.\n+    #[derive(HashStable)]\n     pub struct InjectedExpressionId {\n-        derive [HashStable]\n         DEBUG_FORMAT = \"InjectedExpressionId({})\",\n         MAX = 0xFFFF_FFFF,\n     }\n@@ -67,8 +67,8 @@ rustc_index::newtype_index! {\n     /// InjectedExpressionIndex.as_u32() translates to u32::MAX - ExpressionOperandId.as_u32()\n     ///\n     /// Values ascend from 0.\n+    #[derive(HashStable)]\n     pub struct InjectedExpressionIndex {\n-        derive [HashStable]\n         DEBUG_FORMAT = \"InjectedExpressionIndex({})\",\n         MAX = 0xFFFF_FFFF,\n     }\n@@ -78,8 +78,8 @@ rustc_index::newtype_index! {\n     /// MappedExpressionIndex values ascend from zero, and are recalculated indexes based on their\n     /// array position in the LLVM coverage map \"Expressions\" array, which is assembled during the\n     /// \"mapgen\" process. They cannot be computed algorithmically, from the other `newtype_index`s.\n+    #[derive(HashStable)]\n     pub struct MappedExpressionIndex {\n-        derive [HashStable]\n         DEBUG_FORMAT = \"MappedExpressionIndex({})\",\n         MAX = 0xFFFF_FFFF,\n     }"}, {"sha": "0b4fc253fef86cdfefc8713edda90f93ccc4061c", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b4d739ef1285bc983383ec726314d9455f6bfb77/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d739ef1285bc983383ec726314d9455f6bfb77/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=b4d739ef1285bc983383ec726314d9455f6bfb77", "patch": "@@ -654,8 +654,8 @@ impl SourceInfo {\n // Variables and temps\n \n rustc_index::newtype_index! {\n+    #[derive(HashStable)]\n     pub struct Local {\n-        derive [HashStable]\n         DEBUG_FORMAT = \"_{}\",\n         const RETURN_PLACE = 0,\n     }\n@@ -1146,8 +1146,8 @@ rustc_index::newtype_index! {\n     ///     https://rustc-dev-guide.rust-lang.org/appendix/background.html#what-is-a-dataflow-analysis\n     /// [`CriticalCallEdges`]: ../../rustc_const_eval/transform/add_call_guards/enum.AddCallGuards.html#variant.CriticalCallEdges\n     /// [guide-mir]: https://rustc-dev-guide.rust-lang.org/mir/\n+    #[derive(HashStable)]\n     pub struct BasicBlock {\n-        derive [HashStable]\n         DEBUG_FORMAT = \"bb{}\",\n         const START_BLOCK = 0,\n     }\n@@ -1530,8 +1530,8 @@ rustc_index::newtype_index! {\n     /// [wrapper]: https://rustc-dev-guide.rust-lang.org/appendix/glossary.html#newtype\n     /// [CFG]: https://rustc-dev-guide.rust-lang.org/appendix/background.html#cfg\n     /// [mir-datatypes]: https://rustc-dev-guide.rust-lang.org/mir/index.html#mir-data-types\n+    #[derive(HashStable)]\n     pub struct Field {\n-        derive [HashStable]\n         DEBUG_FORMAT = \"field[{}]\"\n     }\n }\n@@ -1757,8 +1757,8 @@ impl Debug for Place<'_> {\n // Scopes\n \n rustc_index::newtype_index! {\n+    #[derive(HashStable)]\n     pub struct SourceScope {\n-        derive [HashStable]\n         DEBUG_FORMAT = \"scope[{}]\",\n         const OUTERMOST_SOURCE_SCOPE = 0,\n     }\n@@ -2755,8 +2755,8 @@ impl<'tcx> TypeVisitable<'tcx> for UserTypeProjection {\n }\n \n rustc_index::newtype_index! {\n+    #[derive(HashStable)]\n     pub struct Promoted {\n-        derive [HashStable]\n         DEBUG_FORMAT = \"promoted[{}]\"\n     }\n }"}, {"sha": "4db3ded34ead56c492a8ff43375dc71df03c2886", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4d739ef1285bc983383ec726314d9455f6bfb77/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d739ef1285bc983383ec726314d9455f6bfb77/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=b4d739ef1285bc983383ec726314d9455f6bfb77", "patch": "@@ -130,8 +130,8 @@ pub struct UnsafetyCheckResult {\n }\n \n rustc_index::newtype_index! {\n+    #[derive(HashStable)]\n     pub struct GeneratorSavedLocal {\n-        derive [HashStable]\n         DEBUG_FORMAT = \"_{}\",\n     }\n }"}, {"sha": "1a8927558c9d7a1f25c9981b43bea3f5227cad6c", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4d739ef1285bc983383ec726314d9455f6bfb77/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d739ef1285bc983383ec726314d9455f6bfb77/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=b4d739ef1285bc983383ec726314d9455f6bfb77", "patch": "@@ -608,8 +608,8 @@ impl<'a, V> LocalTableInContextMut<'a, V> {\n }\n \n rustc_index::newtype_index! {\n+    #[derive(HashStable)]\n     pub struct UserTypeAnnotationIndex {\n-        derive [HashStable]\n         DEBUG_FORMAT = \"UserType({})\",\n         const START_INDEX = 0,\n     }"}, {"sha": "c60de3cb0b2b73d6cffc60bdda9dca03fc8ad99c", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4d739ef1285bc983383ec726314d9455f6bfb77/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d739ef1285bc983383ec726314d9455f6bfb77/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=b4d739ef1285bc983383ec726314d9455f6bfb77", "patch": "@@ -20,8 +20,8 @@ impl ToJson for Endian {\n }\n \n rustc_index::newtype_index! {\n+    #[derive(HashStable_Generic)]\n     pub struct VariantIdx {\n-        derive [HashStable_Generic]\n     }\n }\n "}]}