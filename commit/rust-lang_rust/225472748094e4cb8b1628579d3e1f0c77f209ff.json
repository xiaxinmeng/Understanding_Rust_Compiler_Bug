{"sha": "225472748094e4cb8b1628579d3e1f0c77f209ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNTQ3Mjc0ODA5NGU0Y2I4YjE2Mjg1NzlkM2UxZjBjNzdmMjA5ZmY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-08T01:13:38Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-01T22:10:05Z"}, "message": "Add `ConstError`\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "e6abbc5df965365b95756dbaf7053174c04376fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6abbc5df965365b95756dbaf7053174c04376fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/225472748094e4cb8b1628579d3e1f0c77f209ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/225472748094e4cb8b1628579d3e1f0c77f209ff", "html_url": "https://github.com/rust-lang/rust/commit/225472748094e4cb8b1628579d3e1f0c77f209ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/225472748094e4cb8b1628579d3e1f0c77f209ff/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cafa10d96eae5f0cd20d835f100c1c10d256abe1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cafa10d96eae5f0cd20d835f100c1c10d256abe1", "html_url": "https://github.com/rust-lang/rust/commit/cafa10d96eae5f0cd20d835f100c1c10d256abe1"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "5e3718b73bfd85d52a39af5bbbc800da41c64c68", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/225472748094e4cb8b1628579d3e1f0c77f209ff/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225472748094e4cb8b1628579d3e1f0c77f209ff/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=225472748094e4cb8b1628579d3e1f0c77f209ff", "patch": "@@ -44,6 +44,14 @@ pub enum TypeError<'tcx> {\n     ProjectionMismatched(ExpectedFound<DefId>),\n     ProjectionBoundsLength(ExpectedFound<usize>),\n     ExistentialMismatch(ExpectedFound<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>),\n+\n+    ConstError(ConstError<'tcx>),\n+}\n+\n+// Data structure used in const unification\n+#[derive(Clone, Debug)]\n+pub enum ConstError<'tcx> {\n+    Mismatch(ExpectedFound<&'tcx ty::LazyConst<'tcx>>),\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Debug, Copy)]\n@@ -163,6 +171,21 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                 report_maybe_different(f, &format!(\"trait `{}`\", values.expected),\n                                        &format!(\"trait `{}`\", values.found))\n             }\n+            ConstError(ref err) => {\n+                write!(f, \"{}\", err)\n+            }\n+        }\n+    }\n+}\n+\n+impl<'tcx> fmt::Display for ConstError<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        use self::ConstError::*;\n+\n+        match *self {\n+            Mismatch(ref values) => {\n+                write!(f, \"expected `{:?}`, found `{:?}`\", values.expected, values.found)\n+            }\n         }\n     }\n }"}, {"sha": "548339ee687635474cc7b47dd3b61ba76eda00a9", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/225472748094e4cb8b1628579d3e1f0c77f209ff/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/225472748094e4cb8b1628579d3e1f0c77f209ff/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=225472748094e4cb8b1628579d3e1f0c77f209ff", "patch": "@@ -737,11 +737,23 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             ProjectionMismatched(x) => ProjectionMismatched(x),\n             ProjectionBoundsLength(x) => ProjectionBoundsLength(x),\n             Sorts(ref x) => return tcx.lift(x).map(Sorts),\n-            ExistentialMismatch(ref x) => return tcx.lift(x).map(ExistentialMismatch)\n+            ExistentialMismatch(ref x) => return tcx.lift(x).map(ExistentialMismatch),\n+            ConstError(ref x) => return tcx.lift(x).map(ConstError),\n         })\n     }\n }\n \n+impl<'a, 'tcx> Lift<'tcx> for ty::error::ConstError<'a> {\n+    type Lifted = ty::error::ConstError<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        use ty::error::ConstError::*;\n+\n+        match *self {\n+            Mismatch(ref x) => return tcx.lift(x).map(Mismatch),\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> Lift<'tcx> for ty::InstanceDef<'a> {\n     type Lifted = ty::InstanceDef<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n@@ -1320,6 +1332,13 @@ EnumTypeFoldableImpl! {\n         (ty::error::TypeError::ProjectionBoundsLength)(x),\n         (ty::error::TypeError::Sorts)(x),\n         (ty::error::TypeError::ExistentialMismatch)(x),\n+        (ty::error::TypeError::ConstError)(x),\n+    }\n+}\n+\n+EnumTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for ty::error::ConstError<'tcx> {\n+        (ty::error::ConstError::Mismatch)(x),\n     }\n }\n "}]}