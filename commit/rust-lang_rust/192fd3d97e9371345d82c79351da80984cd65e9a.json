{"sha": "192fd3d97e9371345d82c79351da80984cd65e9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MmZkM2Q5N2U5MzcxMzQ1ZDgyYzc5MzUxZGE4MDk4NGNkNjVlOWE=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-16T17:14:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-20T07:19:37Z"}, "message": "Move stack and stack_mut implementation in Machine to match their position in the trait.", "tree": {"sha": "d85b159df8f99af848dba7d3732ba1d27cb6c537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d85b159df8f99af848dba7d3732ba1d27cb6c537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/192fd3d97e9371345d82c79351da80984cd65e9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/192fd3d97e9371345d82c79351da80984cd65e9a", "html_url": "https://github.com/rust-lang/rust/commit/192fd3d97e9371345d82c79351da80984cd65e9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/192fd3d97e9371345d82c79351da80984cd65e9a/comments", "author": null, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5224c72403fd4f5cbbfd574c9a18fed5678c7488", "url": "https://api.github.com/repos/rust-lang/rust/commits/5224c72403fd4f5cbbfd574c9a18fed5678c7488", "html_url": "https://github.com/rust-lang/rust/commit/5224c72403fd4f5cbbfd574c9a18fed5678c7488"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "2ab5f10af66d87e4689c5aaa7f822390ece8b35a", "filename": "src/machine.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/192fd3d97e9371345d82c79351da80984cd65e9a/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192fd3d97e9371345d82c79351da80984cd65e9a/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=192fd3d97e9371345d82c79351da80984cd65e9a", "patch": "@@ -326,20 +326,6 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         memory_extra.check_alignment\n     }\n \n-    #[inline(always)]\n-    fn stack<'a>(\n-        ecx: &'a InterpCx<'mir, 'tcx, Self>,\n-    ) -> &'a [Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>] {\n-        &ecx.machine.stack\n-    }\n-\n-    #[inline(always)]\n-    fn stack_mut<'a>(\n-        ecx: &'a mut InterpCx<'mir, 'tcx, Self>,\n-    ) -> &'a mut Vec<Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>> {\n-        &mut ecx.machine.stack\n-    }\n-\n     #[inline(always)]\n     fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {\n         ecx.machine.validate\n@@ -539,6 +525,20 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         Ok(frame.with_extra(extra))\n     }\n \n+    #[inline(always)]\n+    fn stack<'a>(\n+        ecx: &'a InterpCx<'mir, 'tcx, Self>,\n+    ) -> &'a [Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>] {\n+        &ecx.machine.stack\n+    }\n+\n+    #[inline(always)]\n+    fn stack_mut<'a>(\n+        ecx: &'a mut InterpCx<'mir, 'tcx, Self>,\n+    ) -> &'a mut Vec<Frame<'mir, 'tcx, Self::PointerTag, Self::FrameExtra>> {\n+        &mut ecx.machine.stack\n+    }\n+\n     #[inline(always)]\n     fn after_stack_push(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         if ecx.memory.extra.stacked_borrows.is_some() {"}]}