{"sha": "f46b888f73d66149f1abe424489722283f60d6e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NmI4ODhmNzNkNjYxNDlmMWFiZTQyNDQ4OTcyMjI4M2Y2MGQ2ZTE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-05-14T12:27:45Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-05-14T12:27:45Z"}, "message": "Remove LazyBTreeMap.\n\nIt was introduced in #50240 to avoid an allocation when creating a new\nBTreeMap, which gave some speed-ups. But then #50352 made that the\ndefault behaviour for BTreeMap, so LazyBTreeMap is no longer necessary.", "tree": {"sha": "19c3db5f16c924c5a79748c26806a5df347bcb37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19c3db5f16c924c5a79748c26806a5df347bcb37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f46b888f73d66149f1abe424489722283f60d6e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f46b888f73d66149f1abe424489722283f60d6e1", "html_url": "https://github.com/rust-lang/rust/commit/f46b888f73d66149f1abe424489722283f60d6e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f46b888f73d66149f1abe424489722283f60d6e1/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fc409ed0938cd2f501642abcaa675977fa5035a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fc409ed0938cd2f501642abcaa675977fa5035a", "html_url": "https://github.com/rust-lang/rust/commit/6fc409ed0938cd2f501642abcaa675977fa5035a"}], "stats": {"total": 135, "additions": 12, "deletions": 123}, "files": [{"sha": "acd5c44c1a4d807a71d5cab62a86a116b0dc0650", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f46b888f73d66149f1abe424489722283f60d6e1/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46b888f73d66149f1abe424489722283f60d6e1/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=f46b888f73d66149f1abe424489722283f60d6e1", "patch": "@@ -19,10 +19,10 @@ use super::{CombinedSnapshot,\n use super::combine::CombineFields;\n use super::region_constraints::{TaintDirections};\n \n-use rustc_data_structures::lazy_btree_map::LazyBTreeMap;\n use ty::{self, TyCtxt, Binder, TypeFoldable};\n use ty::error::TypeError;\n use ty::relate::{Relate, RelateResult, TypeRelation};\n+use std::collections::BTreeMap;\n use syntax_pos::Span;\n use util::nodemap::{FxHashMap, FxHashSet};\n \n@@ -247,8 +247,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n                                              snapshot: &CombinedSnapshot<'a, 'tcx>,\n                                              debruijn: ty::DebruijnIndex,\n                                              new_vars: &[ty::RegionVid],\n-                                             a_map: &LazyBTreeMap<ty::BoundRegion,\n-                                                                  ty::Region<'tcx>>,\n+                                             a_map: &BTreeMap<ty::BoundRegion, ty::Region<'tcx>>,\n                                              r0: ty::Region<'tcx>)\n                                              -> ty::Region<'tcx> {\n             // Regions that pre-dated the LUB computation stay as they are.\n@@ -344,8 +343,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n                                              snapshot: &CombinedSnapshot<'a, 'tcx>,\n                                              debruijn: ty::DebruijnIndex,\n                                              new_vars: &[ty::RegionVid],\n-                                             a_map: &LazyBTreeMap<ty::BoundRegion,\n-                                                                  ty::Region<'tcx>>,\n+                                             a_map: &BTreeMap<ty::BoundRegion, ty::Region<'tcx>>,\n                                              a_vars: &[ty::RegionVid],\n                                              b_vars: &[ty::RegionVid],\n                                              r0: ty::Region<'tcx>)\n@@ -414,7 +412,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n \n         fn rev_lookup<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                       span: Span,\n-                                      a_map: &LazyBTreeMap<ty::BoundRegion, ty::Region<'tcx>>,\n+                                      a_map: &BTreeMap<ty::BoundRegion, ty::Region<'tcx>>,\n                                       r: ty::Region<'tcx>) -> ty::Region<'tcx>\n         {\n             for (a_br, a_r) in a_map {\n@@ -437,7 +435,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n }\n \n fn var_ids<'a, 'gcx, 'tcx>(fields: &CombineFields<'a, 'gcx, 'tcx>,\n-                           map: &LazyBTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n+                           map: &BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n                            -> Vec<ty::RegionVid> {\n     map.iter()\n        .map(|(_, &r)| match *r {"}, {"sha": "b72a25dec273b7799554c85632e0dbc21b1185ba", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f46b888f73d66149f1abe424489722283f60d6e1/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46b888f73d66149f1abe424489722283f60d6e1/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=f46b888f73d66149f1abe424489722283f60d6e1", "patch": "@@ -28,9 +28,9 @@ use ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use ty::fold::TypeFoldable;\n use ty::relate::RelateResult;\n use traits::{self, ObligationCause, PredicateObligations};\n-use rustc_data_structures::lazy_btree_map::LazyBTreeMap;\n use rustc_data_structures::unify as ut;\n use std::cell::{Cell, RefCell, Ref, RefMut};\n+use std::collections::BTreeMap;\n use std::fmt;\n use syntax::ast;\n use errors::DiagnosticBuilder;\n@@ -198,7 +198,7 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n \n /// A map returned by `skolemize_late_bound_regions()` indicating the skolemized\n /// region that each late-bound region was replaced with.\n-pub type SkolemizationMap<'tcx> = LazyBTreeMap<ty::BoundRegion, ty::Region<'tcx>>;\n+pub type SkolemizationMap<'tcx> = BTreeMap<ty::BoundRegion, ty::Region<'tcx>>;\n \n /// See `error_reporting` module for more details\n #[derive(Clone, Debug)]\n@@ -1236,7 +1236,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         span: Span,\n         lbrct: LateBoundRegionConversionTime,\n         value: &ty::Binder<T>)\n-        -> (T, LazyBTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n+        -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n         where T : TypeFoldable<'tcx>\n     {\n         self.tcx.replace_late_bound_regions("}, {"sha": "42adc82f48e5db01e052488759449164f8093596", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f46b888f73d66149f1abe424489722283f60d6e1/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46b888f73d66149f1abe424489722283f60d6e1/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=f46b888f73d66149f1abe424489722283f60d6e1", "patch": "@@ -43,7 +43,7 @@ use middle::const_val::ConstVal;\n use hir::def_id::DefId;\n use ty::{self, Binder, Ty, TyCtxt, TypeFlags};\n \n-use rustc_data_structures::lazy_btree_map::LazyBTreeMap;\n+use std::collections::BTreeMap;\n use std::fmt;\n use util::nodemap::FxHashSet;\n \n@@ -328,7 +328,7 @@ struct RegionReplacer<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     current_depth: u32,\n     fld_r: &'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a),\n-    map: LazyBTreeMap<ty::BoundRegion, ty::Region<'tcx>>\n+    map: BTreeMap<ty::BoundRegion, ty::Region<'tcx>>\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n@@ -343,7 +343,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn replace_late_bound_regions<T,F>(self,\n         value: &Binder<T>,\n         mut f: F)\n-        -> (T, LazyBTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n+        -> (T, BTreeMap<ty::BoundRegion, ty::Region<'tcx>>)\n         where F : FnMut(ty::BoundRegion) -> ty::Region<'tcx>,\n               T : TypeFoldable<'tcx>,\n     {\n@@ -456,7 +456,7 @@ impl<'a, 'gcx, 'tcx> RegionReplacer<'a, 'gcx, 'tcx> {\n             tcx,\n             current_depth: 1,\n             fld_r,\n-            map: LazyBTreeMap::default()\n+            map: BTreeMap::default()\n         }\n     }\n }"}, {"sha": "74f91af10fe637888342d6a7c39407a3e239cd3e", "filename": "src/librustc_data_structures/lazy_btree_map.rs", "status": "removed", "additions": 0, "deletions": 108, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/6fc409ed0938cd2f501642abcaa675977fa5035a/src%2Flibrustc_data_structures%2Flazy_btree_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fc409ed0938cd2f501642abcaa675977fa5035a/src%2Flibrustc_data_structures%2Flazy_btree_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flazy_btree_map.rs?ref=6fc409ed0938cd2f501642abcaa675977fa5035a", "patch": "@@ -1,108 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use std::collections::btree_map;\n-use std::collections::BTreeMap;\n-\n-/// A thin wrapper around BTreeMap that avoids allocating upon creation.\n-///\n-/// Vec, HashSet and HashMap all have the nice feature that they don't do any\n-/// heap allocation when creating a new structure of the default size. In\n-/// contrast, BTreeMap *does* allocate in that situation. The compiler uses\n-/// B-Tree maps in some places such that many maps are created but few are\n-/// inserted into, so having a BTreeMap alternative that avoids allocating on\n-/// creation is a performance win.\n-///\n-/// Only a fraction of BTreeMap's functionality is currently supported.\n-/// Additional functionality should be added on demand.\n-#[derive(Debug)]\n-pub struct LazyBTreeMap<K, V>(Option<BTreeMap<K, V>>);\n-\n-impl<K, V> LazyBTreeMap<K, V> {\n-    pub fn new() -> LazyBTreeMap<K, V> {\n-        LazyBTreeMap(None)\n-    }\n-\n-    pub fn iter(&self) -> Iter<K, V> {\n-        Iter(self.0.as_ref().map(|btm| btm.iter()))\n-    }\n-\n-    pub fn is_empty(&self) -> bool {\n-        self.0.as_ref().map_or(true, |btm| btm.is_empty())\n-    }\n-}\n-\n-impl<K: Ord, V> LazyBTreeMap<K, V> {\n-    fn instantiate(&mut self) -> &mut BTreeMap<K, V> {\n-        if let Some(ref mut btm) = self.0 {\n-            btm\n-        } else {\n-            let btm = BTreeMap::new();\n-            self.0 = Some(btm);\n-            self.0.as_mut().unwrap()\n-        }\n-    }\n-\n-    pub fn insert(&mut self, key: K, value: V) -> Option<V> {\n-        self.instantiate().insert(key, value)\n-    }\n-\n-    pub fn entry(&mut self, key: K) -> btree_map::Entry<K, V> {\n-        self.instantiate().entry(key)\n-    }\n-\n-    pub fn values<'a>(&'a self) -> Values<'a, K, V> {\n-        Values(self.0.as_ref().map(|btm| btm.values()))\n-    }\n-}\n-\n-impl<K: Ord, V> Default for LazyBTreeMap<K, V> {\n-    fn default() -> LazyBTreeMap<K, V> {\n-        LazyBTreeMap::new()\n-    }\n-}\n-\n-impl<'a, K: 'a, V: 'a> IntoIterator for &'a LazyBTreeMap<K, V> {\n-    type Item = (&'a K, &'a V);\n-    type IntoIter = Iter<'a, K, V>;\n-\n-    fn into_iter(self) -> Iter<'a, K, V> {\n-        self.iter()\n-    }\n-}\n-\n-pub struct Iter<'a, K: 'a, V: 'a>(Option<btree_map::Iter<'a, K, V>>);\n-\n-impl<'a, K: 'a, V: 'a> Iterator for Iter<'a, K, V> {\n-    type Item = (&'a K, &'a V);\n-\n-    fn next(&mut self) -> Option<(&'a K, &'a V)> {\n-        self.0.as_mut().and_then(|iter| iter.next())\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.0.as_ref().map_or_else(|| (0, Some(0)), |iter| iter.size_hint())\n-    }\n-}\n-\n-pub struct Values<'a, K: 'a, V: 'a>(Option<btree_map::Values<'a, K, V>>);\n-\n-impl<'a, K, V> Iterator for Values<'a, K, V> {\n-    type Item = &'a V;\n-\n-    fn next(&mut self) -> Option<&'a V> {\n-        self.0.as_mut().and_then(|values| values.next())\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        self.0.as_ref().map_or_else(|| (0, Some(0)), |values| values.size_hint())\n-    }\n-}\n-"}, {"sha": "5bac1bd9a7b08986b8c6231a77613caf4ee4995c", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f46b888f73d66149f1abe424489722283f60d6e1/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f46b888f73d66149f1abe424489722283f60d6e1/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=f46b888f73d66149f1abe424489722283f60d6e1", "patch": "@@ -61,7 +61,6 @@ pub mod bitvec;\n pub mod graph;\n pub mod indexed_set;\n pub mod indexed_vec;\n-pub mod lazy_btree_map;\n pub mod obligation_forest;\n pub mod sip128;\n pub mod snapshot_map;"}]}