{"sha": "9f09a5eb8b9b59360528f24f0c73fdaf6bf3300a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMDlhNWViOGI5YjU5MzYwNTI4ZjI0ZjBjNzNmZGFmNmJmMzMwMGE=", "commit": {"author": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-20T15:10:55Z"}, "committer": {"name": "Oli Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2021-07-22T11:20:29Z"}, "message": "Resolve nested inference variables.\n\nI attempted that with the previous code, but I misunderstdood how\n`shallow_resolve` works.", "tree": {"sha": "805ecd2455600ecc03487dacde012884b0e84a58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/805ecd2455600ecc03487dacde012884b0e84a58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f09a5eb8b9b59360528f24f0c73fdaf6bf3300a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f09a5eb8b9b59360528f24f0c73fdaf6bf3300a", "html_url": "https://github.com/rust-lang/rust/commit/9f09a5eb8b9b59360528f24f0c73fdaf6bf3300a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f09a5eb8b9b59360528f24f0c73fdaf6bf3300a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8551abd4787e6746d515a656b1e7ab00cf67d4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8551abd4787e6746d515a656b1e7ab00cf67d4a", "html_url": "https://github.com/rust-lang/rust/commit/a8551abd4787e6746d515a656b1e7ab00cf67d4a"}], "stats": {"total": 26, "additions": 7, "deletions": 19}, "files": [{"sha": "3fb06cd2f5f441e1e93234fb9302d4c49d48fb63", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f09a5eb8b9b59360528f24f0c73fdaf6bf3300a/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f09a5eb8b9b59360528f24f0c73fdaf6bf3300a/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=9f09a5eb8b9b59360528f24f0c73fdaf6bf3300a", "patch": "@@ -182,25 +182,13 @@ pub(crate) fn type_check<'mir, 'tcx>(\n             let mut opaque_type_values = cx.opaque_type_values;\n \n             for (_, revealed_ty) in &mut opaque_type_values {\n-                // FIXME(oli-obk): Instead of looping, implement a visitor like\n-                // FullTypeResolver. We can't use FullTypeResolver here, as that will\n-                // resolve lifetimes lexically, which it can't because we didn't do old\n-                // borrowck stuff. We want to use MIR borrowck information instead.\n-\n-                while revealed_ty.has_infer_types_or_consts() {\n-                    let prev = *revealed_ty;\n-                    trace!(prev=?prev.kind());\n-                    let type_resolved = infcx.shallow_resolve(prev);\n-                    trace!(type_resolved=?type_resolved.kind());\n-                    if prev == type_resolved {\n-                        infcx.tcx.sess.delay_span_bug(\n-                            body.span,\n-                            &format!(\"could not resolve {:#?}\", type_resolved.kind()),\n-                        );\n-                        *revealed_ty = infcx.tcx.ty_error();\n-                        break;\n-                    }\n-                    *revealed_ty = type_resolved;\n+                *revealed_ty = infcx.resolve_vars_if_possible(*revealed_ty);\n+                if revealed_ty.has_infer_types_or_consts() {\n+                    infcx.tcx.sess.delay_span_bug(\n+                        body.span,\n+                        &format!(\"could not resolve {:#?}\", revealed_ty.kind()),\n+                    );\n+                    *revealed_ty = infcx.tcx.ty_error();\n                 }\n             }\n "}]}