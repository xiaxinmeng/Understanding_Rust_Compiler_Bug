{"sha": "3512fb046799fe02555b12d1e180d0ef83aba849", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MTJmYjA0Njc5OWZlMDI1NTViMTJkMWUxODBkMGVmODNhYmE4NDk=", "commit": {"author": {"name": "John-John Tedro", "email": "udoprog@tedro.se", "date": "2018-12-05T01:48:18Z"}, "committer": {"name": "John-John Tedro", "email": "udoprog@tedro.se", "date": "2018-12-05T01:55:12Z"}, "message": "Avoid extra copy and syscall in std::env::current_exe", "tree": {"sha": "c00cf6fc5f7ea05be1a324fb82e93c4ec03f2f34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c00cf6fc5f7ea05be1a324fb82e93c4ec03f2f34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3512fb046799fe02555b12d1e180d0ef83aba849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3512fb046799fe02555b12d1e180d0ef83aba849", "html_url": "https://github.com/rust-lang/rust/commit/3512fb046799fe02555b12d1e180d0ef83aba849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3512fb046799fe02555b12d1e180d0ef83aba849/comments", "author": {"login": "udoprog", "id": 111092, "node_id": "MDQ6VXNlcjExMTA5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/111092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udoprog", "html_url": "https://github.com/udoprog", "followers_url": "https://api.github.com/users/udoprog/followers", "following_url": "https://api.github.com/users/udoprog/following{/other_user}", "gists_url": "https://api.github.com/users/udoprog/gists{/gist_id}", "starred_url": "https://api.github.com/users/udoprog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udoprog/subscriptions", "organizations_url": "https://api.github.com/users/udoprog/orgs", "repos_url": "https://api.github.com/users/udoprog/repos", "events_url": "https://api.github.com/users/udoprog/events{/privacy}", "received_events_url": "https://api.github.com/users/udoprog/received_events", "type": "User", "site_admin": false}, "committer": {"login": "udoprog", "id": 111092, "node_id": "MDQ6VXNlcjExMTA5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/111092?v=4", "gravatar_id": "", "url": "https://api.github.com/users/udoprog", "html_url": "https://github.com/udoprog", "followers_url": "https://api.github.com/users/udoprog/followers", "following_url": "https://api.github.com/users/udoprog/following{/other_user}", "gists_url": "https://api.github.com/users/udoprog/gists{/gist_id}", "starred_url": "https://api.github.com/users/udoprog/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/udoprog/subscriptions", "organizations_url": "https://api.github.com/users/udoprog/orgs", "repos_url": "https://api.github.com/users/udoprog/repos", "events_url": "https://api.github.com/users/udoprog/events{/privacy}", "received_events_url": "https://api.github.com/users/udoprog/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af7554d3a2e9e6171ca44bd1d4828606a9868f74", "url": "https://api.github.com/repos/rust-lang/rust/commits/af7554d3a2e9e6171ca44bd1d4828606a9868f74", "html_url": "https://github.com/rust-lang/rust/commit/af7554d3a2e9e6171ca44bd1d4828606a9868f74"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "03e81a720dc640ececa2e08bb32e631a30547b67", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3512fb046799fe02555b12d1e180d0ef83aba849/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3512fb046799fe02555b12d1e180d0ef83aba849/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=3512fb046799fe02555b12d1e180d0ef83aba849", "patch": "@@ -283,11 +283,14 @@ pub fn current_exe() -> io::Result<PathBuf> {\n \n #[cfg(any(target_os = \"linux\", target_os = \"android\", target_os = \"emscripten\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n-    let selfexe = PathBuf::from(\"/proc/self/exe\");\n-    if selfexe.exists() {\n-        ::fs::read_link(selfexe)\n-    } else {\n-        Err(io::Error::new(io::ErrorKind::Other, \"no /proc/self/exe available. Is /proc mounted?\"))\n+    match ::fs::read_link(\"/proc/self/exe\") {\n+        Err(ref e) if e.kind() == io::ErrorKind::NotFound => {\n+            Err(io::Error::new(\n+                io::ErrorKind::Other,\n+                \"no /proc/self/exe available. Is /proc mounted?\"\n+            ))\n+        },\n+        other => other,\n     }\n }\n "}]}