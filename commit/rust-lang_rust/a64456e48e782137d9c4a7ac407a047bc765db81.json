{"sha": "a64456e48e782137d9c4a7ac407a047bc765db81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NDQ1NmU0OGU3ODIxMzdkOWM0YTdhYzQwN2EwNDdiYzc2NWRiODE=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-20T08:34:57Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-20T10:47:26Z"}, "message": "remove hir::map::get", "tree": {"sha": "4deade44deb916bb79e92fcc4e09aefe71b0c024", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4deade44deb916bb79e92fcc4e09aefe71b0c024"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a64456e48e782137d9c4a7ac407a047bc765db81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a64456e48e782137d9c4a7ac407a047bc765db81", "html_url": "https://github.com/rust-lang/rust/commit/a64456e48e782137d9c4a7ac407a047bc765db81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a64456e48e782137d9c4a7ac407a047bc765db81/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae72c9124709b5aac5d716176c8c89f2a3485bfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae72c9124709b5aac5d716176c8c89f2a3485bfc", "html_url": "https://github.com/rust-lang/rust/commit/ae72c9124709b5aac5d716176c8c89f2a3485bfc"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "0cd4c98ec6c8471e25cb80c3ac7622523caed9e3", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a64456e48e782137d9c4a7ac407a047bc765db81/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64456e48e782137d9c4a7ac407a047bc765db81/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=a64456e48e782137d9c4a7ac407a047bc765db81", "patch": "@@ -561,20 +561,14 @@ impl<'hir> Map<'hir> {\n     }\n \n     /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.\n-    pub fn get(&self, id: NodeId) -> Node<'hir> {\n-        let hir_id = self.node_to_hir_id(id);\n-        self.get_by_hir_id(hir_id)\n-    }\n-\n-    // FIXME(@ljedrz): replace the `NodeId` variant.\n     pub fn get_by_hir_id(&self, id: HirId) -> Node<'hir> {\n         // read recorded by `find`\n         self.find_by_hir_id(id).unwrap_or_else(||\n             bug!(\"couldn't find hir id {} in the HIR map\", id))\n     }\n \n     pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {\n-        self.as_local_node_id(id).map(|id| self.get(id)) // read recorded by `get`\n+        self.as_local_hir_id(id).map(|id| self.get_by_hir_id(id)) // read recorded by `get`\n     }\n \n     pub fn get_generics(&self, id: DefId) -> Option<&'hir Generics> {"}, {"sha": "7b2c70a3cad4a31c3a8e72a068585cfb7cc92e24", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a64456e48e782137d9c4a7ac407a047bc765db81/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64456e48e782137d9c4a7ac407a047bc765db81/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=a64456e48e782137d9c4a7ac407a047bc765db81", "patch": "@@ -830,7 +830,8 @@ pub fn print_after_hir_lowering<'tcx>(\n                                                                          box out,\n                                                                          annotation.pp_ann());\n                     for node_id in uii.all_matching_node_ids(hir_map) {\n-                        let node = hir_map.get(node_id);\n+                        let hir_id = tcx.hir().node_to_hir_id(node_id);\n+                        let node = hir_map.get_by_hir_id(hir_id);\n                         pp_state.print_node(node)?;\n                         pp_state.s.space()?;\n                         let path = annotation.node_path(node_id)\n@@ -847,7 +848,8 @@ pub fn print_after_hir_lowering<'tcx>(\n                 s.call_with_pp_support_hir(tcx, move |_annotation, _krate| {\n                     debug!(\"pretty printing source code {:?}\", s);\n                     for node_id in uii.all_matching_node_ids(tcx.hir()) {\n-                        let node = tcx.hir().get(node_id);\n+                        let hir_id = tcx.hir().node_to_hir_id(node_id);\n+                        let node = tcx.hir().get_by_hir_id(hir_id);\n                         write!(out, \"{:#?}\", node)?;\n                     }\n                     Ok(())"}, {"sha": "4719965da8d66975de92c7d193f8ba75b8a18275", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a64456e48e782137d9c4a7ac407a047bc765db81/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64456e48e782137d9c4a7ac407a047bc765db81/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=a64456e48e782137d9c4a7ac407a047bc765db81", "patch": "@@ -233,7 +233,8 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n     }\n \n     fn lookup_def_id(&self, ref_id: NodeId) -> Option<DefId> {\n-        match self.save_ctxt.get_path_res(ref_id) {\n+        let hir_id = self.save_ctxt.tcx.hir().node_to_hir_id(ref_id);\n+        match self.save_ctxt.get_path_res(hir_id) {\n             Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => None,\n             def => Some(def.def_id()),\n         }\n@@ -886,7 +887,8 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                         return;\n                     }\n                 };\n-                let variant = adt.variant_of_res(self.save_ctxt.get_path_res(p.id));\n+                let hir_id = self.save_ctxt.tcx.hir().node_to_hir_id(p.id);\n+                let variant = adt.variant_of_res(self.save_ctxt.get_path_res(hir_id));\n \n                 for &Spanned { node: ref field, .. } in fields {\n                     if let Some(index) = self.tcx.find_field_index(field.ident, variant) {\n@@ -916,7 +918,8 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n         // process collected paths\n         for (id, ident, immut) in collector.collected_idents {\n-            match self.save_ctxt.get_path_res(id) {\n+            let hir_id = self.save_ctxt.tcx.hir().node_to_hir_id(id);\n+            match self.save_ctxt.get_path_res(hir_id) {\n                 Res::Local(hir_id) => {\n                     let mut value = if immut == ast::Mutability::Immutable {\n                         self.span.snippet(ident.span)\n@@ -1540,8 +1543,7 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, '\n                         return;\n                     }\n                 };\n-                let node_id = self.save_ctxt.tcx.hir().hir_to_node_id(hir_expr.hir_id);\n-                let res = self.save_ctxt.get_path_res(node_id);\n+                let res = self.save_ctxt.get_path_res(hir_expr.hir_id);\n                 self.process_struct_lit(ex, path, fields, adt.variant_of_res(res), base)\n             }\n             ast::ExprKind::MethodCall(ref seg, ref args) => self.process_method_call(ex, seg, args),"}, {"sha": "231fbac1f95d5da05ee9c34ffec9184dea9c52b0", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a64456e48e782137d9c4a7ac407a047bc765db81/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64456e48e782137d9c4a7ac407a047bc765db81/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=a64456e48e782137d9c4a7ac407a047bc765db81", "patch": "@@ -606,8 +606,8 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n         }\n     }\n \n-    pub fn get_path_res(&self, id: NodeId) -> Res {\n-        match self.tcx.hir().get(id) {\n+    pub fn get_path_res(&self, hir_id: hir::HirId) -> Res {\n+        match self.tcx.hir().get_by_hir_id(hir_id) {\n             Node::TraitRef(tr) => tr.path.res,\n \n             Node::Item(&hir::Item {\n@@ -620,15 +620,14 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             Node::PathSegment(seg) => {\n                 match seg.res {\n                     Some(res) if res != Res::Err => res,\n-                    _ => self.get_path_res(self.tcx.hir().get_parent_node(id)),\n+                    _ => self.get_path_res(self.tcx.hir().get_parent_node_by_hir_id(hir_id)),\n                 }\n             }\n \n             Node::Expr(&hir::Expr {\n                 node: hir::ExprKind::Struct(ref qpath, ..),\n                 ..\n             }) => {\n-                let hir_id = self.tcx.hir().node_to_hir_id(id);\n                 self.tables.qpath_res(qpath, hir_id)\n             }\n \n@@ -652,7 +651,6 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n                 node: hir::TyKind::Path(ref qpath),\n                 ..\n             }) => {\n-                let hir_id = self.tcx.hir().node_to_hir_id(id);\n                 self.tables.qpath_res(qpath, hir_id)\n             }\n \n@@ -697,7 +695,8 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             return None;\n         }\n \n-        let res = self.get_path_res(id);\n+        let hir_id = self.tcx.hir().node_to_hir_id(id);\n+        let res = self.get_path_res(hir_id);\n         let span = path_seg.ident.span;\n         filter!(self.span_utils, span);\n         let span = self.span_from_span(span);\n@@ -869,7 +868,8 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n     }\n \n     fn lookup_ref_id(&self, ref_id: NodeId) -> Option<DefId> {\n-        match self.get_path_res(ref_id) {\n+        let hir_id = self.tcx.hir().node_to_hir_id(ref_id);\n+        match self.get_path_res(hir_id) {\n             Res::PrimTy(_) | Res::SelfTy(..) | Res::Err => None,\n             def => Some(def.def_id()),\n         }"}, {"sha": "7af18a8676abb9c7eef8e5905e01b47cb6c74bc9", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a64456e48e782137d9c4a7ac407a047bc765db81/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a64456e48e782137d9c4a7ac407a047bc765db81/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=a64456e48e782137d9c4a7ac407a047bc765db81", "patch": "@@ -273,7 +273,8 @@ impl Sig for ast::Ty {\n                 };\n \n                 let name = pprust::path_segment_to_string(path.segments.last().ok_or(\"Bad path\")?);\n-                let res = scx.get_path_res(id.ok_or(\"Missing id for Path\")?);\n+                let hir_id = id.map(|node_id| scx.tcx.hir().node_to_hir_id(node_id));\n+                let res = scx.get_path_res(hir_id.ok_or(\"Missing id for Path\")?);\n                 let id = id_from_def_id(res.def_id());\n                 if path.segments.len() - qself.position == 1 {\n                     let start = offset + prefix.len();\n@@ -576,7 +577,8 @@ impl Sig for ast::Item {\n \n impl Sig for ast::Path {\n     fn make(&self, offset: usize, id: Option<NodeId>, scx: &SaveContext<'_, '_>) -> Result {\n-        let res = scx.get_path_res(id.ok_or(\"Missing id for Path\")?);\n+        let hir_id = id.map(|node_id| scx.tcx.hir().node_to_hir_id(node_id));\n+        let res = scx.get_path_res(hir_id.ok_or(\"Missing id for Path\")?);\n \n         let (name, start, end) = match res {\n             Res::PrimTy(..) | Res::SelfTy(..) | Res::Err => {"}]}