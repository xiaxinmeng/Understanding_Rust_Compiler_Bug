{"sha": "73996df6291001f0742b6409249329301aa77a23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczOTk2ZGY2MjkxMDAxZjA3NDJiNjQwOTI0OTMyOTMwMWFhNzdhMjM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-01-01T19:43:24Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2020-01-01T20:22:02Z"}, "message": "Reset Formatter flags on exit from pad_integral\n\nThis fixes a bug where after calling pad_integral with appropriate flags, the\nfill and alignment flags would be set to '0' and 'Right' and left as such even\nafter exiting pad_integral, which meant that future calls on the same Formatter\nwould get incorrect flags reported.\n\nThis is quite difficult to observe in practice, as almost all formatting\nimplementations in practice don't call `Display::fmt` directly, but rather use\n`write!` or a similar macro, which means that they cannot observe the effects of\nthe wrong flags (as `write!` creates a fresh Formatter instance). However, we\ninclude a test case.", "tree": {"sha": "b99e017d8df762e0d4cb8865b5b160d124acc5e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b99e017d8df762e0d4cb8865b5b160d124acc5e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73996df6291001f0742b6409249329301aa77a23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73996df6291001f0742b6409249329301aa77a23", "html_url": "https://github.com/rust-lang/rust/commit/73996df6291001f0742b6409249329301aa77a23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73996df6291001f0742b6409249329301aa77a23/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "119307a83e12291a3fc126735d6bd0292c443464", "url": "https://api.github.com/repos/rust-lang/rust/commits/119307a83e12291a3fc126735d6bd0292c443464", "html_url": "https://github.com/rust-lang/rust/commit/119307a83e12291a3fc126735d6bd0292c443464"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "e68f3c58a3e07769aedfe787b866d3d1b1733a03", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/73996df6291001f0742b6409249329301aa77a23/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73996df6291001f0742b6409249329301aa77a23/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=73996df6291001f0742b6409249329301aa77a23", "patch": "@@ -1244,12 +1244,15 @@ impl<'a> Formatter<'a> {\n             // The sign and prefix goes before the padding if the fill character\n             // is zero\n             Some(min) if self.sign_aware_zero_pad() => {\n-                self.fill = '0';\n-                self.align = rt::v1::Alignment::Right;\n+                let old_fill = crate::mem::replace(&mut self.fill, '0');\n+                let old_align = crate::mem::replace(&mut self.align, rt::v1::Alignment::Right);\n                 write_prefix(self, sign, prefix)?;\n                 let post_padding = self.padding(min - width, rt::v1::Alignment::Right)?;\n                 self.buf.write_str(buf)?;\n-                post_padding.write(self.buf)\n+                post_padding.write(self.buf)?;\n+                self.fill = old_fill;\n+                self.align = old_align;\n+                Ok(())\n             }\n             // Otherwise, the sign and prefix goes after the padding\n             Some(min) => {"}, {"sha": "7b281ce48e6aa4e102ea048daabaa53708b66080", "filename": "src/libcore/tests/fmt/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/73996df6291001f0742b6409249329301aa77a23/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73996df6291001f0742b6409249329301aa77a23/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs?ref=73996df6291001f0742b6409249329301aa77a23", "patch": "@@ -28,3 +28,18 @@ fn test_estimated_capacity() {\n     assert_eq!(format_args!(\"{}, hello!\", \"World\").estimated_capacity(), 0);\n     assert_eq!(format_args!(\"{}. 16-bytes piece\", \"World\").estimated_capacity(), 32);\n }\n+\n+#[test]\n+fn pad_integral_resets() {\n+    struct Bar;\n+\n+    impl core::fmt::Display for Bar {\n+        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n+            \"1\".fmt(f)?;\n+            f.pad_integral(true, \"\", \"5\")?;\n+            \"1\".fmt(f)\n+        }\n+    }\n+\n+    assert_eq!(format!(\"{:<03}\", Bar), \"1  0051  \");\n+}"}]}