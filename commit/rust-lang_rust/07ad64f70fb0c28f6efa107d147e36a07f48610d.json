{"sha": "07ad64f70fb0c28f6efa107d147e36a07f48610d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YWQ2NGY3MGZiMGMyOGY2ZWZhMTA3ZDE0N2UzNmEwN2Y0ODYxMGQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-06-28T22:30:35Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-21T18:41:22Z"}, "message": "Add tests for #62211", "tree": {"sha": "70f59693250d1ea3145fffa9e5124e6f0f71b1de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f59693250d1ea3145fffa9e5124e6f0f71b1de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07ad64f70fb0c28f6efa107d147e36a07f48610d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07ad64f70fb0c28f6efa107d147e36a07f48610d", "html_url": "https://github.com/rust-lang/rust/commit/07ad64f70fb0c28f6efa107d147e36a07f48610d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07ad64f70fb0c28f6efa107d147e36a07f48610d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff5d11e0434217531f2699543c7ec7f1e550a42f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff5d11e0434217531f2699543c7ec7f1e550a42f", "html_url": "https://github.com/rust-lang/rust/commit/ff5d11e0434217531f2699543c7ec7f1e550a42f"}], "stats": {"total": 310, "additions": 310, "deletions": 0}, "files": [{"sha": "aa7beca00476c9355c71b6f43a7dcbee08ebba26", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/07ad64f70fb0c28f6efa107d147e36a07f48610d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ad64f70fb0c28f6efa107d147e36a07f48610d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs?ref=07ad64f70fb0c28f6efa107d147e36a07f48610d", "patch": "@@ -0,0 +1,62 @@\n+//! Regression test for https://github.com/rust-lang/rust/issues/62211\n+//!\n+//! The old implementation of defaults did not check whether the provided\n+//! default actually fulfills all bounds on the assoc. type, leading to\n+//! unsoundness, demonstrated here as a use-after-free.\n+\n+// compile-fail\n+\n+#![feature(associated_type_defaults)]\n+\n+use std::{\n+    fmt::Display,\n+    ops::{AddAssign, Deref}\n+};\n+\n+\n+trait UncheckedCopy: Sized {\n+    // This Output is said to be Copy. Yet we default to Self\n+    // and it's accepted, not knowing if Self ineed is Copy\n+    type Output: Copy\n+    //~^ ERROR the trait bound `Self: std::marker::Copy` is not satisfied\n+    + Deref<Target = str>\n+    //~^ ERROR the trait bound `Self: std::ops::Deref` is not satisfied\n+    + AddAssign<&'static str>\n+    //~^ ERROR cannot add-assign `&'static str` to `Self`\n+    + From<Self>\n+    + Display = Self;\n+    //~^ ERROR `Self` doesn't implement `std::fmt::Display`\n+\n+    // We said the Output type was Copy, so we can Copy it freely!\n+    fn unchecked_copy(other: &Self::Output) -> Self::Output {\n+        (*other)\n+    }\n+\n+    fn make_origin(s: Self) -> Self::Output {\n+        s.into()\n+    }\n+}\n+\n+impl<T> UncheckedCopy for T {}\n+//~^ ERROR `T` doesn't implement `std::fmt::Display`\n+//~| ERROR the trait bound `T: std::ops::Deref` is not satisfied\n+//~| ERROR cannot add-assign `&'static str` to `T`\n+//~| ERROR the trait bound `T: std::marker::Copy` is not satisfied\n+\n+fn bug<T: UncheckedCopy>(origin: T) {\n+    let origin = T::make_origin(origin);\n+    let mut copy = T::unchecked_copy(&origin);\n+\n+    // assert we indeed have 2 strings pointing to the same buffer.\n+    assert_eq!(origin.as_ptr(), copy.as_ptr());\n+\n+    // Drop the origin. Any use of `copy` is UB.\n+    drop(origin);\n+\n+    copy += \"This is invalid!\";\n+    println!(\"{}\", copy);\n+}\n+\n+fn main() {\n+    bug(String::from(\"hello!\"));\n+}"}, {"sha": "417edd873ec34b0f9a45320dd8627041c42a2ba5", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/07ad64f70fb0c28f6efa107d147e36a07f48610d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07ad64f70fb0c28f6efa107d147e36a07f48610d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=07ad64f70fb0c28f6efa107d147e36a07f48610d", "patch": "@@ -0,0 +1,93 @@\n+error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n+  --> $DIR/defaults-unsound-62211-1.rs:20:18\n+   |\n+LL |     type Output: Copy\n+   |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n+   |\n+   = help: consider adding a `where Self: std::marker::Copy` bound\n+note: required by `UncheckedCopy`\n+  --> $DIR/defaults-unsound-62211-1.rs:17:1\n+   |\n+LL | trait UncheckedCopy: Sized {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: cannot add-assign `&'static str` to `Self`\n+  --> $DIR/defaults-unsound-62211-1.rs:24:7\n+   |\n+LL |     + AddAssign<&'static str>\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n+   |\n+   = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n+   = help: consider adding a `where Self: std::ops::AddAssign<&'static str>` bound\n+note: required by `UncheckedCopy`\n+  --> $DIR/defaults-unsound-62211-1.rs:17:1\n+   |\n+LL | trait UncheckedCopy: Sized {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n+  --> $DIR/defaults-unsound-62211-1.rs:22:7\n+   |\n+LL |     + Deref<Target = str>\n+   |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n+   |\n+   = help: consider adding a `where Self: std::ops::Deref` bound\n+note: required by `UncheckedCopy`\n+  --> $DIR/defaults-unsound-62211-1.rs:17:1\n+   |\n+LL | trait UncheckedCopy: Sized {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `Self` doesn't implement `std::fmt::Display`\n+  --> $DIR/defaults-unsound-62211-1.rs:27:7\n+   |\n+LL |     + Display = Self;\n+   |       ^^^^^^^ `Self` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `Self`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+   = help: consider adding a `where Self: std::fmt::Display` bound\n+note: required by `UncheckedCopy`\n+  --> $DIR/defaults-unsound-62211-1.rs:17:1\n+   |\n+LL | trait UncheckedCopy: Sized {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `T` doesn't implement `std::fmt::Display`\n+  --> $DIR/defaults-unsound-62211-1.rs:40:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `T`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+   = help: consider adding a `where T: std::fmt::Display` bound\n+\n+error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n+  --> $DIR/defaults-unsound-62211-1.rs:40:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: std::ops::Deref` bound\n+\n+error[E0277]: cannot add-assign `&'static str` to `T`\n+  --> $DIR/defaults-unsound-62211-1.rs:40:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n+   |\n+   = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n+   = help: consider adding a `where T: std::ops::AddAssign<&'static str>` bound\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/defaults-unsound-62211-1.rs:40:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: std::marker::Copy` bound\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "ce12bd48587589fa33312ebbd4d3a649f4db034d", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/07ad64f70fb0c28f6efa107d147e36a07f48610d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07ad64f70fb0c28f6efa107d147e36a07f48610d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs?ref=07ad64f70fb0c28f6efa107d147e36a07f48610d", "patch": "@@ -0,0 +1,62 @@\n+//! Regression test for https://github.com/rust-lang/rust/issues/62211\n+//!\n+//! The old implementation of defaults did not check whether the provided\n+//! default actually fulfills all bounds on the assoc. type, leading to\n+//! unsoundness and ICEs, the latter being demonstrated here.\n+\n+// compile-fail\n+\n+#![feature(associated_type_defaults)]\n+\n+use std::{\n+    fmt::Display,\n+    ops::{AddAssign, Deref}\n+};\n+\n+\n+trait UncheckedCopy: Sized {\n+    // This Output is said to be Copy. Yet we default to Self\n+    // and it's accepted, not knowing if Self ineed is Copy\n+    type Output: Copy\n+    //~^ ERROR the trait bound `Self: std::marker::Copy` is not satisfied\n+    + Deref<Target = str>\n+    //~^ ERROR the trait bound `Self: std::ops::Deref` is not satisfied\n+    + AddAssign<&'static str>\n+    //~^ ERROR cannot add-assign `&'static str` to `Self`\n+    + From<Self>\n+    + Display = Self;\n+    //~^ ERROR `Self` doesn't implement `std::fmt::Display`\n+\n+    // We said the Output type was Copy, so we can Copy it freely!\n+    fn unchecked_copy(other: &Self::Output) -> Self::Output {\n+        (*other)\n+    }\n+\n+    fn make_origin(s: Self) -> Self::Output {\n+        s.into()\n+    }\n+}\n+\n+impl<T> UncheckedCopy for T {}\n+//~^ ERROR `T` doesn't implement `std::fmt::Display`\n+//~| ERROR the trait bound `T: std::ops::Deref` is not satisfied\n+//~| ERROR cannot add-assign `&'static str` to `T`\n+//~| ERROR the trait bound `T: std::marker::Copy` is not satisfied\n+\n+fn bug<T: UncheckedCopy>(origin: T) {\n+    let origin = T::make_origin(origin);\n+    let mut copy = T::unchecked_copy(&origin);\n+\n+    // assert we indeed have 2 strings pointing to the same buffer.\n+    assert_eq!(origin.as_ptr(), copy.as_ptr());\n+\n+    // Drop the origin. Any use of `copy` is UB.\n+    drop(origin);\n+\n+    copy += \"This is invalid!\";\n+    println!(\"{}\", copy);\n+}\n+\n+fn main() {\n+    bug(());\n+}"}, {"sha": "a1ce1f6db3162f1dc2f63493f3d994e0e0edbf6b", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/07ad64f70fb0c28f6efa107d147e36a07f48610d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/07ad64f70fb0c28f6efa107d147e36a07f48610d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=07ad64f70fb0c28f6efa107d147e36a07f48610d", "patch": "@@ -0,0 +1,93 @@\n+error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n+  --> $DIR/defaults-unsound-62211-2.rs:20:18\n+   |\n+LL |     type Output: Copy\n+   |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n+   |\n+   = help: consider adding a `where Self: std::marker::Copy` bound\n+note: required by `UncheckedCopy`\n+  --> $DIR/defaults-unsound-62211-2.rs:17:1\n+   |\n+LL | trait UncheckedCopy: Sized {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: cannot add-assign `&'static str` to `Self`\n+  --> $DIR/defaults-unsound-62211-2.rs:24:7\n+   |\n+LL |     + AddAssign<&'static str>\n+   |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n+   |\n+   = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n+   = help: consider adding a `where Self: std::ops::AddAssign<&'static str>` bound\n+note: required by `UncheckedCopy`\n+  --> $DIR/defaults-unsound-62211-2.rs:17:1\n+   |\n+LL | trait UncheckedCopy: Sized {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n+  --> $DIR/defaults-unsound-62211-2.rs:22:7\n+   |\n+LL |     + Deref<Target = str>\n+   |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n+   |\n+   = help: consider adding a `where Self: std::ops::Deref` bound\n+note: required by `UncheckedCopy`\n+  --> $DIR/defaults-unsound-62211-2.rs:17:1\n+   |\n+LL | trait UncheckedCopy: Sized {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `Self` doesn't implement `std::fmt::Display`\n+  --> $DIR/defaults-unsound-62211-2.rs:27:7\n+   |\n+LL |     + Display = Self;\n+   |       ^^^^^^^ `Self` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `Self`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+   = help: consider adding a `where Self: std::fmt::Display` bound\n+note: required by `UncheckedCopy`\n+  --> $DIR/defaults-unsound-62211-2.rs:17:1\n+   |\n+LL | trait UncheckedCopy: Sized {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `T` doesn't implement `std::fmt::Display`\n+  --> $DIR/defaults-unsound-62211-2.rs:40:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n+   |\n+   = help: the trait `std::fmt::Display` is not implemented for `T`\n+   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n+   = help: consider adding a `where T: std::fmt::Display` bound\n+\n+error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n+  --> $DIR/defaults-unsound-62211-2.rs:40:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: std::ops::Deref` bound\n+\n+error[E0277]: cannot add-assign `&'static str` to `T`\n+  --> $DIR/defaults-unsound-62211-2.rs:40:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n+   |\n+   = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `T`\n+   = help: consider adding a `where T: std::ops::AddAssign<&'static str>` bound\n+\n+error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n+  --> $DIR/defaults-unsound-62211-2.rs:40:9\n+   |\n+LL | impl<T> UncheckedCopy for T {}\n+   |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+   |\n+   = help: consider adding a `where T: std::marker::Copy` bound\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}