{"sha": "c738dcc284c17addbc0a311c29b4ecaaf2fcfbaa", "node_id": "C_kwDOAAsO6NoAKGM3MzhkY2MyODRjMTdhZGRiYzBhMzExYzI5YjRlY2FhZjJmY2ZiYWE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-11T19:18:59Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-04-11T19:18:59Z"}, "message": "Add `bits_for` helper for tagged pointers & fixup docs", "tree": {"sha": "17407a3ba54acc4600b90015038004bd356668cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17407a3ba54acc4600b90015038004bd356668cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c738dcc284c17addbc0a311c29b4ecaaf2fcfbaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c738dcc284c17addbc0a311c29b4ecaaf2fcfbaa", "html_url": "https://github.com/rust-lang/rust/commit/c738dcc284c17addbc0a311c29b4ecaaf2fcfbaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c738dcc284c17addbc0a311c29b4ecaaf2fcfbaa/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4be8efc6296bace5b1e165f1b34d3c6da76aa8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4be8efc6296bace5b1e165f1b34d3c6da76aa8e", "html_url": "https://github.com/rust-lang/rust/commit/d4be8efc6296bace5b1e165f1b34d3c6da76aa8e"}], "stats": {"total": 58, "additions": 42, "deletions": 16}, "files": [{"sha": "c96d7835b2beebe3207898c95092526867924a48", "filename": "compiler/rustc_data_structures/src/tagged_ptr.rs", "status": "modified", "additions": 40, "deletions": 15, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c738dcc284c17addbc0a311c29b4ecaaf2fcfbaa/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c738dcc284c17addbc0a311c29b4ecaaf2fcfbaa/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ftagged_ptr.rs?ref=c738dcc284c17addbc0a311c29b4ecaaf2fcfbaa", "patch": "@@ -24,32 +24,45 @@ mod drop;\n pub use copy::CopyTaggedPtr;\n pub use drop::TaggedPtr;\n \n-/// This describes the pointer type encapsulated by TaggedPtr.\n+/// This describes the pointer type encapsulated by [`TaggedPtr`] and\n+/// [`CopyTaggedPtr`].\n ///\n /// # Safety\n ///\n /// The usize returned from `into_usize` must be a valid, dereferenceable,\n-/// pointer to `<Self as Deref>::Target`. Note that pointers to `Pointee` must\n-/// be thin, even though `Pointee` may not be sized.\n+/// pointer to [`<Self as Deref>::Target`]. Note that pointers to\n+/// [`Self::Target`] must be thin, even though [`Self::Target`] may not be\n+/// `Sized`.\n ///\n /// Note that the returned pointer from `into_usize` should be castable to `&mut\n-/// <Self as Deref>::Target` if `Pointer: DerefMut`.\n+/// <Self as Deref>::Target` if `Self: DerefMut`.\n ///\n /// The BITS constant must be correct. At least `BITS` bits, least-significant,\n /// must be zero on all returned pointers from `into_usize`.\n ///\n-/// For example, if the alignment of `Pointee` is 2, then `BITS` should be 1.\n+/// For example, if the alignment of [`Self::Target`] is 2, then `BITS` should be 1.\n+///\n+/// [`<Self as Deref>::Target`]: Deref::Target\n+/// [`Self::Target`]: Deref::Target\n pub unsafe trait Pointer: Deref {\n+    /// Number of unused (always zero) **least significant bits** in this\n+    /// pointer, usually related to the pointees alignment.\n+    ///\n     /// Most likely the value you want to use here is the following, unless\n-    /// your Pointee type is unsized (e.g., `ty::List<T>` in rustc) in which\n-    /// case you'll need to manually figure out what the right type to pass to\n-    /// align_of is.\n+    /// your [`Self::Target`] type is unsized (e.g., `ty::List<T>` in rustc)\n+    /// or your pointer is over/under aligned, in which case you'll need to\n+    /// manually figure out what the right type to pass to [`bits_for`] is, or\n+    /// what the value to set here.\n     ///\n-    /// ```ignore UNSOLVED (what to do about the Self)\n+    /// ```rust\n     /// # use std::ops::Deref;\n-    /// std::mem::align_of::<<Self as Deref>::Target>().trailing_zeros() as usize;\n+    /// # type Self = &'static u64;\n+    /// bits_for::<Self::Target>()\n     /// ```\n+    ///\n+    /// [`Self::Target`]: Deref::Target\n     const BITS: usize;\n+\n     fn into_usize(self) -> usize;\n \n     /// # Safety\n@@ -90,7 +103,7 @@ pub unsafe trait Tag: Copy {\n }\n \n unsafe impl<T> Pointer for Box<T> {\n-    const BITS: usize = std::mem::align_of::<T>().trailing_zeros() as usize;\n+    const BITS: usize = bits_for::<Self::Target>();\n     #[inline]\n     fn into_usize(self) -> usize {\n         Box::into_raw(self) as usize\n@@ -106,7 +119,7 @@ unsafe impl<T> Pointer for Box<T> {\n }\n \n unsafe impl<T> Pointer for Rc<T> {\n-    const BITS: usize = std::mem::align_of::<T>().trailing_zeros() as usize;\n+    const BITS: usize = bits_for::<Self::Target>();\n     #[inline]\n     fn into_usize(self) -> usize {\n         Rc::into_raw(self) as usize\n@@ -122,7 +135,7 @@ unsafe impl<T> Pointer for Rc<T> {\n }\n \n unsafe impl<T> Pointer for Arc<T> {\n-    const BITS: usize = std::mem::align_of::<T>().trailing_zeros() as usize;\n+    const BITS: usize = bits_for::<Self::Target>();\n     #[inline]\n     fn into_usize(self) -> usize {\n         Arc::into_raw(self) as usize\n@@ -138,7 +151,7 @@ unsafe impl<T> Pointer for Arc<T> {\n }\n \n unsafe impl<'a, T: 'a> Pointer for &'a T {\n-    const BITS: usize = std::mem::align_of::<T>().trailing_zeros() as usize;\n+    const BITS: usize = bits_for::<Self::Target>();\n     #[inline]\n     fn into_usize(self) -> usize {\n         self as *const T as usize\n@@ -153,7 +166,7 @@ unsafe impl<'a, T: 'a> Pointer for &'a T {\n }\n \n unsafe impl<'a, T: 'a> Pointer for &'a mut T {\n-    const BITS: usize = std::mem::align_of::<T>().trailing_zeros() as usize;\n+    const BITS: usize = bits_for::<Self::Target>();\n     #[inline]\n     fn into_usize(self) -> usize {\n         self as *mut T as usize\n@@ -166,3 +179,15 @@ unsafe impl<'a, T: 'a> Pointer for &'a mut T {\n         f(&*(&ptr as *const usize as *const Self))\n     }\n }\n+\n+/// Returns the number of bits available for use for tags in a pointer to `T`\n+/// (this is based on `T`'s alignment).\n+pub const fn bits_for<T>() -> usize {\n+    let bits = std::mem::align_of::<T>().trailing_zeros();\n+\n+    // This is a replacement for `.try_into().unwrap()` unavailable in `const`\n+    // (it's fine to make an assert here, since this is only called in compile time)\n+    assert!((bits as u128) < usize::MAX as u128);\n+\n+    bits as usize\n+}"}, {"sha": "4526487cf1d531153a6e8bbb40d5f4006934251b", "filename": "compiler/rustc_middle/src/ty/list.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c738dcc284c17addbc0a311c29b4ecaaf2fcfbaa/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c738dcc284c17addbc0a311c29b4ecaaf2fcfbaa/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flist.rs?ref=c738dcc284c17addbc0a311c29b4ecaaf2fcfbaa", "patch": "@@ -1,4 +1,5 @@\n use crate::arena::Arena;\n+use rustc_data_structures::tagged_ptr::bits_for;\n use rustc_serialize::{Encodable, Encoder};\n use std::alloc::Layout;\n use std::cmp::Ordering;\n@@ -199,7 +200,7 @@ impl<'a, T: Copy> IntoIterator for &'a List<T> {\n unsafe impl<T: Sync> Sync for List<T> {}\n \n unsafe impl<'a, T: 'a> rustc_data_structures::tagged_ptr::Pointer for &'a List<T> {\n-    const BITS: usize = std::mem::align_of::<usize>().trailing_zeros() as usize;\n+    const BITS: usize = bits_for::<usize>();\n \n     #[inline]\n     fn into_usize(self) -> usize {"}]}