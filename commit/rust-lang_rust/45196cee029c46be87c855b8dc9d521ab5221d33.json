{"sha": "45196cee029c46be87c855b8dc9d521ab5221d33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MTk2Y2VlMDI5YzQ2YmU4N2M4NTViOGRjOWQ1MjFhYjUyMjFkMzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-01T18:39:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-01T18:39:21Z"}, "message": "Auto merge of #4690 - lzutao:fix-test-on-non-amd64, r=flip1995\n\ngenerate stderr file on 32bit pointer system\n\nchangelog: none", "tree": {"sha": "6812daa04b4e3f606ba89aea3aabda300132ae34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6812daa04b4e3f606ba89aea3aabda300132ae34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45196cee029c46be87c855b8dc9d521ab5221d33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45196cee029c46be87c855b8dc9d521ab5221d33", "html_url": "https://github.com/rust-lang/rust/commit/45196cee029c46be87c855b8dc9d521ab5221d33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45196cee029c46be87c855b8dc9d521ab5221d33/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a75502938ec65da87b9e6d0339e44591fef7824", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a75502938ec65da87b9e6d0339e44591fef7824", "html_url": "https://github.com/rust-lang/rust/commit/5a75502938ec65da87b9e6d0339e44591fef7824"}, {"sha": "7156aa7f950faf182aaf39fed4f8b09aad20623a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7156aa7f950faf182aaf39fed4f8b09aad20623a", "html_url": "https://github.com/rust-lang/rust/commit/7156aa7f950faf182aaf39fed4f8b09aad20623a"}], "stats": {"total": 607, "additions": 506, "deletions": 101}, "files": [{"sha": "41d19b209b6dc559706d216e90598747b39ad1e2", "filename": ".travis.yml", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -1,5 +1,8 @@\n dist: xenial\n language: bash\n+git:\n+  depth: 1\n+  quiet: true\n \n branches:\n   # Don't build these branches\n@@ -22,6 +25,7 @@ env:\n    - secure: \"OKulfkA5OGd/d1IhvBKzRkHQwMcWjzrzbimo7+5NhkUkWxndAzl+719TB3wWvIh1i2wXXrEXsyZkXM5FtRrHm55v1VKQ5ibjEvFg1w3NIg81iDyoLq186fLqywvxGkOAFPrsePPsBj5USd5xvhwwbrjO6L7/RK6Z8shBwOSc41s=\"\n \n before_install:\n+  - export CARGO_TARGET_DIR=\"$TRAVIS_BUILD_DIR/target\"\n   - curl -sSL https://sh.rustup.rs | sh -s -- -y --default-toolchain=nightly --profile=minimal\n   - export PATH=\"$HOME/.cargo/bin:$PATH\"\n install:\n@@ -48,6 +52,15 @@ matrix:\n   include:\n     # Builds that are executed for every PR\n     - os: linux\n+    # i686 toolchain could run on x86_64 system.\n+    - os: linux\n+      env: HOST_TOOLCHAIN=i686-unknown-linux-gnu\n+      addons:\n+        apt:\n+          packages:\n+            - gcc-multilib\n+            - libssl-dev:i386     # openssl dev in Cargo.toml\n+      if: branch IN (auto, try)\n     - os: windows\n       env: CARGO_INCREMENTAL=0 OS_WINDOWS=true\n \n@@ -114,7 +127,7 @@ before_script:\n     SYSROOT=$(rustc --print sysroot)\n     case \"$TRAVIS_OS_NAME\" in\n       windows ) export PATH=\"${SYSROOT}/bin:${PATH}\" ;;\n-      linux ) export LD_LIBRARY_PATH=\"${SYSROOT}/lib\" ;;\n+      linux ) export LD_LIBRARY_PATH=\"${SYSROOT}/lib${LD_LIBRARY_PATH+:${LD_LIBRARY_PATH}}\" ;;\n       osx )\n         # See <https://github.com/nteract/nteract/issues/1523#issuecomment-301623519>\n         sudo mkdir -p /usr/local/lib"}, {"sha": "010c8919752f089118ae6518a4acf7e6875f9753", "filename": "ci/base-tests.sh", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -1,10 +1,6 @@\n #!/usr/bin/env bash\n set -ex\n \n-# for faster build, share target dir between subcrates\n-CARGO_TARGET_DIR=$(pwd)/target/\n-export CARGO_TARGET_DIR\n-\n echo \"Running clippy base tests\"\n \n PATH=$PATH:./node_modules/.bin"}, {"sha": "abdfe409b78d2c1fe5e172ee88d2ca5df5d241d7", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -24,6 +24,7 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust\n+    /// # #[cfg(target_pointer_width = \"64\")]\n     /// #[repr(usize)]\n     /// enum NonPortable {\n     ///     X = 0x1_0000_0000,"}, {"sha": "88ae90581e568cd59c469c2450c5221a772bb58d", "filename": "setup-toolchain.sh", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/setup-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/setup-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/setup-toolchain.sh?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -26,5 +26,11 @@ if rustc +master -Vv 2>/dev/null | grep -q \"$RUST_COMMIT\"; then\n     exit 0\n fi\n \n-rustup-toolchain-install-master -f -n master -c rustc-dev -- \"$RUST_COMMIT\"\n+if [[ -n \"$HOST_TOOLCHAIN\" ]]; then\n+    TOOLCHAIN=('--host' \"$HOST_TOOLCHAIN\")\n+else\n+    TOOLCHAIN=()\n+fi\n+\n+rustup-toolchain-install-master -f -n master \"${TOOLCHAIN[@]}\" -c rustc-dev -- \"$RUST_COMMIT\"\n rustup override set master"}, {"sha": "ba35abbfbbb7d4a8f5d720937086da3da6df2fc3", "filename": "tests/fmt.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffmt.rs?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -19,9 +19,11 @@ fn fmt() {\n \n     let root_dir = std::path::PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n     let dev_dir = root_dir.join(\"clippy_dev\");\n+    let target_dir = root_dir.join(\"target\");\n+    let target_dir = target_dir.to_str().unwrap();\n     let output = Command::new(\"cargo\")\n         .current_dir(dev_dir)\n-        .args(&[\"+nightly\", \"run\", \"--\", \"fmt\", \"--check\"])\n+        .args(&[\"+nightly\", \"run\", \"--target-dir\", target_dir, \"--\", \"fmt\", \"--check\"])\n         .output()\n         .unwrap();\n "}, {"sha": "595109be46bb878f3ce9b4e94c0223c4fb7c72f1", "filename": "tests/ui/cast_size.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Fcast_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Fcast_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.rs?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -1,3 +1,4 @@\n+// ignore-32bit\n #[warn(\n     clippy::cast_precision_loss,\n     clippy::cast_possible_truncation,"}, {"sha": "ec7ed6aec94ee297da3b506395fce78014a6c35b", "filename": "tests/ui/cast_size.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Fcast_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Fcast_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size.stderr?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -1,113 +1,113 @@\n error: casting isize to i8 may truncate the value\n-  --> $DIR/cast_size.rs:11:5\n+  --> $DIR/cast_size.rs:12:5\n    |\n LL |     1isize as i8;\n    |     ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n \n error: casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast_size.rs:14:5\n+  --> $DIR/cast_size.rs:15:5\n    |\n LL |     x0 as f64;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::cast-precision-loss` implied by `-D warnings`\n \n error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast_size.rs:15:5\n+  --> $DIR/cast_size.rs:16:5\n    |\n LL |     x1 as f64;\n    |     ^^^^^^^^^\n \n error: casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast_size.rs:16:5\n+  --> $DIR/cast_size.rs:17:5\n    |\n LL |     x0 as f32;\n    |     ^^^^^^^^^\n \n error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast_size.rs:17:5\n+  --> $DIR/cast_size.rs:18:5\n    |\n LL |     x1 as f32;\n    |     ^^^^^^^^^\n \n error: casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast_size.rs:18:5\n+  --> $DIR/cast_size.rs:19:5\n    |\n LL |     1isize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast_size.rs:19:5\n+  --> $DIR/cast_size.rs:20:5\n    |\n LL |     1isize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast_size.rs:20:5\n+  --> $DIR/cast_size.rs:21:5\n    |\n LL |     1usize as u32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n-  --> $DIR/cast_size.rs:21:5\n+  --> $DIR/cast_size.rs:22:5\n    |\n LL |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n \n error: casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:21:5\n+  --> $DIR/cast_size.rs:22:5\n    |\n LL |     1usize as i32;\n    |     ^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`\n \n error: casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:23:5\n+  --> $DIR/cast_size.rs:24:5\n    |\n LL |     1i64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:24:5\n+  --> $DIR/cast_size.rs:25:5\n    |\n LL |     1i64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:25:5\n+  --> $DIR/cast_size.rs:26:5\n    |\n LL |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n-  --> $DIR/cast_size.rs:25:5\n+  --> $DIR/cast_size.rs:26:5\n    |\n LL |     1u64 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:26:5\n+  --> $DIR/cast_size.rs:27:5\n    |\n LL |     1u64 as usize;\n    |     ^^^^^^^^^^^^^\n \n error: casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n-  --> $DIR/cast_size.rs:27:5\n+  --> $DIR/cast_size.rs:28:5\n    |\n LL |     1u32 as isize;\n    |     ^^^^^^^^^^^^^\n \n error: casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n-  --> $DIR/cast_size.rs:32:5\n+  --> $DIR/cast_size.rs:33:5\n    |\n LL |     999_999_999 as f32;\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n-  --> $DIR/cast_size.rs:33:5\n+  --> $DIR/cast_size.rs:34:5\n    |\n LL |     9_999_999_999_999_999usize as f64;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "99aac6deca3240248356da5f3cc903cb2477178c", "filename": "tests/ui/cast_size_32bit.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Fcast_size_32bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Fcast_size_32bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size_32bit.rs?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -0,0 +1,35 @@\n+// ignore-64bit\n+#[warn(\n+    clippy::cast_precision_loss,\n+    clippy::cast_possible_truncation,\n+    clippy::cast_sign_loss,\n+    clippy::cast_possible_wrap,\n+    clippy::cast_lossless\n+)]\n+#[allow(clippy::no_effect, clippy::unnecessary_operation)]\n+fn main() {\n+    // Casting from *size\n+    1isize as i8;\n+    let x0 = 1isize;\n+    let x1 = 1usize;\n+    x0 as f64;\n+    x1 as f64;\n+    x0 as f32;\n+    x1 as f32;\n+    1isize as i32;\n+    1isize as u32;\n+    1usize as u32;\n+    1usize as i32;\n+    // Casting to *size\n+    1i64 as isize;\n+    1i64 as usize;\n+    1u64 as isize;\n+    1u64 as usize;\n+    1u32 as isize;\n+    1u32 as usize; // Should not trigger any lint\n+    1i32 as isize; // Neither should this\n+    1i32 as usize;\n+    // Big integer literal to float\n+    999_999_999 as f32;\n+    3_999_999_999usize as f64;\n+}"}, {"sha": "cb89630718aee52f0984d25d984294851edeed45", "filename": "tests/ui/cast_size_32bit.stderr", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Fcast_size_32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Fcast_size_32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_size_32bit.stderr?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -0,0 +1,132 @@\n+error: casting isize to i8 may truncate the value\n+  --> $DIR/cast_size_32bit.rs:12:5\n+   |\n+LL |     1isize as i8;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::cast-possible-truncation` implied by `-D warnings`\n+\n+error: casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+  --> $DIR/cast_size_32bit.rs:15:5\n+   |\n+LL |     x0 as f64;\n+   |     ^^^^^^^^^\n+   |\n+   = note: `-D clippy::cast-precision-loss` implied by `-D warnings`\n+\n+error: casting isize to f64 may become silently lossy if you later change the type\n+  --> $DIR/cast_size_32bit.rs:15:5\n+   |\n+LL |     x0 as f64;\n+   |     ^^^^^^^^^ help: try: `f64::from(x0)`\n+   |\n+   = note: `-D clippy::cast-lossless` implied by `-D warnings`\n+\n+error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+  --> $DIR/cast_size_32bit.rs:16:5\n+   |\n+LL |     x1 as f64;\n+   |     ^^^^^^^^^\n+\n+error: casting usize to f64 may become silently lossy if you later change the type\n+  --> $DIR/cast_size_32bit.rs:16:5\n+   |\n+LL |     x1 as f64;\n+   |     ^^^^^^^^^ help: try: `f64::from(x1)`\n+\n+error: casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+  --> $DIR/cast_size_32bit.rs:17:5\n+   |\n+LL |     x0 as f32;\n+   |     ^^^^^^^^^\n+\n+error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+  --> $DIR/cast_size_32bit.rs:18:5\n+   |\n+LL |     x1 as f32;\n+   |     ^^^^^^^^^\n+\n+error: casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast_size_32bit.rs:19:5\n+   |\n+LL |     1isize as i32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast_size_32bit.rs:20:5\n+   |\n+LL |     1isize as u32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast_size_32bit.rs:21:5\n+   |\n+LL |     1usize as u32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast_size_32bit.rs:22:5\n+   |\n+LL |     1usize as i32;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size_32bit.rs:22:5\n+   |\n+LL |     1usize as i32;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::cast-possible-wrap` implied by `-D warnings`\n+\n+error: casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size_32bit.rs:24:5\n+   |\n+LL |     1i64 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size_32bit.rs:25:5\n+   |\n+LL |     1i64 as usize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size_32bit.rs:26:5\n+   |\n+LL |     1u64 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n+  --> $DIR/cast_size_32bit.rs:26:5\n+   |\n+LL |     1u64 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size_32bit.rs:27:5\n+   |\n+LL |     1u64 as usize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n+  --> $DIR/cast_size_32bit.rs:28:5\n+   |\n+LL |     1u32 as isize;\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+  --> $DIR/cast_size_32bit.rs:33:5\n+   |\n+LL |     999_999_999 as f32;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: casting integer literal to f64 is unnecessary\n+  --> $DIR/cast_size_32bit.rs:34:5\n+   |\n+LL |     3_999_999_999usize as f64;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `3999999999_f64`\n+   |\n+   = note: `-D clippy::unnecessary-cast` implied by `-D warnings`\n+\n+error: aborting due to 20 previous errors\n+"}, {"sha": "a456c085c876108b618f77007aeb1d55f230abba", "filename": "tests/ui/fn_to_numeric_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Ffn_to_numeric_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Ffn_to_numeric_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_to_numeric_cast.rs?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -1,4 +1,4 @@\n-// only-64bit\n+// ignore-32bit\n \n #![warn(clippy::fn_to_numeric_cast, clippy::fn_to_numeric_cast_with_truncation)]\n "}, {"sha": "04ee985c0863d8a5af686a110e328c3861050cc1", "filename": "tests/ui/fn_to_numeric_cast_32bit.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Ffn_to_numeric_cast_32bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Ffn_to_numeric_cast_32bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_to_numeric_cast_32bit.rs?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -0,0 +1,55 @@\n+// ignore-64bit\n+\n+#![warn(clippy::fn_to_numeric_cast, clippy::fn_to_numeric_cast_with_truncation)]\n+\n+fn foo() -> String {\n+    String::new()\n+}\n+\n+fn test_function_to_numeric_cast() {\n+    let _ = foo as i8;\n+    let _ = foo as i16;\n+    let _ = foo as i32;\n+    let _ = foo as i64;\n+    let _ = foo as i128;\n+    let _ = foo as isize;\n+\n+    let _ = foo as u8;\n+    let _ = foo as u16;\n+    let _ = foo as u32;\n+    let _ = foo as u64;\n+    let _ = foo as u128;\n+\n+    // Casting to usize is OK and should not warn\n+    let _ = foo as usize;\n+\n+    // Cast `f` (a `FnDef`) to `fn()` should not warn\n+    fn f() {}\n+    let _ = f as fn();\n+}\n+\n+fn test_function_var_to_numeric_cast() {\n+    let abc: fn() -> String = foo;\n+\n+    let _ = abc as i8;\n+    let _ = abc as i16;\n+    let _ = abc as i32;\n+    let _ = abc as i64;\n+    let _ = abc as i128;\n+    let _ = abc as isize;\n+\n+    let _ = abc as u8;\n+    let _ = abc as u16;\n+    let _ = abc as u32;\n+    let _ = abc as u64;\n+    let _ = abc as u128;\n+\n+    // Casting to usize is OK and should not warn\n+    let _ = abc as usize;\n+}\n+\n+fn fn_with_fn_args(f: fn(i32) -> i32) -> i32 {\n+    f as i32\n+}\n+\n+fn main() {}"}, {"sha": "08dd611d675241592cc7245aeab0b7b9b9d8c877", "filename": "tests/ui/fn_to_numeric_cast_32bit.stderr", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Ffn_to_numeric_cast_32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Ffn_to_numeric_cast_32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_to_numeric_cast_32bit.stderr?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -0,0 +1,144 @@\n+error: casting function pointer `foo` to `i8`, which truncates the value\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:10:13\n+   |\n+LL |     let _ = foo as i8;\n+   |             ^^^^^^^^^ help: try: `foo as usize`\n+   |\n+   = note: `-D clippy::fn-to-numeric-cast-with-truncation` implied by `-D warnings`\n+\n+error: casting function pointer `foo` to `i16`, which truncates the value\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:11:13\n+   |\n+LL |     let _ = foo as i16;\n+   |             ^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `i32`\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:12:13\n+   |\n+LL |     let _ = foo as i32;\n+   |             ^^^^^^^^^^ help: try: `foo as usize`\n+   |\n+   = note: `-D clippy::fn-to-numeric-cast` implied by `-D warnings`\n+\n+error: casting function pointer `foo` to `i64`\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:13:13\n+   |\n+LL |     let _ = foo as i64;\n+   |             ^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `i128`\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:14:13\n+   |\n+LL |     let _ = foo as i128;\n+   |             ^^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `isize`\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:15:13\n+   |\n+LL |     let _ = foo as isize;\n+   |             ^^^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `u8`, which truncates the value\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:17:13\n+   |\n+LL |     let _ = foo as u8;\n+   |             ^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `u16`, which truncates the value\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:18:13\n+   |\n+LL |     let _ = foo as u16;\n+   |             ^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `u32`\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:19:13\n+   |\n+LL |     let _ = foo as u32;\n+   |             ^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `u64`\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:20:13\n+   |\n+LL |     let _ = foo as u64;\n+   |             ^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `foo` to `u128`\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:21:13\n+   |\n+LL |     let _ = foo as u128;\n+   |             ^^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: casting function pointer `abc` to `i8`, which truncates the value\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:34:13\n+   |\n+LL |     let _ = abc as i8;\n+   |             ^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `i16`, which truncates the value\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:35:13\n+   |\n+LL |     let _ = abc as i16;\n+   |             ^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `i32`\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:36:13\n+   |\n+LL |     let _ = abc as i32;\n+   |             ^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `i64`\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:37:13\n+   |\n+LL |     let _ = abc as i64;\n+   |             ^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `i128`\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:38:13\n+   |\n+LL |     let _ = abc as i128;\n+   |             ^^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `isize`\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:39:13\n+   |\n+LL |     let _ = abc as isize;\n+   |             ^^^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `u8`, which truncates the value\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:41:13\n+   |\n+LL |     let _ = abc as u8;\n+   |             ^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `u16`, which truncates the value\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:42:13\n+   |\n+LL |     let _ = abc as u16;\n+   |             ^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `u32`\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:43:13\n+   |\n+LL |     let _ = abc as u32;\n+   |             ^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `u64`\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:44:13\n+   |\n+LL |     let _ = abc as u64;\n+   |             ^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `abc` to `u128`\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:45:13\n+   |\n+LL |     let _ = abc as u128;\n+   |             ^^^^^^^^^^^ help: try: `abc as usize`\n+\n+error: casting function pointer `f` to `i32`\n+  --> $DIR/fn_to_numeric_cast_32bit.rs:52:5\n+   |\n+LL |     f as i32\n+   |     ^^^^^^^^ help: try: `f as usize`\n+\n+error: aborting due to 23 previous errors\n+"}, {"sha": "859fad2f54d9d82bb5b7d664c3fb12ca271f2efe", "filename": "tests/ui/large_digit_groups.fixed", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Flarge_digit_groups.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Flarge_digit_groups.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.fixed?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -1,14 +1,14 @@\n // run-rustfix\n-#[warn(clippy::large_digit_groups)]\n-#[allow(unused_variables)]\n+#![warn(clippy::large_digit_groups)]\n+\n fn main() {\n     macro_rules! mac {\n         () => {\n             0b1_10110_i64\n         };\n     }\n \n-    let good = (\n+    let _good = (\n         0b1011_i64,\n         0o1_234_u32,\n         0x1_234_567,\n@@ -18,15 +18,14 @@ fn main() {\n         1_234.123_f32,\n         1.123_4_f32,\n     );\n-    let bad = (\n+    let _bad = (\n         0b11_0110_i64,\n-        0x0123_4567_8901_usize,\n+        0xdead_beef_usize,\n         123_456_f32,\n         123_456.12_f32,\n         123_456.123_45_f64,\n         123_456.123_456_f64,\n     );\n-\n     // Ignore literals in macros\n     let _ = mac!();\n }"}, {"sha": "ac116d5dbda15c953c6e23fce0baf8cdfb56a333", "filename": "tests/ui/large_digit_groups.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Flarge_digit_groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Flarge_digit_groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.rs?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -1,14 +1,14 @@\n // run-rustfix\n-#[warn(clippy::large_digit_groups)]\n-#[allow(unused_variables)]\n+#![warn(clippy::large_digit_groups)]\n+\n fn main() {\n     macro_rules! mac {\n         () => {\n             0b1_10110_i64\n         };\n     }\n \n-    let good = (\n+    let _good = (\n         0b1011_i64,\n         0o1_234_u32,\n         0x1_234_567,\n@@ -18,15 +18,14 @@ fn main() {\n         1_234.123_f32,\n         1.123_4_f32,\n     );\n-    let bad = (\n+    let _bad = (\n         0b1_10110_i64,\n-        0x1_23456_78901_usize,\n+        0xd_e_adbee_f_usize,\n         1_23456_f32,\n         1_23456.12_f32,\n         1_23456.12345_f64,\n         1_23456.12345_6_f64,\n     );\n-\n     // Ignore literals in macros\n     let _ = mac!();\n }"}, {"sha": "b6d9672a78e2191c3475d1449a0196c907c8b0eb", "filename": "tests/ui/large_digit_groups.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Flarge_digit_groups.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Flarge_digit_groups.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_digit_groups.stderr?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -6,11 +6,13 @@ LL |         0b1_10110_i64,\n    |\n    = note: `-D clippy::large-digit-groups` implied by `-D warnings`\n \n-error: digit groups should be smaller\n+error: digits grouped inconsistently by underscores\n   --> $DIR/large_digit_groups.rs:23:9\n    |\n-LL |         0x1_23456_78901_usize,\n-   |         ^^^^^^^^^^^^^^^^^^^^^ help: consider: `0x0123_4567_8901_usize`\n+LL |         0xd_e_adbee_f_usize,\n+   |         ^^^^^^^^^^^^^^^^^^^ help: consider: `0xdead_beef_usize`\n+   |\n+   = note: `-D clippy::inconsistent-digit-grouping` implied by `-D warnings`\n \n error: digit groups should be smaller\n   --> $DIR/large_digit_groups.rs:24:9"}, {"sha": "c27fd5be134522bc21f78eb2565d51f12d839e50", "filename": "tests/ui/my_lint.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5a75502938ec65da87b9e6d0339e44591fef7824/tests%2Fui%2Fmy_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a75502938ec65da87b9e6d0339e44591fef7824/tests%2Fui%2Fmy_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmy_lint.rs?ref=5a75502938ec65da87b9e6d0339e44591fef7824", "patch": "@@ -1,7 +0,0 @@\n-#[clippy::author]\n-#[cfg(any(target_arch = \"x86\"))]\n-pub struct Foo {\n-    x: u32,\n-}\n-\n-fn main() {}"}, {"sha": "ffe22b12f5510646450f9219061828cb2c5e69de", "filename": "tests/ui/transmute_32bit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Ftransmute_32bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Ftransmute_32bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_32bit.rs?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -1,6 +1,6 @@\n-//ignore-x86_64\n+// ignore-64bit\n \n-#[warn(wrong_transmute)]\n+#[warn(clippy::wrong_transmute)]\n fn main() {\n     unsafe {\n         let _: *const usize = std::mem::transmute(6.0f32);"}, {"sha": "040519564b94cf64230269e3c50344a19db2851b", "filename": "tests/ui/transmute_32bit.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Ftransmute_32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Ftransmute_32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_32bit.stderr?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -0,0 +1,28 @@\n+error: transmute from a `f32` to a pointer\n+  --> $DIR/transmute_32bit.rs:6:31\n+   |\n+LL |         let _: *const usize = std::mem::transmute(6.0f32);\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::wrong-transmute` implied by `-D warnings`\n+\n+error: transmute from a `f32` to a pointer\n+  --> $DIR/transmute_32bit.rs:8:29\n+   |\n+LL |         let _: *mut usize = std::mem::transmute(6.0f32);\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a `char` to a pointer\n+  --> $DIR/transmute_32bit.rs:10:31\n+   |\n+LL |         let _: *const usize = std::mem::transmute('x');\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a `char` to a pointer\n+  --> $DIR/transmute_32bit.rs:12:29\n+   |\n+LL |         let _: *mut usize = std::mem::transmute('x');\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "00dc0b2c36081b0433744a86849c6349f699731a", "filename": "tests/ui/transmute_64bit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Ftransmute_64bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Ftransmute_64bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_64bit.rs?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -1,5 +1,4 @@\n-//ignore-x86\n-//no-ignore-x86_64\n+// ignore-32bit\n \n #[warn(clippy::wrong_transmute)]\n fn main() {"}, {"sha": "d1854c009ef56f9b183f551dfdcc76e5943819e8", "filename": "tests/ui/transmute_64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Ftransmute_64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Ftransmute_64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_64bit.stderr?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -1,13 +1,13 @@\n error: transmute from a `f64` to a pointer\n-  --> $DIR/transmute_64bit.rs:7:31\n+  --> $DIR/transmute_64bit.rs:6:31\n    |\n LL |         let _: *const usize = std::mem::transmute(6.0f64);\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::wrong-transmute` implied by `-D warnings`\n \n error: transmute from a `f64` to a pointer\n-  --> $DIR/transmute_64bit.rs:9:29\n+  --> $DIR/transmute_64bit.rs:8:29\n    |\n LL |         let _: *mut usize = std::mem::transmute(6.0f64);\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3f358d9ecaa0a9529cc345f5d030b3068e8293b0", "filename": "tests/ui/unreadable_literal.fixed", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Funreadable_literal.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Funreadable_literal.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.fixed?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![warn(clippy::unreadable_literal)]\n+\n struct Foo(u64);\n \n macro_rules! foo {\n@@ -8,10 +10,8 @@ macro_rules! foo {\n     };\n }\n \n-#[warn(clippy::unreadable_literal)]\n-#[allow(unused_variables)]\n fn main() {\n-    let good = (\n+    let _good = (\n         0b1011_i64,\n         0o1_234_u32,\n         0x1_234_567,\n@@ -22,14 +22,14 @@ fn main() {\n         1_234.123_f32,\n         1.123_4_f32,\n     );\n-    let bad = (0b11_0110_i64, 0x0123_4567_8901_usize, 123_456_f32, 1.234_567_f32);\n-    let good_sci = 1.1234e1;\n-    let bad_sci = 1.123_456e1;\n+    let _bad = (0b11_0110_i64, 0xcafe_babe_usize, 123_456_f32, 1.234_567_f32);\n+    let _good_sci = 1.1234e1;\n+    let _bad_sci = 1.123_456e1;\n \n-    let fail9 = 0x00ab_cdef;\n-    let fail10: u32 = 0xBAFE_BAFE;\n-    let fail11 = 0x0abc_deff;\n-    let fail12: i128 = 0x00ab_cabc_abca_bcab_cabc;\n+    let _fail9 = 0x00ab_cdef;\n+    let _fail10: u32 = 0xBAFE_BAFE;\n+    let _fail11 = 0x0abc_deff;\n+    let _fail12: i128 = 0x00ab_cabc_abca_bcab_cabc;\n \n     let _ = foo!();\n }"}, {"sha": "e658a5f28c90e6b2b036047e9289b0096041643e", "filename": "tests/ui/unreadable_literal.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Funreadable_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Funreadable_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.rs?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![warn(clippy::unreadable_literal)]\n+\n struct Foo(u64);\n \n macro_rules! foo {\n@@ -8,10 +10,8 @@ macro_rules! foo {\n     };\n }\n \n-#[warn(clippy::unreadable_literal)]\n-#[allow(unused_variables)]\n fn main() {\n-    let good = (\n+    let _good = (\n         0b1011_i64,\n         0o1_234_u32,\n         0x1_234_567,\n@@ -22,14 +22,14 @@ fn main() {\n         1_234.123_f32,\n         1.123_4_f32,\n     );\n-    let bad = (0b110110_i64, 0x12345678901_usize, 123456_f32, 1.234567_f32);\n-    let good_sci = 1.1234e1;\n-    let bad_sci = 1.123456e1;\n+    let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n+    let _good_sci = 1.1234e1;\n+    let _bad_sci = 1.123456e1;\n \n-    let fail9 = 0xabcdef;\n-    let fail10: u32 = 0xBAFEBAFE;\n-    let fail11 = 0xabcdeff;\n-    let fail12: i128 = 0xabcabcabcabcabcabc;\n+    let _fail9 = 0xabcdef;\n+    let _fail10: u32 = 0xBAFEBAFE;\n+    let _fail11 = 0xabcdeff;\n+    let _fail12: i128 = 0xabcabcabcabcabcabc;\n \n     let _ = foo!();\n }"}, {"sha": "1b2ff6bff048ccdde88b7addbf3a07932e46edd6", "filename": "tests/ui/unreadable_literal.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Funreadable_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45196cee029c46be87c855b8dc9d521ab5221d33/tests%2Fui%2Funreadable_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funreadable_literal.stderr?ref=45196cee029c46be87c855b8dc9d521ab5221d33", "patch": "@@ -1,58 +1,58 @@\n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:25:16\n+  --> $DIR/unreadable_literal.rs:25:17\n    |\n-LL |     let bad = (0b110110_i64, 0x12345678901_usize, 123456_f32, 1.234567_f32);\n-   |                ^^^^^^^^^^^^ help: consider: `0b11_0110_i64`\n+LL |     let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n+   |                 ^^^^^^^^^^^^ help: consider: `0b11_0110_i64`\n    |\n    = note: `-D clippy::unreadable-literal` implied by `-D warnings`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:25:30\n+  --> $DIR/unreadable_literal.rs:25:31\n    |\n-LL |     let bad = (0b110110_i64, 0x12345678901_usize, 123456_f32, 1.234567_f32);\n-   |                              ^^^^^^^^^^^^^^^^^^^ help: consider: `0x0123_4567_8901_usize`\n+LL |     let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n+   |                               ^^^^^^^^^^^^^^^^ help: consider: `0xcafe_babe_usize`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:25:51\n+  --> $DIR/unreadable_literal.rs:25:49\n    |\n-LL |     let bad = (0b110110_i64, 0x12345678901_usize, 123456_f32, 1.234567_f32);\n-   |                                                   ^^^^^^^^^^ help: consider: `123_456_f32`\n+LL |     let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n+   |                                                 ^^^^^^^^^^ help: consider: `123_456_f32`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:25:63\n+  --> $DIR/unreadable_literal.rs:25:61\n    |\n-LL |     let bad = (0b110110_i64, 0x12345678901_usize, 123456_f32, 1.234567_f32);\n-   |                                                               ^^^^^^^^^^^^ help: consider: `1.234_567_f32`\n+LL |     let _bad = (0b110110_i64, 0xcafebabe_usize, 123456_f32, 1.234567_f32);\n+   |                                                             ^^^^^^^^^^^^ help: consider: `1.234_567_f32`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:27:19\n+  --> $DIR/unreadable_literal.rs:27:20\n    |\n-LL |     let bad_sci = 1.123456e1;\n-   |                   ^^^^^^^^^^ help: consider: `1.123_456e1`\n+LL |     let _bad_sci = 1.123456e1;\n+   |                    ^^^^^^^^^^ help: consider: `1.123_456e1`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:29:17\n+  --> $DIR/unreadable_literal.rs:29:18\n    |\n-LL |     let fail9 = 0xabcdef;\n-   |                 ^^^^^^^^ help: consider: `0x00ab_cdef`\n+LL |     let _fail9 = 0xabcdef;\n+   |                  ^^^^^^^^ help: consider: `0x00ab_cdef`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:30:23\n+  --> $DIR/unreadable_literal.rs:30:24\n    |\n-LL |     let fail10: u32 = 0xBAFEBAFE;\n-   |                       ^^^^^^^^^^ help: consider: `0xBAFE_BAFE`\n+LL |     let _fail10: u32 = 0xBAFEBAFE;\n+   |                        ^^^^^^^^^^ help: consider: `0xBAFE_BAFE`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:31:18\n+  --> $DIR/unreadable_literal.rs:31:19\n    |\n-LL |     let fail11 = 0xabcdeff;\n-   |                  ^^^^^^^^^ help: consider: `0x0abc_deff`\n+LL |     let _fail11 = 0xabcdeff;\n+   |                   ^^^^^^^^^ help: consider: `0x0abc_deff`\n \n error: long literal lacking separators\n-  --> $DIR/unreadable_literal.rs:32:24\n+  --> $DIR/unreadable_literal.rs:32:25\n    |\n-LL |     let fail12: i128 = 0xabcabcabcabcabcabc;\n-   |                        ^^^^^^^^^^^^^^^^^^^^ help: consider: `0x00ab_cabc_abca_bcab_cabc`\n+LL |     let _fail12: i128 = 0xabcabcabcabcabcabc;\n+   |                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `0x00ab_cabc_abca_bcab_cabc`\n \n error: aborting due to 9 previous errors\n "}]}