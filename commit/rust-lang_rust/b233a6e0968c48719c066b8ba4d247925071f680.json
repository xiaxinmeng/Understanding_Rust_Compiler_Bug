{"sha": "b233a6e0968c48719c066b8ba4d247925071f680", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMzNhNmUwOTY4YzQ4NzE5YzA2NmI4YmE0ZDI0NzkyNTA3MWY2ODA=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2017-10-31T18:24:04Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2017-11-03T00:29:54Z"}, "message": "Add support for specifying the TLS model", "tree": {"sha": "96f203cb3ea9b094d63954d14e1fb90146370b37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96f203cb3ea9b094d63954d14e1fb90146370b37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b233a6e0968c48719c066b8ba4d247925071f680", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b233a6e0968c48719c066b8ba4d247925071f680", "html_url": "https://github.com/rust-lang/rust/commit/b233a6e0968c48719c066b8ba4d247925071f680", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b233a6e0968c48719c066b8ba4d247925071f680/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37b015fb912676e05625c974ed4d62136b98e3cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/37b015fb912676e05625c974ed4d62136b98e3cb", "html_url": "https://github.com/rust-lang/rust/commit/37b015fb912676e05625c974ed4d62136b98e3cb"}], "stats": {"total": 74, "additions": 68, "deletions": 6}, "files": [{"sha": "d1d04e883b8fd0e7620eae2ddf1b3d89dac84c02", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b233a6e0968c48719c066b8ba4d247925071f680/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233a6e0968c48719c066b8ba4d247925071f680/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b233a6e0968c48719c066b8ba4d247925071f680", "patch": "@@ -368,6 +368,7 @@ pub enum PrintRequest {\n     TargetFeatures,\n     RelocationModels,\n     CodeModels,\n+    TlsModels,\n     TargetSpec,\n     NativeStaticLibs,\n }\n@@ -910,6 +911,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n          \"choose the relocation model to use (rustc --print relocation-models for details)\"),\n     code_model: Option<String> = (None, parse_opt_string, [TRACKED],\n          \"choose the code model to use (rustc --print code-models for details)\"),\n+    tls_model: Option<String> = (None, parse_opt_string, [TRACKED],\n+         \"choose the TLS model to use (rustc --print tls-models for details)\"),\n     metadata: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n          \"metadata to mangle symbol names with\"),\n     extra_filename: String = (\"\".to_string(), parse_string, [UNTRACKED],\n@@ -1330,7 +1333,7 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n                                print on stdout\",\n                      \"[crate-name|file-names|sysroot|cfg|target-list|\\\n                        target-cpus|target-features|relocation-models|\\\n-                       code-models|target-spec-json|native-static-libs]\"),\n+                       code-models|tls-models|target-spec-json|native-static-libs]\"),\n         opt::flagmulti_s(\"g\",  \"\",  \"Equivalent to -C debuginfo=2\"),\n         opt::flagmulti_s(\"O\", \"\", \"Equivalent to -C opt-level=2\"),\n         opt::opt_s(\"o\", \"\", \"Write output to <filename>\", \"FILENAME\"),\n@@ -1573,6 +1576,10 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         prints.push(PrintRequest::CodeModels);\n         cg.code_model = None;\n     }\n+    if cg.tls_model.as_ref().map_or(false, |s| s == \"help\") {\n+        prints.push(PrintRequest::TlsModels);\n+        cg.tls_model = None;\n+    }\n \n     let cg = cg;\n \n@@ -1672,6 +1679,7 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n             \"target-features\" => PrintRequest::TargetFeatures,\n             \"relocation-models\" => PrintRequest::RelocationModels,\n             \"code-models\" => PrintRequest::CodeModels,\n+            \"tls-models\" => PrintRequest::TlsModels,\n             \"native-static-libs\" => PrintRequest::NativeStaticLibs,\n             \"target-spec-json\" => {\n                 if nightly_options::is_unstable_enabled(matches) {\n@@ -2514,6 +2522,10 @@ mod tests {\n         opts.cg.code_model = Some(String::from(\"code model\"));\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n+        opts = reference.clone();\n+        opts.cg.tls_model = Some(String::from(\"tls model\"));\n+        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n         opts = reference.clone();\n         opts.cg.metadata = vec![String::from(\"A\"), String::from(\"B\")];\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}, {"sha": "c5cce70c945663393d38cdd27756c55bce9cda02", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b233a6e0968c48719c066b8ba4d247925071f680/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233a6e0968c48719c066b8ba4d247925071f680/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=b233a6e0968c48719c066b8ba4d247925071f680", "patch": "@@ -177,6 +177,7 @@ mod rustc_trans {\n         pub mod write {\n             pub const RELOC_MODEL_ARGS: [(&'static str, ()); 0] = [];\n             pub const CODE_GEN_MODEL_ARGS: [(&'static str, ()); 0] = [];\n+            pub const TLS_MODEL_ARGS: [(&'static str, ()); 0] = [];\n         }\n     }\n }\n@@ -797,6 +798,13 @@ impl RustcDefaultCalls {\n                     }\n                     println!(\"\");\n                 }\n+                PrintRequest::TlsModels => {\n+                    println!(\"Available TLS models:\");\n+                    for &(name, _) in rustc_trans::back::write::TLS_MODEL_ARGS.iter(){\n+                        println!(\"    {}\", name);\n+                    }\n+                    println!(\"\");\n+                }\n                 PrintRequest::TargetCPUs | PrintRequest::TargetFeatures => {\n                     rustc_trans::print(*req, sess);\n                 }"}, {"sha": "ac0e4dde0c1024e95bbc2f3c91ad49e96a1423c3", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b233a6e0968c48719c066b8ba4d247925071f680/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233a6e0968c48719c066b8ba4d247925071f680/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=b233a6e0968c48719c066b8ba4d247925071f680", "patch": "@@ -359,6 +359,17 @@ pub struct ThinLTOModule {\n     pub len: usize,\n }\n \n+/// LLVMThreadLocalMode\n+#[derive(Copy, Clone)]\n+#[repr(C)]\n+pub enum ThreadLocalMode {\n+  NotThreadLocal,\n+  GeneralDynamic,\n+  LocalDynamic,\n+  InitialExec,\n+  LocalExec\n+}\n+\n // Opaque pointer types\n #[allow(missing_copy_implementations)]\n pub enum Module_opaque {}\n@@ -709,6 +720,7 @@ extern \"C\" {\n     pub fn LLVMGetInitializer(GlobalVar: ValueRef) -> ValueRef;\n     pub fn LLVMSetInitializer(GlobalVar: ValueRef, ConstantVal: ValueRef);\n     pub fn LLVMSetThreadLocal(GlobalVar: ValueRef, IsThreadLocal: Bool);\n+    pub fn LLVMSetThreadLocalMode(GlobalVar: ValueRef, Mode: ThreadLocalMode);\n     pub fn LLVMIsGlobalConstant(GlobalVar: ValueRef) -> Bool;\n     pub fn LLVMSetGlobalConstant(GlobalVar: ValueRef, IsConstant: Bool);\n     pub fn LLVMRustGetNamedValue(M: ModuleRef, Name: *const c_char) -> ValueRef;"}, {"sha": "5ccce8de7063995ccb2e9378a83f7a96bae4234c", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b233a6e0968c48719c066b8ba4d247925071f680/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233a6e0968c48719c066b8ba4d247925071f680/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=b233a6e0968c48719c066b8ba4d247925071f680", "patch": "@@ -172,6 +172,11 @@ pub fn set_thread_local(global: ValueRef, is_thread_local: bool) {\n         LLVMSetThreadLocal(global, is_thread_local as Bool);\n     }\n }\n+pub fn set_thread_local_mode(global: ValueRef, mode: ThreadLocalMode) {\n+    unsafe {\n+        LLVMSetThreadLocalMode(global, mode);\n+    }\n+}\n \n impl Attribute {\n     pub fn apply_llfn(&self, idx: AttributePlace, llfn: ValueRef) {"}, {"sha": "3d923922bb1cf76b6d1fb198513f03f4934b6c97", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b233a6e0968c48719c066b8ba4d247925071f680/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233a6e0968c48719c066b8ba4d247925071f680/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=b233a6e0968c48719c066b8ba4d247925071f680", "patch": "@@ -76,6 +76,13 @@ pub const CODE_GEN_MODEL_ARGS : [(&'static str, llvm::CodeModel); 5] = [\n     (\"large\", llvm::CodeModel::Large),\n ];\n \n+pub const TLS_MODEL_ARGS : [(&'static str, llvm::ThreadLocalMode); 4] = [\n+    (\"global-dynamic\", llvm::ThreadLocalMode::GeneralDynamic),\n+    (\"local-dynamic\", llvm::ThreadLocalMode::LocalDynamic),\n+    (\"initial-exec\", llvm::ThreadLocalMode::InitialExec),\n+    (\"local-exec\", llvm::ThreadLocalMode::LocalExec),\n+];\n+\n pub fn llvm_err(handler: &errors::Handler, msg: String) -> FatalError {\n     match llvm::last_error() {\n         Some(err) => handler.fatal(&format!(\"{}: {}\", msg, err)),"}, {"sha": "0f5ede91c7d6ec012728965d1a081346bb90c7f0", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b233a6e0968c48719c066b8ba4d247925071f680/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233a6e0968c48719c066b8ba4d247925071f680/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=b233a6e0968c48719c066b8ba4d247925071f680", "patch": "@@ -23,6 +23,7 @@ use monomorphize::Instance;\n use type_::Type;\n use type_of;\n use rustc::ty;\n+use context::get_tls_model;\n \n use rustc::hir;\n \n@@ -196,7 +197,7 @@ pub fn get_static(ccx: &CrateContext, def_id: DefId) -> ValueRef {\n \n         for attr in attrs {\n             if attr.check_name(\"thread_local\") {\n-                llvm::set_thread_local(g, true);\n+                llvm::set_thread_local_mode(g, get_tls_model(ccx.sess()));\n             }\n         }\n \n@@ -215,7 +216,7 @@ pub fn get_static(ccx: &CrateContext, def_id: DefId) -> ValueRef {\n         // symbol and another one doesn't.\n         for attr in ccx.tcx().get_attrs(def_id).iter() {\n             if attr.check_name(\"thread_local\") {\n-                llvm::set_thread_local(g, true);\n+                llvm::set_thread_local_mode(g, get_tls_model(ccx.sess()));\n             }\n         }\n         if ccx.use_dll_storage_attrs() && !ccx.tcx().is_foreign_item(def_id) {\n@@ -305,9 +306,8 @@ pub fn trans_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n         debuginfo::create_global_var_metadata(ccx, id, g);\n \n-        if attr::contains_name(attrs,\n-                               \"thread_local\") {\n-            llvm::set_thread_local(g, true);\n+        if attr::contains_name(attrs, \"thread_local\") {\n+            llvm::set_thread_local_mode(g, get_tls_model(ccx.sess()));\n         }\n \n         base::set_link_section(ccx, g, attrs);"}, {"sha": "afdbc31c456bbd23c9e14f8bc4884bad03e280ad", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b233a6e0968c48719c066b8ba4d247925071f680/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b233a6e0968c48719c066b8ba4d247925071f680/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=b233a6e0968c48719c066b8ba4d247925071f680", "patch": "@@ -166,6 +166,24 @@ pub fn get_reloc_model(sess: &Session) -> llvm::RelocMode {\n     }\n }\n \n+pub fn get_tls_model(sess: &Session) -> llvm::ThreadLocalMode {\n+    let tls_model_arg = match sess.opts.cg.tls_model {\n+        Some(ref s) => &s[..],\n+        None => &sess.target.target.options.tls_model[..],\n+    };\n+\n+    match ::back::write::TLS_MODEL_ARGS.iter().find(\n+        |&&arg| arg.0 == tls_model_arg) {\n+        Some(x) => x.1,\n+        _ => {\n+            sess.err(&format!(\"{:?} is not a valid TLS model\",\n+                              tls_model_arg));\n+            sess.abort_if_errors();\n+            bug!();\n+        }\n+    }\n+}\n+\n fn is_any_library(sess: &Session) -> bool {\n     sess.crate_types.borrow().iter().any(|ty| {\n         *ty != config::CrateTypeExecutable"}]}