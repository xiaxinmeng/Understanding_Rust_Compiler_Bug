{"sha": "8e748420896cfbf55e1a3cd8c51e4aba499cfb2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNzQ4NDIwODk2Y2ZiZjU1ZTFhM2NkOGM1MWU0YWJhNDk5Y2ZiMmQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-01-06T15:07:47Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-02-10T19:46:44Z"}, "message": "resolve: Remove visibility hacks for enum variants and trait items\n\nSpecial treatment like this was necessary before `pub(restricted)` had been implemented and only two visibilities existed - `pub` and non-`pub`.\nNow it's no longer necessary and the desired behavior follows from `pub(restricted)`-style visibilities naturally assigned to enum variants and trait items.", "tree": {"sha": "eee48756780d18a754a875d4781218a0caa08b7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eee48756780d18a754a875d4781218a0caa08b7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d", "html_url": "https://github.com/rust-lang/rust/commit/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4b6b62e70f94c949b82f669498a925e3d4c3c2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4b6b62e70f94c949b82f669498a925e3d4c3c2b", "html_url": "https://github.com/rust-lang/rust/commit/b4b6b62e70f94c949b82f669498a925e3d4c3c2b"}], "stats": {"total": 217, "additions": 80, "deletions": 137}, "files": [{"sha": "79ed0b5308dabb91cf15bf44b757c615642ff66c", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=8e748420896cfbf55e1a3cd8c51e4aba499cfb2d", "patch": "@@ -1398,10 +1398,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n             let parent = self.parent_scope.module;\n             let expansion = self.parent_scope.expansion;\n             let res = Res::Def(def_kind, def_id);\n-            // FIXME: For historical reasons the binding visibility is set to public,\n-            // use actual visibility here instead, using enum variants as an example.\n-            let vis_hack = ty::Visibility::Public;\n-            self.r.define(parent, item.ident, ns, (res, vis_hack, item.span, expansion));\n+            self.r.define(parent, item.ident, ns, (res, vis, item.span, expansion));\n         }\n \n         visit::walk_assoc_item(self, item, ctxt);"}, {"sha": "bd0296751a535a5877b396ce5bae34f735222379", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 7, "deletions": 74, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=8e748420896cfbf55e1a3cd8c51e4aba499cfb2d", "patch": "@@ -18,11 +18,10 @@ use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_hir::def::{self, PartialRes};\n use rustc_hir::def_id::DefId;\n use rustc_middle::hir::exports::Export;\n+use rustc_middle::span_bug;\n use rustc_middle::ty;\n-use rustc_middle::{bug, span_bug};\n use rustc_session::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n-use rustc_session::DiagnosticMessageId;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, Ident, Symbol};\n@@ -456,13 +455,13 @@ impl<'a> Resolver<'a> {\n         binding: &'a NameBinding<'a>,\n         import: &'a Import<'a>,\n     ) -> &'a NameBinding<'a> {\n-        let vis = if binding.pseudo_vis().is_at_least(import.vis.get(), self) ||\n+        let vis = if binding.vis.is_at_least(import.vis.get(), self) ||\n                      // cf. `PUB_USE_OF_PRIVATE_EXTERN_CRATE`\n                      !import.is_glob() && binding.is_extern_crate()\n         {\n             import.vis.get()\n         } else {\n-            binding.pseudo_vis()\n+            binding.vis\n         };\n \n         if let ImportKind::Glob { ref max_vis, .. } = import.kind {\n@@ -1178,7 +1177,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n         self.r.per_ns(|this, ns| {\n             if let Ok(binding) = source_bindings[ns].get() {\n                 let vis = import.vis.get();\n-                if !binding.pseudo_vis().is_at_least(vis, &*this) {\n+                if !binding.vis.is_at_least(vis, &*this) {\n                     reexport_error = Some((ns, binding));\n                 } else {\n                     any_successful_reexport = true;\n@@ -1362,7 +1361,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 Some(None) => import.parent_scope.module,\n                 None => continue,\n             };\n-            if self.r.is_accessible_from(binding.pseudo_vis(), scope) {\n+            if self.r.is_accessible_from(binding.vis, scope) {\n                 let imported_binding = self.r.import(binding, import);\n                 let _ = self.r.try_define(import.parent_scope.module, key, imported_binding);\n             }\n@@ -1380,9 +1379,8 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n \n         let mut reexports = Vec::new();\n \n-        module.for_each_child(self.r, |this, ident, ns, binding| {\n-            // Filter away ambiguous imports and anything that has def-site\n-            // hygiene.\n+        module.for_each_child(self.r, |this, ident, _, binding| {\n+            // Filter away ambiguous imports and anything that has def-site hygiene.\n             // FIXME: Implement actual cross-crate hygiene.\n             let is_good_import =\n                 binding.is_import() && !binding.is_ambiguity() && !ident.span.from_expansion();\n@@ -1392,71 +1390,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     reexports.push(Export { ident, res, span: binding.span, vis: binding.vis });\n                 }\n             }\n-\n-            if let NameBindingKind::Import { binding: orig_binding, import, .. } = binding.kind {\n-                if ns == TypeNS\n-                    && orig_binding.is_variant()\n-                    && !orig_binding.vis.is_at_least(binding.vis, &*this)\n-                {\n-                    let msg = match import.kind {\n-                        ImportKind::Single { .. } => {\n-                            format!(\"variant `{}` is private and cannot be re-exported\", ident)\n-                        }\n-                        ImportKind::Glob { .. } => {\n-                            let msg = \"enum is private and its variants \\\n-                                           cannot be re-exported\"\n-                                .to_owned();\n-                            let error_id = (\n-                                DiagnosticMessageId::ErrorId(0), // no code?!\n-                                Some(binding.span),\n-                                msg.clone(),\n-                            );\n-                            let fresh =\n-                                this.session.one_time_diagnostics.borrow_mut().insert(error_id);\n-                            if !fresh {\n-                                return;\n-                            }\n-                            msg\n-                        }\n-                        ref s => bug!(\"unexpected import kind {:?}\", s),\n-                    };\n-                    let mut err = this.session.struct_span_err(binding.span, &msg);\n-\n-                    let imported_module = match import.imported_module.get() {\n-                        Some(ModuleOrUniformRoot::Module(module)) => module,\n-                        _ => bug!(\"module should exist\"),\n-                    };\n-                    let parent_module = imported_module.parent.expect(\"parent should exist\");\n-                    let resolutions = this.resolutions(parent_module).borrow();\n-                    let enum_path_segment_index = import.module_path.len() - 1;\n-                    let enum_ident = import.module_path[enum_path_segment_index].ident;\n-\n-                    let key = this.new_key(enum_ident, TypeNS);\n-                    let enum_resolution = resolutions.get(&key).expect(\"resolution should exist\");\n-                    let enum_span =\n-                        enum_resolution.borrow().binding.expect(\"binding should exist\").span;\n-                    let enum_def_span = this.session.source_map().guess_head_span(enum_span);\n-                    let enum_def_snippet = this\n-                        .session\n-                        .source_map()\n-                        .span_to_snippet(enum_def_span)\n-                        .expect(\"snippet should exist\");\n-                    // potentially need to strip extant `crate`/`pub(path)` for suggestion\n-                    let after_vis_index = enum_def_snippet\n-                        .find(\"enum\")\n-                        .expect(\"`enum` keyword should exist in snippet\");\n-                    let suggestion = format!(\"pub {}\", &enum_def_snippet[after_vis_index..]);\n-\n-                    this.session.diag_span_suggestion_once(\n-                        &mut err,\n-                        DiagnosticMessageId::ErrorId(0),\n-                        enum_def_span,\n-                        \"consider making the enum public\",\n-                        suggestion,\n-                    );\n-                    err.emit();\n-                }\n-            }\n         });\n \n         if !reexports.is_empty() {"}, {"sha": "bca3c7b1b03d3d773b419852acf155891859270f", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=8e748420896cfbf55e1a3cd8c51e4aba499cfb2d", "patch": "@@ -750,27 +750,12 @@ impl<'a> NameBinding<'a> {\n     fn is_possibly_imported_variant(&self) -> bool {\n         match self.kind {\n             NameBindingKind::Import { binding, .. } => binding.is_possibly_imported_variant(),\n-            _ => self.is_variant(),\n-        }\n-    }\n-\n-    // We sometimes need to treat variants as `pub` for backwards compatibility.\n-    fn pseudo_vis(&self) -> ty::Visibility {\n-        if self.is_variant() && self.res().def_id().is_local() {\n-            ty::Visibility::Public\n-        } else {\n-            self.vis\n-        }\n-    }\n-\n-    fn is_variant(&self) -> bool {\n-        matches!(\n-            self.kind,\n             NameBindingKind::Res(\n                 Res::Def(DefKind::Variant | DefKind::Ctor(CtorOf::Variant, ..), _),\n                 _,\n-            )\n-        )\n+            ) => true,\n+            NameBindingKind::Res(..) | NameBindingKind::Module(..) => false,\n+        }\n     }\n \n     fn is_extern_crate(&self) -> bool {"}, {"sha": "8f9dc4bc945df0e2c4f9a29c22f7ad060513e5d1", "filename": "src/test/ui/privacy/issue-46209-private-enum-variant-reexport.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/src%2Ftest%2Fui%2Fprivacy%2Fissue-46209-private-enum-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/src%2Ftest%2Fui%2Fprivacy%2Fissue-46209-private-enum-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-46209-private-enum-variant-reexport.rs?ref=8e748420896cfbf55e1a3cd8c51e4aba499cfb2d", "patch": "@@ -1,15 +1,16 @@\n #![feature(crate_visibility_modifier)]\n \n+#[deny(unused_imports)]\n mod rank {\n     pub use self::Professor::*;\n-    //~^ ERROR enum is private and its variants cannot be re-exported\n+    //~^ ERROR glob import doesn't reexport anything\n     pub use self::Lieutenant::{JuniorGrade, Full};\n-    //~^ ERROR variant `JuniorGrade` is private and cannot be re-exported\n-    //~| ERROR variant `Full` is private and cannot be re-exported\n+    //~^ ERROR `JuniorGrade` is private, and cannot be re-exported\n+    //~| ERROR `Full` is private, and cannot be re-exported\n     pub use self::PettyOfficer::*;\n-    //~^ ERROR enum is private and its variants cannot be re-exported\n+    //~^ ERROR glob import doesn't reexport anything\n     pub use self::Crewman::*;\n-    //~^ ERROR enum is private and its variants cannot be re-exported\n+    //~^ ERROR glob import doesn't reexport anything\n \n     enum Professor {\n         Adjunct,"}, {"sha": "d4d9b31ed831f3da2bed0cd76f192127eea5ac35", "filename": "src/test/ui/privacy/issue-46209-private-enum-variant-reexport.stderr", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/src%2Ftest%2Fui%2Fprivacy%2Fissue-46209-private-enum-variant-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/src%2Ftest%2Fui%2Fprivacy%2Fissue-46209-private-enum-variant-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-46209-private-enum-variant-reexport.stderr?ref=8e748420896cfbf55e1a3cd8c51e4aba499cfb2d", "patch": "@@ -1,44 +1,51 @@\n-error: variant `JuniorGrade` is private and cannot be re-exported\n-  --> $DIR/issue-46209-private-enum-variant-reexport.rs:6:32\n+error[E0364]: `JuniorGrade` is private, and cannot be re-exported\n+  --> $DIR/issue-46209-private-enum-variant-reexport.rs:7:32\n+   |\n+LL |     pub use self::Lieutenant::{JuniorGrade, Full};\n+   |                                ^^^^^^^^^^^\n+   |\n+note: consider marking `JuniorGrade` as `pub` in the imported module\n+  --> $DIR/issue-46209-private-enum-variant-reexport.rs:7:32\n    |\n LL |     pub use self::Lieutenant::{JuniorGrade, Full};\n    |                                ^^^^^^^^^^^\n-...\n-LL |     enum Lieutenant {\n-   |     --------------- help: consider making the enum public: `pub enum Lieutenant`\n \n-error: variant `Full` is private and cannot be re-exported\n-  --> $DIR/issue-46209-private-enum-variant-reexport.rs:6:45\n+error[E0364]: `Full` is private, and cannot be re-exported\n+  --> $DIR/issue-46209-private-enum-variant-reexport.rs:7:45\n+   |\n+LL |     pub use self::Lieutenant::{JuniorGrade, Full};\n+   |                                             ^^^^\n+   |\n+note: consider marking `Full` as `pub` in the imported module\n+  --> $DIR/issue-46209-private-enum-variant-reexport.rs:7:45\n    |\n LL |     pub use self::Lieutenant::{JuniorGrade, Full};\n    |                                             ^^^^\n \n-error: enum is private and its variants cannot be re-exported\n-  --> $DIR/issue-46209-private-enum-variant-reexport.rs:4:13\n+error: glob import doesn't reexport anything because no candidate is public enough\n+  --> $DIR/issue-46209-private-enum-variant-reexport.rs:5:13\n    |\n LL |     pub use self::Professor::*;\n    |             ^^^^^^^^^^^^^^^^^^\n-...\n-LL |     enum Professor {\n-   |     -------------- help: consider making the enum public: `pub enum Professor`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-46209-private-enum-variant-reexport.rs:3:8\n+   |\n+LL | #[deny(unused_imports)]\n+   |        ^^^^^^^^^^^^^^\n \n-error: enum is private and its variants cannot be re-exported\n-  --> $DIR/issue-46209-private-enum-variant-reexport.rs:9:13\n+error: glob import doesn't reexport anything because no candidate is public enough\n+  --> $DIR/issue-46209-private-enum-variant-reexport.rs:10:13\n    |\n LL |     pub use self::PettyOfficer::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     pub(in rank) enum PettyOfficer {\n-   |     ------------------------------ help: consider making the enum public: `pub enum PettyOfficer`\n \n-error: enum is private and its variants cannot be re-exported\n-  --> $DIR/issue-46209-private-enum-variant-reexport.rs:11:13\n+error: glob import doesn't reexport anything because no candidate is public enough\n+  --> $DIR/issue-46209-private-enum-variant-reexport.rs:12:13\n    |\n LL |     pub use self::Crewman::*;\n    |             ^^^^^^^^^^^^^^^^\n-...\n-LL |     crate enum Crewman {\n-   |     ------------------ help: consider making the enum public: `pub enum Crewman`\n \n error: aborting due to 5 previous errors\n \n+For more information about this error, try `rustc --explain E0364`."}, {"sha": "ce1b0d321ca5038b646884f5e9134a0577416274", "filename": "src/test/ui/privacy/private-variant-reexport.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.rs?ref=8e748420896cfbf55e1a3cd8c51e4aba499cfb2d", "patch": "@@ -1,17 +1,18 @@\n mod m1 {\n-    pub use ::E::V; //~ ERROR variant `V` is private and cannot be re-exported\n+    pub use ::E::V; //~ ERROR `V` is private, and cannot be re-exported\n }\n \n mod m2 {\n-    pub use ::E::{V}; //~ ERROR variant `V` is private and cannot be re-exported\n+    pub use ::E::{V}; //~ ERROR `V` is private, and cannot be re-exported\n }\n \n mod m3 {\n-    pub use ::E::V::{self}; //~ ERROR variant `V` is private and cannot be re-exported\n+    pub use ::E::V::{self}; //~ ERROR `V` is private, and cannot be re-exported\n }\n \n+#[deny(unused_imports)]\n mod m4 {\n-    pub use ::E::*; //~ ERROR enum is private and its variants cannot be re-exported\n+    pub use ::E::*; //~ ERROR glob import doesn't reexport anything\n }\n \n enum E { V }"}, {"sha": "7a4c3234dbe6fc490d151bfd9d182ac13d33a6f5", "filename": "src/test/ui/privacy/private-variant-reexport.stderr", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-variant-reexport.stderr?ref=8e748420896cfbf55e1a3cd8c51e4aba499cfb2d", "patch": "@@ -1,29 +1,48 @@\n-error: variant `V` is private and cannot be re-exported\n+error[E0364]: `V` is private, and cannot be re-exported\n+  --> $DIR/private-variant-reexport.rs:2:13\n+   |\n+LL |     pub use ::E::V;\n+   |             ^^^^^^\n+   |\n+note: consider marking `V` as `pub` in the imported module\n   --> $DIR/private-variant-reexport.rs:2:13\n    |\n LL |     pub use ::E::V;\n    |             ^^^^^^\n-...\n-LL | enum E { V }\n-   | ------ help: consider making the enum public: `pub enum E`\n \n-error: variant `V` is private and cannot be re-exported\n+error[E0364]: `V` is private, and cannot be re-exported\n+  --> $DIR/private-variant-reexport.rs:6:19\n+   |\n+LL |     pub use ::E::{V};\n+   |                   ^\n+   |\n+note: consider marking `V` as `pub` in the imported module\n   --> $DIR/private-variant-reexport.rs:6:19\n    |\n LL |     pub use ::E::{V};\n    |                   ^\n \n-error: variant `V` is private and cannot be re-exported\n+error[E0365]: `V` is private, and cannot be re-exported\n   --> $DIR/private-variant-reexport.rs:10:22\n    |\n LL |     pub use ::E::V::{self};\n-   |                      ^^^^\n+   |                      ^^^^ re-export of private `V`\n+   |\n+   = note: consider declaring type or module `V` with `pub`\n \n-error: enum is private and its variants cannot be re-exported\n-  --> $DIR/private-variant-reexport.rs:14:13\n+error: glob import doesn't reexport anything because no candidate is public enough\n+  --> $DIR/private-variant-reexport.rs:15:13\n    |\n LL |     pub use ::E::*;\n    |             ^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/private-variant-reexport.rs:13:8\n+   |\n+LL | #[deny(unused_imports)]\n+   |        ^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n \n+Some errors have detailed explanations: E0364, E0365.\n+For more information about an error, try `rustc --explain E0364`."}, {"sha": "975e471fe34fadbbe1d636af1f3a0ad50c1d712a", "filename": "src/test/ui/variants/variant-namespacing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/src%2Ftest%2Fui%2Fvariants%2Fvariant-namespacing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e748420896cfbf55e1a3cd8c51e4aba499cfb2d/src%2Ftest%2Fui%2Fvariants%2Fvariant-namespacing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariants%2Fvariant-namespacing.rs?ref=8e748420896cfbf55e1a3cd8c51e4aba499cfb2d", "patch": "@@ -1,6 +1,6 @@\n // aux-build:variant-namespacing.rs\n \n-enum E {\n+pub enum E {\n     Struct { a: u8 },\n     Tuple(u8),\n     Unit,"}]}