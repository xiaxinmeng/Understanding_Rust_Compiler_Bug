{"sha": "1db60512b63165e0a4b6c525d26020830f5057bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYjYwNTEyYjYzMTY1ZTBhNGI2YzUyNWQyNjAyMDgzMGY1MDU3YmI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-02T13:06:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-02T13:06:34Z"}, "message": "Merge #6673\n\n6673: Show type of Self on hover r=matklad a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "1a48e81bf2ae6c48d92e551532440cea996cfb3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a48e81bf2ae6c48d92e551532440cea996cfb3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1db60512b63165e0a4b6c525d26020830f5057bb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfx5FaCRBK7hj4Ov3rIwAAdHIIAFcvKNUYL0iZFqlKQZClrTCy\n9BExAYIW6EE1e1iTf5ahpAXeedT9aMJlKFUrWzM41/79n+uZ/IvvYTFOtVmV6KlQ\n3Q6oEwYLIlSy2Pecs8grTdewd7siJsRsFtcIW5Dvlj8IrDqQZzIWoeDfHxm6E15B\ngIg4LcUDHiuk3UkQH/yKDcRGux4TQfhRvrQU+hyeNdDNd4OIxNoKLpMyd0znSwWQ\nykgOPXmQwO+uY6AVWhxhm1M3A5OyNhFN9T42r62nXBxaBA+g/HjrjEKM1vPIpTao\n8fOD8NB8E/Qj5+lyWATnb2CpIcw0jHuW6+GeDz1EtLgP4oCLzWTAXD8yS2PZtA4=\n=TB9q\n-----END PGP SIGNATURE-----\n", "payload": "tree 1a48e81bf2ae6c48d92e551532440cea996cfb3b\nparent a8f04712d6a36c5ce870135767d92203a1b2c8ad\nparent 9349d9ee4826279e9ae4e76fe1bf67f18781174a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606914394 +0000\ncommitter GitHub <noreply@github.com> 1606914394 +0000\n\nMerge #6673\n\n6673: Show type of Self on hover r=matklad a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1db60512b63165e0a4b6c525d26020830f5057bb", "html_url": "https://github.com/rust-lang/rust/commit/1db60512b63165e0a4b6c525d26020830f5057bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1db60512b63165e0a4b6c525d26020830f5057bb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8f04712d6a36c5ce870135767d92203a1b2c8ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f04712d6a36c5ce870135767d92203a1b2c8ad", "html_url": "https://github.com/rust-lang/rust/commit/a8f04712d6a36c5ce870135767d92203a1b2c8ad"}, {"sha": "9349d9ee4826279e9ae4e76fe1bf67f18781174a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9349d9ee4826279e9ae4e76fe1bf67f18781174a", "html_url": "https://github.com/rust-lang/rust/commit/9349d9ee4826279e9ae4e76fe1bf67f18781174a"}], "stats": {"total": 119, "additions": 74, "deletions": 45}, "files": [{"sha": "462f5c2b8b9ccff4dc844611b790d5dffa839e53", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 74, "deletions": 45, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/1db60512b63165e0a4b6c525d26020830f5057bb/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1db60512b63165e0a4b6c525d26020830f5057bb/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=1db60512b63165e0a4b6c525d26020830f5057bb", "patch": "@@ -295,7 +295,6 @@ fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String>\n             ModuleDef::EnumVariant(e) => Some(e.parent_enum(db).name(db)),\n             _ => None,\n         },\n-        Definition::SelfType(i) => i.target_ty(db).as_adt().map(|adt| adt.name(db)),\n         _ => None,\n     }\n     .map(|name| name.to_string())\n@@ -357,7 +356,14 @@ fn hover_for_definition(db: &RootDatabase, def: Definition) -> Option<Markup> {\n             ModuleDef::BuiltinType(it) => return Some(it.to_string().into()),\n         },\n         Definition::Local(it) => return Some(Markup::fenced_block(&it.ty(db).display(db))),\n-        Definition::TypeParam(_) | Definition::SelfType(_) => {\n+        Definition::SelfType(impl_def) => {\n+            impl_def.target_ty(db).as_adt().and_then(|adt| match adt {\n+                Adt::Struct(it) => from_def_source(db, it, mod_path),\n+                Adt::Union(it) => from_def_source(db, it, mod_path),\n+                Adt::Enum(it) => from_def_source(db, it, mod_path),\n+            })\n+        }\n+        Definition::TypeParam(_) => {\n             // FIXME: Hover for generic param\n             None\n         }\n@@ -1025,52 +1031,75 @@ impl Thing {\n }\n \"#,\n             expect![[r#\"\n-                *Self { x: 0 }*\n+                *Self*\n+\n                 ```rust\n-                Thing\n+                test\n+                ```\n+\n+                ```rust\n+                struct Thing\n                 ```\n             \"#]],\n-        )\n-    } /* FIXME: revive these tests\n-              let (analysis, position) = fixture::position(\n-                  \"\n-                  struct Thing { x: u32 }\n-                  impl Thing {\n-                      fn new() -> Self<|> {\n-                          Self { x: 0 }\n-                      }\n-                  }\n-                  \",\n-              );\n-\n-              let hover = analysis.hover(position).unwrap().unwrap();\n-              assert_eq!(trim_markup(&hover.info.markup.as_str()), (\"Thing\"));\n-\n-              let (analysis, position) = fixture::position(\n-                  \"\n-                  enum Thing { A }\n-                  impl Thing {\n-                      pub fn new() -> Self<|> {\n-                          Thing::A\n-                      }\n-                  }\n-                  \",\n-              );\n-              let hover = analysis.hover(position).unwrap().unwrap();\n-              assert_eq!(trim_markup(&hover.info.markup.as_str()), (\"enum Thing\"));\n-\n-              let (analysis, position) = fixture::position(\n-                  \"\n-                  enum Thing { A }\n-                  impl Thing {\n-                      pub fn thing(a: Self<|>) {\n-                      }\n-                  }\n-                  \",\n-              );\n-              let hover = analysis.hover(position).unwrap().unwrap();\n-              assert_eq!(trim_markup(&hover.info.markup.as_str()), (\"enum Thing\"));\n-      */\n+        );\n+        check(\n+            r#\"\n+struct Thing { x: u32 }\n+impl Thing {\n+    fn new() -> Self<|> { Self { x: 0 } }\n+}\n+\"#,\n+            expect![[r#\"\n+                *Self*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                struct Thing\n+                ```\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+enum Thing { A }\n+impl Thing {\n+    pub fn new() -> Self<|> { Thing::A }\n+}\n+\"#,\n+            expect![[r#\"\n+                *Self*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                enum Thing\n+                ```\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+        enum Thing { A }\n+        impl Thing {\n+            pub fn thing(a: Self<|>) {}\n+        }\n+        \"#,\n+            expect![[r#\"\n+                *Self*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                enum Thing\n+                ```\n+            \"#]],\n+        );\n+    }\n \n     #[test]\n     fn test_hover_shadowing_pat() {"}]}