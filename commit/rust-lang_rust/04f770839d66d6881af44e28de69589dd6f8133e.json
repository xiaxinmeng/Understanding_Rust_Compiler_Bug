{"sha": "04f770839d66d6881af44e28de69589dd6f8133e", "node_id": "C_kwDOAAsO6NoAKDA0Zjc3MDgzOWQ2NmQ2ODgxYWY0NGUyOGRlNjk1ODlkZDZmODEzM2U", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-09T04:01:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-09T04:01:25Z"}, "message": "Rollup merge of #107713 - nnethercote:extend-BYTE_SLICE_IN_PACKED_STRUCT_WITH_DERIVE, r=RalfJung\n\nExtend `BYTE_SLICE_IN_PACKED_STRUCT_WITH_DERIVE`.\n\nTo temporarily allow a `str` field in a packed struct using `derive`, along with `[u8]`.\n\nr? ``@RalfJung``", "tree": {"sha": "fdc6a7126d2873b7577deabbe5e0be7afdb8e094", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdc6a7126d2873b7577deabbe5e0be7afdb8e094"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04f770839d66d6881af44e28de69589dd6f8133e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj5HAVCRBK7hj4Ov3rIwAARh4IAGi9unQ53GKZ1m/JR8s0CQ47\nOKyTBiTcUpVU97+IZXJdgAFOHyen4I867QmCvzeBqyCaswh3vxrUT8ntQO6iJhiF\ngHE3gB6WyoJHR/uE55hzQoT4uBChl5xEEW2aPH9rVculsenbmv5LHcwWHBs2fQUb\nN2IqRxu/xL1iOIK6I+QokzfyWMsf/qi0uNFDAgYkLZHUQv4f1qenExFgx3tDkMV3\n0xIkv0fNgCpb2UEgDFlFxLfQwGr1EdX3I4kamtzVaCM98A1i0Xemdz4uF8ms0ibd\nn9bE1+HJQQ6USXhmKbvrMDp07oa1XIc20DI9mb0Wf5wUfWO76oyVHZ6OG3YNlUM=\n=XSzC\n-----END PGP SIGNATURE-----\n", "payload": "tree fdc6a7126d2873b7577deabbe5e0be7afdb8e094\nparent aee4570adfa73922629bb51898f1234f6075436a\nparent a70d03b62454f57672e14b48715ae10c01e5fd34\nauthor Michael Goulet <michael@errs.io> 1675915285 -0800\ncommitter GitHub <noreply@github.com> 1675915285 -0800\n\nRollup merge of #107713 - nnethercote:extend-BYTE_SLICE_IN_PACKED_STRUCT_WITH_DERIVE, r=RalfJung\n\nExtend `BYTE_SLICE_IN_PACKED_STRUCT_WITH_DERIVE`.\n\nTo temporarily allow a `str` field in a packed struct using `derive`, along with `[u8]`.\n\nr? ``@RalfJung``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04f770839d66d6881af44e28de69589dd6f8133e", "html_url": "https://github.com/rust-lang/rust/commit/04f770839d66d6881af44e28de69589dd6f8133e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04f770839d66d6881af44e28de69589dd6f8133e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aee4570adfa73922629bb51898f1234f6075436a", "url": "https://api.github.com/repos/rust-lang/rust/commits/aee4570adfa73922629bb51898f1234f6075436a", "html_url": "https://github.com/rust-lang/rust/commit/aee4570adfa73922629bb51898f1234f6075436a"}, {"sha": "a70d03b62454f57672e14b48715ae10c01e5fd34", "url": "https://api.github.com/repos/rust-lang/rust/commits/a70d03b62454f57672e14b48715ae10c01e5fd34", "html_url": "https://github.com/rust-lang/rust/commit/a70d03b62454f57672e14b48715ae10c01e5fd34"}], "stats": {"total": 106, "additions": 81, "deletions": 25}, "files": [{"sha": "970b9115d8d79639aa232db382c0936dbad366e9", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/04f770839d66d6881af44e28de69589dd6f8133e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f770839d66d6881af44e28de69589dd6f8133e/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=04f770839d66d6881af44e28de69589dd6f8133e", "patch": "@@ -1557,31 +1557,46 @@ impl<'a> TraitDef<'a> {\n                             }),\n                         ),\n                     );\n-                    // In general, fields in packed structs are copied via a\n-                    // block, e.g. `&{self.0}`. The one exception is `[u8]`\n-                    // fields, which cannot be copied and also never cause\n-                    // unaligned references. This exception is allowed to\n-                    // handle the `FlexZeroSlice` type in the `zerovec` crate\n-                    // within `icu4x-0.9.0`.\n-                    //\n-                    // Once use of `icu4x-0.9.0` has dropped sufficiently, this\n-                    // exception should be removed.\n-                    let is_u8_slice = if let TyKind::Slice(ty) = &struct_field.ty.kind &&\n-                        let TyKind::Path(None, rustc_ast::Path { segments, .. }) = &ty.kind &&\n-                        let [seg] = segments.as_slice() &&\n-                        seg.ident.name == sym::u8 && seg.args.is_none()\n-                    {\n-                        true\n-                    } else {\n-                        false\n-                    };\n                     if is_packed {\n-                        if is_u8_slice {\n+                        // In general, fields in packed structs are copied via a\n+                        // block, e.g. `&{self.0}`. The two exceptions are `[u8]`\n+                        // and `str` fields, which cannot be copied and also never\n+                        // cause unaligned references. These exceptions are allowed\n+                        // to handle the `FlexZeroSlice` type in the `zerovec`\n+                        // crate within `icu4x-0.9.0`.\n+                        //\n+                        // Once use of `icu4x-0.9.0` has dropped sufficiently, this\n+                        // exception should be removed.\n+                        let is_simple_path = |ty: &P<ast::Ty>, sym| {\n+                            if let TyKind::Path(None, ast::Path { segments, .. }) = &ty.kind &&\n+                                let [seg] = segments.as_slice() &&\n+                                seg.ident.name == sym && seg.args.is_none()\n+                            {\n+                                true\n+                            } else {\n+                                false\n+                            }\n+                        };\n+\n+                        let exception = if let TyKind::Slice(ty) = &struct_field.ty.kind &&\n+                            is_simple_path(ty, sym::u8)\n+                        {\n+                            Some(\"byte\")\n+                        } else if is_simple_path(&struct_field.ty, sym::str) {\n+                            Some(\"string\")\n+                        } else {\n+                            None\n+                        };\n+\n+                        if let Some(ty) = exception {\n                             cx.sess.parse_sess.buffer_lint_with_diagnostic(\n                                 BYTE_SLICE_IN_PACKED_STRUCT_WITH_DERIVE,\n                                 sp,\n                                 ast::CRATE_NODE_ID,\n-                                \"byte slice in a packed struct that derives a built-in trait\",\n+                                &format!(\n+                                    \"{} slice in a packed struct that derives a built-in trait\",\n+                                    ty\n+                                ),\n                                 rustc_lint_defs::BuiltinLintDiagnostics::ByteSliceInPackedStructWithDerive\n                             );\n                         } else {"}, {"sha": "9d8ad9d9ed9f6f5c7d2fa66b7e0d656ba2393581", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/04f770839d66d6881af44e28de69589dd6f8133e/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f770839d66d6881af44e28de69589dd6f8133e/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=04f770839d66d6881af44e28de69589dd6f8133e", "patch": "@@ -4073,7 +4073,8 @@ declare_lint! {\n \n declare_lint! {\n     /// The `byte_slice_in_packed_struct_with_derive` lint detects cases where a byte slice field\n-    /// (`[u8]`) is used in a `packed` struct that derives one or more built-in traits.\n+    /// (`[u8]`) or string slice field (`str`) is used in a `packed` struct that derives one or\n+    /// more built-in traits.\n     ///\n     /// ### Example\n     ///\n@@ -4091,11 +4092,11 @@ declare_lint! {\n     /// ### Explanation\n     ///\n     /// This was previously accepted but is being phased out, because fields in packed structs are\n-    /// now required to implement `Copy` for `derive` to work. Byte slices are a temporary\n-    /// exception because certain crates depended on them.\n+    /// now required to implement `Copy` for `derive` to work. Byte slices and string slices are a\n+    /// temporary exception because certain crates depended on them.\n     pub BYTE_SLICE_IN_PACKED_STRUCT_WITH_DERIVE,\n     Warn,\n-    \"`[u8]` slice used in a packed struct with `derive`\",\n+    \"`[u8]` or `str` used in a packed struct with `derive`\",\n     @future_incompatible = FutureIncompatibleInfo {\n         reference: \"issue #107457 <https://github.com/rust-lang/rust/issues/107457>\",\n         reason: FutureIncompatibilityReason::FutureReleaseErrorReportNow,"}, {"sha": "58be4519720178b8fab1f5504fc43607bc8e05a9", "filename": "tests/ui/derives/deriving-with-repr-packed.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/04f770839d66d6881af44e28de69589dd6f8133e/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f770839d66d6881af44e28de69589dd6f8133e/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.rs?ref=04f770839d66d6881af44e28de69589dd6f8133e", "patch": "@@ -33,4 +33,14 @@ struct FlexZeroSlice {\n     //~^^ this was previously accepted\n }\n \n+// Again, currently allowed, but will be phased out.\n+#[derive(Debug)]\n+#[repr(packed)]\n+struct WithStr {\n+    width: u8,\n+    data: str,\n+    //~^ WARNING string slice in a packed struct that derives a built-in trait\n+    //~^^ this was previously accepted\n+}\n+\n fn main() {}"}, {"sha": "0cfe03869af1bd6846e3e836dca9d12ee5f37fd0", "filename": "tests/ui/derives/deriving-with-repr-packed.stderr", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/04f770839d66d6881af44e28de69589dd6f8133e/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04f770839d66d6881af44e28de69589dd6f8133e/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderiving-with-repr-packed.stderr?ref=04f770839d66d6881af44e28de69589dd6f8133e", "patch": "@@ -13,6 +13,20 @@ LL |     data: [u8],\n    = note: `#[warn(byte_slice_in_packed_struct_with_derive)]` on by default\n    = note: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+warning: string slice in a packed struct that derives a built-in trait\n+  --> $DIR/deriving-with-repr-packed.rs:41:5\n+   |\n+LL | #[derive(Debug)]\n+   |          ----- in this derive macro expansion\n+...\n+LL |     data: str,\n+   |     ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #107457 <https://github.com/rust-lang/rust/issues/107457>\n+   = help: consider implementing the trait by hand, or remove the `packed` attribute\n+   = note: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error[E0507]: cannot move out of `self` which is behind a shared reference\n   --> $DIR/deriving-with-repr-packed.rs:22:10\n    |\n@@ -24,7 +38,7 @@ LL | struct X(Y);\n    |\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0507`.\n Future incompatibility report: Future breakage diagnostic:\n@@ -43,3 +57,19 @@ LL |     data: [u8],\n    = note: `#[warn(byte_slice_in_packed_struct_with_derive)]` on by default\n    = note: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+Future breakage diagnostic:\n+warning: string slice in a packed struct that derives a built-in trait\n+  --> $DIR/deriving-with-repr-packed.rs:41:5\n+   |\n+LL | #[derive(Debug)]\n+   |          ----- in this derive macro expansion\n+...\n+LL |     data: str,\n+   |     ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #107457 <https://github.com/rust-lang/rust/issues/107457>\n+   = help: consider implementing the trait by hand, or remove the `packed` attribute\n+   = note: `#[warn(byte_slice_in_packed_struct_with_derive)]` on by default\n+   = note: this warning originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}]}