{"sha": "b1be0d64573a5fd02d238a5ad16444f79ce745a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYmUwZDY0NTczYTVmZDAyZDIzOGE1YWQxNjQ0NGY3OWNlNzQ1YTU=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2017-01-31T18:12:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-31T18:12:43Z"}, "message": "Merge pull request #1492 from Manishearth/largeEnumVariant\n\nlarge_enum_variants lint suggests to box variants above a configurable limit", "tree": {"sha": "f9daa05530aa17fb99f945ef7020edba4c8f1bef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9daa05530aa17fb99f945ef7020edba4c8f1bef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1be0d64573a5fd02d238a5ad16444f79ce745a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1be0d64573a5fd02d238a5ad16444f79ce745a5", "html_url": "https://github.com/rust-lang/rust/commit/b1be0d64573a5fd02d238a5ad16444f79ce745a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1be0d64573a5fd02d238a5ad16444f79ce745a5/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "909ef37f0827ac85a9f71210b8634023d77ba0e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/909ef37f0827ac85a9f71210b8634023d77ba0e1", "html_url": "https://github.com/rust-lang/rust/commit/909ef37f0827ac85a9f71210b8634023d77ba0e1"}, {"sha": "12eeffdf93a686f3b61f0b7da73eba6757287750", "url": "https://api.github.com/repos/rust-lang/rust/commits/12eeffdf93a686f3b61f0b7da73eba6757287750", "html_url": "https://github.com/rust-lang/rust/commit/12eeffdf93a686f3b61f0b7da73eba6757287750"}], "stats": {"total": 160, "additions": 159, "deletions": 1}, "files": [{"sha": "cfa110543c16684aa05fc84e729ed2ec821ee602", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1be0d64573a5fd02d238a5ad16444f79ce745a5/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1be0d64573a5fd02d238a5ad16444f79ce745a5/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b1be0d64573a5fd02d238a5ad16444f79ce745a5", "patch": "@@ -337,6 +337,7 @@ All notable changes to this project will be documented in this file.\n [`iter_next_loop`]: https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop\n [`iter_nth`]: https://github.com/Manishearth/rust-clippy/wiki#iter_nth\n [`iter_skip_next`]: https://github.com/Manishearth/rust-clippy/wiki#iter_skip_next\n+[`large_enum_variant`]: https://github.com/Manishearth/rust-clippy/wiki#large_enum_variant\n [`len_without_is_empty`]: https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty\n [`len_zero`]: https://github.com/Manishearth/rust-clippy/wiki#len_zero\n [`let_and_return`]: https://github.com/Manishearth/rust-clippy/wiki#let_and_return"}, {"sha": "18166118361ecb66b7d977eb4e90a139b474f2d1", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1be0d64573a5fd02d238a5ad16444f79ce745a5/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b1be0d64573a5fd02d238a5ad16444f79ce745a5/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b1be0d64573a5fd02d238a5ad16444f79ce745a5", "patch": "@@ -180,7 +180,7 @@ transparently:\n \n ## Lints\n \n-There are 183 lints included in this crate:\n+There are 184 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -255,6 +255,7 @@ name\n [iter_next_loop](https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop)                                       | warn    | for-looping over `_.next()` which is probably not intended\n [iter_nth](https://github.com/Manishearth/rust-clippy/wiki#iter_nth)                                                   | warn    | using `.iter().nth()` on a standard library type with O(1) element access\n [iter_skip_next](https://github.com/Manishearth/rust-clippy/wiki#iter_skip_next)                                       | warn    | using `.skip(x).next()` on an iterator\n+[large_enum_variant](https://github.com/Manishearth/rust-clippy/wiki#large_enum_variant)                               | warn    | large variants on an enum\n [len_without_is_empty](https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty)                           | warn    | traits or impls with a public `len` method but no corresponding `is_empty` method\n [len_zero](https://github.com/Manishearth/rust-clippy/wiki#len_zero)                                                   | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n [let_and_return](https://github.com/Manishearth/rust-clippy/wiki#let_and_return)                                       | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block"}, {"sha": "ca812067878be2a91575f1ad264b0bf802d4a019", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/b1be0d64573a5fd02d238a5ad16444f79ce745a5/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1be0d64573a5fd02d238a5ad16444f79ce745a5/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=b1be0d64573a5fd02d238a5ad16444f79ce745a5", "patch": "@@ -0,0 +1,98 @@\n+//! lint when there are large variants on an enum\n+\n+use rustc::lint::*;\n+use rustc::hir::*;\n+use utils::{span_lint_and_then, snippet_opt};\n+use rustc::ty::layout::TargetDataLayout;\n+use rustc::ty::TypeFoldable;\n+use rustc::traits::Reveal;\n+\n+/// **What it does:** Checks for large variants on `enum`s.\n+///\n+/// **Why is this bad?** Enum size is bounded by the largest variant. Having a large variant\n+/// can penalize the memory layout of that enum.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// enum Test {\n+///    A(i32),\n+///    B([i32; 8000]),\n+/// }\n+/// ```\n+declare_lint! {\n+    pub LARGE_ENUM_VARIANT,\n+    Warn,\n+    \"large variants on an enum\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct LargeEnumVariant {\n+    maximum_variant_size_allowed: u64,\n+}\n+\n+impl LargeEnumVariant {\n+    pub fn new(maximum_variant_size_allowed: u64) -> Self {\n+        LargeEnumVariant { maximum_variant_size_allowed: maximum_variant_size_allowed }\n+    }\n+}\n+\n+impl LintPass for LargeEnumVariant {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(LARGE_ENUM_VARIANT)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeEnumVariant {\n+    fn check_item(&mut self, cx: &LateContext, item: &Item) {\n+        let did = cx.tcx.map.local_def_id(item.id);\n+        if let ItemEnum(ref def, _) = item.node {\n+            let ty = cx.tcx.item_type(did);\n+            let adt = ty.ty_adt_def().expect(\"already checked whether this is an enum\");\n+            for (i, variant) in adt.variants.iter().enumerate() {\n+                let data_layout = TargetDataLayout::parse(cx.sess());\n+                cx.tcx.infer_ctxt((), Reveal::All).enter(|infcx| {\n+                    let size: u64 = variant.fields\n+                        .iter()\n+                        .map(|f| {\n+                            let ty = cx.tcx.item_type(f.did);\n+                            if ty.needs_subst() {\n+                                0 // we can't reason about generics, so we treat them as zero sized\n+                            } else {\n+                                ty.layout(&infcx)\n+                                    .expect(\"layout should be computable for concrete type\")\n+                                    .size(&data_layout)\n+                                    .bytes()\n+                            }\n+                        })\n+                        .sum();\n+                    if size > self.maximum_variant_size_allowed {\n+                        span_lint_and_then(cx,\n+                                           LARGE_ENUM_VARIANT,\n+                                           def.variants[i].span,\n+                                           \"large enum variant found\",\n+                                           |db| {\n+                            if variant.fields.len() == 1 {\n+                                let span = match def.variants[i].node.data {\n+                                    VariantData::Struct(ref fields, _) |\n+                                    VariantData::Tuple(ref fields, _) => fields[0].ty.span,\n+                                    VariantData::Unit(_) => unreachable!(),\n+                                };\n+                                if let Some(snip) = snippet_opt(cx, span) {\n+                                    db.span_suggestion(span,\n+                                                       \"consider boxing the large fields to reduce the total size of \\\n+                                                        the enum\",\n+                                                       format!(\"Box<{}>\", snip));\n+                                    return;\n+                                }\n+                            }\n+                            db.span_help(def.variants[i].span,\n+                                         \"consider boxing the large fields to reduce the total size of the enum\");\n+                        });\n+                    }\n+                });\n+            }\n+        }\n+    }\n+}"}, {"sha": "fb524df1a8fdf6a9bf98bea190a28bad9fc9e51c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1be0d64573a5fd02d238a5ad16444f79ce745a5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1be0d64573a5fd02d238a5ad16444f79ce745a5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b1be0d64573a5fd02d238a5ad16444f79ce745a5", "patch": "@@ -88,6 +88,7 @@ pub mod identity_op;\n pub mod if_let_redundant_pattern_matching;\n pub mod if_not_else;\n pub mod items_after_statements;\n+pub mod large_enum_variant;\n pub mod len_zero;\n pub mod let_if_seq;\n pub mod lifetimes;\n@@ -293,6 +294,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_early_lint_pass(box reference::Pass);\n     reg.register_early_lint_pass(box double_parens::DoubleParens);\n     reg.register_late_lint_pass(box unused_io_amount::UnusedIoAmount);\n+    reg.register_late_lint_pass(box large_enum_variant::LargeEnumVariant::new(conf.enum_variant_size_threshold));\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -384,6 +386,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         functions::TOO_MANY_ARGUMENTS,\n         identity_op::IDENTITY_OP,\n         if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n+        large_enum_variant::LARGE_ENUM_VARIANT,\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,\n         let_if_seq::USELESS_LET_IF_SEQ,"}, {"sha": "cfe3f00b71723037500081c93ef08c7f6c545b5f", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1be0d64573a5fd02d238a5ad16444f79ce745a5/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1be0d64573a5fd02d238a5ad16444f79ce745a5/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=b1be0d64573a5fd02d238a5ad16444f79ce745a5", "patch": "@@ -186,6 +186,8 @@ define_Conf! {\n     (\"too-large-for-stack\", too_large_for_stack, 200 => u64),\n     /// Lint: ENUM_VARIANT_NAMES. The minimum number of enum variants for the lints about variant names to trigger\n     (\"enum-variant-name-threshold\", enum_variant_name_threshold, 3 => u64),\n+    /// Lint: LARGE_ENUM_VARIANT. The maximum size of a emum's variant to avoid box suggestion\n+    (\"enum-variant-size-threshold\", enum_variant_size_threshold, 200 => u64),\n }\n \n /// Search for the configuration file."}, {"sha": "8d289a3283246977168a4feb71dc08b133b10996", "filename": "tests/compile-fail/large_enum_variant.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b1be0d64573a5fd02d238a5ad16444f79ce745a5/tests%2Fcompile-fail%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1be0d64573a5fd02d238a5ad16444f79ce745a5/tests%2Fcompile-fail%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flarge_enum_variant.rs?ref=b1be0d64573a5fd02d238a5ad16444f79ce745a5", "patch": "@@ -0,0 +1,53 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+#![deny(large_enum_variant)]\n+\n+enum LargeEnum {\n+    A(i32),\n+    B([i32; 8000]), //~ ERROR large enum variant found\n+    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n+    //~| SUGGESTION Box<[i32; 8000]>\n+}\n+\n+enum GenericEnum<T> {\n+    A(i32),\n+    B([i32; 8000]), //~ ERROR large enum variant found\n+    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n+    //~| SUGGESTION Box<[i32; 8000]>\n+    C([T; 8000]),\n+    D(T, [i32; 8000]), //~ ERROR large enum variant found\n+    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n+}\n+\n+trait SomeTrait {\n+    type Item;\n+}\n+\n+enum LargeEnumGeneric<A: SomeTrait> {\n+    Var(A::Item), // regression test, this used to ICE\n+}\n+\n+enum AnotherLargeEnum {\n+    VariantOk(i32, u32),\n+    ContainingLargeEnum(LargeEnum), //~ ERROR large enum variant found\n+    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n+    //~| SUGGESTION Box<LargeEnum>\n+    ContainingMoreThanOneField(i32, [i32; 8000], [i32; 9500]), //~ ERROR large enum variant found\n+    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n+    VoidVariant,\n+    StructLikeLittle { x: i32, y: i32 },\n+    StructLikeLarge { x: [i32; 8000], y: i32 }, //~ ERROR large enum variant found\n+    //~^ HELP consider boxing the large fields to reduce the total size of the enum\n+    StructLikeLarge2 { //~ ERROR large enum variant found\n+        x:\n+        [i32; 8000] //~ SUGGESTION Box<[i32; 8000]>\n+        //~^ HELP consider boxing the large fields to reduce the total size of the enum\n+    },\n+}\n+\n+fn main() {\n+\n+}"}]}