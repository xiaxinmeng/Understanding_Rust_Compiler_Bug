{"sha": "fd42918a41c0093ac8db6bcf757f906c6adeaffa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNDI5MThhNDFjMDA5M2FjOGRiNmJjZjc1N2Y5MDZjNmFkZWFmZmE=", "commit": {"author": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-03-25T22:04:42Z"}, "committer": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-03-25T22:04:42Z"}, "message": "Link to PhantomData in NonNull documentation", "tree": {"sha": "5c17325ed6a07462dcd8695a037366785798b5a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c17325ed6a07462dcd8695a037366785798b5a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd42918a41c0093ac8db6bcf757f906c6adeaffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd42918a41c0093ac8db6bcf757f906c6adeaffa", "html_url": "https://github.com/rust-lang/rust/commit/fd42918a41c0093ac8db6bcf757f906c6adeaffa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd42918a41c0093ac8db6bcf757f906c6adeaffa/comments", "author": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c27fb19ba15a2e45485e601a79914c6280196b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c27fb19ba15a2e45485e601a79914c6280196b0", "html_url": "https://github.com/rust-lang/rust/commit/4c27fb19ba15a2e45485e601a79914c6280196b0"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "daae71d36e140444963f95c30a9bee2193321ef6", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd42918a41c0093ac8db6bcf757f906c6adeaffa/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd42918a41c0093ac8db6bcf757f906c6adeaffa/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=fd42918a41c0093ac8db6bcf757f906c6adeaffa", "patch": "@@ -2869,10 +2869,10 @@ impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n /// However the pointer may still dangle if it isn't dereferenced.\n ///\n /// Unlike `*mut T`, `NonNull<T>` is covariant over `T`. If this is incorrect\n-/// for your use case, you should include some PhantomData in your type to\n+/// for your use case, you should include some [`PhantomData`] in your type to\n /// provide invariance, such as `PhantomData<Cell<T>>` or `PhantomData<&'a mut T>`.\n /// Usually this won't be necessary; covariance is correct for most safe abstractions,\n-/// such as Box, Rc, Arc, Vec, and LinkedList. This is the case because they\n+/// such as `Box`, `Rc`, `Arc`, `Vec`, and `LinkedList`. This is the case because they\n /// provide a public API that follows the normal shared XOR mutable rules of Rust.\n ///\n /// Notice that `NonNull<T>` has a `From` instance for `&T`. However, this does\n@@ -2883,6 +2883,7 @@ impl<'a, T: ?Sized> From<NonNull<T>> for Unique<T> {\n /// it is your responsibility to ensure that `as_mut` is never called, and `as_ptr`\n /// is never used for mutation.\n ///\n+/// [`PhantomData`]: ../marker/struct.PhantomData.html\n /// [`UnsafeCell<T>`]: ../cell/struct.UnsafeCell.html\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n #[repr(transparent)]"}]}