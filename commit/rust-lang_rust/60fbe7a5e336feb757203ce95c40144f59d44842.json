{"sha": "60fbe7a5e336feb757203ce95c40144f59d44842", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZmJlN2E1ZTMzNmZlYjc1NzIwM2NlOTVjNDAxNDRmNTlkNDQ4NDI=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-13T13:03:36Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-12-14T10:05:45Z"}, "message": "Add missing Duration examples", "tree": {"sha": "012c0ccc42c614a27103212ad8468034388d430c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/012c0ccc42c614a27103212ad8468034388d430c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60fbe7a5e336feb757203ce95c40144f59d44842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60fbe7a5e336feb757203ce95c40144f59d44842", "html_url": "https://github.com/rust-lang/rust/commit/60fbe7a5e336feb757203ce95c40144f59d44842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60fbe7a5e336feb757203ce95c40144f59d44842/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ace092f569230a00350e56412ac1804ffb806c32", "url": "https://api.github.com/repos/rust-lang/rust/commits/ace092f569230a00350e56412ac1804ffb806c32", "html_url": "https://github.com/rust-lang/rust/commit/ace092f569230a00350e56412ac1804ffb806c32"}], "stats": {"total": 79, "additions": 66, "deletions": 13}, "files": [{"sha": "162ce530f17cdb427508b9f39b9e4366dd20adad", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 66, "deletions": 13, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/60fbe7a5e336feb757203ce95c40144f59d44842/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fbe7a5e336feb757203ce95c40144f59d44842/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=60fbe7a5e336feb757203ce95c40144f59d44842", "patch": "@@ -14,16 +14,19 @@ const NANOS_PER_SEC: u32 = 1_000_000_000;\n const NANOS_PER_MILLI: u32 = 1_000_000;\n const MILLIS_PER_SEC: u64 = 1_000;\n \n-/// A duration type to represent a span of time, typically used for system\n+/// A `Duration` type to represent a span of time, typically used for system\n /// timeouts.\n ///\n-/// Each duration is composed of a number of seconds and nanosecond precision.\n+/// Each `Duration` is composed of a number of seconds and nanosecond precision.\n /// APIs binding a system timeout will typically round up the nanosecond\n /// precision if the underlying system does not support that level of precision.\n ///\n-/// Durations implement many common traits, including `Add`, `Sub`, and other\n-/// ops traits. Currently a duration may only be inspected for its number of\n-/// seconds and its nanosecond precision.\n+/// `Duration`s implement many common traits, including [`Add`], [`Sub`], and other\n+/// [`ops`] traits.\n+///\n+/// [`Add`]: ../../std/ops/trait.Add.html\n+/// [`Sub`]: ../../std/ops/trait.Sub.html\n+/// [`ops`]: ../../std/ops/index.html\n ///\n /// # Examples\n ///\n@@ -56,6 +59,14 @@ impl Duration {\n     ///\n     /// This constructor will panic if the carry from the nanoseconds overflows\n     /// the seconds counter.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::time::Duration;\n+    ///\n+    /// let five_seconds = Duration::new(5, 0);\n+    /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n     pub fn new(secs: u64, nanos: u32) -> Duration {\n@@ -66,13 +77,29 @@ impl Duration {\n     }\n \n     /// Creates a new `Duration` from the specified number of seconds.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::time::Duration;\n+    ///\n+    /// let five_seconds = Duration::from_secs(5);\n+    /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n     pub fn from_secs(secs: u64) -> Duration {\n         Duration { secs: secs, nanos: 0 }\n     }\n \n     /// Creates a new `Duration` from the specified number of milliseconds.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::time::Duration;\n+    ///\n+    /// let five_seconds = Duration::from_millis(5000);\n+    /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n     pub fn from_millis(millis: u64) -> Duration {\n@@ -81,26 +108,46 @@ impl Duration {\n         Duration { secs: secs, nanos: nanos }\n     }\n \n-    /// Returns the number of whole seconds represented by this duration.\n+    /// Returns the number of whole seconds represented by this `Duration`.\n     ///\n     /// The extra precision represented by this duration is ignored (i.e. extra\n     /// nanoseconds are not represented in the returned value).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::time::Duration;\n+    ///\n+    /// let five_seconds = Duration::new(5, 0);\n+    /// assert_eq!(five_seconds.as_secs(), 5);\n+    /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n     pub fn as_secs(&self) -> u64 { self.secs }\n \n-    /// Returns the nanosecond precision represented by this duration.\n+    /// Returns the nanosecond precision represented by this `Duration`.\n     ///\n     /// This method does **not** return the length of the duration when\n     /// represented by nanoseconds. The returned number always represents a\n     /// fractional portion of a second (i.e. it is less than one billion).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::time::Duration;\n+    ///\n+    /// let duration = Duration::from_millis(5010);\n+    /// assert_eq!(duration.subsec_nanos(), 10000000);\n+    /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n     pub fn subsec_nanos(&self) -> u32 { self.nanos }\n \n-    /// Checked duration addition. Computes `self + other`, returning `None`\n+    /// Checked `Duration` addition. Computes `self + other`, returning [`None`]\n     /// if overflow occurred.\n     ///\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -136,9 +183,11 @@ impl Duration {\n         }\n     }\n \n-    /// Checked duration subtraction. Computes `self + other`, returning `None`\n+    /// Checked `Duration` subtraction. Computes `self - other`, returning [`None`]\n     /// if the result would be negative or if underflow occurred.\n     ///\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -172,8 +221,10 @@ impl Duration {\n         }\n     }\n \n-    /// Checked duration multiplication. Computes `self * other`, returning\n-    /// `None` if underflow or overflow occurred.\n+    /// Checked `Duration` multiplication. Computes `self * other`, returning\n+    /// [`None`] if overflow occurred.\n+    ///\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n     ///\n@@ -207,8 +258,10 @@ impl Duration {\n         }\n     }\n \n-    /// Checked duration division. Computes `self / other`, returning `None`\n-    /// if `other == 0` or the operation results in underflow or overflow.\n+    /// Checked `Duration` division. Computes `self / other`, returning [`None`]\n+    /// if `other == 0`.\n+    ///\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// # Examples\n     ///"}]}