{"sha": "2353f240951aeb3f1b81a0cfb814ba3ebeff55e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNTNmMjQwOTUxYWViM2YxYjgxYTBjZmI4MTRiYTNlYmVmZjU1ZTU=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-11-06T05:00:54Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-11-06T05:00:54Z"}, "message": "Merge branch 'master' into fix-missing-comma-fp", "tree": {"sha": "52cedec706de6805bde3bd5d6b9cc4dd67162ecf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52cedec706de6805bde3bd5d6b9cc4dd67162ecf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5", "html_url": "https://github.com/rust-lang/rust/commit/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/comments", "author": null, "committer": null, "parents": [{"sha": "a3ab512576c77e08646ba731e8906a02983da2c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3ab512576c77e08646ba731e8906a02983da2c8", "html_url": "https://github.com/rust-lang/rust/commit/a3ab512576c77e08646ba731e8906a02983da2c8"}, {"sha": "4c3408c61d1042bf0585de440041ee7edfc5b350", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c3408c61d1042bf0585de440041ee7edfc5b350", "html_url": "https://github.com/rust-lang/rust/commit/4c3408c61d1042bf0585de440041ee7edfc5b350"}], "stats": {"total": 758, "additions": 322, "deletions": 436}, "files": [{"sha": "50f61eb1e670cc52f0710a527a3beda91dd72bb8", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=2353f240951aeb3f1b81a0cfb814ba3ebeff55e5", "patch": "@@ -180,7 +180,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n \n The [`rustc_plugin::PluginRegistry`][plugin_registry] provides two methods to register lints: [register_early_lint_pass][reg_early_lint_pass] and [register_late_lint_pass][reg_late_lint_pass].\n Both take an object that implements an [`EarlyLintPass`][early_lint_pass] or [`LateLintPass`][late_lint_pass] respectively. This is done in every single lint.\n-It's worth noting that the majority of `clippy_lints/src/lib.rs` is autogenerated by `util/update_lints.py` and you don't have to add anything by hand. When you are writing your own lint, you can use that script to save you some time.\n+It's worth noting that the majority of `clippy_lints/src/lib.rs` is autogenerated by `util/dev update_lints` and you don't have to add anything by hand. When you are writing your own lint, you can use that script to save you some time.\n \n ```rust\n // ./clippy_lints/src/else_if_without_else.rs"}, {"sha": "88cc20842e82d4240461d181f2533d9e46e3aa87", "filename": "ci/base-tests.sh", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/ci%2Fbase-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/ci%2Fbase-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fbase-tests.sh?ref=2353f240951aeb3f1b81a0cfb814ba3ebeff55e5", "patch": "@@ -23,8 +23,9 @@ cargo test --features debugging\n cd clippy_lints && cargo test && cd ..\n cd rustc_tools_util && cargo test && cd ..\n cd clippy_dev && cargo test && cd ..\n-# check that the lint lists are up-to-date\n-./util/update_lints.py -c\n+\n+# Perform various checks for lint registration\n+./util/dev update_lints --check\n \n CLIPPY=\"`pwd`/target/debug/cargo-clippy clippy\"\n # run clippy on its own codebase..."}, {"sha": "5e1a454195e4f33670a57cec32781bc95f56fa55", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 73, "deletions": 49, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=2353f240951aeb3f1b81a0cfb814ba3ebeff55e5", "patch": "@@ -114,19 +114,22 @@ pub fn gen_changelog_lint_list(lints: Vec<Lint>) -> Vec<String> {\n \n /// Generates the `register_removed` code in `./clippy_lints/src/lib.rs`.\n pub fn gen_deprecated(lints: &[Lint]) -> Vec<String> {\n-    lints.iter()\n-        .filter_map(|l| {\n-            l.clone().deprecation.and_then(|depr_text| {\n-                Some(\n-                    format!(\n-                        \"    store.register_removed(\\n        \\\"{}\\\",\\n        \\\"{}\\\",\\n    );\",\n-                        l.name,\n-                        depr_text\n+    itertools::flatten(\n+        lints\n+            .iter()\n+            .filter_map(|l| {\n+                l.clone().deprecation.and_then(|depr_text| {\n+                    Some(\n+                        vec![\n+                            \"    store.register_removed(\".to_string(),\n+                            format!(\"        \\\"{}\\\",\", l.name),\n+                            format!(\"        \\\"{}\\\",\", depr_text),\n+                            \"    );\".to_string()\n+                        ]\n                     )\n-                )\n+                })\n             })\n-        })\n-        .collect()\n+    ).collect()\n }\n \n /// Gathers all files in `src/clippy_lints` and gathers all lints inside\n@@ -168,23 +171,33 @@ fn lint_files() -> impl Iterator<Item=walkdir::DirEntry> {\n         .filter(|f| f.path().extension() == Some(OsStr::new(\"rs\")))\n }\n \n+/// Whether a file has had its text changed or not\n+#[derive(PartialEq, Debug)]\n+pub struct FileChange {\n+    pub changed: bool,\n+    pub new_lines: String,\n+}\n+\n /// Replace a region in a file delimited by two lines matching regexes.\n ///\n /// `path` is the relative path to the file on which you want to perform the replacement.\n ///\n /// See `replace_region_in_text` for documentation of the other options.\n #[allow(clippy::expect_fun_call)]\n-pub fn replace_region_in_file<F>(path: &str, start: &str, end: &str, replace_start: bool, replacements: F) where F: Fn() -> Vec<String> {\n+pub fn replace_region_in_file<F>(path: &str, start: &str, end: &str, replace_start: bool, write_back: bool, replacements: F) -> FileChange where F: Fn() -> Vec<String> {\n     let mut f = fs::File::open(path).expect(&format!(\"File not found: {}\", path));\n     let mut contents = String::new();\n     f.read_to_string(&mut contents).expect(\"Something went wrong reading the file\");\n-    let replaced = replace_region_in_text(&contents, start, end, replace_start, replacements);\n-\n-    let mut f = fs::File::create(path).expect(&format!(\"File not found: {}\", path));\n-    f.write_all(replaced.as_bytes()).expect(\"Unable to write file\");\n-    // Ensure we write the changes with a trailing newline so that\n-    // the file has the proper line endings.\n-    f.write_all(b\"\\n\").expect(\"Unable to write file\");\n+    let file_change = replace_region_in_text(&contents, start, end, replace_start, replacements);\n+\n+    if write_back {\n+        let mut f = fs::File::create(path).expect(&format!(\"File not found: {}\", path));\n+        f.write_all(file_change.new_lines.as_bytes()).expect(\"Unable to write file\");\n+        // Ensure we write the changes with a trailing newline so that\n+        // the file has the proper line endings.\n+        f.write_all(b\"\\n\").expect(\"Unable to write file\");\n+    }\n+    file_change\n }\n \n /// Replace a region in a text delimited by two lines matching regexes.\n@@ -213,18 +226,18 @@ pub fn replace_region_in_file<F>(path: &str, start: &str, end: &str, replace_sta\n ///     || {\n ///         vec![\"a different\".to_string(), \"text\".to_string()]\n ///     }\n-/// );\n+/// ).new_lines;\n /// assert_eq!(\"replace_start\\na different\\ntext\\nreplace_end\", result);\n /// ```\n-pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> String where F: Fn() -> Vec<String> {\n+pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_start: bool, replacements: F) -> FileChange where F: Fn() -> Vec<String> {\n     let lines = text.lines();\n     let mut in_old_region = false;\n     let mut found = false;\n     let mut new_lines = vec![];\n     let start = Regex::new(start).unwrap();\n     let end = Regex::new(end).unwrap();\n \n-    for line in lines {\n+    for line in lines.clone() {\n         if in_old_region {\n             if end.is_match(&line) {\n                 in_old_region = false;\n@@ -248,7 +261,11 @@ pub fn replace_region_in_text<F>(text: &str, start: &str, end: &str, replace_sta\n         // is incorrect.\n         eprintln!(\"error: regex `{:?}` not found. You may have to update it.\", start);\n     }\n-    new_lines.join(\"\\n\")\n+\n+    FileChange {\n+        changed: lines.ne(new_lines.clone()),\n+        new_lines: new_lines.join(\"\\n\")\n+    }\n }\n \n #[test]\n@@ -292,17 +309,11 @@ declare_deprecated_lint! {\n \n #[test]\n fn test_replace_region() {\n-    let text = r#\"\n-abc\n-123\n-789\n-def\n-ghi\"#;\n-    let expected = r#\"\n-abc\n-hello world\n-def\n-ghi\"#;\n+    let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n+    let expected = FileChange {\n+        changed: true,\n+        new_lines: \"\\nabc\\nhello world\\ndef\\nghi\".to_string()\n+    };\n     let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, false, || {\n         vec![\"hello world\".to_string()]\n     });\n@@ -311,22 +322,30 @@ ghi\"#;\n \n #[test]\n fn test_replace_region_with_start() {\n-    let text = r#\"\n-abc\n-123\n-789\n-def\n-ghi\"#;\n-    let expected = r#\"\n-hello world\n-def\n-ghi\"#;\n+    let text = \"\\nabc\\n123\\n789\\ndef\\nghi\";\n+    let expected = FileChange {\n+        changed: true,\n+        new_lines: \"\\nhello world\\ndef\\nghi\".to_string()\n+    };\n     let result = replace_region_in_text(text, r#\"^\\s*abc$\"#, r#\"^\\s*def\"#, true, || {\n         vec![\"hello world\".to_string()]\n     });\n     assert_eq!(expected, result);\n }\n \n+#[test]\n+fn test_replace_region_no_changes() {\n+    let text = \"123\\n456\\n789\";\n+    let expected = FileChange {\n+        changed: false,\n+        new_lines: \"123\\n456\\n789\".to_string()\n+    };\n+    let result = replace_region_in_text(text, r#\"^\\s*123$\"#, r#\"^\\s*456\"#, false, || {\n+        vec![]\n+    });\n+    assert_eq!(expected, result);\n+}\n+\n #[test]\n fn test_usable_lints() {\n     let lints = vec![\n@@ -377,14 +396,19 @@ fn test_gen_changelog_lint_list() {\n fn test_gen_deprecated() {\n     let lints = vec![\n         Lint::new(\"should_assert_eq\", \"group1\", \"abc\", Some(\"has been superseeded by should_assert_eq2\"), \"module_name\"),\n+        Lint::new(\"another_deprecated\", \"group2\", \"abc\", Some(\"will be removed\"), \"module_name\"),\n         Lint::new(\"should_assert_eq2\", \"group2\", \"abc\", None, \"module_name\")\n     ];\n     let expected: Vec<String> = vec![\n-        r#\"    store.register_removed(\n-        \"should_assert_eq\",\n-        \"has been superseeded by should_assert_eq2\",\n-    );\"#.to_string()\n-    ];\n+        \"    store.register_removed(\",\n+        \"        \\\"should_assert_eq\\\",\",\n+        \"        \\\"has been superseeded by should_assert_eq2\\\",\",\n+        \"    );\",\n+        \"    store.register_removed(\",\n+        \"        \\\"another_deprecated\\\",\",\n+        \"        \\\"will be removed\\\",\",\n+        \"    );\"\n+    ].into_iter().map(String::from).collect();\n     assert_eq!(expected, gen_deprecated(&lints));\n }\n "}, {"sha": "bfd98968c422deaf9bb8b5019e08878abca377b0", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=2353f240951aeb3f1b81a0cfb814ba3ebeff55e5", "patch": "@@ -15,6 +15,12 @@ extern crate regex;\n use clap::{App, Arg, SubCommand};\n use clippy_dev::*;\n \n+#[derive(PartialEq)]\n+enum UpdateMode {\n+    Check,\n+    Change\n+}\n+\n fn main() {\n     let matches = App::new(\"Clippy developer tooling\")\n         .subcommand(\n@@ -28,17 +34,23 @@ fn main() {\n                 .arg(\n                     Arg::with_name(\"print-only\")\n                         .long(\"print-only\")\n-                        .short(\"p\")\n-                        .help(\"Print a table of lints to STDOUT. This does not include deprecated and internal lints. (Does not modify any files)\"),\n+                        .help(\"Print a table of lints to STDOUT. This does not include deprecated and internal lints. (Does not modify any files)\")\n+                )\n+                .arg(\n+                    Arg::with_name(\"check\")\n+                        .long(\"check\")\n+                        .help(\"Checks that util/dev update_lints has been run. Used on CI.\"),\n                 )\n-        )\n-        .get_matches();\n+            )\n+            .get_matches();\n \n     if let Some(matches) = matches.subcommand_matches(\"update_lints\") {\n         if matches.is_present(\"print-only\") {\n             print_lints();\n+        } else if matches.is_present(\"check\") {\n+            update_lints(&UpdateMode::Check);\n         } else {\n-            update_lints();\n+            update_lints(&UpdateMode::Change);\n         }\n     }\n }\n@@ -63,53 +75,58 @@ fn print_lints() {\n     println!(\"there are {} lints\", lint_count);\n }\n \n-fn update_lints() {\n+fn update_lints(update_mode: &UpdateMode) {\n     let lint_list: Vec<Lint> = gather_all().collect();\n     let usable_lints: Vec<Lint> = Lint::usable_lints(lint_list.clone().into_iter()).collect();\n     let lint_count = usable_lints.len();\n \n-    replace_region_in_file(\n+    let mut file_change = replace_region_in_file(\n         \"../README.md\",\n         r#\"\\[There are \\d+ lints included in this crate!\\]\\(https://rust-lang-nursery.github.io/rust-clippy/master/index.html\\)\"#,\n         \"\",\n         true,\n+        update_mode == &UpdateMode::Change,\n         || {\n             vec![\n                 format!(\"[There are {} lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\", lint_count)\n             ]\n         }\n-    );\n+    ).changed;\n \n-    replace_region_in_file(\n+    file_change |= replace_region_in_file(\n         \"../CHANGELOG.md\",\n         \"<!-- begin autogenerated links to lint list -->\",\n         \"<!-- end autogenerated links to lint list -->\",\n         false,\n+        update_mode == &UpdateMode::Change,\n         || { gen_changelog_lint_list(lint_list.clone()) }\n-    );\n+    ).changed;\n \n-    replace_region_in_file(\n+    file_change |= replace_region_in_file(\n         \"../clippy_lints/src/lib.rs\",\n         \"begin deprecated lints\",\n         \"end deprecated lints\",\n         false,\n+        update_mode == &UpdateMode::Change,\n         || { gen_deprecated(&lint_list) }\n-    );\n+    ).changed;\n \n-    replace_region_in_file(\n+    file_change |= replace_region_in_file(\n         \"../clippy_lints/src/lib.rs\",\n         \"begin lints modules\",\n         \"end lints modules\",\n         false,\n+        update_mode == &UpdateMode::Change,\n         || { gen_modules_list(lint_list.clone()) }\n-    );\n+    ).changed;\n \n     // Generate lists of lints in the clippy::all lint group\n-    replace_region_in_file(\n+    file_change |= replace_region_in_file(\n         \"../clippy_lints/src/lib.rs\",\n         r#\"reg.register_lint_group\\(\"clippy::all\"\"#,\n         r#\"\\]\\);\"#,\n         false,\n+        update_mode == &UpdateMode::Change,\n         || {\n             // clippy::all should only include the following lint groups:\n             let all_group_lints = usable_lints.clone().into_iter().filter(|l| {\n@@ -121,16 +138,22 @@ fn update_lints() {\n \n             gen_lint_group_list(all_group_lints)\n         }\n-    );\n+    ).changed;\n \n     // Generate the list of lints for all other lint groups\n     for (lint_group, lints) in Lint::by_lint_group(&usable_lints) {\n-        replace_region_in_file(\n+        file_change |= replace_region_in_file(\n             \"../clippy_lints/src/lib.rs\",\n             &format!(\"reg.register_lint_group\\\\(\\\"clippy::{}\\\"\", lint_group),\n             r#\"\\]\\);\"#,\n             false,\n+            update_mode == &UpdateMode::Change,\n             || { gen_lint_group_list(lints.clone()) }\n-        );\n+        ).changed;\n+    }\n+\n+    if update_mode == &UpdateMode::Check && file_change {\n+      println!(\"Not all lints defined properly. Please run `util/dev update_lints` to make sure all lints are defined properly.\");\n+      std::process::exit(1);\n     }\n }"}, {"sha": "c93e9d57d6760035b99c0b5eb4c3e423447aba4d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=2353f240951aeb3f1b81a0cfb814ba3ebeff55e5", "patch": "@@ -548,8 +548,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         bytecount::NAIVE_BYTECOUNT,\n         collapsible_if::COLLAPSIBLE_IF,\n         const_static_lifetime::CONST_STATIC_LIFETIME,\n-        copies::IF_SAME_THEN_ELSE,\n         copies::IFS_SAME_COND,\n+        copies::IF_SAME_THEN_ELSE,\n         cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n         derive::DERIVE_HASH_XOR_EQ,\n         double_comparison::DOUBLE_COMPARISONS,\n@@ -743,12 +743,12 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         unused_io_amount::UNUSED_IO_AMOUNT,\n         unused_label::UNUSED_LABEL,\n         vec::USELESS_VEC,\n+        write::PRINTLN_EMPTY_STRING,\n         write::PRINT_LITERAL,\n         write::PRINT_WITH_NEWLINE,\n-        write::PRINTLN_EMPTY_STRING,\n+        write::WRITELN_EMPTY_STRING,\n         write::WRITE_LITERAL,\n         write::WRITE_WITH_NEWLINE,\n-        write::WRITELN_EMPTY_STRING,\n         zero_div_zero::ZERO_DIVIDED_BY_ZERO,\n     ]);\n \n@@ -831,12 +831,12 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         types::IMPLICIT_HASHER,\n         types::LET_UNIT_VALUE,\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n+        write::PRINTLN_EMPTY_STRING,\n         write::PRINT_LITERAL,\n         write::PRINT_WITH_NEWLINE,\n-        write::PRINTLN_EMPTY_STRING,\n+        write::WRITELN_EMPTY_STRING,\n         write::WRITE_LITERAL,\n         write::WRITE_WITH_NEWLINE,\n-        write::WRITELN_EMPTY_STRING,\n     ]);\n \n     reg.register_lint_group(\"clippy::complexity\", Some(\"clippy_complexity\"), vec![\n@@ -916,8 +916,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         bit_mask::BAD_BIT_MASK,\n         bit_mask::INEFFECTIVE_BIT_MASK,\n         booleans::LOGIC_BUG,\n-        copies::IF_SAME_THEN_ELSE,\n         copies::IFS_SAME_COND,\n+        copies::IF_SAME_THEN_ELSE,\n         derive::DERIVE_HASH_XOR_EQ,\n         drop_forget_ref::DROP_COPY,\n         drop_forget_ref::DROP_REF,"}, {"sha": "bd54c06848624960bfe3af9bee822f59fdc5dad9", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 94, "deletions": 62, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=2353f240951aeb3f1b81a0cfb814ba3ebeff55e5", "patch": "@@ -7,16 +7,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n //! Lints concerned with the grouping of digits with underscores in integral or\n //! floating-point literal expressions.\n \n-use crate::rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass, in_external_macro, LintContext};\n+use crate::rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintContext, LintPass};\n use crate::rustc::{declare_tool_lint, lint_array};\n-use if_chain::if_chain;\n use crate::syntax::ast::*;\n use crate::syntax_pos;\n use crate::utils::{snippet_opt, span_lint_and_sugg};\n+use if_chain::if_chain;\n \n /// **What it does:** Warns if a long integral or floating-point constant does\n /// not contain underscores.\n@@ -41,9 +40,9 @@ declare_clippy_lint! {\n /// **Why is this bad?** This is most probably a typo\n ///\n /// **Known problems:**\n-///\t\t- Recommends a signed suffix, even though the number might be too big and an unsigned\n+/// \t\t- Recommends a signed suffix, even though the number might be too big and an unsigned\n ///\t\tsuffix is required\n-///\t\t- Does not match on `_128` since that is a valid grouping for decimal and octal numbers\n+/// \t\t- Does not match on `_128` since that is a valid grouping for decimal and octal numbers\n ///\n /// **Example:**\n ///\n@@ -168,21 +167,21 @@ impl<'a> DigitInfo<'a> {\n         let len = sans_prefix.len();\n         let mut last_d = '\\0';\n         for (d_idx, d) in sans_prefix.char_indices() {\n-            let suffix_start = if last_d == '_' {\n-                d_idx - 1\n-            } else {\n-                d_idx\n-            };\n-            if float && (d == 'f' || d == 'e' || d == 'E') ||\n-                !float && (d == 'i' || d == 'u' || is_possible_suffix_index(&sans_prefix, suffix_start, len)) {\n-                    let (digits, suffix) = sans_prefix.split_at(suffix_start);\n-                    return Self {\n-                        digits,\n-                        radix,\n-                        prefix,\n-                        suffix: Some(suffix),\n-                        float,\n-                    };\n+            let suffix_start = if last_d == '_' { d_idx - 1 } else { d_idx };\n+            if float\n+                && (d == 'f'\n+                    || is_possible_float_suffix_index(&sans_prefix, suffix_start, len)\n+                    || ((d == 'E' || d == 'e') && !has_possible_float_suffix(&sans_prefix)))\n+                || !float && (d == 'i' || d == 'u' || is_possible_suffix_index(&sans_prefix, suffix_start, len))\n+            {\n+                let (digits, suffix) = sans_prefix.split_at(suffix_start);\n+                return Self {\n+                    digits,\n+                    radix,\n+                    prefix,\n+                    suffix: Some(suffix),\n+                    float,\n+                };\n             }\n             last_d = d\n         }\n@@ -224,18 +223,44 @@ impl<'a> DigitInfo<'a> {\n                 .map(|chunk| chunk.iter().collect())\n                 .collect::<Vec<String>>()\n                 .join(\"_\");\n+            let suffix_hint = match self.suffix {\n+                Some(suffix) if is_mistyped_float_suffix(suffix) => format!(\"_f{}\", &suffix[1..]),\n+                Some(suffix) => suffix.to_string(),\n+                None => String::new(),\n+            };\n+            format!(\"{}.{}{}\", int_part_hint, frac_part_hint, suffix_hint)\n+        } else if self.float && (self.digits.contains('E') || self.digits.contains('e')) {\n+            let which_e = if self.digits.contains('E') { 'E' } else { 'e' };\n+            let parts: Vec<&str> = self.digits.split(which_e).collect();\n+            let filtered_digits_vec_0 = parts[0].chars().filter(|&c| c != '_').rev().collect::<Vec<_>>();\n+            let filtered_digits_vec_1 = parts[1].chars().filter(|&c| c != '_').rev().collect::<Vec<_>>();\n+            let before_e_hint = filtered_digits_vec_0\n+                .chunks(group_size)\n+                .map(|chunk| chunk.iter().rev().collect())\n+                .rev()\n+                .collect::<Vec<String>>()\n+                .join(\"_\");\n+            let after_e_hint = filtered_digits_vec_1\n+                .chunks(group_size)\n+                .map(|chunk| chunk.iter().rev().collect())\n+                .rev()\n+                .collect::<Vec<String>>()\n+                .join(\"_\");\n+            let suffix_hint = match self.suffix {\n+                Some(suffix) if is_mistyped_float_suffix(suffix) => format!(\"_f{}\", &suffix[1..]),\n+                Some(suffix) => suffix.to_string(),\n+                None => String::new(),\n+            };\n             format!(\n-                \"{}.{}{}\",\n-                int_part_hint,\n-                frac_part_hint,\n-                self.suffix.unwrap_or(\"\")\n+                \"{}{}{}{}{}\",\n+                self.prefix.unwrap_or(\"\"),\n+                before_e_hint,\n+                which_e,\n+                after_e_hint,\n+                suffix_hint\n             )\n         } else {\n-            let filtered_digits_vec = self.digits\n-                .chars()\n-                .filter(|&c| c != '_')\n-                .rev()\n-                .collect::<Vec<_>>();\n+            let filtered_digits_vec = self.digits.chars().filter(|&c| c != '_').rev().collect::<Vec<_>>();\n             let mut hint = filtered_digits_vec\n                 .chunks(group_size)\n                 .map(|chunk| chunk.iter().rev().collect())\n@@ -248,18 +273,11 @@ impl<'a> DigitInfo<'a> {\n                 hint = format!(\"{:0>4}{}\", &hint[..nb_digits_to_fill], &hint[nb_digits_to_fill..]);\n             }\n             let suffix_hint = match self.suffix {\n-                Some(suffix) if is_mistyped_suffix(suffix) => {\n-                    format!(\"_i{}\", &suffix[1..])\n-                },\n+                Some(suffix) if is_mistyped_suffix(suffix) => format!(\"_i{}\", &suffix[1..]),\n                 Some(suffix) => suffix.to_string(),\n-                None => String::new()\n+                None => String::new(),\n             };\n-            format!(\n-                \"{}{}{}\",\n-                self.prefix.unwrap_or(\"\"),\n-                hint,\n-                suffix_hint\n-            )\n+            format!(\"{}{}{}\", self.prefix.unwrap_or(\"\"), hint, suffix_hint)\n         }\n     }\n }\n@@ -269,22 +287,20 @@ enum WarningType {\n     InconsistentDigitGrouping,\n     LargeDigitGroups,\n     DecimalRepresentation,\n-    MistypedLiteralSuffix\n+    MistypedLiteralSuffix,\n }\n \n impl WarningType {\n     crate fn display(&self, grouping_hint: &str, cx: &EarlyContext<'_>, span: syntax_pos::Span) {\n         match self {\n-            WarningType::MistypedLiteralSuffix => {\n-                span_lint_and_sugg(\n-                    cx,\n-                    MISTYPED_LITERAL_SUFFIXES,\n-                    span,\n-                    \"mistyped literal suffix\",\n-                    \"did you mean to write\",\n-                    grouping_hint.to_string()\n-                )\n-            },\n+            WarningType::MistypedLiteralSuffix => span_lint_and_sugg(\n+                cx,\n+                MISTYPED_LITERAL_SUFFIXES,\n+                span,\n+                \"mistyped literal suffix\",\n+                \"did you mean to write\",\n+                grouping_hint.to_string(),\n+            ),\n             WarningType::UnreadableLiteral => span_lint_and_sugg(\n                 cx,\n                 UNREADABLE_LITERAL,\n@@ -380,7 +396,7 @@ impl LiteralDigitGrouping {\n \n                         // Lint integral and fractional parts separately, and then check consistency of digit\n                         // groups if both pass.\n-                        let _ = Self::do_lint(parts[0], None)\n+                        let _ = Self::do_lint(parts[0], digit_info.suffix)\n                             .map(|integral_group_size| {\n                                 if parts.len() > 1 {\n                                     // Lint the fractional part of literal just like integral part, but reversed.\n@@ -391,11 +407,11 @@ impl LiteralDigitGrouping {\n                                                                                     fractional_group_size,\n                                                                                     parts[0].len(),\n                                                                                     parts[1].len());\n-                                            if !consistent {\n-                                                WarningType::InconsistentDigitGrouping.display(&digit_info.grouping_hint(),\n-                                                cx,\n-                                                lit.span);\n-                                            }\n+                                                if !consistent {\n+                                                    WarningType::InconsistentDigitGrouping.display(&digit_info.grouping_hint(),\n+                                                    cx,\n+                                                    lit.span);\n+                                                }\n                                         })\n                                     .map_err(|warning_type| warning_type.display(&digit_info.grouping_hint(),\n                                     cx,\n@@ -494,9 +510,7 @@ impl EarlyLintPass for LiteralRepresentation {\n \n impl LiteralRepresentation {\n     pub fn new(threshold: u64) -> Self {\n-        Self {\n-            threshold,\n-        }\n+        Self { threshold }\n     }\n     fn check_lit(self, cx: &EarlyContext<'_>, lit: &Lit) {\n         // Lint integral literals.\n@@ -529,7 +543,12 @@ impl LiteralRepresentation {\n     fn do_lint(digits: &str) -> Result<(), WarningType> {\n         if digits.len() == 1 {\n             // Lint for 1 digit literals, if someone really sets the threshold that low\n-            if digits == \"1\" || digits == \"2\" || digits == \"4\" || digits == \"8\" || digits == \"3\" || digits == \"7\"\n+            if digits == \"1\"\n+                || digits == \"2\"\n+                || digits == \"4\"\n+                || digits == \"8\"\n+                || digits == \"3\"\n+                || digits == \"7\"\n                 || digits == \"F\"\n             {\n                 return Err(WarningType::DecimalRepresentation);\n@@ -538,6 +557,7 @@ impl LiteralRepresentation {\n             // Lint for Literals with a hex-representation of 2 or 3 digits\n             let f = &digits[0..1]; // first digit\n             let s = &digits[1..]; // suffix\n+\n             // Powers of 2\n             if ((f.eq(\"1\") || f.eq(\"2\") || f.eq(\"4\") || f.eq(\"8\")) && s.chars().all(|c| c == '0'))\n                 // Powers of 2 minus 1\n@@ -550,6 +570,7 @@ impl LiteralRepresentation {\n             let f = &digits[0..1]; // first digit\n             let m = &digits[1..digits.len() - 1]; // middle digits, except last\n             let s = &digits[1..]; // suffix\n+\n             // Powers of 2 with a margin of +15/-16\n             if ((f.eq(\"1\") || f.eq(\"2\") || f.eq(\"4\") || f.eq(\"8\")) && m.chars().all(|c| c == '0'))\n                 || ((f.eq(\"1\") || f.eq(\"3\") || f.eq(\"7\") || f.eq(\"F\")) && m.chars().all(|c| c == 'F'))\n@@ -570,6 +591,17 @@ fn is_mistyped_suffix(suffix: &str) -> bool {\n }\n \n fn is_possible_suffix_index(lit: &str, idx: usize, len: usize) -> bool {\n-    ((len > 3 && idx == len - 3) || (len > 2 && idx == len - 2)) &&\n-        is_mistyped_suffix(lit.split_at(idx).1)\n+    ((len > 3 && idx == len - 3) || (len > 2 && idx == len - 2)) && is_mistyped_suffix(lit.split_at(idx).1)\n+}\n+\n+fn is_mistyped_float_suffix(suffix: &str) -> bool {\n+    [\"_32\", \"_64\"].contains(&suffix)\n+}\n+\n+fn is_possible_float_suffix_index(lit: &str, idx: usize, len: usize) -> bool {\n+    (len > 3 && idx == len - 3) && is_mistyped_float_suffix(lit.split_at(idx).1)\n+}\n+\n+fn has_possible_float_suffix(lit: &str) -> bool {\n+    lit.ends_with(\"_32\") || lit.ends_with(\"_64\")\n }"}, {"sha": "ad91acbcbfde64b6ce59a5018d7ca4a355f04968", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=2353f240951aeb3f1b81a0cfb814ba3ebeff55e5", "patch": "@@ -1016,7 +1016,7 @@ pub fn get_arg_name(pat: &Pat) -> Option<ast::Name> {\n }\n \n pub fn int_bits(tcx: TyCtxt<'_, '_, '_>, ity: ast::IntTy) -> u64 {\n-    layout::Integer::from_attr(tcx, attr::IntType::SignedInt(ity)).size().bits()\n+    layout::Integer::from_attr(&tcx, attr::IntType::SignedInt(ity)).size().bits()\n }\n \n #[allow(clippy::cast_possible_wrap)]\n@@ -1035,7 +1035,7 @@ pub fn unsext(tcx: TyCtxt<'_, '_, '_>, u: i128, ity: ast::IntTy) -> u128 {\n \n /// clip unused bytes\n pub fn clip(tcx: TyCtxt<'_, '_, '_>, u: u128, ity: ast::UintTy) -> u128 {\n-    let bits = layout::Integer::from_attr(tcx, attr::IntType::UnsignedInt(ity)).size().bits();\n+    let bits = layout::Integer::from_attr(&tcx, attr::IntType::UnsignedInt(ity)).size().bits();\n     let amt = 128 - bits;\n     (u << amt) >> amt\n }"}, {"sha": "c08c4b693b80d17a73cc03aaa3b7a712e27a42ec", "filename": "tests/ui/literals.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/tests%2Fui%2Fliterals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/tests%2Fui%2Fliterals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.rs?ref=2353f240951aeb3f1b81a0cfb814ba3ebeff55e5", "patch": "@@ -7,9 +7,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n #![warn(clippy::mixed_case_hex_literals)]\n #![warn(clippy::unseparated_literal_suffix)]\n #![warn(clippy::zero_prefixed_literal)]\n@@ -64,4 +61,11 @@ fn main() {\n     let fail21 = 4___16;\n     let fail22 = 3__4___23;\n     let fail23 = 3__16___23;\n+\n+    let fail24 = 12.34_64;\n+    let fail25 = 1E2_32;\n+    let fail26 = 43E7_64;\n+    let fail27 = 243E17_32;\n+    let fail28 = 241251235E723_64;\n+    let fail29 = 42279.911_32;\n }"}, {"sha": "d2a50e2ded52fde67affa29770dae8c083ae4932", "filename": "tests/ui/literals.stderr", "status": "modified", "additions": 91, "deletions": 55, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/tests%2Fui%2Fliterals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/tests%2Fui%2Fliterals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.stderr?ref=2353f240951aeb3f1b81a0cfb814ba3ebeff55e5", "patch": "@@ -1,182 +1,218 @@\n error: inconsistent casing in hexadecimal literal\n-  --> $DIR/literals.rs:24:17\n+  --> $DIR/literals.rs:21:17\n    |\n-24 |     let fail1 = 0xabCD;\n+21 |     let fail1 = 0xabCD;\n    |                 ^^^^^^\n    |\n    = note: `-D clippy::mixed-case-hex-literals` implied by `-D warnings`\n \n error: inconsistent casing in hexadecimal literal\n-  --> $DIR/literals.rs:25:17\n+  --> $DIR/literals.rs:22:17\n    |\n-25 |     let fail2 = 0xabCD_u32;\n+22 |     let fail2 = 0xabCD_u32;\n    |                 ^^^^^^^^^^\n \n error: inconsistent casing in hexadecimal literal\n-  --> $DIR/literals.rs:26:17\n+  --> $DIR/literals.rs:23:17\n    |\n-26 |     let fail2 = 0xabCD_isize;\n+23 |     let fail2 = 0xabCD_isize;\n    |                 ^^^^^^^^^^^^\n \n error: integer type suffix should be separated by an underscore\n-  --> $DIR/literals.rs:27:27\n+  --> $DIR/literals.rs:24:27\n    |\n-27 |     let fail_multi_zero = 000_123usize;\n+24 |     let fail_multi_zero = 000_123usize;\n    |                           ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unseparated-literal-suffix` implied by `-D warnings`\n \n error: this is a decimal constant\n-  --> $DIR/literals.rs:27:27\n+  --> $DIR/literals.rs:24:27\n    |\n-27 |     let fail_multi_zero = 000_123usize;\n+24 |     let fail_multi_zero = 000_123usize;\n    |                           ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::zero-prefixed-literal` implied by `-D warnings`\n help: if you mean to use a decimal constant, remove the `0` to remove confusion\n    |\n-27 |     let fail_multi_zero = 123usize;\n+24 |     let fail_multi_zero = 123usize;\n    |                           ^^^^^^^^\n help: if you mean to use an octal constant, use `0o`\n    |\n-27 |     let fail_multi_zero = 0o123usize;\n+24 |     let fail_multi_zero = 0o123usize;\n    |                           ^^^^^^^^^^\n \n error: integer type suffix should be separated by an underscore\n-  --> $DIR/literals.rs:32:17\n+  --> $DIR/literals.rs:29:17\n    |\n-32 |     let fail3 = 1234i32;\n+29 |     let fail3 = 1234i32;\n    |                 ^^^^^^^\n \n error: integer type suffix should be separated by an underscore\n-  --> $DIR/literals.rs:33:17\n+  --> $DIR/literals.rs:30:17\n    |\n-33 |     let fail4 = 1234u32;\n+30 |     let fail4 = 1234u32;\n    |                 ^^^^^^^\n \n error: integer type suffix should be separated by an underscore\n-  --> $DIR/literals.rs:34:17\n+  --> $DIR/literals.rs:31:17\n    |\n-34 |     let fail5 = 1234isize;\n+31 |     let fail5 = 1234isize;\n    |                 ^^^^^^^^^\n \n error: integer type suffix should be separated by an underscore\n-  --> $DIR/literals.rs:35:17\n+  --> $DIR/literals.rs:32:17\n    |\n-35 |     let fail6 = 1234usize;\n+32 |     let fail6 = 1234usize;\n    |                 ^^^^^^^^^\n \n error: float type suffix should be separated by an underscore\n-  --> $DIR/literals.rs:36:17\n+  --> $DIR/literals.rs:33:17\n    |\n-36 |     let fail7 = 1.5f32;\n+33 |     let fail7 = 1.5f32;\n    |                 ^^^^^^\n \n error: this is a decimal constant\n-  --> $DIR/literals.rs:40:17\n+  --> $DIR/literals.rs:37:17\n    |\n-40 |     let fail8 = 0123;\n+37 |     let fail8 = 0123;\n    |                 ^^^^\n help: if you mean to use a decimal constant, remove the `0` to remove confusion\n    |\n-40 |     let fail8 = 123;\n+37 |     let fail8 = 123;\n    |                 ^^^\n help: if you mean to use an octal constant, use `0o`\n    |\n-40 |     let fail8 = 0o123;\n+37 |     let fail8 = 0o123;\n    |                 ^^^^^\n \n error: long literal lacking separators\n-  --> $DIR/literals.rs:51:17\n+  --> $DIR/literals.rs:48:17\n    |\n-51 |     let fail9 = 0xabcdef;\n+48 |     let fail9 = 0xabcdef;\n    |                 ^^^^^^^^ help: consider: `0x00ab_cdef`\n    |\n    = note: `-D clippy::unreadable-literal` implied by `-D warnings`\n \n error: long literal lacking separators\n-  --> $DIR/literals.rs:52:18\n+  --> $DIR/literals.rs:49:18\n    |\n-52 |     let fail10 = 0xBAFEBAFE;\n+49 |     let fail10 = 0xBAFEBAFE;\n    |                  ^^^^^^^^^^ help: consider: `0xBAFE_BAFE`\n \n error: long literal lacking separators\n-  --> $DIR/literals.rs:53:18\n+  --> $DIR/literals.rs:50:18\n    |\n-53 |     let fail11 = 0xabcdeff;\n+50 |     let fail11 = 0xabcdeff;\n    |                  ^^^^^^^^^ help: consider: `0x0abc_deff`\n \n error: long literal lacking separators\n-  --> $DIR/literals.rs:54:18\n+  --> $DIR/literals.rs:51:18\n    |\n-54 |     let fail12 = 0xabcabcabcabcabcabc;\n+51 |     let fail12 = 0xabcabcabcabcabcabc;\n    |                  ^^^^^^^^^^^^^^^^^^^^ help: consider: `0x00ab_cabc_abca_bcab_cabc`\n \n error: digit groups should be smaller\n-  --> $DIR/literals.rs:55:18\n+  --> $DIR/literals.rs:52:18\n    |\n-55 |     let fail13 = 0x1_23456_78901_usize;\n+52 |     let fail13 = 0x1_23456_78901_usize;\n    |                  ^^^^^^^^^^^^^^^^^^^^^ help: consider: `0x0123_4567_8901_usize`\n    |\n    = note: `-D clippy::large-digit-groups` implied by `-D warnings`\n \n error: mistyped literal suffix\n-  --> $DIR/literals.rs:57:18\n+  --> $DIR/literals.rs:54:18\n    |\n-57 |     let fail14 = 2_32;\n+54 |     let fail14 = 2_32;\n    |                  ^^^^ help: did you mean to write: `2_i32`\n    |\n    = note: #[deny(clippy::mistyped_literal_suffixes)] on by default\n \n error: mistyped literal suffix\n-  --> $DIR/literals.rs:58:18\n+  --> $DIR/literals.rs:55:18\n    |\n-58 |     let fail15 = 4_64;\n+55 |     let fail15 = 4_64;\n    |                  ^^^^ help: did you mean to write: `4_i64`\n \n error: mistyped literal suffix\n-  --> $DIR/literals.rs:59:18\n+  --> $DIR/literals.rs:56:18\n    |\n-59 |     let fail16 = 7_8;\n+56 |     let fail16 = 7_8;\n    |                  ^^^ help: did you mean to write: `7_i8`\n \n error: mistyped literal suffix\n-  --> $DIR/literals.rs:60:18\n+  --> $DIR/literals.rs:57:18\n    |\n-60 |     let fail17 = 23_16;\n+57 |     let fail17 = 23_16;\n    |                  ^^^^^ help: did you mean to write: `23_i16`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/literals.rs:62:18\n+  --> $DIR/literals.rs:59:18\n    |\n-62 |     let fail19 = 12_3456_21;\n+59 |     let fail19 = 12_3456_21;\n    |                  ^^^^^^^^^^ help: consider: `12_345_621`\n    |\n    = note: `-D clippy::inconsistent-digit-grouping` implied by `-D warnings`\n \n error: mistyped literal suffix\n-  --> $DIR/literals.rs:63:18\n+  --> $DIR/literals.rs:60:18\n    |\n-63 |     let fail20 = 2__8;\n+60 |     let fail20 = 2__8;\n    |                  ^^^^ help: did you mean to write: `2_i8`\n \n error: mistyped literal suffix\n-  --> $DIR/literals.rs:64:18\n+  --> $DIR/literals.rs:61:18\n    |\n-64 |     let fail21 = 4___16;\n+61 |     let fail21 = 4___16;\n    |                  ^^^^^^ help: did you mean to write: `4_i16`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/literals.rs:65:18\n+  --> $DIR/literals.rs:62:18\n    |\n-65 |     let fail22 = 3__4___23;\n+62 |     let fail22 = 3__4___23;\n    |                  ^^^^^^^^^ help: consider: `3_423`\n \n error: digits grouped inconsistently by underscores\n-  --> $DIR/literals.rs:66:18\n+  --> $DIR/literals.rs:63:18\n    |\n-66 |     let fail23 = 3__16___23;\n+63 |     let fail23 = 3__16___23;\n    |                  ^^^^^^^^^^ help: consider: `31_623`\n \n-error: aborting due to 25 previous errors\n+error: mistyped literal suffix\n+  --> $DIR/literals.rs:65:18\n+   |\n+65 |     let fail24 = 12.34_64;\n+   |                  ^^^^^^^^ help: did you mean to write: `12.34_f64`\n+\n+error: mistyped literal suffix\n+  --> $DIR/literals.rs:66:18\n+   |\n+66 |     let fail25 = 1E2_32;\n+   |                  ^^^^^^ help: did you mean to write: `1E2_f32`\n+\n+error: mistyped literal suffix\n+  --> $DIR/literals.rs:67:18\n+   |\n+67 |     let fail26 = 43E7_64;\n+   |                  ^^^^^^^ help: did you mean to write: `43E7_f64`\n+\n+error: mistyped literal suffix\n+  --> $DIR/literals.rs:68:18\n+   |\n+68 |     let fail27 = 243E17_32;\n+   |                  ^^^^^^^^^ help: did you mean to write: `243E17_f32`\n+\n+error: mistyped literal suffix\n+  --> $DIR/literals.rs:69:18\n+   |\n+69 |     let fail28 = 241251235E723_64;\n+   |                  ^^^^^^^^^^^^^^^^ help: did you mean to write: `241_251_235E723_f64`\n+\n+error: mistyped literal suffix\n+  --> $DIR/literals.rs:70:18\n+   |\n+70 |     let fail29 = 42279.911_32;\n+   |                  ^^^^^^^^^^^^ help: did you mean to write: `42_279.911_f32`\n+\n+error: aborting due to 31 previous errors\n "}, {"sha": "4467b5c0cf7d00f35b432d579b9ad0e3d5472c0a", "filename": "util/update_lints.py", "status": "modified", "additions": 4, "deletions": 238, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/2353f240951aeb3f1b81a0cfb814ba3ebeff55e5/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=2353f240951aeb3f1b81a0cfb814ba3ebeff55e5", "patch": "@@ -10,245 +10,11 @@\n # option. This file may not be copied, modified, or distributed\n # except according to those terms.\n \n-\n-# Generate a Markdown table of all lints, and put it in README.md.\n-# With -n option, only print the new table to stdout.\n-# With -c option, print a warning and set exit status to 1 if a file would be\n-# changed.\n-\n-import os\n-import re\n import sys\n-from subprocess import call\n-\n-declare_deprecated_lint_re = re.compile(r'''\n-    declare_deprecated_lint! \\s* [{(] \\s*\n-    pub \\s+ (?P<name>[A-Z_][A-Z_0-9]*) \\s*,\\s*\n-    \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n-''', re.VERBOSE | re.DOTALL)\n-\n-declare_clippy_lint_re = re.compile(r'''\n-    declare_clippy_lint! \\s* [{(] \\s*\n-    pub \\s+ (?P<name>[A-Z_][A-Z_0-9]*) \\s*,\\s*\n-    (?P<cat>[a-z_]+) \\s*,\\s*\n-    \" (?P<desc>(?:[^\"\\\\]+|\\\\.)*) \" \\s* [})]\n-''', re.VERBOSE | re.DOTALL)\n-\n-nl_escape_re = re.compile(r'\\\\\\n\\s*')\n-\n-docs_link = 'https://rust-lang-nursery.github.io/rust-clippy/master/index.html'\n-\n-\n-def collect(deprecated_lints, clippy_lints, fn):\n-    \"\"\"Collect all lints from a file.\n-\n-    Adds entries to the lints list as `(module, name, level, desc)`.\n-    \"\"\"\n-    with open(fn) as fp:\n-        code = fp.read()\n-\n-    for match in declare_deprecated_lint_re.finditer(code):\n-        # remove \\-newline escapes from description string\n-        desc = nl_escape_re.sub('', match.group('desc'))\n-        deprecated_lints.append((os.path.splitext(os.path.basename(fn))[0],\n-                                match.group('name').lower(),\n-                                desc.replace('\\\\\"', '\"')))\n-\n-    for match in declare_clippy_lint_re.finditer(code):\n-        # remove \\-newline escapes from description string\n-        desc = nl_escape_re.sub('', match.group('desc'))\n-        cat = match.group('cat')\n-        if cat in ('internal', 'internal_warn'):\n-            continue\n-        module_name = os.path.splitext(os.path.basename(fn))[0]\n-        if module_name == 'mod':\n-            module_name = os.path.basename(os.path.dirname(fn))\n-        clippy_lints[cat].append((module_name,\n-                                  match.group('name').lower(),\n-                                  \"allow\",\n-                                  desc.replace('\\\\\"', '\"')))\n-\n-\n-def gen_group(lints):\n-    \"\"\"Write lint group (list of all lints in the form module::NAME).\"\"\"\n-    for (module, name, _, _) in sorted(lints):\n-        yield '        %s::%s,\\n' % (module, name.upper())\n-\n-\n-def gen_mods(lints):\n-    \"\"\"Declare modules\"\"\"\n-\n-    for module in sorted(set(lint[0] for lint in lints)):\n-        yield 'pub mod %s;\\n' % module\n-\n-\n-def gen_deprecated(lints):\n-    \"\"\"Declare deprecated lints\"\"\"\n-\n-    for lint in lints:\n-        yield '    store.register_removed(\\n'\n-        yield '        \"%s\",\\n' % lint[1]\n-        yield '        \"%s\",\\n' % lint[2]\n-        yield '    );\\n'\n-\n-\n-def replace_region(fn, region_start, region_end, callback,\n-                   replace_start=True, write_back=True):\n-    \"\"\"Replace a region in a file delimited by two lines matching regexes.\n-\n-    A callback is called to write the new region.  If `replace_start` is true,\n-    the start delimiter line is replaced as well.  The end delimiter line is\n-    never replaced.\n-    \"\"\"\n-    # read current content\n-    with open(fn) as fp:\n-        lines = list(fp)\n-\n-    found = False\n-\n-    # replace old region with new region\n-    new_lines = []\n-    in_old_region = False\n-    for line in lines:\n-        if in_old_region:\n-            if re.search(region_end, line):\n-                in_old_region = False\n-                new_lines.extend(callback())\n-                new_lines.append(line)\n-        elif re.search(region_start, line):\n-            if not replace_start:\n-                new_lines.append(line)\n-            # old region starts here\n-            in_old_region = True\n-            found = True\n-        else:\n-            new_lines.append(line)\n-\n-    if not found:\n-        print(\"regex \" + region_start + \" not found\")\n-\n-    # write back to file\n-    if write_back:\n-        with open(fn, 'w') as fp:\n-            fp.writelines(new_lines)\n-\n-    # if something changed, return true\n-    return lines != new_lines\n-\n-\n-def main(print_only=False, check=False):\n-    deprecated_lints = []\n-    clippy_lints = {\n-        \"correctness\": [],\n-        \"style\": [],\n-        \"complexity\": [],\n-        \"perf\": [],\n-        \"restriction\": [],\n-        \"pedantic\": [],\n-        \"cargo\": [],\n-        \"nursery\": [],\n-    }\n-\n-    # check directory\n-    if not os.path.isfile('clippy_lints/src/lib.rs'):\n-        print('Error: call this script from clippy checkout directory!')\n-        return\n-\n-    # collect all lints from source files\n-    for root, dirs, files in os.walk('clippy_lints/src'):\n-        for fn in files:\n-            if fn.endswith('.rs'):\n-                collect(deprecated_lints, clippy_lints,\n-                        os.path.join(root, fn))\n-\n-    # determine version\n-    with open('Cargo.toml') as fp:\n-        for line in fp:\n-            if line.startswith('version ='):\n-                clippy_version = line.split()[2].strip('\"')\n-                break\n-        else:\n-            print('Error: version not found in Cargo.toml!')\n-            return\n-\n-    all_lints = []\n-    clippy_lint_groups = [\n-        \"correctness\",\n-        \"style\",\n-        \"complexity\",\n-        \"perf\",\n-    ]\n-    clippy_lint_list = []\n-    for x in clippy_lint_groups:\n-        clippy_lint_list += clippy_lints[x]\n-    for _, value in clippy_lints.iteritems():\n-        all_lints += value\n-\n-    if print_only:\n-        call([\"./util/dev\", \"update_lints\", \"--print-only\"])\n-        return\n-\n-    # update the lint counter in README.md\n-    changed = replace_region(\n-        'README.md',\n-        r'^\\[There are \\d+ lints included in this crate!\\]\\(https://rust-lang-nursery.github.io/rust-clippy/master/index.html\\)$', \"\",\n-        lambda: ['[There are %d lints included in this crate!](https://rust-lang-nursery.github.io/rust-clippy/master/index.html)\\n' %\n-                 (len(all_lints))],\n-        write_back=not check)\n-\n-    # update the links in the CHANGELOG\n-    changed |= replace_region(\n-        'CHANGELOG.md',\n-        \"<!-- begin autogenerated links to lint list -->\",\n-        \"<!-- end autogenerated links to lint list -->\",\n-        lambda: [\"[`{0}`]: {1}#{0}\\n\".format(l[1], docs_link) for l in\n-                 sorted(all_lints + deprecated_lints,\n-                        key=lambda l: l[1])],\n-        replace_start=False, write_back=not check)\n-\n-    # update version of clippy_lints in Cargo.toml\n-    changed |= replace_region(\n-        'Cargo.toml', r'# begin automatic update', '# end automatic update',\n-        lambda: ['clippy_lints = { version = \"%s\", path = \"clippy_lints\" }\\n' %\n-                 clippy_version],\n-        replace_start=False, write_back=not check)\n-\n-    # update version of clippy_lints in Cargo.toml\n-    changed |= replace_region(\n-        'clippy_lints/Cargo.toml', r'# begin automatic update', '# end automatic update',\n-        lambda: ['version = \"%s\"\\n' % clippy_version],\n-        replace_start=False, write_back=not check)\n-\n-    # update the `pub mod` list\n-    changed |= replace_region(\n-        'clippy_lints/src/lib.rs', r'begin lints modules', r'end lints modules',\n-        lambda: gen_mods(all_lints),\n-        replace_start=False, write_back=not check)\n-\n-    # same for \"clippy::*\" lint collections\n-    changed |= replace_region(\n-        'clippy_lints/src/lib.rs', r'reg.register_lint_group\\(\"clippy::all\"', r'\\]\\);',\n-        lambda: gen_group(clippy_lint_list),\n-        replace_start=False, write_back=not check)\n-\n-    for key, value in clippy_lints.iteritems():\n-        # same for \"clippy::*\" lint collections\n-        changed |= replace_region(\n-            'clippy_lints/src/lib.rs', r'reg.register_lint_group\\(\"clippy::' + key + r'\"', r'\\]\\);',\n-            lambda: gen_group(value),\n-            replace_start=False, write_back=not check)\n-\n-    # same for \"deprecated\" lint collection\n-    changed |= replace_region(\n-        'clippy_lints/src/lib.rs', r'begin deprecated lints', r'end deprecated lints',\n-        lambda: gen_deprecated(deprecated_lints),\n-        replace_start=False,\n-        write_back=not check)\n-\n-    if check and changed:\n-        print('Please run util/update_lints.py to regenerate lints lists.')\n-        return 1\n \n+def main():\n+    print('Error: Please use `util/dev` to update lints')\n+    return 1\n \n if __name__ == '__main__':\n-    sys.exit(main(print_only='-n' in sys.argv, check='-c' in sys.argv))\n+    sys.exit(main())"}]}