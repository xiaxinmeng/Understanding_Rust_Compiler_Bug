{"sha": "ae094a7adc8e0f166ea2b137c2940afdb9396bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMDk0YTdhZGM4ZTBmMTY2ZWEyYjEzN2MyOTQwYWZkYjkzOTZiY2Q=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-24T19:27:45Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-24T19:28:35Z"}, "message": "Add 'do atomically { .. }' for exclusives", "tree": {"sha": "49d21e0d95ea214b2d3e161d2afc9a00d473032f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49d21e0d95ea214b2d3e161d2afc9a00d473032f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae094a7adc8e0f166ea2b137c2940afdb9396bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae094a7adc8e0f166ea2b137c2940afdb9396bcd", "html_url": "https://github.com/rust-lang/rust/commit/ae094a7adc8e0f166ea2b137c2940afdb9396bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae094a7adc8e0f166ea2b137c2940afdb9396bcd/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9103e439091fbd4e5ec7e561f007172342065340", "url": "https://api.github.com/repos/rust-lang/rust/commits/9103e439091fbd4e5ec7e561f007172342065340", "html_url": "https://github.com/rust-lang/rust/commit/9103e439091fbd4e5ec7e561f007172342065340"}], "stats": {"total": 104, "additions": 91, "deletions": 13}, "files": [{"sha": "6515babcf6b7fc1ca8a50b10dc51e192e83ba562", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae094a7adc8e0f166ea2b137c2940afdb9396bcd/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae094a7adc8e0f166ea2b137c2940afdb9396bcd/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=ae094a7adc8e0f166ea2b137c2940afdb9396bcd", "patch": "@@ -9,6 +9,8 @@ export refcount;\n export log_str;\n export lock_and_signal, condition, methods;\n \n+import task::atomically;\n+\n enum type_desc = {\n     size: uint,\n     align: uint\n@@ -105,13 +107,17 @@ impl methods for lock_and_signal {\n     unsafe fn lock<T>(f: fn() -> T) -> T {\n         rustrt::rust_lock_cond_lock(self.lock);\n         let _r = unlock(self.lock);\n-        f()\n+        do atomically {\n+            f()\n+        }\n     }\n \n     unsafe fn lock_cond<T>(f: fn(condition) -> T) -> T {\n         rustrt::rust_lock_cond_lock(self.lock);\n         let _r = unlock(self.lock);\n-        f(condition_(self.lock))\n+        do atomically {\n+            f(condition_(self.lock))\n+        }\n     }\n }\n "}, {"sha": "6d6f82fde077c944214158a3bc271c4e077eb34a", "filename": "src/libcore/task.rs", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ae094a7adc8e0f166ea2b137c2940afdb9396bcd/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae094a7adc8e0f166ea2b137c2940afdb9396bcd/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=ae094a7adc8e0f166ea2b137c2940afdb9396bcd", "patch": "@@ -60,6 +60,7 @@ export yield;\n export failing;\n export get_task;\n export unkillable;\n+export atomically;\n \n export local_data_key;\n export local_data_pop;\n@@ -683,16 +684,36 @@ fn get_task() -> task {\n  */\n unsafe fn unkillable(f: fn()) {\n     class allow_failure {\n-      let i: (); // since a class must have at least one field\n-      new(_i: ()) { self.i = (); }\n-      drop { rustrt::rust_task_allow_kill(); }\n+        let t: *rust_task;\n+        new(t: *rust_task) { self.t = t; }\n+        drop { rustrt::rust_task_allow_kill(self.t); }\n     }\n \n-    let _allow_failure = allow_failure(());\n-    rustrt::rust_task_inhibit_kill();\n+    let t = rustrt::rust_get_task();\n+    let _allow_failure = allow_failure(t);\n+    rustrt::rust_task_inhibit_kill(t);\n     f();\n }\n \n+/**\n+ * A stronger version of unkillable that also inhibits scheduling operations.\n+ * For use with exclusive ARCs, which use pthread mutexes directly.\n+ */\n+unsafe fn atomically<U>(f: fn() -> U) -> U {\n+    class defer_interrupts {\n+        let t: *rust_task;\n+        new(t: *rust_task) { self.t = t; }\n+        drop {\n+            rustrt::rust_task_allow_yield(self.t);\n+            rustrt::rust_task_allow_kill(self.t);\n+        }\n+    }\n+    let t = rustrt::rust_get_task();\n+    let _interrupts = defer_interrupts(t);\n+    rustrt::rust_task_inhibit_kill(t);\n+    rustrt::rust_task_inhibit_yield(t);\n+    f()\n+}\n \n /****************************************************************************\n  * Internal\n@@ -1235,8 +1256,10 @@ extern mod rustrt {\n \n     fn rust_task_is_unwinding(task: *rust_task) -> bool;\n     fn rust_osmain_sched_id() -> sched_id;\n-    fn rust_task_inhibit_kill();\n-    fn rust_task_allow_kill();\n+    fn rust_task_inhibit_kill(t: *rust_task);\n+    fn rust_task_allow_kill(t: *rust_task);\n+    fn rust_task_inhibit_yield(t: *rust_task);\n+    fn rust_task_allow_yield(t: *rust_task);\n     fn rust_task_kill_other(task: *rust_task);\n     fn rust_task_kill_all(task: *rust_task);\n \n@@ -1759,6 +1782,21 @@ fn test_unkillable_nested() {\n     po.recv();\n }\n \n+#[test] #[should_fail] #[ignore(cfg(windows))]\n+fn test_atomically() {\n+    unsafe { do atomically { yield(); } }\n+}\n+\n+#[test]\n+fn test_atomically2() {\n+    unsafe { do atomically { } } yield(); // shouldn't fail\n+}\n+\n+#[test] #[should_fail] #[ignore(cfg(windows))]\n+fn test_atomically_nested() {\n+    unsafe { do atomically { do atomically { } yield(); } }\n+}\n+\n #[test]\n fn test_child_doesnt_ref_parent() {\n     // If the child refcounts the parent task, this will stack overflow when"}, {"sha": "784df64d9448850bf25158435f7c57fe2b16c809", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ae094a7adc8e0f166ea2b137c2940afdb9396bcd/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ae094a7adc8e0f166ea2b137c2940afdb9396bcd/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=ae094a7adc8e0f166ea2b137c2940afdb9396bcd", "patch": "@@ -854,17 +854,25 @@ rust_global_env_chan_ptr() {\n }\n \n extern \"C\" void\n-rust_task_inhibit_kill() {\n-    rust_task *task = rust_get_current_task();\n+rust_task_inhibit_kill(rust_task *task) {\n     task->inhibit_kill();\n }\n \n extern \"C\" void\n-rust_task_allow_kill() {\n-    rust_task *task = rust_get_current_task();\n+rust_task_allow_kill(rust_task *task) {\n     task->allow_kill();\n }\n \n+extern \"C\" void\n+rust_task_inhibit_yield(rust_task *task) {\n+    task->inhibit_yield();\n+}\n+\n+extern \"C\" void\n+rust_task_allow_yield(rust_task *task) {\n+    task->allow_yield();\n+}\n+\n extern \"C\" void\n rust_task_kill_other(rust_task *task) { /* Used for linked failure */\n     task->kill();"}, {"sha": "e9879525ee78b779e2a674f124c1a7ccb0bd03b7", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ae094a7adc8e0f166ea2b137c2940afdb9396bcd/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ae094a7adc8e0f166ea2b137c2940afdb9396bcd/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=ae094a7adc8e0f166ea2b137c2940afdb9396bcd", "patch": "@@ -39,6 +39,7 @@ rust_task::rust_task(rust_sched_loop *sched_loop, rust_task_state state,\n     killed(false),\n     reentered_rust_stack(false),\n     disallow_kill(0),\n+    disallow_yield(0),\n     c_stack(NULL),\n     next_c_sp(0),\n     next_rust_sp(0)\n@@ -234,9 +235,18 @@ rust_task::must_fail_from_being_killed_inner() {\n     return killed && !reentered_rust_stack && disallow_kill == 0;\n }\n \n+void rust_task_yield_fail(rust_task *task) {\n+    LOG_ERR(task, task, \"task %\" PRIxPTR \" yielded in an atomic section\",\n+            task);\n+    task->fail();\n+}\n+\n // Only run this on the rust stack\n void\n rust_task::yield(bool *killed) {\n+    if (disallow_yield > 0) {\n+        call_on_c_stack(this, (void *)rust_task_yield_fail);\n+    }\n     // FIXME (#2875): clean this up\n     if (must_fail_from_being_killed()) {\n         {\n@@ -672,6 +682,17 @@ rust_task::allow_kill() {\n     disallow_kill--;\n }\n \n+void rust_task::inhibit_yield() {\n+    scoped_lock with(lifecycle_lock);\n+    disallow_yield++;\n+}\n+\n+void rust_task::allow_yield() {\n+    scoped_lock with(lifecycle_lock);\n+    assert(disallow_yield > 0 && \"Illegal allow_yield(): already yieldable!\");\n+    disallow_yield--;\n+}\n+\n void *\n rust_task::wait_event(bool *killed) {\n     scoped_lock with(lifecycle_lock);"}, {"sha": "985e1ebe6e83d9090993e049c566b0798ca8eb5a", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae094a7adc8e0f166ea2b137c2940afdb9396bcd/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/ae094a7adc8e0f166ea2b137c2940afdb9396bcd/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=ae094a7adc8e0f166ea2b137c2940afdb9396bcd", "patch": "@@ -185,6 +185,7 @@ rust_task : public kernel_owned<rust_task>\n     // Indicates that we've called back into Rust from C\n     bool reentered_rust_stack;\n     unsigned long disallow_kill;\n+    unsigned long disallow_yield;\n \n     // The stack used for running C code, borrowed from the scheduler thread\n     stk_seg *c_stack;\n@@ -318,6 +319,8 @@ rust_task : public kernel_owned<rust_task>\n \n     void inhibit_kill();\n     void allow_kill();\n+    void inhibit_yield();\n+    void allow_yield();\n };\n \n // FIXME (#2697): It would be really nice to be able to get rid of this."}, {"sha": "62fb8482ad513adc57ae394b67787ad928980988", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae094a7adc8e0f166ea2b137c2940afdb9396bcd/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/ae094a7adc8e0f166ea2b137c2940afdb9396bcd/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=ae094a7adc8e0f166ea2b137c2940afdb9396bcd", "patch": "@@ -183,6 +183,8 @@ rust_port_drop\n rust_port_task\n rust_task_inhibit_kill\n rust_task_allow_kill\n+rust_task_inhibit_yield\n+rust_task_allow_yield\n rust_task_kill_other\n rust_task_kill_all\n rust_create_cond_lock"}]}