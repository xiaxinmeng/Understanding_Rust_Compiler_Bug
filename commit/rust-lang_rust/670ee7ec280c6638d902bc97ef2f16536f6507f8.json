{"sha": "670ee7ec280c6638d902bc97ef2f16536f6507f8", "node_id": "C_kwDOAAsO6NoAKDY3MGVlN2VjMjgwYzY2MzhkOTAyYmM5N2VmMmYxNjUzNmY2NTA3Zjg", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-19T12:28:22Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-03-19T12:28:22Z"}, "message": "Sync from rust 31535841701e0bf7ef33998024376f2cedd8b3e3", "tree": {"sha": "122d7fc1c3fc7d56d10d3ec857d90427abe5a834", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/122d7fc1c3fc7d56d10d3ec857d90427abe5a834"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/670ee7ec280c6638d902bc97ef2f16536f6507f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/670ee7ec280c6638d902bc97ef2f16536f6507f8", "html_url": "https://github.com/rust-lang/rust/commit/670ee7ec280c6638d902bc97ef2f16536f6507f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/670ee7ec280c6638d902bc97ef2f16536f6507f8/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2", "html_url": "https://github.com/rust-lang/rust/commit/ef4512b7dcaf2ae10e80e3aeb9b014c4128364b2"}, {"sha": "86daae2e6b7b494d5ea96dda145ad3c409fc3286", "url": "https://api.github.com/repos/rust-lang/rust/commits/86daae2e6b7b494d5ea96dda145ad3c409fc3286", "html_url": "https://github.com/rust-lang/rust/commit/86daae2e6b7b494d5ea96dda145ad3c409fc3286"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "c3b99b64263f2988585865eba773efbab4b8eb1d", "filename": "src/allocator.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/670ee7ec280c6638d902bc97ef2f16536f6507f8/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670ee7ec280c6638d902bc97ef2f16536f6507f8/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=670ee7ec280c6638d902bc97ef2f16536f6507f8", "patch": "@@ -4,6 +4,7 @@\n use crate::prelude::*;\n \n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n+use rustc_session::config::OomStrategy;\n \n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n@@ -18,7 +19,13 @@ pub(crate) fn codegen(\n     if any_dynamic_crate {\n         false\n     } else if let Some(kind) = tcx.allocator_kind(()) {\n-        codegen_inner(module, unwind_context, kind, tcx.lang_items().oom().is_some());\n+        codegen_inner(\n+            module,\n+            unwind_context,\n+            kind,\n+            tcx.lang_items().oom().is_some(),\n+            tcx.sess.opts.debugging_opts.oom,\n+        );\n         true\n     } else {\n         false\n@@ -30,6 +37,7 @@ fn codegen_inner(\n     unwind_context: &mut UnwindContext,\n     kind: AllocatorKind,\n     has_alloc_error_handler: bool,\n+    oom_strategy: OomStrategy,\n ) {\n     let usize_ty = module.target_config().pointer_type();\n \n@@ -129,4 +137,11 @@ fn codegen_inner(\n     }\n     module.define_function(func_id, &mut ctx).unwrap();\n     unwind_context.add_function(func_id, &ctx, module.isa());\n+\n+    let data_id = module.declare_data(OomStrategy::SYMBOL, Linkage::Export, false, false).unwrap();\n+    let mut data_ctx = DataContext::new();\n+    data_ctx.set_align(1);\n+    let val = oom_strategy.should_panic();\n+    data_ctx.define(Box::new([val]));\n+    module.define_data(data_id, &data_ctx).unwrap();\n }"}, {"sha": "ef01897b67bb87b540e04281bd567108dce34465", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/670ee7ec280c6638d902bc97ef2f16536f6507f8/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/670ee7ec280c6638d902bc97ef2f16536f6507f8/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=670ee7ec280c6638d902bc97ef2f16536f6507f8", "patch": "@@ -1,7 +1,6 @@\n //! Handling of `static`s, `const`s and promoted allocations\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::ErrorGuaranteed;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, ConstAllocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n@@ -54,7 +53,7 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n                 {\n                     all_constants_ok = false;\n                     match err {\n-                        ErrorHandled::Reported(ErrorGuaranteed) | ErrorHandled::Linted => {\n+                        ErrorHandled::Reported(_) | ErrorHandled::Linted => {\n                             fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n                         }\n                         ErrorHandled::TooGeneric => {"}]}