{"sha": "e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NTYyNjFlZTdmZjdjZmQzMDFjMGQ3YzMxY2RjOTY5ZTNiZGJmZWI=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-07T16:45:32Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-07T17:29:19Z"}, "message": "Comments, minor refactoring, clean up wording of error messages", "tree": {"sha": "2ff5c5eda8c14d7311528d2f5f4a3ab33e23c408", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ff5c5eda8c14d7311528d2f5f4a3ab33e23c408"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb", "html_url": "https://github.com/rust-lang/rust/commit/e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e0c1dbd4f281a8451c1e9f276ff088d9be15977", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e0c1dbd4f281a8451c1e9f276ff088d9be15977", "html_url": "https://github.com/rust-lang/rust/commit/2e0c1dbd4f281a8451c1e9f276ff088d9be15977"}], "stats": {"total": 54, "additions": 33, "deletions": 21}, "files": [{"sha": "5c22e1558287743accee89913764616c268df4eb", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb", "patch": "@@ -2654,14 +2654,21 @@ fn store_trait_methods(cx: ctxt, id: ast::node_id, ms: @~[method]) {\n \n fn trait_methods(cx: ctxt, id: ast::def_id) -> @~[method] {\n     match cx.trait_method_cache.find(id) {\n-      some(ms) => return ms,\n-      _ => ()\n+      // Local traits are supposed to have been added explicitly.\n+      some(ms) => ms,\n+      _ => {\n+        // If the lookup in trait_method_cache fails, assume that the trait\n+        // method we're trying to look up is in a different crate, and look\n+        // for it there.\n+        assert id.crate != ast::local_crate;\n+        let result = csearch::get_trait_methods(cx, id);\n+\n+        // Store the trait method in the local trait_method_cache so that\n+        // future lookups succeed.\n+        cx.trait_method_cache.insert(id, result);\n+        result\n+      }\n     }\n-    // Local traits are supposed to have been added explicitly.\n-    assert id.crate != ast::local_crate;\n-    let result = csearch::get_trait_methods(cx, id);\n-    cx.trait_method_cache.insert(id, result);\n-    result\n }\n \n fn impl_traits(cx: ctxt, id: ast::def_id) -> ~[t] {"}, {"sha": "7347a9dc601d2ac8700fc0cb9469b98dba1efd6d", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb", "patch": "@@ -57,13 +57,16 @@ class lookup {\n     let include_private: bool;\n \n     new(fcx: @fn_ctxt,\n-        expr: @ast::expr,           //expr for a.b in a.b()\n-        self_expr: @ast::expr,      //a in a.b(...)\n-        borrow_lb: ast::node_id, //scope to borrow the expr for\n-        node_id: ast::node_id,      //node id where to store type of fn\n-        m_name: ast::ident,         //b in a.b(...)\n-        self_ty: ty::t,             //type of a in a.b(...)\n-        supplied_tps: ~[ty::t],      //Xs in a.b::<Xs>(...)\n+\n+        // In a call `a.b::<X, Y, ...>(...)`:\n+        expr: @ast::expr,        // The expression `a.b`.\n+        self_expr: @ast::expr,   // The expression `a`.\n+        borrow_lb: ast::node_id, // Scope to borrow the expression `a` for.\n+        node_id: ast::node_id,   // The node_id in which to store the type of\n+                                 // `a.b`.\n+        m_name: ast::ident,      // The ident `b`.\n+        self_ty: ty::t,          // The type of `a`.\n+        supplied_tps: ~[ty::t],  // The list of types X, Y, ... .\n         include_private: bool) {\n \n         self.fcx = fcx;\n@@ -87,6 +90,8 @@ class lookup {\n                ty::get(self.self_ty).struct};\n \n         // Determine if there are any inherent methods we can call.\n+        // (An inherent method is one that belongs to no trait, but is\n+        // inherent to a class or impl.)\n         let optional_inherent_methods;\n         match get_base_type_def_id(self.fcx.infcx,\n                                  self.self_expr.span,\n@@ -281,14 +286,14 @@ class lookup {\n             if ty::type_has_self(m_fty) {\n                 self.tcx().sess.span_err(\n                     self.expr.span,\n-                    ~\"can not call a method that contains a \\\n-                     self type through a boxed trait\");\n+                    ~\"cannot call a method whose type contains a \\\n+                     self-type through a boxed trait\");\n             }\n \n             if (*m.tps).len() > 0u {\n                 self.tcx().sess.span_err(\n                     self.expr.span,\n-                    ~\"can not call a generic method through a \\\n+                    ~\"cannot call a generic method through a \\\n                      boxed trait\");\n             }\n \n@@ -315,7 +320,7 @@ class lookup {\n             if m.vis == ast::private && !self.include_private {\n                 self.tcx().sess.span_fatal(\n                     self.expr.span,\n-                    ~\"Call to private method not allowed outside \\\n+                    ~\"call to private method not allowed outside \\\n                      its defining class\");\n             }\n "}, {"sha": "f59e583f9b9a0077db8c0e88604a1e4d345911dc", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Call to private method not allowed\n+// error-pattern:call to private method not allowed\n class cat {\n   priv {\n     let mut meows : uint;"}, {"sha": "cccc78b04b95f61f7b70e7ad501e95d3954a0746", "filename": "src/test/compile-fail/selftype-traittype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fselftype-traittype.rs?ref=e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb", "patch": "@@ -3,7 +3,7 @@ trait add {\n }\n \n fn do_add(x: add, y: add) -> add {\n-    x.plus(y) //~ ERROR can not call a method that contains a self type through a boxed trait\n+    x.plus(y) //~ ERROR cannot call a method whose type contains a self-type through a boxed trait\n }\n \n fn main() {}"}, {"sha": "f822aa15380f4ac49545b07f0ea874e3fb67bcfd", "filename": "src/test/compile-fail/trait-test-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-test-2.rs?ref=e656261ee7ff7cfd301c0d7c31cdc969e3bdbfeb", "patch": "@@ -5,5 +5,5 @@ impl of bar for uint { fn dup() -> uint { self } fn blah<X>() {} }\n fn main() {\n     10.dup::<int>(); //~ ERROR does not take type parameters\n     10.blah::<int, int>(); //~ ERROR incorrect number of type parameters\n-    (10 as bar).dup(); //~ ERROR contains a self type\n+    (10 as bar).dup(); //~ ERROR contains a self-type\n }"}]}