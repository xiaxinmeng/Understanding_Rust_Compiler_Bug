{"sha": "c791c64e8434b0477de667c1a0fdbe18c928274c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3OTFjNjRlODQzNGIwNDc3ZGU2NjdjMWEwZmRiZTE4YzkyODI3NGM=", "commit": {"author": {"name": "Ayrton", "email": "a.munoz3327@gmail.com", "date": "2020-10-27T13:00:19Z"}, "committer": {"name": "Ayrton", "email": "a.munoz3327@gmail.com", "date": "2020-10-27T15:04:04Z"}, "message": "Added suggestion to `function_item_references` lint and fixed warning message\n\nAlso updated tests accordingly and tweaked some wording in the lint declaration.", "tree": {"sha": "46ea840d93cf3aa0241c283b93f7e89665e36550", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46ea840d93cf3aa0241c283b93f7e89665e36550"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c791c64e8434b0477de667c1a0fdbe18c928274c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c791c64e8434b0477de667c1a0fdbe18c928274c", "html_url": "https://github.com/rust-lang/rust/commit/c791c64e8434b0477de667c1a0fdbe18c928274c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c791c64e8434b0477de667c1a0fdbe18c928274c/comments", "author": {"login": "ayrtonm", "id": 4975834, "node_id": "MDQ6VXNlcjQ5NzU4MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4975834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayrtonm", "html_url": "https://github.com/ayrtonm", "followers_url": "https://api.github.com/users/ayrtonm/followers", "following_url": "https://api.github.com/users/ayrtonm/following{/other_user}", "gists_url": "https://api.github.com/users/ayrtonm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayrtonm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayrtonm/subscriptions", "organizations_url": "https://api.github.com/users/ayrtonm/orgs", "repos_url": "https://api.github.com/users/ayrtonm/repos", "events_url": "https://api.github.com/users/ayrtonm/events{/privacy}", "received_events_url": "https://api.github.com/users/ayrtonm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ayrtonm", "id": 4975834, "node_id": "MDQ6VXNlcjQ5NzU4MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4975834?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ayrtonm", "html_url": "https://github.com/ayrtonm", "followers_url": "https://api.github.com/users/ayrtonm/followers", "following_url": "https://api.github.com/users/ayrtonm/following{/other_user}", "gists_url": "https://api.github.com/users/ayrtonm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ayrtonm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ayrtonm/subscriptions", "organizations_url": "https://api.github.com/users/ayrtonm/orgs", "repos_url": "https://api.github.com/users/ayrtonm/repos", "events_url": "https://api.github.com/users/ayrtonm/events{/privacy}", "received_events_url": "https://api.github.com/users/ayrtonm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "935fc3642a61e1545e1b98bf4716acbb7bf12e91", "url": "https://api.github.com/repos/rust-lang/rust/commits/935fc3642a61e1545e1b98bf4716acbb7bf12e91", "html_url": "https://github.com/rust-lang/rust/commit/935fc3642a61e1545e1b98bf4716acbb7bf12e91"}], "stats": {"total": 197, "additions": 102, "deletions": 95}, "files": [{"sha": "61427422e4b597306283b396cc263a463521d83d", "filename": "compiler/rustc_mir/src/transform/function_item_references.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c791c64e8434b0477de667c1a0fdbe18c928274c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c791c64e8434b0477de667c1a0fdbe18c928274c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Ffunction_item_references.rs?ref=c791c64e8434b0477de667c1a0fdbe18c928274c", "patch": "@@ -1,3 +1,4 @@\n+use rustc_errors::Applicability;\n use rustc_hir::def_id::DefId;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::*;\n@@ -183,16 +184,22 @@ impl<'a, 'tcx> FunctionItemRefChecker<'a, 'tcx> {\n         let variadic = if fn_sig.c_variadic() { \", ...\" } else { \"\" };\n         let ret = if fn_sig.output().skip_binder().is_unit() { \"\" } else { \" -> _\" };\n         self.tcx.struct_span_lint_hir(FUNCTION_ITEM_REFERENCES, lint_root, span, |lint| {\n-            lint.build(&format!(\n-                \"cast `{}` with `as {}{}fn({}{}){}` to obtain a function pointer\",\n-                ident,\n-                unsafety,\n-                abi,\n-                vec![\"_\"; num_args].join(\", \"),\n-                variadic,\n-                ret,\n-            ))\n-            .emit();\n+            lint.build(\"taking a reference to a function item does not give a function pointer\")\n+                .span_suggestion(\n+                    span,\n+                    &format!(\"cast `{}` to obtain a function pointer\", ident),\n+                    format!(\n+                        \"{} as {}{}fn({}{}){}\",\n+                        ident,\n+                        unsafety,\n+                        abi,\n+                        vec![\"_\"; num_args].join(\", \"),\n+                        variadic,\n+                        ret,\n+                    ),\n+                    Applicability::Unspecified,\n+                )\n+                .emit();\n         });\n     }\n }"}, {"sha": "b8826a548b8bebbf10f1e7c459398f725792068a", "filename": "compiler/rustc_session/src/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c791c64e8434b0477de667c1a0fdbe18c928274c/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c791c64e8434b0477de667c1a0fdbe18c928274c/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flint%2Fbuiltin.rs?ref=c791c64e8434b0477de667c1a0fdbe18c928274c", "patch": "@@ -2674,7 +2674,7 @@ declare_lint! {\n     /// arguments bound by [`fmt::Pointer`] or transmuted.\n     pub FUNCTION_ITEM_REFERENCES,\n     Warn,\n-    \"suggest casting functions to pointers when attempting to take references\",\n+    \"suggest casting to a function pointer when attempting to take references to function items\",\n }\n \n declare_lint! {"}, {"sha": "439b56967d072c2fa3eacbd712d1ed036969a0c6", "filename": "src/test/ui/lint/function-item-references.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c791c64e8434b0477de667c1a0fdbe18c928274c/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c791c64e8434b0477de667c1a0fdbe18c928274c/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.rs?ref=c791c64e8434b0477de667c1a0fdbe18c928274c", "patch": "@@ -38,7 +38,7 @@ fn _format_assoc_item<T: HasItem>(data: T, f: &mut Formatter) -> std::fmt::Resul\n fn _call_pointer_fmt(f: &mut Formatter) -> std::fmt::Result {\n     let zst_ref = &foo;\n     Pointer::fmt(&zst_ref, f)\n-    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n }\n \n fn main() {\n@@ -75,47 +75,47 @@ fn main() {\n \n     //potential ways to incorrectly try printing function pointers\n     println!(\"{:p}\", &foo);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     print!(\"{:p}\", &foo);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     format!(\"{:p}\", &foo);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n \n     println!(\"{:p}\", &foo as *const _);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     println!(\"{:p}\", zst_ref);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     println!(\"{:p}\", cast_zst_ptr);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     println!(\"{:p}\", coerced_zst_ptr);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n \n     println!(\"{:p}\", &fn_item);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     println!(\"{:p}\", indirect_ref);\n-    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n \n     println!(\"{:p}\", &nop);\n-    //~^ WARNING cast `nop` with `as fn()` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     println!(\"{:p}\", &bar);\n-    //~^ WARNING cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     println!(\"{:p}\", &baz);\n-    //~^ WARNING cast `baz` with `as fn(_, _) -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     println!(\"{:p}\", &unsafe_fn);\n-    //~^ WARNING cast `unsafe_fn` with `as unsafe fn()` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     println!(\"{:p}\", &c_fn);\n-    //~^ WARNING cast `c_fn` with `as extern \"C\" fn()` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     println!(\"{:p}\", &unsafe_c_fn);\n-    //~^ WARNING cast `unsafe_c_fn` with `as unsafe extern \"C\" fn()` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     println!(\"{:p}\", &variadic);\n-    //~^ WARNING cast `variadic` with `as unsafe extern \"C\" fn(_, ...)` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     println!(\"{:p}\", &std::env::var::<String>);\n-    //~^ WARNING cast `var` with `as fn(_) -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n \n     println!(\"{:p} {:p} {:p}\", &nop, &foo, &bar);\n-    //~^ WARNING cast `nop` with `as fn()` to obtain a function pointer\n-    //~^^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n-    //~^^^ WARNING cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n+    //~^^ WARNING taking a reference to a function item does not give a function pointer\n+    //~^^^ WARNING taking a reference to a function item does not give a function pointer\n \n     //using a function reference to call a function shouldn't lint\n     (&bar)(1);\n@@ -128,10 +128,10 @@ fn main() {\n     unsafe {\n         //potential ways to incorrectly try transmuting function pointers\n         std::mem::transmute::<_, usize>(&foo);\n-        //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n+        //~^ WARNING taking a reference to a function item does not give a function pointer\n         std::mem::transmute::<_, (usize, usize)>((&foo, &bar));\n-        //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n-        //~^^ WARNING cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+        //~^ WARNING taking a reference to a function item does not give a function pointer\n+        //~^^ WARNING taking a reference to a function item does not give a function pointer\n \n         //the correct way to transmute function pointers\n         std::mem::transmute::<_, usize>(foo as fn() -> u32);\n@@ -140,12 +140,12 @@ fn main() {\n \n     //function references as arguments required to be bound by std::fmt::Pointer should lint\n     print_ptr(&bar);\n-    //~^ WARNING cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     bound_by_ptr_trait(&bar);\n-    //~^ WARNING cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n     bound_by_ptr_trait_tuple((&foo, &bar));\n-    //~^ WARNING cast `foo` with `as fn() -> _` to obtain a function pointer\n-    //~^^ WARNING cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+    //~^ WARNING taking a reference to a function item does not give a function pointer\n+    //~^^ WARNING taking a reference to a function item does not give a function pointer\n     implicit_ptr_trait(&bar); // ignore\n \n     //correct ways to pass function pointers as arguments bound by std::fmt::Pointer"}, {"sha": "610dff04e6edf09b9c87a841a4cb1ec0f651bf60", "filename": "src/test/ui/lint/function-item-references.stderr", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/c791c64e8434b0477de667c1a0fdbe18c928274c/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c791c64e8434b0477de667c1a0fdbe18c928274c/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Ffunction-item-references.stderr?ref=c791c64e8434b0477de667c1a0fdbe18c928274c", "patch": "@@ -1,176 +1,176 @@\n-warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:40:18\n    |\n LL |     Pointer::fmt(&zst_ref, f)\n-   |                  ^^^^^^^^\n+   |                  ^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n    |\n note: the lint level is defined here\n   --> $DIR/function-item-references.rs:3:9\n    |\n LL | #![warn(function_item_references)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:77:22\n    |\n LL |     println!(\"{:p}\", &foo);\n-   |                      ^^^^\n+   |                      ^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n-warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:79:20\n    |\n LL |     print!(\"{:p}\", &foo);\n-   |                    ^^^^\n+   |                    ^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n-warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:81:21\n    |\n LL |     format!(\"{:p}\", &foo);\n-   |                     ^^^^\n+   |                     ^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n-warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:84:22\n    |\n LL |     println!(\"{:p}\", &foo as *const _);\n-   |                      ^^^^^^^^^^^^^^^^\n+   |                      ^^^^^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n-warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:86:22\n    |\n LL |     println!(\"{:p}\", zst_ref);\n-   |                      ^^^^^^^\n+   |                      ^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n-warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:88:22\n    |\n LL |     println!(\"{:p}\", cast_zst_ptr);\n-   |                      ^^^^^^^^^^^^\n+   |                      ^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n-warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:90:22\n    |\n LL |     println!(\"{:p}\", coerced_zst_ptr);\n-   |                      ^^^^^^^^^^^^^^^\n+   |                      ^^^^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n-warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:93:22\n    |\n LL |     println!(\"{:p}\", &fn_item);\n-   |                      ^^^^^^^^\n+   |                      ^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n-warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:95:22\n    |\n LL |     println!(\"{:p}\", indirect_ref);\n-   |                      ^^^^^^^^^^^^\n+   |                      ^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n-warning: cast `nop` with `as fn()` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:98:22\n    |\n LL |     println!(\"{:p}\", &nop);\n-   |                      ^^^^\n+   |                      ^^^^ help: cast `nop` to obtain a function pointer: `nop as fn()`\n \n-warning: cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:100:22\n    |\n LL |     println!(\"{:p}\", &bar);\n-   |                      ^^^^\n+   |                      ^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n-warning: cast `baz` with `as fn(_, _) -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:102:22\n    |\n LL |     println!(\"{:p}\", &baz);\n-   |                      ^^^^\n+   |                      ^^^^ help: cast `baz` to obtain a function pointer: `baz as fn(_, _) -> _`\n \n-warning: cast `unsafe_fn` with `as unsafe fn()` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:104:22\n    |\n LL |     println!(\"{:p}\", &unsafe_fn);\n-   |                      ^^^^^^^^^^\n+   |                      ^^^^^^^^^^ help: cast `unsafe_fn` to obtain a function pointer: `unsafe_fn as unsafe fn()`\n \n-warning: cast `c_fn` with `as extern \"C\" fn()` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:106:22\n    |\n LL |     println!(\"{:p}\", &c_fn);\n-   |                      ^^^^^\n+   |                      ^^^^^ help: cast `c_fn` to obtain a function pointer: `c_fn as extern \"C\" fn()`\n \n-warning: cast `unsafe_c_fn` with `as unsafe extern \"C\" fn()` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:108:22\n    |\n LL |     println!(\"{:p}\", &unsafe_c_fn);\n-   |                      ^^^^^^^^^^^^\n+   |                      ^^^^^^^^^^^^ help: cast `unsafe_c_fn` to obtain a function pointer: `unsafe_c_fn as unsafe extern \"C\" fn()`\n \n-warning: cast `variadic` with `as unsafe extern \"C\" fn(_, ...)` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:110:22\n    |\n LL |     println!(\"{:p}\", &variadic);\n-   |                      ^^^^^^^^^\n+   |                      ^^^^^^^^^ help: cast `variadic` to obtain a function pointer: `variadic as unsafe extern \"C\" fn(_, ...)`\n \n-warning: cast `var` with `as fn(_) -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:112:22\n    |\n LL |     println!(\"{:p}\", &std::env::var::<String>);\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: cast `var` to obtain a function pointer: `var as fn(_) -> _`\n \n-warning: cast `nop` with `as fn()` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:115:32\n    |\n LL |     println!(\"{:p} {:p} {:p}\", &nop, &foo, &bar);\n-   |                                ^^^^\n+   |                                ^^^^ help: cast `nop` to obtain a function pointer: `nop as fn()`\n \n-warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:115:38\n    |\n LL |     println!(\"{:p} {:p} {:p}\", &nop, &foo, &bar);\n-   |                                      ^^^^\n+   |                                      ^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n-warning: cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:115:44\n    |\n LL |     println!(\"{:p} {:p} {:p}\", &nop, &foo, &bar);\n-   |                                            ^^^^\n+   |                                            ^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n-warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:130:41\n    |\n LL |         std::mem::transmute::<_, usize>(&foo);\n-   |                                         ^^^^\n+   |                                         ^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n-warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:132:50\n    |\n LL |         std::mem::transmute::<_, (usize, usize)>((&foo, &bar));\n-   |                                                  ^^^^^^^^^^^^\n+   |                                                  ^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n-warning: cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:132:50\n    |\n LL |         std::mem::transmute::<_, (usize, usize)>((&foo, &bar));\n-   |                                                  ^^^^^^^^^^^^\n+   |                                                  ^^^^^^^^^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n-warning: cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:142:15\n    |\n LL |     print_ptr(&bar);\n-   |               ^^^^\n+   |               ^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n-warning: cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:144:24\n    |\n LL |     bound_by_ptr_trait(&bar);\n-   |                        ^^^^\n+   |                        ^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n-warning: cast `bar` with `as fn(_) -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:146:30\n    |\n LL |     bound_by_ptr_trait_tuple((&foo, &bar));\n-   |                              ^^^^^^^^^^^^\n+   |                              ^^^^^^^^^^^^ help: cast `bar` to obtain a function pointer: `bar as fn(_) -> _`\n \n-warning: cast `foo` with `as fn() -> _` to obtain a function pointer\n+warning: taking a reference to a function item does not give a function pointer\n   --> $DIR/function-item-references.rs:146:30\n    |\n LL |     bound_by_ptr_trait_tuple((&foo, &bar));\n-   |                              ^^^^^^^^^^^^\n+   |                              ^^^^^^^^^^^^ help: cast `foo` to obtain a function pointer: `foo as fn() -> _`\n \n warning: 28 warnings emitted\n "}]}