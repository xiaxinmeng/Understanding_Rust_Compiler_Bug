{"sha": "a038d272b0b01d74b54c419f28d29d3ee7cee647", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMzhkMjcyYjBiMDFkNzRiNTRjNDE5ZjI4ZDI5ZDNlZTdjZWU2NDc=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-25T00:28:30Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-25T00:28:30Z"}, "message": "rust_cond_lock acquire/release should be inside the atomically { .. }", "tree": {"sha": "15f195b8634206a3094f5458d7a048efb0d881a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15f195b8634206a3094f5458d7a048efb0d881a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a038d272b0b01d74b54c419f28d29d3ee7cee647", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a038d272b0b01d74b54c419f28d29d3ee7cee647", "html_url": "https://github.com/rust-lang/rust/commit/a038d272b0b01d74b54c419f28d29d3ee7cee647", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a038d272b0b01d74b54c419f28d29d3ee7cee647/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb5db3bc8a4087c29ff37376edb2a3c01200f65d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb5db3bc8a4087c29ff37376edb2a3c01200f65d", "html_url": "https://github.com/rust-lang/rust/commit/bb5db3bc8a4087c29ff37376edb2a3c01200f65d"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "76c0e9f0753ee7016f881b99bf4bcc04ff66e05f", "filename": "src/libcore/sys.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a038d272b0b01d74b54c419f28d29d3ee7cee647/src%2Flibcore%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a038d272b0b01d74b54c419f28d29d3ee7cee647/src%2Flibcore%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsys.rs?ref=a038d272b0b01d74b54c419f28d29d3ee7cee647", "patch": "@@ -105,17 +105,17 @@ class unlock {\n \n impl methods for lock_and_signal {\n     unsafe fn lock<T>(f: fn() -> T) -> T {\n-        rustrt::rust_lock_cond_lock(self.lock);\n-        let _r = unlock(self.lock);\n         do atomically {\n+            rustrt::rust_lock_cond_lock(self.lock);\n+            let _r = unlock(self.lock);\n             f()\n         }\n     }\n \n     unsafe fn lock_cond<T>(f: fn(condition) -> T) -> T {\n-        rustrt::rust_lock_cond_lock(self.lock);\n-        let _r = unlock(self.lock);\n         do atomically {\n+            rustrt::rust_lock_cond_lock(self.lock);\n+            let _r = unlock(self.lock);\n             f(condition_(self.lock))\n         }\n     }"}]}