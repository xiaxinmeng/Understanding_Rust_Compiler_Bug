{"sha": "c5d65aa58043cc1eac76838319009fce9de1b019", "node_id": "C_kwDOAAsO6NoAKGM1ZDY1YWE1ODA0M2NjMWVhYzc2ODM4MzE5MDA5ZmNlOWRlMWIwMTk", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2023-02-03T23:03:12Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2023-03-04T15:37:40Z"}, "message": "Apply BOLT optimizations without rebuilding LLVM", "tree": {"sha": "0ce6d0c12717c64326ce83a13559bf6a587b9876", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ce6d0c12717c64326ce83a13559bf6a587b9876"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5d65aa58043cc1eac76838319009fce9de1b019", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEzFQynJm4WzBnfhz8kJzQ0mSDUWsFAmQDZcQACgkQkJzQ0mSD\nUWuDNwv/Yx8FORbI9jX6v1fbIdFaZRYpmpfMEF8iv+739ZkAh+E8al3ojevfpFnh\nt2WG7eo47FRNUybCekw551hEDJYOCQ9q4RDzNQpQDn2ObXhcTcbfqwANEK0N/OjA\nKX1OP5j+CIfYaaeIugYIDjmtJB2NUVmvbQm2hdObvzziBFPs58HHGu2zIdhH1lL8\nKAROSaGT4kugLB8Trzmygyc5XXbpB67RoYfECGKw7G9cFi4Ie1z2JHbCIgGk5wBY\ngK69s6kFIw0eSsw+E/cG9OBAjARYyzxQlW+IwRB3WCByoMemPiMDNns2QbzgQ2F3\niXTA9zOJKitgKsyatOuOmpvvgVGdu+JlkP9lT8QxDPTDR+wHSAOtQiHqF83dvCM5\nnoWLsFySSxeHA1ubvdpckRWQKywcy8IsIFWRQLyaWQAYBsjn5HWnwkiXi35gYiWf\nC2vB2xg4r5ZdxL8KI6xzCYSV3tHHjOvXtr0wJ5B7IvfbB5YHSJDQ5vHnZwDguO3L\nJXQIG3Om\n=q8ES\n-----END PGP SIGNATURE-----", "payload": "tree 0ce6d0c12717c64326ce83a13559bf6a587b9876\nparent 276b75a843af8822ffe4e395266d9445679a57a4\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1675465392 +0100\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1677944260 +0100\n\nApply BOLT optimizations without rebuilding LLVM\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d65aa58043cc1eac76838319009fce9de1b019", "html_url": "https://github.com/rust-lang/rust/commit/c5d65aa58043cc1eac76838319009fce9de1b019", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5d65aa58043cc1eac76838319009fce9de1b019/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "276b75a843af8822ffe4e395266d9445679a57a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/276b75a843af8822ffe4e395266d9445679a57a4", "html_url": "https://github.com/rust-lang/rust/commit/276b75a843af8822ffe4e395266d9445679a57a4"}], "stats": {"total": 68, "additions": 32, "deletions": 36}, "files": [{"sha": "d424852b845d031e798f0466d1668e9aa3ed7210", "filename": "src/bootstrap/bolt.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c5d65aa58043cc1eac76838319009fce9de1b019/src%2Fbootstrap%2Fbolt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d65aa58043cc1eac76838319009fce9de1b019/src%2Fbootstrap%2Fbolt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbolt.rs?ref=c5d65aa58043cc1eac76838319009fce9de1b019", "patch": "@@ -1,12 +1,13 @@\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n \n /// Uses the `llvm-bolt` binary to instrument the binary/library at the given `path` with BOLT.\n /// When the instrumented artifact is executed, it will generate BOLT profiles into\n /// `/tmp/prof.fdata.<pid>.fdata`.\n-pub fn instrument_with_bolt_inplace(path: &Path) {\n+/// Returns a path to the instrumented artifact, created in a temporary directory.\n+pub fn instrument_with_bolt(path: &Path) -> PathBuf {\n     let dir = std::env::temp_dir();\n-    let instrumented_path = dir.join(\"instrumented.so\");\n+    let instrumented_path = dir.join(path.file_name().unwrap());\n \n     let status = Command::new(\"llvm-bolt\")\n         .arg(\"-instrument\")\n@@ -21,19 +22,19 @@ pub fn instrument_with_bolt_inplace(path: &Path) {\n     if !status.success() {\n         panic!(\"Could not instrument {} with BOLT, exit code {:?}\", path.display(), status.code());\n     }\n-\n-    std::fs::copy(&instrumented_path, path).expect(\"Cannot copy instrumented artifact\");\n-    std::fs::remove_file(instrumented_path).expect(\"Cannot delete instrumented artifact\");\n+    instrumented_path\n }\n \n /// Uses the `llvm-bolt` binary to optimize the binary/library at the given `path` with BOLT,\n /// using merged profiles from `profile_path`.\n ///\n /// The recorded profiles have to be merged using the `merge-fdata` tool from LLVM and the merged\n /// profile path should be then passed to this function.\n-pub fn optimize_library_with_bolt_inplace(path: &Path, profile_path: &Path) {\n+///\n+/// Returns a path to the optimized artifact, created in a temporary directory.\n+pub fn optimize_with_bolt(path: &Path, profile_path: &Path) -> PathBuf {\n     let dir = std::env::temp_dir();\n-    let optimized_path = dir.join(\"optimized.so\");\n+    let optimized_path = dir.join(path.file_name().unwrap());\n \n     let status = Command::new(\"llvm-bolt\")\n         .arg(&path)\n@@ -65,7 +66,5 @@ pub fn optimize_library_with_bolt_inplace(path: &Path, profile_path: &Path) {\n     if !status.success() {\n         panic!(\"Could not optimize {} with BOLT, exit code {:?}\", path.display(), status.code());\n     }\n-\n-    std::fs::copy(&optimized_path, path).expect(\"Cannot copy optimized artifact\");\n-    std::fs::remove_file(optimized_path).expect(\"Cannot delete optimized artifact\");\n+    optimized_path\n }"}, {"sha": "f6f6f4cc8ea9a3ca8f81d0094fa00a49b12eb5a3", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c5d65aa58043cc1eac76838319009fce9de1b019/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d65aa58043cc1eac76838319009fce9de1b019/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=c5d65aa58043cc1eac76838319009fce9de1b019", "patch": "@@ -19,6 +19,7 @@ use std::process::Command;\n use object::read::archive::ArchiveFile;\n use object::BinaryFormat;\n \n+use crate::bolt::{instrument_with_bolt, optimize_with_bolt};\n use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::channel;\n@@ -1904,6 +1905,26 @@ fn add_env(builder: &Builder<'_>, cmd: &mut Command, target: TargetSelection) {\n     }\n }\n \n+fn install_llvm_file(builder: &Builder<'_>, source: &Path, destination: &Path) {\n+    if source.as_os_str().is_empty() {\n+        return;\n+    }\n+\n+    // After LLVM is built, we modify (instrument or optimize) the libLLVM.so library file.\n+    // This is not done in-place so that the built LLVM files are not \"tainted\" with BOLT.\n+    // We perform the instrumentation/optimization here, on the fly, just before they are being\n+    // packaged into some destination directory.\n+    let postprocessed = if builder.config.llvm_bolt_profile_generate {\n+        instrument_with_bolt(source)\n+    } else if let Some(path) = &builder.config.llvm_bolt_profile_use {\n+        optimize_with_bolt(source, &Path::new(&path))\n+    } else {\n+        source.to_path_buf()\n+    };\n+\n+    builder.install(&postprocessed, destination, 0o644);\n+}\n+\n /// Maybe add LLVM object files to the given destination lib-dir. Allows either static or dynamic linking.\n ///\n /// Returns whether the files were actually copied.\n@@ -1955,7 +1976,7 @@ fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir\n             } else {\n                 PathBuf::from(file)\n             };\n-            builder.install(&file, dst_libdir, 0o644);\n+            install_llvm_file(builder, &file, dst_libdir);\n         }\n         !builder.config.dry_run()\n     } else {"}, {"sha": "8c2bece1e6218822dd559959c495583634fbcbcf", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c5d65aa58043cc1eac76838319009fce9de1b019/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d65aa58043cc1eac76838319009fce9de1b019/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=c5d65aa58043cc1eac76838319009fce9de1b019", "patch": "@@ -16,7 +16,6 @@ use std::io;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-use crate::bolt::{instrument_with_bolt_inplace, optimize_library_with_bolt_inplace};\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::channel;\n use crate::config::{Config, TargetSelection};\n@@ -523,34 +522,12 @@ impl Step for Llvm {\n             }\n         }\n \n-        // After LLVM is built, we modify (instrument or optimize) the libLLVM.so library file\n-        // in place. This is fine, because currently we do not support incrementally rebuilding\n-        // LLVM after a configuration change, so to rebuild it the build files have to be removed,\n-        // which will also remove these modified files.\n-        if builder.config.llvm_bolt_profile_generate {\n-            instrument_with_bolt_inplace(&get_built_llvm_lib_path(&res.llvm_config));\n-        }\n-        if let Some(path) = &builder.config.llvm_bolt_profile_use {\n-            optimize_library_with_bolt_inplace(\n-                &get_built_llvm_lib_path(&res.llvm_config),\n-                &Path::new(path),\n-            );\n-        }\n-\n         t!(stamp.write());\n \n         res\n     }\n }\n \n-/// Returns path to a built LLVM library (libLLVM.so).\n-/// Assumes that we have built LLVM into a single library file.\n-fn get_built_llvm_lib_path(llvm_config_path: &Path) -> PathBuf {\n-    let mut cmd = Command::new(llvm_config_path);\n-    cmd.arg(\"--libfiles\");\n-    PathBuf::from(output(&mut cmd).trim())\n-}\n-\n fn check_llvm_version(builder: &Builder<'_>, llvm_config: &Path) {\n     if !builder.config.llvm_version_check {\n         return;"}, {"sha": "ebd111e6453549994c80c214323a607234a45cb3", "filename": "src/ci/stage-build.py", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5d65aa58043cc1eac76838319009fce9de1b019/src%2Fci%2Fstage-build.py", "raw_url": "https://github.com/rust-lang/rust/raw/c5d65aa58043cc1eac76838319009fce9de1b019/src%2Fci%2Fstage-build.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fstage-build.py?ref=c5d65aa58043cc1eac76838319009fce9de1b019", "patch": "@@ -805,7 +805,6 @@ def execute_build_pipeline(timer: Timer, pipeline: Pipeline, final_build_args: L\n                 gather_llvm_bolt_profiles(pipeline)\n \n         print_free_disk_space(pipeline)\n-        clear_llvm_files(pipeline)\n         final_build_args += [\n             \"--llvm-bolt-profile-use\",\n             pipeline.llvm_bolt_profile_merged_file()"}]}