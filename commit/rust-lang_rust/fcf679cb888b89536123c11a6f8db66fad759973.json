{"sha": "fcf679cb888b89536123c11a6f8db66fad759973", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZjY3OWNiODg4Yjg5NTM2MTIzYzExYTZmOGRiNjZmYWQ3NTk5NzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-11T22:02:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-11T22:02:08Z"}, "message": "rollup merge of #22151: Gankro/macro-bench\n\nr? @alexcrichton", "tree": {"sha": "ae76de1ecf82e343ada3285e7b8f0edcb213a443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae76de1ecf82e343ada3285e7b8f0edcb213a443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcf679cb888b89536123c11a6f8db66fad759973", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf679cb888b89536123c11a6f8db66fad759973", "html_url": "https://github.com/rust-lang/rust/commit/fcf679cb888b89536123c11a6f8db66fad759973", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcf679cb888b89536123c11a6f8db66fad759973/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18d31cc14b4da433efa72a44ba326485e2f39b04", "url": "https://api.github.com/repos/rust-lang/rust/commits/18d31cc14b4da433efa72a44ba326485e2f39b04", "html_url": "https://github.com/rust-lang/rust/commit/18d31cc14b4da433efa72a44ba326485e2f39b04"}, {"sha": "b24c6fde477dd7a8734a783dc0f4eeb9a1ea4f18", "url": "https://api.github.com/repos/rust-lang/rust/commits/b24c6fde477dd7a8734a783dc0f4eeb9a1ea4f18", "html_url": "https://github.com/rust-lang/rust/commit/b24c6fde477dd7a8734a783dc0f4eeb9a1ea4f18"}], "stats": {"total": 343, "additions": 120, "deletions": 223}, "files": [{"sha": "b59799b49971f45e1075682ea4b8acc717f20179", "filename": "src/libcollections/bench.rs", "status": "modified", "additions": 103, "deletions": 93, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/fcf679cb888b89536123c11a6f8db66fad759973/src%2Flibcollections%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf679cb888b89536123c11a6f8db66fad759973/src%2Flibcollections%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbench.rs?ref=fcf679cb888b89536123c11a6f8db66fad759973", "patch": "@@ -8,103 +8,113 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::*;\n-use std::rand;\n-use std::rand::Rng;\n-use test::{Bencher, black_box};\n-\n-pub fn insert_rand_n<M, I, R>(n: usize,\n-                              map: &mut M,\n-                              b: &mut Bencher,\n-                              mut insert: I,\n-                              mut remove: R) where\n-    I: FnMut(&mut M, usize),\n-    R: FnMut(&mut M, usize),\n-{\n-    // setup\n-    let mut rng = rand::weak_rng();\n-\n-    for _ in 0..n {\n-        insert(map, rng.gen::<usize>() % n);\n-    }\n-\n-    // measure\n-    b.iter(|| {\n-        let k = rng.gen::<usize>() % n;\n-        insert(map, k);\n-        remove(map, k);\n-    });\n-    black_box(map);\n+macro_rules! map_insert_rand_bench {\n+    ($name: ident, $n: expr, $map: ident) => (\n+        #[bench]\n+        pub fn $name(b: &mut ::test::Bencher) {\n+            use std::rand;\n+            use std::rand::Rng;\n+            use test::black_box;\n+\n+            let n: usize = $n;\n+            let mut map = $map::new();\n+            // setup\n+            let mut rng = rand::weak_rng();\n+\n+            for _ in 0..n {\n+                let i = rng.gen() % n;\n+                map.insert(i, i);\n+            }\n+\n+            // measure\n+            b.iter(|| {\n+                let k = rng.gen() % n;\n+                map.insert(k, k);\n+                map.remove(&k);\n+            });\n+            black_box(map);\n+        }\n+    )\n }\n \n-pub fn insert_seq_n<M, I, R>(n: usize,\n-                             map: &mut M,\n-                             b: &mut Bencher,\n-                             mut insert: I,\n-                             mut remove: R) where\n-    I: FnMut(&mut M, usize),\n-    R: FnMut(&mut M, usize),\n-{\n-    // setup\n-    for i in 0..n {\n-        insert(map, i * 2);\n-    }\n-\n-    // measure\n-    let mut i = 1;\n-    b.iter(|| {\n-        insert(map, i);\n-        remove(map, i);\n-        i = (i + 2) % n;\n-    });\n-    black_box(map);\n+macro_rules! map_insert_seq_bench {\n+    ($name: ident, $n: expr, $map: ident) => (\n+        #[bench]\n+        pub fn $name(b: &mut ::test::Bencher) {\n+            use test::black_box;\n+\n+            let mut map = $map::new();\n+            let n: usize = $n;\n+            // setup\n+            for i in 0..n {\n+                map.insert(i * 2, i * 2);\n+            }\n+\n+            // measure\n+            let mut i = 1;\n+            b.iter(|| {\n+                map.insert(i, i);\n+                map.remove(&i);\n+                i = (i + 2) % n;\n+            });\n+            black_box(map);\n+        }\n+    )\n }\n \n-pub fn find_rand_n<M, T, I, F>(n: usize,\n-                               map: &mut M,\n-                               b: &mut Bencher,\n-                               mut insert: I,\n-                               mut find: F) where\n-    I: FnMut(&mut M, usize),\n-    F: FnMut(&M, usize) -> T,\n-{\n-    // setup\n-    let mut rng = rand::weak_rng();\n-    let mut keys: Vec<_> = (0..n).map(|_| rng.gen::<usize>() % n).collect();\n-\n-    for k in &keys {\n-        insert(map, *k);\n-    }\n-\n-    rng.shuffle(&mut keys);\n-\n-    // measure\n-    let mut i = 0;\n-    b.iter(|| {\n-        let t = find(map, keys[i]);\n-        i = (i + 1) % n;\n-        black_box(t);\n-    })\n+macro_rules! map_find_rand_bench {\n+    ($name: ident, $n: expr, $map: ident) => (\n+        #[bench]\n+        pub fn $name(b: &mut ::test::Bencher) {\n+            use std::rand;\n+            use std::rand::Rng;\n+            use test::black_box;\n+\n+            let mut map = $map::new();\n+            let n: usize = $n;\n+\n+            // setup\n+            let mut rng = rand::weak_rng();\n+            let mut keys: Vec<_> = (0..n).map(|_| rng.gen() % n).collect();\n+\n+            for &k in &keys {\n+                map.insert(k, k);\n+            }\n+\n+            rng.shuffle(&mut keys);\n+\n+            // measure\n+            let mut i = 0;\n+            b.iter(|| {\n+                let t = map.get(&keys[i]);\n+                i = (i + 1) % n;\n+                black_box(t);\n+            })\n+        }\n+    )\n }\n \n-pub fn find_seq_n<M, T, I, F>(n: usize,\n-                              map: &mut M,\n-                              b: &mut Bencher,\n-                              mut insert: I,\n-                              mut find: F) where\n-    I: FnMut(&mut M, usize),\n-    F: FnMut(&M, usize) -> T,\n-{\n-    // setup\n-    for i in 0..n {\n-        insert(map, i);\n-    }\n-\n-    // measure\n-    let mut i = 0;\n-    b.iter(|| {\n-        let x = find(map, i);\n-        i = (i + 1) % n;\n-        black_box(x);\n-    })\n+macro_rules! map_find_seq_bench {\n+    ($name: ident, $n: expr, $map: ident) => (\n+        #[bench]\n+        pub fn $name(b: &mut ::test::Bencher) {\n+            use test::black_box;\n+\n+            let mut map = $map::new();\n+            let n: usize = $n;\n+\n+            // setup\n+            for i in 0..n {\n+                map.insert(i, i);\n+            }\n+\n+            // measure\n+            let mut i = 0;\n+            b.iter(|| {\n+                let x = map.get(&i);\n+                i = (i + 1) % n;\n+                black_box(x);\n+            })\n+        }\n+    )\n }"}, {"sha": "0e4a4002d6a0991d2c21e0af1777cc16ba834a76", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 8, "deletions": 64, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/fcf679cb888b89536123c11a6f8db66fad759973/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf679cb888b89536123c11a6f8db66fad759973/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=fcf679cb888b89536123c11a6f8db66fad759973", "patch": "@@ -1843,74 +1843,18 @@ mod bench {\n     use test::{Bencher, black_box};\n \n     use super::BTreeMap;\n-    use bench::{insert_rand_n, insert_seq_n, find_rand_n, find_seq_n};\n \n-    #[bench]\n-    pub fn insert_rand_100(b: &mut Bencher) {\n-        let mut m = BTreeMap::new();\n-        insert_rand_n(100, &mut m, b,\n-                      |m, i| { m.insert(i, 1); },\n-                      |m, i| { m.remove(&i); });\n-    }\n-\n-    #[bench]\n-    pub fn insert_rand_10_000(b: &mut Bencher) {\n-        let mut m = BTreeMap::new();\n-        insert_rand_n(10_000, &mut m, b,\n-                      |m, i| { m.insert(i, 1); },\n-                      |m, i| { m.remove(&i); });\n-    }\n-\n-    // Insert seq\n-    #[bench]\n-    pub fn insert_seq_100(b: &mut Bencher) {\n-        let mut m = BTreeMap::new();\n-        insert_seq_n(100, &mut m, b,\n-                     |m, i| { m.insert(i, 1); },\n-                     |m, i| { m.remove(&i); });\n-    }\n-\n-    #[bench]\n-    pub fn insert_seq_10_000(b: &mut Bencher) {\n-        let mut m = BTreeMap::new();\n-        insert_seq_n(10_000, &mut m, b,\n-                     |m, i| { m.insert(i, 1); },\n-                     |m, i| { m.remove(&i); });\n-    }\n+    map_insert_rand_bench!{insert_rand_100,    100,    BTreeMap}\n+    map_insert_rand_bench!{insert_rand_10_000, 10_000, BTreeMap}\n \n-    // Find rand\n-    #[bench]\n-    pub fn find_rand_100(b: &mut Bencher) {\n-        let mut m = BTreeMap::new();\n-        find_rand_n(100, &mut m, b,\n-                    |m, i| { m.insert(i, 1); },\n-                    |m, i| { m.get(&i); });\n-    }\n-\n-    #[bench]\n-    pub fn find_rand_10_000(b: &mut Bencher) {\n-        let mut m = BTreeMap::new();\n-        find_rand_n(10_000, &mut m, b,\n-                    |m, i| { m.insert(i, 1); },\n-                    |m, i| { m.get(&i); });\n-    }\n+    map_insert_seq_bench!{insert_seq_100,    100,    BTreeMap}\n+    map_insert_seq_bench!{insert_seq_10_000, 10_000, BTreeMap}\n \n-    // Find seq\n-    #[bench]\n-    pub fn find_seq_100(b: &mut Bencher) {\n-        let mut m = BTreeMap::new();\n-        find_seq_n(100, &mut m, b,\n-                   |m, i| { m.insert(i, 1); },\n-                   |m, i| { m.get(&i); });\n-    }\n+    map_find_rand_bench!{find_rand_100,    100,    BTreeMap}\n+    map_find_rand_bench!{find_rand_10_000, 10_000, BTreeMap}\n \n-    #[bench]\n-    pub fn find_seq_10_000(b: &mut Bencher) {\n-        let mut m = BTreeMap::new();\n-        find_seq_n(10_000, &mut m, b,\n-                   |m, i| { m.insert(i, 1); },\n-                   |m, i| { m.get(&i); });\n-    }\n+    map_find_seq_bench!{find_seq_100,    100,    BTreeMap}\n+    map_find_seq_bench!{find_seq_10_000, 10_000, BTreeMap}\n \n     fn bench_iter(b: &mut Bencher, size: i32) {\n         let mut map = BTreeMap::<i32, i32>::new();"}, {"sha": "49c213fd7c763e6794662ea720292405692eaee3", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcf679cb888b89536123c11a6f8db66fad759973/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf679cb888b89536123c11a6f8db66fad759973/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=fcf679cb888b89536123c11a6f8db66fad759973", "patch": "@@ -102,7 +102,7 @@ pub mod btree_set {\n }\n \n \n-#[cfg(test)] mod bench;\n+#[cfg(test)] #[macro_use] mod bench;\n \n // FIXME(#14344) this shouldn't be necessary\n #[doc(hidden)]"}, {"sha": "ba358ada0adacaca2f7d3ff9609c16b230272f06", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 8, "deletions": 65, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/fcf679cb888b89536123c11a6f8db66fad759973/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcf679cb888b89536123c11a6f8db66fad759973/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=fcf679cb888b89536123c11a6f8db66fad759973", "patch": "@@ -1321,74 +1321,17 @@ mod test_map {\n \n #[cfg(test)]\n mod bench {\n-    use test::Bencher;\n     use super::VecMap;\n-    use bench::{insert_rand_n, insert_seq_n, find_rand_n, find_seq_n};\n \n-    #[bench]\n-    pub fn insert_rand_100(b: &mut Bencher) {\n-        let mut m = VecMap::new();\n-        insert_rand_n(100, &mut m, b,\n-                      |m, i| { m.insert(i, 1); },\n-                      |m, i| { m.remove(&i); });\n-    }\n-\n-    #[bench]\n-    pub fn insert_rand_10_000(b: &mut Bencher) {\n-        let mut m = VecMap::new();\n-        insert_rand_n(10_000, &mut m, b,\n-                      |m, i| { m.insert(i, 1); },\n-                      |m, i| { m.remove(&i); });\n-    }\n-\n-    // Insert seq\n-    #[bench]\n-    pub fn insert_seq_100(b: &mut Bencher) {\n-        let mut m = VecMap::new();\n-        insert_seq_n(100, &mut m, b,\n-                     |m, i| { m.insert(i, 1); },\n-                     |m, i| { m.remove(&i); });\n-    }\n-\n-    #[bench]\n-    pub fn insert_seq_10_000(b: &mut Bencher) {\n-        let mut m = VecMap::new();\n-        insert_seq_n(10_000, &mut m, b,\n-                     |m, i| { m.insert(i, 1); },\n-                     |m, i| { m.remove(&i); });\n-    }\n+    map_insert_rand_bench!{insert_rand_100,    100,    VecMap}\n+    map_insert_rand_bench!{insert_rand_10_000, 10_000, VecMap}\n \n-    // Find rand\n-    #[bench]\n-    pub fn find_rand_100(b: &mut Bencher) {\n-        let mut m = VecMap::new();\n-        find_rand_n(100, &mut m, b,\n-                    |m, i| { m.insert(i, 1); },\n-                    |m, i| { m.get(&i); });\n-    }\n-\n-    #[bench]\n-    pub fn find_rand_10_000(b: &mut Bencher) {\n-        let mut m = VecMap::new();\n-        find_rand_n(10_000, &mut m, b,\n-                    |m, i| { m.insert(i, 1); },\n-                    |m, i| { m.get(&i); });\n-    }\n+    map_insert_seq_bench!{insert_seq_100,    100,    VecMap}\n+    map_insert_seq_bench!{insert_seq_10_000, 10_000, VecMap}\n \n-    // Find seq\n-    #[bench]\n-    pub fn find_seq_100(b: &mut Bencher) {\n-        let mut m = VecMap::new();\n-        find_seq_n(100, &mut m, b,\n-                   |m, i| { m.insert(i, 1); },\n-                   |m, i| { m.get(&i); });\n-    }\n+    map_find_rand_bench!{find_rand_100,    100,    VecMap}\n+    map_find_rand_bench!{find_rand_10_000, 10_000, VecMap}\n \n-    #[bench]\n-    pub fn find_seq_10_000(b: &mut Bencher) {\n-        let mut m = VecMap::new();\n-        find_seq_n(10_000, &mut m, b,\n-                   |m, i| { m.insert(i, 1); },\n-                   |m, i| { m.get(&i); });\n-    }\n+    map_find_seq_bench!{find_seq_100,    100,    VecMap}\n+    map_find_seq_bench!{find_seq_10_000, 10_000, VecMap}\n }"}]}