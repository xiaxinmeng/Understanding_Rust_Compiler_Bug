{"sha": "88399a985a5405b74b4b64d7790742152e5a2d1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4Mzk5YTk4NWE1NDA1Yjc0YjRiNjRkNzc5MDc0MjE1MmU1YTJkMWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-31T18:30:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-05T14:37:58Z"}, "message": "rustc: Migrate `visible_parent_map` to a query\n\nTurns out it was basically already a query if you squinted hard enough!", "tree": {"sha": "f65914eae59a9a2536556f7ee0f4efe873c8b5d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f65914eae59a9a2536556f7ee0f4efe873c8b5d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88399a985a5405b74b4b64d7790742152e5a2d1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88399a985a5405b74b4b64d7790742152e5a2d1a", "html_url": "https://github.com/rust-lang/rust/commit/88399a985a5405b74b4b64d7790742152e5a2d1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88399a985a5405b74b4b64d7790742152e5a2d1a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84ae4b75be371844f9afb9f464f5064840ac3f9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/84ae4b75be371844f9afb9f464f5064840ac3f9c", "html_url": "https://github.com/rust-lang/rust/commit/84ae4b75be371844f9afb9f464f5064840ac3f9c"}], "stats": {"total": 166, "additions": 91, "deletions": 75}, "files": [{"sha": "e5ed5df02609e326a124c3f3cc99e64b826fee03", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88399a985a5405b74b4b64d7790742152e5a2d1a/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88399a985a5405b74b4b64d7790742152e5a2d1a/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=88399a985a5405b74b4b64d7790742152e5a2d1a", "patch": "@@ -564,6 +564,9 @@ define_dep_nodes!( <'tcx>\n     [] DefinedLangItems(CrateNum),\n     [] MissingLangItems(CrateNum),\n     [] ItemBody(DefId),\n+    [] VisibleParentMap,\n+    [] IsDirectExternCrate(CrateNum),\n+    [] MissingExternCrateItem(CrateNum),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "e21de424d7e32ea69222ab96da6abea036ef793b", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88399a985a5405b74b4b64d7790742152e5a2d1a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88399a985a5405b74b4b64d7790742152e5a2d1a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=88399a985a5405b74b4b64d7790742152e5a2d1a", "patch": "@@ -31,7 +31,7 @@ use ich;\n use ty::{self, TyCtxt};\n use session::Session;\n use session::search_paths::PathKind;\n-use util::nodemap::{NodeSet, DefIdMap};\n+use util::nodemap::NodeSet;\n \n use std::any::Any;\n use std::path::{Path, PathBuf};\n@@ -235,7 +235,6 @@ pub trait CrateStore {\n     fn metadata_loader(&self) -> &MetadataLoader;\n \n     // item info\n-    fn visible_parent_map<'a>(&'a self, sess: &Session) -> ::std::cell::Ref<'a, DefIdMap<DefId>>;\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics;\n \n     // trait/impl-item info\n@@ -309,11 +308,6 @@ impl CrateStore for DummyCrateStore {\n         { bug!(\"crate_data_as_rc_any\") }\n     // item info\n     fn visibility_untracked(&self, def: DefId) -> ty::Visibility { bug!(\"visibility\") }\n-    fn visible_parent_map<'a>(&'a self, session: &Session)\n-        -> ::std::cell::Ref<'a, DefIdMap<DefId>>\n-    {\n-        bug!(\"visible_parent_map\")\n-    }\n     fn item_generics_cloned(&self, def: DefId) -> ty::Generics\n         { bug!(\"item_generics_cloned\") }\n "}, {"sha": "75cf792d8ab40b59191d72af5130e460a570d844", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88399a985a5405b74b4b64d7790742152e5a2d1a/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88399a985a5405b74b4b64d7790742152e5a2d1a/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=88399a985a5405b74b4b64d7790742152e5a2d1a", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn try_push_visible_item_path<T>(self, buffer: &mut T, external_def_id: DefId) -> bool\n         where T: ItemPathBuffer\n     {\n-        let visible_parent_map = self.sess.cstore.visible_parent_map(self.sess);\n+        let visible_parent_map = self.visible_parent_map(LOCAL_CRATE);\n \n         let (mut cur_def, mut cur_path) = (external_def_id, Vec::<ast::Name>::new());\n         loop {"}, {"sha": "acf3aeec1432c6d1ca433cbe01c1201da1b32b11", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/88399a985a5405b74b4b64d7790742152e5a2d1a/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88399a985a5405b74b4b64d7790742152e5a2d1a/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=88399a985a5405b74b4b64d7790742152e5a2d1a", "patch": "@@ -33,7 +33,7 @@ use ty::item_path;\n use ty::steal::Steal;\n use ty::subst::Substs;\n use ty::fast_reject::SimplifiedType;\n-use util::nodemap::{DefIdSet, NodeSet};\n+use util::nodemap::{DefIdSet, NodeSet, DefIdMap};\n use util::common::{profq_msg, ProfileQueriesMsg};\n \n use rustc_data_structures::indexed_set::IdxSetBuf;\n@@ -706,6 +706,18 @@ impl<'tcx> QueryDescription for queries::missing_lang_items<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::visible_parent_map<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"calculating the visible parent map\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::missing_extern_crate_item<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"seeing if we're missing an `extern crate` item for this crate\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1316,6 +1328,9 @@ define_maps! { <'tcx>\n     [] defined_lang_items: DefinedLangItems(CrateNum) -> Rc<Vec<(DefIndex, usize)>>,\n     [] missing_lang_items: MissingLangItems(CrateNum) -> Rc<Vec<LangItem>>,\n     [] item_body: ItemBody(DefId) -> &'tcx hir::Body,\n+    [] visible_parent_map: visible_parent_map_node(CrateNum)\n+        -> Rc<DefIdMap<DefId>>,\n+    [] missing_extern_crate_item: MissingExternCrateItem(CrateNum) -> bool,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {\n@@ -1409,3 +1424,7 @@ fn link_args_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n fn get_lang_items_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::GetLangItems\n }\n+\n+fn visible_parent_map_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n+    DepConstructor::VisibleParentMap\n+}"}, {"sha": "362fbf797430f464a4bfc21fcace60eb2a0b4d57", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88399a985a5405b74b4b64d7790742152e5a2d1a/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88399a985a5405b74b4b64d7790742152e5a2d1a/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=88399a985a5405b74b4b64d7790742152e5a2d1a", "patch": "@@ -20,7 +20,7 @@ use rustc::hir::svh::Svh;\n use rustc::middle::cstore::{DepKind, ExternCrate, MetadataLoader};\n use rustc_back::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc::util::nodemap::{FxHashMap, FxHashSet, NodeMap, DefIdMap};\n+use rustc::util::nodemap::{FxHashMap, FxHashSet, NodeMap};\n \n use std::cell::{RefCell, Cell};\n use std::rc::Rc;\n@@ -95,7 +95,6 @@ pub struct CStore {\n     metas: RefCell<FxHashMap<CrateNum, Rc<CrateMetadata>>>,\n     /// Map from NodeId's of local extern crate statements to crate numbers\n     extern_mod_crate_map: RefCell<NodeMap<CrateNum>>,\n-    pub visible_parent_map: RefCell<DefIdMap<DefId>>,\n     pub metadata_loader: Box<MetadataLoader>,\n }\n \n@@ -105,7 +104,6 @@ impl CStore {\n             dep_graph: dep_graph.clone(),\n             metas: RefCell::new(FxHashMap()),\n             extern_mod_crate_map: RefCell::new(FxHashMap()),\n-            visible_parent_map: RefCell::new(FxHashMap()),\n             metadata_loader,\n         }\n     }"}, {"sha": "90bccf92b19bfb50a1b0530ea86c7c91cf9cc6c6", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 65, "deletions": 63, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/88399a985a5405b74b4b64d7790742152e5a2d1a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88399a985a5405b74b4b64d7790742152e5a2d1a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=88399a985a5405b74b4b64d7790742152e5a2d1a", "patch": "@@ -222,6 +222,13 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         debug!(\"item_body({:?}): inlining item\", def_id);\n         cdata.item_body(tcx, def_id.index)\n     }\n+\n+    missing_extern_crate_item => {\n+        match cdata.extern_crate.get() {\n+            Some(extern_crate) if !extern_crate.direct => true,\n+            _ => false,\n+        }\n+    }\n }\n \n pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n@@ -267,6 +274,64 @@ pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n             let id = tcx.hir.definitions().find_node_for_hir_id(id);\n             tcx.sess.cstore.extern_mod_stmt_cnum_untracked(id)\n         },\n+\n+        // Returns a map from a sufficiently visible external item (i.e. an\n+        // external item that is visible from at least one local module) to a\n+        // sufficiently visible parent (considering modules that re-export the\n+        // external item to be parents).\n+        visible_parent_map: |tcx, cnum| {\n+            use std::collections::vec_deque::VecDeque;\n+            use std::collections::hash_map::Entry;\n+\n+            assert_eq!(cnum, LOCAL_CRATE);\n+            let mut visible_parent_map: DefIdMap<DefId> = DefIdMap();\n+\n+            for cnum in tcx.sess.cstore.crates() {\n+                // Ignore crates without a corresponding local `extern crate` item.\n+                if tcx.missing_extern_crate_item(cnum) {\n+                    continue\n+                }\n+\n+                let bfs_queue = &mut VecDeque::new();\n+                let visible_parent_map = &mut visible_parent_map;\n+                let mut add_child = |bfs_queue: &mut VecDeque<_>,\n+                                     child: &def::Export,\n+                                     parent: DefId| {\n+                    let child = child.def.def_id();\n+\n+                    if tcx.visibility(child) != ty::Visibility::Public {\n+                        return;\n+                    }\n+\n+                    match visible_parent_map.entry(child) {\n+                        Entry::Occupied(mut entry) => {\n+                            // If `child` is defined in crate `cnum`, ensure\n+                            // that it is mapped to a parent in `cnum`.\n+                            if child.krate == cnum && entry.get().krate != cnum {\n+                                entry.insert(parent);\n+                            }\n+                        }\n+                        Entry::Vacant(entry) => {\n+                            entry.insert(parent);\n+                            bfs_queue.push_back(child);\n+                        }\n+                    }\n+                };\n+\n+                bfs_queue.push_back(DefId {\n+                    krate: cnum,\n+                    index: CRATE_DEF_INDEX\n+                });\n+                while let Some(def) = bfs_queue.pop_front() {\n+                    for child in tcx.item_children(def).iter() {\n+                        add_child(bfs_queue, child, def);\n+                    }\n+                }\n+            }\n+\n+            Rc::new(visible_parent_map)\n+        },\n+\n         ..*providers\n     };\n }\n@@ -440,67 +505,4 @@ impl CrateStore for cstore::CStore {\n     {\n         schema::METADATA_HEADER\n     }\n-\n-    /// Returns a map from a sufficiently visible external item (i.e. an external item that is\n-    /// visible from at least one local module) to a sufficiently visible parent (considering\n-    /// modules that re-export the external item to be parents).\n-    fn visible_parent_map<'a>(&'a self, sess: &Session) -> ::std::cell::Ref<'a, DefIdMap<DefId>> {\n-        {\n-            let visible_parent_map = self.visible_parent_map.borrow();\n-            if !visible_parent_map.is_empty() {\n-                return visible_parent_map;\n-            }\n-        }\n-\n-        use std::collections::vec_deque::VecDeque;\n-        use std::collections::hash_map::Entry;\n-\n-        let mut visible_parent_map = self.visible_parent_map.borrow_mut();\n-\n-        for cnum in (1 .. self.next_crate_num().as_usize()).map(CrateNum::new) {\n-            let cdata = self.get_crate_data(cnum);\n-\n-            match cdata.extern_crate.get() {\n-                // Ignore crates without a corresponding local `extern crate` item.\n-                Some(extern_crate) if !extern_crate.direct => continue,\n-                _ => {},\n-            }\n-\n-            let bfs_queue = &mut VecDeque::new();\n-            let mut add_child = |bfs_queue: &mut VecDeque<_>, child: def::Export, parent: DefId| {\n-                let child = child.def.def_id();\n-\n-                if self.visibility_untracked(child) != ty::Visibility::Public {\n-                    return;\n-                }\n-\n-                match visible_parent_map.entry(child) {\n-                    Entry::Occupied(mut entry) => {\n-                        // If `child` is defined in crate `cnum`, ensure\n-                        // that it is mapped to a parent in `cnum`.\n-                        if child.krate == cnum && entry.get().krate != cnum {\n-                            entry.insert(parent);\n-                        }\n-                    }\n-                    Entry::Vacant(entry) => {\n-                        entry.insert(parent);\n-                        bfs_queue.push_back(child);\n-                    }\n-                }\n-            };\n-\n-            bfs_queue.push_back(DefId {\n-                krate: cnum,\n-                index: CRATE_DEF_INDEX\n-            });\n-            while let Some(def) = bfs_queue.pop_front() {\n-                for child in self.item_children_untracked(def, sess) {\n-                    add_child(bfs_queue, child, def);\n-                }\n-            }\n-        }\n-\n-        drop(visible_parent_map);\n-        self.visible_parent_map.borrow()\n-    }\n }"}]}