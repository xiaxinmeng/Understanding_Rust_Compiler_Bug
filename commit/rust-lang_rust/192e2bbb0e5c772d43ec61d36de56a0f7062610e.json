{"sha": "192e2bbb0e5c772d43ec61d36de56a0f7062610e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MmUyYmJiMGU1Yzc3MmQ0M2VjNjFkMzZkZTU2YTBmNzA2MjYxMGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T16:56:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T16:56:03Z"}, "message": "resolve_path works with DefIds", "tree": {"sha": "160b6aecfabb2f7dac111763b35b6f52ba6ff25b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/160b6aecfabb2f7dac111763b35b6f52ba6ff25b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/192e2bbb0e5c772d43ec61d36de56a0f7062610e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/192e2bbb0e5c772d43ec61d36de56a0f7062610e", "html_url": "https://github.com/rust-lang/rust/commit/192e2bbb0e5c772d43ec61d36de56a0f7062610e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/192e2bbb0e5c772d43ec61d36de56a0f7062610e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa7fd563a4b8817223ac50fa22cd946ce354f47d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa7fd563a4b8817223ac50fa22cd946ce354f47d", "html_url": "https://github.com/rust-lang/rust/commit/aa7fd563a4b8817223ac50fa22cd946ce354f47d"}], "stats": {"total": 57, "additions": 46, "deletions": 11}, "files": [{"sha": "858b52e76ecea587638f32685679dd70670fde85", "filename": "crates/ra_analysis/src/completion/reference_completion.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/192e2bbb0e5c772d43ec61d36de56a0f7062610e/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192e2bbb0e5c772d43ec61d36de56a0f7062610e/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Freference_completion.rs?ref=192e2bbb0e5c772d43ec61d36de56a0f7062610e", "patch": "@@ -13,6 +13,7 @@ use crate::{\n     descriptors::{\n         module::{ModuleDescriptor},\n         function::FnScopes,\n+        Def,\n         Path,\n     },\n     Cancelable\n@@ -156,10 +157,14 @@ fn complete_path(\n         return Ok(());\n     }\n     path.segments.pop();\n-    let target_module = match module.resolve_path(db, path)? {\n+    let def_id = match module.resolve_path(db, path)? {\n         None => return Ok(()),\n         Some(it) => it,\n     };\n+    let target_module = match def_id.resolve(db)? {\n+        Def::Module(it) => it,\n+        Def::Item => return Ok(()),\n+    };\n     let module_scope = target_module.scope(db)?;\n     let completions = module_scope.entries().map(|(name, _res)| CompletionItem {\n         label: name.to_string(),"}, {"sha": "7a1bcf4475899ec9edd03c651ef4cc081f2165c1", "filename": "crates/ra_analysis/src/descriptors/mod.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/192e2bbb0e5c772d43ec61d36de56a0f7062610e/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192e2bbb0e5c772d43ec61d36de56a0f7062610e/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs?ref=192e2bbb0e5c772d43ec61d36de56a0f7062610e", "patch": "@@ -13,9 +13,12 @@ use crate::{\n     FileId,\n     db::SyntaxDatabase,\n     descriptors::function::{resolve_local_name, FnId, FnScopes},\n-    descriptors::module::{ModuleId, ModuleTree, ModuleSource, nameres::{ItemMap, InputModuleItems, FileItems}},\n+    descriptors::module::{\n+        ModuleId, ModuleTree, ModuleSource, ModuleDescriptor,\n+        nameres::{ItemMap, InputModuleItems, FileItems}\n+    },\n     input::SourceRootId,\n-    loc2id::IdDatabase,\n+    loc2id::{IdDatabase, DefId, DefLoc},\n     syntax_ptr::LocalSyntaxPtr,\n     Cancelable,\n };\n@@ -67,6 +70,25 @@ salsa::query_group! {\n     }\n }\n \n+pub(crate) enum Def {\n+    Module(ModuleDescriptor),\n+    Item,\n+}\n+\n+impl DefId {\n+    pub(crate) fn resolve(self, db: &impl DescriptorDatabase) -> Cancelable<Def> {\n+        let loc = db.id_maps().def_loc(self);\n+        let res = match loc {\n+            DefLoc::Module { id, source_root } => {\n+                let descr = ModuleDescriptor::new(db, source_root, id)?;\n+                Def::Module(descr)\n+            }\n+            DefLoc::Item { .. } => Def::Item,\n+        };\n+        Ok(res)\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct ReferenceDescriptor {\n     pub range: TextRange,"}, {"sha": "78911d5d9c950fbac8b7e72e208b35bfdbbc2b2e", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/192e2bbb0e5c772d43ec61d36de56a0f7062610e/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/192e2bbb0e5c772d43ec61d36de56a0f7062610e/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=192e2bbb0e5c772d43ec61d36de56a0f7062610e", "patch": "@@ -77,7 +77,7 @@ impl ModuleDescriptor {\n         Ok(res)\n     }\n \n-    fn new(\n+    pub(super) fn new(\n         db: &impl DescriptorDatabase,\n         source_root_id: SourceRootId,\n         module_id: ModuleId,\n@@ -132,6 +132,14 @@ impl ModuleDescriptor {\n         Some(link.name(&self.tree))\n     }\n \n+    pub fn def_id(&self, db: &impl DescriptorDatabase) -> DefId {\n+        let def_loc = DefLoc::Module {\n+            id: self.module_id,\n+            source_root: self.source_root_id,\n+        };\n+        db.id_maps().def_id(def_loc)\n+    }\n+\n     /// Finds a child module with the specified name.\n     pub fn child(&self, name: &str) -> Option<ModuleDescriptor> {\n         let child_id = self.module_id.child(&self.tree, name)?;\n@@ -152,23 +160,23 @@ impl ModuleDescriptor {\n         &self,\n         db: &impl DescriptorDatabase,\n         path: Path,\n-    ) -> Cancelable<Option<ModuleDescriptor>> {\n+    ) -> Cancelable<Option<DefId>> {\n         let mut curr = match path.kind {\n             PathKind::Crate => self.crate_root(),\n             PathKind::Self_ | PathKind::Plain => self.clone(),\n             PathKind::Super => ctry!(self.parent()),\n-        };\n+        }\n+        .def_id(db);\n \n         let segments = path.segments;\n-        for name in segments {\n-            let scope = curr.scope(db)?;\n-            let def_id = ctry!(ctry!(scope.get(&name)).def_id);\n-            curr = match db.id_maps().def_loc(def_id) {\n+        for name in segments.iter() {\n+            let module = match db.id_maps().def_loc(curr) {\n                 DefLoc::Module { id, source_root } => ModuleDescriptor::new(db, source_root, id)?,\n                 _ => return Ok(None),\n             };\n+            let scope = module.scope(db)?;\n+            curr = ctry!(ctry!(scope.get(&name)).def_id);\n         }\n-\n         Ok(Some(curr))\n     }\n "}]}