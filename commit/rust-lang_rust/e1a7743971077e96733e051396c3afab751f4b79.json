{"sha": "e1a7743971077e96733e051396c3afab751f4b79", "node_id": "C_kwDOAAsO6NoAKGUxYTc3NDM5NzEwNzdlOTY3MzNlMDUxMzk2YzNhZmFiNzUxZjRiNzk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-04T20:23:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-04T20:23:09Z"}, "message": "Rollup merge of #92516 - Kobzol:bootstrap-symbol-mangling, r=Mark-Simulacrum\n\nDo not use deprecated -Zsymbol-mangling-version in bootstrap\n\n`-Zsymbol-mangling-version` now produces warnings unconditionally. So if you want to use legacy mangling for the compiler (`new-symbol-mangling = false` in `config.toml`), the build is now littered with warnings.\n\nHowever, with this change, stage 1 `std` doesn't compile:\n```\nerror: `-C symbol-mangling-version=legacy` requires `-Z unstable-options`\n```\nEven after the bootstrap compiler is updated and it will support `-Csymbol-mangling-version`, the bootstrap code would either need to use `-Z` for the legacy mangling or use `-C` in combination with `-Z unstable-options` (because `-C` + legacy is not allowed without the unstable options). Should we just add `-Z unstable-options` to `std` compilation to resolve this?\n\nBtw I use legacy mangling because the new mangling is not supported by [Hotspot](https://github.com/KDAB/hotspot).", "tree": {"sha": "023df4393108ae353dcbc651f3ed546c85199adf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/023df4393108ae353dcbc651f3ed546c85199adf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1a7743971077e96733e051396c3afab751f4b79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh1KytCRBK7hj4Ov3rIwAAiXQIAKPOlDqwwE0XkrwTXCuosArJ\ncjQDbT20yv3XgAMhJuqo7pByysptIBwr7/0rz4U9tVyV77xdif9ET9tMQpDZXjTO\n+dNFqZ79e/6VRdbWVjRAzzHqEwPe6Mgimwk8rg1psz9uiHlpYOo9Ku8j8fDbA/VJ\nKQkxELKdKRHsNHYzzPOGmnOiG+JHoPn01MgxRFbsvGYiOMqVyGFqXowE/Bq96l0X\n0po/J6U1h94qHJN94ckUApvTubEmI0kt+4f/HhARkSE0gqGEktpPoBX46UnJKl5U\niAPy8iYSUc5ZZmDRA0B7PiuB+fE3GOB0h3WpVHDPtpcYfxcTw/yd28l5Orl9Udk=\n=vg92\n-----END PGP SIGNATURE-----\n", "payload": "tree 023df4393108ae353dcbc651f3ed546c85199adf\nparent b9694a132f7857fb958d87867ba166aee2d392df\nparent e266cb90defc63c574c1fccaccdea0cb8133557f\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641327789 +0100\ncommitter GitHub <noreply@github.com> 1641327789 +0100\n\nRollup merge of #92516 - Kobzol:bootstrap-symbol-mangling, r=Mark-Simulacrum\n\nDo not use deprecated -Zsymbol-mangling-version in bootstrap\n\n`-Zsymbol-mangling-version` now produces warnings unconditionally. So if you want to use legacy mangling for the compiler (`new-symbol-mangling = false` in `config.toml`), the build is now littered with warnings.\n\nHowever, with this change, stage 1 `std` doesn't compile:\n```\nerror: `-C symbol-mangling-version=legacy` requires `-Z unstable-options`\n```\nEven after the bootstrap compiler is updated and it will support `-Csymbol-mangling-version`, the bootstrap code would either need to use `-Z` for the legacy mangling or use `-C` in combination with `-Z unstable-options` (because `-C` + legacy is not allowed without the unstable options). Should we just add `-Z unstable-options` to `std` compilation to resolve this?\n\nBtw I use legacy mangling because the new mangling is not supported by [Hotspot](https://github.com/KDAB/hotspot).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a7743971077e96733e051396c3afab751f4b79", "html_url": "https://github.com/rust-lang/rust/commit/e1a7743971077e96733e051396c3afab751f4b79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1a7743971077e96733e051396c3afab751f4b79/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9694a132f7857fb958d87867ba166aee2d392df", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9694a132f7857fb958d87867ba166aee2d392df", "html_url": "https://github.com/rust-lang/rust/commit/b9694a132f7857fb958d87867ba166aee2d392df"}, {"sha": "e266cb90defc63c574c1fccaccdea0cb8133557f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e266cb90defc63c574c1fccaccdea0cb8133557f", "html_url": "https://github.com/rust-lang/rust/commit/e266cb90defc63c574c1fccaccdea0cb8133557f"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "6ccf8b1d5221cd6880daddbd724232fe08f35b0c", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e1a7743971077e96733e051396c3afab751f4b79/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a7743971077e96733e051396c3afab751f4b79/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e1a7743971077e96733e051396c3afab751f4b79", "patch": "@@ -988,10 +988,20 @@ impl<'a> Builder<'a> {\n             }\n         };\n \n-        if use_new_symbol_mangling {\n-            rustflags.arg(\"-Zsymbol-mangling-version=v0\");\n+        // cfg(bootstrap) -- drop the compiler.stage == 0 branch.\n+        if compiler.stage == 0 {\n+            if use_new_symbol_mangling {\n+                rustflags.arg(\"-Zsymbol-mangling-version=v0\");\n+            } else {\n+                rustflags.arg(\"-Zsymbol-mangling-version=legacy\");\n+            }\n         } else {\n-            rustflags.arg(\"-Zsymbol-mangling-version=legacy\");\n+            if use_new_symbol_mangling {\n+                rustflags.arg(\"-Csymbol-mangling-version=v0\");\n+            } else {\n+                rustflags.arg(\"-Csymbol-mangling-version=legacy\");\n+                rustflags.arg(\"-Zunstable-options\");\n+            }\n         }\n \n         // FIXME: It might be better to use the same value for both `RUSTFLAGS` and `RUSTDOCFLAGS`,"}]}