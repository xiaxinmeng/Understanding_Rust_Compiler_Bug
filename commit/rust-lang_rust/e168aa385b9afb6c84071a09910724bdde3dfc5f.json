{"sha": "e168aa385b9afb6c84071a09910724bdde3dfc5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNjhhYTM4NWI5YWZiNmM4NDA3MWEwOTkxMDcyNGJkZGUzZGZjNWY=", "commit": {"author": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2018-01-12T21:41:25Z"}, "committer": {"name": "Carol (Nichols || Goulding)", "email": "carol.nichols@gmail.com", "date": "2018-01-15T18:36:53Z"}, "message": "Reexport -> re-export in prose and documentation comments", "tree": {"sha": "550d6318fb18091ea7959bd550bdf1f646b1137f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/550d6318fb18091ea7959bd550bdf1f646b1137f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e168aa385b9afb6c84071a09910724bdde3dfc5f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJMBAABCAA2FiEET6WvJ6ML0pFC5CKw0Es5psokOQIFAlpc9MUYHGNhcm9sLm5p\nY2hvbHNAZ21haWwuY29tAAoJENBLOabKJDkCvP8P/j4HLTKZhnYcBzoEsl/c79xp\nd903DzRZaX0FGFaAKAekkAxUBVYjC6qXwKgOSDMw7VYdaRcy21ii1CLQ5Y4MZa0n\nHlt2eT4zOElOd3duUVRK9aXuMlZi8izPd/UaVW7nmkQhKcahj7RcvZn5jjEtiXly\ngg8QfR5ljApeXOAxoIrTiiNxjQOcaQwd928BT1O3+1/IqSo/Sm+cthOm6yghkGi4\nNL5zx5GK+FMwReQA8x9gW45QnZz3HAA7uXkDgOcfBtqkex4Zu28fB7EKr0IFp/NQ\navfqkTy9doVPVik7xV5hBSZ6yl+mqFM3NyUGDJ4OlURKkU0xzflneR/t7YsVtZMF\n0JMXWAajH9YWiABdAfUiFtWqsl7of4cDmhhFDBrPHddOvQsXgmwCY9rtFiu6zYKW\n2Wqm/zhBuZ2fscYyqY5UDKC/BJq1Pf7JTo8hLia3/g/KhdrnT7dq2Jym7PBJJnbk\nAhtF6w0tpNlwVE/r7v1v9QTgD05kyRMGtJSV9rChAznWya8sSyGQg5+nqcvQ0aEY\nHTwne7+d0fAMvLsFevS7coW0AALZkrDGF33dK+geF6lNzvGAK77Iz14qTxQBjPb9\nkVkanezFuu3hDNcZ22b0TbYVLMzd8goNaULrKrIV+hdsbxBB8lU6oaZjUdrmZIj6\ngvJls9yq3jzmh6VPV0xy\n=0Ve+\n-----END PGP SIGNATURE-----", "payload": "tree 550d6318fb18091ea7959bd550bdf1f646b1137f\nparent 90fcd4476c6346fad0aa4a952da0ebec39ff9d4e\nauthor Carol (Nichols || Goulding) <carol.nichols@gmail.com> 1515793285 -0500\ncommitter Carol (Nichols || Goulding) <carol.nichols@gmail.com> 1516041413 -0500\n\nReexport -> re-export in prose and documentation comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e168aa385b9afb6c84071a09910724bdde3dfc5f", "html_url": "https://github.com/rust-lang/rust/commit/e168aa385b9afb6c84071a09910724bdde3dfc5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e168aa385b9afb6c84071a09910724bdde3dfc5f/comments", "author": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carols10cents", "id": 193874, "node_id": "MDQ6VXNlcjE5Mzg3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/193874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carols10cents", "html_url": "https://github.com/carols10cents", "followers_url": "https://api.github.com/users/carols10cents/followers", "following_url": "https://api.github.com/users/carols10cents/following{/other_user}", "gists_url": "https://api.github.com/users/carols10cents/gists{/gist_id}", "starred_url": "https://api.github.com/users/carols10cents/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carols10cents/subscriptions", "organizations_url": "https://api.github.com/users/carols10cents/orgs", "repos_url": "https://api.github.com/users/carols10cents/repos", "events_url": "https://api.github.com/users/carols10cents/events{/privacy}", "received_events_url": "https://api.github.com/users/carols10cents/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e", "html_url": "https://github.com/rust-lang/rust/commit/90fcd4476c6346fad0aa4a952da0ebec39ff9d4e"}], "stats": {"total": 104, "additions": 52, "deletions": 52}, "files": [{"sha": "45c389d72afc7fc873d231d98d747e02aaecb317", "filename": "RELEASES.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -577,7 +577,7 @@ Compatibility Notes\n   a warning.\n - [From the pound escape, lines consisting of multiple `#`s are\n   now visible][41785]\n-- [It is an error to reexport private enum variants][42460]. This is\n+- [It is an error to re-export private enum variants][42460]. This is\n   known to break a number of crates that depend on an older version of\n   mustache.\n - [On Windows, if `VCINSTALLDIR` is set incorrectly, `rustc` will try\n@@ -2251,10 +2251,10 @@ Rustdoc\n -------\n \n * [Fix empty implementation section on some module pages](https://github.com/rust-lang/rust/pull/34536)\n-* [Fix inlined renamed reexports in import lists](https://github.com/rust-lang/rust/pull/34479)\n+* [Fix inlined renamed re-exports in import lists](https://github.com/rust-lang/rust/pull/34479)\n * [Fix search result layout for enum variants and struct fields](https://github.com/rust-lang/rust/pull/34477)\n * [Fix issues with source links to external crates](https://github.com/rust-lang/rust/pull/34387)\n-* [Fix redirect pages for renamed reexports](https://github.com/rust-lang/rust/pull/34245)\n+* [Fix redirect pages for renamed re-exports](https://github.com/rust-lang/rust/pull/34245)\n \n Tooling\n -------\n@@ -4988,7 +4988,7 @@ Version 0.10 (2014-04-03)\n     * std: The `vec` module has been renamed to `slice`.\n     * std: A new vector type, `Vec<T>`, has been added in preparation for DST.\n       This will become the only growable vector in the future.\n-    * std: `std::io` now has more public-reexports. Types such as `BufferedReader`\n+    * std: `std::io` now has more public re-exports. Types such as `BufferedReader`\n       are now found at `std::io::BufferedReader` instead of\n       `std::io::buffered::BufferedReader`.\n     * std: `print` and `println` are no longer in the prelude, the `print!` and\n@@ -5079,8 +5079,8 @@ Version 0.10 (2014-04-03)\n       * render standalone markdown files.\n       * the --test flag tests all code blocks by default.\n       * exported macros are displayed.\n-      * reexported types have their documentation inlined at the location of the\n-        first reexport.\n+      * re-exported types have their documentation inlined at the location of the\n+        first re-export.\n       * search works across crates that have been rendered to the same output\n         directory.\n \n@@ -5467,7 +5467,7 @@ Version 0.7 (2013-07-03)\n         incl. `any`, `all`. removed.\n       * std: The `finalize` method of `Drop` renamed to `drop`.\n       * std: The `drop` method now takes `&mut self` instead of `&self`.\n-      * std: The prelude no longer reexports any modules, only types and traits.\n+      * std: The prelude no longer re-exports any modules, only types and traits.\n       * std: Prelude additions: `print`, `println`, `FromStr`, `ApproxEq`, `Equiv`,\n         `Iterator`, `IteratorUtil`, many numeric traits, many tuple traits.\n       * std: New numeric traits: `Fractional`, `Real`, `RealExt`, `Integer`, `Ratio`,"}, {"sha": "6ee4f802802abe93ba18795385a2d4ccad943d8a", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -15,7 +15,7 @@\n //!\n //! This library, like libcore, is not intended for general usage, but rather as\n //! a building block of other libraries. The types and interfaces in this\n-//! library are reexported through the [standard library](../std/index.html),\n+//! library are re-exported through the [standard library](../std/index.html),\n //! and should not be used through this library.\n //!\n //! ## Boxed values\n@@ -52,7 +52,7 @@\n //! ## Collections\n //!\n //! Implementations of the most common general purpose data structures are\n-//! defined in this library. They are reexported through the\n+//! defined in this library. They are re-exported through the\n //! [standard collections library](../std/collections/index.html).\n //!\n //! ## Heap interfaces"}, {"sha": "d43496c387cb8ab668ab9b2562d21632e494d787", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -16,20 +16,20 @@\n \n #![stable(feature = \"core_prelude\", since = \"1.4.0\")]\n \n-// Reexported core operators\n+// Re-exported core operators\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use marker::{Copy, Send, Sized, Sync};\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n-// Reexported functions\n+// Re-exported functions\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use mem::drop;\n \n-// Reexported types and traits\n+// Re-exported types and traits\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use clone::Clone;\n@@ -55,7 +55,7 @@ pub use option::Option::{self, Some, None};\n #[doc(no_inline)]\n pub use result::Result::{self, Ok, Err};\n \n-// Reexported extension traits for primitive types\n+// Re-exported extension traits for primitive types\n #[stable(feature = \"core_prelude\", since = \"1.4.0\")]\n #[doc(no_inline)]\n pub use slice::SliceExt;"}, {"sha": "281d8e5ddadb942664847d0db0d0367b5cc634aa", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -22,7 +22,7 @@\n // a lot of stuff defined here. Let's keep it clean.\n //\n // Since slices don't support inherent methods; all operations\n-// on them are defined on traits, which are then reexported from\n+// on them are defined on traits, which are then re-exported from\n // the prelude for convenience. So there are a lot of traits here.\n //\n // The layout of this file is thus:"}, {"sha": "238145a061f551a76c82f085553c503a41b1f375", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -2119,7 +2119,7 @@ impl<'a> LoweringContext<'a> {\n \n                 // Privatize the degenerate import base, used only to check\n                 // the stability of `use a::{};`, to avoid it showing up as\n-                // a reexport by accident when `pub`, e.g. in documentation.\n+                // a re-export by accident when `pub`, e.g. in documentation.\n                 let path = P(self.lower_path(id, &prefix, ParamMode::Explicit, true));\n                 *vis = hir::Inherited;\n                 hir::ItemUse(path, hir::UseKind::ListStem)"}, {"sha": "e2de0b6bd013d939c4a002837f1c67bf3771de14", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -26,9 +26,9 @@ pub enum AccessLevel {\n     // public, then type `T` is reachable. Its values can be obtained by other crates\n     // even if the type itself is not nameable.\n     Reachable,\n-    // Public items + items accessible to other crates with help of `pub use` reexports\n+    // Public items + items accessible to other crates with help of `pub use` re-exports\n     Exported,\n-    // Items accessible to other crates directly, without help of reexports\n+    // Items accessible to other crates directly, without help of re-exports\n     Public,\n }\n "}, {"sha": "06728b2e6257c03b9292a4da3d115b351f10c742", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -702,8 +702,8 @@ impl<'a, 'tcx> CrateMetadata {\n                     let vis = self.get_visibility(child_index);\n                     let is_import = false;\n                     callback(def::Export { def, ident, vis, span, is_import });\n-                    // For non-reexport structs and variants add their constructors to children.\n-                    // Reexport lists automatically contain constructors when necessary.\n+                    // For non-re-export structs and variants add their constructors to children.\n+                    // Re-export lists automatically contain constructors when necessary.\n                     match def {\n                         Def::Struct(..) => {\n                             if let Some(ctor_def_id) = self.get_struct_ctor_def_id(child_index) {"}, {"sha": "b46882f054df9d0bb139743e3a611849135623d2", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -219,7 +219,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemExternCrate(..) => {}\n             // All nested items are checked by visit_item\n             hir::ItemMod(..) => {}\n-            // Reexports are handled in visit_mod\n+            // Re-exports are handled in visit_mod\n             hir::ItemUse(..) => {}\n             // The interface is empty\n             hir::ItemGlobalAsm(..) => {}\n@@ -1049,7 +1049,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n         match item.node {\n-            // contents of a private mod can be reexported, so we need\n+            // contents of a private mod can be re-exported, so we need\n             // to check internals.\n             hir::ItemMod(_) => {}\n "}, {"sha": "31f3493010c3a816b7461d25b6c3e64f231e455c", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -46,8 +46,8 @@ pub enum ImportDirectiveSubclass<'a> {\n     },\n     GlobImport {\n         is_prelude: bool,\n-        max_vis: Cell<ty::Visibility>, // The visibility of the greatest reexport.\n-        // n.b. `max_vis` is only used in `finalize_import` to check for reexport errors.\n+        max_vis: Cell<ty::Visibility>, // The visibility of the greatest re-export.\n+        // n.b. `max_vis` is only used in `finalize_import` to check for re-export errors.\n     },\n     ExternCrate(Option<Name>),\n     MacroUse,\n@@ -877,7 +877,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         self.record_def(directive.id, PathResolution::new(module.def().unwrap()));\n     }\n \n-    // Miscellaneous post-processing, including recording reexports,\n+    // Miscellaneous post-processing, including recording re-exports,\n     // reporting conflicts, and reporting unresolved imports.\n     fn finalize_resolutions_in(&mut self, module: Module<'b>) {\n         // Since import resolution is finished, globs will not define any more names."}, {"sha": "d284757df63fa24c99ce1c0813846f19814bea08", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -82,9 +82,9 @@ pub fn try_inline(cx: &DocContext, def: Def, name: ast::Name)\n             ret.extend(build_impls(cx, did));\n             clean::ForeignTypeItem\n         }\n-        // Never inline enum variants but leave them shown as reexports.\n+        // Never inline enum variants but leave them shown as re-exports.\n         Def::Variant(..) => return None,\n-        // Assume that enum variants and struct types are reexported next to\n+        // Assume that enum variants and struct types are re-exported next to\n         // their constructors.\n         Def::VariantCtor(..) |\n         Def::StructCtor(..) => return Some(Vec::new()),\n@@ -365,7 +365,7 @@ fn build_module(cx: &DocContext, did: DefId) -> clean::Module {\n     };\n \n     fn fill_in(cx: &DocContext, did: DefId, items: &mut Vec<clean::Item>) {\n-        // If we're reexporting a reexport it may actually reexport something in\n+        // If we're re-exporting a re-export it may actually re-export something in\n         // two namespaces, so the target may be listed twice. Make sure we only\n         // visit each node at most once.\n         let mut visited = FxHashSet();"}, {"sha": "2293e31b5794d2c27e13570c35c19f4c5db06f30", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -1286,9 +1286,9 @@ impl DocFolder for Cache {\n             clean::ConstantItem(..) | clean::StaticItem(..) |\n             clean::UnionItem(..) | clean::ForeignTypeItem\n             if !self.stripped_mod => {\n-                // Reexported items mean that the same id can show up twice\n+                // Re-exported items mean that the same id can show up twice\n                 // in the rustdoc ast that we're looking at. We know,\n-                // however, that a reexported item doesn't show up in the\n+                // however, that a re-exported item doesn't show up in the\n                 // `public_items` map, so we can skip inserting into the\n                 // paths map if there was already an entry present and we're\n                 // not a public item.\n@@ -1545,7 +1545,7 @@ impl Context {\n     {\n         // Stripped modules survive the rustdoc passes (i.e. `strip-private`)\n         // if they contain impls for public types. These modules can also\n-        // contain items such as publicly reexported structures.\n+        // contain items such as publicly re-exported structures.\n         //\n         // External crates will provide links to these structures, so\n         // these modules are recursed into, but not rendered normally\n@@ -2008,7 +2008,7 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n     if cx.shared.sort_modules_alphabetically {\n         indices.sort_by(|&i1, &i2| cmp(&items[i1], &items[i2], i1, i2));\n     }\n-    // This call is to remove reexport duplicates in cases such as:\n+    // This call is to remove re-export duplicates in cases such as:\n     //\n     // ```\n     // pub mod foo {"}, {"sha": "1cb52d735bb18317d8c81029f2496b507d32de20", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -55,7 +55,7 @@ pub struct RustdocVisitor<'a, 'tcx: 'a> {\n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n     pub fn new(cstore: &'tcx CrateStore,\n                cx: &'a core::DocContext<'a, 'tcx>) -> RustdocVisitor<'a, 'tcx> {\n-        // If the root is reexported, terminate all recursion.\n+        // If the root is re-exported, terminate all recursion.\n         let mut stack = FxHashSet();\n         stack.insert(ast::CRATE_NODE_ID);\n         RustdocVisitor {\n@@ -214,7 +214,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n                     let imported_from = self.cx.tcx.original_crate_name(def_id.krate);\n                     let def = match self.cstore.load_macro_untracked(def_id, self.cx.sess()) {\n                         LoadedMacro::MacroDef(macro_def) => macro_def,\n-                        // FIXME(jseyfried): document proc macro reexports\n+                        // FIXME(jseyfried): document proc macro re-exports\n                         LoadedMacro::ProcMacro(..) => continue,\n                     };\n "}, {"sha": "bb38fc550917fb8307d97f2171ee17940ea3b298", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -351,9 +351,9 @@ use prelude::v1::*;\n #[cfg(test)] extern crate test;\n #[cfg(test)] extern crate rand;\n \n-// We want to reexport a few macros from core but libcore has already been\n+// We want to re-export a few macros from core but libcore has already been\n // imported by the compiler (via our #[no_std] attribute) In this case we just\n-// add a new crate name so we can attach the reexports to it.\n+// add a new crate name so we can attach the re-exports to it.\n #[macro_reexport(assert, assert_eq, assert_ne, debug_assert, debug_assert_eq,\n                  debug_assert_ne, unreachable, unimplemented, write, writeln, try)]\n extern crate core as __core;\n@@ -390,7 +390,7 @@ mod macros;\n // The Rust prelude\n pub mod prelude;\n \n-// Public module declarations and reexports\n+// Public module declarations and re-exports\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::any;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "919e033f2b4bdba30aeb8d4372af009545823a49", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -52,7 +52,7 @@\n //! # Prelude contents\n //!\n //! The current version of the prelude (version 1) lives in\n-//! [`std::prelude::v1`], and reexports the following.\n+//! [`std::prelude::v1`], and re-exports the following.\n //!\n //! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`]}. The marker\n //!   traits indicate fundamental properties of types."}, {"sha": "feedd4e1abe5f852a37738589ab4071e707616f5", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -14,17 +14,17 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-// Reexported core operators\n+// Re-exported core operators\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use marker::{Copy, Send, Sized, Sync};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use ops::{Drop, Fn, FnMut, FnOnce};\n \n-// Reexported functions\n+// Re-exported functions\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use mem::drop;\n \n-// Reexported types and traits\n+// Re-exported types and traits\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use boxed::Box;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "9dbaf784f89e0b7e2f6bb6d88b366f91c925c976", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -23,7 +23,7 @@\n #![doc(hidden)]\n \n \n-// Reexport some of our utilities which are expected by other crates.\n+// Re-export some of our utilities which are expected by other crates.\n pub use panicking::{begin_panic, begin_panic_fmt, update_panic_count};\n \n // To reduce the generated code of the new `lang_start`, this function is doing"}, {"sha": "b4be4a9691183d595e5a7a04534e1cd0365014bf", "filename": "src/libstd_unicode/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibstd_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibstd_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd_unicode%2Fchar.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -33,15 +33,15 @@ use core::iter::FusedIterator;\n use core::fmt::{self, Write};\n use tables::{conversions, derived_property, general_category, property};\n \n-// stable reexports\n+// stable re-exports\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::char::{MAX, from_digit, from_u32, from_u32_unchecked};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::char::{EscapeDebug, EscapeDefault, EscapeUnicode};\n #[stable(feature = \"char_from_str\", since = \"1.20.0\")]\n pub use core::char::ParseCharError;\n \n-// unstable reexports\n+// unstable re-exports\n #[unstable(feature = \"try_from\", issue = \"33417\")]\n pub use core::char::CharTryFromError;\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]"}, {"sha": "7f7ff56fd7fbe580132e337c266c9d6e2d792b3e", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -17,7 +17,7 @@ use ext::base::ExtCtxt;\n use ptr::P;\n use symbol::{Symbol, keywords};\n \n-// Transitional reexports so qquote can find the paths it is looking for\n+// Transitional re-exports so qquote can find the paths it is looking for\n mod syntax {\n     pub use ext;\n     pub use parse;"}, {"sha": "0c4bcf4f6c7662fe4e7ae9e7a2a38cf47136d11c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -155,7 +155,7 @@ declare_features! (\n     // OIBIT specific features\n     (active, optin_builtin_traits, \"1.0.0\", Some(13231)),\n \n-    // macro reexport needs more discussion and stabilization\n+    // macro re-export needs more discussion and stabilization\n     (active, macro_reexport, \"1.0.0\", Some(29638)),\n \n     // Allows use of #[staged_api]"}, {"sha": "8b448e401bd2536118d3325513326dcbe01d475d", "filename": "src/test/compile-fail-fulldeps/gated-macro-reexports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-macro-reexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-macro-reexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-macro-reexports.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test that macro reexports item are gated by `macro_reexport` feature gate.\n+// Test that macro re-exports item are gated by `macro_reexport` feature gate.\n \n // aux-build:macro_reexport_1.rs\n // gate-test-macro_reexport"}, {"sha": "73597e51f08021b95ef21278c699300486c58f4d", "filename": "src/test/compile-fail/auxiliary/static_priv_by_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fstatic_priv_by_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fstatic_priv_by_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fstatic_priv_by_default.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -32,7 +32,7 @@ mod foo {\n         fn foo() {}\n     }\n \n-    // these are public so the parent can reexport them.\n+    // these are public so the parent can re-export them.\n     pub static reexported_a: isize = 0;\n     pub fn reexported_b() {}\n     pub struct reexported_c;"}, {"sha": "8f0b53fd599713c3519654d6ef236a7f27a7aa1d", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -20,7 +20,7 @@\n \n extern crate lint_unused_extern_crate5; //~ ERROR: unused extern crate\n \n-pub extern crate lint_unused_extern_crate4; // no error, it is reexported\n+pub extern crate lint_unused_extern_crate4; // no error, it is re-exported\n \n extern crate lint_unused_extern_crate3; // no error, it is used\n "}, {"sha": "210bc4c8320c5f164268d40c4c80457453c097b3", "filename": "src/test/run-make/type-mismatch-same-crate-name/crateC.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateC.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateC.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateC.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -18,7 +18,7 @@\n // compile-fail/type-mismatch-same-crate-name.rs\n // but deals with the case where one of the crates\n // is only introduced as an indirect dependency.\n-// and the type is accessed via a reexport.\n+// and the type is accessed via a re-export.\n // This is similar to how the error can be introduced\n // when using cargo's automatic dependency resolution.\n "}, {"sha": "f82b04f37c502c988588d82f8312bdbcdc9ed0b0", "filename": "src/test/run-pass/unboxed-closures-prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-prelude.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Tests that the reexports of `FnOnce` et al from the prelude work.\n+// Tests that the re-exports of `FnOnce` et al from the prelude work.\n \n // pretty-expanded FIXME #23616\n "}, {"sha": "5fee36959c23d65ed8d9131084cd0b9843154438", "filename": "src/test/rustdoc/inline_cross/auxiliary/rustdoc-nonreachable-impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Frustdoc-nonreachable-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Frustdoc-nonreachable-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Frustdoc-nonreachable-impls.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -36,7 +36,7 @@ pub mod hidden {\n     pub struct Wobble;\n \n \n-    // these should only be shown if they're reexported correctly\n+    // these should only be shown if they're re-exported correctly\n     impl Qux for ::Foo {}\n     impl Qux for Wobble {}\n     impl ::Bark for Wobble {}"}, {"sha": "698005b5d3068a10ddae00340a5e79ffd3f1bc8b", "filename": "src/test/ui/issue-46112.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Ftest%2Fui%2Fissue-46112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e168aa385b9afb6c84071a09910724bdde3dfc5f/src%2Ftest%2Fui%2Fissue-46112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46112.rs?ref=e168aa385b9afb6c84071a09910724bdde3dfc5f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Issue 46112: An extern crate pub reexporting libcore was causing\n+// Issue 46112: An extern crate pub re-exporting libcore was causing\n // paths rooted from `std` to be misrendered in the diagnostic output.\n \n // ignore-windows"}]}