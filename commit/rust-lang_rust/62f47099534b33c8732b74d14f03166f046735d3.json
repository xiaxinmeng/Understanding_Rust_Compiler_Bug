{"sha": "62f47099534b33c8732b74d14f03166f046735d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyZjQ3MDk5NTM0YjMzYzg3MzJiNzRkMTRmMDMxNjZmMDQ2NzM1ZDM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-28T20:11:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-28T20:29:59Z"}, "message": "rustc: Resolve def ids in external crates", "tree": {"sha": "9928114089613d227ecf9581276dbe0d45081754", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9928114089613d227ecf9581276dbe0d45081754"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62f47099534b33c8732b74d14f03166f046735d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62f47099534b33c8732b74d14f03166f046735d3", "html_url": "https://github.com/rust-lang/rust/commit/62f47099534b33c8732b74d14f03166f046735d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62f47099534b33c8732b74d14f03166f046735d3/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc221c472a8f569a574240a27e113fca2ac0ae6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc221c472a8f569a574240a27e113fca2ac0ae6b", "html_url": "https://github.com/rust-lang/rust/commit/cc221c472a8f569a574240a27e113fca2ac0ae6b"}], "stats": {"total": 65, "additions": 61, "deletions": 4}, "files": [{"sha": "9a7cc0b4d8c1d590c2b2c01f12016a477e14ef1d", "filename": "src/comp/front/creader.rs", "status": "modified", "additions": 61, "deletions": 4, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/62f47099534b33c8732b74d14f03166f046735d3/src%2Fcomp%2Ffront%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62f47099534b33c8732b74d14f03166f046735d3/src%2Fcomp%2Ffront%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcreader.rs?ref=62f47099534b33c8732b74d14f03166f046735d3", "patch": "@@ -364,12 +364,54 @@ impure fn move_to_item(&ebml.reader ebml_r, ast.def_id did) {\n     log #fmt(\"move_to_item: item not found: %d:%d\", did._0, did._1);\n }\n \n-impure fn get_item_kind(ast.def_id did, vec[u8] data) -> u8 {\n+// Looks up an item in the given metadata and returns an EBML reader pointing\n+// to the item data.\n+impure fn lookup_item(ast.def_id did, vec[u8] data) -> ebml.reader {\n     auto io_r = io.new_reader_(io.new_byte_buf_reader(data));\n     auto ebml_r = ebml.create_reader(io_r);\n     move_to_item(ebml_r, did);\n+    ret ebml_r;\n+}\n+\n+impure fn get_item_kind(&ebml.reader ebml_r) -> u8 {\n+    while (ebml.bytes_left(ebml_r) > 0u) {\n+        auto ebml_tag = ebml.peek(ebml_r);\n+        if (ebml_tag.id == metadata.tag_items_kind) {\n+            ebml.move_to_first_child(ebml_r);\n+            auto kind_ch = ebml.read_data(ebml_r).(0);\n+\n+            // Reset the EBML reader so the callee can use it to look up\n+            // additional info about the item.\n+            ebml.move_to_parent(ebml_r);\n+            ebml.move_to_parent(ebml_r);\n+            ebml.move_to_first_child(ebml_r);\n+\n+            ret kind_ch;\n+        }\n+        ebml.move_to_next_sibling(ebml_r);\n+    }\n+\n+    log \"get_item_kind(): no kind found\";\n+    fail;\n+}\n+\n+impure fn get_variant_tag_id(&ebml.reader ebml_r) -> ast.def_id {\n+    while (ebml.bytes_left(ebml_r) > 0u) {\n+        auto ebml_tag = ebml.peek(ebml_r);\n+        if (ebml_tag.id == metadata.tag_items_tag_id) {\n+            ebml.move_to_first_child(ebml_r);\n+            auto tid = parse_def_id(ebml.read_data(ebml_r));\n+\n+            // Be kind, rewind.\n+            ebml.move_to_parent(ebml_r);\n+            ebml.move_to_parent(ebml_r);\n+            ebml.move_to_first_child(ebml_r);\n \n-    log \"found item\";\n+            ret tid;\n+        }\n+    }\n+\n+    log \"get_variant_tag_id(): no tag ID found\";\n     fail;\n }\n \n@@ -459,9 +501,24 @@ fn lookup_def(session.session sess, &span sp, int cnum, vec[ast.ident] path)\n         }\n     }\n \n-    // TODO: Look up item type, use that to determine the type of def.\n-    auto kind_ch = get_item_kind(did, data);\n+    auto ebml_r = lookup_item(did, data);\n+    auto kind_ch = get_item_kind(ebml_r);\n+\n+    did = tup(cnum, did._1);\n+\n+    // FIXME: It'd be great if we had u8 char literals.\n+    if (kind_ch == ('c' as u8))      { ret ast.def_const(did);  }\n+    else if (kind_ch == ('f' as u8)) { ret ast.def_fn(did);     }\n+    else if (kind_ch == ('y' as u8)) { ret ast.def_ty(did);     }\n+    else if (kind_ch == ('o' as u8)) { ret ast.def_obj(did);    }\n+    else if (kind_ch == ('t' as u8)) { ret ast.def_ty(did);     }\n+    else if (kind_ch == ('v' as u8)) {\n+        auto tid = get_variant_tag_id(ebml_r);\n+        tid = tup(cnum, tid._1);\n+        ret ast.def_variant(tid, did);\n+    }\n \n+    log #fmt(\"lookup_def(): unknown kind char: %d\", kind_ch as int);\n     fail;\n }\n "}]}