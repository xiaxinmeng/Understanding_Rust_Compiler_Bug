{"sha": "24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba", "node_id": "C_kwDOAAsO6NoAKDI0YmE4MmRlNGU0YWNmNGVhOGI0MjBmYjgxZjBmMDBkZGUwYmJjYmE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-08T16:30:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-08T16:30:23Z"}, "message": "Rollup merge of #111170 - compiler-errors:diag-doc, r=petrochenkov\n\nDiagnostic args are still args if they're documented\n\nFixes https://rust-lang.zulipchat.com/#narrow/stream/336883-i18n/topic/.60.23.5Bderive.28Diagnostic.29.5D.60.20works.20badly.20with.20docs/near/355597997\n\nThere's a lot of really strange code incongruencies between `Diagnostic` and `Subdiagnostic` derive. Perhaps those macros need some more overhaul, but I didn't really want to do it today.", "tree": {"sha": "a5b0dc97b75f3d127312a58a4b22e152e771fea2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5b0dc97b75f3d127312a58a4b22e152e771fea2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkWSOfCRBK7hj4Ov3rIwAAYwQIAEVAlbSQ3aE39xD2efGBZ8T4\neoIbifX7IEETgWDpvXzXpKYmynZWStRKkUA3yC7oJfQjF+p2e2rIEIIDYTgYapd2\nRAeB+xwI00if616SS9FK5C3WrGwL1klSo+uWvwttTtWSdDsRNL0IO0QCq51z6qcG\noepVqH6aE0dAfmKuODHen/0E+OXE3eLxmOemSvg+zCJoKP6fu8mN/PVsiGRyYnt6\ngd7Bo+5gjbmG4Dy/9QUsj4jykZgDtv8xyGY/Wnmufu2C3AfawXWqjwx5z7JEIrCP\ndL8oLGPJCPffXWkjVnsTC8mcD1oMDE+ZgUoia0WvpRtvkNVZKzJgPTOxwx2PHdk=\n=YinT\n-----END PGP SIGNATURE-----\n", "payload": "tree a5b0dc97b75f3d127312a58a4b22e152e771fea2\nparent beb49671c240b3f2576703872b1cca928b5a0e87\nparent a156bd771457110415b1eec74cf52c9502d461a3\nauthor Michael Goulet <michael@errs.io> 1683563423 -0700\ncommitter GitHub <noreply@github.com> 1683563423 -0700\n\nRollup merge of #111170 - compiler-errors:diag-doc, r=petrochenkov\n\nDiagnostic args are still args if they're documented\n\nFixes https://rust-lang.zulipchat.com/#narrow/stream/336883-i18n/topic/.60.23.5Bderive.28Diagnostic.29.5D.60.20works.20badly.20with.20docs/near/355597997\n\nThere's a lot of really strange code incongruencies between `Diagnostic` and `Subdiagnostic` derive. Perhaps those macros need some more overhaul, but I didn't really want to do it today.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba", "html_url": "https://github.com/rust-lang/rust/commit/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "beb49671c240b3f2576703872b1cca928b5a0e87", "url": "https://api.github.com/repos/rust-lang/rust/commits/beb49671c240b3f2576703872b1cca928b5a0e87", "html_url": "https://github.com/rust-lang/rust/commit/beb49671c240b3f2576703872b1cca928b5a0e87"}, {"sha": "a156bd771457110415b1eec74cf52c9502d461a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a156bd771457110415b1eec74cf52c9502d461a3", "html_url": "https://github.com/rust-lang/rust/commit/a156bd771457110415b1eec74cf52c9502d461a3"}], "stats": {"total": 141, "additions": 116, "deletions": 25}, "files": [{"sha": "cd6e36874603f8a499100c817af10ca83079af44", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba", "patch": "@@ -9,7 +9,7 @@ use crate::diagnostics::utils::{\n     FieldInnerTy, FieldMap, HasFieldMap, SetOnce, SpannedOption, SubdiagnosticKind,\n };\n use proc_macro2::{Ident, Span, TokenStream};\n-use quote::{format_ident, quote};\n+use quote::{format_ident, quote, quote_spanned};\n use syn::Token;\n use syn::{parse_quote, spanned::Spanned, Attribute, Meta, Path, Type};\n use synstructure::{BindingInfo, Structure, VariantInfo};\n@@ -251,7 +251,8 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n         let diag = &self.parent.diag;\n \n         let field = binding_info.ast();\n-        let field_binding = &binding_info.binding;\n+        let mut field_binding = binding_info.binding.clone();\n+        field_binding.set_span(field.ty.span());\n \n         let ident = field.ident.as_ref().unwrap();\n         let ident = format_ident!(\"{}\", ident); // strip `r#` prefix, if present\n@@ -284,9 +285,9 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n                     name == \"primary_span\" && matches!(inner_ty, FieldInnerTy::Vec(_));\n                 let (binding, needs_destructure) = if needs_clone {\n                     // `primary_span` can accept a `Vec<Span>` so don't destructure that.\n-                    (quote! { #field_binding.clone() }, false)\n+                    (quote_spanned! {inner_ty.span()=> #field_binding.clone() }, false)\n                 } else {\n-                    (quote! { #field_binding }, true)\n+                    (quote_spanned! {inner_ty.span()=> #field_binding }, true)\n                 };\n \n                 let generated_code = self"}, {"sha": "374ba1a45c06ec89ada4f940cf52d01e357ef5f8", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba", "patch": "@@ -4,17 +4,16 @@ use crate::diagnostics::error::{\n     invalid_attr, span_err, throw_invalid_attr, throw_span_err, DiagnosticDeriveError,\n };\n use crate::diagnostics::utils::{\n-    build_field_mapping, is_doc_comment, new_code_ident,\n-    report_error_if_not_applied_to_applicability, report_error_if_not_applied_to_span, FieldInfo,\n-    FieldInnerTy, FieldMap, HasFieldMap, SetOnce, SpannedOption, SubdiagnosticKind,\n+    build_field_mapping, build_suggestion_code, is_doc_comment, new_code_ident,\n+    report_error_if_not_applied_to_applicability, report_error_if_not_applied_to_span,\n+    should_generate_set_arg, AllowMultipleAlternatives, FieldInfo, FieldInnerTy, FieldMap,\n+    HasFieldMap, SetOnce, SpannedOption, SubdiagnosticKind,\n };\n use proc_macro2::TokenStream;\n use quote::{format_ident, quote};\n use syn::{spanned::Spanned, Attribute, Meta, MetaList, Path};\n use synstructure::{BindingInfo, Structure, VariantInfo};\n \n-use super::utils::{build_suggestion_code, AllowMultipleAlternatives};\n-\n /// The central struct for constructing the `add_to_diagnostic` method from an annotated struct.\n pub(crate) struct SubdiagnosticDeriveBuilder {\n     diag: syn::Ident,\n@@ -210,19 +209,20 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n     }\n \n     /// Generates the code for a field with no attributes.\n-    fn generate_field_set_arg(&mut self, binding: &BindingInfo<'_>) -> TokenStream {\n-        let ast = binding.ast();\n-        assert_eq!(ast.attrs.len(), 0, \"field with attribute used as diagnostic arg\");\n-\n+    fn generate_field_set_arg(&mut self, binding_info: &BindingInfo<'_>) -> TokenStream {\n         let diag = &self.parent.diag;\n-        let ident = ast.ident.as_ref().unwrap();\n-        // strip `r#` prefix, if present\n-        let ident = format_ident!(\"{}\", ident);\n+\n+        let field = binding_info.ast();\n+        let mut field_binding = binding_info.binding.clone();\n+        field_binding.set_span(field.ty.span());\n+\n+        let ident = field.ident.as_ref().unwrap();\n+        let ident = format_ident!(\"{}\", ident); // strip `r#` prefix, if present\n \n         quote! {\n             #diag.set_arg(\n                 stringify!(#ident),\n-                #binding\n+                #field_binding\n             );\n         }\n     }\n@@ -399,7 +399,8 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n         clone_suggestion_code: bool,\n     ) -> Result<TokenStream, DiagnosticDeriveError> {\n         let span = attr.span().unwrap();\n-        let ident = &list.path.segments.last().unwrap().ident;\n+        let mut ident = list.path.segments.last().unwrap().ident.clone();\n+        ident.set_span(info.ty.span());\n         let name = ident.to_string();\n         let name = name.as_str();\n \n@@ -498,7 +499,7 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n             .variant\n             .bindings()\n             .iter()\n-            .filter(|binding| !binding.ast().attrs.is_empty())\n+            .filter(|binding| !should_generate_set_arg(binding.ast()))\n             .map(|binding| self.generate_field_attr_code(binding, kind_stats))\n             .collect();\n \n@@ -580,7 +581,7 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n             .variant\n             .bindings()\n             .iter()\n-            .filter(|binding| binding.ast().attrs.is_empty())\n+            .filter(|binding| should_generate_set_arg(binding.ast()))\n             .map(|binding| self.generate_field_set_arg(binding))\n             .collect();\n "}, {"sha": "e2434981f8d1782fd3fdfb0f051bcae1a6a9f8be", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba", "patch": "@@ -207,6 +207,12 @@ impl<'ty> FieldInnerTy<'ty> {\n             FieldInnerTy::Plain(..) => quote! { #inner },\n         }\n     }\n+\n+    pub fn span(&self) -> proc_macro2::Span {\n+        match self {\n+            FieldInnerTy::Option(ty) | FieldInnerTy::Vec(ty) | FieldInnerTy::Plain(ty) => ty.span(),\n+        }\n+    }\n }\n \n /// Field information passed to the builder. Deliberately omits attrs to discourage the\n@@ -851,7 +857,8 @@ impl quote::IdentFragment for SubdiagnosticKind {\n /// Returns `true` if `field` should generate a `set_arg` call rather than any other diagnostic\n /// call (like `span_label`).\n pub(super) fn should_generate_set_arg(field: &Field) -> bool {\n-    field.attrs.is_empty()\n+    // Perhaps this should be an exhaustive list...\n+    field.attrs.iter().all(|attr| is_doc_comment(attr))\n }\n \n pub(super) fn is_doc_comment(attr: &Attribute) -> bool {"}, {"sha": "642b58b0753fd894e2b0a2defb69bdd700175e6e", "filename": "tests/ui-fulldeps/session-diagnostic/diagnostic-derive-doc-comment-field.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.rs?ref=24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba", "patch": "@@ -0,0 +1,49 @@\n+// check-fail\n+// Tests that a doc comment will not preclude a field from being considered a diagnostic argument\n+// normalize-stderr-test \"the following other types implement trait `IntoDiagnosticArg`:(?:.*\\n){0,9}\\s+and \\d+ others\" -> \"normalized in stderr\"\n+// normalize-stderr-test \"diagnostic_builder\\.rs:[0-9]+:[0-9]+\" -> \"diagnostic_builder.rs:LL:CC\"\n+\n+// The proc_macro2 crate handles spans differently when on beta/stable release rather than nightly,\n+// changing the output of this test. Since Subdiagnostic is strictly internal to the compiler\n+// the test is just ignored on stable and beta:\n+// ignore-stage1\n+// ignore-beta\n+// ignore-stable\n+\n+#![feature(rustc_private)]\n+#![crate_type = \"lib\"]\n+\n+extern crate rustc_errors;\n+extern crate rustc_fluent_macro;\n+extern crate rustc_macros;\n+extern crate rustc_session;\n+extern crate rustc_span;\n+\n+use rustc_errors::{Applicability, DiagnosticMessage, SubdiagnosticMessage};\n+use rustc_fluent_macro::fluent_messages;\n+use rustc_macros::{Diagnostic, Subdiagnostic};\n+use rustc_span::Span;\n+\n+fluent_messages! { \"./example.ftl\" }\n+\n+struct NotIntoDiagnosticArg;\n+\n+#[derive(Diagnostic)]\n+#[diag(no_crate_example)]\n+struct Test {\n+    #[primary_span]\n+    span: Span,\n+    /// A doc comment\n+    arg: NotIntoDiagnosticArg,\n+    //~^ ERROR the trait bound `NotIntoDiagnosticArg: IntoDiagnosticArg` is not satisfied\n+}\n+\n+#[derive(Subdiagnostic)]\n+#[label(no_crate_example)]\n+struct SubTest {\n+    #[primary_span]\n+    span: Span,\n+    /// A doc comment\n+    arg: NotIntoDiagnosticArg,\n+    //~^ ERROR the trait bound `NotIntoDiagnosticArg: IntoDiagnosticArg` is not satisfied\n+}"}, {"sha": "e4b8958b4fae871d3ee0d1fa60dea6bd606e0a60", "filename": "tests/ui-fulldeps/session-diagnostic/diagnostic-derive-doc-comment-field.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive-doc-comment-field.stderr?ref=24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba", "patch": "@@ -0,0 +1,30 @@\n+error[E0277]: the trait bound `NotIntoDiagnosticArg: IntoDiagnosticArg` is not satisfied\n+  --> $DIR/diagnostic-derive-doc-comment-field.rs:37:10\n+   |\n+LL | #[derive(Diagnostic)]\n+   |          ---------- required by a bound introduced by this call\n+...\n+LL |     arg: NotIntoDiagnosticArg,\n+   |          ^^^^^^^^^^^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `NotIntoDiagnosticArg`\n+   |\n+   = help: normalized in stderr\n+note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n+  --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:LL:CC\n+   = note: this error originates in the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error[E0277]: the trait bound `NotIntoDiagnosticArg: IntoDiagnosticArg` is not satisfied\n+  --> $DIR/diagnostic-derive-doc-comment-field.rs:47:10\n+   |\n+LL | #[derive(Subdiagnostic)]\n+   |          ------------- required by a bound introduced by this call\n+...\n+LL |     arg: NotIntoDiagnosticArg,\n+   |          ^^^^^^^^^^^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `NotIntoDiagnosticArg`\n+   |\n+   = help: normalized in stderr\n+note: required by a bound in `Diagnostic::set_arg`\n+  --> $COMPILER_DIR/rustc_errors/src/diagnostic.rs:964:5\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "39e34d73f9a431ad1d254d118958dbe4b86d7d26", "filename": "tests/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba", "patch": "@@ -339,12 +339,12 @@ struct ErrorWithDefaultLabelAttr<'a> {\n }\n \n #[derive(Diagnostic)]\n-//~^ ERROR the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n #[diag(no_crate_example, code = \"E0123\")]\n struct ArgFieldWithoutSkip {\n     #[primary_span]\n     span: Span,\n     other: Hello,\n+    //~^ ERROR the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n }\n \n #[derive(Diagnostic)]"}, {"sha": "801e4b5793cc1622916608c419eaa7029d477e76", "filename": "tests/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=24ba82de4e4acf4ea8b420fb81f0f00dde0bbcba", "patch": "@@ -641,15 +641,18 @@ LL | #[derive(Diagnostic)]\n    = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: the trait bound `Hello: IntoDiagnosticArg` is not satisfied\n-  --> $DIR/diagnostic-derive.rs:341:10\n+  --> $DIR/diagnostic-derive.rs:346:12\n    |\n LL | #[derive(Diagnostic)]\n-   |          ^^^^^^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`\n+   |          ---------- required by a bound introduced by this call\n+...\n+LL |     other: Hello,\n+   |            ^^^^^ the trait `IntoDiagnosticArg` is not implemented for `Hello`\n    |\n    = help: normalized in stderr\n note: required by a bound in `DiagnosticBuilder::<'a, G>::set_arg`\n   --> $COMPILER_DIR/rustc_errors/src/diagnostic_builder.rs:LL:CC\n-   = note: this error originates in the derive macro `Diagnostic` which comes from the expansion of the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `forward` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 84 previous errors\n "}]}