{"sha": "513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxM2E2NDczZDY5YjNhZjM0ZTZjZGFhNGVmYjI4OGZlNTI4M2MzZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-14T03:11:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-14T03:11:12Z"}, "message": "Auto merge of #70643 - Rustin-Liu:rustin-patch-rename, r=eddyb\n\nRename AssocKind::Method to AssocKind::Fn\n\nPart of https://github.com/rust-lang/rust/issues/60163.\n\nhttps://github.com/rust-lang/rust/issues/60163#issuecomment-607284413", "tree": {"sha": "da6c7acbed5e10b9ea88323b14834c309a829441", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da6c7acbed5e10b9ea88323b14834c309a829441"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "html_url": "https://github.com/rust-lang/rust/commit/513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47f49695dfb4fe9e584239fdc59c771887148a57", "url": "https://api.github.com/repos/rust-lang/rust/commits/47f49695dfb4fe9e584239fdc59c771887148a57", "html_url": "https://github.com/rust-lang/rust/commit/47f49695dfb4fe9e584239fdc59c771887148a57"}, {"sha": "b07e7fe0474849e62ce870af472eba6a985572d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b07e7fe0474849e62ce870af472eba6a985572d1", "html_url": "https://github.com/rust-lang/rust/commit/b07e7fe0474849e62ce870af472eba6a985572d1"}], "stats": {"total": 245, "additions": 119, "deletions": 126}, "files": [{"sha": "c535885e70cb3956ad9bf716dd2059f88297ed6a", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -796,7 +796,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 (hir::AssocItemKind::Type, default.is_some())\n             }\n             AssocItemKind::Fn(_, sig, _, default) => {\n-                (hir::AssocItemKind::Method { has_self: sig.decl.has_self() }, default.is_some())\n+                (hir::AssocItemKind::Fn { has_self: sig.decl.has_self() }, default.is_some())\n             }\n             AssocItemKind::MacCall(..) => unimplemented!(),\n         };\n@@ -894,7 +894,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     }\n                 }\n                 AssocItemKind::Fn(_, sig, ..) => {\n-                    hir::AssocItemKind::Method { has_self: sig.decl.has_self() }\n+                    hir::AssocItemKind::Fn { has_self: sig.decl.has_self() }\n                 }\n                 AssocItemKind::MacCall(..) => unimplemented!(),\n             },"}, {"sha": "172d1e263ea10d2c2959c980a7c2302f416373cf", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -2515,7 +2515,7 @@ pub struct ImplItemRef<'hir> {\n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum AssocItemKind {\n     Const,\n-    Method { has_self: bool },\n+    Fn { has_self: bool },\n     Type,\n     OpaqueTy,\n }"}, {"sha": "7bbd2127bcfdfe5812fb923d72e29c18457711d5", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     // enable E0621 for it.\n     pub(super) fn is_self_anon(&self, is_first: bool, scope_def_id: DefId) -> bool {\n         is_first\n-            && self.tcx().opt_associated_item(scope_def_id).map(|i| i.method_has_self_argument)\n+            && self.tcx().opt_associated_item(scope_def_id).map(|i| i.fn_has_self_parameter)\n                 == Some(true)\n     }\n }"}, {"sha": "ef6f37c5dab2dddaca23512fecc6821be13b9560", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -1153,7 +1153,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             EntryKind::AssocConst(container, _, _) => (ty::AssocKind::Const, container, false),\n             EntryKind::AssocFn(data) => {\n                 let data = data.decode(self);\n-                (ty::AssocKind::Method, data.container, data.has_self)\n+                (ty::AssocKind::Fn, data.container, data.has_self)\n             }\n             EntryKind::AssocType(container) => (ty::AssocKind::Type, container, false),\n             EntryKind::AssocOpaqueTy(container) => (ty::AssocKind::OpaqueTy, container, false),\n@@ -1167,7 +1167,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             defaultness: container.defaultness(),\n             def_id: self.local_def_id(id),\n             container: container.with_def_id(parent),\n-            method_has_self_argument: has_self,\n+            fn_has_self_parameter: has_self,\n         }\n     }\n "}, {"sha": "9c9869c85571fb9eb355533debab7ace1ee73cc7", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -839,7 +839,7 @@ impl EncodeContext<'tcx> {\n                     rendered_const,\n                 )\n             }\n-            ty::AssocKind::Method => {\n+            ty::AssocKind::Fn => {\n                 let fn_data = if let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind {\n                     let param_names = match *m {\n                         hir::TraitFn::Required(ref names) => {\n@@ -860,7 +860,7 @@ impl EncodeContext<'tcx> {\n                 EntryKind::AssocFn(self.lazy(AssocFnData {\n                     fn_data,\n                     container,\n-                    has_self: trait_item.method_has_self_argument,\n+                    has_self: trait_item.fn_has_self_parameter,\n                 }))\n             }\n             ty::AssocKind::Type => EntryKind::AssocType(container),\n@@ -874,7 +874,7 @@ impl EncodeContext<'tcx> {\n         self.encode_const_stability(def_id);\n         self.encode_deprecation(def_id);\n         match trait_item.kind {\n-            ty::AssocKind::Const | ty::AssocKind::Method => {\n+            ty::AssocKind::Const | ty::AssocKind::Fn => {\n                 self.encode_item_type(def_id);\n             }\n             ty::AssocKind::Type => {\n@@ -884,7 +884,7 @@ impl EncodeContext<'tcx> {\n             }\n             ty::AssocKind::OpaqueTy => unreachable!(),\n         }\n-        if trait_item.kind == ty::AssocKind::Method {\n+        if trait_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n             self.encode_variances_of(def_id);\n         }\n@@ -931,7 +931,7 @@ impl EncodeContext<'tcx> {\n                     bug!()\n                 }\n             }\n-            ty::AssocKind::Method => {\n+            ty::AssocKind::Fn => {\n                 let fn_data = if let hir::ImplItemKind::Fn(ref sig, body) = ast_item.kind {\n                     FnData {\n                         asyncness: sig.header.asyncness,\n@@ -944,7 +944,7 @@ impl EncodeContext<'tcx> {\n                 EntryKind::AssocFn(self.lazy(AssocFnData {\n                     fn_data,\n                     container,\n-                    has_self: impl_item.method_has_self_argument,\n+                    has_self: impl_item.fn_has_self_parameter,\n                 }))\n             }\n             ty::AssocKind::OpaqueTy => EntryKind::AssocOpaqueTy(container),\n@@ -958,7 +958,7 @@ impl EncodeContext<'tcx> {\n         self.encode_const_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n-        if impl_item.kind == ty::AssocKind::Method {\n+        if impl_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n             self.encode_variances_of(def_id);\n         }"}, {"sha": "bc743666e4a2194f64e1d2dea37118010cc4e92b", "filename": "src/librustc_middle/traits/specialization_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fspecialization_graph.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -107,13 +107,13 @@ impl<'tcx> Node {\n             .find(move |impl_item| {\n                 match (trait_item_kind, impl_item.kind) {\n                 | (Const, Const)\n-                | (Method, Method)\n+                | (Fn, Fn)\n                 | (Type, Type)\n                 | (Type, OpaqueTy)  // assoc. types can be made opaque in impls\n                 => tcx.hygienic_eq(impl_item.ident, trait_item_name, trait_def_id),\n \n                 | (Const, _)\n-                | (Method, _)\n+                | (Fn, _)\n                 | (Type, _)\n                 | (OpaqueTy, _)\n                 => false,"}, {"sha": "efd5adeba8c5af244edb3d5fac8dd163c628cc33", "filename": "src/librustc_middle/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_middle%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_middle%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fadjustment.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -123,7 +123,7 @@ impl<'tcx> OverloadedDeref<'tcx> {\n         let method_def_id = tcx\n             .associated_items(trait_def_id.unwrap())\n             .in_definition_order()\n-            .find(|m| m.kind == ty::AssocKind::Method)\n+            .find(|m| m.kind == ty::AssocKind::Fn)\n             .unwrap()\n             .def_id;\n         (method_def_id, tcx.mk_substs_trait(source, &[]))"}, {"sha": "ca76cfb14921e25414d088f6c0c6b3a526e8687a", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -366,7 +366,7 @@ impl<'tcx> Instance<'tcx> {\n         let call_once = tcx\n             .associated_items(fn_once)\n             .in_definition_order()\n-            .find(|it| it.kind == ty::AssocKind::Method)\n+            .find(|it| it.kind == ty::AssocKind::Fn)\n             .unwrap()\n             .def_id;\n         let def = ty::InstanceDef::ClosureOnceShim { call_once };"}, {"sha": "8d50f560a83706c9fde767c0d7bf21e62d6a7b58", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-filelength\n-\n pub use self::fold::{TypeFoldable, TypeVisitor};\n pub use self::AssocItemContainer::*;\n pub use self::BorrowKind::*;\n@@ -192,58 +190,50 @@ pub struct AssocItem {\n     pub container: AssocItemContainer,\n \n     /// Whether this is a method with an explicit self\n-    /// as its first argument, allowing method calls.\n-    pub method_has_self_argument: bool,\n+    /// as its first parameter, allowing method calls.\n+    pub fn_has_self_parameter: bool,\n }\n \n #[derive(Copy, Clone, PartialEq, Debug, HashStable)]\n pub enum AssocKind {\n     Const,\n-    Method,\n+    Fn,\n     OpaqueTy,\n     Type,\n }\n \n impl AssocKind {\n-    pub fn suggestion_descr(&self) -> &'static str {\n-        match self {\n-            ty::AssocKind::Method => \"method call\",\n-            ty::AssocKind::Type | ty::AssocKind::OpaqueTy => \"associated type\",\n-            ty::AssocKind::Const => \"associated constant\",\n-        }\n-    }\n-\n     pub fn namespace(&self) -> Namespace {\n         match *self {\n             ty::AssocKind::OpaqueTy | ty::AssocKind::Type => Namespace::TypeNS,\n-            ty::AssocKind::Const | ty::AssocKind::Method => Namespace::ValueNS,\n+            ty::AssocKind::Const | ty::AssocKind::Fn => Namespace::ValueNS,\n         }\n     }\n-}\n \n-impl AssocItem {\n-    pub fn def_kind(&self) -> DefKind {\n-        match self.kind {\n+    pub fn as_def_kind(&self) -> DefKind {\n+        match self {\n             AssocKind::Const => DefKind::AssocConst,\n-            AssocKind::Method => DefKind::AssocFn,\n+            AssocKind::Fn => DefKind::AssocFn,\n             AssocKind::Type => DefKind::AssocTy,\n             AssocKind::OpaqueTy => DefKind::AssocOpaqueTy,\n         }\n     }\n+}\n \n+impl AssocItem {\n     /// Tests whether the associated item admits a non-trivial implementation\n     /// for !\n     pub fn relevant_for_never(&self) -> bool {\n         match self.kind {\n             AssocKind::OpaqueTy | AssocKind::Const | AssocKind::Type => true,\n             // FIXME(canndrew): Be more thorough here, check if any argument is uninhabited.\n-            AssocKind::Method => !self.method_has_self_argument,\n+            AssocKind::Fn => !self.fn_has_self_parameter,\n         }\n     }\n \n     pub fn signature(&self, tcx: TyCtxt<'_>) -> String {\n         match self.kind {\n-            ty::AssocKind::Method => {\n+            ty::AssocKind::Fn => {\n                 // We skip the binder here because the binder would deanonymize all\n                 // late-bound regions, and we don't want method signatures to show up\n                 // `as for<'r> fn(&'r MyType)`.  Pretty-printing handles late-bound\n@@ -2664,7 +2654,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn provided_trait_methods(self, id: DefId) -> impl 'tcx + Iterator<Item = &'tcx AssocItem> {\n         self.associated_items(id)\n             .in_definition_order()\n-            .filter(|item| item.kind == AssocKind::Method && item.defaultness.has_value())\n+            .filter(|item| item.kind == AssocKind::Fn && item.defaultness.has_value())\n     }\n \n     pub fn trait_relevant_for_never(self, did: DefId) -> bool {"}, {"sha": "e1473cbfb6328500c4dfe8a1fba85c5eb1e1af43", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -74,7 +74,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n             let call_mut = tcx\n                 .associated_items(fn_mut)\n                 .in_definition_order()\n-                .find(|it| it.kind == ty::AssocKind::Method)\n+                .find(|it| it.kind == ty::AssocKind::Fn)\n                 .unwrap()\n                 .def_id;\n "}, {"sha": "18a981dfea1bd9cc18b719ede926776a653ddd84", "filename": "src/librustc_mir_build/hair/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fmod.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -176,7 +176,7 @@ impl<'a, 'tcx> Cx<'a, 'tcx> {\n             .tcx\n             .associated_items(trait_def_id)\n             .filter_by_name_unhygienic(method_name)\n-            .find(|item| item.kind == ty::AssocKind::Method)\n+            .find(|item| item.kind == ty::AssocKind::Fn)\n             .expect(\"trait method not found\");\n \n         let method_ty = self.tcx.type_of(item.def_id);"}, {"sha": "84f041ee9f87ca5b72654cdc6e896ef738dd2ddd", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -1648,7 +1648,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                     found_pub_static = true;\n                                     intravisit::walk_impl_item(self, impl_item);\n                                 }\n-                                AssocItemKind::Method { has_self: false } => {\n+                                AssocItemKind::Fn { has_self: false } => {\n                                     found_pub_static = true;\n                                     intravisit::walk_impl_item(self, impl_item);\n                                 }\n@@ -1927,7 +1927,7 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n         let mut check = self.check(hir_id, vis);\n \n         let (check_ty, is_assoc_ty) = match assoc_item_kind {\n-            AssocItemKind::Const | AssocItemKind::Method { .. } => (true, false),\n+            AssocItemKind::Const | AssocItemKind::Fn { .. } => (true, false),\n             AssocItemKind::Type => (defaultness.has_value(), true),\n             // `ty()` for opaque types is the underlying type,\n             // it's not a part of interface, so we skip it."}, {"sha": "7e5415d000e3d55b8f64f0ed477bec19f4dcd6fd", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -921,7 +921,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             Res::Def(DefKind::AssocFn, def_id) => {\n                 if cstore\n                     .associated_item_cloned_untracked(def_id, self.r.session)\n-                    .method_has_self_argument\n+                    .fn_has_self_parameter\n                 {\n                     self.r.has_self.insert(def_id);\n                 }"}, {"sha": "f230eeb8fad57fbf1e996d75f91316df2b4c7a10", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -2117,7 +2117,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         };\n \n         let has_self = match assoc_item_kind {\n-            Some(hir::AssocItemKind::Method { has_self }) => has_self,\n+            Some(hir::AssocItemKind::Fn { has_self }) => has_self,\n             _ => false,\n         };\n "}, {"sha": "53e73ed3906ca4f2201463d0f6eefa38fc6659a6", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -1029,7 +1029,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 err.note(&format!(\n                     \"{}s cannot be accessed directly on a `trait`, they can only be \\\n                         accessed through a specific `impl`\",\n-                    assoc_item.kind.suggestion_descr(),\n+                    assoc_item.kind.as_def_kind().descr(def_id)\n                 ));\n                 err.span_suggestion(\n                     span,"}, {"sha": "f8fc155f582b82e6d7c0611f8bf50aef4f3eb6f2", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -475,7 +475,7 @@ fn vtable_methods<'tcx>(\n         let trait_methods = tcx\n             .associated_items(trait_ref.def_id())\n             .in_definition_order()\n-            .filter(|item| item.kind == ty::AssocKind::Method);\n+            .filter(|item| item.kind == ty::AssocKind::Fn);\n \n         // Now list each method's DefId and InternalSubsts (for within its trait).\n         // If the method can never be called from this object, produce None."}, {"sha": "d9fba1fd78392e69e11f41c2fc799729dd788311", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -86,7 +86,7 @@ fn object_safety_violations_for_trait(\n     let mut violations: Vec<_> = tcx\n         .associated_items(trait_def_id)\n         .in_definition_order()\n-        .filter(|item| item.kind == ty::AssocKind::Method)\n+        .filter(|item| item.kind == ty::AssocKind::Fn)\n         .filter_map(|item| {\n             object_safety_violation_for_method(tcx, trait_def_id, &item)\n                 .map(|(code, span)| ObjectSafetyViolation::Method(item.ident.name, code, span))\n@@ -362,7 +362,7 @@ fn virtual_call_violation_for_method<'tcx>(\n     method: &ty::AssocItem,\n ) -> Option<MethodViolationCode> {\n     // The method's first parameter must be named `self`\n-    if !method.method_has_self_argument {\n+    if !method.fn_has_self_parameter {\n         // We'll attempt to provide a structured suggestion for `Self: Sized`.\n         let sugg =\n             tcx.hir().get_if_local(method.def_id).as_ref().and_then(|node| node.generics()).map("}, {"sha": "ffece42ec306ce3e18d8cb177942b91d3aaa725c", "filename": "src/librustc_trait_selection/traits/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Futil.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -293,7 +293,7 @@ pub fn count_own_vtable_entries(tcx: TyCtxt<'tcx>, trait_ref: ty::PolyTraitRef<'\n     // Count number of methods and add them to the total offset.\n     // Skip over associated types and constants.\n     for trait_item in tcx.associated_items(trait_ref.def_id()).in_definition_order() {\n-        if trait_item.kind == ty::AssocKind::Method {\n+        if trait_item.kind == ty::AssocKind::Fn {\n             entries += 1;\n         }\n     }\n@@ -315,10 +315,10 @@ pub fn get_vtable_index_of_object_method<N>(\n     for trait_item in tcx.associated_items(object.upcast_trait_ref.def_id()).in_definition_order() {\n         if trait_item.def_id == method_def_id {\n             // The item with the ID we were given really ought to be a method.\n-            assert_eq!(trait_item.kind, ty::AssocKind::Method);\n+            assert_eq!(trait_item.kind, ty::AssocKind::Fn);\n             return entries;\n         }\n-        if trait_item.kind == ty::AssocKind::Method {\n+        if trait_item.kind == ty::AssocKind::Fn {\n             entries += 1;\n         }\n     }"}, {"sha": "43ff39f92f757d98deefa946628b59e4e6dd9028", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -85,7 +85,7 @@ fn associated_item_from_trait_item_ref(\n     let def_id = tcx.hir().local_def_id(trait_item_ref.id.hir_id);\n     let (kind, has_self) = match trait_item_ref.kind {\n         hir::AssocItemKind::Const => (ty::AssocKind::Const, false),\n-        hir::AssocItemKind::Method { has_self } => (ty::AssocKind::Method, has_self),\n+        hir::AssocItemKind::Fn { has_self } => (ty::AssocKind::Fn, has_self),\n         hir::AssocItemKind::Type => (ty::AssocKind::Type, false),\n         hir::AssocItemKind::OpaqueTy => bug!(\"only impls can have opaque types\"),\n     };\n@@ -98,7 +98,7 @@ fn associated_item_from_trait_item_ref(\n         defaultness: trait_item_ref.defaultness,\n         def_id,\n         container: ty::TraitContainer(parent_def_id),\n-        method_has_self_argument: has_self,\n+        fn_has_self_parameter: has_self,\n     }\n }\n \n@@ -110,7 +110,7 @@ fn associated_item_from_impl_item_ref(\n     let def_id = tcx.hir().local_def_id(impl_item_ref.id.hir_id);\n     let (kind, has_self) = match impl_item_ref.kind {\n         hir::AssocItemKind::Const => (ty::AssocKind::Const, false),\n-        hir::AssocItemKind::Method { has_self } => (ty::AssocKind::Method, has_self),\n+        hir::AssocItemKind::Fn { has_self } => (ty::AssocKind::Fn, has_self),\n         hir::AssocItemKind::Type => (ty::AssocKind::Type, false),\n         hir::AssocItemKind::OpaqueTy => (ty::AssocKind::OpaqueTy, false),\n     };\n@@ -123,7 +123,7 @@ fn associated_item_from_impl_item_ref(\n         defaultness: impl_item_ref.defaultness,\n         def_id,\n         container: ty::ImplContainer(parent_def_id),\n-        method_has_self_argument: has_self,\n+        fn_has_self_parameter: has_self,\n     }\n }\n "}, {"sha": "82c8a5543eb3340cfa2bbca1d1e55388409d7029", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -516,7 +516,7 @@ fn compare_self_type<'tcx>(\n         })\n     };\n \n-    match (trait_m.method_has_self_argument, impl_m.method_has_self_argument) {\n+    match (trait_m.fn_has_self_parameter, impl_m.fn_has_self_parameter) {\n         (false, false) | (true, true) => {}\n \n         (false, true) => {\n@@ -1163,7 +1163,7 @@ fn compare_type_predicate_entailment(\n fn assoc_item_kind_str(impl_item: &ty::AssocItem) -> &'static str {\n     match impl_item.kind {\n         ty::AssocKind::Const => \"const\",\n-        ty::AssocKind::Method => \"method\",\n+        ty::AssocKind::Fn => \"method\",\n         ty::AssocKind::Type | ty::AssocKind::OpaqueTy => \"type\",\n     }\n }"}, {"sha": "be45ada866f32ec2d751dce0f2cf227895112faa", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -246,9 +246,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     // This function checks if the method isn't static and takes other arguments than `self`.\n     fn has_no_input_arg(&self, method: &AssocItem) -> bool {\n         match method.kind {\n-            ty::AssocKind::Method => {\n-                self.tcx.fn_sig(method.def_id).inputs().skip_binder().len() == 1\n-            }\n+            ty::AssocKind::Fn => self.tcx.fn_sig(method.def_id).inputs().skip_binder().len() == 1,\n             _ => false,\n         }\n     }"}, {"sha": "13fc3900e480c73a7fae66ab1eafb0d980c8fc29", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -467,7 +467,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        let def_kind = pick.item.def_kind();\n+        let def_kind = pick.item.kind.as_def_kind();\n         debug!(\"resolve_ufcs: def_kind={:?}, def_id={:?}\", def_kind, pick.item.def_id);\n         tcx.check_stability(pick.item.def_id, Some(expr_id), span);\n         Ok((def_kind, pick.item.def_id))"}, {"sha": "b5d3f7b55029f4202631219c2d48d88cf61f20e8", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -570,7 +570,8 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 self.extension_candidates.push(candidate);\n             }\n         } else if self.private_candidate.is_none() {\n-            self.private_candidate = Some((candidate.item.def_kind(), candidate.item.def_id));\n+            self.private_candidate =\n+                Some((candidate.item.kind.as_def_kind(), candidate.item.def_id));\n         }\n     }\n \n@@ -896,7 +897,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         expected: Ty<'tcx>,\n     ) -> bool {\n         match method.kind {\n-            ty::AssocKind::Method => {\n+            ty::AssocKind::Fn => {\n                 let fty = self.tcx.fn_sig(method.def_id);\n                 self.probe(|_| {\n                     let substs = self.fresh_substs_for_item(self.span, method.def_id);\n@@ -1549,10 +1550,10 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         // In Path mode (i.e., resolving a value like `T::next`), consider any\n         // associated value (i.e., methods, constants) but not types.\n         match self.mode {\n-            Mode::MethodCall => item.method_has_self_argument,\n+            Mode::MethodCall => item.fn_has_self_parameter,\n             Mode::Path => match item.kind {\n                 ty::AssocKind::OpaqueTy | ty::AssocKind::Type => false,\n-                ty::AssocKind::Method | ty::AssocKind::Const => true,\n+                ty::AssocKind::Fn | ty::AssocKind::Const => true,\n             },\n         }\n         // FIXME -- check for types that deref to `Self`,\n@@ -1573,7 +1574,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         impl_ty: Ty<'tcx>,\n         substs: SubstsRef<'tcx>,\n     ) -> (Ty<'tcx>, Option<Ty<'tcx>>) {\n-        if item.kind == ty::AssocKind::Method && self.mode == Mode::MethodCall {\n+        if item.kind == ty::AssocKind::Fn && self.mode == Mode::MethodCall {\n             let sig = self.xform_method_sig(item.def_id, substs);\n             (sig.inputs()[0], Some(sig.output()))\n         } else {"}, {"sha": "edde9b1a1a12f9918d2b7d7ee85697a1c21d23e2", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -162,7 +162,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 ty::AssocKind::Const\n                                 | ty::AssocKind::Type\n                                 | ty::AssocKind::OpaqueTy => rcvr_ty,\n-                                ty::AssocKind::Method => self\n+                                ty::AssocKind::Fn => self\n                                     .tcx\n                                     .fn_sig(item.def_id)\n                                     .inputs()\n@@ -179,6 +179,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 path,\n                                 ty,\n                                 item.kind,\n+                                item.def_id,\n                                 sugg_span,\n                                 idx,\n                                 self.tcx.sess.source_map(),\n@@ -220,6 +221,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             path,\n                             rcvr_ty,\n                             item.kind,\n+                            item.def_id,\n                             sugg_span,\n                             idx,\n                             self.tcx.sess.source_map(),\n@@ -764,7 +766,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         err.span_label(span, msg);\n                     }\n                 } else if let Some(lev_candidate) = lev_candidate {\n-                    let def_kind = lev_candidate.def_kind();\n+                    let def_kind = lev_candidate.kind.as_def_kind();\n                     err.span_suggestion(\n                         span,\n                         &format!(\n@@ -957,7 +959,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     && self\n                         .associated_item(info.def_id, item_name, Namespace::ValueNS)\n                         .filter(|item| {\n-                            if let ty::AssocKind::Method = item.kind {\n+                            if let ty::AssocKind::Fn = item.kind {\n                                 let id = self.tcx.hir().as_local_hir_id(item.def_id);\n                                 if let Some(hir::Node::TraitItem(hir::TraitItem {\n                                     kind: hir::TraitItemKind::Fn(fn_sig, method),\n@@ -1387,12 +1389,13 @@ fn print_disambiguation_help(\n     trait_name: String,\n     rcvr_ty: Ty<'_>,\n     kind: ty::AssocKind,\n+    def_id: DefId,\n     span: Span,\n     candidate: Option<usize>,\n     source_map: &source_map::SourceMap,\n ) {\n     let mut applicability = Applicability::MachineApplicable;\n-    let sugg_args = if let (ty::AssocKind::Method, Some(args)) = (kind, args) {\n+    let sugg_args = if let (ty::AssocKind::Fn, Some(args)) = (kind, args) {\n         format!(\n             \"({}{})\",\n             if rcvr_ty.is_region_ptr() {\n@@ -1416,7 +1419,7 @@ fn print_disambiguation_help(\n         span,\n         &format!(\n             \"disambiguate the {} for {}\",\n-            kind.suggestion_descr(),\n+            kind.as_def_kind().descr(def_id),\n             if let Some(candidate) = candidate {\n                 format!(\"candidate #{}\", candidate)\n             } else {"}, {"sha": "2db397d5c7437004e68e01978b85f9548fcc823e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -1903,7 +1903,7 @@ fn check_specialization_validity<'tcx>(\n ) {\n     let kind = match impl_item.kind {\n         hir::ImplItemKind::Const(..) => ty::AssocKind::Const,\n-        hir::ImplItemKind::Fn(..) => ty::AssocKind::Method,\n+        hir::ImplItemKind::Fn(..) => ty::AssocKind::Fn,\n         hir::ImplItemKind::OpaqueTy(..) => ty::AssocKind::OpaqueTy,\n         hir::ImplItemKind::TyAlias(_) => ty::AssocKind::Type,\n     };\n@@ -2049,7 +2049,7 @@ fn check_impl_items_against_trait<'tcx>(\n                 }\n                 hir::ImplItemKind::Fn(..) => {\n                     let opt_trait_span = tcx.hir().span_if_local(ty_trait_item.def_id);\n-                    if ty_trait_item.kind == ty::AssocKind::Method {\n+                    if ty_trait_item.kind == ty::AssocKind::Fn {\n                         compare_impl_method(\n                             tcx,\n                             &ty_impl_item,\n@@ -2295,7 +2295,7 @@ fn fn_sig_suggestion(\n /// structured suggestion.\n fn suggestion_signature(assoc: &ty::AssocItem, tcx: TyCtxt<'_>) -> String {\n     match assoc.kind {\n-        ty::AssocKind::Method => {\n+        ty::AssocKind::Fn => {\n             // We skip the binder here because the binder would deanonymize all\n             // late-bound regions, and we don't want method signatures to show up\n             // `as for<'r> fn(&'r MyType)`.  Pretty-printing handles late-bound"}, {"sha": "32004744ff950bfa67a4c731c291ba6c716fb710", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -294,7 +294,7 @@ fn check_associated_item(\n                 let ty = fcx.normalize_associated_types_in(span, &ty);\n                 fcx.register_wf_obligation(ty, span, code.clone());\n             }\n-            ty::AssocKind::Method => {\n+            ty::AssocKind::Fn => {\n                 let sig = fcx.tcx.fn_sig(item.def_id);\n                 let sig = fcx.normalize_associated_types_in(span, &sig);\n                 let hir_sig = sig_if_method.expect(\"bad signature for method\");\n@@ -985,7 +985,7 @@ fn check_method_receiver<'fcx, 'tcx>(\n     // Check that the method has a valid receiver type, given the type `Self`.\n     debug!(\"check_method_receiver({:?}, self_ty={:?})\", method, self_ty);\n \n-    if !method.method_has_self_argument {\n+    if !method.fn_has_self_parameter {\n         return;\n     }\n "}, {"sha": "43fea82608ef4a1694861e5c70f2a0c2cd375ae3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -2583,7 +2583,7 @@ fn should_inherit_track_caller(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n                     .associated_items(trait_def_id)\n                     .filter_by_name_unhygienic(impl_item.ident.name)\n                     .find(move |trait_item| {\n-                        trait_item.kind == ty::AssocKind::Method\n+                        trait_item.kind == ty::AssocKind::Fn\n                             && tcx.hygienic_eq(impl_item.ident, trait_item.ident, trait_def_id)\n                     })\n                 {"}, {"sha": "319f32385137203ad50e4349fd8ce4789d5fd4e7", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -147,7 +147,7 @@ fn enforce_impl_params_are_constrained(\n                     let predicates = tcx.predicates_of(def_id).instantiate_identity(tcx);\n                     cgp::parameters_for(&predicates, true)\n                 }\n-                ty::AssocKind::Method | ty::AssocKind::Const => Vec::new(),\n+                ty::AssocKind::Fn | ty::AssocKind::Const => Vec::new(),\n             }\n         })\n         .collect();"}, {"sha": "0f52feda2a303a76835e45dd0284aa8a4fa87cfd", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -1174,14 +1174,14 @@ impl Clean<Item> for ty::AssocItem {\n                 };\n                 AssocConstItem(ty.clean(cx), default)\n             }\n-            ty::AssocKind::Method => {\n+            ty::AssocKind::Fn => {\n                 let generics =\n                     (cx.tcx.generics_of(self.def_id), cx.tcx.explicit_predicates_of(self.def_id))\n                         .clean(cx);\n                 let sig = cx.tcx.fn_sig(self.def_id);\n                 let mut decl = (self.def_id, sig).clean(cx);\n \n-                if self.method_has_self_argument {\n+                if self.fn_has_self_parameter {\n                     let self_ty = match self.container {\n                         ty::ImplContainer(def_id) => cx.tcx.type_of(def_id),\n                         ty::TraitContainer(_) => cx.tcx.types.self_param,"}, {"sha": "1821635bde48fddc70f6fb11f8358dee9da10cf3", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -209,7 +209,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     .filter_by_name_unhygienic(item_name)\n                     .next()\n                     .and_then(|item| match item.kind {\n-                        ty::AssocKind::Method => Some(\"method\"),\n+                        ty::AssocKind::Fn => Some(\"method\"),\n                         _ => None,\n                     })\n                     .map(|out| (prim, Some(format!(\"{}#{}.{}\", path, out, item_name))))\n@@ -238,12 +238,12 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         .find(|item| item.ident.name == item_name);\n                     if let Some(item) = item {\n                         let out = match item.kind {\n-                            ty::AssocKind::Method if ns == ValueNS => \"method\",\n+                            ty::AssocKind::Fn if ns == ValueNS => \"method\",\n                             ty::AssocKind::Const if ns == ValueNS => \"associatedconstant\",\n                             _ => return self.variant_field(path_str, current_item, module_id),\n                         };\n                         if extra_fragment.is_some() {\n-                            Err(ErrorKind::AnchorFailure(if item.kind == ty::AssocKind::Method {\n+                            Err(ErrorKind::AnchorFailure(if item.kind == ty::AssocKind::Fn {\n                                 \"methods cannot be followed by anchors\"\n                             } else {\n                                 \"associated constants cannot be followed by anchors\"\n@@ -298,14 +298,15 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         .map(|item| cx.tcx.associated_item(*item))\n                         .find(|item| item.ident.name == item_name);\n                     if let Some(item) = item {\n-                        let kind = match item.kind {\n-                            ty::AssocKind::Const if ns == ValueNS => \"associatedconstant\",\n-                            ty::AssocKind::Type if ns == TypeNS => \"associatedtype\",\n-                            ty::AssocKind::Method if ns == ValueNS => {\n-                                if item.defaultness.has_value() { \"method\" } else { \"tymethod\" }\n-                            }\n-                            _ => return self.variant_field(path_str, current_item, module_id),\n-                        };\n+                        let kind =\n+                            match item.kind {\n+                                ty::AssocKind::Const if ns == ValueNS => \"associatedconstant\",\n+                                ty::AssocKind::Type if ns == TypeNS => \"associatedtype\",\n+                                ty::AssocKind::Fn if ns == ValueNS => {\n+                                    if item.defaultness.has_value() { \"method\" } else { \"tymethod\" }\n+                                }\n+                                _ => return self.variant_field(path_str, current_item, module_id),\n+                            };\n \n                         if extra_fragment.is_some() {\n                             Err(ErrorKind::AnchorFailure(if item.kind == ty::AssocKind::Const {"}, {"sha": "471512ca8f72ceb69ad59a805edb0f5634c3ff88", "filename": "src/test/ui/error-codes/E0034.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in an impl of the trait `Trait2` for the type `Tes\n    |\n LL |     fn foo() {}\n    |     ^^^^^^^^\n-help: disambiguate the method call for candidate #1\n+help: disambiguate the associated function for candidate #1\n    |\n LL |     Trait1::foo()\n    |     ^^^^^^^^^^^\n-help: disambiguate the method call for candidate #2\n+help: disambiguate the associated function for candidate #2\n    |\n LL |     Trait2::foo()\n    |     ^^^^^^^^^^^"}, {"sha": "e23b934ac187f72a2a406c714659449aa70c1f77", "filename": "src/test/ui/inference/inference_unstable_featured.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Finference%2Finference_unstable_featured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Finference%2Finference_unstable_featured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finference_unstable_featured.stderr?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -6,11 +6,11 @@ LL |     assert_eq!('x'.ipu_flatten(), 0);\n    |\n    = note: candidate #1 is defined in an impl of the trait `inference_unstable_iterator::IpuIterator` for the type `char`\n    = note: candidate #2 is defined in an impl of the trait `inference_unstable_itertools::IpuItertools` for the type `char`\n-help: disambiguate the method call for candidate #1\n+help: disambiguate the associated function for candidate #1\n    |\n LL |     assert_eq!(inference_unstable_iterator::IpuIterator::ipu_flatten(&'x'), 0);\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #2\n+help: disambiguate the associated function for candidate #2\n    |\n LL |     assert_eq!(inference_unstable_itertools::IpuItertools::ipu_flatten(&'x'), 0);\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "11c8cfdcf66a5ff2f4bb8bf58b3825d77d598d5f", "filename": "src/test/ui/issues/issue-18446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fissues%2Fissue-18446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fissues%2Fissue-18446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-18446.stderr?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -5,7 +5,7 @@ LL |     x.foo();\n    |     --^^^--\n    |     | |\n    |     | multiple `foo` found\n-   |     help: disambiguate the method call for candidate #2: `T::foo(&x)`\n+   |     help: disambiguate the associated function for candidate #2: `T::foo(&x)`\n    |\n note: candidate #1 is defined in an impl for the type `(dyn T + 'a)`\n   --> $DIR/issue-18446.rs:9:5"}, {"sha": "6d8d17292f2d1758a8103968e3f94f4e6dc82586", "filename": "src/test/ui/issues/issue-3702-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fissues%2Fissue-3702-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fissues%2Fissue-3702-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3702-2.stderr?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in an impl of the trait `Add` for the type `isize`\n    |\n LL |     fn to_int(&self) -> isize { *self }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #1\n+help: disambiguate the associated function for candidate #1\n    |\n LL |         ToPrimitive::to_int(&self) + other.to_int()\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #2\n+help: disambiguate the associated function for candidate #2\n    |\n LL |         Add::to_int(&self) + other.to_int()\n    |         ^^^^^^^^^^^^^^^^^^"}, {"sha": "83d8770b2e03b07e00342abed1c63c5f5d847b6b", "filename": "src/test/ui/issues/issue-65634-raw-ident-suggestion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-65634-raw-ident-suggestion.stderr?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in an impl of the trait `await` for the type `r#fn\n    |\n LL |     fn r#struct(&self) {\n    |     ^^^^^^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #1\n+help: disambiguate the associated function for candidate #1\n    |\n LL |     async::r#struct(&r#fn {});\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #2\n+help: disambiguate the associated function for candidate #2\n    |\n LL |     await::r#struct(&r#fn {});\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1b354fc697adc93c9c67caad69054e60945e78f3", "filename": "src/test/ui/methods/method-ambig-two-traits-cross-crate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -10,11 +10,11 @@ note: candidate #1 is defined in an impl of the trait `Me2` for the type `usize`\n LL | impl Me2 for usize { fn me(&self) -> usize { *self } }\n    |                      ^^^^^^^^^^^^^^^^^^^^^\n    = note: candidate #2 is defined in an impl of the trait `ambig_impl_2_lib::Me` for the type `usize`\n-help: disambiguate the method call for candidate #1\n+help: disambiguate the associated function for candidate #1\n    |\n LL | fn main() { Me2::me(&1_usize); }\n    |             ^^^^^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #2\n+help: disambiguate the associated function for candidate #2\n    |\n LL | fn main() { ambig_impl_2_lib::Me::me(&1_usize); }\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5cbed652b0a40a30555060e95a8f3754473f36f3", "filename": "src/test/ui/methods/method-ambig-two-traits-from-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-bounds.stderr?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in the trait `B`\n    |\n LL | trait B { fn foo(&self); }\n    |           ^^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #1\n+help: disambiguate the associated function for candidate #1\n    |\n LL |     A::foo(t);\n    |     ^^^^^^^^^\n-help: disambiguate the method call for candidate #2\n+help: disambiguate the associated function for candidate #2\n    |\n LL |     B::foo(t);\n    |     ^^^^^^^^^"}, {"sha": "8585929934e31c8a21209e5e1741aa668e9a40dd", "filename": "src/test/ui/methods/method-ambig-two-traits-from-impls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls.stderr?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in an impl of the trait `B` for the type `AB`\n    |\n LL |     fn foo(self) {}\n    |     ^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #1\n+help: disambiguate the associated function for candidate #1\n    |\n LL |     A::foo(AB {});\n    |     ^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #2\n+help: disambiguate the associated function for candidate #2\n    |\n LL |     B::foo(AB {});\n    |     ^^^^^^^^^^^^^"}, {"sha": "85b39647885909a538de562977a5a3c18a8ae30e", "filename": "src/test/ui/methods/method-ambig-two-traits-from-impls2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in an impl of the trait `B` for the type `AB`\n    |\n LL |     fn foo() {}\n    |     ^^^^^^^^\n-help: disambiguate the method call for candidate #1\n+help: disambiguate the associated function for candidate #1\n    |\n LL |     A::foo();\n    |     ^^^^^^\n-help: disambiguate the method call for candidate #2\n+help: disambiguate the associated function for candidate #2\n    |\n LL |     B::foo();\n    |     ^^^^^^"}, {"sha": "4ce7236ed96c584a512616975536c119ca9cc62d", "filename": "src/test/ui/methods/method-ambig-two-traits-with-default-method.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-with-default-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-with-default-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-with-default-method.stderr?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in an impl of the trait `Bar` for the type `usize`\n    |\n LL | trait Bar { fn method(&self) {} }\n    |             ^^^^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #1\n+help: disambiguate the associated function for candidate #1\n    |\n LL |     Foo::method(&1_usize);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #2\n+help: disambiguate the associated function for candidate #2\n    |\n LL |     Bar::method(&1_usize);\n    |     ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1bc7f30d04d0d7476e9719e3eedbcb845d6715ac", "filename": "src/test/ui/methods/method-deref-to-same-trait-object-with-separate-params.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-deref-to-same-trait-object-with-separate-params.stderr?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -35,15 +35,15 @@ note: candidate #3 is defined in the trait `FinalFoo`\n    |\n LL |     fn foo(&self) -> u8;\n    |     ^^^^^^^^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #1\n+help: disambiguate the associated function for candidate #1\n    |\n LL |     let z = internal::X::foo(x);\n    |             ^^^^^^^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #2\n+help: disambiguate the associated function for candidate #2\n    |\n LL |     let z = nuisance_foo::NuisanceFoo::foo(x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #3\n+help: disambiguate the associated function for candidate #3\n    |\n LL |     let z = FinalFoo::foo(x);\n    |             ^^^^^^^^^^^^^^^^"}, {"sha": "fc6c556c16d888a7e68b55086835b554ab69cdc3", "filename": "src/test/ui/span/issue-37767.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fspan%2Fissue-37767.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fspan%2Fissue-37767.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-37767.stderr?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in the trait `B`\n    |\n LL |     fn foo(&mut self) {}\n    |     ^^^^^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #1\n+help: disambiguate the associated function for candidate #1\n    |\n LL |     A::foo(&a)\n    |     ^^^^^^^^^^\n-help: disambiguate the method call for candidate #2\n+help: disambiguate the associated function for candidate #2\n    |\n LL |     B::foo(&a)\n    |     ^^^^^^^^^^\n@@ -39,11 +39,11 @@ note: candidate #2 is defined in the trait `D`\n    |\n LL |     fn foo(&self) {}\n    |     ^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #1\n+help: disambiguate the associated function for candidate #1\n    |\n LL |     C::foo(&a)\n    |     ^^^^^^^^^^\n-help: disambiguate the method call for candidate #2\n+help: disambiguate the associated function for candidate #2\n    |\n LL |     D::foo(&a)\n    |     ^^^^^^^^^^\n@@ -64,11 +64,11 @@ note: candidate #2 is defined in the trait `F`\n    |\n LL |     fn foo(self) {}\n    |     ^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #1\n+help: disambiguate the associated function for candidate #1\n    |\n LL |     E::foo(a)\n    |     ^^^^^^^^^\n-help: disambiguate the method call for candidate #2\n+help: disambiguate the associated function for candidate #2\n    |\n LL |     F::foo(a)\n    |     ^^^^^^^^^"}, {"sha": "16a1ac6d71814c8381b1eadfab05c97cda53cdf2", "filename": "src/test/ui/span/issue-7575.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-7575.stderr?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -25,15 +25,15 @@ LL |     fn f9(_: usize) -> usize;\n            candidate #1: `CtxtFn`\n            candidate #2: `OtherTrait`\n            candidate #3: `UnusedTrait`\n-help: disambiguate the method call for candidate #1\n+help: disambiguate the associated function for candidate #1\n    |\n LL |     u.f8(42) + CtxtFn::f9(u, 342) + m.fff(42)\n    |                ^^^^^^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #2\n+help: disambiguate the associated function for candidate #2\n    |\n LL |     u.f8(42) + OtherTrait::f9(u, 342) + m.fff(42)\n    |                ^^^^^^^^^^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #3\n+help: disambiguate the associated function for candidate #3\n    |\n LL |     u.f8(42) + UnusedTrait::f9(u, 342) + m.fff(42)\n    |                ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -64,7 +64,7 @@ LL |     t.is_str()\n    |     --^^^^^^--\n    |     | |\n    |     | this is an associated function, not a method\n-   |     help: disambiguate the method call for the candidate: `ManyImplTrait::is_str(t)`\n+   |     help: disambiguate the associated function for the candidate: `ManyImplTrait::is_str(t)`\n    |\n    = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n note: the candidate is defined in the trait `ManyImplTrait`"}, {"sha": "7c00bb5207bdfdff9a53a7a442d12c193175638f", "filename": "src/test/ui/traits/trait-alias-ambiguous.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-ambiguous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/513a6473d69b3af34e6cdaa4efb288fe5283c3e9/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-ambiguous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-ambiguous.stderr?ref=513a6473d69b3af34e6cdaa4efb288fe5283c3e9", "patch": "@@ -14,11 +14,11 @@ note: candidate #2 is defined in an impl of the trait `inner::B` for the type `u\n    |\n LL |         fn foo(&self) {}\n    |         ^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #1\n+help: disambiguate the associated function for candidate #1\n    |\n LL |     inner::A::foo(&t);\n    |     ^^^^^^^^^^^^^^^^^\n-help: disambiguate the method call for candidate #2\n+help: disambiguate the associated function for candidate #2\n    |\n LL |     inner::B::foo(&t);\n    |     ^^^^^^^^^^^^^^^^^"}]}