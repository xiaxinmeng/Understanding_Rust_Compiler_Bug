{"sha": "bf67fcf5a964e4c25a69148fdb49f1348108d6d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNjdmY2Y1YTk2NGU0YzI1YTY5MTQ4ZmRiNDlmMTM0ODEwOGQ2ZDE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-02T02:48:06Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-02T02:48:06Z"}, "message": "Move `is_normalizable` into utils", "tree": {"sha": "1237506489e5a77384adbf71eac0997fbdb2c0e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1237506489e5a77384adbf71eac0997fbdb2c0e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf67fcf5a964e4c25a69148fdb49f1348108d6d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf67fcf5a964e4c25a69148fdb49f1348108d6d1", "html_url": "https://github.com/rust-lang/rust/commit/bf67fcf5a964e4c25a69148fdb49f1348108d6d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf67fcf5a964e4c25a69148fdb49f1348108d6d1/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20318e00ef4254a55cd9d2240c86bff2fb695a7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/20318e00ef4254a55cd9d2240c86bff2fb695a7a", "html_url": "https://github.com/rust-lang/rust/commit/20318e00ef4254a55cd9d2240c86bff2fb695a7a"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "b6ae611da12bbf6c781a1f479c61ee3e090ea631", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bf67fcf5a964e4c25a69148fdb49f1348108d6d1/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf67fcf5a964e4c25a69148fdb49f1348108d6d1/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=bf67fcf5a964e4c25a69148fdb49f1348108d6d1", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then, sugg};\n+use crate::utils::{\n+    is_normalizable, last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then, sugg,\n+};\n use if_chain::if_chain;\n use rustc::declare_lint_pass;\n use rustc::hir::*;\n@@ -641,12 +643,7 @@ fn get_type_snippet(cx: &LateContext<'_, '_>, path: &QPath<'_>, to_ref_ty: Ty<'_\n fn is_layout_incompatible<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, from: Ty<'tcx>, to: Ty<'tcx>) -> bool {\n     let empty_param_env = ty::ParamEnv::empty();\n     // check if `from` and `to` are normalizable to avoid ICE (#4968)\n-    let is_normalizable = cx.tcx.infer_ctxt().enter(|infcx| {\n-        let cause = rustc::traits::ObligationCause::dummy();\n-        infcx.at(&cause, empty_param_env).normalize(&from).is_ok()\n-            && infcx.at(&cause, empty_param_env).normalize(&to).is_ok()\n-    });\n-    if !is_normalizable {\n+    if !(is_normalizable(cx, empty_param_env, from) && is_normalizable(cx, empty_param_env, to)) {\n         return false;\n     }\n     let from_ty_layout = cx.tcx.layout_of(empty_param_env.and(from));"}, {"sha": "0680f627bbb6b6490fdd379e4e12f3b0991becbd", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bf67fcf5a964e4c25a69148fdb49f1348108d6d1/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf67fcf5a964e4c25a69148fdb49f1348108d6d1/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=bf67fcf5a964e4c25a69148fdb49f1348108d6d1", "patch": "@@ -1111,6 +1111,15 @@ pub fn match_function_call<'a, 'tcx>(\n     None\n }\n \n+/// Checks if `Ty` is normalizable. This function is useful\n+/// to avoid crashes on `layout_of`.\n+pub fn is_normalizable<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, param_env: ty::ParamEnv<'tcx>, ty: Ty<'tcx>) -> bool {\n+    cx.tcx.infer_ctxt().enter(|infcx| {\n+        let cause = rustc::traits::ObligationCause::dummy();\n+        infcx.at(&cause, param_env).normalize(&ty).is_ok()\n+    })\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{trim_multiline, without_block_comments};"}]}