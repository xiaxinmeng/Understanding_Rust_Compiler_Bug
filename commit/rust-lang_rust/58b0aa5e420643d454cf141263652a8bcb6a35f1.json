{"sha": "58b0aa5e420643d454cf141263652a8bcb6a35f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YjBhYTVlNDIwNjQzZDQ1NGNmMTQxMjYzNjUyYThiY2I2YTM1ZjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-11T23:21:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-11T23:21:19Z"}, "message": "Auto merge of #27584 - TimNN:macro-eof-span, r=huonw\n\nThe ideas is to use the span of the complete macro invocation if the span of a macro error is `DUMMY_SP`.\r\n\r\nfixes #7970", "tree": {"sha": "8f03280953abf3c01c9b07da94deb3b7dd57543b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f03280953abf3c01c9b07da94deb3b7dd57543b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58b0aa5e420643d454cf141263652a8bcb6a35f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58b0aa5e420643d454cf141263652a8bcb6a35f1", "html_url": "https://github.com/rust-lang/rust/commit/58b0aa5e420643d454cf141263652a8bcb6a35f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58b0aa5e420643d454cf141263652a8bcb6a35f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcdcc6f6bcfc418fd828dcdc3f792d9b4edbb658", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcdcc6f6bcfc418fd828dcdc3f792d9b4edbb658", "html_url": "https://github.com/rust-lang/rust/commit/dcdcc6f6bcfc418fd828dcdc3f792d9b4edbb658"}, {"sha": "d46e84081f88f22198fbfcd5221faaf922e0500d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d46e84081f88f22198fbfcd5221faaf922e0500d", "html_url": "https://github.com/rust-lang/rust/commit/d46e84081f88f22198fbfcd5221faaf922e0500d"}], "stats": {"total": 83, "additions": 54, "deletions": 29}, "files": [{"sha": "1f79db9e5232bd37806ec352adcaa3a1014e4f28", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58b0aa5e420643d454cf141263652a8bcb6a35f1/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b0aa5e420643d454cf141263652a8bcb6a35f1/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=58b0aa5e420643d454cf141263652a8bcb6a35f1", "patch": "@@ -29,7 +29,7 @@ use middle::ty::{self, ToPredicate, HasTypeFlags, ToPolyTraitRef, TraitRef};\n use middle::ty_fold::TypeFoldable;\n use std::collections::HashMap;\n use std::fmt;\n-use syntax::codemap::{DUMMY_SP, Span};\n+use syntax::codemap::Span;\n use syntax::attr::{AttributeMethods, AttrMetaMethods};\n \n pub fn report_fulfillment_errors<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n@@ -81,11 +81,7 @@ fn report_on_unimplemented<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n     let mut report = None;\n     for item in infcx.tcx.get_attrs(def_id).iter() {\n         if item.check_name(\"rustc_on_unimplemented\") {\n-            let err_sp = if item.meta().span == DUMMY_SP {\n-                span\n-            } else {\n-                item.meta().span\n-            };\n+            let err_sp = item.meta().span.substitute_dummy(span);\n             let def = infcx.tcx.lookup_trait_def(def_id);\n             let trait_str = def.trait_ref.to_string();\n             if let Some(ref istring) = item.value_str() {"}, {"sha": "0aeb572b6bcf62e1ef254e164c1154ac6b9bc0b7", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58b0aa5e420643d454cf141263652a8bcb6a35f1/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b0aa5e420643d454cf141263652a8bcb6a35f1/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=58b0aa5e420643d454cf141263652a8bcb6a35f1", "patch": "@@ -135,6 +135,13 @@ pub const COMMAND_LINE_SP: Span = Span { lo: BytePos(0),\n                                          hi: BytePos(0),\n                                          expn_id: COMMAND_LINE_EXPN };\n \n+impl Span {\n+    /// Returns `self` if `self` is not the dummy span, and `other` otherwise.\n+    pub fn substitute_dummy(self, other: Span) -> Span {\n+        if self == DUMMY_SP { other } else { self }\n+    }\n+}\n+\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub struct Spanned<T> {\n     pub node: T,"}, {"sha": "26b4181ea8a66bb4f4dd79cf019c113a09285479", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/58b0aa5e420643d454cf141263652a8bcb6a35f1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b0aa5e420643d454cf141263652a8bcb6a35f1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=58b0aa5e420643d454cf141263652a8bcb6a35f1", "patch": "@@ -249,22 +249,6 @@ pub enum ParseResult<T> {\n pub type NamedParseResult = ParseResult<HashMap<Ident, Rc<NamedMatch>>>;\n pub type PositionalParseResult = ParseResult<Vec<Rc<NamedMatch>>>;\n \n-pub fn parse_or_else(sess: &ParseSess,\n-                     cfg: ast::CrateConfig,\n-                     rdr: TtReader,\n-                     ms: Vec<TokenTree> )\n-                     -> HashMap<Ident, Rc<NamedMatch>> {\n-    match parse(sess, cfg, rdr, &ms[..]) {\n-        Success(m) => m,\n-        Failure(sp, str) => {\n-            panic!(sess.span_diagnostic.span_fatal(sp, &str[..]))\n-        }\n-        Error(sp, str) => {\n-            panic!(sess.span_diagnostic.span_fatal(sp, &str[..]))\n-        }\n-    }\n-}\n-\n /// Perform a token equality check, ignoring syntax context (that is, an\n /// unhygienic comparison)\n pub fn token_name_eq(t1 : &Token, t2 : &Token) -> bool {"}, {"sha": "d728fa59bd1df3e02aa2047b5ea49d5ea367feeb", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/58b0aa5e420643d454cf141263652a8bcb6a35f1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b0aa5e420643d454cf141263652a8bcb6a35f1/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=58b0aa5e420643d454cf141263652a8bcb6a35f1", "patch": "@@ -14,7 +14,7 @@ use ext::base::{ExtCtxt, MacResult, SyntaxExtension};\n use ext::base::{NormalTT, TTMacroExpander};\n use ext::tt::macro_parser::{Success, Error, Failure};\n use ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n-use ext::tt::macro_parser::{parse, parse_or_else};\n+use ext::tt::macro_parser::parse;\n use parse::lexer::new_tt_reader;\n use parse::parser::Parser;\n use parse::token::{self, special_idents, gensym_ident, NtTT, Token};\n@@ -211,13 +211,16 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                 best_fail_spot = sp;\n                 best_fail_msg = (*msg).clone();\n               },\n-              Error(sp, ref msg) => panic!(cx.span_fatal(sp, &msg[..]))\n+              Error(err_sp, ref msg) => {\n+                panic!(cx.span_fatal(err_sp.substitute_dummy(sp), &msg[..]))\n+              }\n             }\n           }\n           _ => cx.bug(\"non-matcher found in parsed lhses\")\n         }\n     }\n-    panic!(cx.span_fatal(best_fail_spot, &best_fail_msg[..]));\n+\n+    panic!(cx.span_fatal(best_fail_spot.substitute_dummy(sp), &best_fail_msg[..]));\n }\n \n // Note that macro-by-example's input is also matched against a token tree:\n@@ -266,10 +269,17 @@ pub fn compile<'cx>(cx: &'cx mut ExtCtxt,\n                                    None,\n                                    None,\n                                    def.body.clone());\n-    let argument_map = parse_or_else(cx.parse_sess(),\n-                                     cx.cfg(),\n-                                     arg_reader,\n-                                     argument_gram);\n+\n+    let argument_map = match parse(cx.parse_sess(),\n+                                   cx.cfg(),\n+                                   arg_reader,\n+                                   &argument_gram) {\n+        Success(m) => m,\n+        Failure(sp, str) | Error(sp, str) => {\n+            panic!(cx.parse_sess().span_diagnostic\n+                     .span_fatal(sp.substitute_dummy(def.span), &str[..]));\n+        }\n+    };\n \n     // Extract the arguments:\n     let lhses = match **argument_map.get(&lhs_nm).unwrap() {"}, {"sha": "114db74f42048a9660773948278ee8c63f60f038", "filename": "src/test/compile-fail/issue-7970a.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/58b0aa5e420643d454cf141263652a8bcb6a35f1/src%2Ftest%2Fcompile-fail%2Fissue-7970a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b0aa5e420643d454cf141263652a8bcb6a35f1/src%2Ftest%2Fcompile-fail%2Fissue-7970a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7970a.rs?ref=58b0aa5e420643d454cf141263652a8bcb6a35f1", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    println!();\n+    //~^ ERROR unexpected end of macro invocation\n+}"}, {"sha": "0cff90f281b9016626522229be70436cb8d74e44", "filename": "src/test/compile-fail/issue-7970b.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/58b0aa5e420643d454cf141263652a8bcb6a35f1/src%2Ftest%2Fcompile-fail%2Fissue-7970b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58b0aa5e420643d454cf141263652a8bcb6a35f1/src%2Ftest%2Fcompile-fail%2Fissue-7970b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7970b.rs?ref=58b0aa5e420643d454cf141263652a8bcb6a35f1", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}\n+\n+macro_rules! test {}\n+//~^ ERROR unexpected end of macro invocation"}]}