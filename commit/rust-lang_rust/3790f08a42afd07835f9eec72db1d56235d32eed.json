{"sha": "3790f08a42afd07835f9eec72db1d56235d32eed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OTBmMDhhNDJhZmQwNzgzNWY5ZWVjNzJkYjFkNTYyMzVkMzJlZWQ=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-30T14:06:49Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-12-27T18:21:16Z"}, "message": "Fix `tcx.environment` for inherent impls", "tree": {"sha": "5f9aca92707aa0b5c70d792cbf20e8b5627ad2d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f9aca92707aa0b5c70d792cbf20e8b5627ad2d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3790f08a42afd07835f9eec72db1d56235d32eed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3790f08a42afd07835f9eec72db1d56235d32eed", "html_url": "https://github.com/rust-lang/rust/commit/3790f08a42afd07835f9eec72db1d56235d32eed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3790f08a42afd07835f9eec72db1d56235d32eed/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e2bdaacac450695d62a34365803845378bc9121", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e2bdaacac450695d62a34365803845378bc9121", "html_url": "https://github.com/rust-lang/rust/commit/8e2bdaacac450695d62a34365803845378bc9121"}], "stats": {"total": 79, "additions": 48, "deletions": 31}, "files": [{"sha": "962a145814c8b53028c36f2e5e5069431c97abf3", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 48, "deletions": 31, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/3790f08a42afd07835f9eec72db1d56235d32eed/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3790f08a42afd07835f9eec72db1d56235d32eed/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=3790f08a42afd07835f9eec72db1d56235d32eed", "patch": "@@ -216,56 +216,73 @@ crate fn environment<'a, 'tcx>(\n     let node_id = tcx.hir().as_local_node_id(def_id).unwrap();\n     let node = tcx.hir().get(node_id);\n \n-    let mut is_fn = false;\n-    let mut is_impl = false;\n-    match node {\n+    enum NodeKind {\n+        TraitImpl,\n+        InherentImpl,\n+        Fn,\n+        Other,\n+    };\n+\n+    let node_kind = match node {\n         Node::TraitItem(item) => match item.node {\n-            TraitItemKind::Method(..) => is_fn = true,\n-            _ => (),\n+            TraitItemKind::Method(..) => NodeKind::Fn,\n+            _ => NodeKind::Other,\n         }\n \n         Node::ImplItem(item) => match item.node {\n-            ImplItemKind::Method(..) => is_fn = true,\n-            _ => (),\n+            ImplItemKind::Method(..) => NodeKind::Fn,\n+            _ => NodeKind::Other,\n         }\n \n         Node::Item(item) => match item.node {\n-            ItemKind::Impl(..) => is_impl = true,\n-            ItemKind::Fn(..) => is_fn = true,\n-            _ => (),\n+            ItemKind::Impl(.., Some(..), _, _) => NodeKind::TraitImpl,\n+            ItemKind::Impl(.., None, _, _) => NodeKind::InherentImpl,\n+            ItemKind::Fn(..) => NodeKind::Fn,\n+            _ => NodeKind::Other,\n         }\n \n         Node::ForeignItem(item) => match item.node {\n-            ForeignItemKind::Fn(..) => is_fn = true,\n-            _ => (),\n+            ForeignItemKind::Fn(..) => NodeKind::Fn,\n+            _ => NodeKind::Other,\n         }\n \n         // FIXME: closures?\n-        _ => (),\n-    }\n+        _ => NodeKind::Other,\n+    };\n \n     let mut input_tys = FxHashSet::default();\n \n-    // In an impl, we assume that the header trait ref and all its constituents\n-    // are well-formed.\n-    if is_impl {\n-        let trait_ref = tcx.impl_trait_ref(def_id)\n-            .expect(\"not an impl\");\n+    match node_kind {\n+        // In a trait impl, we assume that the header trait ref and all its\n+        // constituents are well-formed.\n+        NodeKind::TraitImpl => {\n+            let trait_ref = tcx.impl_trait_ref(def_id)\n+                .expect(\"not an impl\");\n \n-        input_tys.extend(\n-            trait_ref.input_types().flat_map(|ty| ty.walk())\n-        );\n-    }\n+            input_tys.extend(\n+                trait_ref.input_types().flat_map(|ty| ty.walk())\n+            );\n+        }\n \n-    // In an fn, we assume that the arguments and all their constituents are\n-    // well-formed.\n-    if is_fn {\n-        let fn_sig = tcx.fn_sig(def_id);\n-        let fn_sig = tcx.liberate_late_bound_regions(def_id, &fn_sig);\n+        // In an inherent impl, we assume that the receiver type and all its\n+        // constituents are well-formed.\n+        NodeKind::InherentImpl => {\n+            let self_ty = tcx.type_of(def_id);\n+            input_tys.extend(self_ty.walk());\n+        }\n \n-        input_tys.extend(\n-            fn_sig.inputs().iter().flat_map(|ty| ty.walk())\n-        );\n+        // In an fn, we assume that the arguments and all their constituents are\n+        // well-formed.\n+        NodeKind::Fn => {\n+            let fn_sig = tcx.fn_sig(def_id);\n+            let fn_sig = tcx.liberate_late_bound_regions(def_id, &fn_sig);\n+\n+            input_tys.extend(\n+                fn_sig.inputs().iter().flat_map(|ty| ty.walk())\n+            );\n+        }\n+\n+        NodeKind::Other => (),\n     }\n \n     let clauses = clauses.chain("}]}