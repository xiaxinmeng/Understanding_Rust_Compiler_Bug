{"sha": "6030428fd22912afeeaecfcc0220e979c2ffeb0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMzA0MjhmZDIyOTEyYWZlZWFlY2ZjYzAyMjBlOTc5YzJmZmViMGE=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-07-14T20:10:15Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-07-14T20:50:59Z"}, "message": "Use diagnostic items for `Into`, `IntoIterator`, `LinkedList`, `ptr::null`, `prt::null_mut`", "tree": {"sha": "b1f6d3fd65014a76efbedf46bdd327bfa3103005", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1f6d3fd65014a76efbedf46bdd327bfa3103005"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6030428fd22912afeeaecfcc0220e979c2ffeb0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6030428fd22912afeeaecfcc0220e979c2ffeb0a", "html_url": "https://github.com/rust-lang/rust/commit/6030428fd22912afeeaecfcc0220e979c2ffeb0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6030428fd22912afeeaecfcc0220e979c2ffeb0a/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ac21889bcc0634eabd1ff36491042fd0dae003f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ac21889bcc0634eabd1ff36491042fd0dae003f", "html_url": "https://github.com/rust-lang/rust/commit/2ac21889bcc0634eabd1ff36491042fd0dae003f"}], "stats": {"total": 71, "additions": 45, "deletions": 26}, "files": [{"sha": "48316c3a61df00c1a509704bc531b0d9daaab183", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=6030428fd22912afeeaecfcc0220e979c2ffeb0a", "patch": "@@ -1,11 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::paths::INTO;\n-use clippy_utils::{match_def_path, meets_msrv, msrvs};\n+use clippy_utils::{meets_msrv, msrvs};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n     /// **What it does:** Searches for implementations of the `Into<..>` trait and suggests to implement `From<..>` instead.\n@@ -62,7 +62,7 @@ impl LateLintPass<'_> for FromOverInto {\n         if_chain! {\n             if let hir::ItemKind::Impl{ .. } = &item.kind;\n             if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(item.def_id);\n-            if match_def_path(cx, impl_trait_ref.def_id, &INTO);\n+            if cx.tcx.is_diagnostic_item(sym::into_trait, impl_trait_ref.def_id);\n \n             then {\n                 span_lint_and_help("}, {"sha": "1bab0d99b695c3348e4d20ace42fb3fc6ee643ff", "filename": "clippy_lints/src/loops/explicit_into_iter_loop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs?ref=6030428fd22912afeeaecfcc0220e979c2ffeb0a", "patch": "@@ -1,16 +1,17 @@\n use super::EXPLICIT_INTO_ITER_LOOP;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_trait_method;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::{match_trait_method, paths};\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::TyS;\n+use rustc_span::symbol::sym;\n \n pub(super) fn check(cx: &LateContext<'_>, self_arg: &'hir Expr<'hir>, call_expr: &Expr<'_>) {\n     let self_ty = cx.typeck_results().expr_ty(self_arg);\n     let self_ty_adjusted = cx.typeck_results().expr_ty_adjusted(self_arg);\n-    if !(TyS::same_type(self_ty, self_ty_adjusted) && match_trait_method(cx, call_expr, &paths::INTO_ITERATOR)) {\n+    if !(TyS::same_type(self_ty, self_ty_adjusted) && is_trait_method(cx, call_expr, sym::IntoIterator)) {\n         return;\n     }\n "}, {"sha": "50bc096ba228cf3d0acb5436a3fac5a8a26dd25b", "filename": "clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=6030428fd22912afeeaecfcc0220e979c2ffeb0a", "patch": "@@ -1,8 +1,8 @@\n use super::EXPLICIT_ITER_LOOP;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_trait_method;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n-use clippy_utils::{match_trait_method, paths};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, Mutability};\n use rustc_lint::LateContext;\n@@ -12,7 +12,7 @@ use rustc_span::sym;\n pub(super) fn check(cx: &LateContext<'_>, self_arg: &Expr<'_>, arg: &Expr<'_>, method_name: &str) {\n     let should_lint = match method_name {\n         \"iter\" | \"iter_mut\" => is_ref_iterable_type(cx, self_arg),\n-        \"into_iter\" if match_trait_method(cx, arg, &paths::INTO_ITERATOR) => {\n+        \"into_iter\" if is_trait_method(cx, arg, sym::IntoIterator) => {\n             let receiver_ty = cx.typeck_results().expr_ty(self_arg);\n             let receiver_ty_adjusted = cx.typeck_results().expr_ty_adjusted(self_arg);\n             let ref_receiver_ty = cx.tcx.mk_ref(\n@@ -55,7 +55,7 @@ fn is_ref_iterable_type(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(e);\n     is_iterable_array(ty, cx) ||\n     is_type_diagnostic_item(cx, ty, sym::vec_type) ||\n-    match_type(cx, ty, &paths::LINKED_LIST) ||\n+    is_type_diagnostic_item(cx, ty, sym::LinkedList) ||\n     is_type_diagnostic_item(cx, ty, sym::hashmap_type) ||\n     is_type_diagnostic_item(cx, ty, sym::hashset_type) ||\n     is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||"}, {"sha": "e4f6aae7f82d6f8634f77e87dff7dd18fcb807e6", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=6030428fd22912afeeaecfcc0220e979c2ffeb0a", "patch": "@@ -1794,7 +1794,7 @@ mod redundant_pattern_match {\n             || is_type_diagnostic_item(cx, ty, sym::Arc)\n             || is_type_diagnostic_item(cx, ty, sym::cstring_type)\n             || is_type_diagnostic_item(cx, ty, sym::BTreeMap)\n-            || match_type(cx, ty, &paths::LINKED_LIST)\n+            || is_type_diagnostic_item(cx, ty, sym::LinkedList)\n             || match_type(cx, ty, &paths::WEAK_RC)\n             || match_type(cx, ty, &paths::WEAK_ARC)\n         {"}, {"sha": "b69f57f50e0f901f9a0a14cba3af196b49bcfc64", "filename": "clippy_lints/src/methods/iter_count.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=6030428fd22912afeeaecfcc0220e979c2ffeb0a", "patch": "@@ -1,8 +1,7 @@\n use super::utils::derefs_to_slice;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::paths;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n@@ -26,7 +25,7 @@ pub(crate) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, recv: &'tcx E\n         \"BTreeMap\"\n     } else if is_type_diagnostic_item(cx, ty, sym::BTreeSet) {\n         \"BTreeSet\"\n-    } else if match_type(cx, ty, &paths::LINKED_LIST) {\n+    } else if is_type_diagnostic_item(cx, ty, sym::LinkedList) {\n         \"LinkedList\"\n     } else if is_type_diagnostic_item(cx, ty, sym::BinaryHeap) {\n         \"BinaryHeap\""}, {"sha": "b15447622a8af922a00ef838130f26a701806b38", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=6030428fd22912afeeaecfcc0220e979c2ffeb0a", "patch": "@@ -4,7 +4,7 @@ use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_the\n use clippy_utils::ptr::get_spans;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{is_type_diagnostic_item, match_type, walk_ptrs_hir_ty};\n-use clippy_utils::{expr_path_res, is_lint_allowed, match_any_def_paths, paths};\n+use clippy_utils::{expr_path_res, is_lint_allowed, match_any_diagnostic_items, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{\n@@ -419,7 +419,7 @@ fn get_rptr_lm<'tcx>(ty: &'tcx Ty<'tcx>) -> Option<(&'tcx Lifetime, Mutability,\n fn is_null_path(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     if let ExprKind::Call(pathexp, []) = expr.kind {\n         expr_path_res(cx, pathexp).opt_def_id().map_or(false, |id| {\n-            match_any_def_paths(cx, id, &[&paths::PTR_NULL, &paths::PTR_NULL_MUT]).is_some()\n+            match_any_diagnostic_items(cx, id, &[sym::ptr_null, sym::ptr_null_mut]).is_some()\n         })\n     } else {\n         false"}, {"sha": "5bbaeedad5f0db8963a47758d0acd618b7229f7a", "filename": "clippy_lints/src/transmuting_null.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=6030428fd22912afeeaecfcc0220e979c2ffeb0a", "patch": "@@ -1,12 +1,13 @@\n use clippy_utils::consts::{constant_context, Constant};\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{is_expr_path_def_path, paths};\n+use clippy_utils::{is_expr_diagnostic_item, is_expr_path_def_path, paths};\n use if_chain::if_chain;\n use rustc_ast::LitKind;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for transmute calls which would receive a null pointer.\n@@ -67,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for TransmutingNull {\n                 // `std::mem::transmute(std::ptr::null::<i32>())`\n                 if_chain! {\n                     if let ExprKind::Call(func1, []) = arg.kind;\n-                    if is_expr_path_def_path(cx, func1, &paths::PTR_NULL);\n+                    if is_expr_diagnostic_item(cx, func1, sym::ptr_null);\n                     then {\n                         span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG)\n                     }"}, {"sha": "5fb708741e58aa4c8b14c677ac3a0b1a264f93d7", "filename": "clippy_lints/src/types/linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Ftypes%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Ftypes%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Flinked_list.rs?ref=6030428fd22912afeeaecfcc0220e979c2ffeb0a", "patch": "@@ -1,12 +1,12 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::{match_def_path, paths};\n use rustc_hir::{self as hir, def_id::DefId};\n use rustc_lint::LateContext;\n+use rustc_span::symbol::sym;\n \n use super::LINKEDLIST;\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, def_id: DefId) -> bool {\n-    if match_def_path(cx, def_id, &paths::LINKED_LIST) {\n+    if cx.tcx.is_diagnostic_item(sym::LinkedList, def_id) {\n         span_lint_and_help(\n             cx,\n             LINKEDLIST,"}, {"sha": "a4bc8c09f537efb39e1c9c470f391adf07caf8b9", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=6030428fd22912afeeaecfcc0220e979c2ffeb0a", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::{is_type_diagnostic_item, same_type_and_consts};\n-use clippy_utils::{get_parent_expr, match_def_path, match_trait_method, paths};\n+use clippy_utils::{get_parent_expr, is_trait_method, match_def_path, match_trait_method, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, HirId, MatchSource};\n@@ -64,7 +64,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n             },\n \n             ExprKind::MethodCall(name, .., args, _) => {\n-                if match_trait_method(cx, e, &paths::INTO) && &*name.ident.as_str() == \"into\" {\n+                if is_trait_method(cx, e, sym::into_trait) && &*name.ident.as_str() == \"into\" {\n                     let a = cx.typeck_results().expr_ty(e);\n                     let b = cx.typeck_results().expr_ty(&args[0]);\n                     if same_type_and_consts(a, b) {\n@@ -80,7 +80,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                         );\n                     }\n                 }\n-                if match_trait_method(cx, e, &paths::INTO_ITERATOR) && name.ident.name == sym::into_iter {\n+                if is_trait_method(cx, e, sym::IntoIterator) && name.ident.name == sym::into_iter {\n                     if let Some(parent_expr) = get_parent_expr(cx, e) {\n                         if let ExprKind::MethodCall(parent_name, ..) = parent_expr.kind {\n                             if parent_name.ident.name != sym::into_iter {"}, {"sha": "b19d1430b6e73a1878227f66019db1104ed4e989", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=6030428fd22912afeeaecfcc0220e979c2ffeb0a", "patch": "@@ -411,12 +411,22 @@ pub fn is_qpath_def_path(cx: &LateContext<'_>, path: &QPath<'_>, hir_id: HirId,\n }\n \n /// If the expression is a path, resolves it to a `DefId` and checks if it matches the given path.\n+///\n+/// Please use `is_expr_diagnostic_item` if the target is a diagnostic item.\n pub fn is_expr_path_def_path(cx: &LateContext<'_>, expr: &Expr<'_>, segments: &[&str]) -> bool {\n     expr_path_res(cx, expr)\n         .opt_def_id()\n         .map_or(false, |id| match_def_path(cx, id, segments))\n }\n \n+/// If the expression is a path, resolves it to a `DefId` and checks if it matches the given\n+/// diagnostic item.\n+pub fn is_expr_diagnostic_item(cx: &LateContext<'_>, expr: &Expr<'_>, diag_item: Symbol) -> bool {\n+    expr_path_res(cx, expr)\n+        .opt_def_id()\n+        .map_or(false, |id| cx.tcx.is_diagnostic_item(diag_item, id))\n+}\n+\n /// THIS METHOD IS DEPRECATED and will eventually be removed since it does not match against the\n /// entire path or resolved `DefId`. Prefer using `match_def_path`. Consider getting a `DefId` from\n /// `QPath::Resolved.1.res.opt_def_id()`.\n@@ -1249,13 +1259,23 @@ pub fn match_function_call<'tcx>(\n \n /// Checks if the given `DefId` matches any of the paths. Returns the index of matching path, if\n /// any.\n+///\n+/// Please use `match_any_diagnostic_items` if the targets are all diagnostic items.\n pub fn match_any_def_paths(cx: &LateContext<'_>, did: DefId, paths: &[&[&str]]) -> Option<usize> {\n     let search_path = cx.get_def_path(did);\n     paths\n         .iter()\n         .position(|p| p.iter().map(|x| Symbol::intern(x)).eq(search_path.iter().copied()))\n }\n \n+/// Checks if the given `DefId` matches any of provided diagnostic items. Returns the index of\n+/// matching path, if any.\n+pub fn match_any_diagnostic_items(cx: &LateContext<'_>, def_id: DefId, diag_items: &[Symbol]) -> Option<usize> {\n+    diag_items\n+        .iter()\n+        .position(|item| cx.tcx.is_diagnostic_item(*item, def_id))\n+}\n+\n /// Checks if the given `DefId` matches the path.\n pub fn match_def_path<'tcx>(cx: &LateContext<'tcx>, did: DefId, syms: &[&str]) -> bool {\n     // We should probably move to Symbols in Clippy as well rather than interning every time."}, {"sha": "e9e371e3e3e50b1862098410447a4b89c435614a", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6030428fd22912afeeaecfcc0220e979c2ffeb0a/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=6030428fd22912afeeaecfcc0220e979c2ffeb0a", "patch": "@@ -73,8 +73,6 @@ pub const IDENT_AS_STR: [&str; 4] = [\"rustc_span\", \"symbol\", \"Ident\", \"as_str\"];\n pub const INDEX: [&str; 3] = [\"core\", \"ops\", \"Index\"];\n pub const INDEX_MUT: [&str; 3] = [\"core\", \"ops\", \"IndexMut\"];\n pub const INSERT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"insert_str\"];\n-pub const INTO: [&str; 3] = [\"core\", \"convert\", \"Into\"];\n-pub const INTO_ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"collect\", \"IntoIterator\"];\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n pub const IPADDR_V4: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V4\"];\n@@ -85,6 +83,7 @@ pub const KW_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"kw\"];\n #[cfg(feature = \"internal-lints\")]\n pub const LATE_CONTEXT: [&str; 2] = [\"rustc_lint\", \"LateContext\"];\n pub const LIBC_STRLEN: [&str; 2] = [\"libc\", \"strlen\"];\n+/// Preferably use the diagnostic item `sym::LinkedList` where possible\n pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n #[cfg(any(feature = \"internal-lints\", feature = \"metadata-collector-lint\"))]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n@@ -99,6 +98,7 @@ pub const MEM_SIZE_OF_VAL: [&str; 3] = [\"core\", \"mem\", \"size_of_val\"];\n pub const MUTEX_GUARD: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"MutexGuard\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n pub const OPS_MODULE: [&str; 2] = [\"core\", \"ops\"];\n+/// Preferably use the diagnostic item `sym::option_type` where possible\n pub const OPTION: [&str; 3] = [\"core\", \"option\", \"Option\"];\n pub const OPTION_NONE: [&str; 4] = [\"core\", \"option\", \"Option\", \"None\"];\n pub const OPTION_SOME: [&str; 4] = [\"core\", \"option\", \"Option\", \"Some\"];\n@@ -122,8 +122,6 @@ pub const POLL_READY: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Ready\"];\n pub const PTR_COPY: [&str; 3] = [\"core\", \"intrinsics\", \"copy\"];\n pub const PTR_COPY_NONOVERLAPPING: [&str; 3] = [\"core\", \"intrinsics\", \"copy_nonoverlapping\"];\n pub const PTR_EQ: [&str; 3] = [\"core\", \"ptr\", \"eq\"];\n-pub const PTR_NULL: [&str; 3] = [\"core\", \"ptr\", \"null\"];\n-pub const PTR_NULL_MUT: [&str; 3] = [\"core\", \"ptr\", \"null_mut\"];\n pub const PTR_SLICE_FROM_RAW_PARTS: [&str; 3] = [\"core\", \"ptr\", \"slice_from_raw_parts\"];\n pub const PTR_SLICE_FROM_RAW_PARTS_MUT: [&str; 3] = [\"core\", \"ptr\", \"slice_from_raw_parts_mut\"];\n pub const PTR_SWAP_NONOVERLAPPING: [&str; 3] = [\"core\", \"ptr\", \"swap_nonoverlapping\"];"}]}