{"sha": "a621ec35aef00181be89c65a36bc44d061b99206", "node_id": "C_kwDOAAsO6NoAKGE2MjFlYzM1YWVmMDAxODFiZTg5YzY1YTM2YmM0NGQwNjFiOTkyMDY", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-04-24T10:25:23Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2023-04-30T09:18:40Z"}, "message": "RegionInferenceContext: remove Rc from rev_scc_graph field", "tree": {"sha": "8a789c22ab9abe9a7296798138617958c93cb19c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a789c22ab9abe9a7296798138617958c93cb19c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a621ec35aef00181be89c65a36bc44d061b99206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a621ec35aef00181be89c65a36bc44d061b99206", "html_url": "https://github.com/rust-lang/rust/commit/a621ec35aef00181be89c65a36bc44d061b99206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a621ec35aef00181be89c65a36bc44d061b99206/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3edfd18c790971c77845bfc1a2be4f9281c5416", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3edfd18c790971c77845bfc1a2be4f9281c5416", "html_url": "https://github.com/rust-lang/rust/commit/d3edfd18c790971c77845bfc1a2be4f9281c5416"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "8fbe814c85607f4a727cd32d4ecee0016ca9450d", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a621ec35aef00181be89c65a36bc44d061b99206/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a621ec35aef00181be89c65a36bc44d061b99206/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=a621ec35aef00181be89c65a36bc44d061b99206", "patch": "@@ -76,7 +76,7 @@ pub struct RegionInferenceContext<'tcx> {\n     /// Reverse of the SCC constraint graph --  i.e., an edge `A -> B` exists if\n     /// `B: A`. This is used to compute the universal regions that are required\n     /// to outlive a given SCC. Computed lazily.\n-    rev_scc_graph: Option<Rc<ReverseSccGraph>>,\n+    rev_scc_graph: Option<ReverseSccGraph>,\n \n     /// The \"R0 member of [R1..Rn]\" constraints, indexed by SCC.\n     member_constraints: Rc<MemberConstraintSet<'tcx, ConstraintSccIndex>>,\n@@ -813,9 +813,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // free region that must outlive the member region `R0` (`UB:\n         // R0`). Therefore, we need only keep an option `O` if `UB: O`\n         // for all UB.\n-        let rev_scc_graph = self.reverse_scc_graph();\n+        self.compute_reverse_scc_graph();\n         let universal_region_relations = &self.universal_region_relations;\n-        for ub in rev_scc_graph.upper_bounds(scc) {\n+        for ub in self.rev_scc_graph.as_ref().unwrap().upper_bounds(scc) {\n             debug!(?ub);\n             choice_regions.retain(|&o_r| universal_region_relations.outlives(ub, o_r));\n         }"}, {"sha": "e5c6c4d8540ce2815f9c803a86610984cf04b704", "filename": "compiler/rustc_borrowck/src/region_infer/reverse_sccs.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a621ec35aef00181be89c65a36bc44d061b99206/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a621ec35aef00181be89c65a36bc44d061b99206/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Freverse_sccs.rs?ref=a621ec35aef00181be89c65a36bc44d061b99206", "patch": "@@ -8,7 +8,6 @@ use rustc_data_structures::graph::vec_graph::VecGraph;\n use rustc_data_structures::graph::WithSuccessors;\n use rustc_middle::ty::RegionVid;\n use std::ops::Range;\n-use std::rc::Rc;\n \n pub(crate) struct ReverseSccGraph {\n     graph: VecGraph<ConstraintSccIndex>,\n@@ -40,10 +39,10 @@ impl ReverseSccGraph {\n }\n \n impl RegionInferenceContext<'_> {\n-    /// Compute and return the reverse SCC-based constraint graph (lazily).\n-    pub(super) fn reverse_scc_graph(&mut self) -> Rc<ReverseSccGraph> {\n-        if let Some(g) = &self.rev_scc_graph {\n-            return g.clone();\n+    /// Compute the reverse SCC-based constraint graph (lazily).\n+    pub(super) fn compute_reverse_scc_graph(&mut self) {\n+        if matches!(self.rev_scc_graph, Some(_)) {\n+            return;\n         }\n \n         let graph = self.constraint_sccs.reverse();\n@@ -63,8 +62,6 @@ impl RegionInferenceContext<'_> {\n             start += group_size;\n         }\n \n-        let rev_graph = Rc::new(ReverseSccGraph { graph, scc_regions, universal_regions });\n-        self.rev_scc_graph = Some(rev_graph.clone());\n-        rev_graph\n+        self.rev_scc_graph = Some(ReverseSccGraph { graph, scc_regions, universal_regions });\n     }\n }"}]}