{"sha": "35a6e6a02bb5035c21b3d94fd8238b687bb52573", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YTZlNmEwMmJiNTAzNWMyMWIzZDk0ZmQ4MjM4YjY4N2JiNTI1NzM=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-04-06T05:34:03Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-04-11T17:49:07Z"}, "message": "trans: use Instance in trans_closure and FunctionContext::new.", "tree": {"sha": "a6b9d672a746e6c299cea69128c74cbc09a5791c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6b9d672a746e6c299cea69128c74cbc09a5791c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35a6e6a02bb5035c21b3d94fd8238b687bb52573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35a6e6a02bb5035c21b3d94fd8238b687bb52573", "html_url": "https://github.com/rust-lang/rust/commit/35a6e6a02bb5035c21b3d94fd8238b687bb52573", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35a6e6a02bb5035c21b3d94fd8238b687bb52573/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a563711b6a13eb93ac59d4de29e079281f4866f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a563711b6a13eb93ac59d4de29e079281f4866f3", "html_url": "https://github.com/rust-lang/rust/commit/a563711b6a13eb93ac59d4de29e079281f4866f3"}], "stats": {"total": 52, "additions": 22, "deletions": 30}, "files": [{"sha": "b5663a96b68f61be4ab2fa3dec9ff46fb2c84277", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/35a6e6a02bb5035c21b3d94fd8238b687bb52573/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a6e6a02bb5035c21b3d94fd8238b687bb52573/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=35a6e6a02bb5035c21b3d94fd8238b687bb52573", "patch": "@@ -1400,20 +1400,23 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n     pub fn new(ccx: &'blk CrateContext<'blk, 'tcx>,\n                llfndecl: ValueRef,\n                fn_ty: FnType,\n-               def_id: Option<DefId>,\n-               param_substs: &'tcx Substs<'tcx>,\n+               instance: Option<Instance<'tcx>>,\n                block_arena: &'blk TypedArena<common::BlockS<'blk, 'tcx>>)\n                -> FunctionContext<'blk, 'tcx> {\n-        common::validate_substs(param_substs);\n+        let (param_substs, def_id) = match instance {\n+            Some(instance) => {\n+                common::validate_substs(instance.substs);\n+                (instance.substs, Some(instance.def))\n+            }\n+            None => (ccx.tcx().mk_substs(Substs::empty()), None)\n+        };\n \n         let inlined_did = def_id.and_then(|def_id| inline::get_local_instance(ccx, def_id));\n         let inlined_id = inlined_did.and_then(|id| ccx.tcx().map.as_local_node_id(id));\n         let local_id = def_id.and_then(|id| ccx.tcx().map.as_local_node_id(id));\n \n-        debug!(\"FunctionContext::new(path={}, def_id={:?}, param_substs={:?})\",\n-            inlined_id.map_or(String::new(), |id| ccx.tcx().node_path_str(id)),\n-            def_id,\n-            param_substs);\n+        debug!(\"FunctionContext::new({})\",\n+               instance.map_or(String::new(), |i| i.to_string()));\n \n         let debug_context = debuginfo::create_function_debug_context(ccx,\n             inlined_id.unwrap_or(ast::DUMMY_NODE_ID), param_substs, llfndecl);\n@@ -1810,27 +1813,25 @@ pub fn trans_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                decl: &hir::FnDecl,\n                                body: &hir::Block,\n                                llfndecl: ValueRef,\n-                               param_substs: &'tcx Substs<'tcx>,\n-                               def_id: DefId,\n+                               instance: Instance<'tcx>,\n                                inlined_id: ast::NodeId,\n                                fn_ty: FnType,\n                                abi: Abi,\n                                closure_env: closure::ClosureEnv) {\n     ccx.stats().n_closures.set(ccx.stats().n_closures.get() + 1);\n \n     if collector::collecting_debug_information(ccx) {\n-        ccx.record_translation_item_as_generated(\n-            TransItem::Fn(Instance::new(def_id, param_substs)));\n+        ccx.record_translation_item_as_generated(TransItem::Fn(instance));\n     }\n \n     let _icx = push_ctxt(\"trans_closure\");\n     attributes::emit_uwtable(llfndecl, true);\n \n-    debug!(\"trans_closure(..., param_substs={:?})\", param_substs);\n+    debug!(\"trans_closure(..., {})\", instance);\n \n     let (arena, fcx): (TypedArena<_>, FunctionContext);\n     arena = TypedArena::new();\n-    fcx = FunctionContext::new(ccx, llfndecl, fn_ty, Some(def_id), param_substs, &arena);\n+    fcx = FunctionContext::new(ccx, llfndecl, fn_ty, Some(instance), &arena);\n \n     if fcx.mir.is_some() {\n         return mir::trans_mir(&fcx);\n@@ -1921,8 +1922,7 @@ pub fn trans_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                   decl,\n                   body,\n                   llfndecl,\n-                  param_substs,\n-                  def_id,\n+                  Instance::new(def_id, param_substs),\n                   id,\n                   fn_ty,\n                   abi,\n@@ -2015,9 +2015,7 @@ pub fn trans_ctor_shim<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     let (arena, fcx): (TypedArena<_>, FunctionContext);\n     arena = TypedArena::new();\n-    fcx = FunctionContext::new(ccx, llfndecl, fn_ty,\n-                               Some(ccx.tcx().map.local_def_id(ctor_id)),\n-                               param_substs, &arena);\n+    fcx = FunctionContext::new(ccx, llfndecl, fn_ty, None, &arena);\n     let bcx = fcx.init(false, None);\n \n     assert!(!fcx.needs_ret_allocas);"}, {"sha": "7675e1de958277426a9a2f9b374e6ee342caf537", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35a6e6a02bb5035c21b3d94fd8238b687bb52573/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a6e6a02bb5035c21b3d94fd8238b687bb52573/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=35a6e6a02bb5035c21b3d94fd8238b687bb52573", "patch": "@@ -24,7 +24,6 @@ use middle::cstore::LOCAL_CRATE;\n use rustc::hir::def_id::DefId;\n use rustc::infer;\n use rustc::ty::subst;\n-use rustc::ty::subst::{Substs};\n use rustc::traits;\n use rustc::hir::map as hir_map;\n use abi::{Abi, FnType};\n@@ -385,10 +384,9 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n     let llfn = declare::define_internal_fn(ccx, &function_name, tuple_fn_ty);\n \n     //\n-    let empty_substs = tcx.mk_substs(Substs::empty());\n     let (block_arena, fcx): (TypedArena<_>, FunctionContext);\n     block_arena = TypedArena::new();\n-    fcx = FunctionContext::new(ccx, llfn, fn_ty, None, empty_substs, &block_arena);\n+    fcx = FunctionContext::new(ccx, llfn, fn_ty, None, &block_arena);\n     let mut bcx = fcx.init(false, None);\n \n     let llargs = get_params(fcx.llfn);"}, {"sha": "3c97234db76e31a4b805fdd44f617dd2b6a594ed", "filename": "src/librustc_trans/closure.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/35a6e6a02bb5035c21b3d94fd8238b687bb52573/src%2Flibrustc_trans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a6e6a02bb5035c21b3d94fd8238b687bb52573/src%2Flibrustc_trans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fclosure.rs?ref=35a6e6a02bb5035c21b3d94fd8238b687bb52573", "patch": "@@ -240,8 +240,7 @@ pub fn trans_closure_expr<'a, 'tcx>(dest: Dest<'a, 'tcx>,\n                   decl,\n                   body,\n                   llfn,\n-                  param_substs,\n-                  closure_def_id,\n+                  Instance::new(closure_def_id, param_substs),\n                   id,\n                   fn_ty,\n                   Abi::RustCall,\n@@ -387,7 +386,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n \n     let (block_arena, fcx): (TypedArena<_>, FunctionContext);\n     block_arena = TypedArena::new();\n-    fcx = FunctionContext::new(ccx, lloncefn, fn_ty, None, substs.func_substs, &block_arena);\n+    fcx = FunctionContext::new(ccx, lloncefn, fn_ty, None, &block_arena);\n     let mut bcx = fcx.init(false, None);\n \n "}, {"sha": "39ea25619eed01de7e355f03eeeb3fc70522be64", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35a6e6a02bb5035c21b3d94fd8238b687bb52573/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a6e6a02bb5035c21b3d94fd8238b687bb52573/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=35a6e6a02bb5035c21b3d94fd8238b687bb52573", "patch": "@@ -272,10 +272,9 @@ fn get_drop_glue_core<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n \n     let _s = StatRecorder::new(ccx, format!(\"drop {:?}\", t));\n \n-    let empty_substs = ccx.tcx().mk_substs(Substs::empty());\n     let (arena, fcx): (TypedArena<_>, FunctionContext);\n     arena = TypedArena::new();\n-    fcx = FunctionContext::new(ccx, llfn, fn_ty, None, empty_substs, &arena);\n+    fcx = FunctionContext::new(ccx, llfn, fn_ty, None, &arena);\n \n     let bcx = fcx.init(false, None);\n "}, {"sha": "4aadfe7d3f9469ef089d75c752862dd2e232a321", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35a6e6a02bb5035c21b3d94fd8238b687bb52573/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a6e6a02bb5035c21b3d94fd8238b687bb52573/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=35a6e6a02bb5035c21b3d94fd8238b687bb52573", "patch": "@@ -1319,10 +1319,9 @@ fn gen_fn<'a, 'tcx>(fcx: &FunctionContext<'a, 'tcx>,\n         sig: ty::Binder(sig)\n     });\n     let llfn = declare::define_internal_fn(ccx, name, rust_fn_ty);\n-    let empty_substs = ccx.tcx().mk_substs(Substs::empty());\n     let (fcx, block_arena);\n     block_arena = TypedArena::new();\n-    fcx = FunctionContext::new(ccx, llfn, fn_ty, None, empty_substs, &block_arena);\n+    fcx = FunctionContext::new(ccx, llfn, fn_ty, None, &block_arena);\n     let bcx = fcx.init(true, None);\n     trans(bcx);\n     fcx.cleanup();"}, {"sha": "9e5476ae80d4791eb9fe0b9bf752d15108bdc8cb", "filename": "src/librustc_trans/meth.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35a6e6a02bb5035c21b3d94fd8238b687bb52573/src%2Flibrustc_trans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35a6e6a02bb5035c21b3d94fd8238b687bb52573/src%2Flibrustc_trans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmeth.rs?ref=35a6e6a02bb5035c21b3d94fd8238b687bb52573", "patch": "@@ -93,10 +93,9 @@ pub fn trans_object_shim<'a, 'tcx>(ccx: &'a CrateContext<'a, 'tcx>,\n         symbol_names::internal_name_from_type_and_suffix(ccx, method_ty, \"object_shim\");\n     let llfn = declare::define_internal_fn(ccx, &function_name, method_ty);\n \n-    let empty_substs = tcx.mk_substs(Substs::empty());\n     let (block_arena, fcx): (TypedArena<_>, FunctionContext);\n     block_arena = TypedArena::new();\n-    fcx = FunctionContext::new(ccx, llfn, fn_ty, None, empty_substs, &block_arena);\n+    fcx = FunctionContext::new(ccx, llfn, fn_ty, None, &block_arena);\n     let mut bcx = fcx.init(false, None);\n     assert!(!fcx.needs_ret_allocas);\n "}]}