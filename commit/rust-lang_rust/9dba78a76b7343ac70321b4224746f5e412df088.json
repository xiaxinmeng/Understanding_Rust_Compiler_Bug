{"sha": "9dba78a76b7343ac70321b4224746f5e412df088", "node_id": "C_kwDOAAsO6NoAKDlkYmE3OGE3NmI3MzQzYWM3MDMyMWI0MjI0NzQ2ZjVlNDEyZGYwODg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-19T17:19:00Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-19T18:14:20Z"}, "message": "show a better error when running Miri with the wrong sysroot", "tree": {"sha": "70aff8aee0dfe413e9b5fb16d45b2f9df39f62a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70aff8aee0dfe413e9b5fb16d45b2f9df39f62a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dba78a76b7343ac70321b4224746f5e412df088", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dba78a76b7343ac70321b4224746f5e412df088", "html_url": "https://github.com/rust-lang/rust/commit/9dba78a76b7343ac70321b4224746f5e412df088", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dba78a76b7343ac70321b4224746f5e412df088/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9edbf3676b056e6cd4b887163703d454d5c3e8c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9edbf3676b056e6cd4b887163703d454d5c3e8c3", "html_url": "https://github.com/rust-lang/rust/commit/9edbf3676b056e6cd4b887163703d454d5c3e8c3"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "233d81826eecfd25fe7daa0c390ce6f2fc9749fd", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9dba78a76b7343ac70321b4224746f5e412df088/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dba78a76b7343ac70321b4224746f5e412df088/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=9dba78a76b7343ac70321b4224746f5e412df088", "patch": "@@ -374,12 +374,15 @@ fn setup(subcommand: MiriCommand) {\n         }\n         None => {\n             // Check for `rust-src` rustup component.\n-            let sysroot = miri()\n-                .args(&[\"--print\", \"sysroot\"])\n-                .output()\n-                .expect(\"failed to determine sysroot\")\n-                .stdout;\n-            let sysroot = std::str::from_utf8(&sysroot).unwrap();\n+            let output =\n+                miri().args(&[\"--print\", \"sysroot\"]).output().expect(\"failed to determine sysroot\");\n+            if !output.status.success() {\n+                show_error(format!(\n+                    \"Failed to determine sysroot; Miri said:\\n{}\",\n+                    String::from_utf8_lossy(&output.stderr).trim_end()\n+                ));\n+            }\n+            let sysroot = std::str::from_utf8(&output.stdout).unwrap();\n             let sysroot = Path::new(sysroot.trim_end_matches('\\n'));\n             // Check for `$SYSROOT/lib/rustlib/src/rust/library`; test if that contains `std/Cargo.toml`.\n             let rustup_src ="}, {"sha": "5131f3ae9ca9cd930efddf7be6cefbbf6620ae38", "filename": "src/bin/miri.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9dba78a76b7343ac70321b4224746f5e412df088/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dba78a76b7343ac70321b4224746f5e412df088/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=9dba78a76b7343ac70321b4224746f5e412df088", "patch": "@@ -1,5 +1,5 @@\n #![feature(rustc_private, stmt_expr_attributes)]\n-#![allow(clippy::manual_range_contains)]\n+#![allow(clippy::manual_range_contains, clippy::useless_format)]\n \n extern crate rustc_data_structures;\n extern crate rustc_driver;\n@@ -143,6 +143,11 @@ impl rustc_driver::Callbacks for MiriBeRustCompilerCalls {\n     }\n }\n \n+fn show_error(msg: String) -> ! {\n+    eprintln!(\"fatal error: {}\", msg);\n+    std::process::exit(1)\n+}\n+\n fn init_early_loggers() {\n     // Note that our `extern crate log` is *not* the same as rustc's; as a result, we have to\n     // initialize them both, and we always initialize `miri`'s first.\n@@ -214,13 +219,26 @@ fn compile_time_sysroot() -> Option<String> {\n     let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n     let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n     Some(match (home, toolchain) {\n-        (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n-        _ =>\n-            option_env!(\"RUST_SYSROOT\")\n-                .expect(\n+        (Some(home), Some(toolchain)) => {\n+            // Check that at runtime, we are still in this toolchain.\n+            let toolchain_runtime =\n+                env::var_os(\"RUSTUP_TOOLCHAIN\").or_else(|| env::var_os(\"MULTIRUST_TOOLCHAIN\"));\n+            if !matches!(toolchain_runtime, Some(r) if r == toolchain) {\n+                show_error(format!(\n+                    \"This Miri got built with local toolchain `{toolchain}`, but now is being run under a different toolchain. \\n\\\n+                    Make sure to run Miri in the toolchain it got built with, e.g. via `cargo +{toolchain} miri`.\"\n+                ));\n+            }\n+\n+            format!(\"{}/toolchains/{}\", home, toolchain)\n+        }\n+        _ => option_env!(\"RUST_SYSROOT\")\n+            .unwrap_or_else(|| {\n+                show_error(format!(\n                     \"To build Miri without rustup, set the `RUST_SYSROOT` env var at build time\",\n-                )\n-                .to_owned(),\n+                ))\n+            })\n+            .to_owned(),\n     })\n }\n "}]}