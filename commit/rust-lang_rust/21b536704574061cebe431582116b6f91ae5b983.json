{"sha": "21b536704574061cebe431582116b6f91ae5b983", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYjUzNjcwNDU3NDA2MWNlYmU0MzE1ODIxMTZiNmY5MWFlNWI5ODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-21T08:33:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-21T08:33:58Z"}, "message": "Auto merge of #50898 - shepmaster:typo, r=QuietMisdreavus\n\nUnsafeCell doc typos and minor flow improvements\n\nr? @QuietMisdreavus", "tree": {"sha": "19d67428433593acca5a6452c6441e2928dc6132", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19d67428433593acca5a6452c6441e2928dc6132"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21b536704574061cebe431582116b6f91ae5b983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21b536704574061cebe431582116b6f91ae5b983", "html_url": "https://github.com/rust-lang/rust/commit/21b536704574061cebe431582116b6f91ae5b983", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21b536704574061cebe431582116b6f91ae5b983/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98686ca2944db341b0933e341b1e9029a905e322", "url": "https://api.github.com/repos/rust-lang/rust/commits/98686ca2944db341b0933e341b1e9029a905e322", "html_url": "https://github.com/rust-lang/rust/commit/98686ca2944db341b0933e341b1e9029a905e322"}, {"sha": "52249e357d38c1133cca16e6e17d1c1b452ba52e", "url": "https://api.github.com/repos/rust-lang/rust/commits/52249e357d38c1133cca16e6e17d1c1b452ba52e", "html_url": "https://github.com/rust-lang/rust/commit/52249e357d38c1133cca16e6e17d1c1b452ba52e"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "9a46c6106db57b0b2c02974db64fac481cea3070", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/21b536704574061cebe431582116b6f91ae5b983/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21b536704574061cebe431582116b6f91ae5b983/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=21b536704574061cebe431582116b6f91ae5b983", "patch": "@@ -1231,25 +1231,26 @@ impl<'a, T: ?Sized + fmt::Display> fmt::Display for RefMut<'a, T> {\n ///\n /// If you have a reference `&SomeStruct`, then normally in Rust all fields of `SomeStruct` are\n /// immutable. The compiler makes optimizations based on the knowledge that `&T` is not mutably\n-/// aliased or mutated, and that `&mut T` is unique. `UnsafeCel<T>` is the only core language\n+/// aliased or mutated, and that `&mut T` is unique. `UnsafeCell<T>` is the only core language\n /// feature to work around this restriction. All other types that allow internal mutability, such as\n-/// `Cell<T>` and `RefCell<T>` use `UnsafeCell` to wrap their internal data.\n+/// `Cell<T>` and `RefCell<T>`, use `UnsafeCell` to wrap their internal data.\n ///\n /// The `UnsafeCell` API itself is technically very simple: it gives you a raw pointer `*mut T` to\n /// its contents. It is up to _you_ as the abstraction designer to use that raw pointer correctly.\n ///\n /// The precise Rust aliasing rules are somewhat in flux, but the main points are not contentious:\n ///\n-/// - If you create a safe reference with lifetime `'a` (either a `&T` or `&mut T` reference) that\n-/// is accessible by safe code (for example, because you returned it), then you must not access\n-/// the data in any way that contradicts that reference for the remainder of `'a`. For example, that\n-/// means that if you take the `*mut T` from an `UnsafeCell<T>` and case it to an `&T`, then until\n-/// that reference's lifetime expires, the data in `T` must remain immutable (modulo any\n-/// `UnsafeCell` data found within `T`, of course). Similarly, if you create an `&mut T` reference\n-/// that is released to safe code, then you must not access the data within the `UnsafeCell` until\n-/// that reference expires.\n+/// - If you create a safe reference with lifetime `'a` (either a `&T` or `&mut T`\n+/// reference) that is accessible by safe code (for example, because you returned it),\n+/// then you must not access the data in any way that contradicts that reference for the\n+/// remainder of `'a`. For example, this means that if you take the `*mut T` from an\n+/// `UnsafeCell<T>` and cast it to an `&T`, then the data in `T` must remain immutable\n+/// (modulo any `UnsafeCell` data found within `T`, of course) until that reference's\n+/// lifetime expires. Similarly, if you create a `&mut T` reference that is released to\n+/// safe code, then you must not access the data within the `UnsafeCell` until that\n+/// reference expires.\n ///\n-/// - At all times, you must avoid data races, meaning that if multiple threads have access to\n+/// - At all times, you must avoid data races. If multiple threads have access to\n /// the same `UnsafeCell`, then any writes must have a proper happens-before relation to all other\n /// accesses (or use atomics).\n ///\n@@ -1259,10 +1260,10 @@ impl<'a, T: ?Sized + fmt::Display> fmt::Display for RefMut<'a, T> {\n /// 1. A `&T` reference can be released to safe code and there it can co-exit with other `&T`\n /// references, but not with a `&mut T`\n ///\n-/// 2. A `&mut T` reference may be released to safe code, provided neither other `&mut T` nor `&T`\n+/// 2. A `&mut T` reference may be released to safe code provided neither other `&mut T` nor `&T`\n /// co-exist with it. A `&mut T` must always be unique.\n ///\n-/// Note that while mutating or mutably aliasing the contents of an `& UnsafeCell<T>` is\n+/// Note that while mutating or mutably aliasing the contents of an `&UnsafeCell<T>` is\n /// okay (provided you enforce the invariants some other way), it is still undefined behavior\n /// to have multiple `&mut UnsafeCell<T>` aliases.\n ///"}]}