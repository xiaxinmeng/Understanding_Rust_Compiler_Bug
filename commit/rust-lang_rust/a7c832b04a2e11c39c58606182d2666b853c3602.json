{"sha": "a7c832b04a2e11c39c58606182d2666b853c3602", "node_id": "C_kwDOAAsO6NoAKGE3YzgzMmIwNGEyZTExYzM5YzU4NjA2MTgyZDI2NjZiODUzYzM2MDI", "commit": {"author": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-05-29T08:57:24Z"}, "committer": {"name": "Andy Wang", "email": "cbeuw.andy@gmail.com", "date": "2022-06-06T18:15:59Z"}, "message": "Wording improvements\n\nCo-authored-by: Ralf Jung <post@ralfj.de>", "tree": {"sha": "8877da908ce2e8e3e5b3835c70420c106f21b5f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8877da908ce2e8e3e5b3835c70420c106f21b5f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7c832b04a2e11c39c58606182d2666b853c3602", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE7dcbcBMl24/h63ldGBtJ+fOPM3QFAmKeRF8ACgkQGBtJ+fOP\nM3QYygv+P2EcZFTBuwZbLpo86Knldu0uB5eGiOPAYlmx5aO+5NZfkxldslB/5kwt\nntag595wekPqijc76ZGuKyYdg0cbjhbFRQ6EcUkLnSY+mj0Hcs+jcIqwxMqEO2uf\nm2A+IVaXpVM5DE+uAd1vO63YxJtQpWGe7NYvdoWibk7P1Nb3qiZzHpIIkg6psvS2\nA9Z7wL4zbdNedlh88ejd70Rm2MYGOgsjGvx9tgSwWraPp9Y8tfZZAWjOFEHu+2oJ\noSsnSP/wwA/fkdAwIauK8NxTGNy22SnZdX3blnfrV+5Hwdp/FVaawh/rQrxbwvl4\ntcN7dP7EohBBnguxXVQvP9EWwfHQ9nFa8Cdh2e5sDNvW4q2ILq69DBfO8+YXXrS5\nr0G3JmFe6/eHDhj24UQvb2c1BPv+4USL/WHgfdGGBa4xX1eHZII+ySDMi6KvAAOD\ndF8UDkOmO5931LEg3JhxdtuX47DVpavEGbBqd96HBTp4XFqgoNL0KydLlxuuPL85\nc56ls3q8\n=eq8a\n-----END PGP SIGNATURE-----", "payload": "tree 8877da908ce2e8e3e5b3835c70420c106f21b5f7\nparent 6a73dedb36516c89914bbdf7f97c425d8615e1ae\nauthor Andy Wang <cbeuw.andy@gmail.com> 1653814644 +0100\ncommitter Andy Wang <cbeuw.andy@gmail.com> 1654539359 +0100\n\nWording improvements\n\nCo-authored-by: Ralf Jung <post@ralfj.de>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c832b04a2e11c39c58606182d2666b853c3602", "html_url": "https://github.com/rust-lang/rust/commit/a7c832b04a2e11c39c58606182d2666b853c3602", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7c832b04a2e11c39c58606182d2666b853c3602/comments", "author": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cbeuw", "id": 7034308, "node_id": "MDQ6VXNlcjcwMzQzMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7034308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cbeuw", "html_url": "https://github.com/cbeuw", "followers_url": "https://api.github.com/users/cbeuw/followers", "following_url": "https://api.github.com/users/cbeuw/following{/other_user}", "gists_url": "https://api.github.com/users/cbeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/cbeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cbeuw/subscriptions", "organizations_url": "https://api.github.com/users/cbeuw/orgs", "repos_url": "https://api.github.com/users/cbeuw/repos", "events_url": "https://api.github.com/users/cbeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/cbeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a73dedb36516c89914bbdf7f97c425d8615e1ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a73dedb36516c89914bbdf7f97c425d8615e1ae", "html_url": "https://github.com/rust-lang/rust/commit/6a73dedb36516c89914bbdf7f97c425d8615e1ae"}], "stats": {"total": 14, "additions": 8, "deletions": 6}, "files": [{"sha": "888f9edceb3297e17ed06882463439c56288dba6", "filename": "src/concurrency/weak_memory.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7c832b04a2e11c39c58606182d2666b853c3602/src%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c832b04a2e11c39c58606182d2666b853c3602/src%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconcurrency%2Fweak_memory.rs?ref=a7c832b04a2e11c39c58606182d2666b853c3602", "patch": "@@ -417,7 +417,9 @@ pub(super) trait EvalContextExt<'mir, 'tcx: 'mir>:\n                 && !alloc_clocks\n                     .read_race_free_with_atomic(range, this.machine.data_race.as_ref().unwrap())\n             {\n-                throw_ub_format!(\"racy imperfectly overlapping atomic access\");\n+                throw_ub_format!(\n+                    \"racy imperfectly overlapping atomic access is not possible in the C++20 memory model\"\n+                );\n             }\n         }\n         Ok(())"}, {"sha": "b8cb89087004995e1c12fc0dd89822a0511fd2e4", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7c832b04a2e11c39c58606182d2666b853c3602/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c832b04a2e11c39c58606182d2666b853c3602/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=a7c832b04a2e11c39c58606182d2666b853c3602", "patch": "@@ -743,8 +743,8 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'mir, 'tcx> {\n         if let Some(weak_memory) = &alloc_extra.weak_memory {\n             if !machine.data_race.as_ref().unwrap().ongoing_atomic_access() {\n                 // This is a non-atomic access. And if we are accessing a previously atomically\n-                // accessed location without racing with them, then the location no longer needs\n-                // to exhibit weak-memory behaviours until a fresh atomic access happens\n+                // accessed location without racing with them, then the location no longer\n+                // exhibits weak-memory behaviors until a fresh atomic access happens.\n                 weak_memory.destroy_atomicity(range);\n             }\n         }"}, {"sha": "b03424a861c9a1cf26346c26463f17d2d05f84e4", "filename": "tests/compile-fail/weak_memory/racing_mixed_size.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7c832b04a2e11c39c58606182d2666b853c3602/tests%2Fcompile-fail%2Fweak_memory%2Fracing_mixed_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7c832b04a2e11c39c58606182d2666b853c3602/tests%2Fcompile-fail%2Fweak_memory%2Fracing_mixed_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fweak_memory%2Fracing_mixed_size.stderr?ref=a7c832b04a2e11c39c58606182d2666b853c3602", "patch": "@@ -1,11 +1,11 @@\n warning: thread support is experimental: the scheduler is not preemptive, and can get stuck in spin loops.\n          (see https://github.com/rust-lang/miri/issues/1388)\n \n-error: Undefined Behavior: racy imperfectly overlapping atomic access\n+error: Undefined Behavior: racy imperfectly overlapping atomic access is not possible in the C++20 memory model\n   --> $DIR/racing_mixed_size.rs:LL:CC\n    |\n LL |             std::intrinsics::atomic_load_relaxed(hi);\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ racy imperfectly overlapping atomic access\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ racy imperfectly overlapping atomic access is not possible in the C++20 memory model\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "de9a3af3fd3ee22d33a26392e0fdc202fb6db72c", "filename": "tests/run-pass/weak_memory/extra_cpp_unsafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7c832b04a2e11c39c58606182d2666b853c3602/tests%2Frun-pass%2Fweak_memory%2Fextra_cpp_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c832b04a2e11c39c58606182d2666b853c3602/tests%2Frun-pass%2Fweak_memory%2Fextra_cpp_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fweak_memory%2Fextra_cpp_unsafe.rs?ref=a7c832b04a2e11c39c58606182d2666b853c3602", "patch": "@@ -62,7 +62,7 @@ fn racing_mixed_size_read() {\n     j2.join().unwrap();\n }\n \n-// And the combination of both of above\n+// And we allow the combination of both of the above.\n fn racing_mixed_atomicity_and_size_read() {\n     let x = static_atomic(u32::from_be(0xabbafafa));\n "}]}