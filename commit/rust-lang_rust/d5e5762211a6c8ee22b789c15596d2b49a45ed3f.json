{"sha": "d5e5762211a6c8ee22b789c15596d2b49a45ed3f", "node_id": "C_kwDOAAsO6NoAKGQ1ZTU3NjIyMTFhNmM4ZWUyMmI3ODljMTU1OTZkMmI0OWE0NWVkM2Y", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-03T17:18:06Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-06T19:18:50Z"}, "message": "Handle non-existant upstream master branches in `x fmt`", "tree": {"sha": "d987a2e78461fc737f2d6440e4e66a96d1c7309d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d987a2e78461fc737f2d6440e4e66a96d1c7309d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5e5762211a6c8ee22b789c15596d2b49a45ed3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e5762211a6c8ee22b789c15596d2b49a45ed3f", "html_url": "https://github.com/rust-lang/rust/commit/d5e5762211a6c8ee22b789c15596d2b49a45ed3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5e5762211a6c8ee22b789c15596d2b49a45ed3f/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25c153149ead5aebf7626a1ff42a6e0a3c35108e", "url": "https://api.github.com/repos/rust-lang/rust/commits/25c153149ead5aebf7626a1ff42a6e0a3c35108e", "html_url": "https://github.com/rust-lang/rust/commit/25c153149ead5aebf7626a1ff42a6e0a3c35108e"}], "stats": {"total": 119, "additions": 99, "deletions": 20}, "files": [{"sha": "bfca4531c18c6dd2fb18616d3d4f9ac37178c28a", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5e5762211a6c8ee22b789c15596d2b49a45ed3f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d5e5762211a6c8ee22b789c15596d2b49a45ed3f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d5e5762211a6c8ee22b789c15596d2b49a45ed3f", "patch": "@@ -5308,7 +5308,6 @@ dependencies = [\n name = \"tidy\"\n version = \"0.1.0\"\n dependencies = [\n- \"build_helper\",\n  \"cargo_metadata 0.14.0\",\n  \"ignore\",\n  \"lazy_static\","}, {"sha": "bfc57a85cdb42bdd106098ae9e4fc3bc707904de", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 35, "deletions": 17, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d5e5762211a6c8ee22b789c15596d2b49a45ed3f/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5e5762211a6c8ee22b789c15596d2b49a45ed3f/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=d5e5762211a6c8ee22b789c15596d2b49a45ed3f", "patch": "@@ -1,8 +1,8 @@\n //! Runs rustfmt on the repository.\n \n use crate::builder::Builder;\n-use crate::util::{output, program_out_of_date, t};\n-use build_helper::git::get_rust_lang_rust_remote;\n+use crate::util::{output, output_result, program_out_of_date, t};\n+use build_helper::git::updated_master_branch;\n use ignore::WalkBuilder;\n use std::collections::VecDeque;\n use std::path::{Path, PathBuf};\n@@ -79,21 +79,24 @@ fn update_rustfmt_version(build: &Builder<'_>) {\n /// rust-lang/master and what is now on the disk.\n ///\n /// Returns `None` if all files should be formatted.\n-fn get_modified_rs_files(build: &Builder<'_>) -> Option<Vec<String>> {\n-    let Ok(remote) = get_rust_lang_rust_remote() else { return None; };\n+fn get_modified_rs_files(build: &Builder<'_>) -> Result<Option<Vec<String>>, String> {\n+    let Ok(updated_master) = updated_master_branch(Some(&build.config.src)) else { return Ok(None); };\n+\n     if !verify_rustfmt_version(build) {\n-        return None;\n+        return Ok(None);\n     }\n \n     let merge_base =\n-        output(build.config.git().arg(\"merge-base\").arg(&format!(\"{remote}/master\")).arg(\"HEAD\"));\n-    Some(\n-        output(build.config.git().arg(\"diff-index\").arg(\"--name-only\").arg(merge_base.trim()))\n-            .lines()\n-            .map(|s| s.trim().to_owned())\n-            .filter(|f| Path::new(f).extension().map_or(false, |ext| ext == \"rs\"))\n-            .collect(),\n-    )\n+        output_result(build.config.git().arg(\"merge-base\").arg(&updated_master).arg(\"HEAD\"))?;\n+    Ok(Some(\n+        output_result(\n+            build.config.git().arg(\"diff-index\").arg(\"--name-only\").arg(merge_base.trim()),\n+        )?\n+        .lines()\n+        .map(|s| s.trim().to_owned())\n+        .filter(|f| Path::new(f).extension().map_or(false, |ext| ext == \"rs\"))\n+        .collect(),\n+    ))\n }\n \n #[derive(serde::Deserialize)]\n@@ -130,6 +133,9 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n         Ok(status) => status.success(),\n         Err(_) => false,\n     };\n+\n+    let mut paths = paths.to_vec();\n+\n     if git_available {\n         let in_working_tree = match build\n             .config\n@@ -163,10 +169,21 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n                 ignore_fmt.add(&format!(\"!/{}\", untracked_path)).expect(&untracked_path);\n             }\n             if !check && paths.is_empty() {\n-                if let Some(files) = get_modified_rs_files(build) {\n-                    for file in files {\n-                        println!(\"formatting modified file {file}\");\n-                        ignore_fmt.add(&format!(\"/{file}\")).expect(&file);\n+                match get_modified_rs_files(build) {\n+                    Ok(Some(files)) => {\n+                        for file in files {\n+                            println!(\"formatting modified file {file}\");\n+                            ignore_fmt.add(&format!(\"/{file}\")).expect(&file);\n+                        }\n+                    }\n+                    Ok(None) => {}\n+                    Err(err) => {\n+                        println!(\n+                            \"WARN: Something went wrong when running git commands:\\n{err}\\n\\\n+                            Falling back to formatting all files.\"\n+                        );\n+                        // Something went wrong when getting the version. Just format all the files.\n+                        paths.push(\".\".into());\n                     }\n                 }\n             }\n@@ -176,6 +193,7 @@ pub fn format(build: &Builder<'_>, check: bool, paths: &[PathBuf]) {\n     } else {\n         println!(\"Could not find usable git. Skipping git-aware format checks\");\n     }\n+\n     let ignore_fmt = ignore_fmt.build().unwrap();\n \n     let rustfmt_path = build.initial_rustfmt().unwrap_or_else(|| {"}, {"sha": "93e53d383cd39daa00485a0f46dd9277056d918d", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d5e5762211a6c8ee22b789c15596d2b49a45ed3f/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5e5762211a6c8ee22b789c15596d2b49a45ed3f/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=d5e5762211a6c8ee22b789c15596d2b49a45ed3f", "patch": "@@ -412,6 +412,23 @@ pub fn output(cmd: &mut Command) -> String {\n     String::from_utf8(output.stdout).unwrap()\n }\n \n+pub fn output_result(cmd: &mut Command) -> Result<String, String> {\n+    let output = match cmd.stderr(Stdio::inherit()).output() {\n+        Ok(status) => status,\n+        Err(e) => return Err(format!(\"failed to run command: {:?}: {}\", cmd, e)),\n+    };\n+    if !output.status.success() {\n+        return Err(format!(\n+            \"command did not execute successfully: {:?}\\n\\\n+             expected success, got: {}\\n{}\",\n+            cmd,\n+            output.status,\n+            String::from_utf8(output.stderr).map_err(|err| format!(\"{err:?}\"))?\n+        ));\n+    }\n+    Ok(String::from_utf8(output.stdout).map_err(|err| format!(\"{err:?}\"))?)\n+}\n+\n /// Returns the last-modified time for `path`, or zero if it doesn't exist.\n pub fn mtime(path: &Path) -> SystemTime {\n     fs::metadata(path).and_then(|f| f.modified()).unwrap_or(UNIX_EPOCH)"}, {"sha": "dc62051cb85da59ee4654a3dac139ae82e050bef", "filename": "src/tools/build_helper/src/git.rs", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d5e5762211a6c8ee22b789c15596d2b49a45ed3f/src%2Ftools%2Fbuild_helper%2Fsrc%2Fgit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5e5762211a6c8ee22b789c15596d2b49a45ed3f/src%2Ftools%2Fbuild_helper%2Fsrc%2Fgit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild_helper%2Fsrc%2Fgit.rs?ref=d5e5762211a6c8ee22b789c15596d2b49a45ed3f", "patch": "@@ -1,4 +1,4 @@\n-use std::process::Command;\n+use std::{path::Path, process::Command};\n \n /// Finds the remote for rust-lang/rust.\n /// For example for these remotes it will return `upstream`.\n@@ -8,8 +8,11 @@ use std::process::Command;\n /// upstream        https://github.com/rust-lang/rust (fetch)\n /// upstream        https://github.com/rust-lang/rust (push)\n /// ```\n-pub fn get_rust_lang_rust_remote() -> Result<String, String> {\n+pub fn get_rust_lang_rust_remote(git_dir: Option<&Path>) -> Result<String, String> {\n     let mut git = Command::new(\"git\");\n+    if let Some(git_dir) = git_dir {\n+        git.current_dir(git_dir);\n+    }\n     git.args([\"config\", \"--local\", \"--get-regex\", \"remote\\\\..*\\\\.url\"]);\n \n     let output = git.output().map_err(|err| format!(\"{err:?}\"))?;\n@@ -28,3 +31,45 @@ pub fn get_rust_lang_rust_remote() -> Result<String, String> {\n         rust_lang_remote.split('.').nth(1).ok_or_else(|| \"remote name not found\".to_owned())?;\n     Ok(remote_name.into())\n }\n+\n+pub fn rev_exists(rev: &str, git_dir: Option<&Path>) -> Result<bool, String> {\n+    let mut git = Command::new(\"git\");\n+    if let Some(git_dir) = git_dir {\n+        git.current_dir(git_dir);\n+    }\n+    git.args([\"rev-parse\", rev]);\n+    let output = git.output().map_err(|err| format!(\"{err:?}\"))?;\n+\n+    match output.status.code() {\n+        Some(0) => Ok(true),\n+        Some(128) => Ok(false),\n+        None => {\n+            return Err(format!(\n+                \"git didn't exit properly: {}\",\n+                String::from_utf8(output.stderr).map_err(|err| format!(\"{err:?}\"))?\n+            ));\n+        }\n+        Some(code) => {\n+            return Err(format!(\n+                \"git command exited with status code: {code}: {}\",\n+                String::from_utf8(output.stderr).map_err(|err| format!(\"{err:?}\"))?\n+            ));\n+        }\n+    }\n+}\n+\n+/// Returns the master branch from which we can take diffs to see changes.\n+/// This will usually be rust-lang/rust master, but sometimes this might not exist.\n+/// This could be because the user is updating their forked master branch using the GitHub UI\n+/// and therefore doesn't need an upstream master branch checked out.\n+/// We will then fall back to origin/master in the hope that at least this exists.\n+pub fn updated_master_branch(git_dir: Option<&Path>) -> Result<String, String> {\n+    let upstream_remote = get_rust_lang_rust_remote(git_dir)?;\n+    let upstream_master = format!(\"{upstream_remote}/master\");\n+    if rev_exists(&upstream_master, git_dir)? {\n+        return Ok(upstream_master);\n+    }\n+\n+    // We could implement smarter logic here in the future.\n+    Ok(\"origin/master\".into())\n+}"}]}