{"sha": "5ffddc4b921685ebd5f9525f7e33913a1d08c04e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZmRkYzRiOTIxNjg1ZWJkNWY5NTI1ZjdlMzM5MTNhMWQwOGMwNGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-06T14:11:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-06T14:11:05Z"}, "message": "Explicitly remember desugard exprs", "tree": {"sha": "d75fd7a74f0f95f8ecedb22ba7f1a3480d795981", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d75fd7a74f0f95f8ecedb22ba7f1a3480d795981"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ffddc4b921685ebd5f9525f7e33913a1d08c04e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ffddc4b921685ebd5f9525f7e33913a1d08c04e", "html_url": "https://github.com/rust-lang/rust/commit/5ffddc4b921685ebd5f9525f7e33913a1d08c04e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ffddc4b921685ebd5f9525f7e33913a1d08c04e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb5891c4330e577f5d6891be529141695ce36d4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb5891c4330e577f5d6891be529141695ce36d4f", "html_url": "https://github.com/rust-lang/rust/commit/fb5891c4330e577f5d6891be529141695ce36d4f"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "e60adc14606743e991490350bdfdb908aed41721", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ffddc4b921685ebd5f9525f7e33913a1d08c04e/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffddc4b921685ebd5f9525f7e33913a1d08c04e/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=5ffddc4b921685ebd5f9525f7e33913a1d08c04e", "patch": "@@ -149,14 +149,14 @@ pub type PatSource = InFile<PatPtr>;\n #[derive(Default, Debug, Eq, PartialEq)]\n pub struct BodySourceMap {\n     expr_map: FxHashMap<ExprSource, ExprId>,\n-    expr_map_back: ArenaMap<ExprId, ExprSource>,\n+    expr_map_back: ArenaMap<ExprId, Result<ExprSource, SyntheticSyntax>>,\n     pat_map: FxHashMap<PatSource, PatId>,\n     pat_map_back: ArenaMap<PatId, PatSource>,\n     field_map: FxHashMap<(ExprId, usize), AstPtr<ast::RecordField>>,\n     expansions: FxHashMap<InFile<AstPtr<ast::MacroCall>>, HirFileId>,\n }\n \n-#[derive(Debug)]\n+#[derive(Default, Debug, Eq, PartialEq, Clone, Copy)]\n pub struct SyntheticSyntax;\n \n impl Body {\n@@ -223,7 +223,7 @@ impl Index<PatId> for Body {\n \n impl BodySourceMap {\n     pub fn expr_syntax(&self, expr: ExprId) -> Result<ExprSource, SyntheticSyntax> {\n-        self.expr_map_back.get(expr).copied().ok_or(SyntheticSyntax)\n+        self.expr_map_back[expr]\n     }\n \n     pub fn node_expr(&self, node: InFile<&ast::Expr>) -> Option<ExprId> {"}, {"sha": "20990770030a3e10fc32f061c138117991100156", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5ffddc4b921685ebd5f9525f7e33913a1d08c04e/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffddc4b921685ebd5f9525f7e33913a1d08c04e/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=5ffddc4b921685ebd5f9525f7e33913a1d08c04e", "patch": "@@ -14,9 +14,10 @@ use ra_syntax::{\n };\n use test_utils::tested_by;\n \n+use super::ExprSource;\n use crate::{\n     adt::StructKind,\n-    body::{Body, BodySourceMap, Expander, PatPtr},\n+    body::{Body, BodySourceMap, Expander, PatPtr, SyntheticSyntax},\n     builtin_type::{BuiltinFloat, BuiltinInt},\n     db::DefDatabase,\n     expr::{\n@@ -102,42 +103,42 @@ where\n \n     fn alloc_expr(&mut self, expr: Expr, ptr: AstPtr<ast::Expr>) -> ExprId {\n         let ptr = Either::Left(ptr);\n-        let id = self.body.exprs.alloc(expr);\n         let src = self.expander.to_source(ptr);\n+        let id = self.make_expr(expr, Ok(src));\n         self.source_map.expr_map.insert(src, id);\n-        self.source_map.expr_map_back.insert(id, src);\n         id\n     }\n     // desugared exprs don't have ptr, that's wrong and should be fixed\n     // somehow.\n     fn alloc_expr_desugared(&mut self, expr: Expr) -> ExprId {\n-        self.body.exprs.alloc(expr)\n+        self.make_expr(expr, Err(SyntheticSyntax))\n     }\n     fn alloc_expr_field_shorthand(&mut self, expr: Expr, ptr: AstPtr<ast::RecordField>) -> ExprId {\n         let ptr = Either::Right(ptr);\n-        let id = self.body.exprs.alloc(expr);\n         let src = self.expander.to_source(ptr);\n+        let id = self.make_expr(expr, Ok(src));\n         self.source_map.expr_map.insert(src, id);\n+        id\n+    }\n+    fn empty_block(&mut self) -> ExprId {\n+        self.alloc_expr_desugared(Expr::Block { statements: Vec::new(), tail: None })\n+    }\n+    fn missing_expr(&mut self) -> ExprId {\n+        self.alloc_expr_desugared(Expr::Missing)\n+    }\n+    fn make_expr(&mut self, expr: Expr, src: Result<ExprSource, SyntheticSyntax>) -> ExprId {\n+        let id = self.body.exprs.alloc(expr);\n         self.source_map.expr_map_back.insert(id, src);\n         id\n     }\n+\n     fn alloc_pat(&mut self, pat: Pat, ptr: PatPtr) -> PatId {\n         let id = self.body.pats.alloc(pat);\n         let src = self.expander.to_source(ptr);\n         self.source_map.pat_map.insert(src, id);\n         self.source_map.pat_map_back.insert(id, src);\n         id\n     }\n-\n-    fn empty_block(&mut self) -> ExprId {\n-        let block = Expr::Block { statements: Vec::new(), tail: None };\n-        self.body.exprs.alloc(block)\n-    }\n-\n-    fn missing_expr(&mut self) -> ExprId {\n-        self.body.exprs.alloc(Expr::Missing)\n-    }\n-\n     fn missing_pat(&mut self) -> PatId {\n         self.body.pats.alloc(Pat::Missing)\n     }"}]}