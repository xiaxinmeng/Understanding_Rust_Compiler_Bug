{"sha": "75f56eb144be4c87893c83fa5ad3b0ce4b84e737", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZjU2ZWIxNDRiZTRjODc4OTNjODNmYTVhZDNiMGNlNGI4NGU3Mzc=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-13T18:26:20Z"}, "committer": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-13T18:26:20Z"}, "message": "fix field indexing into fat pointers", "tree": {"sha": "1a9cee1f4b3019d13bb4e1ce23124b730d5de40c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a9cee1f4b3019d13bb4e1ce23124b730d5de40c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75f56eb144be4c87893c83fa5ad3b0ce4b84e737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75f56eb144be4c87893c83fa5ad3b0ce4b84e737", "html_url": "https://github.com/rust-lang/rust/commit/75f56eb144be4c87893c83fa5ad3b0ce4b84e737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75f56eb144be4c87893c83fa5ad3b0ce4b84e737/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d42a7d021d564edc950678c39da593266f6411ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/d42a7d021d564edc950678c39da593266f6411ba", "html_url": "https://github.com/rust-lang/rust/commit/d42a7d021d564edc950678c39da593266f6411ba"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "08713b721142e3908e250c86f39984ae7dabda3f", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/75f56eb144be4c87893c83fa5ad3b0ce4b84e737/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f56eb144be4c87893c83fa5ad3b0ce4b84e737/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=75f56eb144be4c87893c83fa5ad3b0ce4b84e737", "patch": "@@ -544,7 +544,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 let dest = self.force_allocation(dest)?.to_ptr();\n \n                                 let dest = dest.offset(offset.bytes() as isize);\n-                                let dest_size = self.type_size(ty).unwrap_or(self.memory.pointer_size());\n+                                let dest_size = self.type_size(ty).expect(\"bad StructWrappedNullablePointer discrfield\");\n                                 try!(self.memory.write_int(dest, 0, dest_size));\n                             }\n                         } else {\n@@ -734,8 +734,17 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             ty::TyRef(_, ty::TypeAndMut { ty, .. }) |\n             ty::TyRawPtr(ty::TypeAndMut { ty, .. }) |\n             ty::TyBox(ty) => {\n-                assert_eq!(field_index, 0);\n-                Ok(ty)\n+                if self.type_is_sized(ty) {\n+                    assert_eq!(field_index, 0);\n+                    Ok(self.tcx.mk_imm_ptr(self.tcx.types.never))\n+                } else {\n+                    match (field_index, &ty.sty) {\n+                        (1, &ty::TySlice(_)) => Ok(self.tcx.types.usize),\n+                        (1, &ty::TyTrait(_)) |\n+                        (0, _) => Ok(self.tcx.mk_imm_ptr(self.tcx.types.never)),\n+                        _ => bug!(\"invalid fat pointee type\"),\n+                    }\n+                }\n             }\n             _ => Err(EvalError::Unimplemented(format!(\"can't handle type: {:?}, {:?}\", ty, ty.sty))),\n         }"}, {"sha": "655a59902e9ee3ddd4f50e50365bf9e2f820436e", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75f56eb144be4c87893c83fa5ad3b0ce4b84e737/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75f56eb144be4c87893c83fa5ad3b0ce4b84e737/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=75f56eb144be4c87893c83fa5ad3b0ce4b84e737", "patch": "@@ -272,7 +272,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let (offset, ty) = self.nonnull_offset_and_ty(adt_ty, nndiscr, discrfield)?;\n                 let nonnull = adt_ptr.offset(offset.bytes() as isize);\n                 // only the pointer part of a fat pointer is used for this space optimization\n-                let discr_size = self.type_size(ty).unwrap_or(self.memory.pointer_size());\n+                let discr_size = self.type_size(ty).expect(\"bad StructWrappedNullablePointer discrfield\");\n                 self.read_nonnull_discriminant_value(nonnull, nndiscr, discr_size)?\n             }\n "}]}