{"sha": "56ba13ac7f89b6ac8d70ec28230498dfa0790b93", "node_id": "C_kwDOAAsO6NoAKDU2YmExM2FjN2Y4OWI2YWM4ZDcwZWMyODIzMDQ5OGRmYTA3OTBiOTM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-22T15:04:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-22T15:04:08Z"}, "message": "Rollup merge of #98200 - ouz-a:issue-98177, r=oli-obk\n\nExpand potential inner `Or` pattern for THIR\n\nCode assumed there wouldn't be a deeper `Or` pattern inside expanded `PatStack` this fixes it by looking for the `Or` pattern inside expanded `PatStack`.\n\nA more ideal solution would be recursively doing this but I haven't found a good way to do that.\n_fixes #97898_", "tree": {"sha": "2b2e1abb5a4436bd21e69a0f13f4b83f6dc8bc06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b2e1abb5a4436bd21e69a0f13f4b83f6dc8bc06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56ba13ac7f89b6ac8d70ec28230498dfa0790b93", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjA5roCRBK7hj4Ov3rIwAAOGYIAIV73USSBC1wLSugcqa6jEhd\n0BEzprmj4xjxw+zKPzPhV5ooV/o4NZ7nbmZFUaeGD07R0SOBS/sXLcgwLHx1flfq\nQXbNnvksz0TvWb0pWRcQGGi4SUk0YFx/aEZ+sSoeE4AqDMICeEmXW6QdDU0UomHI\nX7Jr0Pjdd8KMRbEO4MuW00roQNPrCb1t9tblJblfTPgfnowmGJOQQN5xSCT1ghdo\nS7Jl8hQg/Y451g/cCQv1n5xS/UjWiISO93AWxzlSQthk88IbW5rI8LOL+f312OBI\n9xE57aryMtqMVxMzWWllYIhHNUVpcyIkhN0c9yU6AjnmkKdENg6pgFzu2Q9OcZA=\n=LNP3\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b2e1abb5a4436bd21e69a0f13f4b83f6dc8bc06\nparent a8a33cf27166d3eabaffc58ed3799e054af3b0c6\nparent ddf23cbebaa74897a3b1d1f14463fe21b171fdeb\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1661180648 +0530\ncommitter GitHub <noreply@github.com> 1661180648 +0530\n\nRollup merge of #98200 - ouz-a:issue-98177, r=oli-obk\n\nExpand potential inner `Or` pattern for THIR\n\nCode assumed there wouldn't be a deeper `Or` pattern inside expanded `PatStack` this fixes it by looking for the `Or` pattern inside expanded `PatStack`.\n\nA more ideal solution would be recursively doing this but I haven't found a good way to do that.\n_fixes #97898_\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56ba13ac7f89b6ac8d70ec28230498dfa0790b93", "html_url": "https://github.com/rust-lang/rust/commit/56ba13ac7f89b6ac8d70ec28230498dfa0790b93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56ba13ac7f89b6ac8d70ec28230498dfa0790b93/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8a33cf27166d3eabaffc58ed3799e054af3b0c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a33cf27166d3eabaffc58ed3799e054af3b0c6", "html_url": "https://github.com/rust-lang/rust/commit/a8a33cf27166d3eabaffc58ed3799e054af3b0c6"}, {"sha": "ddf23cbebaa74897a3b1d1f14463fe21b171fdeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddf23cbebaa74897a3b1d1f14463fe21b171fdeb", "html_url": "https://github.com/rust-lang/rust/commit/ddf23cbebaa74897a3b1d1f14463fe21b171fdeb"}], "stats": {"total": 118, "additions": 114, "deletions": 4}, "files": [{"sha": "443626d14b9f67c636bed05f1a7483d9366ce79d", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/56ba13ac7f89b6ac8d70ec28230498dfa0790b93/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba13ac7f89b6ac8d70ec28230498dfa0790b93/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=56ba13ac7f89b6ac8d70ec28230498dfa0790b93", "patch": "@@ -364,8 +364,8 @@ impl<'a, 'p, 'tcx> fmt::Debug for PatCtxt<'a, 'p, 'tcx> {\n /// A row of a matrix. Rows of len 1 are very common, which is why `SmallVec[_; 2]`\n /// works well.\n #[derive(Clone)]\n-struct PatStack<'p, 'tcx> {\n-    pats: SmallVec<[&'p DeconstructedPat<'p, 'tcx>; 2]>,\n+pub(crate) struct PatStack<'p, 'tcx> {\n+    pub(crate) pats: SmallVec<[&'p DeconstructedPat<'p, 'tcx>; 2]>,\n }\n \n impl<'p, 'tcx> PatStack<'p, 'tcx> {\n@@ -403,6 +403,21 @@ impl<'p, 'tcx> PatStack<'p, 'tcx> {\n         })\n     }\n \n+    // Recursively expand all patterns into their subpatterns and push each `PatStack` to matrix.\n+    fn expand_and_extend<'a>(&'a self, matrix: &mut Matrix<'p, 'tcx>) {\n+        if !self.is_empty() && self.head().is_or_pat() {\n+            for pat in self.head().iter_fields() {\n+                let mut new_patstack = PatStack::from_pattern(pat);\n+                new_patstack.pats.extend_from_slice(&self.pats[1..]);\n+                if !new_patstack.is_empty() && new_patstack.head().is_or_pat() {\n+                    new_patstack.expand_and_extend(matrix);\n+                } else if !new_patstack.is_empty() {\n+                    matrix.push(new_patstack);\n+                }\n+            }\n+        }\n+    }\n+\n     /// This computes `S(self.head().ctor(), self)`. See top of the file for explanations.\n     ///\n     /// Structure patterns with a partial wild pattern (Foo { a: 42, .. }) have their missing\n@@ -436,7 +451,7 @@ impl<'p, 'tcx> fmt::Debug for PatStack<'p, 'tcx> {\n /// A 2D matrix.\n #[derive(Clone)]\n pub(super) struct Matrix<'p, 'tcx> {\n-    patterns: Vec<PatStack<'p, 'tcx>>,\n+    pub patterns: Vec<PatStack<'p, 'tcx>>,\n }\n \n impl<'p, 'tcx> Matrix<'p, 'tcx> {\n@@ -453,7 +468,7 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n     /// expands it.\n     fn push(&mut self, row: PatStack<'p, 'tcx>) {\n         if !row.is_empty() && row.head().is_or_pat() {\n-            self.patterns.extend(row.expand_or_pat());\n+            row.expand_and_extend(self);\n         } else {\n             self.patterns.push(row);\n         }"}, {"sha": "2236a38c37b2bf0ff9b56beba8e19fe3accfa7f0", "filename": "src/test/ui/or-patterns/inner-or-pat.or3.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56ba13ac7f89b6ac8d70ec28230498dfa0790b93/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.or3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ba13ac7f89b6ac8d70ec28230498dfa0790b93/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.or3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.or3.stderr?ref=56ba13ac7f89b6ac8d70ec28230498dfa0790b93", "patch": "@@ -0,0 +1,11 @@\n+error[E0308]: mismatched types\n+  --> $DIR/inner-or-pat.rs:38:54\n+   |\n+LL |     match x {\n+   |           - this expression has type `&str`\n+LL |         x @ (((\"h\" | \"ho\" | \"yo\" | (\"dude\" | \"w\")) | () | \"nop\") | (\"hey\" | \"gg\")) |\n+   |                                                      ^^ expected `str`, found `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "058873ff5ff9e13c735be21f5e4dd6c3feb656b7", "filename": "src/test/ui/or-patterns/inner-or-pat.or4.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/56ba13ac7f89b6ac8d70ec28230498dfa0790b93/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.or4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56ba13ac7f89b6ac8d70ec28230498dfa0790b93/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.or4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.or4.stderr?ref=56ba13ac7f89b6ac8d70ec28230498dfa0790b93", "patch": "@@ -0,0 +1,11 @@\n+error[E0408]: variable `x` is not bound in all patterns\n+  --> $DIR/inner-or-pat.rs:53:37\n+   |\n+LL |         (x @ \"red\" | (x @ \"blue\" |  \"red\")) => {\n+   |                       -             ^^^^^ pattern doesn't bind `x`\n+   |                       |\n+   |                       variable not in all patterns\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0408`."}, {"sha": "f4cf4b0c188902e09fe6d17d089a83d1179c9049", "filename": "src/test/ui/or-patterns/inner-or-pat.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/56ba13ac7f89b6ac8d70ec28230498dfa0790b93/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56ba13ac7f89b6ac8d70ec28230498dfa0790b93/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finner-or-pat.rs?ref=56ba13ac7f89b6ac8d70ec28230498dfa0790b93", "patch": "@@ -0,0 +1,73 @@\n+// revisions: or1 or2 or3 or4 or5\n+// [or1] run-pass\n+// [or2] run-pass\n+// [or5] run-pass\n+\n+#![allow(unreachable_patterns)]\n+#![allow(unused_variables)]\n+#![allow(unused_parens)]\n+#![allow(dead_code)]\n+\n+\n+\n+fn foo() {\n+    let x = \"foo\";\n+    match x {\n+        x @ (((\"h\" | \"ho\" | \"yo\" | (\"dude\" | \"w\")) | \"no\" | \"nop\") | (\"hey\" | \"gg\")) |\n+        x @ (\"black\" | \"pink\") |\n+        x @ (\"red\" | \"blue\") => {\n+        }\n+        _ => (),\n+    }\n+}\n+\n+fn bar() {\n+    let x = \"foo\";\n+    match x {\n+        x @ (\"foo\" | \"bar\") |\n+        (x @ \"red\" | (x @ \"blue\" | x @ \"red\")) => {\n+        }\n+        _ => (),\n+    }\n+}\n+\n+#[cfg(or3)]\n+fn zot() {\n+    let x = \"foo\";\n+    match x {\n+        x @ (((\"h\" | \"ho\" | \"yo\" | (\"dude\" | \"w\")) | () | \"nop\") | (\"hey\" | \"gg\")) |\n+        //[or3]~^ ERROR mismatched types\n+        x @ (\"black\" | \"pink\") |\n+        x @ (\"red\" | \"blue\") => {\n+        }\n+        _ => (),\n+    }\n+}\n+\n+\n+#[cfg(or4)]\n+fn hey() {\n+    let x = \"foo\";\n+    match x {\n+        x @ (\"foo\" | \"bar\") |\n+        (x @ \"red\" | (x @ \"blue\" |  \"red\")) => {\n+        //[or4]~^ variable `x` is not bound in all patterns\n+        }\n+        _ => (),\n+    }\n+}\n+\n+fn don() {\n+    enum Foo {\n+        A,\n+        B,\n+        C,\n+    }\n+\n+    match Foo::A {\n+        | _foo @ (Foo::A | Foo::B) => {}\n+        Foo::C => {}\n+    };\n+}\n+\n+fn main(){}"}]}