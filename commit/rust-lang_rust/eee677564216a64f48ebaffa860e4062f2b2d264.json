{"sha": "eee677564216a64f48ebaffa860e4062f2b2d264", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlZTY3NzU2NDIxNmE2NGY0OGViYWZmYTg2MGU0MDYyZjJiMmQyNjQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-07-01T15:26:44Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-07-03T14:46:49Z"}, "message": "Implement consuming iterators for ~[], remove vec::{consume, consume_reverse, map_consume}.", "tree": {"sha": "57cbad17c6c510a8a164dc88b757a1ba908454b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57cbad17c6c510a8a164dc88b757a1ba908454b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eee677564216a64f48ebaffa860e4062f2b2d264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eee677564216a64f48ebaffa860e4062f2b2d264", "html_url": "https://github.com/rust-lang/rust/commit/eee677564216a64f48ebaffa860e4062f2b2d264", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eee677564216a64f48ebaffa860e4062f2b2d264/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55f155521d2f604794d2ab1de2a8d439440af4a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/55f155521d2f604794d2ab1de2a8d439440af4a8", "html_url": "https://github.com/rust-lang/rust/commit/55f155521d2f604794d2ab1de2a8d439440af4a8"}], "stats": {"total": 281, "additions": 123, "deletions": 158}, "files": [{"sha": "5ed61d6930143a2bdb3744bf4c11c2984bf76dd0", "filename": "doc/tutorial-container.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eee677564216a64f48ebaffa860e4062f2b2d264/doc%2Ftutorial-container.md", "raw_url": "https://github.com/rust-lang/rust/raw/eee677564216a64f48ebaffa860e4062f2b2d264/doc%2Ftutorial-container.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-container.md?ref=eee677564216a64f48ebaffa860e4062f2b2d264", "patch": "@@ -108,7 +108,7 @@ impl Iterator<int> for ZeroStream {\n ## Container iterators\n \n Containers implement iteration over the contained elements by returning an\n-iterator object. For example, vectors have four iterators available:\n+iterator object. For example, vector slices have four iterators available:\n \n * `vector.iter()`, for immutable references to the elements\n * `vector.mut_iter()`, for mutable references to the elements"}, {"sha": "71d99479693fa76e01adbc924e00faf6a7eab8e3", "filename": "src/libextra/json.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibextra%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibextra%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fjson.rs?ref=eee677564216a64f48ebaffa860e4062f2b2d264", "patch": "@@ -24,7 +24,6 @@ use std::io::{WriterUtil, ReaderUtil};\n use std::io;\n use std::str;\n use std::to_str;\n-use std::vec;\n \n use serialize::Encodable;\n use serialize;\n@@ -941,7 +940,7 @@ impl serialize::Decoder for Decoder {\n         let name = match self.stack.pop() {\n             String(s) => s,\n             List(list) => {\n-                do vec::consume_reverse(list) |_i, v| {\n+                for list.consume_rev_iter().advance |v| {\n                     self.stack.push(v);\n                 }\n                 match self.stack.pop() {\n@@ -1059,7 +1058,7 @@ impl serialize::Decoder for Decoder {\n         let len = match self.stack.pop() {\n             List(list) => {\n                 let len = list.len();\n-                do vec::consume_reverse(list) |_i, v| {\n+                for list.consume_rev_iter().advance |v| {\n                     self.stack.push(v);\n                 }\n                 len"}, {"sha": "da046f6b5ce705db905a348e7803795f94d77c5a", "filename": "src/libextra/par.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibextra%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibextra%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpar.rs?ref=eee677564216a64f48ebaffa860e4062f2b2d264", "patch": "@@ -78,11 +78,10 @@ fn map_slices<A:Copy + Send,B:Copy + Send>(\n         info!(\"num_tasks: %?\", (num_tasks, futures.len()));\n         assert_eq!(num_tasks, futures.len());\n \n-        let r = do vec::map_consume(futures) |ys| {\n+        do futures.consume_iter().transform |ys| {\n             let mut ys = ys;\n             ys.get()\n-        };\n-        r\n+        }.collect()\n     }\n }\n "}, {"sha": "313577ac67dddda4d50ee124912b98b5e3c437e8", "filename": "src/libextra/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=eee677564216a64f48ebaffa860e4062f2b2d264", "patch": "@@ -477,7 +477,7 @@ fn run_tests(opts: &TestOpts,\n     }\n \n     // All benchmarks run at the end, in serial.\n-    do vec::consume(filtered_benchs) |_, b| {\n+    for filtered_benchs.consume_iter().advance |b| {\n         callback(TeWait(copy b.desc));\n         run_test(!opts.run_benchmarks, b, ch.clone());\n         let (test, result) = p.recv();"}, {"sha": "a7abc619080385849c3bd66e7aef756ca0e7c058", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=eee677564216a64f48ebaffa860e4062f2b2d264", "patch": "@@ -893,7 +893,7 @@ pub fn link_args(sess: Session,\n     // Add all the link args for external crates.\n     do cstore::iter_crate_data(cstore) |crate_num, _| {\n         let link_args = csearch::get_link_args_for_crate(cstore, crate_num);\n-        do vec::consume(link_args) |_, link_arg| {\n+        for link_args.consume_iter().advance |link_arg| {\n             args.push(link_arg);\n         }\n     }"}, {"sha": "3c50754744886c820d55e6fd323f7211c07841d6", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=eee677564216a64f48ebaffa860e4062f2b2d264", "patch": "@@ -123,10 +123,10 @@ pub fn build_configuration(sess: Session, argv0: @str, input: &input) ->\n // Convert strings provided as --cfg [cfgspec] into a crate_cfg\n fn parse_cfgspecs(cfgspecs: ~[~str],\n                   demitter: diagnostic::Emitter) -> ast::crate_cfg {\n-    do vec::map_consume(cfgspecs) |s| {\n+    do cfgspecs.consume_iter().transform |s| {\n         let sess = parse::new_parse_sess(Some(demitter));\n         parse::parse_meta_from_source_str(@\"cfgspec\", s.to_managed(), ~[], sess)\n-    }\n+    }.collect()\n }\n \n pub enum input {"}, {"sha": "ce9ab790b11b822a4f21bb61d170fc5ea0799923", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=eee677564216a64f48ebaffa860e4062f2b2d264", "patch": "@@ -24,7 +24,6 @@ use std::u16;\n use std::u32;\n use std::u64;\n use std::u8;\n-use std::vec;\n use extra::smallintmap::SmallIntMap;\n use syntax::attr;\n use syntax::codemap::span;\n@@ -987,7 +986,7 @@ fn lint_session() -> visit::vt<@mut Context> {\n         match cx.tcx.sess.lints.pop(&id) {\n             None => {},\n             Some(l) => {\n-                do vec::consume(l) |_, (lint, span, msg)| {\n+                for l.consume_iter().advance |(lint, span, msg)| {\n                     cx.span_lint(lint, span, msg)\n                 }\n             }"}, {"sha": "cadd58118edca7a38897b801f965be46a3cb09ba", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=eee677564216a64f48ebaffa860e4062f2b2d264", "patch": "@@ -17,8 +17,7 @@ use kinds::Copy;\n use option::Option;\n use sys;\n use uint;\n-use vec;\n-use vec::ImmutableVector;\n+use vec::{ImmutableVector, OwnedVector};\n \n /// Code for dealing with @-vectors. This is pretty incomplete, and\n /// contains a bunch of duplication from the code for ~-vectors.\n@@ -159,7 +158,7 @@ pub fn to_managed_consume<T>(v: ~[T]) -> @[T] {\n     let mut av = @[];\n     unsafe {\n         raw::reserve(&mut av, v.len());\n-        do vec::consume(v) |_i, x| {\n+        for v.consume_iter().advance |x| {\n             raw::push(&mut av, x);\n         }\n         transmute(av)"}, {"sha": "8b9b3102831c6c55da53acb6851b126a1dbe17d3", "filename": "src/libstd/either.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibstd%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibstd%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Feither.rs?ref=eee677564216a64f48ebaffa860e4062f2b2d264", "patch": "@@ -73,7 +73,7 @@ pub fn rights<T, U: Copy>(eithers: &[Either<T, U>]) -> ~[U] {\n pub fn partition<T, U>(eithers: ~[Either<T, U>]) -> (~[T], ~[U]) {\n     let mut lefts: ~[T] = ~[];\n     let mut rights: ~[U] = ~[];\n-    do vec::consume(eithers) |_i, elt| {\n+    for eithers.consume_iter().advance |elt| {\n         match elt {\n             Left(l) => lefts.push(l),\n             Right(r) => rights.push(r)"}, {"sha": "2d80dc2be152d094fc56b3761bd1d09b613d78c9", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=eee677564216a64f48ebaffa860e4062f2b2d264", "patch": "@@ -24,7 +24,7 @@ use rand::RngUtil;\n use rand;\n use uint;\n use vec;\n-use vec::{ImmutableVector, MutableVector};\n+use vec::{ImmutableVector, MutableVector, OwnedVector};\n use kinds::Copy;\n use util::{replace, unreachable};\n \n@@ -175,7 +175,8 @@ impl<K:Hash + Eq,V> HashMap<K, V> {\n                                   vec::from_fn(new_capacity, |_| None));\n \n         self.size = 0;\n-        do vec::consume(old_buckets) |_, bucket| {\n+        // consume_rev_iter is more efficient\n+        for old_buckets.consume_rev_iter().advance |bucket| {\n             self.insert_opt_bucket(bucket);\n         }\n     }\n@@ -441,7 +442,7 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n                               vec::from_fn(INITIAL_CAPACITY, |_| None));\n         self.size = 0;\n \n-        do vec::consume(buckets) |_, bucket| {\n+        for buckets.consume_iter().advance |bucket| {\n             match bucket {\n                 None => {},\n                 Some(Bucket{key, value, _}) => {"}, {"sha": "3fa9df2a9e0d9791d5fe5ab4d9e266fb1d1901ee", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 94, "deletions": 126, "changes": 220, "blob_url": "https://github.com/rust-lang/rust/blob/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=eee677564216a64f48ebaffa860e4062f2b2d264", "patch": "@@ -277,67 +277,6 @@ pub fn rsplitn<T:Copy>(v: &[T], n: uint, f: &fn(t: &T) -> bool) -> ~[~[T]] {\n     result\n }\n \n-/// Consumes all elements, in a vector, moving them out into the / closure\n-/// provided. The vector is traversed from the start to the end.\n-///\n-/// This method does not impose any requirements on the type of the vector being\n-/// consumed, but it prevents any usage of the vector after this function is\n-/// called.\n-///\n-/// # Examples\n-///\n-/// ~~~ {.rust}\n-/// let v = ~[~\"a\", ~\"b\"];\n-/// do vec::consume(v) |i, s| {\n-///   // s has type ~str, not &~str\n-///   io::println(s + fmt!(\" %d\", i));\n-/// }\n-/// ~~~\n-pub fn consume<T>(mut v: ~[T], f: &fn(uint, v: T)) {\n-    unsafe {\n-        do as_mut_buf(v) |p, ln| {\n-            for uint::range(0, ln) |i| {\n-                // NB: This unsafe operation counts on init writing 0s to the\n-                // holes we create in the vector. That ensures that, if the\n-                // iterator fails then we won't try to clean up the consumed\n-                // elements during unwinding\n-                let x = intrinsics::init();\n-                let p = ptr::mut_offset(p, i);\n-                f(i, ptr::replace_ptr(p, x));\n-            }\n-        }\n-\n-        raw::set_len(&mut v, 0);\n-    }\n-}\n-\n-/// Consumes all elements, in a vector, moving them out into the / closure\n-/// provided. The vectors is traversed in reverse order (from end to start).\n-///\n-/// This method does not impose any requirements on the type of the vector being\n-/// consumed, but it prevents any usage of the vector after this function is\n-/// called.\n-pub fn consume_reverse<T>(mut v: ~[T], f: &fn(uint, v: T)) {\n-    unsafe {\n-        do as_mut_buf(v) |p, ln| {\n-            let mut i = ln;\n-            while i > 0 {\n-                i -= 1;\n-\n-                // NB: This unsafe operation counts on init writing 0s to the\n-                // holes we create in the vector. That ensures that, if the\n-                // iterator fails then we won't try to clean up the consumed\n-                // elements during unwinding\n-                let x = intrinsics::init();\n-                let p = ptr::mut_offset(p, i);\n-                f(i, ptr::replace_ptr(p, x));\n-            }\n-        }\n-\n-        raw::set_len(&mut v, 0);\n-    }\n-}\n-\n // Appending\n \n /// Iterates over the `rhs` vector, copying each element and appending it to the\n@@ -360,20 +299,6 @@ pub fn append_one<T>(lhs: ~[T], x: T) -> ~[T] {\n \n // Functional utilities\n \n-/// Consumes a vector, mapping it into a different vector. This function takes\n-/// ownership of the supplied vector `v`, moving each element into the closure\n-/// provided to generate a new element. The vector of new elements is then\n-/// returned.\n-///\n-/// The original vector `v` cannot be used after this function call (it is moved\n-/// inside), but there are no restrictions on the type of the vector.\n-pub fn map_consume<T, U>(v: ~[T], f: &fn(v: T) -> U) -> ~[U] {\n-    let mut result = ~[];\n-    do consume(v) |_i, x| {\n-        result.push(f(x));\n-    }\n-    result\n-}\n /**\n  * Apply a function to each element of a vector and return a concatenation\n  * of each result vector\n@@ -396,7 +321,7 @@ pub fn filter_map<T, U>(\n      */\n \n     let mut result = ~[];\n-    do consume(v) |_, elem| {\n+    for v.consume_iter().advance |elem| {\n         match f(elem) {\n             None => {}\n             Some(result_elem) => { result.push(result_elem); }\n@@ -434,9 +359,7 @@ pub fn filter_mapped<T, U: Copy>(\n  */\n pub fn filter<T>(v: ~[T], f: &fn(t: &T) -> bool) -> ~[T] {\n     let mut result = ~[];\n-    // FIXME (#4355 maybe): using v.consume here crashes\n-    // do v.consume |_, elem| {\n-    do consume(v) |_, elem| {\n+    for v.consume_iter().advance |elem| {\n         if f(&elem) { result.push(elem); }\n     }\n     result\n@@ -542,7 +465,7 @@ pub fn unzip_slice<T:Copy,U:Copy>(v: &[(T, U)]) -> (~[T], ~[U]) {\n pub fn unzip<T,U>(v: ~[(T, U)]) -> (~[T], ~[U]) {\n     let mut ts = ~[];\n     let mut us = ~[];\n-    do consume(v) |_i, p| {\n+    for v.consume_iter().advance |p| {\n         let (t, u) = p;\n         ts.push(t);\n         us.push(u);\n@@ -1202,6 +1125,9 @@ impl<'self,T:Copy> ImmutableCopyableVector<T> for &'self [T] {\n \n #[allow(missing_doc)]\n pub trait OwnedVector<T> {\n+    fn consume_iter(self) -> VecConsumeIterator<T>;\n+    fn consume_rev_iter(self) -> VecConsumeRevIterator<T>;\n+\n     fn reserve(&mut self, n: uint);\n     fn reserve_at_least(&mut self, n: uint);\n     fn capacity(&self) -> uint;\n@@ -1218,14 +1144,38 @@ pub trait OwnedVector<T> {\n     fn swap_remove(&mut self, index: uint) -> T;\n     fn truncate(&mut self, newlen: uint);\n     fn retain(&mut self, f: &fn(t: &T) -> bool);\n-    fn consume(self, f: &fn(uint, v: T));\n-    fn consume_reverse(self, f: &fn(uint, v: T));\n     fn filter(self, f: &fn(t: &T) -> bool) -> ~[T];\n     fn partition(self, f: &fn(&T) -> bool) -> (~[T], ~[T]);\n     fn grow_fn(&mut self, n: uint, op: &fn(uint) -> T);\n }\n \n impl<T> OwnedVector<T> for ~[T] {\n+    /// Creates a consuming iterator, that is, one that moves each\n+    /// value out of the vector (from start to end). The vector cannot\n+    /// be used after calling this.\n+    ///\n+    /// Note that this performs O(n) swaps, and so `consume_rev_iter`\n+    /// (which just calls `pop` repeatedly) is more efficient.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ~~~ {.rust}\n+    /// let v = ~[~\"a\", ~\"b\"];\n+    /// for v.consume_iter().advance |s| {\n+    ///   // s has type ~str, not &~str\n+    ///   println(s);\n+    /// }\n+    /// ~~~\n+    fn consume_iter(self) -> VecConsumeIterator<T> {\n+        VecConsumeIterator { v: self, idx: 0 }\n+    }\n+    /// Creates a consuming iterator that moves out of the vector in\n+    /// reverse order. Also see `consume_iter`, however note that this\n+    /// is more efficient.\n+    fn consume_rev_iter(self) -> VecConsumeRevIterator<T> {\n+        VecConsumeRevIterator { v: self }\n+    }\n+\n     /**\n      * Reserves capacity for exactly `n` elements in the given vector.\n      *\n@@ -1532,16 +1482,6 @@ impl<T> OwnedVector<T> for ~[T] {\n         }\n     }\n \n-    #[inline]\n-    fn consume(self, f: &fn(uint, v: T)) {\n-        consume(self, f)\n-    }\n-\n-    #[inline]\n-    fn consume_reverse(self, f: &fn(uint, v: T)) {\n-        consume_reverse(self, f)\n-    }\n-\n     #[inline]\n     fn filter(self, f: &fn(&T) -> bool) -> ~[T] {\n         filter(self, f)\n@@ -1556,7 +1496,7 @@ impl<T> OwnedVector<T> for ~[T] {\n         let mut lefts  = ~[];\n         let mut rights = ~[];\n \n-        do self.consume |_, elt| {\n+        for self.consume_iter().advance |elt| {\n             if f(&elt) {\n                 lefts.push(elt);\n             } else {\n@@ -2132,7 +2072,7 @@ macro_rules! iterator {\n }\n \n //iterator!{struct VecIterator -> *T, &'self T}\n-/// An iterator for iterating over a vector\n+/// An iterator for iterating over a vector.\n pub struct VecIterator<'self, T> {\n     priv ptr: *T,\n     priv end: *T,\n@@ -2141,7 +2081,7 @@ pub struct VecIterator<'self, T> {\n iterator!{impl VecIterator -> &'self T, 1}\n \n //iterator!{struct VecRevIterator -> *T, &'self T}\n-/// An iterator for iterating over a vector in reverse\n+/// An iterator for iterating over a vector in reverse.\n pub struct VecRevIterator<'self, T> {\n     priv ptr: *T,\n     priv end: *T,\n@@ -2150,7 +2090,7 @@ pub struct VecRevIterator<'self, T> {\n iterator!{impl VecRevIterator -> &'self T, -1}\n \n //iterator!{struct VecMutIterator -> *mut T, &'self mut T}\n-/// An iterator for mutating the elements of a vector\n+/// An iterator for mutating the elements of a vector.\n pub struct VecMutIterator<'self, T> {\n     priv ptr: *mut T,\n     priv end: *mut T,\n@@ -2159,14 +2099,57 @@ pub struct VecMutIterator<'self, T> {\n iterator!{impl VecMutIterator -> &'self mut T, 1}\n \n //iterator!{struct VecMutRevIterator -> *mut T, &'self mut T}\n-/// An iterator for mutating the elements of a vector in reverse\n+/// An iterator for mutating the elements of a vector in reverse.\n pub struct VecMutRevIterator<'self, T> {\n     priv ptr: *mut T,\n     priv end: *mut T,\n     priv lifetime: &'self mut T // FIXME: #5922\n }\n iterator!{impl VecMutRevIterator -> &'self mut T, -1}\n \n+/// An iterator that moves out of a vector.\n+pub struct VecConsumeIterator<T> {\n+    priv v: ~[T],\n+    priv idx: uint,\n+}\n+\n+impl<T> Iterator<T> for VecConsumeIterator<T> {\n+    fn next(&mut self) -> Option<T> {\n+        // this is peculiar, but is required for safety with respect\n+        // to dtors. It traverses the first half of the vec, and\n+        // removes them by swapping them with the last element (and\n+        // popping), which results in the second half in reverse\n+        // order, and so these can just be pop'd off. That is,\n+        //\n+        // [1,2,3,4,5] => 1, [5,2,3,4] => 2, [5,4,3] => 3, [5,4] => 4,\n+        // [5] -> 5, []\n+\n+        if self.v.is_empty() {\n+            None\n+        } else {\n+            let l = self.v.len();\n+            if self.idx < l {\n+                self.v.swap(self.idx, l - 1);\n+                self.idx += 1;\n+            }\n+\n+            Some(self.v.pop())\n+        }\n+    }\n+}\n+\n+/// An iterator that moves out of a vector in reverse order.\n+pub struct VecConsumeRevIterator<T> {\n+    priv v: ~[T]\n+}\n+\n+impl<T> Iterator<T> for VecConsumeRevIterator<T> {\n+    fn next(&mut self) -> Option<T> {\n+        if self.v.is_empty() { None }\n+        else { Some(self.v.pop()) }\n+    }\n+}\n+\n #[cfg(stage0)]\n impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n     pub fn from_iterator(iterator: &mut T) -> ~[A] {\n@@ -3200,20 +3183,6 @@ mod tests {\n         };\n     }\n \n-    #[test]\n-    #[ignore(windows)]\n-    #[should_fail]\n-    fn test_consume_fail() {\n-        let v = ~[(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n-        let mut i = 0;\n-        do consume(v) |_i, _elt| {\n-            if i == 2 {\n-                fail!()\n-            }\n-            i += 1;\n-        };\n-    }\n-\n     #[test]\n     #[ignore(windows)]\n     #[should_fail]\n@@ -3243,21 +3212,6 @@ mod tests {\n         };\n     }\n \n-    #[test]\n-    #[ignore(windows)]\n-    #[should_fail]\n-    fn test_map_consume_fail() {\n-        let v = ~[(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n-        let mut i = 0;\n-        do map_consume(v) |_elt| {\n-            if i == 2 {\n-                fail!()\n-            }\n-            i += 0;\n-            ~[(~0, @0)]\n-        };\n-    }\n-\n     #[test]\n     #[ignore(windows)]\n     #[should_fail]\n@@ -3428,6 +3382,20 @@ mod tests {\n         assert_eq!(xs, [5, 5, 5, 5, 5])\n     }\n \n+    #[test]\n+    fn test_consume_iterator() {\n+        use iterator::*;\n+        let xs = ~[1u,2,3,4,5];\n+        assert_eq!(xs.consume_iter().fold(0, |a: uint, b: uint| 10*a + b), 12345);\n+    }\n+\n+    #[test]\n+    fn test_consume_rev_iterator() {\n+        use iterator::*;\n+        let xs = ~[1u,2,3,4,5];\n+        assert_eq!(xs.consume_rev_iter().fold(0, |a: uint, b: uint| 10*a + b), 54321);\n+    }\n+\n     #[test]\n     fn test_move_from() {\n         let mut a = [1,2,3,4,5];"}, {"sha": "333570b6c9d7e5156cb7518d996c6b7b01054e3f", "filename": "src/libsyntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Flibsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffmt.rs?ref=eee677564216a64f48ebaffa860e4062f2b2d264", "patch": "@@ -22,7 +22,6 @@ use ext::build::AstBuilder;\n \n use std::option;\n use std::unstable::extfmt::ct::*;\n-use std::vec;\n use parse::token::{str_to_ident};\n \n pub fn expand_syntax_ext(cx: @ExtCtxt, sp: span, tts: &[ast::token_tree])\n@@ -268,7 +267,7 @@ fn pieces_to_expr(cx: @ExtCtxt, sp: span,\n        corresponding function in std::unstable::extfmt. Each function takes a\n        buffer to insert data into along with the data being formatted. */\n     let npieces = pieces.len();\n-    do vec::consume(pieces) |i, pc| {\n+    for pieces.consume_iter().enumerate().advance |(i, pc)| {\n         match pc {\n             /* Raw strings get appended via str::push_str */\n             PieceString(s) => {"}, {"sha": "d327b73c625ec4dd95366dd892e37692a9444bcd", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=eee677564216a64f48ebaffa860e4062f2b2d264", "patch": "@@ -95,13 +95,13 @@ fn make_graph(N: uint, edges: ~[(node_id, node_id)]) -> graph {\n         }\n     }\n \n-    do vec::map_consume(graph) |mut v| {\n+    do graph.consume_iter().transform |mut v| {\n         let mut vec = ~[];\n         do v.consume |i| {\n             vec.push(i);\n         }\n         vec\n-    }\n+    }.collect()\n }\n \n fn gen_search_keys(graph: &[~[node_id]], n: uint) -> ~[node_id] {"}, {"sha": "1cd90962c5b796b851b721f4b88fddb04f8a2530", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eee677564216a64f48ebaffa860e4062f2b2d264/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=eee677564216a64f48ebaffa860e4062f2b2d264", "patch": "@@ -28,20 +28,21 @@ fn calc(children: uint, parent_wait_chan: &Chan<Chan<Chan<int>>>) {\n         wait_port\n     };\n \n-    let child_start_chans: ~[Chan<Chan<int>>] = vec::map_consume(wait_ports, |port| port.recv());\n+    let child_start_chans: ~[Chan<Chan<int>>] =\n+        wait_ports.consume_iter().transform(|port| port.recv()).collect();\n \n     let (start_port, start_chan) = stream::<Chan<int>>();\n     parent_wait_chan.send(start_chan);\n     let parent_result_chan: Chan<int> = start_port.recv();\n \n-    let child_sum_ports: ~[Port<int>] = do vec::map_consume(child_start_chans) |child_start_chan| {\n-        let (child_sum_port, child_sum_chan) = stream::<int>();\n-        child_start_chan.send(child_sum_chan);\n-        child_sum_port\n-    };\n+    let child_sum_ports: ~[Port<int>] =\n+        do child_start_chans.consume_iter().transform |child_start_chan| {\n+            let (child_sum_port, child_sum_chan) = stream::<int>();\n+            child_start_chan.send(child_sum_chan);\n+            child_sum_port\n+    }.collect();\n \n-    let mut sum = 0;\n-    vec::consume(child_sum_ports, |_, sum_port| sum += sum_port.recv() );\n+    let sum = child_sum_ports.consume_iter().fold(0, |sum, sum_port| sum + sum_port.recv() );\n \n     parent_result_chan.send(sum + 1);\n }"}]}