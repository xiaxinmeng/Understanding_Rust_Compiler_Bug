{"sha": "aaae815b44e7071707aa61ccc43f399ffc429c77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYWU4MTViNDRlNzA3MTcwN2FhNjFjY2M0M2YzOTlmZmM0MjljNzc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-23T04:42:46Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-25T08:20:45Z"}, "message": "fix release_lock_until to no longer remove inactive locks", "tree": {"sha": "0f275eb24f4944cb667f6f8b7493ee365cc4d407", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f275eb24f4944cb667f6f8b7493ee365cc4d407"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aaae815b44e7071707aa61ccc43f399ffc429c77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAll2/10ACgkQpp+NIls6\n19lulBAAqIDHJXwvPLIfFroduUHi/8Zn3WjX5I3MLJDvumtG+PFduBWRcjM72oIw\nOR4HbvghLFfI6aZTZuM2rZ1UwZAsDPD0vpkWaOMOQ2gF/0P4bb5j9Sl79UNiISed\npyIXDUxb7NtSnA86yDp69WGX2tajhEp7cuaOKuAycuINv141T8XXRn05+N/TB/8S\n/YgcaW1Enngy7aBX4BanKXe+sPAuN+aUwyE8WjjxX61sIAxypziUHjVcjJJ+XUeu\nfr5FlLxDB24wTqad1/iTtZL6HdPcT3xQAD7a6aqezIFIk9NuNrE80otvFvorMCvt\nJChIA/e/tkJvY/tEEDZB8HXYWJy+GuLH4hahnxddRADJclR4XTmUhaLk8/jFTHg9\nWUsdrBx6nAFjMhlssipgqF6IgS+e2CeNPfbI8po02q5HBPJBw3sLKdKwhNuhPyC2\n+qmRStH5mc7vuh/0S7RC8aEbRvnm4aocTrNt4gIVGE9EaR7mBXGSMmdMevVnoLYx\nZ4gWjpQLv4J8Qex6w7knl5OIr7hJ/H9m173y9f5KWTprd8lTmlH9FasAgDnkA6gz\nAmMMjP3cHooxqyDfDYTAbjU4LiOxPWD8vrf6UF1nwTKZA4i6whEdI4uBzB4TKDB+\nT3HvhZpjpGKPIpyiZJ3sVNwKFQd2FsBiY9fsPv/4jtxG3jRV4YA=\n=7V71\n-----END PGP SIGNATURE-----", "payload": "tree 0f275eb24f4944cb667f6f8b7493ee365cc4d407\nparent fda5cc9b4c048f2db64c5e23525961633aa5f2d4\nauthor Ralf Jung <post@ralfj.de> 1498192966 -0700\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1500970845 +0200\n\nfix release_lock_until to no longer remove inactive locks\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aaae815b44e7071707aa61ccc43f399ffc429c77", "html_url": "https://github.com/rust-lang/rust/commit/aaae815b44e7071707aa61ccc43f399ffc429c77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aaae815b44e7071707aa61ccc43f399ffc429c77/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fda5cc9b4c048f2db64c5e23525961633aa5f2d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/fda5cc9b4c048f2db64c5e23525961633aa5f2d4", "html_url": "https://github.com/rust-lang/rust/commit/fda5cc9b4c048f2db64c5e23525961633aa5f2d4"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "ee59d9eea4264cbab44d723fa149bb218f7ea7ed", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aaae815b44e7071707aa61ccc43f399ffc429c77/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aaae815b44e7071707aa61ccc43f399ffc429c77/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=aaae815b44e7071707aa61ccc43f399ffc429c77", "patch": "@@ -545,21 +545,22 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         }\n         let cur_frame = self.cur_frame;\n         let alloc = self.get_mut(ptr.alloc_id)?;\n+        let lock_infos = alloc.locks.get_mut(&MemoryRange::new(ptr.offset, len))\n+            .ok_or(EvalError::InvalidMemoryLockRelease { ptr, len })?;\n+        // Find the lock.  There can only be one active write lock, so this is uniquely defined.\n+        let lock_info_idx = lock_infos.iter().position(|lock_info| lock_info.status == LockStatus::Held)\n+                            .ok_or(EvalError::InvalidMemoryLockRelease { ptr, len })?;\n         {\n-            let lock_infos = alloc.locks.get_mut(&MemoryRange::new(ptr.offset, len)).ok_or(EvalError::InvalidMemoryLockRelease { ptr, len })?;\n-            let lock_info = match lock_infos.len() {\n-                0 => return Err(EvalError::InvalidMemoryLockRelease { ptr, len }),\n-                1 => &mut lock_infos[0],\n-                _ => bug!(\"There can not be overlapping locks when write access is possible.\"),\n-            };\n+            let lock_info = &mut lock_infos[lock_info_idx];\n             assert_eq!(lock_info.lifetime.frame, cur_frame);\n             if let Some(ce) = release_until {\n                 lock_info.status = LockStatus::RecoverAfter(ce);\n                 return Ok(());\n             }\n         }\n         // Falling through to here means we want to entirely remove the lock.  The control-flow is somewhat weird because of lexical lifetimes.\n-        alloc.locks.remove(&MemoryRange::new(ptr.offset, len));\n+        lock_infos.remove(lock_info_idx);\n+        // TODO: It may happen now that we leave an empty vector in the map.  Is it worth getting rid of them?\n         Ok(())\n     }\n "}]}