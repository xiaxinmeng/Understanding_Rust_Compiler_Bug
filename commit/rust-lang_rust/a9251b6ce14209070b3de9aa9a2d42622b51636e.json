{"sha": "a9251b6ce14209070b3de9aa9a2d42622b51636e", "node_id": "C_kwDOAAsO6NoAKGE5MjUxYjZjZTE0MjA5MDcwYjNkZTlhYTlhMmQ0MjYyMmI1MTYzNmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-30T13:25:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-30T13:25:42Z"}, "message": "Auto merge of #112102 - Nilstrieb:rollup-ivu1hmc, r=Nilstrieb\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #107916 (fix comment on Allocator trait)\n - #111543 (Uplift `clippy::invalid_utf8_in_unchecked` lint)\n - #111872 (fix: dedup `static_candidates` before report)\n - #111955 (bootstrap: Various Step refactors)\n - #112060 (`EarlyBinder::new` -> `EarlyBinder::bind`)\n - #112064 (Migrate GUI colors test to original CSS color format)\n - #112100 (Don't typecheck recovered method call from suggestion)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "e7f9ca07456aa1471e672498e55405adb055aef5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7f9ca07456aa1471e672498e55405adb055aef5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9251b6ce14209070b3de9aa9a2d42622b51636e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9251b6ce14209070b3de9aa9a2d42622b51636e", "html_url": "https://github.com/rust-lang/rust/commit/a9251b6ce14209070b3de9aa9a2d42622b51636e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9251b6ce14209070b3de9aa9a2d42622b51636e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3266c36624e804f9f086ebd40db19039b55a4ec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3266c36624e804f9f086ebd40db19039b55a4ec1", "html_url": "https://github.com/rust-lang/rust/commit/3266c36624e804f9f086ebd40db19039b55a4ec1"}, {"sha": "cc121828eed9636987493e77962b95cc187914de", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc121828eed9636987493e77962b95cc187914de", "html_url": "https://github.com/rust-lang/rust/commit/cc121828eed9636987493e77962b95cc187914de"}], "stats": {"total": 1230, "additions": 796, "deletions": 434}, "files": [{"sha": "67fd6d793e0b1923a2798f447c88158cc86b705f", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -361,7 +361,7 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         self.instance.subst_mir_and_normalize_erasing_regions(\n             self.tcx,\n             ty::ParamEnv::reveal_all(),\n-            ty::EarlyBinder::new(value),\n+            ty::EarlyBinder::bind(value),\n         )\n     }\n "}, {"sha": "64961baf272f478d8e79d822606b2dfb63f971fa", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -93,7 +93,7 @@ fn make_mir_scope<'ll, 'tcx>(\n             let callee = cx.tcx.subst_and_normalize_erasing_regions(\n                 instance.substs,\n                 ty::ParamEnv::reveal_all(),\n-                ty::EarlyBinder::new(callee),\n+                ty::EarlyBinder::bind(callee),\n             );\n             let callee_fn_abi = cx.fn_abi_of_instance(callee, ty::List::empty());\n             cx.dbg_scope_fn(callee, callee_fn_abi, None)"}, {"sha": "0041400320260b9ac667b55e8dd58860765a912a", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         self.instance.subst_mir_and_normalize_erasing_regions(\n             self.cx.tcx(),\n             ty::ParamEnv::reveal_all(),\n-            ty::EarlyBinder::new(value),\n+            ty::EarlyBinder::bind(value),\n         )\n     }\n }"}, {"sha": "91ccdef7215c23e02f352c18fac5cfeed5944f66", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -497,7 +497,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             .try_subst_mir_and_normalize_erasing_regions(\n                 *self.tcx,\n                 self.param_env,\n-                ty::EarlyBinder::new(value),\n+                ty::EarlyBinder::bind(value),\n             )\n             .map_err(|_| err_inval!(TooGeneric))\n     }"}, {"sha": "3d78ea9aa9ba10fda4c104530cbd9dcea8b802b2", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -1280,7 +1280,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // params (and trait ref's late bound params). This logic is very similar to\n             // `Predicate::subst_supertrait`, and it's no coincidence why.\n             let shifted_output = tcx.shift_bound_var_indices(num_bound_vars, output);\n-            let subst_output = ty::EarlyBinder::new(shifted_output).subst(tcx, substs);\n+            let subst_output = ty::EarlyBinder::bind(shifted_output).subst(tcx, substs);\n \n             let bound_vars = tcx.late_bound_vars(binding.hir_id);\n             ty::Binder::bind_with_vars(subst_output, bound_vars)"}, {"sha": "31b89525f15d4ff3fbbbc9292dccad96289f8031", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -796,14 +796,14 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n                     })\n                 });\n                 debug!(%ty);\n-                collected_tys.insert(def_id, ty::EarlyBinder::new(ty));\n+                collected_tys.insert(def_id, ty::EarlyBinder::bind(ty));\n             }\n             Err(err) => {\n                 let reported = tcx.sess.delay_span_bug(\n                     return_span,\n                     format!(\"could not fully resolve: {ty} => {err:?}\"),\n                 );\n-                collected_tys.insert(def_id, ty::EarlyBinder::new(tcx.ty_error(reported)));\n+                collected_tys.insert(def_id, ty::EarlyBinder::bind(tcx.ty_error(reported)));\n             }\n         }\n     }"}, {"sha": "13d1abe2a65662d0bb17ceebe84245668611e31a", "filename": "compiler/rustc_hir_analysis/src/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fdropck.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -128,7 +128,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n     // We don't need to normalize this param-env or anything, since we're only\n     // substituting it with free params, so no additional param-env normalization\n     // can occur on top of what has been done in the param_env query itself.\n-    let param_env = ty::EarlyBinder::new(tcx.param_env(adt_def_id))\n+    let param_env = ty::EarlyBinder::bind(tcx.param_env(adt_def_id))\n         .subst(tcx, adt_to_impl_substs)\n         .with_constness(tcx.constness(drop_impl_def_id));\n "}, {"sha": "fff417fcb2909901d16c9644bf07c218dc6a697e", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -1407,7 +1407,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n             }\n             let mut param_count = CountParams::default();\n             let has_region = pred.visit_with(&mut param_count).is_break();\n-            let substituted_pred = ty::EarlyBinder::new(pred).subst(tcx, substs);\n+            let substituted_pred = ty::EarlyBinder::bind(pred).subst(tcx, substs);\n             // Don't check non-defaulted params, dependent defaults (including lifetimes)\n             // or preds with multiple params.\n             if substituted_pred.has_non_region_param() || param_count.params.len() > 1 || has_region"}, {"sha": "2f7d465839c4c0f23123fb906c7d6fb46f50380f", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -1124,7 +1124,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<ty::PolyFnSig<\n             bug!(\"unexpected sort of node in fn_sig(): {:?}\", x);\n         }\n     };\n-    ty::EarlyBinder::new(output)\n+    ty::EarlyBinder::bind(output)\n }\n \n fn infer_return_ty_for_fn_sig<'tcx>(\n@@ -1312,7 +1312,7 @@ fn impl_trait_ref(\n                 check_impl_constness(tcx, impl_.constness, ast_trait_ref),\n             )\n         })\n-        .map(ty::EarlyBinder::new)\n+        .map(ty::EarlyBinder::bind)\n }\n \n fn check_impl_constness("}, {"sha": "b92d561fb86a43a2f47d82fb14ea5a577c27e9ce", "filename": "compiler/rustc_hir_analysis/src/collect/item_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fitem_bounds.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -86,7 +86,7 @@ pub(super) fn explicit_item_bounds(\n         Some(ty::ImplTraitInTraitData::Trait { opaque_def_id, .. }) => {\n             let item = tcx.hir().get_by_def_id(opaque_def_id.expect_local()).expect_item();\n             let opaque_ty = item.expect_opaque_ty();\n-            return ty::EarlyBinder::new(opaque_type_bounds(\n+            return ty::EarlyBinder::bind(opaque_type_bounds(\n                 tcx,\n                 opaque_def_id.expect_local(),\n                 opaque_ty.bounds,\n@@ -124,7 +124,7 @@ pub(super) fn explicit_item_bounds(\n         }\n         _ => bug!(\"item_bounds called on {:?}\", def_id),\n     };\n-    ty::EarlyBinder::new(bounds)\n+    ty::EarlyBinder::bind(bounds)\n }\n \n pub(super) fn item_bounds("}, {"sha": "65ab00fda817a172a5394421bd5fef3c34263edf", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -323,7 +323,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n                 return map[&assoc_item.trait_item_def_id.unwrap()];\n             }\n             Err(_) => {\n-                return ty::EarlyBinder::new(tcx.ty_error_with_message(\n+                return ty::EarlyBinder::bind(tcx.ty_error_with_message(\n                     DUMMY_SP,\n                     \"Could not collect return position impl trait in trait tys\",\n                 ));\n@@ -497,7 +497,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n             bug!(\"unexpected sort of node in type_of(): {:?}\", x);\n         }\n     };\n-    ty::EarlyBinder::new(output)\n+    ty::EarlyBinder::bind(output)\n }\n \n fn infer_placeholder_type<'a>("}, {"sha": "7ce48fe1c012ff33e584500c4a075bf1ee5333c6", "filename": "compiler/rustc_hir_analysis/src/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fexplicit.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n                 }\n             }\n \n-            ty::EarlyBinder::new(required_predicates)\n+            ty::EarlyBinder::bind(required_predicates)\n         })\n     }\n }"}, {"sha": "71dca918fc5e131e151833f5e0949169d86d19c2", "filename": "compiler/rustc_hir_analysis/src/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fimplicit_infer.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -74,7 +74,7 @@ pub(super) fn infer_predicates(\n             if item_required_predicates.len() > item_predicates_len {\n                 predicates_added = true;\n                 global_inferred_outlives\n-                    .insert(item_did.to_def_id(), ty::EarlyBinder::new(item_required_predicates));\n+                    .insert(item_did.to_def_id(), ty::EarlyBinder::bind(item_required_predicates));\n             }\n         }\n "}, {"sha": "4389ad6ef2678ebe83e5b8c3b1499b8f4aa592fe", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 14, "deletions": 32, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -420,20 +420,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .steal_diagnostic(segment.ident.span, StashKey::CallIntoMethod)\n                 {\n                     // Try suggesting `foo(a)` -> `a.foo()` if possible.\n-                    if let Some(ty) =\n-                        self.suggest_call_as_method(\n-                            &mut diag,\n-                            segment,\n-                            arg_exprs,\n-                            call_expr,\n-                            expected\n-                        )\n-                    {\n-                        diag.emit();\n-                        return ty;\n-                    } else {\n-                        diag.emit();\n-                    }\n+                    self.suggest_call_as_method(\n+                        &mut diag,\n+                        segment,\n+                        arg_exprs,\n+                        call_expr,\n+                        expected\n+                    );\n+                    diag.emit();\n                 }\n \n                 let err = self.report_invalid_callee(call_expr, callee_expr, callee_ty, arg_exprs);\n@@ -496,9 +490,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         arg_exprs: &'tcx [hir::Expr<'tcx>],\n         call_expr: &'tcx hir::Expr<'tcx>,\n         expected: Expectation<'tcx>,\n-    ) -> Option<Ty<'tcx>> {\n+    ) {\n         if let [callee_expr, rest @ ..] = arg_exprs {\n-            let callee_ty = self.typeck_results.borrow().expr_ty_adjusted_opt(callee_expr)?;\n+            let Some(callee_ty) = self.typeck_results.borrow().expr_ty_adjusted_opt(callee_expr) else {\n+                return;\n+            };\n \n             // First, do a probe with `IsSuggestion(true)` to avoid emitting\n             // any strange errors. If it's successful, then we'll do a true\n@@ -513,7 +509,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ProbeScope::AllTraits,\n                 expected.only_has_type(self),\n             ) else {\n-                return None;\n+                return;\n             };\n \n             let pick = self.confirm_method(\n@@ -525,7 +521,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 segment,\n             );\n             if pick.illegal_sized_bound.is_some() {\n-                return None;\n+                return;\n             }\n \n             let up_to_rcvr_span = segment.ident.span.until(callee_expr.span);\n@@ -567,22 +563,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     sugg,\n                     Applicability::MaybeIncorrect,\n                 );\n-\n-                // Let's check the method fully now\n-                let return_ty = self.check_method_argument_types(\n-                    segment.ident.span,\n-                    call_expr,\n-                    Ok(pick.callee),\n-                    rest,\n-                    TupleArgumentsFlag::DontTupleArguments,\n-                    expected,\n-                );\n-\n-                return Some(return_ty);\n             }\n         }\n-\n-        None\n     }\n \n     fn report_invalid_callee("}, {"sha": "9ee967dc7a97ef14ec1e6f9bd7d4f1ea18768b76", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -473,6 +473,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut custom_span_label = false;\n \n         let static_candidates = &mut no_match_data.static_candidates;\n+\n+        // `static_candidates` may have same candidates appended by\n+        // inherent and extension, which may result in incorrect\n+        // diagnostic.\n+        static_candidates.dedup();\n+\n         if !static_candidates.is_empty() {\n             err.note(\n                 \"found the following associated functions; to be used as methods, \\"}, {"sha": "e707ac41a050d4a89f7b8220ca636742cf50c763", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -304,6 +304,14 @@ lint_improper_ctypes_union_layout_help = consider adding a `#[repr(C)]` or `#[re\n lint_improper_ctypes_union_layout_reason = this union has unspecified layout\n lint_improper_ctypes_union_non_exhaustive = this union is non-exhaustive\n \n+# FIXME: we should ordinalize $valid_up_to when we add support for doing so\n+lint_invalid_from_utf8_checked = calls to `{$method}` with a invalid literal always return an error\n+    .label = the literal was valid UTF-8 up to the {$valid_up_to} bytes\n+\n+# FIXME: we should ordinalize $valid_up_to when we add support for doing so\n+lint_invalid_from_utf8_unchecked = calls to `{$method}` with a invalid literal are undefined behavior\n+    .label = the literal was valid UTF-8 up to the {$valid_up_to} bytes\n+\n lint_lintpass_by_hand = implementing `LintPass` by hand\n     .help = try using `declare_lint_pass!` or `impl_lint_pass!` instead\n "}, {"sha": "3291286ad679be4c79f853e025e3b6d72a1c3da5", "filename": "compiler/rustc_lint/src/invalid_from_utf8.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_lint%2Fsrc%2Finvalid_from_utf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_lint%2Fsrc%2Finvalid_from_utf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finvalid_from_utf8.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -0,0 +1,118 @@\n+use std::str::Utf8Error;\n+\n+use rustc_ast::{BorrowKind, LitKind};\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_span::source_map::Spanned;\n+use rustc_span::sym;\n+\n+use crate::lints::InvalidFromUtf8Diag;\n+use crate::{LateContext, LateLintPass, LintContext};\n+\n+declare_lint! {\n+    /// The `invalid_from_utf8_unchecked` lint checks for calls to\n+    /// `std::str::from_utf8_unchecked` and `std::str::from_utf8_unchecked_mut`\n+    /// with an invalid UTF-8 literal.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// # #[allow(unused)]\n+    /// unsafe {\n+    ///     std::str::from_utf8_unchecked(b\"Ru\\x82st\");\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Creating such a `str` would result in undefined behavior as per documentation\n+    /// for `std::str::from_utf8_unchecked` and `std::str::from_utf8_unchecked_mut`.\n+    pub INVALID_FROM_UTF8_UNCHECKED,\n+    Deny,\n+    \"using a non UTF-8 literal in `std::str::from_utf8_unchecked`\"\n+}\n+\n+declare_lint! {\n+    /// The `invalid_from_utf8` lint checks for calls to\n+    /// `std::str::from_utf8` and `std::str::from_utf8_mut`\n+    /// with an invalid UTF-8 literal.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # #[allow(unused)]\n+    /// std::str::from_utf8(b\"Ru\\x82st\");\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Trying to create such a `str` would always return an error as per documentation\n+    /// for `std::str::from_utf8` and `std::str::from_utf8_mut`.\n+    pub INVALID_FROM_UTF8,\n+    Warn,\n+    \"using a non UTF-8 literal in `std::str::from_utf8`\"\n+}\n+\n+declare_lint_pass!(InvalidFromUtf8 => [INVALID_FROM_UTF8_UNCHECKED, INVALID_FROM_UTF8]);\n+\n+impl<'tcx> LateLintPass<'tcx> for InvalidFromUtf8 {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if let ExprKind::Call(path, [arg]) = expr.kind\n+            && let ExprKind::Path(ref qpath) = path.kind\n+            && let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id()\n+            && let Some(diag_item) = cx.tcx.get_diagnostic_name(def_id)\n+            && [sym::str_from_utf8, sym::str_from_utf8_mut,\n+                sym::str_from_utf8_unchecked, sym::str_from_utf8_unchecked_mut].contains(&diag_item)\n+        {\n+            let lint = |utf8_error: Utf8Error| {\n+                let label = arg.span;\n+                let method = diag_item.as_str().strip_prefix(\"str_\").unwrap();\n+                let method = format!(\"std::str::{method}\");\n+                let valid_up_to = utf8_error.valid_up_to();\n+                let is_unchecked_variant = diag_item.as_str().contains(\"unchecked\");\n+\n+                cx.emit_spanned_lint(\n+                    if is_unchecked_variant { INVALID_FROM_UTF8_UNCHECKED } else { INVALID_FROM_UTF8 },\n+                    expr.span,\n+                    if is_unchecked_variant {\n+                        InvalidFromUtf8Diag::Unchecked { method,  valid_up_to, label }\n+                    } else {\n+                        InvalidFromUtf8Diag::Checked { method,  valid_up_to, label }\n+                    }\n+                )\n+            };\n+\n+            match &arg.kind {\n+                ExprKind::Lit(Spanned { node: lit, .. }) => {\n+                    if let LitKind::ByteStr(bytes, _) = &lit\n+                        && let Err(utf8_error) = std::str::from_utf8(bytes)\n+                    {\n+                        lint(utf8_error);\n+                    }\n+                },\n+                ExprKind::AddrOf(BorrowKind::Ref, _, Expr { kind: ExprKind::Array(args), .. }) => {\n+                    let elements = args.iter().map(|e|{\n+                        match &e.kind {\n+                            ExprKind::Lit(Spanned { node: lit, .. }) => match lit {\n+                                LitKind::Byte(b) => Some(*b),\n+                                LitKind::Int(b, _) => Some(*b as u8),\n+                                _ => None\n+                            }\n+                            _ => None\n+                        }\n+                    }).collect::<Option<Vec<_>>>();\n+\n+                    if let Some(elements) = elements\n+                        && let Err(utf8_error) = std::str::from_utf8(&elements)\n+                    {\n+                        lint(utf8_error);\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+}"}, {"sha": "c62109b298629db779e807036da59ac73c467efa", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -60,6 +60,7 @@ mod expect;\n mod for_loops_over_fallibles;\n pub mod hidden_unicode_codepoints;\n mod internal;\n+mod invalid_from_utf8;\n mod late;\n mod let_underscore;\n mod levels;\n@@ -102,6 +103,7 @@ use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n use for_loops_over_fallibles::*;\n use hidden_unicode_codepoints::*;\n use internal::*;\n+use invalid_from_utf8::*;\n use let_underscore::*;\n use map_unit_fn::*;\n use methods::*;\n@@ -207,6 +209,7 @@ late_lint_methods!(\n             HardwiredLints: HardwiredLints,\n             ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n             ImproperCTypesDefinitions: ImproperCTypesDefinitions,\n+            InvalidFromUtf8: InvalidFromUtf8,\n             VariantSizeDifferences: VariantSizeDifferences,\n             BoxPointers: BoxPointers,\n             PathStatements: PathStatements,"}, {"sha": "746abebeb375af5cefb3e551067a3be543e48388", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -699,6 +699,25 @@ pub struct ForgetCopyDiag<'a> {\n     pub label: Span,\n }\n \n+// invalid_from_utf8.rs\n+#[derive(LintDiagnostic)]\n+pub enum InvalidFromUtf8Diag {\n+    #[diag(lint_invalid_from_utf8_unchecked)]\n+    Unchecked {\n+        method: String,\n+        valid_up_to: usize,\n+        #[label]\n+        label: Span,\n+    },\n+    #[diag(lint_invalid_from_utf8_checked)]\n+    Checked {\n+        method: String,\n+        valid_up_to: usize,\n+        #[label]\n+        label: Span,\n+    },\n+}\n+\n // hidden_unicode_codepoints.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_hidden_unicode_codepoints)]"}, {"sha": "09e24e012afa331ad36c77df8e63d283240efaf1", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -858,7 +858,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         } else {\n             tcx.arena.alloc_from_iter(lazy.decode((self, tcx)))\n         };\n-        ty::EarlyBinder::new(&*output)\n+        ty::EarlyBinder::bind(&*output)\n     }\n \n     fn get_variant("}, {"sha": "c673eb5afc79324b7222ea0d682969cd0a520d70", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -1730,7 +1730,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             ty::Closure(_, substs) => {\n                 let constness = self.tcx.constness(def_id.to_def_id());\n                 self.tables.constness.set_some(def_id.to_def_id().index, constness);\n-                record!(self.tables.fn_sig[def_id.to_def_id()] <- ty::EarlyBinder::new(substs.as_closure().sig()));\n+                record!(self.tables.fn_sig[def_id.to_def_id()] <- ty::EarlyBinder::bind(substs.as_closure().sig()));\n             }\n \n             _ => bug!(\"closure that is neither generator nor closure\"),"}, {"sha": "63cdba7f327f6e11ba52fb0837f40f8319a4b3f2", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -476,7 +476,7 @@ impl<'tcx> Body<'tcx> {\n     /// Returns the return type; it always return first element from `local_decls` array.\n     #[inline]\n     pub fn bound_return_ty(&self) -> ty::EarlyBinder<Ty<'tcx>> {\n-        ty::EarlyBinder::new(self.local_decls[RETURN_PLACE].ty)\n+        ty::EarlyBinder::bind(self.local_decls[RETURN_PLACE].ty)\n     }\n \n     /// Gets the location of the terminator for the given block."}, {"sha": "e067d2a984fde4f8a744d04ad765b4dbaf5ade1c", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -573,7 +573,7 @@ impl<'tcx> AdtDef<'tcx> {\n     /// Due to normalization being eager, this applies even if\n     /// the associated type is behind a pointer (e.g., issue #31299).\n     pub fn sized_constraint(self, tcx: TyCtxt<'tcx>) -> ty::EarlyBinder<&'tcx [Ty<'tcx>]> {\n-        ty::EarlyBinder::new(tcx.adt_sized_constraint(self.did()))\n+        ty::EarlyBinder::bind(tcx.adt_sized_constraint(self.did()))\n     }\n }\n "}, {"sha": "aecb46556b0410fcde32c0bf9a9c077e421f40d0", "filename": "compiler/rustc_middle/src/ty/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -254,5 +254,5 @@ pub fn const_param_default(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBind\n             \"`const_param_default` expected a generic parameter with a constant\"\n         ),\n     };\n-    ty::EarlyBinder::new(Const::from_anon_const(tcx, default_def_id))\n+    ty::EarlyBinder::bind(Const::from_anon_const(tcx, default_def_id))\n }"}, {"sha": "30f92b91cb7a01b155babf947f8afa167c692db3", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -343,7 +343,7 @@ impl<'tcx> GenericPredicates<'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> impl Iterator<Item = (Predicate<'tcx>, Span)> + DoubleEndedIterator + ExactSizeIterator\n     {\n-        EarlyBinder::new(self.predicates).subst_iter_copied(tcx, substs)\n+        EarlyBinder::bind(self.predicates).subst_iter_copied(tcx, substs)\n     }\n \n     #[instrument(level = \"debug\", skip(self, tcx))]\n@@ -358,7 +358,7 @@ impl<'tcx> GenericPredicates<'tcx> {\n         }\n         instantiated\n             .predicates\n-            .extend(self.predicates.iter().map(|(p, _)| EarlyBinder::new(*p).subst(tcx, substs)));\n+            .extend(self.predicates.iter().map(|(p, _)| EarlyBinder::bind(*p).subst(tcx, substs)));\n         instantiated.spans.extend(self.predicates.iter().map(|(_, sp)| *sp));\n     }\n "}, {"sha": "d48672b2baaeec5015d7344253a56a90f87aacc1", "filename": "compiler/rustc_middle/src/ty/inhabitedness/inhabited_predicate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Finhabited_predicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Finhabited_predicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Finhabited_predicate.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -158,7 +158,7 @@ impl<'tcx> InhabitedPredicate<'tcx> {\n     fn subst_opt(self, tcx: TyCtxt<'tcx>, substs: ty::SubstsRef<'tcx>) -> Option<Self> {\n         match self {\n             Self::ConstIsZero(c) => {\n-                let c = ty::EarlyBinder::new(c).subst(tcx, substs);\n+                let c = ty::EarlyBinder::bind(c).subst(tcx, substs);\n                 let pred = match c.kind().try_to_target_usize(tcx) {\n                     Some(0) => Self::True,\n                     Some(1..) => Self::False,\n@@ -167,7 +167,7 @@ impl<'tcx> InhabitedPredicate<'tcx> {\n                 Some(pred)\n             }\n             Self::GenericType(t) => {\n-                Some(ty::EarlyBinder::new(t).subst(tcx, substs).inhabited_predicate(tcx))\n+                Some(ty::EarlyBinder::bind(t).subst(tcx, substs).inhabited_predicate(tcx))\n             }\n             Self::And(&[a, b]) => match a.subst_opt(tcx, substs) {\n                 None => b.subst_opt(tcx, substs).map(|b| a.and(tcx, b)),"}, {"sha": "72341e656e29e6ea7ab8672effb27eff0d48790b", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -764,7 +764,7 @@ impl<'tcx> Predicate<'tcx> {\n         let shifted_pred =\n             tcx.shift_bound_var_indices(trait_bound_vars.len(), bound_pred.skip_binder());\n         // 2) Self: Bar1<'a, '^0.1> -> T: Bar1<'^0.0, '^0.1>\n-        let new = EarlyBinder::new(shifted_pred).subst(tcx, trait_ref.skip_binder().substs);\n+        let new = EarlyBinder::bind(shifted_pred).subst(tcx, trait_ref.skip_binder().substs);\n         // 3) ['x] + ['b] -> ['x, 'b]\n         let bound_vars =\n             tcx.mk_bound_variable_kinds_from_iter(trait_bound_vars.iter().chain(pred_bound_vars));"}, {"sha": "d19a7bcde79bc8fc3800f3db308e68707df981a3", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -568,7 +568,7 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n         let layout = tcx.generator_layout(def_id).unwrap();\n         layout.variant_fields.iter().map(move |variant| {\n             variant.iter().map(move |field| {\n-                ty::EarlyBinder::new(layout.field_tys[*field].ty).subst(tcx, self.substs)\n+                ty::EarlyBinder::bind(layout.field_tys[*field].ty).subst(tcx, self.substs)\n             })\n         })\n     }"}, {"sha": "8685a22d9ca88767fb7168ed01795f0f5e76b2cc", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -545,7 +545,7 @@ impl<'tcx, T> !TypeFoldable<TyCtxt<'tcx>> for ty::EarlyBinder<T> {}\n impl<'tcx, T> !TypeVisitable<TyCtxt<'tcx>> for ty::EarlyBinder<T> {}\n \n impl<T> EarlyBinder<T> {\n-    pub fn new(inner: T) -> EarlyBinder<T> {\n+    pub fn bind(inner: T) -> EarlyBinder<T> {\n         EarlyBinder(inner)\n     }\n "}, {"sha": "311f63adc7f4962bbdc9a012b2e6f4e6146c2a23", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -709,7 +709,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             .as_ref()\n             .map_or_else(|| [].iter(), |l| l.field_tys.iter())\n             .filter(|decl| !decl.ignore_for_traits)\n-            .map(|decl| ty::EarlyBinder::new(decl.ty))\n+            .map(|decl| ty::EarlyBinder::bind(decl.ty))\n     }\n \n     /// Normalizes all opaque types in the given value, replacing them"}, {"sha": "a00c77ccbcdc2a115cb311f6633258f3abc11e59", "filename": "compiler/rustc_middle/src/values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fvalues.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -96,13 +96,13 @@ impl<'tcx> Value<TyCtxt<'tcx>, DepKind> for Representability {\n \n impl<'tcx> Value<TyCtxt<'tcx>, DepKind> for ty::EarlyBinder<Ty<'_>> {\n     fn from_cycle_error(tcx: TyCtxt<'tcx>, cycle: &[QueryInfo<DepKind>]) -> Self {\n-        ty::EarlyBinder::new(Ty::from_cycle_error(tcx, cycle))\n+        ty::EarlyBinder::bind(Ty::from_cycle_error(tcx, cycle))\n     }\n }\n \n impl<'tcx> Value<TyCtxt<'tcx>, DepKind> for ty::EarlyBinder<ty::Binder<'_, ty::FnSig<'_>>> {\n     fn from_cycle_error(tcx: TyCtxt<'tcx>, cycle: &[QueryInfo<DepKind>]) -> Self {\n-        ty::EarlyBinder::new(ty::Binder::from_cycle_error(tcx, cycle))\n+        ty::EarlyBinder::bind(ty::Binder::from_cycle_error(tcx, cycle))\n     }\n }\n "}, {"sha": "b1c9c4acc40e44d7eae43c9d75898c9a7b36c9b0", "filename": "compiler/rustc_mir_transform/src/function_item_references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ffunction_item_references.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -83,7 +83,7 @@ impl<'tcx> FunctionItemRefChecker<'_, 'tcx> {\n                         // If the inner type matches the type bound by `Pointer`\n                         if inner_ty == bound_ty {\n                             // Do a substitution using the parameters from the callsite\n-                            let subst_ty = EarlyBinder::new(inner_ty).subst(self.tcx, substs_ref);\n+                            let subst_ty = EarlyBinder::bind(inner_ty).subst(self.tcx, substs_ref);\n                             if let Some((fn_id, fn_substs)) =\n                                 FunctionItemRefChecker::is_fn_ref(subst_ty)\n                             {"}, {"sha": "55b9f084c39f7265f754a1f2e5e1e47fc9eea162", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -192,7 +192,7 @@ impl<'tcx> Inliner<'tcx> {\n         let Ok(callee_body) = callsite.callee.try_subst_mir_and_normalize_erasing_regions(\n             self.tcx,\n             self.param_env,\n-            ty::EarlyBinder::new(callee_body.clone()),\n+            ty::EarlyBinder::bind(callee_body.clone()),\n         ) else {\n             return Err(\"failed to normalize callee body\");\n         };\n@@ -455,7 +455,7 @@ impl<'tcx> Inliner<'tcx> {\n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n                 let ty = callsite\n                     .callee\n-                    .subst_mir(self.tcx, ty::EarlyBinder::new(&place.ty(callee_body, tcx).ty));\n+                    .subst_mir(self.tcx, ty::EarlyBinder::bind(&place.ty(callee_body, tcx).ty));\n                 if ty.needs_drop(tcx, self.param_env) && let UnwindAction::Cleanup(unwind) = unwind {\n                     work_list.push(unwind);\n                 }\n@@ -790,7 +790,7 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n                 let ty = self\n                     .instance\n-                    .subst_mir(tcx, ty::EarlyBinder::new(&place.ty(self.callee_body, tcx).ty));\n+                    .subst_mir(tcx, ty::EarlyBinder::bind(&place.ty(self.callee_body, tcx).ty));\n                 if ty.needs_drop(tcx, self.param_env) {\n                     self.cost += CALL_PENALTY;\n                     if let UnwindAction::Cleanup(_) = unwind {\n@@ -801,7 +801,7 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n                 }\n             }\n             TerminatorKind::Call { func: Operand::Constant(ref f), unwind, .. } => {\n-                let fn_ty = self.instance.subst_mir(tcx, ty::EarlyBinder::new(&f.literal.ty()));\n+                let fn_ty = self.instance.subst_mir(tcx, ty::EarlyBinder::bind(&f.literal.ty()));\n                 self.cost += if let ty::FnDef(def_id, _) = *fn_ty.kind() && tcx.is_intrinsic(def_id) {\n                     // Don't give intrinsics the extra penalty for calls\n                     INSTR_COST"}, {"sha": "8a10445f8377e2210221dfbff7f6e5bf23ab527f", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn mir_callgraph_reachable<'tcx>(\n             let Ok(substs) = caller.try_subst_mir_and_normalize_erasing_regions(\n                 tcx,\n                 param_env,\n-                ty::EarlyBinder::new(substs),\n+                ty::EarlyBinder::bind(substs),\n             ) else {\n                 trace!(?caller, ?param_env, ?substs, \"cannot normalize, skipping\");\n                 continue;"}, {"sha": "ae726dea944265a0775b80849defc95907b8376b", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -69,7 +69,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'\n             // of this function. Is this intentional?\n             if let Some(ty::Generator(gen_def_id, substs, _)) = ty.map(Ty::kind) {\n                 let body = tcx.optimized_mir(*gen_def_id).generator_drop().unwrap();\n-                let body = EarlyBinder::new(body.clone()).subst(tcx, substs);\n+                let body = EarlyBinder::bind(body.clone()).subst(tcx, substs);\n                 debug!(\"make_shim({:?}) = {:?}\", instance, body);\n                 return body;\n             }"}, {"sha": "cefa64d27acbadba858c0f6229ca9b6a0507dc92", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -677,7 +677,7 @@ impl<'a, 'tcx> MirNeighborCollector<'a, 'tcx> {\n         self.instance.subst_mir_and_normalize_erasing_regions(\n             self.tcx,\n             ty::ParamEnv::reveal_all(),\n-            ty::EarlyBinder::new(value),\n+            ty::EarlyBinder::bind(value),\n         )\n     }\n }"}, {"sha": "f6a80b0431fc33fa7afb19076db9871db0e740c5", "filename": "compiler/rustc_monomorphize/src/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -29,12 +29,12 @@ pub(crate) fn dump_closure_profile<'tcx>(tcx: TyCtxt<'tcx>, closure_instance: In\n         let before_feature_tys = tcx.subst_and_normalize_erasing_regions(\n             closure_instance.substs,\n             param_env,\n-            ty::EarlyBinder::new(before_feature_tys),\n+            ty::EarlyBinder::bind(before_feature_tys),\n         );\n         let after_feature_tys = tcx.subst_and_normalize_erasing_regions(\n             closure_instance.substs,\n             param_env,\n-            ty::EarlyBinder::new(after_feature_tys),\n+            ty::EarlyBinder::bind(after_feature_tys),\n         );\n \n         let new_size = tcx"}, {"sha": "1185563ea8063e989bafb23f980782ced36eddd3", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -1454,6 +1454,10 @@ symbols! {\n         stop_after_dataflow,\n         store,\n         str,\n+        str_from_utf8,\n+        str_from_utf8_mut,\n+        str_from_utf8_unchecked,\n+        str_from_utf8_unchecked_mut,\n         str_split_whitespace,\n         str_trim,\n         str_trim_end,"}, {"sha": "0a805e2422d40e4d80bcfd59ec1f7ddf40a2600a", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -274,7 +274,7 @@ impl<'tcx> Printer<'tcx> for &mut SymbolMangler<'tcx> {\n \n         let mut param_env = self.tcx.param_env_reveal_all_normalized(impl_def_id);\n         if !substs.is_empty() {\n-            param_env = EarlyBinder::new(param_env).subst(self.tcx, substs);\n+            param_env = EarlyBinder::bind(param_env).subst(self.tcx, substs);\n         }\n \n         match &mut impl_trait_ref {"}, {"sha": "4b38687eebeef7b0f907ae15abcc4bc2e9bf8170", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -487,7 +487,7 @@ fn is_impossible_method(tcx: TyCtxt<'_>, (impl_def_id, trait_item_def_id): (DefI\n                 tcx,\n                 ObligationCause::dummy_with_span(*span),\n                 param_env,\n-                ty::EarlyBinder::new(*pred).subst(tcx, impl_trait_ref.substs),\n+                ty::EarlyBinder::bind(*pred).subst(tcx, impl_trait_ref.substs),\n             )\n         })\n     });"}, {"sha": "9582479941b66cd8148ab9e934fe87ef4920a9d9", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -642,7 +642,7 @@ fn receiver_for_self_ty<'tcx>(\n         if param.index == 0 { self_ty.into() } else { tcx.mk_param_from_def(param) }\n     });\n \n-    let result = EarlyBinder::new(receiver_ty).subst(tcx, substs);\n+    let result = EarlyBinder::bind(receiver_ty).subst(tcx, substs);\n     debug!(\n         \"receiver_for_self_ty({:?}, {:?}, {:?}) = {:?}\",\n         receiver_ty, self_ty, method_def_id, result"}, {"sha": "709c3f432e609a27f103f2cdc0605227501c5f19", "filename": "compiler/rustc_trait_selection/src/traits/query/dropck_outlives.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -307,13 +307,13 @@ pub fn dtorck_constraint_for_ty_inner<'tcx>(\n             // there, but that needs some way to handle cycles.\n             constraints\n                 .dtorck_types\n-                .extend(dtorck_types.iter().map(|t| EarlyBinder::new(*t).subst(tcx, substs)));\n+                .extend(dtorck_types.iter().map(|t| EarlyBinder::bind(*t).subst(tcx, substs)));\n             constraints\n                 .outlives\n-                .extend(outlives.iter().map(|t| EarlyBinder::new(*t).subst(tcx, substs)));\n+                .extend(outlives.iter().map(|t| EarlyBinder::bind(*t).subst(tcx, substs)));\n             constraints\n                 .overflows\n-                .extend(overflows.iter().map(|t| EarlyBinder::new(*t).subst(tcx, substs)));\n+                .extend(overflows.iter().map(|t| EarlyBinder::bind(*t).subst(tcx, substs)));\n         }\n \n         // Objects must be alive in order for their destructor"}, {"sha": "57b4183d336718bb4588b8de48fa800ee70ae3fd", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -301,7 +301,7 @@ fn associated_type_for_impl_trait_in_trait(\n     trait_assoc_ty.impl_defaultness(tcx.impl_defaultness(fn_def_id));\n \n     // Copy type_of of the opaque.\n-    trait_assoc_ty.type_of(ty::EarlyBinder::new(tcx.mk_opaque(\n+    trait_assoc_ty.type_of(ty::EarlyBinder::bind(tcx.mk_opaque(\n         opaque_ty_def_id.to_def_id(),\n         InternalSubsts::identity_for_item(tcx, opaque_ty_def_id),\n     )));"}, {"sha": "ce77df0df5dcf49abb5bf224160ed35a5b9e09cf", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -419,7 +419,7 @@ pub fn thir_abstract_const(\n \n     let root_span = body.exprs[body_id].span;\n \n-    Ok(Some(ty::EarlyBinder::new(recurse_build(tcx, body, body_id, root_span)?)))\n+    Ok(Some(ty::EarlyBinder::bind(recurse_build(tcx, body, body_id, root_span)?)))\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "7015778e24b8568f5b0cc68cef25a93c3bf55af3", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -610,7 +610,7 @@ fn generator_layout<'tcx>(\n ) -> Result<Layout<'tcx>, LayoutError<'tcx>> {\n     use SavedLocalEligibility::*;\n     let tcx = cx.tcx;\n-    let subst_field = |ty: Ty<'tcx>| EarlyBinder::new(ty).subst(tcx, substs);\n+    let subst_field = |ty: Ty<'tcx>| EarlyBinder::bind(ty).subst(tcx, substs);\n \n     let Some(info) = tcx.generator_layout(def_id) else {\n         return Err(LayoutError::Unknown(ty));"}, {"sha": "9d593dc5e04eeeca980ce7deb5b7f48b248d7012", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -210,7 +210,7 @@ fn drop_tys_helper<'tcx>(\n             match subty.kind() {\n                 ty::Adt(adt_id, subst) => {\n                     for subty in tcx.adt_drop_tys(adt_id.did())? {\n-                        vec.push(EarlyBinder::new(subty).subst(tcx, subst));\n+                        vec.push(EarlyBinder::bind(subty).subst(tcx, subst));\n                     }\n                 }\n                 _ => vec.push(subty),"}, {"sha": "12ad8b0842f5e4f1eb7abbca3a25e6cb618c831f", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -507,7 +507,7 @@ fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<EarlyBinder<Ty<'\n \n     if self_ty_matches {\n         debug!(\"issue33140_self_ty - MATCHES!\");\n-        Some(EarlyBinder::new(self_ty))\n+        Some(EarlyBinder::bind(self_ty))\n     } else {\n         debug!(\"issue33140_self_ty - non-matching self type\");\n         None"}, {"sha": "0ba5d088f6174212b720ba4d81799aa75e2d3f7c", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -1,3 +1,5 @@\n+#![cfg_attr(not(bootstrap), allow(invalid_from_utf8))]\n+\n use std::assert_matches::assert_matches;\n use std::borrow::Cow;\n use std::cmp::Ordering::{Equal, Greater, Less};"}, {"sha": "78091c0172955bd97394e28b83ddaffb501d7976", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -94,8 +94,9 @@ impl fmt::Display for AllocError {\n ///\n /// # Safety\n ///\n-/// * Memory blocks returned from an allocator must point to valid memory and retain their validity\n-///   until the instance and all of its copies and clones are dropped,\n+/// * Memory blocks returned from an allocator that are [*currently allocated*] must point to\n+///   valid memory and retain their validity while they are [*currently allocated*] and at\n+///   least one of the instance and all of its clones has not been dropped.\n ///\n /// * copying, cloning, or moving the allocator must not invalidate memory blocks returned from this\n ///   allocator. A copied or cloned allocator must behave like the same allocator, and"}, {"sha": "0f23cf7ae239fbf07a27549af25c68665ac03a6e", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -84,6 +84,7 @@ use super::Utf8Error;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"const_str_from_utf8_shared\", since = \"1.63.0\")]\n #[rustc_allow_const_fn_unstable(str_internals)]\n+#[rustc_diagnostic_item = \"str_from_utf8\"]\n pub const fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n     // FIXME: This should use `?` again, once it's `const`\n     match run_utf8_validation(v) {\n@@ -127,6 +128,7 @@ pub const fn from_utf8(v: &[u8]) -> Result<&str, Utf8Error> {\n /// errors that can be returned.\n #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n #[rustc_const_unstable(feature = \"const_str_from_utf8\", issue = \"91006\")]\n+#[rustc_diagnostic_item = \"str_from_utf8_mut\"]\n pub const fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n     // This should use `?` again, once it's `const`\n     match run_utf8_validation(v) {\n@@ -167,6 +169,7 @@ pub const fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"const_str_from_utf8_unchecked\", since = \"1.55.0\")]\n+#[rustc_diagnostic_item = \"str_from_utf8_unchecked\"]\n pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n     // SAFETY: the caller must guarantee that the bytes `v` are valid UTF-8.\n     // Also relies on `&str` and `&[u8]` having the same layout.\n@@ -194,6 +197,7 @@ pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n #[must_use]\n #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n #[rustc_const_unstable(feature = \"const_str_from_utf8_unchecked_mut\", issue = \"91005\")]\n+#[rustc_diagnostic_item = \"str_from_utf8_unchecked_mut\"]\n pub const unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {\n     // SAFETY: the caller must guarantee that the bytes `v`\n     // are valid UTF-8, thus the cast to `*mut str` is safe."}, {"sha": "30359e47e73be92367d3a2553cdf08be82ed09e5", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 21, "deletions": 23, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -103,11 +103,14 @@ impl RunConfig<'_> {\n     }\n \n     /// Return a list of crate names selected by `run.paths`.\n+    #[track_caller]\n     pub fn cargo_crates_in_set(&self) -> Interned<Vec<String>> {\n         let mut crates = Vec::new();\n         for krate in &self.paths {\n             let path = krate.assert_single_path();\n-            let crate_name = self.builder.crate_paths[&path.path];\n+            let Some(crate_name) = self.builder.crate_paths.get(&path.path) else {\n+                panic!(\"missing crate for path {}\", path.path.display())\n+            };\n             crates.push(crate_name.to_string());\n         }\n         INTERNER.intern_list(crates)\n@@ -427,25 +430,6 @@ impl<'a> ShouldRun<'a> {\n         }\n     }\n \n-    /// Indicates it should run if the command-line selects the given crate or\n-    /// any of its (local) dependencies.\n-    ///\n-    /// Compared to `krate`, this treats the dependencies as aliases for the\n-    /// same job. Generally it is preferred to use `krate`, and treat each\n-    /// individual path separately. For example `./x.py test src/liballoc`\n-    /// (which uses `krate`) will test just `liballoc`. However, `./x.py check\n-    /// src/liballoc` (which uses `all_krates`) will check all of `libtest`.\n-    /// `all_krates` should probably be removed at some point.\n-    pub fn all_krates(mut self, name: &str) -> Self {\n-        let mut set = BTreeSet::new();\n-        for krate in self.builder.in_tree_crates(name, None) {\n-            let path = krate.local_path(self.builder);\n-            set.insert(TaskPath { path, kind: Some(self.kind) });\n-        }\n-        self.paths.insert(PathSet::Set(set));\n-        self\n-    }\n-\n     /// Indicates it should run if the command-line selects the given crate or\n     /// any of its (local) dependencies.\n     ///\n@@ -458,6 +442,8 @@ impl<'a> ShouldRun<'a> {\n     /// Indicates it should run if the command-line selects any of the given crates.\n     ///\n     /// `make_run` will be called a single time with all matching command-line paths.\n+    ///\n+    /// Prefer [`ShouldRun::crate_or_deps`] to this function where possible.\n     pub(crate) fn crates(mut self, crates: Vec<&Crate>) -> Self {\n         for krate in crates {\n             let path = krate.local_path(self.builder);\n@@ -487,7 +473,15 @@ impl<'a> ShouldRun<'a> {\n         self.paths(&[path])\n     }\n \n-    // multiple aliases for the same job\n+    /// Multiple aliases for the same job.\n+    ///\n+    /// This differs from [`path`] in that multiple calls to path will end up calling `make_run`\n+    /// multiple times, whereas a single call to `paths` will only ever generate a single call to\n+    /// `paths`.\n+    ///\n+    /// This is analogous to `all_krates`, although `all_krates` is gone now. Prefer [`path`] where possible.\n+    ///\n+    /// [`path`]: ShouldRun::path\n     pub fn paths(mut self, paths: &[&str]) -> Self {\n         static SUBMODULES_PATHS: OnceCell<Vec<String>> = OnceCell::new();\n \n@@ -641,12 +635,16 @@ impl Kind {\n         }\n     }\n \n-    pub fn test_description(&self) -> &'static str {\n+    pub fn description(&self) -> String {\n         match self {\n             Kind::Test => \"Testing\",\n             Kind::Bench => \"Benchmarking\",\n-            _ => panic!(\"not a test command: {}!\", self.as_str()),\n+            Kind::Doc => \"Documenting\",\n+            Kind::Run => \"Running\",\n+            Kind::Suggest => \"Suggesting\",\n+            _ => return format!(\"{self:?}\"),\n         }\n+        .to_owned()\n     }\n }\n "}, {"sha": "d76b830b0e530d62477b20d797101b0578366d0d", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -1,5 +1,6 @@\n use super::*;\n use crate::config::{Config, DryRun, TargetSelection};\n+use crate::doc::DocumentationFormat;\n use std::thread;\n \n fn configure(cmd: &str, host: &[&str], target: &[&str]) -> Config {\n@@ -66,6 +67,16 @@ macro_rules! std {\n     };\n }\n \n+macro_rules! doc_std {\n+    ($host:ident => $target:ident, stage = $stage:literal) => {\n+        doc::Std::new(\n+            $stage,\n+            TargetSelection::from_user(stringify!($target)),\n+            DocumentationFormat::HTML,\n+        )\n+    };\n+}\n+\n macro_rules! rustc {\n     ($host:ident => $target:ident, stage = $stage:literal) => {\n         compile::Rustc::new(\n@@ -144,6 +155,9 @@ fn alias_and_path_for_library() {\n         first(cache.all::<compile::Std>()),\n         &[std!(A => A, stage = 0), std!(A => A, stage = 1)]\n     );\n+\n+    let mut cache = run_build(&[\"library\".into(), \"core\".into()], configure(\"doc\", &[\"A\"], &[\"A\"]));\n+    assert_eq!(first(cache.all::<doc::Std>()), &[doc_std!(A => A, stage = 0)]);\n }\n \n #[test]"}, {"sha": "f5a93854bf2c4e1c4eda6d58b43bd47b5bb62dcd", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 61, "deletions": 18, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -1,8 +1,10 @@\n //! Implementation of compiling the compiler and standard library, in \"check\"-based modes.\n \n-use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n+use crate::builder::{crate_description, Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n-use crate::compile::{add_to_sysroot, run_cargo, rustc_cargo, rustc_cargo_env, std_cargo};\n+use crate::compile::{\n+    add_to_sysroot, make_run_crates, run_cargo, rustc_cargo, rustc_cargo_env, std_cargo,\n+};\n use crate::config::TargetSelection;\n use crate::tool::{prepare_tool_cargo, SourceType};\n use crate::INTERNER;\n@@ -12,6 +14,12 @@ use std::path::{Path, PathBuf};\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Std {\n     pub target: TargetSelection,\n+    /// Whether to build only a subset of crates.\n+    ///\n+    /// This shouldn't be used from other steps; see the comment on [`compile::Rustc`].\n+    ///\n+    /// [`compile::Rustc`]: crate::compile::Rustc\n+    crates: Interned<Vec<String>>,\n }\n \n /// Returns args for the subcommand itself (not for cargo)\n@@ -66,16 +74,23 @@ fn cargo_subcommand(kind: Kind) -> &'static str {\n     }\n }\n \n+impl Std {\n+    pub fn new(target: TargetSelection) -> Self {\n+        Self { target, crates: INTERNER.intern_list(vec![]) }\n+    }\n+}\n+\n impl Step for Std {\n     type Output = ();\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"sysroot\").path(\"library\")\n+        run.crate_or_deps(\"sysroot\").path(\"library\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Std { target: run.target });\n+        let crates = make_run_crates(&run, \"library\");\n+        run.builder.ensure(Std { target: run.target, crates });\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n@@ -97,7 +112,14 @@ impl Step for Std {\n             cargo.arg(\"--lib\");\n         }\n \n-        let _guard = builder.msg_check(\"library artifacts\", target);\n+        for krate in &*self.crates {\n+            cargo.arg(\"-p\").arg(krate);\n+        }\n+\n+        let _guard = builder.msg_check(\n+            format_args!(\"library artifacts{}\", crate_description(&self.crates)),\n+            target,\n+        );\n         run_cargo(\n             builder,\n             cargo,\n@@ -117,7 +139,8 @@ impl Step for Std {\n         }\n \n         // don't run on std twice with x.py clippy\n-        if builder.kind == Kind::Clippy {\n+        // don't check test dependencies if we haven't built libtest\n+        if builder.kind == Kind::Clippy || !self.crates.is_empty() {\n             return;\n         }\n \n@@ -147,8 +170,8 @@ impl Step for Std {\n         // Explicitly pass -p for all dependencies krates -- this will force cargo\n         // to also check the tests/benches/examples for these crates, rather\n         // than just the leaf crate.\n-        for krate in builder.in_tree_crates(\"test\", Some(target)) {\n-            cargo.arg(\"-p\").arg(krate.name);\n+        for krate in &*self.crates {\n+            cargo.arg(\"-p\").arg(krate);\n         }\n \n         let _guard = builder.msg_check(\"library test/bench/example targets\", target);\n@@ -167,6 +190,22 @@ impl Step for Std {\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Rustc {\n     pub target: TargetSelection,\n+    /// Whether to build only a subset of crates.\n+    ///\n+    /// This shouldn't be used from other steps; see the comment on [`compile::Rustc`].\n+    ///\n+    /// [`compile::Rustc`]: crate::compile::Rustc\n+    crates: Interned<Vec<String>>,\n+}\n+\n+impl Rustc {\n+    pub fn new(target: TargetSelection, builder: &Builder<'_>) -> Self {\n+        let mut crates = vec![];\n+        for krate in builder.in_tree_crates(\"rustc-main\", None) {\n+            crates.push(krate.name.to_string());\n+        }\n+        Self { target, crates: INTERNER.intern_list(crates) }\n+    }\n }\n \n impl Step for Rustc {\n@@ -175,11 +214,12 @@ impl Step for Rustc {\n     const DEFAULT: bool = true;\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.all_krates(\"rustc-main\").path(\"compiler\")\n+        run.crate_or_deps(\"rustc-main\").path(\"compiler\")\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Rustc { target: run.target });\n+        let crates = make_run_crates(&run, \"compiler\");\n+        run.builder.ensure(Rustc { target: run.target, crates });\n     }\n \n     /// Builds the compiler.\n@@ -200,7 +240,7 @@ impl Step for Rustc {\n             builder.ensure(crate::compile::Std::new(compiler, compiler.host));\n             builder.ensure(crate::compile::Std::new(compiler, target));\n         } else {\n-            builder.ensure(Std { target });\n+            builder.ensure(Std::new(target));\n         }\n \n         let mut cargo = builder.cargo(\n@@ -218,14 +258,17 @@ impl Step for Rustc {\n             cargo.arg(\"--all-targets\");\n         }\n \n-        // Explicitly pass -p for all compiler krates -- this will force cargo\n+        // Explicitly pass -p for all compiler crates -- this will force cargo\n         // to also check the tests/benches/examples for these crates, rather\n         // than just the leaf crate.\n-        for krate in builder.in_tree_crates(\"rustc-main\", Some(target)) {\n-            cargo.arg(\"-p\").arg(krate.name);\n+        for krate in &*self.crates {\n+            cargo.arg(\"-p\").arg(krate);\n         }\n \n-        let _guard = builder.msg_check(\"compiler artifacts\", target);\n+        let _guard = builder.msg_check(\n+            format_args!(\"compiler artifacts{}\", crate_description(&self.crates)),\n+            target,\n+        );\n         run_cargo(\n             builder,\n             cargo,\n@@ -268,7 +311,7 @@ impl Step for CodegenBackend {\n         let target = self.target;\n         let backend = self.backend;\n \n-        builder.ensure(Rustc { target });\n+        builder.ensure(Rustc::new(target, builder));\n \n         let mut cargo = builder.cargo(\n             compiler,\n@@ -318,7 +361,7 @@ impl Step for RustAnalyzer {\n         let compiler = builder.compiler(builder.top_stage, builder.config.build);\n         let target = self.target;\n \n-        builder.ensure(Std { target });\n+        builder.ensure(Std::new(target));\n \n         let mut cargo = prepare_tool_cargo(\n             builder,\n@@ -386,7 +429,7 @@ macro_rules! tool_check_step {\n                 let compiler = builder.compiler(builder.top_stage, builder.config.build);\n                 let target = self.target;\n \n-                builder.ensure(Rustc { target });\n+                builder.ensure(Rustc::new(target, builder));\n \n                 let mut cargo = prepare_tool_cargo(\n                     builder,"}, {"sha": "a7ebd018a879116db5785ba538aa9537bc8e2ec6", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -48,6 +48,17 @@ impl Std {\n     }\n }\n \n+/// Given an `alias` selected by the `Step` and the paths passed on the command line,\n+/// return a list of the crates that should be built.\n+///\n+/// Normally, people will pass *just* `library` if they pass it.\n+/// But it's possible (although strange) to pass something like `library std core`.\n+/// Build all crates anyway, as if they hadn't passed the other args.\n+pub(crate) fn make_run_crates(run: &RunConfig<'_>, alias: &str) -> Interned<Vec<String>> {\n+    let has_alias = run.paths.iter().any(|set| set.assert_single_path().path.ends_with(alias));\n+    if has_alias { Default::default() } else { run.cargo_crates_in_set() }\n+}\n+\n impl Step for Std {\n     type Output = ();\n     const DEFAULT: bool = true;\n@@ -62,16 +73,10 @@ impl Step for Std {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        // Normally, people will pass *just* library if they pass it.\n-        // But it's possible (although strange) to pass something like `library std core`.\n-        // Build all crates anyway, as if they hadn't passed the other args.\n-        let has_library =\n-            run.paths.iter().any(|set| set.assert_single_path().path.ends_with(\"library\"));\n-        let crates = if has_library { Default::default() } else { run.cargo_crates_in_set() };\n         run.builder.ensure(Std {\n             compiler: run.builder.compiler(run.builder.top_stage, run.build_triple()),\n             target: run.target,\n-            crates,\n+            crates: make_run_crates(&run, \"library\"),\n         });\n     }\n \n@@ -615,6 +620,8 @@ impl Step for Rustc {\n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let mut crates = run.builder.in_tree_crates(\"rustc-main\", None);\n         for (i, krate) in crates.iter().enumerate() {\n+            // We can't allow `build rustc` as an alias for this Step, because that's reserved by `Assemble`.\n+            // Ideally Assemble would use `build compiler` instead, but that seems too confusing to be worth the breaking change.\n             if krate.name == \"rustc-main\" {\n                 crates.swap_remove(i);\n                 break;"}, {"sha": "46fc5b80e99d48f12aa1b80663b6a8d49e2c415f", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -106,11 +106,7 @@ impl Step for JsonDocs {\n     /// Builds the `rust-docs-json` installer component.\n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let host = self.host;\n-        builder.ensure(crate::doc::Std {\n-            stage: builder.top_stage,\n-            target: host,\n-            format: DocumentationFormat::JSON,\n-        });\n+        builder.ensure(crate::doc::Std::new(builder.top_stage, host, DocumentationFormat::JSON));\n \n         let dest = \"share/doc/rust/json\";\n "}, {"sha": "3de85c91516c4759d7e4452c87192d2ce294f2d8", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 105, "deletions": 105, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -7,7 +7,6 @@\n //! Everything here is basically just a shim around calling either `rustbook` or\n //! `rustdoc`.\n \n-use std::ffi::OsStr;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n@@ -16,6 +15,7 @@ use crate::builder::crate_description;\n use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::compile;\n+use crate::compile::make_run_crates;\n use crate::config::{Config, TargetSelection};\n use crate::tool::{self, prepare_tool_cargo, SourceType, Tool};\n use crate::util::{symlink_dir, t, up_to_date};\n@@ -87,15 +87,6 @@ book!(\n     StyleGuide, \"src/doc/style-guide\", \"style-guide\";\n );\n \n-// \"library/std\" -> [\"library\", \"std\"]\n-//\n-// Used for deciding whether a particular step is one requested by the user on\n-// the `x.py doc` command line, which determines whether `--open` will open that\n-// page.\n-pub(crate) fn components_simplified(path: &PathBuf) -> Vec<&str> {\n-    path.iter().map(|component| component.to_str().unwrap_or(\"???\")).collect()\n-}\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct UnstableBook {\n     target: TargetSelection,\n@@ -425,11 +416,18 @@ impl Step for SharedAssets {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord)]\n pub struct Std {\n     pub stage: u32,\n     pub target: TargetSelection,\n     pub format: DocumentationFormat,\n+    crates: Interned<Vec<String>>,\n+}\n+\n+impl Std {\n+    pub(crate) fn new(stage: u32, target: TargetSelection, format: DocumentationFormat) -> Self {\n+        Std { stage, target, format, crates: INTERNER.intern_list(vec![]) }\n+    }\n }\n \n impl Step for Std {\n@@ -438,7 +436,7 @@ impl Step for Std {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.all_krates(\"sysroot\").path(\"library\").default_condition(builder.config.docs)\n+        run.crate_or_deps(\"sysroot\").path(\"library\").default_condition(builder.config.docs)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -450,14 +448,15 @@ impl Step for Std {\n             } else {\n                 DocumentationFormat::HTML\n             },\n+            crates: make_run_crates(&run, \"library\"),\n         });\n     }\n \n     /// Compile all standard library documentation.\n     ///\n     /// This will generate all documentation for the standard library and its\n     /// dependencies. This is largely just a wrapper around `cargo doc`.\n-    fn run(self, builder: &Builder<'_>) {\n+    fn run(mut self, builder: &Builder<'_>) {\n         let stage = self.stage;\n         let target = self.target;\n         let out = match self.format {\n@@ -471,41 +470,24 @@ impl Step for Std {\n             builder.ensure(SharedAssets { target: self.target });\n         }\n \n-        let index_page = builder.src.join(\"src/doc/index.md\").into_os_string();\n+        let index_page = builder\n+            .src\n+            .join(\"src/doc/index.md\")\n+            .into_os_string()\n+            .into_string()\n+            .expect(\"non-utf8 paths are unsupported\");\n         let mut extra_args = match self.format {\n-            DocumentationFormat::HTML => vec![\n-                OsStr::new(\"--markdown-css\"),\n-                OsStr::new(\"rust.css\"),\n-                OsStr::new(\"--markdown-no-toc\"),\n-                OsStr::new(\"--index-page\"),\n-                &index_page,\n-            ],\n-            DocumentationFormat::JSON => vec![OsStr::new(\"--output-format\"), OsStr::new(\"json\")],\n+            DocumentationFormat::HTML => {\n+                vec![\"--markdown-css\", \"rust.css\", \"--markdown-no-toc\", \"--index-page\", &index_page]\n+            }\n+            DocumentationFormat::JSON => vec![\"--output-format\", \"json\"],\n         };\n \n         if !builder.config.docs_minification {\n-            extra_args.push(OsStr::new(\"--disable-minification\"));\n+            extra_args.push(\"--disable-minification\");\n         }\n \n-        let requested_crates = builder\n-            .paths\n-            .iter()\n-            .map(components_simplified)\n-            .filter_map(|path| {\n-                if path.len() >= 2 && path.get(0) == Some(&\"library\") {\n-                    // single crate\n-                    Some(path[1].to_owned())\n-                } else if !path.is_empty() {\n-                    // ??\n-                    Some(path[0].to_owned())\n-                } else {\n-                    // all library crates\n-                    None\n-                }\n-            })\n-            .collect::<Vec<_>>();\n-\n-        doc_std(builder, self.format, stage, target, &out, &extra_args, &requested_crates);\n+        doc_std(builder, self.format, stage, target, &out, &extra_args, &self.crates);\n \n         // Don't open if the format is json\n         if let DocumentationFormat::JSON = self.format {\n@@ -514,7 +496,11 @@ impl Step for Std {\n \n         // Look for library/std, library/core etc in the `x.py doc` arguments and\n         // open the corresponding rendered docs.\n-        for requested_crate in requested_crates {\n+        if self.crates.is_empty() {\n+            self.crates = INTERNER.intern_list(vec![\"library\".to_owned()]);\n+        };\n+\n+        for requested_crate in &*self.crates {\n             if requested_crate == \"library\" {\n                 // For `x.py doc library --open`, open `std` by default.\n                 let index = out.join(\"std\").join(\"index.html\");\n@@ -538,7 +524,7 @@ impl Step for Std {\n /// or remote link.\n const STD_PUBLIC_CRATES: [&str; 5] = [\"core\", \"alloc\", \"std\", \"proc_macro\", \"test\"];\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord)]\n pub enum DocumentationFormat {\n     HTML,\n     JSON,\n@@ -563,24 +549,22 @@ fn doc_std(\n     stage: u32,\n     target: TargetSelection,\n     out: &Path,\n-    extra_args: &[&OsStr],\n+    extra_args: &[&str],\n     requested_crates: &[String],\n ) {\n-    builder.info(&format!(\n-        \"Documenting{} stage{} library ({}) in {} format\",\n-        crate_description(requested_crates),\n-        stage,\n-        target,\n-        format.as_str()\n-    ));\n     if builder.no_std(target) == Some(true) {\n         panic!(\n             \"building std documentation for no_std target {target} is not supported\\n\\\n-             Set `docs = false` in the config to disable documentation.\"\n+             Set `docs = false` in the config to disable documentation, or pass `--exclude doc::library`.\"\n         );\n     }\n+\n     let compiler = builder.compiler(stage, builder.config.build);\n \n+    let description =\n+        format!(\"library{} in {} format\", crate_description(&requested_crates), format.as_str());\n+    let _guard = builder.msg(Kind::Doc, stage, &description, compiler.host, target);\n+\n     let target_doc_dir_name = if format == DocumentationFormat::JSON { \"json-doc\" } else { \"doc\" };\n     let target_dir =\n         builder.stage_out(compiler, Mode::Std).join(target.triple).join(target_doc_dir_name);\n@@ -590,42 +574,71 @@ fn doc_std(\n     // as a function parameter.\n     let out_dir = target_dir.join(target.triple).join(\"doc\");\n \n-    let run_cargo_rustdoc_for = |package: &str| {\n-        let mut cargo = builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"rustdoc\");\n-        compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n-        cargo\n-            .arg(\"--target-dir\")\n-            .arg(&*target_dir.to_string_lossy())\n-            .arg(\"-p\")\n-            .arg(package)\n-            .arg(\"-Zskip-rustdoc-fingerprint\")\n-            .arg(\"--\")\n-            .arg(\"-Z\")\n-            .arg(\"unstable-options\")\n-            .arg(\"--resource-suffix\")\n-            .arg(&builder.version)\n-            .args(extra_args);\n-        if builder.config.library_docs_private_items {\n-            cargo.arg(\"--document-private-items\").arg(\"--document-hidden-items\");\n-        }\n-        builder.run(&mut cargo.into());\n+    let mut cargo = builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"doc\");\n+    compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n+    cargo\n+        .arg(\"--no-deps\")\n+        .arg(\"--target-dir\")\n+        .arg(&*target_dir.to_string_lossy())\n+        .arg(\"-Zskip-rustdoc-fingerprint\")\n+        .rustdocflag(\"-Z\")\n+        .rustdocflag(\"unstable-options\")\n+        .rustdocflag(\"--resource-suffix\")\n+        .rustdocflag(&builder.version);\n+    for arg in extra_args {\n+        cargo.rustdocflag(arg);\n+    }\n+\n+    if builder.config.library_docs_private_items {\n+        cargo.rustdocflag(\"--document-private-items\").rustdocflag(\"--document-hidden-items\");\n+    }\n+\n+    // HACK: because we use `--manifest-path library/sysroot/Cargo.toml`, cargo thinks we only want to document that specific crate, not its dependencies.\n+    // Override its default.\n+    let built_crates = if requested_crates.is_empty() {\n+        builder\n+            .in_tree_crates(\"sysroot\", None)\n+            .into_iter()\n+            .map(|krate| krate.name.to_string())\n+            .collect()\n+    } else {\n+        requested_crates.to_vec()\n     };\n \n-    for krate in STD_PUBLIC_CRATES {\n-        run_cargo_rustdoc_for(krate);\n-        if requested_crates.iter().any(|p| p == krate) {\n-            // No need to document more of the libraries if we have the one we want.\n-            break;\n-        }\n+    for krate in built_crates {\n+        cargo.arg(\"-p\").arg(krate);\n     }\n \n+    builder.run(&mut cargo.into());\n     builder.cp_r(&out_dir, &out);\n }\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rustc {\n     pub stage: u32,\n     pub target: TargetSelection,\n+    crates: Interned<Vec<String>>,\n+}\n+\n+impl Rustc {\n+    pub(crate) fn new(stage: u32, target: TargetSelection, builder: &Builder<'_>) -> Self {\n+        // Find dependencies for top level crates.\n+        let root_crates = vec![\n+            INTERNER.intern_str(\"rustc_driver\"),\n+            INTERNER.intern_str(\"rustc_codegen_llvm\"),\n+            INTERNER.intern_str(\"rustc_codegen_ssa\"),\n+        ];\n+        let crates: Vec<_> = root_crates\n+            .iter()\n+            .flat_map(|krate| {\n+                builder\n+                    .in_tree_crates(krate, Some(target))\n+                    .into_iter()\n+                    .map(|krate| krate.name.to_string())\n+            })\n+            .collect();\n+        Self { stage, target, crates: INTERNER.intern_list(crates) }\n+    }\n }\n \n impl Step for Rustc {\n@@ -641,7 +654,11 @@ impl Step for Rustc {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Rustc { stage: run.builder.top_stage, target: run.target });\n+        run.builder.ensure(Rustc {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n+            crates: make_run_crates(&run, \"compiler\"),\n+        });\n     }\n \n     /// Generates compiler documentation.\n@@ -654,15 +671,6 @@ impl Step for Rustc {\n         let stage = self.stage;\n         let target = self.target;\n \n-        let paths = builder\n-            .paths\n-            .iter()\n-            .filter(|path| {\n-                let components = components_simplified(path);\n-                components.len() >= 2 && components[0] == \"compiler\"\n-            })\n-            .collect::<Vec<_>>();\n-\n         // This is the intended out directory for compiler documentation.\n         let out = builder.compiler_doc_out(target);\n         t!(fs::create_dir_all(&out));\n@@ -672,7 +680,13 @@ impl Step for Rustc {\n         let compiler = builder.compiler(stage, builder.config.build);\n         builder.ensure(compile::Std::new(compiler, builder.config.build));\n \n-        builder.info(&format!(\"Documenting stage{} compiler ({})\", stage, target));\n+        let _guard = builder.msg(\n+            Kind::Doc,\n+            stage,\n+            &format!(\"compiler{}\", crate_description(&self.crates)),\n+            compiler.host,\n+            target,\n+        );\n \n         // This uses a shared directory so that librustdoc documentation gets\n         // correctly built and merged with the rustc documentation. This is\n@@ -710,22 +724,8 @@ impl Step for Rustc {\n         cargo.rustdocflag(\"--extern-html-root-url\");\n         cargo.rustdocflag(\"ena=https://docs.rs/ena/latest/\");\n \n-        let root_crates = if paths.is_empty() {\n-            vec![\n-                INTERNER.intern_str(\"rustc_driver\"),\n-                INTERNER.intern_str(\"rustc_codegen_llvm\"),\n-                INTERNER.intern_str(\"rustc_codegen_ssa\"),\n-            ]\n-        } else {\n-            paths.into_iter().map(|p| builder.crate_paths[p]).collect()\n-        };\n-        // Find dependencies for top level crates.\n-        let compiler_crates = root_crates.iter().flat_map(|krate| {\n-            builder.in_tree_crates(krate, Some(target)).into_iter().map(|krate| krate.name)\n-        });\n-\n         let mut to_open = None;\n-        for krate in compiler_crates {\n+        for krate in &*self.crates {\n             // Create all crate output directories first to make sure rustdoc uses\n             // relative links.\n             // FIXME: Cargo should probably do this itself.\n@@ -785,7 +785,7 @@ macro_rules! tool_doc {\n \n                 if true $(&& $rustc_tool)? {\n                     // Build rustc docs so that we generate relative links.\n-                    builder.ensure(Rustc { stage, target });\n+                    builder.ensure(Rustc::new(stage, target, builder));\n \n                     // Rustdoc needs the rustc sysroot available to build.\n                     // FIXME: is there a way to only ensure `check::Rustc` here? Last time I tried it failed"}, {"sha": "f7d30de67ebaba6a371e600332f8b230a15b8b23", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -1020,8 +1020,8 @@ impl Build {\n         host: impl Into<Option<TargetSelection>>,\n         target: impl Into<Option<TargetSelection>>,\n     ) -> Option<gha::Group> {\n-        let action = action.into();\n-        let msg = |fmt| format!(\"{action:?}ing stage{stage} {what}{fmt}\");\n+        let action = action.into().description();\n+        let msg = |fmt| format!(\"{action} stage{stage} {what}{fmt}\");\n         let msg = if let Some(target) = target.into() {\n             let host = host.into().unwrap();\n             if host == target {"}, {"sha": "960abb31b2016693e9aa00cef431655406d50687", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -101,7 +101,7 @@ impl Step for CrateBootstrap {\n         );\n         builder.info(&format!(\n             \"{} {} stage0 ({})\",\n-            builder.kind.test_description(),\n+            builder.kind.description(),\n             path,\n             bootstrap_host,\n         ));\n@@ -220,7 +220,7 @@ impl Step for HtmlCheck {\n         }\n         // Ensure that a few different kinds of documentation are available.\n         builder.default_doc(&[]);\n-        builder.ensure(crate::doc::Rustc { target: self.target, stage: builder.top_stage });\n+        builder.ensure(crate::doc::Rustc::new(builder.top_stage, self.target, builder));\n \n         try_run(builder, builder.tool_cmd(Tool::HtmlChecker).arg(builder.doc_out(self.target)));\n     }\n@@ -886,11 +886,11 @@ impl Step for RustdocJSStd {\n                     command.arg(\"--test-file\").arg(path);\n                 }\n             }\n-            builder.ensure(crate::doc::Std {\n-                target: self.target,\n-                stage: builder.top_stage,\n-                format: DocumentationFormat::HTML,\n-            });\n+            builder.ensure(crate::doc::Std::new(\n+                builder.top_stage,\n+                self.target,\n+                DocumentationFormat::HTML,\n+            ));\n             builder.run(&mut command);\n         } else {\n             builder.info(\"No nodejs found, skipping \\\"tests/rustdoc-js-std\\\" tests\");"}, {"sha": "3ccca1e8b89bc7a06e669aee721e3da8d9fbd67a", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -1 +1 @@\n-0.16.4\n\\ No newline at end of file\n+0.16.5\n\\ No newline at end of file"}, {"sha": "83887cc44b96b036a9eb746b3f545d5007a82137", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                 let infcx = cx.tcx.infer_ctxt().build();\n                 let substs = infcx.fresh_substs_for_item(DUMMY_SP, item_def_id);\n                 let impl_ty = ty.subst(infcx.tcx, substs);\n-                let param_env = EarlyBinder::new(param_env).subst(infcx.tcx, substs);\n+                let param_env = EarlyBinder::bind(param_env).subst(infcx.tcx, substs);\n \n                 let impl_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n                 let impl_trait_ref = trait_ref.subst(infcx.tcx, impl_substs);"}, {"sha": "0ae95b045e03ce634e48c773b7f3c0c6c33067d9", "filename": "src/tools/clippy/clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -212,7 +212,6 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::instant_subtraction::UNCHECKED_DURATION_SUBTRACTION_INFO,\n     crate::int_plus_one::INT_PLUS_ONE_INFO,\n     crate::invalid_upcast_comparisons::INVALID_UPCAST_COMPARISONS_INFO,\n-    crate::invalid_utf8_in_unchecked::INVALID_UTF8_IN_UNCHECKED_INFO,\n     crate::items_after_statements::ITEMS_AFTER_STATEMENTS_INFO,\n     crate::items_after_test_module::ITEMS_AFTER_TEST_MODULE_INFO,\n     crate::iter_not_returning_iterator::ITER_NOT_RETURNING_ITERATOR_INFO,"}, {"sha": "a1d2147cb496592c3e0028ac49b32b0ad82a1792", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -1219,7 +1219,7 @@ fn needless_borrow_impl_arg_position<'tcx>(\n                 return false;\n             }\n \n-            let predicate = EarlyBinder::new(predicate).subst(cx.tcx, &substs_with_referent_ty);\n+            let predicate = EarlyBinder::bind(predicate).subst(cx.tcx, &substs_with_referent_ty);\n             let obligation = Obligation::new(cx.tcx, ObligationCause::dummy(), cx.param_env, predicate);\n             let infcx = cx.tcx.infer_ctxt().build();\n             infcx.predicate_must_hold_modulo_regions(&obligation)"}, {"sha": "c919b4de65dea38fded783e10a5dac91c3f71b26", "filename": "src/tools/clippy/clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feta_reduction.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -243,7 +243,7 @@ fn get_ufcs_type_name<'tcx>(cx: &LateContext<'tcx>, method_def_id: DefId, substs\n                 | ty::Ref(..)\n                 | ty::Slice(_)\n                 | ty::Tuple(_) => {\n-                    format!(\"<{}>\", EarlyBinder::new(ty).subst(cx.tcx, substs))\n+                    format!(\"<{}>\", EarlyBinder::bind(ty).subst(cx.tcx, substs))\n                 },\n                 _ => ty.to_string(),\n             }"}, {"sha": "6a4861747d267c83663ca3e405a8d61d13564c26", "filename": "src/tools/clippy/clippy_lints/src/invalid_utf8_in_unchecked.rs", "status": "removed", "additions": 0, "deletions": 74, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/3266c36624e804f9f086ebd40db19039b55a4ec1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3266c36624e804f9f086ebd40db19039b55a4ec1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finvalid_utf8_in_unchecked.rs?ref=3266c36624e804f9f086ebd40db19039b55a4ec1", "patch": "@@ -1,74 +0,0 @@\n-use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{match_function_call, paths};\n-use rustc_ast::{BorrowKind, LitKind};\n-use rustc_hir::{Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Spanned;\n-use rustc_span::Span;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for `std::str::from_utf8_unchecked` with an invalid UTF-8 literal\n-    ///\n-    /// ### Why is this bad?\n-    /// Creating such a `str` would result in undefined behavior\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// # #[allow(unused)]\n-    /// unsafe {\n-    ///     std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n-    /// }\n-    /// ```\n-    #[clippy::version = \"1.64.0\"]\n-    pub INVALID_UTF8_IN_UNCHECKED,\n-    correctness,\n-    \"using a non UTF-8 literal in `std::std::from_utf8_unchecked`\"\n-}\n-declare_lint_pass!(InvalidUtf8InUnchecked => [INVALID_UTF8_IN_UNCHECKED]);\n-\n-impl<'tcx> LateLintPass<'tcx> for InvalidUtf8InUnchecked {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if let Some([arg]) = match_function_call(cx, expr, &paths::STR_FROM_UTF8_UNCHECKED) {\n-            match &arg.kind {\n-                ExprKind::Lit(Spanned { node: lit, .. }) => {\n-                    if let LitKind::ByteStr(bytes, _) = &lit\n-                        && std::str::from_utf8(bytes).is_err()\n-                    {\n-                        lint(cx, expr.span);\n-                    }\n-                },\n-                ExprKind::AddrOf(BorrowKind::Ref, _, Expr { kind: ExprKind::Array(args), .. }) => {\n-                    let elements = args.iter().map(|e|{\n-                        match &e.kind {\n-                            ExprKind::Lit(Spanned { node: lit, .. }) => match lit {\n-                                LitKind::Byte(b) => Some(*b),\n-                                #[allow(clippy::cast_possible_truncation)]\n-                                LitKind::Int(b, _) => Some(*b as u8),\n-                                _ => None\n-                            }\n-                            _ => None\n-                        }\n-                    }).collect::<Option<Vec<_>>>();\n-\n-                    if let Some(elements) = elements\n-                        && std::str::from_utf8(&elements).is_err()\n-                    {\n-                        lint(cx, expr.span);\n-                    }\n-                }\n-                _ => {}\n-            }\n-        }\n-    }\n-}\n-\n-fn lint(cx: &LateContext<'_>, span: Span) {\n-    span_lint(\n-        cx,\n-        INVALID_UTF8_IN_UNCHECKED,\n-        span,\n-        \"non UTF-8 literal in `std::str::from_utf8_unchecked`\",\n-    );\n-}"}, {"sha": "fcca595c2bc4cb93ea5e66401a9c8a2c13c6da74", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -157,7 +157,6 @@ mod inline_fn_without_body;\n mod instant_subtraction;\n mod int_plus_one;\n mod invalid_upcast_comparisons;\n-mod invalid_utf8_in_unchecked;\n mod items_after_statements;\n mod items_after_test_module;\n mod iter_not_returning_iterator;\n@@ -937,7 +936,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move |_| Box::new(manual_retain::ManualRetain::new(msrv())));\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n     store.register_late_pass(move |_| Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n-    store.register_late_pass(|_| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n     store.register_late_pass(|_| Box::<std_instead_of_core::StdReexports>::default());\n     store.register_late_pass(move |_| Box::new(instant_subtraction::InstantSubtraction::new(msrv())));\n     store.register_late_pass(|_| Box::new(partialeq_to_none::PartialeqToNone));"}, {"sha": "99f810c27cf82f7bd6618c610fc013c7ac6d93e4", "filename": "src/tools/clippy/clippy_lints/src/methods/needless_collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fneedless_collect.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -241,7 +241,7 @@ fn is_contains_sig(cx: &LateContext<'_>, call_id: HirId, iter_expr: &Expr<'_>) -\n         && let proj_ty = cx.tcx.mk_projection(iter_item.def_id, substs)\n         && let Ok(item_ty) = cx.tcx.try_normalize_erasing_regions(cx.param_env, proj_ty)\n     {\n-        item_ty == EarlyBinder::new(search_ty).subst(cx.tcx, cx.typeck_results().node_substs(call_id))\n+        item_ty == EarlyBinder::bind(search_ty).subst(cx.tcx, cx.typeck_results().node_substs(call_id))\n     } else {\n         false\n     }"}, {"sha": "309d2157b76ee4f762ca30ae2872aaff895bb728", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -428,7 +428,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                                      }));\n \n                         if trait_predicates.any(|predicate| {\n-                            let predicate = EarlyBinder::new(predicate).subst(cx.tcx, new_subst);\n+                            let predicate = EarlyBinder::bind(predicate).subst(cx.tcx, new_subst);\n                             let obligation = Obligation::new(cx.tcx, ObligationCause::dummy(), cx.param_env, predicate);\n                             !cx.tcx.infer_ctxt().build().predicate_must_hold_modulo_regions(&obligation)\n                         }) {\n@@ -438,7 +438,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                         let output_ty = fn_sig.output();\n                         if output_ty.contains(*param_ty) {\n                             if let Ok(new_ty)  = cx.tcx.try_subst_and_normalize_erasing_regions(\n-                                new_subst, cx.param_env, EarlyBinder::new(output_ty)) {\n+                                new_subst, cx.param_env, EarlyBinder::bind(output_ty)) {\n                                 expr = parent_expr;\n                                 ty = new_ty;\n                                 continue;"}, {"sha": "7c2a100efdac6a4bba2e75cda46ed2416474d9a8", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -43,6 +43,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::into_iter_on_array\", \"array_into_iter\"),\n     (\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\"),\n     (\"clippy::invalid_ref\", \"invalid_value\"),\n+    (\"clippy::invalid_utf8_in_unchecked\", \"invalid_from_utf8_unchecked\"),\n     (\"clippy::let_underscore_drop\", \"let_underscore_drop\"),\n     (\"clippy::mem_discriminant_non_enum\", \"enum_intrinsics_non_enums\"),\n     (\"clippy::panic_params\", \"non_fmt_panics\"),"}, {"sha": "cc3183759ae7a2627ef6e12a76278b064149b595", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -462,7 +462,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 let substs = if self.substs.is_empty() {\n                     substs\n                 } else {\n-                    EarlyBinder::new(substs).subst(self.lcx.tcx, self.substs)\n+                    EarlyBinder::bind(substs).subst(self.lcx.tcx, self.substs)\n                 };\n \n                 let result = self"}, {"sha": "3dc096d3197fbe5eba20a5ca73b5a65d72739c7b", "filename": "src/tools/clippy/tests/ui/invalid_utf8_in_unchecked.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3266c36624e804f9f086ebd40db19039b55a4ec1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3266c36624e804f9f086ebd40db19039b55a4ec1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.rs?ref=3266c36624e804f9f086ebd40db19039b55a4ec1", "patch": "@@ -1,20 +0,0 @@\n-#![warn(clippy::invalid_utf8_in_unchecked)]\n-\n-fn main() {\n-    // Valid\n-    unsafe {\n-        std::str::from_utf8_unchecked(&[99, 108, 105, 112, 112, 121]);\n-        std::str::from_utf8_unchecked(&[b'c', b'l', b'i', b'p', b'p', b'y']);\n-        std::str::from_utf8_unchecked(b\"clippy\");\n-\n-        let x = 0xA0;\n-        std::str::from_utf8_unchecked(&[0xC0, x]);\n-    }\n-\n-    // Invalid\n-    unsafe {\n-        std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n-        std::str::from_utf8_unchecked(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n-        std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n-    }\n-}"}, {"sha": "c89cd2758ee9fe407fb359ed45f6232082fd400b", "filename": "src/tools/clippy/tests/ui/invalid_utf8_in_unchecked.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3266c36624e804f9f086ebd40db19039b55a4ec1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3266c36624e804f9f086ebd40db19039b55a4ec1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finvalid_utf8_in_unchecked.stderr?ref=3266c36624e804f9f086ebd40db19039b55a4ec1", "patch": "@@ -1,22 +0,0 @@\n-error: non UTF-8 literal in `std::str::from_utf8_unchecked`\n-  --> $DIR/invalid_utf8_in_unchecked.rs:16:9\n-   |\n-LL |         std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::invalid-utf8-in-unchecked` implied by `-D warnings`\n-\n-error: non UTF-8 literal in `std::str::from_utf8_unchecked`\n-  --> $DIR/invalid_utf8_in_unchecked.rs:17:9\n-   |\n-LL |         std::str::from_utf8_unchecked(&[b'c', b'l', b'/x82', b'i', b'p', b'p', b'y']);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: non UTF-8 literal in `std::str::from_utf8_unchecked`\n-  --> $DIR/invalid_utf8_in_unchecked.rs:18:9\n-   |\n-LL |         std::str::from_utf8_unchecked(b\"cl/x82ippy\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "53ac65473b827c4463b5102b801eb0a29e2ad6c0", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -38,6 +38,7 @@\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n+#![allow(invalid_from_utf8_unchecked)]\n #![allow(let_underscore_drop)]\n #![allow(enum_intrinsics_non_enums)]\n #![allow(non_fmt_panics)]\n@@ -87,6 +88,7 @@\n #![warn(array_into_iter)]\n #![warn(invalid_atomic_ordering)]\n #![warn(invalid_value)]\n+#![warn(invalid_from_utf8_unchecked)]\n #![warn(let_underscore_drop)]\n #![warn(enum_intrinsics_non_enums)]\n #![warn(non_fmt_panics)]"}, {"sha": "722c0b3eb27508cbc2b602ba55b61ed89bcfe525", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -38,6 +38,7 @@\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n+#![allow(invalid_from_utf8_unchecked)]\n #![allow(let_underscore_drop)]\n #![allow(enum_intrinsics_non_enums)]\n #![allow(non_fmt_panics)]\n@@ -87,6 +88,7 @@\n #![warn(clippy::into_iter_on_array)]\n #![warn(clippy::invalid_atomic_ordering)]\n #![warn(clippy::invalid_ref)]\n+#![warn(clippy::invalid_utf8_in_unchecked)]\n #![warn(clippy::let_underscore_drop)]\n #![warn(clippy::mem_discriminant_non_enum)]\n #![warn(clippy::panic_params)]"}, {"sha": "1ff83917660235f1e9d4e3bf3cbd509196d1b52d", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 55, "deletions": 49, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -1,292 +1,298 @@\n error: lint `clippy::almost_complete_letter_range` has been renamed to `clippy::almost_complete_range`\n-  --> $DIR/rename.rs:49:9\n+  --> $DIR/rename.rs:50:9\n    |\n LL | #![warn(clippy::almost_complete_letter_range)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::almost_complete_range`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:51:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::derive_hash_xor_eq` has been renamed to `clippy::derived_hash_with_manual_eq`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::derive_hash_xor_eq)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::derived_hash_with_manual_eq`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::integer_arithmetic` has been renamed to `clippy::arithmetic_side_effects`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::integer_arithmetic)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::arithmetic_side_effects`\n \n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:77:9\n+  --> $DIR/rename.rs:78:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n error: lint `clippy::clone_double_ref` has been renamed to `suspicious_double_ref_op`\n-  --> $DIR/rename.rs:78:9\n+  --> $DIR/rename.rs:79:9\n    |\n LL | #![warn(clippy::clone_double_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `suspicious_double_ref_op`\n \n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:79:9\n+  --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n error: lint `clippy::drop_copy` has been renamed to `dropping_copy_types`\n-  --> $DIR/rename.rs:80:9\n+  --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::drop_copy)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `dropping_copy_types`\n \n error: lint `clippy::drop_ref` has been renamed to `dropping_references`\n-  --> $DIR/rename.rs:81:9\n+  --> $DIR/rename.rs:82:9\n    |\n LL | #![warn(clippy::drop_ref)]\n    |         ^^^^^^^^^^^^^^^^ help: use the new name: `dropping_references`\n \n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:82:9\n+  --> $DIR/rename.rs:83:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:83:9\n+  --> $DIR/rename.rs:84:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:84:9\n+  --> $DIR/rename.rs:85:9\n    |\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::forget_copy` has been renamed to `forgetting_copy_types`\n-  --> $DIR/rename.rs:85:9\n+  --> $DIR/rename.rs:86:9\n    |\n LL | #![warn(clippy::forget_copy)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_copy_types`\n \n error: lint `clippy::forget_ref` has been renamed to `forgetting_references`\n-  --> $DIR/rename.rs:86:9\n+  --> $DIR/rename.rs:87:9\n    |\n LL | #![warn(clippy::forget_ref)]\n    |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_references`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:87:9\n+  --> $DIR/rename.rs:88:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:88:9\n+  --> $DIR/rename.rs:89:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:89:9\n+  --> $DIR/rename.rs:90:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n+error: lint `clippy::invalid_utf8_in_unchecked` has been renamed to `invalid_from_utf8_unchecked`\n+  --> $DIR/rename.rs:91:9\n+   |\n+LL | #![warn(clippy::invalid_utf8_in_unchecked)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_from_utf8_unchecked`\n+\n error: lint `clippy::let_underscore_drop` has been renamed to `let_underscore_drop`\n-  --> $DIR/rename.rs:90:9\n+  --> $DIR/rename.rs:92:9\n    |\n LL | #![warn(clippy::let_underscore_drop)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `let_underscore_drop`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:91:9\n+  --> $DIR/rename.rs:93:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:92:9\n+  --> $DIR/rename.rs:94:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:93:9\n+  --> $DIR/rename.rs:95:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:94:9\n+  --> $DIR/rename.rs:96:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:95:9\n+  --> $DIR/rename.rs:97:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:96:9\n+  --> $DIR/rename.rs:98:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 48 previous errors\n+error: aborting due to 49 previous errors\n "}, {"sha": "c5e7f813dd1940ab4bcc4376b566f42e6253e349", "filename": "tests/rustdoc-gui/target.goml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Frustdoc-gui%2Ftarget.goml", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Frustdoc-gui%2Ftarget.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-gui%2Ftarget.goml?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -25,11 +25,11 @@ call-function: (\"check-style\", {\n })\n call-function: (\"check-style\", {\n     \"theme\": \"dark\",\n-    \"background\": \"rgb(73, 74, 61)\",\n-    \"border\": \"rgb(187, 116, 16)\",\n+    \"background\": \"#494a3d\",\n+    \"border\": \"#bb7410\",\n })\n call-function: (\"check-style\", {\n     \"theme\": \"light\",\n-    \"background\": \"rgb(253, 255, 211)\",\n-    \"border\": \"rgb(173, 124, 55)\",\n+    \"background\": \"#fdffd3\",\n+    \"border\": \"#ad7c37\",\n })"}, {"sha": "9c8c636812e0d8c727eaf67e01cea666075ce4b8", "filename": "tests/ui/lint/invalid_from_utf8.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Flint%2Finvalid_from_utf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Flint%2Finvalid_from_utf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid_from_utf8.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -0,0 +1,93 @@\n+// check-pass\n+\n+#![feature(concat_bytes)]\n+#![warn(invalid_from_utf8_unchecked)]\n+#![warn(invalid_from_utf8)]\n+\n+pub fn from_utf8_unchecked_mut() {\n+    // Valid\n+    unsafe {\n+        std::str::from_utf8_unchecked_mut(&mut [99, 108, 105, 112, 112, 121]);\n+        std::str::from_utf8_unchecked_mut(&mut [b'c', b'l', b'i', b'p', b'p', b'y']);\n+\n+        let x = 0xA0;\n+        std::str::from_utf8_unchecked_mut(&mut [0xC0, x]);\n+    }\n+\n+    // Invalid\n+    unsafe {\n+        std::str::from_utf8_unchecked_mut(&mut [99, 108, 130, 105, 112, 112, 121]);\n+        //~^ WARN calls to `std::str::from_utf8_unchecked_mut`\n+        std::str::from_utf8_unchecked_mut(&mut [b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+        //~^ WARN calls to `std::str::from_utf8_unchecked_mut`\n+    }\n+}\n+\n+pub fn from_utf8_unchecked() {\n+    // Valid\n+    unsafe {\n+        std::str::from_utf8_unchecked(&[99, 108, 105, 112, 112, 121]);\n+        std::str::from_utf8_unchecked(&[b'c', b'l', b'i', b'p', b'p', b'y']);\n+        std::str::from_utf8_unchecked(b\"clippy\");\n+\n+        let x = 0xA0;\n+        std::str::from_utf8_unchecked(&[0xC0, x]);\n+    }\n+\n+    // Invalid\n+    unsafe {\n+        std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n+        //~^ WARN calls to `std::str::from_utf8_unchecked`\n+        std::str::from_utf8_unchecked(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+        //~^ WARN calls to `std::str::from_utf8_unchecked`\n+        std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n+        //~^ WARN calls to `std::str::from_utf8_unchecked`\n+        std::str::from_utf8_unchecked(concat_bytes!(b\"cl\", b\"\\x82ippy\"));\n+        //~^ WARN calls to `std::str::from_utf8_unchecked`\n+    }\n+}\n+\n+pub fn from_utf8_mut() {\n+    // Valid\n+    {\n+        std::str::from_utf8_mut(&mut [99, 108, 105, 112, 112, 121]);\n+        std::str::from_utf8_mut(&mut [b'c', b'l', b'i', b'p', b'p', b'y']);\n+\n+        let x = 0xa0;\n+        std::str::from_utf8_mut(&mut [0xc0, x]);\n+    }\n+\n+    // Invalid\n+    {\n+        std::str::from_utf8_mut(&mut [99, 108, 130, 105, 112, 112, 121]);\n+        //~^ WARN calls to `std::str::from_utf8_mut`\n+        std::str::from_utf8_mut(&mut [b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+        //~^ WARN calls to `std::str::from_utf8_mut`\n+    }\n+}\n+\n+pub fn from_utf8() {\n+    // Valid\n+    {\n+        std::str::from_utf8(&[99, 108, 105, 112, 112, 121]);\n+        std::str::from_utf8(&[b'c', b'l', b'i', b'p', b'p', b'y']);\n+        std::str::from_utf8(b\"clippy\");\n+\n+        let x = 0xA0;\n+        std::str::from_utf8(&[0xC0, x]);\n+    }\n+\n+    // Invalid\n+    {\n+        std::str::from_utf8(&[99, 108, 130, 105, 112, 112, 121]);\n+        //~^ WARN calls to `std::str::from_utf8`\n+        std::str::from_utf8(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+        //~^ WARN calls to `std::str::from_utf8`\n+        std::str::from_utf8(b\"cl\\x82ippy\");\n+        //~^ WARN calls to `std::str::from_utf8`\n+        std::str::from_utf8(concat_bytes!(b\"cl\", b\"\\x82ippy\"));\n+        //~^ WARN calls to `std::str::from_utf8`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "8e00d3bf872f4c4b87ae70f0d35b4381a006b218", "filename": "tests/ui/lint/invalid_from_utf8.stderr", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Flint%2Finvalid_from_utf8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Flint%2Finvalid_from_utf8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid_from_utf8.stderr?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -0,0 +1,110 @@\n+warning: calls to `std::str::from_utf8_unchecked_mut` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:19:9\n+   |\n+LL |         std::str::from_utf8_unchecked_mut(&mut [99, 108, 130, 105, 112, 112, 121]);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------------^\n+   |                                           |\n+   |                                           the literal was valid UTF-8 up to the 2 bytes\n+   |\n+note: the lint level is defined here\n+  --> $DIR/invalid_from_utf8.rs:4:9\n+   |\n+LL | #![warn(invalid_from_utf8_unchecked)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: calls to `std::str::from_utf8_unchecked_mut` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:21:9\n+   |\n+LL |         std::str::from_utf8_unchecked_mut(&mut [b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------------------^\n+   |                                           |\n+   |                                           the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8_unchecked` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:39:9\n+   |\n+LL |         std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^\n+   |                                       |\n+   |                                       the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8_unchecked` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:41:9\n+   |\n+LL |         std::str::from_utf8_unchecked(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------------------^\n+   |                                       |\n+   |                                       the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8_unchecked` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:43:9\n+   |\n+LL |         std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^\n+   |                                       |\n+   |                                       the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8_unchecked` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:45:9\n+   |\n+LL |         std::str::from_utf8_unchecked(concat_bytes!(b\"cl\", b\"\\x82ippy\"));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^\n+   |                                       |\n+   |                                       the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8_mut` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:62:9\n+   |\n+LL |         std::str::from_utf8_mut(&mut [99, 108, 130, 105, 112, 112, 121]);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------------^\n+   |                                 |\n+   |                                 the literal was valid UTF-8 up to the 2 bytes\n+   |\n+note: the lint level is defined here\n+  --> $DIR/invalid_from_utf8.rs:5:9\n+   |\n+LL | #![warn(invalid_from_utf8)]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+warning: calls to `std::str::from_utf8_mut` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:64:9\n+   |\n+LL |         std::str::from_utf8_mut(&mut [b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------------------^\n+   |                                 |\n+   |                                 the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:82:9\n+   |\n+LL |         std::str::from_utf8(&[99, 108, 130, 105, 112, 112, 121]);\n+   |         ^^^^^^^^^^^^^^^^^^^^-----------------------------------^\n+   |                             |\n+   |                             the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:84:9\n+   |\n+LL |         std::str::from_utf8(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+   |         ^^^^^^^^^^^^^^^^^^^^----------------------------------------------^\n+   |                             |\n+   |                             the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:86:9\n+   |\n+LL |         std::str::from_utf8(b\"cl\\x82ippy\");\n+   |         ^^^^^^^^^^^^^^^^^^^^-------------^\n+   |                             |\n+   |                             the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8` with a invalid literal always return an error\n+  --> $DIR/invalid_from_utf8.rs:88:9\n+   |\n+LL |         std::str::from_utf8(concat_bytes!(b\"cl\", b\"\\x82ippy\"));\n+   |         ^^^^^^^^^^^^^^^^^^^^---------------------------------^\n+   |                             |\n+   |                             the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: 12 warnings emitted\n+"}, {"sha": "7c2fc296bb0280d8f396996be7e859d9867b29ed", "filename": "tests/ui/process/process-panic-after-fork.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprocess%2Fprocess-panic-after-fork.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -11,6 +11,8 @@\n #![feature(never_type)]\n #![feature(panic_always_abort)]\n \n+#![allow(invalid_from_utf8)]\n+\n extern crate libc;\n \n use std::alloc::{GlobalAlloc, Layout};"}, {"sha": "f679640c5dc90103a97db56ca7ee5ada265e68de", "filename": "tests/ui/suggestions/issue-103646.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Fsuggestions%2Fissue-103646.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Fsuggestions%2Fissue-103646.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-103646.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -0,0 +1,11 @@\n+trait Cat {\n+    fn nya() {}\n+}\n+\n+fn uwu<T: Cat>(c: T) {\n+    c.nya();\n+    //~^ ERROR no method named `nya` found for type parameter `T` in the current scope\n+    //~| Suggestion T::nya()\n+}\n+\n+fn main() {}"}, {"sha": "3ae9813d4914c1952ec31a10df3aeb3c905b6814", "filename": "tests/ui/suggestions/issue-103646.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Fsuggestions%2Fissue-103646.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Fsuggestions%2Fissue-103646.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-103646.stderr?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -0,0 +1,21 @@\n+error[E0599]: no method named `nya` found for type parameter `T` in the current scope\n+  --> $DIR/issue-103646.rs:6:7\n+   |\n+LL | fn uwu<T: Cat>(c: T) {\n+   |        - method `nya` not found for this type parameter\n+LL |     c.nya();\n+   |     --^^^--\n+   |     | |\n+   |     | this is an associated function, not a method\n+   |     help: use associated function syntax instead: `T::nya()`\n+   |\n+   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n+note: the candidate is defined in the trait `Cat`\n+  --> $DIR/issue-103646.rs:2:5\n+   |\n+LL |     fn nya() {}\n+   |     ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "91342229ae1a53f4eed5ba5d31ef80d82457a8cf", "filename": "tests/ui/typeck/issue-106929.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Ftypeck%2Fissue-106929.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Ftypeck%2Fissue-106929.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-106929.rs?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -0,0 +1,13 @@\n+struct Client;\n+\n+impl Client {\n+    fn post<T: std::ops::Add>(&self, _: T, _: T) {}\n+}\n+\n+fn f() {\n+    let c = Client;\n+    post(c, ());\n+    //~^ ERROR cannot find function `post` in this scope\n+}\n+\n+fn main() {}"}, {"sha": "f744e5a41f0cd29239dbb22cec586573b30bed19", "filename": "tests/ui/typeck/issue-106929.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Ftypeck%2Fissue-106929.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9251b6ce14209070b3de9aa9a2d42622b51636e/tests%2Fui%2Ftypeck%2Fissue-106929.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-106929.stderr?ref=a9251b6ce14209070b3de9aa9a2d42622b51636e", "patch": "@@ -0,0 +1,15 @@\n+error[E0425]: cannot find function `post` in this scope\n+  --> $DIR/issue-106929.rs:9:5\n+   |\n+LL |     post(c, ());\n+   |     ^^^^ not found in this scope\n+   |\n+help: use the `.` operator to call the method `post` on `&Client`\n+   |\n+LL -     post(c, ());\n+LL +     c.post(());\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}