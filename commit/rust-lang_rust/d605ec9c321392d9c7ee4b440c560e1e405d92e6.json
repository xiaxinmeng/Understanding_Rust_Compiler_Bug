{"sha": "d605ec9c321392d9c7ee4b440c560e1e405d92e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MDVlYzljMzIxMzkyZDljN2VlNGI0NDBjNTYwZTFlNDA1ZDkyZTY=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-05-31T02:13:08Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-05-31T02:21:45Z"}, "message": "Change Runnable.bin -> Runnable.kind\n\nAs per matklad, we now pass the responsibility for finding the binary to the frontend.\nAlso, added caching for finding the binary path to reduce\nthe amount of filesystem interactions.", "tree": {"sha": "58d16996d1d1a05733dcc85ae4efddc563b3d3b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58d16996d1d1a05733dcc85ae4efddc563b3d3b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d605ec9c321392d9c7ee4b440c560e1e405d92e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d605ec9c321392d9c7ee4b440c560e1e405d92e6", "html_url": "https://github.com/rust-lang/rust/commit/d605ec9c321392d9c7ee4b440c560e1e405d92e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d605ec9c321392d9c7ee4b440c560e1e405d92e6/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a419cedb1cc661349a022262c8b03993e063252f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a419cedb1cc661349a022262c8b03993e063252f", "html_url": "https://github.com/rust-lang/rust/commit/a419cedb1cc661349a022262c8b03993e063252f"}], "stats": {"total": 206, "additions": 123, "deletions": 83}, "files": [{"sha": "07f18c7607eea61f9195f14ba2aab0a32d0a3b85", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d605ec9c321392d9c7ee4b440c560e1e405d92e6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d605ec9c321392d9c7ee4b440c560e1e405d92e6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d605ec9c321392d9c7ee4b440c560e1e405d92e6", "patch": "@@ -1365,7 +1365,6 @@ dependencies = [\n  \"ra_syntax\",\n  \"ra_text_edit\",\n  \"ra_tt\",\n- \"ra_toolchain\",\n  \"ra_vfs\",\n  \"rand\",\n  \"relative-path\","}, {"sha": "65b487db3b98267547d659452b6553568dc41d67", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d605ec9c321392d9c7ee4b440c560e1e405d92e6/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d605ec9c321392d9c7ee4b440c560e1e405d92e6/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=d605ec9c321392d9c7ee4b440c560e1e405d92e6", "patch": "@@ -48,7 +48,6 @@ hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }\n hir_ty = { path = \"../ra_hir_ty\", package = \"ra_hir_ty\" }\n ra_proc_macro_srv = { path = \"../ra_proc_macro_srv\" }\n-ra_toolchain = { path = \"../ra_toolchain\" }\n \n [target.'cfg(windows)'.dependencies]\n winapi = \"0.3.8\""}, {"sha": "173c23b9e5d0bce7f07abc7ec1b98925619b6093", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d605ec9c321392d9c7ee4b440c560e1e405d92e6/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d605ec9c321392d9c7ee4b440c560e1e405d92e6/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=d605ec9c321392d9c7ee4b440c560e1e405d92e6", "patch": "@@ -121,12 +121,21 @@ pub struct RunnablesParams {\n     pub position: Option<Position>,\n }\n \n+// Must strictly correspond to the executable name\n+#[derive(Serialize, Deserialize, Debug)]\n+#[serde(rename_all = \"lowercase\")]\n+pub enum RunnableKind {\n+    Cargo,\n+    Rustc,\n+    Rustup,\n+}\n+\n #[derive(Deserialize, Serialize, Debug)]\n #[serde(rename_all = \"camelCase\")]\n pub struct Runnable {\n     pub range: Range,\n     pub label: String,\n-    pub bin: String,\n+    pub kind: RunnableKind,\n     pub args: Vec<String>,\n     pub extra_args: Vec<String>,\n     pub env: FxHashMap<String, String>,"}, {"sha": "bc7c7f1ef5d5f306c11646b284623c63813b681c", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d605ec9c321392d9c7ee4b440c560e1e405d92e6/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d605ec9c321392d9c7ee4b440c560e1e405d92e6/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=d605ec9c321392d9c7ee4b440c560e1e405d92e6", "patch": "@@ -40,7 +40,6 @@ use crate::{\n     world::WorldSnapshot,\n     LspError, Result,\n };\n-use anyhow::Context;\n \n pub fn handle_analyzer_status(world: WorldSnapshot, _: ()) -> Result<String> {\n     let _p = profile(\"handle_analyzer_status\");\n@@ -427,7 +426,7 @@ pub fn handle_runnables(\n                 res.push(lsp_ext::Runnable {\n                     range: Default::default(),\n                     label: format!(\"cargo {} -p {}\", cmd, spec.package),\n-                    bin: cargo_path()?,\n+                    kind: lsp_ext::RunnableKind::Cargo,\n                     args: vec![cmd.to_string(), \"--package\".to_string(), spec.package.clone()],\n                     extra_args: Vec::new(),\n                     env: FxHashMap::default(),\n@@ -439,7 +438,7 @@ pub fn handle_runnables(\n             res.push(lsp_ext::Runnable {\n                 range: Default::default(),\n                 label: \"cargo check --workspace\".to_string(),\n-                bin: cargo_path()?,\n+                kind: lsp_ext::RunnableKind::Cargo,\n                 args: vec![\"check\".to_string(), \"--workspace\".to_string()],\n                 extra_args: Vec::new(),\n                 env: FxHashMap::default(),\n@@ -450,13 +449,6 @@ pub fn handle_runnables(\n     Ok(res)\n }\n \n-fn cargo_path() -> Result<String> {\n-    Ok(ra_toolchain::cargo()\n-        .to_str()\n-        .context(\"Path to `cargo` executable contains invalid UTF8 characters\")?\n-        .to_owned())\n-}\n-\n pub fn handle_completion(\n     world: WorldSnapshot,\n     params: lsp_types::CompletionParams,\n@@ -994,7 +986,7 @@ fn to_lsp_runnable(\n     Ok(lsp_ext::Runnable {\n         range: to_proto::range(&line_index, runnable.range),\n         label,\n-        bin: cargo_path()?,\n+        kind: lsp_ext::RunnableKind::Cargo,\n         args,\n         extra_args,\n         env: {"}, {"sha": "8b473ff74cd1f37387d7b839e38b78b751e4c8a5", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d605ec9c321392d9c7ee4b440c560e1e405d92e6/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d605ec9c321392d9c7ee4b440c560e1e405d92e6/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=d605ec9c321392d9c7ee4b440c560e1e405d92e6", "patch": "@@ -58,10 +58,6 @@ use std::collections::Spam;\n     eprintln!(\"completion took {:?}\", completion_start.elapsed());\n }\n \n-fn cargo_path() -> String {\n-    ra_toolchain::cargo().to_str().unwrap().to_owned()\n-}\n-\n #[test]\n fn test_runnables_no_project() {\n     if skip_slow_tests() {\n@@ -83,7 +79,7 @@ fn foo() {\n           {\n             \"args\": [ \"test\" ],\n             \"extraArgs\": [ \"foo\", \"--nocapture\" ],\n-            \"bin\": cargo_path(),\n+            \"kind\": \"cargo\",\n             \"env\": { \"RUST_BACKTRACE\": \"short\" },\n             \"cwd\": null,\n             \"label\": \"test foo\",\n@@ -95,7 +91,7 @@ fn foo() {\n           {\n             \"args\": [\"check\", \"--workspace\"],\n             \"extraArgs\": [],\n-            \"bin\": cargo_path(),\n+            \"kind\": \"cargo\",\n             \"env\": {},\n             \"cwd\": null,\n             \"label\": \"cargo check --workspace\",\n@@ -145,7 +141,7 @@ fn main() {}\n             {\n               \"args\": [ \"test\", \"--package\", \"foo\", \"--test\", \"spam\" ],\n               \"extraArgs\": [ \"test_eggs\", \"--exact\", \"--nocapture\" ],\n-              \"bin\": cargo_path(),\n+              \"kind\": \"cargo\",\n               \"env\": { \"RUST_BACKTRACE\": \"short\" },\n               \"label\": \"test test_eggs\",\n               \"range\": {\n@@ -157,7 +153,7 @@ fn main() {}\n             {\n               \"args\": [ \"check\", \"--package\", \"foo\" ],\n               \"extraArgs\": [],\n-              \"bin\": cargo_path(),\n+              \"kind\": \"cargo\",\n               \"env\": {},\n               \"label\": \"cargo check -p foo\",\n               \"range\": {\n@@ -169,7 +165,7 @@ fn main() {}\n             {\n               \"args\": [ \"test\", \"--package\", \"foo\" ],\n               \"extraArgs\": [],\n-              \"bin\": cargo_path(),\n+              \"kind\": \"cargo\",\n               \"env\": {},\n               \"label\": \"cargo test -p foo\",\n               \"range\": {"}, {"sha": "d06da355d39de3e6ff010b863d9054d830f4c204", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605ec9c321392d9c7ee4b440c560e1e405d92e6/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/d605ec9c321392d9c7ee4b440c560e1e405d92e6/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=d605ec9c321392d9c7ee4b440c560e1e405d92e6", "patch": "@@ -417,7 +417,7 @@ interface Runnable {\n     /// The label to show in the UI.\n     label: string;\n     /// The following fields describe a process to spawn.\n-    bin: string;\n+    kind: \"cargo\" | \"rustc\" | \"rustup\";\n     args: string[];\n     /// Args for cargo after `--`.\n     extraArgs: string[];"}, {"sha": "bdec5b7357faa2467403b5843b3c41d56ec999fd", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d605ec9c321392d9c7ee4b440c560e1e405d92e6/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d605ec9c321392d9c7ee4b440c560e1e405d92e6/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=d605ec9c321392d9c7ee4b440c560e1e405d92e6", "patch": "@@ -3,7 +3,7 @@ import * as vscode from 'vscode';\n import * as path from 'path';\n import * as ra from './lsp_ext';\n \n-import { Cargo } from './cargo';\n+import { Cargo } from './toolchain';\n import { Ctx } from \"./ctx\";\n \n const debugOutput = vscode.window.createOutputChannel(\"Debug\");"}, {"sha": "3e0b606997fb6512dd1b29bab52932d30a0c5e2a", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d605ec9c321392d9c7ee4b440c560e1e405d92e6/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d605ec9c321392d9c7ee4b440c560e1e405d92e6/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=d605ec9c321392d9c7ee4b440c560e1e405d92e6", "patch": "@@ -45,10 +45,13 @@ export interface RunnablesParams {\n     textDocument: lc.TextDocumentIdentifier;\n     position: lc.Position | null;\n }\n+\n+export type RunnableKind = \"cargo\" | \"rustc\" | \"rustup\";\n+\n export interface Runnable {\n     range: lc.Range;\n     label: string;\n-    bin: string;\n+    kind: RunnableKind;\n     args: string[];\n     extraArgs: string[];\n     env: { [key: string]: string };"}, {"sha": "401cb76af67d53f2ec6c978f425970a708e8449c", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d605ec9c321392d9c7ee4b440c560e1e405d92e6/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d605ec9c321392d9c7ee4b440c560e1e405d92e6/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=d605ec9c321392d9c7ee4b440c560e1e405d92e6", "patch": "@@ -1,6 +1,7 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n import * as ra from './lsp_ext';\n+import * as toolchain from \"./toolchain\";\n \n import { Ctx, Cmd } from './ctx';\n import { startDebugSession, getDebugConfiguration } from './debug';\n@@ -175,7 +176,7 @@ export function createTask(spec: ra.Runnable): vscode.Task {\n     const definition: CargoTaskDefinition = {\n         type: 'cargo',\n         label: spec.label,\n-        command: spec.bin,\n+        command: toolchain.getPathForExecutable(spec.kind),\n         args: spec.extraArgs ? [...spec.args, '--', ...spec.extraArgs] : spec.args,\n         env: spec.env,\n     };"}, {"sha": "9748824df38ffb662312d258308122fb40d023cf", "filename": "editors/code/src/tasks.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d605ec9c321392d9c7ee4b440c560e1e405d92e6/editors%2Fcode%2Fsrc%2Ftasks.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d605ec9c321392d9c7ee4b440c560e1e405d92e6/editors%2Fcode%2Fsrc%2Ftasks.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftasks.ts?ref=d605ec9c321392d9c7ee4b440c560e1e405d92e6", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import { getCargoPathOrFail } from \"./cargo\";\n+import * as toolchain from \"./toolchain\";\n \n // This ends up as the `type` key in tasks.json. RLS also uses `cargo` and\n // our configuration should be compatible with it so use the same key.\n@@ -25,7 +25,7 @@ class CargoTaskProvider implements vscode.TaskProvider {\n         // set of tasks that always exist. These tasks cannot be removed in\n         // tasks.json - only tweaked.\n \n-        const cargoPath = getCargoPathOrFail();\n+        const cargoPath = toolchain.cargoPath();\n \n         return [\n             { command: 'build', group: vscode.TaskGroup.Build },"}, {"sha": "80a7915e90e8972d30581ef419fc56ab8ce48526", "filename": "editors/code/src/toolchain.ts", "status": "renamed", "additions": 70, "deletions": 47, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/d605ec9c321392d9c7ee4b440c560e1e405d92e6/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d605ec9c321392d9c7ee4b440c560e1e405d92e6/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=d605ec9c321392d9c7ee4b440c560e1e405d92e6", "patch": "@@ -1,9 +1,10 @@\n import * as cp from 'child_process';\n import * as os from 'os';\n import * as path from 'path';\n+import * as fs from 'fs';\n import * as readline from 'readline';\n import { OutputChannel } from 'vscode';\n-import { isValidExecutable } from './util';\n+import { log, memoize } from './util';\n \n interface CompilationArtifact {\n     fileName: string;\n@@ -17,33 +18,34 @@ export interface ArtifactSpec {\n     filter?: (artifacts: CompilationArtifact[]) => CompilationArtifact[];\n }\n \n-export function artifactSpec(args: readonly string[]): ArtifactSpec {\n-    const cargoArgs = [...args, \"--message-format=json\"];\n+export class Cargo {\n+    constructor(readonly rootFolder: string, readonly output: OutputChannel) { }\n \n-    // arguments for a runnable from the quick pick should be updated.\n-    // see crates\\rust-analyzer\\src\\main_loop\\handlers.rs, handle_code_lens\n-    switch (cargoArgs[0]) {\n-        case \"run\": cargoArgs[0] = \"build\"; break;\n-        case \"test\": {\n-            if (!cargoArgs.includes(\"--no-run\")) {\n-                cargoArgs.push(\"--no-run\");\n+    // Made public for testing purposes\n+    static artifactSpec(args: readonly string[]): ArtifactSpec {\n+        const cargoArgs = [...args, \"--message-format=json\"];\n+\n+        // arguments for a runnable from the quick pick should be updated.\n+        // see crates\\rust-analyzer\\src\\main_loop\\handlers.rs, handle_code_lens\n+        switch (cargoArgs[0]) {\n+            case \"run\": cargoArgs[0] = \"build\"; break;\n+            case \"test\": {\n+                if (!cargoArgs.includes(\"--no-run\")) {\n+                    cargoArgs.push(\"--no-run\");\n+                }\n+                break;\n             }\n-            break;\n         }\n-    }\n \n-    const result: ArtifactSpec = { cargoArgs: cargoArgs };\n-    if (cargoArgs[0] === \"test\") {\n-        // for instance, `crates\\rust-analyzer\\tests\\heavy_tests\\main.rs` tests\n-        // produce 2 artifacts: {\"kind\": \"bin\"} and {\"kind\": \"test\"}\n-        result.filter = (artifacts) => artifacts.filter(it => it.isTest);\n-    }\n-\n-    return result;\n-}\n+        const result: ArtifactSpec = { cargoArgs: cargoArgs };\n+        if (cargoArgs[0] === \"test\") {\n+            // for instance, `crates\\rust-analyzer\\tests\\heavy_tests\\main.rs` tests\n+            // produce 2 artifacts: {\"kind\": \"bin\"} and {\"kind\": \"test\"}\n+            result.filter = (artifacts) => artifacts.filter(it => it.isTest);\n+        }\n \n-export class Cargo {\n-    constructor(readonly rootFolder: string, readonly output: OutputChannel) { }\n+        return result;\n+    }\n \n     private async getArtifacts(spec: ArtifactSpec): Promise<CompilationArtifact[]> {\n         const artifacts: CompilationArtifact[] = [];\n@@ -77,7 +79,7 @@ export class Cargo {\n     }\n \n     async executableFromArgs(args: readonly string[]): Promise<string> {\n-        const artifacts = await this.getArtifacts(artifactSpec(args));\n+        const artifacts = await this.getArtifacts(Cargo.artifactSpec(args));\n \n         if (artifacts.length === 0) {\n             throw new Error('No compilation artifacts');\n@@ -94,14 +96,7 @@ export class Cargo {\n         onStderrString: (data: string) => void\n     ): Promise<number> {\n         return new Promise((resolve, reject) => {\n-            let cargoPath;\n-            try {\n-                cargoPath = getCargoPathOrFail();\n-            } catch (err) {\n-                return reject(err);\n-            }\n-\n-            const cargo = cp.spawn(cargoPath, cargoArgs, {\n+            const cargo = cp.spawn(cargoPath(), cargoArgs, {\n                 stdio: ['ignore', 'pipe', 'pipe'],\n                 cwd: this.rootFolder\n             });\n@@ -126,26 +121,54 @@ export class Cargo {\n     }\n }\n \n-// Mirrors `ra_toolchain::cargo()` implementation\n-export function getCargoPathOrFail(): string {\n-    const envVar = process.env.CARGO;\n-    const executableName = \"cargo\";\n+/** Mirrors `ra_toolchain::cargo()` implementation */\n+export function cargoPath(): string {\n+    return getPathForExecutable(\"cargo\");\n+}\n+\n+/** Mirrors `ra_toolchain::get_path_for_executable()` implementation */\n+export const getPathForExecutable = memoize(\n+    // We apply caching to decrease file-system interactions\n+    (executableName: \"cargo\" | \"rustc\" | \"rustup\"): string => {\n+        {\n+            const envVar = process.env[executableName.toUpperCase()];\n+            if (envVar) return envVar;\n+        }\n+\n+        if (lookupInPath(executableName)) return executableName;\n \n-    if (envVar) {\n-        if (isValidExecutable(envVar)) return envVar;\n+        try {\n+            // hmm, `os.homedir()` seems to be infallible\n+            // it is not mentioned in docs and cannot be infered by the type signature...\n+            const standardPath = path.join(os.homedir(), \".cargo\", \"bin\", executableName);\n \n-        throw new Error(`\\`${envVar}\\` environment variable points to something that's not a valid executable`);\n+            if (isFile(standardPath)) return standardPath;\n+        } catch (err) {\n+            log.error(\"Failed to read the fs info\", err);\n+        }\n+        return executableName;\n     }\n+);\n \n-    if (isValidExecutable(executableName)) return executableName;\n+function lookupInPath(exec: string): boolean {\n+    const paths = process.env.PATH ?? \"\";;\n \n-    const standardLocation = path.join(os.homedir(), '.cargo', 'bin', executableName);\n+    const candidates = paths.split(path.delimiter).flatMap(dirInPath => {\n+        const candidate = path.join(dirInPath, exec);\n+        return os.type() === \"Windows_NT\"\n+            ? [candidate, `${candidate}.exe`]\n+            : [candidate];\n+    });\n \n-    if (isValidExecutable(standardLocation)) return standardLocation;\n+    return candidates.some(isFile);\n+}\n \n-    throw new Error(\n-        `Failed to find \\`${executableName}\\` executable. ` +\n-        `Make sure \\`${executableName}\\` is in \\`$PATH\\`, ` +\n-        `or set \\`${envVar}\\` to point to a valid executable.`\n-    );\n+function isFile(suspectPath: string): boolean {\n+    // It is not mentionned in docs, but `statSync()` throws an error when\n+    // the path doesn't exist\n+    try {\n+        return fs.statSync(suspectPath).isFile();\n+    } catch {\n+        return false;\n+    }\n }", "previous_filename": "editors/code/src/cargo.ts"}, {"sha": "fe3fb71cd7dc28c0b9493e61d81856e174d66ac2", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d605ec9c321392d9c7ee4b440c560e1e405d92e6/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d605ec9c321392d9c7ee4b440c560e1e405d92e6/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=d605ec9c321392d9c7ee4b440c560e1e405d92e6", "patch": "@@ -99,3 +99,21 @@ export function isValidExecutable(path: string): boolean {\n export function setContextValue(key: string, value: any): Thenable<void> {\n     return vscode.commands.executeCommand('setContext', key, value);\n }\n+\n+/**\n+ * Returns a higher-order function that caches the results of invoking the\n+ * underlying function.\n+ */\n+export function memoize<Ret, TThis, Param extends string>(func: (this: TThis, arg: Param) => Ret) {\n+    const cache = new Map<string, Ret>();\n+\n+    return function(this: TThis, arg: Param) {\n+        const cached = cache.get(arg);\n+        if (cached) return cached;\n+\n+        const result = func.call(this, arg);\n+        cache.set(arg, result);\n+\n+        return result;\n+    };\n+}"}, {"sha": "68794d53ede11b9c1f062500460d24f7b2f99470", "filename": "editors/code/tests/unit/launch_config.test.ts", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d605ec9c321392d9c7ee4b440c560e1e405d92e6/editors%2Fcode%2Ftests%2Funit%2Flaunch_config.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d605ec9c321392d9c7ee4b440c560e1e405d92e6/editors%2Fcode%2Ftests%2Funit%2Flaunch_config.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2Funit%2Flaunch_config.test.ts?ref=d605ec9c321392d9c7ee4b440c560e1e405d92e6", "patch": "@@ -1,25 +1,25 @@\n import * as assert from 'assert';\n-import * as cargo from '../../src/cargo';\n+import { Cargo } from '../../src/toolchain';\n \n suite('Launch configuration', () => {\n \n     suite('Lens', () => {\n         test('A binary', async () => {\n-            const args = cargo.artifactSpec([\"build\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\"]);\n+            const args = Cargo.artifactSpec([\"build\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\"]);\n \n             assert.deepEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\", \"--message-format=json\"]);\n             assert.deepEqual(args.filter, undefined);\n         });\n \n         test('One of Multiple Binaries', async () => {\n-            const args = cargo.artifactSpec([\"build\", \"--package\", \"pkg_name\", \"--bin\", \"bin1\"]);\n+            const args = Cargo.artifactSpec([\"build\", \"--package\", \"pkg_name\", \"--bin\", \"bin1\"]);\n \n             assert.deepEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"bin1\", \"--message-format=json\"]);\n             assert.deepEqual(args.filter, undefined);\n         });\n \n         test('A test', async () => {\n-            const args = cargo.artifactSpec([\"test\", \"--package\", \"pkg_name\", \"--lib\", \"--no-run\"]);\n+            const args = Cargo.artifactSpec([\"test\", \"--package\", \"pkg_name\", \"--lib\", \"--no-run\"]);\n \n             assert.deepEqual(args.cargoArgs, [\"test\", \"--package\", \"pkg_name\", \"--lib\", \"--no-run\", \"--message-format=json\"]);\n             assert.notDeepEqual(args.filter, undefined);\n@@ -28,22 +28,22 @@ suite('Launch configuration', () => {\n \n     suite('QuickPick', () => {\n         test('A binary', async () => {\n-            const args = cargo.artifactSpec([\"run\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\"]);\n+            const args = Cargo.artifactSpec([\"run\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\"]);\n \n             assert.deepEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"pkg_name\", \"--message-format=json\"]);\n             assert.deepEqual(args.filter, undefined);\n         });\n \n \n         test('One of Multiple Binaries', async () => {\n-            const args = cargo.artifactSpec([\"run\", \"--package\", \"pkg_name\", \"--bin\", \"bin2\"]);\n+            const args = Cargo.artifactSpec([\"run\", \"--package\", \"pkg_name\", \"--bin\", \"bin2\"]);\n \n             assert.deepEqual(args.cargoArgs, [\"build\", \"--package\", \"pkg_name\", \"--bin\", \"bin2\", \"--message-format=json\"]);\n             assert.deepEqual(args.filter, undefined);\n         });\n \n         test('A test', async () => {\n-            const args = cargo.artifactSpec([\"test\", \"--package\", \"pkg_name\", \"--lib\"]);\n+            const args = Cargo.artifactSpec([\"test\", \"--package\", \"pkg_name\", \"--lib\"]);\n \n             assert.deepEqual(args.cargoArgs, [\"test\", \"--package\", \"pkg_name\", \"--lib\", \"--message-format=json\", \"--no-run\"]);\n             assert.notDeepEqual(args.filter, undefined);"}]}