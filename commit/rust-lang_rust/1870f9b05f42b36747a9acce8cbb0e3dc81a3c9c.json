{"sha": "1870f9b05f42b36747a9acce8cbb0e3dc81a3c9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NzBmOWIwNWY0MmIzNjc0N2E5YWNjZThjYmIwZTNkYzgxYTNjOWM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-29T13:14:05Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-06-04T11:20:04Z"}, "message": "Allow printing the version of the default codegen backend if it isn't llvm", "tree": {"sha": "073dd0885d5fe60ae7eb0d6d7de134c54a9a87d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/073dd0885d5fe60ae7eb0d6d7de134c54a9a87d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1870f9b05f42b36747a9acce8cbb0e3dc81a3c9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1870f9b05f42b36747a9acce8cbb0e3dc81a3c9c", "html_url": "https://github.com/rust-lang/rust/commit/1870f9b05f42b36747a9acce8cbb0e3dc81a3c9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1870f9b05f42b36747a9acce8cbb0e3dc81a3c9c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f04a2d308e62c5ad0ab34b2e5fbcc0dfa32656fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f04a2d308e62c5ad0ab34b2e5fbcc0dfa32656fc", "html_url": "https://github.com/rust-lang/rust/commit/f04a2d308e62c5ad0ab34b2e5fbcc0dfa32656fc"}], "stats": {"total": 51, "additions": 22, "deletions": 29}, "files": [{"sha": "fa776bf9921167e9a7b4831fda088540f57ec162", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1870f9b05f42b36747a9acce8cbb0e3dc81a3c9c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870f9b05f42b36747a9acce8cbb0e3dc81a3c9c/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=1870f9b05f42b36747a9acce8cbb0e3dc81a3c9c", "patch": "@@ -167,6 +167,10 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         vec![]\n     }\n \n+    fn print_version(&self) {\n+        println!(\"Cranelift version: {}\", cranelift_codegen::VERSION);\n+    }\n+\n     fn codegen_crate(\n         &self,\n         tcx: TyCtxt<'_>,"}, {"sha": "8bccc129c2445c8501e877bc2782005018ef077c", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1870f9b05f42b36747a9acce8cbb0e3dc81a3c9c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870f9b05f42b36747a9acce8cbb0e3dc81a3c9c/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=1870f9b05f42b36747a9acce8cbb0e3dc81a3c9c", "patch": "@@ -21,7 +21,7 @@ use rustc_data_structures::sync::SeqCst;\n use rustc_errors::registry::{InvalidErrorCode, Registry};\n use rustc_errors::{ErrorReported, PResult};\n use rustc_feature::find_gated_cfg;\n-use rustc_interface::util::{self, collect_crate_types, get_builtin_codegen_backend};\n+use rustc_interface::util::{self, collect_crate_types, get_codegen_backend};\n use rustc_interface::{interface, Queries};\n use rustc_lint::LintStore;\n use rustc_metadata::locator;\n@@ -765,9 +765,7 @@ pub fn version(binary: &str, matches: &getopts::Matches) {\n         println!(\"commit-date: {}\", unw(util::commit_date_str()));\n         println!(\"host: {}\", config::host_triple());\n         println!(\"release: {}\", unw(util::release_str()));\n-        if cfg!(feature = \"llvm\") {\n-            get_builtin_codegen_backend(&None, \"llvm\")().print_version();\n-        }\n+        get_codegen_backend(&None, None).print_version();\n     }\n }\n \n@@ -1060,9 +1058,7 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     }\n \n     if cg_flags.iter().any(|x| *x == \"passes=list\") {\n-        if cfg!(feature = \"llvm\") {\n-            get_builtin_codegen_backend(&None, \"llvm\")().print_passes();\n-        }\n+        get_codegen_backend(&None, None).print_passes();\n         return None;\n     }\n "}, {"sha": "12309284dcdfe4dcd4e8548d786ad5a236d3c085", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1870f9b05f42b36747a9acce8cbb0e3dc81a3c9c/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1870f9b05f42b36747a9acce8cbb0e3dc81a3c9c/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=1870f9b05f42b36747a9acce8cbb0e3dc81a3c9c", "patch": "@@ -73,7 +73,10 @@ pub fn create_session(\n     let codegen_backend = if let Some(make_codegen_backend) = make_codegen_backend {\n         make_codegen_backend(&sopts)\n     } else {\n-        get_codegen_backend(&sopts)\n+        get_codegen_backend(\n+            &sopts.maybe_sysroot,\n+            sopts.debugging_opts.codegen_backend.as_ref().map(|name| &name[..]),\n+        )\n     };\n \n     // target_override is documented to be called before init(), so this is okay\n@@ -241,7 +244,13 @@ fn load_backend_from_dylib(path: &Path) -> fn() -> Box<dyn CodegenBackend> {\n     }\n }\n \n-pub fn get_codegen_backend(sopts: &config::Options) -> Box<dyn CodegenBackend> {\n+/// Get the codegen backend based on the name and specified sysroot.\n+///\n+/// A name of `None` indicates that the default backend should be used.\n+pub fn get_codegen_backend(\n+    maybe_sysroot: &Option<PathBuf>,\n+    backend_name: Option<&str>,\n+) -> Box<dyn CodegenBackend> {\n     static INIT: Once = Once::new();\n \n     static mut LOAD: fn() -> Box<dyn CodegenBackend> = || unreachable!();\n@@ -253,16 +262,11 @@ pub fn get_codegen_backend(sopts: &config::Options) -> Box<dyn CodegenBackend> {\n         #[cfg(not(feature = \"llvm\"))]\n         const DEFAULT_CODEGEN_BACKEND: &str = \"cranelift\";\n \n-        let codegen_name = sopts\n-            .debugging_opts\n-            .codegen_backend\n-            .as_ref()\n-            .map(|name| &name[..])\n-            .unwrap_or(DEFAULT_CODEGEN_BACKEND);\n-\n-        let backend = match codegen_name {\n+        let backend = match backend_name.unwrap_or(DEFAULT_CODEGEN_BACKEND) {\n             filename if filename.contains('.') => load_backend_from_dylib(filename.as_ref()),\n-            codegen_name => get_builtin_codegen_backend(&sopts.maybe_sysroot, codegen_name),\n+            #[cfg(feature = \"llvm\")]\n+            \"llvm\" => rustc_codegen_llvm::LlvmCodegenBackend::new,\n+            backend_name => get_codegen_sysroot(maybe_sysroot, backend_name),\n         };\n \n         unsafe {\n@@ -387,17 +391,6 @@ fn sysroot_candidates() -> Vec<PathBuf> {\n     }\n }\n \n-pub fn get_builtin_codegen_backend(\n-    maybe_sysroot: &Option<PathBuf>,\n-    backend_name: &str,\n-) -> fn() -> Box<dyn CodegenBackend> {\n-    match backend_name {\n-        #[cfg(feature = \"llvm\")]\n-        \"llvm\" => rustc_codegen_llvm::LlvmCodegenBackend::new,\n-        _ => get_codegen_sysroot(maybe_sysroot, backend_name),\n-    }\n-}\n-\n pub fn get_codegen_sysroot(\n     maybe_sysroot: &Option<PathBuf>,\n     backend_name: &str,"}]}