{"sha": "2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd", "node_id": "C_kwDOAAsO6NoAKDIwMDRhNTFmYTRjOTBhMmZlOTAzNWQ3YjE3YzFjOWRmNjkzOWMxY2Q", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-01T21:49:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-01T21:49:53Z"}, "message": "Rollup merge of #92468 - NieDzejkob:silent-cfg, r=petrochenkov\n\nEmit an error for `--cfg=)`\n\nFixes #73026\n\nSee also: #64467, #89468\n\nThe issue stems from a `FatalError` being silently raised in\n`panictry_buffer`. Normally this is not a problem, because\n`panictry_buffer` emits the causes of the error, but they are not\nthemselves fatal, so they get filtered out by the silent emitter.\n\nTo fix this, we use a parser entrypoint which doesn't use\n`panictry_buffer`, and we handle the error ourselves.", "tree": {"sha": "1ab825811e698ce4a657e99e09a8f2c485d9f332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ab825811e698ce4a657e99e09a8f2c485d9f332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0MyBCRBK7hj4Ov3rIwAAgJgIABdNSosbPiblQhED6bd/kaXE\nIc3UlklmIW+LexVkGHhdY7AFONkMn5sMM30cvt0AHbRlXq4GYXRyLBNztrmajlBl\nPxThe+hL/xJiCjUzoYH0ESfAxIoK55SD9QFu/ePz/YelUZft+smndHojZgF4gkIp\nxtYcIWckRPxT4J+I5pg07DQ+B+z074X9VgowNhCleeGVEFE3pLTBJRtfiQgrxcEQ\nfN6FBSTp6L1AZuSmPS6AcxLF9t944OdMgp5wienCpcMqBCt3tJ7rnnYNtecoHiUH\nco6IKM1mFoSueHavr3GxMOMwf5eDdQkPrC9zlLs1l5s1srnXlodD5ybbdtpSBa0=\n=0MvM\n-----END PGP SIGNATURE-----\n", "payload": "tree 1ab825811e698ce4a657e99e09a8f2c485d9f332\nparent aa31c9726da6ba10f76c700a52b4682555e745d9\nparent 193342eb8d38afb7327642ced3434730b6f4fa00\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641073793 +0100\ncommitter GitHub <noreply@github.com> 1641073793 +0100\n\nRollup merge of #92468 - NieDzejkob:silent-cfg, r=petrochenkov\n\nEmit an error for `--cfg=)`\n\nFixes #73026\n\nSee also: #64467, #89468\n\nThe issue stems from a `FatalError` being silently raised in\n`panictry_buffer`. Normally this is not a problem, because\n`panictry_buffer` emits the causes of the error, but they are not\nthemselves fatal, so they get filtered out by the silent emitter.\n\nTo fix this, we use a parser entrypoint which doesn't use\n`panictry_buffer`, and we handle the error ourselves.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd", "html_url": "https://github.com/rust-lang/rust/commit/2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa31c9726da6ba10f76c700a52b4682555e745d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa31c9726da6ba10f76c700a52b4682555e745d9", "html_url": "https://github.com/rust-lang/rust/commit/aa31c9726da6ba10f76c700a52b4682555e745d9"}, {"sha": "193342eb8d38afb7327642ced3434730b6f4fa00", "url": "https://api.github.com/repos/rust-lang/rust/commits/193342eb8d38afb7327642ced3434730b6f4fa00", "html_url": "https://github.com/rust-lang/rust/commit/193342eb8d38afb7327642ced3434730b6f4fa00"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "3804e10030733309293866cc5383da930661a2d8", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd", "patch": "@@ -11,7 +11,7 @@ use rustc_errors::registry::Registry;\n use rustc_errors::{ErrorReported, Handler};\n use rustc_lint::LintStore;\n use rustc_middle::ty;\n-use rustc_parse::new_parser_from_source_str;\n+use rustc_parse::maybe_new_parser_from_source_str;\n use rustc_query_impl::QueryCtxt;\n use rustc_session::config::{self, ErrorOutputType, Input, OutputFilenames};\n use rustc_session::early_error;\n@@ -91,7 +91,6 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n                     s\n                 )));\n                 let filename = FileName::cfg_spec_source_code(&s);\n-                let mut parser = new_parser_from_source_str(&sess, filename, s.to_string());\n \n                 macro_rules! error {\n                     ($reason: expr) => {\n@@ -102,26 +101,27 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n                     };\n                 }\n \n-                match &mut parser.parse_meta_item() {\n-                    Ok(meta_item) if parser.token == token::Eof => {\n-                        if meta_item.path.segments.len() != 1 {\n-                            error!(\"argument key must be an identifier\");\n-                        }\n-                        match &meta_item.kind {\n-                            MetaItemKind::List(..) => {\n-                                error!(r#\"expected `key` or `key=\"value\"`\"#);\n-                            }\n-                            MetaItemKind::NameValue(lit) if !lit.kind.is_str() => {\n-                                error!(\"argument value must be a string\");\n+                match maybe_new_parser_from_source_str(&sess, filename, s.to_string()) {\n+                    Ok(mut parser) => match &mut parser.parse_meta_item() {\n+                        Ok(meta_item) if parser.token == token::Eof => {\n+                            if meta_item.path.segments.len() != 1 {\n+                                error!(\"argument key must be an identifier\");\n                             }\n-                            MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n-                                let ident = meta_item.ident().expect(\"multi-segment cfg key\");\n-                                return (ident.name, meta_item.value_str());\n+                            match &meta_item.kind {\n+                                MetaItemKind::List(..) => {}\n+                                MetaItemKind::NameValue(lit) if !lit.kind.is_str() => {\n+                                    error!(\"argument value must be a string\");\n+                                }\n+                                MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n+                                    let ident = meta_item.ident().expect(\"multi-segment cfg key\");\n+                                    return (ident.name, meta_item.value_str());\n+                                }\n                             }\n                         }\n-                    }\n-                    Ok(..) => {}\n-                    Err(err) => err.cancel(),\n+                        Ok(..) => {}\n+                        Err(err) => err.cancel(),\n+                    },\n+                    Err(errs) => errs.into_iter().for_each(|mut err| err.cancel()),\n                 }\n \n                 error!(r#\"expected `key` or `key=\"value\"`\"#);"}, {"sha": "1d7fa7885348ef8509bad200af0ca22c1810fde2", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-8.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.rs?ref=2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd", "patch": "@@ -0,0 +1,3 @@\n+// compile-flags: --cfg )\n+// error-pattern: invalid `--cfg` argument: `)` (expected `key` or `key=\"value\"`)\n+fn main() {}"}, {"sha": "7bb1814127b292e43a0b26c6d8a05cd707ccf3a9", "filename": "src/test/ui/conditional-compilation/cfg-arg-invalid-8.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-arg-invalid-8.stderr?ref=2004a51fa4c90a2fe9035d7b17c1c9df6939c1cd", "patch": "@@ -0,0 +1,2 @@\n+error: invalid `--cfg` argument: `)` (expected `key` or `key=\"value\"`)\n+"}]}