{"sha": "9a1edc3c061021a48ffbd149340d7ce059faa97c", "node_id": "C_kwDOAAsO6NoAKDlhMWVkYzNjMDYxMDIxYTQ4ZmZiZDE0OTM0MGQ3Y2UwNTlmYWE5N2M", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-21T12:05:38Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-21T12:22:12Z"}, "message": "use is_terminal to implement isatty", "tree": {"sha": "4bc43a3bfe186552b0879a2b749106bd1fef4a24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bc43a3bfe186552b0879a2b749106bd1fef4a24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a1edc3c061021a48ffbd149340d7ce059faa97c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1edc3c061021a48ffbd149340d7ce059faa97c", "html_url": "https://github.com/rust-lang/rust/commit/9a1edc3c061021a48ffbd149340d7ce059faa97c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a1edc3c061021a48ffbd149340d7ce059faa97c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "befc94e691ae36c2fad134e1cdf483b7bdeeb74f", "url": "https://api.github.com/repos/rust-lang/rust/commits/befc94e691ae36c2fad134e1cdf483b7bdeeb74f", "html_url": "https://github.com/rust-lang/rust/commit/befc94e691ae36c2fad134e1cdf483b7bdeeb74f"}], "stats": {"total": 71, "additions": 41, "deletions": 30}, "files": [{"sha": "97271c33a2e6b78de02aebb560b1df2c769db9be", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a1edc3c061021a48ffbd149340d7ce059faa97c/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a1edc3c061021a48ffbd149340d7ce059faa97c/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=9a1edc3c061021a48ffbd149340d7ce059faa97c", "patch": "@@ -9,6 +9,7 @@\n #![feature(is_some_and)]\n #![feature(nonzero_ops)]\n #![feature(local_key_cell_methods)]\n+#![feature(is_terminal)]\n // Configure clippy and other lints\n #![allow(\n     clippy::collapsible_else_if,"}, {"sha": "44a433df1e9c0d45f08c11304d8375a7468fa414", "filename": "src/tools/miri/src/shims/unix/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a1edc3c061021a48ffbd149340d7ce059faa97c/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a1edc3c061021a48ffbd149340d7ce059faa97c/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs?ref=9a1edc3c061021a48ffbd149340d7ce059faa97c", "patch": "@@ -452,7 +452,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"isatty\" => {\n                 let [fd] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.isatty(fd)?;\n-                this.write_scalar(Scalar::from_i32(result), dest)?;\n+                this.write_scalar(result, dest)?;\n             }\n             \"pthread_atfork\" => {\n                 let [prepare, parent, child] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;"}, {"sha": "0610f65db113f8f690396bdb5ed4fd82f9b39d36", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 39, "deletions": 29, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9a1edc3c061021a48ffbd149340d7ce059faa97c/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a1edc3c061021a48ffbd149340d7ce059faa97c/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=9a1edc3c061021a48ffbd149340d7ce059faa97c", "patch": "@@ -4,7 +4,7 @@ use std::convert::TryInto;\n use std::fs::{\n     read_dir, remove_dir, remove_file, rename, DirBuilder, File, FileType, OpenOptions, ReadDir,\n };\n-use std::io::{self, ErrorKind, Read, Seek, SeekFrom, Write};\n+use std::io::{self, ErrorKind, IsTerminal, Read, Seek, SeekFrom, Write};\n use std::path::{Path, PathBuf};\n use std::time::SystemTime;\n \n@@ -65,6 +65,8 @@ trait FileDescriptor: std::fmt::Debug {\n \n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>>;\n \n+    fn is_tty(&self) -> bool;\n+\n     #[cfg(unix)]\n     fn as_unix_host_fd(&self) -> Option<i32> {\n         None\n@@ -143,6 +145,10 @@ impl FileDescriptor for FileHandle {\n         use std::os::unix::io::AsRawFd;\n         Some(self.file.as_raw_fd())\n     }\n+\n+    fn is_tty(&self) -> bool {\n+        self.file.is_terminal()\n+    }\n }\n \n impl FileDescriptor for io::Stdin {\n@@ -170,6 +176,10 @@ impl FileDescriptor for io::Stdin {\n     fn as_unix_host_fd(&self) -> Option<i32> {\n         Some(libc::STDIN_FILENO)\n     }\n+\n+    fn is_tty(&self) -> bool {\n+        self.is_terminal()\n+    }\n }\n \n impl FileDescriptor for io::Stdout {\n@@ -202,6 +212,10 @@ impl FileDescriptor for io::Stdout {\n     fn as_unix_host_fd(&self) -> Option<i32> {\n         Some(libc::STDOUT_FILENO)\n     }\n+\n+    fn is_tty(&self) -> bool {\n+        self.is_terminal()\n+    }\n }\n \n impl FileDescriptor for io::Stderr {\n@@ -227,12 +241,16 @@ impl FileDescriptor for io::Stderr {\n     fn as_unix_host_fd(&self) -> Option<i32> {\n         Some(libc::STDERR_FILENO)\n     }\n+\n+    fn is_tty(&self) -> bool {\n+        self.is_terminal()\n+    }\n }\n \n #[derive(Debug)]\n-struct DummyOutput;\n+struct NullOutput;\n \n-impl FileDescriptor for DummyOutput {\n+impl FileDescriptor for NullOutput {\n     fn name(&self) -> &'static str {\n         \"stderr and stdout\"\n     }\n@@ -247,7 +265,11 @@ impl FileDescriptor for DummyOutput {\n     }\n \n     fn dup(&mut self) -> io::Result<Box<dyn FileDescriptor>> {\n-        Ok(Box::new(DummyOutput))\n+        Ok(Box::new(NullOutput))\n+    }\n+\n+    fn is_tty(&self) -> bool {\n+        false\n     }\n }\n \n@@ -267,8 +289,8 @@ impl FileHandler {\n         let mut handles: BTreeMap<_, Box<dyn FileDescriptor>> = BTreeMap::new();\n         handles.insert(0i32, Box::new(io::stdin()));\n         if mute_stdout_stderr {\n-            handles.insert(1i32, Box::new(DummyOutput));\n-            handles.insert(2i32, Box::new(DummyOutput));\n+            handles.insert(1i32, Box::new(NullOutput));\n+            handles.insert(2i32, Box::new(NullOutput));\n         } else {\n             handles.insert(1i32, Box::new(io::stdout()));\n             handles.insert(2i32, Box::new(io::stderr()));\n@@ -1662,35 +1684,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     }\n \n     #[cfg_attr(not(unix), allow(unused))]\n-    fn isatty(&mut self, miri_fd: &OpTy<'tcx, Provenance>) -> InterpResult<'tcx, i32> {\n+    fn isatty(\n+        &mut self,\n+        miri_fd: &OpTy<'tcx, Provenance>,\n+    ) -> InterpResult<'tcx, Scalar<Provenance>> {\n         let this = self.eval_context_mut();\n-        #[cfg(unix)]\n+        // \"returns 1 if fd is an open file descriptor referring to a terminal;\n+        // otherwise 0 is returned, and errno is set to indicate the error\"\n         if matches!(this.machine.isolated_op, IsolatedOp::Allow) {\n-            let miri_fd = this.read_scalar(miri_fd)?.to_i32()?;\n-            if let Some(host_fd) =\n-                this.machine.file_handler.handles.get(&miri_fd).and_then(|fd| fd.as_unix_host_fd())\n-            {\n-                // \"returns 1 if fd is an open file descriptor referring to a terminal;\n-                // otherwise 0 is returned, and errno is set to indicate the error\"\n-                // SAFETY: isatty has no preconditions\n-                let is_tty = unsafe { libc::isatty(host_fd) };\n-                if is_tty == 0 {\n-                    let errno = std::io::Error::last_os_error()\n-                        .raw_os_error()\n-                        .map(Scalar::from_i32)\n-                        .unwrap();\n-                    this.set_last_error(errno)?;\n-                }\n-                return Ok(is_tty);\n+            let fd = this.read_scalar(miri_fd)?.to_i32()?;\n+            if this.machine.file_handler.handles.get(&fd).map(|fd| fd.is_tty()) == Some(true) {\n+                return Ok(Scalar::from_i32(1));\n             }\n         }\n-        // We are attemping to use a Unix interface on a non-Unix platform, or we are on a Unix\n-        // platform and the passed file descriptor is not open, or isolation is enabled\n-        // FIXME: It should be possible to emulate this at least on Windows by using\n-        // GetConsoleMode.\n+        // Fallback when the FD was not found or isolation is enabled.\n         let enotty = this.eval_libc(\"ENOTTY\")?;\n         this.set_last_error(enotty)?;\n-        Ok(0)\n+        Ok(Scalar::from_i32(0))\n     }\n \n     fn realpath("}]}