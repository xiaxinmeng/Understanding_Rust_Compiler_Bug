{"sha": "f47dc4de8d7aadea17dba023ece70e5b170274b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0N2RjNGRlOGQ3YWFkZWExN2RiYTAyM2VjZTcwZTViMTcwMjc0YjE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-02-14T20:08:25Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-02-14T20:08:25Z"}, "message": "Check that impl self type matches up with expected self type in path mode\n\nFixes #3144.", "tree": {"sha": "929e3e7731f0ba519721686973775452333615d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/929e3e7731f0ba519721686973775452333615d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f47dc4de8d7aadea17dba023ece70e5b170274b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f47dc4de8d7aadea17dba023ece70e5b170274b1", "html_url": "https://github.com/rust-lang/rust/commit/f47dc4de8d7aadea17dba023ece70e5b170274b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f47dc4de8d7aadea17dba023ece70e5b170274b1/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ead9ef13bb5da86e470c3d9a69d83795661d3c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ead9ef13bb5da86e470c3d9a69d83795661d3c6", "html_url": "https://github.com/rust-lang/rust/commit/1ead9ef13bb5da86e470c3d9a69d83795661d3c6"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "4e082842501084bb178867adf017174e954b23a5", "filename": "crates/ra_hir_ty/src/marks.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f47dc4de8d7aadea17dba023ece70e5b170274b1/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47dc4de8d7aadea17dba023ece70e5b170274b1/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmarks.rs?ref=f47dc4de8d7aadea17dba023ece70e5b170274b1", "patch": "@@ -4,6 +4,7 @@ test_utils::marks!(\n     type_var_cycles_resolve_completely\n     type_var_cycles_resolve_as_possible\n     type_var_resolves_to_int_var\n+    impl_self_type_match_without_receiver\n     match_ergonomics_ref\n     coerce_merge_fail_fallback\n );"}, {"sha": "4f8c524336b32ef0dc5ad003eaefa0218ba450b0", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f47dc4de8d7aadea17dba023ece70e5b170274b1/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47dc4de8d7aadea17dba023ece70e5b170274b1/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=f47dc4de8d7aadea17dba023ece70e5b170274b1", "patch": "@@ -425,6 +425,15 @@ fn iterate_inherent_methods<T>(\n                 if !is_valid_candidate(db, name, receiver_ty, item, self_ty) {\n                     continue;\n                 }\n+                // we have to check whether the self type unifies with the type\n+                // that the impl is for. If we have a receiver type, this\n+                // already happens in `is_valid_candidate` above; if not, we\n+                // check it here\n+                if receiver_ty.is_none() && inherent_impl_substs(db, impl_block, self_ty).is_none()\n+                {\n+                    test_utils::tested_by!(impl_self_type_match_without_receiver);\n+                    continue;\n+                }\n                 if let Some(result) = callback(&self_ty.value, item) {\n                     return Some(result);\n                 }"}, {"sha": "1f767d324f5505a7bf6669ddf90c300ff20a32ce", "filename": "crates/ra_hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f47dc4de8d7aadea17dba023ece70e5b170274b1/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47dc4de8d7aadea17dba023ece70e5b170274b1/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=f47dc4de8d7aadea17dba023ece70e5b170274b1", "patch": "@@ -963,6 +963,38 @@ fn test() { S2.into()<|>; }\n     assert_eq!(t, \"{unknown}\");\n }\n \n+#[test]\n+fn method_resolution_overloaded_method() {\n+    test_utils::covers!(impl_self_type_match_without_receiver);\n+    let t = type_at(\n+        r#\"\n+//- main.rs\n+struct Wrapper<T>(T);\n+struct Foo<T>(T);\n+struct Bar<T>(T);\n+\n+impl<T> Wrapper<Foo<T>> {\n+    pub fn new(foo_: T) -> Self {\n+        Wrapper(Foo(foo_))\n+    }\n+}\n+\n+impl<T> Wrapper<Bar<T>> {\n+    pub fn new(bar_: T) -> Self {\n+        Wrapper(Bar(bar_))\n+    }\n+}\n+\n+fn main() {\n+    let a = Wrapper::<Foo<f32>>::new(1.0);\n+    let b = Wrapper::<Bar<f32>>::new(1.0);\n+    (a, b)<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"(Wrapper<Foo<f32>>, Wrapper<Bar<f32>>)\")\n+}\n+\n #[test]\n fn method_resolution_encountering_fn_type() {\n     type_at("}]}