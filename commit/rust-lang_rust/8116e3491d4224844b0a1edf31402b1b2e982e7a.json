{"sha": "8116e3491d4224844b0a1edf31402b1b2e982e7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMTZlMzQ5MWQ0MjI0ODQ0YjBhMWVkZjMxNDAyYjFiMmU5ODJlN2E=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-11-30T09:07:10Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-11-30T09:07:10Z"}, "message": "Cargo fmt & update a test", "tree": {"sha": "d152d939306eec6b1f461e2214e8436fc3802f84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d152d939306eec6b1f461e2214e8436fc3802f84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8116e3491d4224844b0a1edf31402b1b2e982e7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8116e3491d4224844b0a1edf31402b1b2e982e7a", "html_url": "https://github.com/rust-lang/rust/commit/8116e3491d4224844b0a1edf31402b1b2e982e7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8116e3491d4224844b0a1edf31402b1b2e982e7a/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22c9025027144a74bc86893a6af6b9ad807f21dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/22c9025027144a74bc86893a6af6b9ad807f21dc", "html_url": "https://github.com/rust-lang/rust/commit/22c9025027144a74bc86893a6af6b9ad807f21dc"}], "stats": {"total": 47, "additions": 24, "deletions": 23}, "files": [{"sha": "33e79d5c2b2d662eba8cdec8a1618f763392b9b7", "filename": "src/expr.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8116e3491d4224844b0a1edf31402b1b2e982e7a/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8116e3491d4224844b0a1edf31402b1b2e982e7a/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=8116e3491d4224844b0a1edf31402b1b2e982e7a", "patch": "@@ -1502,8 +1502,7 @@ fn flatten_arm_body<'a>(context: &'a RewriteContext, body: &'a ast::Expr) -> (bo\n         {\n             if let ast::StmtKind::Expr(ref expr) = block.stmts[0].node {\n                 (\n-                    !context.config.force_multiline_blocks()\n-                        && can_extend_match_arm_body(expr),\n+                    !context.config.force_multiline_blocks() && can_extend_match_arm_body(expr),\n                     &*expr,\n                 )\n             } else {\n@@ -1731,24 +1730,24 @@ fn can_extend_match_arm_body(body: &ast::Expr) -> bool {\n         // We do not allow `if` to stay on the same line, since we could easily mistake\n         // `pat => if cond { ... }` and `pat if cond => { ... }`.\n         ast::ExprKind::If(..) | ast::ExprKind::IfLet(..) => false,\n-        ast::ExprKind::ForLoop(..) |\n-        ast::ExprKind::Loop(..) |\n-        ast::ExprKind::While(..) |\n-        ast::ExprKind::WhileLet(..) |\n-        ast::ExprKind::Match(..) |\n-        ast::ExprKind::Block(..) |\n-        ast::ExprKind::Closure(..) |\n-        ast::ExprKind::Array(..) |\n-        ast::ExprKind::Call(..) |\n-        ast::ExprKind::MethodCall(..) |\n-        ast::ExprKind::Mac(..) |\n-        ast::ExprKind::Struct(..) |\n-        ast::ExprKind::Tup(..) => true,\n-        ast::ExprKind::AddrOf(_, ref expr) |\n-        ast::ExprKind::Box(ref expr) |\n-        ast::ExprKind::Try(ref expr) |\n-        ast::ExprKind::Unary(_, ref expr) |\n-        ast::ExprKind::Cast(ref expr, _) => can_extend_match_arm_body(expr),\n+        ast::ExprKind::ForLoop(..)\n+        | ast::ExprKind::Loop(..)\n+        | ast::ExprKind::While(..)\n+        | ast::ExprKind::WhileLet(..)\n+        | ast::ExprKind::Match(..)\n+        | ast::ExprKind::Block(..)\n+        | ast::ExprKind::Closure(..)\n+        | ast::ExprKind::Array(..)\n+        | ast::ExprKind::Call(..)\n+        | ast::ExprKind::MethodCall(..)\n+        | ast::ExprKind::Mac(..)\n+        | ast::ExprKind::Struct(..)\n+        | ast::ExprKind::Tup(..) => true,\n+        ast::ExprKind::AddrOf(_, ref expr)\n+        | ast::ExprKind::Box(ref expr)\n+        | ast::ExprKind::Try(ref expr)\n+        | ast::ExprKind::Unary(_, ref expr)\n+        | ast::ExprKind::Cast(ref expr, _) => can_extend_match_arm_body(expr),\n         _ => false,\n     }\n }"}, {"sha": "7cb4cac1d691ecde638d55c6a3293bc60dce764a", "filename": "tests/target/configs-force_multiline_block-false.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8116e3491d4224844b0a1edf31402b1b2e982e7a/tests%2Ftarget%2Fconfigs-force_multiline_block-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8116e3491d4224844b0a1edf31402b1b2e982e7a/tests%2Ftarget%2Fconfigs-force_multiline_block-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-force_multiline_block-false.rs?ref=8116e3491d4224844b0a1edf31402b1b2e982e7a", "patch": "@@ -3,9 +3,11 @@\n \n fn main() {\n     match lorem {\n-        Lorem::Ipsum => if ipsum {\n-            println!(\"dolor\");\n-        },\n+        Lorem::Ipsum => {\n+            if ipsum {\n+                println!(\"dolor\");\n+            }\n+        }\n         Lorem::Dolor => println!(\"amet\"),\n     }\n }"}]}