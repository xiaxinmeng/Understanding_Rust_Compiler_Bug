{"sha": "1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "node_id": "C_kwDOAAsO6NoAKDFiMTRmZDNiMTA2Mzc3MTkyM2UyZmNmMjExMDk2MWJmYTViYTRhZDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-04T16:37:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-04T16:37:46Z"}, "message": "Auto merge of #94612 - matthiaskrgr:rollup-2jm5wkr, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nr? `@ghost`", "tree": {"sha": "80d16945383b1625f90a8dfd7a260a19f34b16d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80d16945383b1625f90a8dfd7a260a19f34b16d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "html_url": "https://github.com/rust-lang/rust/commit/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f", "html_url": "https://github.com/rust-lang/rust/commit/b4bf56cd66ca83e908fd43bde4c627f94b2a8a9f"}, {"sha": "b4baef567504180d9589070336293bb48b8a597e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4baef567504180d9589070336293bb48b8a597e", "html_url": "https://github.com/rust-lang/rust/commit/b4baef567504180d9589070336293bb48b8a597e"}], "stats": {"total": 174, "additions": 112, "deletions": 62}, "files": [{"sha": "de582f702adcceebdc1031222f5db3a02ba093e6", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -221,7 +221,6 @@ dependencies = [\n  \"getopts\",\n  \"ignore\",\n  \"libc\",\n- \"num_cpus\",\n  \"once_cell\",\n  \"opener\",\n  \"pretty_assertions\",\n@@ -249,7 +248,6 @@ dependencies = [\n  \"anyhow\",\n  \"flate2\",\n  \"hex 0.4.2\",\n- \"num_cpus\",\n  \"rayon\",\n  \"serde\",\n  \"serde_json\",\n@@ -4242,7 +4240,6 @@ name = \"rustc_session\"\n version = \"0.0.0\"\n dependencies = [\n  \"getopts\",\n- \"num_cpus\",\n  \"rustc_ast\",\n  \"rustc_data_structures\",\n  \"rustc_errors\","}, {"sha": "40daf4eb28fc1b558e78fbf8e1b016b048b731ac", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -1,5 +1,5 @@\n use super::pat::Expected;\n-use super::ty::{AllowPlus, IsAsCast};\n+use super::ty::{AllowPlus, RecoverQuestionMark};\n use super::{\n     BlockMode, CommaRecoveryMode, Parser, PathStyle, RecoverColon, RecoverComma, Restrictions,\n     SemiColonMode, SeqSep, TokenExpectType, TokenType,\n@@ -1049,9 +1049,9 @@ impl<'a> Parser<'a> {\n     pub(super) fn maybe_recover_from_question_mark(\n         &mut self,\n         ty: P<Ty>,\n-        is_as_cast: IsAsCast,\n+        recover_question_mark: RecoverQuestionMark,\n     ) -> P<Ty> {\n-        if let IsAsCast::Yes = is_as_cast {\n+        if let RecoverQuestionMark::No = recover_question_mark {\n             return ty;\n         }\n         if self.token == token::Question {"}, {"sha": "40902fa18331333568612d39c47405282c111909", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -140,7 +140,7 @@ impl<'a> Parser<'a> {\n             }\n \n             NonterminalKind::Ty => {\n-                token::NtTy(self.collect_tokens_no_attrs(|this| this.parse_ty())?)\n+                token::NtTy(self.collect_tokens_no_attrs(|this| this.parse_no_question_mark_recover())?)\n             }\n             // this could be handled like a token, since it is one\n             NonterminalKind::Ident"}, {"sha": "436c5bd4fcac23fc7b62f5f305d0442530613c21", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -44,7 +44,7 @@ pub(super) enum RecoverQPath {\n     No,\n }\n \n-pub(super) enum IsAsCast {\n+pub(super) enum RecoverQuestionMark {\n     Yes,\n     No,\n }\n@@ -105,7 +105,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             None,\n-            IsAsCast::No,\n+            RecoverQuestionMark::Yes,\n         )\n     }\n \n@@ -119,7 +119,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             Some(ty_params),\n-            IsAsCast::No,\n+            RecoverQuestionMark::Yes,\n         )\n     }\n \n@@ -133,7 +133,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             None,\n-            IsAsCast::No,\n+            RecoverQuestionMark::Yes,\n         )\n     }\n \n@@ -150,7 +150,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             None,\n-            IsAsCast::No,\n+            RecoverQuestionMark::Yes,\n         )\n     }\n \n@@ -163,9 +163,21 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             None,\n-            IsAsCast::Yes,\n+            RecoverQuestionMark::No,\n         )\n     }\n+\n+    pub(super) fn parse_no_question_mark_recover(&mut self) -> PResult<'a, P<Ty>> {\n+        self.parse_ty_common(\n+            AllowPlus::Yes,\n+            AllowCVariadic::No,\n+            RecoverQPath::Yes,\n+            RecoverReturnSign::Yes,\n+            None,\n+            RecoverQuestionMark::No,\n+        )\n+    }\n+\n     /// Parse a type without recovering `:` as `->` to avoid breaking code such as `where fn() : for<'a>`\n     pub(super) fn parse_ty_for_where_clause(&mut self) -> PResult<'a, P<Ty>> {\n         self.parse_ty_common(\n@@ -174,7 +186,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::OnlyFatArrow,\n             None,\n-            IsAsCast::No,\n+            RecoverQuestionMark::Yes,\n         )\n     }\n \n@@ -193,7 +205,7 @@ impl<'a> Parser<'a> {\n                 recover_qpath,\n                 recover_return_sign,\n                 None,\n-                IsAsCast::No,\n+                RecoverQuestionMark::Yes,\n             )?;\n             FnRetTy::Ty(ty)\n         } else if recover_return_sign.can_recover(&self.token.kind) {\n@@ -214,7 +226,7 @@ impl<'a> Parser<'a> {\n                 recover_qpath,\n                 recover_return_sign,\n                 None,\n-                IsAsCast::No,\n+                RecoverQuestionMark::Yes,\n             )?;\n             FnRetTy::Ty(ty)\n         } else {\n@@ -229,7 +241,7 @@ impl<'a> Parser<'a> {\n         recover_qpath: RecoverQPath,\n         recover_return_sign: RecoverReturnSign,\n         ty_generics: Option<&Generics>,\n-        is_as_cast: IsAsCast,\n+        recover_question_mark: RecoverQuestionMark,\n     ) -> PResult<'a, P<Ty>> {\n         let allow_qpath_recovery = recover_qpath == RecoverQPath::Yes;\n         maybe_recover_from_interpolated_ty_qpath!(self, allow_qpath_recovery);\n@@ -305,7 +317,7 @@ impl<'a> Parser<'a> {\n         // Try to recover from use of `+` with incorrect priority.\n         self.maybe_report_ambiguous_plus(allow_plus, impl_dyn_multi, &ty);\n         self.maybe_recover_from_bad_type_plus(allow_plus, &ty)?;\n-        let ty = self.maybe_recover_from_question_mark(ty, is_as_cast);\n+        let ty = self.maybe_recover_from_question_mark(ty, recover_question_mark);\n         self.maybe_recover_from_bad_qpath(ty, allow_qpath_recovery)\n     }\n "}, {"sha": "6b1eaa4d399d9d291133d36e7de2d46c93464b22", "filename": "compiler/rustc_session/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/compiler%2Frustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/compiler%2Frustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2FCargo.toml?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -15,6 +15,5 @@ rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_fs_util = { path = \"../rustc_fs_util\" }\n-num_cpus = \"1.0\"\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }"}, {"sha": "c42a1530451d673f3d58df0dcf075713929673e0", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -551,7 +551,7 @@ mod parse {\n     crate fn parse_threads(slot: &mut usize, v: Option<&str>) -> bool {\n         match v.and_then(|s| s.parse().ok()) {\n             Some(0) => {\n-                *slot = ::num_cpus::get();\n+                *slot = std::thread::available_parallelism().map_or(1, std::num::NonZeroUsize::get);\n                 true\n             }\n             Some(i) => {"}, {"sha": "511de863dc51bae59f8eadf508225db02d6db31e", "filename": "library/std/src/sync/once.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fonce.rs?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -256,6 +256,7 @@ impl Once {\n     ///\n     /// [poison]: struct.Mutex.html#poisoning\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[track_caller]\n     pub fn call_once<F>(&self, f: F)\n     where\n         F: FnOnce(),\n@@ -390,6 +391,7 @@ impl Once {\n     // currently no way to take an `FnOnce` and call it via virtual dispatch\n     // without some allocation overhead.\n     #[cold]\n+    #[track_caller]\n     fn call_inner(&self, ignore_poisoning: bool, init: &mut dyn FnMut(&OnceState)) {\n         let mut state_and_queue = self.state_and_queue.load(Ordering::Acquire);\n         loop {"}, {"sha": "5ffc86b4560fc9221a2111dfb530ed26fe1f7549", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -1443,13 +1443,18 @@ impl<T> JoinHandle<T> {\n         self.0.join()\n     }\n \n-    /// Checks if the associated thread is still running its main function.\n+    /// Checks if the associated thread has finished running its main function.\n     ///\n-    /// This might return `false` for a brief moment after the thread's main\n+    /// This might return `true` for a brief moment after the thread's main\n     /// function has returned, but before the thread itself has stopped running.\n+    /// However, once this returns `true`, [`join`][Self::join] can be expected\n+    /// to return quickly, without blocking for any significant amount of time.\n+    ///\n+    /// This function does not block. To block while waiting on the thread to finish,\n+    /// use [`join`][Self::join].\n     #[unstable(feature = \"thread_is_running\", issue = \"90470\")]\n-    pub fn is_running(&self) -> bool {\n-        Arc::strong_count(&self.0.packet) > 1\n+    pub fn is_finished(&self) -> bool {\n+        Arc::strong_count(&self.0.packet) == 1\n     }\n }\n "}, {"sha": "ea9623be63bc7c578523fd702c8d6af8ce96f7bf", "filename": "library/std/src/thread/scoped.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -240,7 +240,6 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     ///\n     /// ```\n     /// #![feature(scoped_threads)]\n-    /// #![feature(thread_is_running)]\n     ///\n     /// use std::thread;\n     ///\n@@ -274,7 +273,6 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     ///\n     /// ```\n     /// #![feature(scoped_threads)]\n-    /// #![feature(thread_is_running)]\n     ///\n     /// use std::thread;\n     ///\n@@ -289,13 +287,18 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n         self.0.join()\n     }\n \n-    /// Checks if the associated thread is still running its main function.\n+    /// Checks if the associated thread has finished running its main function.\n     ///\n-    /// This might return `false` for a brief moment after the thread's main\n+    /// This might return `true` for a brief moment after the thread's main\n     /// function has returned, but before the thread itself has stopped running.\n+    /// However, once this returns `true`, [`join`][Self::join] can be expected\n+    /// to return quickly, without blocking for any significant amount of time.\n+    ///\n+    /// This function does not block. To block while waiting on the thread to finish,\n+    /// use [`join`][Self::join].\n     #[unstable(feature = \"thread_is_running\", issue = \"90470\")]\n-    pub fn is_running(&self) -> bool {\n-        Arc::strong_count(&self.0.packet) > 1\n+    pub fn is_finished(&self) -> bool {\n+        Arc::strong_count(&self.0.packet) == 1\n     }\n }\n "}, {"sha": "3323ba36bf31091798f939babdc64cb2ae932a6b", "filename": "library/std/src/thread/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -52,7 +52,7 @@ fn test_run_basic() {\n }\n \n #[test]\n-fn test_is_running() {\n+fn test_is_finished() {\n     let b = Arc::new(Barrier::new(2));\n     let t = thread::spawn({\n         let b = b.clone();\n@@ -63,14 +63,14 @@ fn test_is_running() {\n     });\n \n     // Thread is definitely running here, since it's still waiting for the barrier.\n-    assert_eq!(t.is_running(), true);\n+    assert_eq!(t.is_finished(), false);\n \n     // Unblock the barrier.\n     b.wait();\n \n-    // Now check that t.is_running() becomes false within a reasonable time.\n+    // Now check that t.is_finished() becomes true within a reasonable time.\n     let start = Instant::now();\n-    while t.is_running() {\n+    while !t.is_finished() {\n         assert!(start.elapsed() < Duration::from_secs(2));\n         thread::sleep(Duration::from_millis(15));\n     }"}, {"sha": "02efc08cc791f798d09622cef685ae25ec26844c", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -37,7 +37,6 @@ test = false\n build_helper = { path = \"../build_helper\" }\n cmake = \"0.1.38\"\n filetime = \"0.2\"\n-num_cpus = \"1.0\"\n getopts = \"0.2.19\"\n cc = \"1.0.69\"\n libc = \"0.2\""}, {"sha": "997e811e214dfbe08d60551d9280de5ba55b4216", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -387,7 +387,7 @@ macro_rules! derive_merge {\n \n derive_merge! {\n     /// TOML representation of various global build decisions.\n-    #[derive(Deserialize, Default, Clone)]\n+    #[derive(Deserialize, Default)]\n     #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n     struct Build {\n         build: Option<String>,\n@@ -434,7 +434,7 @@ derive_merge! {\n \n derive_merge! {\n     /// TOML representation of various global install decisions.\n-    #[derive(Deserialize, Default, Clone)]\n+    #[derive(Deserialize)]\n     #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n     struct Install {\n         prefix: Option<String>,\n@@ -449,7 +449,7 @@ derive_merge! {\n \n derive_merge! {\n     /// TOML representation of how the LLVM build is configured.\n-    #[derive(Deserialize, Default)]\n+    #[derive(Deserialize)]\n     #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n     struct Llvm {\n         skip_rebuild: Option<bool>,\n@@ -483,7 +483,7 @@ derive_merge! {\n }\n \n derive_merge! {\n-    #[derive(Deserialize, Default, Clone)]\n+    #[derive(Deserialize)]\n     #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n     struct Dist {\n         sign_folder: Option<String>,\n@@ -510,7 +510,7 @@ impl Default for StringOrBool {\n \n derive_merge! {\n     /// TOML representation of how the Rust build is configured.\n-    #[derive(Deserialize, Default)]\n+    #[derive(Deserialize)]\n     #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n     struct Rust {\n         optimize: Option<bool>,\n@@ -565,7 +565,7 @@ derive_merge! {\n \n derive_merge! {\n     /// TOML representation of how each build target is configured.\n-    #[derive(Deserialize, Default)]\n+    #[derive(Deserialize)]\n     #[serde(deny_unknown_fields, rename_all = \"kebab-case\")]\n     struct TomlTarget {\n         cc: Option<String>,\n@@ -1187,7 +1187,7 @@ fn set<T>(field: &mut T, val: Option<T>) {\n \n fn threads_from_config(v: u32) -> u32 {\n     match v {\n-        0 => num_cpus::get() as u32,\n+        0 => std::thread::available_parallelism().map_or(1, std::num::NonZeroUsize::get) as u32,\n         n => n,\n     }\n }"}, {"sha": "74528f2752f5fbca85fcc949be59faa982642ae8", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -208,7 +208,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n         let j_msg = format!(\n             \"number of jobs to run in parallel; \\\n              defaults to {} (this host's logical CPU count)\",\n-            num_cpus::get()\n+            std::thread::available_parallelism().map_or(1, std::num::NonZeroUsize::get)\n         );\n         opts.optopt(\"j\", \"jobs\", &j_msg, \"JOBS\");\n         opts.optflag(\"h\", \"help\", \"print this help message\");"}, {"sha": "a1f0bfd8f26647cee1361c163f7789fcc58d8901", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -922,7 +922,9 @@ impl Build {\n     /// Returns the number of parallel jobs that have been configured for this\n     /// build.\n     fn jobs(&self) -> u32 {\n-        self.config.jobs.unwrap_or_else(|| num_cpus::get() as u32)\n+        self.config.jobs.unwrap_or_else(|| {\n+            std::thread::available_parallelism().map_or(1, std::num::NonZeroUsize::get) as u32\n+        })\n     }\n \n     fn debuginfo_map_to(&self, which: GitRepo) -> Option<String> {"}, {"sha": "08d0815806207af0dcf719419785931a20d7ef63", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -24,7 +24,7 @@ const OS: Option<&str> = None;\n \n type ToolstateData = HashMap<Box<str>, ToolState>;\n \n-#[derive(Copy, Clone, Debug, Deserialize, Serialize, PartialEq, Eq, PartialOrd)]\n+#[derive(Copy, Clone, Debug, Deserialize, Serialize, PartialEq, PartialOrd)]\n #[serde(rename_all = \"kebab-case\")]\n /// Whether a tool can be compiled, tested or neither\n pub enum ToolState {\n@@ -50,13 +50,6 @@ impl fmt::Display for ToolState {\n     }\n }\n \n-impl Default for ToolState {\n-    fn default() -> Self {\n-        // err on the safe side\n-        ToolState::BuildFail\n-    }\n-}\n-\n /// Number of days after the last promotion of beta.\n /// Its value is 41 on the Tuesday where \"Promote master to beta (T-2)\" happens.\n /// The Wednesday after this has value 0.\n@@ -466,13 +459,11 @@ fn publish_test_results(current_toolstate: &ToolstateData) {\n     t!(fs::write(&history_path, file));\n }\n \n-#[derive(Debug, Serialize, Deserialize)]\n+#[derive(Debug, Deserialize)]\n struct RepoState {\n     tool: String,\n     windows: ToolState,\n     linux: ToolState,\n-    commit: String,\n-    datetime: String,\n }\n \n impl RepoState {"}, {"sha": "c0e7cd0b1f58016e0968015174f04ac22992a92c", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -1506,11 +1506,11 @@ impl Type {\n     }\n \n     crate fn projection(&self) -> Option<(&Type, DefId, PathSegment)> {\n-        let (self_, trait_, assoc) = match self {\n-            QPath { self_type, trait_, assoc, .. } => (self_type, trait_, assoc),\n-            _ => return None,\n-        };\n-        Some((&self_, trait_.def_id(), *assoc.clone()))\n+        if let QPath { self_type, trait_, assoc, .. } = self {\n+            Some((&self_type, trait_.def_id(), *assoc.clone()))\n+        } else {\n+            None\n+        }\n     }\n \n     fn inner_def_id(&self, cache: Option<&Cache>) -> Option<DefId> {"}, {"sha": "d2e9343f86cd50fa853f993610390868e4f2cff0", "filename": "src/test/ui/issues/issue-87707.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Ftest%2Fui%2Fissues%2Fissue-87707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Ftest%2Fui%2Fissues%2Fissue-87707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-87707.rs?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -0,0 +1,15 @@\n+// test for #87707\n+// edition:2018\n+// run-fail\n+// check-run-results\n+\n+use std::sync::Once;\n+use std::panic;\n+\n+fn main() {\n+    let o = Once::new();\n+    let _ = panic::catch_unwind(|| {\n+        o.call_once(|| panic!(\"Here Once instance is poisoned.\"));\n+    });\n+    o.call_once(|| {});\n+}"}, {"sha": "8f82ccc0c2abeb19ce4a013e6ca7c704865e7feb", "filename": "src/test/ui/issues/issue-87707.run.stderr", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Ftest%2Fui%2Fissues%2Fissue-87707.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Ftest%2Fui%2Fissues%2Fissue-87707.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-87707.run.stderr?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -0,0 +1,3 @@\n+thread 'main' panicked at 'Here Once instance is poisoned.', $DIR/issue-87707.rs:12:24\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n+thread 'main' panicked at 'Once instance has previously been poisoned', $DIR/issue-87707.rs:14:7"}, {"sha": "e2a681ddd11155a07290586ddd46c14630fb8342", "filename": "src/test/ui/parser/trailing-question-in-macro-type.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-macro-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-macro-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-macro-type.rs?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -0,0 +1,14 @@\n+macro_rules! fn_expr {\n+    ($return_type:ty : $body:expr) => {\n+        (|| -> $return_type { $body })()\n+    };\n+    ($body:expr) => {\n+        (|| $body)()\n+    };\n+}\n+\n+\n+fn main() {\n+    fn_expr!{ o?.when(|&i| i > 0)?.when(|&i| i%2 == 0) };\n+    //~^ ERROR cannot find value `o` in this scope\n+}"}, {"sha": "c096ae04fbbb6dd277ab9a4049baee571b1baab3", "filename": "src/test/ui/parser/trailing-question-in-macro-type.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-macro-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-macro-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-macro-type.stderr?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find value `o` in this scope\n+  --> $DIR/trailing-question-in-macro-type.rs:12:15\n+   |\n+LL |     fn_expr!{ o?.when(|&i| i > 0)?.when(|&i| i%2 == 0) };\n+   |               ^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "c437bde5ae69a47233ef3a16678dac8aff9d51a3", "filename": "src/tools/build-manifest/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FCargo.toml?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -13,4 +13,3 @@ tar = \"0.4.29\"\n sha2 = \"0.10.1\"\n rayon = \"1.5.1\"\n hex = \"0.4.2\"\n-num_cpus = \"1.13.0\""}, {"sha": "378efeb644375a41b7fa0b9a7940a8bcb01dc7d2", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b14fd3b1063771923e2fcf2110961bfa5ba4ad0/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=1b14fd3b1063771923e2fcf2110961bfa5ba4ad0", "patch": "@@ -208,7 +208,7 @@ fn main() {\n     let num_threads = if let Some(num) = env::var_os(\"BUILD_MANIFEST_NUM_THREADS\") {\n         num.to_str().unwrap().parse().expect(\"invalid number for BUILD_MANIFEST_NUM_THREADS\")\n     } else {\n-        num_cpus::get()\n+        std::thread::available_parallelism().map_or(1, std::num::NonZeroUsize::get)\n     };\n     rayon::ThreadPoolBuilder::new()\n         .num_threads(num_threads)"}]}