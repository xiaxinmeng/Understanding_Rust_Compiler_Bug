{"sha": "af95302d3cb2f5cd59eb38b88eab6a054d965e9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmOTUzMDJkM2NiMmY1Y2Q1OWViMzhiODhlYWI2YTA1NGQ5NjVlOWY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-31T18:34:15Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-01-31T18:34:15Z"}, "message": "Rollup merge of #47552 - oberien:stepby-nth, r=dtolnay\n\nSpecialize StepBy::nth\n\nThis allows optimizations of implementations of the inner iterator's `.nth` method.", "tree": {"sha": "f26b25cc9404a7af1260814d824a1c88f454fd57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f26b25cc9404a7af1260814d824a1c88f454fd57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af95302d3cb2f5cd59eb38b88eab6a054d965e9f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlpyDEYACgkQ/vbIBR0O\nATzqqRAApXQxu8vrFwWI2Quu+mPOmhznM7//chDkrBkt/Fh1Qf7dtDzBdg7T3+eD\nAhqvt2qjNq1s/2AtZelzyDY96y5V/QSPP0LNTV98KSm97XXc+3Tt86G2fNh5araP\njJAdQgYkObAw55sFefEcq70Iu/9tq9ydhcNMJJPWipmdL9b3PdWuNW0hSBCzmHOg\nCgo2qP46LGFygLly7X9rxYN93QoGE2E4xyyfwCSscriIE0hUwxJ891xQCSDcTiQp\noeKyjCBI53GdeyDdEWN9uuR5/IRuLa3r3z88S0Ry7TzP6zHrWTFEsMDwAjx5eqvX\n6Jy0BHvH8y9bJB5BZsRudALpuE3ZoJhwabIO5KFqwQMmA42HLsBJiLZo05cFch1k\nQKl9U/wWdgAyLbDOHq1dDUS3tnkm7LplVvYZF2Lnm9vEjwweSUF+X7Em8tnLyMSU\nBDZaGUh/lD50G1c93kErGTmIhskVy1+IyKCVlax8xlWDgx9EKEgsdXgtU1lGZT71\nDqCbEo+sqmP3JZ3CEaZLoppMZWVEz7utBArFAZBaXu0vkeO8Czz9/2YIWDgWjBls\nqXfY72QpfJEnrNObTPnmjLFiPPu6IBJjYY+F5zUeX2M/EG8C81XyZ3wWLDJPxiko\njkOdVsDtTmpxdKSD9+iTcug8+Ak1fRA2NXAQevhlYHxbWMMxk8U=\n=2Ocq\n-----END PGP SIGNATURE-----", "payload": "tree f26b25cc9404a7af1260814d824a1c88f454fd57\nparent 86eb7259539a5dd0763a5703fb948bae6c6b064d\nparent 4a0da4cf2c7a2b5903fd1b8bc124f8963ce1b535\nauthor kennytm <kennytm@gmail.com> 1517423655 +0800\ncommitter kennytm <kennytm@gmail.com> 1517423655 +0800\n\nRollup merge of #47552 - oberien:stepby-nth, r=dtolnay\n\nSpecialize StepBy::nth\n\nThis allows optimizations of implementations of the inner iterator's `.nth` method.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af95302d3cb2f5cd59eb38b88eab6a054d965e9f", "html_url": "https://github.com/rust-lang/rust/commit/af95302d3cb2f5cd59eb38b88eab6a054d965e9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af95302d3cb2f5cd59eb38b88eab6a054d965e9f/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86eb7259539a5dd0763a5703fb948bae6c6b064d", "url": "https://api.github.com/repos/rust-lang/rust/commits/86eb7259539a5dd0763a5703fb948bae6c6b064d", "html_url": "https://github.com/rust-lang/rust/commit/86eb7259539a5dd0763a5703fb948bae6c6b064d"}, {"sha": "4a0da4cf2c7a2b5903fd1b8bc124f8963ce1b535", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a0da4cf2c7a2b5903fd1b8bc124f8963ce1b535", "html_url": "https://github.com/rust-lang/rust/commit/4a0da4cf2c7a2b5903fd1b8bc124f8963ce1b535"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "7314fac282b664fe2e92de6ee8fd7a694e955e18", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/af95302d3cb2f5cd59eb38b88eab6a054d965e9f/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af95302d3cb2f5cd59eb38b88eab6a054d965e9f/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=af95302d3cb2f5cd59eb38b88eab6a054d965e9f", "patch": "@@ -307,6 +307,7 @@ use fmt;\n use iter_private::TrustedRandomAccess;\n use ops::Try;\n use usize;\n+use intrinsics;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::iterator::Iterator;\n@@ -694,6 +695,49 @@ impl<I> Iterator for StepBy<I> where I: Iterator {\n             (f(inner_hint.0), inner_hint.1.map(f))\n         }\n     }\n+\n+    #[inline]\n+    fn nth(&mut self, mut n: usize) -> Option<Self::Item> {\n+        if self.first_take {\n+            self.first_take = false;\n+            let first = self.iter.next();\n+            if n == 0 {\n+                return first;\n+            }\n+            n -= 1;\n+        }\n+        // n and self.step are indices, we need to add 1 to get the amount of elements\n+        // When calling `.nth`, we need to subtract 1 again to convert back to an index\n+        // step + 1 can't overflow because `.step_by` sets `self.step` to `step - 1`\n+        let mut step = self.step + 1;\n+        // n + 1 could overflow\n+        // thus, if n is usize::MAX, instead of adding one, we call .nth(step)\n+        if n == usize::MAX {\n+            self.iter.nth(step - 1);\n+        } else {\n+            n += 1;\n+        }\n+\n+        // overflow handling\n+        loop {\n+            let mul = n.checked_mul(step);\n+            if unsafe { intrinsics::likely(mul.is_some()) } {\n+                return self.iter.nth(mul.unwrap() - 1);\n+            }\n+            let div_n = usize::MAX / n;\n+            let div_step = usize::MAX / step;\n+            let nth_n = div_n * n;\n+            let nth_step = div_step * step;\n+            let nth = if nth_n > nth_step {\n+                step -= div_n;\n+                nth_n\n+            } else {\n+                n -= div_step;\n+                nth_step\n+            };\n+            self.iter.nth(nth - 1);\n+        }\n+    }\n }\n \n // StepBy can only make the iterator shorter, so the len will still fit."}, {"sha": "e52e119ff59b954389dbd2ec87266f57e22c9b09", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/af95302d3cb2f5cd59eb38b88eab6a054d965e9f/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af95302d3cb2f5cd59eb38b88eab6a054d965e9f/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=af95302d3cb2f5cd59eb38b88eab6a054d965e9f", "patch": "@@ -161,6 +161,68 @@ fn test_iterator_step_by() {\n     assert_eq!(it.next(), None);\n }\n \n+#[test]\n+fn test_iterator_step_by_nth() {\n+    let mut it = (0..16).step_by(5);\n+    assert_eq!(it.nth(0), Some(0));\n+    assert_eq!(it.nth(0), Some(5));\n+    assert_eq!(it.nth(0), Some(10));\n+    assert_eq!(it.nth(0), Some(15));\n+    assert_eq!(it.nth(0), None);\n+\n+    let it = (0..18).step_by(5);\n+    assert_eq!(it.clone().nth(0), Some(0));\n+    assert_eq!(it.clone().nth(1), Some(5));\n+    assert_eq!(it.clone().nth(2), Some(10));\n+    assert_eq!(it.clone().nth(3), Some(15));\n+    assert_eq!(it.clone().nth(4), None);\n+    assert_eq!(it.clone().nth(42), None);\n+}\n+\n+#[test]\n+fn test_iterator_step_by_nth_overflow() {\n+    #[cfg(target_pointer_width = \"8\")]\n+    type Bigger = u16;\n+    #[cfg(target_pointer_width = \"16\")]\n+    type Bigger = u32;\n+    #[cfg(target_pointer_width = \"32\")]\n+    type Bigger = u64;\n+    #[cfg(target_pointer_width = \"64\")]\n+    type Bigger = u128;\n+\n+    #[derive(Clone)]\n+    struct Test(Bigger);\n+    impl<'a> Iterator for &'a mut Test {\n+        type Item = i32;\n+        fn next(&mut self) -> Option<Self::Item> { Some(21) }\n+        fn nth(&mut self, n: usize) -> Option<Self::Item> {\n+            self.0 += n as Bigger + 1;\n+            Some(42)\n+        }\n+    }\n+\n+    let mut it = Test(0);\n+    let root = usize::MAX >> (::std::mem::size_of::<usize>() * 8 / 2);\n+    let n = root + 20;\n+    (&mut it).step_by(n).nth(n);\n+    assert_eq!(it.0, n as Bigger * n as Bigger);\n+\n+    // large step\n+    let mut it = Test(0);\n+    (&mut it).step_by(usize::MAX).nth(5);\n+    assert_eq!(it.0, (usize::MAX as Bigger) * 5);\n+\n+    // n + 1 overflows\n+    let mut it = Test(0);\n+    (&mut it).step_by(2).nth(usize::MAX);\n+    assert_eq!(it.0, (usize::MAX as Bigger) * 2);\n+\n+    // n + 1 overflows\n+    let mut it = Test(0);\n+    (&mut it).step_by(1).nth(usize::MAX);\n+    assert_eq!(it.0, (usize::MAX as Bigger) * 1);\n+}\n+\n #[test]\n #[should_panic]\n fn test_iterator_step_by_zero() {"}]}