{"sha": "d331758f6db35418259eb0a332b81127c87002bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMzE3NThmNmRiMzU0MTgyNTllYjBhMzMyYjgxMTI3Yzg3MDAyYmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-13T15:22:24Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-13T15:22:24Z"}, "message": "Add helper function to pop an element from a HashSet", "tree": {"sha": "3215a6565d35490e972657401ab13a471e9d7145", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3215a6565d35490e972657401ab13a471e9d7145"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d331758f6db35418259eb0a332b81127c87002bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d331758f6db35418259eb0a332b81127c87002bd", "html_url": "https://github.com/rust-lang/rust/commit/d331758f6db35418259eb0a332b81127c87002bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d331758f6db35418259eb0a332b81127c87002bd/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4615359e86b78f97f36cba7c8312d2a26ee51c7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4615359e86b78f97f36cba7c8312d2a26ee51c7e", "html_url": "https://github.com/rust-lang/rust/commit/4615359e86b78f97f36cba7c8312d2a26ee51c7e"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "fd3d3d67c3f54214ca283ecd9f2fd9c6ad29ee30", "filename": "src/constant.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d331758f6db35418259eb0a332b81127c87002bd/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d331758f6db35418259eb0a332b81127c87002bd/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=d331758f6db35418259eb0a332b81127c87002bd", "patch": "@@ -150,16 +150,7 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a> (\n ) {\n     let memory = Memory::<CompileTimeEvaluator>::new(tcx.at(DUMMY_SP), ());\n \n-    loop {\n-        let alloc_id = {\n-            if let Some(alloc_id) = cx.todo_allocs.iter().next().map(|alloc_id| *alloc_id) {\n-                cx.todo_allocs.remove(&alloc_id);\n-                alloc_id\n-            } else {\n-                break;\n-            }\n-        };\n-\n+    while let Some(alloc_id) = pop_set(&mut cx.todo_allocs) {\n         let data_id = define_global_for_alloc_id(module, cx, alloc_id);\n         println!(\"alloc_id {} data_id {}\", alloc_id, data_id);\n         if cx.done.contains(&data_id) {\n@@ -197,3 +188,12 @@ fn define_all_allocs<'a, 'tcx: 'a, B: Backend + 'a> (\n \n     assert!(cx.todo_allocs.is_empty(), \"{:?}\", cx.todo_allocs);\n }\n+\n+fn pop_set<T: Copy + Eq + ::std::hash::Hash>(set: &mut HashSet<T>) -> Option<T> {\n+    if let Some(elem) = set.iter().next().map(|elem| *elem) {\n+        set.remove(&elem);\n+        Some(elem)\n+    } else {\n+        None\n+    }\n+}\n\\ No newline at end of file"}]}