{"sha": "f3dfa52fd18b0cd684ef44b409891d6cd16fe553", "node_id": "C_kwDOAAsO6NoAKGYzZGZhNTJmZDE4YjBjZDY4NGVmNDRiNDA5ODkxZDZjZDE2ZmU1NTM", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-02-16T11:40:53Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-03-05T09:00:22Z"}, "message": "resolve to universal regions when possible", "tree": {"sha": "f67cb06c953e0ab6fad27044f9e5866a18f5845b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f67cb06c953e0ab6fad27044f9e5866a18f5845b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3dfa52fd18b0cd684ef44b409891d6cd16fe553", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3dfa52fd18b0cd684ef44b409891d6cd16fe553", "html_url": "https://github.com/rust-lang/rust/commit/f3dfa52fd18b0cd684ef44b409891d6cd16fe553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3dfa52fd18b0cd684ef44b409891d6cd16fe553/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13471d3b2046cce78181dde6cfc146c09f55e29e", "url": "https://api.github.com/repos/rust-lang/rust/commits/13471d3b2046cce78181dde6cfc146c09f55e29e", "html_url": "https://github.com/rust-lang/rust/commit/13471d3b2046cce78181dde6cfc146c09f55e29e"}], "stats": {"total": 57, "additions": 19, "deletions": 38}, "files": [{"sha": "c6adc88bd1210ed6fd033e3b31fe543e24283759", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f3dfa52fd18b0cd684ef44b409891d6cd16fe553/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3dfa52fd18b0cd684ef44b409891d6cd16fe553/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=f3dfa52fd18b0cd684ef44b409891d6cd16fe553", "patch": "@@ -352,19 +352,17 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'cx, 'tcx> {\n             }\n \n             ty::ReVar(vid) => {\n-                let resolved_vid = self\n+                let resolved = self\n                     .infcx\n                     .inner\n                     .borrow_mut()\n                     .unwrap_region_constraints()\n-                    .opportunistic_resolve_var(vid);\n+                    .opportunistic_resolve_var(self.tcx, vid);\n                 debug!(\n-                    \"canonical: region var found with vid {:?}, \\\n-                     opportunistically resolved to {:?}\",\n-                    vid, resolved_vid\n+                    \"canonical: region var found with vid {vid:?}, \\\n+                     opportunistically resolved to {resolved:?}\",\n                 );\n-                let r = self.tcx.mk_re_var(resolved_vid);\n-                self.canonicalize_mode.canonicalize_free_region(self, r)\n+                self.canonicalize_mode.canonicalize_free_region(self, resolved)\n             }\n \n             ty::ReStatic"}, {"sha": "bf9e71b63fa08f31d8830f113f56bd4d04eec53e", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f3dfa52fd18b0cd684ef44b409891d6cd16fe553/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3dfa52fd18b0cd684ef44b409891d6cd16fe553/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=f3dfa52fd18b0cd684ef44b409891d6cd16fe553", "patch": "@@ -633,29 +633,15 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         }\n     }\n \n-    /// Resolves the passed RegionVid to the root RegionVid in the unification table\n-    pub(super) fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {\n-        self.unification_table().find(rid).vid\n-    }\n-\n-    /// If the Region is a `ReVar`, then resolves it either to the root value in\n-    /// the unification table, if it exists, or to the root `ReVar` in the table.\n-    /// If the Region is not a `ReVar`, just returns the Region itself.\n-    pub fn opportunistic_resolve_region(\n+    /// Resolves a region var to its value in the unification table, if it exists.\n+    /// Otherwise, it is resolved to the root `ReVar` in the table.\n+    pub fn opportunistic_resolve_var(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n-        region: ty::Region<'tcx>,\n+        vid: ty::RegionVid,\n     ) -> ty::Region<'tcx> {\n-        match *region {\n-            ty::ReVar(rid) => {\n-                let unified_region = self.unification_table().probe_value(rid);\n-                unified_region.0.unwrap_or_else(|| {\n-                    let root = self.unification_table().find(rid).vid;\n-                    tcx.mk_re_var(root)\n-                })\n-            }\n-            _ => region,\n-        }\n+        let root_vid = self.unification_table().find(vid).vid;\n+        self.unification_table().probe_value(root_vid).0.unwrap_or_else(|| tcx.mk_re_var(root_vid))\n     }\n \n     fn combine_map(&mut self, t: CombineMapType) -> &mut CombineMap<'tcx> {"}, {"sha": "4f49f4165074fd673c44a94ebdd05fb32f50eb4c", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f3dfa52fd18b0cd684ef44b409891d6cd16fe553/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3dfa52fd18b0cd684ef44b409891d6cd16fe553/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=f3dfa52fd18b0cd684ef44b409891d6cd16fe553", "patch": "@@ -85,15 +85,12 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for OpportunisticRegionResolver<'a, 'tcx\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n-            ty::ReVar(rid) => {\n-                let resolved = self\n-                    .infcx\n-                    .inner\n-                    .borrow_mut()\n-                    .unwrap_region_constraints()\n-                    .opportunistic_resolve_var(rid);\n-                TypeFolder::interner(self).mk_re_var(resolved)\n-            }\n+            ty::ReVar(vid) => self\n+                .infcx\n+                .inner\n+                .borrow_mut()\n+                .unwrap_region_constraints()\n+                .opportunistic_resolve_var(TypeFolder::interner(self), vid),\n             _ => r,\n         }\n     }"}, {"sha": "2b1db1633c7568fad7a97006e1edf3fbc0f3ba13", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3dfa52fd18b0cd684ef44b409891d6cd16fe553/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3dfa52fd18b0cd684ef44b409891d6cd16fe553/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=f3dfa52fd18b0cd684ef44b409891d6cd16fe553", "patch": "@@ -871,12 +871,12 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for PlaceholderReplacer<'_, 'tcx> {\n \n     fn fold_region(&mut self, r0: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         let r1 = match *r0 {\n-            ty::ReVar(_) => self\n+            ty::ReVar(vid) => self\n                 .infcx\n                 .inner\n                 .borrow_mut()\n                 .unwrap_region_constraints()\n-                .opportunistic_resolve_region(self.infcx.tcx, r0),\n+                .opportunistic_resolve_var(self.infcx.tcx, vid),\n             _ => r0,\n         };\n "}]}