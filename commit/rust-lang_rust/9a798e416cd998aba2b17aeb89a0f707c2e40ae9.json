{"sha": "9a798e416cd998aba2b17aeb89a0f707c2e40ae9", "node_id": "C_kwDOAAsO6NoAKDlhNzk4ZTQxNmNkOTk4YWJhMmIxN2FlYjg5YTBmNzA3YzJlNDBhZTk", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-22T01:33:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-22T01:33:57Z"}, "message": "Rollup merge of #110622 - WaffleLapkin:hashtag#, r=compiler-errors\n\nStable hash tag (discriminant) of `GenericArg`\n\nThis is a continuation of my quest of removing `transmute` if generic args and types (#110496, #110599).\n\nr? `@compiler-errors`", "tree": {"sha": "57a670f3aef48bc4b0c5eaa2f38c2c249e16d4b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57a670f3aef48bc4b0c5eaa2f38c2c249e16d4b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a798e416cd998aba2b17aeb89a0f707c2e40ae9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkQzmFCRBK7hj4Ov3rIwAAAXcIAE0qzAct8509HMpzHPU/iv0k\nqq0XJ+XHfdnvdbRVXAtMUNJhWdyHZqo0vBwQF9HaRrDZoim0f0XkNicpP4zZm6Kj\noFEpKLzpGNj5338vpy7FhnnZ+egsQmNhiSRcvAnPdu+Q3q3bo8AC0iNsbT4SR0dB\nBwHW/Rc+rUJYGwECOaIIY5hZz1xtRVJVCiKOMp2nZw0a2zoIyt+1mqG4Vg9horrf\nH03/pbkOJjzXcb5RwRkgjLki/evPlBSklcq4QUgiUytKsuUatWffNQBqtVt5/urR\nsvpjwbfTmAZMehTFq/H0uT9ge8usy0mtwUK8k5rGiHRAodq4ckkDzPLP0ZAQeYw=\n=xShf\n-----END PGP SIGNATURE-----\n", "payload": "tree 57a670f3aef48bc4b0c5eaa2f38c2c249e16d4b7\nparent 684bdf87f4431210ef827d68247c50f2a2b0a8d2\nparent 4375af53af48febdd3534d8d300b7769a4e0fb1c\nauthor Yuki Okushi <jtitor@2k36.org> 1682127237 +0900\ncommitter GitHub <noreply@github.com> 1682127237 +0900\n\nRollup merge of #110622 - WaffleLapkin:hashtag#, r=compiler-errors\n\nStable hash tag (discriminant) of `GenericArg`\n\nThis is a continuation of my quest of removing `transmute` if generic args and types (#110496, #110599).\n\nr? `@compiler-errors`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a798e416cd998aba2b17aeb89a0f707c2e40ae9", "html_url": "https://github.com/rust-lang/rust/commit/9a798e416cd998aba2b17aeb89a0f707c2e40ae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a798e416cd998aba2b17aeb89a0f707c2e40ae9/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "684bdf87f4431210ef827d68247c50f2a2b0a8d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/684bdf87f4431210ef827d68247c50f2a2b0a8d2", "html_url": "https://github.com/rust-lang/rust/commit/684bdf87f4431210ef827d68247c50f2a2b0a8d2"}, {"sha": "4375af53af48febdd3534d8d300b7769a4e0fb1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4375af53af48febdd3534d8d300b7769a4e0fb1c", "html_url": "https://github.com/rust-lang/rust/commit/4375af53af48febdd3534d8d300b7769a4e0fb1c"}], "stats": {"total": 30, "additions": 1, "deletions": 29}, "files": [{"sha": "02baa395c3c2f5cbe5b305333f6baceacad58730", "filename": "compiler/rustc_middle/src/ty/impls_ty.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9a798e416cd998aba2b17aeb89a0f707c2e40ae9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a798e416cd998aba2b17aeb89a0f707c2e40ae9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs?ref=9a798e416cd998aba2b17aeb89a0f707c2e40ae9", "patch": "@@ -73,34 +73,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ty::subst::GenericArg<'t\n     }\n }\n \n-impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ty::subst::GenericArgKind<'tcx> {\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        match self {\n-            // WARNING: We dedup cache the `HashStable` results for `List`\n-            // while ignoring types and freely transmute\n-            // between `List<Ty<'tcx>>` and `List<GenericArg<'tcx>>`.\n-            // See `fn mk_type_list` for more details.\n-            //\n-            // We therefore hash types without adding a hash for their discriminant.\n-            //\n-            // In order to make it very unlikely for the sequence of bytes being hashed for\n-            // a `GenericArgKind::Type` to be the same as the sequence of bytes being\n-            // hashed for one of the other variants, we hash some very high number instead\n-            // of their actual discriminant since `TyKind` should never start with anything\n-            // that high.\n-            ty::subst::GenericArgKind::Type(ty) => ty.hash_stable(hcx, hasher),\n-            ty::subst::GenericArgKind::Const(ct) => {\n-                0xF3u8.hash_stable(hcx, hasher);\n-                ct.hash_stable(hcx, hasher);\n-            }\n-            ty::subst::GenericArgKind::Lifetime(lt) => {\n-                0xF5u8.hash_stable(hcx, hasher);\n-                lt.hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}\n-\n // AllocIds get resolved to whatever they point to (to be stable)\n impl<'a> HashStable<StableHashingContext<'a>> for mir::interpret::AllocId {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {"}, {"sha": "a439211ca336a1a87ee487825833ee7deb3834f4", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a798e416cd998aba2b17aeb89a0f707c2e40ae9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a798e416cd998aba2b17aeb89a0f707c2e40ae9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=9a798e416cd998aba2b17aeb89a0f707c2e40ae9", "patch": "@@ -47,7 +47,7 @@ const TYPE_TAG: usize = 0b00;\n const REGION_TAG: usize = 0b01;\n const CONST_TAG: usize = 0b10;\n \n-#[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(Debug, TyEncodable, TyDecodable, PartialEq, Eq, PartialOrd, Ord, HashStable)]\n pub enum GenericArgKind<'tcx> {\n     Lifetime(ty::Region<'tcx>),\n     Type(Ty<'tcx>),"}]}