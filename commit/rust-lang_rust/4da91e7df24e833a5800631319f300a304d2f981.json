{"sha": "4da91e7df24e833a5800631319f300a304d2f981", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYTkxZTdkZjI0ZTgzM2E1ODAwNjMxMzE5ZjMwMGEzMDRkMmY5ODE=", "commit": {"author": {"name": "DarkDrek", "email": "wackerei@gmail.com", "date": "2016-01-12T00:09:08Z"}, "committer": {"name": "DarkDrek", "email": "wackerei@gmail.com", "date": "2016-01-12T02:08:48Z"}, "message": "Handle more possible comment position for if else\nExtended the test with the new possiblecomment positions", "tree": {"sha": "9dc773f226ac0d5334376fe32adca04724367785", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dc773f226ac0d5334376fe32adca04724367785"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4da91e7df24e833a5800631319f300a304d2f981", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4da91e7df24e833a5800631319f300a304d2f981", "html_url": "https://github.com/rust-lang/rust/commit/4da91e7df24e833a5800631319f300a304d2f981", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4da91e7df24e833a5800631319f300a304d2f981/comments", "author": {"login": "DarkDrek", "id": 5347691, "node_id": "MDQ6VXNlcjUzNDc2OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/5347691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DarkDrek", "html_url": "https://github.com/DarkDrek", "followers_url": "https://api.github.com/users/DarkDrek/followers", "following_url": "https://api.github.com/users/DarkDrek/following{/other_user}", "gists_url": "https://api.github.com/users/DarkDrek/gists{/gist_id}", "starred_url": "https://api.github.com/users/DarkDrek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DarkDrek/subscriptions", "organizations_url": "https://api.github.com/users/DarkDrek/orgs", "repos_url": "https://api.github.com/users/DarkDrek/repos", "events_url": "https://api.github.com/users/DarkDrek/events{/privacy}", "received_events_url": "https://api.github.com/users/DarkDrek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DarkDrek", "id": 5347691, "node_id": "MDQ6VXNlcjUzNDc2OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/5347691?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DarkDrek", "html_url": "https://github.com/DarkDrek", "followers_url": "https://api.github.com/users/DarkDrek/followers", "following_url": "https://api.github.com/users/DarkDrek/following{/other_user}", "gists_url": "https://api.github.com/users/DarkDrek/gists{/gist_id}", "starred_url": "https://api.github.com/users/DarkDrek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DarkDrek/subscriptions", "organizations_url": "https://api.github.com/users/DarkDrek/orgs", "repos_url": "https://api.github.com/users/DarkDrek/repos", "events_url": "https://api.github.com/users/DarkDrek/events{/privacy}", "received_events_url": "https://api.github.com/users/DarkDrek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0eb0f5daa9582387c4935d86e6077b7eb89a34b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0eb0f5daa9582387c4935d86e6077b7eb89a34b", "html_url": "https://github.com/rust-lang/rust/commit/b0eb0f5daa9582387c4935d86e6077b7eb89a34b"}], "stats": {"total": 174, "additions": 144, "deletions": 30}, "files": [{"sha": "54a6fb20fa88630aab58957e3d1fafdaa1c1294c", "filename": "src/expr.rs", "status": "modified", "additions": 64, "deletions": 27, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/4da91e7df24e833a5800631319f300a304d2f981/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da91e7df24e833a5800631319f300a304d2f981/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4da91e7df24e833a5800631319f300a304d2f981", "patch": "@@ -13,14 +13,15 @@ use std::borrow::Borrow;\n use std::mem::swap;\n use std::ops::Deref;\n use std::iter::ExactSizeIterator;\n+use std::fmt::Write;\n \n use {Indent, Spanned};\n use rewrite::{Rewrite, RewriteContext};\n use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n             DefinitiveListTactic, definitive_tactic, ListItem, format_fn_args};\n use string::{StringFormat, rewrite_string};\n-use utils::{span_after, extra_offset, last_line_width, wrap_str, binary_search, first_line_width,\n-            semicolon_for_stmt};\n+use utils::{span_after, span_before, extra_offset, last_line_width, wrap_str, binary_search,\n+            first_line_width, semicolon_for_stmt};\n use visitor::FmtVisitor;\n use config::{Config, StructLitStyle, MultilineStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};\n@@ -101,6 +102,7 @@ impl Rewrite for ast::Expr {\n                                 cond,\n                                 if_block,\n                                 else_block.as_ref().map(|e| &**e),\n+                                self.span,\n                                 None,\n                                 width,\n                                 offset,\n@@ -111,6 +113,7 @@ impl Rewrite for ast::Expr {\n                                 cond,\n                                 if_block,\n                                 else_block.as_ref().map(|e| &**e),\n+                                self.span,\n                                 Some(pat),\n                                 width,\n                                 offset,\n@@ -605,12 +608,33 @@ fn rewrite_label(label: Option<ast::Ident>) -> String {\n     }\n }\n \n+fn extract_comment(span: Span,\n+                   context: &RewriteContext,\n+                   offset: Indent,\n+                   width: usize)\n+                   -> Option<String> {\n+    let comment_str = context.snippet(span);\n+    if contains_comment(&comment_str) {\n+        let comment = try_opt!(rewrite_comment(comment_str.trim(),\n+                                               false,\n+                                               width,\n+                                               offset,\n+                                               context.config));\n+        Some(format!(\"\\n{indent}{}\\n{indent}\",\n+                     comment,\n+                     indent = offset.to_string(context.config)))\n+    } else {\n+        None\n+    }\n+}\n+\n // Rewrites if-else blocks. If let Some(_) = pat, the expression is\n // treated as an if-let-else expression.\n fn rewrite_if_else(context: &RewriteContext,\n                    cond: &ast::Expr,\n                    if_block: &ast::Block,\n                    else_block_opt: Option<&ast::Expr>,\n+                   span: Span,\n                    pat: Option<&ast::Pat>,\n                    width: usize,\n                    offset: Indent,\n@@ -635,7 +659,22 @@ fn rewrite_if_else(context: &RewriteContext,\n     }\n \n     let if_block_string = try_opt!(if_block.rewrite(context, width, offset));\n-    let mut result = format!(\"if {} {}\", pat_expr_string, if_block_string);\n+\n+    let between_if_cond = mk_sp(span_after(span, \"if\", context.codemap),\n+                                pat.map_or(cond.span.lo,\n+                                           |_| span_before(span, \"let\", context.codemap)));\n+    let between_if_cond_comment = extract_comment(between_if_cond, &context, offset, width);\n+\n+    let after_cond_comment = extract_comment(mk_sp(cond.span.hi, if_block.span.lo),\n+                                             context,\n+                                             offset,\n+                                             width);\n+\n+    let mut result = format!(\"if{}{}{}{}\",\n+                             between_if_cond_comment.as_ref().map_or(\" \", |str| &**str),\n+                             pat_expr_string,\n+                             after_cond_comment.as_ref().map_or(\" \", |str| &**str),\n+                             if_block_string);\n \n     if let Some(else_block) = else_block_opt {\n         let rewrite = match else_block.node {\n@@ -646,6 +685,7 @@ fn rewrite_if_else(context: &RewriteContext,\n                                 cond,\n                                 if_block,\n                                 else_block.as_ref().map(|e| &**e),\n+                                mk_sp(span_after(span, \"else\", context.codemap), span.hi),\n                                 Some(pat),\n                                 width,\n                                 offset,\n@@ -656,6 +696,7 @@ fn rewrite_if_else(context: &RewriteContext,\n                                 cond,\n                                 if_block,\n                                 else_block.as_ref().map(|e| &**e),\n+                                mk_sp(span_after(span, \"else\", context.codemap), span.hi),\n                                 None,\n                                 width,\n                                 offset,\n@@ -664,30 +705,26 @@ fn rewrite_if_else(context: &RewriteContext,\n             _ => else_block.rewrite(context, width, offset),\n         };\n \n-        let snippet = context.codemap\n-                             .span_to_snippet(mk_sp(if_block.span.hi, else_block.span.lo))\n-                             .unwrap();\n-        // Preserve comments that are between the if and else block\n-        if contains_comment(&snippet) {\n-            let close_pos = try_opt!(snippet.find_uncommented(\"else\"));\n-            let trimmed = &snippet[..close_pos].trim();\n-            let comment_str = format!(\"{}{}\",\n-                            offset.to_string(context.config),\n-                            try_opt!(rewrite_comment(trimmed,\n-                                                     false,\n-                                                     width,\n-                                                     offset,\n-                                                     context.config)),\n-                            );\n-            let else_str = format!(\"{}else \", offset.to_string(context.config));\n-\n-            result.push('\\n');\n-            result.push_str(&comment_str);\n-            result.push('\\n');\n-            result.push_str(&else_str);\n-        } else {\n-            result.push_str(\" else \");\n-        }\n+        let between_if_else_block = mk_sp(if_block.span.hi,\n+                                          span_before(mk_sp(if_block.span.hi, else_block.span.lo),\n+                                                      \"else\",\n+                                                      context.codemap));\n+        let between_if_else_block_comment = extract_comment(between_if_else_block,\n+                                                            &context,\n+                                                            offset,\n+                                                            width);\n+\n+        let after_else = mk_sp(span_after(mk_sp(if_block.span.hi, else_block.span.lo),\n+                                          \"else\",\n+                                          context.codemap),\n+                               else_block.span.lo);\n+        let after_else_comment = extract_comment(after_else, &context, offset, width);\n+\n+        try_opt!(write!(&mut result,\n+                        \"{}else{}\",\n+                        between_if_else_block_comment.as_ref().map_or(\" \", |str| &**str),\n+                        after_else_comment.as_ref().map_or(\" \", |str| &**str))\n+                     .ok());\n         result.push_str(&&try_opt!(rewrite));\n     }\n "}, {"sha": "3b03ede2be34f98ca4dde1d3d3b2e3532cbf9ce9", "filename": "src/utils.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4da91e7df24e833a5800631319f300a304d2f981/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da91e7df24e833a5800631319f300a304d2f981/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=4da91e7df24e833a5800631319f300a304d2f981", "patch": "@@ -38,6 +38,14 @@ pub fn span_after(original: Span, needle: &str, codemap: &CodeMap) -> BytePos {\n     original.lo + BytePos(offset as u32)\n }\n \n+#[inline]\n+pub fn span_before(original: Span, needle: &str, codemap: &CodeMap) -> BytePos {\n+    let snippet = codemap.span_to_snippet(original).unwrap();\n+    let offset = snippet.find_uncommented(needle).unwrap();\n+\n+    original.lo + BytePos(offset as u32)\n+}\n+\n #[inline]\n pub fn span_after_last(original: Span, needle: &str, codemap: &CodeMap) -> BytePos {\n     let snippet = codemap.span_to_snippet(original).unwrap();"}, {"sha": "cc713af3f18bdc14f7a8da5454ddff861008ce8c", "filename": "tests/source/issue-447.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4da91e7df24e833a5800631319f300a304d2f981/tests%2Fsource%2Fissue-447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da91e7df24e833a5800631319f300a304d2f981/tests%2Fsource%2Fissue-447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-447.rs?ref=4da91e7df24e833a5800631319f300a304d2f981", "patch": "@@ -0,0 +1,37 @@\n+fn main() {\n+\tif /* shouldn't be dropped\n+\tshouldn't be dropped */\n+\t\n+\tcond /* shouldn't be dropped\n+\tshouldn't be dropped */\n+\t\n+\t{\n+\t} /* shouldn't be dropped\n+\tshouldn't be dropped */\n+\t\n+\telse /* shouldn't be dropped\n+\tshouldn't be dropped */\n+\t\n+\tif /* shouldn't be dropped\n+\tshouldn't be dropped */\n+\t\n+\tcond /* shouldn't be dropped\n+\tshouldn't be dropped */\n+\t\n+\t{\n+\t} /* shouldn't be dropped\n+\tshouldn't be dropped */\n+\t\n+\telse /* shouldn't be dropped\n+\tshouldn't be dropped */\n+\t\n+\t{\n+\t}\n+\t\n+\tif /* shouldn't be dropped\n+\tshouldn't be dropped */\n+\tlet Some(x) = y/* shouldn't be dropped\n+\tshouldn't be dropped */\n+\t{\n+\t}\n+}"}, {"sha": "7e69c708eb7e71d64862d944df31fa42e960c32e", "filename": "tests/target/issue-447.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4da91e7df24e833a5800631319f300a304d2f981/tests%2Ftarget%2Fissue-447.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da91e7df24e833a5800631319f300a304d2f981/tests%2Ftarget%2Fissue-447.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-447.rs?ref=4da91e7df24e833a5800631319f300a304d2f981", "patch": "@@ -1,7 +1,39 @@\n fn main() {\n-    if cond {\n+    if\n+    // shouldn't be dropped\n+    // shouldn't be dropped\n+    cond\n+    // shouldn't be dropped\n+    // shouldn't be dropped\n+    {\n     }\n-    // This shouldn't be dropped\n-    else {\n+    // shouldn't be dropped\n+    // shouldn't be dropped\n+    else\n+    // shouldn't be dropped\n+    // shouldn't be dropped\n+    if\n+    // shouldn't be dropped\n+    // shouldn't be dropped\n+    cond\n+    // shouldn't be dropped\n+    // shouldn't be dropped\n+    {\n+    }\n+    // shouldn't be dropped\n+    // shouldn't be dropped\n+    else\n+    // shouldn't be dropped\n+    // shouldn't be dropped\n+    {\n+    }\n+\n+    if\n+    // shouldn't be dropped\n+    // shouldn't be dropped\n+    let Some(x) = y\n+    // shouldn't be dropped\n+    // shouldn't be dropped\n+    {\n     }\n }"}]}