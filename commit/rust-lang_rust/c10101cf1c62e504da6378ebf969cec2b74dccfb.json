{"sha": "c10101cf1c62e504da6378ebf969cec2b74dccfb", "node_id": "C_kwDOAAsO6NoAKGMxMDEwMWNmMWM2MmU1MDRkYTYzNzhlYmY5NjljZWMyYjc0ZGNjZmI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-04-06T02:48:47Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-27T17:14:27Z"}, "message": "Don't lint `trivially_copy_pass_by_ref` when unsafe pointers are used", "tree": {"sha": "045722f9d2a3d14c01e0da2e2360d4da13ed6e16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/045722f9d2a3d14c01e0da2e2360d4da13ed6e16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c10101cf1c62e504da6378ebf969cec2b74dccfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c10101cf1c62e504da6378ebf969cec2b74dccfb", "html_url": "https://github.com/rust-lang/rust/commit/c10101cf1c62e504da6378ebf969cec2b74dccfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c10101cf1c62e504da6378ebf969cec2b74dccfb/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2315f76f9d66b39db975bc722046cca55bc17079", "url": "https://api.github.com/repos/rust-lang/rust/commits/2315f76f9d66b39db975bc722046cca55bc17079", "html_url": "https://github.com/rust-lang/rust/commit/2315f76f9d66b39db975bc722046cca55bc17079"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "5fa4fd74853f1d09ee164aa0846dbbe424190b6b", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c10101cf1c62e504da6378ebf969cec2b74dccfb/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10101cf1c62e504da6378ebf969cec2b74dccfb/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=c10101cf1c62e504da6378ebf969cec2b74dccfb", "patch": "@@ -14,6 +14,7 @@ use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{BindingAnnotation, Body, FnDecl, HirId, Impl, ItemKind, MutTy, Mutability, Node, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::adjustment::{Adjust, PointerCast};\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::{self, RegionKind};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -185,6 +186,20 @@ impl<'tcx> PassByRefOrValue {\n                         && size <= self.ref_min_size\n                         && let hir::TyKind::Rptr(_, MutTy { ty: decl_ty, .. }) = input.kind\n                     {\n+                        if let Some(typeck) = cx.maybe_typeck_results() {\n+                            // Don't lint if an unsafe pointer is created.\n+                            // TODO: Limit the check only to unsafe pointers to the argument (or part of the argument)\n+                            //       which escape the current function.\n+                            if typeck.node_types().iter().any(|(_, &ty)| ty.is_unsafe_ptr())\n+                                || typeck\n+                                    .adjustments()\n+                                    .iter()\n+                                    .flat_map(|(_, a)| a)\n+                                    .any(|a| matches!(a.kind, Adjust::Pointer(PointerCast::UnsafeFnPointer)))\n+                            {\n+                                continue;\n+                            }\n+                        }\n                         let value_type = if fn_body.and_then(|body| body.params.get(index)).map_or(false, is_self) {\n                             \"self\".into()\n                         } else {"}, {"sha": "8f78f16a0a1a65939cd427b4a23fc64bf897a706", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c10101cf1c62e504da6378ebf969cec2b74dccfb/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c10101cf1c62e504da6378ebf969cec2b74dccfb/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=c10101cf1c62e504da6378ebf969cec2b74dccfb", "patch": "@@ -139,6 +139,18 @@ fn _unrelated_lifetimes<'a, 'b>(_x: &'a u32, y: &'b u32) -> &'b u32 {\n     y\n }\n \n+fn _return_ptr(x: &u32) -> *const u32 {\n+    x\n+}\n+\n+fn _return_field_ptr(x: &(u32, u32)) -> *const u32 {\n+    &x.0\n+}\n+\n+fn _return_field_ptr_addr_of(x: &(u32, u32)) -> *const u32 {\n+    core::ptr::addr_of!(x.0)\n+}\n+\n fn main() {\n     let (mut foo, bar) = (Foo(0), Bar([0; 24]));\n     let (mut a, b, c, x, y, z) = (0, 0, Bar([0; 24]), 0, Foo(0), 0);"}]}