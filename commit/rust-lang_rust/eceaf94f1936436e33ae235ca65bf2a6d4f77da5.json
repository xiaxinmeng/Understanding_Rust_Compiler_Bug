{"sha": "eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjZWFmOTRmMTkzNjQzNmUzM2FlMjM1Y2E2NWJmMmE2ZDRmNzdkYTU=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-18T13:32:19Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-02-18T14:12:37Z"}, "message": "More manual clippy fixes", "tree": {"sha": "83d42e6f014f80b84f9193e6b5c7c1e2aded9fa7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83d42e6f014f80b84f9193e6b5c7c1e2aded9fa7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "html_url": "https://github.com/rust-lang/rust/commit/eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4", "html_url": "https://github.com/rust-lang/rust/commit/b8ddcb0652f3ec8683023afc1e1f5166d6a712f4"}], "stats": {"total": 300, "additions": 141, "deletions": 159}, "files": [{"sha": "74aa4b00161b98620771a853e77b2f033e1a42be", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -43,7 +43,7 @@ pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n         .clone();\n \n     let trait_token =\n-        ctx.token_at_offset().filter(|t| t.kind() == IDENT && *t.text() != attr_name).next()?;\n+        ctx.token_at_offset().find(|t| t.kind() == IDENT && *t.text() != attr_name)?;\n \n     let annotated = attr.syntax().siblings(Direction::Next).find_map(ast::Name::cast)?;\n     let annotated_name = annotated.syntax().text().to_string();\n@@ -86,7 +86,7 @@ pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n                 .next_sibling_or_token()\n                 .filter(|t| t.kind() == WHITESPACE)\n                 .map(|t| t.text_range())\n-                .unwrap_or(TextRange::from_to(TextUnit::from(0), TextUnit::from(0)));\n+                .unwrap_or_else(|| TextRange::from_to(TextUnit::from(0), TextUnit::from(0)));\n             edit.delete(line_break_range);\n \n             attr_range.len() + line_break_range.len()"}, {"sha": "1cc4986389a2db1f94830ac743596c667b2804d9", "filename": "crates/ra_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn move_guard_to_arm_body(ctx: AssistCtx) -> Option<Assist> {\n         edit.target(guard.syntax().text_range());\n         let offseting_amount = match space_before_guard.and_then(|it| it.into_token()) {\n             Some(tok) => {\n-                if let Some(_) = ast::Whitespace::cast(tok.clone()) {\n+                if ast::Whitespace::cast(tok.clone()).is_some() {\n                     let ele = tok.text_range();\n                     edit.delete(ele);\n                     ele.len()\n@@ -98,11 +98,11 @@ pub(crate) fn move_arm_cond_to_match_guard(ctx: AssistCtx) -> Option<Assist> {\n     let then_block = if_expr.then_branch()?;\n \n     // Not support if with else branch\n-    if let Some(_) = if_expr.else_branch() {\n+    if if_expr.else_branch().is_some() {\n         return None;\n     }\n     // Not support moving if let to arm guard\n-    if let Some(_) = cond.pat() {\n+    if cond.pat().is_some() {\n         return None;\n     }\n "}, {"sha": "1bdcda0694981928941603a8a4c63d56aedf8e0b", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -988,20 +988,17 @@ impl Type {\n \n     pub fn fields(&self, db: &impl HirDatabase) -> Vec<(StructField, Type)> {\n         if let Ty::Apply(a_ty) = &self.ty.value {\n-            match a_ty.ctor {\n-                TypeCtor::Adt(AdtId::StructId(s)) => {\n-                    let var_def = s.into();\n-                    return db\n-                        .field_types(var_def)\n-                        .iter()\n-                        .map(|(local_id, ty)| {\n-                            let def = StructField { parent: var_def.into(), id: local_id };\n-                            let ty = ty.clone().subst(&a_ty.parameters);\n-                            (def, self.derived(ty))\n-                        })\n-                        .collect();\n-                }\n-                _ => {}\n+            if let TypeCtor::Adt(AdtId::StructId(s)) = a_ty.ctor {\n+                let var_def = s.into();\n+                return db\n+                    .field_types(var_def)\n+                    .iter()\n+                    .map(|(local_id, ty)| {\n+                        let def = StructField { parent: var_def.into(), id: local_id };\n+                        let ty = ty.clone().subst(&a_ty.parameters);\n+                        (def, self.derived(ty))\n+                    })\n+                    .collect();\n             }\n         };\n         Vec::new()\n@@ -1010,14 +1007,11 @@ impl Type {\n     pub fn tuple_fields(&self, _db: &impl HirDatabase) -> Vec<Type> {\n         let mut res = Vec::new();\n         if let Ty::Apply(a_ty) = &self.ty.value {\n-            match a_ty.ctor {\n-                TypeCtor::Tuple { .. } => {\n-                    for ty in a_ty.parameters.iter() {\n-                        let ty = ty.clone();\n-                        res.push(self.derived(ty));\n-                    }\n+            if let TypeCtor::Tuple { .. } = a_ty.ctor {\n+                for ty in a_ty.parameters.iter() {\n+                    let ty = ty.clone();\n+                    res.push(self.derived(ty));\n                 }\n-                _ => {}\n             }\n         };\n         res"}, {"sha": "6e958ca75c4640198260b820f8f1450aaf0b84e9", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -157,7 +157,7 @@ impl ItemScope {\n     }\n \n     pub(crate) fn resolutions<'a>(&'a self) -> impl Iterator<Item = (Name, PerNs)> + 'a {\n-        self.visible.iter().map(|(name, res)| (name.clone(), res.clone()))\n+        self.visible.iter().map(|(name, res)| (name.clone(), *res))\n     }\n \n     pub(crate) fn collect_legacy_macros(&self) -> FxHashMap<Name, MacroDefId> {"}, {"sha": "564b5fec5760ee877a2bf77c7ea99f4e4e4744d0", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -460,7 +460,7 @@ impl AsMacroCall for AstIdWithPath<ast::MacroCall> {\n         resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n     ) -> Option<MacroCallId> {\n         let def = resolver(self.path.clone())?;\n-        Some(def.as_call_id(db, MacroCallKind::FnLike(self.ast_id.clone())))\n+        Some(def.as_call_id(db, MacroCallKind::FnLike(self.ast_id)))\n     }\n }\n \n@@ -471,6 +471,6 @@ impl AsMacroCall for AstIdWithPath<ast::ModuleItem> {\n         resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n     ) -> Option<MacroCallId> {\n         let def = resolver(self.path.clone())?;\n-        Some(def.as_call_id(db, MacroCallKind::Attr(self.ast_id.clone())))\n+        Some(def.as_call_id(db, MacroCallKind::Attr(self.ast_id)))\n     }\n }"}, {"sha": "f2bb0bddbb938556d50c7749e1548dcab96a5955", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -155,14 +155,11 @@ fn compile_error_expand(\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n     if tt.count() == 1 {\n-        match &tt.token_trees[0] {\n-            tt::TokenTree::Leaf(tt::Leaf::Literal(it)) => {\n-                let s = it.text.as_str();\n-                if s.contains('\"') {\n-                    return Ok(quote! { loop { #it }});\n-                }\n+        if let tt::TokenTree::Leaf(tt::Leaf::Literal(it)) = &tt.token_trees[0] {\n+            let s = it.text.as_str();\n+            if s.contains('\"') {\n+                return Ok(quote! { loop { #it }});\n             }\n-            _ => {}\n         };\n     }\n "}, {"sha": "57e7eebf9e08e8897be198ede04e66643ab7a1b3", "filename": "crates/ra_hir_expand/src/quote.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -15,14 +15,13 @@ macro_rules! __quote {\n     ( @SUBTREE $delim:ident $($tt:tt)* ) => {\n         {\n             let children = $crate::__quote!($($tt)*);\n-            let subtree = tt::Subtree {\n+            tt::Subtree {\n                 delimiter: Some(tt::Delimiter {\n                     kind: tt::DelimiterKind::$delim,\n                     id: tt::TokenId::unspecified(),\n                 }),\n                 token_trees: $crate::quote::IntoTt::to_tokens(children),\n-            };\n-            subtree\n+            }\n         }\n     };\n "}, {"sha": "6eafdc8f6dda6d7ad20c620ab880dcd40dc48d2f", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -40,7 +40,7 @@ impl Diagnostic for MissingFields {\n         use std::fmt::Write;\n         let mut message = String::from(\"Missing structure fields:\\n\");\n         for field in &self.missed_fields {\n-            write!(message, \"- {}\\n\", field).unwrap();\n+            writeln!(message, \"- {}\", field).unwrap();\n         }\n         message\n     }"}, {"sha": "0d11b537c8fceaabdac993640a66e0e81c87c0f0", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -138,7 +138,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             _ => return,\n         };\n \n-        if params.len() == 2 && &params[0] == &mismatch.actual {\n+        if params.len() == 2 && params[0] == mismatch.actual {\n             let (_, source_map) = db.body_with_source_map(self.func.into());\n \n             if let Some(source_ptr) = source_map.expr_syntax(id) {"}, {"sha": "fb6a51b127773644da2b8b94730a63a34a0e6908", "filename": "crates/ra_hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -26,7 +26,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     /// Note that it is only possible that one type are coerced to another.\n     /// Coercing both types to another least upper bound type is not possible in rustc,\n     /// which will simply result in \"incompatible types\" error.\n-    pub(super) fn coerce_merge_branch<'t>(&mut self, ty1: &Ty, ty2: &Ty) -> Ty {\n+    pub(super) fn coerce_merge_branch(&mut self, ty1: &Ty, ty2: &Ty) -> Ty {\n         if self.coerce(ty1, ty2) {\n             ty2.clone()\n         } else if self.coerce(ty2, ty1) {\n@@ -252,15 +252,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let unsize_generic_index = {\n                     let mut index = None;\n                     let mut multiple_param = false;\n-                    field_tys[last_field_id].value.walk(&mut |ty| match ty {\n-                        &Ty::Bound(idx) => {\n+                    field_tys[last_field_id].value.walk(&mut |ty| {\n+                        if let &Ty::Bound(idx) = ty {\n                             if index.is_none() {\n                                 index = Some(idx);\n                             } else if Some(idx) != index {\n                                 multiple_param = true;\n                             }\n                         }\n-                        _ => {}\n                     });\n \n                     if multiple_param {"}, {"sha": "9d5f756257e2018b8a7997bcc1aae30e16f1498c", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -35,8 +35,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 TypeMismatch { expected: expected.ty.clone(), actual: ty.clone() },\n             );\n         }\n-        let ty = self.resolve_ty_as_possible(ty);\n-        ty\n+        self.resolve_ty_as_possible(ty)\n     }\n \n     /// Infer type of expression with possibly implicit coerce to the expected type.\n@@ -155,8 +154,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 };\n                 self.register_obligations_for_call(&callee_ty);\n                 self.check_call_arguments(args, &param_tys);\n-                let ret_ty = self.normalize_associated_types_in(ret_ty);\n-                ret_ty\n+                self.normalize_associated_types_in(ret_ty)\n             }\n             Expr::MethodCall { receiver, args, method_name, generic_args } => self\n                 .infer_method_call(tgt_expr, *receiver, &args, &method_name, generic_args.as_ref()),\n@@ -280,14 +278,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Expr::Await { expr } => {\n                 let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n-                let ty =\n-                    self.resolve_associated_type(inner_ty, self.resolve_future_future_output());\n-                ty\n+                self.resolve_associated_type(inner_ty, self.resolve_future_future_output())\n             }\n             Expr::Try { expr } => {\n                 let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n-                let ty = self.resolve_associated_type(inner_ty, self.resolve_ops_try_ok());\n-                ty\n+                self.resolve_associated_type(inner_ty, self.resolve_ops_try_ok())\n             }\n             Expr::Cast { expr, type_ref } => {\n                 let _inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n@@ -611,8 +606,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         self.unify(&expected_receiver_ty, &actual_receiver_ty);\n \n         self.check_call_arguments(args, &param_tys);\n-        let ret_ty = self.normalize_associated_types_in(ret_ty);\n-        ret_ty\n+        self.normalize_associated_types_in(ret_ty)\n     }\n \n     fn check_call_arguments(&mut self, args: &[ExprId], param_tys: &[Ty]) {"}, {"sha": "9c7996572429afd651ca120431c7ac0d54b4ac51", "filename": "crates/ra_hir_ty/src/infer/unify.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -140,13 +140,12 @@ where\n impl<T> Canonicalized<T> {\n     pub fn decanonicalize_ty(&self, mut ty: Ty) -> Ty {\n         ty.walk_mut_binders(\n-            &mut |ty, binders| match ty {\n-                &mut Ty::Bound(idx) => {\n+            &mut |ty, binders| {\n+                if let &mut Ty::Bound(idx) = ty {\n                     if idx as usize >= binders && (idx as usize - binders) < self.free_vars.len() {\n                         *ty = Ty::Infer(self.free_vars[idx as usize - binders]);\n                     }\n                 }\n-                _ => {}\n             },\n             0,\n         );"}, {"sha": "13c5e6c6b73fe443a8f31bedc7487ce09381a1b7", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -763,16 +763,15 @@ pub trait TypeWalk {\n         Self: Sized,\n     {\n         self.walk_mut_binders(\n-            &mut |ty, binders| match ty {\n-                &mut Ty::Bound(idx) => {\n+            &mut |ty, binders| {\n+                if let &mut Ty::Bound(idx) = ty {\n                     if idx as usize >= binders && (idx as usize - binders) < substs.len() {\n                         *ty = substs.0[idx as usize - binders].clone();\n                     } else if idx as usize >= binders + substs.len() {\n                         // shift free binders\n                         *ty = Ty::Bound(idx - substs.len() as u32);\n                     }\n                 }\n-                _ => {}\n             },\n             0,\n         );"}, {"sha": "54e2bd05a19677ba08b86f84ed213081d3aaca7f", "filename": "crates/ra_hir_ty/src/op.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fop.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -30,20 +30,18 @@ pub(super) fn binary_op_return_ty(op: BinaryOp, lhs_ty: Ty, rhs_ty: Ty) -> Ty {\n pub(super) fn binary_op_rhs_expectation(op: BinaryOp, lhs_ty: Ty) -> Ty {\n     match op {\n         BinaryOp::LogicOp(..) => Ty::simple(TypeCtor::Bool),\n-        BinaryOp::Assignment { op: None } | BinaryOp::CmpOp(CmpOp::Eq { negated: _ }) => {\n-            match lhs_ty {\n-                Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n-                    TypeCtor::Int(..)\n-                    | TypeCtor::Float(..)\n-                    | TypeCtor::Str\n-                    | TypeCtor::Char\n-                    | TypeCtor::Bool => lhs_ty,\n-                    _ => Ty::Unknown,\n-                },\n-                Ty::Infer(InferTy::IntVar(..)) | Ty::Infer(InferTy::FloatVar(..)) => lhs_ty,\n+        BinaryOp::Assignment { op: None } | BinaryOp::CmpOp(CmpOp::Eq { .. }) => match lhs_ty {\n+            Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n+                TypeCtor::Int(..)\n+                | TypeCtor::Float(..)\n+                | TypeCtor::Str\n+                | TypeCtor::Char\n+                | TypeCtor::Bool => lhs_ty,\n                 _ => Ty::Unknown,\n-            }\n-        }\n+            },\n+            Ty::Infer(InferTy::IntVar(..)) | Ty::Infer(InferTy::FloatVar(..)) => lhs_ty,\n+            _ => Ty::Unknown,\n+        },\n         BinaryOp::ArithOp(ArithOp::Shl) | BinaryOp::ArithOp(ArithOp::Shr) => Ty::Unknown,\n         BinaryOp::CmpOp(CmpOp::Ord { .. })\n         | BinaryOp::Assignment { op: Some(_) }"}, {"sha": "c794f7b8470067bfdd9106eb4d927ce305448214", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -86,15 +86,14 @@ impl TestDB {\n     pub fn diagnostics(&self) -> String {\n         let mut buf = String::new();\n         let crate_graph = self.crate_graph();\n-        for krate in crate_graph.iter().next() {\n+        for krate in crate_graph.iter() {\n             let crate_def_map = self.crate_def_map(krate);\n \n             let mut fns = Vec::new();\n             for (module_id, _) in crate_def_map.modules.iter() {\n                 for decl in crate_def_map[module_id].scope.declarations() {\n-                    match decl {\n-                        ModuleDefId::FunctionId(f) => fns.push(f),\n-                        _ => (),\n+                    if let ModuleDefId::FunctionId(f) = decl {\n+                        fns.push(f)\n                     }\n                 }\n "}, {"sha": "240cc03a2c2eab61348c9af13ed2f03c67553ece", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -101,9 +101,9 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n                 (src_ptr.value.range(), node.text().to_string().replace(\"\\n\", \" \"))\n             };\n             let macro_prefix = if src_ptr.file_id != file_id.into() { \"!\" } else { \"\" };\n-            write!(\n+            writeln!(\n                 acc,\n-                \"{}{} '{}': {}\\n\",\n+                \"{}{} '{}': {}\",\n                 macro_prefix,\n                 range,\n                 ellipsize(text, 15),\n@@ -118,9 +118,9 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n             for (src_ptr, mismatch) in &mismatches {\n                 let range = src_ptr.value.range();\n                 let macro_prefix = if src_ptr.file_id != file_id.into() { \"!\" } else { \"\" };\n-                write!(\n+                writeln!(\n                     acc,\n-                    \"{}{}: expected {}, got {}\\n\",\n+                    \"{}{}: expected {}, got {}\",\n                     macro_prefix,\n                     range,\n                     mismatch.expected.display(&db),"}, {"sha": "e83449957e3ecf65dcddf184afae18d2be5df42a", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -248,12 +248,9 @@ fn solution_from_chalk(\n         let value = subst\n             .value\n             .into_iter()\n-            .map(|p| {\n-                let ty = match p.ty() {\n-                    Some(ty) => from_chalk(db, ty.clone()),\n-                    None => unimplemented!(),\n-                };\n-                ty\n+            .map(|p| match p.ty() {\n+                Some(ty) => from_chalk(db, ty.clone()),\n+                None => unimplemented!(),\n             })\n             .collect();\n         let result = Canonical { value, num_vars: subst.binders.len() };"}, {"sha": "a537420a5354de2790ff4501c26845fe798e5d8f", "filename": "crates/ra_hir_ty/src/traits/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -122,7 +122,7 @@ fn closure_fn_trait_impl_datum(\n         substs: Substs::build_for_def(db, trait_).push(self_ty).push(arg_ty).build(),\n     };\n \n-    let output_ty_id = AssocTyValue::ClosureFnTraitImplOutput(data.clone());\n+    let output_ty_id = AssocTyValue::ClosureFnTraitImplOutput(data);\n \n     BuiltinImplData {\n         num_vars: num_args as usize + 1,\n@@ -137,7 +137,7 @@ fn closure_fn_trait_output_assoc_ty_value(\n     krate: CrateId,\n     data: super::ClosureFnTraitImplData,\n ) -> BuiltinImplAssocTyValueData {\n-    let impl_ = Impl::ClosureFnTraitImpl(data.clone());\n+    let impl_ = Impl::ClosureFnTraitImpl(data);\n \n     let num_args: u16 = match &db.body(data.def)[data.expr] {\n         Expr::Lambda { args, .. } => args.len() as u16,"}, {"sha": "1bdf13e480d7423b9d2e2f6b4d1d6c4f985b2e16", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -409,8 +409,7 @@ where\n     fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Canonical<T::Chalk> {\n         let parameter = chalk_ir::ParameterKind::Ty(chalk_ir::UniverseIndex::ROOT);\n         let value = self.value.to_chalk(db);\n-        let canonical = chalk_ir::Canonical { value, binders: vec![parameter; self.num_vars] };\n-        canonical\n+        chalk_ir::Canonical { value, binders: vec![parameter; self.num_vars] }\n     }\n \n     fn from_chalk(db: &impl HirDatabase, canonical: chalk_ir::Canonical<T::Chalk>) -> Canonical<T> {"}, {"sha": "7c6322cb48309778a04552983f52ce22456cf0ab", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -128,7 +128,7 @@ impl FnCallNode {\n             }),\n \n             FnCallNode::MethodCallExpr(call_expr) => {\n-                call_expr.syntax().children().filter_map(ast::NameRef::cast).nth(0)\n+                call_expr.syntax().children().filter_map(ast::NameRef::cast).next()\n             }\n \n             FnCallNode::MacroCallExpr(call_expr) => call_expr.path()?.segment()?.name_ref(),"}, {"sha": "83628e35c2b8f1df9726f4a6b99dd43738266c0b", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -59,7 +59,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n         .as_ref()\n         .and_then(|node| node.parent())\n         .and_then(|node| node.parent())\n-        .and_then(|node| ast::ImplBlock::cast(node));\n+        .and_then(ast::ImplBlock::cast);\n \n     if let (Some(trigger), Some(impl_block)) = (trigger, impl_block) {\n         match trigger.kind() {\n@@ -110,17 +110,17 @@ fn add_function_impl(\n     ctx: &CompletionContext,\n     func: &hir::Function,\n ) {\n-    let display = FunctionSignature::from_hir(ctx.db, func.clone());\n+    let display = FunctionSignature::from_hir(ctx.db, *func);\n \n     let fn_name = func.name(ctx.db).to_string();\n \n-    let label = if func.params(ctx.db).len() > 0 {\n+    let label = if !func.params(ctx.db).is_empty() {\n         format!(\"fn {}(..)\", fn_name)\n     } else {\n         format!(\"fn {}()\", fn_name)\n     };\n \n-    let builder = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label.clone())\n+    let builder = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label)\n         .lookup_by(fn_name)\n         .set_documentation(func.docs(ctx.db));\n "}, {"sha": "61867c0ffdbb98774c89870c971307dec5757b6e", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -159,15 +159,15 @@ impl CompletionItem {\n \n     /// Short one-line additional information, like a type\n     pub fn detail(&self) -> Option<&str> {\n-        self.detail.as_ref().map(|it| it.as_str())\n+        self.detail.as_deref()\n     }\n     /// A doc-comment\n     pub fn documentation(&self) -> Option<Documentation> {\n         self.documentation.clone()\n     }\n     /// What string is used for filtering.\n     pub fn lookup(&self) -> &str {\n-        self.lookup.as_ref().map(|it| it.as_str()).unwrap_or_else(|| self.label())\n+        self.lookup.as_deref().unwrap_or_else(|| self.label())\n     }\n \n     pub fn kind(&self) -> Option<CompletionItemKind> {"}, {"sha": "b85fd80754a649dd1d80c1a411f2bbee726439ab", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -54,9 +54,8 @@ impl FunctionSignature {\n \n     pub(crate) fn from_struct(db: &RootDatabase, st: hir::Struct) -> Option<Self> {\n         let node: ast::StructDef = st.source(db).value;\n-        match node.kind() {\n-            ast::StructKind::Record(_) => return None,\n-            _ => (),\n+        if let ast::StructKind::Record(_) = node.kind() {\n+            return None;\n         };\n \n         let params = st"}, {"sha": "096c41c815fec114dbdf6cc2e309dfeb77ea0d8d", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -64,11 +64,11 @@ impl NavigationTarget {\n     }\n \n     pub fn docs(&self) -> Option<&str> {\n-        self.docs.as_ref().map(String::as_str)\n+        self.docs.as_deref()\n     }\n \n     pub fn description(&self) -> Option<&str> {\n-        self.description.as_ref().map(String::as_str)\n+        self.description.as_deref()\n     }\n \n     /// A \"most interesting\" range withing the `full_range`."}, {"sha": "97c08ade506306326649d7e21924d2f15f861f46", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -268,7 +268,7 @@ fn decl_access(\n     };\n \n     let stmt = find_node_at_offset::<ast::LetStmt>(syntax, range.start())?;\n-    if let Some(_) = stmt.initializer() {\n+    if stmt.initializer().is_some() {\n         let pat = stmt.pat()?;\n         if let ast::Pat::BindPat(it) = pat {\n             if it.name()?.text().as_str() == name {"}, {"sha": "902c29fc62078e1a232f565ee3cb913760ef4f37", "filename": "crates/ra_ide/src/ssr.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_ide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_ide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fssr.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -85,8 +85,11 @@ impl FromStr for SsrQuery {\n     fn from_str(query: &str) -> Result<SsrQuery, SsrError> {\n         let mut it = query.split(\"==>>\");\n         let pattern = it.next().expect(\"at least empty string\").trim();\n-        let mut template =\n-            it.next().ok_or(SsrError(\"Cannot find delemiter `==>>`\".into()))?.trim().to_string();\n+        let mut template = it\n+            .next()\n+            .ok_or_else(|| SsrError(\"Cannot find delemiter `==>>`\".into()))?\n+            .trim()\n+            .to_string();\n         if it.next().is_some() {\n             return Err(SsrError(\"More than one delimiter found\".into()));\n         }\n@@ -131,11 +134,12 @@ fn traverse(node: &SyntaxNode, go: &mut impl FnMut(&SyntaxNode) -> bool) {\n }\n \n fn split_by_var(s: &str) -> Result<(&str, &str, &str), SsrError> {\n-    let end_of_name = s.find(\":\").ok_or(SsrError(\"Use $<name>:expr\".into()))?;\n+    let end_of_name = s.find(':').ok_or_else(|| SsrError(\"Use $<name>:expr\".into()))?;\n     let name = &s[0..end_of_name];\n     is_name(name)?;\n     let type_begin = end_of_name + 1;\n-    let type_length = s[type_begin..].find(|c| !char::is_ascii_alphanumeric(&c)).unwrap_or(s.len());\n+    let type_length =\n+        s[type_begin..].find(|c| !char::is_ascii_alphanumeric(&c)).unwrap_or_else(|| s.len());\n     let type_name = &s[type_begin..type_begin + type_length];\n     Ok((name, type_name, &s[type_begin + type_length..]))\n }\n@@ -182,7 +186,7 @@ fn find(pattern: &SsrPattern, code: &SyntaxNode) -> SsrMatches {\n                 pattern.text() == code.text()\n             }\n             (SyntaxElement::Node(ref pattern), SyntaxElement::Node(ref code)) => {\n-                if placeholders.iter().find(|&n| n.0.as_str() == pattern.text()).is_some() {\n+                if placeholders.iter().any(|n| n.0.as_str() == pattern.text()) {\n                     match_.binding.insert(Var(pattern.text().to_string()), code.clone());\n                     true\n                 } else {"}, {"sha": "10a6f300a7e08e83c872e438ced8ef7b270ea577", "filename": "crates/ra_mbe/src/parser.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_mbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_mbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fparser.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -45,15 +45,15 @@ impl PartialEq for Separator {\n     }\n }\n \n-pub(crate) fn parse_template<'a>(\n-    template: &'a tt::Subtree,\n-) -> impl Iterator<Item = Result<Op<'a>, ExpandError>> {\n+pub(crate) fn parse_template(\n+    template: &tt::Subtree,\n+) -> impl Iterator<Item = Result<Op<'_>, ExpandError>> {\n     parse_inner(template, Mode::Template)\n }\n \n-pub(crate) fn parse_pattern<'a>(\n-    pattern: &'a tt::Subtree,\n-) -> impl Iterator<Item = Result<Op<'a>, ExpandError>> {\n+pub(crate) fn parse_pattern(\n+    pattern: &tt::Subtree,\n+) -> impl Iterator<Item = Result<Op<'_>, ExpandError>> {\n     parse_inner(pattern, Mode::Pattern)\n }\n \n@@ -63,10 +63,7 @@ enum Mode {\n     Template,\n }\n \n-fn parse_inner<'a>(\n-    src: &'a tt::Subtree,\n-    mode: Mode,\n-) -> impl Iterator<Item = Result<Op<'a>, ExpandError>> {\n+fn parse_inner(src: &tt::Subtree, mode: Mode) -> impl Iterator<Item = Result<Op<'_>, ExpandError>> {\n     let mut src = TtIter::new(src);\n     std::iter::from_fn(move || {\n         let first = src.next()?;"}, {"sha": "f8b43866cb5be72d6eb8183c2848dd5b82d77cd2", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -21,7 +21,7 @@ use super::*;\n // struct S;\n pub(super) fn mod_contents(p: &mut Parser, stop_on_r_curly: bool) {\n     attributes::inner_attributes(p);\n-    while !p.at(EOF) && !(stop_on_r_curly && p.at(T!['}'])) {\n+    while !(stop_on_r_curly && p.at(T!['}']) || p.at(EOF)) {\n         item_or_macro(p, stop_on_r_curly, ItemFlavor::Mod)\n     }\n }"}, {"sha": "76e2d4f7d09eb1e8186a3d835b781cdad70443dc", "filename": "crates/ra_parser/src/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_parser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_parser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fparser.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -126,13 +126,13 @@ impl<'t> Parser<'t> {\n     }\n \n     fn at_composite2(&self, n: usize, k1: SyntaxKind, k2: SyntaxKind) -> bool {\n-        let t1 = self.token_source.lookahead_nth(n + 0);\n+        let t1 = self.token_source.lookahead_nth(n);\n         let t2 = self.token_source.lookahead_nth(n + 1);\n         t1.kind == k1 && t1.is_jointed_to_next && t2.kind == k2\n     }\n \n     fn at_composite3(&self, n: usize, k1: SyntaxKind, k2: SyntaxKind, k3: SyntaxKind) -> bool {\n-        let t1 = self.token_source.lookahead_nth(n + 0);\n+        let t1 = self.token_source.lookahead_nth(n);\n         let t2 = self.token_source.lookahead_nth(n + 1);\n         let t3 = self.token_source.lookahead_nth(n + 2);\n         (t1.kind == k1 && t1.is_jointed_to_next)"}, {"sha": "4fea459d5bbccc1806a977a98d98fbd6aa00ff07", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -197,7 +197,7 @@ impl CargoWorkspace {\n             let pkg_data = &mut packages[pkg];\n             pkg_by_id.insert(id, pkg);\n             for meta_tgt in meta_pkg.targets {\n-                let is_proc_macro = meta_tgt.kind.as_slice() == &[\"proc-macro\"];\n+                let is_proc_macro = meta_tgt.kind.as_slice() == [\"proc-macro\"];\n                 let tgt = targets.alloc(TargetData {\n                     pkg,\n                     name: meta_tgt.name,"}, {"sha": "e35f7fbbcbe00566442e064bd99214e394e4586d", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 38, "deletions": 29, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -197,8 +197,9 @@ impl ProjectWorkspace {\n                         if let (Some(&from), Some(&to)) =\n                             (crates.get(&from_crate_id), crates.get(&to_crate_id))\n                         {\n-                            if let Err(_) =\n-                                crate_graph.add_dep(from, CrateName::new(&dep.name).unwrap(), to)\n+                            if crate_graph\n+                                .add_dep(from, CrateName::new(&dep.name).unwrap(), to)\n+                                .is_err()\n                             {\n                                 log::error!(\n                                     \"cyclic dependency {:?} -> {:?}\",\n@@ -237,8 +238,7 @@ impl ProjectWorkspace {\n                         if let (Some(&from), Some(&to)) =\n                             (sysroot_crates.get(&from), sysroot_crates.get(&to))\n                         {\n-                            if let Err(_) =\n-                                crate_graph.add_dep(from, CrateName::new(name).unwrap(), to)\n+                            if crate_graph.add_dep(from, CrateName::new(name).unwrap(), to).is_err()\n                             {\n                                 log::error!(\"cyclic dependency between sysroot crates\")\n                             }\n@@ -279,11 +279,14 @@ impl ProjectWorkspace {\n                             }\n                             if tgt.is_proc_macro(&cargo) {\n                                 if let Some(proc_macro) = libproc_macro {\n-                                    if let Err(_) = crate_graph.add_dep(\n-                                        crate_id,\n-                                        CrateName::new(\"proc_macro\").unwrap(),\n-                                        proc_macro,\n-                                    ) {\n+                                    if crate_graph\n+                                        .add_dep(\n+                                            crate_id,\n+                                            CrateName::new(\"proc_macro\").unwrap(),\n+                                            proc_macro,\n+                                        )\n+                                        .is_err()\n+                                    {\n                                         log::error!(\n                                             \"cyclic dependency on proc_macro for {}\",\n                                             pkg.name(&cargo)\n@@ -299,15 +302,19 @@ impl ProjectWorkspace {\n                     // Set deps to the core, std and to the lib target of the current package\n                     for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n                         if let Some(to) = lib_tgt {\n-                            if to != from {\n-                                if let Err(_) = crate_graph.add_dep(\n-                                    from,\n-                                    // For root projects with dashes in their name,\n-                                    // cargo metadata does not do any normalization,\n-                                    // so we do it ourselves currently\n-                                    CrateName::normalize_dashes(pkg.name(&cargo)),\n-                                    to,\n-                                ) {\n+                            if to != from\n+                                && crate_graph\n+                                    .add_dep(\n+                                        from,\n+                                        // For root projects with dashes in their name,\n+                                        // cargo metadata does not do any normalization,\n+                                        // so we do it ourselves currently\n+                                        CrateName::normalize_dashes(pkg.name(&cargo)),\n+                                        to,\n+                                    )\n+                                    .is_err()\n+                            {\n+                                {\n                                     log::error!(\n                                         \"cyclic dependency between targets of {}\",\n                                         pkg.name(&cargo)\n@@ -318,22 +325,25 @@ impl ProjectWorkspace {\n                         // core is added as a dependency before std in order to\n                         // mimic rustcs dependency order\n                         if let Some(core) = libcore {\n-                            if let Err(_) =\n-                                crate_graph.add_dep(from, CrateName::new(\"core\").unwrap(), core)\n+                            if crate_graph\n+                                .add_dep(from, CrateName::new(\"core\").unwrap(), core)\n+                                .is_err()\n                             {\n                                 log::error!(\"cyclic dependency on core for {}\", pkg.name(&cargo))\n                             }\n                         }\n                         if let Some(alloc) = liballoc {\n-                            if let Err(_) =\n-                                crate_graph.add_dep(from, CrateName::new(\"alloc\").unwrap(), alloc)\n+                            if crate_graph\n+                                .add_dep(from, CrateName::new(\"alloc\").unwrap(), alloc)\n+                                .is_err()\n                             {\n                                 log::error!(\"cyclic dependency on alloc for {}\", pkg.name(&cargo))\n                             }\n                         }\n                         if let Some(std) = libstd {\n-                            if let Err(_) =\n-                                crate_graph.add_dep(from, CrateName::new(\"std\").unwrap(), std)\n+                            if crate_graph\n+                                .add_dep(from, CrateName::new(\"std\").unwrap(), std)\n+                                .is_err()\n                             {\n                                 log::error!(\"cyclic dependency on std for {}\", pkg.name(&cargo))\n                             }\n@@ -347,11 +357,10 @@ impl ProjectWorkspace {\n                     for dep in pkg.dependencies(&cargo) {\n                         if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {\n                             for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n-                                if let Err(_) = crate_graph.add_dep(\n-                                    from,\n-                                    CrateName::new(&dep.name).unwrap(),\n-                                    to,\n-                                ) {\n+                                if crate_graph\n+                                    .add_dep(from, CrateName::new(&dep.name).unwrap(), to)\n+                                    .is_err()\n+                                {\n                                     log::error!(\n                                         \"cyclic dependency {} -> {}\",\n                                         pkg.name(&cargo),"}, {"sha": "3df021acc3059075f6455770e1283ed807bf917a", "filename": "xtask/src/install.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eceaf94f1936436e33ae235ca65bf2a6d4f77da5/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=eceaf94f1936436e33ae235ca65bf2a6d4f77da5", "patch": "@@ -94,16 +94,15 @@ fn install_client(ClientOpt::VsCode: ClientOpt) -> Result<()> {\n             })\n     };\n \n-    let installed_extensions;\n-    if cfg!(unix) {\n+    let installed_extensions = if cfg!(unix) {\n         run!(\"npm --version\").context(\"`npm` is required to build the VS Code plugin\")?;\n         run!(\"npm install\")?;\n \n         run!(\"npm run package --scripts-prepend-node-path\")?;\n \n         let code = find_code(|bin| run!(\"{} --version\", bin).is_ok())?;\n         run!(\"{} --install-extension rust-analyzer.vsix --force\", code)?;\n-        installed_extensions = run!(\"{} --list-extensions\", code; echo = false)?;\n+        run!(\"{} --list-extensions\", code; echo = false)?\n     } else {\n         run!(\"cmd.exe /c npm --version\")\n             .context(\"`npm` is required to build the VS Code plugin\")?;\n@@ -113,8 +112,8 @@ fn install_client(ClientOpt::VsCode: ClientOpt) -> Result<()> {\n \n         let code = find_code(|bin| run!(\"cmd.exe /c {}.cmd --version\", bin).is_ok())?;\n         run!(r\"cmd.exe /c {}.cmd --install-extension rust-analyzer.vsix --force\", code)?;\n-        installed_extensions = run!(\"cmd.exe /c {}.cmd --list-extensions\", code; echo = false)?;\n-    }\n+        run!(\"cmd.exe /c {}.cmd --list-extensions\", code; echo = false)?\n+    };\n \n     if !installed_extensions.contains(\"rust-analyzer\") {\n         bail!("}]}