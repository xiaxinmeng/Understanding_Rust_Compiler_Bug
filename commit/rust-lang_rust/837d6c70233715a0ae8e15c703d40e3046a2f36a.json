{"sha": "837d6c70233715a0ae8e15c703d40e3046a2f36a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzN2Q2YzcwMjMzNzE1YTBhZThlMTVjNzAzZDQwZTMwNDZhMmYzNmE=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-26T20:48:12Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-27T07:48:42Z"}, "message": "Remove TryFrom impls that might become conditionally-infallible with a portability lint\n\nhttps://github.com/rust-lang/rust/pull/49305#issuecomment-376293243", "tree": {"sha": "5d3149e0f2799ebee51f07fc6e0b862d2834de6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d3149e0f2799ebee51f07fc6e0b862d2834de6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/837d6c70233715a0ae8e15c703d40e3046a2f36a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/837d6c70233715a0ae8e15c703d40e3046a2f36a", "html_url": "https://github.com/rust-lang/rust/commit/837d6c70233715a0ae8e15c703d40e3046a2f36a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/837d6c70233715a0ae8e15c703d40e3046a2f36a/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09008cc23ff6395c2c928f3690e07d7389d08ebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/09008cc23ff6395c2c928f3690e07d7389d08ebc", "html_url": "https://github.com/rust-lang/rust/commit/09008cc23ff6395c2c928f3690e07d7389d08ebc"}], "stats": {"total": 291, "additions": 100, "deletions": 191}, "files": [{"sha": "72b48b565719c90271a57d61cd7a806fe4d5c51c", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/837d6c70233715a0ae8e15c703d40e3046a2f36a/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837d6c70233715a0ae8e15c703d40e3046a2f36a/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=837d6c70233715a0ae8e15c703d40e3046a2f36a", "patch": "@@ -91,7 +91,7 @@ macro_rules! step_impl_unsigned {\n             #[inline]\n             #[allow(unreachable_patterns)]\n             fn add_usize(&self, n: usize) -> Option<Self> {\n-                match <$t>::try_from(n) {\n+                match <$t>::private_try_from(n) {\n                     Ok(n_as_t) => self.checked_add(n_as_t),\n                     Err(_) => None,\n                 }\n@@ -123,7 +123,7 @@ macro_rules! step_impl_signed {\n             #[inline]\n             #[allow(unreachable_patterns)]\n             fn add_usize(&self, n: usize) -> Option<Self> {\n-                match <$unsigned>::try_from(n) {\n+                match <$unsigned>::private_try_from(n) {\n                     Ok(n_as_unsigned) => {\n                         // Wrapping in unsigned space handles cases like\n                         // `-120_i8.add_usize(200) == Some(80_i8)`,\n@@ -461,3 +461,73 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n \n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl<A: Step> FusedIterator for ops::RangeInclusive<A> {}\n+\n+/// Compensate removal of some impls per\n+/// https://github.com/rust-lang/rust/pull/49305#issuecomment-376293243\n+trait PrivateTryFromUsize: Sized {\n+    fn private_try_from(n: usize) -> Result<Self, ()>;\n+}\n+\n+impl<T> PrivateTryFromUsize for T where T: TryFrom<usize> {\n+    #[inline]\n+    fn private_try_from(n: usize) -> Result<Self, ()> {\n+        T::try_from(n).map_err(|_| ())\n+    }\n+}\n+\n+// no possible bounds violation\n+macro_rules! try_from_unbounded {\n+    ($($target:ty),*) => {$(\n+        impl PrivateTryFromUsize for $target {\n+            #[inline]\n+            fn private_try_from(value: usize) -> Result<Self, ()> {\n+                Ok(value as $target)\n+            }\n+        }\n+    )*}\n+}\n+\n+// unsigned to signed (only positive bound)\n+macro_rules! try_from_upper_bounded {\n+    ($($target:ty),*) => {$(\n+        impl PrivateTryFromUsize for $target {\n+            #[inline]\n+            fn private_try_from(u: usize) -> Result<$target, ()> {\n+                if u > (<$target>::max_value() as usize) {\n+                    Err(())\n+                } else {\n+                    Ok(u as $target)\n+                }\n+            }\n+        }\n+    )*}\n+}\n+\n+\n+#[cfg(target_pointer_width = \"16\")]\n+mod ptr_try_from_impls {\n+    use super::PrivateTryFromUsize;\n+\n+    try_from_unbounded!(u16, u32, u64, u128);\n+    try_from_unbounded!(i32, i64, i128);\n+}\n+\n+#[cfg(target_pointer_width = \"32\")]\n+mod ptr_try_from_impls {\n+    use super::PrivateTryFromUsize;\n+\n+    try_from_upper_bounded!(u16);\n+    try_from_unbounded!(u32, u64, u128);\n+    try_from_upper_bounded!(i32);\n+    try_from_unbounded!(i64, i128);\n+}\n+\n+#[cfg(target_pointer_width = \"64\")]\n+mod ptr_try_from_impls {\n+    use super::PrivateTryFromUsize;\n+\n+    try_from_upper_bounded!(u16, u32);\n+    try_from_unbounded!(u64, u128);\n+    try_from_upper_bounded!(i32, i64);\n+    try_from_unbounded!(i128);\n+}"}, {"sha": "ee041e1e4f1d9e82d5573a15d0d99a9181496ff6", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 10, "deletions": 60, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/837d6c70233715a0ae8e15c703d40e3046a2f36a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837d6c70233715a0ae8e15c703d40e3046a2f36a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=837d6c70233715a0ae8e15c703d40e3046a2f36a", "patch": "@@ -3676,21 +3676,6 @@ impl From<!> for TryFromIntError {\n     }\n }\n \n-// no possible bounds violation\n-macro_rules! try_from_unbounded {\n-    ($source:ty, $($target:ty),*) => {$(\n-        #[stable(feature = \"try_from\", since = \"1.26.0\")]\n-        impl TryFrom<$source> for $target {\n-            type Error = TryFromIntError;\n-\n-            #[inline]\n-            fn try_from(value: $source) -> Result<Self, Self::Error> {\n-                Ok(value as $target)\n-            }\n-        }\n-    )*}\n-}\n-\n // only negative bounds\n macro_rules! try_from_lower_bounded {\n     ($source:ty, $($target:ty),*) => {$(\n@@ -3789,79 +3774,44 @@ try_from_both_bounded!(i128, u64, u32, u16, u8);\n try_from_upper_bounded!(usize, isize);\n try_from_lower_bounded!(isize, usize);\n \n+try_from_upper_bounded!(usize, u8);\n+try_from_upper_bounded!(usize, i8, i16);\n+try_from_both_bounded!(isize, u8);\n+try_from_both_bounded!(isize, i8);\n+\n #[cfg(target_pointer_width = \"16\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n     use convert::TryFrom;\n \n-    try_from_upper_bounded!(usize, u8);\n-    try_from_unbounded!(usize, u16, u32, u64, u128);\n-    try_from_upper_bounded!(usize, i8, i16);\n-    try_from_unbounded!(usize, i32, i64, i128);\n-\n-    try_from_both_bounded!(isize, u8);\n+    // Fallible across platfoms, only implementation differs\n     try_from_lower_bounded!(isize, u16, u32, u64, u128);\n-    try_from_both_bounded!(isize, i8);\n-    try_from_unbounded!(isize, i16, i32, i64, i128);\n-\n-    rev!(try_from_upper_bounded, usize, u32, u64, u128);\n     rev!(try_from_lower_bounded, usize, i8, i16);\n     rev!(try_from_both_bounded, usize, i32, i64, i128);\n-\n-    rev!(try_from_upper_bounded, isize, u16, u32, u64, u128);\n-    rev!(try_from_both_bounded, isize, i32, i64, i128);\n }\n \n #[cfg(target_pointer_width = \"32\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n     use convert::TryFrom;\n \n-    try_from_upper_bounded!(usize, u8, u16);\n-    try_from_unbounded!(usize, u32, u64, u128);\n-    try_from_upper_bounded!(usize, i8, i16, i32);\n-    try_from_unbounded!(usize, i64, i128);\n-\n-    try_from_both_bounded!(isize, u8, u16);\n+    // Fallible across platfoms, only implementation differs\n+    try_from_both_bounded!(isize, u16);\n     try_from_lower_bounded!(isize, u32, u64, u128);\n-    try_from_both_bounded!(isize, i8, i16);\n-    try_from_unbounded!(isize, i32, i64, i128);\n-\n-    rev!(try_from_unbounded, usize, u32);\n-    rev!(try_from_upper_bounded, usize, u64, u128);\n     rev!(try_from_lower_bounded, usize, i8, i16, i32);\n     rev!(try_from_both_bounded, usize, i64, i128);\n-\n-    rev!(try_from_unbounded, isize, u16);\n-    rev!(try_from_upper_bounded, isize, u32, u64, u128);\n-    rev!(try_from_unbounded, isize, i32);\n-    rev!(try_from_both_bounded, isize, i64, i128);\n }\n \n #[cfg(target_pointer_width = \"64\")]\n mod ptr_try_from_impls {\n     use super::TryFromIntError;\n     use convert::TryFrom;\n \n-    try_from_upper_bounded!(usize, u8, u16, u32);\n-    try_from_unbounded!(usize, u64, u128);\n-    try_from_upper_bounded!(usize, i8, i16, i32, i64);\n-    try_from_unbounded!(usize, i128);\n-\n-    try_from_both_bounded!(isize, u8, u16, u32);\n+    // Fallible across platfoms, only implementation differs\n+    try_from_both_bounded!(isize, u16, u32);\n     try_from_lower_bounded!(isize, u64, u128);\n-    try_from_both_bounded!(isize, i8, i16, i32);\n-    try_from_unbounded!(isize, i64, i128);\n-\n-    rev!(try_from_unbounded, usize, u32, u64);\n-    rev!(try_from_upper_bounded, usize, u128);\n     rev!(try_from_lower_bounded, usize, i8, i16, i32, i64);\n     rev!(try_from_both_bounded, usize, i128);\n-\n-    rev!(try_from_unbounded, isize, u16, u32);\n-    rev!(try_from_upper_bounded, isize, u64, u128);\n-    rev!(try_from_unbounded, isize, i32, i64);\n-    rev!(try_from_both_bounded, isize, i128);\n }\n \n #[doc(hidden)]"}, {"sha": "c7edb55b378c36ce1208c32a96ef6b448f15c778", "filename": "src/libcore/tests/num/mod.rs", "status": "modified", "additions": 0, "deletions": 127, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/837d6c70233715a0ae8e15c703d40e3046a2f36a/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837d6c70233715a0ae8e15c703d40e3046a2f36a/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs?ref=837d6c70233715a0ae8e15c703d40e3046a2f36a", "patch": "@@ -37,15 +37,6 @@ mod flt2dec;\n mod dec2flt;\n mod bignum;\n \n-\n-/// Adds the attribute to all items in the block.\n-macro_rules! cfg_block {\n-    ($(#[$attr:meta]{$($it:item)*})*) => {$($(\n-        #[$attr]\n-        $it\n-    )*)*}\n-}\n-\n /// Groups items that assume the pointer width is either 16/32/64, and has to be altered if\n /// support for larger/smaller pointer widths are added in the future.\n macro_rules! assume_usize_width {\n@@ -318,42 +309,6 @@ assume_usize_width! {\n \n     test_impl_try_from_always_ok! { test_try_u16usize, u16, usize }\n     test_impl_try_from_always_ok! { test_try_i16isize, i16, isize }\n-\n-    test_impl_try_from_always_ok! { test_try_usizeu64, usize, u64 }\n-    test_impl_try_from_always_ok! { test_try_usizeu128, usize, u128 }\n-    test_impl_try_from_always_ok! { test_try_usizei128, usize, i128 }\n-\n-    test_impl_try_from_always_ok! { test_try_isizei64, isize, i64 }\n-    test_impl_try_from_always_ok! { test_try_isizei128, isize, i128 }\n-\n-    cfg_block!(\n-        #[cfg(target_pointer_width = \"16\")] {\n-            test_impl_try_from_always_ok! { test_try_usizeu16, usize, u16 }\n-            test_impl_try_from_always_ok! { test_try_isizei16, isize, i16 }\n-            test_impl_try_from_always_ok! { test_try_usizeu32, usize, u32 }\n-            test_impl_try_from_always_ok! { test_try_usizei32, usize, i32 }\n-            test_impl_try_from_always_ok! { test_try_isizei32, isize, i32 }\n-            test_impl_try_from_always_ok! { test_try_usizei64, usize, i64 }\n-        }\n-\n-        #[cfg(target_pointer_width = \"32\")] {\n-            test_impl_try_from_always_ok! { test_try_u16isize, u16, isize }\n-            test_impl_try_from_always_ok! { test_try_usizeu32, usize, u32 }\n-            test_impl_try_from_always_ok! { test_try_isizei32, isize, i32 }\n-            test_impl_try_from_always_ok! { test_try_u32usize, u32, usize }\n-            test_impl_try_from_always_ok! { test_try_i32isize, i32, isize }\n-            test_impl_try_from_always_ok! { test_try_usizei64, usize, i64 }\n-        }\n-\n-        #[cfg(target_pointer_width = \"64\")] {\n-            test_impl_try_from_always_ok! { test_try_u16isize, u16, isize }\n-            test_impl_try_from_always_ok! { test_try_u32usize, u32, usize }\n-            test_impl_try_from_always_ok! { test_try_u32isize, u32, isize }\n-            test_impl_try_from_always_ok! { test_try_i32isize, i32, isize }\n-            test_impl_try_from_always_ok! { test_try_u64usize, u64, usize }\n-            test_impl_try_from_always_ok! { test_try_i64isize, i64, isize }\n-        }\n-    );\n }\n \n /// Conversions where max of $source can be represented as $target,\n@@ -402,24 +357,6 @@ assume_usize_width! {\n     test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu64, isize, u64 }\n     test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu128, isize, u128 }\n     test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeusize, isize, usize }\n-\n-    cfg_block!(\n-        #[cfg(target_pointer_width = \"16\")] {\n-            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu16, isize, u16 }\n-            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu32, isize, u32 }\n-        }\n-\n-        #[cfg(target_pointer_width = \"32\")] {\n-            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_isizeu32, isize, u32 }\n-\n-            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i32usize, i32, usize }\n-        }\n-\n-        #[cfg(target_pointer_width = \"64\")] {\n-            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i32usize, i32, usize }\n-            test_impl_try_from_signed_to_unsigned_upper_ok! { test_try_i64usize, i64, usize }\n-        }\n-    );\n }\n \n /// Conversions where max of $source can not be represented as $target,\n@@ -461,29 +398,9 @@ test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u128i64, u128, i64 }\n test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u128i128, u128, i128 }\n \n assume_usize_width! {\n-    test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u64isize, u64, isize }\n-    test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u128isize, u128, isize }\n-\n     test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei8, usize, i8 }\n     test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei16, usize, i16 }\n     test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizeisize, usize, isize }\n-\n-    cfg_block!(\n-        #[cfg(target_pointer_width = \"16\")] {\n-            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u16isize, u16, isize }\n-            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u32isize, u32, isize }\n-        }\n-\n-        #[cfg(target_pointer_width = \"32\")] {\n-            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_u32isize, u32, isize }\n-            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei32, usize, i32 }\n-        }\n-\n-        #[cfg(target_pointer_width = \"64\")] {\n-            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei32, usize, i32 }\n-            test_impl_try_from_unsigned_to_signed_upper_err! { test_try_usizei64, usize, i64 }\n-        }\n-    );\n }\n \n /// Conversions where min/max of $source can not be represented as $target.\n@@ -543,34 +460,6 @@ test_impl_try_from_same_sign_err! { test_try_i128i64, i128, i64 }\n \n assume_usize_width! {\n     test_impl_try_from_same_sign_err! { test_try_usizeu8, usize, u8 }\n-    test_impl_try_from_same_sign_err! { test_try_u128usize, u128, usize }\n-    test_impl_try_from_same_sign_err! { test_try_i128isize, i128, isize }\n-\n-    cfg_block!(\n-        #[cfg(target_pointer_width = \"16\")] {\n-            test_impl_try_from_same_sign_err! { test_try_u32usize, u32, usize }\n-            test_impl_try_from_same_sign_err! { test_try_u64usize, u64, usize }\n-\n-            test_impl_try_from_same_sign_err! { test_try_i32isize, i32, isize }\n-            test_impl_try_from_same_sign_err! { test_try_i64isize, i64, isize }\n-        }\n-\n-        #[cfg(target_pointer_width = \"32\")] {\n-            test_impl_try_from_same_sign_err! { test_try_u64usize, u64, usize }\n-            test_impl_try_from_same_sign_err! { test_try_usizeu16, usize, u16 }\n-\n-            test_impl_try_from_same_sign_err! { test_try_i64isize, i64, isize }\n-            test_impl_try_from_same_sign_err! { test_try_isizei16, isize, i16 }\n-        }\n-\n-        #[cfg(target_pointer_width = \"64\")] {\n-            test_impl_try_from_same_sign_err! { test_try_usizeu16, usize, u16 }\n-            test_impl_try_from_same_sign_err! { test_try_usizeu32, usize, u32 }\n-\n-            test_impl_try_from_same_sign_err! { test_try_isizei16, isize, i16 }\n-            test_impl_try_from_same_sign_err! { test_try_isizei32, isize, i32 }\n-        }\n-    );\n }\n \n /// Conversions where neither the min nor the max of $source can be represented by\n@@ -615,22 +504,6 @@ test_impl_try_from_signed_to_unsigned_err! { test_try_i128u64, i128, u64 }\n assume_usize_width! {\n     test_impl_try_from_signed_to_unsigned_err! { test_try_isizeu8, isize, u8 }\n     test_impl_try_from_signed_to_unsigned_err! { test_try_i128usize, i128, usize }\n-\n-    cfg_block! {\n-        #[cfg(target_pointer_width = \"16\")] {\n-            test_impl_try_from_signed_to_unsigned_err! { test_try_i32usize, i32, usize }\n-            test_impl_try_from_signed_to_unsigned_err! { test_try_i64usize, i64, usize }\n-        }\n-        #[cfg(target_pointer_width = \"32\")] {\n-            test_impl_try_from_signed_to_unsigned_err! { test_try_i64usize, i64, usize }\n-\n-            test_impl_try_from_signed_to_unsigned_err! { test_try_isizeu16, isize, u16 }\n-        }\n-        #[cfg(target_pointer_width = \"64\")] {\n-            test_impl_try_from_signed_to_unsigned_err! { test_try_isizeu16, isize, u16 }\n-            test_impl_try_from_signed_to_unsigned_err! { test_try_isizeu32, isize, u32 }\n-        }\n-    }\n }\n \n macro_rules! test_float {"}, {"sha": "2673f3ccfa3abd9cff77660e554a8938b5330a0d", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/837d6c70233715a0ae8e15c703d40e3046a2f36a/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837d6c70233715a0ae8e15c703d40e3046a2f36a/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=837d6c70233715a0ae8e15c703d40e3046a2f36a", "patch": "@@ -10,7 +10,6 @@\n \n use io::prelude::*;\n \n-use core::convert::TryInto;\n use cmp;\n use io::{self, Initializer, SeekFrom, Error, ErrorKind};\n \n@@ -260,9 +259,26 @@ fn slice_write(pos_mut: &mut u64, slice: &mut [u8], buf: &[u8]) -> io::Result<us\n     Ok(amt)\n }\n \n+/// Compensate removal of some impls per\n+/// https://github.com/rust-lang/rust/pull/49305#issuecomment-376293243\n+#[cfg(any(target_pointer_width = \"16\",\n+          target_pointer_width = \"32\"))]\n+fn try_into(n: u64) -> Result<usize, ()> {\n+    if n <= (<usize>::max_value() as u64) {\n+        Ok(n as usize)\n+    } else {\n+        Err(())\n+    }\n+}\n+\n+#[cfg(any(target_pointer_width = \"64\"))]\n+fn try_into(n: u64) -> Result<usize, ()> {\n+    Ok(n as usize)\n+}\n+\n // Resizing write implementation\n fn vec_write(pos_mut: &mut u64, vec: &mut Vec<u8>, buf: &[u8]) -> io::Result<usize> {\n-    let pos: usize = (*pos_mut).try_into().map_err(|_| {\n+    let pos: usize = try_into(*pos_mut).map_err(|_| {\n         Error::new(ErrorKind::InvalidInput,\n                     \"cursor position exceeds maximum possible vector length\")\n     })?;"}]}