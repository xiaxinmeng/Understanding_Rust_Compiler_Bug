{"sha": "30185d09f627e15effbb346bcacf06a37c7299e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMTg1ZDA5ZjYyN2UxNWVmZmJiMzQ2YmNhY2YwNmEzN2M3Mjk5ZTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-15T09:21:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-15T09:40:57Z"}, "message": "make sure we show error messages even when we cannot show span", "tree": {"sha": "fda80633a2057c0cd8435750cdd9a7071cc034da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fda80633a2057c0cd8435750cdd9a7071cc034da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30185d09f627e15effbb346bcacf06a37c7299e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30185d09f627e15effbb346bcacf06a37c7299e7", "html_url": "https://github.com/rust-lang/rust/commit/30185d09f627e15effbb346bcacf06a37c7299e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30185d09f627e15effbb346bcacf06a37c7299e7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4112822a846c3b0a841df17c9183d1894b21c8e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4112822a846c3b0a841df17c9183d1894b21c8e4", "html_url": "https://github.com/rust-lang/rust/commit/4112822a846c3b0a841df17c9183d1894b21c8e4"}], "stats": {"total": 100, "additions": 51, "deletions": 49}, "files": [{"sha": "520d696405a1b890783a6f4b4907256d2a662d88", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -274,9 +274,11 @@ pub fn eval_main<'a, 'tcx: 'a>(\n                     block.terminator().source_info.span\n                 };\n \n-                let mut err = struct_error(ecx.tcx.tcx.at(span), \"constant evaluation error\");\n+                let e = e.to_string();\n+                let msg = format!(\"constant evaluation error: {}\", e);\n+                let mut err = struct_error(ecx.tcx.tcx.at(span), msg.as_str());\n                 let (frames, span) = ecx.generate_stacktrace(None);\n-                err.span_label(span, e.to_string());\n+                err.span_label(span, e);\n                 for FrameInfo { span, location, .. } in frames {\n                     err.span_note(span, &format!(\"inside call to `{}`\", location));\n                 }"}, {"sha": "a44ccf4c49cd879650243520effc32bd56bae6c9", "filename": "tests/compile-fail-fullmir/reallocate-change-alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Freallocate-change-alloc.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -9,7 +9,7 @@ fn main() {\n     unsafe {\n         let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n         let _y = Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1).unwrap();\n-        let _z = *(x.as_ptr() as *mut u8); //~ ERROR constant evaluation error [E0080]\n+        let _z = *(x.as_ptr() as *mut u8); //~ ERROR constant evaluation error\n         //~^ NOTE dangling pointer was dereferenced\n     }\n }"}, {"sha": "71161f5d6da0036360ac4d590f6b11f14d7b486b", "filename": "tests/compile-fail/alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Falignment.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     let x_ptr: *mut u8 = &mut x[0];\n     let y_ptr = x_ptr as *mut u64;\n     unsafe {\n-        *y_ptr = 42; //~ ERROR constant evaluation error [E0080]\n+        *y_ptr = 42; //~ ERROR constant evaluation error\n         //~^ NOTE tried to access memory with alignment 1, but alignment\n     }\n     panic!(\"unreachable in miri\");"}, {"sha": "d9eec480cd0c613a1df6e309619526d4c37f1afc", "filename": "tests/compile-fail/assume.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fassume.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fassume.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fassume.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     unsafe {\n         std::intrinsics::assume(x < 10);\n         std::intrinsics::assume(x > 1);\n-        std::intrinsics::assume(x > 42); //~ ERROR constant evaluation error [E0080]\n+        std::intrinsics::assume(x > 42); //~ ERROR constant evaluation error\n     //~^ NOTE `assume` argument was false\n     }\n }"}, {"sha": "c8cbc9a9184163361d933f05d563aa72ba30566d", "filename": "tests/compile-fail/bitop-beyond-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fbitop-beyond-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fbitop-beyond-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbitop-beyond-alignment.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -28,7 +28,7 @@ fn mk_rec() -> Rec {\n fn is_u64_aligned(u: &Tag<u64>) -> bool {\n     let p: usize = unsafe { mem::transmute(u) };\n     let u64_align = std::mem::align_of::<u64>();\n-    return (p & (u64_align + 1)) == 0; //~ ERROR constant evaluation error [E0080]\n+    return (p & (u64_align + 1)) == 0; //~ ERROR constant evaluation error\n     //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n }\n "}, {"sha": "2a317f579f5e035ca229ef28a9b1213979f2cff4", "filename": "tests/compile-fail/cast_box_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -7,6 +7,6 @@ fn main() {\n         std::mem::transmute::<&usize, &fn(i32)>(&b)\n     };\n \n-    (*g)(42) //~ ERROR constant evaluation error [E0080]\n+    (*g)(42) //~ ERROR constant evaluation error\n     //~^ NOTE a memory access tried to interpret some bytes as a pointer\n }"}, {"sha": "0a8f5ef752a6d48fe1b555a38e1958dd3c0c7c95", "filename": "tests/compile-fail/cast_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fcast_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fcast_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_fn_ptr.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -5,6 +5,6 @@ fn main() {\n         std::mem::transmute::<fn(), fn(i32)>(f)\n     };\n \n-    g(42) //~ ERROR constant evaluation error [E0080]\n+    g(42) //~ ERROR constant evaluation error\n     //~^ NOTE tried to call a function with sig fn() through a function pointer of type fn(i32)\n }"}, {"sha": "cb80521c60eeb8cbc88c9d19622382914b38dd3d", "filename": "tests/compile-fail/cast_fn_ptr2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fcast_fn_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fcast_fn_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_fn_ptr2.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -5,6 +5,6 @@ fn main() {\n         std::mem::transmute::<fn((i32,i32)), fn(i32)>(f)\n     };\n \n-    g(42) //~ ERROR constant evaluation error [E0080]\n+    g(42) //~ ERROR constant evaluation error\n     //~^ NOTE tried to call a function with sig fn((i32, i32)) through a function pointer of type fn(i32)\n }"}, {"sha": "29d16e9a4259a7e14d0c35ed3d68701ad4477e78", "filename": "tests/compile-fail/cast_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -6,6 +6,6 @@ fn main() {\n         std::mem::transmute::<usize, fn(i32)>(42)\n     };\n \n-    g(42) //~ ERROR constant evaluation error [E0080]\n+    g(42) //~ ERROR constant evaluation error\n     //~^ NOTE a memory access tried to interpret some bytes as a pointer\n }"}, {"sha": "167100903f4db81ce3bde422c31cdd363bcc2065", "filename": "tests/compile-fail/ctlz_nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fctlz_nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fctlz_nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fctlz_nonzero.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -10,7 +10,7 @@ pub fn main() {\n     unsafe {\n         use rusti::*;\n \n-        ctlz_nonzero(0u8); //~ ERROR constant evaluation error [E0080]\n+        ctlz_nonzero(0u8); //~ ERROR constant evaluation error\n         //~^ NOTE ctlz_nonzero called on 0\n     }\n }"}, {"sha": "7d9ac5a0212d3c119595ccd5ed6729e92b279c0e", "filename": "tests/compile-fail/cttz_nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fcttz_nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fcttz_nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcttz_nonzero.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -10,7 +10,7 @@ pub fn main() {\n     unsafe {\n         use rusti::*;\n \n-        cttz_nonzero(0u8); //~ ERROR constant evaluation error [E0080]\n+        cttz_nonzero(0u8); //~ ERROR constant evaluation error\n         //~^ NOTE cttz_nonzero called on 0\n     }\n }"}, {"sha": "434f5c780b46f0c00897109f93c6c71391750b0e", "filename": "tests/compile-fail/dangling_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -3,7 +3,7 @@ fn main() {\n         let b = Box::new(42);\n         &*b as *const i32\n     };\n-    let x = unsafe { *p }; //~ ERROR constant evaluation error [E0080]\n+    let x = unsafe { *p }; //~ ERROR constant evaluation error\n     //~^ NOTE dangling pointer was dereferenced\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "fb3aea67e821f50f57c6ef31ce88d84745b6bd28", "filename": "tests/compile-fail/deref_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fderef_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fderef_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderef_fn_ptr.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -2,7 +2,7 @@ fn f() {}\n \n fn main() {\n     let x: i32 = unsafe {\n-        *std::mem::transmute::<fn(), *const i32>(f) //~ ERROR constant evaluation error [E0080]\n+        *std::mem::transmute::<fn(), *const i32>(f) //~ ERROR constant evaluation error\n         //~^ NOTE tried to dereference a function pointer\n     };\n     panic!(\"this should never print: {}\", x);"}, {"sha": "94145c2cf32f37c7b0d5f8084a56bcca7e731719", "filename": "tests/compile-fail/div-by-zero-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdiv-by-zero-2.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -11,6 +11,6 @@\n #![allow(const_err)]\n \n fn main() {\n-    let _n = 1 / 0; //~ ERROR constant evaluation error [E0080]\n+    let _n = 1 / 0; //~ ERROR constant evaluation error\n     //~^ NOTE attempt to divide by zero\n }"}, {"sha": "bcde13d13ee773b49adf26a226e8b5d2f4cc8cf5", "filename": "tests/compile-fail/execute_memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fexecute_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fexecute_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexecute_memory.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let x = box 42;\n     unsafe {\n         let f = std::mem::transmute::<Box<i32>, fn()>(x);\n-        f() //~ ERROR constant evaluation error [E0080]\n+        f() //~ ERROR constant evaluation error\n         //~^ NOTE tried to treat a memory pointer as a function pointer\n     }\n }"}, {"sha": "0c0590e375bbca9129937d094b49f1a0afa474fe", "filename": "tests/compile-fail/fn_ptr_offset.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Ffn_ptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Ffn_ptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffn_ptr_offset.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -10,6 +10,6 @@ fn main() {\n     let y : *mut u8 = unsafe { mem::transmute(x) };\n     let y = y.wrapping_offset(1);\n     let x : fn() = unsafe { mem::transmute(y) };\n-    x(); //~ ERROR constant evaluation error [E0080]\n+    x(); //~ ERROR constant evaluation error\n     //~^ NOTE tried to use a function pointer after offsetting it\n }"}, {"sha": "1aa5d9bf77bcc603cfebfafb187e9b9eb6456408", "filename": "tests/compile-fail/invalid_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n-    if b { unreachable!() } else { unreachable!() } //~ ERROR constant evaluation error [E0080]\n+    if b { unreachable!() } else { unreachable!() } //~ ERROR constant evaluation error\n     //~^ NOTE invalid boolean value read\n }"}, {"sha": "760b6563d27cc412b22f9f6c1d821a0626be27dd", "filename": "tests/compile-fail/invalid_enum_discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -14,5 +14,5 @@ fn main() {\n         Foo::C => {},\n         Foo::D => {},\n     }\n-} //~ ERROR constant evaluation error [E0080]\n+} //~ ERROR constant evaluation error\n //~^ NOTE entered unreachable code"}, {"sha": "52f33b58e6fb6fb907afce1cb043abaad7f0e537", "filename": "tests/compile-fail/match_char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fmatch_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fmatch_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatch_char.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -2,7 +2,7 @@\n \n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());\n-    match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR constant evaluation error [E0080]\n+    match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR constant evaluation error\n         //~^ NOTE tried to interpret an invalid 32-bit value as a char: 4294967295\n         'a' => {},\n         'b' => {},"}, {"sha": "c10657ae75a77646902195e7ca5e655a0ed05a1c", "filename": "tests/compile-fail/modifying_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fmodifying_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fmodifying_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmodifying_constants.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let x = &1; // the `&1` is promoted to a constant, but it used to be that only the pointer is marked static, not the pointee\n     let y = unsafe { &mut *(x as *const i32 as *mut i32) };\n-    *y = 42;  //~ ERROR constant evaluation error [E0080]\n+    *y = 42;  //~ ERROR constant evaluation error\n     //~^ NOTE tried to modify constant memory\n     assert_eq!(*x, 42);\n }"}, {"sha": "fd76ecbd1503e564eef38733dfa7d3e8ec9cefc0", "filename": "tests/compile-fail/never_say_never.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fnever_say_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fnever_say_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_say_never.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -7,7 +7,7 @@\n fn main() {\n     let y = &5;\n     let x: ! = unsafe {\n-        *(y as *const _ as *const !)  //~ ERROR constant evaluation error [E0080]\n+        *(y as *const _ as *const !)  //~ ERROR constant evaluation error\n         //~^ NOTE entered unreachable code\n     };\n     f(x)"}, {"sha": "7652cdfdd3df55993d4c627972cfceb216c546ec", "filename": "tests/compile-fail/never_transmute_humans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_humans.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -9,7 +9,7 @@ struct Human;\n \n fn main() {\n     let x: ! = unsafe {\n-        std::mem::transmute::<Human, !>(Human) //~ ERROR constant evaluation error [E0080]\n+        std::mem::transmute::<Human, !>(Human) //~ ERROR constant evaluation error\n         //^~ NOTE entered unreachable code\n     };\n     f(x)"}, {"sha": "9329cd365994ea92a89f6f07038d3d8be400bfc4", "filename": "tests/compile-fail/never_transmute_void.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_void.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -8,7 +8,7 @@\n enum Void {}\n \n fn f(v: Void) -> ! {\n-    match v {} //~ ERROR constant evaluation error [E0080]\n+    match v {} //~ ERROR constant evaluation error\n     //~^ NOTE entered unreachable code\n }\n "}, {"sha": "f69308296bc2431d4a75197426015a53f1f4ddef", "filename": "tests/compile-fail/null_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fnull_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fnull_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_deref.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let x: i32 = unsafe { *std::ptr::null() }; //~ ERROR constant evaluation error [E0080]\n+    let x: i32 = unsafe { *std::ptr::null() }; //~ ERROR constant evaluation error\n     //~^ NOTE invalid use of NULL pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "3ccdb365feebc737b11d81ba660b7f6edd8c1f92", "filename": "tests/compile-fail/out_of_bounds_read.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR constant evaluation error [E0080]\n+    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR constant evaluation error\n     //~^ NOTE which has size 2\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "811ba7d4b26cfe37c1018605c8b4f9d83aca9323", "filename": "tests/compile-fail/out_of_bounds_read2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read2.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let v: Vec<u8> = vec![1, 2];\n-    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR constant evaluation error [E0080]\n+    let x = unsafe { *v.as_ptr().wrapping_offset(5) }; //~ ERROR constant evaluation error\n     //~^ NOTE memory access at offset 6, outside bounds of allocation\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "825a82226634910216c007766e454901d8ebb3d7", "filename": "tests/compile-fail/overflowing-lsh-neg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-lsh-neg.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -12,6 +12,6 @@\n #![allow(const_err)]\n \n fn main() {\n-    let _n = 2i64 << -1; //~ ERROR constant evaluation error [E0080]\n+    let _n = 2i64 << -1; //~ ERROR constant evaluation error\n     //~^ NOTE attempt to shift left with overflow\n }"}, {"sha": "cf107a76ae29dba95bab4a82c1d28bc4e34dd053", "filename": "tests/compile-fail/overflowing-rsh-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -12,6 +12,6 @@\n \n fn main() {\n     // Make sure we catch overflows that would be hidden by first casting the RHS to u32\n-    let _n = 1i64 >> (u32::max_value() as i64 + 1); //~ ERROR constant evaluation error [E0080]\n+    let _n = 1i64 >> (u32::max_value() as i64 + 1); //~ ERROR constant evaluation error\n     //~^ NOTE attempt to shift right with overflow\n }"}, {"sha": "ea53d7e730925e94d2e77fc1fbcab3a223421edd", "filename": "tests/compile-fail/overflowing-rsh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Foverflowing-rsh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Foverflowing-rsh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -11,6 +11,6 @@\n #![allow(exceeding_bitshifts)]\n \n fn main() {\n-    let _n = 1i64 >> 64; //~ ERROR constant evaluation error [E0080]\n+    let _n = 1i64 >> 64; //~ ERROR constant evaluation error\n     //~^ NOTE attempt to shift right with overflow\n }"}, {"sha": "7c38c05746983d07d72a9b715d55684392f9403b", "filename": "tests/compile-fail/overwriting_part_of_relocation_makes_the_rest_undefined.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -6,7 +6,7 @@ fn main() {\n         // \"attempted to interpret some raw bytes as a pointer address\" instead of\n         // \"attempted to read undefined bytes\"\n     }\n-    let x = *p; //~ ERROR constant evaluation error [E0080]\n+    let x = *p; //~ ERROR constant evaluation error\n     //~^ NOTE attempted to read undefined bytes\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "b3aaec759ce026d7bcfa7859a4093a9b14374903", "filename": "tests/compile-fail/pointer_byte_read_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -3,6 +3,6 @@ fn main() {\n     let y = &x;\n     let z = &y as *const &i32 as *const usize;\n     let ptr_bytes = unsafe { *z }; // the actual deref is fine, because we read the entire pointer at once\n-    let _ = ptr_bytes % 432; //~ ERROR constant evaluation error [E0080]\n+    let _ = ptr_bytes % 432; //~ ERROR constant evaluation error\n     //~^ NOTE tried to access part of a pointer value as raw bytes\n }"}, {"sha": "c8a1a2e10f5004fa8200f65b0bd544c29b067089", "filename": "tests/compile-fail/pointer_byte_read_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -3,6 +3,6 @@ fn main() {\n     let y = &x;\n     let z = &y as *const &i32 as *const u8;\n     // the deref fails, because we are reading only a part of the pointer\n-    let _ = unsafe { *z }; //~ ERROR constant evaluation error [E0080]\n+    let _ = unsafe { *z }; //~ ERROR constant evaluation error\n     //~^ NOTE tried to access part of a pointer value as raw bytes\n }"}, {"sha": "89cf357e201cff0675f1bb49475202040e48b26e", "filename": "tests/compile-fail/pointers_to_different_allocations_are_unorderable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let x: *const u8 = &1;\n     let y: *const u8 = &2;\n-    if x < y { //~ ERROR constant evaluation error [E0080]\n+    if x < y { //~ ERROR constant evaluation error\n     //~^ NOTE attempted to do invalid arithmetic on pointers\n         unreachable!()\n     }"}, {"sha": "ecd47a186efb14eb62dc530fb754a74a913ca509", "filename": "tests/compile-fail/ptr_bitops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fptr_bitops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fptr_bitops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_bitops.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     let bytes = [0i8, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n     let one = bytes.as_ptr().wrapping_offset(1);\n     let three = bytes.as_ptr().wrapping_offset(3);\n-    let res = (one as usize) | (three as usize); //~ ERROR constant evaluation error [E0080]\n+    let res = (one as usize) | (three as usize); //~ ERROR constant evaluation error\n     //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n     println!(\"{}\", res);\n }"}, {"sha": "11243921bfd48e5f8f615192f071a4e8c1984475", "filename": "tests/compile-fail/ptr_int_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fptr_int_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fptr_int_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_int_cast.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     let x = &1;\n     // Casting down to u8 and back up to a pointer loses too much precision; this must not work.\n     let x = x as *const i32;\n-    let x = x as u8; //~ ERROR constant evaluation error [E0080]\n+    let x = x as u8; //~ ERROR constant evaluation error\n     //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n     let x = x as *const i32;\n     let _ = unsafe { *x };"}, {"sha": "3ea693a3f0fbbf63dded626048c7635633942b0b", "filename": "tests/compile-fail/reading_half_a_pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Freading_half_a_pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Freading_half_a_pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freading_half_a_pointer.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -24,7 +24,7 @@ fn main() {\n     // starts 1 byte to the right, so using it would actually be wrong!\n     let d_alias = &mut w.data as *mut _ as *mut *const u8;\n     unsafe {\n-        let _x = *d_alias; //~ ERROR constant evaluation error [E0080]\n+        let _x = *d_alias; //~ ERROR constant evaluation error\n         //~^ NOTE tried to access part of a pointer value as raw bytes\n     }\n }"}, {"sha": "946a6b89a777a25e213b0b4f7292ba68cfde4137", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -15,6 +15,6 @@ fn main() {\n         y: 99,\n     };\n     let p = unsafe { &foo.x };\n-    let i = *p; //~ ERROR constant evaluation error [E0080]\n+    let i = *p; //~ ERROR constant evaluation error\n     //~^ NOTE tried to access memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "e28bcb37fb72d3637c52dadeca3b9ac057388f51", "filename": "tests/compile-fail/static_memory_modification.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fstatic_memory_modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fstatic_memory_modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -4,7 +4,7 @@ static X: usize = 5;\n #[allow(mutable_transmutes)]\n fn main() {\n     unsafe {\n-        *std::mem::transmute::<&usize, &mut usize>(&X) = 6; //~ ERROR constant evaluation error [E0080]\n+        *std::mem::transmute::<&usize, &mut usize>(&X) = 6; //~ ERROR constant evaluation error\n         //~^ NOTE tried to modify constant memory\n         assert_eq!(X, 6);\n     }"}, {"sha": "2f702f09c8047e736ee5cf10dcd97e03be72567d", "filename": "tests/compile-fail/static_memory_modification2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification2.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -7,7 +7,7 @@ use std::mem::transmute;\n fn main() {\n     unsafe {\n         let s = \"this is a test\";\n-        transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42; //~ ERROR constant evaluation error [E0080]\n+        transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42; //~ ERROR constant evaluation error\n         //~^ NOTE tried to modify constant memory\n     }\n }"}, {"sha": "37d8bfe02ceb2bc8be2d954c65063fad0f7eaa38", "filename": "tests/compile-fail/static_memory_modification3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification3.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -4,7 +4,7 @@ use std::mem::transmute;\n fn main() {\n     unsafe {\n         let bs = b\"this is a test\";\n-        transmute::<&[u8], &mut [u8]>(bs)[4] = 42; //~ ERROR constant evaluation error [E0080]\n+        transmute::<&[u8], &mut [u8]>(bs)[4] = 42; //~ ERROR constant evaluation error\n         //~^ NOTE tried to modify constant memory\n     }\n }"}, {"sha": "9509bb60e8b112126f7b820684b7c7bbbc6131a1", "filename": "tests/compile-fail/transmute-pair-undef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute-pair-undef.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -16,6 +16,6 @@ fn main() {\n         assert_eq!(byte, 0);\n     }\n     let v = unsafe { *z.offset(first_undef) };\n-    if v == 0 {} //~ ERROR constant evaluation error [E0080]\n+    if v == 0 {} //~ ERROR constant evaluation error\n     //~^ NOTE attempted to read undefined bytes\n }"}, {"sha": "dad5f4df2da3cd467454eca295ec6fee2249ef03", "filename": "tests/compile-fail/transmute_fat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Ftransmute_fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Ftransmute_fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -10,6 +10,6 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<&[u8], u64>(&[1u8])\n     };\n-    let _ = bad + 1; //~ ERROR constant evaluation error [E0080]\n+    let _ = bad + 1; //~ ERROR constant evaluation error\n     //~^ NOTE a raw memory access tried to access part of a pointer value as raw bytes\n }"}, {"sha": "e9e21a84294dc5795d8dc6f776b1e6d87ff8e53a", "filename": "tests/compile-fail/transmute_fat2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Ftransmute_fat2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Ftransmute_fat2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat2.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -7,6 +7,6 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<u64, &[u8]>(42)\n     };\n-    bad[0]; //~ ERROR constant evaluation error [E0080]\n+    bad[0]; //~ ERROR constant evaluation error\n     //~^ NOTE index out of bounds: the len is 0 but the index is 0\n }"}, {"sha": "f91def30d120582de6fa0e69b15d05b2e5586690", "filename": "tests/compile-fail/unaligned_ptr_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -2,6 +2,6 @@ fn main() {\n     let x = &2u16;\n     let x = x as *const _ as *const u32;\n     // This must fail because alignment is violated\n-    let _x = unsafe { *x }; //~ ERROR constant evaluation error [E0080]\n+    let _x = unsafe { *x }; //~ ERROR constant evaluation error\n     //~^ NOTE tried to access memory with alignment 2, but alignment 4 is required\n }"}, {"sha": "f87dab76ba30084d5de534a34c22aafb7582e5f7", "filename": "tests/compile-fail/unaligned_ptr_cast2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast2.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -3,6 +3,6 @@ fn main() {\n     let x = x as *const _ as *const *const u8;\n     // This must fail because alignment is violated.  Test specifically for loading pointers, which have special code\n     // in miri's memory.\n-    let _x = unsafe { *x }; //~ ERROR constant evaluation error [E0080]\n+    let _x = unsafe { *x }; //~ ERROR constant evaluation error\n     //~^ NOTE tried to access memory with alignment 2, but alignment\n }"}, {"sha": "45016473c97528e060c20806f27c7d327ffb35e0", "filename": "tests/compile-fail/unaligned_ptr_cast_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_ptr_cast_zst.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -2,6 +2,6 @@ fn main() {\n     let x = &2u16;\n     let x = x as *const _ as *const [u32; 0];\n     // This must fail because alignment is violated.  Test specifically for loading ZST.\n-    let _x = unsafe { *x }; //~ ERROR constant evaluation error [E0080]\n+    let _x = unsafe { *x }; //~ ERROR constant evaluation error\n     //~^ NOTE tried to access memory with alignment 2, but alignment 4 is required\n }"}, {"sha": "4096cfb93e722cb25859cae874dc5d6396c5b7ae", "filename": "tests/compile-fail/wild_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwild_pointer_deref.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let p = 44 as *const i32;\n-    let x = unsafe { *p }; //~ ERROR constant evaluation error [E0080]\n+    let x = unsafe { *p }; //~ ERROR constant evaluation error\n     //~^ NOTE a memory access tried to interpret some bytes as a pointer\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "efb2dafd36fc58e5f50df098359e0f9edab855d4", "filename": "tests/compile-fail/zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30185d09f627e15effbb346bcacf06a37c7299e7/tests%2Fcompile-fail%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzst.rs?ref=30185d09f627e15effbb346bcacf06a37c7299e7", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let x = &() as *const () as *const i32;\n-    let _ = unsafe { *x }; //~ ERROR constant evaluation error [E0080]\n+    let _ = unsafe { *x }; //~ ERROR constant evaluation error\n     //~^ NOTE tried to access memory with alignment 1, but alignment 4 is required\n }"}]}