{"sha": "6c2f64bdd8213012562f56e8fc393d99803e1c27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMmY2NGJkZDgyMTMwMTI1NjJmNTZlOGZjMzkzZDk5ODAzZTFjMjc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-29T11:05:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-04-30T21:03:32Z"}, "message": "modify `ExprUseVisitor` and friends to take region-maps, not def-id", "tree": {"sha": "b4b547a3df1f60fe23b014801298152db270b4a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4b547a3df1f60fe23b014801298152db270b4a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c2f64bdd8213012562f56e8fc393d99803e1c27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c2f64bdd8213012562f56e8fc393d99803e1c27", "html_url": "https://github.com/rust-lang/rust/commit/6c2f64bdd8213012562f56e8fc393d99803e1c27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c2f64bdd8213012562f56e8fc393d99803e1c27/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73cd9bde373cc134aa2ebb6a8064d532621ca0a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/73cd9bde373cc134aa2ebb6a8064d532621ca0a6", "html_url": "https://github.com/rust-lang/rust/commit/73cd9bde373cc134aa2ebb6a8064d532621ca0a6"}], "stats": {"total": 57, "additions": 30, "deletions": 27}, "files": [{"sha": "41f9311dd809bf5bf09c5b9590763776c5a2cd09", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6c2f64bdd8213012562f56e8fc393d99803e1c27/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2f64bdd8213012562f56e8fc393d99803e1c27/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=6c2f64bdd8213012562f56e8fc393d99803e1c27", "patch": "@@ -23,6 +23,7 @@ use hir::def::Def;\n use hir::def_id::{DefId};\n use infer::InferCtxt;\n use middle::mem_categorization as mc;\n+use middle::region::RegionMaps;\n use ty::{self, TyCtxt, adjustment};\n \n use hir::{self, PatKind};\n@@ -270,24 +271,24 @@ enum PassArgs {\n \n impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n     pub fn new(delegate: &'a mut (Delegate<'tcx>+'a),\n-               context: DefId,\n+               region_maps: &'a RegionMaps<'tcx>,\n                infcx: &'a InferCtxt<'a, 'gcx, 'tcx>)\n                -> Self\n     {\n         ExprUseVisitor::with_options(delegate,\n                                      infcx,\n-                                     context,\n+                                     region_maps,\n                                      mc::MemCategorizationOptions::default())\n     }\n \n     pub fn with_options(delegate: &'a mut (Delegate<'tcx>+'a),\n                         infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-                        context: DefId,\n+                        region_maps: &'a RegionMaps<'tcx>,\n                         options: mc::MemCategorizationOptions)\n                -> Self\n     {\n         ExprUseVisitor {\n-            mc: mc::MemCategorizationContext::with_options(infcx, context, options),\n+            mc: mc::MemCategorizationContext::with_options(infcx, region_maps, options),\n             delegate: delegate\n         }\n     }"}, {"sha": "cbe69de4010322404032be88775a12510d6bf924", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6c2f64bdd8213012562f56e8fc393d99803e1c27/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2f64bdd8213012562f56e8fc393d99803e1c27/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=6c2f64bdd8213012562f56e8fc393d99803e1c27", "patch": "@@ -290,7 +290,7 @@ impl ast_node for hir::Pat {\n #[derive(Clone)]\n pub struct MemCategorizationContext<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     pub infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-    pub region_maps: Rc<RegionMaps<'tcx>>,\n+    pub region_maps: &'a RegionMaps<'tcx>,\n     options: MemCategorizationOptions,\n }\n \n@@ -406,16 +406,15 @@ impl MutabilityCategory {\n impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n     /// Context should be the `DefId` we use to fetch region-maps.\n     pub fn new(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-               context: DefId)\n+               region_maps: &'a RegionMaps<'tcx>)\n                -> MemCategorizationContext<'a, 'gcx, 'tcx> {\n-        MemCategorizationContext::with_options(infcx, context, MemCategorizationOptions::default())\n+        MemCategorizationContext::with_options(infcx, region_maps, MemCategorizationOptions::default())\n     }\n \n     pub fn with_options(infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-                        context: DefId,\n+                        region_maps: &'a RegionMaps<'tcx>,\n                         options: MemCategorizationOptions)\n                         -> MemCategorizationContext<'a, 'gcx, 'tcx> {\n-        let region_maps = infcx.tcx.region_maps(context);\n         MemCategorizationContext {\n             infcx: infcx,\n             region_maps: region_maps,"}, {"sha": "1c5a6c3985cfc43f92b1b06b9f33c0b6813317b2", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c2f64bdd8213012562f56e8fc393d99803e1c27/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2f64bdd8213012562f56e8fc393d99803e1c27/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=6c2f64bdd8213012562f56e8fc393d99803e1c27", "patch": "@@ -199,7 +199,7 @@ pub fn check_loans<'a, 'b, 'c, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         all_loans: all_loans,\n         param_env: &infcx.parameter_environment\n     };\n-    euv::ExprUseVisitor::new(&mut clcx, bccx.owner_def_id, &infcx).consume_body(body);\n+    euv::ExprUseVisitor::new(&mut clcx, &bccx.region_maps, &infcx).consume_body(body);\n }\n \n #[derive(PartialEq)]"}, {"sha": "8c1bcdc1fe2b0f4cdefcfcdcedcf4ae2bc7da21b", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c2f64bdd8213012562f56e8fc393d99803e1c27/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2f64bdd8213012562f56e8fc393d99803e1c27/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=6c2f64bdd8213012562f56e8fc393d99803e1c27", "patch": "@@ -51,7 +51,7 @@ pub fn gather_loans_in_fn<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     };\n \n     let body = glcx.bccx.tcx.hir.body(body);\n-    euv::ExprUseVisitor::new(&mut glcx, bccx.owner_def_id, &infcx).consume_body(body);\n+    euv::ExprUseVisitor::new(&mut glcx, &bccx.region_maps, &infcx).consume_body(body);\n \n     glcx.report_potential_errors();\n     let GatherLoanCtxt { all_loans, move_data, .. } = glcx;"}, {"sha": "6ec5f38aa5bb529c94ac7d9edc7ba133e68c3b35", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6c2f64bdd8213012562f56e8fc393d99803e1c27/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2f64bdd8213012562f56e8fc393d99803e1c27/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=6c2f64bdd8213012562f56e8fc393d99803e1c27", "patch": "@@ -14,11 +14,11 @@ use _match::WitnessPreference::*;\n \n use pattern::{Pattern, PatternContext, PatternError, PatternKind};\n \n-use rustc::hir::def_id::DefId;\n use rustc::middle::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor};\n use rustc::middle::expr_use_visitor::{LoanCause, MutateMode};\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization::{cmt};\n+use rustc::middle::region::RegionMaps;\n use rustc::session::Session;\n use rustc::traits::Reveal;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -47,11 +47,12 @@ impl<'a, 'tcx> Visitor<'tcx> for OuterVisitor<'a, 'tcx> {\n         intravisit::walk_fn(self, fk, fd, b, s, id);\n \n         let region_context = self.tcx.hir.local_def_id(id);\n+        let region_maps = self.tcx.region_maps(region_context);\n \n         MatchVisitor {\n             tcx: self.tcx,\n             tables: self.tcx.body_tables(b),\n-            region_context: region_context,\n+            region_maps: &region_maps,\n             param_env: &ty::ParameterEnvironment::for_item(self.tcx, id)\n         }.visit_body(self.tcx.hir.body(b));\n     }\n@@ -68,9 +69,9 @@ fn create_e0004<'a>(sess: &'a Session, sp: Span, error_message: String) -> Diagn\n \n struct MatchVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    region_context: DefId,\n     tables: &'a ty::TypeckTables<'tcx>,\n-    param_env: &'a ty::ParameterEnvironment<'tcx>\n+    param_env: &'a ty::ParameterEnvironment<'tcx>,\n+    region_maps: &'a RegionMaps<'tcx>,\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MatchVisitor<'a, 'tcx> {\n@@ -522,7 +523,7 @@ fn check_for_mutation_in_guard(cx: &MatchVisitor, guard: &hir::Expr) {\n         let mut checker = MutationChecker {\n             cx: cx,\n         };\n-        ExprUseVisitor::new(&mut checker, cx.region_context, &infcx).walk_expr(guard);\n+        ExprUseVisitor::new(&mut checker, cx.region_maps, &infcx).walk_expr(guard);\n     });\n }\n "}, {"sha": "47ea144dcde64d553a076ec1abfa6c8d2b71719f", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c2f64bdd8213012562f56e8fc393d99803e1c27/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2f64bdd8213012562f56e8fc393d99803e1c27/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=6c2f64bdd8213012562f56e8fc393d99803e1c27", "patch": "@@ -141,7 +141,8 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckCrateVisitor<'a, 'tcx> {\n         let outer_penv = self.tcx.infer_ctxt(body_id, Reveal::UserFacing).enter(|infcx| {\n             let param_env = infcx.parameter_environment.clone();\n             let outer_penv = mem::replace(&mut self.param_env, param_env);\n-            euv::ExprUseVisitor::new(self, item_def_id, &infcx).consume_body(body);\n+            let region_maps = &self.tcx.region_maps(item_def_id);;\n+            euv::ExprUseVisitor::new(self, region_maps, &infcx).consume_body(body);\n             outer_penv\n         });\n "}, {"sha": "8a63d501da8c36d5abec986429a810b40b626206", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6c2f64bdd8213012562f56e8fc393d99803e1c27/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2f64bdd8213012562f56e8fc393d99803e1c27/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=6c2f64bdd8213012562f56e8fc393d99803e1c27", "patch": "@@ -577,7 +577,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for RegionCtxt<'a, 'gcx, 'tcx> {\n             // If necessary, constrain destructors in the unadjusted form of this\n             // expression.\n             let cmt_result = {\n-                let mc = mc::MemCategorizationContext::new(self, self.subject_def_id);\n+                let mc = mc::MemCategorizationContext::new(self, &self.region_maps);\n                 mc.cat_expr_unadjusted(expr)\n             };\n             match cmt_result {\n@@ -594,7 +594,7 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for RegionCtxt<'a, 'gcx, 'tcx> {\n         // If necessary, constrain destructors in this expression. This will be\n         // the adjusted form if there is an adjustment.\n         let cmt_result = {\n-            let mc = mc::MemCategorizationContext::new(self, self.subject_def_id);\n+            let mc = mc::MemCategorizationContext::new(self, &self.region_maps);\n             mc.cat_expr(expr)\n         };\n         match cmt_result {\n@@ -956,7 +956,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                            r, m);\n \n                     {\n-                        let mc = mc::MemCategorizationContext::new(self, self.subject_def_id);\n+                        let mc = mc::MemCategorizationContext::new(self, &self.region_maps);\n                         let self_cmt = ignore_err!(mc.cat_expr_autoderefd(deref_expr, i));\n                         debug!(\"constrain_autoderefs: self_cmt={:?}\",\n                                self_cmt);\n@@ -1068,7 +1068,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n         debug!(\"link_addr_of(expr={:?}, base={:?})\", expr, base);\n \n         let cmt = {\n-            let mc = mc::MemCategorizationContext::new(self, self.subject_def_id);\n+            let mc = mc::MemCategorizationContext::new(self, &self.region_maps);\n             ignore_err!(mc.cat_expr(base))\n         };\n \n@@ -1086,7 +1086,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n             None => { return; }\n             Some(ref expr) => &**expr,\n         };\n-        let mc = &mc::MemCategorizationContext::new(self, self.subject_def_id);\n+        let mc = &mc::MemCategorizationContext::new(self, &self.region_maps);\n         let discr_cmt = ignore_err!(mc.cat_expr(init_expr));\n         self.link_pattern(mc, discr_cmt, &local.pat);\n     }\n@@ -1096,7 +1096,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n     /// linked to the lifetime of its guarantor (if any).\n     fn link_match(&self, discr: &hir::Expr, arms: &[hir::Arm]) {\n         debug!(\"regionck::for_match()\");\n-        let mc = &mc::MemCategorizationContext::new(self, self.subject_def_id);\n+        let mc = &mc::MemCategorizationContext::new(self, &self.region_maps);\n         let discr_cmt = ignore_err!(mc.cat_expr(discr));\n         debug!(\"discr_cmt={:?}\", discr_cmt);\n         for arm in arms {\n@@ -1111,7 +1111,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n     /// linked to the lifetime of its guarantor (if any).\n     fn link_fn_args(&self, body_scope: CodeExtent<'tcx>, args: &[hir::Arg]) {\n         debug!(\"regionck::link_fn_args(body_scope={:?})\", body_scope);\n-        let mc = &mc::MemCategorizationContext::new(self, self.subject_def_id);\n+        let mc = &mc::MemCategorizationContext::new(self, &self.region_maps);\n         for arg in args {\n             let arg_ty = self.node_ty(arg.id);\n             let re_scope = self.tcx.mk_region(ty::ReScope(body_scope));\n@@ -1154,7 +1154,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                     autoref: &adjustment::AutoBorrow<'tcx>)\n     {\n         debug!(\"link_autoref(autoderefs={}, autoref={:?})\", autoderefs, autoref);\n-        let mc = mc::MemCategorizationContext::new(self, self.subject_def_id);\n+        let mc = mc::MemCategorizationContext::new(self, &self.region_maps);\n         let expr_cmt = ignore_err!(mc.cat_expr_autoderefd(expr, autoderefs));\n         debug!(\"expr_cmt={:?}\", expr_cmt);\n \n@@ -1178,7 +1178,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                    callee_scope: CodeExtent<'tcx>) {\n         debug!(\"link_by_ref(expr={:?}, callee_scope={:?})\",\n                expr, callee_scope);\n-        let mc = mc::MemCategorizationContext::new(self, self.subject_def_id);\n+        let mc = mc::MemCategorizationContext::new(self, &self.region_maps);\n         let expr_cmt = ignore_err!(mc.cat_expr(expr));\n         let borrow_region = self.tcx.mk_region(ty::ReScope(callee_scope));\n         self.link_region(expr.span, borrow_region, ty::ImmBorrow, expr_cmt);"}, {"sha": "9bfc5f3f0ea54124091d529c92f4238cb4df3fbb", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6c2f64bdd8213012562f56e8fc393d99803e1c27/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c2f64bdd8213012562f56e8fc393d99803e1c27/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=6c2f64bdd8213012562f56e8fc393d99803e1c27", "patch": "@@ -165,10 +165,11 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n \n         {\n             let body_owner_def_id = self.fcx.tcx.hir.body_owner_def_id(body.id());\n+            let region_maps = &self.fcx.tcx.region_maps(body_owner_def_id);\n             let mut euv =\n                 euv::ExprUseVisitor::with_options(self,\n                                                   self.fcx,\n-                                                  body_owner_def_id,\n+                                                  region_maps,\n                                                   mc::MemCategorizationOptions {\n                                                       during_closure_kind_inference: true\n                                                   });"}]}