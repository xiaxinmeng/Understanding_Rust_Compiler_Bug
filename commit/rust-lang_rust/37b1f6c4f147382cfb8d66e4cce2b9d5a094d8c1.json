{"sha": "37b1f6c4f147382cfb8d66e4cce2b9d5a094d8c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YjFmNmM0ZjE0NzM4MmNmYjhkNjZlNGNjZTJiOWQ1YTA5NGQ4YzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-07T10:09:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-07T10:09:11Z"}, "message": "Auto merge of #42482 - eddyb:issue-42467, r=nikomatsakis\n\nrustc: T: 'empty always holds for all types.\n\nFixes #42467 by special-casing `ReEmpty` to always hold, even for parameters.\nThe reason this is the case is that `ReEmpty` is the result of inferring a region variable with no constraints attached to it, so there is no lifetime a type would contain which would be strictly shorter.\n\nr? @nikomatsakis", "tree": {"sha": "96fa8f2179e8c2d0ed768f9f8dde7dc07caaacd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96fa8f2179e8c2d0ed768f9f8dde7dc07caaacd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37b1f6c4f147382cfb8d66e4cce2b9d5a094d8c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37b1f6c4f147382cfb8d66e4cce2b9d5a094d8c1", "html_url": "https://github.com/rust-lang/rust/commit/37b1f6c4f147382cfb8d66e4cce2b9d5a094d8c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37b1f6c4f147382cfb8d66e4cce2b9d5a094d8c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89fceaa5b09792efb1ef3ab872f6e351f351f0f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/89fceaa5b09792efb1ef3ab872f6e351f351f0f2", "html_url": "https://github.com/rust-lang/rust/commit/89fceaa5b09792efb1ef3ab872f6e351f351f0f2"}, {"sha": "ec7195f31f420384bad0c1978a54b1e9e4d8f4c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7195f31f420384bad0c1978a54b1e9e4d8f4c0", "html_url": "https://github.com/rust-lang/rust/commit/ec7195f31f420384bad0c1978a54b1e9e4d8f4c0"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "6f88b97334cefd4dd8cbcad5ea842887b9f4131f", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37b1f6c4f147382cfb8d66e4cce2b9d5a094d8c1/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b1f6c4f147382cfb8d66e4cce2b9d5a094d8c1/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=37b1f6c4f147382cfb8d66e4cce2b9d5a094d8c1", "patch": "@@ -1201,6 +1201,13 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n         for verify in self.verifys.borrow().iter() {\n             debug!(\"collect_errors: verify={:?}\", verify);\n             let sub = normalize(self.tcx, var_data, verify.region);\n+\n+            // This was an inference variable which didn't get\n+            // constrained, therefore it can be assume to hold.\n+            if let ty::ReEmpty = *sub {\n+                continue;\n+            }\n+\n             if verify.bound.is_met(region_rels, var_data, sub) {\n                 continue;\n             }"}, {"sha": "1b2ee959b2defe1b6786ce594cf91a3487c2a147", "filename": "src/test/run-pass/issue-42467.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/37b1f6c4f147382cfb8d66e4cce2b9d5a094d8c1/src%2Ftest%2Frun-pass%2Fissue-42467.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b1f6c4f147382cfb8d66e4cce2b9d5a094d8c1/src%2Ftest%2Frun-pass%2Fissue-42467.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-42467.rs?ref=37b1f6c4f147382cfb8d66e4cce2b9d5a094d8c1", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo<T>(T);\n+\n+struct IntoIter<T>(T);\n+\n+impl<'a, T: 'a> Iterator for IntoIter<T> {\n+    type Item = ();\n+\n+    fn next(&mut self) -> Option<()> {\n+        None\n+    }\n+}\n+\n+impl<T> IntoIterator for Foo<T> {\n+    type Item = ();\n+    type IntoIter = IntoIter<T>;\n+\n+    fn into_iter(self) -> IntoIter<T> {\n+        IntoIter(self.0)\n+    }\n+}\n+\n+fn main() {}"}]}