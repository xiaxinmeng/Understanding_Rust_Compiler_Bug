{"sha": "348e434cee42cc2be0a4f5a6e6df8709d3490ff5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0OGU0MzRjZWU0MmNjMmJlMGE0ZjVhNmU2ZGY4NzA5ZDM0OTBmZjU=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-07-16T18:17:25Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-07-16T18:17:25Z"}, "message": "Clean up nomenclature in the Abi constants brigade.  Purge magic GEP numbers in trans.  Adjust obj_closure_rty (and its consumers) to be more explicit about the fact that it is a box.", "tree": {"sha": "c85dc5a5a139ca3950d93b160de42a71f41e0a40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c85dc5a5a139ca3950d93b160de42a71f41e0a40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/348e434cee42cc2be0a4f5a6e6df8709d3490ff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/348e434cee42cc2be0a4f5a6e6df8709d3490ff5", "html_url": "https://github.com/rust-lang/rust/commit/348e434cee42cc2be0a4f5a6e6df8709d3490ff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/348e434cee42cc2be0a4f5a6e6df8709d3490ff5/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de8a7dc7dc9dc0188a18c11511188c258bab6d99", "url": "https://api.github.com/repos/rust-lang/rust/commits/de8a7dc7dc9dc0188a18c11511188c258bab6d99", "html_url": "https://github.com/rust-lang/rust/commit/de8a7dc7dc9dc0188a18c11511188c258bab6d99"}], "stats": {"total": 193, "additions": 118, "deletions": 75}, "files": [{"sha": "3de553f245d0b015b6efe11e79ba726b134e77f6", "filename": "src/boot/be/abi.ml", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/348e434cee42cc2be0a4f5a6e6df8709d3490ff5/src%2Fboot%2Fbe%2Fabi.ml", "raw_url": "https://github.com/rust-lang/rust/raw/348e434cee42cc2be0a4f5a6e6df8709d3490ff5/src%2Fboot%2Fbe%2Fabi.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fabi.ml?ref=348e434cee42cc2be0a4f5a6e6df8709d3490ff5", "patch": "@@ -26,15 +26,15 @@ let frame_glue_fns_field_mark = 0;;\n let frame_glue_fns_field_drop = 1;;\n let frame_glue_fns_field_reloc = 2;;\n \n-let box_rc_slot_field_refcnt = 0;;\n-let box_rc_slot_field_body = 1;;\n+let box_rc_field_refcnt = 0;;\n+let box_rc_field_body = 1;;\n \n-let box_gc_slot_alloc_base = (-3);;\n-let box_gc_slot_field_prev = (-3);;\n-let box_gc_slot_field_next = (-2);;\n-let box_gc_slot_field_ctrl = (-1);;\n-let box_gc_slot_field_refcnt = 0;;\n-let box_gc_slot_field_body = 1;;\n+let box_gc_alloc_base = (-3);;\n+let box_gc_field_prev = (-3);;\n+let box_gc_field_next = (-2);;\n+let box_gc_field_ctrl = (-1);;\n+let box_gc_field_refcnt = 0;;\n+let box_gc_field_body = 1;;\n \n let box_rc_header_size = 1;;\n let box_gc_header_size = 4;;\n@@ -45,13 +45,21 @@ let stk_field_valgrind_id = 0 + 1;;\n let stk_field_limit = stk_field_valgrind_id + 1;;\n let stk_field_data = stk_field_limit + 1;;\n \n-let binding_size = 2;;\n-let binding_field_item = 0;;\n-let binding_field_binding = 1;;\n+let obj_elt_vtbl = 0;;\n+let obj_elt_body_box = 1;;\n \n-let obj_elt_rc = 0;;\n-let obj_elt_tydesc = 1;;\n-let obj_elt_fields = 2;;\n+let obj_body_elt_tydesc = 0;;\n+let obj_body_elt_fields = 1;;\n+\n+let fn_elt_thunk = 0;;\n+let fn_elt_closure = 1;;\n+\n+let closure_elt_rc = 0;;\n+let closure_elt_target = 1;;\n+let closure_elt_bound_args = 2;;\n+\n+let tag_elt_discriminant = 0;;\n+let tag_elt_variant = 1;;\n \n let general_code_alignment = 16;;\n "}, {"sha": "d5541eb1f82aaeb26a4273541de02446fea8b991", "filename": "src/boot/be/x86.ml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/348e434cee42cc2be0a4f5a6e6df8709d3490ff5/src%2Fboot%2Fbe%2Fx86.ml", "raw_url": "https://github.com/rust-lang/rust/raw/348e434cee42cc2be0a4f5a6e6df8709d3490ff5/src%2Fboot%2Fbe%2Fx86.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fx86.ml?ref=348e434cee42cc2be0a4f5a6e6df8709d3490ff5", "patch": "@@ -830,7 +830,7 @@ let sweep_gc_chain\n     emit (Il.jmp Il.JE\n             (codefix exit_jmp_fix));            (* if nonzero             *)\n     mov (rc ecx)                                (* Load GC ctrl word      *)\n-      (c (edi_n Abi.box_gc_slot_field_ctrl));\n+      (c (edi_n Abi.box_gc_field_ctrl));\n     mov (rc eax) (ro ecx);\n     band (rc eax) (immi 1L);                    (* Extract mark to eax.   *)\n     band                                        (* Clear mark in ecx.     *)\n@@ -840,7 +840,7 @@ let sweep_gc_chain\n     if clear_mark\n     then\n       mov                                       (* Write-back cleared.    *)\n-        ((edi_n Abi.box_gc_slot_field_ctrl))\n+        ((edi_n Abi.box_gc_field_ctrl))\n         (ro ecx);\n \n     emit (Il.cmp (ro eax) (immi 0L));\n@@ -872,7 +872,7 @@ let sweep_gc_chain\n \n     mark skip_jmp_fix;\n     mov (rc edi)                                (* Advance down chain     *)\n-      (c (edi_n Abi.box_gc_slot_field_next));\n+      (c (edi_n Abi.box_gc_field_next));\n     emit (Il.jmp Il.JMP\n             (codefix repeat_jmp_fix));          (* loop                   *)\n     mark exit_jmp_fix;"}, {"sha": "0b780e5e272bd100361e8c671c5dc956d1bc4565", "filename": "src/boot/llvm/lltrans.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/348e434cee42cc2be0a4f5a6e6df8709d3490ff5/src%2Fboot%2Fllvm%2Flltrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/348e434cee42cc2be0a4f5a6e6df8709d3490ff5/src%2Fboot%2Fllvm%2Flltrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fllvm%2Flltrans.ml?ref=348e434cee42cc2be0a4f5a6e6df8709d3490ff5", "patch": "@@ -453,15 +453,15 @@ let trans_crate\n                 llbuilder :=\n                   if_ptr_in_slot_not_null\n                     (decr_refcnt_and_if_zero\n-                       Abi.box_rc_slot_field_refcnt\n+                       Abi.box_rc_field_refcnt\n                        free_and_null_out_slot)\n                     (!llbuilder)\n \n             | MEM_rc_opaque ->\n                 llbuilder :=\n                   if_ptr_in_slot_not_null\n                     (decr_refcnt_and_if_zero\n-                       Abi.box_rc_slot_field_refcnt\n+                       Abi.box_rc_field_refcnt\n                        free_and_null_out_slot)\n                     (!llbuilder)\n "}, {"sha": "3aaa1f2f61dcbe435717393afa65825323772a10", "filename": "src/boot/me/dwarf.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/348e434cee42cc2be0a4f5a6e6df8709d3490ff5/src%2Fboot%2Fme%2Fdwarf.ml", "raw_url": "https://github.com/rust-lang/rust/raw/348e434cee42cc2be0a4f5a6e6df8709d3490ff5/src%2Fboot%2Fme%2Fdwarf.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdwarf.ml?ref=348e434cee42cc2be0a4f5a6e6df8709d3490ff5", "patch": "@@ -2019,7 +2019,7 @@ let dwarf_visitor\n       let box_type t =\n         let fix = new_fixup \"box DIE\" in\n         let body_off =\n-          word_sz_int * Abi.box_rc_slot_field_body\n+          word_sz_int * Abi.box_rc_field_body\n         in\n           emit_die (DEF (fix, SEQ [|\n                            uleb (get_abbrev_code abbrev_box_type);"}, {"sha": "49aa1340eee1daf93639c31bf7590a1fecd0792b", "filename": "src/boot/me/layout.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/348e434cee42cc2be0a4f5a6e6df8709d3490ff5/src%2Fboot%2Fme%2Flayout.ml", "raw_url": "https://github.com/rust-lang/rust/raw/348e434cee42cc2be0a4f5a6e6df8709d3490ff5/src%2Fboot%2Fme%2Flayout.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Flayout.ml?ref=348e434cee42cc2be0a4f5a6e6df8709d3490ff5", "patch": "@@ -222,7 +222,7 @@ let layout_visitor\n     let offset =\n       let word_sz = cx.ctxt_abi.Abi.abi_word_sz in\n       let word_n (n:int) = Int64.mul word_sz (Int64.of_int n) in\n-        SIZE_fixed (word_n (Abi.box_rc_slot_field_body\n+        SIZE_fixed (word_n (Abi.box_rc_field_body\n                             + 1 (* the state tydesc. *)))\n     in\n       log cx \"laying out object-state for node #%d at offset %s\""}, {"sha": "789a236060d7e70be0e96b396f12c56ba3ab7e20", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/348e434cee42cc2be0a4f5a6e6df8709d3490ff5/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/348e434cee42cc2be0a4f5a6e6df8709d3490ff5/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=348e434cee42cc2be0a4f5a6e6df8709d3490ff5", "patch": "@@ -1894,11 +1894,14 @@ let tydesc_rty (abi:Abi.abi) : Il.referent_ty =\n ;;\n \n let obj_closure_rty (abi:Abi.abi) : Il.referent_ty =\n-  Il.StructTy [| word_rty abi;\n-                 Il.ScalarTy (Il.AddrTy (tydesc_rty abi));\n-                 word_rty abi (* A lie: it's opaque, but this permits\n-                               * GEP'ing to it. *)\n-              |]\n+  Il.StructTy [|\n+    word_rty abi;\n+    Il.StructTy [|\n+      Il.ScalarTy (Il.AddrTy (tydesc_rty abi));\n+      word_rty abi (* A lie: it's opaque, but this permits\n+                    * GEP'ing to it. *)\n+    |]\n+  |]\n ;;\n \n let rec referent_type (abi:Abi.abi) (t:Ast.ty) : Il.referent_ty ="}, {"sha": "4914ac38f47c7d80d25ff6f7cf971442c9377029", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 81, "deletions": 49, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/348e434cee42cc2be0a4f5a6e6df8709d3490ff5/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/348e434cee42cc2be0a4f5a6e6df8709d3490ff5/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=348e434cee42cc2be0a4f5a6e6df8709d3490ff5", "patch": "@@ -525,8 +525,9 @@ let trans_visitor\n       if item_is_obj_fn cx id\n       then\n         begin\n-          let obj = get_obj_for_current_frame() in\n-          let tydesc = get_element_ptr obj Abi.obj_elt_tydesc in\n+          let obj_box = get_obj_for_current_frame() in\n+          let obj = get_element_ptr obj_box Abi.box_rc_field_body in\n+          let tydesc = get_element_ptr obj Abi.obj_body_elt_tydesc in\n           let ty_params_ty = Ast.TY_tup (make_tydesc_tys n_ty_params) in\n           let ty_params_rty = referent_type abi ty_params_ty in\n           let ty_params =\n@@ -889,7 +890,7 @@ let trans_visitor\n     let sorted_idents = sorted_htab_keys fns in\n     let i = arr_idx sorted_idents id in\n     let fn_ty = Hashtbl.find fns id in\n-    let table_ptr = get_element_ptr obj_cell Abi.binding_field_item in\n+    let table_ptr = get_element_ptr obj_cell Abi.obj_elt_vtbl in\n       (get_vtbl_entry_idx table_ptr i, fn_ty)\n   in\n \n@@ -1478,10 +1479,10 @@ let trans_visitor\n                  Abi.indirect_args_elt_closure)\n       in\n       let closure_target_cell =\n-        get_element_ptr closure_cell Abi.binding_field_binding\n+        get_element_ptr closure_cell Abi.obj_elt_body_box\n       in\n       let closure_target_fn_cell =\n-        get_element_ptr closure_target_cell Abi.binding_field_item\n+        get_element_ptr closure_target_cell Abi.obj_elt_vtbl\n       in\n \n         merge_bound_args\n@@ -2275,7 +2276,7 @@ let trans_visitor\n              (tydesc_rty abi))\n \n   and box_rc_cell (cell:Il.cell) : Il.cell =\n-    get_element_ptr (deref cell) Abi.box_rc_slot_field_refcnt\n+    get_element_ptr (deref cell) Abi.box_rc_field_refcnt\n \n   and box_allocation_size\n       (ty:Ast.ty)\n@@ -2311,10 +2312,14 @@ let trans_visitor\n       (curr_iso:Ast.ty_iso option)\n       : unit =\n     let tag_keys = sorted_htab_keys ttag in\n-    let src_tag = get_element_ptr src_cell 0 in\n-    let dst_tag = get_element_ptr dst_cell 0 in\n-    let src_union = get_element_ptr_dyn ty_params src_cell 1 in\n-    let dst_union = get_element_ptr_dyn ty_params dst_cell 1 in\n+    let src_tag = get_element_ptr src_cell Abi.tag_elt_discriminant in\n+    let dst_tag = get_element_ptr dst_cell Abi.tag_elt_discriminant in\n+    let src_union =\n+      get_element_ptr_dyn ty_params src_cell Abi.tag_elt_variant\n+    in\n+    let dst_union =\n+      get_element_ptr_dyn ty_params dst_cell Abi.tag_elt_variant\n+    in\n     let tmp = next_vreg_cell word_sty in\n       f dst_tag src_tag word_ty curr_iso;\n       mov tmp (Il.Cell src_tag);\n@@ -2468,7 +2473,7 @@ let trans_visitor\n \n           Ast.TY_fn _ ->\n             note_drop_step ty \"drop_ty: fn path\";\n-            let binding = get_element_ptr cell Abi.binding_field_binding in\n+            let binding = get_element_ptr cell Abi.obj_elt_body_box in\n             let null_jmp = null_check binding in\n               (* Drop non-null bindings. *)\n               (* FIXME (issue #58): this is completely wrong, Closures need to\n@@ -2481,12 +2486,13 @@ let trans_visitor\n \n         | Ast.TY_obj _ ->\n             note_drop_step ty \"drop_ty: obj path\";\n-            let binding = get_element_ptr cell Abi.binding_field_binding in\n+            let binding = get_element_ptr cell Abi.obj_elt_body_box in\n             let null_jmp = null_check binding in\n             let rc_jmp = drop_refcount_and_cmp binding in\n-            let obj = deref binding in\n-            let tydesc = get_element_ptr obj Abi.obj_elt_tydesc in\n-            let body = get_element_ptr obj Abi.obj_elt_fields in\n+            let obj_box = deref binding in\n+            let obj = get_element_ptr obj_box Abi.box_rc_field_body in\n+            let tydesc = get_element_ptr obj Abi.obj_body_elt_tydesc in\n+            let body = get_element_ptr obj Abi.obj_body_elt_fields in\n             let ty_params = get_tydesc_params ty_params tydesc in\n             let dtor =\n               get_element_ptr (deref tydesc) Abi.tydesc_field_obj_drop_glue\n@@ -2601,7 +2607,7 @@ let trans_visitor\n         | Ast.TY_obj _ ->\n             if type_has_state ty\n             then\n-              let binding = get_element_ptr cell Abi.binding_field_binding in\n+              let binding = get_element_ptr cell Abi.obj_elt_body_box in\n                 sever_box binding;\n \n         | _ ->\n@@ -2673,7 +2679,7 @@ let trans_visitor\n           let (body_mem, _) =\n             need_mem_cell\n               (get_element_ptr_dyn ty_params (deref cell)\n-                 Abi.box_rc_slot_field_body)\n+                 Abi.box_rc_field_body)\n           in\n           let body_ty = simplified_ty ty in\n           let vr = next_vreg_cell Il.voidptr_t in\n@@ -2736,7 +2742,7 @@ let trans_visitor\n             let (body_mem, _) =\n               need_mem_cell\n                 (get_element_ptr (deref cell)\n-                   Abi.box_gc_slot_field_body)\n+                   Abi.box_gc_field_body)\n             in\n             let ty = maybe_iso curr_iso ty in\n             let curr_iso = maybe_enter_iso ty curr_iso in\n@@ -2905,7 +2911,7 @@ let trans_visitor\n           let cell =\n             get_element_ptr_dyn_in_current_frame\n               (deref cell)\n-              (Abi.box_rc_slot_field_body)\n+              (Abi.box_rc_field_body)\n           in\n           let inner_dctrl =\n             if dctrl = DEREF_one_box\n@@ -3088,13 +3094,13 @@ let trans_visitor\n           | Ast.TY_fn _\n           | Ast.TY_obj _ ->\n               begin\n-                let src_item = get_element_ptr src Abi.binding_field_item in\n-                let dst_item = get_element_ptr dst Abi.binding_field_item in\n+                let src_item = get_element_ptr src Abi.obj_elt_vtbl in\n+                let dst_item = get_element_ptr dst Abi.obj_elt_vtbl in\n                 let src_binding =\n-                  get_element_ptr src Abi.binding_field_binding\n+                  get_element_ptr src Abi.obj_elt_body_box\n                 in\n                 let dst_binding =\n-                  get_element_ptr dst Abi.binding_field_binding\n+                  get_element_ptr dst Abi.obj_elt_body_box\n                 in\n                   mov dst_item (Il.Cell src_item);\n                   let null_jmp = null_check src_binding in\n@@ -3191,7 +3197,7 @@ let trans_visitor\n                   deref_ty DEREF_none initializing dst_cell dst_ty\n                 in\n                 let caller_vtbl =\n-                  get_element_ptr caller_obj Abi.binding_field_item\n+                  get_element_ptr caller_obj Abi.obj_elt_vtbl\n                 in\n                   mov caller_vtbl caller_vtbl_oper\n               end\n@@ -3229,10 +3235,10 @@ let trans_visitor\n     let fix = Hashtbl.find cx.ctxt_fn_fixups item.id in\n \n     let dst_pair_item_cell =\n-      get_element_ptr dst_cell Abi.binding_field_item\n+      get_element_ptr dst_cell Abi.obj_elt_vtbl\n     in\n     let dst_pair_binding_cell =\n-      get_element_ptr dst_cell Abi.binding_field_binding\n+      get_element_ptr dst_cell Abi.obj_elt_body_box\n     in\n       mov dst_pair_item_cell (crate_rel_imm fix);\n       mov dst_pair_binding_cell zero\n@@ -3457,16 +3463,22 @@ let trans_visitor\n       (bound_args:Ast.atom array)\n       : unit =\n \n-    let rc_cell = get_element_ptr closure_cell 0 in\n-    let targ_cell = get_element_ptr closure_cell 1 in\n-    let args_cell = get_element_ptr closure_cell 2 in\n+    let rc_cell = get_element_ptr closure_cell Abi.closure_elt_rc in\n+    let targ_cell = get_element_ptr closure_cell Abi.closure_elt_target in\n+    let args_cell = get_element_ptr closure_cell Abi.closure_elt_bound_args in\n \n     iflog (fun _ -> annotate \"init closure refcount\");\n     mov rc_cell one;\n+\n     iflog (fun _ -> annotate \"set closure target code ptr\");\n-    mov (get_element_ptr targ_cell 0) (reify_ptr target_fn_ptr);\n-    iflog (fun _ -> annotate \"set closure target binding ptr\");\n-    mov (get_element_ptr targ_cell 1) (reify_ptr target_binding_ptr);\n+    mov\n+      (get_element_ptr targ_cell Abi.fn_elt_thunk)\n+      (reify_ptr target_fn_ptr);\n+\n+    iflog (fun _ -> annotate \"set closure target closure ptr\");\n+    mov\n+      (get_element_ptr targ_cell Abi.fn_elt_closure)\n+      (reify_ptr target_binding_ptr);\n \n     iflog (fun _ -> annotate \"set closure bound args\");\n     copy_bound_args args_cell bound_arg_slots bound_args\n@@ -3499,10 +3511,10 @@ let trans_visitor\n     let target_binding_ptr = callee_binding_ptr flv cc in\n     let closure_rty = closure_referent_type bound_arg_slots in\n     let closure_sz = force_sz (Il.referent_ty_size word_bits closure_rty) in\n-    let fn_cell = get_element_ptr dst_cell Abi.binding_field_item in\n+    let fn_cell = get_element_ptr dst_cell Abi.obj_elt_vtbl in\n     let closure_cell =\n       ptr_cast\n-        (get_element_ptr dst_cell Abi.binding_field_binding)\n+        (get_element_ptr dst_cell Abi.obj_elt_body_box)\n         (Il.ScalarTy (Il.AddrTy (closure_rty)))\n     in\n       iflog (fun _ -> annotate \"assign glue-code to fn slot of pair\");\n@@ -3512,8 +3524,10 @@ let trans_visitor\n       trans_malloc closure_cell (imm closure_sz) zero;\n       trans_init_closure\n         (deref closure_cell)\n-        target_fn_ptr target_binding_ptr\n-        bound_arg_slots bound_args\n+        target_fn_ptr\n+        target_binding_ptr\n+        bound_arg_slots\n+        bound_args\n \n \n   and trans_arg0 (arg_cell:Il.cell) (initializing:bool) (call:call) : unit =\n@@ -3761,7 +3775,9 @@ let trans_visitor\n           deref (get_element_ptr self_indirect_args_cell\n                    Abi.indirect_args_elt_closure)\n         in\n-        let closure_args_cell = get_element_ptr closure_cell 2 in\n+        let closure_args_cell =\n+          get_element_ptr closure_cell Abi.closure_elt_bound_args\n+        in\n \n           for arg_i = 0 to (n_args - 1) do\n             let dst_cell = get_element_ptr callee_args_cell arg_i in\n@@ -3808,7 +3824,7 @@ let trans_visitor\n       | CALL_indirect ->\n           (* fptr is a pair [disp, binding*] *)\n           let pair_cell = need_cell (reify_ptr fptr) in\n-          let disp_cell = get_element_ptr pair_cell Abi.binding_field_item in\n+          let disp_cell = get_element_ptr pair_cell Abi.obj_elt_vtbl in\n             Il.Cell (crate_rel_to_ptr (Il.Cell disp_cell) Il.CodeTy)\n \n   and callee_binding_ptr\n@@ -3819,7 +3835,7 @@ let trans_visitor\n     then zero\n     else\n       let (pair_cell, _) = trans_lval pair_lval in\n-        Il.Cell (get_element_ptr pair_cell Abi.binding_field_binding)\n+        Il.Cell (get_element_ptr pair_cell Abi.obj_elt_body_box)\n \n   and call_ctrl flv : call_ctrl =\n     if lval_is_static cx flv\n@@ -3948,9 +3964,13 @@ let trans_visitor\n               let tag_number = arr_idx tag_keys tag_name in\n               let ty_tup = Hashtbl.find ty_tag tag_name in\n \n-              let tag_cell:Il.cell = get_element_ptr src_cell 0 in\n+              let tag_cell:Il.cell =\n+                get_element_ptr src_cell Abi.tag_elt_discriminant\n+              in\n               let union_cell =\n-                get_element_ptr_dyn_in_current_frame src_cell 1\n+                get_element_ptr_dyn_in_current_frame\n+                  src_cell\n+                  Abi.tag_elt_variant\n               in\n \n               let next_jumps =\n@@ -4619,10 +4639,10 @@ let trans_visitor\n     let _ = iflog (fun _ -> annotate \"load destination obj pair ptr\") in\n     let dst_pair_cell = deref (ptr_at (fp_imm out_mem_disp) obj_ty) in\n     let dst_pair_item_cell =\n-      get_element_ptr dst_pair_cell Abi.binding_field_item\n+      get_element_ptr dst_pair_cell Abi.obj_elt_vtbl\n     in\n     let dst_pair_state_cell =\n-      get_element_ptr dst_pair_cell Abi.binding_field_binding\n+      get_element_ptr dst_pair_cell Abi.obj_elt_body_box\n     in\n \n       (* Load first cell of pair with vtbl ptr.*)\n@@ -4638,10 +4658,20 @@ let trans_visitor\n         iflog (fun _ -> annotate \"load obj.state ptr to vreg\");\n         mov state_ptr (Il.Cell dst_pair_state_cell);\n         let state = deref state_ptr in\n-        let refcnt = get_element_ptr_dyn_in_current_frame state 0 in\n-        let body = get_element_ptr_dyn_in_current_frame state 1 in\n-        let obj_tydesc = get_element_ptr_dyn_in_current_frame body 0 in\n-        let obj_args = get_element_ptr_dyn_in_current_frame body 1 in\n+        let refcnt =\n+          get_element_ptr_dyn_in_current_frame state\n+            Abi.box_rc_field_refcnt\n+        in\n+        let body =\n+          get_element_ptr_dyn_in_current_frame state\n+            Abi.box_rc_field_body\n+        in\n+        let obj_tydesc =\n+          get_element_ptr_dyn_in_current_frame body Abi.obj_body_elt_tydesc\n+        in\n+        let obj_args =\n+          get_element_ptr_dyn_in_current_frame body Abi.obj_body_elt_fields\n+        in\n           iflog (fun _ -> annotate \"write refcnt=1 to obj state\");\n           mov refcnt one;\n           iflog (fun _ -> annotate \"get args-tup tydesc\");\n@@ -4844,8 +4874,10 @@ let trans_visitor\n     let _ = log cx \"tag variant: %s -> tag value #%d\" n i in\n     let (dst_cell, dst_slot) = get_current_output_cell_and_slot() in\n     let dst_cell = deref_slot true dst_cell dst_slot in\n-    let tag_cell = get_element_ptr dst_cell 0 in\n-    let union_cell = get_element_ptr_dyn_in_current_frame dst_cell 1 in\n+    let tag_cell = get_element_ptr dst_cell Abi.tag_elt_discriminant in\n+    let union_cell =\n+      get_element_ptr_dyn_in_current_frame dst_cell Abi.tag_elt_variant\n+    in\n     let tag_body_cell = get_variant_ptr union_cell i in\n     let tag_body_rty = snd (need_mem_cell tag_body_cell) in\n     let ty_params = get_ty_params_of_current_frame() in"}]}