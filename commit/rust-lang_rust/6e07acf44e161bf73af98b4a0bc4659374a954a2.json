{"sha": "6e07acf44e161bf73af98b4a0bc4659374a954a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMDdhY2Y0NGUxNjFiZjczYWY5OGI0YTBiYzQ2NTkzNzRhOTU0YTI=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-21T14:00:45Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-05-21T14:00:45Z"}, "message": "Merge pull request #63 from Manishearth/cmp_owned\n\nnew lint: cmp_owned", "tree": {"sha": "905b609582eb41d2aa2479e4fd06e979b61ef038", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/905b609582eb41d2aa2479e4fd06e979b61ef038"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e07acf44e161bf73af98b4a0bc4659374a954a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e07acf44e161bf73af98b4a0bc4659374a954a2", "html_url": "https://github.com/rust-lang/rust/commit/6e07acf44e161bf73af98b4a0bc4659374a954a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e07acf44e161bf73af98b4a0bc4659374a954a2/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57a6b93ed016065a09a4e2ef53f0dd5f90a5ba88", "url": "https://api.github.com/repos/rust-lang/rust/commits/57a6b93ed016065a09a4e2ef53f0dd5f90a5ba88", "html_url": "https://github.com/rust-lang/rust/commit/57a6b93ed016065a09a4e2ef53f0dd5f90a5ba88"}, {"sha": "5b1287f017beac4609486a24fb0cc8c02d63c8ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b1287f017beac4609486a24fb0cc8c02d63c8ed", "html_url": "https://github.com/rust-lang/rust/commit/5b1287f017beac4609486a24fb0cc8c02d63c8ed"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "0bea2fad1d6e9688f5a921a339ebec2c0f6b4443", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e07acf44e161bf73af98b4a0bc4659374a954a2/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/6e07acf44e161bf73af98b4a0bc4659374a954a2/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=6e07acf44e161bf73af98b4a0bc4659374a954a2", "patch": "@@ -25,6 +25,7 @@ Lints included in this crate:\n  - `mut_mut`: Warns on `&mut &mut` which is either a copy'n'paste error, or shows a fundamental misunderstanding of references\n  - `len_zero`: Warns on `_.len() == 0` and suggests using `_.is_empty()` (or similar comparisons with `>` or `!=`)\n  - `len_without_is_empty`: Warns on traits or impls that have a `.len()` but no `.is_empty()` method\n+ - `cmp_owned`: Warns on creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n \n To use, add the following lines to your Cargo.toml:\n "}, {"sha": "cf5def800a271ae177a3fa873ef9622bc35396f4", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e07acf44e161bf73af98b4a0bc4659374a954a2/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e07acf44e161bf73af98b4a0bc4659374a954a2/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6e07acf44e161bf73af98b4a0bc4659374a954a2", "patch": "@@ -44,6 +44,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box identity_op::IdentityOp as LintPassObject);\n     reg.register_lint_pass(box mut_mut::MutMut as LintPassObject);\n     reg.register_lint_pass(box len_zero::LenZero as LintPassObject);\n+    reg.register_lint_pass(box misc::CmpOwned as LintPassObject);\n     \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n@@ -54,7 +55,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            needless_bool::NEEDLESS_BOOL,\n                                            approx_const::APPROX_CONSTANT,\n                                            misc::CMP_NAN, misc::FLOAT_CMP,\n-                                           misc::PRECEDENCE,\n+                                           misc::PRECEDENCE, misc::CMP_OWNED,\n                                            eta_reduction::REDUNDANT_CLOSURE,\n                                            identity_op::IDENTITY_OP,\n                                            mut_mut::MUT_MUT,"}, {"sha": "5f5b07a15b7e8164546bc508550682aca4ad7999", "filename": "src/misc.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6e07acf44e161bf73af98b4a0bc4659374a954a2/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e07acf44e161bf73af98b4a0bc4659374a954a2/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=6e07acf44e161bf73af98b4a0bc4659374a954a2", "patch": "@@ -211,3 +211,52 @@ fn is_arith_op(op : BinOp_) -> bool {\n \t\t_ => false\n \t}\n }\n+\n+declare_lint!(pub CMP_OWNED, Warn,\n+\t\t\t  \"Warn on creating an owned string just for comparison\");\n+\t\t\t  \n+#[derive(Copy,Clone)]\n+pub struct CmpOwned;\n+\n+impl LintPass for CmpOwned {\n+\tfn get_lints(&self) -> LintArray {\n+        lint_array!(CMP_OWNED)\n+\t}\n+\t\n+\tfn check_expr(&mut self, cx: &Context, expr: &Expr) {\n+\t\tif let ExprBinary(ref cmp, ref left, ref right) = expr.node {\n+\t\t\tif is_comparison_binop(cmp.node) {\n+\t\t\t\tcheck_to_owned(cx, left, right.span);\n+\t\t\t\tcheck_to_owned(cx, right, left.span)\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+fn check_to_owned(cx: &Context, expr: &Expr, other_span: Span) {\n+\tmatch &expr.node {\n+\t\t&ExprMethodCall(Spanned{node: ref ident, ..}, _, _) => {\n+\t\t\tlet name = ident.as_str();\n+\t\t\tif name == \"to_string\" || name == \"to_owned\" {\n+\t\t\t\tcx.span_lint(CMP_OWNED, expr.span, &format!(\n+\t\t\t\t\t\"this creates an owned instance just for comparison.\n+\t\t\t\t\tConsider using {}.as_slice() to compare without allocation\",\n+\t\t\t\t\tcx.sess().codemap().span_to_snippet(other_span).unwrap_or(\n+\t\t\t\t\t\t\"..\".to_string())))\n+\t\t\t}\n+\t\t},\n+\t\t&ExprCall(ref path, _) => {\n+\t\t\tif let &ExprPath(None, ref path) = &path.node {\n+\t\t\t\tif path.segments.iter().zip([\"String\", \"from_str\"].iter()).all(\n+\t\t\t\t\t\t|(seg, name)| &seg.identifier.as_str() == name) {\n+\t\t\t\t\tcx.span_lint(CMP_OWNED, expr.span, &format!(\n+\t\t\t\t\t\"this creates an owned instance just for comparison.\n+\t\t\t\t\tConsider using {}.as_slice() to compare without allocation\",\n+\t\t\t\t\tcx.sess().codemap().span_to_snippet(other_span).unwrap_or(\n+\t\t\t\t\t\t\"..\".to_string())))\n+\t\t\t\t}\n+\t\t\t}\n+\t\t},\n+\t\t_ => ()\n+\t}\n+}"}, {"sha": "a8b0cb32f6f60bdd349bbe672892e1699675dd0b", "filename": "tests/compile-fail/cmp_owned.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6e07acf44e161bf73af98b4a0bc4659374a954a2/tests%2Fcompile-fail%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e07acf44e161bf73af98b4a0bc4659374a954a2/tests%2Fcompile-fail%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcmp_owned.rs?ref=6e07acf44e161bf73af98b4a0bc4659374a954a2", "patch": "@@ -0,0 +1,17 @@\n+#![feature(plugin, collections)]\n+#![plugin(clippy)]\n+\n+#[deny(cmp_owned)]\n+fn main() {\n+\tlet x = \"oh\";\n+\t\n+\t#[allow(str_to_string)]\n+\tfn with_to_string(x : &str) {\n+\t\tx != \"foo\".to_string(); //~ERROR this creates an owned instance\n+\t}\n+\twith_to_string(x);\n+\t\n+\tx != \"foo\".to_owned(); //~ERROR this creates an owned instance\n+\t\n+\tx != String::from_str(\"foo\"); //~ERROR this creates an owned instance\n+}"}]}