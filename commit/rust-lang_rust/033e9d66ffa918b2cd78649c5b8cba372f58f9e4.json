{"sha": "033e9d66ffa918b2cd78649c5b8cba372f58f9e4", "node_id": "C_kwDOAAsO6NoAKDAzM2U5ZDY2ZmZhOTE4YjJjZDc4NjQ5YzViOGNiYTM3MmY1OGY5ZTQ", "commit": {"author": {"name": "Markus Reiter", "email": "me@reitermark.us", "date": "2022-08-16T15:48:55Z"}, "committer": {"name": "Markus Reiter", "email": "me@reitermark.us", "date": "2022-08-16T15:57:46Z"}, "message": "Move `IpDisplayBuffer` into submodule.", "tree": {"sha": "e9793abdb34399e2c68cb5d662beb61f36bcf159", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9793abdb34399e2c68cb5d662beb61f36bcf159"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/033e9d66ffa918b2cd78649c5b8cba372f58f9e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEbU1eLXPTwjnhHZwHJFKTtRcCZVsFAmL7vnoRHG1lQHJlaXRl\ncm1hcmsudXMACgkQJFKTtRcCZVsRQw//W6uDvMuOI0+5ARTifd1sOh9+1uUh5pgB\naNE0ZfJgobr5b5jhL41AmeT/s/i4bxsPFf+op8gAd8dxxp32XMAAOhWx0twdeVML\nnrpv3EBga6ShrSatb2YXWi2jpiOrBZUy4EkIfS6iXvxf24G27UdVkaowwmY+CCla\n9uEtIsxQUJo/03NfZo+wMH8RkByIA81wZp01t6s2LYz7KbzxHIHgcmMeIFVxo6mx\nDVfi+3CFePVWpmV9pj7eesTknZrGSy+4OZp6l5/5Mt5P5CJkbbyIEyROKdFOimy3\n9fzivYesQBoSHlLrnSA4d2phdixtKME2QBiJp7W2JwC0/DT8jxu0sqzT/GmPoWms\n4kxrYXKHcj/ZlfSkkEi+psFJoHO0W/dxYqkkIRul92JDmqKpM82NMKONVXm5CJox\ntPQ2xcxfHrJQ9YO3Jji+iV20Tap6qjgsFi7OrbIzjfAwkpFXoN9nWqIL2FsED+v9\nZq76NHH29F76QSVU0RalURLhY8xChs46Fs+TtNHT7aIXgDs65byqasL2axssk3f/\nMCXWnmrKhWfWkClOUuGwVpsn6DhDuOQffxwJVGEUAK7tkE+eZh6bv3W029waxSSs\nnkwZo/b1sFCfGw1TwOhfQZtITcxg3fp09IsZcwgO3zik0y4H0TXRZCUjnfxdoRIU\nlWUBTIO9m6U=\n=SqqC\n-----END PGP SIGNATURE-----", "payload": "tree e9793abdb34399e2c68cb5d662beb61f36bcf159\nparent 5a11b814d4cd84d43f7b96a81f3e1595187c26a1\nauthor Markus Reiter <me@reitermark.us> 1660664935 +0200\ncommitter Markus Reiter <me@reitermark.us> 1660665466 +0200\n\nMove `IpDisplayBuffer` into submodule.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/033e9d66ffa918b2cd78649c5b8cba372f58f9e4", "html_url": "https://github.com/rust-lang/rust/commit/033e9d66ffa918b2cd78649c5b8cba372f58f9e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/033e9d66ffa918b2cd78649c5b8cba372f58f9e4/comments", "author": {"login": "reitermarkus", "id": 1309829, "node_id": "MDQ6VXNlcjEzMDk4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1309829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reitermarkus", "html_url": "https://github.com/reitermarkus", "followers_url": "https://api.github.com/users/reitermarkus/followers", "following_url": "https://api.github.com/users/reitermarkus/following{/other_user}", "gists_url": "https://api.github.com/users/reitermarkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/reitermarkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reitermarkus/subscriptions", "organizations_url": "https://api.github.com/users/reitermarkus/orgs", "repos_url": "https://api.github.com/users/reitermarkus/repos", "events_url": "https://api.github.com/users/reitermarkus/events{/privacy}", "received_events_url": "https://api.github.com/users/reitermarkus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "reitermarkus", "id": 1309829, "node_id": "MDQ6VXNlcjEzMDk4Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/1309829?v=4", "gravatar_id": "", "url": "https://api.github.com/users/reitermarkus", "html_url": "https://github.com/reitermarkus", "followers_url": "https://api.github.com/users/reitermarkus/followers", "following_url": "https://api.github.com/users/reitermarkus/following{/other_user}", "gists_url": "https://api.github.com/users/reitermarkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/reitermarkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/reitermarkus/subscriptions", "organizations_url": "https://api.github.com/users/reitermarkus/orgs", "repos_url": "https://api.github.com/users/reitermarkus/repos", "events_url": "https://api.github.com/users/reitermarkus/events{/privacy}", "received_events_url": "https://api.github.com/users/reitermarkus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a11b814d4cd84d43f7b96a81f3e1595187c26a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a11b814d4cd84d43f7b96a81f3e1595187c26a1", "html_url": "https://github.com/rust-lang/rust/commit/5a11b814d4cd84d43f7b96a81f3e1595187c26a1"}], "stats": {"total": 68, "additions": 36, "deletions": 32}, "files": [{"sha": "198dcff12b95c3ca2308ff5c166357b96839db9a", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/033e9d66ffa918b2cd78649c5b8cba372f58f9e4/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033e9d66ffa918b2cd78649c5b8cba372f58f9e4/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=033e9d66ffa918b2cd78649c5b8cba372f58f9e4", "patch": "@@ -5,41 +5,11 @@ mod tests;\n use crate::cmp::Ordering;\n use crate::fmt::{self, Write};\n use crate::mem::transmute;\n-use crate::str;\n use crate::sys::net::netc as c;\n use crate::sys_common::{FromInner, IntoInner};\n \n-/// Used for slow path in `Display` implementations when alignment is required.\n-struct IpDisplayBuffer<const SIZE: usize> {\n-    buf: [u8; SIZE],\n-    len: usize,\n-}\n-\n-impl<const SIZE: usize> IpDisplayBuffer<SIZE> {\n-    #[inline(always)]\n-    pub const fn new(_ip: &[u8; SIZE]) -> Self {\n-        Self { buf: [0; SIZE], len: 0 }\n-    }\n-\n-    #[inline(always)]\n-    pub fn as_str(&self) -> &str {\n-        // SAFETY: `buf` is only written to by the `fmt::Write::write_str` implementation\n-        // which writes a valid UTF-8 string to `buf` and correctly sets `len`.\n-        unsafe { str::from_utf8_unchecked(&self.buf[..self.len]) }\n-    }\n-}\n-\n-impl<const SIZE: usize> fmt::Write for IpDisplayBuffer<SIZE> {\n-    fn write_str(&mut self, s: &str) -> fmt::Result {\n-        if let Some(buf) = self.buf.get_mut(self.len..(self.len + s.len())) {\n-            buf.copy_from_slice(s.as_bytes());\n-            self.len += s.len();\n-            Ok(())\n-        } else {\n-            Err(fmt::Error)\n-        }\n-    }\n-}\n+mod display_buffer;\n+use display_buffer::IpDisplayBuffer;\n \n /// An IP address, either IPv4 or IPv6.\n ///"}, {"sha": "06acfa5e21522ef31cf97046ca77aeb124fc56ba", "filename": "library/std/src/net/ip/display_buffer.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/033e9d66ffa918b2cd78649c5b8cba372f58f9e4/library%2Fstd%2Fsrc%2Fnet%2Fip%2Fdisplay_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033e9d66ffa918b2cd78649c5b8cba372f58f9e4/library%2Fstd%2Fsrc%2Fnet%2Fip%2Fdisplay_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Fdisplay_buffer.rs?ref=033e9d66ffa918b2cd78649c5b8cba372f58f9e4", "patch": "@@ -0,0 +1,34 @@\n+use crate::fmt;\n+use crate::str;\n+\n+/// Used for slow path in `Display` implementations when alignment is required.\n+pub struct IpDisplayBuffer<const SIZE: usize> {\n+    buf: [u8; SIZE],\n+    len: usize,\n+}\n+\n+impl<const SIZE: usize> IpDisplayBuffer<SIZE> {\n+    #[inline(always)]\n+    pub const fn new(_ip: &[u8; SIZE]) -> Self {\n+        Self { buf: [0; SIZE], len: 0 }\n+    }\n+\n+    #[inline(always)]\n+    pub fn as_str(&self) -> &str {\n+        // SAFETY: `buf` is only written to by the `fmt::Write::write_str` implementation\n+        // which writes a valid UTF-8 string to `buf` and correctly sets `len`.\n+        unsafe { str::from_utf8_unchecked(&self.buf[..self.len]) }\n+    }\n+}\n+\n+impl<const SIZE: usize> fmt::Write for IpDisplayBuffer<SIZE> {\n+    fn write_str(&mut self, s: &str) -> fmt::Result {\n+        if let Some(buf) = self.buf.get_mut(self.len..(self.len + s.len())) {\n+            buf.copy_from_slice(s.as_bytes());\n+            self.len += s.len();\n+            Ok(())\n+        } else {\n+            Err(fmt::Error)\n+        }\n+    }\n+}"}]}