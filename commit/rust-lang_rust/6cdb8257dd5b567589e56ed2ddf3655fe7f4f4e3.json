{"sha": "6cdb8257dd5b567589e56ed2ddf3655fe7f4f4e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZGI4MjU3ZGQ1YjU2NzU4OWU1NmVkMmRkZjM2NTVmZTdmNGY0ZTM=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "tchiovoloni@mozilla.com", "date": "2020-03-08T00:14:10Z"}, "committer": {"name": "Thom Chiovoloni", "email": "tchiovoloni@mozilla.com", "date": "2020-03-08T00:14:10Z"}, "message": "Implement BitOr and BitOrAssign for the NonZero integer types", "tree": {"sha": "34a557df16badd2b9f80166bd0c26e6bc8873d82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34a557df16badd2b9f80166bd0c26e6bc8873d82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cdb8257dd5b567589e56ed2ddf3655fe7f4f4e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cdb8257dd5b567589e56ed2ddf3655fe7f4f4e3", "html_url": "https://github.com/rust-lang/rust/commit/6cdb8257dd5b567589e56ed2ddf3655fe7f4f4e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cdb8257dd5b567589e56ed2ddf3655fe7f4f4e3/comments", "author": null, "committer": null, "parents": [{"sha": "823ff8cf1397a5772b1f6954b60576202bf91836", "url": "https://api.github.com/repos/rust-lang/rust/commits/823ff8cf1397a5772b1f6954b60576202bf91836", "html_url": "https://github.com/rust-lang/rust/commit/823ff8cf1397a5772b1f6954b60576202bf91836"}], "stats": {"total": 87, "additions": 87, "deletions": 0}, "files": [{"sha": "b46f399035a4d59792e33b767d9eb5c8e8ea6d8d", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6cdb8257dd5b567589e56ed2ddf3655fe7f4f4e3/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cdb8257dd5b567589e56ed2ddf3655fe7f4f4e3/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=6cdb8257dd5b567589e56ed2ddf3655fe7f4f4e3", "patch": "@@ -8,6 +8,7 @@ use crate::convert::Infallible;\n use crate::fmt;\n use crate::intrinsics;\n use crate::mem;\n+use crate::ops::{BitOr, BitOrAssign};\n use crate::str::FromStr;\n \n // Used because the `?` operator is not allowed in a const context.\n@@ -110,6 +111,57 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 }\n             }\n \n+            #[stable(feature = \"nonzero_bitor\", since = \"1.43.0\")]\n+            impl BitOr for $Ty {\n+                type Output = Self;\n+                #[inline]\n+                fn bitor(self, rhs: Self) -> Self::Output {\n+                    // Safety: since `self` and `rhs` are both nonzero, the\n+                    // result of the bitwise-or will be nonzero.\n+                    unsafe { $Ty::new_unchecked(self.get() | rhs.get()) }\n+                }\n+            }\n+\n+            #[stable(feature = \"nonzero_bitor\", since = \"1.43.0\")]\n+            impl BitOr<$Int> for $Ty {\n+                type Output = Self;\n+                #[inline]\n+                fn bitor(self, rhs: $Int) -> Self::Output {\n+                    // Safety: since `self` is nonzero, the result of the\n+                    // bitwise-or will be nonzero regardless of the value of\n+                    // `rhs`.\n+                    unsafe { $Ty::new_unchecked(self.get() | rhs) }\n+                }\n+            }\n+\n+            #[stable(feature = \"nonzero_bitor\", since = \"1.43.0\")]\n+            impl BitOr<$Ty> for $Int {\n+                type Output = $Ty;\n+                #[inline]\n+                fn bitor(self, rhs: $Ty) -> Self::Output {\n+                    // Safety: since `rhs` is nonzero, the result of the\n+                    // bitwise-or will be nonzero regardless of the value of\n+                    // `self`.\n+                    unsafe { $Ty::new_unchecked(self | rhs.get()) }\n+                }\n+            }\n+\n+            #[stable(feature = \"nonzero_bitor\", since = \"1.43.0\")]\n+            impl BitOrAssign for $Ty {\n+                #[inline]\n+                fn bitor_assign(&mut self, rhs: Self) {\n+                    *self = *self | rhs;\n+                }\n+            }\n+\n+            #[stable(feature = \"nonzero_bitor\", since = \"1.43.0\")]\n+            impl BitOrAssign<$Int> for $Ty {\n+                #[inline]\n+                fn bitor_assign(&mut self, rhs: $Int) {\n+                    *self = *self | rhs;\n+                }\n+            }\n+\n             impl_nonzero_fmt! {\n                 #[$stability] (Debug, Display, Binary, Octal, LowerHex, UpperHex) for $Ty\n             }"}, {"sha": "0227a66b8633a704137287e33ca8486b01dcade7", "filename": "src/libcore/tests/nonzero.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6cdb8257dd5b567589e56ed2ddf3655fe7f4f4e3/src%2Flibcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cdb8257dd5b567589e56ed2ddf3655fe7f4f4e3/src%2Flibcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnonzero.rs?ref=6cdb8257dd5b567589e56ed2ddf3655fe7f4f4e3", "patch": "@@ -141,3 +141,38 @@ fn test_from_str() {\n         Some(IntErrorKind::Overflow)\n     );\n }\n+\n+#[test]\n+fn test_nonzero_bitor() {\n+    let nz_alt = NonZeroU8::new(0b1010_1010).unwrap();\n+    let nz_low = NonZeroU8::new(0b0000_1111).unwrap();\n+\n+    let both_nz: NonZeroU8 = nz_alt | nz_low;\n+    assert_eq!(both_nz.get(), 0b1010_1111);\n+\n+    let rhs_int: NonZeroU8 = nz_low | 0b1100_0000u8;\n+    assert_eq!(rhs_int.get(), 0b1100_1111);\n+\n+    let rhs_zero: NonZeroU8 = nz_alt | 0u8;\n+    assert_eq!(rhs_zero.get(), 0b1010_1010);\n+\n+    let lhs_int: NonZeroU8 = 0b0110_0110u8 | nz_alt;\n+    assert_eq!(lhs_int.get(), 0b1110_1110);\n+\n+    let lhs_zero: NonZeroU8 = 0u8 | nz_low;\n+    assert_eq!(lhs_zero.get(), 0b0000_1111);\n+}\n+\n+#[test]\n+fn test_nonzero_bitor_assign() {\n+    let mut target = NonZeroU8::new(0b1010_1010).unwrap();\n+\n+    target |= NonZeroU8::new(0b0000_1111).unwrap();\n+    assert_eq!(target.get(), 0b1010_1111);\n+\n+    target |= 0b0001_0000;\n+    assert_eq!(target.get(), 0b1011_1111);\n+\n+    target |= 0;\n+    assert_eq!(target.get(), 0b1011_1111);\n+}"}]}