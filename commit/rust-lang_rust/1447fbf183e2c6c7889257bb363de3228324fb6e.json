{"sha": "1447fbf183e2c6c7889257bb363de3228324fb6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NDdmYmYxODNlMmM2Yzc4ODkyNTdiYjM2M2RlMzIyODMyNGZiNmU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-26T19:09:48Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-06-05T11:41:04Z"}, "message": "rustc_const_eval: track the length and index in IndexOutOfBounds.", "tree": {"sha": "e095608c1ba935b6cd2af4c57dd4427d1b5f9ae3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e095608c1ba935b6cd2af4c57dd4427d1b5f9ae3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1447fbf183e2c6c7889257bb363de3228324fb6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1447fbf183e2c6c7889257bb363de3228324fb6e", "html_url": "https://github.com/rust-lang/rust/commit/1447fbf183e2c6c7889257bb363de3228324fb6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1447fbf183e2c6c7889257bb363de3228324fb6e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afc598e07543cc0c927e976c7e3621e44843135c", "url": "https://api.github.com/repos/rust-lang/rust/commits/afc598e07543cc0c927e976c7e3621e44843135c", "html_url": "https://github.com/rust-lang/rust/commit/afc598e07543cc0c927e976c7e3621e44843135c"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "785b734b79976b38a3ead4b7705292b8967855b6", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=1447fbf183e2c6c7889257bb363de3228324fb6e", "patch": "@@ -390,7 +390,7 @@ pub enum ErrKind {\n     IndexedNonVec,\n     IndexNegative,\n     IndexNotInt,\n-    IndexOutOfBounds,\n+    IndexOutOfBounds { len: u64, index: u64 },\n     RepeatCountNotNatural,\n     RepeatCountNotInt,\n \n@@ -441,7 +441,10 @@ impl ConstEvalErr {\n             IndexedNonVec => \"indexing is only supported for arrays\".into_cow(),\n             IndexNegative => \"indices must be non-negative integers\".into_cow(),\n             IndexNotInt => \"indices must be integers\".into_cow(),\n-            IndexOutOfBounds => \"array index out of bounds\".into_cow(),\n+            IndexOutOfBounds { len, index } => {\n+                format!(\"index out of bounds: the len is {} but the index is {}\",\n+                        len, index).into_cow()\n+            }\n             RepeatCountNotNatural => \"repeat count must be a natural number\".into_cow(),\n             RepeatCountNotInt => \"repeat count must be integers\".into_cow(),\n \n@@ -835,23 +838,29 @@ pub fn eval_const_expr_partial<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         };\n         assert_eq!(idx as usize as u64, idx);\n         match arr {\n-            Array(_, n) if idx >= n => signal!(e, IndexOutOfBounds),\n+            Array(_, n) if idx >= n => {\n+                signal!(e, IndexOutOfBounds { len: n, index: idx })\n+            }\n             Array(v, n) => if let hir::ExprVec(ref v) = tcx.map.expect_expr(v).node {\n                 assert_eq!(n as usize as u64, n);\n                 eval_const_expr_partial(tcx, &v[idx as usize], ty_hint, fn_args)?\n             } else {\n                 bug!()\n             },\n \n-            Repeat(_, n) if idx >= n => signal!(e, IndexOutOfBounds),\n+            Repeat(_, n) if idx >= n => {\n+                signal!(e, IndexOutOfBounds { len: n, index: idx })\n+            }\n             Repeat(elem, _) => eval_const_expr_partial(\n                 tcx,\n                 &tcx.map.expect_expr(elem),\n                 ty_hint,\n                 fn_args,\n             )?,\n \n-            ByteStr(ref data) if idx >= data.len() as u64 => signal!(e, IndexOutOfBounds),\n+            ByteStr(ref data) if idx >= data.len() as u64 => {\n+                signal!(e, IndexOutOfBounds { len: data.len() as u64, index: idx })\n+            }\n             ByteStr(data) => {\n                 Integral(U8(data[idx as usize]))\n             },"}, {"sha": "6788d5de6d8698218f37ae5f6e986033d6bbc494", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=1447fbf183e2c6c7889257bb363de3228324fb6e", "patch": "@@ -716,7 +716,10 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             if iv >= len {\n                 // FIXME #3170: report this earlier on in the const-eval\n                 // pass. Reporting here is a bit late.\n-                const_err(cx, e.span, Err(ErrKind::IndexOutOfBounds), trueconst)?;\n+                const_err(cx, e.span, Err(ErrKind::IndexOutOfBounds {\n+                    len: len,\n+                    index: iv\n+                }), trueconst)?;\n                 C_undef(val_ty(arr).element_type())\n             } else {\n                 const_get_elt(arr, &[iv as c_uint])"}, {"sha": "e32e542ed899659b434b6988321e86364d2da81c", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=1447fbf183e2c6c7889257bb363de3228324fb6e", "patch": "@@ -298,8 +298,13 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                     let cond_bool = common::const_to_uint(cond.llval) != 0;\n                     if cond_bool != expected {\n                         let err = match *msg {\n-                            mir::AssertMessage::BoundsCheck {..} => {\n-                                ErrKind::IndexOutOfBounds\n+                            mir::AssertMessage::BoundsCheck { ref len, ref index } => {\n+                                let len = self.const_operand(len, span)?;\n+                                let index = self.const_operand(index, span)?;\n+                                ErrKind::IndexOutOfBounds {\n+                                    len: common::const_to_uint(len.llval),\n+                                    index: common::const_to_uint(index.llval)\n+                                }\n                             }\n                             mir::AssertMessage::Math(ref err) => {\n                                 ErrKind::Math(err.clone())"}, {"sha": "e65230389f9c0412297a2d5fa95c25934e1ada3b", "filename": "src/test/compile-fail/array_const_index-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Ftest%2Fcompile-fail%2Farray_const_index-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Ftest%2Fcompile-fail%2Farray_const_index-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray_const_index-0.rs?ref=1447fbf183e2c6c7889257bb363de3228324fb6e", "patch": "@@ -10,7 +10,7 @@\n \n const A: &'static [i32] = &[];\n const B: i32 = (&A)[1];\n-//~^ ERROR: array index out of bounds\n+//~^ ERROR index out of bounds: the len is 0 but the index is 1\n \n fn main() {\n     let _ = B;"}, {"sha": "69d84e24c4982db2c7d5549461b425eb2f74a4b3", "filename": "src/test/compile-fail/array_const_index-1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Ftest%2Fcompile-fail%2Farray_const_index-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Ftest%2Fcompile-fail%2Farray_const_index-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray_const_index-1.rs?ref=1447fbf183e2c6c7889257bb363de3228324fb6e", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n const A: [i32; 0] = [];\n-const B: i32 = A[1]; //~ ERROR: array index out of bounds\n+const B: i32 = A[1];\n+//~^ ERROR index out of bounds: the len is 0 but the index is 1\n \n fn main() {\n     let _ = B;"}, {"sha": "faabed4fd5e422d5f73ba2a92fc8b705848d8c72", "filename": "src/test/compile-fail/const-array-oob.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Ftest%2Fcompile-fail%2Fconst-array-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Ftest%2Fcompile-fail%2Fconst-array-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-array-oob.rs?ref=1447fbf183e2c6c7889257bb363de3228324fb6e", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n+\n #![feature(const_indexing)]\n \n const FOO: [u32; 3] = [1, 2, 3];\n const BAR: u32 = FOO[5]; // no error, because the error below occurs before regular const eval\n \n const BLUB: [u32; FOO[4]] = [5, 6];\n-//~^ ERROR array length constant evaluation error: array index out of bounds [E0250]\n+//~^ ERROR array length constant evaluation error: index out of bounds: the len is 3 but the index is 4 [E0250]\n \n fn main() {\n     let _ = BAR;"}, {"sha": "f666140970b6e125b0d27f0740c15dfdbfbe1ca2", "filename": "src/test/compile-fail/const-err-early.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs?ref=1447fbf183e2c6c7889257bb363de3228324fb6e", "patch": "@@ -15,8 +15,10 @@ pub const A: i8 = -std::i8::MIN; //~ ERROR attempted to negate with overflow\n pub const B: u8 = 200u8 + 200u8; //~ ERROR attempted to add with overflow\n pub const C: u8 = 200u8 * 4; //~ ERROR attempted to multiply with overflow\n pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR attempted to subtract with overflow\n-pub const E: u8 = [5u8][1]; //~ ERROR index out of bounds\n+pub const E: u8 = [5u8][1];\n+//~^ ERROR index out of bounds: the len is 1 but the index is 1\n \n fn main() {\n-    let _e = [6u8][1]; //~ ERROR: array index out of bounds\n+    let _e = [6u8][1];\n+    //~^ ERROR index out of bounds: the len is 1 but the index is 1\n }"}, {"sha": "ac2ef6662a46e756357f328c2aa2aa20fcb4c8f5", "filename": "src/test/compile-fail/const-err.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err.rs?ref=1447fbf183e2c6c7889257bb363de3228324fb6e", "patch": "@@ -20,8 +20,8 @@ fn black_box<T>(_: T) {\n \n // Make sure that the two uses get two errors.\n const FOO: u8 = [5u8][1];\n-//~^ ERROR array index out of bounds\n-//~^^ ERROR array index out of bounds\n+//~^ ERROR index out of bounds: the len is 1 but the index is 1\n+//~^^ ERROR index out of bounds: the len is 1 but the index is 1\n \n fn main() {\n     let a = -std::i8::MIN;\n@@ -34,7 +34,7 @@ fn main() {\n     let d = 42u8 - (42u8 + 1);\n     //~^ WARN attempted to subtract with overflow\n     let _e = [5u8][1];\n-    //~^ WARN array index out of bounds\n+    //~^ WARN index out of bounds: the len is 1 but the index is 1\n     black_box(a);\n     black_box(b);\n     black_box(c);"}, {"sha": "d63b0097e5a0ce3fe0dc5ae0bdc7a66d2fefc212", "filename": "src/test/compile-fail/const-slice-oob.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Ftest%2Fcompile-fail%2Fconst-slice-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1447fbf183e2c6c7889257bb363de3228324fb6e/src%2Ftest%2Fcompile-fail%2Fconst-slice-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-slice-oob.rs?ref=1447fbf183e2c6c7889257bb363de3228324fb6e", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n const FOO: &'static[u32] = &[1, 2, 3];\n-const BAR: u32 = FOO[5]; //~ ERROR array index out of bounds\n+const BAR: u32 = FOO[5];\n+//~^ ERROR index out of bounds: the len is 3 but the index is 5\n \n fn main() {\n     let _ = BAR;"}]}