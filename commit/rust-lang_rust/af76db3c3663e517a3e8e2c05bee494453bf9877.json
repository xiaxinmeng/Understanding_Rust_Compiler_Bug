{"sha": "af76db3c3663e517a3e8e2c05bee494453bf9877", "node_id": "C_kwDOAAsO6NoAKGFmNzZkYjNjMzY2M2U1MTdhM2U4ZTJjMDViZWU0OTQ0NTNiZjk4Nzc", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T11:26:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-10T11:26:47Z"}, "message": "move tests", "tree": {"sha": "fb5a71369171506668aacd884c59b858867c7a78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb5a71369171506668aacd884c59b858867c7a78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af76db3c3663e517a3e8e2c05bee494453bf9877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af76db3c3663e517a3e8e2c05bee494453bf9877", "html_url": "https://github.com/rust-lang/rust/commit/af76db3c3663e517a3e8e2c05bee494453bf9877", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af76db3c3663e517a3e8e2c05bee494453bf9877/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6253213a6e4c9a1d0059d5ed9834e1eb2808d927", "url": "https://api.github.com/repos/rust-lang/rust/commits/6253213a6e4c9a1d0059d5ed9834e1eb2808d927", "html_url": "https://github.com/rust-lang/rust/commit/6253213a6e4c9a1d0059d5ed9834e1eb2808d927"}], "stats": {"total": 173, "additions": 107, "deletions": 66}, "files": [{"sha": "527395992b1e4a111051044f0a57274af569b548", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/regression.rs", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/af76db3c3663e517a3e8e2c05bee494453bf9877/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af76db3c3663e517a3e8e2c05bee494453bf9877/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Fregression.rs?ref=af76db3c3663e517a3e8e2c05bee494453bf9877", "patch": "@@ -533,3 +533,110 @@ impl <A: Arbitrary> $crate::arbitrary::Arbitrary for Vec<A> {\n \"#]],\n     );\n }\n+\n+#[test]\n+fn test_old_ridl() {\n+    // This is from winapi 2.8, which do not have a link from github.\n+    check(\n+        r#\"\n+#[macro_export]\n+macro_rules! RIDL {\n+    (interface $interface:ident ($vtbl:ident) : $pinterface:ident ($pvtbl:ident)\n+        {$(\n+            fn $method:ident(&mut self $(,$p:ident : $t:ty)*) -> $rtr:ty\n+        ),+}\n+    ) => {\n+        impl $interface {\n+            $(pub unsafe fn $method(&mut self) -> $rtr {\n+                ((*self.lpVtbl).$method)(self $(,$p)*)\n+            })+\n+        }\n+    };\n+}\n+\n+RIDL!{interface ID3D11Asynchronous(ID3D11AsynchronousVtbl): ID3D11DeviceChild(ID3D11DeviceChildVtbl) {\n+    fn GetDataSize(&mut self) -> UINT\n+}}\n+\"#,\n+        expect![[r##\"\n+#[macro_export]\n+macro_rules! RIDL {\n+    (interface $interface:ident ($vtbl:ident) : $pinterface:ident ($pvtbl:ident)\n+        {$(\n+            fn $method:ident(&mut self $(,$p:ident : $t:ty)*) -> $rtr:ty\n+        ),+}\n+    ) => {\n+        impl $interface {\n+            $(pub unsafe fn $method(&mut self) -> $rtr {\n+                ((*self.lpVtbl).$method)(self $(,$p)*)\n+            })+\n+        }\n+    };\n+}\n+\n+impl ID3D11Asynchronous {\n+    pub unsafe fn GetDataSize(&mut self ) -> UINT {\n+        ((*self .lpVtbl).GetDataSize)(self )\n+    }\n+}\n+\"##]],\n+    );\n+}\n+\n+#[test]\n+fn test_quick_error() {\n+    check(\n+        r#\"\n+macro_rules! quick_error {\n+    (SORT [enum $name:ident $( #[$meta:meta] )*]\n+        items [$($( #[$imeta:meta] )*\n+                  => $iitem:ident: $imode:tt [$( $ivar:ident: $ityp:ty ),*]\n+                                {$( $ifuncs:tt )*} )* ]\n+        buf [ ]\n+        queue [ ]\n+    ) => {\n+        quick_error!(ENUMINITION [enum $name $( #[$meta] )*]\n+            body []\n+            queue [$(\n+                $( #[$imeta] )*\n+                =>\n+                $iitem: $imode [$( $ivar: $ityp ),*]\n+            )*]\n+        );\n+    };\n+}\n+quick_error ! (\n+    SORT\n+    [enum Wrapped #[derive(Debug)]]\n+    items [\n+        => One: UNIT [] {}\n+        => Two: TUPLE [s :String] {display (\"two: {}\" , s) from ()} ]\n+    buf [ ]\n+    queue [ ]\n+);\n+\n+\"#,\n+        expect![[r##\"\n+macro_rules! quick_error {\n+    (SORT [enum $name:ident $( #[$meta:meta] )*]\n+        items [$($( #[$imeta:meta] )*\n+                  => $iitem:ident: $imode:tt [$( $ivar:ident: $ityp:ty ),*]\n+                                {$( $ifuncs:tt )*} )* ]\n+        buf [ ]\n+        queue [ ]\n+    ) => {\n+        quick_error!(ENUMINITION [enum $name $( #[$meta] )*]\n+            body []\n+            queue [$(\n+                $( #[$imeta] )*\n+                =>\n+                $iitem: $imode [$( $ivar: $ityp ),*]\n+            )*]\n+        );\n+    };\n+}\n+quick_error!(ENUMINITION[enum Wrapped#[derive(Debug)]]body[]queue[ = > One: UNIT[] = > Two: TUPLE[s: String]]);\n+\n+\"##]],\n+    )\n+}"}, {"sha": "c3c753cf558b0fb114a0a18bd0cad6c7ea3f0387", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/af76db3c3663e517a3e8e2c05bee494453bf9877/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af76db3c3663e517a3e8e2c05bee494453bf9877/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=af76db3c3663e517a3e8e2c05bee494453bf9877", "patch": "@@ -98,72 +98,6 @@ fn test_attr_to_token_tree() {\n     );\n }\n \n-#[test]\n-fn test_old_ridl() {\n-    // This is from winapi 2.8, which do not have a link from github\n-    //\n-    let expanded = parse_macro(\n-        r#\"\n-#[macro_export]\n-macro_rules! RIDL {\n-    (interface $interface:ident ($vtbl:ident) : $pinterface:ident ($pvtbl:ident)\n-        {$(\n-            fn $method:ident(&mut self $(,$p:ident : $t:ty)*) -> $rtr:ty\n-        ),+}\n-    ) => {\n-        impl $interface {\n-            $(pub unsafe fn $method(&mut self) -> $rtr {\n-                ((*self.lpVtbl).$method)(self $(,$p)*)\n-            })+\n-        }\n-    };\n-}\"#,\n-    ).expand_tt(r#\"\n-    RIDL!{interface ID3D11Asynchronous(ID3D11AsynchronousVtbl): ID3D11DeviceChild(ID3D11DeviceChildVtbl) {\n-        fn GetDataSize(&mut self) -> UINT\n-    }}\"#);\n-\n-    assert_eq!(expanded.to_string(), \"impl ID3D11Asynchronous {pub unsafe fn GetDataSize (& mut self) -> UINT {((* self . lpVtbl) .GetDataSize) (self)}}\");\n-}\n-\n-#[test]\n-fn test_quick_error() {\n-    let expanded = parse_macro(\n-        r#\"\n-macro_rules! quick_error {\n-\n- (SORT [enum $name:ident $( #[$meta:meta] )*]\n-        items [$($( #[$imeta:meta] )*\n-                  => $iitem:ident: $imode:tt [$( $ivar:ident: $ityp:ty ),*]\n-                                {$( $ifuncs:tt )*} )* ]\n-        buf [ ]\n-        queue [ ]\n-    ) => {\n-        quick_error!(ENUMINITION [enum $name $( #[$meta] )*]\n-            body []\n-            queue [$(\n-                $( #[$imeta] )*\n-                =>\n-                $iitem: $imode [$( $ivar: $ityp ),*]\n-            )*]\n-        );\n-};\n-\n-}\n-\"#,\n-    )\n-    .expand_tt(\n-        r#\"\n-quick_error ! (SORT [enum Wrapped # [derive (Debug)]] items [\n-        => One : UNIT [] {}\n-        => Two : TUPLE [s :String] {display (\"two: {}\" , s) from ()}\n-    ] buf [] queue []) ;\n-\"#,\n-    );\n-\n-    assert_eq!(expanded.to_string(), \"quick_error ! (ENUMINITION [enum Wrapped # [derive (Debug)]] body [] queue [=> One : UNIT [] => Two : TUPLE [s : String]]) ;\");\n-}\n-\n #[test]\n fn test_empty_repeat_vars_in_empty_repeat_vars() {\n     parse_macro("}]}