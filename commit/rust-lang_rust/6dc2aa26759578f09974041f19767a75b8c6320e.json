{"sha": "6dc2aa26759578f09974041f19767a75b8c6320e", "node_id": "C_kwDOAAsO6NoAKDZkYzJhYTI2NzU5NTc4ZjA5OTc0MDQxZjE5NzY3YTc1YjhjNjMyMGU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-06T01:52:02Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-06T01:53:01Z"}, "message": "Add GenericParamDef::to_error and InternalSubsts::extend_with_error", "tree": {"sha": "998db5a496010e0bffb3e7f7b981ca0253aac1f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/998db5a496010e0bffb3e7f7b981ca0253aac1f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dc2aa26759578f09974041f19767a75b8c6320e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dc2aa26759578f09974041f19767a75b8c6320e", "html_url": "https://github.com/rust-lang/rust/commit/6dc2aa26759578f09974041f19767a75b8c6320e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dc2aa26759578f09974041f19767a75b8c6320e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19175e9b75234647963c84247db653f53c8c936a", "url": "https://api.github.com/repos/rust-lang/rust/commits/19175e9b75234647963c84247db653f53c8c936a", "html_url": "https://github.com/rust-lang/rust/commit/19175e9b75234647963c84247db653f53c8c936a"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "48329da3e63326049a5878ba502c28f0b1c73a19", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6dc2aa26759578f09974041f19767a75b8c6320e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc2aa26759578f09974041f19767a75b8c6320e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=6dc2aa26759578f09974041f19767a75b8c6320e", "patch": "@@ -101,6 +101,20 @@ impl GenericParamDef {\n             _ => None,\n         }\n     }\n+\n+    pub fn to_error<'tcx>(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        preceding_substs: &[ty::GenericArg<'tcx>],\n+    ) -> ty::GenericArg<'tcx> {\n+        match &self.kind {\n+            ty::GenericParamDefKind::Lifetime => tcx.lifetimes.re_static.into(),\n+            ty::GenericParamDefKind::Type { .. } => tcx.ty_error().into(),\n+            ty::GenericParamDefKind::Const { .. } => {\n+                tcx.const_error(tcx.bound_type_of(self.def_id).subst(tcx, preceding_substs)).into()\n+            }\n+        }\n+    }\n }\n \n #[derive(Default)]"}, {"sha": "1eec119616ea7cdee5eadc64d0ab86f92a8dfc05", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6dc2aa26759578f09974041f19767a75b8c6320e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc2aa26759578f09974041f19767a75b8c6320e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=6dc2aa26759578f09974041f19767a75b8c6320e", "patch": "@@ -728,19 +728,8 @@ impl<'tcx> PolyExistentialPredicate<'tcx> {\n                 } else {\n                     // If this is an ill-formed auto trait, then synthesize\n                     // new error substs for the missing generics.\n-                    let err_substs = ty::InternalSubsts::for_item(tcx, did, |def, substs| {\n-                        if def.index == 0 {\n-                            self_ty.into()\n-                        } else {\n-                            match &def.kind {\n-                                ty::GenericParamDefKind::Lifetime => tcx.lifetimes.re_static.into(),\n-                                ty::GenericParamDefKind::Type { .. } => tcx.ty_error().into(),\n-                                ty::GenericParamDefKind::Const { .. } => tcx\n-                                    .const_error(tcx.bound_type_of(def.def_id).subst(tcx, substs))\n-                                    .into(),\n-                            }\n-                        }\n-                    });\n+                    let err_substs =\n+                        ty::InternalSubsts::extend_with_error(tcx, did, &[self_ty.into()]);\n                     tcx.mk_trait_ref(did, err_substs)\n                 };\n                 self.rebind(trait_ref).without_const().to_predicate(tcx)"}, {"sha": "23507d280459230849d781b5f66205a8a12e7c6c", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6dc2aa26759578f09974041f19767a75b8c6320e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dc2aa26759578f09974041f19767a75b8c6320e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=6dc2aa26759578f09974041f19767a75b8c6320e", "patch": "@@ -352,6 +352,22 @@ impl<'tcx> InternalSubsts<'tcx> {\n         }\n     }\n \n+    // Extend an `original_substs` list to the full number of substs expected by `def_id`,\n+    // filling in the missing parameters with error ty/ct or 'static regions.\n+    pub fn extend_with_error(\n+        tcx: TyCtxt<'tcx>,\n+        def_id: DefId,\n+        original_substs: &[GenericArg<'tcx>],\n+    ) -> SubstsRef<'tcx> {\n+        ty::InternalSubsts::for_item(tcx, def_id, |def, substs| {\n+            if let Some(subst) = original_substs.get(def.index as usize) {\n+                *subst\n+            } else {\n+                def.to_error(tcx, substs)\n+            }\n+        })\n+    }\n+\n     #[inline]\n     pub fn types(&'tcx self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'tcx {\n         self.iter()"}]}