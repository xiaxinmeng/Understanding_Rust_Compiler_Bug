{"sha": "dda31b97c8833d612842b87d9dd67bf76a0fc572", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYTMxYjk3Yzg4MzNkNjEyODQyYjg3ZDlkZDY3YmY3NmEwZmM1NzI=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-12-06T21:24:40Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-16T19:07:25Z"}, "message": "Iterate on generics_of.", "tree": {"sha": "0560fd35ebc329edc8d2f678072040b70d99623e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0560fd35ebc329edc8d2f678072040b70d99623e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dda31b97c8833d612842b87d9dd67bf76a0fc572", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dda31b97c8833d612842b87d9dd67bf76a0fc572", "html_url": "https://github.com/rust-lang/rust/commit/dda31b97c8833d612842b87d9dd67bf76a0fc572", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dda31b97c8833d612842b87d9dd67bf76a0fc572/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6337594e3cab59e6c006f3f39db424c8c75c3fa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6337594e3cab59e6c006f3f39db424c8c75c3fa1", "html_url": "https://github.com/rust-lang/rust/commit/6337594e3cab59e6c006f3f39db424c8c75c3fa1"}], "stats": {"total": 17, "additions": 2, "deletions": 15}, "files": [{"sha": "cdbbd8579b4829bb8fec25b31201b014259bff7e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dda31b97c8833d612842b87d9dd67bf76a0fc572/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda31b97c8833d612842b87d9dd67bf76a0fc572/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=dda31b97c8833d612842b87d9dd67bf76a0fc572", "patch": "@@ -903,6 +903,8 @@ impl EncodeContext<'a, 'tcx> {\n                 let v = self.tcx.variances_of(def_id);\n                 record!(self.tables.variances[def_id] <- v);\n             }\n+            let g = tcx.generics_of(def_id);\n+            record!(self.tables.generics[def_id] <- g);\n         }\n         let inherent_impls = tcx.crate_inherent_impls(LOCAL_CRATE);\n         for (def_id, implementations) in inherent_impls.inherent_impls.iter() {\n@@ -948,7 +950,6 @@ impl EncodeContext<'a, 'tcx> {\n                 record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(ctor_def_id));\n             }\n         }\n-        self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n     }\n@@ -972,7 +973,6 @@ impl EncodeContext<'a, 'tcx> {\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n-        self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n     }\n@@ -1033,7 +1033,6 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.kind[def_id] <- EntryKind::Field);\n         self.encode_ident_span(def_id, field.ident);\n         self.encode_item_type(def_id);\n-        self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n     }\n@@ -1055,16 +1054,10 @@ impl EncodeContext<'a, 'tcx> {\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n-        self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n     }\n \n-    fn encode_generics(&mut self, def_id: DefId) {\n-        debug!(\"EncodeContext::encode_generics({:?})\", def_id);\n-        record!(self.tables.generics[def_id] <- self.tcx.generics_of(def_id));\n-    }\n-\n     fn encode_explicit_predicates(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_explicit_predicates({:?})\", def_id);\n         record!(self.tables.explicit_predicates[def_id] <-\n@@ -1159,7 +1152,6 @@ impl EncodeContext<'a, 'tcx> {\n         if trait_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n-        self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n     }\n@@ -1219,7 +1211,6 @@ impl EncodeContext<'a, 'tcx> {\n         if impl_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n-        self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n     }\n@@ -1498,7 +1489,6 @@ impl EncodeContext<'a, 'tcx> {\n             | hir::ItemKind::OpaqueTy(..)\n             | hir::ItemKind::Trait(..)\n             | hir::ItemKind::TraitAlias(..) => {\n-                self.encode_generics(def_id);\n                 self.encode_explicit_predicates(def_id);\n                 self.encode_inferred_outlives(def_id);\n             }\n@@ -1550,7 +1540,6 @@ impl EncodeContext<'a, 'tcx> {\n         if let ty::Closure(def_id, substs) = *ty.kind() {\n             record!(self.tables.fn_sig[def_id] <- substs.as_closure().sig());\n         }\n-        self.encode_generics(def_id.to_def_id());\n     }\n \n     fn encode_info_for_anon_const(&mut self, def_id: LocalDefId) {\n@@ -1562,7 +1551,6 @@ impl EncodeContext<'a, 'tcx> {\n \n         record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(qualifs, const_data));\n         self.encode_item_type(def_id.to_def_id());\n-        self.encode_generics(def_id.to_def_id());\n         self.encode_explicit_predicates(def_id.to_def_id());\n         self.encode_inferred_outlives(def_id.to_def_id());\n     }\n@@ -1844,7 +1832,6 @@ impl EncodeContext<'a, 'tcx> {\n         if let hir::ForeignItemKind::Fn(..) = nitem.kind {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n-        self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n     }"}]}