{"sha": "17e8752acafe7240f38bcb114586ff0568224cad", "node_id": "C_kwDOAAsO6NoAKDE3ZTg3NTJhY2FmZTcyNDBmMzhiY2IxMTQ1ODZmZjA1NjgyMjRjYWQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-25T14:28:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-25T14:28:04Z"}, "message": "Auto merge of #102265 - fee1-dead-contrib:rollup-a7fccbg, r=fee1-dead\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #98111 (Clarify `[T]::select_nth_unstable*` return values)\n - #101431 (Look at move place's type when suggesting mutable reborrow)\n - #101800 (Constify slice.split_at_mut(_unchecked))\n - #101997 (Remove support for legacy PM)\n - #102194 (Note the type when unable to drop values in compile time)\n - #102200 (Constify Default impl's for Arrays and Tuples.)\n - #102245 (Constify cmp_min_max_by.)\n - #102259 (Type-annotate and simplify documentation of Option::unwrap_or_default)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "66e818d3b7bd502f2f14853901e73e6a6823e287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66e818d3b7bd502f2f14853901e73e6a6823e287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17e8752acafe7240f38bcb114586ff0568224cad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17e8752acafe7240f38bcb114586ff0568224cad", "html_url": "https://github.com/rust-lang/rust/commit/17e8752acafe7240f38bcb114586ff0568224cad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17e8752acafe7240f38bcb114586ff0568224cad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4652f5eb25b76c24fc40b7267d87a07d5876901f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4652f5eb25b76c24fc40b7267d87a07d5876901f", "html_url": "https://github.com/rust-lang/rust/commit/4652f5eb25b76c24fc40b7267d87a07d5876901f"}, {"sha": "c50303ca1ff0266c08678047e7f05e88a2cadac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c50303ca1ff0266c08678047e7f05e88a2cadac4", "html_url": "https://github.com/rust-lang/rust/commit/c50303ca1ff0266c08678047e7f05e88a2cadac4"}], "stats": {"total": 1177, "additions": 315, "deletions": 862}, "files": [{"sha": "16c0b644e4f709d441658fd2a75c5e3c127cc27f", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -3263,7 +3263,6 @@ dependencies = [\n  \"bitflags\",\n  \"cstr\",\n  \"libc\",\n- \"libloading\",\n  \"measureme\",\n  \"object 0.29.0\",\n  \"rustc-demangle\","}, {"sha": "799b3f7f5756fe4c3a33cde4cd0364894ad1542a", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -198,7 +198,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     move_span,\n                     move_spans,\n                     *moved_place,\n-                    Some(used_place),\n                     partially_str,\n                     loop_message,\n                     move_msg,"}, {"sha": "7ccb679d88b2dc021e8fb445d4be31c6177bd920", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -972,7 +972,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         move_span: Span,\n         move_spans: UseSpans<'tcx>,\n         moved_place: Place<'tcx>,\n-        used_place: Option<PlaceRef<'tcx>>,\n         partially_str: &str,\n         loop_message: &str,\n         move_msg: &str,\n@@ -1060,9 +1059,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 place_name, partially_str, loop_message\n                             ),\n                         );\n-                        // If we have a `&mut` ref, we need to reborrow.\n-                        if let Some(ty::Ref(_, _, hir::Mutability::Mut)) = used_place\n-                            .map(|used_place| used_place.ty(self.body, self.infcx.tcx).ty.kind())\n+                        // If the moved place was a `&mut` ref, then we can\n+                        // suggest to reborrow it where it was moved, so it\n+                        // will still be valid by the time we get to the usage.\n+                        if let ty::Ref(_, _, hir::Mutability::Mut) =\n+                            moved_place.ty(self.body, self.infcx.tcx).ty.kind()\n                         {\n                             // If we are in a loop this will be suggested later.\n                             if !is_loop_move {"}, {"sha": "5a47f45677ecbfd1b546f4f74f5ec83e833687cf", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -401,7 +401,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         };\n         if let Some(use_spans) = use_spans {\n             self.explain_captures(\n-                &mut err, span, span, use_spans, move_place, None, \"\", \"\", \"\", false, true,\n+                &mut err, span, span, use_spans, move_place, \"\", \"\", \"\", false, true,\n             );\n         }\n         err"}, {"sha": "a068aa2ec6244e5bc1f93e880ac80f9016a0117b", "filename": "compiler/rustc_codegen_llvm/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_codegen_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_codegen_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2FCargo.toml?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -11,7 +11,6 @@ doctest = false\n bitflags = \"1.0\"\n cstr = \"0.2\"\n libc = \"0.2\"\n-libloading = \"0.7.1\"\n measureme = \"10.0.0\"\n object = { version = \"0.29.0\", default-features = false, features = [\"std\", \"read_core\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n tracing = \"0.1\""}, {"sha": "2049422b79a304c523d933f85d2af47ad1e74e2b", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 6, "deletions": 60, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,8 +1,6 @@\n-use crate::back::write::{\n-    self, save_temp_bitcode, to_llvm_opt_settings, with_llvm_pmb, DiagnosticHandlers,\n-};\n-use crate::llvm::{self, build_string, False, True};\n-use crate::{llvm_util, LlvmCodegenBackend, ModuleLlvm};\n+use crate::back::write::{self, save_temp_bitcode, DiagnosticHandlers};\n+use crate::llvm::{self, build_string};\n+use crate::{LlvmCodegenBackend, ModuleLlvm};\n use object::read::archive::ArchiveFile;\n use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModule, ThinShared};\n use rustc_codegen_ssa::back::symbol_export;\n@@ -597,61 +595,9 @@ pub(crate) fn run_pass_manager(\n                 1,\n             );\n         }\n-        if llvm_util::should_use_new_llvm_pass_manager(\n-            &config.new_llvm_pass_manager,\n-            &cgcx.target_arch,\n-        ) {\n-            let opt_stage = if thin { llvm::OptStage::ThinLTO } else { llvm::OptStage::FatLTO };\n-            let opt_level = config.opt_level.unwrap_or(config::OptLevel::No);\n-            write::optimize_with_new_llvm_pass_manager(\n-                cgcx,\n-                diag_handler,\n-                module,\n-                config,\n-                opt_level,\n-                opt_stage,\n-            )?;\n-            debug!(\"lto done\");\n-            return Ok(());\n-        }\n-\n-        let pm = llvm::LLVMCreatePassManager();\n-        llvm::LLVMAddAnalysisPasses(module.module_llvm.tm, pm);\n-\n-        if config.verify_llvm_ir {\n-            let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr().cast());\n-            llvm::LLVMRustAddPass(pm, pass.unwrap());\n-        }\n-\n-        let opt_level = config\n-            .opt_level\n-            .map(|x| to_llvm_opt_settings(x).0)\n-            .unwrap_or(llvm::CodeGenOptLevel::None);\n-        with_llvm_pmb(module.module_llvm.llmod(), config, opt_level, false, &mut |b| {\n-            if thin {\n-                llvm::LLVMRustPassManagerBuilderPopulateThinLTOPassManager(b, pm);\n-            } else {\n-                llvm::LLVMRustPassManagerBuilderPopulateLTOPassManager(\n-                    b, pm, /* Internalize = */ False, /* RunInliner = */ True,\n-                );\n-            }\n-        });\n-\n-        // We always generate bitcode through ThinLTOBuffers,\n-        // which do not support anonymous globals\n-        if config.bitcode_needed() {\n-            let pass = llvm::LLVMRustFindAndCreatePass(\"name-anon-globals\\0\".as_ptr().cast());\n-            llvm::LLVMRustAddPass(pm, pass.unwrap());\n-        }\n-\n-        if config.verify_llvm_ir {\n-            let pass = llvm::LLVMRustFindAndCreatePass(\"verify\\0\".as_ptr().cast());\n-            llvm::LLVMRustAddPass(pm, pass.unwrap());\n-        }\n-\n-        llvm::LLVMRunPassManager(pm, module.module_llvm.llmod());\n-\n-        llvm::LLVMDisposePassManager(pm);\n+        let opt_stage = if thin { llvm::OptStage::ThinLTO } else { llvm::OptStage::FatLTO };\n+        let opt_level = config.opt_level.unwrap_or(config::OptLevel::No);\n+        write::llvm_optimize(cgcx, diag_handler, module, config, opt_level, opt_stage)?;\n     }\n     debug!(\"lto done\");\n     Ok(())"}, {"sha": "db526746fa70aeceb4cb61356a6c7be8890dc4f6", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 9, "deletions": 250, "changes": 259, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -21,7 +21,6 @@ use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_errors::{FatalError, Handler, Level};\n use rustc_fs_util::{link_or_copy, path_to_c_string};\n-use rustc_middle::bug;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{self, Lto, OutputType, Passes, SplitDwarfKind, SwitchWithOptPath};\n use rustc_session::Session;\n@@ -417,7 +416,7 @@ fn get_instr_profile_output_path(config: &ModuleConfig) -> Option<CString> {\n     }\n }\n \n-pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n+pub(crate) unsafe fn llvm_optimize(\n     cgcx: &CodegenContext<LlvmCodegenBackend>,\n     diag_handler: &Handler,\n     module: &ModuleCodegen<ModuleLlvm>,\n@@ -465,7 +464,7 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n     // FIXME: NewPM doesn't provide a facility to pass custom InlineParams.\n     // We would have to add upstream support for this first, before we can support\n     // config.inline_threshold and our more aggressive default thresholds.\n-    let result = llvm::LLVMRustOptimizeWithNewPassManager(\n+    let result = llvm::LLVMRustOptimize(\n         module.module_llvm.llmod(),\n         &*module.module_llvm.tm,\n         to_pass_builder_opt_level(opt_level),\n@@ -509,203 +508,29 @@ pub(crate) unsafe fn optimize(\n \n     let llmod = module.module_llvm.llmod();\n     let llcx = &*module.module_llvm.llcx;\n-    let tm = &*module.module_llvm.tm;\n     let _handlers = DiagnosticHandlers::new(cgcx, diag_handler, llcx);\n \n     let module_name = module.name.clone();\n     let module_name = Some(&module_name[..]);\n \n-    if let Some(false) = config.new_llvm_pass_manager && llvm_util::get_version() >= (15, 0, 0) {\n-        diag_handler.warn(\n-            \"ignoring `-Z new-llvm-pass-manager=no`, which is no longer supported with LLVM 15\",\n-        );\n-    }\n-\n     if config.emit_no_opt_bc {\n         let out = cgcx.output_filenames.temp_path_ext(\"no-opt.bc\", module_name);\n         let out = path_to_c_string(&out);\n         llvm::LLVMWriteBitcodeToFile(llmod, out.as_ptr());\n     }\n \n     if let Some(opt_level) = config.opt_level {\n-        if llvm_util::should_use_new_llvm_pass_manager(\n-            &config.new_llvm_pass_manager,\n-            &cgcx.target_arch,\n-        ) {\n-            let opt_stage = match cgcx.lto {\n-                Lto::Fat => llvm::OptStage::PreLinkFatLTO,\n-                Lto::Thin | Lto::ThinLocal => llvm::OptStage::PreLinkThinLTO,\n-                _ if cgcx.opts.cg.linker_plugin_lto.enabled() => llvm::OptStage::PreLinkThinLTO,\n-                _ => llvm::OptStage::PreLinkNoLTO,\n-            };\n-            return optimize_with_new_llvm_pass_manager(\n-                cgcx,\n-                diag_handler,\n-                module,\n-                config,\n-                opt_level,\n-                opt_stage,\n-            );\n-        }\n-\n-        if cgcx.prof.llvm_recording_enabled() {\n-            diag_handler\n-                .warn(\"`-Z self-profile-events = llvm` requires `-Z new-llvm-pass-manager`\");\n-        }\n-\n-        // Create the two optimizing pass managers. These mirror what clang\n-        // does, and are by populated by LLVM's default PassManagerBuilder.\n-        // Each manager has a different set of passes, but they also share\n-        // some common passes.\n-        let fpm = llvm::LLVMCreateFunctionPassManagerForModule(llmod);\n-        let mpm = llvm::LLVMCreatePassManager();\n-\n-        {\n-            let find_pass = |pass_name: &str| {\n-                let pass_name = SmallCStr::new(pass_name);\n-                llvm::LLVMRustFindAndCreatePass(pass_name.as_ptr())\n-            };\n-\n-            if config.verify_llvm_ir {\n-                // Verification should run as the very first pass.\n-                llvm::LLVMRustAddPass(fpm, find_pass(\"verify\").unwrap());\n-            }\n-\n-            let mut extra_passes = Vec::new();\n-            let mut have_name_anon_globals_pass = false;\n-\n-            for pass_name in &config.passes {\n-                if pass_name == \"lint\" {\n-                    // Linting should also be performed early, directly on the generated IR.\n-                    llvm::LLVMRustAddPass(fpm, find_pass(\"lint\").unwrap());\n-                    continue;\n-                }\n-\n-                if let Some(pass) = find_pass(pass_name) {\n-                    extra_passes.push(pass);\n-                } else {\n-                    diag_handler.warn(&format!(\"unknown pass `{}`, ignoring\", pass_name));\n-                }\n-\n-                if pass_name == \"name-anon-globals\" {\n-                    have_name_anon_globals_pass = true;\n-                }\n-            }\n-\n-            // Instrumentation must be inserted before optimization,\n-            // otherwise LLVM may optimize some functions away which\n-            // breaks llvm-cov.\n-            //\n-            // This mirrors what Clang does in lib/CodeGen/BackendUtil.cpp.\n-            if config.instrument_gcov {\n-                llvm::LLVMRustAddPass(mpm, find_pass(\"insert-gcov-profiling\").unwrap());\n-            }\n-            if config.instrument_coverage {\n-                llvm::LLVMRustAddPass(mpm, find_pass(\"instrprof\").unwrap());\n-            }\n-            if config.debug_info_for_profiling {\n-                llvm::LLVMRustAddPass(mpm, find_pass(\"add-discriminators\").unwrap());\n-            }\n-\n-            add_sanitizer_passes(config, &mut extra_passes);\n-\n-            // Some options cause LLVM bitcode to be emitted, which uses ThinLTOBuffers, so we need\n-            // to make sure we run LLVM's NameAnonGlobals pass when emitting bitcode; otherwise\n-            // we'll get errors in LLVM.\n-            let using_thin_buffers = config.bitcode_needed();\n-            if !config.no_prepopulate_passes {\n-                llvm::LLVMAddAnalysisPasses(tm, fpm);\n-                llvm::LLVMAddAnalysisPasses(tm, mpm);\n-                let opt_level = to_llvm_opt_settings(opt_level).0;\n-                let prepare_for_thin_lto = cgcx.lto == Lto::Thin\n-                    || cgcx.lto == Lto::ThinLocal\n-                    || (cgcx.lto != Lto::Fat && cgcx.opts.cg.linker_plugin_lto.enabled());\n-                with_llvm_pmb(llmod, config, opt_level, prepare_for_thin_lto, &mut |b| {\n-                    llvm::LLVMRustAddLastExtensionPasses(\n-                        b,\n-                        extra_passes.as_ptr(),\n-                        extra_passes.len() as size_t,\n-                    );\n-                    llvm::LLVMRustPassManagerBuilderPopulateFunctionPassManager(b, fpm);\n-                    llvm::LLVMRustPassManagerBuilderPopulateModulePassManager(b, mpm);\n-                });\n-\n-                have_name_anon_globals_pass = have_name_anon_globals_pass || prepare_for_thin_lto;\n-                if using_thin_buffers && !prepare_for_thin_lto {\n-                    llvm::LLVMRustAddPass(mpm, find_pass(\"name-anon-globals\").unwrap());\n-                    have_name_anon_globals_pass = true;\n-                }\n-            } else {\n-                // If we don't use the standard pipeline, directly populate the MPM\n-                // with the extra passes.\n-                for pass in extra_passes {\n-                    llvm::LLVMRustAddPass(mpm, pass);\n-                }\n-            }\n-\n-            if using_thin_buffers && !have_name_anon_globals_pass {\n-                // As described above, this will probably cause an error in LLVM\n-                if config.no_prepopulate_passes {\n-                    diag_handler.err(\n-                        \"The current compilation is going to use thin LTO buffers \\\n-                                      without running LLVM's NameAnonGlobals pass. \\\n-                                      This will likely cause errors in LLVM. Consider adding \\\n-                                      -C passes=name-anon-globals to the compiler command line.\",\n-                    );\n-                } else {\n-                    bug!(\n-                        \"We are using thin LTO buffers without running the NameAnonGlobals pass. \\\n-                          This will likely cause errors in LLVM and should never happen.\"\n-                    );\n-                }\n-            }\n-        }\n-\n-        diag_handler.abort_if_errors();\n-\n-        // Finally, run the actual optimization passes\n-        {\n-            let _timer = cgcx.prof.extra_verbose_generic_activity(\n-                \"LLVM_module_optimize_function_passes\",\n-                &*module.name,\n-            );\n-            llvm::LLVMRustRunFunctionPassManager(fpm, llmod);\n-        }\n-        {\n-            let _timer = cgcx.prof.extra_verbose_generic_activity(\n-                \"LLVM_module_optimize_module_passes\",\n-                &*module.name,\n-            );\n-            llvm::LLVMRunPassManager(mpm, llmod);\n-        }\n-\n-        // Deallocate managers that we're now done with\n-        llvm::LLVMDisposePassManager(fpm);\n-        llvm::LLVMDisposePassManager(mpm);\n+        let opt_stage = match cgcx.lto {\n+            Lto::Fat => llvm::OptStage::PreLinkFatLTO,\n+            Lto::Thin | Lto::ThinLocal => llvm::OptStage::PreLinkThinLTO,\n+            _ if cgcx.opts.cg.linker_plugin_lto.enabled() => llvm::OptStage::PreLinkThinLTO,\n+            _ => llvm::OptStage::PreLinkNoLTO,\n+        };\n+        return llvm_optimize(cgcx, diag_handler, module, config, opt_level, opt_stage);\n     }\n     Ok(())\n }\n \n-unsafe fn add_sanitizer_passes(config: &ModuleConfig, passes: &mut Vec<&'static mut llvm::Pass>) {\n-    if config.sanitizer.contains(SanitizerSet::ADDRESS) {\n-        let recover = config.sanitizer_recover.contains(SanitizerSet::ADDRESS);\n-        passes.push(llvm::LLVMRustCreateAddressSanitizerFunctionPass(recover));\n-        passes.push(llvm::LLVMRustCreateModuleAddressSanitizerPass(recover));\n-    }\n-    if config.sanitizer.contains(SanitizerSet::MEMORY) {\n-        let track_origins = config.sanitizer_memory_track_origins as c_int;\n-        let recover = config.sanitizer_recover.contains(SanitizerSet::MEMORY);\n-        passes.push(llvm::LLVMRustCreateMemorySanitizerPass(track_origins, recover));\n-    }\n-    if config.sanitizer.contains(SanitizerSet::THREAD) {\n-        passes.push(llvm::LLVMRustCreateThreadSanitizerPass());\n-    }\n-    if config.sanitizer.contains(SanitizerSet::HWADDRESS) {\n-        let recover = config.sanitizer_recover.contains(SanitizerSet::HWADDRESS);\n-        passes.push(llvm::LLVMRustCreateHWAddressSanitizerPass(recover));\n-    }\n-}\n-\n pub(crate) fn link(\n     cgcx: &CodegenContext<LlvmCodegenBackend>,\n     diag_handler: &Handler,\n@@ -1072,72 +897,6 @@ unsafe fn embed_bitcode(\n     }\n }\n \n-pub unsafe fn with_llvm_pmb(\n-    llmod: &llvm::Module,\n-    config: &ModuleConfig,\n-    opt_level: llvm::CodeGenOptLevel,\n-    prepare_for_thin_lto: bool,\n-    f: &mut dyn FnMut(&llvm::PassManagerBuilder),\n-) {\n-    use std::ptr;\n-\n-    // Create the PassManagerBuilder for LLVM. We configure it with\n-    // reasonable defaults and prepare it to actually populate the pass\n-    // manager.\n-    let builder = llvm::LLVMRustPassManagerBuilderCreate();\n-    let opt_size = config.opt_size.map_or(llvm::CodeGenOptSizeNone, |x| to_llvm_opt_settings(x).1);\n-    let inline_threshold = config.inline_threshold;\n-    let pgo_gen_path = get_pgo_gen_path(config);\n-    let pgo_use_path = get_pgo_use_path(config);\n-    let pgo_sample_use_path = get_pgo_sample_use_path(config);\n-\n-    llvm::LLVMRustConfigurePassManagerBuilder(\n-        builder,\n-        opt_level,\n-        config.merge_functions,\n-        config.vectorize_slp,\n-        config.vectorize_loop,\n-        prepare_for_thin_lto,\n-        pgo_gen_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n-        pgo_use_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n-        pgo_sample_use_path.as_ref().map_or(ptr::null(), |s| s.as_ptr()),\n-        opt_size as c_int,\n-    );\n-\n-    llvm::LLVMRustAddBuilderLibraryInfo(builder, llmod, config.no_builtins);\n-\n-    // Here we match what clang does (kinda). For O0 we only inline\n-    // always-inline functions (but don't add lifetime intrinsics), at O1 we\n-    // inline with lifetime intrinsics, and O2+ we add an inliner with a\n-    // thresholds copied from clang.\n-    match (opt_level, opt_size, inline_threshold) {\n-        (.., Some(t)) => {\n-            llvm::LLVMRustPassManagerBuilderUseInlinerWithThreshold(builder, t);\n-        }\n-        (llvm::CodeGenOptLevel::Aggressive, ..) => {\n-            llvm::LLVMRustPassManagerBuilderUseInlinerWithThreshold(builder, 275);\n-        }\n-        (_, llvm::CodeGenOptSizeDefault, _) => {\n-            llvm::LLVMRustPassManagerBuilderUseInlinerWithThreshold(builder, 75);\n-        }\n-        (_, llvm::CodeGenOptSizeAggressive, _) => {\n-            llvm::LLVMRustPassManagerBuilderUseInlinerWithThreshold(builder, 25);\n-        }\n-        (llvm::CodeGenOptLevel::None, ..) => {\n-            llvm::LLVMRustAddAlwaysInlinePass(builder, config.emit_lifetime_markers);\n-        }\n-        (llvm::CodeGenOptLevel::Less, ..) => {\n-            llvm::LLVMRustAddAlwaysInlinePass(builder, config.emit_lifetime_markers);\n-        }\n-        (llvm::CodeGenOptLevel::Default, ..) => {\n-            llvm::LLVMRustPassManagerBuilderUseInlinerWithThreshold(builder, 225);\n-        }\n-    }\n-\n-    f(builder);\n-    llvm::LLVMRustPassManagerBuilderDispose(builder);\n-}\n-\n // Create a `__imp_<symbol> = &symbol` global for every public static `symbol`.\n // This is required to satisfy `dllimport` references to static data in .rlibs\n // when using MSVC linker.  We do this only for data, as linker can fix up"}, {"sha": "42cb694c0e75a1b4cc382482bfee138a550b2a30", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 72, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1792,18 +1792,9 @@ extern \"C\" {\n     /// Writes a module to the specified path. Returns 0 on success.\n     pub fn LLVMWriteBitcodeToFile(M: &Module, Path: *const c_char) -> c_int;\n \n-    /// Creates a pass manager.\n+    /// Creates a legacy pass manager -- only used for final codegen.\n     pub fn LLVMCreatePassManager<'a>() -> &'a mut PassManager<'a>;\n \n-    /// Creates a function-by-function pass manager\n-    pub fn LLVMCreateFunctionPassManagerForModule(M: &Module) -> &mut PassManager<'_>;\n-\n-    /// Disposes a pass manager.\n-    pub fn LLVMDisposePassManager<'a>(PM: &'a mut PassManager<'a>);\n-\n-    /// Runs a pass manager on a module.\n-    pub fn LLVMRunPassManager<'a>(PM: &PassManager<'a>, M: &'a Module) -> Bool;\n-\n     pub fn LLVMInitializePasses();\n \n     pub fn LLVMTimeTraceProfilerInitialize();\n@@ -1814,32 +1805,6 @@ extern \"C\" {\n \n     pub fn LLVMAddAnalysisPasses<'a>(T: &'a TargetMachine, PM: &PassManager<'a>);\n \n-    pub fn LLVMRustPassManagerBuilderCreate() -> &'static mut PassManagerBuilder;\n-    pub fn LLVMRustPassManagerBuilderDispose(PMB: &'static mut PassManagerBuilder);\n-    pub fn LLVMRustPassManagerBuilderUseInlinerWithThreshold(\n-        PMB: &PassManagerBuilder,\n-        threshold: c_uint,\n-    );\n-    pub fn LLVMRustPassManagerBuilderPopulateModulePassManager(\n-        PMB: &PassManagerBuilder,\n-        PM: &PassManager<'_>,\n-    );\n-\n-    pub fn LLVMRustPassManagerBuilderPopulateFunctionPassManager(\n-        PMB: &PassManagerBuilder,\n-        PM: &PassManager<'_>,\n-    );\n-    pub fn LLVMRustPassManagerBuilderPopulateLTOPassManager(\n-        PMB: &PassManagerBuilder,\n-        PM: &PassManager<'_>,\n-        Internalize: Bool,\n-        RunInliner: Bool,\n-    );\n-    pub fn LLVMRustPassManagerBuilderPopulateThinLTOPassManager(\n-        PMB: &PassManagerBuilder,\n-        PM: &PassManager<'_>,\n-    );\n-\n     pub fn LLVMGetHostCPUFeatures() -> *mut c_char;\n \n     pub fn LLVMDisposeMessage(message: *mut c_char);\n@@ -2244,22 +2209,6 @@ extern \"C\" {\n \n     pub fn LLVMIsAConstantInt(value_ref: &Value) -> Option<&ConstantInt>;\n \n-    pub fn LLVMRustFindAndCreatePass(Pass: *const c_char) -> Option<&'static mut Pass>;\n-    pub fn LLVMRustCreateAddressSanitizerFunctionPass(Recover: bool) -> &'static mut Pass;\n-    pub fn LLVMRustCreateModuleAddressSanitizerPass(Recover: bool) -> &'static mut Pass;\n-    pub fn LLVMRustCreateMemorySanitizerPass(\n-        TrackOrigins: c_int,\n-        Recover: bool,\n-    ) -> &'static mut Pass;\n-    pub fn LLVMRustCreateThreadSanitizerPass() -> &'static mut Pass;\n-    pub fn LLVMRustCreateHWAddressSanitizerPass(Recover: bool) -> &'static mut Pass;\n-    pub fn LLVMRustAddPass(PM: &PassManager<'_>, Pass: &'static mut Pass);\n-    pub fn LLVMRustAddLastExtensionPasses(\n-        PMB: &PassManagerBuilder,\n-        Passes: *const &'static mut Pass,\n-        NumPasses: size_t,\n-    );\n-\n     pub fn LLVMRustHasFeature(T: &TargetMachine, s: *const c_char) -> bool;\n \n     pub fn LLVMRustPrintTargetCPUs(T: &TargetMachine);\n@@ -2293,29 +2242,11 @@ extern \"C\" {\n         SplitDwarfFile: *const c_char,\n     ) -> Option<&'static mut TargetMachine>;\n     pub fn LLVMRustDisposeTargetMachine(T: &'static mut TargetMachine);\n-    pub fn LLVMRustAddBuilderLibraryInfo<'a>(\n-        PMB: &'a PassManagerBuilder,\n-        M: &'a Module,\n-        DisableSimplifyLibCalls: bool,\n-    );\n-    pub fn LLVMRustConfigurePassManagerBuilder(\n-        PMB: &PassManagerBuilder,\n-        OptLevel: CodeGenOptLevel,\n-        MergeFunctions: bool,\n-        SLPVectorize: bool,\n-        LoopVectorize: bool,\n-        PrepareForThinLTO: bool,\n-        PGOGenPath: *const c_char,\n-        PGOUsePath: *const c_char,\n-        PGOSampleUsePath: *const c_char,\n-        SizeLevel: c_int,\n-    );\n     pub fn LLVMRustAddLibraryInfo<'a>(\n         PM: &PassManager<'a>,\n         M: &'a Module,\n         DisableSimplifyLibCalls: bool,\n     );\n-    pub fn LLVMRustRunFunctionPassManager<'a>(PM: &PassManager<'a>, M: &'a Module);\n     pub fn LLVMRustWriteOutputFile<'a>(\n         T: &'a TargetMachine,\n         PM: &PassManager<'a>,\n@@ -2324,7 +2255,7 @@ extern \"C\" {\n         DwoOutput: *const c_char,\n         FileType: FileType,\n     ) -> LLVMRustResult;\n-    pub fn LLVMRustOptimizeWithNewPassManager<'a>(\n+    pub fn LLVMRustOptimize<'a>(\n         M: &'a Module,\n         TM: &'a TargetMachine,\n         OptLevel: PassBuilderOptLevel,\n@@ -2362,7 +2293,6 @@ extern \"C\" {\n     pub fn LLVMRustSetLLVMOptions(Argc: c_int, Argv: *const *const c_char);\n     pub fn LLVMRustPrintPasses();\n     pub fn LLVMRustSetNormalizedTarget(M: &Module, triple: *const c_char);\n-    pub fn LLVMRustAddAlwaysInlinePass(P: &PassManagerBuilder, AddLifetimes: bool);\n     pub fn LLVMRustRunRestrictionPass(M: &Module, syms: *const *const c_char, len: size_t);\n \n     pub fn LLVMRustOpenArchive(path: *const c_char) -> Option<&'static mut Archive>;"}, {"sha": "2fd58567c487406d6864849027ddd03ca44ccf07", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,7 +1,6 @@\n use crate::back::write::create_informational_target_machine;\n-use crate::{llvm, llvm_util};\n+use crate::llvm;\n use libc::c_int;\n-use libloading::Library;\n use rustc_codegen_ssa::target_features::{\n     supported_target_features, tied_target_features, RUSTC_SPECIFIC_FEATURES,\n };\n@@ -16,7 +15,6 @@ use rustc_target::spec::{MergeFunctions, PanicStrategy};\n use smallvec::{smallvec, SmallVec};\n use std::ffi::{CStr, CString};\n \n-use std::mem;\n use std::path::Path;\n use std::ptr;\n use std::slice;\n@@ -120,22 +118,6 @@ unsafe fn configure_llvm(sess: &Session) {\n \n     llvm::LLVMInitializePasses();\n \n-    // Use the legacy plugin registration if we don't use the new pass manager\n-    if !should_use_new_llvm_pass_manager(\n-        &sess.opts.unstable_opts.new_llvm_pass_manager,\n-        &sess.target.arch,\n-    ) {\n-        // Register LLVM plugins by loading them into the compiler process.\n-        for plugin in &sess.opts.unstable_opts.llvm_plugins {\n-            let lib = Library::new(plugin).unwrap_or_else(|e| bug!(\"couldn't load plugin: {}\", e));\n-            debug!(\"LLVM plugin loaded successfully {:?} ({})\", lib, plugin);\n-\n-            // Intentionally leak the dynamic library. We can't ever unload it\n-            // since the library can make things that will live arbitrarily long.\n-            mem::forget(lib);\n-        }\n-    }\n-\n     rustc_llvm::initialize_available_targets();\n \n     llvm::LLVMRustSetLLVMOptions(llvm_args.len() as c_int, llvm_args.as_ptr());\n@@ -539,19 +521,3 @@ pub fn tune_cpu(sess: &Session) -> Option<&str> {\n     let name = sess.opts.unstable_opts.tune_cpu.as_ref()?;\n     Some(handle_native(name))\n }\n-\n-pub(crate) fn should_use_new_llvm_pass_manager(user_opt: &Option<bool>, target_arch: &str) -> bool {\n-    // The new pass manager is enabled by default for LLVM >= 13.\n-    // This matches Clang, which also enables it since Clang 13.\n-\n-    // Since LLVM 15, the legacy pass manager is no longer supported.\n-    if llvm_util::get_version() >= (15, 0, 0) {\n-        return true;\n-    }\n-\n-    // There are some perf issues with the new pass manager when targeting\n-    // s390x with LLVM 13, so enable the new pass manager only with LLVM 14.\n-    // See https://github.com/rust-lang/rust/issues/89609.\n-    let min_version = if target_arch == \"s390x\" { 14 } else { 13 };\n-    user_opt.unwrap_or_else(|| llvm_util::get_version() >= (min_version, 0, 0))\n-}"}, {"sha": "680b9b642d9b279bec3e16689c27787f83db823f", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -113,7 +113,6 @@ pub struct ModuleConfig {\n     pub vectorize_slp: bool,\n     pub merge_functions: bool,\n     pub inline_threshold: Option<u32>,\n-    pub new_llvm_pass_manager: Option<bool>,\n     pub emit_lifetime_markers: bool,\n     pub llvm_plugins: Vec<String>,\n }\n@@ -265,7 +264,6 @@ impl ModuleConfig {\n             },\n \n             inline_threshold: sess.opts.cg.inline_threshold,\n-            new_llvm_pass_manager: sess.opts.unstable_opts.new_llvm_pass_manager,\n             emit_lifetime_markers: sess.emit_lifetime_markers(),\n             llvm_plugins: if_regular!(sess.opts.unstable_opts.llvm_plugins.clone(), vec![]),\n         }"}, {"sha": "b0dcbf76b01b0a62c4f53280d4e35eaeaf24e913", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1009,7 +1009,10 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n \n                 if needs_non_const_drop {\n                     self.check_op_spanned(\n-                        ops::LiveDrop { dropped_at: Some(terminator.source_info.span) },\n+                        ops::LiveDrop {\n+                            dropped_at: Some(terminator.source_info.span),\n+                            dropped_ty: ty_of_dropped_place,\n+                        },\n                         err_span,\n                     );\n                 }"}, {"sha": "b56b230201ed406336aa145065b8086e445a4ccd", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -422,10 +422,11 @@ impl<'tcx> NonConstOp<'tcx> for InlineAsm {\n }\n \n #[derive(Debug)]\n-pub struct LiveDrop {\n+pub struct LiveDrop<'tcx> {\n     pub dropped_at: Option<Span>,\n+    pub dropped_ty: Ty<'tcx>,\n }\n-impl<'tcx> NonConstOp<'tcx> for LiveDrop {\n+impl<'tcx> NonConstOp<'tcx> for LiveDrop<'tcx> {\n     fn build_error(\n         &self,\n         ccx: &ConstCx<'_, 'tcx>,\n@@ -435,9 +436,13 @@ impl<'tcx> NonConstOp<'tcx> for LiveDrop {\n             ccx.tcx.sess,\n             span,\n             E0493,\n-            \"destructors cannot be evaluated at compile-time\"\n+            \"destructor of `{}` cannot be evaluated at compile-time\",\n+            self.dropped_ty,\n+        );\n+        err.span_label(\n+            span,\n+            format!(\"the destructor for this type cannot be evaluated in {}s\", ccx.const_kind()),\n         );\n-        err.span_label(span, format!(\"{}s cannot evaluate destructors\", ccx.const_kind()));\n         if let Some(span) = self.dropped_at {\n             err.span_label(span, \"value is dropped here\");\n         }"}, {"sha": "d4570c59889145e3b885b41e5939649f7246ac4c", "filename": "compiler/rustc_const_eval/src/transform/check_consts/post_drop_elaboration.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fpost_drop_elaboration.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,6 +1,6 @@\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::{self, BasicBlock, Location};\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{Ty, TyCtxt};\n use rustc_span::{symbol::sym, Span};\n \n use super::check::Qualifs;\n@@ -58,9 +58,9 @@ impl<'mir, 'tcx> std::ops::Deref for CheckLiveDrops<'mir, 'tcx> {\n     }\n }\n \n-impl CheckLiveDrops<'_, '_> {\n-    fn check_live_drop(&self, span: Span) {\n-        ops::LiveDrop { dropped_at: None }.build_error(self.ccx, span).emit();\n+impl<'tcx> CheckLiveDrops<'_, 'tcx> {\n+    fn check_live_drop(&self, span: Span, dropped_ty: Ty<'tcx>) {\n+        ops::LiveDrop { dropped_at: None, dropped_ty }.build_error(self.ccx, span).emit();\n     }\n }\n \n@@ -90,7 +90,7 @@ impl<'tcx> Visitor<'tcx> for CheckLiveDrops<'_, 'tcx> {\n                 }\n \n                 if dropped_place.is_indirect() {\n-                    self.check_live_drop(terminator.source_info.span);\n+                    self.check_live_drop(terminator.source_info.span, dropped_ty);\n                     return;\n                 }\n \n@@ -101,7 +101,7 @@ impl<'tcx> Visitor<'tcx> for CheckLiveDrops<'_, 'tcx> {\n                 if self.qualifs.needs_non_const_drop(self.ccx, dropped_place.local, location) {\n                     // Use the span where the dropped local was declared for the error.\n                     let span = self.body.local_decls[dropped_place.local].source_info.span;\n-                    self.check_live_drop(span);\n+                    self.check_live_drop(span, dropped_ty);\n                 }\n             }\n "}, {"sha": "2cd959689e6cf27f0ef24b77be1887c7367ca68d", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -758,7 +758,6 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(mir_opt_level, Some(4));\n     tracked!(move_size_limit, Some(4096));\n     tracked!(mutable_noalias, Some(true));\n-    tracked!(new_llvm_pass_manager, Some(true));\n     tracked!(no_generate_arange_section, true);\n     tracked!(no_link, true);\n     tracked!(no_unique_section_names, true);"}, {"sha": "09f377d349f45b2a78a7e58c923ec4c22374439f", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 5, "deletions": 251, "changes": 256, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -31,13 +31,12 @@\n #include \"llvm/Transforms/IPO/PassManagerBuilder.h\"\n #include \"llvm/Transforms/IPO/AlwaysInliner.h\"\n #include \"llvm/Transforms/IPO/FunctionImport.h\"\n-#if LLVM_VERSION_GE(15, 0)\n+#include \"llvm/Transforms/IPO/Internalize.h\"\n #include \"llvm/Transforms/IPO/ThinLTOBitcodeWriter.h\"\n-#endif\n #include \"llvm/Transforms/Utils/AddDiscriminators.h\"\n #include \"llvm/Transforms/Utils/FunctionImportUtils.h\"\n #include \"llvm/LTO/LTO.h\"\n-#include \"llvm/Bitcode/BitcodeWriterPass.h\"\n+#include \"llvm/Bitcode/BitcodeWriter.h\"\n #include \"llvm-c/Transforms/PassManagerBuilder.h\"\n \n #include \"llvm/Transforms/Instrumentation.h\"\n@@ -93,172 +92,6 @@ extern \"C\" void LLVMTimeTraceProfilerFinish(const char* FileName) {\n   timeTraceProfilerCleanup();\n }\n \n-extern \"C\" LLVMPassRef LLVMRustFindAndCreatePass(const char *PassName) {\n-#if LLVM_VERSION_LT(15, 0)\n-  StringRef SR(PassName);\n-  PassRegistry *PR = PassRegistry::getPassRegistry();\n-\n-  const PassInfo *PI = PR->getPassInfo(SR);\n-  if (PI) {\n-    return wrap(PI->createPass());\n-  }\n-  return nullptr;\n-#else\n-  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n-#endif\n-}\n-\n-extern \"C\" LLVMPassRef LLVMRustCreateAddressSanitizerFunctionPass(bool Recover) {\n-#if LLVM_VERSION_LT(15, 0)\n-  const bool CompileKernel = false;\n-  const bool UseAfterScope = true;\n-\n-  return wrap(createAddressSanitizerFunctionPass(CompileKernel, Recover, UseAfterScope));\n-#else\n-  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n-#endif\n-}\n-\n-extern \"C\" LLVMPassRef LLVMRustCreateModuleAddressSanitizerPass(bool Recover) {\n-#if LLVM_VERSION_LT(15, 0)\n-  const bool CompileKernel = false;\n-\n-  return wrap(createModuleAddressSanitizerLegacyPassPass(CompileKernel, Recover));\n-#else\n-  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n-#endif\n-}\n-\n-extern \"C\" LLVMPassRef LLVMRustCreateMemorySanitizerPass(int TrackOrigins, bool Recover) {\n-#if LLVM_VERSION_LT(15, 0)\n-  const bool CompileKernel = false;\n-\n-  return wrap(createMemorySanitizerLegacyPassPass(\n-#if LLVM_VERSION_GE(14, 0)\n-      MemorySanitizerOptions{TrackOrigins, Recover, CompileKernel, /*EagerChecks=*/true}\n-#else\n-      MemorySanitizerOptions{TrackOrigins, Recover, CompileKernel}\n-#endif\n-  ));\n-#else\n-  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n-#endif\n-}\n-\n-extern \"C\" LLVMPassRef LLVMRustCreateThreadSanitizerPass() {\n-#if LLVM_VERSION_LT(15, 0)\n-  return wrap(createThreadSanitizerLegacyPassPass());\n-#else\n-  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n-#endif\n-}\n-\n-extern \"C\" LLVMPassRef LLVMRustCreateHWAddressSanitizerPass(bool Recover) {\n-#if LLVM_VERSION_LT(15, 0)\n-  const bool CompileKernel = false;\n-\n-  return wrap(createHWAddressSanitizerLegacyPassPass(CompileKernel, Recover));\n-#else\n-  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n-#endif\n-}\n-\n-extern \"C\" void LLVMRustAddPass(LLVMPassManagerRef PMR, LLVMPassRef RustPass) {\n-#if LLVM_VERSION_LT(15, 0)\n-  assert(RustPass);\n-  Pass *Pass = unwrap(RustPass);\n-  PassManagerBase *PMB = unwrap(PMR);\n-  PMB->add(Pass);\n-#else\n-  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n-#endif\n-}\n-\n-extern \"C\" LLVMPassManagerBuilderRef LLVMRustPassManagerBuilderCreate() {\n-#if LLVM_VERSION_LT(15, 0)\n-  return LLVMPassManagerBuilderCreate();\n-#else\n-  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n-#endif\n-}\n-\n-extern \"C\" void LLVMRustPassManagerBuilderDispose(LLVMPassManagerBuilderRef PMB) {\n-#if LLVM_VERSION_LT(15, 0)\n-  LLVMPassManagerBuilderDispose(PMB);\n-#else\n-  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n-#endif\n-}\n-\n-extern \"C\" void LLVMRustPassManagerBuilderPopulateFunctionPassManager(\n-  LLVMPassManagerBuilderRef PMB, LLVMPassManagerRef PM) {\n-#if LLVM_VERSION_LT(15, 0)\n-  LLVMPassManagerBuilderPopulateFunctionPassManager(PMB, PM);\n-#else\n-  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n-#endif\n-}\n-\n-extern \"C\" void LLVMRustPassManagerBuilderPopulateModulePassManager(\n-  LLVMPassManagerBuilderRef PMB, LLVMPassManagerRef PM) {\n-#if LLVM_VERSION_LT(15, 0)\n-  LLVMPassManagerBuilderPopulateModulePassManager(PMB, PM);\n-#else\n-  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n-#endif\n-}\n-\n-extern \"C\" void LLVMRustPassManagerBuilderPopulateLTOPassManager(\n-  LLVMPassManagerBuilderRef PMB, LLVMPassManagerRef PM, bool Internalize, bool RunInliner) {\n-#if LLVM_VERSION_LT(15, 0)\n-  LLVMPassManagerBuilderPopulateLTOPassManager(PMB, PM, Internalize, RunInliner);\n-#else\n-  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n-#endif\n-}\n-\n-extern \"C\"\n-void LLVMRustPassManagerBuilderPopulateThinLTOPassManager(\n-  LLVMPassManagerBuilderRef PMBR,\n-  LLVMPassManagerRef PMR\n-) {\n-#if LLVM_VERSION_LT(15, 0)\n-  unwrap(PMBR)->populateThinLTOPassManager(*unwrap(PMR));\n-#else\n-  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n-#endif\n-}\n-\n-extern \"C\" void LLVMRustPassManagerBuilderUseInlinerWithThreshold(\n-  LLVMPassManagerBuilderRef PMB, unsigned Threshold) {\n-#if LLVM_VERSION_LT(15, 0)\n-  LLVMPassManagerBuilderUseInlinerWithThreshold(PMB, Threshold);\n-#else\n-  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n-#endif\n-}\n-\n-extern \"C\"\n-void LLVMRustAddLastExtensionPasses(\n-    LLVMPassManagerBuilderRef PMBR, LLVMPassRef *Passes, size_t NumPasses) {\n-#if LLVM_VERSION_LT(15, 0)\n-  auto AddExtensionPasses = [Passes, NumPasses](\n-      const PassManagerBuilder &Builder, PassManagerBase &PM) {\n-    for (size_t I = 0; I < NumPasses; I++) {\n-      PM.add(unwrap(Passes[I]));\n-    }\n-  };\n-  // Add the passes to both of the pre-finalization extension points,\n-  // so they are run for optimized and non-optimized builds.\n-  unwrap(PMBR)->addExtension(PassManagerBuilder::EP_OptimizerLast,\n-                             AddExtensionPasses);\n-  unwrap(PMBR)->addExtension(PassManagerBuilder::EP_EnabledOnOptLevel0,\n-                             AddExtensionPasses);\n-#else\n-  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n-#endif\n-}\n-\n #ifdef LLVM_COMPONENT_X86\n #define SUBTARGET_X86 SUBTARGET(X86)\n #else\n@@ -604,47 +437,6 @@ extern \"C\" void LLVMRustDisposeTargetMachine(LLVMTargetMachineRef TM) {\n   delete unwrap(TM);\n }\n \n-extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n-    LLVMPassManagerBuilderRef PMBR, LLVMRustCodeGenOptLevel OptLevel,\n-    bool MergeFunctions, bool SLPVectorize, bool LoopVectorize, bool PrepareForThinLTO,\n-    const char* PGOGenPath, const char* PGOUsePath, const char* PGOSampleUsePath,\n-    int SizeLevel) {\n-#if LLVM_VERSION_LT(15, 0)\n-  unwrap(PMBR)->MergeFunctions = MergeFunctions;\n-  unwrap(PMBR)->SLPVectorize = SLPVectorize;\n-  unwrap(PMBR)->OptLevel = fromRust(OptLevel);\n-  unwrap(PMBR)->LoopVectorize = LoopVectorize;\n-  unwrap(PMBR)->PrepareForThinLTO = PrepareForThinLTO;\n-  unwrap(PMBR)->SizeLevel = SizeLevel;\n-  unwrap(PMBR)->DisableUnrollLoops = SizeLevel != 0;\n-\n-  if (PGOGenPath) {\n-    assert(!PGOUsePath && !PGOSampleUsePath);\n-    unwrap(PMBR)->EnablePGOInstrGen = true;\n-    unwrap(PMBR)->PGOInstrGen = PGOGenPath;\n-  } else if (PGOUsePath) {\n-    assert(!PGOSampleUsePath);\n-    unwrap(PMBR)->PGOInstrUse = PGOUsePath;\n-  } else if (PGOSampleUsePath) {\n-    unwrap(PMBR)->PGOSampleUse = PGOSampleUsePath;\n-  }\n-#else\n-  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n-#endif\n-}\n-\n-// Unfortunately, the LLVM C API doesn't provide a way to set the `LibraryInfo`\n-// field of a PassManagerBuilder, we expose our own method of doing so.\n-extern \"C\" void LLVMRustAddBuilderLibraryInfo(LLVMPassManagerBuilderRef PMBR,\n-                                              LLVMModuleRef M,\n-                                              bool DisableSimplifyLibCalls) {\n-  Triple TargetTriple(unwrap(M)->getTargetTriple());\n-  TargetLibraryInfoImpl *TLI = new TargetLibraryInfoImpl(TargetTriple);\n-  if (DisableSimplifyLibCalls)\n-    TLI->disableAllFunctions();\n-  unwrap(PMBR)->LibraryInfo = TLI;\n-}\n-\n // Unfortunately, the LLVM C API doesn't provide a way to create the\n // TargetLibraryInfo pass, so we use this method to do so.\n extern \"C\" void LLVMRustAddLibraryInfo(LLVMPassManagerRef PMR, LLVMModuleRef M,\n@@ -656,27 +448,6 @@ extern \"C\" void LLVMRustAddLibraryInfo(LLVMPassManagerRef PMR, LLVMModuleRef M,\n   unwrap(PMR)->add(new TargetLibraryInfoWrapperPass(TLII));\n }\n \n-// Unfortunately, the LLVM C API doesn't provide an easy way of iterating over\n-// all the functions in a module, so we do that manually here. You'll find\n-// similar code in clang's BackendUtil.cpp file.\n-extern \"C\" void LLVMRustRunFunctionPassManager(LLVMPassManagerRef PMR,\n-                                               LLVMModuleRef M) {\n-  llvm::legacy::FunctionPassManager *P =\n-      unwrap<llvm::legacy::FunctionPassManager>(PMR);\n-  P->doInitialization();\n-\n-  // Upgrade all calls to old intrinsics first.\n-  for (Module::iterator I = unwrap(M)->begin(), E = unwrap(M)->end(); I != E;)\n-    UpgradeCallsToIntrinsic(&*I++); // must be post-increment, as we remove\n-\n-  for (Module::iterator I = unwrap(M)->begin(), E = unwrap(M)->end(); I != E;\n-       ++I)\n-    if (!I->isDeclaration())\n-      P->run(*I);\n-\n-  P->doFinalization();\n-}\n-\n extern \"C\" void LLVMRustSetLLVMOptions(int Argc, char **Argv) {\n   // Initializing the command-line options more than once is not allowed. So,\n   // check if they've already been initialized.  (This could happen if we're\n@@ -820,7 +591,7 @@ struct LLVMRustSanitizerOptions {\n };\n \n extern \"C\" LLVMRustResult\n-LLVMRustOptimizeWithNewPassManager(\n+LLVMRustOptimize(\n     LLVMModuleRef ModuleRef,\n     LLVMTargetMachineRef TMRef,\n     LLVMRustPassBuilderOptLevel OptLevelRust,\n@@ -1241,15 +1012,8 @@ extern \"C\" void LLVMRustPrintPasses() {\n   PR->enumerateWith(&Listener);\n }\n \n-extern \"C\" void LLVMRustAddAlwaysInlinePass(LLVMPassManagerBuilderRef PMBR,\n-                                            bool AddLifetimes) {\n-  unwrap(PMBR)->Inliner = llvm::createAlwaysInlinerLegacyPass(AddLifetimes);\n-}\n-\n extern \"C\" void LLVMRustRunRestrictionPass(LLVMModuleRef M, char **Symbols,\n                                            size_t Len) {\n-  llvm::legacy::PassManager passes;\n-\n   auto PreserveFunctions = [=](const GlobalValue &GV) {\n     for (size_t I = 0; I < Len; I++) {\n       if (GV.getName() == Symbols[I]) {\n@@ -1259,9 +1023,7 @@ extern \"C\" void LLVMRustRunRestrictionPass(LLVMModuleRef M, char **Symbols,\n     return false;\n   };\n \n-  passes.add(llvm::createInternalizePass(PreserveFunctions));\n-\n-  passes.run(*unwrap(M));\n+  internalizeModule(*unwrap(M), PreserveFunctions);\n }\n \n extern \"C\" void\n@@ -1610,11 +1372,6 @@ LLVMRustThinLTOBufferCreate(LLVMModuleRef M, bool is_thin) {\n     raw_string_ostream OS(Ret->data);\n     {\n       if (is_thin) {\n-#if LLVM_VERSION_LT(15, 0)\n-        legacy::PassManager PM;\n-        PM.add(createWriteThinLTOBitcodePass(OS));\n-        PM.run(*unwrap(M));\n-#else\n         PassBuilder PB;\n         LoopAnalysisManager LAM;\n         FunctionAnalysisManager FAM;\n@@ -1628,11 +1385,8 @@ LLVMRustThinLTOBufferCreate(LLVMModuleRef M, bool is_thin) {\n         ModulePassManager MPM;\n         MPM.addPass(ThinLTOBitcodeWriterPass(OS, nullptr));\n         MPM.run(*unwrap(M), MAM);\n-#endif\n       } else {\n-        legacy::PassManager PM;\n-        PM.add(createBitcodeWriterPass(OS));\n-        PM.run(*unwrap(M));\n+        WriteBitcodeToFile(*unwrap(M), OS);\n       }\n     }\n   }"}, {"sha": "6f36281af23cc7abfff8aa0b78c44ca113c3efe0", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -12,7 +12,7 @@\n #include \"llvm/Object/COFFImportFile.h\"\n #include \"llvm/Object/ObjectFile.h\"\n #include \"llvm/Pass.h\"\n-#include \"llvm/Bitcode/BitcodeWriterPass.h\"\n+#include \"llvm/Bitcode/BitcodeWriter.h\"\n #include \"llvm/Support/Signals.h\"\n #include \"llvm/ADT/Optional.h\"\n \n@@ -1670,11 +1670,7 @@ LLVMRustModuleBufferCreate(LLVMModuleRef M) {\n   auto Ret = std::make_unique<LLVMRustModuleBuffer>();\n   {\n     raw_string_ostream OS(Ret->data);\n-    {\n-      legacy::PassManager PM;\n-      PM.add(createBitcodeWriterPass(OS));\n-      PM.run(*unwrap(M));\n-    }\n+    WriteBitcodeToFile(*unwrap(M), OS);\n   }\n   return Ret.release();\n }"}, {"sha": "486c514a4f5c21842befb145c8aa95d7bdc274fb", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1409,8 +1409,6 @@ options! {\n         \"the size at which the `large_assignments` lint starts to be emitted\"),\n     mutable_noalias: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"emit noalias metadata for mutable references (default: yes)\"),\n-    new_llvm_pass_manager: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"use new LLVM pass manager (default: no)\"),\n     nll_facts: bool = (false, parse_bool, [UNTRACKED],\n         \"dump facts from NLL analysis into side files (default: no)\"),\n     nll_facts_dir: String = (\"nll-facts\".to_string(), parse_string, [UNTRACKED],"}, {"sha": "36e89a95fd212c75a3f64f762910376176162b81", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -434,7 +434,8 @@ impl<T: Copy> SpecArrayClone for T {\n macro_rules! array_impl_default {\n     {$n:expr, $t:ident $($ts:ident)*} => {\n         #[stable(since = \"1.4.0\", feature = \"array_default\")]\n-        impl<T> Default for [T; $n] where T: Default {\n+        #[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+        impl<T> const Default for [T; $n] where T: ~const Default {\n             fn default() -> [T; $n] {\n                 [$t::default(), $($ts::default()),*]\n             }"}, {"sha": "f0fa2e1d2c190a629def5e5185408d8419ff3e71", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 49, "deletions": 6, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -22,6 +22,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use crate::const_closure::ConstFnMutClosure;\n use crate::marker::Destruct;\n use crate::marker::StructuralPartialEq;\n \n@@ -1222,7 +1223,12 @@ pub const fn min<T: ~const Ord + ~const Destruct>(v1: T, v2: T) -> T {\n #[inline]\n #[must_use]\n #[stable(feature = \"cmp_min_max_by\", since = \"1.53.0\")]\n-pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n+#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+pub const fn min_by<T, F: ~const FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T\n+where\n+    T: ~const Destruct,\n+    F: ~const Destruct,\n+{\n     match compare(&v1, &v2) {\n         Ordering::Less | Ordering::Equal => v1,\n         Ordering::Greater => v2,\n@@ -1244,8 +1250,24 @@ pub fn min_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n #[inline]\n #[must_use]\n #[stable(feature = \"cmp_min_max_by\", since = \"1.53.0\")]\n-pub fn min_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n-    min_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))\n+#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+pub const fn min_by_key<T, F: ~const FnMut(&T) -> K, K: ~const Ord>(v1: T, v2: T, mut f: F) -> T\n+where\n+    T: ~const Destruct,\n+    F: ~const Destruct,\n+    K: ~const Destruct,\n+{\n+    const fn imp<T, F: ~const FnMut(&T) -> K, K: ~const Ord>(\n+        f: &mut F,\n+        (v1, v2): (&T, &T),\n+    ) -> Ordering\n+    where\n+        T: ~const Destruct,\n+        K: ~const Destruct,\n+    {\n+        f(v1).cmp(&f(v2))\n+    }\n+    min_by(v1, v2, ConstFnMutClosure::new(&mut f, imp))\n }\n \n /// Compares and returns the maximum of two values.\n@@ -1286,7 +1308,12 @@ pub const fn max<T: ~const Ord + ~const Destruct>(v1: T, v2: T) -> T {\n #[inline]\n #[must_use]\n #[stable(feature = \"cmp_min_max_by\", since = \"1.53.0\")]\n-pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n+#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+pub const fn max_by<T, F: ~const FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T\n+where\n+    T: ~const Destruct,\n+    F: ~const Destruct,\n+{\n     match compare(&v1, &v2) {\n         Ordering::Less | Ordering::Equal => v2,\n         Ordering::Greater => v1,\n@@ -1308,8 +1335,24 @@ pub fn max_by<T, F: FnOnce(&T, &T) -> Ordering>(v1: T, v2: T, compare: F) -> T {\n #[inline]\n #[must_use]\n #[stable(feature = \"cmp_min_max_by\", since = \"1.53.0\")]\n-pub fn max_by_key<T, F: FnMut(&T) -> K, K: Ord>(v1: T, v2: T, mut f: F) -> T {\n-    max_by(v1, v2, |v1, v2| f(v1).cmp(&f(v2)))\n+#[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+pub const fn max_by_key<T, F: ~const FnMut(&T) -> K, K: ~const Ord>(v1: T, v2: T, mut f: F) -> T\n+where\n+    T: ~const Destruct,\n+    F: ~const Destruct,\n+    K: ~const Destruct,\n+{\n+    const fn imp<T, F: ~const FnMut(&T) -> K, K: ~const Ord>(\n+        f: &mut F,\n+        (v1, v2): (&T, &T),\n+    ) -> Ordering\n+    where\n+        T: ~const Destruct,\n+        K: ~const Destruct,\n+    {\n+        f(v1).cmp(&f(v2))\n+    }\n+    max_by(v1, v2, ConstFnMutClosure::new(&mut f, imp))\n }\n \n // Implementation of PartialEq, Eq, PartialOrd and Ord for primitive types"}, {"sha": "a48290ea08ef004745d44a121fb6af15b5a3ebc3", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -138,6 +138,7 @@\n #![feature(const_size_of_val)]\n #![feature(const_slice_from_raw_parts_mut)]\n #![feature(const_slice_ptr_len)]\n+#![feature(const_slice_split_at_mut)]\n #![feature(const_str_from_utf8_unchecked_mut)]\n #![feature(const_swap)]\n #![feature(const_trait_impl)]"}, {"sha": "ed7703befcfa36310ce083d93217c665f405a21c", "filename": "library/core/src/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -842,6 +842,7 @@ impl<T> Option<T> {\n     /// ```\n     /// let good_year_from_input = \"1909\";\n     /// let bad_year_from_input = \"190blarg\";\n+    /// // Result::ok() converts a Result<T> to an Option<T>\n     /// let good_year = good_year_from_input.parse().ok().unwrap_or_default();\n     /// let bad_year = bad_year_from_input.parse().ok().unwrap_or_default();\n     ///"}, {"sha": "cd04fa0044241f1bd90476c35b392ba76d7d0caf", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1580,7 +1580,8 @@ impl<T> [T] {\n     #[inline]\n     #[track_caller]\n     #[must_use]\n-    pub fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {\n+    #[rustc_const_unstable(feature = \"const_slice_split_at_mut\", issue = \"101804\")]\n+    pub const fn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {\n         assert!(mid <= self.len());\n         // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which\n         // fulfills the requirements of `from_raw_parts_mut`.\n@@ -1679,9 +1680,10 @@ impl<T> [T] {\n     /// assert_eq!(v, [1, 2, 3, 4, 5, 6]);\n     /// ```\n     #[unstable(feature = \"slice_split_at_unchecked\", reason = \"new API\", issue = \"76014\")]\n+    #[rustc_const_unstable(feature = \"const_slice_split_at_mut\", issue = \"101804\")]\n     #[inline]\n     #[must_use]\n-    pub unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {\n+    pub const unsafe fn split_at_mut_unchecked(&mut self, mid: usize) -> (&mut [T], &mut [T]) {\n         let len = self.len();\n         let ptr = self.as_mut_ptr();\n \n@@ -2643,9 +2645,10 @@ impl<T> [T] {\n     /// less than or equal to any value at a position `j > index`. Additionally, this reordering is\n     /// unstable (i.e. any number of equal elements may end up at position `index`), in-place\n     /// (i.e. does not allocate), and *O*(*n*) worst-case. This function is also/ known as \"kth\n-    /// element\" in other libraries. It returns a triplet of the following values: all elements less\n-    /// than the one at the given index, the value at the given index, and all elements greater than\n-    /// the one at the given index.\n+    /// element\" in other libraries. It returns a triplet of the following from the reordered slice:\n+    /// the subslice prior to `index`, the element at `index`, and the subslice after `index`;\n+    /// accordingly, the values in those two subslices will respectively all be less-than-or-equal-to\n+    /// and greater-than-or-equal-to the value of the element at `index`.\n     ///\n     /// # Current implementation\n     ///\n@@ -2689,10 +2692,11 @@ impl<T> [T] {\n     /// less than or equal to any value at a position `j > index` using the comparator function.\n     /// Additionally, this reordering is unstable (i.e. any number of equal elements may end up at\n     /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) worst-case. This function\n-    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following\n-    /// values: all elements less than the one at the given index, the value at the given index,\n-    /// and all elements greater than the one at the given index, using the provided comparator\n-    /// function.\n+    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following from\n+    /// the slice reordered according to the provided comparator function: the subslice prior to\n+    /// `index`, the element at `index`, and the subslice after `index`; accordingly, the values in\n+    /// those two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to\n+    /// the value of the element at `index`.\n     ///\n     /// # Current implementation\n     ///\n@@ -2740,10 +2744,11 @@ impl<T> [T] {\n     /// less than or equal to any value at a position `j > index` using the key extraction function.\n     /// Additionally, this reordering is unstable (i.e. any number of equal elements may end up at\n     /// position `index`), in-place (i.e. does not allocate), and *O*(*n*) worst-case. This function\n-    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following\n-    /// values: all elements less than the one at the given index, the value at the given index, and\n-    /// all elements greater than the one at the given index, using the provided key extraction\n-    /// function.\n+    /// is also known as \"kth element\" in other libraries. It returns a triplet of the following from\n+    /// the slice reordered according to the provided key extraction function: the subslice prior to\n+    /// `index`, the element at `index`, and the subslice after `index`; accordingly, the values in\n+    /// those two subslices will respectively all be less-than-or-equal-to and greater-than-or-equal-to\n+    /// the value of the element at `index`.\n     ///\n     /// # Current implementation\n     ///"}, {"sha": "fc91fe468cc29836e79493728c92e0ff9f3e627d", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -93,7 +93,8 @@ macro_rules! tuple_impls {\n         maybe_tuple_doc! {\n             $($T)+ @\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:Default),+> Default for ($($T,)+) {\n+            #[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+            impl<$($T: ~const Default),+> const Default for ($($T,)+) {\n                 #[inline]\n                 fn default() -> ($($T,)+) {\n                     ($({ let x: $T = Default::default(); x},)+)"}, {"sha": "3e644f786f678cf0d44020088913fa77d28de257", "filename": "src/doc/unstable-book/src/compiler-flags/self-profile-events.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fself-profile-events.md", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fself-profile-events.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fself-profile-events.md?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -41,7 +41,7 @@ $ rustc -Zself-profile -Zself-profile-events=default,args\n \n - `llvm`\n   - Adds tracing information about LLVM passes and codegeneration.\n-  - Disabled by default because this only works when `-Znew-llvm-pass-manager` is enabled.\n+  - Disabled by default because this significantly increases the trace file size.\n \n ## Event synonyms\n "}, {"sha": "25d5c6e4ad2b980b2250acb79e038edd4ea949d2", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -82,7 +82,6 @@\n     -Z                           mir-opt-level=val -- MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\n     -Z                         move-size-limit=val -- the size at which the `large_assignments` lint starts to be emitted\n     -Z                         mutable-noalias=val -- emit noalias metadata for mutable references (default: yes)\n-    -Z                   new-llvm-pass-manager=val -- use new LLVM pass manager (default: no)\n     -Z                               nll-facts=val -- dump facts from NLL analysis into side files (default: no)\n     -Z                           nll-facts-dir=val -- the directory the NLL facts are dumped into (default: `nll-facts`)\n     -Z                             no-analysis=val -- parse and expand the source, but run no analysis"}, {"sha": "31eba074008467132fce9e876ee75016cbe5948b", "filename": "src/test/ui/borrowck/reborrow-sugg-move-then-borrow.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -0,0 +1,26 @@\n+// Tests the suggestion to reborrow the first move site\n+// when we move then borrow a `&mut` ref.\n+\n+struct State;\n+\n+impl IntoIterator for &mut State {\n+    type IntoIter = std::vec::IntoIter<()>;\n+    type Item = ();\n+\n+    fn into_iter(self) -> Self::IntoIter {\n+        vec![].into_iter()\n+    }\n+}\n+\n+fn once(f: impl FnOnce()) {}\n+\n+fn fill_memory_blocks_mt(state: &mut State) {\n+    for _ in state {}\n+    //~^ HELP consider creating a fresh reborrow of `state` here\n+    fill_segment(state);\n+    //~^ ERROR borrow of moved value: `state`\n+}\n+\n+fn fill_segment(state: &mut State) {}\n+\n+fn main() {}"}, {"sha": "13a2005e2ef4c40ef38abd3ee3034f7fb972f656", "filename": "src/test/ui/borrowck/reborrow-sugg-move-then-borrow.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freborrow-sugg-move-then-borrow.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -0,0 +1,24 @@\n+error[E0382]: borrow of moved value: `state`\n+  --> $DIR/reborrow-sugg-move-then-borrow.rs:20:18\n+   |\n+LL | fn fill_memory_blocks_mt(state: &mut State) {\n+   |                          ----- move occurs because `state` has type `&mut State`, which does not implement the `Copy` trait\n+LL |     for _ in state {}\n+   |              ----- `state` moved due to this implicit call to `.into_iter()`\n+LL |\n+LL |     fill_segment(state);\n+   |                  ^^^^^ value borrowed here after move\n+   |\n+note: this function takes ownership of the receiver `self`, which moves `state`\n+  --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL |     fn into_iter(self) -> Self::IntoIter;\n+   |                  ^^^^\n+help: consider creating a fresh reborrow of `state` here\n+   |\n+LL |     for _ in &mut *state {}\n+   |              ++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "f6a577d0d9c934aca8ae792ef43668a8cbb40877", "filename": "src/test/ui/check-static-values-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -63,7 +63,7 @@ static STATIC8: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n // This example should fail because field1 in the base struct is not safe\n static STATIC9: SafeStruct = SafeStruct{field1: SafeEnum::Variant1,\n                                         ..SafeStruct{field1: SafeEnum::Variant3(WithDtor),\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n                                                      field2: SafeEnum::Variant1}};\n \n struct UnsafeStruct;"}, {"sha": "31939f7f6db5d9fd098d716a62bce8ebb6c8dee0", "filename": "src/test/ui/check-static-values-constraints.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,4 +1,4 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `SafeStruct` cannot be evaluated at compile-time\n   --> $DIR/check-static-values-constraints.rs:65:43\n    |\n LL |                                           ..SafeStruct{field1: SafeEnum::Variant3(WithDtor),\n@@ -7,7 +7,7 @@ LL | |\n LL | |                                                      field2: SafeEnum::Variant1}};\n    | |                                                                                ^- value is dropped here\n    | |________________________________________________________________________________|\n-   |                                                                                  statics cannot evaluate destructors\n+   |                                                                                  the destructor for this type cannot be evaluated in statics\n \n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:79:33"}, {"sha": "1e2bcc55b6b102c09d93f86d2c47cf16f884aefc", "filename": "src/test/ui/consts/const-eval/const_let.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -14,16 +14,16 @@ const X2: FakeNeedsDrop = { let x; x = FakeNeedsDrop; x };\n \n // error\n const Y: FakeNeedsDrop = { let mut x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n // error\n const Y2: FakeNeedsDrop = { let mut x; x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n // error\n const Z: () = { let mut x = None; x = Some(FakeNeedsDrop); };\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n // error\n const Z2: () = { let mut x; x = None; x = Some(FakeNeedsDrop); };\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of"}, {"sha": "63442f55718cb0d17ea14ccf88591055287a04ff", "filename": "src/test/ui/consts/const-eval/const_let.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_let.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,34 +1,34 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `FakeNeedsDrop` cannot be evaluated at compile-time\n   --> $DIR/const_let.rs:16:32\n    |\n LL | const Y: FakeNeedsDrop = { let mut x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n    |                                ^^^^^                  - value is dropped here\n    |                                |\n-   |                                constants cannot evaluate destructors\n+   |                                the destructor for this type cannot be evaluated in constants\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `FakeNeedsDrop` cannot be evaluated at compile-time\n   --> $DIR/const_let.rs:20:33\n    |\n LL | const Y2: FakeNeedsDrop = { let mut x; x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n    |                                 ^^^^^                     - value is dropped here\n    |                                 |\n-   |                                 constants cannot evaluate destructors\n+   |                                 the destructor for this type cannot be evaluated in constants\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<FakeNeedsDrop>` cannot be evaluated at compile-time\n   --> $DIR/const_let.rs:24:21\n    |\n LL | const Z: () = { let mut x = None; x = Some(FakeNeedsDrop); };\n    |                     ^^^^^                                  - value is dropped here\n    |                     |\n-   |                     constants cannot evaluate destructors\n+   |                     the destructor for this type cannot be evaluated in constants\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<FakeNeedsDrop>` cannot be evaluated at compile-time\n   --> $DIR/const_let.rs:28:22\n    |\n LL | const Z2: () = { let mut x; x = None; x = Some(FakeNeedsDrop); };\n    |                      ^^^^^                                     - value is dropped here\n    |                      |\n-   |                      constants cannot evaluate destructors\n+   |                      the destructor for this type cannot be evaluated in constants\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e6639826cb26a97c302bbd8a03cf472503d76725", "filename": "src/test/ui/consts/const-eval/issue-65394.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -4,7 +4,7 @@\n // We will likely have to change this behavior before we allow `&mut` in a `const`.\n \n const _: Vec<i32> = {\n-    let mut x = Vec::<i32>::new(); //~ ERROR destructors cannot be evaluated at compile-time\n+    let mut x = Vec::<i32>::new(); //~ ERROR destructor of\n     let r = &mut x; //~ ERROR mutable references are not allowed in constants\n     let y = x;\n     y"}, {"sha": "ae6f0e937168072df1bc72dd814280ced87443f9", "filename": "src/test/ui/consts/const-eval/issue-65394.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-65394.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -7,11 +7,11 @@ LL |     let r = &mut x;\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Vec<i32>` cannot be evaluated at compile-time\n   --> $DIR/issue-65394.rs:7:9\n    |\n LL |     let mut x = Vec::<i32>::new();\n-   |         ^^^^^ constants cannot evaluate destructors\n+   |         ^^^^^ the destructor for this type cannot be evaluated in constants\n ...\n LL | };\n    | - value is dropped here"}, {"sha": "543f1f0ecee24478caeecdcb950afb4a8857a2f0", "filename": "src/test/ui/consts/const-eval/livedrop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,6 +1,6 @@\n const _: Option<Vec<i32>> = {\n     let mut never_returned = Some(Vec::new());\n-    let mut always_returned = None; //~ ERROR destructors cannot be evaluated at compile-time\n+    let mut always_returned = None; //~ ERROR destructor of\n \n     let mut i = 0;\n     loop {"}, {"sha": "d04fdb70ed30b84c7c28e3a0e00edce8d9f2b4ec", "filename": "src/test/ui/consts/const-eval/livedrop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Flivedrop.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,8 +1,8 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<Vec<i32>>` cannot be evaluated at compile-time\n   --> $DIR/livedrop.rs:3:9\n    |\n LL |     let mut always_returned = None;\n-   |         ^^^^^^^^^^^^^^^^^^^ constants cannot evaluate destructors\n+   |         ^^^^^^^^^^^^^^^^^^^ the destructor for this type cannot be evaluated in constants\n ...\n LL |         always_returned = never_returned;\n    |         --------------- value is dropped here"}, {"sha": "93b5f257efb773a3703e74649bf73b2f3748898e", "filename": "src/test/ui/consts/control-flow/drop-fail.precise.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.precise.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.precise.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.precise.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,14 +1,14 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<Vec<i32>>` cannot be evaluated at compile-time\n   --> $DIR/drop-fail.rs:8:9\n    |\n LL |     let x = Some(Vec::new());\n-   |         ^ constants cannot evaluate destructors\n+   |         ^ the destructor for this type cannot be evaluated in constants\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<Vec<i32>>` cannot be evaluated at compile-time\n   --> $DIR/drop-fail.rs:39:9\n    |\n LL |     let mut tmp = None;\n-   |         ^^^^^^^ constants cannot evaluate destructors\n+   |         ^^^^^^^ the destructor for this type cannot be evaluated in constants\n \n error: aborting due to 2 previous errors\n "}, {"sha": "41341f3121e2bbcd5676fe258bc16c0ab30c59ad", "filename": "src/test/ui/consts/control-flow/drop-fail.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -6,7 +6,7 @@\n const _: Option<Vec<i32>> = {\n     let y: Option<Vec<i32>> = None;\n     let x = Some(Vec::new());\n-    //[stock,precise]~^ ERROR destructors cannot be evaluated at compile-time\n+    //[stock,precise]~^ ERROR destructor of\n \n     if true {\n         x\n@@ -19,15 +19,15 @@ const _: Option<Vec<i32>> = {\n // existing analysis.\n const _: Vec<i32> = {\n     let vec_tuple = (Vec::new(),);\n-    //[stock]~^ ERROR destructors cannot be evaluated at compile-time\n+    //[stock]~^ ERROR destructor of\n \n     vec_tuple.0\n };\n \n // This applies to single-field enum variants as well.\n const _: Vec<i32> = {\n     let x: Result<_, Vec<i32>> = Ok(Vec::new());\n-    //[stock]~^ ERROR destructors cannot be evaluated at compile-time\n+    //[stock]~^ ERROR destructor of\n \n     match x {\n         Ok(x) | Err(x) => x,\n@@ -37,7 +37,7 @@ const _: Vec<i32> = {\n const _: Option<Vec<i32>> = {\n     let mut some = Some(Vec::new());\n     let mut tmp = None;\n-    //[stock,precise]~^ ERROR destructors cannot be evaluated at compile-time\n+    //[stock,precise]~^ ERROR destructor of\n \n     let mut i = 0;\n     while i < 10 {"}, {"sha": "2cc8568026eb5c599747970fed1a891063ce160f", "filename": "src/test/ui/consts/control-flow/drop-fail.stock.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fdrop-fail.stock.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,35 +1,35 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<Vec<i32>>` cannot be evaluated at compile-time\n   --> $DIR/drop-fail.rs:8:9\n    |\n LL |     let x = Some(Vec::new());\n-   |         ^ constants cannot evaluate destructors\n+   |         ^ the destructor for this type cannot be evaluated in constants\n ...\n LL | };\n    | - value is dropped here\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(Vec<i32>,)` cannot be evaluated at compile-time\n   --> $DIR/drop-fail.rs:21:9\n    |\n LL |     let vec_tuple = (Vec::new(),);\n-   |         ^^^^^^^^^ constants cannot evaluate destructors\n+   |         ^^^^^^^^^ the destructor for this type cannot be evaluated in constants\n ...\n LL | };\n    | - value is dropped here\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Result<Vec<i32>, Vec<i32>>` cannot be evaluated at compile-time\n   --> $DIR/drop-fail.rs:29:9\n    |\n LL |     let x: Result<_, Vec<i32>> = Ok(Vec::new());\n-   |         ^ constants cannot evaluate destructors\n+   |         ^ the destructor for this type cannot be evaluated in constants\n ...\n LL | };\n    | - value is dropped here\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<Vec<i32>>` cannot be evaluated at compile-time\n   --> $DIR/drop-fail.rs:39:9\n    |\n LL |     let mut tmp = None;\n-   |         ^^^^^^^ constants cannot evaluate destructors\n+   |         ^^^^^^^ the destructor for this type cannot be evaluated in constants\n ...\n LL | };\n    | - value is dropped here"}, {"sha": "6799741307869140815c0cbf96b3101e10811100", "filename": "src/test/ui/consts/drop_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fdrop_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fdrop_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdrop_box.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,4 +1,4 @@\n const fn f<T>(_: Box<T>) {}\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n fn main() {}"}, {"sha": "62324939b08af3d0d2365e3147e3352bb12ffbc7", "filename": "src/test/ui/consts/drop_box.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fdrop_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fdrop_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdrop_box.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,10 +1,10 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Box<T>` cannot be evaluated at compile-time\n   --> $DIR/drop_box.rs:1:15\n    |\n LL | const fn f<T>(_: Box<T>) {}\n    |               ^           - value is dropped here\n    |               |\n-   |               constant functions cannot evaluate destructors\n+   |               the destructor for this type cannot be evaluated in constant functions\n \n error: aborting due to previous error\n "}, {"sha": "37758a4cbda64cb03831d0c0278aa18176eb0290", "filename": "src/test/ui/consts/drop_zst.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fdrop_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fdrop_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdrop_zst.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,8 +1,8 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `S` cannot be evaluated at compile-time\n   --> $DIR/drop_zst.rs:14:9\n    |\n LL |     let s = S;\n-   |         ^ constant functions cannot evaluate destructors\n+   |         ^ the destructor for this type cannot be evaluated in constant functions\n \n error: aborting due to previous error\n "}, {"sha": "c2891488c7f1bf962b1ee28548c7c9ea464e1826", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -34,7 +34,7 @@ const fn foo35(a: bool, b: bool) -> bool { a ^ b }\n struct Foo<T: ?Sized>(T);\n impl<T> Foo<T> {\n     const fn new(t: T) -> Self { Foo(t) }\n-    const fn into_inner(self) -> T { self.0 } //~ destructors cannot be evaluated\n+    const fn into_inner(self) -> T { self.0 } //~ destructor of\n     const fn get(&self) -> &T { &self.0 }\n     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n     //~^ mutable references\n@@ -43,7 +43,7 @@ impl<T> Foo<T> {\n }\n impl<'a, T> Foo<T> {\n     const fn new_lt(t: T) -> Self { Foo(t) }\n-    const fn into_inner_lt(self) -> T { self.0 } //~ destructors cannot be evaluated\n+    const fn into_inner_lt(self) -> T { self.0 } //~ destructor of\n     const fn get_lt(&'a self) -> &T { &self.0 }\n     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n     //~^ mutable references\n@@ -52,7 +52,7 @@ impl<'a, T> Foo<T> {\n }\n impl<T: Sized> Foo<T> {\n     const fn new_s(t: T) -> Self { Foo(t) }\n-    const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructors\n+    const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructor\n     const fn get_s(&self) -> &T { &self.0 }\n     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n     //~^ mutable references"}, {"sha": "11c79e8e2d6a99ad779c5f7a96eaec79c88fe571", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,10 +1,10 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Foo<T>` cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:37:25\n    |\n LL |     const fn into_inner(self) -> T { self.0 }\n    |                         ^^^^                - value is dropped here\n    |                         |\n-   |                         constant functions cannot evaluate destructors\n+   |                         the destructor for this type cannot be evaluated in constant functions\n \n error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/min_const_fn.rs:39:22\n@@ -33,13 +33,13 @@ LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Foo<T>` cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:46:28\n    |\n LL |     const fn into_inner_lt(self) -> T { self.0 }\n    |                            ^^^^                - value is dropped here\n    |                            |\n-   |                            constant functions cannot evaluate destructors\n+   |                            the destructor for this type cannot be evaluated in constant functions\n \n error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/min_const_fn.rs:48:25\n@@ -68,13 +68,13 @@ LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Foo<T>` cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:55:27\n    |\n LL |     const fn into_inner_s(self) -> T { self.0 }\n    |                           ^^^^                - value is dropped here\n    |                           |\n-   |                           constant functions cannot evaluate destructors\n+   |                           the destructor for this type cannot be evaluated in constant functions\n \n error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/min_const_fn.rs:57:24\n@@ -191,21 +191,21 @@ LL | const fn inc(x: &mut i32) { *x += 1 }\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `AlanTuring<impl std::fmt::Debug>` cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:122:19\n    |\n LL | const fn no_apit2(_x: AlanTuring<impl std::fmt::Debug>) {}\n    |                   ^^                                     - value is dropped here\n    |                   |\n-   |                   constant functions cannot evaluate destructors\n+   |                   the destructor for this type cannot be evaluated in constant functions\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `impl std::fmt::Debug` cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:124:18\n    |\n LL | const fn no_apit(_x: impl std::fmt::Debug) {}\n    |                  ^^                         - value is dropped here\n    |                  |\n-   |                  constant functions cannot evaluate destructors\n+   |                  the destructor for this type cannot be evaluated in constant functions\n \n error: aborting due to 24 previous errors\n "}, {"sha": "4466f097ef4a1bf0fc23256d487190f747727fc5", "filename": "src/test/ui/consts/miri_unleashed/feature-gate-unleash_the_miri_inside_of_you.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -8,7 +8,7 @@ trait Foo<T> {\n }\n \n trait Bar<T, U: Foo<T>> {\n-    const F: u32 = (U::X, 42).1; //~ ERROR destructors cannot be evaluated at compile-time\n+    const F: u32 = (U::X, 42).1; //~ ERROR destructor of\n }\n \n impl Foo<u32> for () {"}, {"sha": "c91c72d1fbf16fce9e62a21e6a2cce89078e0495", "filename": "src/test/ui/consts/miri_unleashed/feature-gate-unleash_the_miri_inside_of_you.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ffeature-gate-unleash_the_miri_inside_of_you.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,10 +1,10 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(T, u32)` cannot be evaluated at compile-time\n   --> $DIR/feature-gate-unleash_the_miri_inside_of_you.rs:11:20\n    |\n LL |     const F: u32 = (U::X, 42).1;\n    |                    ^^^^^^^^^^ - value is dropped here\n    |                    |\n-   |                    constants cannot evaluate destructors\n+   |                    the destructor for this type cannot be evaluated in constants\n \n error: aborting due to previous error\n "}, {"sha": "a6d2934044ac7a3685d0b7b3dfb8eec482855383", "filename": "src/test/ui/consts/qualif-indirect-mutation-fail.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -6,13 +6,13 @@\n \n // Mutable borrow of a field with drop impl.\n pub const fn f() {\n-    let mut a: (u32, Option<String>) = (0, None); //~ ERROR destructors cannot be evaluated\n+    let mut a: (u32, Option<String>) = (0, None); //~ ERROR destructor of\n     let _ = &mut a.1;\n }\n \n // Mutable borrow of a type with drop impl.\n pub const A1: () = {\n-    let mut x = None; //~ ERROR destructors cannot be evaluated\n+    let mut x = None; //~ ERROR destructor of\n     let mut y = Some(String::new());\n     let a = &mut x;\n     let b = &mut y;\n@@ -28,37 +28,37 @@ pub const A2: () = {\n     let b = &mut y;\n     std::mem::swap(a, b);\n     std::mem::forget(y);\n-    let _z = x; //~ ERROR destructors cannot be evaluated\n+    let _z = x; //~ ERROR destructor of\n };\n \n // Shared borrow of a type that might be !Freeze and Drop.\n pub const fn g1<T>() {\n-    let x: Option<T> = None; //~ ERROR destructors cannot be evaluated\n+    let x: Option<T> = None; //~ ERROR destructor of\n     let _ = x.is_some();\n }\n \n // Shared borrow of a type that might be !Freeze and Drop.\n pub const fn g2<T>() {\n     let x: Option<T> = None;\n     let _ = x.is_some();\n-    let _y = x; //~ ERROR destructors cannot be evaluated\n+    let _y = x; //~ ERROR destructor of\n }\n \n // Mutable raw reference to a Drop type.\n pub const fn address_of_mut() {\n-    let mut x: Option<String> = None; //~ ERROR destructors cannot be evaluated\n+    let mut x: Option<String> = None; //~ ERROR destructor of\n     &raw mut x;\n \n-    let mut y: Option<String> = None; //~ ERROR destructors cannot be evaluated\n+    let mut y: Option<String> = None; //~ ERROR destructor of\n     std::ptr::addr_of_mut!(y);\n }\n \n // Const raw reference to a Drop type. Conservatively assumed to allow mutation\n // until resolution of https://github.com/rust-lang/rust/issues/56604.\n pub const fn address_of_const() {\n-    let x: Option<String> = None; //~ ERROR destructors cannot be evaluated\n+    let x: Option<String> = None; //~ ERROR destructor of\n     &raw const x;\n \n-    let y: Option<String> = None; //~ ERROR destructors cannot be evaluated\n+    let y: Option<String> = None; //~ ERROR destructor of\n     std::ptr::addr_of!(y);\n }"}, {"sha": "6379c00e4b434cd7e62935b96f43fd01feb1ea00", "filename": "src/test/ui/consts/qualif-indirect-mutation-fail.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fqualif-indirect-mutation-fail.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,56 +1,56 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(u32, Option<String>)` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:9:9\n    |\n LL |     let mut a: (u32, Option<String>) = (0, None);\n-   |         ^^^^^ constant functions cannot evaluate destructors\n+   |         ^^^^^ the destructor for this type cannot be evaluated in constant functions\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<String>` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:15:9\n    |\n LL |     let mut x = None;\n-   |         ^^^^^ constants cannot evaluate destructors\n+   |         ^^^^^ the destructor for this type cannot be evaluated in constants\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<String>` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:31:9\n    |\n LL |     let _z = x;\n-   |         ^^ constants cannot evaluate destructors\n+   |         ^^ the destructor for this type cannot be evaluated in constants\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<T>` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:36:9\n    |\n LL |     let x: Option<T> = None;\n-   |         ^ constant functions cannot evaluate destructors\n+   |         ^ the destructor for this type cannot be evaluated in constant functions\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<T>` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:44:9\n    |\n LL |     let _y = x;\n-   |         ^^ constant functions cannot evaluate destructors\n+   |         ^^ the destructor for this type cannot be evaluated in constant functions\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<String>` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:52:9\n    |\n LL |     let mut y: Option<String> = None;\n-   |         ^^^^^ constant functions cannot evaluate destructors\n+   |         ^^^^^ the destructor for this type cannot be evaluated in constant functions\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<String>` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:49:9\n    |\n LL |     let mut x: Option<String> = None;\n-   |         ^^^^^ constant functions cannot evaluate destructors\n+   |         ^^^^^ the destructor for this type cannot be evaluated in constant functions\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<String>` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:62:9\n    |\n LL |     let y: Option<String> = None;\n-   |         ^ constant functions cannot evaluate destructors\n+   |         ^ the destructor for this type cannot be evaluated in constant functions\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Option<String>` cannot be evaluated at compile-time\n   --> $DIR/qualif-indirect-mutation-fail.rs:59:9\n    |\n LL |     let x: Option<String> = None;\n-   |         ^ constant functions cannot evaluate destructors\n+   |         ^ the destructor for this type cannot be evaluated in constant functions\n \n error: aborting due to 9 previous errors\n "}, {"sha": "7cd3dbec931499c5af94c1752d3fc52cf144967d", "filename": "src/test/ui/consts/stable-precise-live-drops-in-libcore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fstable-precise-live-drops-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fstable-precise-live-drops-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstable-precise-live-drops-in-libcore.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -11,7 +11,7 @@ impl<T> Either<T, T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"foo\", since = \"1.0.0\")]\n     pub const fn unwrap(self) -> T {\n-        //~^ ERROR destructors cannot be evaluated at compile-time\n+        //~^ ERROR destructor of\n         match self {\n             Self::Left(t) => t,\n             Self::Right(t) => t,"}, {"sha": "5f70391eec248795781bc7d55de6423234a23da2", "filename": "src/test/ui/consts/stable-precise-live-drops-in-libcore.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fstable-precise-live-drops-in-libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Fstable-precise-live-drops-in-libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstable-precise-live-drops-in-libcore.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,8 +1,8 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Either<T, T>` cannot be evaluated at compile-time\n   --> $DIR/stable-precise-live-drops-in-libcore.rs:13:25\n    |\n LL |     pub const fn unwrap(self) -> T {\n-   |                         ^^^^ constant functions cannot evaluate destructors\n+   |                         ^^^^ the destructor for this type cannot be evaluated in constant functions\n ...\n LL |     }\n    |     - value is dropped here"}, {"sha": "ca4ed8f0b471cfa5de99b7204332e262c80e51c4", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -15,8 +15,8 @@ impl<T> Opt<T> {\n     #[rustc_const_unstable(feature = \"foo\", issue = \"none\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     const fn unwrap_or_else<F: ~const FnOnce() -> T>(self, f: F) -> T {\n-    //~^ ERROR destructors cannot be evaluated at compile-time\n-    //~| ERROR destructors cannot be evaluated at compile-time\n+    //~^ ERROR destructor of\n+    //~| ERROR destructor of\n         match self {\n             Opt::Some(t) => t,\n             Opt::None => f(),"}, {"sha": "e5b00dd07abeeed44dbc3f80c73f40a71cf1c953", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,17 +1,17 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `F` cannot be evaluated at compile-time\n   --> $DIR/unstable-const-fn-in-libcore.rs:17:60\n    |\n LL |     const fn unwrap_or_else<F: ~const FnOnce() -> T>(self, f: F) -> T {\n-   |                                                            ^ constant functions cannot evaluate destructors\n+   |                                                            ^ the destructor for this type cannot be evaluated in constant functions\n ...\n LL |     }\n    |     - value is dropped here\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `Opt<T>` cannot be evaluated at compile-time\n   --> $DIR/unstable-const-fn-in-libcore.rs:17:54\n    |\n LL |     const fn unwrap_or_else<F: ~const FnOnce() -> T>(self, f: F) -> T {\n-   |                                                      ^^^^ constant functions cannot evaluate destructors\n+   |                                                      ^^^^ the destructor for this type cannot be evaluated in constant functions\n ...\n LL |     }\n    |     - value is dropped here"}, {"sha": "3cfacea5e17f46a1cb1c6c21cf2f633bda631809", "filename": "src/test/ui/drop/repeat-drop-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -5,7 +5,7 @@ fn borrowck_catch() {\n }\n \n const _: [String; 0] = [String::new(); 0];\n-//~^ ERROR destructors cannot be evaluated at compile-time [E0493]\n+//~^ ERROR destructor of `String` cannot be evaluated at compile-time [E0493]\n \n fn must_be_init() {\n     let x: u8;"}, {"sha": "adfaed739735b07eb1c52930f7b1f0b8fd2ce3fb", "filename": "src/test/ui/drop/repeat-drop-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -8,13 +8,13 @@ LL |     let _bar = foo;\n LL |     let _baz = [foo; 0];\n    |                 ^^^ value used here after move\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `String` cannot be evaluated at compile-time\n   --> $DIR/repeat-drop-2.rs:7:25\n    |\n LL | const _: [String; 0] = [String::new(); 0];\n    |                        -^^^^^^^^^^^^^----\n    |                        ||\n-   |                        |constants cannot evaluate destructors\n+   |                        |the destructor for this type cannot be evaluated in constants\n    |                        value is dropped here\n \n error[E0381]: used binding `x` isn't initialized"}, {"sha": "9ee1ba3d3b4865fa704fb4e100a92b20e97aae68", "filename": "src/test/ui/impl-trait/issues/issue-78722.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -12,7 +12,7 @@ struct Bug {\n         }\n         let f: F = async { 1 };\n         //~^ ERROR `async` blocks are not allowed in constants\n-        //~| ERROR destructors cannot be evaluated at compile-time\n+        //~| ERROR destructor of\n         1\n     }],\n }"}, {"sha": "a96994f5a7fb85954a4259ebf098d205aabd762b", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -7,11 +7,11 @@ LL |         let f: F = async { 1 };\n    = note: see issue #85368 <https://github.com/rust-lang/rust/issues/85368> for more information\n    = help: add `#![feature(const_async_blocks)]` to the crate attributes to enable\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `F` cannot be evaluated at compile-time\n   --> $DIR/issue-78722.rs:13:13\n    |\n LL |         let f: F = async { 1 };\n-   |             ^ constants cannot evaluate destructors\n+   |             ^ the destructor for this type cannot be evaluated in constants\n ...\n LL |     }],\n    |     - value is dropped here"}, {"sha": "ee28f5eb6d665fe80e15f379b6c62fdc50f933b6", "filename": "src/test/ui/invalid/invalid-llvm-passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Finvalid%2Finvalid-llvm-passes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Finvalid%2Finvalid-llvm-passes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-llvm-passes.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,4 +1,4 @@\n // build-fail\n-// compile-flags: -Cpasses=unknown-pass -Z new-llvm-pass-manager=yes\n+// compile-flags: -Cpasses=unknown-pass\n \n fn main() {}"}, {"sha": "624b464ecef25f690215f79b47de94c6749e4934", "filename": "src/test/ui/mir/drop-elaboration-after-borrowck-error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -3,9 +3,9 @@\n \n static A: () = {\n     let a: [String; 1];\n-    //~^ ERROR destructors cannot be evaluated at compile-time\n+    //~^ ERROR destructor of\n     a[0] = String::new();\n-    //~^ ERROR destructors cannot be evaluated at compile-time\n+    //~^ ERROR destructor of\n     //~| ERROR binding `a` isn't initialized\n };\n \n@@ -14,9 +14,9 @@ struct B<T>([T; 1]);\n impl<T> B<T> {\n     pub const fn f(mut self, other: T) -> Self {\n         let _this = self;\n-        //~^ ERROR destructors cannot be evaluated at compile-time\n+        //~^ ERROR destructor of\n         self.0[0] = other;\n-        //~^ ERROR destructors cannot be evaluated at compile-time\n+        //~^ ERROR destructor of\n         //~| ERROR use of moved value\n         self\n     }"}, {"sha": "c06a6238a90264e35011bcdb205e683389c876bd", "filename": "src/test/ui/mir/drop-elaboration-after-borrowck-error.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fdrop-elaboration-after-borrowck-error.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,17 +1,17 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `String` cannot be evaluated at compile-time\n   --> $DIR/drop-elaboration-after-borrowck-error.rs:7:5\n    |\n LL |     a[0] = String::new();\n    |     ^^^^\n    |     |\n-   |     statics cannot evaluate destructors\n+   |     the destructor for this type cannot be evaluated in statics\n    |     value is dropped here\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `[String; 1]` cannot be evaluated at compile-time\n   --> $DIR/drop-elaboration-after-borrowck-error.rs:5:9\n    |\n LL |     let a: [String; 1];\n-   |         ^ statics cannot evaluate destructors\n+   |         ^ the destructor for this type cannot be evaluated in statics\n ...\n LL | };\n    | - value is dropped here\n@@ -25,20 +25,20 @@ LL |\n LL |     a[0] = String::new();\n    |     ^^^^ `a` used here but it isn't initialized\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `T` cannot be evaluated at compile-time\n   --> $DIR/drop-elaboration-after-borrowck-error.rs:18:9\n    |\n LL |         self.0[0] = other;\n    |         ^^^^^^^^^\n    |         |\n-   |         constant functions cannot evaluate destructors\n+   |         the destructor for this type cannot be evaluated in constant functions\n    |         value is dropped here\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `B<T>` cannot be evaluated at compile-time\n   --> $DIR/drop-elaboration-after-borrowck-error.rs:16:13\n    |\n LL |         let _this = self;\n-   |             ^^^^^ constant functions cannot evaluate destructors\n+   |             ^^^^^ the destructor for this type cannot be evaluated in constant functions\n ...\n LL |     }\n    |     - value is dropped here"}, {"sha": "33e18e35522ec2b93cec0f3bf499e3b98e18bcf1", "filename": "src/test/ui/sanitize/new-llvm-pass-manager-thin-lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsanitize%2Fnew-llvm-pass-manager-thin-lto.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -7,7 +7,7 @@\n //\n // no-prefer-dynamic\n // revisions: opt0 opt1\n-// compile-flags: -Znew-llvm-pass-manager=yes -Zsanitizer=address -Clto=thin\n+// compile-flags: -Zsanitizer=address -Clto=thin\n //[opt0]compile-flags: -Copt-level=0\n //[opt1]compile-flags: -Copt-level=1\n // run-fail"}, {"sha": "625da25a7c2cad9a01a2f5fd920889c9e230efb5", "filename": "src/test/ui/span/E0493.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fspan%2FE0493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fspan%2FE0493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0493.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -15,7 +15,7 @@ impl Drop for Bar {\n }\n \n const F : Foo = (Foo { a : 0 }, Foo { a : 1 }).1;\n-//~^ destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n fn main() {\n }"}, {"sha": "9db627562d6eb2926f37f7e9e44bfbdb650a3f2a", "filename": "src/test/ui/span/E0493.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fspan%2FE0493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fspan%2FE0493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0493.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,10 +1,10 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(Foo, Foo)` cannot be evaluated at compile-time\n   --> $DIR/E0493.rs:17:17\n    |\n LL | const F : Foo = (Foo { a : 0 }, Foo { a : 1 }).1;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ - value is dropped here\n    |                 |\n-   |                 constants cannot evaluate destructors\n+   |                 the destructor for this type cannot be evaluated in constants\n \n error: aborting due to previous error\n "}, {"sha": "34afa9873a388a6ee3701383f61a1e9df9e336d3", "filename": "src/test/ui/static/static-drop-scope.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.rs?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -5,33 +5,33 @@ impl Drop for WithDtor {\n }\n \n static PROMOTION_FAIL_S: Option<&'static WithDtor> = Some(&WithDtor);\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n //~| ERROR temporary value dropped while borrowed\n \n const PROMOTION_FAIL_C: Option<&'static WithDtor> = Some(&WithDtor);\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n //~| ERROR temporary value dropped while borrowed\n \n static EARLY_DROP_S: i32 = (WithDtor, 0).1;\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n const EARLY_DROP_C: i32 = (WithDtor, 0).1;\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n const fn const_drop<T>(_: T) {}\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n const fn const_drop2<T>(x: T) {\n     (x, ()).1\n-    //~^ ERROR destructors cannot be evaluated at compile-time\n+    //~^ ERROR destructor of\n }\n \n const EARLY_DROP_C_OPTION: i32 = (Some(WithDtor), 0).1;\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n const HELPER: Option<WithDtor> = Some(WithDtor);\n \n const EARLY_DROP_C_OPTION_CONSTANT: i32 = (HELPER, 0).1;\n-//~^ ERROR destructors cannot be evaluated at compile-time\n+//~^ ERROR destructor of\n \n fn main () {}"}, {"sha": "112bfc003048d0c7b885a5ae22d9f8ce17cb6509", "filename": "src/test/ui/static/static-drop-scope.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17e8752acafe7240f38bcb114586ff0568224cad/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.stderr?ref=17e8752acafe7240f38bcb114586ff0568224cad", "patch": "@@ -1,10 +1,10 @@\n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `WithDtor` cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:7:60\n    |\n LL | static PROMOTION_FAIL_S: Option<&'static WithDtor> = Some(&WithDtor);\n    |                                                            ^^^^^^^^- value is dropped here\n    |                                                            |\n-   |                                                            statics cannot evaluate destructors\n+   |                                                            the destructor for this type cannot be evaluated in statics\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/static-drop-scope.rs:7:60\n@@ -16,13 +16,13 @@ LL | static PROMOTION_FAIL_S: Option<&'static WithDtor> = Some(&WithDtor);\n    |                                                      |     creates a temporary which is freed while still in use\n    |                                                      using this value as a static requires that borrow lasts for `'static`\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `WithDtor` cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:11:59\n    |\n LL | const PROMOTION_FAIL_C: Option<&'static WithDtor> = Some(&WithDtor);\n    |                                                           ^^^^^^^^- value is dropped here\n    |                                                           |\n-   |                                                           constants cannot evaluate destructors\n+   |                                                           the destructor for this type cannot be evaluated in constants\n \n error[E0716]: temporary value dropped while borrowed\n   --> $DIR/static-drop-scope.rs:11:59\n@@ -34,54 +34,54 @@ LL | const PROMOTION_FAIL_C: Option<&'static WithDtor> = Some(&WithDtor);\n    |                                                     |     creates a temporary which is freed while still in use\n    |                                                     using this value as a constant requires that borrow lasts for `'static`\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(WithDtor, i32)` cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:15:28\n    |\n LL | static EARLY_DROP_S: i32 = (WithDtor, 0).1;\n    |                            ^^^^^^^^^^^^^ - value is dropped here\n    |                            |\n-   |                            statics cannot evaluate destructors\n+   |                            the destructor for this type cannot be evaluated in statics\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(WithDtor, i32)` cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:18:27\n    |\n LL | const EARLY_DROP_C: i32 = (WithDtor, 0).1;\n    |                           ^^^^^^^^^^^^^ - value is dropped here\n    |                           |\n-   |                           constants cannot evaluate destructors\n+   |                           the destructor for this type cannot be evaluated in constants\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `T` cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:21:24\n    |\n LL | const fn const_drop<T>(_: T) {}\n    |                        ^      - value is dropped here\n    |                        |\n-   |                        constant functions cannot evaluate destructors\n+   |                        the destructor for this type cannot be evaluated in constant functions\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(T, ())` cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:25:5\n    |\n LL |     (x, ()).1\n-   |     ^^^^^^^ constant functions cannot evaluate destructors\n+   |     ^^^^^^^ the destructor for this type cannot be evaluated in constant functions\n LL |\n LL | }\n    | - value is dropped here\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(Option<WithDtor>, i32)` cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:29:34\n    |\n LL | const EARLY_DROP_C_OPTION: i32 = (Some(WithDtor), 0).1;\n    |                                  ^^^^^^^^^^^^^^^^^^^ - value is dropped here\n    |                                  |\n-   |                                  constants cannot evaluate destructors\n+   |                                  the destructor for this type cannot be evaluated in constants\n \n-error[E0493]: destructors cannot be evaluated at compile-time\n+error[E0493]: destructor of `(Option<WithDtor>, i32)` cannot be evaluated at compile-time\n   --> $DIR/static-drop-scope.rs:34:43\n    |\n LL | const EARLY_DROP_C_OPTION_CONSTANT: i32 = (HELPER, 0).1;\n    |                                           ^^^^^^^^^^^ - value is dropped here\n    |                                           |\n-   |                                           constants cannot evaluate destructors\n+   |                                           the destructor for this type cannot be evaluated in constants\n \n error: aborting due to 10 previous errors\n "}]}