{"sha": "0de6873a319d86dc41b56d8339f75526473bac5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZTY4NzNhMzE5ZDg2ZGM0MWI1NmQ4MzM5Zjc1NTI2NDczYmFjNWY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-29T13:27:01Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-02T21:02:54Z"}, "message": "miri: validity checks alignment even when machine otherwise does not", "tree": {"sha": "a0d3543b4afc1c0bc573e32f4c6b114106350f4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0d3543b4afc1c0bc573e32f4c6b114106350f4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0de6873a319d86dc41b56d8339f75526473bac5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0de6873a319d86dc41b56d8339f75526473bac5f", "html_url": "https://github.com/rust-lang/rust/commit/0de6873a319d86dc41b56d8339f75526473bac5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0de6873a319d86dc41b56d8339f75526473bac5f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30c63aa2b8fbc870f32c737d494b6b1ef5f2b912", "url": "https://api.github.com/repos/rust-lang/rust/commits/30c63aa2b8fbc870f32c737d494b6b1ef5f2b912", "html_url": "https://github.com/rust-lang/rust/commit/30c63aa2b8fbc870f32c737d494b6b1ef5f2b912"}], "stats": {"total": 42, "additions": 33, "deletions": 9}, "files": [{"sha": "eb98d07f901babad05a206af585910164f1f3c54", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0de6873a319d86dc41b56d8339f75526473bac5f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de6873a319d86dc41b56d8339f75526473bac5f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=0de6873a319d86dc41b56d8339f75526473bac5f", "patch": "@@ -306,11 +306,24 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     ///\n     /// Most of the time you should use `check_mplace_access`, but when you just have a pointer,\n     /// this method is still appropriate.\n+    #[inline(always)]\n     pub fn check_ptr_access(\n         &self,\n         sptr: Scalar<M::PointerTag>,\n         size: Size,\n         align: Align,\n+    ) -> InterpResult<'tcx, Option<Pointer<M::PointerTag>>> {\n+        let align = if M::CHECK_ALIGN { Some(align) } else { None };\n+        self.check_ptr_access_align(sptr, size, align)\n+    }\n+\n+    /// Like `check_ptr_access`, but *definitely* checks alignment when `align`\n+    /// is `Some` (overriding `M::CHECK_ALIGN`).\n+    pub(super) fn check_ptr_access_align(\n+        &self,\n+        sptr: Scalar<M::PointerTag>,\n+        size: Size,\n+        align: Option<Align>,\n     ) -> InterpResult<'tcx, Option<Pointer<M::PointerTag>>> {\n         fn check_offset_align(offset: u64, align: Align) -> InterpResult<'static> {\n             if offset % align.bytes() == 0 {\n@@ -343,7 +356,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                     throw_unsup!(InvalidNullPointerUsage)\n                 }\n                 // Must be aligned.\n-                if M::CHECK_ALIGN {\n+                if let Some(align) = align {\n                     check_offset_align(bits, align)?;\n                 }\n                 None\n@@ -358,7 +371,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 end_ptr.check_in_alloc(allocation_size, CheckInAllocMsg::MemoryAccessTest)?;\n                 // Test align. Check this last; if both bounds and alignment are violated\n                 // we want the error to be about the bounds.\n-                if M::CHECK_ALIGN {\n+                if let Some(align) = align {\n                     if alloc_align.bytes() < align.bytes() {\n                         // The allocation itself is not aligned enough.\n                         // FIXME: Alignment check is too strict, depending on the base address that"}, {"sha": "82d6d7db01c8d25efa080a6c291f591e4d04078f", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0de6873a319d86dc41b56d8339f75526473bac5f/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de6873a319d86dc41b56d8339f75526473bac5f/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=0de6873a319d86dc41b56d8339f75526473bac5f", "patch": "@@ -398,7 +398,9 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                     // alignment and size determined by the layout (size will be 0,\n                     // alignment should take attributes into account).\n                     .unwrap_or_else(|| (layout.size, layout.align.abi));\n-                let ptr: Option<_> = match self.ecx.memory.check_ptr_access(ptr, size, align) {\n+                let ptr: Option<_> = match\n+                    self.ecx.memory.check_ptr_access_align(ptr, size, Some(align))\n+                {\n                     Ok(ptr) => ptr,\n                     Err(err) => {\n                         info!("}, {"sha": "3b19f3b07753ea5e990d1e1fb2b22f556c04afc8", "filename": "src/test/ui/consts/const-eval/ub-ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0de6873a319d86dc41b56d8339f75526473bac5f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de6873a319d86dc41b56d8339f75526473bac5f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.rs?ref=0de6873a319d86dc41b56d8339f75526473bac5f", "patch": "@@ -3,7 +3,8 @@\n \n use std::mem;\n \n-const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) }; // Ok (CTFE does not check alignment)\n+const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n+//~^ ERROR it is undefined behavior to use this value\n \n const NULL: &u16 = unsafe { mem::transmute(0usize) };\n //~^ ERROR it is undefined behavior to use this value"}, {"sha": "153c5381950f5935ce03f8ad2c6202508c744dd5", "filename": "src/test/ui/consts/const-eval/ub-ref.stderr", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0de6873a319d86dc41b56d8339f75526473bac5f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0de6873a319d86dc41b56d8339f75526473bac5f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr?ref=0de6873a319d86dc41b56d8339f75526473bac5f", "patch": "@@ -1,35 +1,43 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:8:1\n+  --> $DIR/ub-ref.rs:6:1\n+   |\n+LL | const UNALIGNED: &u16 = unsafe { mem::transmute(&[0u8; 4]) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered unaligned reference (required 2 byte alignment but found 1)\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n+\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/ub-ref.rs:9:1\n    |\n LL | const NULL: &u16 = unsafe { mem::transmute(0usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 0, but expected something greater or equal to 1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:11:1\n+  --> $DIR/ub-ref.rs:12:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:14:1\n+  --> $DIR/ub-ref.rs:15:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/ub-ref.rs:17:1\n+  --> $DIR/ub-ref.rs:18:1\n    |\n LL | const USIZE_AS_REF: &'static u8 = unsafe { mem::transmute(1337usize) };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling reference (created from integer)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}]}