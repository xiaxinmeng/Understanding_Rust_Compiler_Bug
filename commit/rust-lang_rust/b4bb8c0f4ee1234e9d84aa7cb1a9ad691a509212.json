{"sha": "b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YmI4YzBmNGVlMTIzNGU5ZDg0YWE3Y2IxYTlhZDY5MWE1MDkyMTI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-27T11:37:55Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-27T12:58:03Z"}, "message": "std: add begin_unwind_fmt that reduces codesize for formatted fail!().\n\nThis ends up saving a single `call` instruction in the optimised code,\nbut saves a few hundred lines of non-optimised IR for `fn main() {\nfail!(\"foo {}\", \"bar\"); }` (comparing against the minimal generic\nbaseline from the parent commit).", "tree": {"sha": "9fb5bc2209efd91a825d791caa029b8184c167e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fb5bc2209efd91a825d791caa029b8184c167e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212", "html_url": "https://github.com/rust-lang/rust/commit/b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5abe669831a59c48faa85e88ed8859b6dc63f49", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5abe669831a59c48faa85e88ed8859b6dc63f49", "html_url": "https://github.com/rust-lang/rust/commit/e5abe669831a59c48faa85e88ed8859b6dc63f49"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "4032b63790bf6572c1cdd0361918d044ec8771c1", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212", "patch": "@@ -48,8 +48,18 @@ macro_rules! fail(\n         ::std::rt::begin_unwind($msg, file!(), line!())\n     );\n     ($fmt:expr, $($arg:tt)*) => (\n-        ::std::rt::begin_unwind(format!($fmt, $($arg)*), file!(), line!())\n-    )\n+        {\n+            // a closure can't have return type !, so we need a full\n+            // function to pass to format_args!, *and* we need the\n+            // file and line numbers right here; so an inner bare fn\n+            // is our only choice.\n+            #[inline]\n+            fn run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n+                ::std::rt::begin_unwind_fmt(fmt, file!(), line!())\n+            }\n+            format_args!(run_fmt, $fmt, $($arg)*)\n+        }\n+        )\n )\n \n #[macro_export]"}, {"sha": "0e30f3e2efd0976990adc5cc32745dcc52335bde", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212", "patch": "@@ -69,7 +69,7 @@ use self::task::{Task, BlockedTask};\n pub use self::util::default_sched_threads;\n \n // Export unwinding facilities used by the failure macros\n-pub use self::unwind::{begin_unwind, begin_unwind_raw};\n+pub use self::unwind::{begin_unwind, begin_unwind_raw, begin_unwind_fmt};\n \n // FIXME: these probably shouldn't be public...\n #[doc(hidden)]"}, {"sha": "25a92148e96a93fdbad153a9b0ebf16aca3a3b06", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212", "patch": "@@ -58,6 +58,7 @@\n use any::{Any, AnyRefExt};\n use c_str::CString;\n use cast;\n+use fmt;\n use kinds::Send;\n use option::{Some, None, Option};\n use prelude::drop;\n@@ -382,6 +383,17 @@ pub fn begin_unwind_raw(msg: *u8, file: *u8, line: uint) -> ! {\n     begin_unwind(msg, file, line as uint)\n }\n \n+/// The entry point for unwinding with a formatted message.\n+///\n+/// This is designed to reduce the amount of code required at the call\n+/// site as much as possible (so that `fail!()` has as low an implact\n+/// on (e.g.) the inlining of other functions as possible), by moving\n+/// the actual formatting into this shared place.\n+#[inline(never)] #[cold]\n+pub fn begin_unwind_fmt(msg: &fmt::Arguments, file: &'static str, line: uint) -> ! {\n+    begin_unwind_inner(~fmt::format(msg), file, line)\n+}\n+\n /// This is the entry point of unwinding for fail!() and assert!().\n #[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n pub fn begin_unwind<M: Any + Send>(msg: M, file: &'static str, line: uint) -> ! {"}]}