{"sha": "6da4df9fc95c1da7373f49c07742a42aaf840198", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYTRkZjlmYzk1YzFkYTczNzNmNDljMDc3NDJhNDJhYWY4NDAxOTg=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-09-13T15:14:57Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-09-15T06:48:36Z"}, "message": "Make the semantics of Vec::truncate(N) consistent with slices.\n\nThis commit simplifies the implementation of `Vec::truncate(N)` and\nmakes its semantics identical to dropping the `[vec.len() - N..]`\nsub-slice tail of the vector, which is the same behavior as dropping a\nvector containing the same sub-slice.\n\nThis changes two unspecified aspects of `Vec::truncate` behavior:\n\n* the drop order, from back-to-front to front-to-back,\n* the behavior of `Vec::truncate` on panics: if dropping one element of\n  the tail panics, currently, `Vec::truncate` panics, but with this PR all other\n  elements are still dropped, and if dropping a second element of the tail\n  panics, with this PR, the program aborts.\n\nPrograms can trivially observe both changes. For example\n([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=7bef575b83b06e82b3e3529e4edbcac7)):\n\n```rust\nfn main() {\n    struct Bomb(usize);\n    impl Drop for Bomb {\n        fn drop(&mut self) {\n            panic!(format!(\"{}\", self.0));\n        }\n    }\n    let mut v = vec![Bomb(0), Bomb(1)];\n    std::panic::catch_unwind(std::panic::AssertUnwindSafe(|| {\n        v.truncate(0);\n    }));\n    assert_eq!(v.len(), 1);\n    std::mem::forget(v);\n}\n```\n\npanics printing `1` today and succeeds. With this change, it panics\nprinting `0` first (due to the drop order change), and then aborts\nwith a double-panic printing `1`, just like dropping the\n`[Bomb(0), Bomb(1)]` slice does, or dropping\n`vec![Bomb(0), Bomb(1)]` does.", "tree": {"sha": "afe362d07931fcb78980a8360858099f561bb2bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afe362d07931fcb78980a8360858099f561bb2bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6da4df9fc95c1da7373f49c07742a42aaf840198", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6da4df9fc95c1da7373f49c07742a42aaf840198", "html_url": "https://github.com/rust-lang/rust/commit/6da4df9fc95c1da7373f49c07742a42aaf840198", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6da4df9fc95c1da7373f49c07742a42aaf840198/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "572d3d9634b253bdd85af32380b10d1f7d189cdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/572d3d9634b253bdd85af32380b10d1f7d189cdb", "html_url": "https://github.com/rust-lang/rust/commit/572d3d9634b253bdd85af32380b10d1f7d189cdb"}], "stats": {"total": 34, "additions": 12, "deletions": 22}, "files": [{"sha": "64c49ccfefc53ed53eefe1c054ddb57c80870546", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6da4df9fc95c1da7373f49c07742a42aaf840198/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6da4df9fc95c1da7373f49c07742a42aaf840198/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=6da4df9fc95c1da7373f49c07742a42aaf840198", "patch": "@@ -685,25 +685,20 @@ impl<T> Vec<T> {\n     /// [`drain`]: #method.drain\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn truncate(&mut self, len: usize) {\n-        if mem::needs_drop::<T>() {\n-            let current_len = self.len;\n-            unsafe {\n-                let mut ptr = self.as_mut_ptr().add(self.len);\n-                // Set the final length at the end, keeping in mind that\n-                // dropping an element might panic. Works around a missed\n-                // optimization, as seen in the following issue:\n-                // https://github.com/rust-lang/rust/issues/51802\n-                let mut local_len = SetLenOnDrop::new(&mut self.len);\n-\n-                // drop any extra elements\n-                for _ in len..current_len {\n-                    local_len.decrement_len(1);\n-                    ptr = ptr.offset(-1);\n-                    ptr::drop_in_place(ptr);\n-                }\n+        // This is safe because:\n+        //\n+        // * the slice passed to `drop_in_place` is valid; the `len > self.len`\n+        //   case avoids creating an invalid slice, and\n+        // * the `len` of the vector is shrunk before calling `drop_in_place`,\n+        //   such that no value will be dropped twice in case `drop_in_place`\n+        //   were to panic once (if it panics twice, the program aborts).\n+        unsafe {\n+            if len > self.len {\n+                return;\n             }\n-        } else if len <= self.len {\n+            let s = self.get_unchecked_mut(len..) as *mut _;\n             self.len = len;\n+            ptr::drop_in_place(s);\n         }\n     }\n \n@@ -1590,11 +1585,6 @@ impl<'a> SetLenOnDrop<'a> {\n     fn increment_len(&mut self, increment: usize) {\n         self.local_len += increment;\n     }\n-\n-    #[inline]\n-    fn decrement_len(&mut self, decrement: usize) {\n-        self.local_len -= decrement;\n-    }\n }\n \n impl Drop for SetLenOnDrop<'_> {"}]}