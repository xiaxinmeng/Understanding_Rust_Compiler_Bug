{"sha": "e51ae2331704e2ad55d0bdae8fd57c55ac012dca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MWFlMjMzMTcwNGUyYWQ1NWQwYmRhZThmZDU3YzU1YWMwMTJkY2E=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-27T06:27:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-27T06:27:13Z"}, "message": "rustdoc: Apply generic string-op passes to resources", "tree": {"sha": "041fe2e067e890c008efcb751884073c8bddc5c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/041fe2e067e890c008efcb751884073c8bddc5c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e51ae2331704e2ad55d0bdae8fd57c55ac012dca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e51ae2331704e2ad55d0bdae8fd57c55ac012dca", "html_url": "https://github.com/rust-lang/rust/commit/e51ae2331704e2ad55d0bdae8fd57c55ac012dca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e51ae2331704e2ad55d0bdae8fd57c55ac012dca/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c188fb82f815f80b3ff411f699f4dc5f16823e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c188fb82f815f80b3ff411f699f4dc5f16823e0", "html_url": "https://github.com/rust-lang/rust/commit/4c188fb82f815f80b3ff411f699f4dc5f16823e0"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "7168a0b4d874d02d8080543238ff72ff8bdb2daf", "filename": "src/rustdoc/desc_pass.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e51ae2331704e2ad55d0bdae8fd57c55ac012dca/src%2Frustdoc%2Fdesc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e51ae2331704e2ad55d0bdae8fd57c55ac012dca/src%2Frustdoc%2Fdesc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_pass.rs?ref=e51ae2331704e2ad55d0bdae8fd57c55ac012dca", "patch": "@@ -19,7 +19,8 @@ fn run(\n         fold_mod: fold_mod,\n         fold_const: fold_const,\n         fold_fn: fold_fn,\n-        fold_enum: fold_enum\n+        fold_enum: fold_enum,\n+        fold_res: fold_res\n         with *fold::default_seq_fold(op)\n     });\n     fold.fold_crate(fold, doc)\n@@ -84,6 +85,20 @@ fn fold_enum(fold: fold::fold<op>, doc: doc::enumdoc) -> doc::enumdoc {\n     }\n }\n \n+fn fold_res(fold: fold::fold<op>, doc: doc::resdoc) -> doc::resdoc {\n+    ~{\n+        brief: maybe_apply_op(fold.ctxt, doc.brief),\n+        desc: maybe_apply_op(fold.ctxt, doc.desc),\n+        args: vec::map(doc.args) {|arg|\n+            ~{\n+                desc: maybe_apply_op(fold.ctxt, arg.desc)\n+                with *arg\n+            }\n+        }\n+        with *doc\n+    }\n+}\n+\n #[test]\n fn should_execute_op_on_enum_brief() {\n     let source = \"#[doc(brief = \\\" a \\\")] enum a { b }\";\n@@ -112,4 +127,34 @@ fn should_execute_op_on_variant_desc() {\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = mk_pass(str::trim)(srv, doc);\n     assert doc.topmod.enums[0].variants[0].desc == some(\"a\");\n+}\n+\n+#[test]\n+fn should_execute_op_on_resource_brief() {\n+    let source = \"#[doc(brief = \\\" a \\\")] resource r(a: bool) { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = mk_pass(str::trim)(srv, doc);\n+    assert doc.topmod.resources[0].brief == some(\"a\");\n+}\n+\n+#[test]\n+fn should_execute_op_on_resource_desc() {\n+    let source = \"#[doc(desc = \\\" a \\\")] resource r(a: bool) { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = mk_pass(str::trim)(srv, doc);\n+    assert doc.topmod.resources[0].desc == some(\"a\");\n+}\n+\n+#[test]\n+fn should_execute_op_on_resource_args() {\n+    let source = \"#[doc(args(a = \\\" a \\\"))] resource r(a: bool) { }\";\n+    let srv = astsrv::mk_srv_from_str(source);\n+    let doc = extract::from_srv(srv, \"\");\n+    let doc = attr_pass::mk_pass()(srv, doc);\n+    let doc = mk_pass(str::trim)(srv, doc);\n+    assert doc.topmod.resources[0].args[0].desc == some(\"a\");\n }\n\\ No newline at end of file"}]}