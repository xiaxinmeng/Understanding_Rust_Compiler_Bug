{"sha": "8dfe52293a61aaa4ff44b20d538c52ddc7834617", "node_id": "C_kwDOAAsO6NoAKDhkZmU1MjI5M2E2MWFhYTRmZjQ0YjIwZDUzOGM1MmRkYzc4MzQ2MTc", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-09-30T02:33:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-30T02:33:38Z"}, "message": "Rollup merge of #89297 - GuillaumeGomez:remove-never-from-type-enum, r=camelid\n\nRemove Never variant from clean::Type enum\n\nFixes #89287.\n\nr? ``@camelid``", "tree": {"sha": "f69acb7035f51c78d1949698414ae614d4cdae5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f69acb7035f51c78d1949698414ae614d4cdae5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dfe52293a61aaa4ff44b20d538c52ddc7834617", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVSIDCRBK7hj4Ov3rIwAAVUYIADiXplLeuBg1YBH624resa+X\n2ERhZoembjF56XSAZjA4gqRj8uJE+bU94PR3INfn0GvqIz7OoTmypv8oFvZ0tuIc\ndpHCtpusgath+wtvq8GlTxbADLXE0Vq0tUrHmBnfXwxVOxgCpKih5JKuM0/GcZv4\nQgF9A6IjBTPPCqlxyicMHrI2z8AGRyVjKkgUiEEV91/uw4DhMgjXYM44Thk5QG9Q\nHkctR+ABU5hsyoi5YvpUSkesOUBkjiPdmQWZP94gcy5clY11fkEWbmBTgRtAFDYz\nt/wRDUDFmgZBde32htR3hFOiHWX70Uu87N15HazNUFaSuFZeGm2z8E7ohDaBNbA=\n=tSPe\n-----END PGP SIGNATURE-----\n", "payload": "tree f69acb7035f51c78d1949698414ae614d4cdae5e\nparent 9050c541c51bbb04ce19bcbc2b428fb00b8e0865\nparent bdd34717b86c2a6ab84d21764dc12e00a431d154\nauthor Eric Huss <eric@huss.org> 1632969218 -0700\ncommitter GitHub <noreply@github.com> 1632969218 -0700\n\nRollup merge of #89297 - GuillaumeGomez:remove-never-from-type-enum, r=camelid\n\nRemove Never variant from clean::Type enum\n\nFixes #89287.\n\nr? ``@camelid``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dfe52293a61aaa4ff44b20d538c52ddc7834617", "html_url": "https://github.com/rust-lang/rust/commit/8dfe52293a61aaa4ff44b20d538c52ddc7834617", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dfe52293a61aaa4ff44b20d538c52ddc7834617/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9050c541c51bbb04ce19bcbc2b428fb00b8e0865", "url": "https://api.github.com/repos/rust-lang/rust/commits/9050c541c51bbb04ce19bcbc2b428fb00b8e0865", "html_url": "https://github.com/rust-lang/rust/commit/9050c541c51bbb04ce19bcbc2b428fb00b8e0865"}, {"sha": "bdd34717b86c2a6ab84d21764dc12e00a431d154", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd34717b86c2a6ab84d21764dc12e00a431d154", "html_url": "https://github.com/rust-lang/rust/commit/bdd34717b86c2a6ab84d21764dc12e00a431d154"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "49fc93f3feabc755340625f814ccb89ce832db86", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8dfe52293a61aaa4ff44b20d538c52ddc7834617/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfe52293a61aaa4ff44b20d538c52ddc7834617/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8dfe52293a61aaa4ff44b20d538c52ddc7834617", "patch": "@@ -1313,7 +1313,7 @@ impl Clean<Type> for hir::Ty<'_> {\n         use rustc_hir::*;\n \n         match self.kind {\n-            TyKind::Never => Never,\n+            TyKind::Never => Primitive(PrimitiveType::Never),\n             TyKind::Ptr(ref m) => RawPointer(m.mutbl, box m.ty.clean(cx)),\n             TyKind::Rptr(ref l, ref m) => {\n                 // There are two times a `Fresh` lifetime can be created:\n@@ -1402,7 +1402,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n         trace!(\"cleaning type: {:?}\", self);\n         let ty = normalize(cx, self).unwrap_or(self);\n         match *ty.kind() {\n-            ty::Never => Never,\n+            ty::Never => Primitive(PrimitiveType::Never),\n             ty::Bool => Primitive(PrimitiveType::Bool),\n             ty::Char => Primitive(PrimitiveType::Char),\n             ty::Int(int_ty) => Primitive(int_ty.into()),"}, {"sha": "248ff339514ed2fad3553379a8c2ea804670bf08", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8dfe52293a61aaa4ff44b20d538c52ddc7834617/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfe52293a61aaa4ff44b20d538c52ddc7834617/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=8dfe52293a61aaa4ff44b20d538c52ddc7834617", "patch": "@@ -1396,7 +1396,6 @@ crate enum Type {\n     Slice(Box<Type>),\n     /// The `String` field is about the size or the constant representing the array's length.\n     Array(Box<Type>, String),\n-    Never,\n     RawPointer(Mutability, Box<Type>),\n     BorrowedRef {\n         lifetime: Option<Lifetime>,\n@@ -1462,7 +1461,6 @@ impl Type {\n             }\n             RawPointer(..) => Some(PrimitiveType::RawPointer),\n             BareFunction(..) => Some(PrimitiveType::Fn),\n-            Never => Some(PrimitiveType::Never),\n             _ => None,\n         }\n     }\n@@ -1550,7 +1548,6 @@ impl Type {\n                 }\n             }\n             BareFunction(..) => PrimitiveType::Fn,\n-            Never => PrimitiveType::Never,\n             Slice(..) => PrimitiveType::Slice,\n             Array(..) => PrimitiveType::Array,\n             RawPointer(..) => PrimitiveType::RawPointer,"}, {"sha": "bcd78b2adc08513145b2a0194dc920613cc3d69c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8dfe52293a61aaa4ff44b20d538c52ddc7834617/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfe52293a61aaa4ff44b20d538c52ddc7834617/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=8dfe52293a61aaa4ff44b20d538c52ddc7834617", "patch": "@@ -761,6 +761,9 @@ fn fmt_type<'cx>(\n             fmt::Display::fmt(&tybounds(bounds, lt, cx), f)\n         }\n         clean::Infer => write!(f, \"_\"),\n+        clean::Primitive(clean::PrimitiveType::Never) => {\n+            primitive_link(f, PrimitiveType::Never, \"!\", cx)\n+        }\n         clean::Primitive(prim) => primitive_link(f, prim, &*prim.as_sym().as_str(), cx),\n         clean::BareFunction(ref decl) => {\n             if f.alternate() {\n@@ -819,7 +822,6 @@ fn fmt_type<'cx>(\n                 primitive_link(f, PrimitiveType::Array, &format!(\"; {}]\", Escape(n)), cx)\n             }\n         }\n-        clean::Never => primitive_link(f, PrimitiveType::Never, \"!\", cx),\n         clean::RawPointer(m, ref t) => {\n             let m = match m {\n                 hir::Mutability::Mut => \"mut\","}, {"sha": "edd1d8b98fc64b276eabe71eb00c871668c7d407", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8dfe52293a61aaa4ff44b20d538c52ddc7834617/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfe52293a61aaa4ff44b20d538c52ddc7834617/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=8dfe52293a61aaa4ff44b20d538c52ddc7834617", "patch": "@@ -244,7 +244,6 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n         | clean::Tuple(_)\n         | clean::Slice(_)\n         | clean::Array(_, _)\n-        | clean::Never\n         | clean::RawPointer(_, _)\n         | clean::QPath { .. }\n         | clean::Infer"}, {"sha": "ea81b041c3bc6a973f5f94864d57b2c341cc8f91", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8dfe52293a61aaa4ff44b20d538c52ddc7834617/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dfe52293a61aaa4ff44b20d538c52ddc7834617/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=8dfe52293a61aaa4ff44b20d538c52ddc7834617", "patch": "@@ -417,13 +417,13 @@ impl FromWithTcx<clean::Type> for Type {\n                 }\n             }\n             Generic(s) => Type::Generic(s.to_string()),\n+            Primitive(clean::PrimitiveType::Never) => Type::Never,\n             Primitive(p) => Type::Primitive(p.as_sym().to_string()),\n             BareFunction(f) => Type::FunctionPointer(Box::new((*f).into_tcx(tcx))),\n             Tuple(t) => Type::Tuple(t.into_iter().map(|x| x.into_tcx(tcx)).collect()),\n             Slice(t) => Type::Slice(Box::new((*t).into_tcx(tcx))),\n             Array(t, s) => Type::Array { type_: Box::new((*t).into_tcx(tcx)), len: s },\n             ImplTrait(g) => Type::ImplTrait(g.into_iter().map(|x| x.into_tcx(tcx)).collect()),\n-            Never => Type::Never,\n             Infer => Type::Infer,\n             RawPointer(mutability, type_) => Type::RawPointer {\n                 mutable: mutability == ast::Mutability::Mut,"}]}