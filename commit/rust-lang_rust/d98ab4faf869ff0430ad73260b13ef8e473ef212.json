{"sha": "d98ab4faf869ff0430ad73260b13ef8e473ef212", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5OGFiNGZhZjg2OWZmMDQzMGFkNzMyNjBiMTNlZjhlNDczZWYyMTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-15T19:27:05Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-27T23:15:36Z"}, "message": "std: Don't assume thread::current() works on panic\n\nInspecting the current thread's info may not always work due to the TLS value\nhaving been destroyed (or is actively being destroyed). The code for printing\na panic message assumed, however, that it could acquire the thread's name\nthrough this method.\n\nInstead this commit propagates the `Option` outwards to allow the\n`std::panicking` module to handle the case where the current thread isn't\npresent.\n\nWhile it solves the immediate issue of #24313, there is still another underlying\nissue of panicking destructors in thread locals will abort the process.\n\nCloses #24313", "tree": {"sha": "22fa7775d0ea81021b825738da48498d02ea4f5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22fa7775d0ea81021b825738da48498d02ea4f5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d98ab4faf869ff0430ad73260b13ef8e473ef212", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d98ab4faf869ff0430ad73260b13ef8e473ef212", "html_url": "https://github.com/rust-lang/rust/commit/d98ab4faf869ff0430ad73260b13ef8e473ef212", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d98ab4faf869ff0430ad73260b13ef8e473ef212/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e154aaad6486fa8bf19b02bc3026ede0ceb91cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e154aaad6486fa8bf19b02bc3026ede0ceb91cf", "html_url": "https://github.com/rust-lang/rust/commit/0e154aaad6486fa8bf19b02bc3026ede0ceb91cf"}], "stats": {"total": 62, "additions": 51, "deletions": 11}, "files": [{"sha": "7366524fd7ea82f1729f67578920b5e0ac2adc41", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d98ab4faf869ff0430ad73260b13ef8e473ef212/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98ab4faf869ff0430ad73260b13ef8e473ef212/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=d98ab4faf869ff0430ad73260b13ef8e473ef212", "patch": "@@ -17,7 +17,7 @@ use any::Any;\n use cell::RefCell;\n use rt::{backtrace, unwind};\n use sys::stdio::Stderr;\n-use thread;\n+use sys_common::thread_info;\n \n thread_local! {\n     pub static LOCAL_STDERR: RefCell<Option<Box<Write + Send>>> = {\n@@ -34,8 +34,8 @@ pub fn on_panic(obj: &(Any+Send), file: &'static str, line: u32) {\n         }\n     };\n     let mut err = Stderr::new();\n-    let thread = thread::current();\n-    let name = thread.name().unwrap_or(\"<unnamed>\");\n+    let thread = thread_info::current_thread();\n+    let name = thread.as_ref().and_then(|t| t.name()).unwrap_or(\"<unnamed>\");\n     let prev = LOCAL_STDERR.with(|s| s.borrow_mut().take());\n     match prev {\n         Some(mut stderr) => {"}, {"sha": "ae55bae37aa884e3870e7b43315f745e425a927d", "filename": "src/libstd/sys/common/thread_info.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d98ab4faf869ff0430ad73260b13ef8e473ef212/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98ab4faf869ff0430ad73260b13ef8e473ef212/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fthread_info.rs?ref=d98ab4faf869ff0430ad73260b13ef8e473ef212", "patch": "@@ -25,10 +25,9 @@ struct ThreadInfo {\n thread_local! { static THREAD_INFO: RefCell<Option<ThreadInfo>> = RefCell::new(None) }\n \n impl ThreadInfo {\n-    fn with<R, F>(f: F) -> R where F: FnOnce(&mut ThreadInfo) -> R {\n+    fn with<R, F>(f: F) -> Option<R> where F: FnOnce(&mut ThreadInfo) -> R {\n         if THREAD_INFO.state() == LocalKeyState::Destroyed {\n-            panic!(\"Use of std::thread::current() is not possible after \\\n-                    the thread's local data has been destroyed\");\n+            return None\n         }\n \n         THREAD_INFO.with(move |c| {\n@@ -38,16 +37,16 @@ impl ThreadInfo {\n                     thread: NewThread::new(None),\n                 })\n             }\n-            f(c.borrow_mut().as_mut().unwrap())\n+            Some(f(c.borrow_mut().as_mut().unwrap()))\n         })\n     }\n }\n \n-pub fn current_thread() -> Thread {\n+pub fn current_thread() -> Option<Thread> {\n     ThreadInfo::with(|info| info.thread.clone())\n }\n \n-pub fn stack_guard() -> usize {\n+pub fn stack_guard() -> Option<usize> {\n     ThreadInfo::with(|info| info.stack_guard)\n }\n "}, {"sha": "2bc280d12743958fbe5a1ff36b9c96960a27b223", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d98ab4faf869ff0430ad73260b13ef8e473ef212/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98ab4faf869ff0430ad73260b13ef8e473ef212/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=d98ab4faf869ff0430ad73260b13ef8e473ef212", "patch": "@@ -81,7 +81,7 @@ mod imp {\n         // We're calling into functions with stack checks\n         stack::record_sp_limit(0);\n \n-        let guard = thread_info::stack_guard();\n+        let guard = thread_info::stack_guard().unwrap_or(0);\n         let addr = (*info).si_addr as usize;\n \n         if guard == 0 || addr < guard - PAGE_SIZE || addr >= guard {"}, {"sha": "ce531fb13812c30db599fef9a42b10e8f3a8aad0", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d98ab4faf869ff0430ad73260b13ef8e473ef212/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98ab4faf869ff0430ad73260b13ef8e473ef212/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=d98ab4faf869ff0430ad73260b13ef8e473ef212", "patch": "@@ -407,7 +407,9 @@ pub fn scoped<'a, T, F>(f: F) -> JoinGuard<'a, T> where\n /// Gets a handle to the thread that invokes it.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn current() -> Thread {\n-    thread_info::current_thread()\n+    thread_info::current_thread().expect(\"use of std::thread::current() is not \\\n+                                          possible after the thread's local \\\n+                                          data has been destroyed\")\n }\n \n /// Cooperatively gives up a timeslice to the OS scheduler."}, {"sha": "9acfb04d781e0847db017dc524659079408ccee7", "filename": "src/test/run-pass/issue-24313.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d98ab4faf869ff0430ad73260b13ef8e473ef212/src%2Ftest%2Frun-pass%2Fissue-24313.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d98ab4faf869ff0430ad73260b13ef8e473ef212/src%2Ftest%2Frun-pass%2Fissue-24313.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-24313.rs?ref=d98ab4faf869ff0430ad73260b13ef8e473ef212", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::thread;\n+use std::env;\n+use std::process::Command;\n+\n+struct Handle(i32);\n+\n+impl Drop for Handle {\n+    fn drop(&mut self) { panic!(); }\n+}\n+\n+thread_local!(static HANDLE: Handle = Handle(0));\n+\n+fn main() {\n+    let args = env::args().collect::<Vec<_>>();\n+    if args.len() == 1 {\n+        let out = Command::new(&args[0]).arg(\"test\").output().unwrap();\n+        let stderr = std::str::from_utf8(&out.stderr).unwrap();\n+        assert!(stderr.contains(\"panicked at 'explicit panic'\"),\n+                \"bad failure message:\\n{}\\n\", stderr);\n+    } else {\n+        // TLS dtors are not always run on process exit\n+        thread::spawn(|| {\n+            HANDLE.with(|h| {\n+                println!(\"{}\", h.0);\n+            });\n+        }).join().unwrap();\n+    }\n+}\n+"}]}