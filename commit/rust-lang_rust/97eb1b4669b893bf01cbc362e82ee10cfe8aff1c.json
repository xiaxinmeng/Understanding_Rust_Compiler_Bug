{"sha": "97eb1b4669b893bf01cbc362e82ee10cfe8aff1c", "node_id": "C_kwDOAAsO6NoAKDk3ZWIxYjQ2NjliODkzYmYwMWNiYzM2MmU4MmVlMTBjZmU4YWZmMWM", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-03T01:14:27Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-03T10:47:02Z"}, "message": "Change `initial_matcher_pos()` into `MatcherPos::new()`.", "tree": {"sha": "911beff563542bc9ce2231d1cfdc3acc35649dc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/911beff563542bc9ce2231d1cfdc3acc35649dc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97eb1b4669b893bf01cbc362e82ee10cfe8aff1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97eb1b4669b893bf01cbc362e82ee10cfe8aff1c", "html_url": "https://github.com/rust-lang/rust/commit/97eb1b4669b893bf01cbc362e82ee10cfe8aff1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97eb1b4669b893bf01cbc362e82ee10cfe8aff1c/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f3fd625022c22f0f415e9c11ca84e1f2be5771", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f3fd625022c22f0f415e9c11ca84e1f2be5771", "html_url": "https://github.com/rust-lang/rust/commit/e5f3fd625022c22f0f415e9c11ca84e1f2be5771"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "81e30a8a742ce879db948f7db23abbadc7b61a11", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 29, "deletions": 29, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/97eb1b4669b893bf01cbc362e82ee10cfe8aff1c/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97eb1b4669b893bf01cbc362e82ee10cfe8aff1c/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=97eb1b4669b893bf01cbc362e82ee10cfe8aff1c", "patch": "@@ -154,7 +154,7 @@ type NamedMatchVec = SmallVec<[NamedMatch; 4]>;\n /// lifetime. By separating `'tt` from `'root`, we can show that.\n #[derive(Clone)]\n struct MatcherPos<'root, 'tt> {\n-    /// The token or sequence of tokens that make up the matcher\n+    /// The token or sequence of tokens that make up the matcher. `elts` is short for \"elements\".\n     top_elts: TokenTreeOrTokenTreeSlice<'tt>,\n \n     /// The position of the \"dot\" in this matcher\n@@ -203,6 +203,33 @@ struct MatcherPos<'root, 'tt> {\n rustc_data_structures::static_assert_size!(MatcherPos<'_, '_>, 192);\n \n impl<'root, 'tt> MatcherPos<'root, 'tt> {\n+    /// Generates the top-level matcher position in which the \"dot\" is before the first token of\n+    /// the matcher `ms`.\n+    fn new(ms: &'tt [TokenTree]) -> Self {\n+        let match_idx_hi = count_names(ms);\n+        MatcherPos {\n+            // Start with the top level matcher given to us.\n+            top_elts: TtSeq(ms),\n+\n+            // The \"dot\" is before the first token of the matcher.\n+            idx: 0,\n+\n+            // Initialize `matches` to a bunch of empty `Vec`s -- one for each metavar in\n+            // `top_elts`. `match_lo` for `top_elts` is 0 and `match_hi` is `match_idx_hi`.\n+            // `match_cur` is 0 since we haven't actually matched anything yet.\n+            matches: create_matches(match_idx_hi),\n+            match_lo: 0,\n+            match_cur: 0,\n+            match_hi: match_idx_hi,\n+\n+            // Haven't descended into any delimiters, so this is empty.\n+            stack: smallvec![],\n+\n+            // Haven't descended into any sequences, so this is `None`.\n+            repetition: None,\n+        }\n+    }\n+\n     /// Adds `m` as a named match for the `idx`-th metavar.\n     fn push_match(&mut self, idx: usize, m: NamedMatch) {\n         let matches = Lrc::make_mut(&mut self.matches[idx]);\n@@ -314,33 +341,6 @@ fn create_matches(len: usize) -> Box<[Lrc<NamedMatchVec>]> {\n     .into_boxed_slice()\n }\n \n-/// Generates the top-level matcher position in which the \"dot\" is before the first token of the\n-/// matcher `ms`.\n-fn initial_matcher_pos<'root, 'tt>(ms: &'tt [TokenTree]) -> MatcherPos<'root, 'tt> {\n-    let match_idx_hi = count_names(ms);\n-    let matches = create_matches(match_idx_hi);\n-    MatcherPos {\n-        // Start with the top level matcher given to us\n-        top_elts: TtSeq(ms), // \"elts\" is an abbr. for \"elements\"\n-        // The \"dot\" is before the first token of the matcher\n-        idx: 0,\n-\n-        // Initialize `matches` to a bunch of empty `Vec`s -- one for each metavar in `top_elts`.\n-        // `match_lo` for `top_elts` is 0 and `match_hi` is `matches.len()`. `match_cur` is 0 since\n-        // we haven't actually matched anything yet.\n-        matches,\n-        match_lo: 0,\n-        match_cur: 0,\n-        match_hi: match_idx_hi,\n-\n-        // Haven't descended into any delimiters, so empty stack\n-        stack: smallvec![],\n-\n-        // Haven't descended into any sequences, so this is `None`.\n-        repetition: None,\n-    }\n-}\n-\n /// `NamedMatch` is a pattern-match result for a single `token::MATCH_NONTERMINAL`:\n /// so it is associated with a single ident in a parse, and all\n /// `MatchedNonterminal`s in the `NamedMatch` have the same non-terminal type\n@@ -642,7 +642,7 @@ pub(super) fn parse_tt(\n     //\n     // This MatcherPos instance is allocated on the stack. All others -- and\n     // there are frequently *no* others! -- are allocated on the heap.\n-    let mut initial = initial_matcher_pos(ms);\n+    let mut initial = MatcherPos::new(ms);\n     let mut cur_items = smallvec![MatcherPosHandle::Ref(&mut initial)];\n     let mut next_items = Vec::new();\n "}]}