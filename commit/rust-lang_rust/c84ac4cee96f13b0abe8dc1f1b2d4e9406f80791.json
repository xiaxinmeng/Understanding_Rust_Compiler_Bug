{"sha": "c84ac4cee96f13b0abe8dc1f1b2d4e9406f80791", "node_id": "C_kwDOAAsO6NoAKGM4NGFjNGNlZTk2ZjEzYjBhYmU4ZGMxZjFiMmQ0ZTk0MDZmODA3OTE", "commit": {"author": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-10-01T01:10:10Z"}, "committer": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-10-15T11:03:29Z"}, "message": "Move some things around", "tree": {"sha": "633a92df240a87edf2c1749b48698e57b3afe613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/633a92df240a87edf2c1749b48698e57b3afe613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c84ac4cee96f13b0abe8dc1f1b2d4e9406f80791", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c84ac4cee96f13b0abe8dc1f1b2d4e9406f80791", "html_url": "https://github.com/rust-lang/rust/commit/c84ac4cee96f13b0abe8dc1f1b2d4e9406f80791", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c84ac4cee96f13b0abe8dc1f1b2d4e9406f80791/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd3525cff90fe2363494559499276ca07d2aef7", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd3525cff90fe2363494559499276ca07d2aef7", "html_url": "https://github.com/rust-lang/rust/commit/dfd3525cff90fe2363494559499276ca07d2aef7"}], "stats": {"total": 68, "additions": 34, "deletions": 34}, "files": [{"sha": "d7e4a2c4422e844dfbd97483f971e1b0bdf35939", "filename": "clippy_lints/src/utils/internal_lints/compiler_lint_functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c84ac4cee96f13b0abe8dc1f1b2d4e9406f80791/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fcompiler_lint_functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84ac4cee96f13b0abe8dc1f1b2d4e9406f80791/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fcompiler_lint_functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fcompiler_lint_functions.rs?ref=c84ac4cee96f13b0abe8dc1f1b2d4e9406f80791", "patch": "@@ -30,6 +30,8 @@ declare_clippy_lint! {\n     \"usage of the lint functions of the compiler instead of the utils::* variant\"\n }\n \n+impl_lint_pass!(CompilerLintFunctions => [COMPILER_LINT_FUNCTIONS]);\n+\n #[derive(Clone, Default)]\n pub struct CompilerLintFunctions {\n     map: FxHashMap<&'static str, &'static str>,\n@@ -48,8 +50,6 @@ impl CompilerLintFunctions {\n     }\n }\n \n-impl_lint_pass!(CompilerLintFunctions => [COMPILER_LINT_FUNCTIONS]);\n-\n impl<'tcx> LateLintPass<'tcx> for CompilerLintFunctions {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if is_lint_allowed(cx, COMPILER_LINT_FUNCTIONS, expr.hir_id) {"}, {"sha": "04f1952e813ae4c299dbb4b71b04d4536565cadb", "filename": "clippy_lints/src/utils/internal_lints/invalid_paths.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c84ac4cee96f13b0abe8dc1f1b2d4e9406f80791/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c84ac4cee96f13b0abe8dc1f1b2d4e9406f80791/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Finvalid_paths.rs?ref=c84ac4cee96f13b0abe8dc1f1b2d4e9406f80791", "patch": "@@ -25,6 +25,38 @@ declare_clippy_lint! {\n     \"invalid path\"\n }\n \n+declare_lint_pass!(InvalidPaths => [INVALID_PATHS]);\n+\n+impl<'tcx> LateLintPass<'tcx> for InvalidPaths {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        let local_def_id = &cx.tcx.parent_module(item.hir_id());\n+        let mod_name = &cx.tcx.item_name(local_def_id.to_def_id());\n+        if_chain! {\n+            if mod_name.as_str() == \"paths\";\n+            if let hir::ItemKind::Const(ty, body_id) = item.kind;\n+            let ty = hir_ty_to_ty(cx.tcx, ty);\n+            if let ty::Array(el_ty, _) = &ty.kind();\n+            if let ty::Ref(_, el_ty, _) = &el_ty.kind();\n+            if el_ty.is_str();\n+            let body = cx.tcx.hir().body(body_id);\n+            let typeck_results = cx.tcx.typeck_body(body_id);\n+            if let Some(Constant::Vec(path)) = constant_simple(cx, typeck_results, body.value);\n+            let path: Vec<&str> = path.iter().map(|x| {\n+                    if let Constant::Str(s) = x {\n+                        s.as_str()\n+                    } else {\n+                        // We checked the type of the constant above\n+                        unreachable!()\n+                    }\n+                }).collect();\n+            if !check_path(cx, &path[..]);\n+            then {\n+                span_lint(cx, INVALID_PATHS, item.span, \"invalid path\");\n+            }\n+        }\n+    }\n+}\n+\n // This is not a complete resolver for paths. It works on all the paths currently used in the paths\n // module.  That's all it does and all it needs to do.\n pub fn check_path(cx: &LateContext<'_>, path: &[&str]) -> bool {\n@@ -71,35 +103,3 @@ pub fn check_path(cx: &LateContext<'_>, path: &[&str]) -> bool {\n \n     false\n }\n-\n-declare_lint_pass!(InvalidPaths => [INVALID_PATHS]);\n-\n-impl<'tcx> LateLintPass<'tcx> for InvalidPaths {\n-    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        let local_def_id = &cx.tcx.parent_module(item.hir_id());\n-        let mod_name = &cx.tcx.item_name(local_def_id.to_def_id());\n-        if_chain! {\n-            if mod_name.as_str() == \"paths\";\n-            if let hir::ItemKind::Const(ty, body_id) = item.kind;\n-            let ty = hir_ty_to_ty(cx.tcx, ty);\n-            if let ty::Array(el_ty, _) = &ty.kind();\n-            if let ty::Ref(_, el_ty, _) = &el_ty.kind();\n-            if el_ty.is_str();\n-            let body = cx.tcx.hir().body(body_id);\n-            let typeck_results = cx.tcx.typeck_body(body_id);\n-            if let Some(Constant::Vec(path)) = constant_simple(cx, typeck_results, body.value);\n-            let path: Vec<&str> = path.iter().map(|x| {\n-                    if let Constant::Str(s) = x {\n-                        s.as_str()\n-                    } else {\n-                        // We checked the type of the constant above\n-                        unreachable!()\n-                    }\n-                }).collect();\n-            if !check_path(cx, &path[..]);\n-            then {\n-                span_lint(cx, INVALID_PATHS, item.span, \"invalid path\");\n-            }\n-        }\n-    }\n-}"}]}