{"sha": "e851bc7404c14aa752d8c139be6de475163ac5ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NTFiYzc0MDRjMTRhYTc1MmQ4YzEzOWJlNmRlNDc1MTYzYWM1YWU=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-10-04T21:00:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-04T21:00:05Z"}, "message": "Merge pull request #1257 from KitFreddura/master\n\nIf let some lint", "tree": {"sha": "a141ecdf0d1f31b6759626992fba79927e57f5b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a141ecdf0d1f31b6759626992fba79927e57f5b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e851bc7404c14aa752d8c139be6de475163ac5ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e851bc7404c14aa752d8c139be6de475163ac5ae", "html_url": "https://github.com/rust-lang/rust/commit/e851bc7404c14aa752d8c139be6de475163ac5ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e851bc7404c14aa752d8c139be6de475163ac5ae/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85e37795b91c0a0070b782e273b2a20f9eaaa664", "url": "https://api.github.com/repos/rust-lang/rust/commits/85e37795b91c0a0070b782e273b2a20f9eaaa664", "html_url": "https://github.com/rust-lang/rust/commit/85e37795b91c0a0070b782e273b2a20f9eaaa664"}, {"sha": "c8aa35e15040ff30f4b5058c6afdd0184df653ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8aa35e15040ff30f4b5058c6afdd0184df653ba", "html_url": "https://github.com/rust-lang/rust/commit/c8aa35e15040ff30f4b5058c6afdd0184df653ba"}], "stats": {"total": 91, "additions": 88, "deletions": 3}, "files": [{"sha": "fc8464decfa0338b8f5a285a726ab033742d3c89", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e851bc7404c14aa752d8c139be6de475163ac5ae/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e851bc7404c14aa752d8c139be6de475163ac5ae/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e851bc7404c14aa752d8c139be6de475163ac5ae", "patch": "@@ -250,6 +250,7 @@ All notable changes to this project will be documented in this file.\n [`for_loop_over_option`]: https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option\n [`for_loop_over_result`]: https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result\n [`identity_op`]: https://github.com/Manishearth/rust-clippy/wiki#identity_op\n+[`if_let_some_result`]: https://github.com/Manishearth/rust-clippy/wiki#if_let_some_result\n [`if_not_else`]: https://github.com/Manishearth/rust-clippy/wiki#if_not_else\n [`if_same_then_else`]: https://github.com/Manishearth/rust-clippy/wiki#if_same_then_else\n [`ifs_same_cond`]: https://github.com/Manishearth/rust-clippy/wiki#ifs_same_cond"}, {"sha": "45f236aba4e51b550e527f74b4fa4d5c5d70a006", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e851bc7404c14aa752d8c139be6de475163ac5ae/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/e851bc7404c14aa752d8c139be6de475163ac5ae/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=e851bc7404c14aa752d8c139be6de475163ac5ae", "patch": "@@ -174,7 +174,7 @@ You can check out this great service at [clippy.bashy.io](https://clippy.bashy.i\n \n ## Lints\n \n-There are 172 lints included in this crate:\n+There are 173 lints included in this crate:\n \n name                                                                                                                 | default | triggers on\n ---------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -231,6 +231,7 @@ name\n [for_loop_over_option](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option)                         | warn    | for-looping over an `Option`, which is more clearly expressed as an `if let`\n [for_loop_over_result](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result)                         | warn    | for-looping over a `Result`, which is more clearly expressed as an `if let`\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                           | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n+[if_let_some_result](https://github.com/Manishearth/rust-clippy/wiki#if_let_some_result)                             | warn    | usage of `ok()` in `if let Some(pat)` statements is unnecessary, match on `Ok(pat)` instead\n [if_not_else](https://github.com/Manishearth/rust-clippy/wiki#if_not_else)                                           | allow   | `if` branches that could be swapped so no negation operation is necessary on the condition\n [if_same_then_else](https://github.com/Manishearth/rust-clippy/wiki#if_same_then_else)                               | warn    | if with the same *then* and *else* blocks\n [ifs_same_cond](https://github.com/Manishearth/rust-clippy/wiki#ifs_same_cond)                                       | warn    | consecutive `ifs` with the same condition"}, {"sha": "d4431c2e4c71a08bdf6eaa92583c6ef4942a127c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e851bc7404c14aa752d8c139be6de475163ac5ae/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e851bc7404c14aa752d8c139be6de475163ac5ae/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e851bc7404c14aa752d8c139be6de475163ac5ae", "patch": "@@ -106,6 +106,7 @@ pub mod neg_multiply;\n pub mod new_without_default;\n pub mod no_effect;\n pub mod non_expressive_names;\n+pub mod ok_if_let;\n pub mod open_options;\n pub mod overflow_check_conditional;\n pub mod panic;\n@@ -254,6 +255,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box let_if_seq::LetIfSeq);\n     reg.register_late_lint_pass(box eval_order_dependence::EvalOrderDependence);\n     reg.register_late_lint_pass(box missing_doc::MissingDoc::new());\n+    reg.register_late_lint_pass(box ok_if_let::OkIfLetPass);\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -404,6 +406,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         no_effect::NO_EFFECT,\n         no_effect::UNNECESSARY_OPERATION,\n         non_expressive_names::MANY_SINGLE_CHAR_NAMES,\n+        ok_if_let::IF_LET_SOME_RESULT,\n         open_options::NONSENSICAL_OPEN_OPTIONS,\n         overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL,\n         panic::PANIC_PARAMS,"}, {"sha": "94e06a2b39da18e58cc6a64a4c0009504063dae5", "filename": "clippy_lints/src/ok_if_let.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e851bc7404c14aa752d8c139be6de475163ac5ae/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e851bc7404c14aa752d8c139be6de475163ac5ae/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=e851bc7404c14aa752d8c139be6de475163ac5ae", "patch": "@@ -0,0 +1,53 @@\n+use rustc::lint::*;\n+use rustc::hir::*;\n+use utils::{paths, method_chain_args, span_help_and_lint, match_type, snippet};\n+\n+/// **What it does:*** Checks for unnecessary `ok()` in if let.\n+///\n+/// **Why is this bad?** Calling `ok()` in if let is unnecessary, instead match on `Ok(pat)`\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rustc\n+/// for result in iter {\n+///     if let Some(bench) = try!(result).parse().ok() {\n+///         vec.push(bench)\n+///     }\n+/// }\n+/// ```\n+declare_lint! {\n+    pub IF_LET_SOME_RESULT,\n+    Warn,\n+    \"usage of `ok()` in `if let Some(pat)` statements is unnecessary, match on `Ok(pat)` instead\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct OkIfLetPass;\n+\n+impl LintPass for OkIfLetPass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(IF_LET_SOME_RESULT)\n+    }\n+}\n+\n+impl LateLintPass for OkIfLetPass {\n+    fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n+        if_let_chain! {[ //begin checking variables\n+            let ExprMatch(ref op, ref body, ref source) = expr.node, //test if expr is a match\n+            let MatchSource::IfLetDesugar { .. } = *source, //test if it is an If Let\n+            let ExprMethodCall(_, _, ref result_types) = op.node, //check is expr.ok() has type Result<T,E>.ok()\n+            let PatKind::TupleStruct(ref x, ref y, _)  = body[0].pats[0].node, //get operation\n+            let Some(_) = method_chain_args(op, &[\"ok\"]) //test to see if using ok() methoduse std::marker::Sized;\n+\n+        ], {\n+            let is_result_type = match_type(cx, cx.tcx.expr_ty(&result_types[0]), &paths::RESULT);\n+            let some_expr_string = snippet(cx, y[0].span, \"\");\n+            if print::path_to_string(x) == \"Some\" && is_result_type {\n+                span_help_and_lint(cx, IF_LET_SOME_RESULT, expr.span,\n+                \"Matching on `Some` with `ok()` is redundant\",\n+                &format!(\"Consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string)); \n+            }\n+        }}\n+    }\n+}"}, {"sha": "64ec3e5eec704ff1ab478eb61328fbb0fa88ff05", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e851bc7404c14aa752d8c139be6de475163ac5ae/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e851bc7404c14aa752d8c139be6de475163ac5ae/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=e851bc7404c14aa752d8c139be6de475163ac5ae", "patch": "@@ -38,8 +38,8 @@ impl LateLintPass for Pass {\n             // do something like 0.0/(2.0 - 2.0), but it would be nice to warn on that case too.\n             let Some(Constant::Float(ref lhs_value, lhs_width)) = constant_simple(left),\n             let Some(Constant::Float(ref rhs_value, rhs_width)) = constant_simple(right),\n-            let Some(0.0) = lhs_value.parse().ok(),\n-            let Some(0.0) = rhs_value.parse().ok()\n+            let Ok(0.0) = lhs_value.parse(),\n+            let Ok(0.0) = rhs_value.parse()\n         ], {\n             // since we're about to suggest a use of std::f32::NaN or std::f64::NaN,\n             // match the precision of the literals that are given."}, {"sha": "3676f473bcd0dc078be31cefdfb6b5aab38ef80f", "filename": "tests/compile-fail/ok_if_let.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e851bc7404c14aa752d8c139be6de475163ac5ae/tests%2Fcompile-fail%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e851bc7404c14aa752d8c139be6de475163ac5ae/tests%2Fcompile-fail%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fok_if_let.rs?ref=e851bc7404c14aa752d8c139be6de475163ac5ae", "patch": "@@ -0,0 +1,27 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(if_let_some_result)]\n+\n+fn str_to_int(x: &str) -> i32 {\n+    if let Some(y) = x.parse().ok() { \n+    //~^ERROR Matching on `Some` with `ok()` is redundant\n+        y\n+    } else {\n+        0\n+    }\n+}\n+\n+fn str_to_int_ok(x: &str) -> i32 {\n+    if let Ok(y) = x.parse() {\n+        y\n+    } else {\n+        0\n+    }\n+}\n+\n+fn main() {\n+    let y = str_to_int(\"1\");\n+    let z = str_to_int_ok(\"2\");\n+    println!(\"{}{}\", y, z);\n+}"}]}