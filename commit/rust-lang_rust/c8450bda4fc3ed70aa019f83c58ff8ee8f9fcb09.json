{"sha": "c8450bda4fc3ed70aa019f83c58ff8ee8f9fcb09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NDUwYmRhNGZjM2VkNzBhYTAxOWY4M2M1OGZmOGVlOGY5ZmNiMDk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-03T07:56:35Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-03T08:47:28Z"}, "message": "support integers that can be cast to pointers in in-bounds offset operation", "tree": {"sha": "756c5834ef2acc2c67061f03d90cb1b0af372f9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/756c5834ef2acc2c67061f03d90cb1b0af372f9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8450bda4fc3ed70aa019f83c58ff8ee8f9fcb09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8450bda4fc3ed70aa019f83c58ff8ee8f9fcb09", "html_url": "https://github.com/rust-lang/rust/commit/c8450bda4fc3ed70aa019f83c58ff8ee8f9fcb09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8450bda4fc3ed70aa019f83c58ff8ee8f9fcb09/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3da843ca02dab7b5f6563ffeb0d654bbe70e1f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3da843ca02dab7b5f6563ffeb0d654bbe70e1f8", "html_url": "https://github.com/rust-lang/rust/commit/c3da843ca02dab7b5f6563ffeb0d654bbe70e1f8"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "2e9b8238479f350705e800de8cbd2373afb7adb8", "filename": "src/operator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8450bda4fc3ed70aa019f83c58ff8ee8f9fcb09/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8450bda4fc3ed70aa019f83c58ff8ee8f9fcb09/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=c8450bda4fc3ed70aa019f83c58ff8ee8f9fcb09", "patch": "@@ -397,15 +397,15 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n             .checked_mul(pointee_size)\n             .ok_or_else(|| InterpError::Overflow(mir::BinOp::Mul))?;\n         // Now let's see what kind of pointer this is.\n-        if let Scalar::Ptr(ptr) = ptr {\n+        if let Ok(ptr) = self.force_ptr(ptr) {\n             // Both old and new pointer must be in-bounds of a *live* allocation.\n             // (Of the same allocation, but that part is trivial with our representation.)\n             self.pointer_inbounds(ptr)?;\n             let ptr = ptr.signed_offset(offset, self)?;\n             self.pointer_inbounds(ptr)?;\n             Ok(Scalar::Ptr(ptr))\n         } else {\n-            // An integer pointer. They can only be offset by 0, and we pretend there\n+            // A \"true\" integer pointer. They can only be offset by 0, and we pretend there\n             // is a little zero-sized allocation here.\n             if offset == 0 {\n                 Ok(ptr)"}]}