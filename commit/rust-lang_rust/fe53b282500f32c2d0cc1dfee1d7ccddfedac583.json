{"sha": "fe53b282500f32c2d0cc1dfee1d7ccddfedac583", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNTNiMjgyNTAwZjMyYzJkMGNjMWRmZWUxZDdjY2RkZmVkYWM1ODM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-07T14:00:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-08T08:20:15Z"}, "message": "migrate ra_db to new rowan", "tree": {"sha": "826967cd421105444382e408c792f8c32504f600", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/826967cd421105444382e408c792f8c32504f600"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe53b282500f32c2d0cc1dfee1d7ccddfedac583", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe53b282500f32c2d0cc1dfee1d7ccddfedac583", "html_url": "https://github.com/rust-lang/rust/commit/fe53b282500f32c2d0cc1dfee1d7ccddfedac583", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe53b282500f32c2d0cc1dfee1d7ccddfedac583/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b88775af7fdfb06df922325ab48237592d5afecb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b88775af7fdfb06df922325ab48237592d5afecb", "html_url": "https://github.com/rust-lang/rust/commit/b88775af7fdfb06df922325ab48237592d5afecb"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "3c41ee56dafd0d9507ab903046ce1bb60bc3c7e3", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe53b282500f32c2d0cc1dfee1d7ccddfedac583/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe53b282500f32c2d0cc1dfee1d7ccddfedac583/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=fe53b282500f32c2d0cc1dfee1d7ccddfedac583", "patch": "@@ -8,7 +8,7 @@ pub mod mock;\n use std::sync::Arc;\n \n use ra_editor::LineIndex;\n-use ra_syntax::{TextUnit, TextRange, SourceFileNode};\n+use ra_syntax::{TextUnit, TextRange, SourceFile, TreePtr};\n \n pub use crate::{\n     cancelation::{Canceled, Cancelable},\n@@ -47,7 +47,7 @@ pub trait BaseDatabase: salsa::Database {\n \n salsa::query_group! {\n     pub trait SyntaxDatabase: crate::input::FilesDatabase + BaseDatabase {\n-        fn source_file(file_id: FileId) -> SourceFileNode {\n+        fn source_file(file_id: FileId) -> TreePtr<SourceFile> {\n             type SourceFileQuery;\n         }\n         fn file_lines(file_id: FileId) -> Arc<LineIndex> {\n@@ -56,9 +56,9 @@ salsa::query_group! {\n     }\n }\n \n-fn source_file(db: &impl SyntaxDatabase, file_id: FileId) -> SourceFileNode {\n+fn source_file(db: &impl SyntaxDatabase, file_id: FileId) -> TreePtr<SourceFile> {\n     let text = db.file_text(file_id);\n-    SourceFileNode::parse(&*text)\n+    SourceFile::parse(&*text)\n }\n fn file_lines(db: &impl SyntaxDatabase, file_id: FileId) -> Arc<LineIndex> {\n     let text = db.file_text(file_id);"}, {"sha": "be64d417cee6c49df2eca6478a1462bd3592a3b2", "filename": "crates/ra_db/src/syntax_ptr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fe53b282500f32c2d0cc1dfee1d7ccddfedac583/crates%2Fra_db%2Fsrc%2Fsyntax_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe53b282500f32c2d0cc1dfee1d7ccddfedac583/crates%2Fra_db%2Fsrc%2Fsyntax_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Fsyntax_ptr.rs?ref=fe53b282500f32c2d0cc1dfee1d7ccddfedac583", "patch": "@@ -1,4 +1,4 @@\n-use ra_syntax::{SourceFileNode, SyntaxKind, SyntaxNode, SyntaxNodeRef, TextRange};\n+use ra_syntax::{AstNode, SourceFile, SyntaxKind, SyntaxNode, TextRange, TreePtr};\n \n /// A pointer to a syntax node inside a file.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -8,18 +8,18 @@ pub struct LocalSyntaxPtr {\n }\n \n impl LocalSyntaxPtr {\n-    pub fn new(node: SyntaxNodeRef) -> LocalSyntaxPtr {\n+    pub fn new(node: &SyntaxNode) -> LocalSyntaxPtr {\n         LocalSyntaxPtr {\n             range: node.range(),\n             kind: node.kind(),\n         }\n     }\n \n-    pub fn resolve(self, file: &SourceFileNode) -> SyntaxNode {\n+    pub fn resolve(self, file: &SourceFile) -> TreePtr<SyntaxNode> {\n         let mut curr = file.syntax();\n         loop {\n             if curr.range() == self.range && curr.kind() == self.kind {\n-                return curr.owned();\n+                return curr.to_owned();\n             }\n             curr = curr\n                 .children()\n@@ -40,13 +40,13 @@ impl LocalSyntaxPtr {\n #[test]\n fn test_local_syntax_ptr() {\n     use ra_syntax::{ast, AstNode};\n-    let file = SourceFileNode::parse(\"struct Foo { f: u32, }\");\n+    let file = SourceFile::parse(\"struct Foo { f: u32, }\");\n     let field = file\n         .syntax()\n         .descendants()\n         .find_map(ast::NamedFieldDef::cast)\n         .unwrap();\n     let ptr = LocalSyntaxPtr::new(field.syntax());\n     let field_syntax = ptr.resolve(&file);\n-    assert_eq!(field.syntax(), field_syntax);\n+    assert_eq!(field.syntax(), &*field_syntax);\n }"}, {"sha": "f31efa174de3af3d2cf1649c8c0a1ce7cf366fab", "filename": "crates/ra_syntax/src/yellow.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fe53b282500f32c2d0cc1dfee1d7ccddfedac583/crates%2Fra_syntax%2Fsrc%2Fyellow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe53b282500f32c2d0cc1dfee1d7ccddfedac583/crates%2Fra_syntax%2Fsrc%2Fyellow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fyellow.rs?ref=fe53b282500f32c2d0cc1dfee1d7ccddfedac583", "patch": "@@ -20,7 +20,7 @@ impl Types for RaTypes {\n \n pub type GreenNode = rowan::GreenNode<RaTypes>;\n \n-#[derive(Clone, PartialEq, Eq, Hash)]\n+#[derive(PartialEq, Eq, Hash)]\n pub struct TreePtr<T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>>(\n     pub(crate) rowan::TreePtr<RaTypes, T>,\n );\n@@ -47,6 +47,15 @@ where\n     }\n }\n \n+impl<T> Clone for TreePtr<T>\n+where\n+    T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>,\n+{\n+    fn clone(&self) -> TreePtr<T> {\n+        TreePtr(self.0.clone())\n+    }\n+}\n+\n impl<T> fmt::Debug for TreePtr<T>\n where\n     T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>,"}]}