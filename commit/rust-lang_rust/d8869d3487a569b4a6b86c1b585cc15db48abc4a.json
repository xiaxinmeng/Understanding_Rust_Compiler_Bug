{"sha": "d8869d3487a569b4a6b86c1b585cc15db48abc4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ODY5ZDM0ODdhNTY5YjRhNmI4NmMxYjU4NWNjMTVkYjQ4YWJjNGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-15T01:52:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-15T01:52:01Z"}, "message": "Auto merge of #30711 - nrc:json-errs, r=huonw\n\nThe compiler can emit errors and warning in JSON format. This is a more easily machine readable form then the usual error output.\n\nCloses #10492, closes #14863.", "tree": {"sha": "f061c00a00e41e3518bf7f8b16579b5853ac6b3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f061c00a00e41e3518bf7f8b16579b5853ac6b3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8869d3487a569b4a6b86c1b585cc15db48abc4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8869d3487a569b4a6b86c1b585cc15db48abc4a", "html_url": "https://github.com/rust-lang/rust/commit/d8869d3487a569b4a6b86c1b585cc15db48abc4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8869d3487a569b4a6b86c1b585cc15db48abc4a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fb0c5ebcf6d912224532265776fb96febea9797", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb0c5ebcf6d912224532265776fb96febea9797", "html_url": "https://github.com/rust-lang/rust/commit/2fb0c5ebcf6d912224532265776fb96febea9797"}, {"sha": "82f8e5ce84c83b02fbfa720c6841f12db1a55603", "url": "https://api.github.com/repos/rust-lang/rust/commits/82f8e5ce84c83b02fbfa720c6841f12db1a55603", "html_url": "https://github.com/rust-lang/rust/commit/82f8e5ce84c83b02fbfa720c6841f12db1a55603"}], "stats": {"total": 573, "additions": 444, "deletions": 129}, "files": [{"sha": "d7eacbfff90db6032a350216a64ac37c2f6b84fa", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -28,7 +28,7 @@ use self::TargetLint::*;\n use dep_graph::DepNode;\n use middle::privacy::AccessLevels;\n use middle::ty;\n-use session::{early_error, Session};\n+use session::{config, early_error, Session};\n use lint::{Level, LevelSource, Lint, LintId, LintArray, LintPass};\n use lint::{EarlyLintPass, EarlyLintPassObject, LateLintPass, LateLintPassObject};\n use lint::{Default, CommandLine, Node, Allow, Warn, Deny, Forbid};\n@@ -37,11 +37,12 @@ use util::nodemap::FnvHashMap;\n \n use std::cell::RefCell;\n use std::cmp;\n+use std::default::Default as StdDefault;\n use std::mem;\n use syntax::ast_util::{self, IdVisitingOperation};\n use syntax::attr::{self, AttrMetaMethods};\n use syntax::codemap::Span;\n-use syntax::errors::{self, DiagnosticBuilder};\n+use syntax::errors::DiagnosticBuilder;\n use syntax::parse::token::InternedString;\n use syntax::ast;\n use syntax::attr::ThinAttributesExt;\n@@ -168,7 +169,7 @@ impl LintStore {\n                 match (sess, from_plugin) {\n                     // We load builtin lints first, so a duplicate is a compiler bug.\n                     // Use early_error when handling -W help with no crate.\n-                    (None, _) => early_error(errors::ColorConfig::Auto, &msg[..]),\n+                    (None, _) => early_error(config::ErrorOutputType::default(), &msg[..]),\n                     (Some(sess), false) => sess.bug(&msg[..]),\n \n                     // A duplicate name from a plugin is a user error.\n@@ -192,7 +193,7 @@ impl LintStore {\n             match (sess, from_plugin) {\n                 // We load builtin lints first, so a duplicate is a compiler bug.\n                 // Use early_error when handling -W help with no crate.\n-                (None, _) => early_error(errors::ColorConfig::Auto, &msg[..]),\n+                (None, _) => early_error(config::ErrorOutputType::default(), &msg[..]),\n                 (Some(sess), false) => sess.bug(&msg[..]),\n \n                 // A duplicate name from a plugin is a user error."}, {"sha": "1a99aba591a8cb29e78c650b6da87d9fdce3775a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 88, "deletions": 54, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -14,7 +14,6 @@\n pub use self::EntryFnType::*;\n pub use self::CrateType::*;\n pub use self::Passes::*;\n-pub use self::OptLevel::*;\n pub use self::DebugInfoLevel::*;\n \n use session::{early_error, early_warn, Session};\n@@ -71,6 +70,18 @@ pub enum OutputType {\n     DepInfo,\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n+pub enum ErrorOutputType {\n+    HumanReadable(ColorConfig),\n+    Json,\n+}\n+\n+impl Default for ErrorOutputType {\n+    fn default() -> ErrorOutputType {\n+        ErrorOutputType::HumanReadable(ColorConfig::Auto)\n+    }\n+}\n+\n impl OutputType {\n     fn is_compatible_with_codegen_units_and_single_output_file(&self) -> bool {\n         match *self {\n@@ -124,14 +135,14 @@ pub struct Options {\n     pub test: bool,\n     pub parse_only: bool,\n     pub no_trans: bool,\n+    pub error_format: ErrorOutputType,\n     pub treat_err_as_bug: bool,\n     pub incremental_compilation: bool,\n     pub dump_dep_graph: bool,\n     pub no_analysis: bool,\n     pub debugging_opts: DebuggingOptions,\n     pub prints: Vec<PrintRequest>,\n     pub cg: CodegenOptions,\n-    pub color: ColorConfig,\n     pub externs: HashMap<String, Vec<String>>,\n     pub crate_name: Option<String>,\n     /// An optional name to use as the crate for std during std injection,\n@@ -221,7 +232,7 @@ pub fn basic_options() -> Options {\n     Options {\n         crate_types: Vec::new(),\n         gc: false,\n-        optimize: No,\n+        optimize: OptLevel::No,\n         debuginfo: NoDebugInfo,\n         lint_opts: Vec::new(),\n         lint_cap: None,\n@@ -241,7 +252,7 @@ pub fn basic_options() -> Options {\n         debugging_opts: basic_debugging_options(),\n         prints: Vec::new(),\n         cg: basic_codegen_options(),\n-        color: ColorConfig::Auto,\n+        error_format: ErrorOutputType::default(),\n         externs: HashMap::new(),\n         crate_name: None,\n         alt_std_name: None,\n@@ -308,7 +319,7 @@ macro_rules! options {\n         $struct_name { $($opt: $init),* }\n     }\n \n-    pub fn $buildfn(matches: &getopts::Matches, color: ColorConfig) -> $struct_name\n+    pub fn $buildfn(matches: &getopts::Matches, error_format: ErrorOutputType) -> $struct_name\n     {\n         let mut op = $defaultfn();\n         for option in matches.opt_strs($prefix) {\n@@ -322,20 +333,20 @@ macro_rules! options {\n                 if !setter(&mut op, value) {\n                     match (value, opt_type_desc) {\n                         (Some(..), None) => {\n-                            early_error(color, &format!(\"{} option `{}` takes no \\\n-                                                         value\", $outputname, key))\n+                            early_error(error_format, &format!(\"{} option `{}` takes no \\\n+                                                              value\", $outputname, key))\n                         }\n                         (None, Some(type_desc)) => {\n-                            early_error(color, &format!(\"{0} option `{1}` requires \\\n-                                                         {2} ({3} {1}=<value>)\",\n-                                                        $outputname, key,\n-                                                        type_desc, $prefix))\n+                            early_error(error_format, &format!(\"{0} option `{1}` requires \\\n+                                                              {2} ({3} {1}=<value>)\",\n+                                                             $outputname, key,\n+                                                             type_desc, $prefix))\n                         }\n                         (Some(value), Some(type_desc)) => {\n-                            early_error(color, &format!(\"incorrect value `{}` for {} \\\n-                                                         option `{}` - {} was expected\",\n-                                                        value, $outputname,\n-                                                        key, type_desc))\n+                            early_error(error_format, &format!(\"incorrect value `{}` for {} \\\n+                                                              option `{}` - {} was expected\",\n+                                                             value, $outputname,\n+                                                             key, type_desc))\n                         }\n                         (None, None) => unreachable!()\n                     }\n@@ -344,8 +355,8 @@ macro_rules! options {\n                 break;\n             }\n             if !found {\n-                early_error(color, &format!(\"unknown {} option: `{}`\",\n-                                            $outputname, key));\n+                early_error(error_format, &format!(\"unknown {} option: `{}`\",\n+                                                 $outputname, key));\n             }\n         }\n         return op;\n@@ -861,6 +872,7 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n                  \"NAME=PATH\"),\n         opt::opt(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n         opt::multi(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n+        opt::opt_u(\"\", \"error-format\", \"How errors and other messages are produced\", \"human|json\"),\n         opt::opt(\"\", \"color\", \"Configure coloring of output:\n             auto   = colorize, if output goes to a tty (default);\n             always = always colorize output;\n@@ -903,15 +915,37 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         None => ColorConfig::Auto,\n \n         Some(arg) => {\n-            early_error(ColorConfig::Auto, &format!(\"argument for --color must be auto, always \\\n-                                                     or never (instead was `{}`)\",\n-                                                    arg))\n+            early_error(ErrorOutputType::default(), &format!(\"argument for --color must be auto, \\\n+                                                              always or never (instead was `{}`)\",\n+                                                            arg))\n         }\n     };\n \n+    // We need the opts_present check because the driver will send us Matches\n+    // with only stable options if no unstable options are used. Since error-format\n+    // is unstable, it will not be present. We have to use opts_present not\n+    // opt_present because the latter will panic.\n+    let error_format = if matches.opts_present(&[\"error-format\".to_owned()]) {\n+        match matches.opt_str(\"error-format\").as_ref().map(|s| &s[..]) {\n+            Some(\"human\")   => ErrorOutputType::HumanReadable(color),\n+            Some(\"json\") => ErrorOutputType::Json,\n+\n+            None => ErrorOutputType::default(),\n+\n+            Some(arg) => {\n+                early_error(ErrorOutputType::default(), &format!(\"argument for --error-format must \\\n+                                                                  be human or json (instead was \\\n+                                                                  `{}`)\",\n+                                                                 arg))\n+            }\n+        }\n+    } else {\n+        ErrorOutputType::default()\n+    };\n+\n     let unparsed_crate_types = matches.opt_strs(\"crate-type\");\n     let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n-        .unwrap_or_else(|e| early_error(color, &e[..]));\n+        .unwrap_or_else(|e| early_error(error_format, &e[..]));\n \n     let mut lint_opts = vec!();\n     let mut describe_lints = false;\n@@ -928,11 +962,11 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let lint_cap = matches.opt_str(\"cap-lints\").map(|cap| {\n         lint::Level::from_str(&cap).unwrap_or_else(|| {\n-            early_error(color, &format!(\"unknown lint level: `{}`\", cap))\n+            early_error(error_format, &format!(\"unknown lint level: `{}`\", cap))\n         })\n     });\n \n-    let debugging_opts = build_debugging_options(matches, color);\n+    let debugging_opts = build_debugging_options(matches, error_format);\n \n     let parse_only = debugging_opts.parse_only;\n     let no_trans = debugging_opts.no_trans;\n@@ -958,7 +992,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n                     \"link\" => OutputType::Exe,\n                     \"dep-info\" => OutputType::DepInfo,\n                     part => {\n-                        early_error(color, &format!(\"unknown emission type: `{}`\",\n+                        early_error(error_format, &format!(\"unknown emission type: `{}`\",\n                                                     part))\n                     }\n                 };\n@@ -971,7 +1005,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         output_types.insert(OutputType::Exe, None);\n     }\n \n-    let mut cg = build_codegen_options(matches, color);\n+    let mut cg = build_codegen_options(matches, error_format);\n \n     // Issue #30063: if user requests llvm-related output to one\n     // particular path, disable codegen-units.\n@@ -983,11 +1017,11 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             }).collect();\n         if !incompatible.is_empty() {\n             for ot in &incompatible {\n-                early_warn(color, &format!(\"--emit={} with -o incompatible with \\\n-                                            -C codegen-units=N for N > 1\",\n-                                           ot.shorthand()));\n+                early_warn(error_format, &format!(\"--emit={} with -o incompatible with \\\n+                                                 -C codegen-units=N for N > 1\",\n+                                                ot.shorthand()));\n             }\n-            early_warn(color, \"resetting to default -C codegen-units=1\");\n+            early_warn(error_format, \"resetting to default -C codegen-units=1\");\n             cg.codegen_units = 1;\n         }\n     }\n@@ -1000,29 +1034,29 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let opt_level = {\n         if matches.opt_present(\"O\") {\n             if cg.opt_level.is_some() {\n-                early_error(color, \"-O and -C opt-level both provided\");\n+                early_error(error_format, \"-O and -C opt-level both provided\");\n             }\n-            Default\n+            OptLevel::Default\n         } else {\n             match cg.opt_level {\n-                None => No,\n-                Some(0) => No,\n-                Some(1) => Less,\n-                Some(2) => Default,\n-                Some(3) => Aggressive,\n+                None => OptLevel::No,\n+                Some(0) => OptLevel::No,\n+                Some(1) => OptLevel::Less,\n+                Some(2) => OptLevel::Default,\n+                Some(3) => OptLevel::Aggressive,\n                 Some(arg) => {\n-                    early_error(color, &format!(\"optimization level needs to be \\\n-                                                 between 0-3 (instead was `{}`)\",\n-                                                arg));\n+                    early_error(error_format, &format!(\"optimization level needs to be \\\n+                                                      between 0-3 (instead was `{}`)\",\n+                                                     arg));\n                 }\n             }\n         }\n     };\n-    let debug_assertions = cg.debug_assertions.unwrap_or(opt_level == No);\n+    let debug_assertions = cg.debug_assertions.unwrap_or(opt_level == OptLevel::No);\n     let gc = debugging_opts.gc;\n     let debuginfo = if matches.opt_present(\"g\") {\n         if cg.debuginfo.is_some() {\n-            early_error(color, \"-g and -C debuginfo both provided\");\n+            early_error(error_format, \"-g and -C debuginfo both provided\");\n         }\n         FullDebugInfo\n     } else {\n@@ -1031,16 +1065,16 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             Some(1) => LimitedDebugInfo,\n             Some(2) => FullDebugInfo,\n             Some(arg) => {\n-                early_error(color, &format!(\"debug info level needs to be between \\\n-                                             0-2 (instead was `{}`)\",\n-                                            arg));\n+                early_error(error_format, &format!(\"debug info level needs to be between \\\n+                                                  0-2 (instead was `{}`)\",\n+                                                 arg));\n             }\n         }\n     };\n \n     let mut search_paths = SearchPaths::new();\n     for s in &matches.opt_strs(\"L\") {\n-        search_paths.add_path(&s[..], color);\n+        search_paths.add_path(&s[..], error_format);\n     }\n \n     let libs = matches.opt_strs(\"l\").into_iter().map(|s| {\n@@ -1052,9 +1086,9 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             (Some(name), \"framework\") => (name, cstore::NativeFramework),\n             (Some(name), \"static\") => (name, cstore::NativeStatic),\n             (_, s) => {\n-                early_error(color, &format!(\"unknown library kind `{}`, expected \\\n-                                             one of dylib, framework, or static\",\n-                                            s));\n+                early_error(error_format, &format!(\"unknown library kind `{}`, expected \\\n+                                                  one of dylib, framework, or static\",\n+                                                 s));\n             }\n         };\n         (name.to_string(), kind)\n@@ -1069,26 +1103,26 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             \"file-names\" => PrintRequest::FileNames,\n             \"sysroot\" => PrintRequest::Sysroot,\n             req => {\n-                early_error(color, &format!(\"unknown print request `{}`\", req))\n+                early_error(error_format, &format!(\"unknown print request `{}`\", req))\n             }\n         }\n     }).collect::<Vec<_>>();\n \n     if !cg.remark.is_empty() && debuginfo == NoDebugInfo {\n-        early_warn(color, \"-C remark will not show source locations without \\\n-                           --debuginfo\");\n+        early_warn(error_format, \"-C remark will not show source locations without \\\n+                                --debuginfo\");\n     }\n \n     let mut externs = HashMap::new();\n     for arg in &matches.opt_strs(\"extern\") {\n         let mut parts = arg.splitn(2, '=');\n         let name = match parts.next() {\n             Some(s) => s,\n-            None => early_error(color, \"--extern value must not be empty\"),\n+            None => early_error(error_format, \"--extern value must not be empty\"),\n         };\n         let location = match parts.next() {\n             Some(s) => s,\n-            None => early_error(color, \"--extern value must be of the format `foo=bar`\"),\n+            None => early_error(error_format, \"--extern value must be of the format `foo=bar`\"),\n         };\n \n         externs.entry(name.to_string()).or_insert(vec![]).push(location.to_string());\n@@ -1119,7 +1153,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         debugging_opts: debugging_opts,\n         prints: prints,\n         cg: cg,\n-        color: color,\n+        error_format: error_format,\n         externs: externs,\n         crate_name: crate_name,\n         alt_std_name: None,"}, {"sha": "2f3af1c0d09b5c4b14ab2cfd501d1660f4d9d838", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -17,7 +17,8 @@ use util::nodemap::{NodeMap, FnvHashMap};\n use syntax::ast::{NodeId, NodeIdAssigner, Name};\n use syntax::codemap::Span;\n use syntax::errors::{self, DiagnosticBuilder};\n-use syntax::errors::emitter::{Emitter, BasicEmitter};\n+use syntax::errors::emitter::{Emitter, BasicEmitter, EmitterWriter};\n+use syntax::errors::json::JsonEmitter;\n use syntax::diagnostics;\n use syntax::feature_gate;\n use syntax::parse;\n@@ -405,12 +406,19 @@ pub fn build_session(sopts: config::Options,\n     let treat_err_as_bug = sopts.treat_err_as_bug;\n \n     let codemap = Rc::new(codemap::CodeMap::new());\n+    let emitter: Box<Emitter> = match sopts.error_format {\n+        config::ErrorOutputType::HumanReadable(color_config) => {\n+            Box::new(EmitterWriter::stderr(color_config, Some(registry), codemap.clone()))\n+        }\n+        config::ErrorOutputType::Json => {\n+            Box::new(JsonEmitter::stderr(Some(registry), codemap.clone()))\n+        }\n+    };\n+\n     let diagnostic_handler =\n-        errors::Handler::new(sopts.color,\n-                             Some(registry),\n-                             can_print_warnings,\n-                             treat_err_as_bug,\n-                             codemap.clone());\n+        errors::Handler::with_emitter(can_print_warnings,\n+                                      treat_err_as_bug,\n+                                      emitter);\n \n     build_session_(sopts, local_crate_source_file, diagnostic_handler, codemap, cstore)\n }\n@@ -473,13 +481,23 @@ pub fn build_session_(sopts: config::Options,\n     sess\n }\n \n-pub fn early_error(color: errors::ColorConfig, msg: &str) -> ! {\n-    let mut emitter = BasicEmitter::stderr(color);\n+pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n+    let mut emitter: Box<Emitter> = match output {\n+        config::ErrorOutputType::HumanReadable(color_config) => {\n+            Box::new(BasicEmitter::stderr(color_config))\n+        }\n+        config::ErrorOutputType::Json => Box::new(JsonEmitter::basic()),\n+    };\n     emitter.emit(None, msg, None, errors::Level::Fatal);\n     panic!(errors::FatalError);\n }\n \n-pub fn early_warn(color: errors::ColorConfig, msg: &str) {\n-    let mut emitter = BasicEmitter::stderr(color);\n+pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n+    let mut emitter: Box<Emitter> = match output {\n+        config::ErrorOutputType::HumanReadable(color_config) => {\n+            Box::new(BasicEmitter::stderr(color_config))\n+        }\n+        config::ErrorOutputType::Json => Box::new(JsonEmitter::basic()),\n+    };\n     emitter.emit(None, msg, None, errors::Level::Warning);\n }"}, {"sha": "3c6cd26bef6ce87bfc853f040abae95d848a14a2", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -10,8 +10,7 @@\n \n use std::slice;\n use std::path::{Path, PathBuf};\n-use session::early_error;\n-use syntax::errors;\n+use session::{early_error, config};\n \n #[derive(Clone, Debug)]\n pub struct SearchPaths {\n@@ -38,7 +37,7 @@ impl SearchPaths {\n         SearchPaths { paths: Vec::new() }\n     }\n \n-    pub fn add_path(&mut self, path: &str, color: errors::ColorConfig) {\n+    pub fn add_path(&mut self, path: &str, output: config::ErrorOutputType) {\n         let (kind, path) = if path.starts_with(\"native=\") {\n             (PathKind::Native, &path[\"native=\".len()..])\n         } else if path.starts_with(\"crate=\") {\n@@ -53,7 +52,7 @@ impl SearchPaths {\n             (PathKind::All, path)\n         };\n         if path.is_empty() {\n-            early_error(color, \"empty search path given via `-L`\");\n+            early_error(output, \"empty search path given via `-L`\");\n         }\n         self.paths.push((kind, PathBuf::from(path)));\n     }"}, {"sha": "62bea61216888aec22d1962de40984aea9497419", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -62,7 +62,7 @@ use rustc_resolve as resolve;\n use rustc_trans::back::link;\n use rustc_trans::save;\n use rustc::session::{config, Session, build_session};\n-use rustc::session::config::{Input, PrintRequest, OutputType};\n+use rustc::session::config::{Input, PrintRequest, OutputType, ErrorOutputType};\n use rustc::middle::cstore::CrateStore;\n use rustc::lint::Lint;\n use rustc::lint;\n@@ -72,6 +72,7 @@ use rustc::util::common::time;\n \n use std::cmp::max;\n use std::cmp::Ordering::Equal;\n+use std::default::Default;\n use std::env;\n use std::io::{self, Read, Write};\n use std::iter::repeat;\n@@ -126,7 +127,7 @@ pub fn run_compiler<'a>(args: &[String], callbacks: &mut CompilerCalls<'a>) {\n \n     let descriptions = diagnostics_registry();\n \n-    do_or_return!(callbacks.early_callback(&matches, &descriptions, sopts.color));\n+    do_or_return!(callbacks.early_callback(&matches, &descriptions, sopts.error_format));\n \n     let (odir, ofile) = make_output(&matches);\n     let (input, input_file_path) = match make_input(&matches.free) {\n@@ -214,7 +215,7 @@ pub trait CompilerCalls<'a> {\n     fn early_callback(&mut self,\n                       _: &getopts::Matches,\n                       _: &diagnostics::registry::Registry,\n-                      _: errors::ColorConfig)\n+                      _: ErrorOutputType)\n                       -> Compilation {\n         Compilation::Continue\n     }\n@@ -290,7 +291,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n     fn early_callback(&mut self,\n                       matches: &getopts::Matches,\n                       descriptions: &diagnostics::registry::Registry,\n-                      color: errors::ColorConfig)\n+                      output: ErrorOutputType)\n                       -> Compilation {\n         match matches.opt_str(\"explain\") {\n             Some(ref code) => {\n@@ -305,7 +306,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                         print!(\"{}\", &description[1..]);\n                     }\n                     None => {\n-                        early_error(color, &format!(\"no extended information for {}\", code));\n+                        early_error(output, &format!(\"no extended information for {}\", code));\n                     }\n                 }\n                 return Compilation::Stop;\n@@ -339,10 +340,10 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                 if should_stop == Compilation::Stop {\n                     return None;\n                 }\n-                early_error(sopts.color, \"no input filename given\");\n+                early_error(sopts.error_format, \"no input filename given\");\n             }\n             1 => panic!(\"make_input should have provided valid inputs\"),\n-            _ => early_error(sopts.color, \"multiple input filenames provided\"),\n+            _ => early_error(sopts.error_format, \"multiple input filenames provided\"),\n         }\n \n         None\n@@ -432,7 +433,7 @@ impl RustcDefaultCalls {\n                     println!(\"{}\", String::from_utf8(v).unwrap());\n                 }\n                 &Input::Str(_) => {\n-                    early_error(sess.opts.color, \"cannot list metadata for stdin\");\n+                    early_error(ErrorOutputType::default(), \"cannot list metadata for stdin\");\n                 }\n             }\n             return Compilation::Stop;\n@@ -459,7 +460,7 @@ impl RustcDefaultCalls {\n                 PrintRequest::CrateName => {\n                     let input = match input {\n                         Some(input) => input,\n-                        None => early_error(sess.opts.color, \"no input file provided\"),\n+                        None => early_error(ErrorOutputType::default(), \"no input file provided\"),\n                     };\n                     let attrs = attrs.as_ref().unwrap();\n                     let t_outputs = driver::build_output_filenames(input, odir, ofile, attrs, sess);\n@@ -752,7 +753,7 @@ pub fn handle_options(mut args: Vec<String>) -> Option<getopts::Matches> {\n                             &opt.opt_group.short_name\n                         };\n                         if m.opt_present(opt_name) {\n-                            early_error(errors::ColorConfig::Auto,\n+                            early_error(ErrorOutputType::default(),\n                                         &format!(\"use of unstable option '{}' requires -Z \\\n                                                   unstable-options\",\n                                                  opt_name));\n@@ -761,7 +762,7 @@ pub fn handle_options(mut args: Vec<String>) -> Option<getopts::Matches> {\n                 }\n                 m\n             }\n-            Err(f) => early_error(errors::ColorConfig::Auto, &f.to_string()),\n+            Err(f) => early_error(ErrorOutputType::default(), &f.to_string()),\n         }\n     }\n "}, {"sha": "f585c65228a825116d0e402eeb7b42f97f74d0c5", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -147,8 +147,8 @@ impl<'a> Linker for GnuLinker<'a> {\n \n         // GNU-style linkers support optimization with -O. GNU ld doesn't\n         // need a numeric argument, but other linkers do.\n-        if self.sess.opts.optimize == config::Default ||\n-           self.sess.opts.optimize == config::Aggressive {\n+        if self.sess.opts.optimize == config::OptLevel::Default ||\n+           self.sess.opts.optimize == config::OptLevel::Aggressive {\n             self.cmd.arg(\"-Wl,-O1\");\n         }\n     }"}, {"sha": "544df1798eaf93e48dc1a288c75ce74b087661a4", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -144,10 +144,10 @@ fn target_feature(sess: &Session) -> String {\n \n fn get_llvm_opt_level(optimize: config::OptLevel) -> llvm::CodeGenOptLevel {\n     match optimize {\n-      config::No => llvm::CodeGenLevelNone,\n-      config::Less => llvm::CodeGenLevelLess,\n-      config::Default => llvm::CodeGenLevelDefault,\n-      config::Aggressive => llvm::CodeGenLevelAggressive,\n+      config::OptLevel::No => llvm::CodeGenLevelNone,\n+      config::OptLevel::Less => llvm::CodeGenLevelLess,\n+      config::OptLevel::Default => llvm::CodeGenLevelDefault,\n+      config::OptLevel::Aggressive => llvm::CodeGenLevelAggressive,\n     }\n }\n \n@@ -303,13 +303,13 @@ impl ModuleConfig {\n         // slp vectorization at O3. Otherwise configure other optimization aspects\n         // of this pass manager builder.\n         self.vectorize_loop = !sess.opts.cg.no_vectorize_loops &&\n-                             (sess.opts.optimize == config::Default ||\n-                              sess.opts.optimize == config::Aggressive);\n+                             (sess.opts.optimize == config::OptLevel::Default ||\n+                              sess.opts.optimize == config::OptLevel::Aggressive);\n         self.vectorize_slp = !sess.opts.cg.no_vectorize_slp &&\n-                            sess.opts.optimize == config::Aggressive;\n+                            sess.opts.optimize == config::OptLevel::Aggressive;\n \n-        self.merge_functions = sess.opts.optimize == config::Default ||\n-                               sess.opts.optimize == config::Aggressive;\n+        self.merge_functions = sess.opts.optimize == config::OptLevel::Default ||\n+                               sess.opts.optimize == config::OptLevel::Aggressive;\n     }\n }\n "}, {"sha": "ea4259f8262a7b484c38314b0b12e0b5aa2a9934", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -1163,7 +1163,7 @@ fn core_lifetime_emit<'blk, 'tcx, F>(ccx: &'blk CrateContext<'blk, 'tcx>,\n                                      emit: F)\n     where F: FnOnce(&'blk CrateContext<'blk, 'tcx>, machine::llsize, ValueRef)\n {\n-    if ccx.sess().opts.optimize == config::No {\n+    if ccx.sess().opts.optimize == config::OptLevel::No {\n         return;\n     }\n "}, {"sha": "d90acd78147c974d7428e721449be9881a582a29", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -1020,7 +1020,7 @@ pub fn compile_unit_metadata(cx: &CrateContext) -> DIDescriptor {\n             compile_unit_name,\n             work_dir.as_ptr(),\n             producer.as_ptr(),\n-            cx.sess().opts.optimize != config::No,\n+            cx.sess().opts.optimize != config::OptLevel::No,\n             flags.as_ptr() as *const _,\n             0,\n             split_name.as_ptr() as *const _)"}, {"sha": "5e11a50be22735f00e2195c43a4df658e10493e5", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -383,7 +383,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             true,\n             scope_line as c_uint,\n             FlagPrototyped as c_uint,\n-            cx.sess().opts.optimize != config::No,\n+            cx.sess().opts.optimize != config::OptLevel::No,\n             llfn,\n             template_parameters,\n             ptr::null_mut())\n@@ -596,7 +596,7 @@ fn declare_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                     file_metadata,\n                     loc.line as c_uint,\n                     type_metadata,\n-                    cx.sess().opts.optimize != config::No,\n+                    cx.sess().opts.optimize != config::OptLevel::No,\n                     0,\n                     address_operations.as_ptr(),\n                     address_operations.len() as c_uint,"}, {"sha": "a7fd170b91c37778196b1a080c66acd5c605aeee", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -118,11 +118,11 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n     };\n \n     let codemap = Rc::new(codemap::CodeMap::new());\n-    let diagnostic_handler = errors::Handler::new(ColorConfig::Auto,\n-                                                  None,\n-                                                  true,\n-                                                  false,\n-                                                  codemap.clone());\n+    let diagnostic_handler = errors::Handler::with_tty_emitter(ColorConfig::Auto,\n+                                                               None,\n+                                                               true,\n+                                                               false,\n+                                                               codemap.clone());\n \n     let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n     let sess = session::build_session_(sessopts, cpath, diagnostic_handler,"}, {"sha": "dce537fe9d292a0a5923dba022b0c0ac3c14bcab", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -50,6 +50,7 @@ extern crate serialize as rustc_serialize; // used by deriving\n \n use std::cell::RefCell;\n use std::collections::HashMap;\n+use std::default::Default;\n use std::env;\n use std::fs::File;\n use std::io::{self, Read, Write};\n@@ -62,7 +63,7 @@ use externalfiles::ExternalHtml;\n use serialize::Decodable;\n use serialize::json::{self, Json};\n use rustc::session::search_paths::SearchPaths;\n-use syntax::errors::emitter::ColorConfig;\n+use rustc::session::config::ErrorOutputType;\n \n // reexported from `clean` so it can be easily updated with the mod itself\n pub use clean::SCHEMA_VERSION;\n@@ -225,7 +226,7 @@ pub fn main_args(args: &[String]) -> isize {\n \n     let mut libs = SearchPaths::new();\n     for s in &matches.opt_strs(\"L\") {\n-        libs.add_path(s, ColorConfig::Auto);\n+        libs.add_path(s, ErrorOutputType::default());\n     }\n     let externs = match parse_externs(&matches) {\n         Ok(ex) => ex,\n@@ -360,7 +361,7 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n     // First, parse the crate and extract all relevant information.\n     let mut paths = SearchPaths::new();\n     for s in &matches.opt_strs(\"L\") {\n-        paths.add_path(s, ColorConfig::Auto);\n+        paths.add_path(s, ErrorOutputType::default());\n     }\n     let cfgs = matches.opt_strs(\"cfg\");\n     let triple = matches.opt_str(\"target\");"}, {"sha": "d7d30f065bf0e9c857fe5aa83cfb4db23431a854", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -73,11 +73,11 @@ pub fn run(input: &str,\n     };\n \n     let codemap = Rc::new(CodeMap::new());\n-    let diagnostic_handler = errors::Handler::new(ColorConfig::Auto,\n-                                                  None,\n-                                                  true,\n-                                                  false,\n-                                                  codemap.clone());\n+    let diagnostic_handler = errors::Handler::with_tty_emitter(ColorConfig::Auto,\n+                                                               None,\n+                                                               true,\n+                                                               false,\n+                                                               codemap.clone());\n \n     let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n     let sess = session::build_session_(sessopts,"}, {"sha": "c21bf1e6a1fa04abaf1033296f2209de5de9138f", "filename": "src/libsyntax/errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibsyntax%2Ferrors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibsyntax%2Ferrors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Femitter.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -43,7 +43,7 @@ pub trait Emitter {\n /// maximum number of lines we will print for each error; arbitrary.\n const MAX_LINES: usize = 6;\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum ColorConfig {\n     Auto,\n     Always,"}, {"sha": "713190ef419d69a974f4989f62999608836b8091", "filename": "src/libsyntax/errors/json.rs", "status": "added", "additions": 233, "deletions": 0, "changes": 233, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibsyntax%2Ferrors%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibsyntax%2Ferrors%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fjson.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -0,0 +1,233 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! A JSON emitter for errors.\n+//!\n+//! This works by converting errors to a simplified structural format (see the\n+//! structs at the start of the file) and then serialising them. These should\n+//! contain as much information about the error as possible.\n+//!\n+//! The format of the JSON output should be considered *unstable*. For now the\n+//! structs at the end of this file (Diagnostic*) specify the error format.\n+\n+// FIXME spec the JSON output properly.\n+\n+\n+use codemap::{Span, CodeMap};\n+use diagnostics::registry::Registry;\n+use errors::{Level, DiagnosticBuilder, SubDiagnostic, RenderSpan};\n+use errors::emitter::Emitter;\n+\n+use std::rc::Rc;\n+use std::io::{self, Write};\n+\n+use rustc_serialize::json::as_json;\n+\n+pub struct JsonEmitter {\n+    dst: Box<Write + Send>,\n+    registry: Option<Registry>,\n+    cm: Rc<CodeMap>,\n+}\n+\n+impl JsonEmitter {\n+    pub fn basic() -> JsonEmitter {\n+        JsonEmitter::stderr(None, Rc::new(CodeMap::new()))\n+    }\n+\n+    pub fn stderr(registry: Option<Registry>,\n+                  code_map: Rc<CodeMap>) -> JsonEmitter {\n+        JsonEmitter {\n+            dst: Box::new(io::stderr()),\n+            registry: registry,\n+            cm: code_map,\n+        }\n+    }\n+}\n+\n+impl Emitter for JsonEmitter {\n+    fn emit(&mut self, span: Option<Span>, msg: &str, code: Option<&str>, level: Level) {\n+        let data = Diagnostic::new(span, msg, code, level, self);\n+        if let Err(e) = writeln!(&mut self.dst, \"{}\", as_json(&data)) {\n+            panic!(\"failed to print diagnostics: {:?}\", e);\n+        }\n+    }\n+\n+    fn custom_emit(&mut self, sp: RenderSpan, msg: &str, level: Level) {\n+        let data = Diagnostic::from_render_span(&sp, msg, level, self);\n+        if let Err(e) = writeln!(&mut self.dst, \"{}\", as_json(&data)) {\n+            panic!(\"failed to print diagnostics: {:?}\", e);\n+        }\n+    }\n+\n+    fn emit_struct(&mut self, db: &DiagnosticBuilder) {\n+        let data = Diagnostic::from_diagnostic_builder(db, self);\n+        if let Err(e) = writeln!(&mut self.dst, \"{}\", as_json(&data)) {\n+            panic!(\"failed to print diagnostics: {:?}\", e);\n+        }\n+    }\n+}\n+\n+// The following data types are provided just for serialisation.\n+\n+#[derive(RustcEncodable)]\n+struct Diagnostic<'a> {\n+    /// The primary error message.\n+    message: &'a str,\n+    code: Option<DiagnosticCode>,\n+    /// \"error: internal compiler error\", \"error\", \"warning\", \"note\", \"help\".\n+    level: &'static str,\n+    span: Option<DiagnosticSpan>,\n+    /// Assocaited diagnostic messages.\n+    children: Vec<Diagnostic<'a>>,\n+}\n+\n+#[derive(RustcEncodable)]\n+struct DiagnosticSpan {\n+    file_name: String,\n+    byte_start: u32,\n+    byte_end: u32,\n+    /// 1-based.\n+    line_start: usize,\n+    line_end: usize,\n+    /// 1-based, character offset.\n+    column_start: usize,\n+    column_end: usize,\n+}\n+\n+#[derive(RustcEncodable)]\n+struct DiagnosticCode {\n+    /// The code itself.\n+    code: String,\n+    /// An explanation for the code.\n+    explanation: Option<&'static str>,\n+}\n+\n+impl<'a> Diagnostic<'a> {\n+    fn new(span: Option<Span>,\n+           msg: &'a str,\n+           code: Option<&str>,\n+           level: Level,\n+           je: &JsonEmitter)\n+           -> Diagnostic<'a> {\n+        Diagnostic {\n+            message: msg,\n+            code: DiagnosticCode::map_opt_string(code.map(|c| c.to_owned()), je),\n+            level: level.to_str(),\n+            span: span.map(|sp| DiagnosticSpan::from_span(sp, je)),\n+            children: vec![],\n+        }\n+    }\n+\n+    fn from_render_span(span: &RenderSpan,\n+                        msg: &'a str,\n+                        level: Level,\n+                        je: &JsonEmitter)\n+                        -> Diagnostic<'a> {\n+        Diagnostic {\n+            message: msg,\n+            code: None,\n+            level: level.to_str(),\n+            span: Some(DiagnosticSpan::from_render_span(span, je)),\n+            children: vec![],\n+        }\n+    }\n+\n+    fn from_diagnostic_builder<'c>(db: &'c DiagnosticBuilder,\n+                                   je: &JsonEmitter)\n+                                   -> Diagnostic<'c> {\n+        Diagnostic {\n+            message: &db.message,\n+            code: DiagnosticCode::map_opt_string(db.code.clone(), je),\n+            level: db.level.to_str(),\n+            span: db.span.map(|sp| DiagnosticSpan::from_span(sp, je)),\n+            children: db.children.iter().map(|c| {\n+                Diagnostic::from_sub_diagnostic(c, je)\n+            }).collect(),\n+        }\n+    }\n+\n+    fn from_sub_diagnostic<'c>(db: &'c SubDiagnostic, je: &JsonEmitter) -> Diagnostic<'c> {\n+        Diagnostic {\n+            message: &db.message,\n+            code: None,\n+            level: db.level.to_str(),\n+            span: db.render_span.as_ref()\n+                    .map(|sp| DiagnosticSpan::from_render_span(sp, je))\n+                    .or_else(|| db.span.map(|sp| DiagnosticSpan::from_span(sp, je))),\n+            children: vec![],\n+        }\n+    }\n+}\n+\n+impl DiagnosticSpan {\n+    fn from_span(span: Span, je: &JsonEmitter) -> DiagnosticSpan {\n+        let start = je.cm.lookup_char_pos(span.lo);\n+        let end = je.cm.lookup_char_pos(span.hi);\n+        DiagnosticSpan {\n+            file_name: start.file.name.clone(),\n+            byte_start: span.lo.0,\n+            byte_end: span.hi.0,\n+            line_start: start.line,\n+            line_end: end.line,\n+            column_start: start.col.0 + 1,\n+            column_end: end.col.0 + 1,\n+        }\n+    }\n+\n+    fn from_render_span(span: &RenderSpan, je: &JsonEmitter) -> DiagnosticSpan {\n+        match *span {\n+            // FIXME(#30701) handle Suggestion properly\n+            RenderSpan::FullSpan(sp) | RenderSpan::Suggestion(sp, _) => {\n+                DiagnosticSpan::from_span(sp, je)\n+            }\n+            RenderSpan::EndSpan(span) => {\n+                let end = je.cm.lookup_char_pos(span.hi);\n+                DiagnosticSpan {\n+                    file_name: end.file.name.clone(),\n+                    byte_start: span.lo.0,\n+                    byte_end: span.hi.0,\n+                    line_start: 0,\n+                    line_end: end.line,\n+                    column_start: 0,\n+                    column_end: end.col.0 + 1,\n+                }\n+            }\n+            RenderSpan::FileLine(span) => {\n+                let start = je.cm.lookup_char_pos(span.lo);\n+                let end = je.cm.lookup_char_pos(span.hi);\n+                DiagnosticSpan {\n+                    file_name: start.file.name.clone(),\n+                    byte_start: span.lo.0,\n+                    byte_end: span.hi.0,\n+                    line_start: start.line,\n+                    line_end: end.line,\n+                    column_start: 0,\n+                    column_end: 0,\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+impl DiagnosticCode {\n+    fn map_opt_string(s: Option<String>, je: &JsonEmitter) -> Option<DiagnosticCode> {\n+        s.map(|s| {\n+\n+            let explanation = je.registry\n+                                .as_ref()\n+                                .and_then(|registry| registry.find_description(&s));\n+\n+            DiagnosticCode {\n+                code: s,\n+                explanation: explanation,\n+            }\n+        })\n+    }\n+}"}, {"sha": "f269dee31d9ead90579cee0144ac3513179cce61", "filename": "src/libsyntax/errors/mod.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibsyntax%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibsyntax%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fmod.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -24,6 +24,7 @@ use std::rc::Rc;\n use term;\n \n pub mod emitter;\n+pub mod json;\n \n #[derive(Clone)]\n pub enum RenderSpan {\n@@ -275,12 +276,12 @@ pub struct Handler {\n }\n \n impl Handler {\n-    pub fn new(color_config: ColorConfig,\n-               registry: Option<diagnostics::registry::Registry>,\n-               can_emit_warnings: bool,\n-               treat_err_as_bug: bool,\n-               cm: Rc<codemap::CodeMap>)\n-               -> Handler {\n+    pub fn with_tty_emitter(color_config: ColorConfig,\n+                            registry: Option<diagnostics::registry::Registry>,\n+                            can_emit_warnings: bool,\n+                            treat_err_as_bug: bool,\n+                            cm: Rc<codemap::CodeMap>)\n+                            -> Handler {\n         let emitter = Box::new(EmitterWriter::stderr(color_config, registry, cm));\n         Handler::with_emitter(can_emit_warnings, treat_err_as_bug, emitter)\n     }\n@@ -547,14 +548,7 @@ impl fmt::Display for Level {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         use std::fmt::Display;\n \n-        match *self {\n-            Bug => \"error: internal compiler error\".fmt(f),\n-            Fatal | Error => \"error\".fmt(f),\n-            Warning => \"warning\".fmt(f),\n-            Note => \"note\".fmt(f),\n-            Help => \"help\".fmt(f),\n-            Cancelled => unreachable!(),\n-        }\n+        self.to_str().fmt(f)\n     }\n }\n \n@@ -568,6 +562,17 @@ impl Level {\n             Cancelled => unreachable!(),\n         }\n     }\n+\n+    fn to_str(self) -> &'static str {\n+        match self {\n+            Bug => \"error: internal compiler error\",\n+            Fatal | Error => \"error\",\n+            Warning => \"warning\",\n+            Note => \"note\",\n+            Help => \"help\",\n+            Cancelled => panic!(\"Shouldn't call on cancelled error\"),\n+        }\n+    }\n }\n \n pub fn expect<T, M>(diag: &Handler, opt: Option<T>, msg: M) -> T where"}, {"sha": "090b070433f46dc9fef15255b90dd99044df2c3b", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -49,7 +49,7 @@ pub struct ParseSess {\n impl ParseSess {\n     pub fn new() -> ParseSess {\n         let cm = Rc::new(CodeMap::new());\n-        let handler = Handler::new(ColorConfig::Auto, None, true, false, cm.clone());\n+        let handler = Handler::with_tty_emitter(ColorConfig::Auto, None, true, false, cm.clone());\n         ParseSess::with_span_handler(handler, cm)\n     }\n "}, {"sha": "dc409f393a86a971fa82fb3005fc0ef78eb286dc", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -195,7 +195,7 @@ fn build_exec_options(sysroot: PathBuf) -> Options {\n     opts.maybe_sysroot = Some(sysroot);\n \n     // Prefer faster build time\n-    opts.optimize = config::No;\n+    opts.optimize = config::OptLevel::No;\n \n     // Don't require a `main` function\n     opts.crate_types = vec![config::CrateTypeDylib];"}, {"sha": "2467e08300c18987696da242e992f7f65f5901d7", "filename": "src/test/run-make/json-errors/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fjson-errors%2FMakefile?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -0,0 +1,8 @@\n+-include ../tools.mk\n+\n+all:\n+\tcp foo.rs $(TMPDIR)\n+\tcd $(TMPDIR)\n+\t-$(RUSTC) -Z unstable-options --error-format=json foo.rs 2>foo.log\n+\tgrep -q '{\"message\":\"unresolved name `y`\",\"code\":{\"code\":\"E0425\",\"explanation\":\"\\\\nAn unresolved name was used. Example of erroneous codes.*\"},\"level\":\"error\",\"span\":{\"file_name\":\"foo.rs\",\"byte_start\":496,\"byte_end\":497,\"line_start\":12,\"line_end\":12,\"column_start\":18,\"column_end\":19},\"children\":\\[\\]}' foo.log\n+\tgrep -q '{\"message\":\".*\",\"code\":{\"code\":\"E0277\",\"explanation\":\"\\\\nYou tried.*\"},\"level\":\"error\",\"span\":{.*},\"children\":\\[{\"message\":\"the .*\",\"code\":null,\"level\":\"help\",\"span\":{\"file_name\":\"foo.rs\",\"byte_start\":504,\"byte_end\":516,\"line_start\":14,\"line_end\":14,\"column_start\":0,\"column_end\":0},\"children\":\\[\\]},{\"message\":\"  <u8 as core::ops::Add>\",\"code\":null,\"level\":\"help\",' foo.log"}, {"sha": "4db33940d88434011d5e36c85c96ff74689ada4f", "filename": "src/test/run-make/json-errors/foo.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Ftest%2Frun-make%2Fjson-errors%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Ftest%2Frun-make%2Fjson-errors%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fjson-errors%2Ffoo.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = 42 + y;\n+\n+    42u8 + 42i32;\n+}"}, {"sha": "56481dc646a9c5e35a694a4daac24cc24e532094", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8869d3487a569b4a6b86c1b585cc15db48abc4a/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=d8869d3487a569b4a6b86c1b585cc15db48abc4a", "patch": "@@ -35,7 +35,7 @@ impl<'a> CompilerCalls<'a> for TestCalls {\n     fn early_callback(&mut self,\n                       _: &getopts::Matches,\n                       _: &diagnostics::registry::Registry,\n-                      _: errors::emitter::ColorConfig)\n+                      _: config::ErrorOutputType)\n                       -> Compilation {\n         self.count *= 2;\n         Compilation::Continue"}]}