{"sha": "5579692ce77df5f8227ab7a226145f7cf18ef747", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1Nzk2OTJjZTc3ZGY1ZjgyMjdhYjdhMjI2MTQ1ZjdjZjE4ZWY3NDc=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-05T22:03:04Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:46Z"}, "message": "libcollections: use unboxed closures in `VecMap` methods", "tree": {"sha": "88da4121517019091771a060cbf43be8b09a9610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88da4121517019091771a060cbf43be8b09a9610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5579692ce77df5f8227ab7a226145f7cf18ef747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5579692ce77df5f8227ab7a226145f7cf18ef747", "html_url": "https://github.com/rust-lang/rust/commit/5579692ce77df5f8227ab7a226145f7cf18ef747", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5579692ce77df5f8227ab7a226145f7cf18ef747/comments", "author": null, "committer": null, "parents": [{"sha": "683342c3f0e6cb4142876ad06ba418df2aae1450", "url": "https://api.github.com/repos/rust-lang/rust/commits/683342c3f0e6cb4142876ad06ba418df2aae1450", "html_url": "https://github.com/rust-lang/rust/commit/683342c3f0e6cb4142876ad06ba418df2aae1450"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "cc2fd0a66469017fa55ba0fc03c058ac1113a820", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5579692ce77df5f8227ab7a226145f7cf18ef747/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5579692ce77df5f8227ab7a226145f7cf18ef747/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=5579692ce77df5f8227ab7a226145f7cf18ef747", "patch": "@@ -20,6 +20,7 @@ use core::fmt;\n use core::iter;\n use core::iter::{Enumerate, FilterMap};\n use core::mem::replace;\n+use core::ops::FnOnce;\n \n use hash::{Hash, Writer};\n use {vec, slice};\n@@ -452,8 +453,8 @@ impl<V:Clone> VecMap<V> {\n     /// assert!(!map.update(1, vec![3i, 4], |mut old, new| { old.extend(new.into_iter()); old }));\n     /// assert_eq!(map[1], vec![1i, 2, 3, 4]);\n     /// ```\n-    pub fn update(&mut self, key: uint, newval: V, ff: |V, V| -> V) -> bool {\n-        self.update_with_key(key, newval, |_k, v, v1| ff(v,v1))\n+    pub fn update<F>(&mut self, key: uint, newval: V, ff: F) -> bool where F: FnOnce(V, V) -> V {\n+        self.update_with_key(key, newval, move |_k, v, v1| ff(v,v1))\n     }\n \n     /// Updates a value in the map. If the key already exists in the map,\n@@ -476,11 +477,9 @@ impl<V:Clone> VecMap<V> {\n     /// assert!(!map.update_with_key(7, 20, |key, old, new| (old + new) % key));\n     /// assert_eq!(map[7], 2);\n     /// ```\n-    pub fn update_with_key(&mut self,\n-                           key: uint,\n-                           val: V,\n-                           ff: |uint, V, V| -> V)\n-                           -> bool {\n+    pub fn update_with_key<F>(&mut self, key: uint, val: V, ff: F) -> bool where\n+        F: FnOnce(uint, V, V) -> V\n+    {\n         let new_val = match self.get(&key) {\n             None => val,\n             Some(orig) => ff(key, (*orig).clone(), val)"}]}