{"sha": "8fbf75e0f9f7abf0f7820f1a89dfc230d3bc918f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYmY3NWUwZjlmN2FiZjBmNzgyMGYxYTg5ZGZjMjMwZDNiYzkxOGY=", "commit": {"author": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2021-09-02T08:04:46Z"}, "committer": {"name": "dswij", "email": "dswijj@gmail.com", "date": "2021-09-08T02:41:37Z"}, "message": "`mut_range_bound` to check for immediate break from loop", "tree": {"sha": "40814f1b11f6e7bb562897bf1f0e749580cef8ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40814f1b11f6e7bb562897bf1f0e749580cef8ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fbf75e0f9f7abf0f7820f1a89dfc230d3bc918f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fbf75e0f9f7abf0f7820f1a89dfc230d3bc918f", "html_url": "https://github.com/rust-lang/rust/commit/8fbf75e0f9f7abf0f7820f1a89dfc230d3bc918f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fbf75e0f9f7abf0f7820f1a89dfc230d3bc918f/comments", "author": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dswij", "id": 44697459, "node_id": "MDQ6VXNlcjQ0Njk3NDU5", "avatar_url": "https://avatars.githubusercontent.com/u/44697459?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dswij", "html_url": "https://github.com/dswij", "followers_url": "https://api.github.com/users/dswij/followers", "following_url": "https://api.github.com/users/dswij/following{/other_user}", "gists_url": "https://api.github.com/users/dswij/gists{/gist_id}", "starred_url": "https://api.github.com/users/dswij/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dswij/subscriptions", "organizations_url": "https://api.github.com/users/dswij/orgs", "repos_url": "https://api.github.com/users/dswij/repos", "events_url": "https://api.github.com/users/dswij/events{/privacy}", "received_events_url": "https://api.github.com/users/dswij/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "290fb8de6637262c79bda37723bf784d6341056b", "url": "https://api.github.com/repos/rust-lang/rust/commits/290fb8de6637262c79bda37723bf784d6341056b", "html_url": "https://github.com/rust-lang/rust/commit/290fb8de6637262c79bda37723bf784d6341056b"}], "stats": {"total": 98, "additions": 77, "deletions": 21}, "files": [{"sha": "358d53e8859d08d06a7b72ff565da1f0f5608118", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 77, "deletions": 21, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/8fbf75e0f9f7abf0f7820f1a89dfc230d3bc918f/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fbf75e0f9f7abf0f7820f1a89dfc230d3bc918f/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=8fbf75e0f9f7abf0f7820f1a89dfc230d3bc918f", "patch": "@@ -1,24 +1,27 @@\n use super::MUT_RANGE_BOUND;\n-use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{higher, path_to_local};\n+use clippy_utils::diagnostics::span_lint_and_note;\n+use clippy_utils::{get_enclosing_block, higher, path_to_local};\n use if_chain::if_chain;\n-use rustc_hir::{BindingAnnotation, Expr, HirId, Node, PatKind};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::{BindingAnnotation, Expr, ExprKind, HirId, Node, PatKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n+use rustc_middle::hir::map::Map;\n use rustc_middle::{mir::FakeReadCause, ty};\n use rustc_span::source_map::Span;\n use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>, body: &Expr<'_>) {\n-    if let Some(higher::Range {\n-        start: Some(start),\n-        end: Some(end),\n-        ..\n-    }) = higher::Range::hir(arg)\n-    {\n-        let mut_ids = vec![check_for_mutability(cx, start), check_for_mutability(cx, end)];\n-        if mut_ids[0].is_some() || mut_ids[1].is_some() {\n-            let (span_low, span_high) = check_for_mutation(cx, body, &mut_ids);\n+    if_chain! {\n+        if let Some(higher::Range {\n+            start: Some(start),\n+            end: Some(end),\n+            ..\n+        }) = higher::Range::hir(arg);\n+        let (mut_id_start, mut_id_end) = (check_for_mutability(cx, start), check_for_mutability(cx, end));\n+        if mut_id_start.is_some() || mut_id_end.is_some();\n+        then {\n+            let (span_low, span_high) = check_for_mutation(cx, body, mut_id_start, mut_id_end);\n             mut_warn_with_span(cx, span_low);\n             mut_warn_with_span(cx, span_high);\n         }\n@@ -27,11 +30,13 @@ pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>, body: &Expr<'_>) {\n \n fn mut_warn_with_span(cx: &LateContext<'_>, span: Option<Span>) {\n     if let Some(sp) = span {\n-        span_lint(\n+        span_lint_and_note(\n             cx,\n             MUT_RANGE_BOUND,\n             sp,\n-            \"attempt to mutate range bound within loop; note that the range of the loop is unchanged\",\n+            \"attempt to mutate range bound within loop\",\n+            None,\n+            \"the range of the loop is unchanged\",\n         );\n     }\n }\n@@ -51,12 +56,13 @@ fn check_for_mutability(cx: &LateContext<'_>, bound: &Expr<'_>) -> Option<HirId>\n fn check_for_mutation<'tcx>(\n     cx: &LateContext<'tcx>,\n     body: &Expr<'_>,\n-    bound_ids: &[Option<HirId>],\n+    bound_id_start: Option<HirId>,\n+    bound_id_end: Option<HirId>,\n ) -> (Option<Span>, Option<Span>) {\n     let mut delegate = MutatePairDelegate {\n         cx,\n-        hir_id_low: bound_ids[0],\n-        hir_id_high: bound_ids[1],\n+        hir_id_low: bound_id_start,\n+        hir_id_high: bound_id_end,\n         span_low: None,\n         span_high: None,\n     };\n@@ -70,6 +76,7 @@ fn check_for_mutation<'tcx>(\n         )\n         .walk_expr(body);\n     });\n+\n     delegate.mutation_span()\n }\n \n@@ -87,10 +94,10 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {\n             if let PlaceBase::Local(id) = cmt.place.base {\n-                if Some(id) == self.hir_id_low {\n+                if Some(id) == self.hir_id_low && !BreakAfterExprVisitor::is_found(self.cx, diag_expr_id) {\n                     self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id));\n                 }\n-                if Some(id) == self.hir_id_high {\n+                if Some(id) == self.hir_id_high && !BreakAfterExprVisitor::is_found(self.cx, diag_expr_id) {\n                     self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id));\n                 }\n             }\n@@ -99,10 +106,10 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n \n     fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId) {\n         if let PlaceBase::Local(id) = cmt.place.base {\n-            if Some(id) == self.hir_id_low {\n+            if Some(id) == self.hir_id_low && !BreakAfterExprVisitor::is_found(self.cx, diag_expr_id) {\n                 self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id));\n             }\n-            if Some(id) == self.hir_id_high {\n+            if Some(id) == self.hir_id_high && !BreakAfterExprVisitor::is_found(self.cx, diag_expr_id) {\n                 self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id));\n             }\n         }\n@@ -116,3 +123,52 @@ impl MutatePairDelegate<'_, '_> {\n         (self.span_low, self.span_high)\n     }\n }\n+\n+struct BreakAfterExprVisitor {\n+    hir_id: HirId,\n+    past_expr: bool,\n+    past_candidate: bool,\n+    break_after_expr: bool,\n+}\n+\n+impl BreakAfterExprVisitor {\n+    pub fn is_found(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n+        let mut visitor = BreakAfterExprVisitor {\n+            hir_id,\n+            past_expr: false,\n+            past_candidate: false,\n+            break_after_expr: false,\n+        };\n+\n+        get_enclosing_block(cx, hir_id).map_or(false, |block| {\n+            visitor.visit_block(block);\n+            visitor.break_after_expr\n+        })\n+    }\n+}\n+\n+impl intravisit::Visitor<'tcx> for BreakAfterExprVisitor {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n+        if self.past_candidate {\n+            return;\n+        }\n+\n+        if expr.hir_id == self.hir_id {\n+            self.past_expr = true;\n+        } else if self.past_expr {\n+            if matches!(&expr.kind, ExprKind::Break(..)) {\n+                self.break_after_expr = true;\n+            }\n+\n+            self.past_candidate = true;\n+        } else {\n+            intravisit::walk_expr(self, expr);\n+        }\n+    }\n+}"}]}