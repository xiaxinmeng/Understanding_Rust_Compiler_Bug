{"sha": "671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "node_id": "C_kwDOAAsO6NoAKDY3MWE0YjhiMGZmM2Q0ZTMyZjJlNTVlYWY4Mzg5ZTY5NDMzNTM1ZGY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-31T12:51:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-31T15:32:39Z"}, "message": "make backtrace header a bit more visible", "tree": {"sha": "52effe39de648efa982bf6b15ab7be080ff6a495", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52effe39de648efa982bf6b15ab7be080ff6a495"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "html_url": "https://github.com/rust-lang/rust/commit/671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cb26afc0c25f77d52b6f2c83eba89466d85b214", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb26afc0c25f77d52b6f2c83eba89466d85b214", "html_url": "https://github.com/rust-lang/rust/commit/4cb26afc0c25f77d52b6f2c83eba89466d85b214"}], "stats": {"total": 674, "additions": 337, "deletions": 337}, "files": [{"sha": "74d2fe2680a4c59e131decc203e3e333fc43f637", "filename": "src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -352,7 +352,7 @@ fn report_msg<'mir, 'tcx>(\n     }\n     if notes.len() + helps.len() > 0 {\n         // Add visual separator before backtrace.\n-        err.note(\"backtrace:\");\n+        err.note(\"BACKTRACE:\");\n     }\n     // Add backtrace\n     for (idx, frame_info) in stacktrace.iter().enumerate() {"}, {"sha": "f649f0ae43e30992634235fd3f6b160d6e857ec1", "filename": "tests/extern-so/fail/function_not_in_so.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Fextern-so%2Ffail%2Ffunction_not_in_so.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Fextern-so%2Ffail%2Ffunction_not_in_so.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fextern-so%2Ffail%2Ffunction_not_in_so.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -5,7 +5,7 @@ LL |         foo();\n    |         ^^^^^ can't call foreign function: foo\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/function_not_in_so.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "28439b54b2908270a7ffbf3f8c022d9b49aab4a6", "filename": "tests/fail/alloc/deallocate-bad-alignment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/deallocate-bad-alignment.rs:LL:CC\n   --> $DIR/deallocate-bad-alignment.rs:LL:CC"}, {"sha": "a6ceab1f56f513d742e5a5055a25a7000de269e3", "filename": "tests/fail/alloc/deallocate-bad-size.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Fdeallocate-bad-size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Fdeallocate-bad-size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fdeallocate-bad-size.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/deallocate-bad-size.rs:LL:CC\n   --> $DIR/deallocate-bad-size.rs:LL:CC"}, {"sha": "b6c5b6f97ee7b9fa9a7bb8f08bc8c492270b9b75", "filename": "tests/fail/alloc/deallocate-twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Fdeallocate-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Fdeallocate-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fdeallocate-twice.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/deallocate-twice.rs:LL:CC\n   --> $DIR/deallocate-twice.rs:LL:CC"}, {"sha": "4ee85add6c228242c656d0bd1f2a361107fe771b", "filename": "tests/fail/alloc/global_system_mixup.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Fglobal_system_mixup.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Fglobal_system_mixup.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fglobal_system_mixup.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         FREE();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `std::sys::PLATFORM::alloc::<impl std::alloc::GlobalAlloc for std::alloc::System>::dealloc` at RUSTLIB/std/src/sys/PLATFORM/alloc.rs:LL:CC\n    = note: inside `<std::alloc::System as std::alloc::Allocator>::deallocate` at RUSTLIB/std/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/global_system_mixup.rs:LL:CC"}, {"sha": "ea70970ae0fefbf499318cf12de8a12d68fb35dc", "filename": "tests/fail/alloc/no_global_allocator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Fno_global_allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Fno_global_allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fno_global_allocator.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -5,7 +5,7 @@ LL |         __rust_alloc(1, 1);\n    |         ^^^^^^^^^^^^^^^^^^ can't call foreign function: __rust_alloc\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `start` at $DIR/no_global_allocator.rs:LL:CC\n \n error: aborting due to previous error"}, {"sha": "c11b5a851048f631c03532712c5a753dff1ac0a1", "filename": "tests/fail/alloc/reallocate-bad-size.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Freallocate-bad-size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Freallocate-bad-size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Freallocate-bad-size.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `std::alloc::realloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/reallocate-bad-size.rs:LL:CC\n   --> $DIR/reallocate-bad-size.rs:LL:CC"}, {"sha": "5631dcb4cc084f50c73dfe5e88bf0d842c23d4e7", "filename": "tests/fail/alloc/reallocate-change-alloc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Freallocate-change-alloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Freallocate-change-alloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Freallocate-change-alloc.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _z = *x;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/reallocate-change-alloc.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c7db5a729048c234e899a153ef03dfc2d74d6fc8", "filename": "tests/fail/alloc/reallocate-dangling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Freallocate-dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Freallocate-dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Freallocate-dangling.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { __rust_realloc(ptr, layout.size(), layout.align(), new_size) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `std::alloc::realloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n note: inside `main` at $DIR/reallocate-dangling.rs:LL:CC\n   --> $DIR/reallocate-dangling.rs:LL:CC"}, {"sha": "44991542b135074d8fc1087f290fe7e74da10b6a", "filename": "tests/fail/alloc/stack_free.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Fstack_free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Falloc%2Fstack_free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fstack_free.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC"}, {"sha": "83701639976877fae534904ea29c8d878643d99f", "filename": "tests/fail/box-cell-alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fbox-cell-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fbox-cell-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbox-cell-alias.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x1] by a Unique retag\n    |\n LL |     let res = helper(val, ptr);\n    |                      ^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `helper` at $DIR/box-cell-alias.rs:LL:CC\n note: inside `main` at $DIR/box-cell-alias.rs:LL:CC\n   --> $DIR/box-cell-alias.rs:LL:CC"}, {"sha": "96f2ff3282c82a4955ec44bd1e30abb3eea32433", "filename": "tests/fail/branchless-select-i128-pointer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fbranchless-select-i128-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fbranchless-select-i128-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbranchless-select-i128-pointer.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -10,7 +10,7 @@ LL | |             )\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/branchless-select-i128-pointer.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "94463bef8f0fe9731cfda7ae7e4699655b0799da", "filename": "tests/fail/concurrency/libc_pthread_create_too_few_args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_few_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_few_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_few_args.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     panic!()\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `thread_start` at RUSTLIB/std/src/panic.rs:LL:CC\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "fdbe91cc8a803986f08fd32c29bde95d92ecf788", "filename": "tests/fail/concurrency/libc_pthread_create_too_many_args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_many_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_many_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_too_many_args.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     panic!()\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `thread_start` at RUSTLIB/std/src/panic.rs:LL:CC\n    = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "763e0d3665d8f6bae4c27a7bb03878a518db5ca0", "filename": "tests/fail/concurrency/libc_pthread_join_detached.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/libc_pthread_join_detached.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a3253e2ef933bf712b0acfea7a9ca409007b6d4f", "filename": "tests/fail/concurrency/libc_pthread_join_joined.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/libc_pthread_join_joined.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "09e14d46a967f708fae5a1dabbb51fce7e8fe837", "filename": "tests/fail/concurrency/libc_pthread_join_main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             assert_eq!(libc::pthread_join(thread_id, ptr::null_mut()), 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/libc_pthread_join_main.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "db5d7bfd5daef9d80d1b8b5438fa31766ba0c000", "filename": "tests/fail/concurrency/libc_pthread_join_multiple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL | ...   assert_eq!(libc::pthread_join(native_copy, ptr::null_mut()), 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/libc_pthread_join_multiple.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8db4a83f9cebb3d71f41df2aaab37c16d55eed01", "filename": "tests/fail/concurrency/libc_pthread_join_self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             assert_eq!(libc::pthread_join(native, ptr::null_mut()), 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/libc_pthread_join_self.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "d51fdee0b256fca3acdad3ccd756965a1007f49a", "filename": "tests/fail/concurrency/read_only_atomic_cmpxchg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Fread_only_atomic_cmpxchg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Fread_only_atomic_cmpxchg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fread_only_atomic_cmpxchg.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -12,7 +12,7 @@ please report an issue at <https://github.com/rust-lang/miri/issues> if this is\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/read_only_atomic_cmpxchg.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "17851d6b470b4883fd68a62b22db08c8789d9cac", "filename": "tests/fail/concurrency/read_only_atomic_load.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Fread_only_atomic_load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Fread_only_atomic_load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fread_only_atomic_load.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -12,7 +12,7 @@ please report an issue at <https://github.com/rust-lang/miri/issues> if this is\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/read_only_atomic_load.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "cc3e56398781bf6e59e5df80538f2199ef945b5c", "filename": "tests/fail/concurrency/thread_local_static_dealloc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _val = *dangling_ptr.0;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/thread_local_static_dealloc.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "98db33e3206bd11bde8beb13550bd410a0235f36", "filename": "tests/fail/concurrency/unwind_top_of_stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -11,7 +11,7 @@ LL | | }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `thread_start` at $DIR/unwind_top_of_stack.rs:LL:CC\n \n error: aborting due to previous error"}, {"sha": "78c75611d3333a98385d2d6a984ba6b94cb12c90", "filename": "tests/fail/concurrency/windows_join_detached.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Fwindows_join_detached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fconcurrency%2Fwindows_join_detached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fwindows_join_detached.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let rc = unsafe { c::WaitForSingleObject(self.handle.as_raw_handle(\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `std::sys::PLATFORM::thread::Thread::join` at RUSTLIB/std/src/sys/PLATFORM/thread.rs:LL:CC\n    = note: inside `std::thread::JoinInner::<()>::join` at RUSTLIB/std/src/thread/mod.rs:LL:CC\n    = note: inside `std::thread::JoinHandle::<()>::join` at RUSTLIB/std/src/thread/mod.rs:LL:CC"}, {"sha": "016081d90adf78b8ef733782adafe5c31139c4c2", "filename": "tests/fail/crates/tokio_mvp.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fcrates%2Ftokio_mvp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fcrates%2Ftokio_mvp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fcrates%2Ftokio_mvp.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -5,7 +5,7 @@ LL |         syscall!(epoll_create1(flag)).map(|ep| Selector {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't call foreign function: epoll_create1\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-   = note: backtrace:\n+   = note: BACKTRACE:\n note: inside `main` at $DIR/tokio_mvp.rs:LL:CC\n   --> $DIR/tokio_mvp.rs:LL:CC\n    |"}, {"sha": "5f081afe68af89458165ed1dcd244c7eea7ef428", "filename": "tests/fail/dangling_pointers/dangling_pointer_addr_of.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_addr_of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_addr_of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_addr_of.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let x = unsafe { ptr::addr_of!(*p) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n    = note: this error originates in the macro `ptr::addr_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "cb323818845df248cf36e34b025a8b18355b9d62", "filename": "tests/fail/dangling_pointers/dangling_pointer_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let x = unsafe { *p };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/dangling_pointer_deref.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "02db6302a0a1ea671efd1587af94fb6e64dc4f21", "filename": "tests/fail/dangling_pointers/dangling_zst_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fdangling_zst_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fdangling_zst_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fdangling_zst_deref.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _x = unsafe { *p };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/dangling_zst_deref.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3e2c3903b7e47fc572412a6a870b89a8564b3325", "filename": "tests/fail/dangling_pointers/deref-invalid-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _y = unsafe { &*x as *const u32 };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/deref-invalid-ptr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "fe039ef3adaf96d5cf1ac6fb95d61afa10882693", "filename": "tests/fail/dangling_pointers/deref-partially-dangling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fderef-partially-dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fderef-partially-dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fderef-partially-dangling.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let val = unsafe { (*xptr).1 };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/deref-partially-dangling.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "33aa6c844101775e30cda9ceff6d33ad1ae8e93e", "filename": "tests/fail/dangling_pointers/dyn_size.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fdyn_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fdyn_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fdyn_size.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _ptr = unsafe { &*ptr };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/dyn_size.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3e492a170c8b14270f8bd12a3927380280433042", "filename": "tests/fail/dangling_pointers/maybe_null_pointer_deref_zst.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _x: () = unsafe { *ptr };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/maybe_null_pointer_deref_zst.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c41c20aaf4a7bb7665295de821a6b7780b5f5fe1", "filename": "tests/fail/dangling_pointers/maybe_null_pointer_write_zst.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { *ptr = zst_val };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/maybe_null_pointer_write_zst.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "64dcaa4548476876afd2e252fff55c5e93ab7a7c", "filename": "tests/fail/dangling_pointers/null_pointer_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let x: i32 = unsafe { *std::ptr::null() };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/null_pointer_deref.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "301578a4f5fb411bb4c19099080820d4c7c51de3", "filename": "tests/fail/dangling_pointers/null_pointer_deref_zst.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref_zst.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let x: () = unsafe { *std::ptr::null() };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/null_pointer_deref_zst.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0e5858a96f9d78cc59b599c27917843d6f29ebeb", "filename": "tests/fail/dangling_pointers/null_pointer_write.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { *std::ptr::null_mut() = 0i32 };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/null_pointer_write.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2953d85c25f3f96b631fac89066963ede32c4963", "filename": "tests/fail/dangling_pointers/null_pointer_write_zst.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { std::ptr::null_mut::<[u8; 0]>().write(zst_val) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/null_pointer_write_zst.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b2461ce4230ad79f94604d25cc1890fa3883d3c2", "filename": "tests/fail/dangling_pointers/out_of_bounds_read1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let x = unsafe { *v.as_ptr().wrapping_offset(5) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/out_of_bounds_read1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b17058b406298a649fe5cf50505755f84c1540b1", "filename": "tests/fail/dangling_pointers/out_of_bounds_read2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fout_of_bounds_read2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let x = unsafe { *v.as_ptr().wrapping_offset(5) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/out_of_bounds_read2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "679e4809ca663bc2dbfdfcb3db2bcc2272834f02", "filename": "tests/fail/dangling_pointers/stack_temporary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fstack_temporary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fstack_temporary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fstack_temporary.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let val = *x;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/stack_temporary.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "72e5f20f924a42bfef5a3c184bff4590b6af6c2d", "filename": "tests/fail/dangling_pointers/storage_dead_dangling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { &mut *(LEAK as *mut i32) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `evil` at $DIR/storage_dead_dangling.rs:LL:CC\n note: inside `main` at $DIR/storage_dead_dangling.rs:LL:CC\n   --> $DIR/storage_dead_dangling.rs:LL:CC"}, {"sha": "658fb228174e56bf17380408c7282bd1dc08288a", "filename": "tests/fail/dangling_pointers/wild_pointer_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let x = unsafe { *p };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/wild_pointer_deref.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c6bfd12b241101d7f1c0fdc4710c2f0e8807f4fe", "filename": "tests/fail/data_race/alloc_read_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Falloc_read_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Falloc_read_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Falloc_read_race.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             *pointer.load(Ordering::Relaxed)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/alloc_read_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c4efc175c207764bb8404bc3ba9956b05c6a7081", "filename": "tests/fail/data_race/alloc_write_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Falloc_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Falloc_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Falloc_write_race.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             *pointer.load(Ordering::Relaxed) = 2;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/alloc_write_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "04adf0a98b6c55d32bacdc7b3d1c84c892178a15", "filename": "tests/fail/data_race/atomic_read_na_write_race1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             (&*c.0).load(Ordering::SeqCst)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/atomic_read_na_write_race1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b48f927b8fcae501556bf93bf230f44bfe997686", "filename": "tests/fail/data_race/atomic_read_na_write_race2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             *atomic_ref.get_mut() = 32;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/atomic_read_na_write_race2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "fdb9b353a67bf42f4268a63ec11068ddf6245fee", "filename": "tests/fail/data_race/atomic_write_na_read_race1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             *atomic_ref.get_mut()\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/atomic_write_na_read_race1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ec581e322b7d1da928d6c0da30bdf7a9c73a8edf", "filename": "tests/fail/data_race/atomic_write_na_read_race2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             (&*c.0).store(32, Ordering::SeqCst);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/atomic_write_na_read_race2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4c75f94d71cf55a0a4f6daf7808a7b34c7e485d4", "filename": "tests/fail/data_race/atomic_write_na_write_race1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             (&*c.0).store(64, Ordering::SeqCst);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/atomic_write_na_write_race1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8c7f14081c87b2634d705cc9770d4c347b76a495", "filename": "tests/fail/data_race/atomic_write_na_write_race2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             *atomic_ref.get_mut() = 32;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/atomic_write_na_write_race2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "663bb8d4af5122e24f171cfc9d21637209ff8392", "filename": "tests/fail/data_race/dangling_thread_async_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             *c.0 = 64;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/dangling_thread_async_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ad3e1735378f37711f4f54bc2d10ed709d56d35f", "filename": "tests/fail/data_race/dangling_thread_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         *c.0 = 64;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/dangling_thread_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "194c2260baaab478d8ac78d05fa5ca9cd5bceebb", "filename": "tests/fail/data_race/dealloc_read_race1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -11,7 +11,7 @@ LL | |             );\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/dealloc_read_race1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f303d57c8bd9caa78af3eb2ec5e2823cd969099f", "filename": "tests/fail/data_race/dealloc_read_race2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             *ptr.0\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/dealloc_read_race2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c986e912f03baa3a3afa50fed8daae10bde0136c", "filename": "tests/fail/data_race/dealloc_read_race_stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/dealloc_read_race_stack.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "56eb0b519c484dcd6bdd62479df5254d20b8791b", "filename": "tests/fail/data_race/dealloc_write_race1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -11,7 +11,7 @@ LL | |             );\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/dealloc_write_race1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "23b8e9ade0e0efe929a60ebbccaecb87117537cd", "filename": "tests/fail/data_race/dealloc_write_race2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             *ptr.0 = 2;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/dealloc_write_race2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "7b77e2470a1ab597ce20866ab09bb0bd6728548d", "filename": "tests/fail/data_race/dealloc_write_race_stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/dealloc_write_race_stack.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "26c07ae6962b56b87ca26405e70102c6176de97b", "filename": "tests/fail/data_race/enable_after_join_to_main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             *c.0 = 64;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/enable_after_join_to_main.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0abfe213db17dbf559f7c8e3983a93733e7d7f93", "filename": "tests/fail/data_race/fence_after_load.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Ffence_after_load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Ffence_after_load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Ffence_after_load.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { V = 2 }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/fence_after_load.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "08a19537312cf957c5dc5f2f11317ccc0bf4e341", "filename": "tests/fail/data_race/read_write_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fread_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fread_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fread_write_race.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             *c.0 = 64;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/read_write_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "20f137afe732996661cd82566d05c63968e8f7e7", "filename": "tests/fail/data_race/read_write_race_stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             stack_var\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/read_write_race_stack.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6121c25db22d7c809b97700775ab912b4456ed19", "filename": "tests/fail/data_race/relax_acquire_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |                 *c.0\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/relax_acquire_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "777bc4adadc6d20f3039a9c48c9f208bf7013f1b", "filename": "tests/fail/data_race/release_seq_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelease_seq_race.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |                 *c.0\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/release_seq_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0fcb192d920fd03293f0b61864de7dbd054ce366", "filename": "tests/fail/data_race/release_seq_race_same_thread.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |                 *c.0\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/release_seq_race_same_thread.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3ae6f3b84fe12449cd0b0ea731e47dba8e2d13ba", "filename": "tests/fail/data_race/rmw_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Frmw_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Frmw_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frmw_race.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |                 *c.0\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/rmw_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5de27108ab633bcfa3e4e90a873bc1f4114e4a8a", "filename": "tests/fail/data_race/stack_pop_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fstack_pop_race.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL | }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `race` at $DIR/stack_pop_race.rs:LL:CC\n note: inside `main` at $DIR/stack_pop_race.rs:LL:CC\n   --> $DIR/stack_pop_race.rs:LL:CC"}, {"sha": "ee7072ccf5d17dc47d865f024ea731b7a9441429", "filename": "tests/fail/data_race/write_write_race.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fwrite_write_race.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             *c.0 = 64;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/write_write_race.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ceb473c2a4a41c7aa99e4c0c8b33ebe98df1be90", "filename": "tests/fail/data_race/write_write_race_stack.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             stack_var = 1usize;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/write_write_race_stack.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "03272105c4146fa84096bc832627697e418dcca5", "filename": "tests/fail/dyn-call-trait-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdyn-call-trait-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdyn-call-trait-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdyn-call-trait-mismatch.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     r2.method2();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/dyn-call-trait-mismatch.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "21870ef3733e82cbda3d74f8bb54620b5792d71d", "filename": "tests/fail/dyn-upcast-trait-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdyn-upcast-trait-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fdyn-upcast-trait-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdyn-upcast-trait-mismatch.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _err = baz_fake as &dyn Foo;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/dyn-upcast-trait-mismatch.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a2d343bf8651c92dafd1000135ca9d40f8774354", "filename": "tests/fail/environ-gets-deallocated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fenviron-gets-deallocated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fenviron-gets-deallocated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fenviron-gets-deallocated.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _y = unsafe { *pointer };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/environ-gets-deallocated.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "fa0d55e5f6781f51fbe071a6907ba18e63eaf32f", "filename": "tests/fail/extern_static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fextern_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fextern_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fextern_static.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -5,7 +5,7 @@ LL |     let _val = unsafe { std::ptr::addr_of!(FOO) };\n    |                                            ^^^ `extern` static `FOO` from crate `extern_static` is not supported by Miri\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/extern_static.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e4ee8f1acba29fd40e5e62a1ec51d9fc7b71644d", "filename": "tests/fail/extern_static_in_const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fextern_static_in_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fextern_static_in_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fextern_static_in_const.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -5,7 +5,7 @@ LL |     let _val = X;\n    |                ^ `extern` static `E` from crate `extern_static_in_const` is not supported by Miri\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/extern_static_in_const.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a56eba09df98fcdcbf88d415873c6015c23ba8a9", "filename": "tests/fail/extern_static_wrong_size.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fextern_static_wrong_size.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fextern_static_wrong_size.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fextern_static_wrong_size.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -5,7 +5,7 @@ LL |     let _val = unsafe { environ };\n    |                         ^^^^^^^ `extern` static `environ` from crate `extern_static_wrong_size` has been declared with a size of 1 bytes and alignment of 1 bytes, but Miri emulates it via an extern static shim with a size of N bytes and alignment of N bytes\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/extern_static_wrong_size.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2a0759f8a3ba79720746173017a878c65bf7701c", "filename": "tests/fail/fast_math_both.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffast_math_both.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffast_math_both.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffast_math_both.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL | ...: f32 = core::intrinsics::fsub_fast(f32::NAN, f32::NAN);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/fast_math_both.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "766662ca14ba93452f658fc76c34a0351b347cd5", "filename": "tests/fail/fast_math_first.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffast_math_first.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffast_math_first.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffast_math_first.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL | ...   let _x: f32 = core::intrinsics::frem_fast(f32::NAN, 3.2);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/fast_math_first.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ce93f9398f2cdbaf0594b1c071d81d720b5310dd", "filename": "tests/fail/fast_math_second.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffast_math_second.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffast_math_second.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffast_math_second.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL | ...f32 = core::intrinsics::fmul_fast(3.4f32, f32::INFINITY);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/fast_math_second.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "406ccb070bab5d6c57cbd99c7b92a61e4adddc60", "filename": "tests/fail/function_calls/check_arg_abi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_abi.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _ = malloc(0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/check_arg_abi.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "d90a7e31d6ee9df09ce08fbbb95a31234087a41b", "filename": "tests/fail/function_calls/check_arg_count_abort.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_abort.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         abort(1);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/check_arg_count_abort.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9e2751a216bcb99bce6679d086c66414ebe88934", "filename": "tests/fail/function_calls/check_arg_count_too_few_args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_few_args.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _ = malloc();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/check_arg_count_too_few_args.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e9a38b5ae421853ba47bff5b39414e07e0e1015d", "filename": "tests/fail/function_calls/check_arg_count_too_many_args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fcheck_arg_count_too_many_args.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _ = malloc(1, 2);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/check_arg_count_too_many_args.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "50afc1097974902ad8cd4e13ddea8fa056444596", "filename": "tests/fail/function_calls/check_callback_abi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fcheck_callback_abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fcheck_callback_abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fcheck_callback_abi.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -11,7 +11,7 @@ LL | |         );\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/check_callback_abi.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ae5c6cb72b3c9b741bdbd4b7a9b2b4c0e31f83ef", "filename": "tests/fail/function_calls/exported_symbol_abi_mismatch.cache.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.cache.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.cache.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.cache.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             foo();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/exported_symbol_abi_mismatch.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "17d56793ac5c64d8e810f8639ba01eeaef19ef5c", "filename": "tests/fail/function_calls/exported_symbol_abi_mismatch.fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.fn_ptr.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         std::mem::transmute::<unsafe fn(), unsafe extern \"C\" fn()>(foo)();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/exported_symbol_abi_mismatch.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ae5c6cb72b3c9b741bdbd4b7a9b2b4c0e31f83ef", "filename": "tests/fail/function_calls/exported_symbol_abi_mismatch.no_cache.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.no_cache.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.no_cache.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.no_cache.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             foo();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/exported_symbol_abi_mismatch.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "7f87ec6f3bb693a0b397416f0fc540721076708a", "filename": "tests/fail/function_calls/exported_symbol_bad_unwind1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -8,7 +8,7 @@ LL |     unsafe { unwind() }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/exported_symbol_bad_unwind1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b23c05a530357e101b5cd557c9a2f75f62d1621e", "filename": "tests/fail/function_calls/exported_symbol_bad_unwind2.extern_block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.extern_block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.extern_block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.extern_block.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -8,7 +8,7 @@ LL |     unsafe { nounwind() }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/exported_symbol_bad_unwind2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8eb9fa4ff5c27d02828f11e6502355e012eebfac", "filename": "tests/fail/function_calls/exported_symbol_clashing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_clashing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_clashing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_clashing.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -14,7 +14,7 @@ help: then it's defined here again, in crate `exported_symbol_clashing`\n    |\n LL | fn bar() {}\n    | ^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/exported_symbol_clashing.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "58a996e64530e73fa8b38df66f175fce008e4367", "filename": "tests/fail/function_calls/exported_symbol_shim_clashing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_shim_clashing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_shim_clashing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_shim_clashing.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -12,7 +12,7 @@ LL | |\n LL | |     unreachable!()\n LL | | }\n    | |_^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/exported_symbol_shim_clashing.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "1aa13ce4389538f5f3cd602515b8e455871a2f36", "filename": "tests/fail/function_calls/exported_symbol_wrong_arguments.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_arguments.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { foo(1) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/exported_symbol_wrong_arguments.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "abfd7a9a6c4d9858e5fa3bad14dd74cb3de5183f", "filename": "tests/fail/function_calls/exported_symbol_wrong_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_wrong_type.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { FOO() }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/exported_symbol_wrong_type.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ad43c2c9d3fe7a045943204074e4e9620af696c0", "filename": "tests/fail/function_pointers/cast_box_int_to_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     (*g)(42)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/cast_box_int_to_fn_ptr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "bb2a263795980a9473e5e336290ce15967ed4ad1", "filename": "tests/fail/function_pointers/cast_fn_ptr1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     g(42)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/cast_fn_ptr1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "086712e0d13bd0abf235196731924e9a4d1ba3c5", "filename": "tests/fail/function_pointers/cast_fn_ptr2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     g(42)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/cast_fn_ptr2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "55fd7d6072089eda01e6ecad8bc532df0af4d9c8", "filename": "tests/fail/function_pointers/cast_fn_ptr3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr3.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     g()\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/cast_fn_ptr3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "610425658fe1f2c8cc5f4ec6beced4982c35254a", "filename": "tests/fail/function_pointers/cast_fn_ptr4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr4.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     g(&42 as *const i32)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/cast_fn_ptr4.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c4e08b58430a27a689bc5537cc9377a6e3bf5126", "filename": "tests/fail/function_pointers/cast_fn_ptr5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_fn_ptr5.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     g()\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/cast_fn_ptr5.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "81fc9716a4156378a0f0c48c2c20db00f2601c2b", "filename": "tests/fail/function_pointers/cast_int_to_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     g(42)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/cast_int_to_fn_ptr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "7ce0b08695ebb877882df05783a8b9e4dd463481", "filename": "tests/fail/function_pointers/deref_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fderef_fn_ptr.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         *std::mem::transmute::<fn(), *const u8>(f)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/deref_fn_ptr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "10c53ca2beaee4ffcfd1f79f0fb7bc7ba4ab399a", "filename": "tests/fail/function_pointers/execute_memory.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fexecute_memory.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Fexecute_memory.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fexecute_memory.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         f()\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/execute_memory.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f8c519c1b54b0c703575dcaca823b50fe18522bd", "filename": "tests/fail/function_pointers/fn_ptr_offset.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     x();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/fn_ptr_offset.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4f73671a7894796a7fc577e0f6171cf0f21173bb", "filename": "tests/fail/generator-pinned-moved.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fgenerator-pinned-moved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fgenerator-pinned-moved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fgenerator-pinned-moved.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         *num += 1;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/generator-pinned-moved.rs:LL:CC\n note: inside `<GeneratorIteratorAdapter<[static generator@$DIR/generator-pinned-moved.rs:LL:CC]> as std::iter::Iterator>::next` at $DIR/generator-pinned-moved.rs:LL:CC\n   --> $DIR/generator-pinned-moved.rs:LL:CC"}, {"sha": "17e4cc6698d487e533502e3b6d5ecd113456a3bb", "filename": "tests/fail/intrinsics/assume.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fassume.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fassume.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fassume.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         std::intrinsics::assume(x > 42);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/assume.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6e3215d9f1c9cd8b5f00c1dae4df61712d83bb05", "filename": "tests/fail/intrinsics/copy_null.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fcopy_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fcopy_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_null.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         copy_nonoverlapping(std::ptr::null(), ptr, 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/copy_null.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "23a4adbd0ed6f0034e78aaf2fef4b8ae6b483a77", "filename": "tests/fail/intrinsics/copy_overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         (&mut y as *mut i32).copy_from(&x, 1usize << (mem::size_of::<usize>\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/copy_overflow.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "cdb3da74ca954ebc7d120bf92f857e6caa102f60", "filename": "tests/fail/intrinsics/copy_overlapping.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fcopy_overlapping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fcopy_overlapping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_overlapping.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         copy_nonoverlapping(a, b, 2);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/copy_overlapping.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a275979e6be13d75e8dd08c740556b969d92a620", "filename": "tests/fail/intrinsics/copy_unaligned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fcopy_unaligned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fcopy_unaligned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_unaligned.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         copy_nonoverlapping(&data[5], ptr, 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/copy_unaligned.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5ae14472a8a63672da68dad00066e8a6e33bcb55", "filename": "tests/fail/intrinsics/ctlz_nonzero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fctlz_nonzero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fctlz_nonzero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fctlz_nonzero.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         ctlz_nonzero(0u8);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/ctlz_nonzero.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ae013fb3d97940d8a7ce9791ae706ce61d4480f6", "filename": "tests/fail/intrinsics/cttz_nonzero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fcttz_nonzero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fcttz_nonzero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcttz_nonzero.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         cttz_nonzero(0u8);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/cttz_nonzero.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8c2910de3eef43b48b20aa180c67cf153f33f2fe", "filename": "tests/fail/intrinsics/div-by-zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fdiv-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fdiv-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fdiv-by-zero.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _n = unchecked_div(1i64, 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/div-by-zero.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2c7bbc00e1b1bce5cd850ccf58fee8cb2e9a39a2", "filename": "tests/fail/intrinsics/exact_div1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fexact_div1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fexact_div1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { std::intrinsics::exact_div(2, 0) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/exact_div1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6a264b8b4476f2d6c86a729c9748f034197e9d99", "filename": "tests/fail/intrinsics/exact_div2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fexact_div2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fexact_div2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { std::intrinsics::exact_div(2u16, 3) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/exact_div2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "1a73822c300f3babbcb8316b909c72c33c088f4c", "filename": "tests/fail/intrinsics/exact_div3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fexact_div3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fexact_div3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div3.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { std::intrinsics::exact_div(-19i8, 2) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/exact_div3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "27201d9c7cf65a79b613138fc2696980f1cd9f3c", "filename": "tests/fail/intrinsics/exact_div4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fexact_div4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fexact_div4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fexact_div4.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { std::intrinsics::exact_div(i64::MIN, -1) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/exact_div4.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c82d6b30224fca09abe53588c89366b0a702054f", "filename": "tests/fail/intrinsics/float_to_int_32_inf1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_inf1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_inf1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_inf1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f32, i32>(f32::INFINITY);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_32_inf1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4ca41b676e9c366ac42d8a50d57c958cb6b75844", "filename": "tests/fail/intrinsics/float_to_int_32_infneg1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_infneg1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_infneg1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_infneg1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f32, i32>(f32::NEG_INFINITY);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_32_infneg1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "88b8948b0c29e967be0f94e30a09be01d2fba821", "filename": "tests/fail/intrinsics/float_to_int_32_nan.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nan.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f32, u32>(f32::NAN);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_32_nan.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ca798dd391aa9edce3df6348a6c88451af473474", "filename": "tests/fail/intrinsics/float_to_int_32_nanneg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nanneg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nanneg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_nanneg.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f32, u32>(-f32::NAN);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_32_nanneg.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4ff6eb809854040112afabf5373c104338221c45", "filename": "tests/fail/intrinsics/float_to_int_32_neg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_neg.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f32, u32>(-1.000000001f32);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_32_neg.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "fd17709d164b1c84e0023c819ef818cd6c7c6859", "filename": "tests/fail/intrinsics/float_to_int_32_too_big1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f32, i32>(2147483648.0f32);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_32_too_big1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "fdc1f65dc148562f6ec0b44319323914c65ebcaf", "filename": "tests/fail/intrinsics/float_to_int_32_too_big2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_big2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f32, u32>((u32::MAX - 127) as f32);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_32_too_big2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9e743a321444998c8a3658d96a183358600953ed", "filename": "tests/fail/intrinsics/float_to_int_32_too_small1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_small1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_small1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_32_too_small1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f32, i32>(-2147483904.0f32);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_32_too_small1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ee01143dc8dfc518e0d836f314b9176abcecab58", "filename": "tests/fail/intrinsics/float_to_int_64_inf1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_inf1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_inf1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_inf1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, u128>(f64::INFINITY);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_64_inf1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f37b8ae550643a82b4f2a2f86e559475f66071e3", "filename": "tests/fail/intrinsics/float_to_int_64_infneg1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, u128>(f64::NEG_INFINITY);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_64_infneg1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "05dcd5ebcf69aca82b9e3a2cbf584cc4fe0ba75b", "filename": "tests/fail/intrinsics/float_to_int_64_infneg2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_infneg2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, i128>(f64::NEG_INFINITY);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_64_infneg2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0a914abb2ce78f61edbe1c991f0dee43d6c198e8", "filename": "tests/fail/intrinsics/float_to_int_64_nan.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_nan.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, u32>(f64::NAN);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_64_nan.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "7e24f45f653d1e0e771931cda266d3d8f36099f7", "filename": "tests/fail/intrinsics/float_to_int_64_neg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_neg.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, u128>(-1.0000000000001f64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_64_neg.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "42da33321f371be55ce6bb78b77302c791f547cd", "filename": "tests/fail/intrinsics/float_to_int_64_too_big1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, i32>(2147483648.0f64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_64_too_big1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "af4c4ceb3f73f8c6ebcb2e686090777476919177", "filename": "tests/fail/intrinsics/float_to_int_64_too_big2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, i64>(9223372036854775808.0f64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_64_too_big2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6e384a6fbc7cba6c45c9839d905c15bb0159732b", "filename": "tests/fail/intrinsics/float_to_int_64_too_big3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big3.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, u64>(18446744073709551616.0f64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_64_too_big3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "77f05ff91e3b59009e6d3143f8036ddf326b40a5", "filename": "tests/fail/intrinsics/float_to_int_64_too_big4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big4.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, u128>(u128::MAX as f64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_64_too_big4.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "cb5eba490b447dd66e1aa5596100345c3e2474d2", "filename": "tests/fail/intrinsics/float_to_int_64_too_big5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big5.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, i128>(2402823669209384634633746074317\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_64_too_big5.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "d899d2f808a5d20daba082fc657f81e33401da4c", "filename": "tests/fail/intrinsics/float_to_int_64_too_big6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big6.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, u128>(f64::MAX);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_64_too_big6.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "443b2759c260667ee7daae03c671c0687e3d4e52", "filename": "tests/fail/intrinsics/float_to_int_64_too_big7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_big7.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, i128>(f64::MIN);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_64_too_big7.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f8d88c44aa80d40fa9c287e7437994b4697dcd90", "filename": "tests/fail/intrinsics/float_to_int_64_too_small1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, i32>(-2147483649.0f64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_64_too_small1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "d94e57b1e67c22f337590f3bd119d9ba42867d9f", "filename": "tests/fail/intrinsics/float_to_int_64_too_small2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, i64>(-9223372036854777856.0f64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_64_too_small2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "59b74f5f51f377a964f057db3cf4ab08ba2f5683", "filename": "tests/fail/intrinsics/float_to_int_64_too_small3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Ffloat_to_int_64_too_small3.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         float_to_int_unchecked::<f64, i128>(-240282366920938463463374607431\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/float_to_int_64_too_small3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4422310870a6416f0eff7d5b6a48d7147adc1e77", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let x = unsafe { x.offset(5) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/out_of_bounds_ptr_1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6a11ebae108f0be392873e0d9394d327bafd89e9", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let x = unsafe { x.offset(isize::MIN) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/out_of_bounds_ptr_2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "1364e0f9009d8e30190f642cec2285c9b0588b6a", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let x = unsafe { x.offset(-1) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/out_of_bounds_ptr_3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9c5d0d13108cef7b068346c85c38438c4f09ab6d", "filename": "tests/fail/intrinsics/overflowing-unchecked-rsh.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _n = 1i64.unchecked_shr(64);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/overflowing-unchecked-rsh.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9c1c387d5499128090df1f01c8fe23a2cb31a669", "filename": "tests/fail/intrinsics/ptr_offset_0_plus_0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _x = unsafe { x.offset(0) }; // UB despite offset 0, NULL is never\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/ptr_offset_0_plus_0.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a31b929d7a7aeeafa9978bc3e28458a52ffaa96c", "filename": "tests/fail/intrinsics/ptr_offset_from_oob.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { end_ptr.offset_from(end_ptr) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/ptr_offset_from_oob.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "803aaaa55c21ecbda30405070f9a5c1c94926c40", "filename": "tests/fail/intrinsics/ptr_offset_from_unsigned_neg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_unsigned_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_unsigned_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_unsigned_neg.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _val = unsafe { ptr1.sub_ptr(ptr2) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/ptr_offset_from_unsigned_neg.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f76881011d0791584df8e3b68091c26465718e3e", "filename": "tests/fail/intrinsics/ptr_offset_int_plus_int.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _val = (1 as *mut u8).offset(1);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/ptr_offset_int_plus_int.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6e0744b7d5c395678eff21288f3c1dff25ad21eb", "filename": "tests/fail/intrinsics/ptr_offset_int_plus_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _val = (1 as *mut u8).offset(ptr as isize);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/ptr_offset_int_plus_ptr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6fb94cf5f8122e80c235a376ed672425852acb5b", "filename": "tests/fail/intrinsics/ptr_offset_overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _val = unsafe { x.offset(isize::MIN) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/ptr_offset_overflow.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b18147ce379d73e204b286595dc36b227a8bcbf5", "filename": "tests/fail/intrinsics/ptr_offset_ptr_plus_0.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _x = unsafe { x.offset(0) }; // UB despite offset 0, the pointer is\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/ptr_offset_ptr_plus_0.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c6ed1750c04e0cf4b811b3787a1b25bafb8e703b", "filename": "tests/fail/intrinsics/raw_eq_on_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fraw_eq_on_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fraw_eq_on_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fraw_eq_on_ptr.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -5,7 +5,7 @@ LL |     unsafe { raw_eq(&x, &x) };\n    |              ^^^^^^^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/raw_eq_on_ptr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "1fc39188e5a9449f0ff44bce1c359cb17d902424", "filename": "tests/fail/intrinsics/rem-by-zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Frem-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Frem-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Frem-by-zero.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _n = unchecked_rem(3u32, 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/rem-by-zero.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ddab24d0c1639e6d0faabdfe3720177d9f4b4a40", "filename": "tests/fail/intrinsics/simd-div-by-zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-div-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-div-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-div-by-zero.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         simd_div(x, y);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/simd-div-by-zero.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "27d4dd9e3e73f11d2ead9576eb0f7f5d4900cb05", "filename": "tests/fail/intrinsics/simd-div-overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-div-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-div-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-div-overflow.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         simd_div(x, y);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/simd-div-overflow.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "36bb9643b48d4aa8517f24f56894b77b8e2cfe8b", "filename": "tests/fail/intrinsics/simd-float-to-int.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         unsafe { intrinsics::simd_cast(self) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `std::simd::Simd::<f32, 2>::to_int_unchecked::<i32>` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n note: inside `main` at $DIR/simd-float-to-int.rs:LL:CC\n   --> $DIR/simd-float-to-int.rs:LL:CC"}, {"sha": "29a4ef65705ab13d58d5a44b67ea3df531b6c165", "filename": "tests/fail/intrinsics/simd-gather.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-gather.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-gather.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-gather.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         unsafe { intrinsics::simd_gather(or, ptrs, enable.to_int()) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `std::simd::Simd::<i8, 4>::gather_select_unchecked` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n note: inside `main` at $DIR/simd-gather.rs:LL:CC\n   --> $DIR/simd-gather.rs:LL:CC"}, {"sha": "1e5ac5277e6dcfae8d6f0fe7d344d208ef05fafe", "filename": "tests/fail/intrinsics/simd-reduce-invalid-bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-reduce-invalid-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-reduce-invalid-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-reduce-invalid-bool.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         simd_reduce_any(x);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/simd-reduce-invalid-bool.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "96248e7e599ccb17c1e423c8e96d49f2ee07a9c3", "filename": "tests/fail/intrinsics/simd-rem-by-zero.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-rem-by-zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-rem-by-zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-rem-by-zero.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         simd_rem(x, y);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/simd-rem-by-zero.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "fde85a63503b6bf085915d5b8f46eb55b711740b", "filename": "tests/fail/intrinsics/simd-scatter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             intrinsics::simd_scatter(self, ptrs, enable.to_int())\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `std::simd::Simd::<i8, 4>::scatter_select_unchecked` at RUSTLIB/core/src/../../portable-simd/crates/core_simd/src/vector.rs:LL:CC\n note: inside `main` at $DIR/simd-scatter.rs:LL:CC\n   --> $DIR/simd-scatter.rs:LL:CC"}, {"sha": "e72cce998d0ed25b7c26c78383ef832bfd187710", "filename": "tests/fail/intrinsics/simd-select-bitmask-invalid.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-select-bitmask-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-select-bitmask-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-select-bitmask-invalid.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         simd_select_bitmask(0b11111111u8, x, x);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/simd-select-bitmask-invalid.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "277ceb54ec71e5dc5d6050ce0f5eb1d840c5c9a9", "filename": "tests/fail/intrinsics/simd-select-invalid-bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-select-invalid-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-select-invalid-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-select-invalid-bool.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         simd_select(x, x, x);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/simd-select-invalid-bool.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c8445bb3cdc7566032bacf3e49eeb0ca7c8e65ef", "filename": "tests/fail/intrinsics/simd-shl-too-far.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-shl-too-far.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-shl-too-far.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-shl-too-far.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         simd_shl(x, y);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/simd-shl-too-far.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8eec30c5a52f203ef18fd56e500f92bed95c2b69", "filename": "tests/fail/intrinsics/simd-shr-too-far.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-shr-too-far.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fsimd-shr-too-far.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-shr-too-far.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         simd_shr(x, y);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/simd-shr-too-far.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f5e96198ee4c9fc439fbf2749a953f6185a4056a", "filename": "tests/fail/intrinsics/unchecked_add1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Funchecked_add1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Funchecked_add1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_add1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _val = unsafe { 40000u16.unchecked_add(30000) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/unchecked_add1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5a5c7070ae0b4dc298358040ebb623b5ee604973", "filename": "tests/fail/intrinsics/unchecked_add2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Funchecked_add2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Funchecked_add2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_add2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _val = unsafe { (-30000i16).unchecked_add(-8000) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/unchecked_add2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9267e0c49473145334053dc1d6bf2643005deeec", "filename": "tests/fail/intrinsics/unchecked_div1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Funchecked_div1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Funchecked_div1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_div1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         std::intrinsics::unchecked_div(i16::MIN, -1);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/unchecked_div1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9a5a585e1cce48b0a8229fd49da49dc6b8fb6840", "filename": "tests/fail/intrinsics/unchecked_mul1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _val = unsafe { 300u16.unchecked_mul(250u16) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/unchecked_mul1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "46b9f6182172828b2cf7991668f987ed441d586d", "filename": "tests/fail/intrinsics/unchecked_mul2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _val = unsafe { 1_000_000_000i32.unchecked_mul(-4) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/unchecked_mul2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "01e569767bac09634757451a9548298974379583", "filename": "tests/fail/intrinsics/unchecked_sub1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _val = unsafe { 14u32.unchecked_sub(22) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/unchecked_sub1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "38c1647b4f49f44536091907a391b31e039cb359", "filename": "tests/fail/intrinsics/unchecked_sub2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _val = unsafe { 30000i16.unchecked_sub(-7000) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/unchecked_sub2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b2969ca3b59296f4289a7047f10e8c12daf0d485", "filename": "tests/fail/intrinsics/write_bytes_null.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_null.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { write_bytes::<u8>(std::ptr::null_mut(), 0, 0) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/write_bytes_null.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f88afde879acf1863784ab3634da54fedd5c8334", "filename": "tests/fail/intrinsics/write_bytes_overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         (&mut y as *mut i32).write_bytes(0u8, 1usize << (mem::size_of::<usi\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/write_bytes_overflow.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a522f6cd4fffedfcdc99c7c148d99dcf32960e8f", "filename": "tests/fail/invalid_bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Finvalid_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Finvalid_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_bool.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _x = b == std::hint::black_box(true);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/invalid_bool.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "d49d753d9e185b0d81bd9a598c87a2ddc39645b4", "filename": "tests/fail/invalid_char.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Finvalid_char.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Finvalid_char.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_char.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _x = c == 'x';\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/invalid_char.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "01d931de919a47ab4a90db4a6c6ed964defde0bf", "filename": "tests/fail/invalid_enum_tag.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Finvalid_enum_tag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Finvalid_enum_tag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_enum_tag.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _val = mem::discriminant(&f);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/invalid_enum_tag.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "eccdbff604574a15e2b014c127f76b0702a013c8", "filename": "tests/fail/invalid_int.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Finvalid_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Finvalid_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_int.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let i = unsafe { std::mem::MaybeUninit::<i32>::uninit().assume_init() }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/invalid_int.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e6644a72849ff6c63172be08e03102e8bd2861da", "filename": "tests/fail/issue-miri-1112.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fissue-miri-1112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fissue-miri-1112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fissue-miri-1112.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let obj = std::mem::transmute::<FatPointer, *mut FunnyPointer>(obj)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `FunnyPointer::from_data_ptr` at $DIR/issue-miri-1112.rs:LL:CC\n note: inside `main` at $DIR/issue-miri-1112.rs:LL:CC\n   --> $DIR/issue-miri-1112.rs:LL:CC"}, {"sha": "b8e13b61ceb60c5191f291b61de5ff41b229899c", "filename": "tests/fail/issue-miri-2432.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fissue-miri-2432.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fissue-miri-2432.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fissue-miri-2432.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     <dyn X as X>::foo(&());\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/issue-miri-2432.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6425a5d7a0ad40c42d1f6e350818c4c8c05cd1bd", "filename": "tests/fail/modifying_constants.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fmodifying_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fmodifying_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fmodifying_constants.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     *y = 42;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/modifying_constants.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a2a63b8baf5945480051dfa486ac029dd09249cb", "filename": "tests/fail/never_say_never.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fnever_say_never.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fnever_say_never.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fnever_say_never.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         *(y as *const _ as *const !)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/never_say_never.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e8df4739f9bcb4faca7e5767a3038e6743bb5a95", "filename": "tests/fail/never_transmute_humans.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fnever_transmute_humans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fnever_transmute_humans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fnever_transmute_humans.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         std::mem::transmute::<Human, !>(Human)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/never_transmute_humans.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4c3a3d075f02843f802af644759acde725e624ab", "filename": "tests/fail/never_transmute_void.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fnever_transmute_void.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fnever_transmute_void.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fnever_transmute_void.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         match v.0 {}\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `m::f` at $DIR/never_transmute_void.rs:LL:CC\n note: inside `main` at $DIR/never_transmute_void.rs:LL:CC\n   --> $DIR/never_transmute_void.rs:LL:CC"}, {"sha": "3bd2be03ea1ff2aff213a232e6f6e1277a164db2", "filename": "tests/fail/panic/bad_miri_start_panic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fpanic%2Fbad_miri_start_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fpanic%2Fbad_miri_start_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fbad_miri_start_panic.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { miri_start_panic(&mut 0) }\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/bad_miri_start_panic.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "23c33f5e7f3ff0409dd91ed84f820ff7446161be", "filename": "tests/fail/panic/bad_unwind.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fpanic%2Fbad_unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fpanic%2Fbad_unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fbad_unwind.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -8,7 +8,7 @@ LL |     std::panic::catch_unwind(|| unwind()).unwrap_err();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/bad_unwind.rs:LL:CC\n    = note: inside `std::panicking::r#try::do_call::<[closure@$DIR/bad_unwind.rs:LL:CC], ()>` at RUSTLIB/std/src/panicking.rs:LL:CC\n    = note: inside `std::panicking::r#try::<(), [closure@$DIR/bad_unwind.rs:LL:CC]>` at RUSTLIB/std/src/panicking.rs:LL:CC"}, {"sha": "363e69ba41db94e03843fd2e55a23b4d4275b8b1", "filename": "tests/fail/panic/unwind_panic_abort.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fpanic%2Funwind_panic_abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fpanic%2Funwind_panic_abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Funwind_panic_abort.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         miri_start_panic(&mut 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/unwind_panic_abort.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "7d10b75e8805f1c31ad865bf5a0c54be52f0869b", "filename": "tests/fail/pointer_partial_overwrite.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fpointer_partial_overwrite.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fpointer_partial_overwrite.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpointer_partial_overwrite.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let x = *p;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/pointer_partial_overwrite.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f7c5f6046e198f14b733c5b1883a7209a73b78ad", "filename": "tests/fail/provenance/provenance_transmute.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _val = *left_ptr;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `deref` at $DIR/provenance_transmute.rs:LL:CC\n note: inside `main` at $DIR/provenance_transmute.rs:LL:CC\n   --> $DIR/provenance_transmute.rs:LL:CC"}, {"sha": "4ad885ddabdc05d6d76cc5d1dadaa0a3d6a32217", "filename": "tests/fail/provenance/ptr_int_unexposed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     assert_eq!(unsafe { *ptr }, 3);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/ptr_int_unexposed.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ef9dcad97cbdc10608eef46a47fc5926d5c2993a", "filename": "tests/fail/provenance/ptr_invalid.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fprovenance%2Fptr_invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fprovenance%2Fptr_invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_invalid.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _val = unsafe { *xptr_invalid };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/ptr_invalid.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3607635c8fbe5be2f98f52e7f1258a31a5583b39", "filename": "tests/fail/provenance/ptr_invalid_offset.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _ = unsafe { roundtrip.offset(1) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/ptr_invalid_offset.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "998ccc8bb49c683f9c2455059b902b4438b4f54e", "filename": "tests/fail/provenance/strict_provenance_cast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -5,7 +5,7 @@ LL |     let _ptr = std::ptr::from_exposed_addr::<i32>(addr);\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ integer-to-pointer casts and `ptr::from_exposed_addr` are not supported with `-Zmiri-strict-provenance`\n    |\n    = help: use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/strict_provenance_cast.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "70bdd157bdc34719b3859df543f55e8b0f7eebc6", "filename": "tests/fail/rc_as_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Frc_as_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Frc_as_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Frc_as_ptr.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     assert_eq!(42, **unsafe { &*Weak::as_ptr(&weak) });\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at RUSTLIB/core/src/macros/mod.rs:LL:CC\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "28cd7cef2433414e727e528b31ada2e4e334f0e0", "filename": "tests/fail/reading_half_a_pointer.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Freading_half_a_pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Freading_half_a_pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Freading_half_a_pointer.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -5,7 +5,7 @@ LL |         let _x = *d_alias;\n    |                  ^^^^^^^^ unable to turn pointer into raw bytes\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/reading_half_a_pointer.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "200f5f56213d609816e720fccdd9c2de14c00f46", "filename": "tests/fail/shims/backtrace/bad-backtrace-decl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-decl.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL | ...   miri_resolve_frame(*frame, 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/bad-backtrace-decl.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5d51790f8a5c105e0105a8d76122d0973381c22c", "filename": "tests/fail/shims/backtrace/bad-backtrace-flags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-flags.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -5,7 +5,7 @@ LL |         miri_get_backtrace(2, std::ptr::null_mut());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_get_backtrace` flags 2\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/bad-backtrace-flags.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f23f834000aa1a69663c83a0c0cfa4ee26314617", "filename": "tests/fail/shims/backtrace/bad-backtrace-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-ptr.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         miri_resolve_frame(std::ptr::null_mut(), 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/bad-backtrace-ptr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "fe123c2352f0af3b4814dc9ed8143ac4c15ae560", "filename": "tests/fail/shims/backtrace/bad-backtrace-resolve-flags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-flags.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -5,7 +5,7 @@ LL |         miri_resolve_frame(buf[0], 2);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_resolve_frame` flags 2\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/bad-backtrace-resolve-flags.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a3003c9093f728573dfd49d470c95df44cd0d209", "filename": "tests/fail/shims/backtrace/bad-backtrace-resolve-names-flags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-resolve-names-flags.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -5,7 +5,7 @@ LL | ...   miri_resolve_frame_names(buf[0], 2, std::ptr::null_mut(), std::ptr::n\n    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_resolve_frame_names` flags 2\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/bad-backtrace-resolve-names-flags.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "b4a02c0e363ed6ba8f4ede3c08394f1ed8c7ecdd", "filename": "tests/fail/shims/backtrace/bad-backtrace-size-flags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-size-flags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-size-flags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fbacktrace%2Fbad-backtrace-size-flags.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -5,7 +5,7 @@ LL |         miri_backtrace_size(2);\n    |         ^^^^^^^^^^^^^^^^^^^^^^ unknown `miri_backtrace_size` flags 2\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/bad-backtrace-size-flags.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "02f1eee97fc044737ea5cc9ebba80823f37ec15e", "filename": "tests/fail/shims/fs/close_stdout.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Ffs%2Fclose_stdout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Ffs%2Fclose_stdout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fclose_stdout.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -5,7 +5,7 @@ LL |         libc::close(1);\n    |         ^^^^^^^^^^^^^^ cannot close stdout\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/close_stdout.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4e3fdc7a45801df4463c01bad5617bb349d94e66", "filename": "tests/fail/shims/fs/isolated_file.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Ffs%2Fisolated_file.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Ffs%2Fisolated_file.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fisolated_file.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let fd = cvt_r(|| unsafe { open64(path.as_ptr(), flags, opts.mode a\n    |\n    = help: pass the flag `-Zmiri-disable-isolation` to disable isolation;\n    = help: or pass `-Zmiri-isolation-error=warn` to configure Miri to return an error code from isolated operations (if supported for that operation) and continue with a warning\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at RUSTLIB/std/src/sys/PLATFORM/fs.rs:LL:CC\n    = note: inside `std::sys::PLATFORM::cvt_r::<i32, [closure@std::sys::PLATFORM::fs::File::open_c::{closure#0}]>` at RUSTLIB/std/src/sys/PLATFORM/mod.rs:LL:CC\n    = note: inside `std::sys::PLATFORM::fs::File::open_c` at RUSTLIB/std/src/sys/PLATFORM/fs.rs:LL:CC"}, {"sha": "ed826147e3bdbb13fb73dcc587c3789cc8f08e74", "filename": "tests/fail/shims/fs/isolated_stdin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Ffs%2Fisolated_stdin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Ffs%2Fisolated_stdin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fisolated_stdin.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         libc::read(0, bytes.as_mut_ptr() as *mut libc::c_void, 512);\n    |\n    = help: pass the flag `-Zmiri-disable-isolation` to disable isolation;\n    = help: or pass `-Zmiri-isolation-error=warn` to configure Miri to return an error code from isolated operations (if supported for that operation) and continue with a warning\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/isolated_stdin.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "414ac1cb1b70260184db2afb46636b990bc40e2c", "filename": "tests/fail/shims/fs/mkstemp_immutable_arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Ffs%2Fmkstemp_immutable_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Ffs%2Fmkstemp_immutable_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fmkstemp_immutable_arg.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _fd = unsafe { libc::mkstemp(s) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `test_mkstemp_immutable_arg` at $DIR/mkstemp_immutable_arg.rs:LL:CC\n note: inside `main` at $DIR/mkstemp_immutable_arg.rs:LL:CC\n   --> $DIR/mkstemp_immutable_arg.rs:LL:CC"}, {"sha": "bcece7ad4e55d4257e4f37e9448d140a50672b67", "filename": "tests/fail/shims/fs/read_from_stdout.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Ffs%2Fread_from_stdout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Ffs%2Fread_from_stdout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fread_from_stdout.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -5,7 +5,7 @@ LL |         libc::read(1, bytes.as_mut_ptr() as *mut libc::c_void, 512);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot read from stdout\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/read_from_stdout.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "38d033b494554e243201f06d8c8956e8f566bad0", "filename": "tests/fail/shims/fs/unix_open_missing_required_mode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Ffs%2Funix_open_missing_required_mode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Ffs%2Funix_open_missing_required_mode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Funix_open_missing_required_mode.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL | ...safe { libc::open(name_ptr, libc::O_CREAT) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `test_file_open_missing_needed_mode` at $DIR/unix_open_missing_required_mode.rs:LL:CC\n note: inside `main` at $DIR/unix_open_missing_required_mode.rs:LL:CC\n   --> $DIR/unix_open_missing_required_mode.rs:LL:CC"}, {"sha": "d4a38e1ca9615f4dad28e0b3f635cad1b2ff6d5f", "filename": "tests/fail/shims/fs/write_to_stdin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Ffs%2Fwrite_to_stdin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Ffs%2Fwrite_to_stdin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Ffs%2Fwrite_to_stdin.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -5,7 +5,7 @@ LL |         libc::write(0, bytes.as_ptr() as *const libc::c_void, 5);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot write to stdin\n    |\n    = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/write_to_stdin.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0e8b402ac714763152a6c43a50f728f13a06e949", "filename": "tests/fail/shims/shim_arg_size.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fshim_arg_size.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fshim_arg_size.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fshim_arg_size.64bit.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _p1 = malloc(42);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/shim_arg_size.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "ecfedf753703dc3576a405aa6cddd0a101345c22", "filename": "tests/fail/shims/sync/libc_pthread_cond_double_destroy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_cond_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_cond_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_cond_double_destroy.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_cond_destroy(cond.as_mut_ptr());\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/libc_pthread_cond_double_destroy.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f39d909adbd64c76fd1bcadb58bea7cb3f6fb072", "filename": "tests/fail/shims/sync/libc_pthread_condattr_double_destroy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_condattr_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_condattr_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_condattr_double_destroy.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_condattr_destroy(attr.as_mut_ptr());\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/libc_pthread_condattr_double_destroy.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4a138e6f8a25cc4f07cc3541c33f0efb596580c1", "filename": "tests/fail/shims/sync/libc_pthread_mutex_NULL_deadlock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_mutex_lock(&mut mutex as *mut _);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/libc_pthread_mutex_NULL_deadlock.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8aea3f5c6932ffb22940280f72a9a829d73a9e3b", "filename": "tests/fail/shims/sync/libc_pthread_mutex_default_deadlock.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_default_deadlock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_default_deadlock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_default_deadlock.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_mutex_lock(&mut mutex as *mut _);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/libc_pthread_mutex_default_deadlock.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a8ab948116e14ba3b4b3c222bf85a7642c1d63d9", "filename": "tests/fail/shims/sync/libc_pthread_mutex_destroy_locked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_destroy_locked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_destroy_locked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_destroy_locked.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_mutex_destroy(&mut mutex as *mut _);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/libc_pthread_mutex_destroy_locked.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9620fdbd18b2ff1d7f3722efda8b6e225c7a588f", "filename": "tests/fail/shims/sync/libc_pthread_mutex_double_destroy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_double_destroy.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_mutex_destroy(mutex.as_mut_ptr());\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/libc_pthread_mutex_double_destroy.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "754137b85b9af0581c42aa423e755c13d2f6ad4f", "filename": "tests/fail/shims/sync/libc_pthread_mutex_normal_unlock_unlocked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_mutex_unlock(&mut mutex as *mut _);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/libc_pthread_mutex_normal_unlock_unlocked.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "aa81b06fc80af6c4fcb145269a441c1e83a343a6", "filename": "tests/fail/shims/sync/libc_pthread_mutex_wrong_owner.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_wrong_owner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_wrong_owner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutex_wrong_owner.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL | ...t_eq!(libc::pthread_mutex_unlock(lock_copy.0.get() as *mut _), 0);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/libc_pthread_mutex_wrong_owner.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "82949047d2aab0a4e870b07e492aed77789b42ae", "filename": "tests/fail/shims/sync/libc_pthread_mutexattr_double_destroy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutexattr_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutexattr_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_mutexattr_double_destroy.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_mutexattr_destroy(attr.as_mut_ptr());\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/libc_pthread_mutexattr_double_destroy.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "be73e7f1e2ad44d53ccba3c234780e2a7197d04c", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_destroy_read_locked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_rwlock_destroy(rw.get());\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/libc_pthread_rwlock_destroy_read_locked.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "bc2713a5ffbfad68a36646b1076a4119d8009b6d", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_destroy_write_locked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_rwlock_destroy(rw.get());\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/libc_pthread_rwlock_destroy_write_locked.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5004f84358da80ee7ca50c2a121cbb27e7fb3be8", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_double_destroy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_double_destroy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_double_destroy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_double_destroy.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_rwlock_destroy(&mut lock);\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/libc_pthread_rwlock_double_destroy.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "7dfa27b43d073a6e05fbeffaed3c6587d5c5d6a2", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_read_wrong_owner.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL | ...   assert_eq!(libc::pthread_rwlock_unlock(lock_copy.0.get() as *mut _),\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/libc_pthread_rwlock_read_wrong_owner.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "1c25ac2c048fb7e50bf88c6626697718f23a7f4f", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_unlock_unlocked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         libc::pthread_rwlock_unlock(rw.get());\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/libc_pthread_rwlock_unlock_unlocked.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5bf402c775ae53860c8b6e63394a14c8076a897d", "filename": "tests/fail/shims/sync/libc_pthread_rwlock_write_wrong_owner.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshims%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL | ...   assert_eq!(libc::pthread_rwlock_unlock(lock_copy.0.get() as *mut _),\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside closure at $DIR/libc_pthread_rwlock_write_wrong_owner.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8a24b085a99f6f56e3f3280918db0b8295ec40d2", "filename": "tests/fail/should-pass/cpp20_rwc_syncs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |             std::hint::unreachable_unchecked();\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `test_cpp20_rwc_syncs` at $DIR/cpp20_rwc_syncs.rs:LL:CC\n note: inside `main` at $DIR/cpp20_rwc_syncs.rs:LL:CC\n   --> $DIR/cpp20_rwc_syncs.rs:LL:CC"}, {"sha": "461275c3fa346a872a8f9b9d86f9657011b340e4", "filename": "tests/fail/stacked_borrows/alias_through_mutation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Falias_through_mutation.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |     *target = 13;\n    |     ^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/alias_through_mutation.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5d4679b13ad1fe180052b879b7c842b71b408d26", "filename": "tests/fail/stacked_borrows/aliasing_mut1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | pub fn safe(_x: &mut i32, _y: &mut i32) {}\n    |             ^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `safe` at $DIR/aliasing_mut1.rs:LL:CC\n note: inside `main` at $DIR/aliasing_mut1.rs:LL:CC\n   --> $DIR/aliasing_mut1.rs:LL:CC"}, {"sha": "c8408c150e779109614494260d6ccc0e99924523", "filename": "tests/fail/stacked_borrows/aliasing_mut2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | pub fn safe(_x: &i32, _y: &mut i32) {}\n    |             ^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `safe` at $DIR/aliasing_mut2.rs:LL:CC\n note: inside `main` at $DIR/aliasing_mut2.rs:LL:CC\n   --> $DIR/aliasing_mut2.rs:LL:CC"}, {"sha": "c2ea90f242a22d707695c5a918e900672aa180d2", "filename": "tests/fail/stacked_borrows/aliasing_mut3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry reta\n    |\n LL |     safe_raw(xraw, xshr);\n    |     ^^^^^^^^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `safe` at $DIR/aliasing_mut3.rs:LL:CC\n note: inside `main` at $DIR/aliasing_mut3.rs:LL:CC\n   --> $DIR/aliasing_mut3.rs:LL:CC"}, {"sha": "c53fe70f6dd337ca8d4357eb3d9b160df6ad3128", "filename": "tests/fail/stacked_borrows/aliasing_mut4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Faliasing_mut4.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | pub fn safe(_x: &i32, _y: &mut Cell<i32>) {}\n    |             ^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `safe` at $DIR/aliasing_mut4.rs:LL:CC\n note: inside `main` at $DIR/aliasing_mut4.rs:LL:CC\n   --> $DIR/aliasing_mut4.rs:LL:CC"}, {"sha": "d82b8342f1231e9828a31bf1cd757859a1c3b04c", "filename": "tests/fail/stacked_borrows/box_exclusive_violation1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fbox_exclusive_violation1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |     *our = 5;\n    |     ^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `unknown_code_2` at $DIR/box_exclusive_violation1.rs:LL:CC\n note: inside `demo_box_advanced_unique` at $DIR/box_exclusive_violation1.rs:LL:CC\n   --> $DIR/box_exclusive_violation1.rs:LL:CC"}, {"sha": "6aa14361287e3824d15ee21e9683529cb968d34e", "filename": "tests/fail/stacked_borrows/buggy_as_mut_slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fbuggy_as_mut_slice.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0xc] by a Unique retag\n    |\n LL |         unsafe { from_raw_parts_mut(self_.as_ptr() as *mut T, self_.len()) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/buggy_as_mut_slice.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "cdeccc0855a959c428bc8d7916e20e0644a8ce98", "filename": "tests/fail/stacked_borrows/buggy_split_at_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fbuggy_split_at_mut.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x10] by a Unique retag\n    |\n LL |                 from_raw_parts_mut(ptr.offset(mid as isize), len - mid),\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/buggy_split_at_mut.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a5db4a00c69e79a22feceaa6f3935fe748b9bc83", "filename": "tests/fail/stacked_borrows/deallocate_against_protector1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `alloc::alloc::box_free::<i32, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC"}, {"sha": "99c6ee6eb07432ea9643f5f5458beb62c2dea3f1", "filename": "tests/fail/stacked_borrows/deallocate_against_protector2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_protector2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `<std::alloc::Global as std::alloc::Allocator>::deallocate` at RUSTLIB/alloc/src/alloc.rs:LL:CC\n    = note: inside `alloc::alloc::box_free::<NotUnpin, std::alloc::Global>` at RUSTLIB/alloc/src/alloc.rs:LL:CC"}, {"sha": "e05f44fac9d2fff578aba7d142a8700e00d20f8e", "filename": "tests/fail/stacked_borrows/disable_mut_does_not_merge_srw.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fdisable_mut_does_not_merge_srw.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fdisable_mut_does_not_merge_srw.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdisable_mut_does_not_merge_srw.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |         *base = 1;\n    |         ^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/disable_mut_does_not_merge_srw.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "cb5e7bffde480d2e148bc7ad6090368551f90cac", "filename": "tests/fail/stacked_borrows/exposed_only_ro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fexposed_only_ro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fexposed_only_ro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fexposed_only_ro.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -9,7 +9,7 @@ LL |     unsafe { *ptr = 0 };\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/exposed_only_ro.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "653ceca858859ad50d6e549d5cd20b02ff316030", "filename": "tests/fail/stacked_borrows/fnentry_invalidation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry reta\n    |\n LL |     x.do_bad();\n    |     ^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/fnentry_invalidation.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "95ff05d70c30ec5a5fa77a0e828c030eb926cd9f", "filename": "tests/fail/stacked_borrows/illegal_read1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n    |\n LL |     let _val = unsafe { *xraw };\n    |                         ^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/illegal_read1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5cfdf77dee402f3190df136ae4c679e92877afc7", "filename": "tests/fail/stacked_borrows/illegal_read2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a SharedReadOnly reta\n    |\n LL |     let shr = unsafe { &*xraw };\n    |                        ^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/illegal_read2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "dacf71fa3ee39a1da6d83727ad37ebae27337762", "filename": "tests/fail/stacked_borrows/illegal_read3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n    |\n LL |     let _val = unsafe { *xref1.r };\n    |                         ^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/illegal_read3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "5ce0cba617914d5d1d364c085e8d0498f2bea8d9", "filename": "tests/fail/stacked_borrows/illegal_read4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read4.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n    |\n LL |     let _val = unsafe { *xraw }; // use the raw again, this invalidates xref2 *even* with the special read except for uniq refs\n    |                         ^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/illegal_read4.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "63532f87944eb7ab50ce406bdb543a55acbefc86", "filename": "tests/fail/stacked_borrows/illegal_read5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read5.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [$HEX..$HEX] by a read access\n    |\n LL |     mem::forget(unsafe { ptr::read(xshr) }); // but after reading through the shared ref\n    |                          ^^^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/illegal_read5.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "93a96ab601ea3e5f39431714c26c85cacce1679b", "filename": "tests/fail/stacked_borrows/illegal_read6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read6.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique retag\n    |\n LL |         let x = &mut *x; // kill `raw`\n    |                 ^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/illegal_read6.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2e8ac207beafb486a8512a4fe9567d9bdcef1563", "filename": "tests/fail/stacked_borrows/illegal_read7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read7.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n    |\n LL |         let _val = ptr::read(raw);\n    |                    ^^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/illegal_read7.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c34fa2d8955ddd6daf81eb781a4946ca7b7b7c63", "filename": "tests/fail/stacked_borrows/illegal_read8.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read8.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |         *y2 += 1;\n    |         ^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/illegal_read8.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "43b4ec2ba652b3b73e7aebbb580f9353f063b712", "filename": "tests/fail/stacked_borrows/illegal_read_despite_exposed1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |         *exposed_ptr = 0;\n    |         ^^^^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/illegal_read_despite_exposed1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "832320fc202e126558318553453d5bb538c8fa5f", "filename": "tests/fail/stacked_borrows/illegal_read_despite_exposed2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n    |\n LL |         let _val = *exposed_ptr;\n    |                    ^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/illegal_read_despite_exposed2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3bf27f4815e9a1da5aa60005614323b266fbf6c5", "filename": "tests/fail/stacked_borrows/illegal_write1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0x4]\n    |\n LL |         let x: *mut u32 = xref as *const _ as *mut _;\n    |                           ^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/illegal_write1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a9fe8cb6ccc026efaf556d703f079436335528ae", "filename": "tests/fail/stacked_borrows/illegal_write2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique retag\n    |\n LL |     drop(&mut *target); // reborrow\n    |          ^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/illegal_write2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "d64f2ddd87670b9b83db185973620de1e35b1245", "filename": "tests/fail/stacked_borrows/illegal_write3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write3.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0x4]\n    |\n LL |     let ptr = r#ref as *const _ as *mut _; // raw ptr, with raw tag\n    |               ^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/illegal_write3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e3b8621eb74f2daab17b197ca3448135abad0240", "filename": "tests/fail/stacked_borrows/illegal_write4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_write4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_write4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write4.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique retag\n    |\n LL |     let _mut_ref: &mut i32 = unsafe { mem::transmute(raw) }; // &mut, with raw tag\n    |                                       ^^^^^^^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/illegal_write4.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "bbeb81258bde6a0483fded5d174843e72b561e0e", "filename": "tests/fail/stacked_borrows/illegal_write5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_write5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_write5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write5.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |     unsafe { *xraw = 15 };\n    |              ^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/illegal_write5.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "331faa89f8604de71d5b4980875283b0aa70b12a", "filename": "tests/fail/stacked_borrows/illegal_write6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write6.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | fn foo(a: &mut u32, y: *mut u32) -> u32 {\n    |        ^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `foo` at $DIR/illegal_write6.rs:LL:CC\n note: inside `main` at $DIR/illegal_write6.rs:LL:CC\n   --> $DIR/illegal_write6.rs:LL:CC"}, {"sha": "87ddf61d7586cfdd8d0ad68aac873412b1b4af6d", "filename": "tests/fail/stacked_borrows/illegal_write_despite_exposed1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_write_despite_exposed1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fillegal_write_despite_exposed1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write_despite_exposed1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |         *exposed_ptr = 0;\n    |         ^^^^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/illegal_write_despite_exposed1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "1d68727c82af4176c72d7d01f2e587a262dc3c3c", "filename": "tests/fail/stacked_borrows/interior_mut1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Finterior_mut1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Finterior_mut1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finterior_mut1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |         *c.get() = UnsafeCell::new(1); // invalidates inner_shr\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/interior_mut1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8a3357142261b07a783ee6bfb82e03ec11c07854", "filename": "tests/fail/stacked_borrows/interior_mut2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finterior_mut2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |         *c.get() = UnsafeCell::new(0); // now inner_shr gets invalidated\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/interior_mut2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "f87bd2319abd79a819033499bfbcf5c1c2449388", "filename": "tests/fail/stacked_borrows/invalidate_against_protector1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | fn inner(x: *mut i32, _y: &mut i32) {\n    |                       ^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `inner` at $DIR/invalidate_against_protector1.rs:LL:CC\n note: inside `main` at $DIR/invalidate_against_protector1.rs:LL:CC\n   --> $DIR/invalidate_against_protector1.rs:LL:CC"}, {"sha": "07c51a39b825bdba871d300e0670fddb3c38e6eb", "filename": "tests/fail/stacked_borrows/invalidate_against_protector2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Finvalidate_against_protector2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | fn inner(x: *mut i32, _y: &i32) {\n    |                       ^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `inner` at $DIR/invalidate_against_protector2.rs:LL:CC\n note: inside `main` at $DIR/invalidate_against_protector2.rs:LL:CC\n   --> $DIR/invalidate_against_protector2.rs:LL:CC"}, {"sha": "16c8810a8e6d90f80cc4ba1361c6eaf3c385890c", "filename": "tests/fail/stacked_borrows/issue-miri-1050-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         Box(unsafe { Unique::new_unchecked(raw) }, alloc)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `std::boxed::Box::<u32>::from_raw_in` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n    = note: inside `std::boxed::Box::<u32>::from_raw` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n note: inside `main` at $DIR/issue-miri-1050-1.rs:LL:CC"}, {"sha": "d57e7662e504aea7fd7959077d72b17e6353f991", "filename": "tests/fail/stacked_borrows/issue-miri-1050-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         Box(unsafe { Unique::new_unchecked(raw) }, alloc)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `std::boxed::Box::<i32>::from_raw_in` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n    = note: inside `std::boxed::Box::<i32>::from_raw` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n note: inside `main` at $DIR/issue-miri-1050-2.rs:LL:CC"}, {"sha": "08dc171c9eef0150ef401b090d8672c857751bd7", "filename": "tests/fail/stacked_borrows/load_invalid_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n    |\n LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/load_invalid_mut.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "50bbed2b295c925685fb7e14d9670eadc0ddb920", "filename": "tests/fail/stacked_borrows/load_invalid_shr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |     unsafe { *xraw = 42 }; // unfreeze\n    |              ^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/load_invalid_shr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "1c7f8e12d3d78977b4e6c751f7ee822a7137908f", "filename": "tests/fail/stacked_borrows/mut_exclusive_violation1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |     *our = 5;\n    |     ^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `unknown_code_2` at $DIR/mut_exclusive_violation1.rs:LL:CC\n note: inside `demo_mut_advanced_unique` at $DIR/mut_exclusive_violation1.rs:LL:CC\n   --> $DIR/mut_exclusive_violation1.rs:LL:CC"}, {"sha": "43b5325fc541a77d18a8699a0e381503ad2e7635", "filename": "tests/fail/stacked_borrows/mut_exclusive_violation2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fmut_exclusive_violation2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique retag\n    |\n LL |         let _raw2 = ptr2.as_mut();\n    |                     ^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/mut_exclusive_violation2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "06a9b86c6f45ae6f342eacd8af53cc2311e75568", "filename": "tests/fail/stacked_borrows/newtype_retagging.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -16,7 +16,7 @@ help: <TAG> is this argument\n    |\n LL | fn dealloc_while_running(_n: Newtype<'_>, dealloc: impl FnOnce()) {\n    |                          ^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `std::boxed::Box::<i32>::from_raw_in` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n    = note: inside `std::boxed::Box::<i32>::from_raw` at RUSTLIB/alloc/src/boxed.rs:LL:CC\n note: inside closure at $DIR/newtype_retagging.rs:LL:CC"}, {"sha": "8c2bba53918885c1fb7e66772789b6b3d1a9bab2", "filename": "tests/fail/stacked_borrows/outdated_local.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Foutdated_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Foutdated_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Foutdated_local.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |     x = 1; // this invalidates y by reactivating the lowermost uniq borrow for this local\n    |     ^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/outdated_local.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "d7ab930aa3785d7c0376b5b8a3991dbfb375788b", "filename": "tests/fail/stacked_borrows/pass_invalid_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_mut.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n    |\n LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/pass_invalid_mut.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "c14b35c75c83df75183032b2f4ecb8915f9865db", "filename": "tests/fail/stacked_borrows/pass_invalid_shr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_shr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_shr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fpass_invalid_shr.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a write access\n    |\n LL |     unsafe { *xraw = 42 }; // unfreeze\n    |              ^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/pass_invalid_shr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6415af1e18bbff221179930289e7bc9837cb8c49", "filename": "tests/fail/stacked_borrows/pointer_smuggling.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fpointer_smuggling.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x1] by a write access\n    |\n LL |     *val = 2; // this invalidates any raw ptrs `fun1` might have created.\n    |     ^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `fun2` at $DIR/pointer_smuggling.rs:LL:CC\n note: inside `main` at $DIR/pointer_smuggling.rs:LL:CC\n   --> $DIR/pointer_smuggling.rs:LL:CC"}, {"sha": "d75934445e6d21de8dc1ea86450adf9b081326ea", "filename": "tests/fail/stacked_borrows/raw_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fraw_tracking.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique retag\n    |\n LL |     let raw2 = &mut l as *mut _; // invalidates raw1\n    |                ^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/raw_tracking.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "9deb0c41742f35ea5de0566ecc74e97186e3d58b", "filename": "tests/fail/stacked_borrows/return_invalid_mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8] by a read access\n    |\n LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `foo` at $DIR/return_invalid_mut.rs:LL:CC\n note: inside `main` at $DIR/return_invalid_mut.rs:LL:CC\n   --> $DIR/return_invalid_mut.rs:LL:CC"}, {"sha": "1068c286c62fa39160e2612c1589444ccc33782e", "filename": "tests/fail/stacked_borrows/return_invalid_mut_option.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_option.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8] by a read access\n    |\n LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/return_invalid_mut_option.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "79de9b668cf2b011ca380cf2c0c78c7f558d09ea", "filename": "tests/fail/stacked_borrows/return_invalid_mut_tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_mut_tuple.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8] by a read access\n    |\n LL |     let _val = unsafe { *xraw }; // invalidate xref\n    |                         ^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/return_invalid_mut_tuple.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "dd651517c2fb083b5dae72826dae09955f39ddfc", "filename": "tests/fail/stacked_borrows/return_invalid_shr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8] by a write access\n    |\n LL |     unsafe { *xraw = (42, 23) }; // unfreeze\n    |              ^^^^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `foo` at $DIR/return_invalid_shr.rs:LL:CC\n note: inside `main` at $DIR/return_invalid_shr.rs:LL:CC\n   --> $DIR/return_invalid_shr.rs:LL:CC"}, {"sha": "f45456305db293628070394820959e4034f74d5e", "filename": "tests/fail/stacked_borrows/return_invalid_shr_option.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_option.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8] by a write access\n    |\n LL |     unsafe { *xraw = (42, 23) }; // unfreeze\n    |              ^^^^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/return_invalid_shr_option.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2e41f505bb9d27b8f3625e2754be3cd1ca13f8e5", "filename": "tests/fail/stacked_borrows/return_invalid_shr_tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Freturn_invalid_shr_tuple.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x8] by a write access\n    |\n LL |     unsafe { *xraw = (42, 23) }; // unfreeze\n    |              ^^^^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/return_invalid_shr_tuple.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "3a139c3ab2120ec1b4a6a610537ae592ec19533f", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique retag\n    |\n LL |         shr_rw.set(1);\n    |         ^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/shared_rw_borrows_are_weak1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0609a73e793157563668915d0c67a57bfbe909be", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [$HEX..$HEX] by a Unique retag\n    |\n LL |         shr_rw.replace(1);\n    |         ^^^^^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/shared_rw_borrows_are_weak2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "0818d07da48e5e776a7f3cae4bd04343a2e6829e", "filename": "tests/fail/stacked_borrows/shr_frozen_violation1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshr_frozen_violation1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0x4]\n    |\n LL |         *(x as *const i32 as *mut i32) = 7;\n    |           ^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `unknown_code` at $DIR/shr_frozen_violation1.rs:LL:CC\n note: inside `foo` at $DIR/shr_frozen_violation1.rs:LL:CC\n   --> $DIR/shr_frozen_violation1.rs:LL:CC"}, {"sha": "ca99a8262b8bd65b40ade72879bc395ef8969fc8", "filename": "tests/fail/stacked_borrows/static_memory_modification.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fstatic_memory_modification.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fstatic_memory_modification.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fstatic_memory_modification.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         std::mem::transmute::<&usize, &mut usize>(&X)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/static_memory_modification.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6f1d0ccd348eca056820b4486be47686891cf83e", "filename": "tests/fail/stacked_borrows/track_caller.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Ftrack_caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Ftrack_caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Ftrack_caller.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -19,7 +19,7 @@ help: <TAG> was later invalidated at offsets [0x0..0x4] by a read access\n    |\n LL |     callee(xraw);\n    |     ^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/track_caller.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a2ecb07fd3117179c2eb372ec9ceac4c70d68e7f", "filename": "tests/fail/stacked_borrows/transmute-is-no-escape.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Ftransmute-is-no-escape.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadWrite retag at offsets [0x4..0x8]\n    |\n LL |     let raw = (&mut x[1] as *mut i32).wrapping_offset(-1);\n    |                ^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/transmute-is-no-escape.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4deafa890005b18d18f68138136c291bcbc47e2f", "filename": "tests/fail/stacked_borrows/unescaped_local.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -9,7 +9,7 @@ LL |         *raw = 13;\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/unescaped_local.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "01a4bf4340c78faf8aa446b829ab7a033d1bdb9e", "filename": "tests/fail/stacked_borrows/unescaped_static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Funescaped_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Funescaped_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Funescaped_static.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0x1]\n    |\n LL |     let ptr_to_first = &ARRAY[0] as *const u8;\n    |                        ^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/unescaped_static.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "86f1da1f70a33de4b1d549a906bf0051bce68101", "filename": "tests/fail/stacked_borrows/zst_slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fzst_slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstacked_borrows%2Fzst_slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fzst_slice.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -14,7 +14,7 @@ help: <TAG> would have been created here, but this is a zero-size retag ([0x0..0\n    |\n LL |         assert_eq!(*s.get_unchecked(1), 2);\n    |                     ^^^^^^^^^^^^^^^^^^\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `core::slice::<impl [i32]>::get_unchecked::<usize>` at RUSTLIB/core/src/slice/mod.rs:LL:CC\n note: inside `main` at $DIR/zst_slice.rs:LL:CC\n   --> $DIR/zst_slice.rs:LL:CC"}, {"sha": "5e7213ee6088efae0fd555a4d657be3f2f2634a5", "filename": "tests/fail/static_memory_modification1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstatic_memory_modification1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstatic_memory_modification1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstatic_memory_modification1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         *std::mem::transmute::<&usize, &mut usize>(&X) = 6;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/static_memory_modification1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "4c160cd320688a4c541504d48bc6fad04e1edabf", "filename": "tests/fail/static_memory_modification2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstatic_memory_modification2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstatic_memory_modification2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstatic_memory_modification2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         transmute::<&[u8], &mut [u8]>(s.as_bytes())[4] = 42;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/static_memory_modification2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "1986059c50a8eb904998913276b8f9d76d6c5f51", "filename": "tests/fail/static_memory_modification3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstatic_memory_modification3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Fstatic_memory_modification3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstatic_memory_modification3.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         transmute::<&[u8], &mut [u8]>(bs)[4] = 42;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/static_memory_modification3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "642bf0a7134364891f2333cf093b24927275db33", "filename": "tests/fail/transmute-pair-uninit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ftransmute-pair-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ftransmute-pair-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute-pair-uninit.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let v = unsafe { *z.offset(first_undef) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/transmute-pair-uninit.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e1907e0801949bf037ecbd24dd97c551f26175fc", "filename": "tests/fail/transmute_fat1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ftransmute_fat1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Ftransmute_fat1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute_fat1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         std::mem::transmute::<&[u8], [u8; N]>(&[1u8])\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/transmute_fat1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "bbebe3b89fd7e4ee5d8b748c529facf1e1b9b346", "filename": "tests/fail/unaligned_pointers/alignment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Falignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Falignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Falignment.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         *(x_ptr as *mut u32) = 42; *(x_ptr.add(1) as *mut u32) = 42;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/alignment.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "8c3aa3429af5fa684d7450d76a51c2cfc69c5f67", "filename": "tests/fail/unaligned_pointers/atomic_unaligned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         ::std::intrinsics::atomic_load_seqcst(zptr);\n    |\n    = help: this usually indicates that your program performed an invalid operation and caused Undefined Behavior\n    = help: but due to `-Zmiri-symbolic-alignment-check`, alignment errors can also be false positives\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/atomic_unaligned.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "a900b46612b8a957ddd5dc624bba5a5ff3e0b393", "filename": "tests/fail/unaligned_pointers/dyn_alignment.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _ptr = &*ptr;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/dyn_alignment.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "392495a386de74385a9c7258bf863ec13461f34b", "filename": "tests/fail/unaligned_pointers/intptrcast_alignment_check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     unsafe { *u16_ptr = 2 };\n    |\n    = help: this usually indicates that your program performed an invalid operation and caused Undefined Behavior\n    = help: but due to `-Zmiri-symbolic-alignment-check`, alignment errors can also be false positives\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/intptrcast_alignment_check.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "6c2a3dca2deef732bda30071701489a75f62ba2c", "filename": "tests/fail/unaligned_pointers/reference_to_packed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Freference_to_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Freference_to_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Freference_to_packed.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let i = *p;\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/reference_to_packed.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "49292be9cd15881bd3ba89064736a7fa015f7366", "filename": "tests/fail/unaligned_pointers/unaligned_ptr1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _x = unsafe { *x };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/unaligned_ptr1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "e75482f723b698d0675e3e8e4d55dd24b139ddf3", "filename": "tests/fail/unaligned_pointers/unaligned_ptr2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr2.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |     let _x = unsafe { *x };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/unaligned_ptr2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "50dd4fdfc89f50258ebb8e27129ec64a992a8dd9", "filename": "tests/fail/unaligned_pointers/unaligned_ptr3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _x = unsafe { *x };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/unaligned_ptr3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "182f3e0f876f5c2625dd4d8f5d9fc1316ae29759", "filename": "tests/fail/unaligned_pointers/unaligned_ptr4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _val = unsafe { *ptr };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/unaligned_ptr4.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "2d8b1bf74508a325628167dafd418bcb66605ee7", "filename": "tests/fail/unaligned_pointers/unaligned_ptr_addr_of.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _x = unsafe { ptr::addr_of!(*x) };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n    = note: this error originates in the macro `ptr::addr_of` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "aa0cbe1623b6eb85bb8d6d8a8bea3672ebf2e51c", "filename": "tests/fail/unaligned_pointers/unaligned_ptr_zst.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/671a4b8b0ff3d4e32f2e55eaf8389e69433535df/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.stderr?ref=671a4b8b0ff3d4e32f2e55eaf8389e69433535df", "patch": "@@ -6,7 +6,7 @@ LL |         let _x = unsafe { *x };\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-   = note: backtrace:\n+   = note: BACKTRACE:\n    = note: inside `main` at $DIR/unaligned_ptr_zst.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}]}