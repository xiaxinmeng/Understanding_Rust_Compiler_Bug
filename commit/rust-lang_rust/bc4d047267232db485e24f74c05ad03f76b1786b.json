{"sha": "bc4d047267232db485e24f74c05ad03f76b1786b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNGQwNDcyNjcyMzJkYjQ4NWUyNGY3NGMwNWFkMDNmNzZiMTc4NmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-20T15:57:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-20T15:57:10Z"}, "message": "Add is_workspace_member for rust-project.json\n\nIt is currently unused, but, in the future, it will be used to:\n\n* drive certain UX (symbols search by default will look only in the\nmembers)\n* improve performance (rust-analyzer will assume that non-members\nchange rarely)\n\nIf not specified, is_workspace member is inferred from the path", "tree": {"sha": "19794821bbcb5c535849846b7c51b58ba4c3d5f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19794821bbcb5c535849846b7c51b58ba4c3d5f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc4d047267232db485e24f74c05ad03f76b1786b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc4d047267232db485e24f74c05ad03f76b1786b", "html_url": "https://github.com/rust-lang/rust/commit/bc4d047267232db485e24f74c05ad03f76b1786b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc4d047267232db485e24f74c05ad03f76b1786b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7ccfb072c0f8b8e7a47424c341103f48d4648e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7ccfb072c0f8b8e7a47424c341103f48d4648e1", "html_url": "https://github.com/rust-lang/rust/commit/c7ccfb072c0f8b8e7a47424c341103f48d4648e1"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "778cc84ef92578d318526c615006def9152ad2c5", "filename": "crates/ra_project_model/src/project_json.rs", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bc4d047267232db485e24f74c05ad03f76b1786b/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc4d047267232db485e24f74c05ad03f76b1786b/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs?ref=bc4d047267232db485e24f74c05ad03f76b1786b", "patch": "@@ -34,6 +34,7 @@ pub struct Crate {\n     pub(crate) target: Option<String>,\n     pub(crate) out_dir: Option<AbsPathBuf>,\n     pub(crate) proc_macro_dylib_path: Option<AbsPathBuf>,\n+    pub(crate) is_workspace_member: bool,\n }\n \n impl ProjectJson {\n@@ -43,32 +44,42 @@ impl ProjectJson {\n             crates: data\n                 .crates\n                 .into_iter()\n-                .map(|crate_data| Crate {\n-                    root_module: base.join(crate_data.root_module),\n-                    edition: crate_data.edition.into(),\n-                    deps: crate_data\n-                        .deps\n-                        .into_iter()\n-                        .map(|dep_data| Dependency {\n-                            crate_id: CrateId(dep_data.krate as u32),\n-                            name: dep_data.name,\n-                        })\n-                        .collect::<Vec<_>>(),\n-                    cfg: {\n-                        let mut cfg = CfgOptions::default();\n-                        for entry in &crate_data.cfg {\n-                            match split_delim(entry, '=') {\n-                                Some((key, value)) => {\n-                                    cfg.insert_key_value(key.into(), value.into());\n+                .map(|crate_data| {\n+                    let is_workspace_member = crate_data.is_workspace_member.unwrap_or_else(|| {\n+                        crate_data.root_module.is_relative()\n+                            && !crate_data.root_module.starts_with(\"..\")\n+                            || crate_data.root_module.starts_with(base)\n+                    });\n+                    Crate {\n+                        root_module: base.join(crate_data.root_module),\n+                        edition: crate_data.edition.into(),\n+                        deps: crate_data\n+                            .deps\n+                            .into_iter()\n+                            .map(|dep_data| Dependency {\n+                                crate_id: CrateId(dep_data.krate as u32),\n+                                name: dep_data.name,\n+                            })\n+                            .collect::<Vec<_>>(),\n+                        cfg: {\n+                            let mut cfg = CfgOptions::default();\n+                            for entry in &crate_data.cfg {\n+                                match split_delim(entry, '=') {\n+                                    Some((key, value)) => {\n+                                        cfg.insert_key_value(key.into(), value.into());\n+                                    }\n+                                    None => cfg.insert_atom(entry.into()),\n                                 }\n-                                None => cfg.insert_atom(entry.into()),\n                             }\n-                        }\n-                        cfg\n-                    },\n-                    target: crate_data.target,\n-                    out_dir: crate_data.out_dir.map(|it| base.join(it)),\n-                    proc_macro_dylib_path: crate_data.proc_macro_dylib_path.map(|it| base.join(it)),\n+                            cfg\n+                        },\n+                        target: crate_data.target,\n+                        out_dir: crate_data.out_dir.map(|it| base.join(it)),\n+                        proc_macro_dylib_path: crate_data\n+                            .proc_macro_dylib_path\n+                            .map(|it| base.join(it)),\n+                        is_workspace_member,\n+                    }\n                 })\n                 .collect::<Vec<_>>(),\n         }\n@@ -91,6 +102,7 @@ struct CrateData {\n     target: Option<String>,\n     out_dir: Option<PathBuf>,\n     proc_macro_dylib_path: Option<PathBuf>,\n+    is_workspace_member: Option<bool>,\n }\n \n #[derive(Deserialize)]"}]}