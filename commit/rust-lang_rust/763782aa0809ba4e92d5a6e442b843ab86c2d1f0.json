{"sha": "763782aa0809ba4e92d5a6e442b843ab86c2d1f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2Mzc4MmFhMDgwOWJhNGU5MmQ1YTZlNDQyYjg0M2FiODZjMmQxZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-19T14:53:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-19T14:53:02Z"}, "message": "Auto merge of #1342 - divergentdave:pause-instruction, r=RalfJung\n\nHandle std::sync::atomic::spin_loop_hint()\n\nThis PR adds support for `std::sync::atomic::spin_loop_hint()` by implementing the `llvm.x86.sse2.pause` intrinsic when the target is x86-based. It appears this is the first LLVM intrinsic in foreign_items, so I added a couple match blocks to handle it or fall through to the different OS-specific methods. I added a basic smoke test to `tests/run-pass/sync.rs`. I came across this by way of `crossbeam::utils::Backoff::spin()`, FWIW.", "tree": {"sha": "d4aa82a01e15822f1b8e92080a6c4d4ea26bcc80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4aa82a01e15822f1b8e92080a6c4d4ea26bcc80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/763782aa0809ba4e92d5a6e442b843ab86c2d1f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/763782aa0809ba4e92d5a6e442b843ab86c2d1f0", "html_url": "https://github.com/rust-lang/rust/commit/763782aa0809ba4e92d5a6e442b843ab86c2d1f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/763782aa0809ba4e92d5a6e442b843ab86c2d1f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4155fb610fca4fe38348ae9c57931450d7bc95d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4155fb610fca4fe38348ae9c57931450d7bc95d7", "html_url": "https://github.com/rust-lang/rust/commit/4155fb610fca4fe38348ae9c57931450d7bc95d7"}, {"sha": "547a4cc9209e04c2bbbe84edcd625272e51e45b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/547a4cc9209e04c2bbbe84edcd625272e51e45b2", "html_url": "https://github.com/rust-lang/rust/commit/547a4cc9209e04c2bbbe84edcd625272e51e45b2"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "75a2475d228a6535087a8e347fcbdb1814783c3f", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/763782aa0809ba4e92d5a6e442b843ab86c2d1f0/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/763782aa0809ba4e92d5a6e442b843ab86c2d1f0/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=763782aa0809ba4e92d5a6e442b843ab86c2d1f0", "patch": "@@ -433,7 +433,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_f64(res), dest)?;\n             }\n \n-            // Target-specific shims\n+            // Architecture-specific shims\n+            \"llvm.x86.sse2.pause\" if this.tcx.sess.target.target.arch == \"x86\" || this.tcx.sess.target.target.arch == \"x86_64\" => {}\n+\n+            // Platform-specific shims\n             _ => match this.tcx.sess.target.target.target_os.as_str() {\n                 \"linux\" | \"macos\" => return posix::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n                 \"windows\" => return windows::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),"}, {"sha": "35decd6ddbf2edaabb5a1ccdd9fa11d32620e482", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/763782aa0809ba4e92d5a6e442b843ab86c2d1f0/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/763782aa0809ba4e92d5a6e442b843ab86c2d1f0/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=763782aa0809ba4e92d5a6e442b843ab86c2d1f0", "patch": "@@ -312,6 +312,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // We do not support forking, so there is nothing to do here.\n                 this.write_null(dest)?;\n             }\n+            \"sched_yield\" => {\n+                this.write_null(dest)?;\n+            }\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work.\n             // These shims are enabled only when the caller is in the standard library."}, {"sha": "0125127a9f4000ef8fa9184f544168339c0e7921", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/763782aa0809ba4e92d5a6e442b843ab86c2d1f0/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/763782aa0809ba4e92d5a6e442b843ab86c2d1f0/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=763782aa0809ba4e92d5a6e442b843ab86c2d1f0", "patch": "@@ -201,6 +201,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // FIXME: we should set last_error, but to what?\n                 this.write_null(dest)?;\n             }\n+            \"SwitchToThread\" => {\n+                // Note that once Miri supports concurrency, this will need to return a nonzero\n+                // value if this call does result in switching to another thread.\n+                this.write_null(dest)?;\n+            }\n \n             // Better error for attempts to create a thread\n             \"CreateThread\" => {"}, {"sha": "a4fd6f584c5890b26dccfa914acbb4636fc75ba4", "filename": "tests/run-pass/sync.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/763782aa0809ba4e92d5a6e442b843ab86c2d1f0/tests%2Frun-pass%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/763782aa0809ba4e92d5a6e442b843ab86c2d1f0/tests%2Frun-pass%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsync.rs?ref=763782aa0809ba4e92d5a6e442b843ab86c2d1f0", "patch": "@@ -1,13 +1,16 @@\n #![feature(rustc_private)]\n \n use std::sync::{Mutex, TryLockError};\n+use std::sync::atomic;\n \n fn main() {\n     test_mutex_stdlib();\n     #[cfg(not(target_os = \"windows\"))] // TODO: implement RwLock on Windows\n     {\n         test_rwlock_stdlib();\n     }\n+    test_spin_loop_hint();\n+    test_thread_yield_now();\n }\n \n fn test_mutex_stdlib() {\n@@ -50,3 +53,11 @@ impl<T> TryLockErrorExt<T> for TryLockError<T> {\n         }\n     }\n }\n+\n+fn test_spin_loop_hint() {\n+    atomic::spin_loop_hint();\n+}\n+\n+fn test_thread_yield_now() {\n+    std::thread::yield_now();\n+}"}]}