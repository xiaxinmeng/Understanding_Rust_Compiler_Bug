{"sha": "71f39c1a2fd98f829a6087a7f4a47a857571493c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZjM5YzFhMmZkOThmODI5YTYwODdhN2Y0YTQ3YTg1NzU3MTQ5M2M=", "commit": {"author": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2015-08-22T14:51:53Z"}, "committer": {"name": "Barosl Lee", "email": "vcs@barosl.com", "date": "2015-08-25T09:08:57Z"}, "message": "Respect `--color` when printing early errors\n\nCurrently, `early_error` and `early_warn` in `librustc::session` always\nuse `ColorConfig::Auto`. Modify them to follow the color configuration\nset by the `--color` option.\n\nAs colored output is also printed during the early stage, parsing the\n`--color` option should be done as early as possible. However, there are\nstill some cases when the output needs to be colored before knowing the\nexact color settings. In these cases, it will be defaulted to\n`ColorConfig::Auto`, which is the same as before.\n\nFixes #27879.", "tree": {"sha": "899699e1f508a0ebb65a15772b91fcd954c4f057", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/899699e1f508a0ebb65a15772b91fcd954c4f057"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71f39c1a2fd98f829a6087a7f4a47a857571493c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71f39c1a2fd98f829a6087a7f4a47a857571493c", "html_url": "https://github.com/rust-lang/rust/commit/71f39c1a2fd98f829a6087a7f4a47a857571493c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71f39c1a2fd98f829a6087a7f4a47a857571493c/comments", "author": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "barosl", "id": 573768, "node_id": "MDQ6VXNlcjU3Mzc2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/573768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/barosl", "html_url": "https://github.com/barosl", "followers_url": "https://api.github.com/users/barosl/followers", "following_url": "https://api.github.com/users/barosl/following{/other_user}", "gists_url": "https://api.github.com/users/barosl/gists{/gist_id}", "starred_url": "https://api.github.com/users/barosl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/barosl/subscriptions", "organizations_url": "https://api.github.com/users/barosl/orgs", "repos_url": "https://api.github.com/users/barosl/repos", "events_url": "https://api.github.com/users/barosl/events{/privacy}", "received_events_url": "https://api.github.com/users/barosl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e195aa84b482e01b6eadf14211e4d880063a6794", "url": "https://api.github.com/repos/rust-lang/rust/commits/e195aa84b482e01b6eadf14211e4d880063a6794", "html_url": "https://github.com/rust-lang/rust/commit/e195aa84b482e01b6eadf14211e4d880063a6794"}], "stats": {"total": 157, "additions": 82, "deletions": 75}, "files": [{"sha": "144dc15dd8aea408eac65d375f938440069d6f3b", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71f39c1a2fd98f829a6087a7f4a47a857571493c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f39c1a2fd98f829a6087a7f4a47a857571493c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=71f39c1a2fd98f829a6087a7f4a47a857571493c", "patch": "@@ -43,6 +43,7 @@ use syntax::codemap::Span;\n use syntax::visit::{Visitor, FnKind};\n use syntax::parse::token::InternedString;\n use syntax::{ast, ast_util, visit};\n+use syntax::diagnostic;\n \n /// Information about the registered lints.\n ///\n@@ -141,7 +142,7 @@ impl LintStore {\n                 match (sess, from_plugin) {\n                     // We load builtin lints first, so a duplicate is a compiler bug.\n                     // Use early_error when handling -W help with no crate.\n-                    (None, _) => early_error(&msg[..]),\n+                    (None, _) => early_error(diagnostic::Auto, &msg[..]),\n                     (Some(sess), false) => sess.bug(&msg[..]),\n \n                     // A duplicate name from a plugin is a user error.\n@@ -166,7 +167,7 @@ impl LintStore {\n             match (sess, from_plugin) {\n                 // We load builtin lints first, so a duplicate is a compiler bug.\n                 // Use early_error when handling -W help with no crate.\n-                (None, _) => early_error(&msg[..]),\n+                (None, _) => early_error(diagnostic::Auto, &msg[..]),\n                 (Some(sess), false) => sess.bug(&msg[..]),\n \n                 // A duplicate name from a plugin is a user error."}, {"sha": "f0f824a0218bb4dda91ca0c4bfb221b153c211f6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 50, "deletions": 50, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/71f39c1a2fd98f829a6087a7f4a47a857571493c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f39c1a2fd98f829a6087a7f4a47a857571493c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=71f39c1a2fd98f829a6087a7f4a47a857571493c", "patch": "@@ -288,7 +288,7 @@ macro_rules! options {\n         $struct_name { $($opt: $init),* }\n     }\n \n-    pub fn $buildfn(matches: &getopts::Matches) -> $struct_name\n+    pub fn $buildfn(matches: &getopts::Matches, color: ColorConfig) -> $struct_name\n     {\n         let mut op = $defaultfn();\n         for option in matches.opt_strs($prefix) {\n@@ -302,20 +302,20 @@ macro_rules! options {\n                 if !setter(&mut op, value) {\n                     match (value, opt_type_desc) {\n                         (Some(..), None) => {\n-                            early_error(&format!(\"{} option `{}` takes no \\\n-                                                 value\", $outputname, key))\n+                            early_error(color, &format!(\"{} option `{}` takes no \\\n+                                                         value\", $outputname, key))\n                         }\n                         (None, Some(type_desc)) => {\n-                            early_error(&format!(\"{0} option `{1}` requires \\\n-                                                 {2} ({3} {1}=<value>)\",\n-                                                $outputname, key,\n-                                                type_desc, $prefix))\n+                            early_error(color, &format!(\"{0} option `{1}` requires \\\n+                                                         {2} ({3} {1}=<value>)\",\n+                                                        $outputname, key,\n+                                                        type_desc, $prefix))\n                         }\n                         (Some(value), Some(type_desc)) => {\n-                            early_error(&format!(\"incorrect value `{}` for {} \\\n-                                                 option `{}` - {} was expected\",\n-                                                 value, $outputname,\n-                                                 key, type_desc))\n+                            early_error(color, &format!(\"incorrect value `{}` for {} \\\n+                                                         option `{}` - {} was expected\",\n+                                                        value, $outputname,\n+                                                        key, type_desc))\n                         }\n                         (None, None) => unreachable!()\n                     }\n@@ -324,8 +324,8 @@ macro_rules! options {\n                 break;\n             }\n             if !found {\n-                early_error(&format!(\"unknown {} option: `{}`\",\n-                                    $outputname, key));\n+                early_error(color, &format!(\"unknown {} option: `{}`\",\n+                                            $outputname, key));\n             }\n         }\n         return op;\n@@ -850,9 +850,23 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String> ) -> ast::CrateConfig {\n }\n \n pub fn build_session_options(matches: &getopts::Matches) -> Options {\n+    let color = match matches.opt_str(\"color\").as_ref().map(|s| &s[..]) {\n+        Some(\"auto\")   => Auto,\n+        Some(\"always\") => Always,\n+        Some(\"never\")  => Never,\n+\n+        None => Auto,\n+\n+        Some(arg) => {\n+            early_error(Auto, &format!(\"argument for --color must be auto, always \\\n+                                        or never (instead was `{}`)\",\n+                                       arg))\n+        }\n+    };\n+\n     let unparsed_crate_types = matches.opt_strs(\"crate-type\");\n     let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n-        .unwrap_or_else(|e| early_error(&e[..]));\n+        .unwrap_or_else(|e| early_error(color, &e[..]));\n \n     let mut lint_opts = vec!();\n     let mut describe_lints = false;\n@@ -869,11 +883,11 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let lint_cap = matches.opt_str(\"cap-lints\").map(|cap| {\n         lint::Level::from_str(&cap).unwrap_or_else(|| {\n-            early_error(&format!(\"unknown lint level: `{}`\", cap))\n+            early_error(color, &format!(\"unknown lint level: `{}`\", cap))\n         })\n     });\n \n-    let debugging_opts = build_debugging_options(matches);\n+    let debugging_opts = build_debugging_options(matches, color);\n \n     let parse_only = debugging_opts.parse_only;\n     let no_trans = debugging_opts.no_trans;\n@@ -897,8 +911,8 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n                     \"link\" => OutputTypeExe,\n                     \"dep-info\" => OutputTypeDepInfo,\n                     _ => {\n-                        early_error(&format!(\"unknown emission type: `{}`\",\n-                                            part))\n+                        early_error(color, &format!(\"unknown emission type: `{}`\",\n+                                                    part))\n                     }\n                 };\n                 output_types.push(output_type)\n@@ -911,15 +925,15 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         output_types.push(OutputTypeExe);\n     }\n \n-    let cg = build_codegen_options(matches);\n+    let cg = build_codegen_options(matches, color);\n \n     let sysroot_opt = matches.opt_str(\"sysroot\").map(|m| PathBuf::from(&m));\n     let target = matches.opt_str(\"target\").unwrap_or(\n         host_triple().to_string());\n     let opt_level = {\n         if matches.opt_present(\"O\") {\n             if cg.opt_level.is_some() {\n-                early_error(\"-O and -C opt-level both provided\");\n+                early_error(color, \"-O and -C opt-level both provided\");\n             }\n             Default\n         } else {\n@@ -930,9 +944,9 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n                 Some(2) => Default,\n                 Some(3) => Aggressive,\n                 Some(arg) => {\n-                    early_error(&format!(\"optimization level needs to be \\\n-                                          between 0-3 (instead was `{}`)\",\n-                                         arg));\n+                    early_error(color, &format!(\"optimization level needs to be \\\n+                                                 between 0-3 (instead was `{}`)\",\n+                                                arg));\n                 }\n             }\n         }\n@@ -941,7 +955,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let gc = debugging_opts.gc;\n     let debuginfo = if matches.opt_present(\"g\") {\n         if cg.debuginfo.is_some() {\n-            early_error(\"-g and -C debuginfo both provided\");\n+            early_error(color, \"-g and -C debuginfo both provided\");\n         }\n         FullDebugInfo\n     } else {\n@@ -950,16 +964,16 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             Some(1) => LimitedDebugInfo,\n             Some(2) => FullDebugInfo,\n             Some(arg) => {\n-                early_error(&format!(\"debug info level needs to be between \\\n-                                      0-2 (instead was `{}`)\",\n-                                     arg));\n+                early_error(color, &format!(\"debug info level needs to be between \\\n+                                             0-2 (instead was `{}`)\",\n+                                            arg));\n             }\n         }\n     };\n \n     let mut search_paths = SearchPaths::new();\n     for s in &matches.opt_strs(\"L\") {\n-        search_paths.add_path(&s[..]);\n+        search_paths.add_path(&s[..], color);\n     }\n \n     let libs = matches.opt_strs(\"l\").into_iter().map(|s| {\n@@ -971,9 +985,9 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             (Some(name), \"framework\") => (name, cstore::NativeFramework),\n             (Some(name), \"static\") => (name, cstore::NativeStatic),\n             (_, s) => {\n-                early_error(&format!(\"unknown library kind `{}`, expected \\\n-                                     one of dylib, framework, or static\",\n-                                    s));\n+                early_error(color, &format!(\"unknown library kind `{}`, expected \\\n+                                             one of dylib, framework, or static\",\n+                                            s));\n             }\n         };\n         (name.to_string(), kind)\n@@ -989,40 +1003,26 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             \"file-names\" => PrintRequest::FileNames,\n             \"sysroot\" => PrintRequest::Sysroot,\n             req => {\n-                early_error(&format!(\"unknown print request `{}`\", req))\n+                early_error(color, &format!(\"unknown print request `{}`\", req))\n             }\n         }\n     }).collect::<Vec<_>>();\n \n     if !cg.remark.is_empty() && debuginfo == NoDebugInfo {\n-        early_warn(\"-C remark will not show source locations without \\\n-                    --debuginfo\");\n+        early_warn(color, \"-C remark will not show source locations without \\\n+                           --debuginfo\");\n     }\n \n-    let color = match matches.opt_str(\"color\").as_ref().map(|s| &s[..]) {\n-        Some(\"auto\")   => Auto,\n-        Some(\"always\") => Always,\n-        Some(\"never\")  => Never,\n-\n-        None => Auto,\n-\n-        Some(arg) => {\n-            early_error(&format!(\"argument for --color must be auto, always \\\n-                                 or never (instead was `{}`)\",\n-                                arg))\n-        }\n-    };\n-\n     let mut externs = HashMap::new();\n     for arg in &matches.opt_strs(\"extern\") {\n         let mut parts = arg.splitn(2, '=');\n         let name = match parts.next() {\n             Some(s) => s,\n-            None => early_error(\"--extern value must not be empty\"),\n+            None => early_error(color, \"--extern value must not be empty\"),\n         };\n         let location = match parts.next() {\n             Some(s) => s,\n-            None => early_error(\"--extern value must be of the format `foo=bar`\"),\n+            None => early_error(color, \"--extern value must be of the format `foo=bar`\"),\n         };\n \n         externs.entry(name.to_string()).or_insert(vec![]).push(location.to_string());"}, {"sha": "ff732ee7b9d80c60099da78a70c3c65adec28c11", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/71f39c1a2fd98f829a6087a7f4a47a857571493c/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f39c1a2fd98f829a6087a7f4a47a857571493c/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=71f39c1a2fd98f829a6087a7f4a47a857571493c", "patch": "@@ -473,13 +473,13 @@ pub fn expect<T, M>(sess: &Session, opt: Option<T>, msg: M) -> T where\n     diagnostic::expect(sess.diagnostic(), opt, msg)\n }\n \n-pub fn early_error(msg: &str) -> ! {\n-    let mut emitter = diagnostic::EmitterWriter::stderr(diagnostic::Auto, None);\n+pub fn early_error(color: diagnostic::ColorConfig, msg: &str) -> ! {\n+    let mut emitter = diagnostic::EmitterWriter::stderr(color, None);\n     emitter.emit(None, msg, None, diagnostic::Fatal);\n     panic!(diagnostic::FatalError);\n }\n \n-pub fn early_warn(msg: &str) {\n-    let mut emitter = diagnostic::EmitterWriter::stderr(diagnostic::Auto, None);\n+pub fn early_warn(color: diagnostic::ColorConfig, msg: &str) {\n+    let mut emitter = diagnostic::EmitterWriter::stderr(color, None);\n     emitter.emit(None, msg, None, diagnostic::Warning);\n }"}, {"sha": "caf776dad85e06ff28ebda7ee9a77b19dbb4b680", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71f39c1a2fd98f829a6087a7f4a47a857571493c/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f39c1a2fd98f829a6087a7f4a47a857571493c/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=71f39c1a2fd98f829a6087a7f4a47a857571493c", "patch": "@@ -11,6 +11,7 @@\n use std::slice;\n use std::path::{Path, PathBuf};\n use session::early_error;\n+use syntax::diagnostic;\n \n #[derive(Clone, Debug)]\n pub struct SearchPaths {\n@@ -37,7 +38,7 @@ impl SearchPaths {\n         SearchPaths { paths: Vec::new() }\n     }\n \n-    pub fn add_path(&mut self, path: &str) {\n+    pub fn add_path(&mut self, path: &str, color: diagnostic::ColorConfig) {\n         let (kind, path) = if path.starts_with(\"native=\") {\n             (PathKind::Native, &path[\"native=\".len()..])\n         } else if path.starts_with(\"crate=\") {\n@@ -52,7 +53,7 @@ impl SearchPaths {\n             (PathKind::All, path)\n         };\n         if path.is_empty() {\n-            early_error(\"empty search path given via `-L`\");\n+            early_error(color, \"empty search path given via `-L`\");\n         }\n         self.paths.push((kind, PathBuf::from(path)));\n     }"}, {"sha": "ed63b8153544e348308332a553f3f18d06429294", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/71f39c1a2fd98f829a6087a7f4a47a857571493c/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f39c1a2fd98f829a6087a7f4a47a857571493c/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=71f39c1a2fd98f829a6087a7f4a47a857571493c", "patch": "@@ -117,11 +117,11 @@ pub fn run_compiler<'a>(args: &[String],\n         None => return\n     };\n \n-    let descriptions = diagnostics_registry();\n+    let sopts = config::build_session_options(&matches);\n \n-    do_or_return!(callbacks.early_callback(&matches, &descriptions));\n+    let descriptions = diagnostics_registry();\n \n-    let sopts = config::build_session_options(&matches);\n+    do_or_return!(callbacks.early_callback(&matches, &descriptions, sopts.color));\n \n     let (odir, ofile) = make_output(&matches);\n     let (input, input_file_path) = match make_input(&matches.free) {\n@@ -205,7 +205,8 @@ pub trait CompilerCalls<'a> {\n     // else (e.g., selecting input and output).\n     fn early_callback(&mut self,\n                       _: &getopts::Matches,\n-                      _: &diagnostics::registry::Registry)\n+                      _: &diagnostics::registry::Registry,\n+                      _: diagnostic::ColorConfig)\n                       -> Compilation {\n         Compilation::Continue\n     }\n@@ -277,7 +278,8 @@ pub struct RustcDefaultCalls;\n impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n     fn early_callback(&mut self,\n                       matches: &getopts::Matches,\n-                      descriptions: &diagnostics::registry::Registry)\n+                      descriptions: &diagnostics::registry::Registry,\n+                      color: diagnostic::ColorConfig)\n                       -> Compilation {\n         match matches.opt_str(\"explain\") {\n             Some(ref code) => {\n@@ -287,7 +289,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                         print!(\"{}\", &description[1..]);\n                     }\n                     None => {\n-                        early_error(&format!(\"no extended information for {}\", code));\n+                        early_error(color, &format!(\"no extended information for {}\", code));\n                     }\n                 }\n                 return Compilation::Stop;\n@@ -319,10 +321,10 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                 if should_stop == Compilation::Stop {\n                     return None;\n                 }\n-                early_error(\"no input filename given\");\n+                early_error(sopts.color, \"no input filename given\");\n             }\n             1 => panic!(\"make_input should have provided valid inputs\"),\n-            _ => early_error(\"multiple input filenames provided\")\n+            _ => early_error(sopts.color, \"multiple input filenames provided\")\n         }\n \n         None\n@@ -414,7 +416,7 @@ impl RustcDefaultCalls {\n                     println!(\"{}\", String::from_utf8(v).unwrap());\n                 }\n                 &Input::Str(_) => {\n-                    early_error(\"cannot list metadata for stdin\");\n+                    early_error(sess.opts.color, \"cannot list metadata for stdin\");\n                 }\n             }\n             return Compilation::Stop;\n@@ -441,7 +443,7 @@ impl RustcDefaultCalls {\n                 PrintRequest::CrateName => {\n                     let input = match input {\n                         Some(input) => input,\n-                        None => early_error(\"no input file provided\"),\n+                        None => early_error(sess.opts.color, \"no input file provided\"),\n                     };\n                     let attrs = attrs.as_ref().unwrap();\n                     let t_outputs = driver::build_output_filenames(input,\n@@ -701,14 +703,15 @@ pub fn handle_options(mut args: Vec<String>) -> Option<getopts::Matches> {\n                             &opt.opt_group.short_name\n                         };\n                         if m.opt_present(opt_name) {\n-                            early_error(&format!(\"use of unstable option '{}' requires \\\n-                                                  -Z unstable-options\", opt_name));\n+                            early_error(diagnostic::Auto, &format!(\"use of unstable option '{}' \\\n+                                                                    requires -Z unstable-options\",\n+                                                                   opt_name));\n                         }\n                     }\n                 }\n                 m\n             }\n-            Err(f) => early_error(&f.to_string())\n+            Err(f) => early_error(diagnostic::Auto, &f.to_string())\n         }\n     }\n "}, {"sha": "933f9cab7f70640d4998e3b25a46dabfef7476ed", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71f39c1a2fd98f829a6087a7f4a47a857571493c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f39c1a2fd98f829a6087a7f4a47a857571493c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=71f39c1a2fd98f829a6087a7f4a47a857571493c", "patch": "@@ -65,6 +65,7 @@ use externalfiles::ExternalHtml;\n use serialize::Decodable;\n use serialize::json::{self, Json};\n use rustc::session::search_paths::SearchPaths;\n+use syntax::diagnostic;\n \n // reexported from `clean` so it can be easily updated with the mod itself\n pub use clean::SCHEMA_VERSION;\n@@ -227,7 +228,7 @@ pub fn main_args(args: &[String]) -> isize {\n \n     let mut libs = SearchPaths::new();\n     for s in &matches.opt_strs(\"L\") {\n-        libs.add_path(s);\n+        libs.add_path(s, diagnostic::Auto);\n     }\n     let externs = match parse_externs(&matches) {\n         Ok(ex) => ex,\n@@ -362,7 +363,7 @@ fn rust_input(cratefile: &str, externs: core::Externs, matches: &getopts::Matche\n     // First, parse the crate and extract all relevant information.\n     let mut paths = SearchPaths::new();\n     for s in &matches.opt_strs(\"L\") {\n-        paths.add_path(s);\n+        paths.add_path(s, diagnostic::Auto);\n     }\n     let cfgs = matches.opt_strs(\"cfg\");\n     let triple = matches.opt_str(\"target\");"}, {"sha": "8850f6e6d2a6e5863db91511efd4438bba2925d5", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/71f39c1a2fd98f829a6087a7f4a47a857571493c/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f39c1a2fd98f829a6087a7f4a47a857571493c/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=71f39c1a2fd98f829a6087a7f4a47a857571493c", "patch": "@@ -23,7 +23,7 @@ extern crate syntax;\n use rustc::session::Session;\n use rustc::session::config::{self, Input};\n use rustc_driver::{driver, CompilerCalls, Compilation};\n-use syntax::diagnostics;\n+use syntax::{diagnostics, diagnostic};\n \n use std::path::PathBuf;\n \n@@ -34,7 +34,8 @@ struct TestCalls {\n impl<'a> CompilerCalls<'a> for TestCalls {\n     fn early_callback(&mut self,\n                       _: &getopts::Matches,\n-                      _: &diagnostics::registry::Registry)\n+                      _: &diagnostics::registry::Registry,\n+                      _: diagnostic::ColorConfig)\n                       -> Compilation {\n         self.count *= 2;\n         Compilation::Continue"}]}