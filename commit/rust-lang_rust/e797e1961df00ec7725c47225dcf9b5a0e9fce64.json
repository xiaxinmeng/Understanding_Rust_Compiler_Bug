{"sha": "e797e1961df00ec7725c47225dcf9b5a0e9fce64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3OTdlMTk2MWRmMDBlYzc3MjVjNDcyMjVkY2Y5YjVhMGU5ZmNlNjQ=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-09T10:56:59Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-11T11:34:48Z"}, "message": "[breaking-change] don't glob export ast::MacStmtStyle", "tree": {"sha": "1742d6186f4c02a8f043d9d213d00d67b73a37d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1742d6186f4c02a8f043d9d213d00d67b73a37d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e797e1961df00ec7725c47225dcf9b5a0e9fce64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e797e1961df00ec7725c47225dcf9b5a0e9fce64", "html_url": "https://github.com/rust-lang/rust/commit/e797e1961df00ec7725c47225dcf9b5a0e9fce64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e797e1961df00ec7725c47225dcf9b5a0e9fce64/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "798974cae58639c174010fd4a6411dcdc860e404", "url": "https://api.github.com/repos/rust-lang/rust/commits/798974cae58639c174010fd4a6411dcdc860e404", "html_url": "https://github.com/rust-lang/rust/commit/798974cae58639c174010fd4a6411dcdc860e404"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "b94c033e48a58aca81f68db749db7c3bfc980d8d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e797e1961df00ec7725c47225dcf9b5a0e9fce64/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e797e1961df00ec7725c47225dcf9b5a0e9fce64/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e797e1961df00ec7725c47225dcf9b5a0e9fce64", "patch": "@@ -10,7 +10,6 @@\n \n // The Rust abstract syntax tree.\n \n-pub use self::MacStmtStyle::*;\n pub use self::MetaItem_::*;\n pub use self::Mutability::*;\n pub use self::Pat_::*;\n@@ -782,13 +781,13 @@ impl StmtKind {\n pub enum MacStmtStyle {\n     /// The macro statement had a trailing semicolon, e.g. `foo! { ... };`\n     /// `foo!(...);`, `foo![...];`\n-    MacStmtWithSemicolon,\n+    Semicolon,\n     /// The macro statement had braces; e.g. foo! { ... }\n-    MacStmtWithBraces,\n+    Braces,\n     /// The macro statement had parentheses or brackets and no semicolon; e.g.\n     /// `foo!(...)`. All of these will end up being converted into macro\n     /// expressions.\n-    MacStmtWithoutBraces,\n+    NoBraces,\n }\n \n // FIXME (pending discussion of #1697, #2178...): local should really be"}, {"sha": "6b3e25017611a9c080ec3de2dfa754d6cefdebcb", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e797e1961df00ec7725c47225dcf9b5a0e9fce64/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e797e1961df00ec7725c47225dcf9b5a0e9fce64/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e797e1961df00ec7725c47225dcf9b5a0e9fce64", "patch": "@@ -533,7 +533,7 @@ fn expand_stmt(stmt: P<Stmt>, fld: &mut MacroExpander) -> SmallVector<P<Stmt>> {\n \n     // If this is a macro invocation with a semicolon, then apply that\n     // semicolon to the final statement produced by expansion.\n-    if style == MacStmtWithSemicolon {\n+    if style == MacStmtStyle::Semicolon {\n         if let Some(stmt) = fully_expanded.pop() {\n             let new_stmt = stmt.map(|Spanned {node, span}| {\n                 Spanned {"}, {"sha": "0875d054564934e854c2c5d62fe9ac464e9a9cee", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e797e1961df00ec7725c47225dcf9b5a0e9fce64/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e797e1961df00ec7725c47225dcf9b5a0e9fce64/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e797e1961df00ec7725c47225dcf9b5a0e9fce64", "patch": "@@ -26,7 +26,7 @@ use ast::{ForeignItem, ForeignItemKind, FunctionRetTy};\n use ast::{Ident, Inherited, ImplItem, Item, ItemKind};\n use ast::{Lit, LitKind, UintTy};\n use ast::Local;\n-use ast::{MacStmtWithBraces, MacStmtWithSemicolon, MacStmtWithoutBraces};\n+use ast::MacStmtStyle;\n use ast::{MutImmutable, MutMutable, Mac_};\n use ast::{MutTy, Mutability};\n use ast::NamedField;\n@@ -3721,9 +3721,9 @@ impl<'a> Parser<'a> {\n             let hi = self.last_span.hi;\n \n             let style = if delim == token::Brace {\n-                MacStmtWithBraces\n+                MacStmtStyle::Braces\n             } else {\n-                MacStmtWithoutBraces\n+                MacStmtStyle::NoBraces\n             };\n \n             if id.name == token::special_idents::invalid.name {\n@@ -3734,7 +3734,7 @@ impl<'a> Parser<'a> {\n                 // if it has a special ident, it's definitely an item\n                 //\n                 // Require a semicolon or braces.\n-                if style != MacStmtWithBraces {\n+                if style != MacStmtStyle::Braces {\n                     if !self.eat(&token::Semi) {\n                         let last_span = self.last_span;\n                         self.span_err(last_span,\n@@ -3841,13 +3841,13 @@ impl<'a> Parser<'a> {\n                 StmtKind::Expr(e, _) => {\n                     try!(self.handle_expression_like_statement(e, span, &mut stmts, &mut expr));\n                 }\n-                StmtKind::Mac(mac, MacStmtWithoutBraces, attrs) => {\n+                StmtKind::Mac(mac, MacStmtStyle::NoBraces, attrs) => {\n                     // statement macro without braces; might be an\n                     // expr depending on whether a semicolon follows\n                     match self.token {\n                         token::Semi => {\n                             stmts.push(P(Spanned {\n-                                node: StmtKind::Mac(mac, MacStmtWithSemicolon, attrs),\n+                                node: StmtKind::Mac(mac, MacStmtStyle::Semicolon, attrs),\n                                 span: mk_sp(span.lo, self.span.hi),\n                             }));\n                             self.bump();\n@@ -3872,7 +3872,7 @@ impl<'a> Parser<'a> {\n                     match self.token {\n                         token::Semi => {\n                             stmts.push(P(Spanned {\n-                                node: StmtKind::Mac(m, MacStmtWithSemicolon, attrs),\n+                                node: StmtKind::Mac(m, MacStmtStyle::Semicolon, attrs),\n                                 span: mk_sp(span.lo, self.span.hi),\n                             }));\n                             self.bump();"}, {"sha": "2c2414e54ea19a93b932bafe27ffc4bbc5810352", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e797e1961df00ec7725c47225dcf9b5a0e9fce64/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e797e1961df00ec7725c47225dcf9b5a0e9fce64/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e797e1961df00ec7725c47225dcf9b5a0e9fce64", "patch": "@@ -1629,12 +1629,12 @@ impl<'a> State<'a> {\n                 try!(self.space_if_not_bol());\n                 try!(self.print_outer_attributes(attrs.as_attr_slice()));\n                 let delim = match style {\n-                    ast::MacStmtWithBraces => token::Brace,\n+                    ast::MacStmtStyle::Braces => token::Brace,\n                     _ => token::Paren\n                 };\n                 try!(self.print_mac(&**mac, delim));\n                 match style {\n-                    ast::MacStmtWithBraces => {}\n+                    ast::MacStmtStyle::Braces => {}\n                     _ => try!(word(&mut self.s, \";\")),\n                 }\n             }"}]}