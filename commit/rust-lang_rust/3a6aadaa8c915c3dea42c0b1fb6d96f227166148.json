{"sha": "3a6aadaa8c915c3dea42c0b1fb6d96f227166148", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNmFhZGFhOGM5MTVjM2RlYTQyYzBiMWZiNmQ5NmYyMjcxNjYxNDg=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-09-01T16:05:38Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-09-01T16:05:38Z"}, "message": "Add `opt-level` check", "tree": {"sha": "b9caf0299e33c592adaa42474d8ecd59f17c9066", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9caf0299e33c592adaa42474d8ecd59f17c9066"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a6aadaa8c915c3dea42c0b1fb6d96f227166148", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a6aadaa8c915c3dea42c0b1fb6d96f227166148", "html_url": "https://github.com/rust-lang/rust/commit/3a6aadaa8c915c3dea42c0b1fb6d96f227166148", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35c9e5f1229d8b634ebd98c49e35c74e237e17f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/35c9e5f1229d8b634ebd98c49e35c74e237e17f7", "html_url": "https://github.com/rust-lang/rust/commit/35c9e5f1229d8b634ebd98c49e35c74e237e17f7"}], "stats": {"total": 214, "additions": 67, "deletions": 147}, "files": [{"sha": "37e14004ce8415bca23be1b50c5d5eb65eb89173", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=3a6aadaa8c915c3dea42c0b1fb6d96f227166148", "patch": "@@ -6,7 +6,7 @@ use std::cell::Cell;\n use rustc::hir::def::DefKind;\n use rustc::mir::{\n     AggregateKind, Constant, Location, Place, PlaceBase, Body, Operand, Rvalue,\n-    Local, NullOp, StatementKind, Statement, LocalKind, Static, StaticKind,\n+    Local, NullOp, UnOp, StatementKind, Statement, LocalKind, Static, StaticKind,\n     TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo, BinOp, ProjectionElem,\n     SourceScope, SourceScopeLocalData, LocalDecl,\n };\n@@ -405,8 +405,20 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 }\n \n                 let arg = self.eval_operand(arg, source_info)?;\n+                let is_release_mode = self.tcx.sess.opts.debugging_opts.mir_opt_level >= 2;\n                 let val = self.use_ecx(source_info, |this| {\n                     let prim = this.ecx.read_immediate(arg)?;\n+                    match op {\n+                        UnOp::Neg => {\n+                            if is_release_mode\n+                            && prim.to_bits()? == (1 << (prim.layout.size.bits() - 1)) {\n+                                throw_panic!(OverflowNeg)\n+                            }\n+                        }\n+                        UnOp::Not => {\n+                            // Cannot overflow\n+                        }\n+                    }\n                     // Now run the actual operation.\n                     this.ecx.unary_op(op, prim)\n                 })?;\n@@ -473,7 +485,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                         Scalar::from_bool(overflow).into(),\n                     )\n                 } else {\n-                    if overflow {\n+                    if self.tcx.sess.opts.debugging_opts.mir_opt_level >= 2 && overflow {\n                         let err = err_panic!(Overflow(op)).into();\n                         let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n                         return None;"}, {"sha": "6da6addf60a1c51faeb90abf690d6fc1ade100f1", "filename": "src/test/ui/consts/const-err2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs?ref=3a6aadaa8c915c3dea42c0b1fb6d96f227166148", "patch": "@@ -14,11 +14,8 @@ fn black_box<T>(_: T) {\n fn main() {\n     let a = -std::i8::MIN;\n     let b = 200u8 + 200u8 + 200u8;\n-    //~^ ERROR const_err\n     let c = 200u8 * 4;\n-    //~^ ERROR const_err\n     let d = 42u8 - (42u8 + 1);\n-    //~^ ERROR const_err\n     let _e = [5u8][1];\n     //~^ ERROR const_err\n     black_box(a);"}, {"sha": "30855fd215ff38638d98eaea8c45251d2cb3faae", "filename": "src/test/ui/consts/const-err2.stderr", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr?ref=3a6aadaa8c915c3dea42c0b1fb6d96f227166148", "patch": "@@ -1,32 +1,14 @@\n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:16:13\n+error: index out of bounds: the len is 1 but the index is 1\n+  --> $DIR/const-err2.rs:19:14\n    |\n-LL |     let b = 200u8 + 200u8 + 200u8;\n-   |             ^^^^^^^^^^^^^ attempt to add with overflow\n+LL |     let _e = [5u8][1];\n+   |              ^^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/const-err2.rs:8:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:18:13\n-   |\n-LL |     let c = 200u8 * 4;\n-   |             ^^^^^^^^^ attempt to multiply with overflow\n-\n-error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:20:13\n-   |\n-LL |     let d = 42u8 - (42u8 + 1);\n-   |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n-\n-error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-err2.rs:22:14\n-   |\n-LL |     let _e = [5u8][1];\n-   |              ^^^^^^^^\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to previous error\n "}, {"sha": "a9a7a66fe614fda13e748f3586790c79e01b3f46", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=3a6aadaa8c915c3dea42c0b1fb6d96f227166148", "patch": "@@ -5,7 +5,6 @@\n fn main() {\n     println!(\"{}\", 0u32 - 1);\n     let _x = 0u32 - 1;\n-    //~^ ERROR this expression will panic at runtime [const_err]\n     println!(\"{}\", 1/(1-1));\n     //~^ ERROR attempt to divide by zero [const_err]\n     //~| ERROR reaching this expression at runtime will panic or abort [const_err]"}, {"sha": "3940fa13d7892a13f8464e8e700ac5e07f1b16ab", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=3a6aadaa8c915c3dea42c0b1fb6d96f227166148", "patch": "@@ -1,62 +1,56 @@\n-error: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:7:14\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors.rs:8:20\n    |\n-LL |     let _x = 0u32 - 1;\n-   |              ^^^^^^^^ attempt to subtract with overflow\n+LL |     println!(\"{}\", 1/(1-1));\n+   |                    ^^^^^^^\n    |\n note: lint level defined here\n   --> $DIR/promoted_errors.rs:3:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n-error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:9:20\n-   |\n-LL |     println!(\"{}\", 1/(1-1));\n-   |                    ^^^^^^^\n-\n error: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:9:20\n+  --> $DIR/promoted_errors.rs:8:20\n    |\n LL |     println!(\"{}\", 1/(1-1));\n    |                    ^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:12:14\n+  --> $DIR/promoted_errors.rs:11:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:12:14\n+  --> $DIR/promoted_errors.rs:11:14\n    |\n LL |     let _x = 1/(1-1);\n    |              ^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:15:20\n+  --> $DIR/promoted_errors.rs:14:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^\n \n error: reaching this expression at runtime will panic or abort\n-  --> $DIR/promoted_errors.rs:15:20\n+  --> $DIR/promoted_errors.rs:14:20\n    |\n LL |     println!(\"{}\", 1/(false as u32));\n    |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/promoted_errors.rs:18:14\n+  --> $DIR/promoted_errors.rs:17:14\n    |\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/promoted_errors.rs:18:14\n+  --> $DIR/promoted_errors.rs:17:14\n    |\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^ attempt to divide by zero\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "5160c9e72a9c4587d0d3fc67773e4e98dfb605c7", "filename": "src/test/ui/issues/issue-8171-default-method-self-inherit-builtin-trait.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/src%2Ftest%2Fui%2Fissues%2Fissue-8171-default-method-self-inherit-builtin-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/src%2Ftest%2Fui%2Fissues%2Fissue-8171-default-method-self-inherit-builtin-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8171-default-method-self-inherit-builtin-trait.stderr?ref=3a6aadaa8c915c3dea42c0b1fb6d96f227166148", "patch": "@@ -0,0 +1,6 @@\n+error: failed to remove $TEST_BUILD_DIR/issues/issue-8171-default-method-self-inherit-builtin-trait/issue-8171-default-method-self-inherit-builtin-trait.issue_8171_default_method_self_inherit_builtin_trait.7rcbfp3g-cgu.0.rcgu.o: \u6307\u5b9a\u3055\u308c\u305f\u30d1\u30b9\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002 (os error 3)\n+\n+error: failed to remove $TEST_BUILD_DIR/issues/issue-8171-default-method-self-inherit-builtin-trait/issue-8171-default-method-self-inherit-builtin-trait.issue_8171_default_method_self_inherit_builtin_trait.7rcbfp3g-cgu.1.rcgu.o: \u6307\u5b9a\u3055\u308c\u305f\u30d1\u30b9\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002 (os error 3)\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "6a5b98fa9b190b5806ca7cacb7757e0a60487a94", "filename": "src/test/ui/issues/issue-8460-const.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs?ref=3a6aadaa8c915c3dea42c0b1fb6d96f227166148", "patch": "@@ -6,19 +6,14 @@ use std::thread;\n fn main() {\n     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n     //~^ ERROR attempt to divide with overflow\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n     //~^ ERROR attempt to divide by zero\n     //~| ERROR this expression will panic at runtime\n@@ -36,19 +31,14 @@ fn main() {\n     //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with overflow\n-    //~| ERROR this expression will panic at runtime\n     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n     //~^ ERROR attempt to calculate the remainder with a divisor of zero\n     //~| ERROR this expression will panic at runtime"}, {"sha": "b9fbf0bdaa6098d5403530cbd612dd83b655df1c", "filename": "src/test/ui/issues/issue-8460-const.stderr", "status": "modified", "additions": 30, "deletions": 90, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a6aadaa8c915c3dea42c0b1fb6d96f227166148/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr?ref=3a6aadaa8c915c3dea42c0b1fb6d96f227166148", "patch": "@@ -10,239 +10,179 @@ note: lint level defined here\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:7:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n-\n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:10:36\n+  --> $DIR/issue-8460-const.rs:9:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:10:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n-\n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:13:36\n+  --> $DIR/issue-8460-const.rs:11:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:13:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n-\n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:16:36\n+  --> $DIR/issue-8460-const.rs:13:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:16:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n-\n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:19:36\n+  --> $DIR/issue-8460-const.rs:15:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:19:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n-\n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:22:36\n+  --> $DIR/issue-8460-const.rs:17:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:22:36\n+  --> $DIR/issue-8460-const.rs:17:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:25:36\n+  --> $DIR/issue-8460-const.rs:20:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:25:36\n+  --> $DIR/issue-8460-const.rs:20:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:28:36\n+  --> $DIR/issue-8460-const.rs:23:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:28:36\n+  --> $DIR/issue-8460-const.rs:23:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:31:36\n+  --> $DIR/issue-8460-const.rs:26:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:31:36\n+  --> $DIR/issue-8460-const.rs:26:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:34:36\n+  --> $DIR/issue-8460-const.rs:29:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:34:36\n+  --> $DIR/issue-8460-const.rs:29:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide by zero\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:37:36\n+  --> $DIR/issue-8460-const.rs:32:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:37:36\n-   |\n-LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:40:36\n+  --> $DIR/issue-8460-const.rs:34:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:40:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:43:36\n+  --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:43:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:46:36\n+  --> $DIR/issue-8460-const.rs:38:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:46:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:49:36\n+  --> $DIR/issue-8460-const.rs:40:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n-error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:49:36\n-   |\n-LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-   |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n-\n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:52:36\n+  --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:52:36\n+  --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:55:36\n+  --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:55:36\n+  --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:58:36\n+  --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:58:36\n+  --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:61:36\n+  --> $DIR/issue-8460-const.rs:51:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:61:36\n+  --> $DIR/issue-8460-const.rs:51:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:64:36\n+  --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:64:36\n+  --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n-error: aborting due to 40 previous errors\n+error: aborting due to 30 previous errors\n "}]}