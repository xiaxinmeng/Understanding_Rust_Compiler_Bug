{"sha": "4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlZWMwM2QzM2UwYTgzM2NiNDg5OThmNWQ4ZTQ3YzAxYjllMzJjZjQ=", "commit": {"author": {"name": "sd234678", "email": "sd234678@protonmail.com", "date": "2019-08-19T21:31:46Z"}, "committer": {"name": "sd234678", "email": "sd234678@protonmail.com", "date": "2019-08-19T21:31:46Z"}, "message": "Cherry-pick src/test changes with Centril's changes", "tree": {"sha": "1fcbcf2cfb532ca21bec2fcfdd2f312b278a74d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fcbcf2cfb532ca21bec2fcfdd2f312b278a74d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "html_url": "https://github.com/rust-lang/rust/commit/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/comments", "author": {"login": "sd234678", "id": 48051938, "node_id": "MDQ6VXNlcjQ4MDUxOTM4", "avatar_url": "https://avatars.githubusercontent.com/u/48051938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sd234678", "html_url": "https://github.com/sd234678", "followers_url": "https://api.github.com/users/sd234678/followers", "following_url": "https://api.github.com/users/sd234678/following{/other_user}", "gists_url": "https://api.github.com/users/sd234678/gists{/gist_id}", "starred_url": "https://api.github.com/users/sd234678/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sd234678/subscriptions", "organizations_url": "https://api.github.com/users/sd234678/orgs", "repos_url": "https://api.github.com/users/sd234678/repos", "events_url": "https://api.github.com/users/sd234678/events{/privacy}", "received_events_url": "https://api.github.com/users/sd234678/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sd234678", "id": 48051938, "node_id": "MDQ6VXNlcjQ4MDUxOTM4", "avatar_url": "https://avatars.githubusercontent.com/u/48051938?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sd234678", "html_url": "https://github.com/sd234678", "followers_url": "https://api.github.com/users/sd234678/followers", "following_url": "https://api.github.com/users/sd234678/following{/other_user}", "gists_url": "https://api.github.com/users/sd234678/gists{/gist_id}", "starred_url": "https://api.github.com/users/sd234678/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sd234678/subscriptions", "organizations_url": "https://api.github.com/users/sd234678/orgs", "repos_url": "https://api.github.com/users/sd234678/repos", "events_url": "https://api.github.com/users/sd234678/events{/privacy}", "received_events_url": "https://api.github.com/users/sd234678/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14890954ce17c44d944eda988c5a64bb4c5ec9eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/14890954ce17c44d944eda988c5a64bb4c5ec9eb", "html_url": "https://github.com/rust-lang/rust/commit/14890954ce17c44d944eda988c5a64bb4c5ec9eb"}], "stats": {"total": 434, "additions": 207, "deletions": 227}, "files": [{"sha": "7aadc8a095498a56fbe19d2e1f1b2d07ec5fb9bf", "filename": "src/test/codegen/issue-45222.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fcodegen%2Fissue-45222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fcodegen%2Fissue-45222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-45222.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -5,7 +5,6 @@\n \n // verify that LLVM recognizes a loop involving 0..=n and will const-fold it.\n \n-//------------------------------------------------------------------------------\n // Example from original issue #45222\n \n fn foo2(n: u64) -> u64 {\n@@ -25,7 +24,6 @@ pub fn check_foo2() -> u64 {\n     foo2(100000)\n }\n \n-//------------------------------------------------------------------------------\n // Simplified example of #45222\n \n fn triangle_inc(n: u64) -> u64 {\n@@ -43,7 +41,6 @@ pub fn check_triangle_inc() -> u64 {\n     triangle_inc(100000)\n }\n \n-//------------------------------------------------------------------------------\n // Demo in #48012\n \n fn foo3r(n: u64) -> u64 {"}, {"sha": "50d3657d417f38cc1a9549a429fb95501a72a3d5", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -18,7 +18,7 @@ fn callee1(_x: u32, _y: i64) {}\n fn callee2(_x: u32, _y: i64) {}\n \n \n-// Change Callee (Function) ----------------------------------------------------\n+// Change Callee (Function)\n #[cfg(cfail1)]\n pub fn change_callee_function() {\n     callee1(1, 2)\n@@ -33,7 +33,7 @@ pub fn change_callee_function() {\n \n \n \n-// Change Argument (Function) --------------------------------------------------\n+// Change Argument (Function)\n #[cfg(cfail1)]\n pub fn change_argument_function() {\n     callee1(1, 2)\n@@ -48,7 +48,7 @@ pub fn change_argument_function() {\n \n \n \n-// Change Callee Indirectly (Function) -----------------------------------------\n+// Change Callee Indirectly (Function)\n mod change_callee_indirectly_function {\n     #[cfg(cfail1)]\n     use super::callee1 as callee;\n@@ -73,7 +73,7 @@ impl Struct {\n     fn method2(&self, _x: char, _y: bool) {}\n }\n \n-// Change Callee (Method) ------------------------------------------------------\n+// Change Callee (Method)\n #[cfg(cfail1)]\n pub fn change_callee_method() {\n     let s = Struct;\n@@ -90,7 +90,7 @@ pub fn change_callee_method() {\n \n \n \n-// Change Argument (Method) ----------------------------------------------------\n+// Change Argument (Method)\n #[cfg(cfail1)]\n pub fn change_argument_method() {\n     let s = Struct;\n@@ -107,7 +107,7 @@ pub fn change_argument_method() {\n \n \n \n-// Change Callee (Method, UFCS) ------------------------------------------------\n+// Change Callee (Method, UFCS)\n #[cfg(cfail1)]\n pub fn change_ufcs_callee_method() {\n     let s = Struct;\n@@ -124,7 +124,7 @@ pub fn change_ufcs_callee_method() {\n \n \n \n-// Change Argument (Method, UFCS) ----------------------------------------------\n+// Change Argument (Method, UFCS)\n #[cfg(cfail1)]\n pub fn change_argument_method_ufcs() {\n     let s = Struct;\n@@ -141,7 +141,7 @@ pub fn change_argument_method_ufcs() {\n \n \n \n-// Change To UFCS --------------------------------------------------------------\n+// Change To UFCS\n #[cfg(cfail1)]\n pub fn change_to_ufcs() {\n     let s = Struct;\n@@ -164,7 +164,7 @@ impl Struct2 {\n     fn method1(&self, _x: char, _y: bool) {}\n }\n \n-// Change UFCS Callee Indirectly -----------------------------------------------\n+// Change UFCS Callee Indirectly\n pub mod change_ufcs_callee_indirectly {\n     #[cfg(cfail1)]\n     use super::Struct as Struct;"}, {"sha": "08693560d0b6e7f6d4d2e06b60390785bbe6880a", "filename": "src/test/incremental/hashes/closure_expressions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fclosure_expressions.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -14,7 +14,7 @@\n #![crate_type=\"rlib\"]\n \n \n-// Change closure body ---------------------------------------------------------\n+// Change closure body\n #[cfg(cfail1)]\n pub fn change_closure_body() {\n     let _ = || 1u32;\n@@ -29,7 +29,7 @@ pub fn change_closure_body() {\n \n \n \n-// Add parameter ---------------------------------------------------------------\n+// Add parameter\n #[cfg(cfail1)]\n pub fn add_parameter() {\n     let x = 0u32;\n@@ -46,7 +46,7 @@ pub fn add_parameter() {\n \n \n \n-// Change parameter pattern ----------------------------------------------------\n+// Change parameter pattern\n #[cfg(cfail1)]\n pub fn change_parameter_pattern() {\n     let _ = |x: (u32,)| x;\n@@ -61,7 +61,7 @@ pub fn change_parameter_pattern() {\n \n \n \n-// Add `move` to closure -------------------------------------------------------\n+// Add `move` to closure\n #[cfg(cfail1)]\n pub fn add_move() {\n     let _ = || 1;\n@@ -76,7 +76,7 @@ pub fn add_move() {\n \n \n \n-// Add type ascription to parameter --------------------------------------------\n+// Add type ascription to parameter\n #[cfg(cfail1)]\n pub fn add_type_ascription_to_parameter() {\n     let closure = |x| x + 1u32;\n@@ -93,7 +93,7 @@ pub fn add_type_ascription_to_parameter() {\n \n \n \n-// Change parameter type -------------------------------------------------------\n+// Change parameter type\n #[cfg(cfail1)]\n pub fn change_parameter_type() {\n     let closure = |x: u32| (x as u64) + 1;"}, {"sha": "3d2eed89636e856243bc6e2171d8b1a8cf2b2f89", "filename": "src/test/incremental/hashes/consts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -14,7 +14,7 @@\n #![crate_type=\"rlib\"]\n \n \n-// Change const visibility ---------------------------------------------------\n+// Change const visibility\n #[cfg(cfail1)]\n const CONST_VISIBILITY: u8 = 0;\n \n@@ -24,7 +24,7 @@ const CONST_VISIBILITY: u8 = 0;\n pub const CONST_VISIBILITY: u8 = 0;\n \n \n-// Change type from i32 to u32 ------------------------------------------------\n+// Change type from i32 to u32\n #[cfg(cfail1)]\n const CONST_CHANGE_TYPE_1: i32 = 0;\n \n@@ -34,7 +34,7 @@ const CONST_CHANGE_TYPE_1: i32 = 0;\n const CONST_CHANGE_TYPE_1: u32 = 0;\n \n \n-// Change type from Option<u32> to Option<u64> --------------------------------\n+// Change type from Option<u32> to Option<u64>\n #[cfg(cfail1)]\n const CONST_CHANGE_TYPE_2: Option<u32> = None;\n \n@@ -44,7 +44,7 @@ const CONST_CHANGE_TYPE_2: Option<u32> = None;\n const CONST_CHANGE_TYPE_2: Option<u64> = None;\n \n \n-// Change value between simple literals ---------------------------------------\n+// Change value between simple literals\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_1: i16 = {\n@@ -56,7 +56,7 @@ const CONST_CHANGE_VALUE_1: i16 = {\n };\n \n \n-// Change value between expressions -------------------------------------------\n+// Change value between expressions\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_2: i16 = {\n@@ -88,7 +88,7 @@ const CONST_CHANGE_VALUE_4: i16 = {\n };\n \n \n-// Change type indirectly -----------------------------------------------------\n+// Change type indirectly\n struct ReferencedType1;\n struct ReferencedType2;\n "}, {"sha": "4b73f1371f872607ce706e1666bd1d7444d8d235", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -14,7 +14,7 @@\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n-// Change condition (if) -------------------------------------------------------\n+// Change condition (if)\n #[cfg(cfail1)]\n pub fn change_condition(x: bool) -> u32 {\n     if x {\n@@ -35,7 +35,7 @@ pub fn change_condition(x: bool) -> u32 {\n     return 0\n }\n \n-// Change then branch (if) -----------------------------------------------------\n+// Change then branch (if)\n #[cfg(cfail1)]\n pub fn change_then_branch(x: bool) -> u32 {\n     if x {\n@@ -58,7 +58,7 @@ pub fn change_then_branch(x: bool) -> u32 {\n \n \n \n-// Change else branch (if) -----------------------------------------------------\n+// Change else branch (if)\n #[cfg(cfail1)]\n pub fn change_else_branch(x: bool) -> u32 {\n     if x {\n@@ -81,7 +81,7 @@ pub fn change_else_branch(x: bool) -> u32 {\n \n \n \n-// Add else branch (if) --------------------------------------------------------\n+// Add else branch (if)\n #[cfg(cfail1)]\n pub fn add_else_branch(x: bool) -> u32 {\n     let mut ret = 1;\n@@ -109,7 +109,7 @@ pub fn add_else_branch(x: bool) -> u32 {\n \n \n \n-// Change condition (if let) ---------------------------------------------------\n+// Change condition (if let)\n #[cfg(cfail1)]\n pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n     if let Some(_x) = x {\n@@ -132,7 +132,7 @@ pub fn change_condition_if_let(x: Option<u32>) -> u32 {\n \n \n \n-// Change then branch (if let) -------------------------------------------------\n+// Change then branch (if let)\n #[cfg(cfail1)]\n pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n@@ -155,7 +155,7 @@ pub fn change_then_branch_if_let(x: Option<u32>) -> u32 {\n \n \n \n-// Change else branch (if let) -------------------------------------------------\n+// Change else branch (if let)\n #[cfg(cfail1)]\n pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n     if let Some(x) = x {\n@@ -178,7 +178,7 @@ pub fn change_else_branch_if_let(x: Option<u32>) -> u32 {\n \n \n \n-// Add else branch (if let) ----------------------------------------------------\n+// Add else branch (if let)\n #[cfg(cfail1)]\n pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\n     let mut ret = 1;"}, {"sha": "08cf19d7760282b9739fbd60ff38a9039f66c60f", "filename": "src/test/incremental/hashes/indexing_expressions.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Findexing_expressions.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -13,7 +13,7 @@\n #![feature(rustc_attrs)]\n #![crate_type=\"rlib\"]\n \n-// Change simple index ---------------------------------------------------------\n+// Change simple index\n #[cfg(cfail1)]\n fn change_simple_index(slice: &[u32]) -> u32 {\n     slice[3]\n@@ -30,7 +30,7 @@ fn change_simple_index(slice: &[u32]) -> u32 {\n \n \n \n-// Change lower bound ----------------------------------------------------------\n+// Change lower bound\n #[cfg(cfail1)]\n fn change_lower_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..5]\n@@ -47,7 +47,7 @@ fn change_lower_bound(slice: &[u32]) -> &[u32] {\n \n \n \n-// Change upper bound ----------------------------------------------------------\n+// Change upper bound\n #[cfg(cfail1)]\n fn change_upper_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..5]\n@@ -64,7 +64,7 @@ fn change_upper_bound(slice: &[u32]) -> &[u32] {\n \n \n \n-// Add lower bound -------------------------------------------------------------\n+// Add lower bound\n #[cfg(cfail1)]\n fn add_lower_bound(slice: &[u32]) -> &[u32] {\n     &slice[..4]\n@@ -81,7 +81,7 @@ fn add_lower_bound(slice: &[u32]) -> &[u32] {\n \n \n \n-// Add upper bound -------------------------------------------------------------\n+// Add upper bound\n #[cfg(cfail1)]\n fn add_upper_bound(slice: &[u32]) -> &[u32] {\n     &slice[3..]\n@@ -98,7 +98,7 @@ fn add_upper_bound(slice: &[u32]) -> &[u32] {\n \n \n \n-// Change mutability -----------------------------------------------------------\n+// Change mutability\n #[cfg(cfail1)]\n fn change_mutability(slice: &mut [u32]) -> u32 {\n     (&mut slice[3..5])[0]\n@@ -115,7 +115,7 @@ fn change_mutability(slice: &mut [u32]) -> u32 {\n \n \n \n-// Exclusive to inclusive range ------------------------------------------------\n+// Exclusive to inclusive range\n #[cfg(cfail1)]\n fn exclusive_to_inclusive_range(slice: &[u32]) -> &[u32] {\n     &slice[3..7]"}, {"sha": "c50ee73d71438c4c16b095ff2fbb80b1362d4220", "filename": "src/test/incremental/hashes/inline_asm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finline_asm.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -16,7 +16,7 @@\n \n \n \n-// Change template -------------------------------------------------------------\n+// Change template\n #[cfg(cfail1)]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_template(a: i32) -> i32 {\n@@ -51,7 +51,7 @@ pub fn change_template(a: i32) -> i32 {\n \n \n \n-// Change output -------------------------------------------------------------\n+// Change output\n #[cfg(cfail1)]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_output(a: i32) -> i32 {\n@@ -88,7 +88,7 @@ pub fn change_output(a: i32) -> i32 {\n \n \n \n-// Change input -------------------------------------------------------------\n+// Change input\n #[cfg(cfail1)]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input(_a: i32, _b: i32) -> i32 {\n@@ -123,7 +123,7 @@ pub fn change_input(_a: i32, _b: i32) -> i32 {\n \n \n \n-// Change input constraint -----------------------------------------------------\n+// Change input constraint\n #[cfg(cfail1)]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n@@ -158,7 +158,7 @@ pub fn change_input_constraint(_a: i32, _b: i32) -> i32 {\n \n \n \n-// Change clobber --------------------------------------------------------------\n+// Change clobber\n #[cfg(cfail1)]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_clobber(_a: i32) -> i32 {\n@@ -193,7 +193,7 @@ pub fn change_clobber(_a: i32) -> i32 {\n \n \n \n-// Change options --------------------------------------------------------------\n+// Change options\n #[cfg(cfail1)]\n #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n pub fn change_options(_a: i32) -> i32 {"}, {"sha": "a2222db4c59ad37a57c59ba3a4bad2525a67cee5", "filename": "src/test/incremental/hashes/loop_expressions.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Floop_expressions.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -14,7 +14,7 @@\n #![crate_type=\"rlib\"]\n \n \n-// Change loop body ------------------------------------------------------------\n+// Change loop body\n #[cfg(cfail1)]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -37,7 +37,7 @@ pub fn change_loop_body() {\n \n \n \n-// Add break -------------------------------------------------------------------\n+// Add break\n #[cfg(cfail1)]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -59,7 +59,7 @@ pub fn add_break() {\n \n \n \n-// Add loop label --------------------------------------------------------------\n+// Add loop label\n #[cfg(cfail1)]\n pub fn add_loop_label() {\n     let mut _x = 0;\n@@ -82,7 +82,7 @@ pub fn add_loop_label() {\n \n \n \n-// Add loop label to break -----------------------------------------------------\n+// Add loop label to break\n #[cfg(cfail1)]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -105,7 +105,7 @@ pub fn add_loop_label_to_break() {\n \n \n \n-// Change break label ----------------------------------------------------------\n+// Change break label\n #[cfg(cfail1)]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -132,7 +132,7 @@ pub fn change_break_label() {\n \n \n \n-// Add loop label to continue --------------------------------------------------\n+// Add loop label to continue\n #[cfg(cfail1)]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n@@ -155,7 +155,7 @@ pub fn add_loop_label_to_continue() {\n \n \n \n-// Change continue label ----------------------------------------------------------\n+// Change continue label\n #[cfg(cfail1)]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -182,7 +182,7 @@ pub fn change_continue_label() {\n \n \n \n-// Change continue to break ----------------------------------------------------\n+// Change continue to break\n #[cfg(cfail1)]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "70b0a5ab78cd7dcfa8b52e80013a0555570c5970", "filename": "src/test/incremental/hashes/panic_exprs.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fpanic_exprs.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -17,7 +17,7 @@\n #![crate_type=\"rlib\"]\n \n \n-// Indexing expression ---------------------------------------------------------\n+// Indexing expression\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn indexing(slice: &[u8]) -> u8 {\n@@ -32,7 +32,7 @@ pub fn indexing(slice: &[u8]) -> u8 {\n }\n \n \n-// Arithmetic overflow plus ----------------------------------------------------\n+// Arithmetic overflow plus\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n@@ -47,7 +47,7 @@ pub fn arithmetic_overflow_plus(val: i32) -> i32 {\n }\n \n \n-// Arithmetic overflow minus ----------------------------------------------------\n+// Arithmetic overflow minus\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n@@ -62,7 +62,7 @@ pub fn arithmetic_overflow_minus(val: i32) -> i32 {\n }\n \n \n-// Arithmetic overflow mult ----------------------------------------------------\n+// Arithmetic overflow mult\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n@@ -77,7 +77,7 @@ pub fn arithmetic_overflow_mult(val: i32) -> i32 {\n }\n \n \n-// Arithmetic overflow negation ------------------------------------------------\n+// Arithmetic overflow negation\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n@@ -92,7 +92,7 @@ pub fn arithmetic_overflow_negation(val: i32) -> i32 {\n }\n \n \n-// Division by zero ------------------------------------------------------------\n+// Division by zero\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn division_by_zero(val: i32) -> i32 {\n@@ -106,7 +106,7 @@ pub fn division_by_zero(val: i32) -> i32 {\n     }\n }\n \n-// Division by zero ------------------------------------------------------------\n+// Division by zero\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn mod_by_zero(val: i32) -> i32 {\n@@ -121,7 +121,7 @@ pub fn mod_by_zero(val: i32) -> i32 {\n }\n \n \n-// shift left ------------------------------------------------------------------\n+// shift left\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn shift_left(val: i32, shift: usize) -> i32 {\n@@ -136,7 +136,7 @@ pub fn shift_left(val: i32, shift: usize) -> i32 {\n }\n \n \n-// shift right ------------------------------------------------------------------\n+// shift right\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,optimized_mir\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn shift_right(val: i32, shift: usize) -> i32 {"}, {"sha": "d70ebb08b715a74e71820476443772c6a1000515", "filename": "src/test/incremental/hashes/statics.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -16,7 +16,7 @@\n #![crate_type=\"rlib\"]\n \n \n-// Change static visibility ---------------------------------------------------\n+// Change static visibility\n #[cfg(cfail1)]\n static STATIC_VISIBILITY: u8 = 0;\n \n@@ -26,7 +26,7 @@ static STATIC_VISIBILITY: u8 = 0;\n pub static STATIC_VISIBILITY: u8 = 0;\n \n \n-// Change static mutability ---------------------------------------------------\n+// Change static mutability\n #[cfg(cfail1)]\n static STATIC_MUTABILITY: u8 = 0;\n \n@@ -36,7 +36,7 @@ static STATIC_MUTABILITY: u8 = 0;\n static mut STATIC_MUTABILITY: u8 = 0;\n \n \n-// Add linkage attribute ------------------------------------------------------\n+// Add linkage attribute\n #[cfg(cfail1)]\n static STATIC_LINKAGE: u8 = 0;\n \n@@ -47,7 +47,7 @@ static STATIC_LINKAGE: u8 = 0;\n static STATIC_LINKAGE: u8 = 0;\n \n \n-// Add no_mangle attribute ----------------------------------------------------\n+// Add no_mangle attribute\n #[cfg(cfail1)]\n static STATIC_NO_MANGLE: u8 = 0;\n \n@@ -58,7 +58,7 @@ static STATIC_NO_MANGLE: u8 = 0;\n static STATIC_NO_MANGLE: u8 = 0;\n \n \n-// Add thread_local attribute -------------------------------------------------\n+// Add thread_local attribute\n #[cfg(cfail1)]\n static STATIC_THREAD_LOCAL: u8 = 0;\n \n@@ -69,7 +69,7 @@ static STATIC_THREAD_LOCAL: u8 = 0;\n static STATIC_THREAD_LOCAL: u8 = 0;\n \n \n-// Change type from i16 to u64 ------------------------------------------------\n+// Change type from i16 to u64\n #[cfg(cfail1)]\n static STATIC_CHANGE_TYPE_1: i16 = 0;\n \n@@ -79,7 +79,7 @@ static STATIC_CHANGE_TYPE_1: i16 = 0;\n static STATIC_CHANGE_TYPE_1: u64 = 0;\n \n \n-// Change type from Option<i8> to Option<u16> ---------------------------------\n+// Change type from Option<i8> to Option<u16>\n #[cfg(cfail1)]\n static STATIC_CHANGE_TYPE_2: Option<i8> = None;\n \n@@ -89,7 +89,7 @@ static STATIC_CHANGE_TYPE_2: Option<i8> = None;\n static STATIC_CHANGE_TYPE_2: Option<u16> = None;\n \n \n-// Change value between simple literals ---------------------------------------\n+// Change value between simple literals\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_1: i16 = {\n@@ -101,7 +101,7 @@ static STATIC_CHANGE_VALUE_1: i16 = {\n };\n \n \n-// Change value between expressions -------------------------------------------\n+// Change value between expressions\n #[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_2: i16 = {\n@@ -133,7 +133,7 @@ static STATIC_CHANGE_VALUE_4: i16 = {\n };\n \n \n-// Change type indirectly -----------------------------------------------------\n+// Change type indirectly\n struct ReferencedType1;\n struct ReferencedType2;\n "}, {"sha": "456d5e74751ae82b6ba1d7482533a5ff6116681a", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -20,7 +20,7 @@ pub struct RegularStruct {\n     z: i16,\n }\n \n-// Change field value (regular struct) -----------------------------------------\n+// Change field value (regular struct)\n #[cfg(cfail1)]\n pub fn change_field_value_regular_struct() -> RegularStruct {\n     RegularStruct {\n@@ -43,7 +43,7 @@ pub fn change_field_value_regular_struct() -> RegularStruct {\n \n \n \n-// Change field order (regular struct) -----------------------------------------\n+// Change field order (regular struct)\n #[cfg(cfail1)]\n pub fn change_field_order_regular_struct() -> RegularStruct {\n     RegularStruct {\n@@ -66,7 +66,7 @@ pub fn change_field_order_regular_struct() -> RegularStruct {\n \n \n \n-// Add field (regular struct) --------------------------------------------------\n+// Add field (regular struct)\n #[cfg(cfail1)]\n pub fn add_field_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n@@ -100,7 +100,7 @@ pub fn add_field_regular_struct() -> RegularStruct {\n \n \n \n-// Change field label (regular struct) -----------------------------------------\n+// Change field label (regular struct)\n #[cfg(cfail1)]\n pub fn change_field_label_regular_struct() -> RegularStruct {\n     let struct1 = RegularStruct {\n@@ -141,7 +141,7 @@ pub struct RegularStruct2 {\n     z: i8,\n }\n \n-// Change constructor path (regular struct) ------------------------------------\n+// Change constructor path (regular struct)\n #[cfg(cfail1)]\n pub fn change_constructor_path_regular_struct() {\n     let _ = RegularStruct {\n@@ -164,7 +164,7 @@ pub fn change_constructor_path_regular_struct() {\n \n \n \n-// Change constructor path indirectly (regular struct) -------------------------\n+// Change constructor path indirectly (regular struct)\n pub mod change_constructor_path_indirectly_regular_struct {\n     #[cfg(cfail1)]\n     use super::RegularStruct as Struct;\n@@ -189,7 +189,7 @@ pub mod change_constructor_path_indirectly_regular_struct {\n \n pub struct TupleStruct(i32, i64, i16);\n \n-// Change field value (tuple struct) -------------------------------------------\n+// Change field value (tuple struct)\n #[cfg(cfail1)]\n pub fn change_field_value_tuple_struct() -> TupleStruct {\n     TupleStruct(0, 1, 2)\n@@ -206,7 +206,7 @@ pub fn change_field_value_tuple_struct() -> TupleStruct {\n \n pub struct TupleStruct2(u16, u16, u16);\n \n-// Change constructor path (tuple struct) --------------------------------------\n+// Change constructor path (tuple struct)\n #[cfg(cfail1)]\n pub fn change_constructor_path_tuple_struct() {\n     let _ = TupleStruct(0, 1, 2);\n@@ -221,7 +221,7 @@ pub fn change_constructor_path_tuple_struct() {\n \n \n \n-// Change constructor path indirectly (tuple struct) ---------------------------\n+// Change constructor path indirectly (tuple struct)\n pub mod change_constructor_path_indirectly_tuple_struct {\n     #[cfg(cfail1)]\n     use super::TupleStruct as Struct;"}, {"sha": "81ff99533fc916aca0fd10fc2ce546765d4b13c0", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 60, "deletions": 61, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -21,7 +21,7 @@\n #![feature(intrinsics)]\n \n \n-// Change trait visibility --------------------------------------------------------\n+// Change trait visibility\n #[cfg(cfail1)]\n trait TraitVisibility { }\n \n@@ -32,7 +32,7 @@ pub trait TraitVisibility { }\n \n \n \n-// Change trait unsafety ----------------------------------------------------------\n+// Change trait unsafety\n #[cfg(cfail1)]\n trait TraitUnsafety { }\n \n@@ -43,7 +43,7 @@ unsafe trait TraitUnsafety { }\n \n \n \n-// Add method ---------------------------------------------------------------------\n+// Add method\n #[cfg(cfail1)]\n trait TraitAddMethod {\n }\n@@ -57,7 +57,7 @@ pub trait TraitAddMethod {\n \n \n \n-// Change name of method ----------------------------------------------------------\n+// Change name of method\n #[cfg(cfail1)]\n trait TraitChangeMethodName {\n     fn method();\n@@ -72,7 +72,7 @@ trait TraitChangeMethodName {\n \n \n \n-// Add return type to method ------------------------------------------------------\n+// Add return type to method\n #[cfg(cfail1)]\n trait TraitAddReturnType {\n     fn method();\n@@ -89,7 +89,7 @@ trait TraitAddReturnType {\n \n \n \n-// Change return type of method ---------------------------------------------------\n+// Change return type of method\n #[cfg(cfail1)]\n trait TraitChangeReturnType {\n     fn method() -> u32;\n@@ -106,7 +106,7 @@ trait TraitChangeReturnType {\n \n \n \n-// Add parameter to method --------------------------------------------------------\n+// Add parameter to method\n #[cfg(cfail1)]\n trait TraitAddParameterToMethod {\n     fn method();\n@@ -123,7 +123,7 @@ trait TraitAddParameterToMethod {\n \n \n \n-// Change name of method parameter ------------------------------------------------\n+// Change name of method parameter\n #[cfg(cfail1)]\n trait TraitChangeMethodParameterName {\n     fn method(a: u32);\n@@ -148,7 +148,7 @@ trait TraitChangeMethodParameterName {\n \n \n \n-// Change type of method parameter (i32 => i64) -----------------------------------\n+// Change type of method parameter (i32 => i64)\n #[cfg(cfail1)]\n trait TraitChangeMethodParameterType {\n     fn method(a: i32);\n@@ -165,7 +165,7 @@ trait TraitChangeMethodParameterType {\n \n \n \n-// Change type of method parameter (&i32 => &mut i32) -----------------------------\n+// Change type of method parameter (&i32 => &mut i32)\n #[cfg(cfail1)]\n trait TraitChangeMethodParameterTypeRef {\n     fn method(a: &i32);\n@@ -182,7 +182,7 @@ trait TraitChangeMethodParameterTypeRef {\n \n \n \n-// Change order of method parameters ----------------------------------------------\n+// Change order of method parameters\n #[cfg(cfail1)]\n trait TraitChangeMethodParametersOrder {\n     fn method(a: i32, b: i64);\n@@ -199,7 +199,7 @@ trait TraitChangeMethodParametersOrder {\n \n \n \n-// Add default implementation to method -------------------------------------------\n+// Add default implementation to method\n #[cfg(cfail1)]\n trait TraitAddMethodAutoImplementation {\n     fn method();\n@@ -216,7 +216,7 @@ trait TraitAddMethodAutoImplementation {\n \n \n \n-// Change order of methods --------------------------------------------------------\n+// Change order of methods\n #[cfg(cfail1)]\n trait TraitChangeOrderOfMethods {\n     fn method0();\n@@ -233,7 +233,7 @@ trait TraitChangeOrderOfMethods {\n \n \n \n-// Change mode of self parameter --------------------------------------------------\n+// Change mode of self parameter\n #[cfg(cfail1)]\n trait TraitChangeModeSelfRefToMut {\n     fn method(&self);\n@@ -284,7 +284,7 @@ trait TraitChangeModeSelfOwnToRef {\n \n \n \n-// Add unsafe modifier to method --------------------------------------------------\n+// Add unsafe modifier to method\n #[cfg(cfail1)]\n trait TraitAddUnsafeModifier {\n     fn method();\n@@ -301,7 +301,7 @@ trait TraitAddUnsafeModifier {\n \n \n \n-// Add extern modifier to method --------------------------------------------------\n+// Add extern modifier to method\n #[cfg(cfail1)]\n trait TraitAddExternModifier {\n     fn method();\n@@ -318,7 +318,7 @@ trait TraitAddExternModifier {\n \n \n \n-// Change extern \"C\" to extern \"rust-intrinsic\" -----------------------------------\n+// Change extern \"C\" to extern \"rust-intrinsic\"\n #[cfg(cfail1)]\n trait TraitChangeExternCToRustIntrinsic {\n     extern \"C\" fn method();\n@@ -335,7 +335,7 @@ trait TraitChangeExternCToRustIntrinsic {\n \n \n \n-// Add type parameter to method ---------------------------------------------------\n+// Add type parameter to method\n #[cfg(cfail1)]\n trait TraitAddTypeParameterToMethod {\n     fn method();\n@@ -352,7 +352,7 @@ trait TraitAddTypeParameterToMethod {\n \n \n \n-// Add lifetime parameter to method -----------------------------------------------\n+// Add lifetime parameter to method\n #[cfg(cfail1)]\n trait TraitAddLifetimeParameterToMethod {\n     fn method();\n@@ -373,7 +373,7 @@ trait TraitAddLifetimeParameterToMethod {\n trait ReferencedTrait0 { }\n trait ReferencedTrait1 { }\n \n-// Add trait bound to method type parameter ---------------------------------------\n+// Add trait bound to method type parameter\n #[cfg(cfail1)]\n trait TraitAddTraitBoundToMethodTypeParameter {\n     fn method<T>();\n@@ -390,7 +390,7 @@ trait TraitAddTraitBoundToMethodTypeParameter {\n \n \n \n-// Add builtin bound to method type parameter -------------------------------------\n+// Add builtin bound to method type parameter\n #[cfg(cfail1)]\n trait TraitAddBuiltinBoundToMethodTypeParameter {\n     fn method<T>();\n@@ -407,7 +407,7 @@ trait TraitAddBuiltinBoundToMethodTypeParameter {\n \n \n \n-// Add lifetime bound to method lifetime parameter ------------------------------------\n+// Add lifetime bound to method lifetime parameter\n #[cfg(cfail1)]\n trait TraitAddLifetimeBoundToMethodLifetimeParameter {\n     fn method<'a, 'b>(a: &'a u32, b: &'b u32);\n@@ -424,7 +424,7 @@ trait TraitAddLifetimeBoundToMethodLifetimeParameter {\n \n \n \n-// Add second trait bound to method type parameter --------------------------------\n+// Add second trait bound to method type parameter\n #[cfg(cfail1)]\n trait TraitAddSecondTraitBoundToMethodTypeParameter {\n     fn method<T: ReferencedTrait0>();\n@@ -441,7 +441,7 @@ trait TraitAddSecondTraitBoundToMethodTypeParameter {\n \n \n \n-// Add second builtin bound to method type parameter ------------------------------\n+// Add second builtin bound to method type parameter\n #[cfg(cfail1)]\n trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n     fn method<T: Sized>();\n@@ -458,7 +458,7 @@ trait TraitAddSecondBuiltinBoundToMethodTypeParameter {\n \n \n \n-// Add second lifetime bound to method lifetime parameter -----------------------------\n+// Add second lifetime bound to method lifetime parameter\n #[cfg(cfail1)]\n trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n     fn method<'a, 'b, 'c: 'a>(a: &'a u32, b: &'b u32, c: &'c u32);\n@@ -475,7 +475,7 @@ trait TraitAddSecondLifetimeBoundToMethodLifetimeParameter {\n \n \n \n-// Add associated type ------------------------------------------------------------\n+// Add associated type\n #[cfg(cfail1)]\n trait TraitAddAssociatedType {\n \n@@ -495,7 +495,7 @@ trait TraitAddAssociatedType {\n \n \n \n-// Add trait bound to associated type ---------------------------------------------\n+// Add trait bound to associated type\n #[cfg(cfail1)]\n trait TraitAddTraitBoundToAssociatedType {\n     type Associated;\n@@ -519,7 +519,7 @@ trait TraitAddTraitBoundToAssociatedType {\n \n \n \n-// Add lifetime bound to associated type ------------------------------------------\n+// Add lifetime bound to associated type\n #[cfg(cfail1)]\n trait TraitAddLifetimeBoundToAssociatedType<'a> {\n     type Associated;\n@@ -540,7 +540,7 @@ trait TraitAddLifetimeBoundToAssociatedType<'a> {\n \n \n \n-// Add default to associated type -------------------------------------------------\n+// Add default to associated type\n #[cfg(cfail1)]\n trait TraitAddDefaultToAssociatedType {\n     type Associated;\n@@ -561,7 +561,7 @@ trait TraitAddDefaultToAssociatedType {\n \n \n \n-// Add associated constant --------------------------------------------------------\n+// Add associated constant\n #[cfg(cfail1)]\n trait TraitAddAssociatedConstant {\n     fn method();\n@@ -578,7 +578,7 @@ trait TraitAddAssociatedConstant {\n \n \n \n-// Add initializer to associated constant -----------------------------------------\n+// Add initializer to associated constant\n #[cfg(cfail1)]\n trait TraitAddInitializerToAssociatedConstant {\n     const Value: u32;\n@@ -601,7 +601,7 @@ trait TraitAddInitializerToAssociatedConstant {\n \n \n \n-// Change type of associated constant ---------------------------------------------\n+// Change type of associated constant\n #[cfg(cfail1)]\n trait TraitChangeTypeOfAssociatedConstant {\n     const Value: u32;\n@@ -624,7 +624,7 @@ trait TraitChangeTypeOfAssociatedConstant {\n \n \n \n-// Add super trait ----------------------------------------------------------------\n+// Add super trait\n #[cfg(cfail1)]\n trait TraitAddSuperTrait { }\n \n@@ -635,7 +635,7 @@ trait TraitAddSuperTrait : ReferencedTrait0 { }\n \n \n \n-// Add builtin bound (Send or Copy) -----------------------------------------------\n+// Add builtin bound (Send or Copy)\n #[cfg(cfail1)]\n trait TraitAddBuiltiBound { }\n \n@@ -646,7 +646,7 @@ trait TraitAddBuiltiBound : Send { }\n \n \n \n-// Add 'static lifetime bound to trait --------------------------------------------\n+// Add 'static lifetime bound to trait\n #[cfg(cfail1)]\n trait TraitAddStaticLifetimeBound { }\n \n@@ -657,7 +657,7 @@ trait TraitAddStaticLifetimeBound : 'static { }\n \n \n \n-// Add super trait as second bound ------------------------------------------------\n+// Add super trait as second bound\n #[cfg(cfail1)]\n trait TraitAddTraitAsSecondBound : ReferencedTrait0 { }\n \n@@ -676,7 +676,7 @@ trait TraitAddTraitAsSecondBoundFromBuiltin : Send + ReferencedTrait0 { }\n \n \n \n-// Add builtin bound as second bound ----------------------------------------------\n+// Add builtin bound as second bound\n #[cfg(cfail1)]\n trait TraitAddBuiltinBoundAsSecondBound : ReferencedTrait0 { }\n \n@@ -695,7 +695,7 @@ trait TraitAddBuiltinBoundAsSecondBoundFromBuiltin: Send + Copy { }\n \n \n \n-// Add 'static bounds as second bound ---------------------------------------------\n+// Add 'static bounds as second bound\n #[cfg(cfail1)]\n trait TraitAddStaticBoundAsSecondBound : ReferencedTrait0 { }\n \n@@ -714,7 +714,7 @@ trait TraitAddStaticBoundAsSecondBoundFromBuiltin : Send + 'static { }\n \n \n \n-// Add type parameter to trait ----------------------------------------------------\n+// Add type parameter to trait\n #[cfg(cfail1)]\n trait TraitAddTypeParameterToTrait { }\n \n@@ -725,7 +725,7 @@ trait TraitAddTypeParameterToTrait<T> { }\n \n \n \n-// Add lifetime parameter to trait ------------------------------------------------\n+// Add lifetime parameter to trait\n #[cfg(cfail1)]\n trait TraitAddLifetimeParameterToTrait { }\n \n@@ -736,7 +736,7 @@ trait TraitAddLifetimeParameterToTrait<'a> { }\n \n \n \n-// Add trait bound to type parameter of trait -------------------------------------\n+// Add trait bound to type parameter of trait\n #[cfg(cfail1)]\n trait TraitAddTraitBoundToTypeParameterOfTrait<T> { }\n \n@@ -747,7 +747,7 @@ trait TraitAddTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0> { }\n \n \n \n-// Add lifetime bound to type parameter of trait ----------------------------------\n+// Add lifetime bound to type parameter of trait\n #[cfg(cfail1)]\n trait TraitAddLifetimeBoundToTypeParameterOfTrait<'a, T> { }\n \n@@ -758,7 +758,7 @@ trait TraitAddLifetimeBoundToTypeParameterOfTrait<'a, T: 'a> { }\n \n \n \n-// Add lifetime bound to lifetime parameter of trait ------------------------------\n+// Add lifetime bound to lifetime parameter of trait\n #[cfg(cfail1)]\n trait TraitAddLifetimeBoundToLifetimeParameterOfTrait<'a, 'b> { }\n \n@@ -769,7 +769,7 @@ trait TraitAddLifetimeBoundToLifetimeParameterOfTrait<'a: 'b, 'b> { }\n \n \n \n-// Add builtin bound to type parameter of trait -----------------------------------\n+// Add builtin bound to type parameter of trait\n #[cfg(cfail1)]\n trait TraitAddBuiltinBoundToTypeParameterOfTrait<T> { }\n \n@@ -780,7 +780,7 @@ trait TraitAddBuiltinBoundToTypeParameterOfTrait<T: Send> { }\n \n \n \n-// Add second type parameter to trait ---------------------------------------------\n+// Add second type parameter to trait\n #[cfg(cfail1)]\n trait TraitAddSecondTypeParameterToTrait<T> { }\n \n@@ -791,7 +791,7 @@ trait TraitAddSecondTypeParameterToTrait<T, S> { }\n \n \n \n-// Add second lifetime parameter to trait -----------------------------------------\n+// Add second lifetime parameter to trait\n #[cfg(cfail1)]\n trait TraitAddSecondLifetimeParameterToTrait<'a> { }\n \n@@ -802,7 +802,7 @@ trait TraitAddSecondLifetimeParameterToTrait<'a, 'b> { }\n \n \n \n-// Add second trait bound to type parameter of trait ------------------------------\n+// Add second trait bound to type parameter of trait\n #[cfg(cfail1)]\n trait TraitAddSecondTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0> { }\n \n@@ -813,7 +813,7 @@ trait TraitAddSecondTraitBoundToTypeParameterOfTrait<T: ReferencedTrait0 + Refer\n \n \n \n-// Add second lifetime bound to type parameter of trait ---------------------------\n+// Add second lifetime bound to type parameter of trait\n #[cfg(cfail1)]\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTrait<'a, 'b, T: 'a> { }\n \n@@ -824,7 +824,7 @@ trait TraitAddSecondLifetimeBoundToTypeParameterOfTrait<'a, 'b, T: 'a + 'b> { }\n \n \n \n-// Add second lifetime bound to lifetime parameter of trait------------------------\n+// Add second lifetime bound to lifetime parameter of trait\n #[cfg(cfail1)]\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTrait<'a: 'b, 'b, 'c> { }\n \n@@ -835,7 +835,7 @@ trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTrait<'a: 'b + 'c, 'b, 'c>\n \n \n \n-// Add second builtin bound to type parameter of trait ----------------------------\n+// Add second builtin bound to type parameter of trait\n #[cfg(cfail1)]\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTrait<T: Send> { }\n \n@@ -846,13 +846,12 @@ trait TraitAddSecondBuiltinBoundToTypeParameterOfTrait<T: Send + Sync> { }\n \n \n \n-// --------------------------------------------------------------------------------\n struct ReferenceType0 {}\n struct ReferenceType1 {}\n \n \n \n-// Add trait bound to type parameter of trait in where clause----------------------\n+// Add trait bound to type parameter of trait in where clause\n #[cfg(cfail1)]\n trait TraitAddTraitBoundToTypeParameterOfTraitWhere<T> { }\n \n@@ -863,7 +862,7 @@ trait TraitAddTraitBoundToTypeParameterOfTraitWhere<T> where T: ReferencedTrait0\n \n \n \n-// Add lifetime bound to type parameter of trait in where clause-------------------\n+// Add lifetime bound to type parameter of trait in where clause\n #[cfg(cfail1)]\n trait TraitAddLifetimeBoundToTypeParameterOfTraitWhere<'a, T> { }\n \n@@ -874,7 +873,7 @@ trait TraitAddLifetimeBoundToTypeParameterOfTraitWhere<'a, T> where T: 'a { }\n \n \n \n-// Add lifetime bound to lifetime parameter of trait in where clause---------------\n+// Add lifetime bound to lifetime parameter of trait in where clause\n #[cfg(cfail1)]\n trait TraitAddLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b> { }\n \n@@ -885,7 +884,7 @@ trait TraitAddLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b> where 'a: 'b\n \n \n \n-// Add builtin bound to type parameter of trait in where clause--------------------\n+// Add builtin bound to type parameter of trait in where clause\n #[cfg(cfail1)]\n trait TraitAddBuiltinBoundToTypeParameterOfTraitWhere<T> { }\n \n@@ -896,7 +895,7 @@ trait TraitAddBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n \n \n \n-// Add second trait bound to type parameter of trait in where clause---------------\n+// Add second trait bound to type parameter of trait in where clause\n #[cfg(cfail1)]\n trait TraitAddSecondTraitBoundToTypeParameterOfTraitWhere<T> where T: ReferencedTrait0 { }\n \n@@ -908,7 +907,7 @@ trait TraitAddSecondTraitBoundToTypeParameterOfTraitWhere<T>\n \n \n \n-// Add second lifetime bound to type parameter of trait in where clause------------\n+// Add second lifetime bound to type parameter of trait in where clause\n #[cfg(cfail1)]\n trait TraitAddSecondLifetimeBoundToTypeParameterOfTraitWhere<'a, 'b, T> where T: 'a { }\n \n@@ -919,7 +918,7 @@ trait TraitAddSecondLifetimeBoundToTypeParameterOfTraitWhere<'a, 'b, T> where T:\n \n \n \n-// Add second lifetime bound to lifetime parameter of trait in where clause--------\n+// Add second lifetime bound to lifetime parameter of trait in where clause\n #[cfg(cfail1)]\n trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b, 'c> where 'a: 'b { }\n \n@@ -930,7 +929,7 @@ trait TraitAddSecondLifetimeBoundToLifetimeParameterOfTraitWhere<'a, 'b, 'c> whe\n \n \n \n-// Add second builtin bound to type parameter of trait in where clause-------------\n+// Add second builtin bound to type parameter of trait in where clause\n #[cfg(cfail1)]\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n \n@@ -940,7 +939,7 @@ trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send { }\n trait TraitAddSecondBuiltinBoundToTypeParameterOfTraitWhere<T> where T: Send + Sync { }\n \n \n-// Change return type of method indirectly by modifying a use statement------------\n+// Change return type of method indirectly by modifying a use statement\n mod change_return_type_of_method_indirectly_use {\n     #[cfg(cfail1)]\n     use super::ReferenceType0 as ReturnType;\n@@ -958,7 +957,7 @@ mod change_return_type_of_method_indirectly_use {\n \n \n \n-// Change type of method parameter indirectly by modifying a use statement---------\n+// Change type of method parameter indirectly by modifying a use statement\n mod change_method_parameter_type_indirectly_by_use {\n     #[cfg(cfail1)]\n     use super::ReferenceType0 as ArgType;"}, {"sha": "da3c957741fb22dd0939c0b464c22d6e199cf597", "filename": "src/test/incremental/hashes/while_let_loops.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_let_loops.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -14,7 +14,7 @@\n #![crate_type=\"rlib\"]\n \n \n-// Change loop body ------------------------------------------------------------\n+// Change loop body\n #[cfg(cfail1)]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -37,7 +37,7 @@ pub fn change_loop_body() {\n \n \n \n-// Change loop body ------------------------------------------------------------\n+// Change loop body\n #[cfg(cfail1)]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n@@ -60,7 +60,7 @@ pub fn change_loop_condition() {\n \n \n \n-// Add break -------------------------------------------------------------------\n+// Add break\n #[cfg(cfail1)]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -82,7 +82,7 @@ pub fn add_break() {\n \n \n \n-// Add loop label --------------------------------------------------------------\n+// Add loop label\n #[cfg(cfail1)]\n pub fn add_loop_label() {\n     let mut _x = 0;\n@@ -105,7 +105,7 @@ pub fn add_loop_label() {\n \n \n \n-// Add loop label to break -----------------------------------------------------\n+// Add loop label to break\n #[cfg(cfail1)]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -128,7 +128,7 @@ pub fn add_loop_label_to_break() {\n \n \n \n-// Change break label ----------------------------------------------------------\n+// Change break label\n #[cfg(cfail1)]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -155,7 +155,7 @@ pub fn change_break_label() {\n \n \n \n-// Add loop label to continue --------------------------------------------------\n+// Add loop label to continue\n #[cfg(cfail1)]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n@@ -178,7 +178,7 @@ pub fn add_loop_label_to_continue() {\n \n \n \n-// Change continue label ----------------------------------------------------------\n+// Change continue label\n #[cfg(cfail1)]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -205,7 +205,7 @@ pub fn change_continue_label() {\n \n \n \n-// Change continue to break ----------------------------------------------------\n+// Change continue to break\n #[cfg(cfail1)]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "3be42e7a4ee7a793042606b53a21bd2ac5b290cb", "filename": "src/test/incremental/hashes/while_loops.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fwhile_loops.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -14,7 +14,7 @@\n #![crate_type=\"rlib\"]\n \n \n-// Change loop body ------------------------------------------------------------\n+// Change loop body\n #[cfg(cfail1)]\n pub fn change_loop_body() {\n     let mut _x = 0;\n@@ -37,7 +37,7 @@ pub fn change_loop_body() {\n \n \n \n-// Change loop body ------------------------------------------------------------\n+// Change loop body\n #[cfg(cfail1)]\n pub fn change_loop_condition() {\n     let mut _x = 0;\n@@ -60,7 +60,7 @@ pub fn change_loop_condition() {\n \n \n \n-// Add break -------------------------------------------------------------------\n+// Add break\n #[cfg(cfail1)]\n pub fn add_break() {\n     let mut _x = 0;\n@@ -82,7 +82,7 @@ pub fn add_break() {\n \n \n \n-// Add loop label --------------------------------------------------------------\n+// Add loop label\n #[cfg(cfail1)]\n pub fn add_loop_label() {\n     let mut _x = 0;\n@@ -105,7 +105,7 @@ pub fn add_loop_label() {\n \n \n \n-// Add loop label to break -----------------------------------------------------\n+// Add loop label to break\n #[cfg(cfail1)]\n pub fn add_loop_label_to_break() {\n     let mut _x = 0;\n@@ -128,7 +128,7 @@ pub fn add_loop_label_to_break() {\n \n \n \n-// Change break label ----------------------------------------------------------\n+// Change break label\n #[cfg(cfail1)]\n pub fn change_break_label() {\n     let mut _x = 0;\n@@ -155,7 +155,7 @@ pub fn change_break_label() {\n \n \n \n-// Add loop label to continue --------------------------------------------------\n+// Add loop label to continue\n #[cfg(cfail1)]\n pub fn add_loop_label_to_continue() {\n     let mut _x = 0;\n@@ -178,7 +178,7 @@ pub fn add_loop_label_to_continue() {\n \n \n \n-// Change continue label ----------------------------------------------------------\n+// Change continue label\n #[cfg(cfail1)]\n pub fn change_continue_label() {\n     let mut _x = 0;\n@@ -205,7 +205,7 @@ pub fn change_continue_label() {\n \n \n \n-// Change continue to break ----------------------------------------------------\n+// Change continue to break\n #[cfg(cfail1)]\n pub fn change_continue_to_break() {\n     let mut _x = 0;"}, {"sha": "4281874a0314d700d9de6bf1775f28b53f38a6d1", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_bad.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -0,0 +1,16 @@\n+const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ is unsafe\n+//~^ dereferencing raw pointers in constant functions\n+\n+const unsafe fn bad_const_unsafe_deref_raw(x: *mut usize) -> usize { *x }\n+//~^ dereferencing raw pointers in constant functions\n+\n+const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static usize { &*x }\n+//~^ dereferencing raw pointers in constant functions\n+\n+fn main() {}\n+\n+const unsafe fn no_union() {\n+    union Foo { x: (), y: () }\n+    Foo { x: () }.y\n+    //~^ unions in const fn\n+}"}, {"sha": "9de0e732f33d242f9fe91791dfd6d02d629046c6", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_bad.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_bad.stderr?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: dereferencing raw pointers in constant functions is unstable\n-  --> $DIR/min_const_fn_unsafe.rs:50:77\n+  --> $DIR/min_const_fn_unsafe_bad.rs:1:77\n    |\n LL | const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } }\n    |                                                                             ^^^\n@@ -8,7 +8,7 @@ LL | const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe {\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n error[E0658]: dereferencing raw pointers in constant functions is unstable\n-  --> $DIR/min_const_fn_unsafe.rs:53:70\n+  --> $DIR/min_const_fn_unsafe_bad.rs:4:70\n    |\n LL | const unsafe fn bad_const_unsafe_deref_raw(x: *mut usize) -> usize { *x }\n    |                                                                      ^^\n@@ -17,7 +17,7 @@ LL | const unsafe fn bad_const_unsafe_deref_raw(x: *mut usize) -> usize { *x }\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n error[E0658]: dereferencing raw pointers in constant functions is unstable\n-  --> $DIR/min_const_fn_unsafe.rs:56:83\n+  --> $DIR/min_const_fn_unsafe_bad.rs:7:83\n    |\n LL | const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static usize { &*x }\n    |                                                                                   ^^^\n@@ -26,7 +26,7 @@ LL | const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static u\n    = help: add `#![feature(const_raw_ptr_deref)]` to the crate attributes to enable\n \n error[E0658]: unions in const fn are unstable\n-  --> $DIR/min_const_fn_unsafe.rs:63:5\n+  --> $DIR/min_const_fn_unsafe_bad.rs:14:5\n    |\n LL |     Foo { x: () }.y\n    |     ^^^^^^^^^^^^^^^\n@@ -35,7 +35,7 @@ LL |     Foo { x: () }.y\n    = help: add `#![feature(const_fn_union)]` to the crate attributes to enable\n \n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/min_const_fn_unsafe.rs:50:77\n+  --> $DIR/min_const_fn_unsafe_bad.rs:1:77\n    |\n LL | const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } }\n    |                                                                             ^^^ dereference of raw pointer", "previous_filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.stderr"}, {"sha": "02c7970deca641d5b512c4f9e11aab7dac58e638", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe_ok.rs", "status": "renamed", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_unsafe_ok.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -1,6 +1,4 @@\n-//------------------------------------------------------------------------------\n-// OK\n-//------------------------------------------------------------------------------\n+// check-pass\n \n const unsafe fn ret_i32_no_unsafe() -> i32 { 42 }\n const unsafe fn ret_null_ptr_no_unsafe<T>() -> *const T { std::ptr::null() }\n@@ -43,23 +41,4 @@ const unsafe fn call_unsafe_generic_cell_const_unsafe_fn_immediate()\n     ret_null_mut_ptr_no_unsafe::<Vec<std::cell::Cell<u32>>>()\n }\n \n-//------------------------------------------------------------------------------\n-// NOT OK\n-//------------------------------------------------------------------------------\n-\n-const fn bad_const_fn_deref_raw(x: *mut usize) -> &'static usize { unsafe { &*x } } //~ is unsafe\n-//~^ dereferencing raw pointers in constant functions\n-\n-const unsafe fn bad_const_unsafe_deref_raw(x: *mut usize) -> usize { *x }\n-//~^ dereferencing raw pointers in constant functions\n-\n-const unsafe fn bad_const_unsafe_deref_raw_ref(x: *mut usize) -> &'static usize { &*x }\n-//~^ dereferencing raw pointers in constant functions\n-\n fn main() {}\n-\n-const unsafe fn no_union() {\n-    union Foo { x: (), y: () }\n-    Foo { x: () }.y\n-    //~^ unions in const fn\n-}", "previous_filename": "src/test/ui/consts/min_const_fn/min_const_fn_unsafe.rs"}, {"sha": "c86623ce2898c71cd6afe1d290a3df7ad394cfef", "filename": "src/test/ui/issues/issue-31776.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fissues%2Fissue-31776.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fissues%2Fissue-31776.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31776.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -13,7 +13,7 @@ mod m {\n     }\n }\n \n-// ------------------------------------------------------\n+// Scenario 1\n \n pub trait Tr {\n     type A;\n@@ -28,7 +28,7 @@ fn f() {\n     }\n }\n \n-// ------------------------------------------------------\n+// Scenario 2\n \n trait Tr1 {\n     type A;\n@@ -49,8 +49,6 @@ mod m1 {\n     }\n }\n \n-// ------------------------------------------------------\n-\n fn main() {\n     S.s(); // Privacy error, unless `fn s` is pub\n     let a = S2.pull().field; // Privacy error unless `field: u8` is pub"}, {"sha": "151b9fe442c033a394a8046ece2697f6f57313a6", "filename": "src/test/ui/issues/issue-50415.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fissues%2Fissue-50415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fissues%2Fissue-50415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50415.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -1,11 +1,9 @@\n // run-pass\n fn main() {\n-    // -------- Simplified test case --------\n-\n+    // Simplified test case\n     let _ = || 0..=1;\n \n-    // -------- Original test case --------\n-\n+    // Original test case\n     let full_length = 1024;\n     let range = {\n         // do some stuff, omit here"}, {"sha": "5857a081596cb67f41cfe4fc02b759343e478713", "filename": "src/test/ui/issues/issue-5067.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fissues%2Fissue-5067.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fissues%2Fissue-5067.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5067.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -54,7 +54,7 @@ macro_rules! foo {\n     //~^ ERROR repetition matches empty token tree\n }\n \n-// --- Original Issue --- //\n+// Original Issue\n \n macro_rules! make_vec {\n     (a $e1:expr $($(, a $e2:expr)*)*) => ([$e1 $($(, $e2)*)*]);\n@@ -65,7 +65,7 @@ fn main() {\n     let _ = make_vec![a 1, a 2, a 3];\n }\n \n-// --- Minified Issue --- //\n+// Minified Issue\n \n macro_rules! m {\n     ( $()* ) => {};"}, {"sha": "1151a829eba16556b8aa2dc2b97837357f1f115f", "filename": "src/test/ui/macros/restricted-shadowing-modern.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -95,8 +95,6 @@ macro include() {\n         m!()\n     }\n \n-    // -----------------------------------------------------------\n-\n     fn check1() {\n         macro m() {}\n         {"}, {"sha": "12075d42b9a7cecb069afac97587bca070fb0b40", "filename": "src/test/ui/macros/restricted-shadowing-modern.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -1,5 +1,5 @@\n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/restricted-shadowing-modern.rs:106:17\n+  --> $DIR/restricted-shadowing-modern.rs:104:17\n    |\n LL |                 m!();\n    |                 ^ ambiguous name\n@@ -16,7 +16,7 @@ LL |         macro m() { Right }\n LL | include!();\n    | ----------- in this macro invocation\n note: `m` could also refer to the macro defined here\n-  --> $DIR/restricted-shadowing-modern.rs:101:9\n+  --> $DIR/restricted-shadowing-modern.rs:99:9\n    |\n LL |         macro m() {}\n    |         ^^^^^^^^^^^^\n@@ -25,7 +25,7 @@ LL | include!();\n    | ----------- in this macro invocation\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/restricted-shadowing-modern.rs:149:33\n+  --> $DIR/restricted-shadowing-modern.rs:147:33\n    |\n LL |             macro gen_invoc() { m!() }\n    |                                 ^ ambiguous name\n@@ -42,7 +42,7 @@ LL |         macro m() { Right }\n LL | include!();\n    | ----------- in this macro invocation\n note: `m` could also refer to the macro defined here\n-  --> $DIR/restricted-shadowing-modern.rs:145:9\n+  --> $DIR/restricted-shadowing-modern.rs:143:9\n    |\n LL |         macro m() {}\n    |         ^^^^^^^^^^^^\n@@ -51,7 +51,7 @@ LL | include!();\n    | ----------- in this macro invocation\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/restricted-shadowing-modern.rs:158:13\n+  --> $DIR/restricted-shadowing-modern.rs:156:13\n    |\n LL |             m!();\n    |             ^ ambiguous name\n@@ -68,7 +68,7 @@ LL |         macro m() { Right }\n LL | include!();\n    | ----------- in this macro invocation\n note: `m` could also refer to the macro defined here\n-  --> $DIR/restricted-shadowing-modern.rs:155:9\n+  --> $DIR/restricted-shadowing-modern.rs:153:9\n    |\n LL |         macro m() {}\n    |         ^^^^^^^^^^^^\n@@ -77,7 +77,7 @@ LL | include!();\n    | ----------- in this macro invocation\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/restricted-shadowing-modern.rs:174:13\n+  --> $DIR/restricted-shadowing-modern.rs:172:13\n    |\n LL |             m!();\n    |             ^ ambiguous name\n@@ -103,7 +103,7 @@ LL | include!();\n    | ----------- in this macro invocation\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/restricted-shadowing-modern.rs:192:17\n+  --> $DIR/restricted-shadowing-modern.rs:190:17\n    |\n LL |                 m!();\n    |                 ^ ambiguous name\n@@ -129,7 +129,7 @@ LL | include!();\n    | ----------- in this macro invocation\n \n error[E0659]: `m` is ambiguous (macro-expanded name vs less macro-expanded name from outer scope during import/macro resolution)\n-  --> $DIR/restricted-shadowing-modern.rs:235:33\n+  --> $DIR/restricted-shadowing-modern.rs:233:33\n    |\n LL |             macro gen_invoc() { m!() }\n    |                                 ^ ambiguous name"}, {"sha": "4944f2649b738690ffeeeae6614fd6a1a24ef1c3", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.nll.stderr?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:43:12\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:39:12\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               -- -- lifetime `'b` defined here"}, {"sha": "61be0778c99c52d9f5de557343a08321b48a1813", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.migrate.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.migrate.stderr?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -1,16 +1,16 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:43:12\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:39:12\n    |\n LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the pointer is valid for the lifetime 'a as defined on the function body at 37:15\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:37:15\n+note: the pointer is valid for the lifetime 'a as defined on the function body at 33:15\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:33:15\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               ^^\n-note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 37:18\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:37:18\n+note: but the referenced data is only valid for the lifetime 'b as defined on the function body at 33:18\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:33:18\n    |\n LL | fn with_assoc<'a,'b>() {\n    |                  ^^"}, {"sha": "4944f2649b738690ffeeeae6614fd6a1a24ef1c3", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:43:12\n+  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:39:12\n    |\n LL | fn with_assoc<'a,'b>() {\n    |               -- -- lifetime `'b` defined here"}, {"sha": "046d010002e6e7a9ad26f0fbb04e8ee53ab67fd8", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -8,8 +8,6 @@\n \n #![allow(dead_code)]\n \n-///////////////////////////////////////////////////////////////////////////\n-\n pub trait TheTrait {\n     type TheAssocType;\n }\n@@ -28,8 +26,6 @@ impl<'b> TheTrait for TheType<'b> {\n impl<'b> TheSubTrait for TheType<'b> {\n }\n \n-///////////////////////////////////////////////////////////////////////////\n-\n pub struct WithAssoc<T:TheSubTrait> {\n     m: [T; 0]\n }"}, {"sha": "bf0c1dc27ce43e9a0fbea89f23ffceab736a3f77", "filename": "src/test/ui/suggestions/dont-suggest-ref/duplicate-suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fduplicate-suggestions.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -34,7 +34,7 @@ pub fn main() {\n     let vs = &vx;\n     let vsm = &mut vec![X(Y)];\n \n-    // -------- test for duplicate suggestions --------\n+    // test for duplicate suggestions\n \n     let &(X(_t), X(_u)) = &(x.clone(), x.clone());\n     //~^ ERROR cannot move"}, {"sha": "f1e043c30f213e99e4fddaede6937b5ec9644a17", "filename": "src/test/ui/suggestions/dont-suggest-ref/move-into-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fmove-into-closure.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -22,7 +22,7 @@ fn move_into_fn() {\n \n     let x = X(Y);\n \n-    // -------- move into Fn --------\n+    // move into Fn\n \n     consume_fn(|| {\n         let X(_t) = x;\n@@ -89,7 +89,7 @@ fn move_into_fnmut() {\n \n     let x = X(Y);\n \n-    // -------- move into FnMut --------\n+    // move into FnMut\n \n     consume_fnmut(|| {\n         let X(_t) = x;"}, {"sha": "c53ac3d2cd684fcecf5de1061354ee5254a94ec5", "filename": "src/test/ui/suggestions/dont-suggest-ref/simple.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ref%2Fsimple.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -33,7 +33,7 @@ pub fn main() {\n     let vs = &vx;\n     let vsm = &mut vec![X(Y)];\n \n-    // -------- move from Either/X place --------\n+    // move from Either/X place\n \n     let X(_t) = *s;\n     //~^ ERROR cannot move\n@@ -163,7 +163,7 @@ pub fn main() {\n         // FIXME: should suggest removing `ref` too\n     }\n \n-    // -------- move from &Either/&X place --------\n+    // move from &Either/&X place\n \n     let &X(_t) = s;\n     //~^ ERROR cannot move\n@@ -251,7 +251,7 @@ pub fn main() {\n     //~| HELP consider removing the `&mut`\n     //~| SUGGESTION X(_t)\n \n-    // -------- move from tuple of &Either/&X --------\n+    // move from tuple of &Either/&X\n \n     // FIXME: These should have suggestions.\n \n@@ -283,7 +283,7 @@ pub fn main() {\n     fn f4((&mut X(_t),): (&mut X,)) { }\n     //~^ ERROR cannot move\n \n-    // -------- move from &Either/&X value --------\n+    // move from &Either/&X value\n \n     let &X(_t) = &x;\n     //~^ ERROR cannot move"}, {"sha": "ba88670032c95049ecbb32ca1346608d0e699197", "filename": "src/test/ui/traits/traits-conditional-model-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Ftraits%2Ftraits-conditional-model-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eec03d33e0a833cb48998f5d8e47c01b9e32cf4/src%2Ftest%2Fui%2Ftraits%2Ftraits-conditional-model-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-conditional-model-fn.rs?ref=4eec03d33e0a833cb48998f5d8e47c01b9e32cf4", "patch": "@@ -6,7 +6,6 @@\n \n // aux-build:go_trait.rs\n \n-\n extern crate go_trait;\n \n use go_trait::{Go, GoMut, GoOnce, go, go_mut, go_once};"}]}