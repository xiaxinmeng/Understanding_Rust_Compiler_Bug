{"sha": "88fa5c6a45a533a78c698a22f4b16002a3bc9fc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZmE1YzZhNDVhNTMzYTc4YzY5OGEyMmY0YjE2MDAyYTNiYzlmYzM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-05-19T10:59:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-05-19T10:59:44Z"}, "message": "Improve type size assertions\n\nNow they\n- Tell what the new size is, when it changes\n- Do not require passing an identifier", "tree": {"sha": "7de7f6bc6d9aa974bbddbe37ab2641290eb3c12e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7de7f6bc6d9aa974bbddbe37ab2641290eb3c12e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3", "html_url": "https://github.com/rust-lang/rust/commit/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0d2f7462b07039c7327d8331272a804c025b047", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0d2f7462b07039c7327d8331272a804c025b047", "html_url": "https://github.com/rust-lang/rust/commit/e0d2f7462b07039c7327d8331272a804c025b047"}], "stats": {"total": 54, "additions": 31, "deletions": 23}, "files": [{"sha": "3ca79cb850128fe3b3dd9bd67f5187195ce6d696", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=88fa5c6a45a533a78c698a22f4b16002a3bc9fc3", "patch": "@@ -1356,7 +1356,7 @@ pub struct Expr {\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_EXPR: std::mem::size_of::<Expr>() == 72);\n+static_assert_size!(Expr, 72);\n \n impl Expr {\n     pub fn precedence(&self) -> ExprPrecedence {"}, {"sha": "37681ad7fcdd2bc51708264a8246e7a8a3ede9f0", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=88fa5c6a45a533a78c698a22f4b16002a3bc9fc3", "patch": "@@ -158,7 +158,7 @@ newtype_index! {\n impl_stable_hash_for!(struct crate::middle::region::FirstStatementIndex { private });\n \n // compilation error if size of `ScopeData` is not the same as a `u32`\n-static_assert!(ASSERT_SCOPE_DATA: mem::size_of::<ScopeData>() == 4);\n+static_assert_size!(ScopeData, 4);\n \n impl Scope {\n     /// Returns a item-local ID associated with this scope."}, {"sha": "59b7891b90fde918284e32a82dfdf68ffa0aeeec", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=88fa5c6a45a533a78c698a22f4b16002a3bc9fc3", "patch": "@@ -78,7 +78,7 @@ pub struct Pointer<Tag=(),Id=AllocId> {\n     pub tag: Tag,\n }\n \n-static_assert!(POINTER_SIZE: ::std::mem::size_of::<Pointer>() == 16);\n+static_assert_size!(Pointer, 16);\n \n /// Produces a `Pointer` which points to the beginning of the Allocation\n impl From<AllocId> for Pointer {"}, {"sha": "551b86390db4c43d1e0a3253cf2a16c11776c2ae", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=88fa5c6a45a533a78c698a22f4b16002a3bc9fc3", "patch": "@@ -54,7 +54,7 @@ pub enum ConstValue<'tcx> {\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(CONST_SIZE: ::std::mem::size_of::<ConstValue<'static>>() == 40);\n+static_assert_size!(ConstValue<'_>, 40);\n \n impl<'tcx> ConstValue<'tcx> {\n     #[inline]\n@@ -111,7 +111,7 @@ pub enum Scalar<Tag=(), Id=AllocId> {\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(SCALAR_SIZE: ::std::mem::size_of::<Scalar>() == 24);\n+static_assert_size!(Scalar, 24);\n \n impl<Tag> fmt::Display for Scalar<Tag> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "dd43cb2f18ece8d3c09ec480dc786b12f97c2295", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=88fa5c6a45a533a78c698a22f4b16002a3bc9fc3", "patch": "@@ -1738,7 +1738,7 @@ pub struct Statement<'tcx> {\n \n // `Statement` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_STATEMENT: mem::size_of::<Statement<'_>>() == 56);\n+static_assert_size!(Statement<'_>, 56);\n \n impl<'tcx> Statement<'tcx> {\n     /// Changes a statement to a nop. This is both faster than deleting instructions and avoids\n@@ -1997,10 +1997,9 @@ pub type PlaceProjection<'tcx> = Projection<Place<'tcx>, Local, Ty<'tcx>>;\n /// and the index is a local.\n pub type PlaceElem<'tcx> = ProjectionElem<Local, Ty<'tcx>>;\n \n-// at least on 64 bit systems, `PlaceElem` should not be larger than two pointers\n-static_assert!(PROJECTION_ELEM_IS_2_PTRS_LARGE:\n-    mem::size_of::<PlaceElem<'_>>() <= 16\n-);\n+// At least on 64 bit systems, `PlaceElem` should not be larger than two pointers.\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(PlaceElem<'_>, 16);\n \n /// Alias for projections as they appear in `UserTypeProjection`, where we\n /// need neither the `V` parameter for `Index` nor the `T` for `Field`."}, {"sha": "5135aeb2392cd85e054023c22c1cf6077a004bac", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=88fa5c6a45a533a78c698a22f4b16002a3bc9fc3", "patch": "@@ -17,9 +17,9 @@ pub struct PlaceTy<'tcx> {\n     pub variant_index: Option<VariantIdx>,\n }\n \n-static_assert!(PLACE_TY_IS_3_PTRS_LARGE:\n-    mem::size_of::<PlaceTy<'_>>() <= 24\n-);\n+// At least on 64 bit systems, `PlaceTy` should not be larger than two or three pointers.\n+#[cfg(target_arch = \"x86_64\")]\n+static_assert_size!(PlaceTy<'_>, 16);\n \n impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n     pub fn from_ty(ty: Ty<'tcx>) -> PlaceTy<'tcx> {"}, {"sha": "1e4bb37c44ef13cbeedc9aec2f9cc19c3e12973d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=88fa5c6a45a533a78c698a22f4b16002a3bc9fc3", "patch": "@@ -510,7 +510,7 @@ pub struct TyS<'tcx> {\n \n // `TyS` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_TY_S: ::std::mem::size_of::<TyS<'_>>() == 32);\n+static_assert_size!(TyS<'_>, 32);\n \n impl<'tcx> Ord for TyS<'tcx> {\n     fn cmp(&self, other: &TyS<'tcx>) -> Ordering {"}, {"sha": "269064af93bc078beae1ab0f30124a0d24ce8591", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=88fa5c6a45a533a78c698a22f4b16002a3bc9fc3", "patch": "@@ -211,7 +211,7 @@ pub enum TyKind<'tcx> {\n \n // `TyKind` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_TY_KIND: ::std::mem::size_of::<TyKind<'_>>() == 24);\n+static_assert_size!(TyKind<'_>, 24);\n \n /// A closure can be modeled as a struct that looks like:\n ///\n@@ -2207,7 +2207,7 @@ pub struct Const<'tcx> {\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(CONST_SIZE: ::std::mem::size_of::<Const<'static>>() == 48);\n+static_assert_size!(Const<'_>, 48);\n \n impl<'tcx> Const<'tcx> {\n     #[inline]"}, {"sha": "7fc23999284a71681dc53506aba56a12bc42f526", "filename": "src/librustc_data_structures/macros.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc_data_structures%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibrustc_data_structures%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fmacros.rs?ref=88fa5c6a45a533a78c698a22f4b16002a3bc9fc3", "patch": "@@ -10,3 +10,12 @@ macro_rules! static_assert {\n         static $name: () = [()][!($test: bool) as usize];\n     }\n }\n+\n+/// Type size assertion. The first argument is a type and the second argument is its expected size.\n+#[macro_export]\n+#[allow_internal_unstable(underscore_const_names)]\n+macro_rules! static_assert_size {\n+    ($ty:ty, $size:expr) => {\n+        const _: [(); $size] = [(); ::std::mem::size_of::<$ty>()];\n+    }\n+}"}, {"sha": "b55ca453fb3dcc8b959a26e05da40cdf67b91b13", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=88fa5c6a45a533a78c698a22f4b16002a3bc9fc3", "patch": "@@ -16,7 +16,7 @@ use crate::ThinVec;\n \n use rustc_data_structures::indexed_vec::Idx;\n #[cfg(target_arch = \"x86_64\")]\n-use rustc_data_structures::static_assert;\n+use rustc_data_structures::static_assert_size;\n use rustc_target::spec::abi::Abi;\n use syntax_pos::{Span, DUMMY_SP};\n \n@@ -964,7 +964,7 @@ pub struct Expr {\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_EXPR: std::mem::size_of::<Expr>() == 96);\n+static_assert_size!(Expr, 96);\n \n impl Expr {\n     /// Whether this expression would be valid somewhere that expects a value; for example, an `if`"}, {"sha": "068fc41c87a0baadcff9b67938019cef4880684b", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=88fa5c6a45a533a78c698a22f4b16002a3bc9fc3", "patch": "@@ -19,7 +19,7 @@ use log::info;\n use std::fmt;\n use std::mem;\n #[cfg(target_arch = \"x86_64\")]\n-use rustc_data_structures::static_assert;\n+use rustc_data_structures::static_assert_size;\n use rustc_data_structures::sync::Lrc;\n \n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n@@ -74,7 +74,7 @@ pub enum Lit {\n }\n \n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_LIT: mem::size_of::<Lit>() == 8);\n+static_assert_size!(Lit, 8);\n \n impl Lit {\n     crate fn literal_name(&self) -> &'static str {\n@@ -220,7 +220,7 @@ pub enum Token {\n \n // `Token` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_STATEMENT: mem::size_of::<Token>() == 16);\n+static_assert_size!(Token, 16);\n \n impl Token {\n     /// Recovers a `Token` from an `ast::Ident`. This creates a raw identifier if necessary."}, {"sha": "3cb16c30a50d477692ea93960a1c2f67864c1b36", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fa5c6a45a533a78c698a22f4b16002a3bc9fc3/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=88fa5c6a45a533a78c698a22f4b16002a3bc9fc3", "patch": "@@ -21,7 +21,7 @@ use crate::print::pprust;\n \n use syntax_pos::{BytePos, Mark, Span, DUMMY_SP};\n #[cfg(target_arch = \"x86_64\")]\n-use rustc_data_structures::static_assert;\n+use rustc_data_structures::static_assert_size;\n use rustc_data_structures::sync::Lrc;\n use serialize::{Decoder, Decodable, Encoder, Encodable};\n use smallvec::{SmallVec, smallvec};\n@@ -158,7 +158,7 @@ pub type TreeAndJoint = (TokenTree, IsJoint);\n \n // `TokenStream` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert!(MEM_SIZE_OF_TOKEN_STREAM: mem::size_of::<TokenStream>() == 8);\n+static_assert_size!(TokenStream, 8);\n \n #[derive(Clone, Copy, Debug, PartialEq)]\n pub enum IsJoint {"}]}