{"sha": "5e722ba670c7223c6048fb4e9c1d4833515d16d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNzIyYmE2NzBjNzIyM2M2MDQ4ZmI0ZTljMWQ0ODMzNTE1ZDE2ZDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-27T10:37:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-27T10:37:17Z"}, "message": "Auto merge of #5098 - JohnTitor:rename-span-lints, r=flip1995\n\nRename `span_{help, note}_and_lint` to `span_lint_and_*`\n\n`span_*_and_lint` and `span_lint_and_*` make us confused. The order should be the same.\n\n[context](https://github.com/rust-lang/rust-clippy/pull/5084#issuecomment-578411309)\n\nchangelog: none", "tree": {"sha": "8cce492e92258fcc414be1ed4bcf5eef4722eef6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8cce492e92258fcc414be1ed4bcf5eef4722eef6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e722ba670c7223c6048fb4e9c1d4833515d16d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e722ba670c7223c6048fb4e9c1d4833515d16d0", "html_url": "https://github.com/rust-lang/rust/commit/5e722ba670c7223c6048fb4e9c1d4833515d16d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e722ba670c7223c6048fb4e9c1d4833515d16d0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f65bec39ab7cceea9d31e7245479037e9581219", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f65bec39ab7cceea9d31e7245479037e9581219", "html_url": "https://github.com/rust-lang/rust/commit/4f65bec39ab7cceea9d31e7245479037e9581219"}, {"sha": "f5e86d68947c453c064436f892a0d00936e50fa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5e86d68947c453c064436f892a0d00936e50fa3", "html_url": "https://github.com/rust-lang/rust/commit/f5e86d68947c453c064436f892a0d00936e50fa3"}], "stats": {"total": 226, "additions": 113, "deletions": 113}, "files": [{"sha": "d90a0d67d5a55eaeb631627c363e01c99d97f4c8", "filename": "clippy_lints/src/as_conversions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fas_conversions.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -3,7 +3,7 @@ use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::*;\n \n-use crate::utils::span_help_and_lint;\n+use crate::utils::span_lint_and_help;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `as` conversions.\n@@ -45,7 +45,7 @@ impl EarlyLintPass for AsConversions {\n         }\n \n         if let ExprKind::Cast(_, _) = expr.kind {\n-            span_help_and_lint(\n+            span_lint_and_help(\n                 cx,\n                 AS_CONVERSIONS,\n                 expr.span,"}, {"sha": "e399229b43cacd85a82ca75c80b3b0552b595b11", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,6 +1,6 @@\n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n-use crate::utils::{is_direct_expn_of, is_expn_of, match_function_call, snippet_opt, span_help_and_lint};\n+use crate::utils::{is_direct_expn_of, is_expn_of, match_function_call, snippet_opt, span_lint_and_help};\n use if_chain::if_chain;\n use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -34,7 +34,7 @@ declare_lint_pass!(AssertionsOnConstants => [ASSERTIONS_ON_CONSTANTS]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr<'_>) {\n         let lint_true = |is_debug: bool| {\n-            span_help_and_lint(\n+            span_lint_and_help(\n                 cx,\n                 ASSERTIONS_ON_CONSTANTS,\n                 e.span,\n@@ -47,7 +47,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n             );\n         };\n         let lint_false_without_message = || {\n-            span_help_and_lint(\n+            span_lint_and_help(\n                 cx,\n                 ASSERTIONS_ON_CONSTANTS,\n                 e.span,\n@@ -56,7 +56,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssertionsOnConstants {\n             );\n         };\n         let lint_false_with_message = |panic_message: String| {\n-            span_help_and_lint(\n+            span_lint_and_help(\n                 cx,\n                 ASSERTIONS_ON_CONSTANTS,\n                 e.span,"}, {"sha": "178ee45298e3656a8c38bb91fb62615367bdca90", "filename": "clippy_lints/src/atomic_ordering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fatomic_ordering.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_def_path, span_help_and_lint};\n+use crate::utils::{match_def_path, span_lint_and_help};\n use if_chain::if_chain;\n use rustc::ty;\n use rustc_hir::def_id::DefId;\n@@ -80,7 +80,7 @@ fn check_atomic_load_store(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n         then {\n             if method == \"load\" &&\n                 match_ordering_def_path(cx, ordering_def_id, &[\"Release\", \"AcqRel\"]) {\n-                span_help_and_lint(\n+                span_lint_and_help(\n                     cx,\n                     INVALID_ATOMIC_ORDERING,\n                     ordering_arg.span,\n@@ -89,7 +89,7 @@ fn check_atomic_load_store(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n                 );\n             } else if method == \"store\" &&\n                 match_ordering_def_path(cx, ordering_def_id, &[\"Acquire\", \"AcqRel\"]) {\n-                span_help_and_lint(\n+                span_lint_and_help(\n                     cx,\n                     INVALID_ATOMIC_ORDERING,\n                     ordering_arg.span,\n@@ -113,7 +113,7 @@ fn check_memory_fence(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n         if let Some(ordering_def_id) = cx.tables.qpath_res(ordering_qpath, args[0].hir_id).opt_def_id();\n         if match_ordering_def_path(cx, ordering_def_id, &[\"Relaxed\"]);\n         then {\n-            span_help_and_lint(\n+            span_lint_and_help(\n                 cx,\n                 INVALID_ATOMIC_ORDERING,\n                 args[0].span,"}, {"sha": "5a64e444136eac924fb5e6ee0845b8b224854227", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                             if expr.span.from_expansion() || differing_macro_contexts(expr.span, ex.span) {\n                                 return;\n                             }\n-                            span_help_and_lint(\n+                            span_lint_and_help(\n                                 cx,\n                                 BLOCK_IN_IF_CONDITION_EXPR,\n                                 check.span,\n@@ -107,7 +107,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n                             return;\n                         }\n                         // move block higher\n-                        span_help_and_lint(\n+                        span_lint_and_help(\n                             cx,\n                             BLOCK_IN_IF_CONDITION_STMT,\n                             check.span,"}, {"sha": "2b63152550163ce75e89d4c1a253c7812d6c57b2", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -9,7 +9,7 @@ use rustc_span::source_map::Span;\n use rustc_span::BytePos;\n use syntax::ast::Attribute;\n \n-use crate::utils::{match_type, paths, snippet_opt, span_help_and_lint, LimitStack};\n+use crate::utils::{match_type, paths, snippet_opt, span_lint_and_help, LimitStack};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for methods with high cognitive complexity.\n@@ -96,7 +96,7 @@ impl CognitiveComplexity {\n                 },\n             };\n \n-            span_help_and_lint(\n+            span_lint_and_help(\n                 cx,\n                 COGNITIVE_COMPLEXITY,\n                 fn_span,"}, {"sha": "684d3448ea43d8a2af54113b68ff3f224b465d99", "filename": "clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    get_trait_def_id, if_sequence, implements_trait, parent_node_is_if_expr, paths, span_help_and_lint, SpanlessEq,\n+    get_trait_def_id, if_sequence, implements_trait, parent_node_is_if_expr, paths, span_lint_and_help, SpanlessEq,\n };\n use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -99,7 +99,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ComparisonChain {\n                 return;\n             }\n         }\n-        span_help_and_lint(\n+        span_lint_and_help(\n             cx,\n             COMPARISON_CHAIN,\n             expr.span,"}, {"sha": "d2d20375dafa5b46ece854d5ef9104de00ebac7b", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{get_parent_expr, higher, if_sequence, same_tys, snippet, span_lint_and_then, span_note_and_lint};\n+use crate::utils::{get_parent_expr, higher, if_sequence, same_tys, snippet, span_lint_and_note, span_lint_and_then};\n use crate::utils::{SpanlessEq, SpanlessHash};\n use rustc::ty::Ty;\n use rustc_data_structures::fx::FxHashMap;\n@@ -178,7 +178,7 @@ fn lint_same_then_else(cx: &LateContext<'_, '_>, blocks: &[&Block<'_>]) {\n         &|&lhs, &rhs| -> bool { SpanlessEq::new(cx).eq_block(lhs, rhs) };\n \n     if let Some((i, j)) = search_same_sequenced(blocks, eq) {\n-        span_note_and_lint(\n+        span_lint_and_note(\n             cx,\n             IF_SAME_THEN_ELSE,\n             j.span,\n@@ -201,7 +201,7 @@ fn lint_same_cond(cx: &LateContext<'_, '_>, conds: &[&Expr<'_>]) {\n         &|&lhs, &rhs| -> bool { SpanlessEq::new(cx).ignore_fn().eq_expr(lhs, rhs) };\n \n     for (i, j) in search_same(conds, hash, eq) {\n-        span_note_and_lint(\n+        span_lint_and_note(\n             cx,\n             IFS_SAME_COND,\n             j.span,\n@@ -229,7 +229,7 @@ fn lint_same_fns_in_if_cond(cx: &LateContext<'_, '_>, conds: &[&Expr<'_>]) {\n     };\n \n     for (i, j) in search_same(conds, hash, eq) {\n-        span_note_and_lint(\n+        span_lint_and_note(\n             cx,\n             SAME_FUNCTIONS_IN_IF_CONDITION,\n             j.span,"}, {"sha": "3e2d5b88e7b7dff309a067ff9d5b71911d1075a4", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_copy, match_path, paths, span_note_and_lint};\n+use crate::utils::{is_copy, match_path, paths, span_lint_and_note};\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -41,7 +41,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CopyIterator {\n             let ty = cx.tcx.type_of(cx.tcx.hir().local_def_id(item.hir_id));\n \n             if is_copy(cx, ty) && match_path(&trait_ref.path, &paths::ITERATOR) {\n-                span_note_and_lint(\n+                span_lint_and_note(\n                     cx,\n                     COPY_ITERATOR,\n                     item.span,"}, {"sha": "eb785e4c3cb26014fbc47bbbbe8fd3f2a3c057cc", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{snippet_opt, span_help_and_lint, span_lint_and_sugg};\n+use crate::utils::{snippet_opt, span_lint_and_help, span_lint_and_sugg};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -43,7 +43,7 @@ impl EarlyLintPass for DbgMacro {\n                     Applicability::MaybeIncorrect,\n                 );\n             } else {\n-                span_help_and_lint(\n+                span_lint_and_help(\n                     cx,\n                     DBG_MACRO,\n                     mac.span(),"}, {"sha": "29351deea286baf2be62adfc8cf1cba6dc469e6c", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_copy, match_def_path, paths, qpath_res, span_note_and_lint};\n+use crate::utils::{is_copy, match_def_path, paths, qpath_res, span_lint_and_note};\n use if_chain::if_chain;\n use rustc::ty;\n use rustc_hir::*;\n@@ -131,7 +131,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DropForgetRef {\n                     } else {\n                         return;\n                     }\n-                    span_note_and_lint(cx,\n+                    span_lint_and_note(cx,\n                                        lint,\n                                        expr.span,\n                                        &msg,\n@@ -147,7 +147,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DropForgetRef {\n                     } else {\n                         return;\n                     }\n-                    span_note_and_lint(cx,\n+                    span_lint_and_note(cx,\n                                        lint,\n                                        expr.span,\n                                        &msg,"}, {"sha": "b87900180f2683e1e8a8cd74d54f86c9f9e3e01a", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -5,7 +5,7 @@ use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::*;\n \n-use crate::utils::span_help_and_lint;\n+use crate::utils::span_lint_and_help;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of if expressions with an `else if` branch,\n@@ -56,7 +56,7 @@ impl EarlyLintPass for ElseIfWithoutElse {\n \n         while let ExprKind::If(_, _, Some(ref els)) = item.kind {\n             if let ExprKind::If(_, _, None) = els.kind {\n-                span_help_and_lint(\n+                span_lint_and_help(\n                     cx,\n                     ELSE_IF_WITHOUT_ELSE,\n                     els.span,"}, {"sha": "75205f964008bd7c253546b6af7afe275a8cec50", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,7 +1,7 @@\n //! lint on enum variants that are prefixed or suffixed by the same characters\n \n use crate::utils::{camel_case, is_present_in_source};\n-use crate::utils::{span_help_and_lint, span_lint};\n+use crate::utils::{span_lint, span_lint_and_help};\n use rustc_lint::{EarlyContext, EarlyLintPass, Lint};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n@@ -201,7 +201,7 @@ fn check_variant(\n         (false, _) => (\"pre\", pre),\n         (true, false) => (\"post\", post),\n     };\n-    span_help_and_lint(\n+    span_lint_and_help(\n         cx,\n         lint,\n         span,"}, {"sha": "f143c7462ad27b309124672526c207619dcce927", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{get_parent_expr, span_lint, span_note_and_lint};\n+use crate::utils::{get_parent_expr, span_lint, span_lint_and_note};\n use if_chain::if_chain;\n use rustc::hir::map::Map;\n use rustc::ty;\n@@ -307,7 +307,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n                     // Check that this is a read, not a write.\n                     if !is_in_assignment_position(self.cx, expr);\n                     then {\n-                        span_note_and_lint(\n+                        span_lint_and_note(\n                             self.cx,\n                             EVAL_ORDER_DEPENDENCE,\n                             expr.span,"}, {"sha": "31e924e36abed8752b76d3328c7fcd45d7e4cf9b", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{differing_macro_contexts, snippet_opt, span_help_and_lint, span_note_and_lint};\n+use crate::utils::{differing_macro_contexts, snippet_opt, span_lint_and_help, span_lint_and_note};\n use if_chain::if_chain;\n use rustc::lint::in_external_macro;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n@@ -140,7 +140,7 @@ fn check_assign(cx: &EarlyContext<'_>, expr: &Expr) {\n                     let op = UnOp::to_string(op);\n                     let eqop_span = lhs.span.between(sub_rhs.span);\n                     if eq_snippet.ends_with('=') {\n-                        span_note_and_lint(\n+                        span_lint_and_note(\n                             cx,\n                             SUSPICIOUS_ASSIGNMENT_FORMATTING,\n                             eqop_span,\n@@ -178,7 +178,7 @@ fn check_unop(cx: &EarlyContext<'_>, expr: &Expr) {\n         then {\n             let unop_str = UnOp::to_string(op);\n             let eqop_span = lhs.span.between(un_rhs.span);\n-            span_help_and_lint(\n+            span_lint_and_help(\n                 cx,\n                 SUSPICIOUS_UNARY_OP_FORMATTING,\n                 eqop_span,\n@@ -221,7 +221,7 @@ fn check_else(cx: &EarlyContext<'_>, expr: &Expr) {\n         let else_desc = if is_if(else_) { \"if\" } else { \"{..}\" };\n \n         then {\n-            span_note_and_lint(\n+            span_lint_and_note(\n                 cx,\n                 SUSPICIOUS_ELSE_FORMATTING,\n                 else_span,\n@@ -260,7 +260,7 @@ fn check_array(cx: &EarlyContext<'_>, expr: &Expr) {\n                 if space_snippet.contains('\\n');\n                 if indentation(cx, op.span) <= indentation(cx, lhs.span);\n                 then {\n-                    span_note_and_lint(\n+                    span_lint_and_note(\n                         cx,\n                         POSSIBLE_MISSING_COMMA,\n                         lint_span,\n@@ -291,7 +291,7 @@ fn check_missing_else(cx: &EarlyContext<'_>, first: &Expr, second: &Expr) {\n                     (\"an `else {..}`\", \"the next block\")\n                 };\n \n-                span_note_and_lint(\n+                span_lint_and_note(\n                     cx,\n                     SUSPICIOUS_ELSE_FORMATTING,\n                     else_span,"}, {"sha": "6d71ccbc8528fd948e86148906a7b3aab535dbce", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{\n     attr_by_name, attrs::is_proc_macro, is_must_use_ty, iter_input_pats, match_def_path, must_use_attr, qpath_res,\n-    return_ty, snippet, snippet_opt, span_help_and_lint, span_lint, span_lint_and_then, trait_ref_of_method,\n+    return_ty, snippet, snippet_opt, span_lint, span_lint_and_help, span_lint_and_then, trait_ref_of_method,\n     type_is_unsafe_function,\n };\n use matches::matches;\n@@ -433,7 +433,7 @@ fn check_needless_must_use(\n             },\n         );\n     } else if !attr.is_value_str() && is_must_use_ty(cx, return_ty(cx, item_id)) {\n-        span_help_and_lint(\n+        span_lint_and_help(\n             cx,\n             DOUBLE_MUST_USE,\n             fn_header_span,"}, {"sha": "8deed214203852226edee4b14ebbf28ae10b5c0e", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -6,7 +6,7 @@ use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use syntax::ast::*;\n \n-use crate::utils::span_help_and_lint;\n+use crate::utils::span_lint_and_help;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `!` or `!=` in an if condition with an\n@@ -56,7 +56,7 @@ impl EarlyLintPass for IfNotElse {\n             if let ExprKind::Block(..) = els.kind {\n                 match cond.kind {\n                     ExprKind::Unary(UnOp::Not, _) => {\n-                        span_help_and_lint(\n+                        span_lint_and_help(\n                             cx,\n                             IF_NOT_ELSE,\n                             item.span,\n@@ -65,7 +65,7 @@ impl EarlyLintPass for IfNotElse {\n                         );\n                     },\n                     ExprKind::Binary(ref kind, _, _) if kind.node == BinOpKind::Ne => {\n-                        span_help_and_lint(\n+                        span_lint_and_help(\n                             cx,\n                             IF_NOT_ELSE,\n                             item.span,"}, {"sha": "30bb09fd80815b3e57d20a846e0fe0c9f78ea344", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -136,7 +136,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n                     (None, None) => return, // [..] is ok.\n                 };\n \n-                utils::span_help_and_lint(cx, INDEXING_SLICING, expr.span, \"slicing may panic.\", help_msg);\n+                utils::span_lint_and_help(cx, INDEXING_SLICING, expr.span, \"slicing may panic.\", help_msg);\n             } else {\n                 // Catchall non-range index, i.e., [n] or [n << m]\n                 if let ty::Array(..) = ty.kind {\n@@ -147,7 +147,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n                     }\n                 }\n \n-                utils::span_help_and_lint(\n+                utils::span_lint_and_help(\n                     cx,\n                     INDEXING_SLICING,\n                     expr.span,"}, {"sha": "10fe8f28eababd0ead11e36ff5f880c10f13dbae", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -4,7 +4,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n use crate::utils::{\n-    get_trait_def_id, implements_trait, match_type, paths, return_ty, span_help_and_lint, trait_ref_of_method,\n+    get_trait_def_id, implements_trait, match_type, paths, return_ty, span_lint_and_help, trait_ref_of_method,\n     walk_ptrs_ty,\n };\n \n@@ -130,7 +130,7 @@ fn show_lint(cx: &LateContext<'_, '_>, item: &ImplItem<'_>) {\n \n     // Emit either a warning or an error\n     if implements_trait(cx, self_type, display_trait_id, &[]) {\n-        span_help_and_lint(\n+        span_lint_and_help(\n             cx,\n             INHERENT_TO_STRING_SHADOW_DISPLAY,\n             item.span,\n@@ -141,7 +141,7 @@ fn show_lint(cx: &LateContext<'_, '_>, item: &ImplItem<'_>) {\n             &format!(\"remove the inherent method from type `{}`\", self_type.to_string())\n         );\n     } else {\n-        span_help_and_lint(\n+        span_lint_and_help(\n             cx,\n             INHERENT_TO_STRING,\n             item.span,"}, {"sha": "053d66e6af74eb32548fa95b930ac9ae9478518f", "filename": "clippy_lints/src/integer_division.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Finteger_division.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Finteger_division.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finteger_division.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::span_help_and_lint;\n+use crate::utils::span_lint_and_help;\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -30,7 +30,7 @@ declare_lint_pass!(IntegerDivision => [INTEGER_DIVISION]);\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IntegerDivision {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if is_integer_division(cx, expr) {\n-            span_help_and_lint(\n+            span_lint_and_help(\n                 cx,\n                 INTEGER_DIVISION,\n                 expr.span,"}, {"sha": "aa394c85e308c91d67d4023bd35a156275802828", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -7,7 +7,7 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use if_chain::if_chain;\n \n use crate::rustc_target::abi::LayoutOf;\n-use crate::utils::{snippet, span_help_and_lint};\n+use crate::utils::{snippet, span_lint_and_help};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for local arrays that may be too large.\n@@ -49,7 +49,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeStackArrays {\n             if let Ok(element_size) = cx.layout_of(element_type).map(|l| l.size.bytes());\n             if self.maximum_allowed_size < element_count * element_size;\n             then {\n-                span_help_and_lint(\n+                span_lint_and_help(\n                     cx,\n                     LARGE_STACK_ARRAYS,\n                     expr.span,"}, {"sha": "2df3cccb83bb44286255bb334d404fde587d7b18", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{is_must_use_func_call, is_must_use_ty, span_help_and_lint};\n+use crate::utils::{is_must_use_func_call, is_must_use_ty, span_lint_and_help};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `let _ = <expr>`\n@@ -44,15 +44,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n             if let Some(ref init) = local.init;\n             then {\n                 if is_must_use_ty(cx, cx.tables.expr_ty(init)) {\n-                   span_help_and_lint(\n+                   span_lint_and_help(\n                         cx,\n                         LET_UNDERSCORE_MUST_USE,\n                         stmt.span,\n                         \"non-binding let on an expression with `#[must_use]` type\",\n                         \"consider explicitly using expression value\"\n                     )\n                 } else if is_must_use_func_call(cx, init) {\n-                    span_help_and_lint(\n+                    span_lint_and_help(\n                         cx,\n                         LET_UNDERSCORE_MUST_USE,\n                         stmt.span,"}, {"sha": "1aea630efe4ed9e276e9cba07a65a851efb703fe", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -5,7 +5,7 @@ use crate::utils::usage::{is_unused, mutated_variables};\n use crate::utils::{\n     get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n     is_integer_const, is_no_std_crate, is_refutable, last_path_segment, match_trait_method, match_type, match_var,\n-    multispan_sugg, snippet, snippet_opt, snippet_with_applicability, span_help_and_lint, span_lint,\n+    multispan_sugg, snippet, snippet_opt, snippet_with_applicability, span_lint, span_lint_and_help,\n     span_lint_and_sugg, span_lint_and_then, SpanlessEq,\n };\n use crate::utils::{is_type_diagnostic_item, qpath_res, same_tys, sext, sugg};\n@@ -1390,7 +1390,7 @@ fn check_for_loop_arg(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>, e\n fn check_arg_type(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     let ty = cx.tables.expr_ty(arg);\n     if match_type(cx, ty, &paths::OPTION) {\n-        span_help_and_lint(\n+        span_lint_and_help(\n             cx,\n             FOR_LOOP_OVER_OPTION,\n             arg.span,\n@@ -1406,7 +1406,7 @@ fn check_arg_type(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n             ),\n         );\n     } else if match_type(cx, ty, &paths::RESULT) {\n-        span_help_and_lint(\n+        span_lint_and_help(\n             cx,\n             FOR_LOOP_OVER_RESULT,\n             arg.span,"}, {"sha": "7854873509eac355d66130da3440c6b37d58157d", "filename": "clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -2,7 +2,7 @@ use rustc_hir::{Crate, Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-use crate::utils::{is_entrypoint_fn, is_no_std_crate, snippet, span_help_and_lint};\n+use crate::utils::{is_entrypoint_fn, is_no_std_crate, snippet, span_lint_and_help};\n use if_chain::if_chain;\n \n declare_clippy_lint! {\n@@ -48,7 +48,7 @@ impl LateLintPass<'_, '_> for MainRecursion {\n             if let Some(def_id) = path.res.opt_def_id();\n             if is_entrypoint_fn(cx, def_id);\n             then {\n-                span_help_and_lint(\n+                span_lint_and_help(\n                     cx,\n                     MAIN_RECURSION,\n                     func.span,"}, {"sha": "0fc7799c97a1b8d4a3be3aeb1e03170f212ceab8", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -4,7 +4,7 @@ use crate::utils::sugg::Sugg;\n use crate::utils::usage::is_unused;\n use crate::utils::{\n     expr_block, is_allowed, is_expn_of, is_wild, match_qpath, match_type, multispan_sugg, remove_blocks, snippet,\n-    snippet_with_applicability, span_help_and_lint, span_lint_and_sugg, span_lint_and_then, span_note_and_lint,\n+    snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then,\n     walk_ptrs_ty,\n };\n use if_chain::if_chain;\n@@ -449,7 +449,7 @@ fn check_overlapping_arms<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ex: &'tcx Expr<'\n         let type_ranges = type_ranges(&ranges);\n         if !type_ranges.is_empty() {\n             if let Some((start, end)) = overlapping(&type_ranges) {\n-                span_note_and_lint(\n+                span_lint_and_note(\n                     cx,\n                     MATCH_OVERLAPPING_ARM,\n                     start.span,\n@@ -488,7 +488,7 @@ fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                         if is_panic_block(block);\n                         then {\n                             // `Err(_)` or `Err(_e)` arm with `panic!` found\n-                            span_note_and_lint(cx,\n+                            span_lint_and_note(cx,\n                                 MATCH_WILD_ERR_ARM,\n                                 arm.pat.span,\n                                 &format!(\"`Err({})` matches all errors\", &ident_bind_name),\n@@ -700,7 +700,7 @@ fn check_wild_in_or_pats(cx: &LateContext<'_, '_>, arms: &[Arm<'_>]) {\n         if let PatKind::Or(ref fields) = arm.pat.kind {\n             // look for multiple fields in this arm that contains at least one Wild pattern\n             if fields.len() > 1 && fields.iter().any(is_wild) {\n-                span_help_and_lint(\n+                span_lint_and_help(\n                     cx,\n                     WILDCARD_IN_OR_PATTERNS,\n                     arm.pat.span,"}, {"sha": "d2b1fd3a9e61fb6e68864941bc227981beb65871", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    in_macro, match_def_path, match_qpath, paths, snippet, snippet_with_applicability, span_help_and_lint,\n+    in_macro, match_def_path, match_qpath, paths, snippet, snippet_with_applicability, span_lint_and_help,\n     span_lint_and_sugg, span_lint_and_then,\n };\n use if_chain::if_chain;\n@@ -142,7 +142,7 @@ fn check_replace_with_uninit(cx: &LateContext<'_, '_>, src: &Expr<'_>, expr_span\n             if let Some(repl_def_id) = cx.tables.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n             then {\n                 if match_def_path(cx, repl_def_id, &paths::MEM_UNINITIALIZED) {\n-                    span_help_and_lint(\n+                    span_lint_and_help(\n                         cx,\n                         MEM_REPLACE_WITH_UNINIT,\n                         expr_span,\n@@ -151,7 +151,7 @@ fn check_replace_with_uninit(cx: &LateContext<'_, '_>, src: &Expr<'_>, expr_span\n                     );\n                 } else if match_def_path(cx, repl_def_id, &paths::MEM_ZEROED) &&\n                         !cx.tables.expr_ty(src).is_primitive() {\n-                    span_help_and_lint(\n+                    span_lint_and_help(\n                         cx,\n                         MEM_REPLACE_WITH_UNINIT,\n                         expr_span,"}, {"sha": "d00d8dfbd3ed80fbc67cdce968671c62ecd98edc", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -28,8 +28,8 @@ use crate::utils::{\n     is_ctor_or_promotable_const_function, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment,\n     match_def_path, match_qpath, match_trait_method, match_type, match_var, method_calls, method_chain_args, paths,\n     remove_blocks, return_ty, same_tys, single_segment_path, snippet, snippet_with_applicability,\n-    snippet_with_macro_callsite, span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then,\n-    span_note_and_lint, sugg, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n+    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n+    span_lint_and_then, sugg, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -2133,7 +2133,7 @@ fn lint_iter_nth<'a, 'tcx>(\n         return; // caller is not a type that we want to lint\n     };\n \n-    span_help_and_lint(\n+    span_lint_and_help(\n         cx,\n         ITER_NTH,\n         expr.span,\n@@ -2242,7 +2242,7 @@ fn lint_get_unwrap<'a, 'tcx>(\n fn lint_iter_skip_next(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>) {\n     // lint if caller of skip is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        span_help_and_lint(\n+        span_lint_and_help(\n             cx,\n             ITER_SKIP_NEXT,\n             expr.span,\n@@ -2303,7 +2303,7 @@ fn lint_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, unwrap_args: &[hi\n     };\n \n     if let Some((lint, kind, none_value)) = mess {\n-        span_help_and_lint(\n+        span_lint_and_help(\n             cx,\n             lint,\n             expr.span,\n@@ -2330,7 +2330,7 @@ fn lint_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, expect_args: &[hi\n     };\n \n     if let Some((lint, kind, none_value)) = mess {\n-        span_help_and_lint(\n+        span_lint_and_help(\n             cx,\n             lint,\n             expr.span,\n@@ -2350,7 +2350,7 @@ fn lint_ok_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, ok_args: &[hir\n         if has_debug_impl(error_type, cx);\n \n         then {\n-            span_help_and_lint(\n+            span_lint_and_help(\n                 cx,\n                 OK_EXPECT,\n                 expr.span,\n@@ -2422,7 +2422,7 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n         let multiline = map_snippet.lines().count() > 1 || unwrap_snippet.lines().count() > 1;\n         let same_span = map_args[1].span.ctxt() == unwrap_args[1].span.ctxt();\n         if same_span && !multiline {\n-            span_note_and_lint(\n+            span_lint_and_note(\n                 cx,\n                 if is_option {\n                     OPTION_MAP_UNWRAP_OR_ELSE\n@@ -2566,7 +2566,7 @@ fn lint_filter_next<'a, 'tcx>(\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n         if filter_snippet.lines().count() <= 1 {\n             // add note if not multi-line\n-            span_note_and_lint(\n+            span_lint_and_note(\n                 cx,\n                 FILTER_NEXT,\n                 expr.span,\n@@ -2588,7 +2588,7 @@ fn lint_skip_while_next<'a, 'tcx>(\n ) {\n     // lint if caller of `.skip_while().next()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n-        span_help_and_lint(\n+        span_lint_and_help(\n             cx,\n             SKIP_WHILE_NEXT,\n             expr.span,\n@@ -2609,7 +2609,7 @@ fn lint_filter_map<'a, 'tcx>(\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter(p).map(q)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.filter_map(..)` instead\";\n-        span_help_and_lint(cx, FILTER_MAP, expr.span, msg, hint);\n+        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, hint);\n     }\n }\n \n@@ -2624,7 +2624,7 @@ fn lint_filter_map_next<'a, 'tcx>(\n                    `.find_map(p)` instead.\";\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");\n         if filter_snippet.lines().count() <= 1 {\n-            span_note_and_lint(\n+            span_lint_and_note(\n                 cx,\n                 FILTER_MAP_NEXT,\n                 expr.span,\n@@ -2649,7 +2649,7 @@ fn lint_find_map<'a, 'tcx>(\n     if match_trait_method(cx, &map_args[0], &paths::ITERATOR) {\n         let msg = \"called `find(p).map(q)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.find_map(..)` instead\";\n-        span_help_and_lint(cx, FIND_MAP, expr.span, msg, hint);\n+        span_lint_and_help(cx, FIND_MAP, expr.span, msg, hint);\n     }\n }\n \n@@ -2664,7 +2664,7 @@ fn lint_filter_map_map<'a, 'tcx>(\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let msg = \"called `filter_map(p).map(q)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by only calling `.filter_map(..)` instead\";\n-        span_help_and_lint(cx, FILTER_MAP, expr.span, msg, hint);\n+        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, hint);\n     }\n }\n \n@@ -2680,7 +2680,7 @@ fn lint_filter_flat_map<'a, 'tcx>(\n         let msg = \"called `filter(p).flat_map(q)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n             and filtering by returning `iter::empty()`\";\n-        span_help_and_lint(cx, FILTER_MAP, expr.span, msg, hint);\n+        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, hint);\n     }\n }\n \n@@ -2696,7 +2696,7 @@ fn lint_filter_map_flat_map<'a, 'tcx>(\n         let msg = \"called `filter_map(p).flat_map(q)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n             and filtering by returning `iter::empty()`\";\n-        span_help_and_lint(cx, FILTER_MAP, expr.span, msg, hint);\n+        span_lint_and_help(cx, FILTER_MAP, expr.span, msg, hint);\n     }\n }\n \n@@ -3077,7 +3077,7 @@ fn is_maybe_uninit_ty_valid(cx: &LateContext<'_, '_>, ty: Ty<'_>) -> bool {\n }\n \n fn lint_suspicious_map(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>) {\n-    span_help_and_lint(\n+    span_lint_and_help(\n         cx,\n         SUSPICIOUS_MAP,\n         expr.span,\n@@ -3436,5 +3436,5 @@ fn lint_filetype_is_file(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, args: &\n     }\n     let lint_msg = format!(\"`{}FileType::is_file()` only {} regular files\", lint_unary, verb);\n     let help_msg = format!(\"use `{}FileType::is_dir()` instead\", help_unary);\n-    span_help_and_lint(cx, FILETYPE_IS_FILE, span, &lint_msg, &help_msg);\n+    span_lint_and_help(cx, FILETYPE_IS_FILE, span, &lint_msg, &help_msg);\n }"}, {"sha": "4629a53025c43b53f960806f64efe742a986cb1d", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    constants, snippet_opt, snippet_with_applicability, span_help_and_lint, span_lint, span_lint_and_sugg,\n+    constants, snippet_opt, snippet_with_applicability, span_lint, span_lint_and_help, span_lint_and_sugg,\n     span_lint_and_then,\n };\n use if_chain::if_chain;\n@@ -305,7 +305,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                 }\n             }\n             if !pfields.is_empty() && wilds == pfields.len() {\n-                span_help_and_lint(\n+                span_lint_and_help(\n                     cx,\n                     UNNEEDED_FIELD_PATTERN,\n                     pat.span,\n@@ -338,7 +338,7 @@ impl EarlyLintPass for MiscEarlyLints {\n                                 \"You matched a field with a wildcard pattern. Consider using `..` instead\",\n                             );\n                         } else {\n-                            span_help_and_lint(\n+                            span_lint_and_help(\n                                 cx,\n                                 UNNEEDED_FIELD_PATTERN,\n                                 field.span,"}, {"sha": "ac14b113cc58a881d38c350cea718932ffd59a82", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -39,7 +39,7 @@ use rustc_span::source_map::{original_sp, DUMMY_SP};\n use std::borrow::Cow;\n use syntax::ast;\n \n-use crate::utils::{snippet, snippet_block, span_help_and_lint, trim_multiline};\n+use crate::utils::{snippet, snippet_block, span_lint_and_help, trim_multiline};\n \n declare_clippy_lint! {\n     /// **What it does:** The lint checks for `if`-statements appearing in loops\n@@ -300,7 +300,7 @@ fn emit_warning<'a>(ctx: &EarlyContext<'_>, data: &'a LintData<'_>, header: &str\n             data.if_expr,\n         ),\n     };\n-    span_help_and_lint(ctx, NEEDLESS_CONTINUE, expr.span, message, &snip);\n+    span_lint_and_help(ctx, NEEDLESS_CONTINUE, expr.span, message, &snip);\n }\n \n fn suggestion_snippet_for_continue_inside_if<'a>("}, {"sha": "5de0e441367a6dc42a89ec2fa8b80d0bfcecb4e1", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,5 +1,5 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::{is_expn_of, match_def_path, match_type, paths, span_help_and_lint, span_lint};\n+use crate::utils::{is_expn_of, match_def_path, match_type, paths, span_lint, span_lint_and_help};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::*;\n@@ -208,7 +208,7 @@ fn check_regex<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>, utf8:\n             match parser.parse(r) {\n                 Ok(r) => {\n                     if let Some(repl) = is_trivial_regex(&r) {\n-                        span_help_and_lint(cx, TRIVIAL_REGEX, expr.span, \"trivial regex\", repl);\n+                        span_lint_and_help(cx, TRIVIAL_REGEX, expr.span, \"trivial regex\", repl);\n                     }\n                 },\n                 Err(regex_syntax::Error::Parse(e)) => {\n@@ -236,7 +236,7 @@ fn check_regex<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>, utf8:\n         match parser.parse(&r) {\n             Ok(r) => {\n                 if let Some(repl) = is_trivial_regex(&r) {\n-                    span_help_and_lint(cx, TRIVIAL_REGEX, expr.span, \"trivial regex\", repl);\n+                    span_lint_and_help(cx, TRIVIAL_REGEX, expr.span, \"trivial regex\", repl);\n                 }\n             },\n             Err(regex_syntax::Error::Parse(e)) => {"}, {"sha": "858b505712d31490c34d99ce42ac163d4afb2a2e", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{in_macro, snippet, span_help_and_lint, SpanlessHash};\n+use crate::utils::{in_macro, snippet, span_lint_and_help, SpanlessHash};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -63,7 +63,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n                     }\n                     hint_string.truncate(hint_string.len() - 2);\n                     hint_string.push('`');\n-                    span_help_and_lint(\n+                    span_lint_and_help(\n                         cx,\n                         TYPE_REPETITION_IN_BOUNDS,\n                         p.span,"}, {"sha": "4fcf39d214288c6ef8b4ce09ef7e377bd6f87c1f", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -27,7 +27,7 @@ use crate::utils::paths;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, int_bits, last_path_segment, match_def_path,\n     match_path, method_chain_args, multispan_sugg, qpath_res, same_tys, sext, snippet, snippet_opt,\n-    snippet_with_applicability, snippet_with_macro_callsite, span_help_and_lint, span_lint, span_lint_and_sugg,\n+    snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg,\n     span_lint_and_then, unsext,\n };\n \n@@ -264,7 +264,7 @@ impl Types {\n                 if let Some(def_id) = res.opt_def_id() {\n                     if Some(def_id) == cx.tcx.lang_items().owned_box() {\n                         if match_type_parameter(cx, qpath, &paths::VEC) {\n-                            span_help_and_lint(\n+                            span_lint_and_help(\n                                 cx,\n                                 BOX_VEC,\n                                 hir_ty.span,\n@@ -321,7 +321,7 @@ impl Types {\n                             return; // don't recurse into the type\n                         }\n                     } else if match_def_path(cx, def_id, &paths::LINKED_LIST) {\n-                        span_help_and_lint(\n+                        span_lint_and_help(\n                             cx,\n                             LINKEDLIST,\n                             hir_ty.span,\n@@ -1785,7 +1785,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AbsurdExtremeComparisons {\n                         conclusion\n                     );\n \n-                    span_help_and_lint(cx, ABSURD_EXTREME_COMPARISONS, expr.span, msg, &help);\n+                    span_lint_and_help(cx, ABSURD_EXTREME_COMPARISONS, expr.span, msg, &help);\n                 }\n             }\n         }"}, {"sha": "9f1a7aaf977cb063117b11b478f977bcb4906b28", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -6,7 +6,7 @@ use rustc_hir::{AssocItemKind, HirId, ImplItem, ImplItemKind, ImplItemRef, ItemK\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::span_help_and_lint;\n+use crate::utils::span_lint_and_help;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks methods that contain a `self` argument but don't use it\n@@ -71,7 +71,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedSelf {\n                         };\n                         visitor.visit_body(body);\n                         if !visitor.uses_self {\n-                            span_help_and_lint(\n+                            span_lint_and_help(\n                                 cx,\n                                 UNUSED_SELF,\n                                 self_param.span,"}, {"sha": "9739b118f7494e2dcc2bc4749871637f588c67ad", "filename": "clippy_lints/src/utils/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fdiagnostics.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -69,7 +69,7 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n ///    |\n ///    = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n /// ```\n-pub fn span_help_and_lint<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str) {\n+pub fn span_lint_and_help<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, span: Span, msg: &str, help: &str) {\n     let mut db = DiagnosticWrapper(cx.struct_span_lint(lint, span, msg));\n     db.0.help(help);\n     db.docs_link(lint);\n@@ -96,7 +96,7 @@ pub fn span_help_and_lint<'a, T: LintContext>(cx: &'a T, lint: &'static Lint, sp\n /// 10 |     forget(&SomeStruct);\n ///    |            ^^^^^^^^^^^\n /// ```\n-pub fn span_note_and_lint<'a, T: LintContext>(\n+pub fn span_lint_and_note<'a, T: LintContext>(\n     cx: &'a T,\n     lint: &'static Lint,\n     span: Span,"}, {"sha": "af07cf6665836b91499934bbf6a4efa89611fa06", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    is_expn_of, match_def_path, match_type, method_calls, paths, span_help_and_lint, span_lint, span_lint_and_sugg,\n+    is_expn_of, match_def_path, match_type, method_calls, paths, span_lint, span_lint_and_help, span_lint_and_sugg,\n     walk_ptrs_ty,\n };\n use if_chain::if_chain;\n@@ -318,8 +318,8 @@ impl CompilerLintFunctions {\n         map.insert(\"span_lint\", \"utils::span_lint\");\n         map.insert(\"struct_span_lint\", \"utils::span_lint\");\n         map.insert(\"lint\", \"utils::span_lint\");\n-        map.insert(\"span_lint_note\", \"utils::span_note_and_lint\");\n-        map.insert(\"span_lint_help\", \"utils::span_help_and_lint\");\n+        map.insert(\"span_lint_note\", \"utils::span_lint_and_note\");\n+        map.insert(\"span_lint_help\", \"utils::span_lint_and_help\");\n         Self { map }\n     }\n }\n@@ -336,7 +336,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for CompilerLintFunctions {\n             if match_type(cx, ty, &paths::EARLY_CONTEXT)\n                 || match_type(cx, ty, &paths::LATE_CONTEXT);\n             then {\n-                span_help_and_lint(\n+                span_lint_and_help(\n                     cx,\n                     COMPILER_LINT_FUNCTIONS,\n                     path.ident.span,"}, {"sha": "f36da58843f3e1050c0591bb886b73a9c531c667", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -1,5 +1,5 @@\n use crate::consts::{constant_simple, Constant};\n-use crate::utils::span_help_and_lint;\n+use crate::utils::span_lint_and_help;\n use if_chain::if_chain;\n use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -45,7 +45,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ZeroDiv {\n                     | (_, Constant::F64(_)) => \"f64\",\n                     _ => \"f32\"\n                 };\n-                span_help_and_lint(\n+                span_lint_and_help(\n                     cx,\n                     ZERO_DIVIDED_BY_ZERO,\n                     expr.span,"}, {"sha": "fcd7dd75760af1f924dedd98ddc1234f2106e415", "filename": "doc/adding_lints.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5e722ba670c7223c6048fb4e9c1d4833515d16d0/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/5e722ba670c7223c6048fb4e9c1d4833515d16d0/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=5e722ba670c7223c6048fb4e9c1d4833515d16d0", "patch": "@@ -249,14 +249,14 @@ Depending on how complex we want our lint message to be, we can choose from a\n variety of lint emission functions. They can all be found in\n [`clippy_lints/src/utils/diagnostics.rs`][diagnostics].\n \n-`span_help_and_lint` seems most appropriate in this case. It allows us to\n+`span_lint_and_help` seems most appropriate in this case. It allows us to\n provide an extra help message and we can't really suggest a better name\n automatically. This is how it looks:\n \n ```rust\n impl EarlyLintPass for FooFunctions {\n     fn check_fn(&mut self, cx: &EarlyContext<'_>, _: FnKind<'_>, _: &FnDecl, span: Span, _: NodeId) {\n-        span_help_and_lint(\n+        span_lint_and_help(\n             cx,\n             FOO_FUNCTIONS,\n             span,\n@@ -284,7 +284,7 @@ With that we can expand our `check_fn` method to:\n impl EarlyLintPass for FooFunctions {\n     fn check_fn(&mut self, cx: &EarlyContext<'_>, fn_kind: FnKind<'_>, _: &FnDecl, span: Span, _: NodeId) {\n         if is_foo_fn(fn_kind) {\n-            span_help_and_lint(\n+            span_lint_and_help(\n                 cx,\n                 FOO_FUNCTIONS,\n                 span,"}]}