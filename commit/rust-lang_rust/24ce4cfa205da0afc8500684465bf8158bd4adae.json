{"sha": "24ce4cfa205da0afc8500684465bf8158bd4adae", "node_id": "C_kwDOAAsO6NoAKDI0Y2U0Y2ZhMjA1ZGEwYWZjODUwMDY4NDQ2NWJmODE1OGJkNGFkYWU", "commit": {"author": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-10-13T19:18:36Z"}, "committer": {"name": "nils", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-10-14T20:35:56Z"}, "message": "Remove the `describe` method from the `QueryDescription` trait\n\nIt was called directly already, but now it's even more useless since it\njust forwards to the free function. Call it directly.", "tree": {"sha": "02ae34277ca3866a7e7307f15e95d3b07bd22378", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02ae34277ca3866a7e7307f15e95d3b07bd22378"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24ce4cfa205da0afc8500684465bf8158bd4adae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgWnoWpkMvJlSFxMiZfPmQ9OBZ0B\nzicY1KArCIU18CM8IAAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQD2o/qqtmxytuQVij8PTOKDx+VuL9i02b7UGeJUJl1ogVrdUzw6rlaPouef2v7q/8v\nH5Hbemx5l6F027vAweSgY=\n-----END SSH SIGNATURE-----", "payload": "tree 02ae34277ca3866a7e7307f15e95d3b07bd22378\nparent 167b3bd3b23bad1a8436f7a7a8637ec64d41acd6\nauthor nils <48135649+Nilstrieb@users.noreply.github.com> 1665688716 +0200\ncommitter nils <48135649+Nilstrieb@users.noreply.github.com> 1665779756 +0200\n\nRemove the `describe` method from the `QueryDescription` trait\n\nIt was called directly already, but now it's even more useless since it\njust forwards to the free function. Call it directly.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24ce4cfa205da0afc8500684465bf8158bd4adae", "html_url": "https://github.com/rust-lang/rust/commit/24ce4cfa205da0afc8500684465bf8158bd4adae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24ce4cfa205da0afc8500684465bf8158bd4adae/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "167b3bd3b23bad1a8436f7a7a8637ec64d41acd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/167b3bd3b23bad1a8436f7a7a8637ec64d41acd6", "html_url": "https://github.com/rust-lang/rust/commit/167b3bd3b23bad1a8436f7a7a8637ec64d41acd6"}], "stats": {"total": 14, "additions": 4, "deletions": 10}, "files": [{"sha": "1d17f4221969d52e2df60fac24971303ddcfa697", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24ce4cfa205da0afc8500684465bf8158bd4adae/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ce4cfa205da0afc8500684465bf8158bd4adae/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=24ce4cfa205da0afc8500684465bf8158bd4adae", "patch": "@@ -298,7 +298,7 @@ pub(crate) fn create_query_frame<\n     K: Copy + Key + for<'a> HashStable<StableHashingContext<'a>>,\n >(\n     tcx: QueryCtxt<'tcx>,\n-    do_describe: fn(QueryCtxt<'tcx>, K) -> String,\n+    do_describe: fn(TyCtxt<'tcx>, K) -> String,\n     key: K,\n     kind: DepKind,\n     name: &'static str,\n@@ -307,7 +307,7 @@ pub(crate) fn create_query_frame<\n     // Showing visible path instead of any path is not that important in production.\n     let description = ty::print::with_no_visible_paths!(\n         // Force filename-line mode to avoid invoking `type_of` query.\n-        ty::print::with_forced_impl_filename_line!(do_describe(tcx, key))\n+        ty::print::with_forced_impl_filename_line!(do_describe(tcx.tcx, key))\n     );\n     let description =\n         if tcx.sess.verbose() { format!(\"{} [{}]\", description, name) } else { description };\n@@ -466,10 +466,6 @@ macro_rules! define_queries {\n         }\n \n         impl<'tcx> QueryDescription<QueryCtxt<'tcx>> for queries::$name<'tcx> {\n-            fn describe(tcx: QueryCtxt<'tcx>, key: Self::Key) -> String {\n-                ::rustc_middle::query::descs::$name(tcx.tcx, key)\n-            }\n-\n             #[inline]\n             fn cache_on_disk(tcx: TyCtxt<'tcx>, key: &Self::Key) -> bool {\n                 ::rustc_middle::query::cached::$name(tcx, key)\n@@ -583,7 +579,7 @@ macro_rules! define_queries {\n             use rustc_middle::ty::TyCtxt;\n             use $crate::plumbing::{QueryStruct, QueryCtxt};\n             use $crate::profiling_support::QueryKeyStringCache;\n-            use rustc_query_system::query::{QueryDescription, QueryMap};\n+            use rustc_query_system::query::QueryMap;\n \n             pub(super) const fn dummy_query_struct<'tcx>() -> QueryStruct<'tcx> {\n                 fn noop_try_collect_active_jobs(_: QueryCtxt<'_>, _: &mut QueryMap) -> Option<()> {\n@@ -610,7 +606,7 @@ macro_rules! define_queries {\n                     let make_query = |tcx, key| {\n                         let kind = rustc_middle::dep_graph::DepKind::$name;\n                         let name = stringify!($name);\n-                        $crate::plumbing::create_query_frame(tcx, super::queries::$name::describe, key, kind, name)\n+                        $crate::plumbing::create_query_frame(tcx, rustc_middle::query::descs::$name, key, kind, name)\n                     };\n                     tcx.queries.$name.try_collect_active_jobs(\n                         tcx,"}, {"sha": "0a1cffa3b3331ecaabcecbaaca3562ba5a416c66", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24ce4cfa205da0afc8500684465bf8158bd4adae/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ce4cfa205da0afc8500684465bf8158bd4adae/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=24ce4cfa205da0afc8500684465bf8158bd4adae", "patch": "@@ -49,8 +49,6 @@ impl<CTX: QueryContext, K, V> QueryVTable<CTX, K, V> {\n pub trait QueryDescription<CTX: QueryContext>: QueryConfig {\n     type Cache: QueryCache<Key = Self::Key, Stored = Self::Stored, Value = Self::Value>;\n \n-    fn describe(tcx: CTX, key: Self::Key) -> String;\n-\n     // Don't use this method to access query results, instead use the methods on TyCtxt\n     fn query_state<'a>(tcx: CTX) -> &'a QueryState<Self::Key>\n     where"}]}