{"sha": "e03948ef3e19ff90066ca366bf76c390d7a42bc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMzk0OGVmM2UxOWZmOTAwNjZjYTM2NmJmNzZjMzkwZDdhNDJiYzU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-06-25T17:34:49Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-06-29T12:19:52Z"}, "message": "Make `$crate` a keyword", "tree": {"sha": "dcbabd39f56a901eeb0f9758b887bc398c9b6c2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcbabd39f56a901eeb0f9758b887bc398c9b6c2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e03948ef3e19ff90066ca366bf76c390d7a42bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e03948ef3e19ff90066ca366bf76c390d7a42bc5", "html_url": "https://github.com/rust-lang/rust/commit/e03948ef3e19ff90066ca366bf76c390d7a42bc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e03948ef3e19ff90066ca366bf76c390d7a42bc5/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "html_url": "https://github.com/rust-lang/rust/commit/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a"}], "stats": {"total": 205, "additions": 139, "deletions": 66}, "files": [{"sha": "c6f4cd585d7b5d41accf1b189aaa2901ef935fb2", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=e03948ef3e19ff90066ca366bf76c390d7a42bc5", "patch": "@@ -1527,7 +1527,8 @@ impl<'a> State<'a> {\n             if i > 0 {\n                 word(&mut self.s, \"::\")?\n             }\n-            if segment.name != keywords::CrateRoot.name() && segment.name != \"$crate\" {\n+            if segment.name != keywords::CrateRoot.name() &&\n+               segment.name != keywords::DollarCrate.name() {\n                 self.print_name(segment.name)?;\n                 self.print_path_parameters(&segment.parameters, colons_before_params)?;\n             }\n@@ -1554,7 +1555,8 @@ impl<'a> State<'a> {\n                     if i > 0 {\n                         word(&mut self.s, \"::\")?\n                     }\n-                    if segment.name != keywords::CrateRoot.name() && segment.name != \"$crate\" {\n+                    if segment.name != keywords::CrateRoot.name() &&\n+                       segment.name != keywords::DollarCrate.name() {\n                         self.print_name(segment.name)?;\n                         self.print_path_parameters(&segment.parameters, colons_before_params)?;\n                     }"}, {"sha": "4b6b754dca655cd7c77df77e2b1a37b26e59f1f7", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=e03948ef3e19ff90066ca366bf76c390d7a42bc5", "patch": "@@ -149,14 +149,15 @@ impl<'a> Resolver<'a> {\n                             resolve_error(self,\n                                           view_path.span,\n                                           ResolutionError::SelfImportsOnlyAllowedWithin);\n-                        } else if source_name == \"$crate\" && full_path.segments.len() == 1 {\n+                        } else if source_name == keywords::DollarCrate.name() &&\n+                                  full_path.segments.len() == 1 {\n                             let crate_root = self.resolve_crate_root(source.ctxt);\n                             let crate_name = match crate_root.kind {\n                                 ModuleKind::Def(_, name) => name,\n                                 ModuleKind::Block(..) => unreachable!(),\n                             };\n                             source.name = crate_name;\n-                            if binding.name == \"$crate\" {\n+                            if binding.name == keywords::DollarCrate.name() {\n                                 binding.name = crate_name;\n                             }\n "}, {"sha": "4bfe4d25ded9373ecdfe3a96e907469320426894", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e03948ef3e19ff90066ca366bf76c390d7a42bc5", "patch": "@@ -2665,7 +2665,8 @@ impl<'a> Resolver<'a> {\n         };\n \n         if path.len() > 1 && !global_by_default && result.base_def() != Def::Err &&\n-           path[0].name != keywords::CrateRoot.name() && path[0].name != \"$crate\" {\n+           path[0].name != keywords::CrateRoot.name() &&\n+           path[0].name != keywords::DollarCrate.name() {\n             let unqualified_result = {\n                 match self.resolve_path(&[*path.last().unwrap()], Some(ns), false, span) {\n                     PathResult::NonModule(path_res) => path_res.base_def(),\n@@ -2718,7 +2719,7 @@ impl<'a> Resolver<'a> {\n             if i == 0 && ns == TypeNS && ident.name == keywords::CrateRoot.name() {\n                 module = Some(self.resolve_crate_root(ident.ctxt.modern()));\n                 continue\n-            } else if i == 0 && ns == TypeNS && ident.name == \"$crate\" {\n+            } else if i == 0 && ns == TypeNS && ident.name == keywords::DollarCrate.name() {\n                 module = Some(self.resolve_crate_root(ident.ctxt));\n                 continue\n             }"}, {"sha": "0fbc596f2e1c24f132ebbbcd292b094503279866", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=e03948ef3e19ff90066ca366bf76c390d7a42bc5", "patch": "@@ -128,7 +128,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         impl<'a, 'b> Folder for EliminateCrateVar<'a, 'b> {\n             fn fold_path(&mut self, mut path: ast::Path) -> ast::Path {\n                 let ident = path.segments[0].identifier;\n-                if ident.name == \"$crate\" {\n+                if ident.name == keywords::DollarCrate.name() {\n                     path.segments[0].identifier.name = keywords::CrateRoot.name();\n                     let module = self.0.resolve_crate_root(ident.ctxt);\n                     if !module.is_local() {"}, {"sha": "ecab801d40853f307f5db177f8fece4496509dfd", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e03948ef3e19ff90066ca366bf76c390d7a42bc5", "patch": "@@ -97,9 +97,8 @@ impl Path {\n     }\n \n     pub fn default_to_global(mut self) -> Path {\n-        let name = self.segments[0].identifier.name;\n-        if !self.is_global() && name != \"$crate\" &&\n-           name != keywords::SelfValue.name() && name != keywords::Super.name() {\n+        if !self.is_global() &&\n+           !::parse::token::Ident(self.segments[0].identifier).is_path_segment_keyword() {\n             self.segments.insert(0, PathSegment::crate_root());\n         }\n         self"}, {"sha": "c094a23cefc4a0cec5120c25f4be2fbca3b1565d", "filename": "src/libsyntax/ext/tt/quoted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fquoted.rs?ref=e03948ef3e19ff90066ca366bf76c390d7a42bc5", "patch": "@@ -12,7 +12,7 @@ use ast;\n use ext::tt::macro_parser;\n use parse::{ParseSess, token};\n use print::pprust;\n-use symbol::{keywords, Symbol};\n+use symbol::keywords;\n use syntax_pos::{DUMMY_SP, Span, BytePos};\n use tokenstream;\n \n@@ -196,7 +196,7 @@ fn parse_tree<I>(tree: tokenstream::TokenTree,\n             Some(tokenstream::TokenTree::Token(ident_span, token::Ident(ident))) => {\n                 let span = Span { lo: span.lo, ..ident_span };\n                 if ident.name == keywords::Crate.name() {\n-                    let ident = ast::Ident { name: Symbol::intern(\"$crate\"), ..ident };\n+                    let ident = ast::Ident { name: keywords::DollarCrate.name(), ..ident };\n                     TokenTree::Token(span, token::Ident(ident))\n                 } else {\n                     TokenTree::Token(span, token::SubstNt(ident))"}, {"sha": "d6a4dc2ee96181eaf9e31493436f69ee1c03479b", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=e03948ef3e19ff90066ca366bf76c390d7a42bc5", "patch": "@@ -327,7 +327,8 @@ impl Token {\n         match self.ident() {\n             Some(id) => id.name == keywords::Super.name() ||\n                         id.name == keywords::SelfValue.name() ||\n-                        id.name == keywords::SelfType.name(),\n+                        id.name == keywords::SelfType.name() ||\n+                        id.name == keywords::DollarCrate.name(),\n             None => false,\n         }\n     }"}, {"sha": "6c00e0b9efd7ec23825a0aac6808e5a7c66ed827", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e03948ef3e19ff90066ca366bf76c390d7a42bc5", "patch": "@@ -761,7 +761,7 @@ pub trait PrintState<'a> {\n                         word(self.writer(), \"::\")?\n                     }\n                     if segment.identifier.name != keywords::CrateRoot.name() &&\n-                       segment.identifier.name != \"$crate\" {\n+                       segment.identifier.name != keywords::DollarCrate.name() {\n                         word(self.writer(), &segment.identifier.name.as_str())?;\n                     }\n                 }\n@@ -2375,7 +2375,7 @@ impl<'a> State<'a> {\n                           -> io::Result<()>\n     {\n         if segment.identifier.name != keywords::CrateRoot.name() &&\n-           segment.identifier.name != \"$crate\" {\n+           segment.identifier.name != keywords::DollarCrate.name() {\n             self.print_ident(segment.identifier)?;\n             if let Some(ref parameters) = segment.parameters {\n                 self.print_path_parameters(parameters, colons_before_params)?;"}, {"sha": "5e2e448f741c6675fe3e25a1127424d31618a393", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 52, "deletions": 51, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=e03948ef3e19ff90066ca366bf76c390d7a42bc5", "patch": "@@ -250,63 +250,64 @@ declare_keywords! {\n     (4,  Const,          \"const\")\n     (5,  Continue,       \"continue\")\n     (6,  Crate,          \"crate\")\n-    (7,  Else,           \"else\")\n-    (8,  Enum,           \"enum\")\n-    (9,  Extern,         \"extern\")\n-    (10, False,          \"false\")\n-    (11, Fn,             \"fn\")\n-    (12, For,            \"for\")\n-    (13, If,             \"if\")\n-    (14, Impl,           \"impl\")\n-    (15, In,             \"in\")\n-    (16, Let,            \"let\")\n-    (17, Loop,           \"loop\")\n-    (18, Match,          \"match\")\n-    (19, Mod,            \"mod\")\n-    (20, Move,           \"move\")\n-    (21, Mut,            \"mut\")\n-    (22, Pub,            \"pub\")\n-    (23, Ref,            \"ref\")\n-    (24, Return,         \"return\")\n-    (25, SelfValue,      \"self\")\n-    (26, SelfType,       \"Self\")\n-    (27, Static,         \"static\")\n-    (28, Struct,         \"struct\")\n-    (29, Super,          \"super\")\n-    (30, Trait,          \"trait\")\n-    (31, True,           \"true\")\n-    (32, Type,           \"type\")\n-    (33, Unsafe,         \"unsafe\")\n-    (34, Use,            \"use\")\n-    (35, Where,          \"where\")\n-    (36, While,          \"while\")\n+    (7,  DollarCrate,    \"$crate\")\n+    (8,  Else,           \"else\")\n+    (9,  Enum,           \"enum\")\n+    (10, Extern,         \"extern\")\n+    (11, False,          \"false\")\n+    (12, Fn,             \"fn\")\n+    (13, For,            \"for\")\n+    (14, If,             \"if\")\n+    (15, Impl,           \"impl\")\n+    (16, In,             \"in\")\n+    (17, Let,            \"let\")\n+    (18, Loop,           \"loop\")\n+    (19, Match,          \"match\")\n+    (20, Mod,            \"mod\")\n+    (21, Move,           \"move\")\n+    (22, Mut,            \"mut\")\n+    (23, Pub,            \"pub\")\n+    (24, Ref,            \"ref\")\n+    (25, Return,         \"return\")\n+    (26, SelfValue,      \"self\")\n+    (27, SelfType,       \"Self\")\n+    (28, Static,         \"static\")\n+    (29, Struct,         \"struct\")\n+    (30, Super,          \"super\")\n+    (31, Trait,          \"trait\")\n+    (32, True,           \"true\")\n+    (33, Type,           \"type\")\n+    (34, Unsafe,         \"unsafe\")\n+    (35, Use,            \"use\")\n+    (36, Where,          \"where\")\n+    (37, While,          \"while\")\n \n     // Keywords reserved for future use.\n-    (37, Abstract,       \"abstract\")\n-    (38, Alignof,        \"alignof\")\n-    (39, Become,         \"become\")\n-    (40, Do,             \"do\")\n-    (41, Final,          \"final\")\n-    (42, Macro,          \"macro\")\n-    (43, Offsetof,       \"offsetof\")\n-    (44, Override,       \"override\")\n-    (45, Priv,           \"priv\")\n-    (46, Proc,           \"proc\")\n-    (47, Pure,           \"pure\")\n-    (48, Sizeof,         \"sizeof\")\n-    (49, Typeof,         \"typeof\")\n-    (50, Unsized,        \"unsized\")\n-    (51, Virtual,        \"virtual\")\n-    (52, Yield,          \"yield\")\n+    (38, Abstract,       \"abstract\")\n+    (39, Alignof,        \"alignof\")\n+    (40, Become,         \"become\")\n+    (41, Do,             \"do\")\n+    (42, Final,          \"final\")\n+    (43, Macro,          \"macro\")\n+    (44, Offsetof,       \"offsetof\")\n+    (45, Override,       \"override\")\n+    (46, Priv,           \"priv\")\n+    (47, Proc,           \"proc\")\n+    (48, Pure,           \"pure\")\n+    (49, Sizeof,         \"sizeof\")\n+    (50, Typeof,         \"typeof\")\n+    (51, Unsized,        \"unsized\")\n+    (52, Virtual,        \"virtual\")\n+    (53, Yield,          \"yield\")\n \n     // Weak keywords, have special meaning only in specific contexts.\n-    (53, Default,        \"default\")\n-    (54, StaticLifetime, \"'static\")\n-    (55, Union,          \"union\")\n-    (56, Catch,          \"catch\")\n+    (54, Default,        \"default\")\n+    (55, StaticLifetime, \"'static\")\n+    (56, Union,          \"union\")\n+    (57, Catch,          \"catch\")\n \n     // A virtual keyword that resolves to the crate root when used in a lexical scope.\n-    (57, CrateRoot, \"{{root}}\")\n+    (58, CrateRoot,      \"{{root}}\")\n }\n \n // If an interner exists in TLS, return it. Otherwise, prepare a fresh one."}, {"sha": "e221fc6e9e055503a941d42720aabdc0cfe8601e", "filename": "src/test/compile-fail/dollar-crate-is-keyword-2.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Ftest%2Fcompile-fail%2Fdollar-crate-is-keyword-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Ftest%2Fcompile-fail%2Fdollar-crate-is-keyword-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdollar-crate-is-keyword-2.rs?ref=e03948ef3e19ff90066ca366bf76c390d7a42bc5", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod a {}\n+\n+macro_rules! m {\n+    () => {\n+        use a::$crate; //~ ERROR unresolved import `a::$crate`\n+        use a::$crate::b; //~ ERROR unresolved import `a::$crate::b`\n+        type A = a::$crate; //~ ERROR cannot find type `$crate` in module `a`\n+    }\n+}\n+\n+m!();\n+\n+fn main() {}"}, {"sha": "0bd47a0e11a102bc94045f20ac821a97b26fb77a", "filename": "src/test/compile-fail/dollar-crate-is-keyword.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Ftest%2Fcompile-fail%2Fdollar-crate-is-keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Ftest%2Fcompile-fail%2Fdollar-crate-is-keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdollar-crate-is-keyword.rs?ref=e03948ef3e19ff90066ca366bf76c390d7a42bc5", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! m {\n+    () => {\n+        struct $crate {} //~ ERROR expected identifier, found keyword `$crate`\n+\n+        use $crate; // OK\n+                    //~^ WARN `$crate` may not be imported\n+        use $crate as $crate; //~ ERROR expected identifier, found keyword `$crate`\n+                              //~^ WARN `$crate` may not be imported\n+    }\n+}\n+\n+m!();\n+\n+fn main() {}"}, {"sha": "6b5286bf0a7da9e969f4704714fa5b08e59727ef", "filename": "src/test/compile-fail/use-self-type.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Ftest%2Fcompile-fail%2Fuse-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03948ef3e19ff90066ca366bf76c390d7a42bc5/src%2Ftest%2Fcompile-fail%2Fuse-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-self-type.rs?ref=e03948ef3e19ff90066ca366bf76c390d7a42bc5", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S;\n+\n+impl S {\n+    fn f() {}\n+    fn g() {\n+        use Self::f; //~ ERROR unresolved import\n+        pub(in Self::f) struct Z; //~ ERROR Use of undeclared type or module `Self`\n+    }\n+}\n+\n+fn main() {}"}]}