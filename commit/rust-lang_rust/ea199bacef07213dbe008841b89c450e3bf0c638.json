{"sha": "ea199bacef07213dbe008841b89c450e3bf0c638", "node_id": "C_kwDOAAsO6NoAKGVhMTk5YmFjZWYwNzIxM2RiZTAwODg0MWI4OWM0NTBlM2JmMGM2Mzg", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-11-08T01:40:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-08T01:40:15Z"}, "message": "Merge pull request #5070 from calebcartwright/rustup-2021-11-s1\n\nsubtree sync", "tree": {"sha": "379eeed91091e90221c9fb149278ef44bc7eb348", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/379eeed91091e90221c9fb149278ef44bc7eb348"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea199bacef07213dbe008841b89c450e3bf0c638", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhiH//CRBK7hj4Ov3rIwAAgdMIAGga4qcPdTByOa6hIkqIA2UZ\nUziKev9MaYjL42/IxM/91QLi/1Q83l5auV18yOw8jGEXD1neP8HZIiI0vcfeZR8O\nEnL9cJU3xnai1dk1GoP7eiqwv1IHk3CGRiZeYQQBDdubCpbgaNB6iNPFR5qWc0F6\nzd6GLxyGCUrF+y5xRluubeyPkRG7b8SijNTrpFA86YidMpXsSKizRzb9eoiGjAwI\nYWt6hRnqIShkmfBW25hqVpePSbtOYqDO6fXtfHPOAQ9KjYKybAb2zCOMizMaJsRl\njTXUyvhhMdRVcB+bcaF4t3Bz4lgBh9S3bD9lR3l/MYt7JfyLLUxuTzOC2hyTIZc=\n=BGJv\n-----END PGP SIGNATURE-----\n", "payload": "tree 379eeed91091e90221c9fb149278ef44bc7eb348\nparent e4472d3b07b2c34b27688303745d4cc0e74da9a5\nparent 31bc54a9a8d556ddb124dc177ea82569250651d1\nauthor Caleb Cartwright <calebcartwright@users.noreply.github.com> 1636335615 -0600\ncommitter GitHub <noreply@github.com> 1636335615 -0600\n\nMerge pull request #5070 from calebcartwright/rustup-2021-11-s1\n\nsubtree sync"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea199bacef07213dbe008841b89c450e3bf0c638", "html_url": "https://github.com/rust-lang/rust/commit/ea199bacef07213dbe008841b89c450e3bf0c638", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea199bacef07213dbe008841b89c450e3bf0c638/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4472d3b07b2c34b27688303745d4cc0e74da9a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4472d3b07b2c34b27688303745d4cc0e74da9a5", "html_url": "https://github.com/rust-lang/rust/commit/e4472d3b07b2c34b27688303745d4cc0e74da9a5"}, {"sha": "31bc54a9a8d556ddb124dc177ea82569250651d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/31bc54a9a8d556ddb124dc177ea82569250651d1", "html_url": "https://github.com/rust-lang/rust/commit/31bc54a9a8d556ddb124dc177ea82569250651d1"}], "stats": {"total": 129, "additions": 71, "deletions": 58}, "files": [{"sha": "1d2cad6675117d567194ef4e77cb521abdac7946", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea199bacef07213dbe008841b89c450e3bf0c638/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/ea199bacef07213dbe008841b89c450e3bf0c638/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=ea199bacef07213dbe008841b89c450e3bf0c638", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-10-20\"\n+channel = \"nightly-2021-11-08\"\n components = [\"rustc-dev\"]"}, {"sha": "50121a8b6b50e7d506d07e9a14ed645579e2d094", "filename": "src/items.rs", "status": "modified", "additions": 47, "deletions": 32, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/ea199bacef07213dbe008841b89c450e3bf0c638/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea199bacef07213dbe008841b89c450e3bf0c638/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=ea199bacef07213dbe008841b89c450e3bf0c638", "patch": "@@ -622,7 +622,7 @@ impl<'a> FmtVisitor<'a> {\n             fn need_empty_line(a: &ast::AssocItemKind, b: &ast::AssocItemKind) -> bool {\n                 match (a, b) {\n                     (TyAlias(lty), TyAlias(rty))\n-                        if both_type(&lty.3, &rty.3) || both_opaque(&lty.3, &rty.3) =>\n+                        if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n                     {\n                         false\n                     }\n@@ -633,16 +633,16 @@ impl<'a> FmtVisitor<'a> {\n \n             buffer.sort_by(|(_, a), (_, b)| match (&a.kind, &b.kind) {\n                 (TyAlias(lty), TyAlias(rty))\n-                    if both_type(&lty.3, &rty.3) || both_opaque(&lty.3, &rty.3) =>\n+                    if both_type(&lty.ty, &rty.ty) || both_opaque(&lty.ty, &rty.ty) =>\n                 {\n                     a.ident.as_str().cmp(&b.ident.as_str())\n                 }\n                 (Const(..), Const(..)) | (MacCall(..), MacCall(..)) => {\n                     a.ident.as_str().cmp(&b.ident.as_str())\n                 }\n                 (Fn(..), Fn(..)) => a.span.lo().cmp(&b.span.lo()),\n-                (TyAlias(ty), _) if is_type(&ty.3) => Ordering::Less,\n-                (_, TyAlias(ty)) if is_type(&ty.3) => Ordering::Greater,\n+                (TyAlias(ty), _) if is_type(&ty.ty) => Ordering::Less,\n+                (_, TyAlias(ty)) if is_type(&ty.ty) => Ordering::Greater,\n                 (TyAlias(..), _) => Ordering::Less,\n                 (_, TyAlias(..)) => Ordering::Greater,\n                 (Const(..), _) => Ordering::Less,\n@@ -679,7 +679,7 @@ pub(crate) fn format_impl(\n     offset: Indent,\n ) -> Option<String> {\n     if let ast::ItemKind::Impl(impl_kind) = &item.kind {\n-        let ast::ImplKind {\n+        let ast::Impl {\n             ref generics,\n             ref self_ty,\n             ref items,\n@@ -833,7 +833,7 @@ fn format_impl_ref_and_type(\n     offset: Indent,\n ) -> Option<String> {\n     if let ast::ItemKind::Impl(impl_kind) = &item.kind {\n-        let ast::ImplKind {\n+        let ast::Impl {\n             unsafety,\n             polarity,\n             defaultness,\n@@ -1029,8 +1029,13 @@ pub(crate) fn format_trait(\n     offset: Indent,\n ) -> Option<String> {\n     if let ast::ItemKind::Trait(trait_kind) = &item.kind {\n-        let ast::TraitKind(is_auto, unsafety, ref generics, ref generic_bounds, ref trait_items) =\n-            **trait_kind;\n+        let ast::Trait {\n+            is_auto,\n+            unsafety,\n+            ref generics,\n+            ref bounds,\n+            ref items,\n+        } = **trait_kind;\n         let mut result = String::with_capacity(128);\n         let header = format!(\n             \"{}{}{}trait \",\n@@ -1048,11 +1053,11 @@ pub(crate) fn format_trait(\n         result.push_str(&generics_str);\n \n         // FIXME(#2055): rustfmt fails to format when there are comments between trait bounds.\n-        if !generic_bounds.is_empty() {\n+        if !bounds.is_empty() {\n             let ident_hi = context\n                 .snippet_provider\n                 .span_after(item.span, &item.ident.as_str());\n-            let bound_hi = generic_bounds.last().unwrap().span().hi();\n+            let bound_hi = bounds.last().unwrap().span().hi();\n             let snippet = context.snippet(mk_sp(ident_hi, bound_hi));\n             if contains_comment(snippet) {\n                 return None;\n@@ -1061,7 +1066,7 @@ pub(crate) fn format_trait(\n             result = rewrite_assign_rhs_with(\n                 context,\n                 result + \":\",\n-                generic_bounds,\n+                bounds,\n                 shape,\n                 RhsTactics::ForceNextLineWithoutIndent,\n             )?;\n@@ -1072,10 +1077,10 @@ pub(crate) fn format_trait(\n             let where_on_new_line = context.config.indent_style() != IndentStyle::Block;\n \n             let where_budget = context.budget(last_line_width(&result));\n-            let pos_before_where = if generic_bounds.is_empty() {\n+            let pos_before_where = if bounds.is_empty() {\n                 generics.where_clause.span.lo()\n             } else {\n-                generic_bounds[generic_bounds.len() - 1].span().hi()\n+                bounds[bounds.len() - 1].span().hi()\n             };\n             let option = WhereClauseOption::snuggled(&generics_str);\n             let where_clause_str = rewrite_where_clause(\n@@ -1133,7 +1138,7 @@ pub(crate) fn format_trait(\n                 result.push_str(&offset.to_string_with_newline(context.config));\n             }\n             _ if context.config.empty_item_single_line()\n-                && trait_items.is_empty()\n+                && items.is_empty()\n                 && !result.contains('\\n')\n                 && !contains_comment(&snippet[open_pos..]) =>\n             {\n@@ -1146,7 +1151,7 @@ pub(crate) fn format_trait(\n             BraceStyle::PreferSameLine => result.push(' '),\n             BraceStyle::SameLineWhere => {\n                 if result.contains('\\n')\n-                    || (!generics.where_clause.predicates.is_empty() && !trait_items.is_empty())\n+                    || (!generics.where_clause.predicates.is_empty() && !items.is_empty())\n                 {\n                     result.push_str(&offset.to_string_with_newline(context.config));\n                 } else {\n@@ -1158,12 +1163,12 @@ pub(crate) fn format_trait(\n \n         let outer_indent_str = offset.block_only().to_string_with_newline(context.config);\n \n-        if !trait_items.is_empty() || contains_comment(&snippet[open_pos..]) {\n+        if !items.is_empty() || contains_comment(&snippet[open_pos..]) {\n             let mut visitor = FmtVisitor::from_context(context);\n             visitor.block_indent = offset.block_only().block_indent(context.config);\n             visitor.last_pos = block_span.lo() + BytePos(open_pos as u32);\n \n-            for item in trait_items {\n+            for item in items {\n                 visitor.visit_trait_item(item);\n             }\n \n@@ -1522,15 +1527,20 @@ struct TyAliasRewriteInfo<'c, 'g>(\n );\n \n pub(crate) fn rewrite_type_alias<'a, 'b>(\n-    ty_alias_kind: &ast::TyAliasKind,\n+    ty_alias_kind: &ast::TyAlias,\n     context: &RewriteContext<'a>,\n     indent: Indent,\n     visitor_kind: &ItemVisitorKind<'b>,\n     span: Span,\n ) -> Option<String> {\n     use ItemVisitorKind::*;\n \n-    let ast::TyAliasKind(defaultness, ref generics, ref generic_bounds, ref ty) = *ty_alias_kind;\n+    let ast::TyAlias {\n+        defaultness,\n+        ref generics,\n+        ref bounds,\n+        ref ty,\n+    } = *ty_alias_kind;\n     let ty_opt = ty.as_ref().map(|t| &**t);\n     let (ident, vis) = match visitor_kind {\n         Item(i) => (i.ident, &i.vis),\n@@ -1545,17 +1555,17 @@ pub(crate) fn rewrite_type_alias<'a, 'b>(\n     // https://github.com/rust-dev-tools/fmt-rfcs/blob/master/guide/items.md#type-aliases\n     match (visitor_kind, ty_opt) {\n         (Item(_), None) => {\n-            let op_ty = OpaqueType { generic_bounds };\n-            rewrite_ty(rw_info, Some(generic_bounds), Some(&op_ty), vis)\n+            let op_ty = OpaqueType { bounds };\n+            rewrite_ty(rw_info, Some(bounds), Some(&op_ty), vis)\n         }\n-        (Item(_), Some(ty)) => rewrite_ty(rw_info, Some(generic_bounds), Some(&*ty), vis),\n+        (Item(_), Some(ty)) => rewrite_ty(rw_info, Some(bounds), Some(&*ty), vis),\n         (AssocImplItem(_), _) => {\n             let result = if let Some(ast::Ty {\n-                kind: ast::TyKind::ImplTrait(_, ref generic_bounds),\n+                kind: ast::TyKind::ImplTrait(_, ref bounds),\n                 ..\n             }) = ty_opt\n             {\n-                let op_ty = OpaqueType { generic_bounds };\n+                let op_ty = OpaqueType { bounds };\n                 rewrite_ty(rw_info, None, Some(&op_ty), &DEFAULT_VISIBILITY)\n             } else {\n                 rewrite_ty(rw_info, None, ty.as_ref(), vis)\n@@ -1566,7 +1576,7 @@ pub(crate) fn rewrite_type_alias<'a, 'b>(\n             }\n         }\n         (AssocTraitItem(_), _) | (ForeignItem(_), _) => {\n-            rewrite_ty(rw_info, Some(generic_bounds), ty.as_ref(), vis)\n+            rewrite_ty(rw_info, Some(bounds), ty.as_ref(), vis)\n         }\n     }\n }\n@@ -1891,13 +1901,13 @@ fn rewrite_static(\n     }\n }\n struct OpaqueType<'a> {\n-    generic_bounds: &'a ast::GenericBounds,\n+    bounds: &'a ast::GenericBounds,\n }\n \n impl<'a> Rewrite for OpaqueType<'a> {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         let shape = shape.offset_left(5)?; // `impl `\n-        self.generic_bounds\n+        self.bounds\n             .rewrite(context, shape)\n             .map(|s| format!(\"impl {}\", s))\n     }\n@@ -3126,17 +3136,22 @@ impl Rewrite for ast::ForeignItem {\n \n         let item_str = match self.kind {\n             ast::ForeignItemKind::Fn(ref fn_kind) => {\n-                let ast::FnKind(defaultness, ref fn_sig, ref generics, ref block) = **fn_kind;\n-                if let Some(ref body) = block {\n+                let ast::Fn {\n+                    defaultness,\n+                    ref sig,\n+                    ref generics,\n+                    ref body,\n+                } = **fn_kind;\n+                if let Some(ref body) = body {\n                     let mut visitor = FmtVisitor::from_context(context);\n                     visitor.block_indent = shape.indent;\n                     visitor.last_pos = self.span.lo();\n                     let inner_attrs = inner_attributes(&self.attrs);\n                     let fn_ctxt = visit::FnCtxt::Foreign;\n                     visitor.visit_fn(\n-                        visit::FnKind::Fn(fn_ctxt, self.ident, fn_sig, &self.vis, Some(body)),\n+                        visit::FnKind::Fn(fn_ctxt, self.ident, &sig, &self.vis, Some(body)),\n                         generics,\n-                        &fn_sig.decl,\n+                        &sig.decl,\n                         self.span,\n                         defaultness,\n                         Some(&inner_attrs),\n@@ -3147,7 +3162,7 @@ impl Rewrite for ast::ForeignItem {\n                         context,\n                         shape.indent,\n                         self.ident,\n-                        &FnSig::from_method_sig(fn_sig, generics, &self.vis),\n+                        &FnSig::from_method_sig(&sig, generics, &self.vis),\n                         span,\n                         FnBraceStyle::None,\n                     )"}, {"sha": "527042d098a1c61f7d6252438ea4b97ba741c5d7", "filename": "src/visitor.rs", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ea199bacef07213dbe008841b89c450e3bf0c638/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea199bacef07213dbe008841b89c450e3bf0c638/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=ea199bacef07213dbe008841b89c450e3bf0c638", "patch": "@@ -539,44 +539,37 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     self.visit_static(&StaticParts::from_item(item));\n                 }\n                 ast::ItemKind::Fn(ref fn_kind) => {\n-                    let ast::FnKind(defaultness, ref fn_signature, ref generics, ref block) =\n-                        **fn_kind;\n-                    if let Some(ref body) = block {\n+                    let ast::Fn {\n+                        defaultness,\n+                        ref sig,\n+                        ref generics,\n+                        ref body,\n+                    } = **fn_kind;\n+                    if let Some(ref body) = body {\n                         let inner_attrs = inner_attributes(&item.attrs);\n-                        let fn_ctxt = match fn_signature.header.ext {\n+                        let fn_ctxt = match sig.header.ext {\n                             ast::Extern::None => visit::FnCtxt::Free,\n                             _ => visit::FnCtxt::Foreign,\n                         };\n                         self.visit_fn(\n-                            visit::FnKind::Fn(\n-                                fn_ctxt,\n-                                item.ident,\n-                                fn_signature,\n-                                &item.vis,\n-                                Some(body),\n-                            ),\n+                            visit::FnKind::Fn(fn_ctxt, item.ident, &sig, &item.vis, Some(body)),\n                             generics,\n-                            &fn_signature.decl,\n+                            &sig.decl,\n                             item.span,\n                             defaultness,\n                             Some(&inner_attrs),\n                         )\n                     } else {\n                         let indent = self.block_indent;\n                         let rewrite = self.rewrite_required_fn(\n-                            indent,\n-                            item.ident,\n-                            fn_signature,\n-                            &item.vis,\n-                            generics,\n-                            item.span,\n+                            indent, item.ident, &sig, &item.vis, generics, item.span,\n                         );\n                         self.push_rewrite(item.span, rewrite);\n                     }\n                 }\n-                ast::ItemKind::TyAlias(ref alias_kind) => {\n+                ast::ItemKind::TyAlias(ref ty_alias) => {\n                     use ItemVisitorKind::Item;\n-                    self.visit_ty_alias_kind(alias_kind, &Item(&item), item.span);\n+                    self.visit_ty_alias_kind(ty_alias, &Item(&item), item.span);\n                 }\n                 ast::ItemKind::GlobalAsm(..) => {\n                     let snippet = Some(self.snippet(item.span).to_owned());\n@@ -601,7 +594,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n     fn visit_ty_alias_kind(\n         &mut self,\n-        ty_kind: &ast::TyAliasKind,\n+        ty_kind: &ast::TyAlias,\n         visitor_kind: &ItemVisitorKind<'_>,\n         span: Span,\n     ) {\n@@ -639,8 +632,13 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 self.visit_static(&StaticParts::from_impl_item(&ai))\n             }\n             (ast::AssocItemKind::Fn(ref fn_kind), _) => {\n-                let ast::FnKind(defaultness, ref sig, ref generics, ref block) = **fn_kind;\n-                if let Some(ref body) = block {\n+                let ast::Fn {\n+                    defaultness,\n+                    ref sig,\n+                    ref generics,\n+                    ref body,\n+                } = **fn_kind;\n+                if let Some(ref body) = body {\n                     let inner_attrs = inner_attributes(&ai.attrs);\n                     let fn_ctxt = visit::FnCtxt::Assoc(assoc_ctxt);\n                     self.visit_fn(\n@@ -658,8 +656,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                     self.push_rewrite(ai.span, rewrite);\n                 }\n             }\n-            (ast::AssocItemKind::TyAlias(ref ty_alias_kind), _) => {\n-                self.visit_ty_alias_kind(ty_alias_kind, visitor_kind, ai.span);\n+            (ast::AssocItemKind::TyAlias(ref ty_alias), _) => {\n+                self.visit_ty_alias_kind(ty_alias, visitor_kind, ai.span);\n             }\n             (ast::AssocItemKind::MacCall(ref mac), _) => {\n                 self.visit_mac(mac, Some(ai.ident), MacroPosition::Item);"}]}