{"sha": "cbe66621c354eac042bf6e96b78ff9e8cbf0c14d", "node_id": "C_kwDOAAsO6NoAKGNiZTY2NjIxYzM1NGVhYzA0MmJmNmU5NmI3OGZmOWU4Y2JmMGMxNGQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-10T08:09:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-10T08:09:50Z"}, "message": "Merge #10501\n\n10501: internal: move some mbe tests r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "31265f8448271fd6bc45379fda70bc59e4b6be5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31265f8448271fd6bc45379fda70bc59e4b6be5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbe66621c354eac042bf6e96b78ff9e8cbf0c14d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhYp/OCRBK7hj4Ov3rIwAAIcQIAECKzicCI1gmZqxZXgOgOfRI\noibyyR7GnWlZdZkOPSKe2LPnvwX4Ui7Y+656F68XDth6RHDZD/SSXsoJqcSkY3Pl\nIyA7u1+LxPevaEpzlipVC7RscgKO4BqYSTrLfug9bHbLU5B+9HlUeaYLi3hURyuf\n2Ooo/JH/v36p6IwvGME2uFPnxiD0M3k1pM67I+w5dhwHEFoIjxiOyN+h/m+K22DW\nyGhoG0PLW7DPp3qeJQgCuvquStM8Ozn3GinPxUxKovzNJ5pt0a8Sracn5g+Sbk6F\nmDEgn3zBMyXAzGZe3Gbns4+WtDYfMackd6F1UGfNHqXnpA5SnrdW07uqnQtbHis=\n=mohg\n-----END PGP SIGNATURE-----\n", "payload": "tree 31265f8448271fd6bc45379fda70bc59e4b6be5e\nparent 4439cd8c68f351f46dfaa7e8e534479ebe4cd94d\nparent c6d5c1c9463d485220d041d1617365f03df221a4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633853390 +0000\ncommitter GitHub <noreply@github.com> 1633853390 +0000\n\nMerge #10501\n\n10501: internal: move some mbe tests r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe66621c354eac042bf6e96b78ff9e8cbf0c14d", "html_url": "https://github.com/rust-lang/rust/commit/cbe66621c354eac042bf6e96b78ff9e8cbf0c14d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbe66621c354eac042bf6e96b78ff9e8cbf0c14d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4439cd8c68f351f46dfaa7e8e534479ebe4cd94d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4439cd8c68f351f46dfaa7e8e534479ebe4cd94d", "html_url": "https://github.com/rust-lang/rust/commit/4439cd8c68f351f46dfaa7e8e534479ebe4cd94d"}, {"sha": "c6d5c1c9463d485220d041d1617365f03df221a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6d5c1c9463d485220d041d1617365f03df221a4", "html_url": "https://github.com/rust-lang/rust/commit/c6d5c1c9463d485220d041d1617365f03df221a4"}], "stats": {"total": 300, "additions": 165, "deletions": 135}, "files": [{"sha": "e892ab52686f7699fb3d7c675148755610ec545a", "filename": "crates/hir_def/src/macro_expansion_tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cbe66621c354eac042bf6e96b78ff9e8cbf0c14d/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe66621c354eac042bf6e96b78ff9e8cbf0c14d/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests.rs?ref=cbe66621c354eac042bf6e96b78ff9e8cbf0c14d", "patch": "@@ -121,6 +121,7 @@ fn pretty_print_macro_expansion(expn: SyntaxNode) -> String {\n             (T![;] | T!['{'] | T!['}'], _) => \"\\n\",\n             (_, T!['}']) => \"\\n\",\n             (IDENT | LIFETIME_IDENT, IDENT | LIFETIME_IDENT) => \" \",\n+            _ if prev_kind.is_keyword() && curr_kind.is_keyword() => \" \",\n             (IDENT, _) if curr_kind.is_keyword() => \" \",\n             (_, IDENT) if prev_kind.is_keyword() => \" \",\n             (T![>], IDENT) => \" \","}, {"sha": "958f2a1c33172bfebf8799ade1facf2ccf4f52ca", "filename": "crates/hir_def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 163, "deletions": 0, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/cbe66621c354eac042bf6e96b78ff9e8cbf0c14d/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe66621c354eac042bf6e96b78ff9e8cbf0c14d/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=cbe66621c354eac042bf6e96b78ff9e8cbf0c14d", "patch": "@@ -615,3 +615,166 @@ fn bar() {}\n \"#]],\n     );\n }\n+\n+#[test]\n+fn test_macro_2_0_panic_2015() {\n+    check(\n+        r#\"\n+macro panic_2015 {\n+    () => (),\n+    (bar) => (),\n+}\n+panic_2015!(bar);\n+\"#,\n+        expect![[r#\"\n+macro panic_2015 {\n+    () => (),\n+    (bar) => (),\n+}\n+\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_path() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($p:path) => { fn foo() { let a = $p; } }\n+}\n+\n+m! { foo }\n+\n+m! { bar::<u8>::baz::<u8> }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($p:path) => { fn foo() { let a = $p; } }\n+}\n+\n+fn foo() {\n+    let a = foo;\n+}\n+\n+fn foo() {\n+    let a = bar::<u8>::baz::<u8> ;\n+}\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_two_paths() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($i:path, $j:path) => { fn foo() { let a = $ i; let b = $j; } }\n+}\n+m! { foo, bar }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($i:path, $j:path) => { fn foo() { let a = $ i; let b = $j; } }\n+}\n+fn foo() {\n+    let a = foo;\n+    let b = bar;\n+}\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_path_with_path() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($p:path) => { fn foo() { let a = $p::bar; } }\n+}\n+m! { foo }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($p:path) => { fn foo() { let a = $p::bar; } }\n+}\n+fn foo() {\n+    let a = foo::bar;\n+}\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_expr() {\n+    check(\n+        r#\"\n+macro_rules! m {\n+    ($e:expr) => { fn bar() { $e; } }\n+}\n+\n+m! { 2 + 2 * baz(3).quux() }\n+\"#,\n+        expect![[r#\"\n+macro_rules! m {\n+    ($e:expr) => { fn bar() { $e; } }\n+}\n+\n+fn bar() {\n+    2+2*baz(3).quux();\n+}\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn test_last_expr() {\n+    check(\n+        r#\"\n+macro_rules! vec {\n+    ($($item:expr),*) => {{\n+            let mut v = Vec::new();\n+            $( v.push($item); )*\n+            v\n+    }};\n+}\n+\n+fn f() {\n+    vec![1,2,3];\n+}\n+\"#,\n+        expect![[r#\"\n+macro_rules! vec {\n+    ($($item:expr),*) => {{\n+            let mut v = Vec::new();\n+            $( v.push($item); )*\n+            v\n+    }};\n+}\n+\n+fn f() {\n+     {\n+        let mut v = Vec::new();\n+        v.push(1);\n+        v.push(2);\n+        v.push(3);\n+        v\n+    };\n+}\n+\"#]],\n+    );\n+}\n+\n+#[test]\n+fn test_expr_with_attr() {\n+    check(\n+        r#\"\n+macro_rules! m { ($a:expr) => { x!(); } }\n+m!(#[allow(a)]());\n+\"#,\n+        expect![[r#\"\n+macro_rules! m { ($a:expr) => { x!(); } }\n+x!();\n+\"#]],\n+    )\n+}"}, {"sha": "64d80baa3ed10648de4fdf300004021b1d480529", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cbe66621c354eac042bf6e96b78ff9e8cbf0c14d/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe66621c354eac042bf6e96b78ff9e8cbf0c14d/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=cbe66621c354eac042bf6e96b78ff9e8cbf0c14d", "patch": "@@ -80,6 +80,7 @@ macro_rules! impl_fixture {\n                 test_utils::assert_eq_text!(&expected.trim(), &actual.trim());\n             }\n \n+            #[allow(unused)]\n             fn assert_expand_items(&self, invocation: &str, expected: &str) -> &$name {\n                 self.assert_expansion(ParserEntryPoint::Items, invocation, expected);\n                 self\n@@ -140,12 +141,6 @@ pub(crate) fn parse_macro(ra_fixture: &str) -> MacroFixture {\n     MacroFixture { rules }\n }\n \n-pub(crate) fn parse_macro2(ra_fixture: &str) -> MacroFixture2 {\n-    let definition_tt = parse_macro_def_to_tt(ra_fixture);\n-    let rules = MacroDef::parse(&definition_tt).unwrap();\n-    MacroFixture2 { rules }\n-}\n-\n pub(crate) fn parse_macro_error(ra_fixture: &str) -> ParseError {\n     let definition_tt = parse_macro_rules_to_tt(ra_fixture);\n \n@@ -183,22 +178,6 @@ fn parse_macro_rules_to_tt(ra_fixture: &str) -> tt::Subtree {\n     definition_tt\n }\n \n-fn parse_macro_def_to_tt(ra_fixture: &str) -> tt::Subtree {\n-    let source_file = ast::SourceFile::parse(ra_fixture).ok().unwrap();\n-    let macro_definition =\n-        source_file.syntax().descendants().find_map(ast::MacroDef::cast).unwrap();\n-\n-    let (definition_tt, _) = syntax_node_to_token_tree(macro_definition.body().unwrap().syntax());\n-\n-    let parsed =\n-        parse_to_token_tree(&ra_fixture[macro_definition.body().unwrap().syntax().text_range()])\n-            .unwrap()\n-            .0;\n-    assert_eq!(definition_tt, parsed);\n-\n-    definition_tt\n-}\n-\n fn debug_dump_ignore_spaces(node: &syntax::SyntaxNode) -> String {\n     let mut level = 0;\n     let mut buf = String::new();"}, {"sha": "01b5533522688817d7578dd18e147af82517afc9", "filename": "crates/mbe/src/tests/expand.rs", "status": "modified", "additions": 0, "deletions": 113, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/cbe66621c354eac042bf6e96b78ff9e8cbf0c14d/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe66621c354eac042bf6e96b78ff9e8cbf0c14d/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests%2Fexpand.rs?ref=cbe66621c354eac042bf6e96b78ff9e8cbf0c14d", "patch": "@@ -101,119 +101,6 @@ fn test_attr_to_token_tree() {\n     );\n }\n \n-#[test]\n-fn test_macro_2_0_panic_2015() {\n-    parse_macro2(\n-        r#\"\n-macro panic_2015 {\n-    () => (\n-    ),\n-    (bar) => (\n-    ),\n-}\n-\"#,\n-    )\n-    .assert_expand_items(\"panic_2015!(bar);\", \"\");\n-}\n-\n-#[test]\n-fn test_path() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ i:path) => {\n-                fn foo() { let a = $ i; }\n-            }\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! { foo }\", \"fn foo () {let a = foo ;}\")\n-    .assert_expand_items(\n-        \"foo! { bar::<u8>::baz::<u8> }\",\n-        \"fn foo () {let a = bar ::< u8 >:: baz ::< u8 > ;}\",\n-    );\n-}\n-\n-#[test]\n-fn test_two_paths() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ i:path, $ j:path) => {\n-                fn foo() { let a = $ i; let b = $j; }\n-            }\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! { foo, bar }\", \"fn foo () {let a = foo ; let b = bar ;}\");\n-}\n-\n-#[test]\n-fn test_path_with_path() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ i:path) => {\n-                fn foo() { let a = $ i :: bar; }\n-            }\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\"foo! { foo }\", \"fn foo () {let a = foo :: bar ;}\");\n-}\n-\n-#[test]\n-fn test_expr() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! foo {\n-            ($ i:expr) => {\n-                 fn bar() { $ i; }\n-            }\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\n-        \"foo! { 2 + 2 * baz(3).quux() }\",\n-        \"fn bar () {2 + 2 * baz (3) . quux () ;}\",\n-    );\n-}\n-\n-#[test]\n-fn test_last_expr() {\n-    parse_macro(\n-        r#\"\n-        macro_rules! vec {\n-            ($($item:expr),*) => {\n-                {\n-                    let mut v = Vec::new();\n-                    $(\n-                        v.push($item);\n-                    )*\n-                    v\n-                }\n-            };\n-        }\n-\"#,\n-    )\n-    .assert_expand_items(\n-        \"vec!(1,2,3);\",\n-        \"{let mut v = Vec :: new () ; v . push (1) ; v . push (2) ; v . push (3) ; v}\",\n-    );\n-}\n-\n-#[test]\n-fn test_expr_with_attr() {\n-    parse_macro(\n-        r#\"\n-macro_rules! m {\n-    ($a:expr) => {0}\n-}\n-\"#,\n-    )\n-    .assert_expand_items(\"m!(#[allow(a)]())\", \"0\");\n-}\n-\n #[test]\n fn test_ty() {\n     parse_macro("}]}