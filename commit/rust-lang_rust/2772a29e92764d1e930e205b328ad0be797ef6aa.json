{"sha": "2772a29e92764d1e930e205b328ad0be797ef6aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NzJhMjllOTI3NjRkMWU5MzBlMjA1YjMyOGFkMGJlNzk3ZWY2YWE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-15T20:27:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-15T23:01:35Z"}, "message": "rustc: Support outer attributes on items that are defined as statements\n\nIssue #487", "tree": {"sha": "c7ca47d97004f2f11c2eeb9a117ac55cdb9e895b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7ca47d97004f2f11c2eeb9a117ac55cdb9e895b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2772a29e92764d1e930e205b328ad0be797ef6aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2772a29e92764d1e930e205b328ad0be797ef6aa", "html_url": "https://github.com/rust-lang/rust/commit/2772a29e92764d1e930e205b328ad0be797ef6aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2772a29e92764d1e930e205b328ad0be797ef6aa/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8a5440b2de600c47ed9c9c3d7a376807b57a579", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8a5440b2de600c47ed9c9c3d7a376807b57a579", "html_url": "https://github.com/rust-lang/rust/commit/b8a5440b2de600c47ed9c9c3d7a376807b57a579"}], "stats": {"total": 137, "additions": 127, "deletions": 10}, "files": [{"sha": "88d8516043baff5cce7cafffaae0931ad32b975a", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 61, "deletions": 9, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/2772a29e92764d1e930e205b328ad0be797ef6aa/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772a29e92764d1e930e205b328ad0be797ef6aa/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=2772a29e92764d1e930e205b328ad0be797ef6aa", "patch": "@@ -5,6 +5,9 @@ import std::str;\n import std::option;\n import std::option::some;\n import std::option::none;\n+import std::either;\n+import std::either::left;\n+import std::either::right;\n import std::map::hashmap;\n import driver::session;\n import util::common;\n@@ -816,14 +819,9 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n         hi = es.span.hi;\n         ex = ast::expr_bind(e, es.node, p.get_ann());\n     } else if (p.peek() == token::POUND) {\n-        p.bump();\n-        auto pth = parse_path(p);\n-        auto es =\n-            parse_seq(token::LPAREN, token::RPAREN, some(token::COMMA),\n-                      parse_expr, p);\n-        hi = es.span.hi;\n-        auto ext_span = rec(lo=lo, hi=hi);\n-        ex = expand_syntax_ext(p, ext_span, pth, es.node, none);\n+        auto ex_ext = parse_syntax_ext(p);\n+        lo = ex_ext.span.lo;\n+        ex = ex_ext.node;\n     } else if (eat_word(p, \"fail\")) {\n         auto msg;\n         alt (p.peek()) {\n@@ -917,6 +915,21 @@ fn parse_bottom_expr(&parser p) -> @ast::expr {\n     ret @spanned(lo, hi, ex);\n }\n \n+fn parse_syntax_ext(&parser p) -> @ast::expr {\n+    auto lo = p.get_lo_pos();\n+    expect(p, token::POUND);\n+    ret parse_syntax_ext_inner(p, lo);\n+}\n+\n+fn parse_syntax_ext_inner(&parser p, uint lo) -> @ast::expr {\n+    auto pth = parse_path(p);\n+    auto es = parse_seq(token::LPAREN, token::RPAREN,\n+                        some(token::COMMA), parse_expr, p);\n+    auto hi = es.span.hi;\n+    auto ext_span = rec(lo=lo, hi=hi);\n+    auto ex = expand_syntax_ext(p, ext_span, pth, es.node, none);\n+    ret @spanned(lo, hi, ex);\n+}\n \n /*\n  * FIXME: This is a crude approximation of the syntax-extension system,\n@@ -1423,7 +1436,22 @@ fn parse_source_stmt(&parser p) -> @ast::stmt {\n         auto hi = p.get_span();\n         ret @spanned(lo, decl.span.hi, ast::stmt_decl(decl, p.get_ann()));\n     } else {\n-        alt (parse_item(p, [])) {\n+\n+        auto item_attrs;\n+        alt (parse_attrs_or_ext(p)) {\n+            case (none) {\n+                item_attrs = [];\n+            }\n+            case (some(left(?attrs))) {\n+                item_attrs = attrs;\n+            }\n+            case (some(right(?ext))) {\n+                ret @spanned(lo, ext.span.hi,\n+                             ast::stmt_expr(ext, p.get_ann()));\n+            }\n+        }\n+\n+        alt (parse_item(p, item_attrs)) {\n             case (got_item(?i)) {\n                 auto hi = i.span.hi;\n                 auto decl = @spanned(lo, hi, ast::decl_item(i));\n@@ -1936,6 +1964,26 @@ fn parse_item(&parser p, vec[ast::attribute] attrs) -> parsed_item {\n     } else { ret no_item; }\n }\n \n+// A type to distingush between the parsing of item attributes or syntax\n+// extensions, which both begin with token.POUND\n+type attr_or_ext = option::t[either::t[vec[ast::attribute],\n+                                       @ast::expr]];\n+\n+fn parse_attrs_or_ext(&parser p) -> attr_or_ext {\n+    if (p.peek() == token::POUND) {\n+        auto lo = p.get_lo_pos();\n+        p.bump();\n+        if (p.peek() == token::LBRACKET) {\n+            auto first_attr = parse_attribute_inner(p, lo);\n+            ret some(left([first_attr] + parse_attributes(p)));\n+        } else {\n+            ret some(right(parse_syntax_ext_inner(p, lo)));\n+        }\n+    } else {\n+        ret none;\n+    }\n+}\n+\n fn parse_attributes(&parser p) -> vec[ast::attribute] {\n     let vec[ast::attribute] attrs = [];\n     while (p.peek() == token::POUND) { attrs += [parse_attribute(p)]; }\n@@ -1945,6 +1993,10 @@ fn parse_attributes(&parser p) -> vec[ast::attribute] {\n fn parse_attribute(&parser p) -> ast::attribute {\n     auto lo = p.get_lo_pos();\n     expect(p, token::POUND);\n+    ret parse_attribute_inner(p, lo);\n+}\n+\n+fn parse_attribute_inner(&parser p, uint lo) -> ast::attribute {\n     expect(p, token::LBRACKET);\n     auto meta_item = parse_meta_item(p);\n     expect(p, token::RBRACKET);"}, {"sha": "c407a386d600cd4245bdcaa560b7439d7af38a39", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/2772a29e92764d1e930e205b328ad0be797ef6aa/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2772a29e92764d1e930e205b328ad0be797ef6aa/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=2772a29e92764d1e930e205b328ad0be797ef6aa", "patch": "@@ -52,4 +52,69 @@ mod test_multi_attr_outer {\n     obj o() { }\n }\n \n-fn main() { }\n+mod test_stmt_single_attr_outer {\n+\n+    fn f() {\n+\n+        #[attr = \"val\"]\n+        const int x = 10;\n+\n+        #[attr = \"val\"]\n+        fn f() {}\n+\n+        /* FIXME: Issue #493\n+        #[attr = \"val\"]\n+        mod mod1 {\n+        }\n+\n+        #[attr = \"val\"]\n+        native \"rust\" mod rustrt {\n+        }\n+        */\n+\n+        #[attr = \"val\"]\n+        type t = obj { };\n+\n+        #[attr = \"val\"]\n+        obj o() { }\n+\n+    }\n+}\n+\n+mod test_stmt_multi_attr_outer {\n+\n+    fn f() {\n+\n+        #[attr1 = \"val\"]\n+        #[attr2 = \"val\"]\n+        const int x = 10;\n+\n+        #[attr1 = \"val\"]\n+        #[attr2 = \"val\"]\n+        fn f() {}\n+\n+        /* FIXME: Issue #493\n+        #[attr1 = \"val\"]\n+        #[attr2 = \"val\"]\n+        mod mod1 {\n+        }\n+\n+        #[attr1 = \"val\"]\n+        #[attr2 = \"val\"]\n+        native \"rust\" mod rustrt {\n+        }\n+        */\n+\n+        #[attr1 = \"val\"]\n+        #[attr2 = \"val\"]\n+        type t = obj { };\n+\n+        #[attr1 = \"val\"]\n+        #[attr2 = \"val\"]\n+        obj o() { }\n+\n+    }\n+}\n+\n+fn main() {\n+}"}]}