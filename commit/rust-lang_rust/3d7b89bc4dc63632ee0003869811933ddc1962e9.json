{"sha": "3d7b89bc4dc63632ee0003869811933ddc1962e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkN2I4OWJjNGRjNjM2MzJlZTAwMDM4Njk4MTE5MzNkZGMxOTYyZTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-07T05:19:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-07T05:44:19Z"}, "message": "rt: Reorganize rust_upcall.cpp a bit", "tree": {"sha": "114c91fc52128e40d73053b99cb9f800cd32f11e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/114c91fc52128e40d73053b99cb9f800cd32f11e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d7b89bc4dc63632ee0003869811933ddc1962e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7b89bc4dc63632ee0003869811933ddc1962e9", "html_url": "https://github.com/rust-lang/rust/commit/3d7b89bc4dc63632ee0003869811933ddc1962e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d7b89bc4dc63632ee0003869811933ddc1962e9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00636e3155647f843fb1f8e8c981429feb8dd7f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/00636e3155647f843fb1f8e8c981429feb8dd7f2", "html_url": "https://github.com/rust-lang/rust/commit/00636e3155647f843fb1f8e8c981429feb8dd7f2"}], "stats": {"total": 68, "additions": 36, "deletions": 32}, "files": [{"sha": "e4b646e39ffa37b7e5a5fd5525a7789cb132cb71", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3d7b89bc4dc63632ee0003869811933ddc1962e9/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3d7b89bc4dc63632ee0003869811933ddc1962e9/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=3d7b89bc4dc63632ee0003869811933ddc1962e9", "patch": "@@ -288,38 +288,6 @@ upcall_s_dynastack_free(s_dynastack_free_args *args) {\n     return rust_scheduler::get_task()->dynastack.free(args->ptr);\n }\n \n-struct rust_new_stack2_args {\n-    void *new_stack;\n-    size_t stk_sz;\n-    void *args_addr;\n-    size_t args_sz;\n-};\n-\n-// A new stack function suitable for calling through\n-// upcall_call_shim_on_c_stack\n-extern \"C\" CDECL void\n-upcall_new_stack(struct rust_new_stack2_args *args) {\n-    rust_task *task = rust_scheduler::get_task();\n-    args->new_stack = task->new_stack(args->stk_sz,\n-                                      args->args_addr,\n-                                      args->args_sz);\n-}\n-\n-extern \"C\" CDECL void\n-upcall_del_stack() {\n-    rust_task *task = rust_scheduler::get_task();\n-    task->del_stack();\n-}\n-\n-// Landing pads need to call this to insert the\n-// correct limit into TLS.\n-// NB: This must be called on the Rust stack\n-extern \"C\" CDECL void\n-upcall_reset_stack_limit() {\n-    rust_task *task = rust_scheduler::get_task();\n-    task->reset_stack_limit();\n-}\n-\n extern \"C\" _Unwind_Reason_Code\n __gxx_personality_v0(int version,\n                      _Unwind_Action actions,\n@@ -506,6 +474,42 @@ upcall_log_type(const type_desc *tydesc, uint8_t *data, uint32_t level) {\n     upcall_s_log_type(&args);\n }\n \n+struct rust_new_stack2_args {\n+    void *new_stack;\n+    size_t stk_sz;\n+    void *args_addr;\n+    size_t args_sz;\n+};\n+\n+// A new stack function suitable for calling through\n+// upcall_call_shim_on_c_stack\n+// FIXME: Convert this to the same arrangement as\n+// the other upcalls, simplify __morestack\n+extern \"C\" CDECL void\n+upcall_new_stack(struct rust_new_stack2_args *args) {\n+    rust_task *task = rust_scheduler::get_task();\n+    args->new_stack = task->new_stack(args->stk_sz,\n+                                      args->args_addr,\n+                                      args->args_sz);\n+}\n+\n+// FIXME: As above\n+extern \"C\" CDECL void\n+upcall_del_stack() {\n+    rust_task *task = rust_scheduler::get_task();\n+    task->del_stack();\n+}\n+\n+// Landing pads need to call this to insert the\n+// correct limit into TLS.\n+// NB: This must run on the Rust stack because it\n+// needs to acquire the value of the stack pointer\n+extern \"C\" CDECL void\n+upcall_reset_stack_limit() {\n+    rust_task *task = rust_scheduler::get_task();\n+    task->reset_stack_limit();\n+}\n+\n //\n // Local Variables:\n // mode: C++"}]}