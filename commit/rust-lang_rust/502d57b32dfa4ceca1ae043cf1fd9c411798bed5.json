{"sha": "502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "node_id": "C_kwDOAAsO6NoAKDUwMmQ1N2IzMmRmYTRjZWNhMWFlMDQzY2YxZmQ5YzQxMTc5OGJlZDU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-16T06:02:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-16T06:02:25Z"}, "message": "Rollup merge of #89915 - jackh726:outlives_cleanup, r=nikomatsakis\n\nSome outlives cleanup\n\nNo semantic changes here, only moving code around + using `LocalDefId` instead of `HirId`\n\nr? ````@nikomatsakis````", "tree": {"sha": "a620293b3afcefebf6e8693eb1bdcede1d68e072", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a620293b3afcefebf6e8693eb1bdcede1d68e072"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhamrxCRBK7hj4Ov3rIwAAHzEIAB9BHExFBDN8PjNnYcinS2gM\nklJkLCVPrYECTvyj+J/0a1PQVx2lTCC8507NhaB9arFsZ7/57JWZiwvVp0UAGzEf\nIbfM6UjCrvH6msUIqLC6aY8Q6hM0oERrEpOOFjN3p887dbJ+ySomtbEg7YW89saD\nnIbkLfkAYOu1ELqd8kXcx+SSCd/zj7tOadfGPnzyGGcalEoOphsbVmhb4FW6VU1l\n0945M1Ajmo5Eln+jJPlFMk8T+cIxPuI4a2pKX+rH7o8oCp54pdknqe9KiCDkFycx\nFAUQV3Jm4HSKCRywWMY5FkwQjltO95HGbcfIbCyTXvyGds87qSp2ukuChb4gIJI=\n=Xe79\n-----END PGP SIGNATURE-----\n", "payload": "tree a620293b3afcefebf6e8693eb1bdcede1d68e072\nparent e8efe0931af2163682909e6e52ddd12b65b40d35\nparent 2b5b456e23b61ccd36732046134d17ebe2152e7d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1634364145 +0200\ncommitter GitHub <noreply@github.com> 1634364145 +0200\n\nRollup merge of #89915 - jackh726:outlives_cleanup, r=nikomatsakis\n\nSome outlives cleanup\n\nNo semantic changes here, only moving code around + using `LocalDefId` instead of `HirId`\n\nr? ````@nikomatsakis````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "html_url": "https://github.com/rust-lang/rust/commit/502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8efe0931af2163682909e6e52ddd12b65b40d35", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8efe0931af2163682909e6e52ddd12b65b40d35", "html_url": "https://github.com/rust-lang/rust/commit/e8efe0931af2163682909e6e52ddd12b65b40d35"}, {"sha": "2b5b456e23b61ccd36732046134d17ebe2152e7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b5b456e23b61ccd36732046134d17ebe2152e7d", "html_url": "https://github.com/rust-lang/rust/commit/2b5b456e23b61ccd36732046134d17ebe2152e7d"}], "stats": {"total": 215, "additions": 100, "deletions": 115}, "files": [{"sha": "98f926e9d76d5c8fd079b7edb07f626df4dc2b61", "filename": "compiler/rustc_infer/src/infer/outlives/components.rs", "status": "renamed", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fcomponents.rs?ref=502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "patch": "@@ -2,10 +2,10 @@\n // refers to rules defined in RFC 1214 (`OutlivesFooBar`), so see that\n // RFC for reference.\n \n-use crate::ty::subst::{GenericArg, GenericArgKind};\n-use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::sso::SsoHashSet;\n-use smallvec::SmallVec;\n+use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use smallvec::{smallvec, SmallVec};\n \n #[derive(Debug)]\n pub enum Component<'tcx> {\n@@ -47,14 +47,16 @@ pub enum Component<'tcx> {\n     EscapingProjection(Vec<Component<'tcx>>),\n }\n \n-impl<'tcx> TyCtxt<'tcx> {\n-    /// Push onto `out` all the things that must outlive `'a` for the condition\n-    /// `ty0: 'a` to hold. Note that `ty0` must be a **fully resolved type**.\n-    pub fn push_outlives_components(self, ty0: Ty<'tcx>, out: &mut SmallVec<[Component<'tcx>; 4]>) {\n-        let mut visited = SsoHashSet::new();\n-        compute_components(self, ty0, out, &mut visited);\n-        debug!(\"components({:?}) = {:?}\", ty0, out);\n-    }\n+/// Push onto `out` all the things that must outlive `'a` for the condition\n+/// `ty0: 'a` to hold. Note that `ty0` must be a **fully resolved type**.\n+pub fn push_outlives_components(\n+    tcx: TyCtxt<'tcx>,\n+    ty0: Ty<'tcx>,\n+    out: &mut SmallVec<[Component<'tcx>; 4]>,\n+) {\n+    let mut visited = SsoHashSet::new();\n+    compute_components(tcx, ty0, out, &mut visited);\n+    debug!(\"components({:?}) = {:?}\", ty0, out);\n }\n \n fn compute_components(", "previous_filename": "compiler/rustc_middle/src/ty/outlives.rs"}, {"sha": "03d6c45a653459220fe75c4fbffe369549a44678", "filename": "compiler/rustc_infer/src/infer/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fmod.rs?ref=502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "patch": "@@ -1,5 +1,6 @@\n //! Various code related to computing outlives relations.\n \n+pub mod components;\n pub mod env;\n pub mod obligations;\n pub mod verify;"}, {"sha": "91a22ecc5a994186a4e41990785999fc51a177ea", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "patch": "@@ -1,5 +1,5 @@\n //! Code that handles \"type-outlives\" constraints like `T: 'a`. This\n-//! is based on the `push_outlives_components` function defined on the tcx,\n+//! is based on the `push_outlives_components` function defined in rustc_infer,\n //! but it adds a bit of heuristics on top, in particular to deal with\n //! associated types and projections.\n //!\n@@ -59,13 +59,13 @@\n //! might later infer `?U` to something like `&'b u32`, which would\n //! imply that `'b: 'a`.\n \n+use crate::infer::outlives::components::{push_outlives_components, Component};\n use crate::infer::outlives::env::RegionBoundPairs;\n use crate::infer::outlives::verify::VerifyBoundCx;\n use crate::infer::{\n     self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, UndoLog, VerifyBound,\n };\n use crate::traits::{ObligationCause, ObligationCauseCode};\n-use rustc_middle::ty::outlives::Component;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n \n@@ -271,7 +271,7 @@ where\n         assert!(!ty.has_escaping_bound_vars());\n \n         let mut components = smallvec![];\n-        self.tcx.push_outlives_components(ty, &mut components);\n+        push_outlives_components(self.tcx, ty, &mut components);\n         self.components_must_outlive(origin, &components, region);\n     }\n "}, {"sha": "c839f824d1c9c57501111431e430180269c3c517", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "patch": "@@ -1,8 +1,8 @@\n use smallvec::smallvec;\n \n+use crate::infer::outlives::components::{push_outlives_components, Component};\n use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n-use rustc_middle::ty::outlives::Component;\n use rustc_middle::ty::{self, ToPredicate, TyCtxt, WithConstness};\n use rustc_span::symbol::Ident;\n \n@@ -200,7 +200,7 @@ impl Elaborator<'tcx> {\n \n                 let visited = &mut self.visited;\n                 let mut components = smallvec![];\n-                tcx.push_outlives_components(ty_max, &mut components);\n+                push_outlives_components(tcx, ty_max, &mut components);\n                 self.stack.extend(\n                     components\n                         .into_iter()"}, {"sha": "20d07bdc48a622d171947fbfe2ed7f1b3e813748", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "patch": "@@ -92,7 +92,6 @@ pub mod fold;\n pub mod inhabitedness;\n pub mod layout;\n pub mod normalize_erasing_regions;\n-pub mod outlives;\n pub mod print;\n pub mod query;\n pub mod relate;"}, {"sha": "70816b5722b2d4ae88a62170692238d8ef54adfa", "filename": "compiler/rustc_trait_selection/src/infer.rs", "status": "modified", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Finfer.rs?ref=502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "patch": "@@ -1,12 +1,8 @@\n use crate::traits::query::evaluate_obligation::InferCtxtExt as _;\n-use crate::traits::query::outlives_bounds::InferCtxtExt as _;\n use crate::traits::{self, TraitEngine, TraitEngineExt};\n \n-use rustc_data_structures::stable_set::FxHashSet;\n-use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items::LangItem;\n-use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::arena::ArenaAllocatable;\n use rustc_middle::infer::canonical::{Canonical, CanonicalizedQueryResponse, QueryResponse};\n@@ -180,48 +176,3 @@ impl<'tcx> InferCtxtBuilderExt<'tcx> for InferCtxtBuilder<'tcx> {\n         )\n     }\n }\n-\n-pub trait OutlivesEnvironmentExt<'tcx> {\n-    fn add_implied_bounds(\n-        &mut self,\n-        infcx: &InferCtxt<'a, 'tcx>,\n-        fn_sig_tys: FxHashSet<Ty<'tcx>>,\n-        body_id: hir::HirId,\n-        span: Span,\n-    );\n-}\n-\n-impl<'tcx> OutlivesEnvironmentExt<'tcx> for OutlivesEnvironment<'tcx> {\n-    /// This method adds \"implied bounds\" into the outlives environment.\n-    /// Implied bounds are outlives relationships that we can deduce\n-    /// on the basis that certain types must be well-formed -- these are\n-    /// either the types that appear in the function signature or else\n-    /// the input types to an impl. For example, if you have a function\n-    /// like\n-    ///\n-    /// ```\n-    /// fn foo<'a, 'b, T>(x: &'a &'b [T]) { }\n-    /// ```\n-    ///\n-    /// we can assume in the caller's body that `'b: 'a` and that `T:\n-    /// 'b` (and hence, transitively, that `T: 'a`). This method would\n-    /// add those assumptions into the outlives-environment.\n-    ///\n-    /// Tests: `src/test/ui/regions/regions-free-region-ordering-*.rs`\n-    fn add_implied_bounds(\n-        &mut self,\n-        infcx: &InferCtxt<'a, 'tcx>,\n-        fn_sig_tys: FxHashSet<Ty<'tcx>>,\n-        body_id: hir::HirId,\n-        span: Span,\n-    ) {\n-        debug!(\"add_implied_bounds()\");\n-\n-        for ty in fn_sig_tys {\n-            let ty = infcx.resolve_vars_if_possible(ty);\n-            debug!(\"add_implied_bounds: ty = {}\", ty);\n-            let implied_bounds = infcx.implied_outlives_bounds(self.param_env, body_id, ty, span);\n-            self.add_outlives_bounds(Some(infcx), implied_bounds)\n-        }\n-    }\n-}"}, {"sha": "ef3493678131f438497731b16d6ed2a2cafd69bd", "filename": "compiler/rustc_trait_selection/src/traits/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fmod.rs?ref=502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "patch": "@@ -9,7 +9,6 @@ pub mod dropck_outlives;\n pub mod evaluate_obligation;\n pub mod method_autoderef;\n pub mod normalize;\n-pub mod outlives_bounds;\n pub mod type_op;\n \n pub use rustc_middle::traits::query::*;"}, {"sha": "04c382d439d4c0d88d39402d621bb8b2cc3ed17c", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "patch": "@@ -1,6 +1,6 @@\n use crate::infer::canonical::{Canonicalized, CanonicalizedQueryResponse};\n-use crate::traits::query::outlives_bounds::OutlivesBound;\n use crate::traits::query::Fallible;\n+use rustc_infer::traits::query::OutlivesBound;\n use rustc_middle::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n #[derive(Copy, Clone, Debug, HashStable, TypeFoldable, Lift)]"}, {"sha": "37e007337374fd2553af77fcff1f307c2062e2c1", "filename": "compiler/rustc_traits/src/implied_outlives_bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fimplied_outlives_bounds.rs?ref=502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "patch": "@@ -4,14 +4,14 @@\n \n use rustc_hir as hir;\n use rustc_infer::infer::canonical::{self, Canonical};\n+use rustc_infer::infer::outlives::components::{push_outlives_components, Component};\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n+use rustc_infer::traits::query::OutlivesBound;\n use rustc_infer::traits::TraitEngineExt as _;\n-use rustc_middle::ty::outlives::Component;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc_span::source_map::DUMMY_SP;\n use rustc_trait_selection::infer::InferCtxtBuilderExt;\n-use rustc_trait_selection::traits::query::outlives_bounds::OutlivesBound;\n use rustc_trait_selection::traits::query::{CanonicalTyGoal, Fallible, NoSolution};\n use rustc_trait_selection::traits::wf;\n use rustc_trait_selection::traits::FulfillmentContext;\n@@ -118,7 +118,7 @@ fn compute_implied_outlives_bounds<'tcx>(\n                     ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(ty_a, r_b)) => {\n                         let ty_a = infcx.resolve_vars_if_possible(ty_a);\n                         let mut components = smallvec![];\n-                        tcx.push_outlives_components(ty_a, &mut components);\n+                        push_outlives_components(tcx, ty_a, &mut components);\n                         implied_bounds_from_components(r_b, components)\n                     }\n                 },"}, {"sha": "7c8b75271871a9a1275ba4cece3796abdfcbf81a", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 48, "deletions": 3, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "patch": "@@ -76,19 +76,19 @@ use crate::check::dropck;\n use crate::check::FnCtxt;\n use crate::mem_categorization as mc;\n use crate::middle::region;\n+use crate::outlives::outlives_bounds::InferCtxtExt as _;\n use rustc_data_structures::stable_set::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::PatKind;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n-use rustc_infer::infer::{self, RegionObligation, RegionckMode};\n+use rustc_infer::infer::{self, InferCtxt, RegionObligation, RegionckMode};\n use rustc_middle::hir::place::{PlaceBase, PlaceWithHirId};\n use rustc_middle::ty::adjustment;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::Span;\n-use rustc_trait_selection::infer::OutlivesEnvironmentExt;\n-use rustc_trait_selection::opaque_types::InferCtxtExt;\n+use rustc_trait_selection::opaque_types::InferCtxtExt as _;\n use std::ops::Deref;\n \n // a variation on try that just returns unit\n@@ -104,6 +104,51 @@ macro_rules! ignore_err {\n     };\n }\n \n+trait OutlivesEnvironmentExt<'tcx> {\n+    fn add_implied_bounds(\n+        &mut self,\n+        infcx: &InferCtxt<'a, 'tcx>,\n+        fn_sig_tys: FxHashSet<Ty<'tcx>>,\n+        body_id: hir::HirId,\n+        span: Span,\n+    );\n+}\n+\n+impl<'tcx> OutlivesEnvironmentExt<'tcx> for OutlivesEnvironment<'tcx> {\n+    /// This method adds \"implied bounds\" into the outlives environment.\n+    /// Implied bounds are outlives relationships that we can deduce\n+    /// on the basis that certain types must be well-formed -- these are\n+    /// either the types that appear in the function signature or else\n+    /// the input types to an impl. For example, if you have a function\n+    /// like\n+    ///\n+    /// ```\n+    /// fn foo<'a, 'b, T>(x: &'a &'b [T]) { }\n+    /// ```\n+    ///\n+    /// we can assume in the caller's body that `'b: 'a` and that `T:\n+    /// 'b` (and hence, transitively, that `T: 'a`). This method would\n+    /// add those assumptions into the outlives-environment.\n+    ///\n+    /// Tests: `src/test/ui/regions/regions-free-region-ordering-*.rs`\n+    fn add_implied_bounds(\n+        &mut self,\n+        infcx: &InferCtxt<'a, 'tcx>,\n+        fn_sig_tys: FxHashSet<Ty<'tcx>>,\n+        body_id: hir::HirId,\n+        span: Span,\n+    ) {\n+        debug!(\"add_implied_bounds()\");\n+\n+        for ty in fn_sig_tys {\n+            let ty = infcx.resolve_vars_if_possible(ty);\n+            debug!(\"add_implied_bounds: ty = {}\", ty);\n+            let implied_bounds = infcx.implied_outlives_bounds(self.param_env, body_id, ty, span);\n+            self.add_outlives_bounds(Some(infcx), implied_bounds)\n+        }\n+    }\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // PUBLIC ENTRY POINTS\n "}, {"sha": "30aab38b1eb8522cd41e8689ca86e6f0ec4280d0", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 22, "deletions": 35, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "patch": "@@ -142,23 +142,23 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n             }\n         }\n         hir::ItemKind::Fn(ref sig, ..) => {\n-            check_item_fn(tcx, item.hir_id(), item.ident, item.span, sig.decl);\n+            check_item_fn(tcx, item.def_id, item.ident, item.span, sig.decl);\n         }\n         hir::ItemKind::Static(ty, ..) => {\n-            check_item_type(tcx, item.hir_id(), ty.span, false);\n+            check_item_type(tcx, item.def_id, ty.span, false);\n         }\n         hir::ItemKind::Const(ty, ..) => {\n-            check_item_type(tcx, item.hir_id(), ty.span, false);\n+            check_item_type(tcx, item.def_id, ty.span, false);\n         }\n         hir::ItemKind::ForeignMod { items, .. } => {\n             for it in items.iter() {\n                 let it = tcx.hir().foreign_item(it.id);\n                 match it.kind {\n                     hir::ForeignItemKind::Fn(decl, ..) => {\n-                        check_item_fn(tcx, it.hir_id(), it.ident, it.span, decl)\n+                        check_item_fn(tcx, it.def_id, it.ident, it.span, decl)\n                     }\n                     hir::ForeignItemKind::Static(ty, ..) => {\n-                        check_item_type(tcx, it.hir_id(), ty.span, true)\n+                        check_item_type(tcx, it.def_id, ty.span, true)\n                     }\n                     hir::ForeignItemKind::Type => (),\n                 }\n@@ -199,7 +199,7 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         _ => (None, trait_item.span),\n     };\n     check_object_unsafe_self_trait_by_name(tcx, trait_item);\n-    check_associated_item(tcx, trait_item.hir_id(), span, method_sig);\n+    check_associated_item(tcx, trait_item.def_id, span, method_sig);\n \n     let encl_trait_hir_id = tcx.hir().get_parent_item(hir_id);\n     let encl_trait = tcx.hir().expect_item(encl_trait_hir_id);\n@@ -327,7 +327,7 @@ pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         _ => (None, impl_item.span),\n     };\n \n-    check_associated_item(tcx, impl_item.hir_id(), span, method_sig);\n+    check_associated_item(tcx, impl_item.def_id, span, method_sig);\n }\n \n fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n@@ -437,13 +437,13 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n #[tracing::instrument(level = \"debug\", skip(tcx, span, sig_if_method))]\n fn check_associated_item(\n     tcx: TyCtxt<'_>,\n-    item_id: hir::HirId,\n+    item_id: LocalDefId,\n     span: Span,\n     sig_if_method: Option<&hir::FnSig<'_>>,\n ) {\n-    let code = ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(item_id.expect_owner())));\n+    let code = ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(item_id)));\n     for_id(tcx, item_id, span).with_fcx(|fcx| {\n-        let item = fcx.tcx.associated_item(fcx.tcx.hir().local_def_id(item_id));\n+        let item = fcx.tcx.associated_item(item_id);\n \n         let (mut implied_bounds, self_ty) = match item.container {\n             ty::TraitContainer(_) => (FxHashSet::default(), fcx.tcx.types.self_param),\n@@ -455,11 +455,7 @@ fn check_associated_item(\n         match item.kind {\n             ty::AssocKind::Const => {\n                 let ty = fcx.tcx.type_of(item.def_id);\n-                let ty = fcx.normalize_associated_types_in_wf(\n-                    span,\n-                    ty,\n-                    WellFormedLoc::Ty(item_id.expect_owner()),\n-                );\n+                let ty = fcx.normalize_associated_types_in_wf(span, ty, WellFormedLoc::Ty(item_id));\n                 fcx.register_wf_obligation(ty.into(), span, code.clone());\n             }\n             ty::AssocKind::Fn => {\n@@ -481,11 +477,8 @@ fn check_associated_item(\n                 }\n                 if item.defaultness.has_value() {\n                     let ty = fcx.tcx.type_of(item.def_id);\n-                    let ty = fcx.normalize_associated_types_in_wf(\n-                        span,\n-                        ty,\n-                        WellFormedLoc::Ty(item_id.expect_owner()),\n-                    );\n+                    let ty =\n+                        fcx.normalize_associated_types_in_wf(span, ty, WellFormedLoc::Ty(item_id));\n                     fcx.register_wf_obligation(ty.into(), span, code.clone());\n                 }\n             }\n@@ -496,14 +489,13 @@ fn check_associated_item(\n }\n \n fn for_item<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item<'_>) -> CheckWfFcxBuilder<'tcx> {\n-    for_id(tcx, item.hir_id(), item.span)\n+    for_id(tcx, item.def_id, item.span)\n }\n \n-fn for_id(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) -> CheckWfFcxBuilder<'_> {\n-    let def_id = tcx.hir().local_def_id(id);\n+fn for_id(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) -> CheckWfFcxBuilder<'_> {\n     CheckWfFcxBuilder {\n         inherited: Inherited::build(tcx, def_id),\n-        id,\n+        id: hir::HirId::make_owner(def_id),\n         span,\n         param_env: tcx.param_env(def_id),\n     }\n@@ -665,30 +657,25 @@ fn check_associated_type_bounds(fcx: &FnCtxt<'_, '_>, item: &ty::AssocItem, span\n \n fn check_item_fn(\n     tcx: TyCtxt<'_>,\n-    item_id: hir::HirId,\n+    def_id: LocalDefId,\n     ident: Ident,\n     span: Span,\n     decl: &hir::FnDecl<'_>,\n ) {\n-    for_id(tcx, item_id, span).with_fcx(|fcx| {\n-        let def_id = tcx.hir().local_def_id(item_id);\n+    for_id(tcx, def_id, span).with_fcx(|fcx| {\n         let sig = tcx.fn_sig(def_id);\n         let mut implied_bounds = FxHashSet::default();\n         check_fn_or_method(fcx, ident.span, sig, decl, def_id.to_def_id(), &mut implied_bounds);\n         implied_bounds\n     })\n }\n \n-fn check_item_type(tcx: TyCtxt<'_>, item_id: hir::HirId, ty_span: Span, allow_foreign_ty: bool) {\n+fn check_item_type(tcx: TyCtxt<'_>, item_id: LocalDefId, ty_span: Span, allow_foreign_ty: bool) {\n     debug!(\"check_item_type: {:?}\", item_id);\n \n     for_id(tcx, item_id, ty_span).with_fcx(|fcx| {\n-        let ty = tcx.type_of(tcx.hir().local_def_id(item_id));\n-        let item_ty = fcx.normalize_associated_types_in_wf(\n-            ty_span,\n-            ty,\n-            WellFormedLoc::Ty(item_id.expect_owner()),\n-        );\n+        let ty = tcx.type_of(item_id);\n+        let item_ty = fcx.normalize_associated_types_in_wf(ty_span, ty, WellFormedLoc::Ty(item_id));\n \n         let mut forbid_unsized = true;\n         if allow_foreign_ty {\n@@ -701,7 +688,7 @@ fn check_item_type(tcx: TyCtxt<'_>, item_id: hir::HirId, ty_span: Span, allow_fo\n         fcx.register_wf_obligation(\n             item_ty.into(),\n             ty_span,\n-            ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(item_id.expect_owner()))),\n+            ObligationCauseCode::WellFormed(Some(WellFormedLoc::Ty(item_id))),\n         );\n         if forbid_unsized {\n             fcx.register_bound("}, {"sha": "eb3853b6b3dee9e85eb26a08318607b5e008babb", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "patch": "@@ -9,6 +9,7 @@ use rustc_span::Span;\n \n mod explicit;\n mod implicit_infer;\n+crate mod outlives_bounds;\n /// Code to write unit test for outlives.\n pub mod test;\n mod utils;"}, {"sha": "4ab5fe26abe56098cc4210db94e1c804cd90afbc", "filename": "compiler/rustc_typeck/src/outlives/outlives_bounds.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Foutlives_bounds.rs?ref=502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "patch": "@@ -1,11 +1,11 @@\n-use crate::infer::canonical::OriginalQueryValues;\n-use crate::infer::InferCtxt;\n-use crate::traits::query::NoSolution;\n-use crate::traits::{FulfillmentContext, ObligationCause, TraitEngine};\n use rustc_hir as hir;\n use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::source_map::Span;\n+use rustc_trait_selection::infer::canonical::OriginalQueryValues;\n+use rustc_trait_selection::infer::InferCtxt;\n+use rustc_trait_selection::traits::query::NoSolution;\n+use rustc_trait_selection::traits::{FulfillmentContext, ObligationCause, TraitEngine};\n \n pub use rustc_middle::traits::query::OutlivesBound;\n ", "previous_filename": "compiler/rustc_trait_selection/src/traits/query/outlives_bounds.rs"}, {"sha": "76ae2ee43566e9d0ac28a7cf6c49fca342159d70", "filename": "compiler/rustc_typeck/src/outlives/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/502d57b32dfa4ceca1ae043cf1fd9c411798bed5/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Futils.rs?ref=502d57b32dfa4ceca1ae043cf1fd9c411798bed5", "patch": "@@ -1,4 +1,4 @@\n-use rustc_middle::ty::outlives::Component;\n+use rustc_infer::infer::outlives::components::{push_outlives_components, Component};\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, Region, RegionKind, Ty, TyCtxt};\n use rustc_span::Span;\n@@ -35,7 +35,7 @@ pub fn insert_outlives_predicate<'tcx>(\n             // Or if within `struct Foo<U>` you had `T = Vec<U>`, then\n             // we would want to add `U: 'outlived_region`\n             let mut components = smallvec![];\n-            tcx.push_outlives_components(ty, &mut components);\n+            push_outlives_components(tcx, ty, &mut components);\n             for component in components {\n                 match component {\n                     Component::Region(r) => {"}]}