{"sha": "bc649ba8f803913a23c767d57be01c693cd03d8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNjQ5YmE4ZjgwMzkxM2EyM2M3NjdkNTdiZTAxYzY5M2NkMDNkOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-08T08:27:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-08T08:27:10Z"}, "message": "auto merge of #17447 : thestinger/rust/silly_string, r=aturon\n\nThis provides a way to pass `&[T]` to functions taking `&U` where `U` is\r\na `Vec<T>`. This is useful in many cases not covered by the Equiv trait\r\nor methods like `find_with` on TreeMap.", "tree": {"sha": "ebe322af4897bcc8e99a243435af8aec48f367bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebe322af4897bcc8e99a243435af8aec48f367bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc649ba8f803913a23c767d57be01c693cd03d8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc649ba8f803913a23c767d57be01c693cd03d8a", "html_url": "https://github.com/rust-lang/rust/commit/bc649ba8f803913a23c767d57be01c693cd03d8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc649ba8f803913a23c767d57be01c693cd03d8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57af34b9ad2a4a5a8932ccb06d022d5f8c5807bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/57af34b9ad2a4a5a8932ccb06d022d5f8c5807bc", "html_url": "https://github.com/rust-lang/rust/commit/57af34b9ad2a4a5a8932ccb06d022d5f8c5807bc"}, {"sha": "f744479562aa69a8c8cd95900b548fea250236a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f744479562aa69a8c8cd95900b548fea250236a4", "html_url": "https://github.com/rust-lang/rust/commit/f744479562aa69a8c8cd95900b548fea250236a4"}], "stats": {"total": 104, "additions": 89, "deletions": 15}, "files": [{"sha": "900cf9dfb44e45a121a040e2534e2008122e9cca", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bc649ba8f803913a23c767d57be01c693cd03d8a/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc649ba8f803913a23c767d57be01c693cd03d8a/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=bc649ba8f803913a23c767d57be01c693cd03d8a", "patch": "@@ -28,7 +28,7 @@ use slice::CloneableVector;\n use str;\n use str::{CharRange, StrAllocating, MaybeOwned, Owned};\n use str::Slice as MaybeOwnedSlice; // So many `Slice`s...\n-use vec::Vec;\n+use vec::{DerefVec, Vec, as_vec};\n \n /// A growable string stored as a UTF-8 encoded buffer.\n #[deriving(Clone, PartialEq, PartialOrd, Eq, Ord)]\n@@ -973,6 +973,24 @@ impl ops::Slice<uint, str> for String {\n     }\n }\n \n+/// Wrapper type providing a `&String` reference via `Deref`.\n+#[experimental]\n+pub struct DerefString<'a> {\n+    x: DerefVec<'a, u8>\n+}\n+\n+impl<'a> Deref<String> for DerefString<'a> {\n+    fn deref<'b>(&'b self) -> &'b String {\n+        unsafe { mem::transmute(&*self.x) }\n+    }\n+}\n+\n+/// Convert a string slice to a wrapper type providing a `&String` reference.\n+#[experimental]\n+pub fn as_string<'a>(x: &'a str) -> DerefString<'a> {\n+    DerefString { x: as_vec(x.as_bytes()) }\n+}\n+\n /// Unsafe operations\n #[unstable = \"waiting on raw module conventions\"]\n pub mod raw {\n@@ -1039,9 +1057,15 @@ mod tests {\n     use {Mutable, MutableSeq};\n     use str;\n     use str::{Str, StrSlice, Owned};\n-    use super::String;\n+    use super::{as_string, String};\n     use vec::Vec;\n \n+    #[test]\n+    fn test_as_string() {\n+        let x = \"foo\";\n+        assert_eq!(x, as_string(x).as_slice());\n+    }\n+\n     #[test]\n     fn test_from_str() {\n       let owned: Option<::std::string::String> = from_str(\"string\");"}, {"sha": "857ffbcf4beea1fde9c009f9d1c3ae429a33c8aa", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 63, "deletions": 13, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/bc649ba8f803913a23c767d57be01c693cd03d8a/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc649ba8f803913a23c767d57be01c693cd03d8a/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=bc649ba8f803913a23c767d57be01c693cd03d8a", "patch": "@@ -18,7 +18,7 @@ use alloc::heap::{EMPTY, allocate, reallocate, deallocate};\n use core::cmp::max;\n use core::default::Default;\n use core::fmt;\n-use core::kinds::marker::InvariantType;\n+use core::kinds::marker::{ContravariantLifetime, InvariantType};\n use core::mem;\n use core::num;\n use core::ops;\n@@ -1875,6 +1875,39 @@ pub fn unzip<T, U, V: Iterator<(T, U)>>(mut iter: V) -> (Vec<T>, Vec<U>) {\n     (ts, us)\n }\n \n+/// Wrapper type providing a `&Vec<T>` reference via `Deref`.\n+#[experimental]\n+pub struct DerefVec<'a, T> {\n+    x: Vec<T>,\n+    l: ContravariantLifetime<'a>\n+}\n+\n+impl<'a, T> Deref<Vec<T>> for DerefVec<'a, T> {\n+    fn deref<'b>(&'b self) -> &'b Vec<T> {\n+        &self.x\n+    }\n+}\n+\n+// Prevent the inner `Vec<T>` from attempting to deallocate memory.\n+#[unsafe_destructor]\n+impl<'a, T> Drop for DerefVec<'a, T> {\n+    fn drop(&mut self) {\n+        self.x.len = 0;\n+        self.x.cap = 0;\n+    }\n+}\n+\n+/// Convert a slice to a wrapper type providing a `&Vec<T>` reference.\n+#[experimental]\n+pub fn as_vec<'a, T>(x: &'a [T]) -> DerefVec<'a, T> {\n+    unsafe {\n+        DerefVec {\n+            x: Vec::from_raw_parts(x.len(), x.len(), x.as_ptr() as *mut T),\n+            l: ContravariantLifetime::<'a>\n+        }\n+    }\n+}\n+\n /// Unsafe vector operations.\n #[unstable]\n pub mod raw {\n@@ -2169,10 +2202,38 @@ mod tests {\n     use std::prelude::*;\n     use std::mem::size_of;\n     use test::Bencher;\n-    use super::{unzip, raw, Vec};\n+    use super::{as_vec, unzip, raw, Vec};\n \n     use MutableSeq;\n \n+    struct DropCounter<'a> {\n+        count: &'a mut int\n+    }\n+\n+    #[unsafe_destructor]\n+    impl<'a> Drop for DropCounter<'a> {\n+        fn drop(&mut self) {\n+            *self.count += 1;\n+        }\n+    }\n+\n+    #[test]\n+    fn test_as_vec() {\n+        let xs = [1u8, 2u8, 3u8];\n+        assert_eq!(as_vec(xs).as_slice(), xs.as_slice());\n+    }\n+\n+    #[test]\n+    fn test_as_vec_dtor() {\n+        let (mut count_x, mut count_y) = (0, 0);\n+        {\n+            let xs = &[DropCounter { count: &mut count_x }, DropCounter { count: &mut count_y }];\n+            assert_eq!(as_vec(xs).len(), 2);\n+        }\n+        assert_eq!(count_x, 1);\n+        assert_eq!(count_y, 1);\n+    }\n+\n     #[test]\n     fn test_small_vec_struct() {\n         assert!(size_of::<Vec<u8>>() == size_of::<uint>() * 3);\n@@ -2185,17 +2246,6 @@ mod tests {\n             y: Vec<T>\n         }\n \n-        struct DropCounter<'a> {\n-            count: &'a mut int\n-        }\n-\n-        #[unsafe_destructor]\n-        impl<'a> Drop for DropCounter<'a> {\n-            fn drop(&mut self) {\n-                *self.count += 1;\n-            }\n-        }\n-\n         let (mut count_x, mut count_y) = (0, 0);\n         {\n             let mut tv = TwoVec {"}]}