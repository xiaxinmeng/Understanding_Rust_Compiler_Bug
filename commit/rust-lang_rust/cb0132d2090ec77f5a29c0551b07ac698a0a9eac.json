{"sha": "cb0132d2090ec77f5a29c0551b07ac698a0a9eac", "node_id": "C_kwDOAAsO6NoAKGNiMDEzMmQyMDkwZWM3N2Y1YTI5YzA1NTFiMDdhYzY5OGEwYTllYWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-25T21:34:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-25T21:34:11Z"}, "message": "Auto merge of #7865 - Herschel:fix-match-str-case-mismatch, r=xFrednet\n\nFix `match_str_case_mismatch` on uncased chars\n\nFalse positives would result because `char::is_lowercase` and friends will return `false` for non-alphabetic chars and alphabetic chars lacking case (such as CJK scripts). Care also has to be taken for handling titlecase characters (`\u01f2`) and lowercased chars with no uppercase equivalent (`\u0281`).\n\nFor example, when verifying lowercase:\n * Check `!any(char::is_ascii_uppercase)` instead of `all(char::is_ascii_lowercase)` for ASCII.\n * Check that `all(|c| c.to_lowercase() == c)` instead of `all(char::is_lowercase)` for non-ASCII\n\nFixes #7863.\n\nchangelog: Fix false positives in [`match_str_case_mismatch`] on uncased characters", "tree": {"sha": "de7b93ee4f78e5e43d5cd499e57416e3fb9a474e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de7b93ee4f78e5e43d5cd499e57416e3fb9a474e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb0132d2090ec77f5a29c0551b07ac698a0a9eac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb0132d2090ec77f5a29c0551b07ac698a0a9eac", "html_url": "https://github.com/rust-lang/rust/commit/cb0132d2090ec77f5a29c0551b07ac698a0a9eac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb0132d2090ec77f5a29c0551b07ac698a0a9eac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ef1f19d60dcad6bc82955ad10d8cdf0351c9800", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef1f19d60dcad6bc82955ad10d8cdf0351c9800", "html_url": "https://github.com/rust-lang/rust/commit/3ef1f19d60dcad6bc82955ad10d8cdf0351c9800"}, {"sha": "e953dff5360ad718511dff79ca7c3ae5cb8118d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e953dff5360ad718511dff79ca7c3ae5cb8118d4", "html_url": "https://github.com/rust-lang/rust/commit/e953dff5360ad718511dff79ca7c3ae5cb8118d4"}], "stats": {"total": 148, "additions": 139, "deletions": 9}, "files": [{"sha": "f501593c5187e36e99b823f0a1a6919df425bc86", "filename": "clippy_lints/src/match_str_case_mismatch.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb0132d2090ec77f5a29c0551b07ac698a0a9eac/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb0132d2090ec77f5a29c0551b07ac698a0a9eac/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_str_case_mismatch.rs?ref=cb0132d2090ec77f5a29c0551b07ac698a0a9eac", "patch": "@@ -127,10 +127,10 @@ fn get_case_method(segment_ident_str: &str) -> Option<CaseMethod> {\n \n fn verify_case<'a>(case_method: &'a CaseMethod, arms: &'a [Arm<'_>]) -> Option<(Span, SymbolStr)> {\n     let case_check = match case_method {\n-        CaseMethod::LowerCase => |input: &str| -> bool { input.chars().all(char::is_lowercase) },\n-        CaseMethod::AsciiLowerCase => |input: &str| -> bool { input.chars().all(|c| matches!(c, 'a'..='z')) },\n-        CaseMethod::UpperCase => |input: &str| -> bool { input.chars().all(char::is_uppercase) },\n-        CaseMethod::AsciiUppercase => |input: &str| -> bool { input.chars().all(|c| matches!(c, 'A'..='Z')) },\n+        CaseMethod::LowerCase => |input: &str| -> bool { input.chars().all(|c| c.to_lowercase().next() == Some(c)) },\n+        CaseMethod::AsciiLowerCase => |input: &str| -> bool { !input.chars().any(|c| c.is_ascii_uppercase()) },\n+        CaseMethod::UpperCase => |input: &str| -> bool { input.chars().all(|c| c.to_uppercase().next() == Some(c)) },\n+        CaseMethod::AsciiUppercase => |input: &str| -> bool { !input.chars().any(|c| c.is_ascii_lowercase()) },\n     };\n \n     for arm in arms {\n@@ -153,7 +153,7 @@ fn verify_case<'a>(case_method: &'a CaseMethod, arms: &'a [Arm<'_>]) -> Option<(\n \n fn lint(cx: &LateContext<'_>, case_method: &CaseMethod, bad_case_span: Span, bad_case_str: &str) {\n     let (method_str, suggestion) = match case_method {\n-        CaseMethod::LowerCase => (\"to_lower_case\", bad_case_str.to_lowercase()),\n+        CaseMethod::LowerCase => (\"to_lowercase\", bad_case_str.to_lowercase()),\n         CaseMethod::AsciiLowerCase => (\"to_ascii_lowercase\", bad_case_str.to_ascii_lowercase()),\n         CaseMethod::UpperCase => (\"to_uppercase\", bad_case_str.to_uppercase()),\n         CaseMethod::AsciiUppercase => (\"to_ascii_uppercase\", bad_case_str.to_ascii_uppercase()),"}, {"sha": "ac555c87d83b21a14beecece000d2cd7a55cbbdf", "filename": "tests/ui/match_str_case_mismatch.rs", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/cb0132d2090ec77f5a29c0551b07ac698a0a9eac/tests%2Fui%2Fmatch_str_case_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb0132d2090ec77f5a29c0551b07ac698a0a9eac/tests%2Fui%2Fmatch_str_case_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_str_case_mismatch.rs?ref=cb0132d2090ec77f5a29c0551b07ac698a0a9eac", "patch": "@@ -12,6 +12,49 @@ fn as_str_match() {\n     }\n }\n \n+fn non_alphabetic() {\n+    let var = \"~!@#$%^&*()-_=+FOO\";\n+\n+    match var.to_ascii_lowercase().as_str() {\n+        \"1234567890\" => {},\n+        \"~!@#$%^&*()-_=+foo\" => {},\n+        \"\\n\\r\\t\\x7F\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn unicode_cased() {\n+    let var = \"\u0412\u041e\u0414\u042b\";\n+\n+    match var.to_lowercase().as_str() {\n+        \"\u6c34\" => {},\n+        \"\u03bd\u03b5\u03c1\u03cc\" => {},\n+        \"\u0432\u043e\u0434\u044b\" => {},\n+        \"\ubb3c\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn titlecase() {\n+    let var = \"Bar\u01f2\";\n+\n+    match var.to_lowercase().as_str() {\n+        \"foo\u01c9\" => {},\n+        \"bar\u01f3\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn no_case_equivalent() {\n+    let var = \"bar\u0281\";\n+\n+    match var.to_uppercase().as_str() {\n+        \"FOO\u0255\" => {},\n+        \"BAR\u0281\" => {},\n+        _ => {},\n+    }\n+}\n+\n fn addrof_unary_match() {\n     let var = \"BAR\";\n \n@@ -70,6 +113,49 @@ fn as_str_match_mismatch() {\n     }\n }\n \n+fn non_alphabetic_mismatch() {\n+    let var = \"~!@#$%^&*()-_=+FOO\";\n+\n+    match var.to_ascii_lowercase().as_str() {\n+        \"1234567890\" => {},\n+        \"~!@#$%^&*()-_=+Foo\" => {},\n+        \"\\n\\r\\t\\x7F\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn unicode_cased_mismatch() {\n+    let var = \"\u0412\u041e\u0414\u042b\";\n+\n+    match var.to_lowercase().as_str() {\n+        \"\u6c34\" => {},\n+        \"\u03bd\u03b5\u03c1\u03cc\" => {},\n+        \"\u0412\u043e\u0434\u044b\" => {},\n+        \"\ubb3c\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn titlecase_mismatch() {\n+    let var = \"Bar\u01f2\";\n+\n+    match var.to_lowercase().as_str() {\n+        \"foo\u01c9\" => {},\n+        \"bar\u01f2\" => {},\n+        _ => {},\n+    }\n+}\n+\n+fn no_case_equivalent_mismatch() {\n+    let var = \"bar\u0281\";\n+\n+    match var.to_uppercase().as_str() {\n+        \"FOO\u0255\" => {},\n+        \"bAR\u0281\" => {},\n+        _ => {},\n+    }\n+}\n+\n fn addrof_unary_match_mismatch() {\n     let var = \"BAR\";\n "}, {"sha": "92baa40ef28f06f99746326de19b31e53055d703", "filename": "tests/ui/match_str_case_mismatch.stderr", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/cb0132d2090ec77f5a29c0551b07ac698a0a9eac/tests%2Fui%2Fmatch_str_case_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cb0132d2090ec77f5a29c0551b07ac698a0a9eac/tests%2Fui%2Fmatch_str_case_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_str_case_mismatch.stderr?ref=cb0132d2090ec77f5a29c0551b07ac698a0a9eac", "patch": "@@ -1,5 +1,5 @@\n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:68:9\n+  --> $DIR/match_str_case_mismatch.rs:111:9\n    |\n LL |         \"Bar\" => {},\n    |         ^^^^^\n@@ -11,7 +11,51 @@ LL |         \"bar\" => {},\n    |         ~~~~~\n \n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:78:9\n+  --> $DIR/match_str_case_mismatch.rs:121:9\n+   |\n+LL |         \"~!@#$%^&*()-_=+Foo\" => {},\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider changing the case of this arm to respect `to_ascii_lowercase`\n+   |\n+LL |         \"~!@#$%^&*()-_=+foo\" => {},\n+   |         ~~~~~~~~~~~~~~~~~~~~\n+\n+error: this `match` arm has a differing case than its expression\n+  --> $DIR/match_str_case_mismatch.rs:133:9\n+   |\n+LL |         \"\u0412\u043e\u0434\u044b\" => {},\n+   |         ^^^^^^\n+   |\n+help: consider changing the case of this arm to respect `to_lowercase`\n+   |\n+LL |         \"\u0432\u043e\u0434\u044b\" => {},\n+   |         ~~~~~~\n+\n+error: this `match` arm has a differing case than its expression\n+  --> $DIR/match_str_case_mismatch.rs:144:9\n+   |\n+LL |         \"bar\u01f2\" => {},\n+   |         ^^^^^^\n+   |\n+help: consider changing the case of this arm to respect `to_lowercase`\n+   |\n+LL |         \"bar\u01f3\" => {},\n+   |         ~~~~~~\n+\n+error: this `match` arm has a differing case than its expression\n+  --> $DIR/match_str_case_mismatch.rs:154:9\n+   |\n+LL |         \"bAR\u0281\" => {},\n+   |         ^^^^^^\n+   |\n+help: consider changing the case of this arm to respect `to_uppercase`\n+   |\n+LL |         \"BAR\u0281\" => {},\n+   |         ~~~~~~\n+\n+error: this `match` arm has a differing case than its expression\n+  --> $DIR/match_str_case_mismatch.rs:164:9\n    |\n LL |         \"Bar\" => {},\n    |         ^^^^^\n@@ -22,7 +66,7 @@ LL |         \"bar\" => {},\n    |         ~~~~~\n \n error: this `match` arm has a differing case than its expression\n-  --> $DIR/match_str_case_mismatch.rs:93:9\n+  --> $DIR/match_str_case_mismatch.rs:179:9\n    |\n LL |         \"bAR\" => {},\n    |         ^^^^^\n@@ -32,5 +76,5 @@ help: consider changing the case of this arm to respect `to_ascii_uppercase`\n LL |         \"BAR\" => {},\n    |         ~~~~~\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 7 previous errors\n "}]}