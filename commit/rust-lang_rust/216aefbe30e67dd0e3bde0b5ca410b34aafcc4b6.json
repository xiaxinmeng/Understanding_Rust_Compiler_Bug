{"sha": "216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6", "node_id": "C_kwDOAAsO6NoAKDIxNmFlZmJlMzBlNjdkZDBlM2JkZTBiNWNhNDEwYjM0YWFmY2M0YjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-08T09:07:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-08T09:07:15Z"}, "message": "Auto merge of #10362 - unexge:missing-assert-message-lint, r=llogiq\n\nAdd `missing_assert_message` lint\n\nFixes https://github.com/rust-lang/rust-clippy/issues/6207.\n\nchangelog: new lint: [`missing_assert_message`]: A new lint for checking assertions that doesn't have a custom panic message.\n[#10362](https://github.com/rust-lang/rust-clippy/pull/10362)\n<!-- changelog_checked -->\n\nr? `@llogiq`", "tree": {"sha": "d91f13147d8655a3d22c026164a1b978207c1a3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d91f13147d8655a3d22c026164a1b978207c1a3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6", "html_url": "https://github.com/rust-lang/rust/commit/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41fa24cef89c71430040332b42036f4ec839c4e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/41fa24cef89c71430040332b42036f4ec839c4e0", "html_url": "https://github.com/rust-lang/rust/commit/41fa24cef89c71430040332b42036f4ec839c4e0"}, {"sha": "b554ff4cd833a60e753050703dc5d1384607d1da", "url": "https://api.github.com/repos/rust-lang/rust/commits/b554ff4cd833a60e753050703dc5d1384607d1da", "html_url": "https://github.com/rust-lang/rust/commit/b554ff4cd833a60e753050703dc5d1384607d1da"}], "stats": {"total": 343, "additions": 333, "deletions": 10}, "files": [{"sha": "62cc7437b824037eb2b563007daf2937619d0f0d", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6", "patch": "@@ -4706,6 +4706,7 @@ Released 2018-09-13\n [`mismatching_type_param_order`]: https://rust-lang.github.io/rust-clippy/master/index.html#mismatching_type_param_order\n [`misnamed_getters`]: https://rust-lang.github.io/rust-clippy/master/index.html#misnamed_getters\n [`misrefactored_assign_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#misrefactored_assign_op\n+[`missing_assert_message`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_assert_message\n [`missing_const_for_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn\n [`missing_docs_in_private_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items\n [`missing_enforced_import_renames`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_enforced_import_renames"}, {"sha": "462fcb6483de7e48df23df4620bba906199e5634", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6", "patch": "@@ -417,6 +417,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::misc_early::UNSEPARATED_LITERAL_SUFFIX_INFO,\n     crate::misc_early::ZERO_PREFIXED_LITERAL_INFO,\n     crate::mismatching_type_param_order::MISMATCHING_TYPE_PARAM_ORDER_INFO,\n+    crate::missing_assert_message::MISSING_ASSERT_MESSAGE_INFO,\n     crate::missing_const_for_fn::MISSING_CONST_FOR_FN_INFO,\n     crate::missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS_INFO,\n     crate::missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES_INFO,"}, {"sha": "6d4ec5277567f207df900284170df948bfb7c787", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6", "patch": "@@ -193,6 +193,7 @@ mod minmax;\n mod misc;\n mod misc_early;\n mod mismatching_type_param_order;\n+mod missing_assert_message;\n mod missing_const_for_fn;\n mod missing_doc;\n mod missing_enforced_import_rename;\n@@ -926,6 +927,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n     store.register_late_pass(|_| Box::new(no_mangle_with_rust_abi::NoMangleWithRustAbi));\n     store.register_late_pass(|_| Box::new(collection_is_never_read::CollectionIsNeverRead));\n+    store.register_late_pass(|_| Box::new(missing_assert_message::MissingAssertMessage));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "2214a568d9c6d315c8b5b5496b2e0d8b4abb021e", "filename": "clippy_lints/src/missing_assert_message.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6/clippy_lints%2Fsrc%2Fmissing_assert_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6/clippy_lints%2Fsrc%2Fmissing_assert_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_assert_message.rs?ref=216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6", "patch": "@@ -0,0 +1,82 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::macros::{find_assert_args, find_assert_eq_args, root_macro_call_first_node, PanicExpn};\n+use clippy_utils::{is_in_cfg_test, is_in_test_function};\n+use rustc_hir::Expr;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks assertions without a custom panic message.\n+    ///\n+    /// ### Why is this bad?\n+    /// Without a good custom message, it'd be hard to understand what went wrong when the assertion fails.\n+    /// A good custom message should be more about why the failure of the assertion is problematic\n+    /// and not what is failed because the assertion already conveys that.\n+    ///\n+    /// ### Known problems\n+    /// This lint cannot check the quality of the custom panic messages.\n+    /// Hence, you can suppress this lint simply by adding placeholder messages\n+    /// like \"assertion failed\". However, we recommend coming up with good messages\n+    /// that provide useful information instead of placeholder messages that\n+    /// don't provide any extra information.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// # struct Service { ready: bool }\n+    /// fn call(service: Service) {\n+    ///     assert!(service.ready);\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// # struct Service { ready: bool }\n+    /// fn call(service: Service) {\n+    ///     assert!(service.ready, \"`service.poll_ready()` must be called first to ensure that service is ready to receive requests\");\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub MISSING_ASSERT_MESSAGE,\n+    restriction,\n+    \"checks assertions without a custom panic message\"\n+}\n+\n+declare_lint_pass!(MissingAssertMessage => [MISSING_ASSERT_MESSAGE]);\n+\n+impl<'tcx> LateLintPass<'tcx> for MissingAssertMessage {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return };\n+        let single_argument = match cx.tcx.get_diagnostic_name(macro_call.def_id) {\n+            Some(sym::assert_macro | sym::debug_assert_macro) => true,\n+            Some(\n+                sym::assert_eq_macro | sym::assert_ne_macro | sym::debug_assert_eq_macro | sym::debug_assert_ne_macro,\n+            ) => false,\n+            _ => return,\n+        };\n+\n+        // This lint would be very noisy in tests, so just ignore if we're in test context\n+        if is_in_test_function(cx.tcx, expr.hir_id) || is_in_cfg_test(cx.tcx, expr.hir_id) {\n+            return;\n+        }\n+\n+        let panic_expn = if single_argument {\n+            let Some((_, panic_expn)) = find_assert_args(cx, expr, macro_call.expn) else { return };\n+            panic_expn\n+        } else {\n+            let Some((_, _, panic_expn)) = find_assert_eq_args(cx, expr, macro_call.expn) else { return };\n+            panic_expn\n+        };\n+\n+        if let PanicExpn::Empty = panic_expn {\n+            span_lint_and_help(\n+                cx,\n+                MISSING_ASSERT_MESSAGE,\n+                macro_call.span,\n+                \"assert without any message\",\n+                None,\n+                \"consider describing why the failing assert is problematic\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "16a5ee766456d4fea02a0457d935dc1e8a18fc33", "filename": "clippy_utils/src/macros.rs", "status": "modified", "additions": 32, "deletions": 10, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6/clippy_utils%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6/clippy_utils%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmacros.rs?ref=216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6", "patch": "@@ -213,6 +213,7 @@ pub fn is_assert_macro(cx: &LateContext<'_>, def_id: DefId) -> bool {\n     matches!(name, sym::assert_macro | sym::debug_assert_macro)\n }\n \n+#[derive(Debug)]\n pub enum PanicExpn<'a> {\n     /// No arguments - `panic!()`\n     Empty,\n@@ -226,10 +227,7 @@ pub enum PanicExpn<'a> {\n \n impl<'a> PanicExpn<'a> {\n     pub fn parse(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<Self> {\n-        if !macro_backtrace(expr.span).any(|macro_call| is_panic(cx, macro_call.def_id)) {\n-            return None;\n-        }\n-        let ExprKind::Call(callee, [arg]) = &expr.kind else { return None };\n+        let ExprKind::Call(callee, [arg, rest @ ..]) = &expr.kind else { return None };\n         let ExprKind::Path(QPath::Resolved(_, path)) = &callee.kind else { return None };\n         let result = match path.segments.last().unwrap().ident.as_str() {\n             \"panic\" if arg.span.ctxt() == expr.span.ctxt() => Self::Empty,\n@@ -239,6 +237,21 @@ impl<'a> PanicExpn<'a> {\n                 Self::Display(e)\n             },\n             \"panic_fmt\" => Self::Format(FormatArgsExpn::parse(cx, arg)?),\n+            // Since Rust 1.52, `assert_{eq,ne}` macros expand to use:\n+            // `core::panicking::assert_failed(.., left_val, right_val, None | Some(format_args!(..)));`\n+            \"assert_failed\" => {\n+                // It should have 4 arguments in total (we already matched with the first argument,\n+                // so we're just checking for 3)\n+                if rest.len() != 3 {\n+                    return None;\n+                }\n+                // `msg_arg` is either `None` (no custom message) or `Some(format_args!(..))` (custom message)\n+                let msg_arg = &rest[2];\n+                match msg_arg.kind {\n+                    ExprKind::Call(_, [fmt_arg]) => Self::Format(FormatArgsExpn::parse(cx, fmt_arg)?),\n+                    _ => Self::Empty,\n+                }\n+            },\n             _ => return None,\n         };\n         Some(result)\n@@ -251,7 +264,17 @@ pub fn find_assert_args<'a>(\n     expr: &'a Expr<'a>,\n     expn: ExpnId,\n ) -> Option<(&'a Expr<'a>, PanicExpn<'a>)> {\n-    find_assert_args_inner(cx, expr, expn).map(|([e], p)| (e, p))\n+    find_assert_args_inner(cx, expr, expn).map(|([e], mut p)| {\n+        // `assert!(..)` expands to `core::panicking::panic(\"assertion failed: ...\")` (which we map to\n+        // `PanicExpn::Str(..)`) and `assert!(.., \"..\")` expands to\n+        // `core::panicking::panic_fmt(format_args!(\"..\"))` (which we map to `PanicExpn::Format(..)`).\n+        // So even we got `PanicExpn::Str(..)` that means there is no custom message provided\n+        if let PanicExpn::Str(_) = p {\n+            p = PanicExpn::Empty;\n+        }\n+\n+        (e, p)\n+    })\n }\n \n /// Finds the arguments of an `assert_eq!` or `debug_assert_eq!` macro call within the macro\n@@ -275,13 +298,12 @@ fn find_assert_args_inner<'a, const N: usize>(\n         Some(inner_name) => find_assert_within_debug_assert(cx, expr, expn, Symbol::intern(inner_name))?,\n     };\n     let mut args = ArrayVec::new();\n-    let mut panic_expn = None;\n-    let _: Option<!> = for_each_expr(expr, |e| {\n+    let panic_expn = for_each_expr(expr, |e| {\n         if args.is_full() {\n-            if panic_expn.is_none() && e.span.ctxt() != expr.span.ctxt() {\n-                panic_expn = PanicExpn::parse(cx, e);\n+            match PanicExpn::parse(cx, e) {\n+                Some(expn) => ControlFlow::Break(expn),\n+                None => ControlFlow::Continue(Descend::Yes),\n             }\n-            ControlFlow::Continue(Descend::from(panic_expn.is_none()))\n         } else if is_assert_arg(cx, e, expn) {\n             args.push(e);\n             ControlFlow::Continue(Descend::No)"}, {"sha": "89404ca882718f05f37ac39c103cbbed533821bf", "filename": "tests/ui/missing_assert_message.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6/tests%2Fui%2Fmissing_assert_message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6/tests%2Fui%2Fmissing_assert_message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_assert_message.rs?ref=216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6", "patch": "@@ -0,0 +1,84 @@\n+#![allow(unused)]\n+#![warn(clippy::missing_assert_message)]\n+\n+macro_rules! bar {\n+    ($( $x:expr ),*) => {\n+        foo()\n+    };\n+}\n+\n+fn main() {}\n+\n+// Should trigger warning\n+fn asserts_without_message() {\n+    assert!(foo());\n+    assert_eq!(foo(), foo());\n+    assert_ne!(foo(), foo());\n+    debug_assert!(foo());\n+    debug_assert_eq!(foo(), foo());\n+    debug_assert_ne!(foo(), foo());\n+}\n+\n+// Should trigger warning\n+fn asserts_without_message_but_with_macro_calls() {\n+    assert!(bar!(true));\n+    assert!(bar!(true, false));\n+    assert_eq!(bar!(true), foo());\n+    assert_ne!(bar!(true, true), bar!(true));\n+}\n+\n+// Should trigger warning\n+fn asserts_with_trailing_commas() {\n+    assert!(foo(),);\n+    assert_eq!(foo(), foo(),);\n+    assert_ne!(foo(), foo(),);\n+    debug_assert!(foo(),);\n+    debug_assert_eq!(foo(), foo(),);\n+    debug_assert_ne!(foo(), foo(),);\n+}\n+\n+// Should not trigger warning\n+fn asserts_with_message_and_with_macro_calls() {\n+    assert!(bar!(true), \"msg\");\n+    assert!(bar!(true, false), \"msg\");\n+    assert_eq!(bar!(true), foo(), \"msg\");\n+    assert_ne!(bar!(true, true), bar!(true), \"msg\");\n+}\n+\n+// Should not trigger warning\n+fn asserts_with_message() {\n+    assert!(foo(), \"msg\");\n+    assert_eq!(foo(), foo(), \"msg\");\n+    assert_ne!(foo(), foo(), \"msg\");\n+    debug_assert!(foo(), \"msg\");\n+    debug_assert_eq!(foo(), foo(), \"msg\");\n+    debug_assert_ne!(foo(), foo(), \"msg\");\n+}\n+\n+// Should not trigger warning\n+#[test]\n+fn asserts_without_message_but_inside_a_test_function() {\n+    assert!(foo());\n+    assert_eq!(foo(), foo());\n+    assert_ne!(foo(), foo());\n+    debug_assert!(foo());\n+    debug_assert_eq!(foo(), foo());\n+    debug_assert_ne!(foo(), foo());\n+}\n+\n+// Should not trigger warning\n+#[cfg(test)]\n+mod tests {\n+    fn asserts_without_message_but_inside_a_test_module() {\n+        assert!(foo());\n+        assert_eq!(foo(), foo());\n+        assert_ne!(foo(), foo());\n+        debug_assert!(foo());\n+        debug_assert_eq!(foo(), foo());\n+        debug_assert_ne!(foo(), foo());\n+    }\n+}\n+\n+fn foo() -> bool {\n+    true\n+}"}, {"sha": "ecd03801277979bccefdc42cb46b5fe49d156f92", "filename": "tests/ui/missing_assert_message.stderr", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6/tests%2Fui%2Fmissing_assert_message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6/tests%2Fui%2Fmissing_assert_message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_assert_message.stderr?ref=216aefbe30e67dd0e3bde0b5ca410b34aafcc4b6", "patch": "@@ -0,0 +1,131 @@\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:14:5\n+   |\n+LL |     assert!(foo());\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+   = note: `-D clippy::missing-assert-message` implied by `-D warnings`\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:15:5\n+   |\n+LL |     assert_eq!(foo(), foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:16:5\n+   |\n+LL |     assert_ne!(foo(), foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:17:5\n+   |\n+LL |     debug_assert!(foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:18:5\n+   |\n+LL |     debug_assert_eq!(foo(), foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:19:5\n+   |\n+LL |     debug_assert_ne!(foo(), foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:24:5\n+   |\n+LL |     assert!(bar!(true));\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:25:5\n+   |\n+LL |     assert!(bar!(true, false));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:26:5\n+   |\n+LL |     assert_eq!(bar!(true), foo());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:27:5\n+   |\n+LL |     assert_ne!(bar!(true, true), bar!(true));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:32:5\n+   |\n+LL |     assert!(foo(),);\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:33:5\n+   |\n+LL |     assert_eq!(foo(), foo(),);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:34:5\n+   |\n+LL |     assert_ne!(foo(), foo(),);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:35:5\n+   |\n+LL |     debug_assert!(foo(),);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:36:5\n+   |\n+LL |     debug_assert_eq!(foo(), foo(),);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: assert without any message\n+  --> $DIR/missing_assert_message.rs:37:5\n+   |\n+LL |     debug_assert_ne!(foo(), foo(),);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider describing why the failing assert is problematic\n+\n+error: aborting due to 16 previous errors\n+"}]}