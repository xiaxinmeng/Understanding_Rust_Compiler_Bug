{"sha": "fd18d2537ddcffb24b3739393b085ed28dfc340e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMThkMjUzN2RkY2ZmYjI0YjM3MzkzOTNiMDg1ZWQyOGRmYzM0MGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-18T08:10:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-18T08:10:23Z"}, "message": "Auto merge of #50758 - varkor:stabilise-inclusive_range_methods, r=SimonSapin\n\nStabilise inclusive_range_methods\n\nr? @SimonSapin\n\nCloses #49022.", "tree": {"sha": "baaa162cb5f5629be99a9d35be8cb86edd2ad151", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baaa162cb5f5629be99a9d35be8cb86edd2ad151"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd18d2537ddcffb24b3739393b085ed28dfc340e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd18d2537ddcffb24b3739393b085ed28dfc340e", "html_url": "https://github.com/rust-lang/rust/commit/fd18d2537ddcffb24b3739393b085ed28dfc340e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd18d2537ddcffb24b3739393b085ed28dfc340e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a421f8e193d425c90e67eb5ec4f6eefd705aa88", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a421f8e193d425c90e67eb5ec4f6eefd705aa88", "html_url": "https://github.com/rust-lang/rust/commit/2a421f8e193d425c90e67eb5ec4f6eefd705aa88"}, {"sha": "ff0f00d3182cd604d2d40ea0fe75a4bca407c6b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0f00d3182cd604d2d40ea0fe75a4bca407c6b9", "html_url": "https://github.com/rust-lang/rust/commit/ff0f00d3182cd604d2d40ea0fe75a4bca407c6b9"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "081c473768f1fe4666fdeb42e230fd1284629d54", "filename": "src/liballoc/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd18d2537ddcffb24b3739393b085ed28dfc340e/src%2Fliballoc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18d2537ddcffb24b3739393b085ed28dfc340e/src%2Fliballoc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Flib.rs?ref=fd18d2537ddcffb24b3739393b085ed28dfc340e", "patch": "@@ -25,7 +25,6 @@\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n #![feature(exact_chunks)]\n-#![feature(inclusive_range_methods)]\n \n extern crate alloc_system;\n extern crate core;"}, {"sha": "7c6e2447bdb7f39b707c1c80e62f6420ca0d7e5b", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fd18d2537ddcffb24b3739393b085ed28dfc340e/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18d2537ddcffb24b3739393b085ed28dfc340e/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=fd18d2537ddcffb24b3739393b085ed28dfc340e", "patch": "@@ -318,8 +318,6 @@ impl<Idx: PartialOrd<Idx>> RangeTo<Idx> {\n /// # Examples\n ///\n /// ```\n-/// #![feature(inclusive_range_methods)]\n-///\n /// assert_eq!((3..=5), std::ops::RangeInclusive::new(3, 5));\n /// assert_eq!(3 + 4 + 5, (3..=5).sum());\n ///\n@@ -345,12 +343,11 @@ impl<Idx> RangeInclusive<Idx> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(inclusive_range_methods)]\n     /// use std::ops::RangeInclusive;\n     ///\n     /// assert_eq!(3..=5, RangeInclusive::new(3, 5));\n     /// ```\n-    #[unstable(feature = \"inclusive_range_methods\", issue = \"49022\")]\n+    #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n     #[inline]\n     pub const fn new(start: Idx, end: Idx) -> Self {\n         Self { start, end }\n@@ -363,17 +360,18 @@ impl<Idx> RangeInclusive<Idx> {\n     /// whether the inclusive range is empty, use the [`is_empty()`] method\n     /// instead of comparing `start() > end()`.\n     ///\n+    /// Note: the value returned by this method is unspecified after the range\n+    /// has been iterated to exhaustion.\n+    ///\n     /// [`end()`]: #method.end\n     /// [`is_empty()`]: #method.is_empty\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(inclusive_range_methods)]\n-    ///\n     /// assert_eq!((3..=5).start(), &3);\n     /// ```\n-    #[unstable(feature = \"inclusive_range_methods\", issue = \"49022\")]\n+    #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n     #[inline]\n     pub fn start(&self) -> &Idx {\n         &self.start\n@@ -386,32 +384,34 @@ impl<Idx> RangeInclusive<Idx> {\n     /// whether the inclusive range is empty, use the [`is_empty()`] method\n     /// instead of comparing `start() > end()`.\n     ///\n+    /// Note: the value returned by this method is unspecified after the range\n+    /// has been iterated to exhaustion.\n+    ///\n     /// [`start()`]: #method.start\n     /// [`is_empty()`]: #method.is_empty\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(inclusive_range_methods)]\n-    ///\n     /// assert_eq!((3..=5).end(), &5);\n     /// ```\n-    #[unstable(feature = \"inclusive_range_methods\", issue = \"49022\")]\n+    #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n     #[inline]\n     pub fn end(&self) -> &Idx {\n         &self.end\n     }\n \n-    /// Destructures the RangeInclusive into (lower bound, upper (inclusive) bound).\n+    /// Destructures the `RangeInclusive` into (lower bound, upper (inclusive) bound).\n+    ///\n+    /// Note: the value returned by this method is unspecified after the range\n+    /// has been iterated to exhaustion.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(inclusive_range_methods)]\n-    ///\n     /// assert_eq!((3..=5).into_inner(), (3, 5));\n     /// ```\n-    #[unstable(feature = \"inclusive_range_methods\", issue = \"49022\")]\n+    #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n     #[inline]\n     pub fn into_inner(self) -> (Idx, Idx) {\n         (self.start, self.end)"}, {"sha": "cd6b5c6a4ad4cf43c78d9573c2a9e7e33b51ba66", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd18d2537ddcffb24b3739393b085ed28dfc340e/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18d2537ddcffb24b3739393b085ed28dfc340e/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=fd18d2537ddcffb24b3739393b085ed28dfc340e", "patch": "@@ -42,7 +42,6 @@\n #![feature(try_trait)]\n #![feature(exact_chunks)]\n #![feature(reverse_bits)]\n-#![feature(inclusive_range_methods)]\n #![feature(iterator_find_map)]\n #![feature(slice_internals)]\n "}, {"sha": "1d53a305193fae50cb8e05d735b4985076ce3fd9", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd18d2537ddcffb24b3739393b085ed28dfc340e/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18d2537ddcffb24b3739393b085ed28dfc340e/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=fd18d2537ddcffb24b3739393b085ed28dfc340e", "patch": "@@ -68,7 +68,6 @@\n #![feature(trusted_len)]\n #![feature(catch_expr)]\n #![feature(test)]\n-#![feature(inclusive_range_methods)]\n \n #![recursion_limit=\"512\"]\n "}, {"sha": "0b0bab96dfdfd94f018ed1c22088046305524a13", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd18d2537ddcffb24b3739393b085ed28dfc340e/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18d2537ddcffb24b3739393b085ed28dfc340e/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=fd18d2537ddcffb24b3739393b085ed28dfc340e", "patch": "@@ -29,7 +29,6 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]\n #![feature(optin_builtin_traits)]\n-#![feature(inclusive_range_methods)]\n \n use rustc::dep_graph::WorkProduct;\n use syntax_pos::symbol::Symbol;"}, {"sha": "3bf9453fb513c82a5d2a69f2caa9620cce8ed4bd", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd18d2537ddcffb24b3739393b085ed28dfc340e/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18d2537ddcffb24b3739393b085ed28dfc340e/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=fd18d2537ddcffb24b3739393b085ed28dfc340e", "patch": "@@ -29,7 +29,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(exhaustive_patterns)]\n #![feature(range_contains)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(inclusive_range_methods)]\n #![feature(crate_visibility_modifier)]\n #![feature(never_type)]\n #![feature(specialization)]"}, {"sha": "8f4911574398ba84d2f6874f334e371d8e93666f", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd18d2537ddcffb24b3739393b085ed28dfc340e/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd18d2537ddcffb24b3739393b085ed28dfc340e/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=fd18d2537ddcffb24b3739393b085ed28dfc340e", "patch": "@@ -29,7 +29,6 @@\n #![feature(const_fn)]\n #![feature(fs_read_write)]\n #![feature(inclusive_range)]\n-#![feature(inclusive_range_methods)]\n #![feature(slice_patterns)]\n \n #[macro_use]"}]}