{"sha": "ccd7a600233ead22a77e024503edf4ef679c1751", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZDdhNjAwMjMzZWFkMjJhNzdlMDI0NTAzZWRmNGVmNjc5YzE3NTE=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-02-22T12:41:38Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-31T15:05:42Z"}, "message": "Refactor: Remove duplicated codes from excessive_for_each", "tree": {"sha": "7fa8e064779fe353edccfad8f3dbf576ac803fed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fa8e064779fe353edccfad8f3dbf576ac803fed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccd7a600233ead22a77e024503edf4ef679c1751", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd7a600233ead22a77e024503edf4ef679c1751", "html_url": "https://github.com/rust-lang/rust/commit/ccd7a600233ead22a77e024503edf4ef679c1751", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccd7a600233ead22a77e024503edf4ef679c1751/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90cbbb2da3989a437a36c075396331f81a0e3b30", "url": "https://api.github.com/repos/rust-lang/rust/commits/90cbbb2da3989a437a36c075396331f81a0e3b30", "html_url": "https://github.com/rust-lang/rust/commit/90cbbb2da3989a437a36c075396331f81a0e3b30"}], "stats": {"total": 81, "additions": 25, "deletions": 56}, "files": [{"sha": "14aef0e99d52545caa54c48bf92923d7518796b2", "filename": "clippy_lints/src/methods/excessive_for_each.rs", "status": "modified", "additions": 25, "deletions": 56, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/ccd7a600233ead22a77e024503edf4ef679c1751/clippy_lints%2Fsrc%2Fmethods%2Fexcessive_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccd7a600233ead22a77e024503edf4ef679c1751/clippy_lints%2Fsrc%2Fmethods%2Fexcessive_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexcessive_for_each.rs?ref=ccd7a600233ead22a77e024503edf4ef679c1751", "patch": "@@ -4,13 +4,15 @@ use rustc_hir::{\n     Expr, ExprKind,\n };\n use rustc_lint::LateContext;\n-use rustc_middle::{hir::map::Map, ty, ty::Ty};\n+use rustc_middle::hir::map::Map;\n use rustc_span::source_map::Span;\n \n-use crate::utils::{match_trait_method, match_type, paths, snippet, span_lint_and_then};\n-\n use if_chain::if_chain;\n \n+use crate::utils::{has_iter_method, match_trait_method, paths, snippet, span_lint_and_then};\n+\n+use super::EXCESSIVE_FOR_EACH;\n+\n pub(super) fn lint(cx: &LateContext<'_>, expr: &'tcx Expr<'_>, args: &[&[Expr<'_>]]) {\n     if args.len() < 2 {\n         return;\n@@ -25,73 +27,40 @@ pub(super) fn lint(cx: &LateContext<'_>, expr: &'tcx Expr<'_>, args: &[&[Expr<'_\n     let iter_receiver = &args[1][0];\n \n     if_chain! {\n+        if has_iter_method(cx, cx.typeck_results().expr_ty(iter_receiver)).is_some();\n         if match_trait_method(cx, expr, &paths::ITERATOR);\n-        if is_target_ty(cx, cx.typeck_results().expr_ty(iter_receiver));\n         if let ExprKind::Closure(_, _, body_id, ..) = for_each_arg.kind;\n         let body = cx.tcx.hir().body(body_id);\n         if let ExprKind::Block(..) = body.value.kind;\n         then {\n             let mut ret_collector = RetCollector::new();\n             ret_collector.visit_expr(&body.value);\n \n-            // Skip the lint if `return` is used in `Loop` to avoid a suggest using `'label`.\n+            // Skip the lint if `return` is used in `Loop` in order not to suggest using `'label`.\n             if ret_collector.ret_in_loop {\n                 return;\n             }\n \n-            let sugg =\n-                format!(\"for {} in {} {{ .. }}\", snippet(cx, body.params[0].pat.span, \"\"), snippet(cx, for_each_receiver.span, \"\"));\n-\n-            let mut notes = vec![];\n-            for span in ret_collector.spans {\n-                let note = format!(\"change `return` to `continue` in the loop body\");\n-                notes.push((span, note));\n-            }\n-\n-            span_lint_and_then(cx,\n-                      super::EXCESSIVE_FOR_EACH,\n-                      expr.span,\n-                      \"excessive use of `for_each`\",\n-                      |diag| {\n-                          diag.span_suggestion(expr.span, \"try\", sugg, Applicability::HasPlaceholders);\n-                          for note in notes {\n-                              diag.span_note(note.0, &note.1);\n-                          }\n-                      }\n-                );\n-        }\n-    }\n-}\n-\n-type PathSegment = &'static [&'static str];\n-\n-const TARGET_ITER_RECEIVER_TY: &[PathSegment] = &[\n-    &paths::VEC,\n-    &paths::VEC_DEQUE,\n-    &paths::LINKED_LIST,\n-    &paths::HASHMAP,\n-    &paths::BTREEMAP,\n-    &paths::HASHSET,\n-    &paths::BTREESET,\n-    &paths::BINARY_HEAP,\n-];\n-\n-fn is_target_ty(cx: &LateContext<'_>, expr_ty: Ty<'_>) -> bool {\n-    let expr_ty = expr_ty.peel_refs();\n-    for target in TARGET_ITER_RECEIVER_TY {\n-        if match_type(cx, expr_ty, target) {\n-            return true;\n-        }\n-    }\n-\n-    if_chain! {\n-        if matches!(expr_ty.kind(), ty::Slice(_) | ty::Array(..));\n-        then {\n-            return true;\n+            let sugg = format!(\n+                \"for {} in {} {{ .. }}\",\n+                snippet(cx, body.params[0].pat.span, \"\"),\n+                snippet(cx, for_each_receiver.span, \"\")\n+            );\n+\n+            span_lint_and_then(\n+                cx,\n+                EXCESSIVE_FOR_EACH,\n+                expr.span,\n+                \"excessive use of `for_each`\",\n+                |diag| {\n+                    diag.span_suggestion(expr.span, \"try\", sugg, Applicability::HasPlaceholders);\n+                    for span in ret_collector.spans {\n+                        diag.span_note(span, \"change `return` to `continue` in the loop body\");\n+                    }\n+                }\n+            )\n         }\n     }\n-\n-    false\n }\n \n /// This type plays two roles."}]}