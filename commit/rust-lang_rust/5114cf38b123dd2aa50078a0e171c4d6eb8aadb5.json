{"sha": "5114cf38b123dd2aa50078a0e171c4d6eb8aadb5", "node_id": "C_kwDOAAsO6NoAKDUxMTRjZjM4YjEyM2RkMmFhNTAwNzhhMGUxNzFjNGQ2ZWI4YWFkYjU", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-09-13T21:36:45Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-09-13T21:36:45Z"}, "message": "Update issue-68114.rs", "tree": {"sha": "9a0b1127c21e0a54d2a1bdecaf3efcddb7c103ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a0b1127c21e0a54d2a1bdecaf3efcddb7c103ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5114cf38b123dd2aa50078a0e171c4d6eb8aadb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5114cf38b123dd2aa50078a0e171c4d6eb8aadb5", "html_url": "https://github.com/rust-lang/rust/commit/5114cf38b123dd2aa50078a0e171c4d6eb8aadb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5114cf38b123dd2aa50078a0e171c4d6eb8aadb5/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "777db102dfdaa70ed7d91bad29d294874bfa9946", "url": "https://api.github.com/repos/rust-lang/rust/commits/777db102dfdaa70ed7d91bad29d294874bfa9946", "html_url": "https://github.com/rust-lang/rust/commit/777db102dfdaa70ed7d91bad29d294874bfa9946"}], "stats": {"total": 119, "additions": 103, "deletions": 16}, "files": [{"sha": "c915164cfce86939c0d902138dc25f0bb80eb7e4", "filename": "src/test/ui/async-await/issue-68112.drop_tracking.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/5114cf38b123dd2aa50078a0e171c4d6eb8aadb5/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5114cf38b123dd2aa50078a0e171c4d6eb8aadb5/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.drop_tracking.stderr?ref=5114cf38b123dd2aa50078a0e171c4d6eb8aadb5", "patch": "@@ -0,0 +1,79 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-68112.rs:37:18\n+   |\n+LL |     require_send(send_fut);\n+   |                  ^^^^^^^^ future created by async block is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+note: future is not `Send` as it awaits another future which is not `Send`\n+  --> $DIR/issue-68112.rs:34:17\n+   |\n+LL |         let _ = non_send_fut.await;\n+   |                 ^^^^^^^^^^^^ await occurs here on type `impl Future<Output = Arc<RefCell<i32>>>`, which is not `Send`\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:14:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-68112.rs:46:18\n+   |\n+LL |     require_send(send_fut);\n+   |                  ^^^^^^^^ future created by async block is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+note: future is not `Send` as it awaits another future which is not `Send`\n+  --> $DIR/issue-68112.rs:43:17\n+   |\n+LL |         let _ = make_non_send_future1().await;\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ await occurs here on type `impl Future<Output = Arc<RefCell<i32>>>`, which is not `Send`\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:14:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n+  --> $DIR/issue-68112.rs:65:18\n+   |\n+LL |     require_send(send_fut);\n+   |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Sync` is not implemented for `RefCell<i32>`\n+   = note: required for `Arc<RefCell<i32>>` to implement `Send`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/issue-68112.rs:50:31\n+   |\n+LL |   async fn ready2<T>(t: T) -> T {\n+   |  _______________________________^\n+LL | |     t\n+LL | | }\n+   | |_^\n+note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:53:31\n+   |\n+LL | fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `Ready<i32>`\n+note: required because it's used within this `async` block\n+  --> $DIR/issue-68112.rs:60:26\n+   |\n+LL |       let send_fut = async {\n+   |  __________________________^\n+LL | |         let non_send_fut = make_non_send_future2();\n+LL | |         let _ = non_send_fut.await;\n+LL | |         ready(0).await;\n+LL | |     };\n+   | |_____^\n+note: required by a bound in `require_send`\n+  --> $DIR/issue-68112.rs:14:25\n+   |\n+LL | fn require_send(_: impl Send) {}\n+   |                         ^^^^ required by this bound in `require_send`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "11b7d1aaaa6c72621050a9c7c1337f4d103a7bed", "filename": "src/test/ui/async-await/issue-68112.no_drop_tracking.stderr", "status": "renamed", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5114cf38b123dd2aa50078a0e171c4d6eb8aadb5/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5114cf38b123dd2aa50078a0e171c4d6eb8aadb5/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.no_drop_tracking.stderr?ref=5114cf38b123dd2aa50078a0e171c4d6eb8aadb5", "patch": "@@ -1,41 +1,41 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:34:18\n+  --> $DIR/issue-68112.rs:37:18\n    |\n LL |     require_send(send_fut);\n    |                  ^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n note: future is not `Send` as it awaits another future which is not `Send`\n-  --> $DIR/issue-68112.rs:31:17\n+  --> $DIR/issue-68112.rs:34:17\n    |\n LL |         let _ = non_send_fut.await;\n    |                 ^^^^^^^^^^^^ await occurs here on type `impl Future<Output = Arc<RefCell<i32>>>`, which is not `Send`\n note: required by a bound in `require_send`\n-  --> $DIR/issue-68112.rs:11:25\n+  --> $DIR/issue-68112.rs:14:25\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error: future cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:43:18\n+  --> $DIR/issue-68112.rs:46:18\n    |\n LL |     require_send(send_fut);\n    |                  ^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n note: future is not `Send` as it awaits another future which is not `Send`\n-  --> $DIR/issue-68112.rs:40:17\n+  --> $DIR/issue-68112.rs:43:17\n    |\n LL |         let _ = make_non_send_future1().await;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ await occurs here on type `impl Future<Output = Arc<RefCell<i32>>>`, which is not `Send`\n note: required by a bound in `require_send`\n-  --> $DIR/issue-68112.rs:11:25\n+  --> $DIR/issue-68112.rs:14:25\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-68112.rs:60:18\n+  --> $DIR/issue-68112.rs:65:18\n    |\n LL |     require_send(send_fut);\n    |     ------------ ^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n@@ -45,18 +45,21 @@ LL |     require_send(send_fut);\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required for `Arc<RefCell<i32>>` to implement `Send`\n note: required because it's used within this `async fn` body\n-  --> $DIR/issue-68112.rs:47:31\n+  --> $DIR/issue-68112.rs:50:31\n    |\n-LL | async fn ready2<T>(t: T) -> T { t }\n-   |                               ^^^^^\n+LL |   async fn ready2<T>(t: T) -> T {\n+   |  _______________________________^\n+LL | |     t\n+LL | | }\n+   | |_^\n note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n-  --> $DIR/issue-68112.rs:48:31\n+  --> $DIR/issue-68112.rs:53:31\n    |\n LL | fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `i32`, `Ready<i32>`\n note: required because it's used within this `async` block\n-  --> $DIR/issue-68112.rs:55:26\n+  --> $DIR/issue-68112.rs:60:26\n    |\n LL |       let send_fut = async {\n    |  __________________________^\n@@ -66,7 +69,7 @@ LL | |         ready(0).await;\n LL | |     };\n    | |_____^\n note: required by a bound in `require_send`\n-  --> $DIR/issue-68112.rs:11:25\n+  --> $DIR/issue-68112.rs:14:25\n    |\n LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`", "previous_filename": "src/test/ui/async-await/issue-68112.stderr"}, {"sha": "9c705137a10564580ae16023f193c355ee6672d5", "filename": "src/test/ui/async-await/issue-68112.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5114cf38b123dd2aa50078a0e171c4d6eb8aadb5/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5114cf38b123dd2aa50078a0e171c4d6eb8aadb5/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.rs?ref=5114cf38b123dd2aa50078a0e171c4d6eb8aadb5", "patch": "@@ -1,10 +1,13 @@\n // edition:2018\n+// revisions: no_drop_tracking drop_tracking\n+// [drop_tracking] compile-flags: -Zdrop-tracking=yes\n+// [no_drop_tracking] compile-flags: -Zdrop-tracking=no\n \n use std::{\n-    future::Future,\n     cell::RefCell,\n-    sync::Arc,\n+    future::Future,\n     pin::Pin,\n+    sync::Arc,\n     task::{Context, Poll},\n };\n \n@@ -44,7 +47,9 @@ fn test1_no_let() {\n     //~^ ERROR future cannot be sent between threads\n }\n \n-async fn ready2<T>(t: T) -> T { t }\n+async fn ready2<T>(t: T) -> T {\n+    t\n+}\n fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n     ready2(Arc::new(RefCell::new(0)))\n }"}]}