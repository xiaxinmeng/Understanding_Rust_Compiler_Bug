{"sha": "430673f26590f5f40bb6a6587d43136d0b5604dc", "node_id": "C_kwDOAAsO6NoAKDQzMDY3M2YyNjU5MGY1ZjQwYmI2YTY1ODdkNDMxMzZkMGI1NjA0ZGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-21T21:03:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-21T21:03:15Z"}, "message": "Rollup merge of #92843 - camelid:str-concat-sugg, r=davidtwco\n\nImprove string concatenation suggestion\n\nBefore:\n\n    error[E0369]: cannot add `&str` to `&str`\n     --> file.rs:2:22\n      |\n    2 |     let _x = \"hello\" + \" world\";\n      |              ------- ^ -------- &str\n      |              |       |\n      |              |       `+` cannot be used to concatenate two `&str` strings\n      |              &str\n      |\n    help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n      |\n    2 |     let _x = \"hello\".to_owned() + \" world\";\n      |              ~~~~~~~~~~~~~~~~~~\n\nAfter:\n\n    error[E0369]: cannot add `&str` to `&str`\n     --> file.rs:2:22\n      |\n    2 |     let _x = \"hello\" + \" world\";\n      |              ------- ^ -------- &str\n      |              |       |\n      |              |       `+` cannot be used to concatenate two `&str` strings\n      |              &str\n      |\n      = note: string concatenation requires an owned `String` on the left\n    help: create an owned `String` from a string reference\n      |\n    2 |     let _x = \"hello\".to_owned() + \" world\";\n      |                     +++++++++++", "tree": {"sha": "92811a76bd022b8ddb0eeb012954948cc0c46ffb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92811a76bd022b8ddb0eeb012954948cc0c46ffb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/430673f26590f5f40bb6a6587d43136d0b5604dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh6x+TCRBK7hj4Ov3rIwAA1cgIAENTSlWOXZI36AFSQjcCZSpE\nwEc9dldWu+eX6FbrLNWQ8DyZK6OIj9zdMCndVlYmZox9BwQ92YMBjRBLrYd5lCZc\nHlWYhZpg00sFPwNm20DQW4jv7tMOozN79vbitGrhjEgsRHbi02ss92D2iEIaZGqF\ngYszrRNdu8G+vrQY6/0zz9Od91Y94mDpqYdngjlnR00NRfAJoIdzO806/YEQ3sCr\n6Mdq0UjYxAkKWD/+pJW4u9Wcmd22ldQLZyjrqNovhNTKrbOmqk5/MVvHp2k4qiig\n59ak2px/xYW+Pkk08uWGSi5aZXQbTjCjpSROq+roePhzpWOGWV573JaieJPUBgU=\n=6eMy\n-----END PGP SIGNATURE-----\n", "payload": "tree 92811a76bd022b8ddb0eeb012954948cc0c46ffb\nparent e38cbc78aa18354a8b4e1477cd090bd83c298ced\nparent 7c4eca06871f83257f9f503c3a91a8946026133a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642798995 +0100\ncommitter GitHub <noreply@github.com> 1642798995 +0100\n\nRollup merge of #92843 - camelid:str-concat-sugg, r=davidtwco\n\nImprove string concatenation suggestion\n\nBefore:\n\n    error[E0369]: cannot add `&str` to `&str`\n     --> file.rs:2:22\n      |\n    2 |     let _x = \"hello\" + \" world\";\n      |              ------- ^ -------- &str\n      |              |       |\n      |              |       `+` cannot be used to concatenate two `&str` strings\n      |              &str\n      |\n    help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n      |\n    2 |     let _x = \"hello\".to_owned() + \" world\";\n      |              ~~~~~~~~~~~~~~~~~~\n\nAfter:\n\n    error[E0369]: cannot add `&str` to `&str`\n     --> file.rs:2:22\n      |\n    2 |     let _x = \"hello\" + \" world\";\n      |              ------- ^ -------- &str\n      |              |       |\n      |              |       `+` cannot be used to concatenate two `&str` strings\n      |              &str\n      |\n      = note: string concatenation requires an owned `String` on the left\n    help: create an owned `String` from a string reference\n      |\n    2 |     let _x = \"hello\".to_owned() + \" world\";\n      |                     +++++++++++\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/430673f26590f5f40bb6a6587d43136d0b5604dc", "html_url": "https://github.com/rust-lang/rust/commit/430673f26590f5f40bb6a6587d43136d0b5604dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/430673f26590f5f40bb6a6587d43136d0b5604dc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e38cbc78aa18354a8b4e1477cd090bd83c298ced", "url": "https://api.github.com/repos/rust-lang/rust/commits/e38cbc78aa18354a8b4e1477cd090bd83c298ced", "html_url": "https://github.com/rust-lang/rust/commit/e38cbc78aa18354a8b4e1477cd090bd83c298ced"}, {"sha": "7c4eca06871f83257f9f503c3a91a8946026133a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c4eca06871f83257f9f503c3a91a8946026133a", "html_url": "https://github.com/rust-lang/rust/commit/7c4eca06871f83257f9f503c3a91a8946026133a"}], "stats": {"total": 166, "additions": 81, "deletions": 85}, "files": [{"sha": "74516acbfcff34187cf5dba5acf3ae0175d181e0", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 38, "deletions": 55, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/430673f26590f5f40bb6a6587d43136d0b5604dc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430673f26590f5f40bb6a6587d43136d0b5604dc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=430673f26590f5f40bb6a6587d43136d0b5604dc", "patch": "@@ -549,16 +549,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         is_assign: IsAssign,\n         op: hir::BinOp,\n     ) -> bool {\n-        let source_map = self.tcx.sess.source_map();\n-        let remove_borrow_msg = \"String concatenation appends the string on the right to the \\\n-                                 string on the left and may require reallocation. This \\\n-                                 requires ownership of the string on the left\";\n-\n-        let msg = \"`to_owned()` can be used to create an owned `String` \\\n-                   from a string reference. String concatenation \\\n-                   appends the string on the right to the string \\\n-                   on the left and may require reallocation. This \\\n-                   requires ownership of the string on the left\";\n+        let str_concat_note = \"string concatenation requires an owned `String` on the left\";\n+        let rm_borrow_msg = \"remove the borrow to obtain an owned `String`\";\n+        let to_owned_msg = \"create an owned `String` from a string reference\";\n \n         let string_type = self.tcx.get_diagnostic_item(sym::String);\n         let is_std_string = |ty: Ty<'tcx>| match ty.ty_adt_def() {\n@@ -574,31 +567,23 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ) =>\n             {\n                 if let IsAssign::No = is_assign { // Do not supply this message if `&str += &str`\n-                    err.span_label(\n-                        op.span,\n-                        \"`+` cannot be used to concatenate two `&str` strings\",\n-                    );\n-                    match source_map.span_to_snippet(lhs_expr.span) {\n-                        Ok(lstring) => {\n-                            err.span_suggestion(\n-                                lhs_expr.span,\n-                                if lstring.starts_with('&') {\n-                                    remove_borrow_msg\n-                                } else {\n-                                    msg\n-                                },\n-                                if let Some(stripped) = lstring.strip_prefix('&') {\n-                                    // let a = String::new();\n-                                    // let _ = &a + \"bar\";\n-                                    stripped.to_string()\n-                                } else {\n-                                    format!(\"{}.to_owned()\", lstring)\n-                                },\n-                                Applicability::MachineApplicable,\n-                            )\n-                        }\n-                        _ => err.help(msg),\n-                    };\n+                    err.span_label(op.span, \"`+` cannot be used to concatenate two `&str` strings\");\n+                    err.note(str_concat_note);\n+                    if let hir::ExprKind::AddrOf(_, _, lhs_inner_expr) = lhs_expr.kind {\n+                        err.span_suggestion_verbose(\n+                            lhs_expr.span.until(lhs_inner_expr.span),\n+                            rm_borrow_msg,\n+                            \"\".to_owned(),\n+                            Applicability::MachineApplicable\n+                        );\n+                    } else {\n+                        err.span_suggestion_verbose(\n+                            lhs_expr.span.shrink_to_hi(),\n+                            to_owned_msg,\n+                            \".to_owned()\".to_owned(),\n+                            Applicability::MachineApplicable\n+                        );\n+                    }\n                 }\n                 true\n             }\n@@ -609,32 +594,30 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     op.span,\n                     \"`+` cannot be used to concatenate a `&str` with a `String`\",\n                 );\n-                match (\n-                    source_map.span_to_snippet(lhs_expr.span),\n-                    source_map.span_to_snippet(rhs_expr.span),\n-                    is_assign,\n-                ) {\n-                    (Ok(l), Ok(r), IsAssign::No) => {\n-                        let to_string = if let Some(stripped) = l.strip_prefix('&') {\n-                            // let a = String::new(); let b = String::new();\n-                            // let _ = &a + b;\n-                            stripped.to_string()\n+                match is_assign {\n+                    IsAssign::No => {\n+                        let sugg_msg;\n+                        let lhs_sugg = if let hir::ExprKind::AddrOf(_, _, lhs_inner_expr) = lhs_expr.kind {\n+                            sugg_msg = \"remove the borrow on the left and add one on the right\";\n+                            (lhs_expr.span.until(lhs_inner_expr.span), \"\".to_owned())\n                         } else {\n-                            format!(\"{}.to_owned()\", l)\n+                            sugg_msg = \"create an owned `String` on the left and add a borrow on the right\";\n+                            (lhs_expr.span.shrink_to_hi(), \".to_owned()\".to_owned())\n                         };\n-                        err.multipart_suggestion(\n-                            msg,\n-                            vec![\n-                                (lhs_expr.span, to_string),\n-                                (rhs_expr.span, format!(\"&{}\", r)),\n-                            ],\n+                        let suggestions = vec![\n+                            lhs_sugg,\n+                            (rhs_expr.span.shrink_to_lo(), \"&\".to_owned()),\n+                        ];\n+                        err.multipart_suggestion_verbose(\n+                            sugg_msg,\n+                            suggestions,\n                             Applicability::MachineApplicable,\n                         );\n                     }\n-                    _ => {\n-                        err.help(msg);\n+                    IsAssign::Yes => {\n+                        err.note(str_concat_note);\n                     }\n-                };\n+                }\n                 true\n             }\n             _ => false,"}, {"sha": "4f0fd948e760493d616cac549f38d0698459c1bb", "filename": "src/test/ui/issues/issue-47377.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/430673f26590f5f40bb6a6587d43136d0b5604dc/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/430673f26590f5f40bb6a6587d43136d0b5604dc/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47377.stderr?ref=430673f26590f5f40bb6a6587d43136d0b5604dc", "patch": "@@ -7,10 +7,11 @@ LL |      let _a = b + \", World!\";\n    |               | `+` cannot be used to concatenate two `&str` strings\n    |               &str\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |      let _a = b.to_owned() + \", World!\";\n-   |               ~~~~~~~~~~~~\n+   |                +++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "b04ac5536c41fa2e4b8b7b5accd7892935350f5c", "filename": "src/test/ui/issues/issue-47380.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/430673f26590f5f40bb6a6587d43136d0b5604dc/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/430673f26590f5f40bb6a6587d43136d0b5604dc/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47380.stderr?ref=430673f26590f5f40bb6a6587d43136d0b5604dc", "patch": "@@ -7,10 +7,11 @@ LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b + \", World!\";\n    |                                      | `+` cannot be used to concatenate two `&str` strings\n    |                                      &str\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     println!(\"\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\ud83e\udd80\"); let _a = b.to_owned() + \", World!\";\n-   |                                      ~~~~~~~~~~~~\n+   |                                       +++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "e2e7ce1ed18e7f3ba61e4f3fdd9372628c2fbd8b", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/430673f26590f5f40bb6a6587d43136d0b5604dc/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/430673f26590f5f40bb6a6587d43136d0b5604dc/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=430673f26590f5f40bb6a6587d43136d0b5604dc", "patch": "@@ -7,10 +7,11 @@ LL |     let x = \"Hello \" + \"World!\";\n    |             |        `+` cannot be used to concatenate two `&str` strings\n    |             &str\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     let x = \"Hello \".to_owned() + \"World!\";\n-   |             ~~~~~~~~~~~~~~~~~~~\n+   |                     +++++++++++\n \n error[E0369]: cannot add `World` to `World`\n   --> $DIR/issue-39018.rs:8:26\n@@ -46,10 +47,10 @@ LL |     let x = \"Hello \" + \"World!\".to_owned();\n    |             |        `+` cannot be used to concatenate a `&str` with a `String`\n    |             &str\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+help: create an owned `String` on the left and add a borrow on the right\n    |\n LL |     let x = \"Hello \".to_owned() + &\"World!\".to_owned();\n-   |             ~~~~~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~\n+   |                     +++++++++++   +\n \n error[E0369]: cannot add `&String` to `&String`\n   --> $DIR/issue-39018.rs:26:16\n@@ -60,10 +61,12 @@ LL |     let _ = &a + &b;\n    |             |  `+` cannot be used to concatenate two `&str` strings\n    |             &String\n    |\n-help: String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: remove the borrow to obtain an owned `String`\n    |\n-LL |     let _ = a + &b;\n-   |             ~\n+LL -     let _ = &a + &b;\n+LL +     let _ = a + &b;\n+   | \n \n error[E0369]: cannot add `String` to `&String`\n   --> $DIR/issue-39018.rs:27:16\n@@ -74,10 +77,11 @@ LL |     let _ = &a + b;\n    |             |  `+` cannot be used to concatenate a `&str` with a `String`\n    |             &String\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+help: remove the borrow on the left and add one on the right\n    |\n-LL |     let _ = a + &b;\n-   |             ~   ~~\n+LL -     let _ = &a + b;\n+LL +     let _ = a + &b;\n+   | \n \n error[E0308]: mismatched types\n   --> $DIR/issue-39018.rs:29:17\n@@ -97,10 +101,10 @@ LL |     let _ = e + b;\n    |             | `+` cannot be used to concatenate a `&str` with a `String`\n    |             &String\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+help: create an owned `String` on the left and add a borrow on the right\n    |\n LL |     let _ = e.to_owned() + &b;\n-   |             ~~~~~~~~~~~~   ~~\n+   |              +++++++++++   +\n \n error[E0369]: cannot add `&String` to `&String`\n   --> $DIR/issue-39018.rs:31:15\n@@ -111,10 +115,11 @@ LL |     let _ = e + &b;\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &String\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     let _ = e.to_owned() + &b;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error[E0369]: cannot add `&str` to `&String`\n   --> $DIR/issue-39018.rs:32:15\n@@ -125,10 +130,11 @@ LL |     let _ = e + d;\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &String\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     let _ = e.to_owned() + d;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error[E0369]: cannot add `&&str` to `&String`\n   --> $DIR/issue-39018.rs:33:15\n@@ -139,10 +145,11 @@ LL |     let _ = e + &d;\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &String\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     let _ = e.to_owned() + &d;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error[E0369]: cannot add `&&str` to `&&str`\n   --> $DIR/issue-39018.rs:34:16\n@@ -169,10 +176,11 @@ LL |     let _ = c + &d;\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &str\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     let _ = c.to_owned() + &d;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error[E0369]: cannot add `&str` to `&str`\n   --> $DIR/issue-39018.rs:37:15\n@@ -183,10 +191,11 @@ LL |     let _ = c + d;\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &str\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     let _ = c.to_owned() + d;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error: aborting due to 14 previous errors\n "}, {"sha": "bd354679f7888277051aee4223a94fe73d468f77", "filename": "src/test/ui/str/str-concat-on-double-ref.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/430673f26590f5f40bb6a6587d43136d0b5604dc/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/430673f26590f5f40bb6a6587d43136d0b5604dc/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.stderr?ref=430673f26590f5f40bb6a6587d43136d0b5604dc", "patch": "@@ -7,10 +7,11 @@ LL |     let c = a + b;\n    |             | `+` cannot be used to concatenate two `&str` strings\n    |             &String\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     let c = a.to_owned() + b;\n-   |             ~~~~~~~~~~~~\n+   |              +++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "bf277362dbab2977369c18f05f6b47754dc456c2", "filename": "src/test/ui/terminal-width/non-1-width-unicode-multiline-label.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/430673f26590f5f40bb6a6587d43136d0b5604dc/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/430673f26590f5f40bb6a6587d43136d0b5604dc/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.stderr?ref=430673f26590f5f40bb6a6587d43136d0b5604dc", "patch": "@@ -7,10 +7,11 @@ LL | ...\u0f7d\u0f7e\u0f7f\u0f80\u0f81\u0f82\u0f83\u0f84\u0f85\u0f86\u0f87\u0f88\u0f89\u0f8a\u0f8b\u0f8c\u0f8d\u0f8e\u0f8f\u0f90\u0f91\u0f92\u0f93\u0f94\n    |                                                  |              `+` cannot be used to concatenate two `&str` strings\n    |                                                  &str\n    |\n-help: `to_owned()` can be used to create an owned `String` from a string reference. String concatenation appends the string on the right to the string on the left and may require reallocation. This requires ownership of the string on the left\n+   = note: string concatenation requires an owned `String` on the left\n+help: create an owned `String` from a string reference\n    |\n LL |     let _ = \"\u0f00\u0f01\u0f02\u0f03\u0f04\u0f05\u0f06\u0f07\u0f08\u0f09\u0f0a\u0f0b\u0f0c\u0f0d\u0f0e\u0f0f\u0f10\u0f11\u0f12\u0f13\u0f14\u0f15\u0f16\u0f17\u0f18\u0f19\u0f1a\u0f1b\u0f1c\u0f1d\u0f1e\u0f1f\u0f20\u0f21\u0f22\u0f23\u0f24\u0f25\u0f26\u0f27\u0f28\u0f29\u0f2a\u0f2b\u0f2c\u0f2d\u0f2e\u0f2f\u0f30\u0f31\u0f32\u0f33\u0f34\u0f35\u0f36\u0f37\u0f38\u0f39\u0f3a\u0f3b\u0f3c\u0f3d\u0f3e\u0f3f\u0f40\u0f41\u0f42\u0f43\u0f44\u0f45\u0f46\u0f47\u0f48\u0f49\u0f4a\u0f4b\u0f4c\u0f4d\u0f4e\u0f4f\u0f50\u0f51\u0f52\u0f53\u0f54\u0f55\u0f56\u0f57\u0f58\u0f59\u0f5a\u0f5b\u0f5c\u0f5d\u0f5e\u0f5f\u0f60\u0f61\u0f62\u0f63\u0f64\u0f65\u0f66\u0f67\u0f68\u0f69\u0f6a\u0f6b\u0f6c\u0f6d\u0f6e\u0f6f\u0f70\u0f71\u0f72\u0f73\u0f74\u0f75\u0f76\u0f77\u0f78\u0f79\u0f7a\u0f7b\u0f7c\u0f7d\u0f7e\u0f7f\u0f80\u0f81\u0f82\u0f83\u0f84\u0f85\u0f86\u0f87\u0f88\u0f89\u0f8a\u0f8b\u0f8c\u0f8d\u0f8e\u0f8f\u0f90\u0f91\u0f92\u0f93\u0f94\u0f95\u0f96\u0f97\u0f98\u0f99\u0f9a\u0f9b\u0f9c\u0f9d\u0f9e\u0f9f\u0fa0\u0fa1\u0fa2\u0fa3\u0fa4\u0fa5\u0fa6\u0fa7\u0fa8\u0fa9\u0faa\u0fab\u0fac\u0fad\u0fae\u0faf\u0fb0\u0fb1\u0fb2\u0fb3\u0fb4\u0fb5\u0fb6\u0fb7\u0fb8\u0fb9\u0fba\u0fbb\u0fbc\u0fbd\u0fbe\u0fbf\u0fc0\u0fc1\u0fc2\u0fc3\u0fc4\u0fc5\u0fc6\u0fc7\u0fc8\u0fc9\u0fca\u0fcb\u0fcc\u0fcd\u0fce\u0fcf\u0fd0\u0fd1\u0fd2\u0fd3\u0fd4\u0fd5\u0fd6\u0fd7\u0fd8\u0fd9\u0fda\"; let _a = unicode_is_fun.to_owned() + \" really fun!\";\n-   |                                                                                                                                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |                                                                                                                                                                                         +++++++++++\n \n error: aborting due to previous error\n "}]}