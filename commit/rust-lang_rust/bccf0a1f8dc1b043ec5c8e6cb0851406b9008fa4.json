{"sha": "bccf0a1f8dc1b043ec5c8e6cb0851406b9008fa4", "node_id": "C_kwDOAAsO6NoAKGJjY2YwYTFmOGRjMWIwNDNlYzVjOGU2Y2IwODUxNDA2YjkwMDhmYTQ", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-30T18:44:15Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-30T18:44:15Z"}, "message": "Merge codegen of a couple more simd intrinsics", "tree": {"sha": "526b63441573c100a41c9093d7a1b70558cb63f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/526b63441573c100a41c9093d7a1b70558cb63f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bccf0a1f8dc1b043ec5c8e6cb0851406b9008fa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bccf0a1f8dc1b043ec5c8e6cb0851406b9008fa4", "html_url": "https://github.com/rust-lang/rust/commit/bccf0a1f8dc1b043ec5c8e6cb0851406b9008fa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bccf0a1f8dc1b043ec5c8e6cb0851406b9008fa4/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a3cfb24d8db7818bf843b5aed316cd1e4b06fda", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a3cfb24d8db7818bf843b5aed316cd1e4b06fda", "html_url": "https://github.com/rust-lang/rust/commit/5a3cfb24d8db7818bf843b5aed316cd1e4b06fda"}], "stats": {"total": 58, "additions": 14, "deletions": 44}, "files": [{"sha": "4153bc08e8ad4f3c9f40845f3098b0ebd8e9f622", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 14, "deletions": 44, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/bccf0a1f8dc1b043ec5c8e6cb0851406b9008fa4/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bccf0a1f8dc1b043ec5c8e6cb0851406b9008fa4/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=bccf0a1f8dc1b043ec5c8e6cb0851406b9008fa4", "patch": "@@ -258,28 +258,6 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             });\n         };\n \n-        simd_fabs, (c a) {\n-            if !a.layout().ty.is_simd() {\n-                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n-                return;\n-            }\n-\n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _ret_lane_ty, lane| {\n-                fx.bcx.ins().fabs(lane)\n-            });\n-        };\n-\n-        simd_fsqrt, (c a) {\n-            if !a.layout().ty.is_simd() {\n-                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n-                return;\n-            }\n-\n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _ret_lane_ty, lane| {\n-                fx.bcx.ins().sqrt(lane)\n-            });\n-        };\n-\n         simd_add | simd_sub | simd_mul | simd_div | simd_rem\n         | simd_shl | simd_shr | simd_and | simd_or | simd_xor, (c x, c y) {\n             if !x.layout().ty.is_simd() {\n@@ -407,34 +385,26 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 }\n             });\n         };\n-        simd_ceil, (c a) {\n-            if !a.layout().ty.is_simd() {\n-                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n-                return;\n-            }\n \n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _ret_lane_ty, lane| {\n-                fx.bcx.ins().ceil(lane)\n-            });\n-        };\n-        simd_floor, (c a) {\n-            if !a.layout().ty.is_simd() {\n-                report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n-                return;\n-            }\n-\n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _ret_lane_ty, lane| {\n-                fx.bcx.ins().floor(lane)\n-            });\n-        };\n-        simd_trunc, (c a) {\n+        simd_fabs | simd_fsqrt | simd_ceil | simd_floor | simd_trunc, (c a) {\n             if !a.layout().ty.is_simd() {\n                 report_simd_type_validation_error(fx, intrinsic, span, a.layout().ty);\n                 return;\n             }\n \n-            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _ret_lane_ty, lane| {\n-                fx.bcx.ins().trunc(lane)\n+            simd_for_each_lane(fx, a, ret, &|fx, lane_ty, _ret_lane_ty, lane| {\n+                match lane_ty.kind() {\n+                    ty::Float(_) => {},\n+                    _ => unreachable!(\"{:?}\", lane_ty),\n+                }\n+                match intrinsic {\n+                    sym::simd_fabs => fx.bcx.ins().fabs(lane),\n+                    sym::simd_fsqrt => fx.bcx.ins().sqrt(lane),\n+                    sym::simd_ceil => fx.bcx.ins().ceil(lane),\n+                    sym::simd_floor => fx.bcx.ins().floor(lane),\n+                    sym::simd_trunc => fx.bcx.ins().trunc(lane),\n+                    _ => unreachable!(),\n+                }\n             });\n         };\n "}]}