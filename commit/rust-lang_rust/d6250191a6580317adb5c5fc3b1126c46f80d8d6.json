{"sha": "d6250191a6580317adb5c5fc3b1126c46f80d8d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MjUwMTkxYTY1ODAzMTdhZGI1YzVmYzNiMTEyNmM0NmY4MGQ4ZDY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T08:39:09Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T08:39:09Z"}, "message": "s/alloc_type/alloc_kind/", "tree": {"sha": "c30ebe7f297837a78ff4083e0b36b668c82adc0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c30ebe7f297837a78ff4083e0b36b668c82adc0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6250191a6580317adb5c5fc3b1126c46f80d8d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6250191a6580317adb5c5fc3b1126c46f80d8d6", "html_url": "https://github.com/rust-lang/rust/commit/d6250191a6580317adb5c5fc3b1126c46f80d8d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6250191a6580317adb5c5fc3b1126c46f80d8d6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e00d648c059b56f0b2dc7a362a098aa627292fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e00d648c059b56f0b2dc7a362a098aa627292fc", "html_url": "https://github.com/rust-lang/rust/commit/2e00d648c059b56f0b2dc7a362a098aa627292fc"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "9708f7c6717f42e7c8c69dd00532f7bfee0c5ad1", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d6250191a6580317adb5c5fc3b1126c46f80d8d6/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6250191a6580317adb5c5fc3b1126c46f80d8d6/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=d6250191a6580317adb5c5fc3b1126c46f80d8d6", "patch": "@@ -103,9 +103,9 @@ pub fn specialized_encode_alloc_id<\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     alloc_id: AllocId,\n ) -> Result<(), E::Error> {\n-    let alloc_type: AllocKind<'tcx> =\n+    let alloc_kind: AllocKind<'tcx> =\n         tcx.alloc_map.lock().get(alloc_id).expect(\"no value for AllocId\");\n-    match alloc_type {\n+    match alloc_kind {\n         AllocKind::Memory(alloc) => {\n             trace!(\"encoding {:?} with {:#?}\", alloc_id, alloc);\n             AllocDiscriminant::Alloc.encode(encoder)?;\n@@ -339,14 +339,14 @@ impl<'tcx> AllocMap<'tcx> {\n         next\n     }\n \n-    fn intern(&mut self, alloc_type: AllocKind<'tcx>) -> AllocId {\n-        if let Some(&alloc_id) = self.type_interner.get(&alloc_type) {\n+    fn intern(&mut self, alloc_kind: AllocKind<'tcx>) -> AllocId {\n+        if let Some(&alloc_id) = self.type_interner.get(&alloc_kind) {\n             return alloc_id;\n         }\n         let id = self.reserve();\n-        debug!(\"creating alloc_type {:?} with id {}\", alloc_type, id);\n-        self.id_to_type.insert(id, alloc_type.clone());\n-        self.type_interner.insert(alloc_type, id);\n+        debug!(\"creating alloc_kind {:?} with id {}\", alloc_kind, id);\n+        self.id_to_type.insert(id, alloc_kind.clone());\n+        self.type_interner.insert(alloc_kind, id);\n         id\n     }\n "}, {"sha": "194b6b4e2706d109c5e31d021960324ca3e1654a", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6250191a6580317adb5c5fc3b1126c46f80d8d6/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6250191a6580317adb5c5fc3b1126c46f80d8d6/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=d6250191a6580317adb5c5fc3b1126c46f80d8d6", "patch": "@@ -316,8 +316,8 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                 }\n             },\n             Scalar::Ptr(ptr) => {\n-                let alloc_type = self.tcx.alloc_map.lock().get(ptr.alloc_id);\n-                let base_addr = match alloc_type {\n+                let alloc_kind = self.tcx.alloc_map.lock().get(ptr.alloc_id);\n+                let base_addr = match alloc_kind {\n                     Some(AllocKind::Memory(alloc)) => {\n                         let init = const_alloc_to_llvm(self, alloc);\n                         if alloc.mutability == Mutability::Mutable {"}, {"sha": "289402d3b46a150e519ae7bac8eee07b20967668", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6250191a6580317adb5c5fc3b1126c46f80d8d6/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6250191a6580317adb5c5fc3b1126c46f80d8d6/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=d6250191a6580317adb5c5fc3b1126c46f80d8d6", "patch": "@@ -1161,8 +1161,8 @@ fn collect_miri<'a, 'tcx>(\n     alloc_id: AllocId,\n     output: &mut Vec<MonoItem<'tcx>>,\n ) {\n-    let alloc_type = tcx.alloc_map.lock().get(alloc_id);\n-    match alloc_type {\n+    let alloc_kind = tcx.alloc_map.lock().get(alloc_id);\n+    match alloc_kind {\n         Some(AllocKind::Static(did)) => {\n             let instance = Instance::mono(tcx, did);\n             if should_monomorphize_locally(tcx, &instance) {"}]}