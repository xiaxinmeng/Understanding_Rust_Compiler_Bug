{"sha": "4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZDQ0NmY1YjNmODAzNWQ1ZGIxZmRlMWM2YzUwMDczZTNmNGZiMmI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-16T15:56:38Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-21T15:49:07Z"}, "message": "Get rid of resolve_ty_as_possible\n\nInstead use shallow resolving where necessary.", "tree": {"sha": "fee7c98d53e93b9a1d743450d290fa1cb2ae0df4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fee7c98d53e93b9a1d743450d290fa1cb2ae0df4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b", "html_url": "https://github.com/rust-lang/rust/commit/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a78f0076abbbf61f7b68ce5c323639037c8a72de", "url": "https://api.github.com/repos/rust-lang/rust/commits/a78f0076abbbf61f7b68ce5c323639037c8a72de", "html_url": "https://github.com/rust-lang/rust/commit/a78f0076abbbf61f7b68ce5c323639037c8a72de"}], "stats": {"total": 144, "additions": 56, "deletions": 88}, "files": [{"sha": "ab742e2032ed0b3e6df9e4fb545a8adae63d9988", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b", "patch": "@@ -273,7 +273,7 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn err_ty(&self) -> Ty {\n-        TyKind::Error.intern(&Interner)\n+        self.result.standard_types.unknown.clone()\n     }\n \n     fn resolve_all(mut self) -> InferenceResult {\n@@ -284,12 +284,14 @@ impl<'a> InferenceContext<'a> {\n         self.table.propagate_diverging_flag();\n         let mut result = std::mem::take(&mut self.result);\n         for ty in result.type_of_expr.values_mut() {\n-            let resolved = self.table.resolve_ty_completely(ty.clone());\n-            *ty = resolved;\n+            *ty = self.table.resolve_ty_completely(ty.clone());\n         }\n         for ty in result.type_of_pat.values_mut() {\n-            let resolved = self.table.resolve_ty_completely(ty.clone());\n-            *ty = resolved;\n+            *ty = self.table.resolve_ty_completely(ty.clone());\n+        }\n+        for mismatch in result.type_mismatches.values_mut() {\n+            mismatch.expected = self.table.resolve_ty_completely(mismatch.expected.clone());\n+            mismatch.actual = self.table.resolve_ty_completely(mismatch.actual.clone());\n         }\n         result\n     }\n@@ -343,6 +345,14 @@ impl<'a> InferenceContext<'a> {\n     fn insert_type_vars_shallow(&mut self, ty: Ty) -> Ty {\n         match ty.kind(&Interner) {\n             TyKind::Error => self.table.new_type_var(),\n+            TyKind::InferenceVar(..) => {\n+                let ty_resolved = self.resolve_ty_shallow(&ty);\n+                if ty_resolved.is_unknown() {\n+                    self.table.new_type_var()\n+                } else {\n+                    ty\n+                }\n+            }\n             _ => ty,\n         }\n     }\n@@ -371,18 +381,8 @@ impl<'a> InferenceContext<'a> {\n         self.table.unify_inner(ty1, ty2)\n     }\n \n-    // FIXME get rid of this, instead resolve shallowly where necessary\n-    /// Resolves the type as far as currently possible, replacing type variables\n-    /// by their known types. All types returned by the infer_* functions should\n-    /// be resolved as far as possible, i.e. contain no type variables with\n-    /// known type.\n-    fn resolve_ty_as_possible(&mut self, ty: Ty) -> Ty {\n-        self.resolve_obligations_as_possible();\n-\n-        self.table.resolve_ty_as_possible(ty)\n-    }\n-\n     fn resolve_ty_shallow(&mut self, ty: &Ty) -> Ty {\n+        self.resolve_obligations_as_possible();\n         self.table.resolve_ty_shallow(ty)\n     }\n \n@@ -416,7 +416,7 @@ impl<'a> InferenceContext<'a> {\n                 };\n                 self.push_obligation(trait_ref.cast(&Interner));\n                 self.push_obligation(alias_eq.cast(&Interner));\n-                self.resolve_ty_as_possible(ty)\n+                ty\n             }\n             None => self.err_ty(),\n         }"}, {"sha": "00b2b585f4467ba7629983ee40b0fa098c17a5d5", "filename": "crates/hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b", "patch": "@@ -19,12 +19,12 @@ impl<'a> InferenceContext<'a> {\n     /// Unify two types, but may coerce the first one to the second one\n     /// using \"implicit coercion rules\" if needed.\n     pub(super) fn coerce(&mut self, from_ty: &Ty, to_ty: &Ty) -> bool {\n+        let from_ty = self.resolve_ty_shallow(from_ty);\n+        let to_ty = self.resolve_ty_shallow(to_ty);\n         // TODO handle expectations properly\n         if to_ty.is_unknown() {\n             return true;\n         }\n-        let from_ty = self.resolve_ty_shallow(from_ty);\n-        let to_ty = self.resolve_ty_shallow(to_ty);\n         match self.coerce_inner(from_ty, &to_ty) {\n             Ok(_result) => {\n                 // TODO deal with goals"}, {"sha": "f5782ab246185d31ec6edde5ac62a19cf6c9e625", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b", "patch": "@@ -35,7 +35,7 @@ use super::{\n impl<'a> InferenceContext<'a> {\n     pub(super) fn infer_expr(&mut self, tgt_expr: ExprId, expected: &Expectation) -> Ty {\n         let ty = self.infer_expr_inner(tgt_expr, expected);\n-        if ty.is_never() {\n+        if self.resolve_ty_shallow(&ty).is_never() {\n             // Any expression that produces a value of type `!` must have diverged\n             self.diverges = Diverges::Always;\n         }\n@@ -46,7 +46,7 @@ impl<'a> InferenceContext<'a> {\n                 TypeMismatch { expected: expected.ty.clone(), actual: ty.clone() },\n             );\n         }\n-        self.resolve_ty_as_possible(ty)\n+        ty\n     }\n \n     /// Infer type of expression with possibly implicit coerce to the expected type.\n@@ -67,7 +67,7 @@ impl<'a> InferenceContext<'a> {\n             expected.ty.clone()\n         };\n \n-        self.resolve_ty_as_possible(ty)\n+        ty\n     }\n \n     fn callable_sig_from_fn_trait(&mut self, ty: &Ty, num_args: usize) -> Option<(Vec<Ty>, Ty)> {\n@@ -284,8 +284,7 @@ impl<'a> InferenceContext<'a> {\n \n                 // Now go through the argument patterns\n                 for (arg_pat, arg_ty) in args.iter().zip(sig_tys) {\n-                    let resolved = self.resolve_ty_as_possible(arg_ty);\n-                    self.infer_pat(*arg_pat, &resolved, BindingMode::default());\n+                    self.infer_pat(*arg_pat, &arg_ty, BindingMode::default());\n                 }\n \n                 let prev_diverges = mem::replace(&mut self.diverges, Diverges::Maybe);\n@@ -525,14 +524,14 @@ impl<'a> InferenceContext<'a> {\n             Expr::Ref { expr, rawness, mutability } => {\n                 let mutability = lower_to_chalk_mutability(*mutability);\n                 let expectation = if let Some((exp_inner, exp_rawness, exp_mutability)) =\n-                    &expected.ty.as_reference_or_ptr()\n+                    &self.resolve_ty_shallow(&expected.ty).as_reference_or_ptr()\n                 {\n                     if *exp_mutability == Mutability::Mut && mutability == Mutability::Not {\n-                        // FIXME: throw type error - expected mut reference but found shared ref,\n+                        // FIXME: record type error - expected mut reference but found shared ref,\n                         // which cannot be coerced\n                     }\n                     if *exp_rawness == Rawness::Ref && *rawness == Rawness::RawPtr {\n-                        // FIXME: throw type error - expected reference but found ptr,\n+                        // FIXME: record type error - expected reference but found ptr,\n                         // which cannot be coerced\n                     }\n                     Expectation::rvalue_hint(Ty::clone(exp_inner))\n@@ -559,6 +558,7 @@ impl<'a> InferenceContext<'a> {\n             }\n             Expr::UnaryOp { expr, op } => {\n                 let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n+                let inner_ty = self.resolve_ty_shallow(&inner_ty);\n                 match op {\n                     UnaryOp::Deref => match self.resolver.krate() {\n                         Some(krate) => {\n@@ -615,8 +615,10 @@ impl<'a> InferenceContext<'a> {\n                         _ => Expectation::none(),\n                     };\n                     let lhs_ty = self.infer_expr(*lhs, &lhs_expectation);\n+                    let lhs_ty = self.resolve_ty_shallow(&lhs_ty);\n                     let rhs_expectation = op::binary_op_rhs_expectation(*op, lhs_ty.clone());\n                     let rhs_ty = self.infer_expr(*rhs, &Expectation::has_type(rhs_expectation));\n+                    let rhs_ty = self.resolve_ty_shallow(&rhs_ty);\n \n                     let ret = op::binary_op_return_ty(*op, lhs_ty.clone(), rhs_ty.clone());\n \n@@ -699,7 +701,7 @@ impl<'a> InferenceContext<'a> {\n                 }\n             }\n             Expr::Tuple { exprs } => {\n-                let mut tys = match expected.ty.kind(&Interner) {\n+                let mut tys = match self.resolve_ty_shallow(&expected.ty).kind(&Interner) {\n                     TyKind::Tuple(_, substs) => substs\n                         .iter(&Interner)\n                         .map(|a| a.assert_ty_ref(&Interner).clone())\n@@ -716,7 +718,7 @@ impl<'a> InferenceContext<'a> {\n                 TyKind::Tuple(tys.len(), Substitution::from_iter(&Interner, tys)).intern(&Interner)\n             }\n             Expr::Array(array) => {\n-                let elem_ty = match expected.ty.kind(&Interner) {\n+                let elem_ty = match self.resolve_ty_shallow(&expected.ty).kind(&Interner) {\n                     TyKind::Array(st, _) | TyKind::Slice(st) => st.clone(),\n                     _ => self.table.new_type_var(),\n                 };\n@@ -788,7 +790,6 @@ impl<'a> InferenceContext<'a> {\n         };\n         // use a new type variable if we got unknown here\n         let ty = self.insert_type_vars_shallow(ty);\n-        let ty = self.resolve_ty_as_possible(ty);\n         self.write_expr_ty(tgt_expr, ty.clone());\n         ty\n     }\n@@ -816,7 +817,6 @@ impl<'a> InferenceContext<'a> {\n                         }\n                     }\n \n-                    let ty = self.resolve_ty_as_possible(ty);\n                     self.infer_pat(*pat, &ty, BindingMode::default());\n                 }\n                 Statement::Expr { expr, .. } => {\n@@ -894,7 +894,8 @@ impl<'a> InferenceContext<'a> {\n         };\n         // Apply autoref so the below unification works correctly\n         // FIXME: return correct autorefs from lookup_method\n-        let actual_receiver_ty = match expected_receiver_ty.as_reference() {\n+        let actual_receiver_ty = match self.resolve_ty_shallow(&expected_receiver_ty).as_reference()\n+        {\n             Some((_, lifetime, mutability)) => {\n                 TyKind::Ref(mutability, lifetime, derefed_receiver_ty).intern(&Interner)\n             }\n@@ -974,6 +975,7 @@ impl<'a> InferenceContext<'a> {\n     }\n \n     fn register_obligations_for_call(&mut self, callable_ty: &Ty) {\n+        let callable_ty = self.resolve_ty_shallow(&callable_ty);\n         if let TyKind::FnDef(fn_def, parameters) = callable_ty.kind(&Interner) {\n             let def: CallableDefId = from_chalk(self.db, *fn_def);\n             let generic_predicates = self.db.generic_predicates(def.into());"}, {"sha": "9c8e3b6aea99dd02b607524d5a08a77f9e5538dd", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b", "patch": "@@ -94,14 +94,15 @@ impl<'a> InferenceContext<'a> {\n     pub(super) fn infer_pat(\n         &mut self,\n         pat: PatId,\n-        mut expected: &Ty,\n+        expected: &Ty,\n         mut default_bm: BindingMode,\n     ) -> Ty {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n+        let mut expected = self.resolve_ty_shallow(expected);\n \n         if is_non_ref_pat(&body, pat) {\n             while let Some((inner, _lifetime, mutability)) = expected.as_reference() {\n-                expected = inner;\n+                expected = self.resolve_ty_shallow(inner);\n                 default_bm = match default_bm {\n                     BindingMode::Move => BindingMode::Ref(mutability),\n                     BindingMode::Ref(Mutability::Not) => BindingMode::Ref(Mutability::Not),\n@@ -147,9 +148,9 @@ impl<'a> InferenceContext<'a> {\n             }\n             Pat::Or(ref pats) => {\n                 if let Some((first_pat, rest)) = pats.split_first() {\n-                    let ty = self.infer_pat(*first_pat, expected, default_bm);\n+                    let ty = self.infer_pat(*first_pat, &expected, default_bm);\n                     for pat in rest {\n-                        self.infer_pat(*pat, expected, default_bm);\n+                        self.infer_pat(*pat, &expected, default_bm);\n                     }\n                     ty\n                 } else {\n@@ -173,13 +174,13 @@ impl<'a> InferenceContext<'a> {\n             Pat::TupleStruct { path: p, args: subpats, ellipsis } => self.infer_tuple_struct_pat(\n                 p.as_deref(),\n                 subpats,\n-                expected,\n+                &expected,\n                 default_bm,\n                 pat,\n                 *ellipsis,\n             ),\n             Pat::Record { path: p, args: fields, ellipsis: _ } => {\n-                self.infer_record_pat(p.as_deref(), fields, expected, default_bm, pat)\n+                self.infer_record_pat(p.as_deref(), fields, &expected, default_bm, pat)\n             }\n             Pat::Path(path) => {\n                 // FIXME use correct resolver for the surrounding expression\n@@ -193,7 +194,7 @@ impl<'a> InferenceContext<'a> {\n                     BindingMode::convert(*mode)\n                 };\n                 let inner_ty = if let Some(subpat) = subpat {\n-                    self.infer_pat(*subpat, expected, default_bm)\n+                    self.infer_pat(*subpat, &expected, default_bm)\n                 } else {\n                     expected.clone()\n                 };\n@@ -206,7 +207,6 @@ impl<'a> InferenceContext<'a> {\n                     }\n                     BindingMode::Move => inner_ty.clone(),\n                 };\n-                let bound_ty = self.resolve_ty_as_possible(bound_ty);\n                 self.write_pat_ty(pat, bound_ty);\n                 return inner_ty;\n             }\n@@ -265,13 +265,12 @@ impl<'a> InferenceContext<'a> {\n         };\n         // use a new type variable if we got error type here\n         let ty = self.insert_type_vars_shallow(ty);\n-        if !self.unify(&ty, expected) {\n+        if !self.unify(&ty, &expected) {\n             self.result.type_mismatches.insert(\n                 pat.into(),\n                 TypeMismatch { expected: expected.clone(), actual: ty.clone() },\n             );\n         }\n-        let ty = self.resolve_ty_as_possible(ty);\n         self.write_pat_ty(pat, ty.clone());\n         ty\n     }"}, {"sha": "14c99eafd31bcf82644e179454ceac417430f7b7", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b", "patch": "@@ -65,7 +65,6 @@ impl<'a> InferenceContext<'a> {\n         let typable: ValueTyDefId = match value {\n             ValueNs::LocalBinding(pat) => {\n                 let ty = self.result.type_of_pat.get(pat)?.clone();\n-                let ty = self.resolve_ty_as_possible(ty);\n                 return Some(ty);\n             }\n             ValueNs::FunctionId(it) => it.into(),\n@@ -275,6 +274,7 @@ impl<'a> InferenceContext<'a> {\n         name: &Name,\n         id: ExprOrPatId,\n     ) -> Option<(ValueNs, Option<Substitution>)> {\n+        let ty = self.resolve_ty_shallow(ty);\n         let (enum_id, subst) = match ty.as_adt() {\n             Some((AdtId::EnumId(e), subst)) => (e, subst),\n             _ => return None,"}, {"sha": "539e124204db8778e3fdd95d548a9822b211e335", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b", "patch": "@@ -24,6 +24,9 @@ impl<'a> InferenceContext<'a> {\n     where\n         T::Result: HasInterner<Interner = Interner>,\n     {\n+        // try to resolve obligations before canonicalizing, since this might\n+        // result in new knowledge about variables\n+        self.resolve_obligations_as_possible();\n         self.table.canonicalize(t)\n     }\n }\n@@ -216,7 +219,6 @@ impl<'a> InferenceTable<'a> {\n     /// call). `make_ty` handles this already, but e.g. for field types we need\n     /// to do it as well.\n     pub(super) fn normalize_associated_types_in(&mut self, ty: Ty) -> Ty {\n-        let ty = self.resolve_ty_as_possible(ty);\n         fold_tys(\n             ty,\n             |ty, _| match ty.kind(&Interner) {\n@@ -302,11 +304,6 @@ impl<'a> InferenceTable<'a> {\n         self.resolve_with_fallback(ty, |_, _, d, _| d)\n     }\n \n-    // FIXME get rid of this, instead resolve shallowly where necessary\n-    pub(crate) fn resolve_ty_as_possible(&mut self, ty: Ty) -> Ty {\n-        self.resolve_ty_as_possible_inner(&mut Vec::new(), ty)\n-    }\n-\n     /// Unify two types and register new trait goals that arise from that.\n     // TODO give these two functions better names\n     pub(crate) fn unify(&mut self, ty1: &Ty, ty2: &Ty) -> bool {\n@@ -344,36 +341,6 @@ impl<'a> InferenceTable<'a> {\n         self.var_unification_table.normalize_ty_shallow(&Interner, ty).unwrap_or_else(|| ty.clone())\n     }\n \n-    /// Resolves the type as far as currently possible, replacing type variables\n-    /// by their known types.\n-    fn resolve_ty_as_possible_inner(&mut self, tv_stack: &mut Vec<InferenceVar>, ty: Ty) -> Ty {\n-        fold_tys(\n-            ty,\n-            |ty, _| match ty.kind(&Interner) {\n-                &TyKind::InferenceVar(tv, kind) => {\n-                    if tv_stack.contains(&tv) {\n-                        // recursive type\n-                        return self.type_variable_table.fallback_value(tv, kind);\n-                    }\n-                    if let Some(known_ty) = self.var_unification_table.probe_var(tv) {\n-                        // known_ty may contain other variables that are known by now\n-                        tv_stack.push(tv);\n-                        let result = self.resolve_ty_as_possible_inner(\n-                            tv_stack,\n-                            known_ty.assert_ty_ref(&Interner).clone(),\n-                        );\n-                        tv_stack.pop();\n-                        result\n-                    } else {\n-                        ty\n-                    }\n-                }\n-                _ => ty,\n-            },\n-            DebruijnIndex::INNERMOST,\n-        )\n-    }\n-\n     pub fn register_obligation(&mut self, goal: Goal) {\n         let in_env = InEnvironment::new(&self.trait_env.env, goal);\n         self.register_obligation_in_env(in_env)"}, {"sha": "baef8159010655f07919123a705146732f4346f0", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b", "patch": "@@ -117,19 +117,19 @@ fn recursive_vars_2() {\n         \"#,\n         expect![[r#\"\n             10..79 '{     ...x)]; }': ()\n-            20..21 'x': {unknown}\n-            24..31 'unknown': {unknown}\n+            20..21 'x': &{unknown}\n+            24..31 'unknown': &{unknown}\n             41..42 'y': {unknown}\n             45..52 'unknown': {unknown}\n-            58..76 '[(x, y..., &x)]': [({unknown}, {unknown}); 2]\n-            59..65 '(x, y)': ({unknown}, {unknown})\n-            60..61 'x': {unknown}\n+            58..76 '[(x, y..., &x)]': [(&{unknown}, {unknown}); 2]\n+            59..65 '(x, y)': (&{unknown}, {unknown})\n+            60..61 'x': &{unknown}\n             63..64 'y': {unknown}\n-            67..75 '(&y, &x)': (&{unknown}, &{unknown})\n+            67..75 '(&y, &x)': (&{unknown}, {unknown})\n             68..70 '&y': &{unknown}\n             69..70 'y': {unknown}\n-            72..74 '&x': &{unknown}\n-            73..74 'x': {unknown}\n+            72..74 '&x': &&{unknown}\n+            73..74 'x': &{unknown}\n         \"#]],\n     );\n }"}, {"sha": "a5a2df54cb69a92d881e2e692be58a86647a703f", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=4bd446f5b3f8035d5db1fde1c6c50073e3f4fb2b", "patch": "@@ -3104,7 +3104,7 @@ fn foo() {\n             568..573 'f(&s)': FnOnce::Output<dyn FnOnce(&Option<i32>), (&Option<i32>,)>\n             570..572 '&s': &Option<i32>\n             571..572 's': Option<i32>\n-            549..562: expected Box<dyn FnOnce(&Option<i32>)>, got Box<|_| -> ()>\n+            549..562: expected Box<dyn FnOnce(&Option<i32>)>, got Box<|{unknown}| -> ()>\n         \"#]],\n     );\n }"}]}