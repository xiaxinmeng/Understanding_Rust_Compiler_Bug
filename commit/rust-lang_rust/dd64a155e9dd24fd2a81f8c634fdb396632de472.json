{"sha": "dd64a155e9dd24fd2a81f8c634fdb396632de472", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNjRhMTU1ZTlkZDI0ZmQyYTgxZjhjNjM0ZmRiMzk2NjMyZGU0NzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-23T21:16:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-23T21:16:29Z"}, "message": "rename", "tree": {"sha": "606b54ead924e2063a3493e8a0cff8e48cd087ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/606b54ead924e2063a3493e8a0cff8e48cd087ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd64a155e9dd24fd2a81f8c634fdb396632de472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd64a155e9dd24fd2a81f8c634fdb396632de472", "html_url": "https://github.com/rust-lang/rust/commit/dd64a155e9dd24fd2a81f8c634fdb396632de472", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd64a155e9dd24fd2a81f8c634fdb396632de472/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f47f58ffe5fb494c883ec4fd120cdd63ad31cc68", "url": "https://api.github.com/repos/rust-lang/rust/commits/f47f58ffe5fb494c883ec4fd120cdd63ad31cc68", "html_url": "https://github.com/rust-lang/rust/commit/f47f58ffe5fb494c883ec4fd120cdd63ad31cc68"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "c742661336c05010af3aed671e797b7c787c9d22", "filename": "crates/libsyntax2/src/grammar/items/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd64a155e9dd24fd2a81f8c634fdb396632de472/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd64a155e9dd24fd2a81f8c634fdb396632de472/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fmod.rs?ref=dd64a155e9dd24fd2a81f8c634fdb396632de472", "patch": "@@ -63,7 +63,7 @@ pub(super) enum MaybeItem {\n \n pub(super) fn maybe_item(p: &mut Parser, flavor: ItemFlavor) -> MaybeItem {\n     attributes::outer_attributes(p);\n-    visibility(p);\n+    opt_visibility(p);\n     if let Some(kind) = items_without_modifiers(p) {\n         return MaybeItem::Item(kind);\n     }"}, {"sha": "b3ed94fe3dcf107d7ee9bd8f9e23bb345e143288", "filename": "crates/libsyntax2/src/grammar/items/structs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd64a155e9dd24fd2a81f8c634fdb396632de472/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd64a155e9dd24fd2a81f8c634fdb396632de472/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fitems%2Fstructs.rs?ref=dd64a155e9dd24fd2a81f8c634fdb396632de472", "patch": "@@ -91,7 +91,7 @@ fn named_fields(p: &mut Parser) {\n         //     pub uri: Uri,\n         // }\n         attributes::outer_attributes(p);\n-        visibility(p);\n+        opt_visibility(p);\n         if p.at(IDENT) {\n             name(p);\n             p.expect(COLON);\n@@ -110,7 +110,7 @@ fn pos_fields(p: &mut Parser) {\n     }\n     while !p.at(R_PAREN) && !p.at(EOF) {\n         let pos_field = p.start();\n-        visibility(p);\n+        opt_visibility(p);\n         types::type_(p);\n         pos_field.complete(p, POS_FIELD);\n "}, {"sha": "bbdc4f80702bf1527be651a9800c6e8b53b3b856", "filename": "crates/libsyntax2/src/grammar/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd64a155e9dd24fd2a81f8c634fdb396632de472/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd64a155e9dd24fd2a81f8c634fdb396632de472/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs?ref=dd64a155e9dd24fd2a81f8c634fdb396632de472", "patch": "@@ -54,7 +54,7 @@ impl BlockLike {\n     fn is_block(self) -> bool { self == BlockLike::Block }\n }\n \n-fn visibility(p: &mut Parser) {\n+fn opt_visibility(p: &mut Parser) {\n     match p.current() {\n         PUB_KW => {\n             let m = p.start();"}]}