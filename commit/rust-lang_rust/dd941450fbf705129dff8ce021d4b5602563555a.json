{"sha": "dd941450fbf705129dff8ce021d4b5602563555a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkOTQxNDUwZmJmNzA1MTI5ZGZmOGNlMDIxZDRiNTYwMjU2MzU1NWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-20T16:42:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-20T16:42:13Z"}, "message": "Auto merge of #84967 - CDirkx:os_str_ext, r=m-ou-se\n\nMove `OsStringExt` and `OsStrExt` to `std::os`\n\nMoves the `OsStringExt` and `OsStrExt` traits and implementations from `sys_common` to `os`. `sys_common` is for abstractions over `sys` and shouldn't really contain publicly exported items.\n\nThis does introduce some duplication: the traits and implementations are now duplicated in `unix`, `wasi`, `hermit`, and `sgx`. However, I would argue that this duplication is no different to how something like `MetadataExt` is duplicated in `linux`, `vxworkx`, `redox`, `solaris` etc. The duplication also matches the fact that the traits on different platforms are technically distinct types: any platform is free to add it's own extra methods to the extension trait.", "tree": {"sha": "b24fdba8bc6b53324061313fa676aa40de35279c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b24fdba8bc6b53324061313fa676aa40de35279c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd941450fbf705129dff8ce021d4b5602563555a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd941450fbf705129dff8ce021d4b5602563555a", "html_url": "https://github.com/rust-lang/rust/commit/dd941450fbf705129dff8ce021d4b5602563555a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd941450fbf705129dff8ce021d4b5602563555a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e940ac5e97ba4424be5a8e02ff4c7846ca1e25a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e940ac5e97ba4424be5a8e02ff4c7846ca1e25a", "html_url": "https://github.com/rust-lang/rust/commit/2e940ac5e97ba4424be5a8e02ff4c7846ca1e25a"}, {"sha": "ad7b8975e08cc9ded5352c6771af3c8bf5c1b818", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7b8975e08cc9ded5352c6771af3c8bf5c1b818", "html_url": "https://github.com/rust-lang/rust/commit/ad7b8975e08cc9ded5352c6771af3c8bf5c1b818"}], "stats": {"total": 170, "additions": 92, "deletions": 78}, "files": [{"sha": "ac1db0e5e39cc2edb181fb70fc5bcadfe7ec532a", "filename": "library/std/src/os/fortanix_sgx/ffi.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffortanix_sgx%2Fffi.rs?ref=dd941450fbf705129dff8ce021d4b5602563555a", "patch": "@@ -34,5 +34,8 @@\n \n #![unstable(feature = \"sgx_platform\", issue = \"56975\")]\n \n+#[path = \"../unix/ffi/os_str.rs\"]\n+mod os_str;\n+\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n-pub use crate::sys_common::os_str_bytes::*;\n+pub use self::os_str::{OsStrExt, OsStringExt};"}, {"sha": "19761fd99b400f3cee75b55c855bc5b5e567757f", "filename": "library/std/src/os/hermit/ffi.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fhermit%2Fffi.rs?ref=dd941450fbf705129dff8ce021d4b5602563555a", "patch": "@@ -34,5 +34,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[path = \"../unix/ffi/os_str.rs\"]\n+mod os_str;\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use crate::sys_common::os_str_bytes::*;\n+pub use self::os_str::{OsStrExt, OsStringExt};"}, {"sha": "c29df6596fd946e45d567a5f3b7a1d11286db927", "filename": "library/std/src/os/unix/ffi/mod.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fos%2Funix%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fos%2Funix%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fffi%2Fmod.rs?ref=dd941450fbf705129dff8ce021d4b5602563555a", "patch": "@@ -34,5 +34,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+mod os_str;\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use crate::sys_common::os_str_bytes::*;\n+pub use self::os_str::{OsStrExt, OsStringExt};", "previous_filename": "library/std/src/os/unix/ffi.rs"}, {"sha": "54c9a9382f22fa3e37f5b36dc7d7e65a29f8dfaa", "filename": "library/std/src/os/unix/ffi/os_str.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fos%2Funix%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fos%2Funix%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fffi%2Fos_str.rs?ref=dd941450fbf705129dff8ce021d4b5602563555a", "patch": "@@ -0,0 +1,68 @@\n+use crate::ffi::{OsStr, OsString};\n+use crate::mem;\n+use crate::sealed::Sealed;\n+use crate::sys::os_str::Buf;\n+use crate::sys_common::{AsInner, FromInner, IntoInner};\n+\n+// Note: this file is currently reused in other `std::os::{platform}::ffi` modules to reduce duplication.\n+// Keep this in mind when applying changes to this file that only apply to `unix`.\n+\n+/// Platform-specific extensions to [`OsString`].\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait OsStringExt: Sealed {\n+    /// Creates an [`OsString`] from a byte vector.\n+    ///\n+    /// See the module documentation for an example.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn from_vec(vec: Vec<u8>) -> Self;\n+\n+    /// Yields the underlying byte vector of this [`OsString`].\n+    ///\n+    /// See the module documentation for an example.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn into_vec(self) -> Vec<u8>;\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl OsStringExt for OsString {\n+    fn from_vec(vec: Vec<u8>) -> OsString {\n+        FromInner::from_inner(Buf { inner: vec })\n+    }\n+    fn into_vec(self) -> Vec<u8> {\n+        self.into_inner().inner\n+    }\n+}\n+\n+/// Platform-specific extensions to [`OsStr`].\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+pub trait OsStrExt: Sealed {\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    /// Creates an [`OsStr`] from a byte slice.\n+    ///\n+    /// See the module documentation for an example.\n+    fn from_bytes(slice: &[u8]) -> &Self;\n+\n+    /// Gets the underlying byte view of the [`OsStr`] slice.\n+    ///\n+    /// See the module documentation for an example.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn as_bytes(&self) -> &[u8];\n+}\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl OsStrExt for OsStr {\n+    #[inline]\n+    fn from_bytes(slice: &[u8]) -> &OsStr {\n+        unsafe { mem::transmute(slice) }\n+    }\n+    #[inline]\n+    fn as_bytes(&self) -> &[u8] {\n+        &self.as_inner().inner\n+    }\n+}"}, {"sha": "17e12a395a67047529abcaafb412c76fa556911c", "filename": "library/std/src/os/wasi/ffi.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fffi.rs?ref=dd941450fbf705129dff8ce021d4b5602563555a", "patch": "@@ -2,5 +2,8 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+#[path = \"../unix/ffi/os_str.rs\"]\n+mod os_str;\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use crate::sys_common::os_str_bytes::*;\n+pub use self::os_str::{OsStrExt, OsStringExt};"}, {"sha": "1c7e1dd8d57787f53747468b8277e7047f522ce3", "filename": "library/std/src/sys/hermit/args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fargs.rs?ref=dd941450fbf705129dff8ce021d4b5602563555a", "patch": "@@ -55,8 +55,8 @@ impl DoubleEndedIterator for Args {\n mod imp {\n     use super::Args;\n     use crate::ffi::{CStr, OsString};\n+    use crate::os::unix::ffi::OsStringExt;\n     use crate::ptr;\n-    use crate::sys_common::os_str_bytes::*;\n \n     use crate::sys_common::mutex::StaticMutex;\n "}, {"sha": "be019d4435db59a28e57369d650056818816587f", "filename": "library/std/src/sys/hermit/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs?ref=dd941450fbf705129dff8ce021d4b5602563555a", "patch": "@@ -3,14 +3,14 @@ use crate::fmt;\n use crate::hash::{Hash, Hasher};\n use crate::io::{self, Error, ErrorKind};\n use crate::io::{IoSlice, IoSliceMut, SeekFrom};\n+use crate::os::unix::ffi::OsStrExt;\n use crate::path::{Path, PathBuf};\n use crate::sys::cvt;\n use crate::sys::hermit::abi;\n use crate::sys::hermit::abi::{O_APPEND, O_CREAT, O_EXCL, O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY};\n use crate::sys::hermit::fd::FileDesc;\n use crate::sys::time::SystemTime;\n use crate::sys::unsupported;\n-use crate::sys_common::os_str_bytes::OsStrExt;\n \n pub use crate::sys_common::fs::{copy, try_exists};\n //pub use crate::sys_common::fs::remove_dir_all;"}, {"sha": "eeb30a578c05be476216eec5147af764c10253c9", "filename": "library/std/src/sys/hermit/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs?ref=dd941450fbf705129dff8ce021d4b5602563555a", "patch": "@@ -4,13 +4,13 @@ use crate::ffi::{CStr, OsStr, OsString};\n use crate::fmt;\n use crate::io;\n use crate::marker::PhantomData;\n+use crate::os::unix::ffi::OsStringExt;\n use crate::path::{self, PathBuf};\n use crate::str;\n use crate::sync::Mutex;\n use crate::sys::hermit::abi;\n use crate::sys::memchr;\n use crate::sys::unsupported;\n-use crate::sys_common::os_str_bytes::*;\n use crate::vec;\n \n pub fn errno() -> i32 {"}, {"sha": "470f401a6d254ef954c65f9cf5e5e6f04fb3093f", "filename": "library/std/src/sys_common/os_str_bytes.rs", "status": "modified", "additions": 6, "deletions": 71, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd941450fbf705129dff8ce021d4b5602563555a/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs?ref=dd941450fbf705129dff8ce021d4b5602563555a", "patch": "@@ -2,30 +2,25 @@\n //! systems: just a `Vec<u8>`/`[u8]`.\n \n use crate::borrow::Cow;\n-use crate::ffi::{OsStr, OsString};\n+\n use crate::fmt;\n use crate::mem;\n use crate::rc::Rc;\n-use crate::sealed::Sealed;\n use crate::str;\n use crate::sync::Arc;\n use crate::sys_common::bytestring::debug_fmt_bytestring;\n-use crate::sys_common::{AsInner, FromInner, IntoInner};\n+use crate::sys_common::{AsInner, IntoInner};\n \n use core::str::lossy::Utf8Lossy;\n \n #[derive(Hash)]\n-pub(crate) struct Buf {\n+#[repr(transparent)]\n+pub struct Buf {\n     pub inner: Vec<u8>,\n }\n \n-// FIXME:\n-// `Buf::as_slice` current implementation relies\n-// on `Slice` being layout-compatible with `[u8]`.\n-// When attribute privacy is implemented, `Slice` should be annotated as `#[repr(transparent)]`.\n-// Anyway, `Slice` representation and layout are considered implementation detail, are\n-// not documented and must not be relied upon.\n-pub(crate) struct Slice {\n+#[repr(transparent)]\n+pub struct Slice {\n     pub inner: [u8],\n }\n \n@@ -243,63 +238,3 @@ impl Slice {\n         self.inner.eq_ignore_ascii_case(&other.inner)\n     }\n }\n-\n-/// Platform-specific extensions to [`OsString`].\n-///\n-/// This trait is sealed: it cannot be implemented outside the standard library.\n-/// This is so that future additional methods are not breaking changes.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait OsStringExt: Sealed {\n-    /// Creates an [`OsString`] from a byte vector.\n-    ///\n-    /// See the module documentation for an example.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn from_vec(vec: Vec<u8>) -> Self;\n-\n-    /// Yields the underlying byte vector of this [`OsString`].\n-    ///\n-    /// See the module documentation for an example.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn into_vec(self) -> Vec<u8>;\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl OsStringExt for OsString {\n-    fn from_vec(vec: Vec<u8>) -> OsString {\n-        FromInner::from_inner(Buf { inner: vec })\n-    }\n-    fn into_vec(self) -> Vec<u8> {\n-        self.into_inner().inner\n-    }\n-}\n-\n-/// Platform-specific extensions to [`OsStr`].\n-///\n-/// This trait is sealed: it cannot be implemented outside the standard library.\n-/// This is so that future additional methods are not breaking changes.\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait OsStrExt: Sealed {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    /// Creates an [`OsStr`] from a byte slice.\n-    ///\n-    /// See the module documentation for an example.\n-    fn from_bytes(slice: &[u8]) -> &Self;\n-\n-    /// Gets the underlying byte view of the [`OsStr`] slice.\n-    ///\n-    /// See the module documentation for an example.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn as_bytes(&self) -> &[u8];\n-}\n-\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl OsStrExt for OsStr {\n-    #[inline]\n-    fn from_bytes(slice: &[u8]) -> &OsStr {\n-        unsafe { mem::transmute(slice) }\n-    }\n-    #[inline]\n-    fn as_bytes(&self) -> &[u8] {\n-        &self.as_inner().inner\n-    }\n-}"}]}