{"sha": "3b30b74692cfee533b45e0380591d237975ec215", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMzBiNzQ2OTJjZmVlNTMzYjQ1ZTAzODA1OTFkMjM3OTc1ZWMyMTU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-03T08:42:12Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-03T11:31:15Z"}, "message": "Rollup merge of #22943 - ipetkov:lint-recursion, r=alexcrichton\n\n * The lint visitor's visit_ty method did not recurse, and had a\n  reference to the now closed #10894\n* The newly enabled recursion has only affected the `deprectated` lint\n  which now detects uses of deprecated items in trait impls and\n  function return types\n* Renamed some references to `CowString` and `CowVec` to `Cow<str>` and\n  `Cow<[T]>`, respectively, which appear outside of the crate which\n  defines them\n* Replaced a few instances of `InvariantType<T>` with\n  `PhantomData<Cell<T>>`\n* Disabled the `deprecated` lint in several places that\n  reference/implement traits on deprecated items which will get cleaned\n  up in the future\n* Unfortunately, this means that if a library declares\n  `#![deny(deprecated)]` and marks anything as deprecated, it will have\n  to disable the lint for any uses of said item, e.g. any impl the now\n  deprecated item\n\nFor any library that denies deprecated items but has deprecated items\nof its own, this is a [breaking-change]\n\nI had originally intended for the lint to ignore uses of deprecated items that are declared in the same crate, but this goes against some previous test cases that expect the lint to capture *all* uses of deprecated items, so I maintained the previous approach to avoid changing the expected behavior of the lint.\n\nTested locally on OS X, so hopefully there aren't any deprecated item uses behind a `cfg` that I may have missed.", "tree": {"sha": "ffa1e9d52f940dbde42d53a8aca829385e87eb8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffa1e9d52f940dbde42d53a8aca829385e87eb8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b30b74692cfee533b45e0380591d237975ec215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b30b74692cfee533b45e0380591d237975ec215", "html_url": "https://github.com/rust-lang/rust/commit/3b30b74692cfee533b45e0380591d237975ec215", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b30b74692cfee533b45e0380591d237975ec215/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63a91c21d339738d2ed46e38fda7ca35b410935a", "url": "https://api.github.com/repos/rust-lang/rust/commits/63a91c21d339738d2ed46e38fda7ca35b410935a", "html_url": "https://github.com/rust-lang/rust/commit/63a91c21d339738d2ed46e38fda7ca35b410935a"}, {"sha": "2b03718618d66e7e672663230be1ee857d3fb89a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b03718618d66e7e672663230be1ee857d3fb89a", "html_url": "https://github.com/rust-lang/rust/commit/2b03718618d66e7e672663230be1ee857d3fb89a"}], "stats": {"total": 59, "additions": 34, "deletions": 25}, "files": [{"sha": "599b92d05ddd7e21d3337ae2d9045bd1f082d8d4", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=3b30b74692cfee533b45e0380591d237975ec215", "patch": "@@ -756,6 +756,7 @@ pub trait StrExt: Index<RangeFull, Output = str> {\n     /// ```\n     #[unstable(feature = \"collections\")]\n     #[deprecated(since = \"1.0.0\", reason = \"use `split()` with a `&str`\")]\n+    #[allow(deprecated) /* for SplitStr */]\n     fn split_str<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitStr<'a, P> {\n         core_str::StrExt::split_str(&self[..], pat)\n     }"}, {"sha": "a4d39974c70135338f8c5881c978caef8dc9a5e8", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=3b30b74692cfee533b45e0380591d237975ec215", "patch": "@@ -1499,9 +1499,9 @@ impl<T> Extend<T> for Vec<T> {\n __impl_slice_eq1! { Vec<A>, Vec<B> }\n __impl_slice_eq2! { Vec<A>, &'b [B] }\n __impl_slice_eq2! { Vec<A>, &'b mut [B] }\n-__impl_slice_eq2! { CowVec<'a, A>, &'b [B], Clone }\n-__impl_slice_eq2! { CowVec<'a, A>, &'b mut [B], Clone }\n-__impl_slice_eq2! { CowVec<'a, A>, Vec<B>, Clone }\n+__impl_slice_eq2! { Cow<'a, [A]>, &'b [B], Clone }\n+__impl_slice_eq2! { Cow<'a, [A]>, &'b mut [B], Clone }\n+__impl_slice_eq2! { Cow<'a, [A]>, Vec<B>, Clone }\n \n macro_rules! array_impls {\n     ($($N: expr)+) => {\n@@ -1510,9 +1510,9 @@ macro_rules! array_impls {\n             __impl_slice_eq2! { Vec<A>, [B; $N] }\n             __impl_slice_eq2! { Vec<A>, &'b [B; $N] }\n             // __impl_slice_eq2! { Vec<A>, &'b mut [B; $N] }\n-            // __impl_slice_eq2! { CowVec<'a, A>, [B; $N], Clone }\n-            // __impl_slice_eq2! { CowVec<'a, A>, &'b [B; $N], Clone }\n-            // __impl_slice_eq2! { CowVec<'a, A>, &'b mut [B; $N], Clone }\n+            // __impl_slice_eq2! { Cow<'a, [A]>, [B; $N], Clone }\n+            // __impl_slice_eq2! { Cow<'a, [A]>, &'b [B; $N], Clone }\n+            // __impl_slice_eq2! { Cow<'a, [A]>, &'b mut [B; $N], Clone }\n         )+\n     }\n }"}, {"sha": "c316236a8041291efd6ff1b588ecab8325b21921", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=3b30b74692cfee533b45e0380591d237975ec215", "patch": "@@ -1067,6 +1067,7 @@ pub struct AtomicInt {\n     v: UnsafeCell<int>,\n }\n \n+#[allow(deprecated)]\n unsafe impl Sync for AtomicInt {}\n \n #[unstable(feature = \"core\")]\n@@ -1077,6 +1078,7 @@ pub struct AtomicUint {\n     v: UnsafeCell<uint>,\n }\n \n+#[allow(deprecated)]\n unsafe impl Sync for AtomicUint {}\n \n #[unstable(feature = \"core\")]"}, {"sha": "35dfc7626872705f3378f8c3a0ad17161a6d9cee", "filename": "src/libcore/raw.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibcore%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibcore%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fraw.rs?ref=3b30b74692cfee533b45e0380591d237975ec215", "patch": "@@ -70,6 +70,7 @@ impl<T> Copy for Slice<T> {}\n #[deprecated(reason = \"unboxed new closures do not have a universal representation; \\\n                        `&Fn` (etc) trait objects should use `TraitObject` instead\",\n              since= \"1.0.0\")]\n+#[allow(deprecated) /* for deriving Copy impl */]\n pub struct Closure {\n     pub code: *mut (),\n     pub env: *mut (),"}, {"sha": "facc62a8659e6395692bc39482985ad4e60e2f14", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=3b30b74692cfee533b45e0380591d237975ec215", "patch": "@@ -935,6 +935,7 @@ impl<'a, P: Pattern<'a>> Iterator for MatchIndices<'a, P> {\n #[unstable(feature = \"core\")]\n #[deprecated(since = \"1.0.0\", reason = \"use `Split` with a `&str`\")]\n pub struct SplitStr<'a, P: Pattern<'a>>(Split<'a, P>);\n+#[allow(deprecated)]\n impl<'a, P: Pattern<'a>> Iterator for SplitStr<'a, P> {\n     type Item = &'a str;\n \n@@ -1325,6 +1326,7 @@ pub trait StrExt {\n     fn split_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitTerminator<'a, P>;\n     fn rsplitn<'a, P: Pattern<'a>>(&'a self, count: usize, pat: P) -> RSplitN<'a, P>;\n     fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P>;\n+    #[allow(deprecated) /* for SplitStr */]\n     fn split_str<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitStr<'a, P>;\n     fn lines<'a>(&'a self) -> Lines<'a>;\n     fn lines_any<'a>(&'a self) -> LinesAny<'a>;"}, {"sha": "2f60a9e2cca2a84c6d06daac67391a75a2067e43", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=3b30b74692cfee533b45e0380591d237975ec215", "patch": "@@ -37,7 +37,7 @@\n //! Each node label is derived directly from the int representing the node,\n //! while the edge labels are all empty strings.\n //!\n-//! This example also illustrates how to use `CowVec` to return\n+//! This example also illustrates how to use `Cow<[T]>` to return\n //! an owned vector or a borrowed slice as appropriate: we construct the\n //! node vector from scratch, but borrow the edge list (rather than\n //! constructing a copy of all the edges from scratch).\n@@ -502,7 +502,7 @@ pub type Edges<'a,E> = Cow<'a,[E]>;\n /// that is bound by the self lifetime `'a`.\n ///\n /// The `nodes` and `edges` method each return instantiations of\n-/// `CowVec` to leave implementers the freedom to create\n+/// `Cow<[T]>` to leave implementers the freedom to create\n /// entirely new vectors or to pass back slices into internally owned\n /// vectors.\n pub trait GraphWalk<'a, N, E> {"}, {"sha": "a777e1f7f75e6ad13c59cd12ae0e84ba52b20f87", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=3b30b74692cfee533b45e0380591d237975ec215", "patch": "@@ -568,9 +568,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n         })\n     }\n \n-    // FIXME(#10894) should continue recursing\n     fn visit_ty(&mut self, t: &ast::Ty) {\n         run_lints!(self, check_ty, t);\n+        visit::walk_ty(self, t);\n     }\n \n     fn visit_ident(&mut self, sp: Span, id: ast::Ident) {"}, {"sha": "5cd2d3ca31291e971052723f0830faf42ce0b2ef", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=3b30b74692cfee533b45e0380591d237975ec215", "patch": "@@ -76,7 +76,7 @@ use std::hash::{Hash, SipHasher, Hasher};\n use std::mem;\n use std::ops;\n use std::rc::Rc;\n-use std::vec::{CowVec, IntoIter};\n+use std::vec::IntoIter;\n use collections::enum_set::{EnumSet, CLike};\n use std::collections::{HashMap, HashSet};\n use syntax::abi;\n@@ -5580,7 +5580,7 @@ pub fn predicates<'tcx>(\n \n /// Get the attributes of a definition.\n pub fn get_attrs<'tcx>(tcx: &'tcx ctxt, did: DefId)\n-                       -> CowVec<'tcx, ast::Attribute> {\n+                       -> Cow<'tcx, [ast::Attribute]> {\n     if is_local(did) {\n         let item = tcx.map.expect_item(did.node);\n         Cow::Borrowed(&item.attrs)"}, {"sha": "926d8e03f2c3b91575dd902a188448ae1488340c", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=3b30b74692cfee533b45e0380591d237975ec215", "patch": "@@ -34,10 +34,10 @@\n \n use core::prelude::*;\n \n-use borrow::{Borrow, ToOwned};\n+use borrow::{Borrow, Cow, ToOwned};\n use fmt::{self, Debug};\n use mem;\n-use string::{String, CowString};\n+use string::String;\n use ops;\n use cmp;\n use hash::{Hash, Hasher};\n@@ -183,10 +183,10 @@ impl OsStr {\n         self.inner.to_str()\n     }\n \n-    /// Convert an `OsStr` to a `CowString`.\n+    /// Convert an `OsStr` to a `Cow<str>`.\n     ///\n     /// Any non-Unicode sequences are replaced with U+FFFD REPLACEMENT CHARACTER.\n-    pub fn to_string_lossy(&self) -> CowString {\n+    pub fn to_string_lossy(&self) -> Cow<str> {\n         self.inner.to_string_lossy()\n     }\n "}, {"sha": "bea2b6c6b407176ab608851ff46a8458b580fa81", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=3b30b74692cfee533b45e0380591d237975ec215", "patch": "@@ -38,7 +38,7 @@ use num::Int;\n use ops;\n use slice;\n use str;\n-use string::{String, CowString};\n+use string::String;\n use sys_common::AsInner;\n use unicode::str::{Utf16Item, utf16_items};\n use vec::Vec;\n@@ -530,7 +530,7 @@ impl Wtf8 {\n     /// Surrogates are replaced with `\"\\u{FFFD}\"` (the replacement character \u201c\ufffd\u201d).\n     ///\n     /// This only copies the data if necessary (if it contains any surrogate).\n-    pub fn to_string_lossy(&self) -> CowString {\n+    pub fn to_string_lossy(&self) -> Cow<str> {\n         let surrogate_pos = match self.next_surrogate(0) {\n             None => return Cow::Borrowed(unsafe { str::from_utf8_unchecked(&self.bytes) }),\n             Some((pos, _)) => pos,\n@@ -844,7 +844,6 @@ mod tests {\n     use borrow::Cow;\n     use super::*;\n     use mem::transmute;\n-    use string::CowString;\n \n     #[test]\n     fn code_point_from_u32() {\n@@ -1224,7 +1223,7 @@ mod tests {\n         assert_eq!(Wtf8::from_str(\"a\u00e9 \ud83d\udca9\").to_string_lossy(), Cow::Borrowed(\"a\u00e9 \ud83d\udca9\"));\n         let mut string = Wtf8Buf::from_str(\"a\u00e9 \ud83d\udca9\");\n         string.push(CodePoint::from_u32(0xD800).unwrap());\n-        let expected: CowString = Cow::Owned(String::from_str(\"a\u00e9 \ud83d\udca9\ufffd\"));\n+        let expected: Cow<str> = Cow::Owned(String::from_str(\"a\u00e9 \ud83d\udca9\ufffd\"));\n         assert_eq!(string.to_string_lossy(), expected);\n     }\n "}, {"sha": "c8ac524876b5bdfd651ee2d976604f6ea2a90ca8", "filename": "src/libstd/sys/unix/os_str.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos_str.rs?ref=3b30b74692cfee533b45e0380591d237975ec215", "patch": "@@ -13,11 +13,12 @@\n \n use core::prelude::*;\n \n+use borrow::Cow;\n use fmt::{self, Debug};\n use vec::Vec;\n use slice::SliceExt as StdSliceExt;\n use str;\n-use string::{String, CowString};\n+use string::String;\n use mem;\n \n #[derive(Clone, Hash)]\n@@ -76,7 +77,7 @@ impl Slice {\n         str::from_utf8(&self.inner).ok()\n     }\n \n-    pub fn to_string_lossy(&self) -> CowString {\n+    pub fn to_string_lossy(&self) -> Cow<str> {\n         String::from_utf8_lossy(&self.inner)\n     }\n "}, {"sha": "ad1e6c4b0e727eeb0f0776f3ae4bf8c6f2e802a4", "filename": "src/libstd/sys/windows/os_str.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fos_str.rs?ref=3b30b74692cfee533b45e0380591d237975ec215", "patch": "@@ -11,9 +11,10 @@\n /// The underlying OsString/OsStr implementation on Windows is a\n /// wrapper around the \"WTF-8\" encoding; see the `wtf8` module for more.\n \n+use borrow::Cow;\n use fmt::{self, Debug};\n use sys_common::wtf8::{Wtf8, Wtf8Buf};\n-use string::{String, CowString};\n+use string::String;\n use result::Result;\n use option::Option;\n use mem;\n@@ -70,7 +71,7 @@ impl Slice {\n         self.inner.as_str()\n     }\n \n-    pub fn to_string_lossy(&self) -> CowString {\n+    pub fn to_string_lossy(&self) -> Cow<str> {\n         self.inner.to_string_lossy()\n     }\n "}, {"sha": "d89d69e9497167e9fdddedcc25da927de7411616", "filename": "src/libstd/thread_local/scoped.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibstd%2Fthread_local%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b30b74692cfee533b45e0380591d237975ec215/src%2Flibstd%2Fthread_local%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread_local%2Fscoped.rs?ref=3b30b74692cfee533b45e0380591d237975ec215", "patch": "@@ -119,7 +119,7 @@ macro_rules! __scoped_thread_local_inner {\n         const _INIT: __Key<$t> = __Key {\n             inner: ::std::thread_local::scoped::__impl::KeyInner {\n                 inner: ::std::thread_local::scoped::__impl::OS_INIT,\n-                marker: ::std::marker::InvariantType,\n+                marker: ::std::marker::PhantomData::<::std::cell::Cell<$t>>,\n             }\n         };\n \n@@ -244,12 +244,13 @@ mod imp {\n           target_arch = \"aarch64\"))]\n mod imp {\n     use marker;\n+    use std::cell::Cell;\n     use sys_common::thread_local::StaticKey as OsStaticKey;\n \n     #[doc(hidden)]\n     pub struct KeyInner<T> {\n         pub inner: OsStaticKey,\n-        pub marker: marker::InvariantType<T>,\n+        pub marker: marker::PhantomData<Cell<T>>,\n     }\n \n     unsafe impl<T> ::marker::Sync for KeyInner<T> { }"}, {"sha": "105f885f2875f4934aa01ecddc3c5bb66d5c0231", "filename": "src/test/compile-fail/huge-array-simple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b30b74692cfee533b45e0380591d237975ec215/src%2Ftest%2Fcompile-fail%2Fhuge-array-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b30b74692cfee533b45e0380591d237975ec215/src%2Ftest%2Fcompile-fail%2Fhuge-array-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhuge-array-simple.rs?ref=3b30b74692cfee533b45e0380591d237975ec215", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // error-pattern: too big for the current\n+#![allow(exceeding_bitshifts)]\n \n fn main() {\n    let fat : [u8; (1<<61)+(1<<31)] = [0; (1u64<<61) as usize +(1u64<<31) as usize];"}]}