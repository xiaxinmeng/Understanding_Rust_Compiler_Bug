{"sha": "620b4352f28d58801d82d58faa0a71f75ad9087f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMGI0MzUyZjI4ZDU4ODAxZDgyZDU4ZmFhMGE3MWY3NWFkOTA4N2Y=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-09T20:57:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-09T21:42:12Z"}, "message": "doc: Fix some broken links", "tree": {"sha": "cd7cb4a814f38bca37d90c3e900d3b0e3b4aa969", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd7cb4a814f38bca37d90c3e900d3b0e3b4aa969"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/620b4352f28d58801d82d58faa0a71f75ad9087f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/620b4352f28d58801d82d58faa0a71f75ad9087f", "html_url": "https://github.com/rust-lang/rust/commit/620b4352f28d58801d82d58faa0a71f75ad9087f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/620b4352f28d58801d82d58faa0a71f75ad9087f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ba4971ab86ea36d0379f566513fd368b48e7bf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ba4971ab86ea36d0379f566513fd368b48e7bf9", "html_url": "https://github.com/rust-lang/rust/commit/1ba4971ab86ea36d0379f566513fd368b48e7bf9"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "652f8f6c42fd7995d0ee3f46d0828dc8a3395d00", "filename": "src/doc/rust.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/620b4352f28d58801d82d58faa0a71f75ad9087f/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/620b4352f28d58801d82d58faa0a71f75ad9087f/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=620b4352f28d58801d82d58faa0a71f75ad9087f", "patch": "@@ -17,14 +17,13 @@ This document does not serve as a tutorial introduction to the\n language. Background familiarity with the language is assumed. A separate\n [tutorial] document is available to help acquire such background familiarity.\n \n-This document also does not serve as a reference to the [standard] or [extra]\n-libraries included in the language distribution. Those libraries are\n+This document also does not serve as a reference to the [standard]\n+library included in the language distribution. Those libraries are\n documented separately by extracting documentation attributes from their\n source code.\n \n [tutorial]: tutorial.html\n [standard]: std/index.html\n-[extra]: extra/index.html\n \n ## Disclaimer\n "}, {"sha": "0960b646eef085dd4c89cdbc031c568cffb532d0", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/620b4352f28d58801d82d58faa0a71f75ad9087f/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b4352f28d58801d82d58faa0a71f75ad9087f/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=620b4352f28d58801d82d58faa0a71f75ad9087f", "patch": "@@ -24,7 +24,7 @@\n //!\n //! Functions return `Result` whenever errors are expected and\n //! recoverable. In the `std` crate `Result` is most prominently used\n-//! for [I/O](../io/index.html).\n+//! for [I/O](../../std/io/index.html).\n //!\n //! A simple function returning `Result` might be\n //! defined and used like so:"}, {"sha": "a19d0b6fb301bc8c4ed37d970f8b3aa9435e3b2c", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/620b4352f28d58801d82d58faa0a71f75ad9087f/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b4352f28d58801d82d58faa0a71f75ad9087f/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=620b4352f28d58801d82d58faa0a71f75ad9087f", "patch": "@@ -44,9 +44,9 @@ impl ItemType {\n         match *self {\n             Module          => \"mod\",\n             Struct          => \"struct\",\n-            Enum            => \"enum\",\n+            Enum            => \"type\",\n             Function        => \"fn\",\n-            Typedef         => \"typedef\",\n+            Typedef         => \"type\",\n             Static          => \"static\",\n             Trait           => \"trait\",\n             Impl            => \"impl\","}, {"sha": "ae2436ad3b4e4cb14e42b233b32d44f8ac8030fc", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/620b4352f28d58801d82d58faa0a71f75ad9087f/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b4352f28d58801d82d58faa0a71f75ad9087f/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=620b4352f28d58801d82d58faa0a71f75ad9087f", "patch": "@@ -16,11 +16,11 @@\n //!\n //! ## Intrinsic types and operations\n //!\n-//! The [`ptr`](ptr/index.html), [`mem`](mem/index.html),\n-//! and [`cast`](cast/index.html) modules deal with unsafe pointers,\n+//! The [`ptr`](../core/ptr/index.html), [`mem`](../core/mem/index.html),\n+//! and [`cast`](../core/cast/index.html) modules deal with unsafe pointers,\n //! memory manipulation, and coercion.\n-//! [`kinds`](kinds/index.html) defines the special built-in traits,\n-//! and [`raw`](raw/index.html) the runtime representation of Rust types.\n+//! [`kinds`](../core/kinds/index.html) defines the special built-in traits,\n+//! and [`raw`](../core/raw/index.html) the runtime representation of Rust types.\n //! These are some of the lowest-level building blocks of Rust\n //! abstractions.\n //!\n@@ -35,9 +35,9 @@\n //!\n //! The [`option`](option/index.html) and [`result`](result/index.html)\n //! modules define optional and error-handling types, `Option` and `Result`.\n-//! [`iter`](iter/index.html) defines Rust's iterator protocol\n+//! [`iter`](../core/iter/index.html) defines Rust's iterator protocol\n //! along with a wide variety of iterators.\n-//! [`Cell` and `RefCell`](cell/index.html) are for creating types that\n+//! [`Cell` and `RefCell`](../core/cell/index.html) are for creating types that\n //! manage their own mutability.\n //!\n //! ## Vectors, slices and strings"}, {"sha": "ecbc164590b5e85b81a21c1925676bd28c8cbf70", "filename": "src/libstd/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/620b4352f28d58801d82d58faa0a71f75ad9087f/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b4352f28d58801d82d58faa0a71f75ad9087f/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=620b4352f28d58801d82d58faa0a71f75ad9087f", "patch": "@@ -226,8 +226,8 @@\n //! similar and complementary: they are often employed to indicate a\n //! lack of a return value; and they are trivially converted between\n //! each other, so `Result`s are often handled by first converting to\n-//! `Option` with the [`ok`](enum.Result.html#method.ok) and\n-//! [`err`](enum.Result.html#method.ok) methods.\n+//! `Option` with the [`ok`](../../core/result/enum.Result.html#method.ok) and\n+//! [`err`](../../core/result/enum.Result.html#method.ok) methods.\n //!\n //! Whereas `Option` only indicates the lack of a value, `Result` is\n //! specifically for error reporting, and carries with it an error"}]}