{"sha": "f393100b7ce86e0c1201f003c2d69fb9ea742db1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOTMxMDBiN2NlODZlMGMxMjAxZjAwM2MyZDY5ZmI5ZWE3NDJkYjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-03T01:13:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-03T01:13:56Z"}, "message": "Camel case core::ops", "tree": {"sha": "577bd91894ec1e1607ae805c03a36b0819617490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/577bd91894ec1e1607ae805c03a36b0819617490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f393100b7ce86e0c1201f003c2d69fb9ea742db1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f393100b7ce86e0c1201f003c2d69fb9ea742db1", "html_url": "https://github.com/rust-lang/rust/commit/f393100b7ce86e0c1201f003c2d69fb9ea742db1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f393100b7ce86e0c1201f003c2d69fb9ea742db1/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb0eb66672c20404cc87850db98fe00ff94da403", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb0eb66672c20404cc87850db98fe00ff94da403", "html_url": "https://github.com/rust-lang/rust/commit/cb0eb66672c20404cc87850db98fe00ff94da403"}], "stats": {"total": 90, "additions": 44, "deletions": 46}, "files": [{"sha": "aa937328486d8c2dea4b3ea2655866432a0dd19a", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=f393100b7ce86e0c1201f003c2d69fb9ea742db1", "patch": "@@ -133,7 +133,7 @@ pure fn from_elem<T: copy>(n_elts: uint, t: T) -> @[T] {\n }\n \n #[cfg(notest)]\n-impl<T: copy> @[T]: add<&[const T],@[T]> {\n+impl<T: copy> @[T]: Add<&[const T],@[T]> {\n     #[inline(always)]\n     pure fn add(rhs: &[const T]) -> @[T] {\n         append(self, rhs)"}, {"sha": "a6ac68c1882d162fa3bd78013d0429a89037772d", "filename": "src/libcore/core.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=f393100b7ce86e0c1201f003c2d69fb9ea742db1", "patch": "@@ -44,28 +44,28 @@ export ToStr;\n // The compiler has special knowlege of these so we must not duplicate them\n // when compiling for testing\n #[cfg(notest)]\n-import ops::{const, copy, send, owned};\n+import ops::{Const, Copy, Send, Owned};\n #[cfg(notest)]\n-import ops::{add, sub, mul, div, modulo, neg, bitand, bitor, bitxor};\n+import ops::{Add, Sub, Mul, Div, Modulo, Neg, BitAnd, BitOr, BitXor};\n #[cfg(notest)]\n-import ops::{shl, shr, index};\n+import ops::{Shl, Shr, Index};\n \n #[cfg(notest)]\n-export const, copy, send, owned;\n+export Const, Copy, Send, Owned;\n #[cfg(notest)]\n-export add, sub, mul, div, modulo, neg, bitand, bitor, bitxor;\n+export Add, Sub, Mul, Div, Modulo, Neg, BitAnd, BitOr, BitXor;\n #[cfg(notest)]\n-export shl, shr, index;\n+export Shl, Shr, Index;\n \n #[cfg(test)]\n use coreops(name = \"core\", vers = \"0.4\");\n \n #[cfg(test)]\n-import coreops::ops::{const, copy, send, owned};\n+import coreops::ops::{Const, Copy, Send, Owned};\n #[cfg(test)]\n-import coreops::ops::{add, sub, mul, div, modulo, neg, bitand, bitor, bitxor};\n+import coreops::ops::{Add, Sub, Mul, Div, Modulo, Neg, BitAnd, BitOr, BitXor};\n #[cfg(test)]\n-import coreops::ops::{shl, shr, index};\n+import coreops::ops::{Shl, Shr, Index};\n \n \n // Export the log levels as global constants. Higher levels mean"}, {"sha": "af2a45d42678038680de53d6bcd1464bed396a02", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=f393100b7ce86e0c1201f003c2d69fb9ea742db1", "patch": "@@ -327,7 +327,7 @@ impl<A: copy> DVec<A> {\n     }\n }\n \n-impl<A:copy> DVec<A>: index<uint,A> {\n+impl<A:copy> DVec<A>: Index<uint,A> {\n     pure fn index(&&idx: uint) -> A {\n         self.get_elt(idx)\n     }"}, {"sha": "4e8b36a43fb5a18210d901cbefe4e54d99d10853", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=f393100b7ce86e0c1201f003c2d69fb9ea742db1", "patch": "@@ -1,100 +1,98 @@\n // Core operators and kinds.\n \n-#[allow(non_camel_case_types)];\n-\n #[cfg(notest)]\n #[lang=\"const\"]\n-trait const {\n+trait Const {\n     // Empty.\n }\n \n #[cfg(notest)]\n #[lang=\"copy\"]\n-trait copy {\n+trait Copy {\n     // Empty.\n }\n \n #[cfg(notest)]\n #[lang=\"send\"]\n-trait send {\n+trait Send {\n     // Empty.\n }\n \n #[cfg(notest)]\n #[lang=\"owned\"]\n-trait owned {\n+trait Owned {\n     // Empty.\n }\n \n #[cfg(notest)]\n #[lang=\"add\"]\n-trait add<RHS,Result> {\n+trait Add<RHS,Result> {\n     pure fn add(rhs: RHS) -> Result;\n }\n \n #[cfg(notest)]\n #[lang=\"sub\"]\n-trait sub<RHS,Result> {\n+trait Sub<RHS,Result> {\n     pure fn sub(rhs: RHS) -> Result;\n }\n \n #[cfg(notest)]\n #[lang=\"mul\"]\n-trait mul<RHS,Result> {\n+trait Mul<RHS,Result> {\n     pure fn mul(rhs: RHS) -> Result;\n }\n \n #[cfg(notest)]\n #[lang=\"div\"]\n-trait div<RHS,Result> {\n+trait Div<RHS,Result> {\n     pure fn div(rhs: RHS) -> Result;\n }\n \n #[cfg(notest)]\n #[lang=\"modulo\"]\n-trait modulo<RHS,Result> {\n+trait Modulo<RHS,Result> {\n     pure fn modulo(rhs: RHS) -> Result;\n }\n \n #[cfg(notest)]\n #[lang=\"neg\"]\n-trait neg<Result> {\n+trait Neg<Result> {\n     pure fn neg() -> Result;\n }\n \n #[cfg(notest)]\n #[lang=\"bitand\"]\n-trait bitand<RHS,Result> {\n+trait BitAnd<RHS,Result> {\n     pure fn bitand(rhs: RHS) -> Result;\n }\n \n #[cfg(notest)]\n #[lang=\"bitor\"]\n-trait bitor<RHS,Result> {\n+trait BitOr<RHS,Result> {\n     pure fn bitor(rhs: RHS) -> Result;\n }\n \n #[cfg(notest)]\n #[lang=\"bitxor\"]\n-trait bitxor<RHS,Result> {\n+trait BitXor<RHS,Result> {\n     pure fn bitxor(rhs: RHS) -> Result;\n }\n \n #[cfg(notest)]\n #[lang=\"shl\"]\n-trait shl<RHS,Result> {\n+trait Shl<RHS,Result> {\n     pure fn shl(rhs: RHS) -> Result;\n }\n \n #[cfg(notest)]\n #[lang=\"shr\"]\n-trait shr<RHS,Result> {\n+trait Shr<RHS,Result> {\n     pure fn shr(rhs: RHS) -> Result;\n }\n \n #[cfg(notest)]\n #[lang=\"index\"]\n-trait index<Index,Result> {\n+trait Index<Index,Result> {\n     pure fn index(index: Index) -> Result;\n }\n "}, {"sha": "b3f58ce2558ffcb79a81f036bcd912f84c1d4f09", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=f393100b7ce86e0c1201f003c2d69fb9ea742db1", "patch": "@@ -2065,7 +2065,7 @@ impl ~str: UniqueStr {\n }\n \n #[cfg(notest)]\n-impl ~str: add<&str,~str> {\n+impl ~str: Add<&str,~str> {\n     #[inline(always)]\n     pure fn add(rhs: &str) -> ~str {\n         append(copy self, rhs)"}, {"sha": "5242505565a9538069f897b6747f49479cde89dd", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=f393100b7ce86e0c1201f003c2d69fb9ea742db1", "patch": "@@ -1480,14 +1480,14 @@ impl<T: Ord> @[T]: Ord {\n }\n \n #[cfg(notest)]\n-impl<T: copy> ~[T]: add<&[const T],~[T]> {\n+impl<T: copy> ~[T]: Add<&[const T],~[T]> {\n     #[inline(always)]\n     pure fn add(rhs: &[const T]) -> ~[T] {\n         append(copy self, rhs)\n     }\n }\n \n-impl<T: copy> ~[mut T]: add<&[const T],~[mut T]> {\n+impl<T: copy> ~[mut T]: Add<&[const T],~[mut T]> {\n     #[inline(always)]\n     pure fn add(rhs: &[const T]) -> ~[mut T] {\n         append_mut(self, rhs)"}, {"sha": "da6226259595da582295c5feb749d7e4bee3ac80", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=f393100b7ce86e0c1201f003c2d69fb9ea742db1", "patch": "@@ -469,7 +469,7 @@ pure fn land(w0: uint, w1: uint) -> uint { return w0 & w1; }\n \n pure fn right(_w0: uint, w1: uint) -> uint { return w1; }\n \n-impl Bitv: ops::index<uint,bool> {\n+impl Bitv: ops::Index<uint,bool> {\n     pure fn index(&&i: uint) -> bool {\n         self.get(i)\n     }"}, {"sha": "71de166795f28be3be5b1bb06f33d3f1ad64dcaf", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=f393100b7ce86e0c1201f003c2d69fb9ea742db1", "patch": "@@ -41,7 +41,7 @@ type Doc = {data: @~[u8], start: uint, end: uint};\n \n type TaggedDoc = {tag: uint, doc: Doc};\n \n-impl Doc: ops::index<uint,Doc> {\n+impl Doc: ops::Index<uint,Doc> {\n     pure fn index(&&tag: uint) -> Doc {\n         unchecked {\n             get_doc(self, tag)"}, {"sha": "20c48d6dda72b6e5ca1398260b8d08c1b8dfd871", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=f393100b7ce86e0c1201f003c2d69fb9ea742db1", "patch": "@@ -367,7 +367,7 @@ mod chained {\n         }\n     }\n \n-    impl<K: copy, V: copy> t<K, V>: ops::index<K, V> {\n+    impl<K: copy, V: copy> t<K, V>: ops::Index<K, V> {\n         pure fn index(&&k: K) -> V {\n             unchecked {\n                 self.get(k)"}, {"sha": "4535344b968472e20bfc5bb261dd6e1aef31c259", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=f393100b7ce86e0c1201f003c2d69fb9ea742db1", "patch": "@@ -134,7 +134,7 @@ impl<V: copy> smallintmap<V>: map::map<uint, V> {\n     }\n }\n \n-impl<V: copy> smallintmap<V>: ops::index<uint, V> {\n+impl<V: copy> smallintmap<V>: ops::Index<uint, V> {\n     pure fn index(&&key: uint) -> V {\n         unchecked {\n             get(self, key)"}, {"sha": "d467f3b5be58e9e73bdf350eaafa075109f1c669", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=f393100b7ce86e0c1201f003c2d69fb9ea742db1", "patch": "@@ -1605,23 +1605,23 @@ fn remove_copyable(k: kind) -> kind {\n     k - kind_(KIND_MASK_COPY | KIND_MASK_DEFAULT_MODE)\n }\n \n-impl kind: ops::bitand<kind,kind> {\n+impl kind: ops::BitAnd<kind,kind> {\n     pure fn bitand(other: kind) -> kind {\n         unchecked {\n             lower_kind(self, other)\n         }\n     }\n }\n \n-impl kind: ops::bitor<kind,kind> {\n+impl kind: ops::BitOr<kind,kind> {\n     pure fn bitor(other: kind) -> kind {\n         unchecked {\n             raise_kind(self, other)\n         }\n     }\n }\n \n-impl kind: ops::sub<kind,kind> {\n+impl kind: ops::Sub<kind,kind> {\n     pure fn sub(other: kind) -> kind {\n         unchecked {\n             kind_(*self & !*other)"}, {"sha": "d203e7578b88896d6882afea38215b96bfa42951", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=f393100b7ce86e0c1201f003c2d69fb9ea742db1", "patch": "@@ -21,7 +21,7 @@ struct cmplx {\n     im: f64;\n }\n \n-impl cmplx : ops::mul<cmplx,cmplx> {\n+impl cmplx : ops::Mul<cmplx,cmplx> {\n     pure fn mul(x: cmplx) -> cmplx {\n         cmplx {\n             re: self.re*x.re - self.im*x.im,\n@@ -30,7 +30,7 @@ impl cmplx : ops::mul<cmplx,cmplx> {\n     }\n }\n \n-impl cmplx : ops::add<cmplx,cmplx> {\n+impl cmplx : ops::Add<cmplx,cmplx> {\n     pure fn add(x: cmplx) -> cmplx {\n         cmplx {\n             re: self.re + x.re,"}, {"sha": "dcaa53d37fce14e92add2bdb6095eb04cb19a0d6", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=f393100b7ce86e0c1201f003c2d69fb9ea742db1", "patch": "@@ -3,7 +3,7 @@ struct Point {\n     y: int;\n }\n \n-impl Point : ops::add<int,int> {\n+impl Point : ops::Add<int,int> {\n     pure fn add(&&z: int) -> int {\n         self.x + self.y + z\n     }"}, {"sha": "92bde631fcf01b47f899c8685718fea8a81c1223", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f393100b7ce86e0c1201f003c2d69fb9ea742db1/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=f393100b7ce86e0c1201f003c2d69fb9ea742db1", "patch": "@@ -3,25 +3,25 @@ struct Point {\n     y: int;\n }\n \n-impl Point : ops::add<Point,Point> {\n+impl Point : ops::Add<Point,Point> {\n     pure fn add(other: Point) -> Point {\n         Point {x: self.x + other.x, y: self.y + other.y}\n     }\n }\n \n-impl Point : ops::sub<Point,Point> {\n+impl Point : ops::Sub<Point,Point> {\n     pure fn sub(other: Point) -> Point {\n         Point {x: self.x - other.x, y: self.y - other.y}\n     }\n }\n \n-impl Point : ops::neg<Point> {\n+impl Point : ops::Neg<Point> {\n     pure fn neg() -> Point {\n         Point {x: -self.x, y: -self.y}\n     }\n }\n \n-impl Point : ops::index<bool,int> {\n+impl Point : ops::Index<bool,int> {\n     pure fn index(&&x: bool) -> int {\n         if x { self.x } else { self.y }\n     }"}]}