{"sha": "c2d3cdc3dfe5cbf9a6a1d16e8bc57fe4532329da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZDNjZGMzZGZlNWNiZjlhNmExZDE2ZThiYzU3ZmU0NTMyMzI5ZGE=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-26T00:17:20Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-06T17:42:38Z"}, "message": "Progress towards pipes.", "tree": {"sha": "68cb5b88602bc0ab83c70b441877068d03ff3537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68cb5b88602bc0ab83c70b441877068d03ff3537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2d3cdc3dfe5cbf9a6a1d16e8bc57fe4532329da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d3cdc3dfe5cbf9a6a1d16e8bc57fe4532329da", "html_url": "https://github.com/rust-lang/rust/commit/c2d3cdc3dfe5cbf9a6a1d16e8bc57fe4532329da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2d3cdc3dfe5cbf9a6a1d16e8bc57fe4532329da/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61be3cc19e4c01cb0d9f9fac3ed52a0819c8fcc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/61be3cc19e4c01cb0d9f9fac3ed52a0819c8fcc5", "html_url": "https://github.com/rust-lang/rust/commit/61be3cc19e4c01cb0d9f9fac3ed52a0819c8fcc5"}], "stats": {"total": 98, "additions": 61, "deletions": 37}, "files": [{"sha": "a547186bd664b68f595afc955c12275e81250cd2", "filename": "src/test/run-pass/pipe-manual-2.rs", "status": "modified", "additions": 61, "deletions": 37, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/c2d3cdc3dfe5cbf9a6a1d16e8bc57fe4532329da/src%2Ftest%2Frun-pass%2Fpipe-manual-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d3cdc3dfe5cbf9a6a1d16e8bc57fe4532329da/src%2Ftest%2Frun-pass%2Fpipe-manual-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-manual-2.rs?ref=c2d3cdc3dfe5cbf9a6a1d16e8bc57fe4532329da", "patch": "@@ -68,7 +68,8 @@ mod pipes {\n         }\n     }\n \n-    fn send<T: send>(p: *packet<T>, -payload: T) {\n+    fn send<T: send>(-p: send_packet<T>, -payload: T) {\n+        let p = p.unwrap();\n         let p = unsafe { uniquify(p) };\n         assert (*p).payload == none;\n         (*p).payload <- some(payload);\n@@ -95,7 +96,8 @@ mod pipes {\n         }\n     }\n \n-    fn recv<T: send>(p: *packet<T>) -> option<T> {\n+    fn recv<T: send>(-p: recv_packet<T>) -> option<T> {\n+        let p = p.unwrap();\n         let p = unsafe { uniquify(p) };\n         loop {\n             let old_state = swap_state_acq((*p).state,\n@@ -148,67 +150,91 @@ mod pipes {\n           }\n         }\n     }\n+\n+    class send_packet<T: send> {\n+        let mut p: option<*packet<T>>;\n+        new(p: *packet<T>) { self.p = some(p); }\n+        drop {\n+            if self.p != none {\n+                let mut p = none;\n+                p <-> self.p;\n+                sender_terminate(option::unwrap(p))\n+            }\n+        }\n+        fn unwrap() -> *packet<T> {\n+            let mut p = none;\n+            p <-> self.p;\n+            option::unwrap(p)\n+        }\n+    }\n+\n+    class recv_packet<T: send> {\n+        let mut p: option<*packet<T>>;\n+        new(p: *packet<T>) { self.p = some(p); }\n+        drop {\n+            if self.p != none {\n+                let mut p = none;\n+                p <-> self.p;\n+                receiver_terminate(option::unwrap(p))\n+            }\n+        }\n+        fn unwrap() -> *packet<T> {\n+            let mut p = none;\n+            p <-> self.p;\n+            option::unwrap(p)\n+        }\n+    }\n+\n+    fn entangle<T: send>() -> (send_packet<T>, recv_packet<T>) {\n+        let p = packet();\n+        (send_packet(p), recv_packet(p))\n+    }\n }\n \n mod pingpong {\n     enum ping = *pipes::packet<pong>;\n     enum pong = *pipes::packet<ping>;\n \n     fn init() -> (client::ping, server::ping) {\n-        let p = pipes::packet();\n-        let p = pingpong::ping(p);\n-\n-        let client = client::ping(p);\n-        let server = server::ping(p);\n-\n-        (client, server)\n+        pipes::entangle()\n     }\n \n     mod client {\n-        enum ping = pingpong::ping;\n-        enum pong = pingpong::pong;\n+        type ping = pipes::send_packet<pingpong::ping>;\n+        type pong = pipes::recv_packet<pingpong::pong>;\n \n         fn do_ping(-c: ping) -> pong {\n-            let packet = pipes::packet();\n-            let packet = pingpong::pong(packet);\n+            let p = pipes::packet();\n \n-            pipes::send(**c, copy packet);\n-            pong(packet)\n+            pipes::send(c, pingpong::ping(p));\n+            pipes::recv_packet(p)\n         }\n \n         fn do_pong(-c: pong) -> (ping, ()) {\n-            let packet = pipes::recv(**c);\n-            alt packet {\n-              none {\n+            let packet = pipes::recv(c);\n+            if packet == none {\n                 fail \"sender closed the connection\"\n-              }\n-              some(new_packet) {\n-                (ping(new_packet), ())\n-              }\n             }\n+            (pipes::send_packet(*option::unwrap(packet)), ())\n         }\n     }\n \n     mod server {\n-        enum ping = pingpong::ping;\n-        enum pong = pingpong::pong;\n+        type ping = pipes::recv_packet<pingpong::ping>;\n+        type pong = pipes::send_packet<pingpong::pong>;\n \n         fn do_ping(-c: ping) -> (pong, ()) {\n-            let packet = pipes::recv(**c);\n-            alt packet {\n-              none { fail \"sender closed the connection\" }\n-              some(new_packet) {\n-                (pong(new_packet), ())\n-              }\n+            let packet = pipes::recv(c);\n+            if packet == none {\n+                fail \"sender closed the connection\"\n             }\n+            (pipes::send_packet(*option::unwrap(packet)), ())\n         }\n \n         fn do_pong(-c: pong) -> ping {\n-            let packet = pipes::packet();\n-            let packet = pingpong::ping(packet);\n-\n-            pipes::send(**c, copy packet);\n-            ping(packet)\n+            let p = pipes::packet();\n+            pipes::send(c, pingpong::pong(p));\n+            pipes::recv_packet(p)\n         }\n     }\n }\n@@ -218,15 +244,13 @@ fn client(-chan: pingpong::client::ping) {\n     log(error, \"Sent ping\");\n     let (chan, _data) = pingpong::client::do_pong(chan);\n     log(error, \"Received pong\");\n-    pipes::sender_terminate(**chan);\n }\n \n fn server(-chan: pingpong::server::ping) {\n     let (chan, _data) = pingpong::server::do_ping(chan);\n     log(error, \"Received ping\");\n     let chan = pingpong::server::do_pong(chan);\n     log(error, \"Sent pong\");\n-    pipes::receiver_terminate(**chan);\n }\n \n fn main() {"}]}