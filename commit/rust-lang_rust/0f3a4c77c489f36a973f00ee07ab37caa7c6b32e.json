{"sha": "0f3a4c77c489f36a973f00ee07ab37caa7c6b32e", "node_id": "C_kwDOAAsO6NoAKDBmM2E0Yzc3YzQ4OWYzNmE5NzNmMDBlZTA3YWIzN2NhYTdjNmIzMmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-12T06:45:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-12T06:45:28Z"}, "message": "Rollup merge of #91746 - ssomers:btree_tests, r=Mark-Simulacrum\n\nBtree: assert more API compatibility\n\nIntroducing a member such as `BTreeSet::min()` would silently break compatibility if no code calls the existing `BTreeSet::min(set)`. `BTreeSet` is the only btree class silently bringing in stable members, apart from many occurrences of `#[derive(Debug)]` on iterators.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "2d5a72cd75d55bbde571a67a24d76949af772f07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d5a72cd75d55bbde571a67a24d76949af772f07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f3a4c77c489f36a973f00ee07ab37caa7c6b32e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhtZqICRBK7hj4Ov3rIwAAL64IAI7zf2HXoDVKDqToPFpZG+0A\ng1MBEnevN+eRp4itWB0rfCVADVh9iIcLLEr3+4ymn1qT59rMOjdV1lt2Up+yXzF6\n2dOgS8fQsgYbL2CjW9pWCKbxvfr6zX43Jc0pIciVLIGbRRVR02gTuFtGwYlLlxrx\nX3srD2Duh799aARYH/5wmmwqpMXEnl8HPdtf774ydIlI3wCvr+sJ2FAmtFRNLaL1\n+E9vsZgnH6bKgUlEgcnO1rT4wvgxDpAadtoMlEa1XYlw2elLxefViJqMx2mIDI8l\nSIF4cMGanEvUblIVmO2bA8z0p7POFsmvGfKiX7mCIQxNQLyWpz790xIc0UTnQ78=\n=Gy9R\n-----END PGP SIGNATURE-----\n", "payload": "tree 2d5a72cd75d55bbde571a67a24d76949af772f07\nparent e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143\nparent cc35a11a393c3fca47a3b80db48c39c416f20bf6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639291528 +0100\ncommitter GitHub <noreply@github.com> 1639291528 +0100\n\nRollup merge of #91746 - ssomers:btree_tests, r=Mark-Simulacrum\n\nBtree: assert more API compatibility\n\nIntroducing a member such as `BTreeSet::min()` would silently break compatibility if no code calls the existing `BTreeSet::min(set)`. `BTreeSet` is the only btree class silently bringing in stable members, apart from many occurrences of `#[derive(Debug)]` on iterators.\n\nr? `@Mark-Simulacrum`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3a4c77c489f36a973f00ee07ab37caa7c6b32e", "html_url": "https://github.com/rust-lang/rust/commit/0f3a4c77c489f36a973f00ee07ab37caa7c6b32e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f3a4c77c489f36a973f00ee07ab37caa7c6b32e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "url": "https://api.github.com/repos/rust-lang/rust/commits/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143", "html_url": "https://github.com/rust-lang/rust/commit/e70e4d499dd9dd1f7ff3717b9d91ca5dd0757143"}, {"sha": "cc35a11a393c3fca47a3b80db48c39c416f20bf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc35a11a393c3fca47a3b80db48c39c416f20bf6", "html_url": "https://github.com/rust-lang/rust/commit/cc35a11a393c3fca47a3b80db48c39c416f20bf6"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "c95aeeaa605586abb9c138e7ae244083c1e55c2b", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f3a4c77c489f36a973f00ee07ab37caa7c6b32e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3a4c77c489f36a973f00ee07ab37caa7c6b32e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=0f3a4c77c489f36a973f00ee07ab37caa7c6b32e", "patch": "@@ -1556,7 +1556,7 @@ fn test_clone_from() {\n }\n \n #[allow(dead_code)]\n-fn test_variance() {\n+fn assert_covariance() {\n     fn map_key<'new>(v: BTreeMap<&'static str, ()>) -> BTreeMap<&'new str, ()> {\n         v\n     }\n@@ -1615,7 +1615,7 @@ fn test_variance() {\n }\n \n #[allow(dead_code)]\n-fn test_sync() {\n+fn assert_sync() {\n     fn map<T: Sync>(v: &BTreeMap<T, T>) -> impl Sync + '_ {\n         v\n     }\n@@ -1684,7 +1684,7 @@ fn test_sync() {\n }\n \n #[allow(dead_code)]\n-fn test_send() {\n+fn assert_send() {\n     fn map<T: Send>(v: BTreeMap<T, T>) -> impl Send {\n         v\n     }"}, {"sha": "7390ff5a59c8cd5b7908e53d04a2fa09e2108295", "filename": "library/alloc/src/collections/btree/set/tests.rs", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0f3a4c77c489f36a973f00ee07ab37caa7c6b32e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3a4c77c489f36a973f00ee07ab37caa7c6b32e/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset%2Ftests.rs?ref=0f3a4c77c489f36a973f00ee07ab37caa7c6b32e", "patch": "@@ -3,6 +3,7 @@ use super::super::testing::rng::DeterministicRng;\n use super::*;\n use crate::vec::Vec;\n use std::cmp::Ordering;\n+use std::hash::{Hash, Hasher};\n use std::iter::FromIterator;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n \n@@ -513,7 +514,7 @@ fn test_recovery() {\n }\n \n #[allow(dead_code)]\n-fn test_variance() {\n+fn assert_covariance() {\n     fn set<'new>(v: BTreeSet<&'static str>) -> BTreeSet<&'new str> {\n         v\n     }\n@@ -530,7 +531,7 @@ fn test_variance() {\n }\n \n #[allow(dead_code)]\n-fn test_sync() {\n+fn assert_sync() {\n     fn set<T: Sync>(v: &BTreeSet<T>) -> impl Sync + '_ {\n         v\n     }\n@@ -569,7 +570,7 @@ fn test_sync() {\n }\n \n #[allow(dead_code)]\n-fn test_send() {\n+fn assert_send() {\n     fn set<T: Send>(v: BTreeSet<T>) -> impl Send {\n         v\n     }\n@@ -607,6 +608,37 @@ fn test_send() {\n     }\n }\n \n+#[allow(dead_code)]\n+// Check that the member-like functions conditionally provided by #[derive()]\n+// are not overriden by genuine member functions with a different signature.\n+fn assert_derives() {\n+    fn hash<T: Hash, H: Hasher>(v: BTreeSet<T>, state: &mut H) {\n+        v.hash(state);\n+        // Tested much more thoroughly outside the crate in btree_set_hash.rs\n+    }\n+    fn eq<T: PartialEq>(v: BTreeSet<T>) {\n+        let _ = v.eq(&v);\n+    }\n+    fn ne<T: PartialEq>(v: BTreeSet<T>) {\n+        let _ = v.ne(&v);\n+    }\n+    fn cmp<T: Ord>(v: BTreeSet<T>) {\n+        let _ = v.cmp(&v);\n+    }\n+    fn min<T: Ord>(v: BTreeSet<T>, w: BTreeSet<T>) {\n+        let _ = v.min(w);\n+    }\n+    fn max<T: Ord>(v: BTreeSet<T>, w: BTreeSet<T>) {\n+        let _ = v.max(w);\n+    }\n+    fn clamp<T: Ord>(v: BTreeSet<T>, w: BTreeSet<T>, x: BTreeSet<T>) {\n+        let _ = v.clamp(w, x);\n+    }\n+    fn partial_cmp<T: PartialOrd>(v: &BTreeSet<T>) {\n+        let _ = v.partial_cmp(&v);\n+    }\n+}\n+\n #[test]\n fn test_ord_absence() {\n     fn set<K>(mut set: BTreeSet<K>) {"}]}