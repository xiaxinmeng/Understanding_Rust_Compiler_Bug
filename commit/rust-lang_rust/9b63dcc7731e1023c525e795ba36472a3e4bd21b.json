{"sha": "9b63dcc7731e1023c525e795ba36472a3e4bd21b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNjNkY2M3NzMxZTEwMjNjNTI1ZTc5NWJhMzY0NzJhM2U0YmQyMWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-17T16:15:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:38:26Z"}, "message": "split out getting the declared bounds from the env versus trait\n\nRight now, we just concatenate them", "tree": {"sha": "11fc4c0173b32d39cfc57d106a843a30940489f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11fc4c0173b32d39cfc57d106a843a30940489f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b63dcc7731e1023c525e795ba36472a3e4bd21b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b63dcc7731e1023c525e795ba36472a3e4bd21b", "html_url": "https://github.com/rust-lang/rust/commit/9b63dcc7731e1023c525e795ba36472a3e4bd21b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b63dcc7731e1023c525e795ba36472a3e4bd21b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0e1fec33251c02080403f89a11a78ba452464c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e1fec33251c02080403f89a11a78ba452464c0", "html_url": "https://github.com/rust-lang/rust/commit/b0e1fec33251c02080403f89a11a78ba452464c0"}], "stats": {"total": 61, "additions": 38, "deletions": 23}, "files": [{"sha": "2db1c5e3d303d3677f7f6eb78a04960606ae888d", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9b63dcc7731e1023c525e795ba36472a3e4bd21b/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b63dcc7731e1023c525e795ba36472a3e4bd21b/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=9b63dcc7731e1023c525e795ba36472a3e4bd21b", "patch": "@@ -391,16 +391,18 @@ where\n         // Compute the bounds we can derive from the environment or trait\n         // definition.  We know that the projection outlives all the\n         // regions in this list.\n-        let env_bounds = self.verify_bound.projection_declared_bounds(projection_ty);\n+        let mut declared_bounds = self.verify_bound\n+            .projection_declared_bounds_from_env(projection_ty);\n \n-        debug!(\"projection_must_outlive: env_bounds={:?}\", env_bounds);\n+        declared_bounds.extend(\n+            self.verify_bound\n+                .projection_declared_bounds_from_trait(projection_ty),\n+        );\n \n-        // If we know that the projection outlives 'static, then we're\n-        // done here.\n-        if env_bounds.contains(&&ty::ReStatic) {\n-            debug!(\"projection_must_outlive: 'static as declared bound\");\n-            return;\n-        }\n+        debug!(\n+            \"projection_must_outlive: declared_bounds={:?}\",\n+            declared_bounds\n+        );\n \n         // If declared bounds list is empty, the only applicable rule is\n         // OutlivesProjectionComponent. If there are inference variables,\n@@ -417,7 +419,7 @@ where\n         // inference variables, we use a verify constraint instead of adding\n         // edges, which winds up enforcing the same condition.\n         let needs_infer = projection_ty.needs_infer();\n-        if env_bounds.is_empty() && needs_infer {\n+        if declared_bounds.is_empty() && needs_infer {\n             debug!(\"projection_must_outlive: no declared bounds\");\n \n             for component_ty in projection_ty.substs.types() {\n@@ -440,16 +442,20 @@ where\n         // the requirement that `'b:'r`\n         // - OutlivesProjectionComponent: this would require `'b:'r` in addition to\n         // other conditions\n-        if !env_bounds.is_empty() && env_bounds[1..].iter().all(|b| *b == env_bounds[0]) {\n-            let unique_bound = env_bounds[0];\n+        if !declared_bounds.is_empty()\n+            && declared_bounds[1..]\n+                .iter()\n+                .all(|b| *b == declared_bounds[0])\n+        {\n+            let unique_bound = declared_bounds[0];\n             debug!(\n                 \"projection_must_outlive: unique declared bound = {:?}\",\n                 unique_bound\n             );\n             if projection_ty\n                 .substs\n                 .regions()\n-                .any(|r| env_bounds.contains(&r))\n+                .any(|r| declared_bounds.contains(&r))\n             {\n                 debug!(\"projection_must_outlive: unique declared bound appears in trait ref\");\n                 self.delegate"}, {"sha": "cd4f3c3e5dc33cb7822dd738bd28a545db6cfdca", "filename": "src/librustc/infer/outlives/verify.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9b63dcc7731e1023c525e795ba36472a3e4bd21b/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b63dcc7731e1023c525e795ba36472a3e4bd21b/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fverify.rs?ref=9b63dcc7731e1023c525e795ba36472a3e4bd21b", "patch": "@@ -72,22 +72,26 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n         VerifyBound::AnyRegion(param_bounds)\n     }\n \n+    /// Given a projection like `T::Item`, searches the environment\n+    /// for where-clauses like `T::Item: 'a`. Returns the set of\n+    /// regions `'a` that it finds.  This is a \"conservative\" check --\n+    /// it may not find all applicable bounds, but all the bounds it\n+    /// returns can be relied upon.\n+    pub fn projection_declared_bounds_from_env(\n+        &self,\n+        projection_ty: ty::ProjectionTy<'tcx>,\n+    ) -> Vec<ty::Region<'tcx>> {\n+        self.declared_generic_bounds_from_env(GenericKind::Projection(projection_ty))\n+    }\n+\n     /// Searches the where clauses in scope for regions that\n     /// `projection_ty` is known to outlive. Currently requires an\n     /// exact match.\n-    pub fn projection_declared_bounds(\n+    pub fn projection_declared_bounds_from_trait(\n         &self,\n         projection_ty: ty::ProjectionTy<'tcx>,\n     ) -> Vec<ty::Region<'tcx>> {\n-        // First assemble bounds from where clauses and traits.\n-\n-        let mut declared_bounds =\n-            self.declared_generic_bounds_from_env(GenericKind::Projection(projection_ty));\n-\n-        declared_bounds\n-            .extend_from_slice(&self.declared_projection_bounds_from_trait(projection_ty));\n-\n-        declared_bounds\n+        self.declared_projection_bounds_from_trait(projection_ty)\n     }\n \n     pub fn projection_bound(\n@@ -99,7 +103,12 @@ impl<'cx, 'gcx, 'tcx> VerifyBoundCx<'cx, 'gcx, 'tcx> {\n             projection_ty\n         );\n \n-        let declared_bounds = self.projection_declared_bounds(projection_ty);\n+        let mut declared_bounds =\n+            self.projection_declared_bounds_from_env(projection_ty);\n+\n+        declared_bounds.extend(\n+            self.projection_declared_bounds_from_trait(projection_ty)\n+        );\n \n         debug!(\"projection_bound: declared_bounds = {:?}\", declared_bounds);\n "}]}