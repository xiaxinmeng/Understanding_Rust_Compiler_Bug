{"sha": "0ac8542abc0a2497cda02dcc0544c0da6f46644f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhYzg1NDJhYmMwYTI0OTdjZGEwMmRjYzA1NDRjMGRhNmY0NjY0NGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-08T13:50:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-18T12:47:36Z"}, "message": "make `mk_closure` take a `ClosureSubsts`", "tree": {"sha": "9d668eb02f047ec433f3e7cba1e46ac138259f52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d668eb02f047ec433f3e7cba1e46ac138259f52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ac8542abc0a2497cda02dcc0544c0da6f46644f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ac8542abc0a2497cda02dcc0544c0da6f46644f", "html_url": "https://github.com/rust-lang/rust/commit/0ac8542abc0a2497cda02dcc0544c0da6f46644f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ac8542abc0a2497cda02dcc0544c0da6f46644f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3349e7bb45c18485f1ba090f0f80bda67abd214e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3349e7bb45c18485f1ba090f0f80bda67abd214e", "html_url": "https://github.com/rust-lang/rust/commit/3349e7bb45c18485f1ba090f0f80bda67abd214e"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "c4727c820b11baff259a130bc465bf79a91a8171", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8542abc0a2497cda02dcc0544c0da6f46644f/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8542abc0a2497cda02dcc0544c0da6f46644f/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=0ac8542abc0a2497cda02dcc0544c0da6f46644f", "patch": "@@ -256,7 +256,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n                         let closure_sig = this.infcx.fn_sig(def_id);\n                         (tcx.mk_fn_ptr(closure_sig.fold_with(this)), tcx.types.char)\n                     },\n-                    |substs| tcx.mk_closure(def_id, substs)\n+                    |substs| tcx.mk_closure(def_id, ty::ClosureSubsts { substs })\n                 )\n             }\n "}, {"sha": "a3fe8398de21185059691337227e29cbaa7a92e7", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8542abc0a2497cda02dcc0544c0da6f46644f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8542abc0a2497cda02dcc0544c0da6f46644f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=0ac8542abc0a2497cda02dcc0544c0da6f46644f", "patch": "@@ -1981,11 +1981,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn mk_closure(self,\n                       closure_id: DefId,\n-                      substs: &'tcx Substs<'tcx>)\n-        -> Ty<'tcx> {\n-        self.mk_closure_from_closure_substs(closure_id, ClosureSubsts {\n-            substs,\n-        })\n+                      substs: ClosureSubsts<'tcx>)\n+                      -> Ty<'tcx> {\n+        self.mk_closure_from_closure_substs(closure_id, substs)\n     }\n \n     pub fn mk_closure_from_closure_substs(self,"}, {"sha": "1f96afe3ac882d809af392519eaf99a61dd8cf47", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8542abc0a2497cda02dcc0544c0da6f46644f/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8542abc0a2497cda02dcc0544c0da6f46644f/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=0ac8542abc0a2497cda02dcc0544c0da6f46644f", "patch": "@@ -103,11 +103,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     .next_ty_var(TypeVariableOrigin::ClosureSynthetic(expr.span))\n             },\n         );\n+        let substs = ty::ClosureSubsts { substs };\n         let closure_type = self.tcx.mk_closure(expr_def_id, substs);\n \n         if let Some(interior) = interior {\n-            let closure_substs = ty::ClosureSubsts { substs: substs };\n-            return self.tcx.mk_generator(expr_def_id, closure_substs, interior);\n+            return self.tcx.mk_generator(expr_def_id, substs, interior);\n         }\n \n         debug!("}, {"sha": "8365081f5a7b76c9e92dedef98ecbca43def4051", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0ac8542abc0a2497cda02dcc0544c0da6f46644f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ac8542abc0a2497cda02dcc0544c0da6f46644f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=0ac8542abc0a2497cda02dcc0544c0da6f46644f", "patch": "@@ -1163,14 +1163,19 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 return tcx.typeck_tables_of(def_id).node_id_to_type(hir_id);\n             }\n \n-            tcx.mk_closure(def_id, Substs::for_item(\n-                tcx, def_id,\n-                |def, _| {\n-                    let region = def.to_early_bound_region_data();\n-                    tcx.mk_region(ty::ReEarlyBound(region))\n-                },\n-                |def, _| tcx.mk_param_from_def(def)\n-            ))\n+            let substs = ty::ClosureSubsts {\n+                substs: Substs::for_item(\n+                    tcx,\n+                    def_id,\n+                    |def, _| {\n+                        let region = def.to_early_bound_region_data();\n+                        tcx.mk_region(ty::ReEarlyBound(region))\n+                    },\n+                    |def, _| tcx.mk_param_from_def(def)\n+                )\n+            };\n+\n+            tcx.mk_closure(def_id, substs)\n         }\n \n         NodeExpr(_) => match tcx.hir.get(tcx.hir.get_parent_node(node_id)) {"}]}