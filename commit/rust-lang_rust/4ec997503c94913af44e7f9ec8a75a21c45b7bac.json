{"sha": "4ec997503c94913af44e7f9ec8a75a21c45b7bac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYzk5NzUwM2M5NDkxM2FmNDRlN2Y5ZWM4YTc1YTIxYzQ1YjdiYWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-09T11:57:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-09T11:57:44Z"}, "message": "Rollup merge of #69201 - Aaron1011:feature/permit-if-attr, r=Centril\n\nPermit attributes on 'if' expressions\n\nPreviously, attributes on 'if' expressions (e.g. `#[attr] if true {}`)\nwere disallowed during parsing. This made it impossible for macros to\nperform any custom handling of such attributes (e.g. stripping them\naway), since a compilation error would be emitted before they ever had a\nchance to run.\n\nThis PR permits attributes on 'if' expressions ('if-attrs' from here on).\nBoth built-in attributes (e.g. `#[allow]`, `#[cfg]`) and proc-macro attributes are supported.\n\nWe still do *not* accept attributes on 'other parts' of an if-else\nchain. That is, the following code snippet still fails to parse:\n\n```rust\nif true {} #[attr] else if false {} else #[attr] if false {} #[attr]\nelse {}\n```\n\nCloses https://github.com/rust-lang/rust/issues/68618", "tree": {"sha": "116ba3c94f542cf5860f1b7fb38689eca96742ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/116ba3c94f542cf5860f1b7fb38689eca96742ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ec997503c94913af44e7f9ec8a75a21c45b7bac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeZi85CRBK7hj4Ov3rIwAAdHIIAEy+9mexTt8MNQSW54dGr0rt\nqeoTFpl90uUzqpIfFigM0obaMYvk3CjkfSqXuUNf8V4xUuTPJAPq+/G1QYYTWuDr\n2s95QecytgXMRRC0c6X+fI+C7szyYgEtHV9gw0xHqOsQKUxtE3onWgnGeW5Z8oMv\n7bz07z98rH8Bh1E4sMnrT1Jl0tFAjnb8eEEN4kebHJw9wx6gEu80qzde2OJ1jmH3\njoeQv9inNVFlt3bZxGK4EtQq7RChUpD1jksiyx5sJErBEl8E90BD8lUgiT3xCgt0\naNo/hOjnzYmE5iKr66bwM+gBFNejLTxyEFYMovJy8pGr3i+97fXZZShaCzq/eyA=\n=bGxM\n-----END PGP SIGNATURE-----\n", "payload": "tree 116ba3c94f542cf5860f1b7fb38689eca96742ed\nparent 2cb0b8582ebbf9784db9cec06fff517badbf4553\nparent e50fd5a3dc587b5b970b6b969eff7e8547dede70\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583755064 +0100\ncommitter GitHub <noreply@github.com> 1583755064 +0100\n\nRollup merge of #69201 - Aaron1011:feature/permit-if-attr, r=Centril\n\nPermit attributes on 'if' expressions\n\nPreviously, attributes on 'if' expressions (e.g. `#[attr] if true {}`)\nwere disallowed during parsing. This made it impossible for macros to\nperform any custom handling of such attributes (e.g. stripping them\naway), since a compilation error would be emitted before they ever had a\nchance to run.\n\nThis PR permits attributes on 'if' expressions ('if-attrs' from here on).\nBoth built-in attributes (e.g. `#[allow]`, `#[cfg]`) and proc-macro attributes are supported.\n\nWe still do *not* accept attributes on 'other parts' of an if-else\nchain. That is, the following code snippet still fails to parse:\n\n```rust\nif true {} #[attr] else if false {} else #[attr] if false {} #[attr]\nelse {}\n```\n\nCloses https://github.com/rust-lang/rust/issues/68618\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec997503c94913af44e7f9ec8a75a21c45b7bac", "html_url": "https://github.com/rust-lang/rust/commit/4ec997503c94913af44e7f9ec8a75a21c45b7bac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ec997503c94913af44e7f9ec8a75a21c45b7bac/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cb0b8582ebbf9784db9cec06fff517badbf4553", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cb0b8582ebbf9784db9cec06fff517badbf4553", "html_url": "https://github.com/rust-lang/rust/commit/2cb0b8582ebbf9784db9cec06fff517badbf4553"}, {"sha": "e50fd5a3dc587b5b970b6b969eff7e8547dede70", "url": "https://api.github.com/repos/rust-lang/rust/commits/e50fd5a3dc587b5b970b6b969eff7e8547dede70", "html_url": "https://github.com/rust-lang/rust/commit/e50fd5a3dc587b5b970b6b969eff7e8547dede70"}], "stats": {"total": 368, "additions": 248, "deletions": 120}, "files": [{"sha": "ac72fc9b013572df1c583ab36d7f99e470e3207e", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=4ec997503c94913af44e7f9ec8a75a21c45b7bac", "patch": "@@ -718,20 +718,11 @@ impl<'a> Parser<'a> {\n             expr.map(|mut expr| {\n                 attrs.extend::<Vec<_>>(expr.attrs.into());\n                 expr.attrs = attrs;\n-                self.error_attr_on_if_expr(&expr);\n                 expr\n             })\n         })\n     }\n \n-    fn error_attr_on_if_expr(&self, expr: &Expr) {\n-        if let (ExprKind::If(..), [a0, ..]) = (&expr.kind, &*expr.attrs) {\n-            // Just point to the first attribute in there...\n-            self.struct_span_err(a0.span, \"attributes are not yet allowed on `if` expressions\")\n-                .emit();\n-        }\n-    }\n-\n     fn parse_dot_or_call_expr_with_(&mut self, mut e: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n         loop {\n             if self.eat(&token::Question) {"}, {"sha": "652604fc7f34b2808e6af7db558ab27189ab332e", "filename": "src/test/pretty/if-attr.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fpretty%2Fif-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fpretty%2Fif-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fif-attr.rs?ref=4ec997503c94913af44e7f9ec8a75a21c45b7bac", "patch": "@@ -0,0 +1,37 @@\n+// pp-exact\n+\n+#[cfg(FALSE)]\n+fn simple_attr() {\n+\n+    #[attr]\n+    if true { }\n+\n+    #[allow_warnings]\n+    if true { }\n+}\n+\n+#[cfg(FALSE)]\n+fn if_else_chain() {\n+\n+    #[first_attr]\n+    if true { } else if false { } else { }\n+}\n+\n+#[cfg(FALSE)]\n+fn if_let() {\n+\n+    #[attr]\n+    if let Some(_) = Some(true) { }\n+}\n+\n+#[cfg(FALSE)]\n+fn let_attr_if() {\n+    let _ = #[attr] if let _ = 0 { };\n+    let _ = #[attr] if true { };\n+\n+    let _ = #[attr] if let _ = 0 { } else { };\n+    let _ = #[attr] if true { } else { };\n+}\n+\n+\n+fn main() { }"}, {"sha": "3f84929a00e4f4e5a1896ab93cf6a55946b83c17", "filename": "src/test/ui/if-attrs/bad-cfg.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Fbad-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Fbad-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-attrs%2Fbad-cfg.rs?ref=4ec997503c94913af44e7f9ec8a75a21c45b7bac", "patch": "@@ -0,0 +1,5 @@\n+#![feature(stmt_expr_attributes)]\n+\n+fn main() {\n+    let _ = #[cfg(FALSE)] if true {}; //~ ERROR removing an expression\n+}"}, {"sha": "8a2890886a15c9a9b8c951507b48fcddddce2af3", "filename": "src/test/ui/if-attrs/bad-cfg.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Fbad-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Fbad-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-attrs%2Fbad-cfg.stderr?ref=4ec997503c94913af44e7f9ec8a75a21c45b7bac", "patch": "@@ -0,0 +1,8 @@\n+error: removing an expression is not supported in this position\n+  --> $DIR/bad-cfg.rs:4:13\n+   |\n+LL |     let _ = #[cfg(FALSE)] if true {};\n+   |             ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7e290661501c9c36eb05c0e395a9e27e5c5b0bc3", "filename": "src/test/ui/if-attrs/builtin-if-attr.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Fbuiltin-if-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Fbuiltin-if-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-attrs%2Fbuiltin-if-attr.rs?ref=4ec997503c94913af44e7f9ec8a75a21c45b7bac", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+fn main() {\n+    #[allow(unused_variables)]\n+    if true {\n+        let a = 1;\n+    } else if false {\n+        let b = 1;\n+    } else {\n+        let c = 1;\n+    }\n+}"}, {"sha": "1f77a1bb3427db868b975ebdf12473ab5e147542", "filename": "src/test/ui/if-attrs/cfg-false-if-attr.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Fcfg-false-if-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Fcfg-false-if-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-attrs%2Fcfg-false-if-attr.rs?ref=4ec997503c94913af44e7f9ec8a75a21c45b7bac", "patch": "@@ -0,0 +1,43 @@\n+// check-pass\n+\n+#[cfg(FALSE)]\n+fn simple_attr() {\n+    #[attr] if true {}\n+    #[allow_warnings] if true {}\n+}\n+\n+#[cfg(FALSE)]\n+fn if_else_chain() {\n+    #[first_attr] if true {\n+    } else if false {\n+    } else {\n+    }\n+}\n+\n+#[cfg(FALSE)]\n+fn if_let() {\n+    #[attr] if let Some(_) = Some(true) {}\n+}\n+\n+fn bar() {\n+    #[cfg(FALSE)]\n+    if true {\n+        let x: () = true; // Should not error due to the #[cfg(FALSE)]\n+    }\n+\n+    #[cfg_attr(not(unset_attr), cfg(FALSE))]\n+    if true {\n+        let a: () = true; // Should not error due to the applied #[cfg(FALSE)]\n+    }\n+}\n+\n+macro_rules! custom_macro {\n+    ($expr:expr) => {}\n+}\n+\n+custom_macro! {\n+    #[attr] if true {}\n+}\n+\n+\n+fn main() {}"}, {"sha": "4394b2100c1b547229b80127d66e1795ddc20d9d", "filename": "src/test/ui/if-attrs/else-attrs.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Felse-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Felse-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-attrs%2Felse-attrs.rs?ref=4ec997503c94913af44e7f9ec8a75a21c45b7bac", "patch": "@@ -0,0 +1,25 @@\n+#[cfg(FALSE)]\n+fn if_else_parse_error() {\n+    if true {\n+    } #[attr] else if false { //~ ERROR expected\n+    }\n+}\n+\n+#[cfg(FALSE)]\n+fn else_attr_ifparse_error() {\n+    if true {\n+    } else #[attr] if false { //~ ERROR expected\n+    } else {\n+    }\n+}\n+\n+#[cfg(FALSE)]\n+fn else_parse_error() {\n+    if true {\n+    } else if false {\n+    } #[attr] else { //~ ERROR expected\n+    }\n+}\n+\n+fn main() {\n+}"}, {"sha": "af25b6abc0a3ad77a2efe11125da7c9d0fe7bdb1", "filename": "src/test/ui/if-attrs/else-attrs.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Felse-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Felse-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-attrs%2Felse-attrs.stderr?ref=4ec997503c94913af44e7f9ec8a75a21c45b7bac", "patch": "@@ -0,0 +1,27 @@\n+error: expected expression, found keyword `else`\n+  --> $DIR/else-attrs.rs:4:15\n+   |\n+LL |     } #[attr] else if false {\n+   |               ^^^^ expected expression\n+\n+error: expected `{`, found `#`\n+  --> $DIR/else-attrs.rs:11:12\n+   |\n+LL |     } else #[attr] if false {\n+   |            ^ expected `{`\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |     } else #[attr] { if false {\n+LL |     } else {\n+LL |     } }\n+   |\n+\n+error: expected expression, found keyword `else`\n+  --> $DIR/else-attrs.rs:20:15\n+   |\n+LL |     } #[attr] else {\n+   |               ^^^^ expected expression\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "63772d54b531dacdaca24a706900e90abf75683f", "filename": "src/test/ui/if-attrs/gate-whole-expr.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Fgate-whole-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Fgate-whole-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-attrs%2Fgate-whole-expr.rs?ref=4ec997503c94913af44e7f9ec8a75a21c45b7bac", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+\n+fn main() {\n+    let x = 1;\n+\n+    #[cfg(FALSE)]\n+    if false {\n+        x = 2;\n+    } else if true {\n+        x = 3;\n+    } else {\n+        x = 4;\n+    }\n+    assert_eq!(x, 1);\n+}"}, {"sha": "5237a9ff3961a060c3d459f0e985bddc2bad9a16", "filename": "src/test/ui/if-attrs/let-chains-attr.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Flet-chains-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Flet-chains-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-attrs%2Flet-chains-attr.rs?ref=4ec997503c94913af44e7f9ec8a75a21c45b7bac", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+#![feature(let_chains)] //~ WARN the feature `let_chains` is incomplete\n+\n+#[cfg(FALSE)]\n+fn foo() {\n+    #[attr]\n+    if let Some(_) = Some(true) && let Ok(_) = Ok(1) {\n+    } else if let Some(false) = Some(true) {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a6c91bb9203b3b180ea37b3a46ae3cb6234e4316", "filename": "src/test/ui/if-attrs/let-chains-attr.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Flet-chains-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Flet-chains-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-attrs%2Flet-chains-attr.stderr?ref=4ec997503c94913af44e7f9ec8a75a21c45b7bac", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `let_chains` is incomplete and may cause the compiler to crash\n+  --> $DIR/let-chains-attr.rs:3:12\n+   |\n+LL | #![feature(let_chains)]\n+   |            ^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "38599c8e67c4e94dbd4ccbd66b40987957065df0", "filename": "src/test/ui/if-attrs/stmt-expr-gated.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Fstmt-expr-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Fstmt-expr-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-attrs%2Fstmt-expr-gated.rs?ref=4ec997503c94913af44e7f9ec8a75a21c45b7bac", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let _ = #[deny(warnings)] if true { //~ ERROR attributes on expressions\n+    } else if false {\n+    } else {\n+    };\n+}"}, {"sha": "47dac39a9ae88563bcbfd92ed05bc5f0ad4c6302", "filename": "src/test/ui/if-attrs/stmt-expr-gated.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Fstmt-expr-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fif-attrs%2Fstmt-expr-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif-attrs%2Fstmt-expr-gated.stderr?ref=4ec997503c94913af44e7f9ec8a75a21c45b7bac", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/stmt-expr-gated.rs:2:13\n+   |\n+LL |     let _ = #[deny(warnings)] if true {\n+   |             ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "f3980a596481c2cd4fb6acf14ce68f983f3dc569", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.rs?ref=4ec997503c94913af44e7f9ec8a75a21c45b7bac", "patch": "@@ -38,8 +38,6 @@ fn main() {}\n //~^ ERROR an inner attribute is not permitted in this context\n #[cfg(FALSE)] fn e() { let _ = #[attr] &mut #![attr] 0; }\n //~^ ERROR an inner attribute is not permitted in this context\n-#[cfg(FALSE)] fn e() { let _ = #[attr] if 0 {}; }\n-//~^ ERROR attributes are not yet allowed on `if` expressions\n #[cfg(FALSE)] fn e() { let _ = if 0 #[attr] {}; }\n //~^ ERROR expected `{`, found `#`\n #[cfg(FALSE)] fn e() { let _ = if 0 {#![attr]}; }\n@@ -51,14 +49,11 @@ fn main() {}\n #[cfg(FALSE)] fn e() { let _ = if 0 {} else {#![attr]}; }\n //~^ ERROR an inner attribute is not permitted in this context\n #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] if 0 {}; }\n-//~^ ERROR attributes are not yet allowed on `if` expressions\n-//~| ERROR expected `{`, found `#`\n+//~^ ERROR expected `{`, found `#`\n #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 #[attr] {}; }\n //~^ ERROR expected `{`, found `#`\n #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 {#![attr]}; }\n //~^ ERROR an inner attribute is not permitted in this context\n-#[cfg(FALSE)] fn e() { let _ = #[attr] if let _ = 0 {}; }\n-//~^ ERROR attributes are not yet allowed on `if` expressions\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 #[attr] {}; }\n //~^ ERROR expected `{`, found `#`\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {#![attr]}; }\n@@ -70,8 +65,7 @@ fn main() {}\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else {#![attr]}; }\n //~^ ERROR an inner attribute is not permitted in this context\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] if let _ = 0 {}; }\n-//~^ ERROR attributes are not yet allowed on `if` expressions\n-//~| ERROR expected `{`, found `#`\n+//~^ ERROR expected `{`, found `#`\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 #[attr] {}; }\n //~^ ERROR expected `{`, found `#`\n #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 {#![attr]}; }"}, {"sha": "4dcba27cb68db7909309354ee28db603b2173979", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.stderr", "status": "modified", "additions": 35, "deletions": 59, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ec997503c94913af44e7f9ec8a75a21c45b7bac/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr?ref=4ec997503c94913af44e7f9ec8a75a21c45b7bac", "patch": "@@ -136,14 +136,8 @@ LL | #[cfg(FALSE)] fn e() { let _ = #[attr] &mut #![attr] 0; }\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n-error: attributes are not yet allowed on `if` expressions\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:41:32\n-   |\n-LL | #[cfg(FALSE)] fn e() { let _ = #[attr] if 0 {}; }\n-   |                                ^^^^^^^\n-\n error: expected `{`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:43:37\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:41:37\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 #[attr] {}; }\n    |                                --   ^       --- help: try placing this code inside a block: `{ {}; }`\n@@ -152,51 +146,45 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 #[attr] {}; }\n    |                                this `if` expression has a condition, but no block\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:45:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:43:38\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {#![attr]}; }\n    |                                      ^^^^^^^^\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:47:40\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:45:40\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} #[attr] else {}; }\n    |                                        ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n error: expected `{`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:49:45\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:47:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] {}; }\n    |                                             ^       --- help: try placing this code inside a block: `{ {}; }`\n    |                                             |\n    |                                             expected `{`\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:51:46\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:49:46\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else {#![attr]}; }\n    |                                              ^^^^^^^^\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n-error: attributes are not yet allowed on `if` expressions\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:53:45\n-   |\n-LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] if 0 {}; }\n-   |                                             ^^^^^^^\n-\n error: expected `{`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:53:45\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:51:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else #[attr] if 0 {}; }\n    |                                             ^       -------- help: try placing this code inside a block: `{ if 0 {}; }`\n    |                                             |\n    |                                             expected `{`\n \n error: expected `{`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:56:50\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:53:50\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 #[attr] {}; }\n    |                                             --   ^       --- help: try placing this code inside a block: `{ {}; }`\n@@ -205,21 +193,15 @@ LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 #[attr] {}; }\n    |                                             this `if` expression has a condition, but no block\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:58:51\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:55:51\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if 0 {} else if 0 {#![attr]}; }\n    |                                                   ^^^^^^^^\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n-error: attributes are not yet allowed on `if` expressions\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:60:32\n-   |\n-LL | #[cfg(FALSE)] fn e() { let _ = #[attr] if let _ = 0 {}; }\n-   |                                ^^^^^^^\n-\n error: expected `{`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:62:45\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:57:45\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 #[attr] {}; }\n    |                                --           ^       --- help: try placing this code inside a block: `{ {}; }`\n@@ -228,51 +210,45 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 #[attr] {}; }\n    |                                this `if` expression has a condition, but no block\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:64:46\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:59:46\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {#![attr]}; }\n    |                                              ^^^^^^^^\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error: expected one of `.`, `;`, `?`, `else`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:66:48\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:61:48\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} #[attr] else {}; }\n    |                                                ^ expected one of `.`, `;`, `?`, `else`, or an operator\n \n error: expected `{`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:68:53\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:63:53\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] {}; }\n    |                                                     ^       --- help: try placing this code inside a block: `{ {}; }`\n    |                                                     |\n    |                                                     expected `{`\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:70:54\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:65:54\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else {#![attr]}; }\n    |                                                      ^^^^^^^^\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n-error: attributes are not yet allowed on `if` expressions\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:72:53\n-   |\n-LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] if let _ = 0 {}; }\n-   |                                                     ^^^^^^^\n-\n error: expected `{`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:72:53\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:67:53\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else #[attr] if let _ = 0 {}; }\n    |                                                     ^       ---------------- help: try placing this code inside a block: `{ if let _ = 0 {}; }`\n    |                                                     |\n    |                                                     expected `{`\n \n error: expected `{`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:75:66\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:69:66\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 #[attr] {}; }\n    |                                                     --           ^       --- help: try placing this code inside a block: `{ {}; }`\n@@ -281,15 +257,15 @@ LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 #[attr] {}\n    |                                                     this `if` expression has a condition, but no block\n \n error: an inner attribute is not permitted in this context\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:77:67\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:71:67\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = if let _ = 0 {} else if let _ = 0 {#![attr]}; }\n    |                                                                   ^^^^^^^^\n    |\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:80:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:74:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] let _ = 0; }\n    |                        ------- ^^^^^^^^ not permitted following an outer attribute\n@@ -299,7 +275,7 @@ LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] let _ = 0; }\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:82:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:76:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] 0; }\n    |                        ------- ^^^^^^^^ not permitted following an outer attribute\n@@ -309,7 +285,7 @@ LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] 0; }\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:84:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:78:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!(); }\n    |                        ------- ^^^^^^^^ not permitted following an outer attribute\n@@ -319,7 +295,7 @@ LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!(); }\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:86:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:80:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo![]; }\n    |                        ------- ^^^^^^^^ not permitted following an outer attribute\n@@ -329,7 +305,7 @@ LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo![]; }\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error: an inner attribute is not permitted following an outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:88:32\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:82:32\n    |\n LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!{}; }\n    |                        ------- ^^^^^^^^ not permitted following an outer attribute\n@@ -339,89 +315,89 @@ LL | #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!{}; }\n    = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:94:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:88:35\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] 10 => () } }\n    |                                   ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: expected one of `=>`, `if`, or `|`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:94:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:88:38\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] 10 => () } }\n    |                                      ^ expected one of `=>`, `if`, or `|`\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:97:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:91:35\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] -10 => () } }\n    |                                   ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: expected one of `=>`, `if`, or `|`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:97:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:91:38\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] -10 => () } }\n    |                                      ^ expected one of `=>`, `if`, or `|`\n \n error: unexpected token: `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:100:39\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:94:39\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=-#[attr] 10 => () } }\n    |                                       ^\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:102:35\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:96:35\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] FOO => () } }\n    |                                   ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error: expected one of `=>`, `if`, or `|`, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:102:38\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:96:38\n    |\n LL | #[cfg(FALSE)] fn e() { match 0 { 0..=#[attr] FOO => () } }\n    |                                      ^ expected one of `=>`, `if`, or `|`\n \n error: unexpected token: `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:106:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:100:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#![attr]foo(); }\n    |                                  ^\n \n error: expected one of `.`, `;`, `?`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:106:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:100:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#![attr]foo(); }\n    |                                  ^ expected one of `.`, `;`, `?`, or an operator\n \n error: unexpected token: `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:109:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:103:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#[attr]foo(); }\n    |                                  ^\n \n error: expected one of `.`, `;`, `?`, or an operator, found `#`\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:109:34\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:103:34\n    |\n LL | #[cfg(FALSE)] fn e() { let _ = x.#[attr]foo(); }\n    |                                  ^ expected one of `.`, `;`, `?`, or an operator\n \n error: expected statement after outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:114:37\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:108:37\n    |\n LL | #[cfg(FALSE)] fn e() { { fn foo() { #[attr]; } } }\n    |                                     ^^^^^^^\n \n error: expected statement after outer attribute\n-  --> $DIR/attr-stmt-expr-attr-bad.rs:116:37\n+  --> $DIR/attr-stmt-expr-attr-bad.rs:110:37\n    |\n LL | #[cfg(FALSE)] fn e() { { fn foo() { #[attr] } } }\n    |                                     ^^^^^^^\n \n-error: aborting due to 57 previous errors\n+error: aborting due to 53 previous errors\n \n For more information about this error, try `rustc --explain E0586`."}, {"sha": "0d1f5be7b4930524cf00dece81f9a8dda4efb023", "filename": "src/test/ui/parser/recovery-attr-on-if.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Ftest%2Fui%2Fparser%2Frecovery-attr-on-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Ftest%2Fui%2Fparser%2Frecovery-attr-on-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecovery-attr-on-if.rs?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -1,9 +0,0 @@\n-fn main() {\n-    #[attr] if true {};\n-    //~^ ERROR cannot find attribute\n-    //~| ERROR attributes are not yet allowed on `if` expressions\n-    #[attr] if true {};\n-    //~^ ERROR cannot find attribute\n-    //~| ERROR attributes are not yet allowed on `if` expressions\n-    let _recovery_witness: () = 0; //~ ERROR mismatched types\n-}"}, {"sha": "a02846827c9ab34072d1c86f0d5177df634c4217", "filename": "src/test/ui/parser/recovery-attr-on-if.stderr", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Ftest%2Fui%2Fparser%2Frecovery-attr-on-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2cb0b8582ebbf9784db9cec06fff517badbf4553/src%2Ftest%2Fui%2Fparser%2Frecovery-attr-on-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecovery-attr-on-if.stderr?ref=2cb0b8582ebbf9784db9cec06fff517badbf4553", "patch": "@@ -1,35 +0,0 @@\n-error: attributes are not yet allowed on `if` expressions\n-  --> $DIR/recovery-attr-on-if.rs:2:5\n-   |\n-LL |     #[attr] if true {};\n-   |     ^^^^^^^\n-\n-error: attributes are not yet allowed on `if` expressions\n-  --> $DIR/recovery-attr-on-if.rs:5:5\n-   |\n-LL |     #[attr] if true {};\n-   |     ^^^^^^^\n-\n-error: cannot find attribute `attr` in this scope\n-  --> $DIR/recovery-attr-on-if.rs:5:7\n-   |\n-LL |     #[attr] if true {};\n-   |       ^^^^\n-\n-error: cannot find attribute `attr` in this scope\n-  --> $DIR/recovery-attr-on-if.rs:2:7\n-   |\n-LL |     #[attr] if true {};\n-   |       ^^^^\n-\n-error[E0308]: mismatched types\n-  --> $DIR/recovery-attr-on-if.rs:8:33\n-   |\n-LL |     let _recovery_witness: () = 0;\n-   |                            --   ^ expected `()`, found integer\n-   |                            |\n-   |                            expected due to this\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0308`."}]}