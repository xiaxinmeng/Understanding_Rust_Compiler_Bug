{"sha": "b260641e0caa3938151afe66fa3bf5691b8c3caa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNjA2NDFlMGNhYTM5MzgxNTFhZmU2NmZhM2JmNTY5MWI4YzNjYWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-13T08:29:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-13T08:29:47Z"}, "message": "slight encapsulation", "tree": {"sha": "5af23f20b86fcec3b13b1315237ba73ff9aa9dcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5af23f20b86fcec3b13b1315237ba73ff9aa9dcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b260641e0caa3938151afe66fa3bf5691b8c3caa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b260641e0caa3938151afe66fa3bf5691b8c3caa", "html_url": "https://github.com/rust-lang/rust/commit/b260641e0caa3938151afe66fa3bf5691b8c3caa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b260641e0caa3938151afe66fa3bf5691b8c3caa/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9e825d95624129b66c34f25904f6ae46b9d5760", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e825d95624129b66c34f25904f6ae46b9d5760", "html_url": "https://github.com/rust-lang/rust/commit/f9e825d95624129b66c34f25904f6ae46b9d5760"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "7f53f23aa9373402f89e6e9fff32c02f2a47f150", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b260641e0caa3938151afe66fa3bf5691b8c3caa/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b260641e0caa3938151afe66fa3bf5691b8c3caa/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=b260641e0caa3938151afe66fa3bf5691b8c3caa", "patch": "@@ -18,7 +18,7 @@ impl_arena_id!(ScopeId);\n pub struct ExprScopes {\n     body: Arc<Body>,\n     scopes: Arena<ScopeId, ScopeData>,\n-    pub(crate) scope_for: FxHashMap<ExprId, ScopeId>,\n+    scope_by_expr: FxHashMap<ExprId, ScopeId>,\n }\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -54,7 +54,7 @@ impl ExprScopes {\n         let mut scopes = ExprScopes {\n             body: body.clone(),\n             scopes: Arena::default(),\n-            scope_for: FxHashMap::default(),\n+            scope_by_expr: FxHashMap::default(),\n         };\n         let root = scopes.root_scope();\n         scopes.add_params_bindings(root, body.params());\n@@ -73,6 +73,14 @@ impl ExprScopes {\n         std::iter::successors(scope, move |&scope| self.scopes[scope].parent)\n     }\n \n+    pub(crate) fn scope_for(&self, expr: ExprId) -> Option<ScopeId> {\n+        self.scope_by_expr.get(&expr).map(|&scope| scope)\n+    }\n+\n+    pub(crate) fn scope_by_expr(&self) -> &FxHashMap<ExprId, ScopeId> {\n+        &self.scope_by_expr\n+    }\n+\n     fn root_scope(&mut self) -> ScopeId {\n         self.scopes.alloc(ScopeData { parent: None, entries: vec![] })\n     }\n@@ -99,11 +107,7 @@ impl ExprScopes {\n     }\n \n     fn set_scope(&mut self, node: ExprId, scope: ScopeId) {\n-        self.scope_for.insert(node, scope);\n-    }\n-\n-    pub(crate) fn scope_for(&self, expr: ExprId) -> Option<ScopeId> {\n-        self.scope_for.get(&expr).map(|&scope| scope)\n+        self.scope_by_expr.insert(node, scope);\n     }\n }\n "}, {"sha": "8d53079c69ae5df2cb17b2b39ff1f6f1c70f83cc", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b260641e0caa3938151afe66fa3bf5691b8c3caa/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b260641e0caa3938151afe66fa3bf5691b8c3caa/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=b260641e0caa3938151afe66fa3bf5691b8c3caa", "patch": "@@ -368,7 +368,7 @@ fn scope_for_offset(\n     offset: TextUnit,\n ) -> Option<ScopeId> {\n     scopes\n-        .scope_for\n+        .scope_by_expr()\n         .iter()\n         .filter_map(|(id, scope)| Some((source_map.expr_syntax(*id)?, scope)))\n         // find containing scope\n@@ -388,7 +388,7 @@ fn adjust(\n ) -> Option<ScopeId> {\n     let r = ptr.range();\n     let child_scopes = scopes\n-        .scope_for\n+        .scope_by_expr()\n         .iter()\n         .filter_map(|(id, scope)| Some((source_map.expr_syntax(*id)?, scope)))\n         .map(|(ptr, scope)| (ptr.range(), scope))"}]}