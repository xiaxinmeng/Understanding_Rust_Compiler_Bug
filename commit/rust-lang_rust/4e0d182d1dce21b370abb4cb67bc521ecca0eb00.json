{"sha": "4e0d182d1dce21b370abb4cb67bc521ecca0eb00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMGQxODJkMWRjZTIxYjM3MGFiYjRjYjY3YmM1MjFlY2NhMGViMDA=", "commit": {"author": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2016-11-02T00:33:43Z"}, "committer": {"name": "Devon Hollowood", "email": "devonhollowood@gmail.com", "date": "2016-11-02T00:48:18Z"}, "message": "Clean up `get_unwrap` code", "tree": {"sha": "db3fde931b6628d04692c0c20a6231c6368912d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db3fde931b6628d04692c0c20a6231c6368912d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e0d182d1dce21b370abb4cb67bc521ecca0eb00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0d182d1dce21b370abb4cb67bc521ecca0eb00", "html_url": "https://github.com/rust-lang/rust/commit/4e0d182d1dce21b370abb4cb67bc521ecca0eb00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e0d182d1dce21b370abb4cb67bc521ecca0eb00/comments", "author": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "devonhollowood", "id": 7864326, "node_id": "MDQ6VXNlcjc4NjQzMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/7864326?v=4", "gravatar_id": "", "url": "https://api.github.com/users/devonhollowood", "html_url": "https://github.com/devonhollowood", "followers_url": "https://api.github.com/users/devonhollowood/followers", "following_url": "https://api.github.com/users/devonhollowood/following{/other_user}", "gists_url": "https://api.github.com/users/devonhollowood/gists{/gist_id}", "starred_url": "https://api.github.com/users/devonhollowood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/devonhollowood/subscriptions", "organizations_url": "https://api.github.com/users/devonhollowood/orgs", "repos_url": "https://api.github.com/users/devonhollowood/repos", "events_url": "https://api.github.com/users/devonhollowood/events{/privacy}", "received_events_url": "https://api.github.com/users/devonhollowood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1187d333ec0bdee66583220a104c5bf4e14d16ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/1187d333ec0bdee66583220a104c5bf4e14d16ef", "html_url": "https://github.com/rust-lang/rust/commit/1187d333ec0bdee66583220a104c5bf4e14d16ef"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "f73f007327143d360ed98012e627d6ad4f8cb100", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d182d1dce21b370abb4cb67bc521ecca0eb00/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d182d1dce21b370abb4cb67bc521ecca0eb00/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=4e0d182d1dce21b370abb4cb67bc521ecca0eb00", "patch": "@@ -519,7 +519,9 @@ impl LintPass for Pass {\n }\n \n impl LateLintPass for Pass {\n-    #[allow(cyclomatic_complexity)]\n+    #[allow(unused_attributes)]\n+    // ^ required because `cyclomatic_complexity` attribute shows up as unused\n+    #[cyclomatic_complexity = \"30\"]\n     fn check_expr(&mut self, cx: &LateContext, expr: &hir::Expr) {\n         if in_macro(cx, expr.span) {\n             return;\n@@ -530,7 +532,7 @@ impl LateLintPass for Pass {\n                 // Chain calls\n                 // GET_UNWRAP needs to be checked before general `UNWRAP` lints\n                 if let Some(arglists) = method_chain_args(expr, &[\"get\", \"unwrap\"]) {\n-                lint_get_unwrap(cx, expr, arglists[0], false);\n+                    lint_get_unwrap(cx, expr, arglists[0], false);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"get_mut\", \"unwrap\"]) {\n                     lint_get_unwrap(cx, expr, arglists[0], true);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"unwrap\"]) {\n@@ -852,21 +854,23 @@ fn lint_iter_nth(cx: &LateContext, expr: &hir::Expr, iter_args: &MethodArgs, is_\n }\n \n fn lint_get_unwrap(cx: &LateContext, expr: &hir::Expr, get_args: &MethodArgs, is_mut: bool) {\n-    let mut_str = if is_mut { \"_mut\" } else {\"\"};\n-    let caller_type = if derefs_to_slice(cx, &get_args[0], cx.tcx.expr_ty(&get_args[0])).is_some() {\n+    let expr_ty = cx.tcx.expr_ty(&get_args[0]);\n+    let caller_type = if derefs_to_slice(cx, &get_args[0], expr_ty).is_some() {\n         \"slice\"\n-    } else if match_type(cx, cx.tcx.expr_ty(&get_args[0]), &paths::VEC) {\n+    } else if match_type(cx, expr_ty, &paths::VEC) {\n         \"Vec\"\n-    } else if match_type(cx, cx.tcx.expr_ty(&get_args[0]), &paths::VEC_DEQUE) {\n+    } else if match_type(cx, expr_ty, &paths::VEC_DEQUE) {\n         \"VecDeque\"\n-    } else if match_type(cx, cx.tcx.expr_ty(&get_args[0]), &paths::HASHMAP) {\n+    } else if match_type(cx, expr_ty, &paths::HASHMAP) {\n         \"HashMap\"\n-    } else if match_type(cx, cx.tcx.expr_ty(&get_args[0]), &paths::BTREEMAP) {\n+    } else if match_type(cx, expr_ty, &paths::BTREEMAP) {\n         \"BTreeMap\"\n     } else {\n         return; // caller is not a type that we want to lint\n     };\n \n+    let mut_str = if is_mut { \"_mut\" } else {\"\"};\n+    let borrow_str = if is_mut { \"&mut \" } else {\"\"};\n     span_lint_and_then(\n         cx,\n         GET_UNWRAP,\n@@ -877,7 +881,8 @@ fn lint_get_unwrap(cx: &LateContext, expr: &hir::Expr, get_args: &MethodArgs, is\n             db.span_suggestion(\n                 expr.span,\n                 \"try this\",\n-                format!(\"{}[{}]\", snippet(cx, get_args[0].span, \"_\"), snippet(cx, get_args[1].span, \"_\"))\n+                format!(\"{}{}[{}]\", borrow_str, snippet(cx, get_args[0].span, \"_\"),\n+                        snippet(cx, get_args[1].span, \"_\"))\n             );\n         }\n     );"}, {"sha": "2e6072b92fbbe278000bf038b87acb41cc52b7c1", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d182d1dce21b370abb4cb67bc521ecca0eb00/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d182d1dce21b370abb4cb67bc521ecca0eb00/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=4e0d182d1dce21b370abb4cb67bc521ecca0eb00", "patch": "@@ -436,23 +436,23 @@ fn get_unwrap() {\n         *some_slice.get_mut(0).unwrap() = 1;\n         //~^ERROR called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n         //~|HELP try this\n-        //~|SUGGESTION some_slice[0]\n+        //~|SUGGESTION &mut some_slice[0]\n         *some_vec.get_mut(0).unwrap() = 1;\n         //~^ERROR called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n         //~|HELP try this\n-        //~|SUGGESTION some_vec[0]\n+        //~|SUGGESTION &mut some_vec[0]\n         *some_vecdeque.get_mut(0).unwrap() = 1;\n         //~^ERROR called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n         //~|HELP try this\n-        //~|SUGGESTION some_vecdeque[0]\n+        //~|SUGGESTION &mut some_vecdeque[0]\n         *some_hashmap.get_mut(&1).unwrap() = 'b';\n         //~^ERROR called `.get_mut().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n         //~|HELP try this\n-        //~|SUGGESTION some_hashmap[&1]\n+        //~|SUGGESTION &mut some_hashmap[&1]\n         *some_btreemap.get_mut(&1).unwrap() = 'b';\n         //~^ERROR called `.get_mut().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n         //~|HELP try this\n-        //~|SUGGESTION some_btreemap[&1]\n+        //~|SUGGESTION &mut some_btreemap[&1]\n \n         *false_positive.get_mut(0).unwrap() = 1;\n     }"}]}