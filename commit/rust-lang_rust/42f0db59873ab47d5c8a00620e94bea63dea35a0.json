{"sha": "42f0db59873ab47d5c8a00620e94bea63dea35a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZjBkYjU5ODczYWI0N2Q1YzhhMDA2MjBlOTRiZWE2M2RlYTM1YTA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-19T12:15:34Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-26T08:22:45Z"}, "message": "Move HashStable bound to the trait definition.", "tree": {"sha": "7c84c7c523f32d2724efe2a5fd8fd9de974aad2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c84c7c523f32d2724efe2a5fd8fd9de974aad2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42f0db59873ab47d5c8a00620e94bea63dea35a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42f0db59873ab47d5c8a00620e94bea63dea35a0", "html_url": "https://github.com/rust-lang/rust/commit/42f0db59873ab47d5c8a00620e94bea63dea35a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42f0db59873ab47d5c8a00620e94bea63dea35a0/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63087b6b15bff0346fda199e1a077ab3cdc30ba3", "url": "https://api.github.com/repos/rust-lang/rust/commits/63087b6b15bff0346fda199e1a077ab3cdc30ba3", "html_url": "https://github.com/rust-lang/rust/commit/63087b6b15bff0346fda199e1a077ab3cdc30ba3"}], "stats": {"total": 14, "additions": 4, "deletions": 10}, "files": [{"sha": "04662986702a935a0168b6ae50df8c7e5a480150", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42f0db59873ab47d5c8a00620e94bea63dea35a0/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f0db59873ab47d5c8a00620e94bea63dea35a0/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=42f0db59873ab47d5c8a00620e94bea63dea35a0", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::def_id::DefId;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_hasher::HashStable;\n use rustc_query_system::dep_graph::{DepContext, DepNode};\n use rustc_session::Session;\n use std::borrow::Cow;\n@@ -25,7 +26,7 @@ pub trait QueryConfig<CTX> {\n }\n \n pub trait QueryContext: DepContext {\n-    type Query: Clone;\n+    type Query: Clone + HashStable<Self::StableHashingContext>;\n \n     /// Access the session.\n     fn session(&self) -> &Session;"}, {"sha": "7f0156abdea1a6a3ddc8102a33e7b4a343dd3c5b", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/42f0db59873ab47d5c8a00620e94bea63dea35a0/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42f0db59873ab47d5c8a00620e94bea63dea35a0/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=42f0db59873ab47d5c8a00620e94bea63dea35a0", "patch": "@@ -405,7 +405,6 @@ fn connected_to_root<CTX: QueryContext>(\n fn pick_query<'a, CTX, T, F>(query_map: &QueryMap<CTX>, tcx: CTX, queries: &'a [T], f: F) -> &'a T\n where\n     CTX: QueryContext,\n-    CTX::Query: HashStable<CTX::StableHashingContext>,\n     F: Fn(&T) -> (Span, QueryJobId<CTX::DepKind>),\n {\n     // Deterministically pick an entry point\n@@ -437,10 +436,7 @@ fn remove_cycle<CTX: QueryContext>(\n     jobs: &mut Vec<QueryJobId<CTX::DepKind>>,\n     wakelist: &mut Vec<Lrc<QueryWaiter<CTX>>>,\n     tcx: CTX,\n-) -> bool\n-where\n-    CTX::Query: HashStable<CTX::StableHashingContext>,\n-{\n+) -> bool {\n     let mut visited = FxHashSet::default();\n     let mut stack = Vec::new();\n     // Look for a cycle starting with the last query in `jobs`\n@@ -564,10 +560,7 @@ pub unsafe fn handle_deadlock() {\n /// There may be multiple cycles involved in a deadlock, so this searches\n /// all active queries for cycles before finally resuming all the waiters at once.\n #[cfg(parallel_compiler)]\n-fn deadlock<CTX: QueryContext>(tcx: CTX, registry: &rayon_core::Registry)\n-where\n-    CTX::Query: HashStable<CTX::StableHashingContext>,\n-{\n+fn deadlock<CTX: QueryContext>(tcx: CTX, registry: &rayon_core::Registry) {\n     let on_panic = OnDrop(|| {\n         eprintln!(\"deadlock handler panicked, aborting process\");\n         process::abort();"}]}