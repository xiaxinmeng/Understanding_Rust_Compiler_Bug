{"sha": "132063ad9653c21d5393bfd710978f408a0386be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMjA2M2FkOTY1M2MyMWQ1MzkzYmZkNzEwOTc4ZjQwOGEwMzg2YmU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-17T20:26:37Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-11-18T07:50:27Z"}, "message": "Link rustc error codes in diagnostics", "tree": {"sha": "e80f1ecacce8a70c00cb1c9f6ae484d42ea082c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e80f1ecacce8a70c00cb1c9f6ae484d42ea082c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/132063ad9653c21d5393bfd710978f408a0386be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/132063ad9653c21d5393bfd710978f408a0386be", "html_url": "https://github.com/rust-lang/rust/commit/132063ad9653c21d5393bfd710978f408a0386be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/132063ad9653c21d5393bfd710978f408a0386be/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99975d08f0f1497abc6dc13681f040848595e50b", "url": "https://api.github.com/repos/rust-lang/rust/commits/99975d08f0f1497abc6dc13681f040848595e50b", "html_url": "https://github.com/rust-lang/rust/commit/99975d08f0f1497abc6dc13681f040848595e50b"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "d3720de33e5db9ab8fbb0f08684bcb2b28de44db", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/132063ad9653c21d5393bfd710978f408a0386be/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/132063ad9653c21d5393bfd710978f408a0386be/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=132063ad9653c21d5393bfd710978f408a0386be", "patch": "@@ -2,7 +2,7 @@\n //! `cargo check` json format to the LSP diagnostic format.\n use std::{collections::HashMap, path::Path};\n \n-use flycheck::{Applicability, DiagnosticLevel, DiagnosticSpan};\n+use flycheck::{Applicability, DiagnosticCode, DiagnosticLevel, DiagnosticSpan};\n use stdx::format_to;\n \n use crate::{lsp_ext, to_proto::url_from_abs_path};\n@@ -211,6 +211,8 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n         }\n     }\n \n+    let code_description = rustc_code_description(rd.code.as_ref());\n+\n     primary_spans\n         .iter()\n         .map(|primary_span| {\n@@ -248,7 +250,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                         range: in_macro_location.range,\n                         severity,\n                         code: code.clone().map(lsp_types::NumberOrString::String),\n-                        code_description: None,\n+                        code_description: code_description.clone(),\n                         source: Some(source.clone()),\n                         message: message.clone(),\n                         related_information: Some(information_for_additional_diagnostic),\n@@ -269,7 +271,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                 range: location.range,\n                 severity,\n                 code: code.clone().map(lsp_types::NumberOrString::String),\n-                code_description: None,\n+                code_description: code_description.clone(),\n                 source: Some(source.clone()),\n                 message,\n                 related_information: if related_information.is_empty() {\n@@ -292,6 +294,20 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n         .collect()\n }\n \n+fn rustc_code_description(code: Option<&DiagnosticCode>) -> Option<lsp_types::CodeDescription> {\n+    code.filter(|c| {\n+        let mut chars = c.code.chars();\n+        chars.next().map_or(false, |c| c == 'E')\n+            && chars.by_ref().take(4).all(|c| c.is_ascii_digit())\n+            && chars.next().is_none()\n+    })\n+    .and_then(|c| {\n+        lsp_types::Url::parse(&format!(\"https://doc.rust-lang.org/error-index.html#{}\", c.code))\n+            .ok()\n+            .map(|href| lsp_types::CodeDescription { href })\n+    })\n+}\n+\n #[cfg(test)]\n #[cfg(not(windows))]\n mod tests {"}]}