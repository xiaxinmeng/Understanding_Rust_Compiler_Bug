{"sha": "54f73115878a46d8591bfd6689e0a9fc60d89d43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0ZjczMTE1ODc4YTQ2ZDg1OTFiZmQ2Njg5ZTBhOWZjNjBkODlkNDM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-09T18:43:46Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-09T18:43:46Z"}, "message": "Suggest a let binding to extend temporary lifetimes with NLL", "tree": {"sha": "bc4ca54dc9e30357df2e099ebd1401d598dddd34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc4ca54dc9e30357df2e099ebd1401d598dddd34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54f73115878a46d8591bfd6689e0a9fc60d89d43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54f73115878a46d8591bfd6689e0a9fc60d89d43", "html_url": "https://github.com/rust-lang/rust/commit/54f73115878a46d8591bfd6689e0a9fc60d89d43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54f73115878a46d8591bfd6689e0a9fc60d89d43/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea6fe08751d8794f70d0eb6692c123d611ab3542", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea6fe08751d8794f70d0eb6692c123d611ab3542", "html_url": "https://github.com/rust-lang/rust/commit/ea6fe08751d8794f70d0eb6692c123d611ab3542"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "977b6a71f5e269f7d8440a22a427db7a28df14e7", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=54f73115878a46d8591bfd6689e0a9fc60d89d43", "patch": "@@ -24,6 +24,7 @@ use super::borrow_set::BorrowData;\n use super::{Context, MirBorrowckCtxt};\n use super::{InitializationRequiringAction, PrefixSet};\n \n+use borrow_check::nll::explain_borrow::BorrowContainsPointReason;\n use dataflow::drop_flag_effects;\n use dataflow::move_paths::indexes::MoveOutIndex;\n use dataflow::move_paths::MovePathIndex;\n@@ -409,6 +410,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         self.access_place_error_reported\n             .insert((root_place.clone(), borrow_span));\n \n+        let borrow_reason = self.find_why_borrow_contains_point(context, borrow);\n+\n         let mut err = match &self.describe_place(&borrow.borrowed_place) {\n             Some(_) if self.is_place_thread_local(root_place) => {\n                 self.report_thread_local_value_does_not_live_long_enough(drop_span, borrow_span)\n@@ -418,17 +421,17 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 name,\n                 &scope_tree,\n                 &borrow,\n+                borrow_reason,\n                 drop_span,\n                 borrow_span,\n-                proper_span,\n                 kind.map(|k| (k, place_span.0)),\n             ),\n             None => self.report_temporary_value_does_not_live_long_enough(\n                 context,\n                 &scope_tree,\n                 &borrow,\n+                borrow_reason,\n                 drop_span,\n-                borrow_span,\n                 proper_span,\n             ),\n         };\n@@ -444,16 +447,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         name: &String,\n         scope_tree: &Lrc<ScopeTree>,\n         borrow: &BorrowData<'tcx>,\n+        reason: BorrowContainsPointReason<'tcx>,\n         drop_span: Span,\n         borrow_span: Span,\n-        _proper_span: Span,\n         kind_place: Option<(WriteKind, &Place<'tcx>)>,\n     ) -> DiagnosticBuilder<'cx> {\n         debug!(\n             \"report_local_value_does_not_live_long_enough(\\\n-             {:?}, {:?}, {:?}, {:?}, {:?}, {:?}\\\n+             {:?}, {:?}, {:?}, {:?}, {:?}, {:?}, {:?}\\\n              )\",\n-            context, name, scope_tree, borrow, drop_span, borrow_span\n+            context, name, scope_tree, borrow, reason, drop_span, borrow_span\n         );\n \n         let mut err = self.tcx.path_does_not_live_long_enough(\n@@ -468,7 +471,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             format!(\"`{}` dropped here while still borrowed\", name),\n         );\n \n-        self.explain_why_borrow_contains_point(context, borrow, kind_place, &mut err);\n+        self.report_why_borrow_contains_point(&mut err, reason, kind_place);\n         err\n     }\n \n@@ -501,15 +504,15 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         context: Context,\n         scope_tree: &Lrc<ScopeTree>,\n         borrow: &BorrowData<'tcx>,\n+        reason: BorrowContainsPointReason<'tcx>,\n         drop_span: Span,\n-        _borrow_span: Span,\n         proper_span: Span,\n     ) -> DiagnosticBuilder<'cx> {\n         debug!(\n             \"report_temporary_value_does_not_live_long_enough(\\\n-             {:?}, {:?}, {:?}, {:?}, {:?}\\\n+             {:?}, {:?}, {:?}, {:?}, {:?}, {:?}\\\n              )\",\n-            context, scope_tree, borrow, drop_span, proper_span\n+            context, scope_tree, borrow, reason, drop_span, proper_span\n         );\n \n         let tcx = self.tcx;\n@@ -518,7 +521,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         err.span_label(proper_span, \"temporary value does not live long enough\");\n         err.span_label(drop_span, \"temporary value only lives until here\");\n \n-        self.explain_why_borrow_contains_point(context, borrow, None, &mut err);\n+        // Only give this note and suggestion if they could be relevant\n+        match reason {\n+            BorrowContainsPointReason::Liveness {..}\n+            | BorrowContainsPointReason::DropLiveness {..} => {\n+                err.note(\"consider using a `let` binding to create a longer lived value\");\n+            }\n+            BorrowContainsPointReason::OutlivesFreeRegion {..} => (),\n+        }\n+\n+        self.report_why_borrow_contains_point(&mut err, reason, None);\n         err\n     }\n "}, {"sha": "eee3f9bd5c1308d3112720f39d7e305854c2c798", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.nll.stderr?ref=54f73115878a46d8591bfd6689e0a9fc60d89d43", "patch": "@@ -8,6 +8,7 @@ LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]);\n LL |     x.x[0];\n    |     ------ borrow later used here\n    |\n+   = note: consider using a `let` binding to create a longer lived value\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "ebf229696d8a99bbb563e606913356be6936ec6b", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.nll.stderr?ref=54f73115878a46d8591bfd6689e0a9fc60d89d43", "patch": "@@ -8,6 +8,8 @@ LL |     buggy_map.insert(42, &*Box::new(1)); //~ ERROR borrowed value does not\n ...\n LL |     buggy_map.insert(43, &*tmp);\n    |     --------- borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n "}, {"sha": "e02f21f6e1247a1384d6baff47e71cc9421f1b29", "filename": "src/test/ui/issues/issue-36082.ast.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fissues%2Fissue-36082.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fissues%2Fissue-36082.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36082.ast.nll.stderr?ref=54f73115878a46d8591bfd6689e0a9fc60d89d43", "patch": "@@ -8,6 +8,8 @@ LL |     let val: &_ = x.borrow().0;\n ...\n LL |     println!(\"{}\", val);\n    |                    --- borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n "}, {"sha": "e02f21f6e1247a1384d6baff47e71cc9421f1b29", "filename": "src/test/ui/issues/issue-36082.mir.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fissues%2Fissue-36082.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fissues%2Fissue-36082.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36082.mir.stderr?ref=54f73115878a46d8591bfd6689e0a9fc60d89d43", "patch": "@@ -8,6 +8,8 @@ LL |     let val: &_ = x.borrow().0;\n ...\n LL |     println!(\"{}\", val);\n    |                    --- borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n "}, {"sha": "579ec4d923be1318f212965c03a337bcca3ab1d8", "filename": "src/test/ui/issues/issue-36082.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fissues%2Fissue-36082.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fissues%2Fissue-36082.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-36082.rs?ref=54f73115878a46d8591bfd6689e0a9fc60d89d43", "patch": "@@ -28,6 +28,7 @@ fn main() {\n     //[mir]~^^^^^ ERROR borrowed value does not live long enough [E0597]\n     //[mir]~| NOTE temporary value does not live long enough\n     //[mir]~| NOTE temporary value only lives until here\n+    //[mir]~| NOTE consider using a `let` binding to create a longer lived value\n     println!(\"{}\", val);\n     //[mir]~^ borrow later used here\n }"}, {"sha": "a8a1b33c925bcf7fdef038de7661bd1780df260c", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.nll.stderr?ref=54f73115878a46d8591bfd6689e0a9fc60d89d43", "patch": "@@ -9,6 +9,7 @@ LL |     //~^ ERROR borrowed value does not live long enough\n LL |     x.use_mut();\n    |     - borrow later used here\n    |\n+   = note: consider using a `let` binding to create a longer lived value\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "8b69c57d3765db1062d7a84d547644a9bca396cb", "filename": "src/test/ui/nll/borrowed-temporary-error.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-temporary-error.stderr?ref=54f73115878a46d8591bfd6689e0a9fc60d89d43", "patch": "@@ -8,6 +8,8 @@ LL |     });\n    |       - temporary value only lives until here\n LL |     println!(\"{:?}\", x);\n    |                      - borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n "}, {"sha": "aa744a3ae8a7482e18a1c757dafaac5e7fc1f225", "filename": "src/test/ui/regions/regions-var-type-out-of-scope.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-var-type-out-of-scope.nll.stderr?ref=54f73115878a46d8591bfd6689e0a9fc60d89d43", "patch": "@@ -8,6 +8,7 @@ LL |         x = &id(3); //~ ERROR borrowed value does not live long enough\n LL |         assert_eq!(*x, 3);\n    |         ------------------ borrow later used here\n    |\n+   = note: consider using a `let` binding to create a longer lived value\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "001eba4b039b1e39486624d277127ea553dd96d3", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.nll.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.nll.stderr?ref=54f73115878a46d8591bfd6689e0a9fc60d89d43", "patch": "@@ -8,6 +8,8 @@ LL |     v3.push(&id('x'));           // statement 6\n ...\n LL |     (v1, v2, v3, /* v4 is above. */ v5).use_ref();\n    |              -- borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-let-suggestion-suffixes.rs:38:18\n@@ -19,6 +21,8 @@ LL |         v4.push(&id('y'));\n ...\n LL |         v4.use_ref();\n    |         -- borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-let-suggestion-suffixes.rs:49:14\n@@ -30,6 +34,8 @@ LL |     v5.push(&id('z'));\n ...\n LL |     (v1, v2, v3, /* v4 is above. */ v5).use_ref();\n    |                                     -- borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c565842c2c0020e5ad0ecd9b50b09e1289d53000", "filename": "src/test/ui/span/borrowck-ref-into-rvalue.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-ref-into-rvalue.nll.stderr?ref=54f73115878a46d8591bfd6689e0a9fc60d89d43", "patch": "@@ -8,6 +8,8 @@ LL |     }\n    |     - temporary value only lives until here\n LL |     println!(\"{}\", *msg);\n    |                    ---- borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n "}, {"sha": "8dcf486f8301142310ee1a6fa9de04c3a64b3767", "filename": "src/test/ui/span/issue-15480.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fspan%2Fissue-15480.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fspan%2Fissue-15480.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-15480.nll.stderr?ref=54f73115878a46d8591bfd6689e0a9fc60d89d43", "patch": "@@ -8,6 +8,8 @@ LL |     ];\n ...\n LL |     for &&x in &v {\n    |                -- borrow later used here\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n "}, {"sha": "3788b5a32849528d07d36def77ca1ef3fd323117", "filename": "src/test/ui/span/regions-close-over-borrowed-ref-in-obj.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-close-over-borrowed-ref-in-obj.nll.stderr?ref=54f73115878a46d8591bfd6689e0a9fc60d89d43", "patch": "@@ -8,6 +8,8 @@ LL |     }\n    |     - temporary value only lives until here\n LL | }\n    | - borrow later used here, when `blah` is dropped\n+   |\n+   = note: consider using a `let` binding to create a longer lived value\n \n error: aborting due to previous error\n "}, {"sha": "4a15d8ff455372cbd746da01d526242a1a266818", "filename": "src/test/ui/span/slice-borrow.nll.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54f73115878a46d8591bfd6689e0a9fc60d89d43/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.nll.stderr?ref=54f73115878a46d8591bfd6689e0a9fc60d89d43", "patch": "@@ -9,6 +9,7 @@ LL |     }\n LL |     y.use_ref();\n    |     - borrow later used here\n    |\n+   = note: consider using a `let` binding to create a longer lived value\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to previous error"}]}