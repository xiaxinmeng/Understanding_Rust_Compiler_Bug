{"sha": "bb59d616aa62217b8f4c56311766957710d9e984", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNTlkNjE2YWE2MjIxN2I4ZjRjNTYzMTE3NjY5NTc3MTBkOWU5ODQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-09-14T09:32:18Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-09-14T09:32:27Z"}, "message": "Use don't unroll loop in Rvalue::Repeat\n\nFixes #1081", "tree": {"sha": "390ee990fc82785d73e2ed9d475d49b2d0d9c04d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/390ee990fc82785d73e2ed9d475d49b2d0d9c04d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb59d616aa62217b8f4c56311766957710d9e984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb59d616aa62217b8f4c56311766957710d9e984", "html_url": "https://github.com/rust-lang/rust/commit/bb59d616aa62217b8f4c56311766957710d9e984", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb59d616aa62217b8f4c56311766957710d9e984/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50e8f2218e94d15892a78f0b780ba103bf21647a", "url": "https://api.github.com/repos/rust-lang/rust/commits/50e8f2218e94d15892a78f0b780ba103bf21647a", "html_url": "https://github.com/rust-lang/rust/commit/50e8f2218e94d15892a78f0b780ba103bf21647a"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "a972beedaa38752f6bb1f476f41e97558bf27e2e", "filename": "example/mini_core.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bb59d616aa62217b8f4c56311766957710d9e984/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb59d616aa62217b8f4c56311766957710d9e984/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=bb59d616aa62217b8f4c56311766957710d9e984", "patch": "@@ -58,6 +58,7 @@ unsafe impl Copy for char {}\n unsafe impl<'a, T: ?Sized> Copy for &'a T {}\n unsafe impl<T: ?Sized> Copy for *const T {}\n unsafe impl<T: ?Sized> Copy for *mut T {}\n+unsafe impl<T: Copy> Copy for Option<T> {}\n \n #[lang = \"sync\"]\n pub unsafe trait Sync {}\n@@ -336,6 +337,24 @@ impl<T: ?Sized> PartialEq for *const T {\n     }\n }\n \n+impl <T: PartialEq> PartialEq for Option<T> {\n+    fn eq(&self, other: &Self) -> bool {\n+        match (self, other) {\n+            (Some(lhs), Some(rhs)) => *lhs == *rhs,\n+            (None, None) => true,\n+            _ => false,\n+        }\n+    }\n+\n+    fn ne(&self, other: &Self) -> bool {\n+        match (self, other) {\n+            (Some(lhs), Some(rhs)) => *lhs != *rhs,\n+            (None, None) => false,\n+            _ => true,\n+        }\n+    }\n+}\n+\n #[lang = \"neg\"]\n pub trait Neg {\n     type Output;"}, {"sha": "f1c037696d8b3624f9b690431a5264e3b3b8f60e", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb59d616aa62217b8f4c56311766957710d9e984/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb59d616aa62217b8f4c56311766957710d9e984/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=bb59d616aa62217b8f4c56311766957710d9e984", "patch": "@@ -285,6 +285,10 @@ fn main() {\n     let slice_ptr = &[] as *const [u8];\n     slice_ptr as *const u8;\n \n+    let repeat = [Some(42); 2];\n+    assert_eq!(repeat[0], Some(42));\n+    assert_eq!(repeat[1], Some(42));\n+\n     #[cfg(not(jit))]\n     test_tls();\n "}, {"sha": "cae2115ab181b630f67b1e090df951313c953e0c", "filename": "src/base.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bb59d616aa62217b8f4c56311766957710d9e984/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb59d616aa62217b8f4c56311766957710d9e984/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=bb59d616aa62217b8f4c56311766957710d9e984", "patch": "@@ -693,10 +693,29 @@ fn trans_stmt<'tcx>(\n                         .val\n                         .try_to_bits(fx.tcx.data_layout.pointer_size)\n                         .unwrap();\n-                    for i in 0..times {\n-                        let index = fx.bcx.ins().iconst(fx.pointer_type, i as i64);\n+                    if fx.clif_type(operand.layout().ty) == Some(types::I8) {\n+                        let times = fx.bcx.ins().iconst(fx.pointer_type, times as i64);\n+                        // FIXME use emit_small_memset where possible\n+                        let addr = lval.to_ptr().get_addr(fx);\n+                        let val = operand.load_scalar(fx);\n+                        fx.bcx.call_memset(fx.cx.module.target_config(), addr, val, times);\n+                    } else {\n+                        let loop_block = fx.bcx.create_block();\n+                        let done_block = fx.bcx.create_block();\n+                        let index = fx.bcx.append_block_param(loop_block, fx.pointer_type);\n+                        let zero = fx.bcx.ins().iconst(fx.pointer_type, 0);\n+                        fx.bcx.ins().jump(loop_block, &[zero]);\n+\n+                        fx.bcx.switch_to_block(loop_block);\n                         let to = lval.place_index(fx, index);\n                         to.write_cvalue(fx, operand);\n+\n+                        let index = fx.bcx.ins().iadd_imm(index, 1);\n+                        let done = fx.bcx.ins().icmp_imm(IntCC::Equal, index, times as i64);\n+                        fx.bcx.ins().brz(done, loop_block, &[index]);\n+                        fx.bcx.ins().jump(done_block, &[]);\n+\n+                        fx.bcx.switch_to_block(done_block);\n                     }\n                 }\n                 Rvalue::Len(place) => {"}]}