{"sha": "e3758fe321725bec4707e1b7d4fff333ba915905", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNzU4ZmUzMjE3MjViZWM0NzA3ZTFiN2Q0ZmZmMzMzYmE5MTU5MDU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-08T19:26:34Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-10-08T19:26:34Z"}, "message": "rustc: Make functions output a type, not a slot", "tree": {"sha": "4d9c60203378443b34cdce5fff0b9783d674b46d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d9c60203378443b34cdce5fff0b9783d674b46d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3758fe321725bec4707e1b7d4fff333ba915905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3758fe321725bec4707e1b7d4fff333ba915905", "html_url": "https://github.com/rust-lang/rust/commit/e3758fe321725bec4707e1b7d4fff333ba915905", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3758fe321725bec4707e1b7d4fff333ba915905/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "785d9b15945500d987ea1042ee31138d7b6d1d4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/785d9b15945500d987ea1042ee31138d7b6d1d4e", "html_url": "https://github.com/rust-lang/rust/commit/785d9b15945500d987ea1042ee31138d7b6d1d4e"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "0b0f571ce2a8b14cc45c628deb5427fd6e9850a6", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3758fe321725bec4707e1b7d4fff333ba915905/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3758fe321725bec4707e1b7d4fff333ba915905/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=e3758fe321725bec4707e1b7d4fff333ba915905", "patch": "@@ -129,7 +129,7 @@ type slot = rec(@ty ty, mode mode, option[slot_id] id);\n type input = rec(slot slot, ident ident);\n \n type _fn = rec(vec[input] inputs,\n-               slot output,\n+               ty output,\n                block body);\n \n type _mod = hashmap[ident,@item];"}, {"sha": "8e848afb31c8b9cde6acc154836588783bc896d7", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3758fe321725bec4707e1b7d4fff333ba915905/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3758fe321725bec4707e1b7d4fff333ba915905/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=e3758fe321725bec4707e1b7d4fff333ba915905", "patch": "@@ -603,13 +603,12 @@ io fn parse_fn(parser p) -> tup(ast.ident, @ast.item) {\n          some(token.COMMA),\n          pf, p);\n \n-    let ast.slot output;\n+    let ast.ty output;\n     if (p.peek() == token.RARROW) {\n         p.bump();\n-        output = rec(ty=parse_ty(p), mode=ast.val, id=none[ast.slot_id]);\n+        output = *parse_ty(p);\n     } else {\n-        output = rec(ty=@spanned(lo, inputs.span, ast.ty_nil),\n-                     mode=ast.val, id=none[ast.slot_id]);\n+        output = spanned(lo, inputs.span, ast.ty_nil);\n     }\n \n     auto body = parse_block(p);"}, {"sha": "a74ac3b39855cde1e56a077d778c83f0edbda52e", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3758fe321725bec4707e1b7d4fff333ba915905/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3758fe321725bec4707e1b7d4fff333ba915905/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=e3758fe321725bec4707e1b7d4fff333ba915905", "patch": "@@ -120,7 +120,7 @@ type ast_fold[ENV] =\n          vec[@stmt] stmts) -> block)              fold_block,\n \n      (fn(&ENV e, vec[ast.input] inputs,\n-         &slot output, block body) -> ast._fn)    fold_fn,\n+         &ty output, block body) -> ast._fn)      fold_fn,\n \n      (fn(&ENV e, &ast._mod m) -> ast._mod)        fold_mod,\n \n@@ -310,10 +310,10 @@ fn fold_fn[ENV](&ENV env, ast_fold[ENV] fld, &ast._fn f) -> ast._fn {\n \n     let operator[ast.input,ast.input] fi = bind fold_input[ENV](env, fld, _);\n     auto inputs = _vec.map[ast.input, ast.input](fi, f.inputs);\n-    auto output = fold_slot[ENV](env, fld, f.output);\n+    auto output = fold_ty[ENV](env, fld, @f.output);\n     auto body = fold_block[ENV](env, fld, f.body);\n \n-    ret fld.fold_fn(env, inputs, output, body);\n+    ret fld.fold_fn(env, inputs, *output, body);\n }\n \n fn fold_item[ENV](&ENV env, ast_fold[ENV] fld, @item i) -> @item {\n@@ -539,7 +539,7 @@ fn identity_fold_block[ENV](&ENV e, &span sp, vec[@stmt] stmts) -> block {\n \n fn identity_fold_fn[ENV](&ENV e,\n                          vec[ast.input] inputs,\n-                         &slot output,\n+                         &ast.ty output,\n                          block body) -> ast._fn {\n     ret rec(inputs=inputs, output=output, body=body);\n }"}]}