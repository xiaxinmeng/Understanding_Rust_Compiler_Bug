{"sha": "ca1e68b3229e710c3948a361ee770d846a88e6da", "node_id": "C_kwDOAAsO6NoAKGNhMWU2OGIzMjI5ZTcxMGMzOTQ4YTM2MWVlNzcwZDg0NmE4OGU2ZGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T11:09:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-01T11:09:35Z"}, "message": "Auto merge of #98730 - matthiaskrgr:rollup-2c4d4x5, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #97629 ([core] add `Exclusive` to sync)\n - #98503 (fix data race in thread::scope)\n - #98670 (llvm-wrapper: adapt for LLVMConstExtractValue removal)\n - #98671 (Fix source sidebar bugs)\n - #98677 (For diagnostic information of Boolean, remind it as use the type: 'bool')\n - #98684 (add test for 72793)\n - #98688 (interpret: add From<&MplaceTy> for PlaceTy)\n - #98695 (use \"or pattern\")\n - #98709 (Remove unneeded methods declaration for old web browsers)\n - #98717 (get rid of tidy 'unnecessarily ignored' warnings)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "cbd0e8977b42bd32f8ab140f36f825a9d8d74ed6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbd0e8977b42bd32f8ab140f36f825a9d8d74ed6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca1e68b3229e710c3948a361ee770d846a88e6da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca1e68b3229e710c3948a361ee770d846a88e6da", "html_url": "https://github.com/rust-lang/rust/commit/ca1e68b3229e710c3948a361ee770d846a88e6da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca1e68b3229e710c3948a361ee770d846a88e6da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "html_url": "https://github.com/rust-lang/rust/commit/7e2733bb1dd9afe5fd20370ca4d539d42ac50419"}, {"sha": "6e918b4a97c8a2cb0923a639d76f840ac63b76c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e918b4a97c8a2cb0923a639d76f840ac63b76c7", "html_url": "https://github.com/rust-lang/rust/commit/6e918b4a97c8a2cb0923a639d76f840ac63b76c7"}], "stats": {"total": 443, "additions": 364, "deletions": 79}, "files": [{"sha": "d37aadeb523a1ad48c2a8b9b9e0830a939ffcfb9", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -109,8 +109,7 @@ impl<'ll> CodegenCx<'ll, '_> {\n     pub fn const_get_elt(&self, v: &'ll Value, idx: u64) -> &'ll Value {\n         unsafe {\n             assert_eq!(idx as c_uint as u64, idx);\n-            let us = &[idx as c_uint];\n-            let r = llvm::LLVMConstExtractValue(v, us.as_ptr(), us.len() as c_uint);\n+            let r = llvm::LLVMGetAggregateElement(v, idx as c_uint).unwrap();\n \n             debug!(\"const_get_elt(v={:?}, idx={}, r={:?})\", v, idx, r);\n "}, {"sha": "d92d9d96fe2ceb9314a223eade30bb8e62f29fd6", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -1134,11 +1134,7 @@ extern \"C\" {\n     pub fn LLVMConstIntToPtr<'a>(ConstantVal: &'a Value, ToType: &'a Type) -> &'a Value;\n     pub fn LLVMConstBitCast<'a>(ConstantVal: &'a Value, ToType: &'a Type) -> &'a Value;\n     pub fn LLVMConstPointerCast<'a>(ConstantVal: &'a Value, ToType: &'a Type) -> &'a Value;\n-    pub fn LLVMConstExtractValue(\n-        AggConstant: &Value,\n-        IdxList: *const c_uint,\n-        NumIdx: c_uint,\n-    ) -> &Value;\n+    pub fn LLVMGetAggregateElement(ConstantVal: &Value, Idx: c_uint) -> Option<&Value>;\n \n     // Operations on global variables, functions, and aliases (globals)\n     pub fn LLVMIsDeclaration(Global: &Value) -> Bool;"}, {"sha": "f8b390aaf50e140e6f55a30574426f0f83d9b7a1", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -346,7 +346,7 @@ fn valtree_into_mplace<'tcx>(\n         ty::FnDef(_, _) => {\n             ecx.write_immediate(\n                 Immediate::Scalar(ScalarMaybeUninit::Scalar(Scalar::ZST)),\n-                &(*place).into(),\n+                &place.into(),\n             )\n             .unwrap();\n         }\n@@ -355,7 +355,7 @@ fn valtree_into_mplace<'tcx>(\n             debug!(\"writing trivial valtree {:?} to place {:?}\", scalar_int, place);\n             ecx.write_immediate(\n                 Immediate::Scalar(ScalarMaybeUninit::Scalar(scalar_int.into())),\n-                &(*place).into(),\n+                &place.into(),\n             )\n             .unwrap();\n         }\n@@ -382,7 +382,7 @@ fn valtree_into_mplace<'tcx>(\n             };\n             debug!(?imm);\n \n-            ecx.write_immediate(imm, &(*place).into()).unwrap();\n+            ecx.write_immediate(imm, &place.into()).unwrap();\n         }\n         ty::Adt(_, _) | ty::Tuple(_) | ty::Array(_, _) | ty::Str | ty::Slice(_) => {\n             let branches = valtree.unwrap_branch();\n@@ -464,11 +464,11 @@ fn valtree_into_mplace<'tcx>(\n \n             if let Some(variant_idx) = variant_idx {\n                 // don't forget filling the place with the discriminant of the enum\n-                ecx.write_discriminant(variant_idx, &(*place).into()).unwrap();\n+                ecx.write_discriminant(variant_idx, &place.into()).unwrap();\n             }\n \n             debug!(\"dump of place after writing discriminant:\");\n-            dump_place(ecx, (*place).into());\n+            dump_place(ecx, place.into());\n         }\n         _ => bug!(\"shouldn't have created a ValTree for {:?}\", ty),\n     }"}, {"sha": "c1d42c9ae7cc346f5dc91c4a4aeef31460a49fcf", "filename": "compiler/rustc_const_eval/src/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintern.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -195,7 +195,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: CompileTimeMachine<'mir, 'tcx, const_eval::Memory\n         let tcx = self.ecx.tcx;\n         let ty = mplace.layout.ty;\n         if let ty::Ref(_, referenced_ty, ref_mutability) = *ty.kind() {\n-            let value = self.ecx.read_immediate(&(*mplace).into())?;\n+            let value = self.ecx.read_immediate(&mplace.into())?;\n             let mplace = self.ecx.ref_to_mplace(&value)?;\n             assert_eq!(mplace.layout.ty, referenced_ty);\n             // Handle trait object vtables."}, {"sha": "e7a08e052758c561b9cad610309570dde0eadaa3", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -204,6 +204,13 @@ impl<'tcx, Tag: Provenance> From<&'_ MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {\n     }\n }\n \n+impl<'tcx, Tag: Provenance> From<&'_ mut MPlaceTy<'tcx, Tag>> for OpTy<'tcx, Tag> {\n+    #[inline(always)]\n+    fn from(mplace: &mut MPlaceTy<'tcx, Tag>) -> Self {\n+        OpTy { op: Operand::Indirect(**mplace), layout: mplace.layout }\n+    }\n+}\n+\n impl<'tcx, Tag: Provenance> From<ImmTy<'tcx, Tag>> for OpTy<'tcx, Tag> {\n     #[inline(always)]\n     fn from(val: ImmTy<'tcx, Tag>) -> Self {"}, {"sha": "337fcd28c663d7e12d3f03093be7119966e57673", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -118,7 +118,21 @@ impl<'tcx, Tag: Provenance> std::ops::Deref for MPlaceTy<'tcx, Tag> {\n impl<'tcx, Tag: Provenance> From<MPlaceTy<'tcx, Tag>> for PlaceTy<'tcx, Tag> {\n     #[inline(always)]\n     fn from(mplace: MPlaceTy<'tcx, Tag>) -> Self {\n-        PlaceTy { place: Place::Ptr(mplace.mplace), layout: mplace.layout }\n+        PlaceTy { place: Place::Ptr(*mplace), layout: mplace.layout }\n+    }\n+}\n+\n+impl<'tcx, Tag: Provenance> From<&'_ MPlaceTy<'tcx, Tag>> for PlaceTy<'tcx, Tag> {\n+    #[inline(always)]\n+    fn from(mplace: &MPlaceTy<'tcx, Tag>) -> Self {\n+        PlaceTy { place: Place::Ptr(**mplace), layout: mplace.layout }\n+    }\n+}\n+\n+impl<'tcx, Tag: Provenance> From<&'_ mut MPlaceTy<'tcx, Tag>> for PlaceTy<'tcx, Tag> {\n+    #[inline(always)]\n+    fn from(mplace: &mut MPlaceTy<'tcx, Tag>) -> Self {\n+        PlaceTy { place: Place::Ptr(**mplace), layout: mplace.layout }\n     }\n }\n "}, {"sha": "2b77ed898934544ef573d80526e1969fd51a6dab", "filename": "compiler/rustc_const_eval/src/interpret/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvisitor.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -92,7 +92,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> Value<'mir, 'tcx, M>\n         &self,\n         _ecx: &InterpCx<'mir, 'tcx, M>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n-        Ok((*self).into())\n+        Ok(self.into())\n     }\n \n     #[inline(always)]"}, {"sha": "9c42f6f26fc9ee55ade5fdf570d74fb89ebcbee2", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -1447,7 +1447,7 @@ impl HandlerInner {\n                 self.flags.treat_err_as_bug.map(|c| c.get()).unwrap_or(0),\n             ) {\n                 (1, 1) => panic!(\"aborting due to `-Z treat-err-as-bug=1`\"),\n-                (0, _) | (1, _) => {}\n+                (0 | 1, _) => {}\n                 (count, as_bug) => panic!(\n                     \"aborting after {} errors due to `-Z treat-err-as-bug={}`\",\n                     count, as_bug,"}, {"sha": "8c5b4e2dc96f953c2a3441be06a7e734b0dac1d3", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -1865,3 +1865,11 @@ extern \"C\" void LLVMRustGetMangledName(LLVMValueRef V, RustStringRef Str) {\n   GlobalValue *GV = unwrap<GlobalValue>(V);\n   Mangler().getNameWithPrefix(OS, GV, true);\n }\n+\n+// LLVMGetAggregateElement was added in LLVM 15. For earlier LLVM versions just\n+// use its implementation.\n+#if LLVM_VERSION_LT(15, 0)\n+extern \"C\" LLVMValueRef LLVMGetAggregateElement(LLVMValueRef C, unsigned Idx) {\n+    return wrap(unwrap<Constant>(C)->getAggregateElement(Idx));\n+}\n+#endif"}, {"sha": "03cb1cfcfc9ef9ec65623cfdf015bd4c46987f61", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -1503,6 +1503,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         Some(match name {\n             \"byte\" => sym::u8, // In Java, bytes are signed, but in practice one almost always wants unsigned bytes.\n             \"short\" => sym::i16,\n+            \"Bool\" => sym::bool,\n+            \"Boolean\" => sym::bool,\n             \"boolean\" => sym::bool,\n             \"int\" => sym::i32,\n             \"long\" => sym::i64,"}, {"sha": "a7519ab5ab633c42967cb19801452e0387a2d29a", "filename": "library/core/src/sync/exclusive.rs", "status": "added", "additions": 173, "deletions": 0, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fexclusive.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -0,0 +1,173 @@\n+//! Defines [`Exclusive`].\n+\n+use core::fmt;\n+use core::future::Future;\n+use core::pin::Pin;\n+use core::task::{Context, Poll};\n+\n+/// `Exclusive` provides only _mutable_ access, also referred to as _exclusive_\n+/// access to the underlying value. It provides no _immutable_, or _shared_\n+/// access to the underlying value.\n+///\n+/// While this may seem not very useful, it allows `Exclusive` to _unconditionally_\n+/// implement [`Sync`]. Indeed, the safety requirements of `Sync` state that for `Exclusive`\n+/// to be `Sync`, it must be sound to _share_ across threads, that is, it must be sound\n+/// for `&Exclusive` to cross thread boundaries. By design, a `&Exclusive` has no API\n+/// whatsoever, making it useless, thus harmless, thus memory safe.\n+///\n+/// Certain constructs like [`Future`]s can only be used with _exclusive_ access,\n+/// and are often `Send` but not `Sync`, so `Exclusive` can be used as hint to the\n+/// rust compiler that something is `Sync` in practice.\n+///\n+/// ## Examples\n+/// Using a non-`Sync` future prevents the wrapping struct from being `Sync`\n+/// ```compile_fail\n+/// use core::cell::Cell;\n+///\n+/// async fn other() {}\n+/// fn assert_sync<T: Sync>(t: T) {}\n+/// struct State<F> {\n+///     future: F\n+/// }\n+///\n+/// assert_sync(State {\n+///     future: async {\n+///         let cell = Cell::new(1);\n+///         let cell_ref = &cell;\n+///         other().await;\n+///         let value = cell_ref.get();\n+///     }\n+/// });\n+/// ```\n+///\n+/// `Exclusive` ensures the struct is `Sync` without stripping the future of its\n+/// functionality.\n+/// ```\n+/// #![feature(exclusive_wrapper)]\n+/// use core::cell::Cell;\n+/// use core::sync::Exclusive;\n+///\n+/// async fn other() {}\n+/// fn assert_sync<T: Sync>(t: T) {}\n+/// struct State<F> {\n+///     future: Exclusive<F>\n+/// }\n+///\n+/// assert_sync(State {\n+///     future: Exclusive::new(async {\n+///         let cell = Cell::new(1);\n+///         let cell_ref = &cell;\n+///         other().await;\n+///         let value = cell_ref.get();\n+///     })\n+/// });\n+/// ```\n+///\n+/// ## Parallels with a mutex\n+/// In some sense, `Exclusive` can be thought of as a _compile-time_ version of\n+/// a mutex, as the borrow-checker guarantees that only one `&mut` can exist\n+/// for any value. This is a parallel with the fact that\n+/// `&` and `&mut` references together can be thought of as a _compile-time_\n+/// version of a read-write lock.\n+///\n+///\n+/// [`Sync`]: core::marker::Sync\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n+#[doc(alias = \"SyncWrapper\")]\n+#[doc(alias = \"SyncCell\")]\n+#[doc(alias = \"Unique\")]\n+// `Exclusive` can't have `PartialOrd`, `Clone`, etc. impls as they would\n+// use `&` access to the inner value, violating the `Sync` impl's safety\n+// requirements.\n+#[derive(Default)]\n+#[repr(transparent)]\n+pub struct Exclusive<T: ?Sized> {\n+    inner: T,\n+}\n+\n+// See `Exclusive`'s docs for justification.\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n+unsafe impl<T: ?Sized> Sync for Exclusive<T> {}\n+\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n+impl<T: ?Sized> fmt::Debug for Exclusive<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n+        f.debug_struct(\"Exclusive\").finish_non_exhaustive()\n+    }\n+}\n+\n+impl<T: Sized> Exclusive<T> {\n+    /// Wrap a value in an `Exclusive`\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n+    #[must_use]\n+    pub const fn new(t: T) -> Self {\n+        Self { inner: t }\n+    }\n+\n+    /// Unwrap the value contained in the `Exclusive`\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n+    #[must_use]\n+    pub const fn into_inner(self) -> T {\n+        self.inner\n+    }\n+}\n+\n+impl<T: ?Sized> Exclusive<T> {\n+    /// Get exclusive access to the underlying value.\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n+    #[must_use]\n+    pub const fn get_mut(&mut self) -> &mut T {\n+        &mut self.inner\n+    }\n+\n+    /// Get pinned exclusive access to the underlying value.\n+    ///\n+    /// `Exclusive` is considered to _structurally pin_ the underlying\n+    /// value, which means _unpinned_ `Exclusive`s can produce _unpinned_\n+    /// access to the underlying value, but _pinned_ `Exclusive`s only\n+    /// produce _pinned_ access to the underlying value.\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n+    #[must_use]\n+    pub const fn get_pin_mut(self: Pin<&mut Self>) -> Pin<&mut T> {\n+        // SAFETY: `Exclusive` can only produce `&mut T` if itself is unpinned\n+        // `Pin::map_unchecked_mut` is not const, so we do this conversion manually\n+        unsafe { Pin::new_unchecked(&mut self.get_unchecked_mut().inner) }\n+    }\n+\n+    /// Build a _mutable_ references to an `Exclusive<T>` from\n+    /// a _mutable_ reference to a `T`. This allows you to skip\n+    /// building an `Exclusive` with [`Exclusive::new`].\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n+    #[must_use]\n+    pub const fn from_mut(r: &'_ mut T) -> &'_ mut Exclusive<T> {\n+        // SAFETY: repr is \u2265 C, so refs have the same layout; and `Exclusive` properties are `&mut`-agnostic\n+        unsafe { &mut *(r as *mut T as *mut Exclusive<T>) }\n+    }\n+\n+    /// Build a _pinned mutable_ references to an `Exclusive<T>` from\n+    /// a _pinned mutable_ reference to a `T`. This allows you to skip\n+    /// building an `Exclusive` with [`Exclusive::new`].\n+    #[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n+    #[must_use]\n+    pub const fn from_pin_mut(r: Pin<&'_ mut T>) -> Pin<&'_ mut Exclusive<T>> {\n+        // SAFETY: `Exclusive` can only produce `&mut T` if itself is unpinned\n+        // `Pin::map_unchecked_mut` is not const, so we do this conversion manually\n+        unsafe { Pin::new_unchecked(Self::from_mut(r.get_unchecked_mut())) }\n+    }\n+}\n+\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n+impl<T> From<T> for Exclusive<T> {\n+    fn from(t: T) -> Self {\n+        Self::new(t)\n+    }\n+}\n+\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n+impl<T: Future + ?Sized> Future for Exclusive<T> {\n+    type Output = T::Output;\n+\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n+        self.get_pin_mut().poll(cx)\n+    }\n+}"}, {"sha": "4365e4cb250ca44708743a71177703b976380557", "filename": "library/core/src/sync/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/library%2Fcore%2Fsrc%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/library%2Fcore%2Fsrc%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fmod.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -3,3 +3,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n pub mod atomic;\n+mod exclusive;\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n+pub use exclusive::Exclusive;"}, {"sha": "ba76ee31b42dd7b00e131ef10f757032bab8239c", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -270,6 +270,7 @@\n #![feature(duration_checked_float)]\n #![feature(duration_constants)]\n #![feature(exact_size_is_empty)]\n+#![feature(exclusive_wrapper)]\n #![feature(extend_one)]\n #![feature(float_minimum_maximum)]\n #![feature(hasher_prefixfree_extras)]"}, {"sha": "7b507a169b395edeb317737d499ba23cd517c596", "filename": "library/std/src/sync/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmod.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -155,6 +155,8 @@\n pub use alloc_crate::sync::{Arc, Weak};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::sync::atomic;\n+#[unstable(feature = \"exclusive_wrapper\", issue = \"98407\")]\n+pub use core::sync::Exclusive;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::barrier::{Barrier, BarrierWaitResult};"}, {"sha": "c70ac8c9806d6a3e4c4682caa21fb6efb62dd959", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -159,6 +159,7 @@ use crate::cell::UnsafeCell;\n use crate::ffi::{CStr, CString};\n use crate::fmt;\n use crate::io;\n+use crate::marker::PhantomData;\n use crate::mem;\n use crate::num::NonZeroU64;\n use crate::num::NonZeroUsize;\n@@ -462,7 +463,7 @@ impl Builder {\n     unsafe fn spawn_unchecked_<'a, 'scope, F, T>(\n         self,\n         f: F,\n-        scope_data: Option<&'scope scoped::ScopeData>,\n+        scope_data: Option<Arc<scoped::ScopeData>>,\n     ) -> io::Result<JoinInner<'scope, T>>\n     where\n         F: FnOnce() -> T,\n@@ -479,8 +480,11 @@ impl Builder {\n         }));\n         let their_thread = my_thread.clone();\n \n-        let my_packet: Arc<Packet<'scope, T>> =\n-            Arc::new(Packet { scope: scope_data, result: UnsafeCell::new(None) });\n+        let my_packet: Arc<Packet<'scope, T>> = Arc::new(Packet {\n+            scope: scope_data,\n+            result: UnsafeCell::new(None),\n+            _marker: PhantomData,\n+        });\n         let their_packet = my_packet.clone();\n \n         let output_capture = crate::io::set_output_capture(None);\n@@ -507,7 +511,7 @@ impl Builder {\n             unsafe { *their_packet.result.get() = Some(try_result) };\n         };\n \n-        if let Some(scope_data) = scope_data {\n+        if let Some(scope_data) = &my_packet.scope {\n             scope_data.increment_num_running_threads();\n         }\n \n@@ -1298,8 +1302,9 @@ pub type Result<T> = crate::result::Result<T, Box<dyn Any + Send + 'static>>;\n // An Arc to the packet is stored into a `JoinInner` which in turns is placed\n // in `JoinHandle`.\n struct Packet<'scope, T> {\n-    scope: Option<&'scope scoped::ScopeData>,\n+    scope: Option<Arc<scoped::ScopeData>>,\n     result: UnsafeCell<Option<Result<T>>>,\n+    _marker: PhantomData<Option<&'scope scoped::ScopeData>>,\n }\n \n // Due to the usage of `UnsafeCell` we need to manually implement Sync.\n@@ -1330,7 +1335,7 @@ impl<'scope, T> Drop for Packet<'scope, T> {\n             rtabort!(\"thread result panicked on drop\");\n         }\n         // Book-keeping so the scope knows when it's done.\n-        if let Some(scope) = self.scope {\n+        if let Some(scope) = &self.scope {\n             // Now that there will be no more user code running on this thread\n             // that can use 'scope, mark the thread as 'finished'.\n             // It's important we only do this after the `result` has been dropped,"}, {"sha": "e6dbf35bd0286f7abdc2a1715ab2c4a3d1f0b1b5", "filename": "library/std/src/thread/scoped.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -11,7 +11,7 @@ use crate::sync::Arc;\n /// See [`scope`] for details.\n #[stable(feature = \"scoped_threads\", since = \"1.63.0\")]\n pub struct Scope<'scope, 'env: 'scope> {\n-    data: ScopeData,\n+    data: Arc<ScopeData>,\n     /// Invariance over 'scope, to make sure 'scope cannot shrink,\n     /// which is necessary for soundness.\n     ///\n@@ -130,12 +130,14 @@ pub fn scope<'env, F, T>(f: F) -> T\n where\n     F: for<'scope> FnOnce(&'scope Scope<'scope, 'env>) -> T,\n {\n+    // We put the `ScopeData` into an `Arc` so that other threads can finish their\n+    // `decrement_num_running_threads` even after this function returns.\n     let scope = Scope {\n-        data: ScopeData {\n+        data: Arc::new(ScopeData {\n             num_running_threads: AtomicUsize::new(0),\n             main_thread: current(),\n             a_thread_panicked: AtomicBool::new(false),\n-        },\n+        }),\n         env: PhantomData,\n         scope: PhantomData,\n     };\n@@ -250,7 +252,7 @@ impl Builder {\n         F: FnOnce() -> T + Send + 'scope,\n         T: Send + 'scope,\n     {\n-        Ok(ScopedJoinHandle(unsafe { self.spawn_unchecked_(f, Some(&scope.data)) }?))\n+        Ok(ScopedJoinHandle(unsafe { self.spawn_unchecked_(f, Some(scope.data.clone())) }?))\n     }\n }\n "}, {"sha": "bae256fd5b38acfa0a6909427beeef27b76fb95e", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -1 +1 @@\n-0.9.6\n\\ No newline at end of file\n+0.9.7\n\\ No newline at end of file"}, {"sha": "532b98d9bb9f64017664c66c4cfdc9edc93a697e", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -1772,9 +1772,11 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t/* The source view uses a different design for the sidebar toggle, and doesn't have a topbar,\n \t   so don't bump down the main content or the sidebar. */\n \t.source main,\n-\t.source .sidebar {\n+\t.rustdoc.source .sidebar {\n \t\ttop: 0;\n \t\tpadding: 0;\n+\t\theight: 100vh;\n+\t\tborder: 0;\n \t}\n \n \t.sidebar.shown,\n@@ -1924,6 +1926,9 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\twidth: unset;\n \t\tborder-top-right-radius: unset;\n \t\tborder-bottom-right-radius: unset;\n+\t\tposition: sticky;\n+\t\tborder: 0;\n+\t\tborder-bottom: 1px solid;\n \t}\n \n \t#source-sidebar {"}, {"sha": "6658f07ce0103f1e8307d42eeaadc082fe44fc47", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -4,40 +4,6 @@\n \n \"use strict\";\n \n-if (!String.prototype.startsWith) {\n-    String.prototype.startsWith = function(searchString, position) {\n-        position = position || 0;\n-        return this.indexOf(searchString, position) === position;\n-    };\n-}\n-if (!String.prototype.endsWith) {\n-    String.prototype.endsWith = function(suffix, length) {\n-        const l = length || this.length;\n-        return this.indexOf(suffix, l - suffix.length) !== -1;\n-    };\n-}\n-\n-if (!DOMTokenList.prototype.add) {\n-    DOMTokenList.prototype.add = function(className) {\n-        if (className && !hasClass(this, className)) {\n-            if (this.className && this.className.length > 0) {\n-                this.className += \" \" + className;\n-            } else {\n-                this.className = className;\n-            }\n-        }\n-    };\n-}\n-\n-if (!DOMTokenList.prototype.remove) {\n-    DOMTokenList.prototype.remove = function(className) {\n-        if (className && this.className) {\n-            this.className = (\" \" + this.className + \" \").replace(\" \" + className + \" \", \" \")\n-                                                         .trim();\n-        }\n-    };\n-}\n-\n // Get a value from the rustdoc-vars div, which is used to convey data from\n // Rust to the JS. If there is no such element, return null.\n function getVar(name) {"}, {"sha": "acb1d8d7b5c8d2ea558de8db6321840e9c0afcbc", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -10,6 +10,7 @@\n (function() {\n \n const rootPath = document.getElementById(\"rustdoc-vars\").attributes[\"data-root-path\"].value;\n+let oldScrollPosition = 0;\n \n function createDirEntry(elem, parent, fullPath, hasFoundFile) {\n     const name = document.createElement(\"div\");\n@@ -65,10 +66,24 @@ function createDirEntry(elem, parent, fullPath, hasFoundFile) {\n function toggleSidebar() {\n     const child = this.children[0];\n     if (child.innerText === \">\") {\n+        if (window.innerWidth < 701) {\n+            // This is to keep the scroll position on mobile.\n+            oldScrollPosition = window.scrollY;\n+            document.body.style.position = \"fixed\";\n+            document.body.style.top = `-${oldScrollPosition}px`;\n+        }\n         addClass(document.documentElement, \"source-sidebar-expanded\");\n         child.innerText = \"<\";\n         updateLocalStorage(\"source-sidebar-show\", \"true\");\n     } else {\n+        if (window.innerWidth < 701) {\n+            // This is to keep the scroll position on mobile.\n+            document.body.style.position = \"\";\n+            document.body.style.top = \"\";\n+            // The scroll position is lost when resetting the style, hence why we store it in\n+            // `oldScroll`.\n+            window.scrollTo(0, oldScrollPosition);\n+        }\n         removeClass(document.documentElement, \"source-sidebar-expanded\");\n         child.innerText = \">\";\n         updateLocalStorage(\"source-sidebar-show\", \"false\");"}, {"sha": "c441f84a82135f2960f9be78412bfccad59fc9c1", "filename": "src/test/rustdoc-gui/sidebar-source-code-display.goml", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -116,3 +116,39 @@ assert-css: (\n     \"#source-sidebar .expand + .children .folders .name\",\n     {\"color\": \"rgb(255, 180, 76)\", \"background-color\": \"rgb(20, 25, 31)\"},\n )\n+\n+// Now checking on mobile devices.\n+size: (500, 700)\n+reload:\n+// Waiting for the sidebar to be displayed...\n+wait-for-css: (\"#sidebar-toggle\", {\"visibility\": \"visible\", \"opacity\": 1})\n+\n+// We now check it takes the full size of the display.\n+assert-property: (\"body\", {\"clientWidth\": \"500\", \"clientHeight\": \"700\"})\n+assert-property: (\".sidebar\", {\"clientWidth\": \"500\", \"clientHeight\": \"700\"})\n+\n+// We now check the display of the toggle once the sidebar is expanded.\n+assert-property: (\"#sidebar-toggle\", {\"clientWidth\": \"500\", \"clientHeight\": \"39\"})\n+assert-css: (\n+    \"#sidebar-toggle\",\n+    {\n+        \"border-top-width\": \"0px\",\n+        \"border-right-width\": \"0px\",\n+        \"border-left-width\": \"0px\",\n+        \"border-bottom-width\": \"1px\",\n+    },\n+)\n+\n+// We now check that the scroll position is kept when opening the sidebar.\n+click: \"#sidebar-toggle\"\n+wait-for-css: (\".sidebar\", {\"width\": \"0px\"})\n+// We scroll to line 117 to change the scroll position.\n+scroll-to: '//*[@id=\"117\"]'\n+assert-window-property: {\"pageYOffset\": \"2519\"}\n+// Expanding the sidebar...\n+click: \"#sidebar-toggle\"\n+wait-for-css: (\".sidebar\", {\"width\": \"500px\"})\n+click: \"#sidebar-toggle\"\n+wait-for-css: (\".sidebar\", {\"width\": \"0px\"})\n+// The \"scrollTop\" property should be the same.\n+assert-window-property: {\"pageYOffset\": \"2519\"}"}, {"sha": "86df478fa1dd268cb9cac26164c00a16311364cf", "filename": "src/test/rustdoc-gui/sidebar-source-code.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -18,8 +18,8 @@ assert: \"nav.sidebar\"\n \n // We now switch to mobile mode.\n size: (600, 600)\n-// We check that the sidebar has the expected width (0 and 1px for the border).\n-assert-css: (\"nav.sidebar\", {\"width\": \"1px\"})\n+// We check that the sidebar has the expected width (0).\n+assert-css: (\"nav.sidebar\", {\"width\": \"0px\"})\n // We expand the sidebar.\n click: \"#sidebar-toggle\"\n assert-css: (\".source-sidebar-expanded nav.sidebar\", {\"width\": \"600px\"})"}, {"sha": "453cbf28569e9d9da10bdddaecb25888cf0b85fd", "filename": "src/test/ui/lint/recommend-literal.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Ftest%2Fui%2Flint%2Frecommend-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Ftest%2Fui%2Flint%2Frecommend-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frecommend-literal.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -7,6 +7,13 @@ fn main() {\n     let y: long = 74802374902374923;\n     //~^ ERROR cannot find type `long` in this scope\n     //~| HELP perhaps you intended to use this type\n+    let v1: Boolean = true;\n+    //~^ ERROR: cannot find type `Boolean` in this scope [E0412]\n+    //~| HELP perhaps you intended to use this type\n+    let v2: Bool = true;\n+    //~^ ERROR: cannot find type `Bool` in this scope [E0412]\n+    //~| HELP a builtin type with a similar name exists\n+    //~| HELP perhaps you intended to use this type\n }\n \n fn z(a: boolean) {"}, {"sha": "424ecadd4b8ccc5a0667944c479a243b4c17621d", "filename": "src/test/ui/lint/recommend-literal.stderr", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Ftest%2Fui%2Flint%2Frecommend-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Ftest%2Fui%2Flint%2Frecommend-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frecommend-literal.stderr?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -16,8 +16,32 @@ LL |     let y: long = 74802374902374923;\n    |            not found in this scope\n    |            help: perhaps you intended to use this type: `i64`\n \n+error[E0412]: cannot find type `Boolean` in this scope\n+  --> $DIR/recommend-literal.rs:10:13\n+   |\n+LL |     let v1: Boolean = true;\n+   |             ^^^^^^^\n+   |             |\n+   |             not found in this scope\n+   |             help: perhaps you intended to use this type: `bool`\n+\n+error[E0412]: cannot find type `Bool` in this scope\n+  --> $DIR/recommend-literal.rs:13:13\n+   |\n+LL |     let v2: Bool = true;\n+   |             ^^^^\n+   |\n+help: a builtin type with a similar name exists\n+   |\n+LL |     let v2: bool = true;\n+   |             ~~~~\n+help: perhaps you intended to use this type\n+   |\n+LL |     let v2: bool = true;\n+   |             ~~~~\n+\n error[E0412]: cannot find type `boolean` in this scope\n-  --> $DIR/recommend-literal.rs:12:9\n+  --> $DIR/recommend-literal.rs:19:9\n    |\n LL | fn z(a: boolean) {\n    |         ^^^^^^^\n@@ -26,7 +50,7 @@ LL | fn z(a: boolean) {\n    |         help: perhaps you intended to use this type: `bool`\n \n error[E0412]: cannot find type `byte` in this scope\n-  --> $DIR/recommend-literal.rs:17:11\n+  --> $DIR/recommend-literal.rs:24:11\n    |\n LL | fn a() -> byte {\n    |           ^^^^\n@@ -35,7 +59,7 @@ LL | fn a() -> byte {\n    |           help: perhaps you intended to use this type: `u8`\n \n error[E0412]: cannot find type `float` in this scope\n-  --> $DIR/recommend-literal.rs:24:12\n+  --> $DIR/recommend-literal.rs:31:12\n    |\n LL |     width: float,\n    |            ^^^^^\n@@ -44,7 +68,7 @@ LL |     width: float,\n    |            help: perhaps you intended to use this type: `f32`\n \n error[E0412]: cannot find type `int` in this scope\n-  --> $DIR/recommend-literal.rs:27:19\n+  --> $DIR/recommend-literal.rs:34:19\n    |\n LL |     depth: Option<int>,\n    |                   ^^^ not found in this scope\n@@ -59,14 +83,14 @@ LL | struct Data<int> {\n    |            +++++\n \n error[E0412]: cannot find type `short` in this scope\n-  --> $DIR/recommend-literal.rs:33:16\n+  --> $DIR/recommend-literal.rs:40:16\n    |\n LL | impl Stuff for short {}\n    |                ^^^^^\n    |                |\n    |                not found in this scope\n    |                help: perhaps you intended to use this type: `i16`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0412`."}, {"sha": "828c871143ad5645810311f234e7afb4b553a8b5", "filename": "src/test/ui/type-alias-impl-trait/issue-72793.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-72793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-72793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-72793.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+// compile-flags: -Zmir-opt-level=3\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait T { type Item; }\n+\n+type Alias<'a> = impl T<Item = &'a ()>;\n+\n+struct S;\n+impl<'a> T for &'a S {\n+    type Item = &'a ();\n+}\n+\n+fn filter_positive<'a>() -> Alias<'a> {\n+    &S\n+}\n+\n+fn with_positive(fun: impl Fn(Alias<'_>)) {\n+    fun(filter_positive());\n+}\n+\n+fn main() {\n+    with_positive(|_| ());\n+}"}, {"sha": "3cf44a2d7d1efffaf74c8ae9c223876042d109ef", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1e68b3229e710c3948a361ee770d846a88e6da/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=ca1e68b3229e710c3948a361ee770d846a88e6da", "patch": "@@ -395,9 +395,6 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 );\n             };\n             suppressible_tidy_err!(err, skip_file_length, \"\");\n-        } else if lines > (LINES * 7) / 10 {\n-            // Just set it to something that doesn't trigger the \"unnecessarily ignored\" warning.\n-            skip_file_length = Directive::Ignore(true);\n         }\n \n         if let Directive::Ignore(false) = skip_cr {\n@@ -406,12 +403,6 @@ pub fn check(path: &Path, bad: &mut bool) {\n         if let Directive::Ignore(false) = skip_tab {\n             tidy_error!(bad, \"{}: ignoring tab characters unnecessarily\", file.display());\n         }\n-        if let Directive::Ignore(false) = skip_line_length {\n-            tidy_error!(bad, \"{}: ignoring line length unnecessarily\", file.display());\n-        }\n-        if let Directive::Ignore(false) = skip_file_length {\n-            tidy_error!(bad, \"{}: ignoring file length unnecessarily\", file.display());\n-        }\n         if let Directive::Ignore(false) = skip_end_whitespace {\n             tidy_error!(bad, \"{}: ignoring trailing whitespace unnecessarily\", file.display());\n         }\n@@ -424,5 +415,9 @@ pub fn check(path: &Path, bad: &mut bool) {\n         if let Directive::Ignore(false) = skip_copyright {\n             tidy_error!(bad, \"{}: ignoring copyright unnecessarily\", file.display());\n         }\n+        // We deliberately do not warn about these being unnecessary,\n+        // that would just lead to annoying churn.\n+        let _unused = skip_line_length;\n+        let _unused = skip_file_length;\n     })\n }"}]}