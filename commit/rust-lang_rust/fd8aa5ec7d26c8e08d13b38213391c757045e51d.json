{"sha": "fd8aa5ec7d26c8e08d13b38213391c757045e51d", "node_id": "C_kwDOAAsO6NoAKGZkOGFhNWVjN2QyNmM4ZTA4ZDEzYjM4MjEzMzkxYzc1NzA0NWU1MWQ", "commit": {"author": {"name": "Ezra Shaw", "email": "ezrasure@outlook.com", "date": "2023-04-19T06:22:03Z"}, "committer": {"name": "Ezra Shaw", "email": "ezrashawdev@gmail.com", "date": "2023-05-05T10:40:04Z"}, "message": "tweak \"make mut\" spans when assigning to locals", "tree": {"sha": "94da6e4f1fc96cb25f2b544a88f76aca77d1d857", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94da6e4f1fc96cb25f2b544a88f76aca77d1d857"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd8aa5ec7d26c8e08d13b38213391c757045e51d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE/c15HB+s7bjrqpLmUVbPWEUVCw0FAmRU3QQACgkQUVbPWEUV\nCw19WhAAiXyUX9fm/UDFtLTQcpu1mtPCgnZQ/lLrXkA+t9FdZsNfhE7dH+bxfD16\n7G5HGjMAYBQvOcbim9p6+ksu2usBH1fgS2r3jCoLdXy4fJdPzq+jlkm3hZPAVzqo\ngW3C/hLWe69kHfdzXajJv+zRXK0GmR7pI7vm60J7WvhRYPt7rgl/wS2RcN4zmhWu\naXd1njDlQ9LYyBg5G6YFhzFlixpYDYP8BFllWjOpS1Md0t3I9IqcT3J3QePcyJGk\nqz2/yeUtckWc7UJbQOASjfqHY/36pxLnJLN5Cpn2ywKQoVY4khnHfpboYx6L0bcb\nPpJsBmufV/ifE65RUJJZ+dTEUb4IyWIvCfPv1l+4kl4ZnAkpfA6Rr41TkHQ8mU86\n43AtO04kopBzJwI1itLorIVZbzrUxr5OdOcL+jO6kjq4DB+YTD/o9mA7vzRxrnrQ\nSW42vb6V3u4CPiiJLXgqL8TqaiHHhpr5R19/+slvoUNFQoCKq6pgIqG+Od6wrbuY\nAeXz4WhRRptaD63K82OYa6ZoS2ALlsKtAOOahew0OqBvVsapBITS5TmU+TVdp+0J\n1C2hZfAbQy3EbwiW0gmABrYGumchZhLGy+c6qWujP8MNCSkLyFJ/jDWjJj/FTrqy\nGV4J2SZ08BYTSPxh9pW8ZQcn4/kIIkSttJPNn1Ym7mnDiyy7M1c=\n=SJRB\n-----END PGP SIGNATURE-----", "payload": "tree 94da6e4f1fc96cb25f2b544a88f76aca77d1d857\nparent 3320f2fab64f36dae94b830f8c4b166857b6919b\nauthor Ezra Shaw <ezrasure@outlook.com> 1681885323 +1200\ncommitter Ezra Shaw <ezrashawdev@gmail.com> 1683283204 +1200\n\ntweak \"make mut\" spans when assigning to locals\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd8aa5ec7d26c8e08d13b38213391c757045e51d", "html_url": "https://github.com/rust-lang/rust/commit/fd8aa5ec7d26c8e08d13b38213391c757045e51d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd8aa5ec7d26c8e08d13b38213391c757045e51d/comments", "author": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ezrashaw", "id": 38062690, "node_id": "MDQ6VXNlcjM4MDYyNjkw", "avatar_url": "https://avatars.githubusercontent.com/u/38062690?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ezrashaw", "html_url": "https://github.com/Ezrashaw", "followers_url": "https://api.github.com/users/Ezrashaw/followers", "following_url": "https://api.github.com/users/Ezrashaw/following{/other_user}", "gists_url": "https://api.github.com/users/Ezrashaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ezrashaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ezrashaw/subscriptions", "organizations_url": "https://api.github.com/users/Ezrashaw/orgs", "repos_url": "https://api.github.com/users/Ezrashaw/repos", "events_url": "https://api.github.com/users/Ezrashaw/events{/privacy}", "received_events_url": "https://api.github.com/users/Ezrashaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3320f2fab64f36dae94b830f8c4b166857b6919b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3320f2fab64f36dae94b830f8c4b166857b6919b", "html_url": "https://github.com/rust-lang/rust/commit/3320f2fab64f36dae94b830f8c4b166857b6919b"}], "stats": {"total": 87, "additions": 46, "deletions": 41}, "files": [{"sha": "b861a4f28617e3f8aca2813dafcd1f59252b1574", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 31, "deletions": 25, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fd8aa5ec7d26c8e08d13b38213391c757045e51d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8aa5ec7d26c8e08d13b38213391c757045e51d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=fd8aa5ec7d26c8e08d13b38213391c757045e51d", "patch": "@@ -1202,36 +1202,42 @@ fn suggest_ampmut<'tcx>(\n     opt_assignment_rhs_span: Option<Span>,\n     opt_ty_info: Option<Span>,\n ) -> (bool, Span, String) {\n+    // if there is a RHS and it starts with a `&` from it, then check if it is\n+    // mutable, and if not, put suggest putting `mut ` to make it mutable.\n+    // we don't have to worry about lifetime annotations here because they are\n+    // not valid when taking a reference. For example, the following is not valid Rust:\n+    //\n+    // let x: &i32 = &'a 5;\n+    //                ^^ lifetime annotation not allowed\n+    //\n     if let Some(assignment_rhs_span) = opt_assignment_rhs_span\n         && let Ok(src) = tcx.sess.source_map().span_to_snippet(assignment_rhs_span)\n+        && let Some(stripped) = src.strip_prefix('&')\n     {\n-        let is_mutbl = |ty: &str| -> bool {\n-            if let Some(rest) = ty.strip_prefix(\"mut\") {\n-                match rest.chars().next() {\n-                    // e.g. `&mut x`\n-                    Some(c) if c.is_whitespace() => true,\n-                    // e.g. `&mut(x)`\n-                    Some('(') => true,\n-                    // e.g. `&mut{x}`\n-                    Some('{') => true,\n-                    // e.g. `&mutablevar`\n-                    _ => false,\n-                }\n-            } else {\n-                false\n+        let is_mut = if let Some(rest) = stripped.trim_start().strip_prefix(\"mut\") {\n+            match rest.chars().next() {\n+                // e.g. `&mut x`\n+                Some(c) if c.is_whitespace() => true,\n+                // e.g. `&mut(x)`\n+                Some('(') => true,\n+                // e.g. `&mut{x}`\n+                Some('{') => true,\n+                // e.g. `&mutablevar`\n+                _ => false,\n             }\n+        } else {\n+            false\n         };\n-        if let (true, Some(ws_pos)) = (src.starts_with(\"&'\"), src.find(char::is_whitespace)) {\n-            let lt_name = &src[1..ws_pos];\n-            let ty = src[ws_pos..].trim_start();\n-            if !is_mutbl(ty) {\n-                return (true, assignment_rhs_span, format!(\"&{lt_name} mut {ty}\"));\n-            }\n-        } else if let Some(stripped) = src.strip_prefix('&') {\n-            let stripped = stripped.trim_start();\n-            if !is_mutbl(stripped) {\n-                return (true, assignment_rhs_span, format!(\"&mut {stripped}\"));\n-            }\n+        // if the reference is already mutable then there is nothing we can do\n+        // here.\n+        if !is_mut {\n+            let span = assignment_rhs_span;\n+            // shrink the span to just after the `&` in `&variable`\n+            let span = span.with_lo(span.lo() + BytePos(1)).shrink_to_lo();\n+\n+            // FIXME(Ezrashaw): returning is bad because we still might want to\n+            // update the annotated type, see #106857.\n+            return (true, span, \"mut \".to_owned());\n         }\n     }\n "}, {"sha": "c33919c41cdc2c2d6bc7becb74ba5912675b2511", "filename": "tests/ui/array-slice-vec/slice-mut-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Farray-slice-vec%2Fslice-mut-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Farray-slice-vec%2Fslice-mut-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray-slice-vec%2Fslice-mut-2.stderr?ref=fd8aa5ec7d26c8e08d13b38213391c757045e51d", "patch": "@@ -7,7 +7,7 @@ LL |     let _ = &mut x[2..4];\n help: consider changing this to be a mutable reference\n    |\n LL |     let x: &[isize] = &mut [1, 2, 3, 4, 5];\n-   |                       ~~~~~~~~~~~~~~~~~~~~\n+   |                        +++\n \n error: aborting due to previous error\n "}, {"sha": "cfc86ff0dc1216d2b274522b561ffd6dc6af453c", "filename": "tests/ui/borrowck/borrow-raw-address-of-deref-mutability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.stderr?ref=fd8aa5ec7d26c8e08d13b38213391c757045e51d", "patch": "@@ -7,7 +7,7 @@ LL |     let q = &raw mut *x;\n help: consider changing this to be a mutable reference\n    |\n LL |     let x = &mut 0;\n-   |             ~~~~~~\n+   |              +++\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `*const` pointer\n   --> $DIR/borrow-raw-address-of-deref-mutability.rs:14:13\n@@ -18,7 +18,7 @@ LL |     let q = &raw mut *x;\n help: consider changing this to be a mutable pointer\n    |\n LL |     let x = &mut 0 as *const i32;\n-   |             ~~~~~~\n+   |              +++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c161e2d95b43a06b0a1c62657c501e5449c65238", "filename": "tests/ui/borrowck/borrowck-access-permissions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fborrowck%2Fborrowck-access-permissions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fborrowck%2Fborrowck-access-permissions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-access-permissions.stderr?ref=fd8aa5ec7d26c8e08d13b38213391c757045e51d", "patch": "@@ -35,7 +35,7 @@ LL |         let _y1 = &mut *ref_x;\n help: consider changing this to be a mutable reference\n    |\n LL |         let ref_x = &mut x;\n-   |                     ~~~~~~\n+   |                      +++\n \n error[E0596]: cannot borrow `*ptr_x` as mutable, as it is behind a `*const` pointer\n   --> $DIR/borrowck-access-permissions.rs:39:23\n@@ -46,7 +46,7 @@ LL |             let _y1 = &mut *ptr_x;\n help: consider changing this to be a mutable pointer\n    |\n LL |         let ptr_x : *const _ = &mut x;\n-   |                                ~~~~~~\n+   |                                 +++\n \n error[E0596]: cannot borrow `*foo_ref.f` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-access-permissions.rs:48:18\n@@ -57,7 +57,7 @@ LL |         let _y = &mut *foo_ref.f;\n help: consider changing this to be a mutable reference\n    |\n LL |         let foo_ref = &mut foo;\n-   |                       ~~~~~~~~\n+   |                        +++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "12d67d536d951e1e64d282a7bd27c24080826b3a", "filename": "tests/ui/borrowck/borrowck-issue-14498.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fborrowck%2Fborrowck-issue-14498.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fborrowck%2Fborrowck-issue-14498.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-issue-14498.stderr?ref=fd8aa5ec7d26c8e08d13b38213391c757045e51d", "patch": "@@ -7,7 +7,7 @@ LL |     ***p = 2;\n help: consider changing this to be a mutable reference\n    |\n LL |     let p = &mut y;\n-   |             ~~~~~~\n+   |              +++\n \n error[E0506]: cannot assign to `**y` because it is borrowed\n   --> $DIR/borrowck-issue-14498.rs:25:5"}, {"sha": "2985a658fddbef1504673c48d64ee97f9fb1d1ac", "filename": "tests/ui/borrowck/issue-85765.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fborrowck%2Fissue-85765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fborrowck%2Fissue-85765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-85765.stderr?ref=fd8aa5ec7d26c8e08d13b38213391c757045e51d", "patch": "@@ -18,7 +18,7 @@ LL |     *r = 0;\n help: consider changing this to be a mutable reference\n    |\n LL |     let r = &mut mutvar;\n-   |             ~~~~~~~~~~~\n+   |              +++\n \n error[E0594]: cannot assign to `*x`, which is behind a `&` reference\n   --> $DIR/issue-85765.rs:19:5"}, {"sha": "1904faa959861962f2718ab016dea159a84c1afa", "filename": "tests/ui/closures/2229_closure_analysis/diagnostics/mut_ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr?ref=fd8aa5ec7d26c8e08d13b38213391c757045e51d", "patch": "@@ -10,7 +10,7 @@ LL |         **ref_mref_x = y;\n help: consider changing this to be a mutable reference\n    |\n LL |     let ref_mref_x = &mut mref_x;\n-   |                      ~~~~~~~~~~~\n+   |                       +++\n \n error[E0596]: cannot borrow `**mref_ref_x` as mutable, as it is behind a `&` reference\n   --> $DIR/mut_ref.rs:26:13"}, {"sha": "ba94a570256390de93bf9b31586be094efd9e353", "filename": "tests/ui/did_you_mean/issue-40823.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fdid_you_mean%2Fissue-40823.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fdid_you_mean%2Fissue-40823.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fissue-40823.stderr?ref=fd8aa5ec7d26c8e08d13b38213391c757045e51d", "patch": "@@ -7,7 +7,7 @@ LL |     buf.iter_mut();\n help: consider changing this to be a mutable reference\n    |\n LL |     let mut buf = &mut [1, 2, 3, 4];\n-   |                   ~~~~~~~~~~~~~~~~~\n+   |                    +++\n \n error: aborting due to previous error\n "}, {"sha": "e4001856c388b151a6315ea7f0a985dbefb6d759", "filename": "tests/ui/error-codes/E0389.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Ferror-codes%2FE0389.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Ferror-codes%2FE0389.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0389.stderr?ref=fd8aa5ec7d26c8e08d13b38213391c757045e51d", "patch": "@@ -7,7 +7,7 @@ LL |     fancy_ref.num = 6;\n help: consider changing this to be a mutable reference\n    |\n LL |     let fancy_ref = &mut (&mut fancy);\n-   |                     ~~~~~~~~~~~~~~~~~\n+   |                      +++\n \n error: aborting due to previous error\n "}, {"sha": "33a9bf85e23ea080b6476ba3cb9269623732170c", "filename": "tests/ui/issues/issue-51515.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fissues%2Fissue-51515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fissues%2Fissue-51515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-51515.rs?ref=fd8aa5ec7d26c8e08d13b38213391c757045e51d", "patch": "@@ -1,7 +1,6 @@\n fn main() {\n     let foo = &16;\n     //~^ HELP consider changing this to be a mutable reference\n-    //~| SUGGESTION &mut 16\n     *foo = 32;\n     //~^ ERROR cannot assign to `*foo`, which is behind a `&` reference\n     let bar = foo;"}, {"sha": "88b8d2109088696971e18eb4925a35f4d957281b", "filename": "tests/ui/issues/issue-51515.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fissues%2Fissue-51515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fissues%2Fissue-51515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-51515.stderr?ref=fd8aa5ec7d26c8e08d13b38213391c757045e51d", "patch": "@@ -1,16 +1,16 @@\n error[E0594]: cannot assign to `*foo`, which is behind a `&` reference\n-  --> $DIR/issue-51515.rs:5:5\n+  --> $DIR/issue-51515.rs:4:5\n    |\n LL |     *foo = 32;\n    |     ^^^^^^^^^ `foo` is a `&` reference, so the data it refers to cannot be written\n    |\n help: consider changing this to be a mutable reference\n    |\n LL |     let foo = &mut 16;\n-   |               ~~~~~~~\n+   |                +++\n \n error[E0594]: cannot assign to `*bar`, which is behind a `&` reference\n-  --> $DIR/issue-51515.rs:9:5\n+  --> $DIR/issue-51515.rs:8:5\n    |\n LL |     *bar = 64;\n    |     ^^^^^^^^^ `bar` is a `&` reference, so the data it refers to cannot be written"}, {"sha": "09b9d638afb033a1e415bda16095cbe255a3c942", "filename": "tests/ui/nll/issue-47388.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fnll%2Fissue-47388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd8aa5ec7d26c8e08d13b38213391c757045e51d/tests%2Fui%2Fnll%2Fissue-47388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-47388.stderr?ref=fd8aa5ec7d26c8e08d13b38213391c757045e51d", "patch": "@@ -7,7 +7,7 @@ LL |     fancy_ref.num = 6;\n help: consider changing this to be a mutable reference\n    |\n LL |     let fancy_ref = &mut (&mut fancy);\n-   |                     ~~~~~~~~~~~~~~~~~\n+   |                      +++\n \n error: aborting due to previous error\n "}]}