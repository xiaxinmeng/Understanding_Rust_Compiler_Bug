{"sha": "66282cb47d0f4c651fc58a6f458f1e93a2dc33b7", "node_id": "C_kwDOAAsO6NoAKDY2MjgyY2I0N2QwZjRjNjUxZmM1OGE2ZjQ1OGYxZTkzYTJkYzMzYjc", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-06T10:40:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-11T20:47:31Z"}, "message": "add panic_fmt_nounwind for panicing without unwinding, and use it for panic_no_unwind", "tree": {"sha": "0bd9458704b90b6dde97d95e650776c14ece4526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bd9458704b90b6dde97d95e650776c14ece4526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66282cb47d0f4c651fc58a6f458f1e93a2dc33b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66282cb47d0f4c651fc58a6f458f1e93a2dc33b7", "html_url": "https://github.com/rust-lang/rust/commit/66282cb47d0f4c651fc58a6f458f1e93a2dc33b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66282cb47d0f4c651fc58a6f458f1e93a2dc33b7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b50cd18772d3db523070d418dc0411b885a3ff4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b50cd18772d3db523070d418dc0411b885a3ff4", "html_url": "https://github.com/rust-lang/rust/commit/2b50cd18772d3db523070d418dc0411b885a3ff4"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "5c76016c6625883110b62875d45eb390479eb6a3", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/66282cb47d0f4c651fc58a6f458f1e93a2dc33b7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66282cb47d0f4c651fc58a6f458f1e93a2dc33b7/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=66282cb47d0f4c651fc58a6f458f1e93a2dc33b7", "patch": "@@ -1582,13 +1582,6 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n         codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;\n     }\n \n-    // The panic_no_unwind function called by TerminatorKind::Abort will never\n-    // unwind. If the panic handler that it invokes unwind then it will simply\n-    // call the panic handler again.\n-    if Some(did.to_def_id()) == tcx.lang_items().panic_no_unwind() {\n-        codegen_fn_attrs.flags |= CodegenFnAttrFlags::NEVER_UNWIND;\n-    }\n-\n     let supported_target_features = tcx.supported_target_features(LOCAL_CRATE);\n \n     let mut inline_span = None;"}, {"sha": "68c8e8555d39aa57136487b423d19faa1fc352e3", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/66282cb47d0f4c651fc58a6f458f1e93a2dc33b7/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66282cb47d0f4c651fc58a6f458f1e93a2dc33b7/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=66282cb47d0f4c651fc58a6f458f1e93a2dc33b7", "patch": "@@ -84,12 +84,27 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n     panic!(\"index out of bounds: the len is {len} but the index is {index}\")\n }\n \n-// This function is called directly by the codegen backend, and must not have\n-// any extra arguments (including those synthesized by track_caller).\n+/// Panic because we cannot unwind out of a function.\n+///\n+/// This function is called directly by the codegen backend, and must not have\n+/// any extra arguments (including those synthesized by track_caller).\n #[cold]\n #[inline(never)]\n #[lang = \"panic_no_unwind\"] // needed by codegen for panic in nounwind function\n+#[cfg_attr(not(bootstrap), rustc_nounwind)]\n+#[cfg_attr(bootstrap, rustc_allocator_nounwind)]\n fn panic_no_unwind() -> ! {\n+    panic_str_nounwind(\"panic in a function that cannot unwind\")\n+}\n+\n+/// Like panic_fmt, but without unwinding and track_caller to reduce the impact on codesize.\n+/// Also just works on `str`, as a `fmt::Arguments` needs more space to be passed.\n+#[cold]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n+#[cfg_attr(not(bootstrap), rustc_nounwind)]\n+#[cfg_attr(bootstrap, rustc_allocator_nounwind)]\n+pub fn panic_str_nounwind(msg: &'static str) -> ! {\n     if cfg!(feature = \"panic_immediate_abort\") {\n         super::intrinsics::abort()\n     }\n@@ -102,7 +117,8 @@ fn panic_no_unwind() -> ! {\n     }\n \n     // PanicInfo with the `can_unwind` flag set to false forces an abort.\n-    let fmt = format_args!(\"panic in a function that cannot unwind\");\n+    let pieces = [msg];\n+    let fmt = fmt::Arguments::new_v1(&pieces, &[]);\n     let pi = PanicInfo::internal_constructor(Some(&fmt), Location::caller(), false);\n \n     // SAFETY: `panic_impl` is defined in safe Rust code and thus is safe to call."}]}