{"sha": "01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMTU4ZWFlYzZmYzUzYWM2ZDM2NTVkYzMxZmRlOWQ1NWFhYzE1ZTk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-04-27T13:21:31Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-04-30T16:29:15Z"}, "message": "Unify MIR assert messages and const eval errors", "tree": {"sha": "f7862a3156533548d2489821d6018a98967bf2b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7862a3156533548d2489821d6018a98967bf2b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlrnRFssHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MARR\njhAAxbjSoyzL2nWB3AYfSBPfChZUEZ02a0T3NRk7INr0HFqSSFp1Uoxl0Dycui46\nY0fkBNtYlgWU5i12zRJDr83uNIjOiy4twjXKQSQjGsSYSWUeu1ToPsGrJZrf5nAS\nljm/tz3Z7pdYL7Det4v7C/qn+Ybvdkd1AqMiI4uIL+uN05oko4o913xFNk27bcqy\n7Glzn9HJQzb6dD/7tiieRpzIROKMbqKui+EnhNPiPOMoDKCn4pgKoMQCgCyKNuc8\nCUMtHaZh5yYmzMGB48SJKcmoOkFywPRjcIQZgFnRCx5VHb2SIYlfYkQti1wUsYPG\ncdmQ9ny9oD5pbgRxAzmAqMxQOS3CpcVgf/szrDH/IiF0bviLjJeSI0e2qfbCao5/\nZ+yfGdNyRRo1uV0zbN0JplYHIj2B/uIQYRSbvMgZZwCkHcSlxJNJgGuxKRwa/DnU\nc69f5MzsuCO/7LNAq3P+KnA90xUHYr3yfcVTlEWI6D5VavoRhJ4qS7XlREVnJQPc\nj3FCQiRAWuqqIRooZELj612D64mCyeGBsXd6q86sG/O4u28p24jic35wWQAELFDY\nm9w8Y21ivkjuRERy2DwGAunCSj7n/ZZNZBtf98dR1Sovau/VtU3ZORtrlBpBu0Z2\ntChc6eOADOy3219TPctoOkbCAcEbmA5wVO/nPKg95idfS2s=\n=KCsc\n-----END PGP SIGNATURE-----", "payload": "tree f7862a3156533548d2489821d6018a98967bf2b3\nparent 5f46e5cc7e9fbe433fe40d013c19d8d641e7edc0\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1524835291 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1525105755 +0200\n\nUnify MIR assert messages and const eval errors\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "html_url": "https://github.com/rust-lang/rust/commit/01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f46e5cc7e9fbe433fe40d013c19d8d641e7edc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f46e5cc7e9fbe433fe40d013c19d8d641e7edc0", "html_url": "https://github.com/rust-lang/rust/commit/5f46e5cc7e9fbe433fe40d013c19d8d641e7edc0"}], "stats": {"total": 258, "additions": 111, "deletions": 147}, "files": [{"sha": "33f43e53394f59905335e50ed4420360a052ea97", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "patch": "@@ -227,27 +227,6 @@ for mir::TerminatorKind<'gcx> {\n     }\n }\n \n-impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n-for mir::AssertMessage<'gcx> {\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a>,\n-                                          hasher: &mut StableHasher<W>) {\n-        mem::discriminant(self).hash_stable(hcx, hasher);\n-\n-        match *self {\n-            mir::AssertMessage::BoundsCheck { ref len, ref index } => {\n-                len.hash_stable(hcx, hasher);\n-                index.hash_stable(hcx, hasher);\n-            }\n-            mir::AssertMessage::Math(ref const_math_err) => {\n-                const_math_err.hash_stable(hcx, hasher);\n-            }\n-            mir::AssertMessage::GeneratorResumedAfterReturn => (),\n-            mir::AssertMessage::GeneratorResumedAfterPanic => (),\n-        }\n-    }\n-}\n-\n impl_stable_hash_for!(struct mir::Statement<'tcx> { source_info, kind });\n \n impl<'a, 'gcx> HashStable<StableHashingContext<'a>>"}, {"sha": "a40d8e09277406397ec1415f75e77afb8fb7b002", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "patch": "@@ -535,8 +535,8 @@ for ::mir::interpret::EvalError<'gcx> {\n     }\n }\n \n-impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n-for ::mir::interpret::EvalErrorKind<'gcx> {\n+impl<'a, 'gcx, O: HashStable<StableHashingContext<'a>>> HashStable<StableHashingContext<'a>>\n+for ::mir::interpret::EvalErrorKind<'gcx, O> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n@@ -578,6 +578,8 @@ for ::mir::interpret::EvalErrorKind<'gcx> {\n             OverflowNeg |\n             RemainderByZero |\n             DivisionByZero |\n+            GeneratorResumedAfterReturn |\n+            GeneratorResumedAfterPanic |\n             ReferencedConstant => {}\n             MachineError(ref err) => err.hash_stable(hcx, hasher),\n             FunctionPointerTyMismatch(a, b) => {\n@@ -597,10 +599,9 @@ for ::mir::interpret::EvalErrorKind<'gcx> {\n             },\n             InvalidBoolOp(bop) => bop.hash_stable(hcx, hasher),\n             Unimplemented(ref s) => s.hash_stable(hcx, hasher),\n-            ArrayIndexOutOfBounds(sp, a, b) => {\n-                sp.hash_stable(hcx, hasher);\n-                a.hash_stable(hcx, hasher);\n-                b.hash_stable(hcx, hasher)\n+            BoundsCheck { ref len, ref index } => {\n+                len.hash_stable(hcx, hasher);\n+                index.hash_stable(hcx, hasher)\n             },\n             Intrinsic(ref s) => s.hash_stable(hcx, hasher),\n             InvalidChar(c) => c.hash_stable(hcx, hasher),"}, {"sha": "1e1d50c3fc036d36d26369c18ed4d5ffdfc19db7", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "patch": "@@ -7,17 +7,16 @@ use super::{\n     MemoryPointer, Lock, AccessKind\n };\n \n-use syntax::codemap::Span;\n use backtrace::Backtrace;\n \n #[derive(Debug, Clone)]\n pub struct EvalError<'tcx> {\n-    pub kind: EvalErrorKind<'tcx>,\n+    pub kind: EvalErrorKind<'tcx, u64>,\n     pub backtrace: Option<Backtrace>,\n }\n \n-impl<'tcx> From<EvalErrorKind<'tcx>> for EvalError<'tcx> {\n-    fn from(kind: EvalErrorKind<'tcx>) -> Self {\n+impl<'tcx> From<EvalErrorKind<'tcx, u64>> for EvalError<'tcx> {\n+    fn from(kind: EvalErrorKind<'tcx, u64>) -> Self {\n         let backtrace = match env::var(\"MIRI_BACKTRACE\") {\n             Ok(ref val) if !val.is_empty() => Some(Backtrace::new_unresolved()),\n             _ => None\n@@ -29,8 +28,10 @@ impl<'tcx> From<EvalErrorKind<'tcx>> for EvalError<'tcx> {\n     }\n }\n \n-#[derive(Debug, Clone, RustcEncodable, RustcDecodable)]\n-pub enum EvalErrorKind<'tcx> {\n+pub type AssertMessage<'tcx> = EvalErrorKind<'tcx, mir::Operand<'tcx>>;\n+\n+#[derive(Clone, RustcEncodable, RustcDecodable)]\n+pub enum EvalErrorKind<'tcx, O> {\n     /// This variant is used by machines to signal their own errors that do not\n     /// match an existing variant\n     MachineError(String),\n@@ -58,7 +59,7 @@ pub enum EvalErrorKind<'tcx> {\n     Unimplemented(String),\n     DerefFunctionPointer,\n     ExecuteMemory,\n-    ArrayIndexOutOfBounds(Span, u64, u64),\n+    BoundsCheck { len: O, index: O },\n     Overflow(mir::BinOp),\n     OverflowNeg,\n     DivisionByZero,\n@@ -121,11 +122,13 @@ pub enum EvalErrorKind<'tcx> {\n     /// Cannot compute this constant because it depends on another one\n     /// which already produced an error\n     ReferencedConstant,\n+    GeneratorResumedAfterReturn,\n+    GeneratorResumedAfterPanic,\n }\n \n pub type EvalResult<'tcx, T = ()> = Result<T, EvalError<'tcx>>;\n \n-impl<'tcx> EvalErrorKind<'tcx> {\n+impl<'tcx, O> EvalErrorKind<'tcx, O> {\n     pub fn description(&self) -> &str {\n         use self::EvalErrorKind::*;\n         match *self {\n@@ -175,7 +178,7 @@ impl<'tcx> EvalErrorKind<'tcx> {\n                 \"tried to dereference a function pointer\",\n             ExecuteMemory =>\n                 \"tried to treat a memory pointer as a function pointer\",\n-            ArrayIndexOutOfBounds(..) =>\n+            BoundsCheck{..} =>\n                 \"array index out of bounds\",\n             Intrinsic(..) =>\n                 \"intrinsic failed\",\n@@ -228,7 +231,7 @@ impl<'tcx> EvalErrorKind<'tcx> {\n                 \"the evaluated program panicked\",\n             ReadFromReturnPointer =>\n                 \"tried to read from the return pointer\",\n-            EvalErrorKind::PathNotFound(_) =>\n+            PathNotFound(_) =>\n                 \"a path could not be resolved, maybe the crate is not loaded\",\n             UnimplementedTraitSelection =>\n                 \"there were unresolved type arguments during trait selection\",\n@@ -247,14 +250,22 @@ impl<'tcx> EvalErrorKind<'tcx> {\n             Overflow(op) => bug!(\"{:?} cannot overflow\", op),\n             DivisionByZero => \"attempt to divide by zero\",\n             RemainderByZero => \"attempt to calculate the remainder with a divisor of zero\",\n+            GeneratorResumedAfterReturn => \"generator resumed after completion\",\n+            GeneratorResumedAfterPanic => \"generator resumed after panicking\",\n         }\n     }\n }\n \n impl<'tcx> fmt::Display for EvalError<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{:?}\", self.kind)\n+    }\n+}\n+\n+impl<'tcx, O: fmt::Debug> fmt::Debug for EvalErrorKind<'tcx, O> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         use self::EvalErrorKind::*;\n-        match self.kind {\n+        match *self {\n             PointerOutOfBounds { ptr, access, allocation_size } => {\n                 write!(f, \"{} at offset {}, outside bounds of allocation {} which has size {}\",\n                        if access { \"memory access\" } else { \"pointer computed\" },\n@@ -282,8 +293,8 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n             NoMirFor(ref func) => write!(f, \"no mir for `{}`\", func),\n             FunctionPointerTyMismatch(sig, got) =>\n                 write!(f, \"tried to call a function with sig {} through a function pointer of type {}\", sig, got),\n-            ArrayIndexOutOfBounds(span, len, index) =>\n-                write!(f, \"index out of bounds: the len is {} but the index is {} at {:?}\", len, index, span),\n+            BoundsCheck { ref len, ref index } =>\n+                write!(f, \"index out of bounds: the len is {:?} but the index is {:?}\", len, index),\n             ReallocatedWrongMemoryKind(ref old, ref new) =>\n                 write!(f, \"tried to reallocate memory from {} to {}\", old, new),\n             DeallocatedWrongMemoryKind(ref old, ref new) =>\n@@ -305,7 +316,7 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n                 write!(f, \"{}\", inner),\n             IncorrectAllocationInformation(size, size2, align, align2) =>\n                 write!(f, \"incorrect alloc info: expected size {} and align {}, got size {} and align {}\", size, align, size2, align2),\n-            _ => write!(f, \"{}\", self.kind.description()),\n+            _ => write!(f, \"{}\", self.description()),\n         }\n     }\n }"}, {"sha": "546c7a920d538fd6d12a653ea0c41ccf9f510088", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "patch": "@@ -8,7 +8,7 @@ macro_rules! err {\n mod error;\n mod value;\n \n-pub use self::error::{EvalError, EvalResult, EvalErrorKind};\n+pub use self::error::{EvalError, EvalResult, EvalErrorKind, AssertMessage};\n \n pub use self::value::{PrimVal, PrimValKind, Value, Pointer};\n "}, {"sha": "c62fe0372df41c3fff4ed25a0f5d358eb96793f1", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 31, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "patch": "@@ -45,6 +45,8 @@ use syntax_pos::{Span, DUMMY_SP};\n use rustc_apfloat::ieee::{Single, Double};\n use rustc_apfloat::Float;\n \n+pub use mir::interpret::AssertMessage;\n+\n mod cache;\n pub mod tcx;\n pub mod visit;\n@@ -1132,23 +1134,7 @@ impl<'tcx> TerminatorKind<'tcx> {\n                     write!(fmt, \"!\")?;\n                 }\n                 write!(fmt, \"{:?}, \", cond)?;\n-\n-                match *msg {\n-                    AssertMessage::BoundsCheck { ref len, ref index } => {\n-                        write!(fmt, \"{:?}, {:?}, {:?}\",\n-                               \"index out of bounds: the len is {} but the index is {}\",\n-                               len, index)?;\n-                    }\n-                    AssertMessage::Math(ref err) => {\n-                        write!(fmt, \"{:?}\", err.description())?;\n-                    }\n-                    AssertMessage::GeneratorResumedAfterReturn => {\n-                        write!(fmt, \"{:?}\", \"generator resumed after completion\")?;\n-                    }\n-                    AssertMessage::GeneratorResumedAfterPanic => {\n-                        write!(fmt, \"{:?}\", \"generator resumed after panicking\")?;\n-                    }\n-                }\n+                write!(fmt, \"{:?}\", msg)?;\n \n                 write!(fmt, \")\")\n             },\n@@ -1205,17 +1191,6 @@ impl<'tcx> TerminatorKind<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub enum AssertMessage<'tcx> {\n-    BoundsCheck {\n-        len: Operand<'tcx>,\n-        index: Operand<'tcx>\n-    },\n-    Math(EvalErrorKind<'tcx>),\n-    GeneratorResumedAfterReturn,\n-    GeneratorResumedAfterPanic,\n-}\n-\n ///////////////////////////////////////////////////////////////////////////\n // Statements\n \n@@ -2281,8 +2256,8 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 }\n             },\n             Assert { ref cond, expected, ref msg, target, cleanup } => {\n-                let msg = if let AssertMessage::BoundsCheck { ref len, ref index } = *msg {\n-                    AssertMessage::BoundsCheck {\n+                let msg = if let EvalErrorKind::BoundsCheck { ref len, ref index } = *msg {\n+                    EvalErrorKind::BoundsCheck {\n                         len: len.fold_with(folder),\n                         index: index.fold_with(folder),\n                     }\n@@ -2331,7 +2306,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n             },\n             Assert { ref cond, ref msg, .. } => {\n                 if cond.visit_with(visitor) {\n-                    if let AssertMessage::BoundsCheck { ref len, ref index } = *msg {\n+                    if let EvalErrorKind::BoundsCheck { ref len, ref index } = *msg {\n                         len.visit_with(visitor) || index.visit_with(visitor)\n                     } else {\n                         false"}, {"sha": "59b6f3697541a0c8083079caf3d1f05391e25d45", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "patch": "@@ -511,17 +511,13 @@ macro_rules! make_mir_visitor {\n             fn super_assert_message(&mut self,\n                                     msg: & $($mutability)* AssertMessage<'tcx>,\n                                     location: Location) {\n-                match *msg {\n-                    AssertMessage::BoundsCheck {\n+                use mir::interpret::EvalErrorKind::*;\n+                if let BoundsCheck {\n                         ref $($mutability)* len,\n                         ref $($mutability)* index\n-                    } => {\n-                        self.visit_operand(len, location);\n-                        self.visit_operand(index, location);\n-                    }\n-                    AssertMessage::Math(_) => {},\n-                    AssertMessage::GeneratorResumedAfterReturn => {},\n-                    AssertMessage::GeneratorResumedAfterPanic => {},\n+                    } = *msg {\n+                    self.visit_operand(len, location);\n+                    self.visit_operand(index, location);\n                 }\n             }\n "}, {"sha": "d4ed6c60e0efa6baae51eef83e6132c3cdd4e8cc", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "patch": "@@ -473,9 +473,19 @@ impl<'a, 'tcx> Lift<'tcx> for ConstEvalErr<'a> {\n \n impl<'a, 'tcx> Lift<'tcx> for interpret::EvalError<'a> {\n     type Lifted = interpret::EvalError<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n+        Some(interpret::EvalError {\n+            kind: tcx.lift(&self.kind)?,\n+            backtrace: self.backtrace.clone(),\n+        })\n+    }\n+}\n+\n+impl<'a, 'tcx, O: Lift<'tcx>> Lift<'tcx> for interpret::EvalErrorKind<'a, O> {\n+    type Lifted = interpret::EvalErrorKind<'tcx, <O as Lift<'tcx>>::Lifted>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         use ::mir::interpret::EvalErrorKind::*;\n-        let kind = match self.kind {\n+        Some(match *self {\n             MachineError(ref err) => MachineError(err.clone()),\n             FunctionPointerTyMismatch(a, b) => FunctionPointerTyMismatch(\n                 tcx.lift(&a)?,\n@@ -504,7 +514,10 @@ impl<'a, 'tcx> Lift<'tcx> for interpret::EvalError<'a> {\n             Unimplemented(ref s) => Unimplemented(s.clone()),\n             DerefFunctionPointer => DerefFunctionPointer,\n             ExecuteMemory => ExecuteMemory,\n-            ArrayIndexOutOfBounds(sp, a, b) => ArrayIndexOutOfBounds(sp, a, b),\n+            BoundsCheck { ref len, ref index } => BoundsCheck {\n+                len: tcx.lift(len)?,\n+                index: tcx.lift(index)?,\n+            },\n             Intrinsic(ref s) => Intrinsic(s.clone()),\n             InvalidChar(c) => InvalidChar(c),\n             StackFrameLimitReached => StackFrameLimitReached,\n@@ -570,10 +583,8 @@ impl<'a, 'tcx> Lift<'tcx> for interpret::EvalError<'a> {\n             Overflow(op) => Overflow(op),\n             DivisionByZero => DivisionByZero,\n             RemainderByZero => RemainderByZero,\n-        };\n-        Some(interpret::EvalError {\n-            kind: kind,\n-            backtrace: self.backtrace.clone(),\n+            GeneratorResumedAfterReturn => GeneratorResumedAfterReturn,\n+            GeneratorResumedAfterPanic => GeneratorResumedAfterPanic,\n         })\n     }\n }"}, {"sha": "7e1c20dff6a733bbcb44e86197713582d29b5596", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "patch": "@@ -18,7 +18,7 @@ use rustc::infer::InferCtxt;\n use rustc::ty::{self, ParamEnv, TyCtxt};\n use rustc::ty::maps::Providers;\n use rustc::lint::builtin::UNUSED_MUT;\n-use rustc::mir::{AssertMessage, AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n+use rustc::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc::mir::{ClearCrossCrate, Local, Location, Place, Mir, Mutability, Operand};\n use rustc::mir::{Projection, ProjectionElem, Rvalue, Field, Statement, StatementKind};\n use rustc::mir::{Terminator, TerminatorKind};\n@@ -586,18 +586,14 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 cleanup: _,\n             } => {\n                 self.consume_operand(ContextKind::Assert.new(loc), (cond, span), flow_state);\n-                match *msg {\n-                    AssertMessage::BoundsCheck { ref len, ref index } => {\n-                        self.consume_operand(ContextKind::Assert.new(loc), (len, span), flow_state);\n-                        self.consume_operand(\n-                            ContextKind::Assert.new(loc),\n-                            (index, span),\n-                            flow_state,\n-                        );\n-                    }\n-                    AssertMessage::Math(_ /*const_math_err*/) => {}\n-                    AssertMessage::GeneratorResumedAfterReturn => {}\n-                    AssertMessage::GeneratorResumedAfterPanic => {}\n+                use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n+                if let BoundsCheck { ref len, ref index } = *msg {\n+                    self.consume_operand(ContextKind::Assert.new(loc), (len, span), flow_state);\n+                    self.consume_operand(\n+                        ContextKind::Assert.new(loc),\n+                        (index, span),\n+                        flow_state,\n+                    );\n                 }\n             }\n "}, {"sha": "a21b9196badb5856b5fba5c3e8575114662bdf09", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "patch": "@@ -22,6 +22,7 @@ use rustc::infer::region_constraints::{GenericKind, RegionConstraintData};\n use rustc::infer::{InferCtxt, InferOk, InferResult, LateBoundRegionConversionTime, UnitResult};\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor};\n+use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n use rustc::mir::*;\n use rustc::traits::query::NoSolution;\n use rustc::traits::{self, Normalized, TraitEngine};\n@@ -928,7 +929,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     span_mirbug!(self, term, \"bad Assert ({:?}, not bool\", cond_ty);\n                 }\n \n-                if let AssertMessage::BoundsCheck { ref len, ref index } = *msg {\n+                if let BoundsCheck { ref len, ref index } = *msg {\n                     if len.ty(mir, tcx) != tcx.types.usize {\n                         span_mirbug!(self, len, \"bounds-check length non-usize {:?}\", len)\n                     }"}, {"sha": "19ec13324d6b4a8c287a51505f03e7ed82c158c9", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "patch": "@@ -14,6 +14,7 @@ use build::{BlockAnd, BlockAndExtension, Builder};\n use build::expr::category::Category;\n use hair::*;\n use rustc::mir::*;\n+use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n \n use rustc_data_structures::indexed_vec::Idx;\n \n@@ -73,7 +74,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                                            Operand::Copy(Place::Local(idx)),\n                                                            Operand::Copy(len.clone())));\n \n-                let msg = AssertMessage::BoundsCheck {\n+                let msg = BoundsCheck {\n                     len: Operand::Move(len),\n                     index: Operand::Copy(Place::Local(idx))\n                 };"}, {"sha": "9e96fdf821417f7bdcf7ecad1be5bb5ca7baa92a", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "patch": "@@ -85,9 +85,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     this.cfg.push_assign(block, source_info, &is_min,\n                                          Rvalue::BinaryOp(BinOp::Eq, arg.to_copy(), minval));\n \n-                    let err = EvalErrorKind::OverflowNeg;\n                     block = this.assert(block, Operand::Move(is_min), false,\n-                                        AssertMessage::Math(err), expr_span);\n+                                        EvalErrorKind::OverflowNeg, expr_span);\n                 }\n                 block.and(Rvalue::UnaryOp(op, arg))\n             }\n@@ -313,7 +312,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             let err = EvalErrorKind::Overflow(op);\n \n             block = self.assert(block, Operand::Move(of), false,\n-                                AssertMessage::Math(err), span);\n+                                err, span);\n \n             block.and(Rvalue::Use(Operand::Move(val)))\n         } else {\n@@ -336,7 +335,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                      Rvalue::BinaryOp(BinOp::Eq, rhs.to_copy(), zero));\n \n                 block = self.assert(block, Operand::Move(is_zero), false,\n-                                    AssertMessage::Math(zero_err), span);\n+                                    zero_err, span);\n \n                 // We only need to check for the overflow in one case:\n                 // MIN / -1, and only for signed values.\n@@ -361,7 +360,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                          Rvalue::BinaryOp(BinOp::BitAnd, is_neg_1, is_min));\n \n                     block = self.assert(block, Operand::Move(of), false,\n-                                        AssertMessage::Math(overflow_err), span);\n+                                        overflow_err, span);\n                 }\n             }\n "}, {"sha": "b630725b0d2d19a7f6173dd124be0cbea3f6d4db", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "patch": "@@ -148,21 +148,22 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 if expected == cond_val {\n                     self.goto_block(target);\n                 } else {\n-                    use rustc::mir::AssertMessage::*;\n+                    use rustc::mir::interpret::EvalErrorKind::*;\n                     return match *msg {\n                         BoundsCheck { ref len, ref index } => {\n-                            let span = terminator.source_info.span;\n                             let len = self.eval_operand_to_primval(len)\n                                 .expect(\"can't eval len\")\n                                 .to_u64()?;\n                             let index = self.eval_operand_to_primval(index)\n                                 .expect(\"can't eval index\")\n                                 .to_u64()?;\n-                            err!(ArrayIndexOutOfBounds(span, len, index))\n+                            err!(BoundsCheck { len, index })\n                         }\n-                        Math(ref err) => Err(err.clone().into()),\n+                        Overflow(op) => Err(Overflow(op).into()),\n+                        OverflowNeg => Err(OverflowNeg.into()),\n                         GeneratorResumedAfterReturn |\n                         GeneratorResumedAfterPanic => unimplemented!(),\n+                        _ => bug!(),\n                     };\n                 }\n             }"}, {"sha": "e1db216b6bbbcfad1b1d15a9a696d79cc3325674", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "patch": "@@ -478,12 +478,12 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                         .hir\n                         .as_local_node_id(self.source.def_id)\n                         .expect(\"some part of a failing const eval must be local\");\n-                    use rustc::mir::AssertMessage::*;\n+                    use rustc::mir::interpret::EvalErrorKind::*;\n                     let msg = match msg {\n-                        // Need proper const propagator for these\n-                        GeneratorResumedAfterReturn |\n-                        GeneratorResumedAfterPanic => return,\n-                        Math(ref err) => err.description().to_owned(),\n+                        Overflow(_) |\n+                        OverflowNeg |\n+                        DivisionByZero |\n+                        RemainderByZero => msg.description().to_owned(),\n                         BoundsCheck { ref len, ref index } => {\n                             let len = self.eval_operand(len).expect(\"len must be const\");\n                             let len = match len.0 {\n@@ -504,6 +504,8 @@ impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                                 index,\n                             )\n                         },\n+                        // Need proper const propagator for these\n+                        _ => return,\n                     };\n                     self.tcx.lint_node(\n                         ::rustc::lint::builtin::CONST_ERR,"}, {"sha": "36735586e81175f950deb1e646fcce86d02655c4", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "patch": "@@ -738,12 +738,17 @@ fn create_generator_resume_function<'a, 'tcx>(\n \n     let mut cases = create_cases(mir, &transform, |point| Some(point.resume));\n \n+    use rustc::mir::interpret::EvalErrorKind::{\n+        GeneratorResumedAfterPanic,\n+        GeneratorResumedAfterReturn,\n+    };\n+\n     // Jump to the entry point on the 0 state\n     cases.insert(0, (0, BasicBlock::new(0)));\n     // Panic when resumed on the returned (1) state\n-    cases.insert(1, (1, insert_panic_block(tcx, mir, AssertMessage::GeneratorResumedAfterReturn)));\n+    cases.insert(1, (1, insert_panic_block(tcx, mir, GeneratorResumedAfterReturn)));\n     // Panic when resumed on the poisoned (2) state\n-    cases.insert(2, (2, insert_panic_block(tcx, mir, AssertMessage::GeneratorResumedAfterPanic)));\n+    cases.insert(2, (2, insert_panic_block(tcx, mir, GeneratorResumedAfterPanic)));\n \n     insert_switch(tcx, mir, cases, &transform, TerminatorKind::Unreachable);\n "}, {"sha": "45c6e89321d044934c0073ba092fbf951406e9ae", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "patch": "@@ -18,6 +18,7 @@ use rustc::mir::{Place, PlaceElem, PlaceProjection};\n use rustc::mir::{Mir, Operand, ProjectionElem};\n use rustc::mir::{Rvalue, SourceInfo, Statement, StatementKind};\n use rustc::mir::{Terminator, TerminatorKind, VisibilityScope, VisibilityScopeData};\n+use rustc::mir::interpret::EvalErrorKind;\n use rustc::mir::visit as mir_visit;\n use rustc::ty::{self, ClosureSubsts, TyCtxt};\n use rustc::util::nodemap::{FxHashMap};\n@@ -133,14 +134,18 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n                             location: Location) {\n         self.record(\"AssertMessage\", msg);\n         self.record(match *msg {\n-            AssertMessage::BoundsCheck { .. } => \"AssertMessage::BoundsCheck\",\n-            AssertMessage::Math(..) => \"AssertMessage::Math\",\n-            AssertMessage::GeneratorResumedAfterReturn => {\n+            EvalErrorKind::BoundsCheck { .. } => \"AssertMessage::BoundsCheck\",\n+            EvalErrorKind::Overflow(..) => \"AssertMessage::Overflow\",\n+            EvalErrorKind::OverflowNeg => \"AssertMessage::OverflowNeg\",\n+            EvalErrorKind::DivisionByZero => \"AssertMessage::DivisionByZero\",\n+            EvalErrorKind::RemainderByZero => \"AssertMessage::RemainderByZero\",\n+            EvalErrorKind::GeneratorResumedAfterReturn => {\n                 \"AssertMessage::GeneratorResumedAfterReturn\"\n             }\n-            AssertMessage::GeneratorResumedAfterPanic => {\n+            EvalErrorKind::GeneratorResumedAfterPanic => {\n                 \"AssertMessage::GeneratorResumedAfterPanic\"\n             }\n+            _ => bug!(),\n         }, msg);\n         self.super_assert_message(msg, location);\n     }"}, {"sha": "b666c2b211525713e762126a5a437160a7ca787b", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01158eaec6fc53ac6d3655dc31fde9d55aac15e9/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=01158eaec6fc53ac6d3655dc31fde9d55aac15e9", "patch": "@@ -13,6 +13,7 @@ use rustc::middle::lang_items;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, LayoutOf};\n use rustc::mir;\n+use rustc::mir::interpret::EvalErrorKind;\n use abi::{Abi, ArgType, ArgTypeExt, FnType, FnTypeExt, LlvmType, PassMode};\n use base;\n use callee;\n@@ -311,9 +312,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                 // checked operation, just a comparison with the minimum\n                 // value, so we have to check for the assert message.\n                 if !bx.cx.check_overflow {\n-                    use rustc::mir::interpret::EvalErrorKind::OverflowNeg;\n-\n-                    if let mir::AssertMessage::Math(OverflowNeg) = *msg {\n+                    if let mir::interpret::EvalErrorKind::OverflowNeg = *msg {\n                         const_cond = Some(expected);\n                     }\n                 }\n@@ -353,7 +352,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n \n                 // Put together the arguments to the panic entry point.\n                 let (lang_item, args) = match *msg {\n-                    mir::AssertMessage::BoundsCheck { ref len, ref index } => {\n+                    EvalErrorKind::BoundsCheck { ref len, ref index } => {\n                         let len = self.trans_operand(&mut bx, len).immediate();\n                         let index = self.trans_operand(&mut bx, index).immediate();\n \n@@ -365,26 +364,8 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                         (lang_items::PanicBoundsCheckFnLangItem,\n                          vec![file_line_col, index, len])\n                     }\n-                    mir::AssertMessage::Math(ref err) => {\n-                        let msg_str = Symbol::intern(err.description()).as_str();\n-                        let msg_str = C_str_slice(bx.cx, msg_str);\n-                        let msg_file_line_col = C_struct(bx.cx,\n-                                                     &[msg_str, filename, line, col],\n-                                                     false);\n-                        let msg_file_line_col = consts::addr_of(bx.cx,\n-                                                                msg_file_line_col,\n-                                                                align,\n-                                                                \"panic_loc\");\n-                        (lang_items::PanicFnLangItem,\n-                         vec![msg_file_line_col])\n-                    }\n-                    mir::AssertMessage::GeneratorResumedAfterReturn |\n-                    mir::AssertMessage::GeneratorResumedAfterPanic => {\n-                        let str = if let mir::AssertMessage::GeneratorResumedAfterReturn = *msg {\n-                            \"generator resumed after completion\"\n-                        } else {\n-                            \"generator resumed after panicking\"\n-                        };\n+                    _ => {\n+                        let str = msg.description();\n                         let msg_str = Symbol::intern(str).as_str();\n                         let msg_str = C_str_slice(bx.cx, msg_str);\n                         let msg_file_line_col = C_struct(bx.cx,"}]}