{"sha": "518263d889818d16a09a8260f212f8ff4bf345f1", "node_id": "C_kwDOAAsO6NoAKDUxODI2M2Q4ODk4MThkMTZhMDlhODI2MGYyMTJmOGZmNGJmMzQ1ZjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-11T00:36:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-11T00:36:26Z"}, "message": "Auto merge of #102896 - matthiaskrgr:rollup-jg5xawz, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #101360 (Point out incompatible closure bounds)\n - #101789 (`let`'s not needed in struct field definitions)\n - #102846 (update to syn-1.0.102)\n - #102871 (rustdoc: clean up overly complex `.trait-impl` CSS selectors)\n - #102876 (suggest candidates for unresolved import)\n - #102888 (Improve rustdoc-gui search-color test)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2c9eac4a16c0017d787803260d69c9ca8e476f47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c9eac4a16c0017d787803260d69c9ca8e476f47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/518263d889818d16a09a8260f212f8ff4bf345f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/518263d889818d16a09a8260f212f8ff4bf345f1", "html_url": "https://github.com/rust-lang/rust/commit/518263d889818d16a09a8260f212f8ff4bf345f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/518263d889818d16a09a8260f212f8ff4bf345f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36c8e291a617ae6bd4b8ff13c54c82862eaf0eec", "url": "https://api.github.com/repos/rust-lang/rust/commits/36c8e291a617ae6bd4b8ff13c54c82862eaf0eec", "html_url": "https://github.com/rust-lang/rust/commit/36c8e291a617ae6bd4b8ff13c54c82862eaf0eec"}, {"sha": "a52eba4a89df69abb1a104bd472f69c70fe20b8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a52eba4a89df69abb1a104bd472f69c70fe20b8f", "html_url": "https://github.com/rust-lang/rust/commit/a52eba4a89df69abb1a104bd472f69c70fe20b8f"}], "stats": {"total": 1281, "additions": 538, "deletions": 743}, "files": [{"sha": "db166cf0c51858f4f9d1f2218733722efcb07a8d", "filename": "Cargo.lock", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -2721,11 +2721,11 @@ checksum = \"dbf0c48bc1d91375ae5c3cd81e3722dff1abcf81a30960240640d223f59fe0e5\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.37\"\n+version = \"1.0.46\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ec757218438d5fda206afc041538b2f6d889286160d649a86a24d37e1235afd1\"\n+checksum = \"94e2ef8dbfc347b10c094890f778ee2e36ca9bb4262e86dc99cd217e35f3470b\"\n dependencies = [\n- \"unicode-xid\",\n+ \"unicode-ident\",\n ]\n \n [[package]]\n@@ -4719,13 +4719,13 @@ checksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.91\"\n+version = \"1.0.102\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b683b2b825c8eef438b77c36a06dc262294da3d5a5813fac20da149241dcd44d\"\n+checksum = \"3fcd952facd492f9be3ef0d0b7032a6e442ee9b361d4acc2b1d0c4aaa5f613a1\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"unicode-xid\",\n+ \"unicode-ident\",\n ]\n \n [[package]]\n@@ -5215,6 +5215,12 @@ dependencies = [\n  \"matches\",\n ]\n \n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6ceab39d59e4c9499d4e5a8ee0e2735b891bb7308ac83dfb4e80cad195c9f6f3\"\n+\n [[package]]\n name = \"unicode-normalization\"\n version = \"0.1.22\""}, {"sha": "e82044a89c479dad093aeb869264fcc1640d025f", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -1788,7 +1788,23 @@ impl<'a> Parser<'a> {\n                     }\n                 }\n             } else {\n-                self.expected_ident_found()\n+                let mut err = self.expected_ident_found();\n+                if let Some((ident, _)) = self.token.ident() && ident.as_str() == \"let\" {\n+                    self.bump(); // `let`\n+                    let span = self.prev_token.span.until(self.token.span);\n+                    err.span_suggestion(\n+                        span,\n+                        \"remove the let, the `let` keyword is not allowed in struct field definitions\",\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                    err.note(\"the `let` keyword is not allowed in `struct` fields\");\n+                    err.note(\"see <https://doc.rust-lang.org/book/ch05-01-defining-structs.html> for more information\");\n+                    err.emit();\n+                    self.bump();\n+                    return Ok(ident);\n+                }\n+                err\n             };\n             return Err(err);\n         }"}, {"sha": "9a3eac2f8662263402f2f40c69842095466ed14e", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -70,6 +70,7 @@ impl TypoSuggestion {\n }\n \n /// A free importable items suggested in case of resolution failure.\n+#[derive(Debug, Clone)]\n pub(crate) struct ImportSuggestion {\n     pub did: Option<DefId>,\n     pub descr: &'static str,\n@@ -139,6 +140,7 @@ impl<'a> Resolver<'a> {\n                     if instead { Instead::Yes } else { Instead::No },\n                     found_use,\n                     IsPattern::No,\n+                    IsImport::No,\n                     path,\n                 );\n                 err.emit();\n@@ -698,6 +700,7 @@ impl<'a> Resolver<'a> {\n                         Instead::No,\n                         FoundUse::Yes,\n                         IsPattern::Yes,\n+                        IsImport::No,\n                         vec![],\n                     );\n                 }\n@@ -1481,6 +1484,7 @@ impl<'a> Resolver<'a> {\n             Instead::No,\n             FoundUse::Yes,\n             IsPattern::No,\n+            IsImport::No,\n             vec![],\n         );\n \n@@ -2449,6 +2453,34 @@ enum IsPattern {\n     No,\n }\n \n+/// Whether a binding is part of a use statement. Used for diagnostics.\n+enum IsImport {\n+    Yes,\n+    No,\n+}\n+\n+pub(crate) fn import_candidates(\n+    session: &Session,\n+    source_span: &IndexVec<LocalDefId, Span>,\n+    err: &mut Diagnostic,\n+    // This is `None` if all placement locations are inside expansions\n+    use_placement_span: Option<Span>,\n+    candidates: &[ImportSuggestion],\n+) {\n+    show_candidates(\n+        session,\n+        source_span,\n+        err,\n+        use_placement_span,\n+        candidates,\n+        Instead::Yes,\n+        FoundUse::Yes,\n+        IsPattern::No,\n+        IsImport::Yes,\n+        vec![],\n+    );\n+}\n+\n /// When an entity with a given name is not available in scope, we search for\n /// entities with that name in all crates. This method allows outputting the\n /// results of this search in a programmer-friendly way\n@@ -2462,6 +2494,7 @@ fn show_candidates(\n     instead: Instead,\n     found_use: FoundUse,\n     is_pattern: IsPattern,\n+    is_import: IsImport,\n     path: Vec<Segment>,\n ) {\n     if candidates.is_empty() {\n@@ -2521,7 +2554,8 @@ fn show_candidates(\n                 // produce an additional newline to separate the new use statement\n                 // from the directly following item.\n                 let additional_newline = if let FoundUse::Yes = found_use { \"\" } else { \"\\n\" };\n-                candidate.0 = format!(\"use {};\\n{}\", &candidate.0, additional_newline);\n+                let add_use = if let IsImport::Yes = is_import { \"\" } else { \"use \" };\n+                candidate.0 = format!(\"{}{};\\n{}\", add_use, &candidate.0, additional_newline);\n             }\n \n             err.span_suggestions(\n@@ -2551,7 +2585,7 @@ fn show_candidates(\n \n             err.note(&msg);\n         }\n-    } else {\n+    } else if matches!(is_import, IsImport::No) {\n         assert!(!inaccessible_path_strings.is_empty());\n \n         let prefix ="}, {"sha": "9e2234ae4a54fdae22fb1f419baff04603ecca6e", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -1,9 +1,9 @@\n //! A bunch of methods and structures more or less related to resolving imports.\n \n-use crate::diagnostics::Suggestion;\n+use crate::diagnostics::{import_candidates, Suggestion};\n use crate::Determinacy::{self, *};\n use crate::Namespace::{self, *};\n-use crate::{module_to_string, names_to_string};\n+use crate::{module_to_string, names_to_string, ImportSuggestion};\n use crate::{AmbiguityKind, BindingKey, ModuleKind, ResolutionError, Resolver, Segment};\n use crate::{Finalize, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet};\n use crate::{NameBinding, NameBindingKind, PathResult};\n@@ -406,6 +406,7 @@ struct UnresolvedImportError {\n     label: Option<String>,\n     note: Option<String>,\n     suggestion: Option<Suggestion>,\n+    candidate: Option<Vec<ImportSuggestion>>,\n }\n \n pub struct ImportResolver<'a, 'b> {\n@@ -497,6 +498,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     label: None,\n                     note: None,\n                     suggestion: None,\n+                    candidate: None,\n                 };\n                 if path.contains(\"::\") {\n                     errors.push((path, err))\n@@ -547,6 +549,16 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 }\n                 diag.multipart_suggestion(&msg, suggestions, applicability);\n             }\n+\n+            if let Some(candidate) = &err.candidate {\n+                import_candidates(\n+                    self.r.session,\n+                    &self.r.source_span,\n+                    &mut diag,\n+                    Some(err.span),\n+                    &candidate,\n+                )\n+            }\n         }\n \n         diag.emit();\n@@ -664,6 +676,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             Some(finalize),\n             ignore_binding,\n         );\n+\n         let no_ambiguity = self.r.ambiguity_errors.len() == prev_ambiguity_errors_len;\n         import.vis.set(orig_vis);\n         let module = match path_res {\n@@ -706,12 +719,14 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                                 String::from(\"a similar path exists\"),\n                                 Applicability::MaybeIncorrect,\n                             )),\n+                            candidate: None,\n                         },\n                         None => UnresolvedImportError {\n                             span,\n                             label: Some(label),\n                             note: None,\n                             suggestion,\n+                            candidate: None,\n                         },\n                     };\n                     return Some(err);\n@@ -754,6 +769,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                             label: Some(String::from(\"cannot glob-import a module into itself\")),\n                             note: None,\n                             suggestion: None,\n+                            candidate: None,\n                         });\n                     }\n                 }\n@@ -919,11 +935,19 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     }\n                 };\n \n+                let parent_suggestion =\n+                    self.r.lookup_import_candidates(ident, TypeNS, &import.parent_scope, |_| true);\n+\n                 Some(UnresolvedImportError {\n                     span: import.span,\n                     label: Some(label),\n                     note,\n                     suggestion,\n+                    candidate: if !parent_suggestion.is_empty() {\n+                        Some(parent_suggestion)\n+                    } else {\n+                        None\n+                    },\n                 })\n             } else {\n                 // `resolve_ident_in_module` reported a privacy error."}, {"sha": "4e8baa2dfab6c3d176d6f0ff25a362f234eaa208", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -1255,6 +1255,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         found_span,\n                         found_trait_ref,\n                         expected_trait_ref,\n+                        obligation.cause.code(),\n                     )\n                 } else {\n                     let (closure_span, found) = found_did"}, {"sha": "fda6a2236b1957b1c81e9580a52b69da6200ab17", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -254,8 +254,15 @@ pub trait TypeErrCtxtExt<'tcx> {\n         found_span: Option<Span>,\n         found: ty::PolyTraitRef<'tcx>,\n         expected: ty::PolyTraitRef<'tcx>,\n+        cause: &ObligationCauseCode<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n \n+    fn note_conflicting_closure_bounds(\n+        &self,\n+        cause: &ObligationCauseCode<'tcx>,\n+        err: &mut DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+    );\n+\n     fn suggest_fully_qualified_path(\n         &self,\n         err: &mut Diagnostic,\n@@ -1584,6 +1591,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         found_span: Option<Span>,\n         found: ty::PolyTraitRef<'tcx>,\n         expected: ty::PolyTraitRef<'tcx>,\n+        cause: &ObligationCauseCode<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         pub(crate) fn build_fn_sig_ty<'tcx>(\n             infcx: &InferCtxt<'tcx>,\n@@ -1645,9 +1653,68 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let signature_kind = format!(\"{argument_kind} signature\");\n         err.note_expected_found(&signature_kind, expected_str, &signature_kind, found_str);\n \n+        self.note_conflicting_closure_bounds(cause, &mut err);\n+\n         err\n     }\n \n+    // Add a note if there are two `Fn`-family bounds that have conflicting argument\n+    // requirements, which will always cause a closure to have a type error.\n+    fn note_conflicting_closure_bounds(\n+        &self,\n+        cause: &ObligationCauseCode<'tcx>,\n+        err: &mut DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+    ) {\n+        // First, look for an `ExprBindingObligation`, which means we can get\n+        // the unsubstituted predicate list of the called function. And check\n+        // that the predicate that we failed to satisfy is a `Fn`-like trait.\n+        if let ObligationCauseCode::ExprBindingObligation(def_id, _, _, idx) = cause\n+            && let predicates = self.tcx.predicates_of(def_id).instantiate_identity(self.tcx)\n+            && let Some(pred) = predicates.predicates.get(*idx)\n+            && let ty::PredicateKind::Trait(trait_pred) = pred.kind().skip_binder()\n+            && ty::ClosureKind::from_def_id(self.tcx, trait_pred.def_id()).is_some()\n+        {\n+            let expected_self =\n+                self.tcx.anonymize_late_bound_regions(pred.kind().rebind(trait_pred.self_ty()));\n+            let expected_substs = self\n+                .tcx\n+                .anonymize_late_bound_regions(pred.kind().rebind(trait_pred.trait_ref.substs));\n+\n+            // Find another predicate whose self-type is equal to the expected self type,\n+            // but whose substs don't match.\n+            let other_pred = std::iter::zip(&predicates.predicates, &predicates.spans)\n+                .enumerate()\n+                .find(|(other_idx, (pred, _))| match pred.kind().skip_binder() {\n+                    ty::PredicateKind::Trait(trait_pred)\n+                        if ty::ClosureKind::from_def_id(self.tcx, trait_pred.def_id())\n+                            .is_some()\n+                            && other_idx != idx\n+                            // Make sure that the self type matches\n+                            // (i.e. constraining this closure)\n+                            && expected_self\n+                                == self.tcx.anonymize_late_bound_regions(\n+                                    pred.kind().rebind(trait_pred.self_ty()),\n+                                )\n+                            // But the substs don't match (i.e. incompatible args)\n+                            && expected_substs\n+                                != self.tcx.anonymize_late_bound_regions(\n+                                    pred.kind().rebind(trait_pred.trait_ref.substs),\n+                                ) =>\n+                    {\n+                        true\n+                    }\n+                    _ => false,\n+                });\n+            // If we found one, then it's very likely the cause of the error.\n+            if let Some((_, (_, other_pred_span))) = other_pred {\n+                err.span_note(\n+                    *other_pred_span,\n+                    \"closure inferred to have a different signature due to this bound\",\n+                );\n+            }\n+        }\n+    }\n+\n     fn suggest_fully_qualified_path(\n         &self,\n         err: &mut Diagnostic,"}, {"sha": "baecca44cd987adda8d1b3bf2ba2c4a068bbd0a9", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -445,9 +445,9 @@ dependencies = [\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.39\"\n+version = \"1.0.46\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c54b25569025b7fc9651de43004ae593a75ad88543b17178aa5e1b9c4f15f56f\"\n+checksum = \"94e2ef8dbfc347b10c094890f778ee2e36ca9bb4262e86dc99cd217e35f3470b\"\n dependencies = [\n  \"unicode-ident\",\n ]\n@@ -596,9 +596,9 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.95\"\n+version = \"1.0.102\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fbaf6116ab8924f39d52792136fb74fd60a80194cf1b1c6ffa6453eef1c3f942\"\n+checksum = \"3fcd952facd492f9be3ef0d0b7032a6e442ee9b361d4acc2b1d0c4aaa5f613a1\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\","}, {"sha": "e96a87111cbbdd7d8aad561744141f5543f33c8d", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -1 +1 @@\n-0.12.0\n\\ No newline at end of file\n+0.12.2\n\\ No newline at end of file"}, {"sha": "d4228a2ebc6382c29ec3f3b5ec18582ba4c0dad8", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -734,9 +734,7 @@ a {\n \tdisplay: initial;\n }\n \n-.impl:hover > .anchor, .method.trait-impl:hover > .anchor,\n-.type.trait-impl:hover > .anchor, .associatedconstant.trait-impl:hover > .anchor,\n-.associatedtype.trait-impl:hover > .anchor {\n+.impl:hover > .anchor, .trait-impl:hover > .anchor {\n \tdisplay: inline-block;\n \tposition: absolute;\n }"}, {"sha": "69bb30df954bddbe9d0de63e4b1076a23568a97b", "filename": "src/test/rustdoc-gui/search-result-color.goml", "status": "modified", "additions": 233, "deletions": 710, "changes": 943, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -1,4 +1,57 @@\n // The goal of this test is to ensure the color of the text is the one expected.\n+\n+define-function: (\n+    \"check-result-color\",\n+    (result_kind, color, hover_color),\n+    [\n+        (\n+            \"assert-css\",\n+            (\".result-\" + |result_kind| + \" .\" + |result_kind|, {\"color\": |color|}, ALL),\n+        ),\n+        (\n+            \"assert-css\",\n+            (\n+                \".result-\" + |result_kind|,\n+                {\"color\": |entry_color|, \"background-color\": |background_color|},\n+            ),\n+        ),\n+        (\n+            \"move-cursor-to\",\n+            \".result-\" + |result_kind|,\n+        ),\n+        (\n+            \"assert-css\",\n+            (\n+                \".result-\" + |result_kind| + \":hover\",\n+                {\"color\": |hover_entry_color|, \"background-color\": |hover_background_color|},\n+            ),\n+        ),\n+        (\n+            \"assert-css\",\n+            (\".result-\" + |result_kind| + \":hover .\" + |result_kind|, {\"color\": |hover_color|}),\n+        ),\n+        (\n+            \"move-cursor-to\",\n+            \".search-input\",\n+        ),\n+        (\n+            \"focus\",\n+            \".result-\" + |result_kind|,\n+        ),\n+        (\n+            \"assert-css\",\n+            (\n+                \".result-\" + |result_kind| + \":focus\",\n+                {\"color\": |hover_entry_color|, \"background-color\": |hover_background_color|},\n+            ),\n+        ),\n+        (\n+            \"assert-css\",\n+            (\".result-\" + |result_kind| + \":focus .\" + |result_kind|, {\"color\": |hover_color|}),\n+        ),\n+    ],\n+)\n+\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html?search=coo\"\n \n // This is needed so that the text color is computed.\n@@ -28,240 +81,66 @@ assert-css: (\n     {\"color\": \"rgb(120, 135, 151)\"},\n )\n \n-// Checking the color of \"keyword\".\n-assert-css: (\n-    \".result-keyword .keyword\",\n-    {\"color\": \"rgb(57, 175, 215)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-keyword\",\n-    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-keyword\"\n-assert-css: (\n-    \".result-keyword:hover\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n-)\n-assert-css: (\n-    \".result-keyword:hover .keyword\",\n-    {\"color\": \"rgb(57, 175, 215)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-keyword\"\n-assert-css: (\n-    \".result-keyword:focus\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n-)\n-assert-css: (\n-    \".result-keyword:focus .keyword\",\n-    {\"color\": \"rgb(57, 175, 215)\"},\n-)\n-\n-// Check the color of \"struct\".\n-assert-css: (\n-    \".result-struct .struct\",\n-    {\"color\": \"rgb(255, 160, 165)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-struct\",\n-    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-struct\"\n-assert-css: (\n-    \".result-struct:hover\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n-)\n-assert-css: (\n-    \".result-struct:hover .struct\",\n-    {\"color\": \"rgb(255, 160, 165)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-struct\"\n-assert-css: (\n-    \".result-struct:focus\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n-)\n-assert-css: (\n-    \".result-struct:focus .struct\",\n-    {\"color\": \"rgb(255, 160, 165)\"},\n-)\n-\n-// Check the color of \"associated type\".\n-assert-css: (\n-    \".result-associatedtype .associatedtype\",\n-    {\"color\": \"rgb(57, 175, 215)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-associatedtype\",\n-    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-associatedtype\"\n-assert-css: (\n-    \".result-associatedtype:hover\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n-)\n-assert-css: (\n-    \".result-associatedtype:hover .associatedtype\",\n-    {\"color\": \"rgb(57, 175, 215)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-associatedtype\"\n-assert-css: (\n-    \".result-associatedtype:focus\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n-)\n-assert-css: (\n-    \".result-associatedtype:focus .associatedtype\",\n-    {\"color\": \"rgb(57, 175, 215)\"},\n-)\n-\n-// Check the color of \"type method\".\n-assert-css: (\n-    \".result-tymethod .tymethod\",\n-    {\"color\": \"rgb(253, 214, 135)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-tymethod\",\n-    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-assert-css: (\n-    \".result-tymethod .tymethod\",\n-    {\"color\": \"rgb(253, 214, 135)\"},\n-)\n-move-cursor-to: \".result-tymethod\"\n-assert-css: (\n-    \".result-tymethod:hover\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-tymethod\"\n-assert-css: (\n-    \".result-tymethod:focus\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n-)\n-\n-// Check the color of \"method\".\n-assert-css: (\n-    \".result-method .method\",\n-    {\"color\": \"rgb(253, 214, 135)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-method\",\n-    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-method\"\n-assert-css: (\n-    \".result-method:hover\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n-)\n-assert-css: (\n-    \".result-method:hover .method\",\n-    {\"color\": \"rgb(253, 214, 135)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-method\"\n-assert-css: (\n-    \".result-method:focus\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n-)\n-assert-css: (\n-    \".result-method:focus .method\",\n-    {\"color\": \"rgb(253, 214, 135)\"},\n-)\n-\n-// Check the color of \"struct field\".\n-assert-css: (\n-    \".result-structfield .structfield\",\n-    {\"color\": \"rgb(0, 150, 207)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-structfield\",\n-    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-structfield\"\n-assert-css: (\n-    \".result-structfield:hover\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n-)\n-assert-css: (\n-    \".result-structfield:hover .structfield\",\n-    {\"color\": \"rgb(255, 255, 255)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-structfield\"\n-assert-css: (\n-    \".result-structfield:focus\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n-)\n-assert-css: (\n-    \".result-structfield:focus .structfield\",\n-    {\"color\": \"rgb(255, 255, 255)\"},\n-)\n-\n-// Check the color of \"macro\".\n-assert-css: (\n-    \".result-macro .macro\",\n-    {\"color\": \"rgb(163, 122, 204)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-macro\",\n-    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-macro\"\n-assert-css: (\n-    \".result-macro:hover\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n-)\n-assert-css: (\n-    \".result-macro:hover .macro\",\n-    {\"color\": \"rgb(163, 122, 204)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-macro\"\n-assert-css: (\n-    \".result-macro:focus\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n-)\n-assert-css: (\n-    \".result-macro:focus .macro\",\n-    {\"color\": \"rgb(163, 122, 204)\"},\n-)\n-\n-// Check the color of \"fn\".\n-assert-css: (\n-    \".result-fn .fn\",\n-    {\"color\": \"rgb(253, 214, 135)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-fn\",\n-    {\"color\": \"rgb(0, 150, 207)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-fn\"\n-assert-css: (\n-    \".result-fn:hover\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n-)\n-assert-css: (\n-    \".result-fn:hover .fn\",\n-    {\"color\": \"rgb(253, 214, 135)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-fn\"\n-assert-css: (\n-    \".result-fn:focus\",\n-    {\"color\": \"rgb(255, 255, 255)\", \"background-color\": \"rgb(60, 60, 60)\"},\n-)\n-assert-css: (\n-    \".result-fn:focus .fn\",\n-    {\"color\": \"rgb(253, 214, 135)\"},\n+store-value: (entry_color, \"rgb(0, 150, 207)\") // color of the search entry\n+store-value: (hover_entry_color, \"rgb(255, 255, 255)\") // color of the hovered/focused search entry\n+store-value: (background_color, \"rgba(0, 0, 0, 0)\") // background color\n+store-value: (hover_background_color, \"rgb(60, 60, 60)\") // hover background color\n+\n+call-function: (\n+    \"check-result-color\", (\n+        \"keyword\", // item kind\n+        \"rgb(57, 175, 215)\", // color of item kind\n+        \"rgb(57, 175, 215)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"struct\", // item kind\n+        \"rgb(255, 160, 165)\", // color of item kind\n+        \"rgb(255, 160, 165)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"associatedtype\", // item kind\n+        \"rgb(57, 175, 215)\", // color of item kind\n+        \"rgb(57, 175, 215)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"tymethod\", // item kind\n+        \"rgb(253, 214, 135)\", // color of item kind\n+        \"rgb(253, 214, 135)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"method\", // item kind\n+        \"rgb(253, 214, 135)\", // color of item kind\n+        \"rgb(253, 214, 135)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"structfield\", // item kind\n+        \"rgb(0, 150, 207)\", // color of item kind\n+        \"rgb(255, 255, 255)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"macro\", // item kind\n+        \"rgb(163, 122, 204)\", // color of item kind\n+        \"rgb(163, 122, 204)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"fn\", // item kind\n+        \"rgb(253, 214, 135)\", // color of item kind\n+        \"rgb(253, 214, 135)\", // color of hovered/focused item kind\n+    ),\n )\n \n // Checking the `<a>` container.\n@@ -308,244 +187,66 @@ assert-css: (\n     {\"color\": \"rgb(221, 221, 221)\"},\n )\n \n-// Checking the color of \"keyword\".\n-assert-css: (\n-    \".result-keyword .keyword\",\n-    {\"color\": \"rgb(210, 153, 29)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-keyword\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-keyword\"\n-assert-css: (\n-    \".result-keyword:hover\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n-)\n-assert-css: (\n-    \".result-keyword:hover .keyword\",\n-    {\"color\": \"rgb(210, 153, 29)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-keyword\"\n-assert-css: (\n-    \".result-keyword:focus\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n-)\n-assert-css: (\n-    \".result-keyword:focus .keyword\",\n-    {\"color\": \"rgb(210, 153, 29)\"},\n-)\n-\n-// Check the color of \"struct\".\n-assert-css: (\n-    \".result-struct .struct\",\n-    {\"color\": \"rgb(45, 191, 184)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-struct\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-struct\"\n-assert-css: (\n-    \".result-struct:hover\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n-)\n-assert-css: (\n-    \".result-struct:hover .struct\",\n-    {\"color\": \"rgb(45, 191, 184)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-struct\"\n-assert-css: (\n-    \".result-struct:focus\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n-)\n-assert-css: (\n-    \".result-struct:focus .struct\",\n-    {\"color\": \"rgb(45, 191, 184)\"},\n-)\n-\n-// Check the color of \"associated type\".\n-assert-css: (\n-    \".result-associatedtype .associatedtype\",\n-    {\"color\": \"rgb(210, 153, 29)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-associatedtype\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-associatedtype\"\n-assert-css: (\n-    \".result-associatedtype:hover\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n-)\n-assert-css: (\n-    \".result-associatedtype:hover .associatedtype\",\n-    {\"color\": \"rgb(210, 153, 29)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-associatedtype\"\n-assert-css: (\n-    \".result-associatedtype:focus\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n-)\n-assert-css: (\n-    \".result-associatedtype:focus .associatedtype\",\n-    {\"color\": \"rgb(210, 153, 29)\"},\n-)\n-\n-// Check the color of \"type method\".\n-assert-css: (\n-    \".result-tymethod .tymethod\",\n-    {\"color\": \"rgb(43, 171, 99)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-tymethod\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-tymethod\"\n-assert-css: (\n-    \".result-tymethod:hover\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n-)\n-assert-css: (\n-    \".result-tymethod:hover .tymethod\",\n-    {\"color\": \"rgb(43, 171, 99)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-tymethod\"\n-assert-css: (\n-    \".result-tymethod:focus\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n-)\n-assert-css: (\n-    \".result-tymethod:focus .tymethod\",\n-    {\"color\": \"rgb(43, 171, 99)\"},\n-)\n-\n-// Check the color of \"method\".\n-assert-css: (\n-    \".result-method .method\",\n-    {\"color\": \"rgb(43, 171, 99)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-method\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-method\"\n-assert-css: (\n-    \".result-method:hover\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n-)\n-assert-css: (\n-    \".result-method:hover .method\",\n-    {\"color\": \"rgb(43, 171, 99)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-method\"\n-assert-css: (\n-    \".result-method:focus\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n-)\n-assert-css: (\n-    \".result-method:focus .method\",\n-    {\"color\": \"rgb(43, 171, 99)\"},\n-)\n-\n-// Check the color of \"struct field\".\n-assert-css: (\n-    \".result-structfield .structfield\",\n-    {\"color\": \"rgb(221, 221, 221)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-structfield\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-structfield\"\n-assert-css: (\n-    \".result-structfield:hover\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n-)\n-assert-css: (\n-    \".result-structfield:hover .structfield\",\n-    {\"color\": \"rgb(221, 221, 221)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-structfield\"\n-assert-css: (\n-    \".result-structfield:focus\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n-)\n-assert-css: (\n-    \".result-structfield:focus .structfield\",\n-    {\"color\": \"rgb(221, 221, 221)\"},\n-)\n-\n-// Check the color of \"macro\".\n-assert-css: (\n-    \".result-macro .macro\",\n-    {\"color\": \"rgb(9, 189, 0)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-macro\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-macro\"\n-assert-css: (\n-    \".result-macro:hover\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n-)\n-assert-css: (\n-    \".result-macro:hover .macro\",\n-    {\"color\": \"rgb(9, 189, 0)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-macro\"\n-assert-css: (\n-    \".result-macro:focus\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n-)\n-assert-css: (\n-    \".result-macro:focus .macro\",\n-    {\"color\": \"rgb(9, 189, 0)\"},\n-)\n-\n-// Check the color of \"fn\".\n-assert-css: (\n-    \".result-fn .fn\",\n-    {\"color\": \"rgb(43, 171, 99)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-fn\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-fn\"\n-assert-css: (\n-    \".result-fn:hover\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n-)\n-assert-css: (\n-    \".result-fn:hover .fn\",\n-    {\"color\": \"rgb(43, 171, 99)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-fn\"\n-assert-css: (\n-    \".result-fn:focus\",\n-    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(97, 97, 97)\"},\n-)\n-assert-css: (\n-    \".result-fn:focus .fn\",\n-    {\"color\": \"rgb(43, 171, 99)\"},\n+store-value: (entry_color, \"rgb(221, 221, 221)\") // color of the search entry\n+store-value: (hover_entry_color, \"rgb(221, 221, 221)\") // color of the hovered/focused search entry\n+store-value: (background_color, \"rgba(0, 0, 0, 0)\") // background color\n+store-value: (hover_background_color, \"rgb(97, 97, 97)\") // hover background color\n+\n+call-function: (\n+    \"check-result-color\", (\n+        \"keyword\", // item kind\n+        \"rgb(210, 153, 29)\", // color of item kind\n+        \"rgb(210, 153, 29)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"struct\", // item kind\n+        \"rgb(45, 191, 184)\", // color of item kind\n+        \"rgb(45, 191, 184)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"associatedtype\", // item kind\n+        \"rgb(210, 153, 29)\", // color of item kind\n+        \"rgb(210, 153, 29)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"tymethod\", // item kind\n+        \"rgb(43, 171, 99)\", // color of item kind\n+        \"rgb(43, 171, 99)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"method\", // item kind\n+        \"rgb(43, 171, 99)\", // color of item kind\n+        \"rgb(43, 171, 99)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"structfield\", // item kind\n+        \"rgb(221, 221, 221)\", // color of item kind\n+        \"rgb(221, 221, 221)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"macro\", // item kind\n+        \"rgb(9, 189, 0)\", // color of item kind\n+        \"rgb(9, 189, 0)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"fn\", // item kind\n+        \"rgb(43, 171, 99)\", // color of item kind\n+        \"rgb(43, 171, 99)\", // color of hovered/focused item kind\n+    ),\n )\n \n // Checking the `<a>` container.\n@@ -577,244 +278,66 @@ assert-css: (\n     {\"color\": \"rgb(0, 0, 0)\"},\n )\n \n-// Checking the color of \"keyword\".\n-assert-css: (\n-    \".result-keyword .keyword\",\n-    {\"color\": \"rgb(56, 115, 173)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-keyword\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-keyword\"\n-assert-css: (\n-    \".result-keyword:hover\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n-)\n-assert-css: (\n-    \".result-keyword:hover .keyword\",\n-    {\"color\": \"rgb(56, 115, 173)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-keyword\"\n-assert-css: (\n-    \".result-keyword:focus\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n-)\n-assert-css: (\n-    \".result-keyword:focus .keyword\",\n-    {\"color\": \"rgb(56, 115, 173)\"},\n-)\n-\n-// Check the color of \"struct\".\n-assert-css: (\n-    \".result-struct .struct\",\n-    {\"color\": \"rgb(173, 55, 138)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-struct\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-struct\"\n-assert-css: (\n-    \".result-struct:hover\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n-)\n-assert-css: (\n-    \".result-struct:hover .struct\",\n-    {\"color\": \"rgb(173, 55, 138)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-struct\"\n-assert-css: (\n-    \".result-struct:focus\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n-)\n-assert-css: (\n-    \".result-struct:focus .struct\",\n-    {\"color\": \"rgb(173, 55, 138)\"},\n-)\n-\n-// Check the color of \"associated type\".\n-assert-css: (\n-    \".result-associatedtype .associatedtype\",\n-    {\"color\": \"rgb(56, 115, 173)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-associatedtype\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-associatedtype\"\n-assert-css: (\n-    \".result-associatedtype:hover\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n-)\n-assert-css: (\n-    \".result-associatedtype:hover .associatedtype\",\n-    {\"color\": \"rgb(56, 115, 173)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-associatedtype\"\n-assert-css: (\n-    \".result-associatedtype:focus\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n-)\n-assert-css: (\n-    \".result-associatedtype:focus .associatedtype\",\n-    {\"color\": \"rgb(56, 115, 173)\"},\n-)\n-\n-// Check the color of \"type method\".\n-assert-css: (\n-    \".result-tymethod .tymethod\",\n-    {\"color\": \"rgb(173, 124, 55)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-tymethod\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-tymethod\"\n-assert-css: (\n-    \".result-tymethod:hover\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n-)\n-assert-css: (\n-    \".result-tymethod:hover .tymethod\",\n-    {\"color\": \"rgb(173, 124, 55)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-tymethod\"\n-assert-css: (\n-    \".result-tymethod:focus\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n-)\n-assert-css: (\n-    \".result-tymethod:focus .tymethod\",\n-    {\"color\": \"rgb(173, 124, 55)\"},\n-)\n-\n-// Check the color of \"method\".\n-assert-css: (\n-    \".result-method .method\",\n-    {\"color\": \"rgb(173, 124, 55)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-method\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-method\"\n-assert-css: (\n-    \".result-method:hover\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n-)\n-assert-css: (\n-    \".result-method:hover .method\",\n-    {\"color\": \"rgb(173, 124, 55)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-method\"\n-assert-css: (\n-    \".result-method:focus\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n-)\n-assert-css: (\n-    \".result-method:focus .method\",\n-    {\"color\": \"rgb(173, 124, 55)\"},\n-)\n-\n-// Check the color of \"struct field\".\n-assert-css: (\n-    \".result-structfield .structfield\",\n-    {\"color\": \"rgb(0, 0, 0)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-structfield\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-structfield\"\n-assert-css: (\n-    \".result-structfield:hover\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n-)\n-assert-css: (\n-    \".result-structfield:hover .structfield\",\n-    {\"color\": \"rgb(0, 0, 0)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-structfield\"\n-assert-css: (\n-    \".result-structfield:focus\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n-)\n-assert-css: (\n-    \".result-structfield:focus .structfield\",\n-    {\"color\": \"rgb(0, 0, 0)\"},\n-)\n-\n-// Check the color of \"macro\".\n-assert-css: (\n-    \".result-macro .macro\",\n-    {\"color\": \"rgb(6, 128, 0)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-macro\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-macro\"\n-assert-css: (\n-    \".result-macro:hover\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n-)\n-assert-css: (\n-    \".result-macro:hover .macro\",\n-    {\"color\": \"rgb(6, 128, 0)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-macro\"\n-assert-css: (\n-    \".result-macro:focus\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n-)\n-assert-css: (\n-    \".result-macro:focus .macro\",\n-    {\"color\": \"rgb(6, 128, 0)\"},\n-)\n-\n-// Check the color of \"fn\".\n-assert-css: (\n-    \".result-fn .fn\",\n-    {\"color\": \"rgb(173, 124, 55)\"},\n-    ALL,\n-)\n-assert-css: (\n-    \".result-fn\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n-)\n-move-cursor-to: \".result-fn\"\n-assert-css: (\n-    \".result-fn:hover\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n-)\n-assert-css: (\n-    \".result-fn:hover .fn\",\n-    {\"color\": \"rgb(173, 124, 55)\"},\n-)\n-move-cursor-to: \".search-input\"\n-focus: \".result-fn\"\n-assert-css: (\n-    \".result-fn:focus\",\n-    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(204, 204, 204)\"},\n-)\n-assert-css: (\n-    \".result-fn:focus .fn\",\n-    {\"color\": \"rgb(173, 124, 55)\"},\n+store-value: (entry_color, \"rgb(0, 0, 0)\") // color of the search entry\n+store-value: (hover_entry_color, \"rgb(0, 0, 0)\") // color of the hovered/focused search entry\n+store-value: (background_color, \"rgba(0, 0, 0, 0)\") // background color\n+store-value: (hover_background_color, \"rgb(204, 204, 204)\") // hover background color\n+\n+call-function: (\n+    \"check-result-color\", (\n+        \"keyword\", // item kind\n+        \"rgb(56, 115, 173)\", // color of item kind\n+        \"rgb(56, 115, 173)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"struct\", // item kind\n+        \"rgb(173, 55, 138)\", // color of item kind\n+        \"rgb(173, 55, 138)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"associatedtype\", // item kind\n+        \"rgb(56, 115, 173)\", // color of item kind\n+        \"rgb(56, 115, 173)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"tymethod\", // item kind\n+        \"rgb(173, 124, 55)\", // color of item kind\n+        \"rgb(173, 124, 55)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"method\", // item kind\n+        \"rgb(173, 124, 55)\", // color of item kind\n+        \"rgb(173, 124, 55)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"structfield\", // item kind\n+        \"rgb(0, 0, 0)\", // color of item kind\n+        \"rgb(0, 0, 0)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"macro\", // item kind\n+        \"rgb(6, 128, 0)\", // color of item kind\n+        \"rgb(6, 128, 0)\", // color of hovered/focused item kind\n+    ),\n+)\n+call-function: (\n+    \"check-result-color\", (\n+        \"fn\", // item kind\n+        \"rgb(173, 124, 55)\", // color of item kind\n+        \"rgb(173, 124, 55)\", // color of hovered/focused item kind\n+    ),\n )\n \n // Checking the `<a>` container."}, {"sha": "6bb4098e2bbe5125fc967f298399bb6055e95d31", "filename": "src/test/ui/closures/multiple-fn-bounds.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.rs?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -0,0 +1,15 @@\n+fn foo<F: Fn(&char) -> bool + Fn(char) -> bool>(f: F) {\n+    //~^ NOTE required by a bound in `foo`\n+    //~| NOTE required by this bound in `foo`\n+    //~| NOTE closure inferred to have a different signature due to this bound\n+    todo!();\n+}\n+\n+fn main() {\n+    let v = true;\n+    foo(move |x| v);\n+    //~^ ERROR type mismatch in closure arguments\n+    //~| NOTE expected closure signature\n+    //~| NOTE expected due to this\n+    //~| NOTE found signature defined here\n+}"}, {"sha": "eefc123fed7ac3ed07714d9666abfafc89141c6f", "filename": "src/test/ui/closures/multiple-fn-bounds.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -0,0 +1,24 @@\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/multiple-fn-bounds.rs:10:5\n+   |\n+LL |     foo(move |x| v);\n+   |     ^^^ -------- found signature defined here\n+   |     |\n+   |     expected due to this\n+   |\n+   = note: expected closure signature `fn(char) -> _`\n+              found closure signature `for<'a> fn(&'a char) -> _`\n+note: closure inferred to have a different signature due to this bound\n+  --> $DIR/multiple-fn-bounds.rs:1:11\n+   |\n+LL | fn foo<F: Fn(&char) -> bool + Fn(char) -> bool>(f: F) {\n+   |           ^^^^^^^^^^^^^^^^^\n+note: required by a bound in `foo`\n+  --> $DIR/multiple-fn-bounds.rs:1:31\n+   |\n+LL | fn foo<F: Fn(&char) -> bool + Fn(char) -> bool>(f: F) {\n+   |                               ^^^^^^^^^^^^^^^^ required by this bound in `foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0631`."}, {"sha": "63797d4a71bce7f04b1fb44f4609db974f36fadd", "filename": "src/test/ui/extenv/issue-55897.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextenv%2Fissue-55897.stderr?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -26,6 +26,11 @@ error[E0432]: unresolved import `env`\n    |\n LL |     use env;\n    |         ^^^ no `env` in the root\n+   |\n+help: consider importing this module instead\n+   |\n+LL |     use std::env;\n+   |         ~~~~~~~~~\n \n error: cannot determine resolution for the macro `env`\n   --> $DIR/issue-55897.rs:6:22"}, {"sha": "059ca96808d9ae507c6076d3d339b41dbb17cf72", "filename": "src/test/ui/imports/issue-56125.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-56125.stderr?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -3,6 +3,18 @@ error[E0432]: unresolved import `empty::issue_56125`\n    |\n LL |     use empty::issue_56125;\n    |         ^^^^^^^^^^^^^^^^^^ no `issue_56125` in `m3::empty`\n+   |\n+help: consider importing one of these items instead\n+   |\n+LL |     use crate::m3::last_segment::issue_56125;\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     use crate::m3::non_last_segment::non_last_segment::issue_56125;\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     use issue_56125::issue_56125;\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     use issue_56125::last_segment::issue_56125;\n+   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+     and 1 other candidate\n \n error[E0659]: `issue_56125` is ambiguous\n   --> $DIR/issue-56125.rs:6:9"}, {"sha": "3b72d57fee41ef03499bce2a8e0207fce291bb5e", "filename": "src/test/ui/imports/issue-57015.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Fimports%2Fissue-57015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Fimports%2Fissue-57015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-57015.stderr?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -3,6 +3,11 @@ error[E0432]: unresolved import `single_err::something`\n    |\n LL | use single_err::something;\n    |     ^^^^^^^^^^^^^^^^^^^^^ no `something` in `single_err`\n+   |\n+help: consider importing this module instead\n+   |\n+LL | use glob_ok::something;\n+   |     ~~~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "bd1b23f7e3bbbe4e35a43c3b1c45e4d3cc2be784", "filename": "src/test/ui/parser/removed-syntax-field-let.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fremoved-syntax-field-let.stderr?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -1,10 +1,16 @@\n error: expected identifier, found keyword `let`\n   --> $DIR/removed-syntax-field-let.rs:2:5\n    |\n-LL | struct S {\n-   |        - while parsing this struct\n LL |     let foo: (),\n    |     ^^^ expected identifier, found keyword\n+   |\n+   = note: the `let` keyword is not allowed in `struct` fields\n+   = note: see <https://doc.rust-lang.org/book/ch05-01-defining-structs.html> for more information\n+help: remove the let, the `let` keyword is not allowed in struct field definitions\n+   |\n+LL -     let foo: (),\n+LL +     foo: (),\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "761089cd3871a7ead4a8ea5f45d85b531d89c029", "filename": "src/test/ui/rfc-2126-extern-absolute-paths/not-allowed.stderr", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-allowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-allowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-extern-absolute-paths%2Fnot-allowed.stderr?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -3,6 +3,13 @@ error[E0432]: unresolved import `alloc`\n    |\n LL | use alloc;\n    |     ^^^^^ no external crate `alloc`\n+   |\n+help: consider importing one of these items instead\n+   |\n+LL | use core::alloc;\n+   |     ~~~~~~~~~~~~\n+LL | use std::alloc;\n+   |     ~~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "8881ede0dbca7e362d5f3cf92fb1444fa2a2520c", "filename": "src/test/ui/simd/portable-intrinsics-arent-exposed.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd%2Fportable-intrinsics-arent-exposed.stderr?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -11,6 +11,11 @@ error[E0432]: unresolved import `std::simd::intrinsics`\n    |\n LL | use std::simd::intrinsics;\n    |     ^^^^^^^^^^^^^^^^^^^^^ no `intrinsics` in `simd`\n+   |\n+help: consider importing this module instead\n+   |\n+LL | use std::intrinsics;\n+   |     ~~~~~~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0c16ecd4c862e3355f7c27fa2ce233c80a75c776", "filename": "src/test/ui/test-attrs/inaccessible-test-modules.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Finaccessible-test-modules.stderr?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -11,10 +11,16 @@ error[E0432]: unresolved import `test`\n   --> $DIR/inaccessible-test-modules.rs:6:5\n    |\n LL | use test as y;\n-   |     ----^^^^^\n-   |     |\n-   |     no `test` in the root\n-   |     help: a similar name exists in the module: `test`\n+   |     ^^^^^^^^^ no `test` in the root\n+   |\n+help: a similar name exists in the module\n+   |\n+LL | use test as y;\n+   |     ~~~~\n+help: consider importing this module instead\n+   |\n+LL | use test::test;\n+   |     ~~~~~~~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "38b227f609b26dead539f9203f2d54df9ec771fc", "filename": "src/test/ui/unresolved/unresolved-candidates.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Funresolved%2Funresolved-candidates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Funresolved%2Funresolved-candidates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funresolved%2Funresolved-candidates.rs?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -0,0 +1,13 @@\n+mod a {\n+    pub trait Trait {}\n+}\n+\n+mod b {\n+    use Trait; //~ ERROR unresolved import `Trait`\n+}\n+\n+mod c {\n+    impl Trait for () {} //~ ERROR cannot find trait `Trait` in this scope\n+}\n+\n+fn main() {}"}, {"sha": "bbd3eec2a54317a0e1df3451628d5c4762e5240a", "filename": "src/test/ui/unresolved/unresolved-candidates.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Funresolved%2Funresolved-candidates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftest%2Fui%2Funresolved%2Funresolved-candidates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funresolved%2Funresolved-candidates.stderr?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -0,0 +1,26 @@\n+error[E0432]: unresolved import `Trait`\n+  --> $DIR/unresolved-candidates.rs:6:9\n+   |\n+LL |     use Trait;\n+   |         ^^^^^ no `Trait` in the root\n+   |\n+help: consider importing this trait instead\n+   |\n+LL |     use a::Trait;\n+   |         ~~~~~~~~~\n+\n+error[E0405]: cannot find trait `Trait` in this scope\n+  --> $DIR/unresolved-candidates.rs:10:10\n+   |\n+LL |     impl Trait for () {}\n+   |          ^^^^^ not found in this scope\n+   |\n+help: consider importing this trait\n+   |\n+LL |     use a::Trait;\n+   |\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0405, E0432.\n+For more information about an error, try `rustc --explain E0405`."}, {"sha": "6173f9a78c57cdb4cf7195a22cdf648a60bee089", "filename": "src/tools/rust-analyzer/Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftools%2Frust-analyzer%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftools%2Frust-analyzer%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer%2FCargo.lock?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -1190,9 +1190,9 @@ version = \"0.0.0\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.43\"\n+version = \"1.0.46\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0a2ca2c61bc9f3d74d2886294ab7b9853abd9c1ad903a3ac7815c58989bb7bab\"\n+checksum = \"94e2ef8dbfc347b10c094890f778ee2e36ca9bb4262e86dc99cd217e35f3470b\"\n dependencies = [\n  \"unicode-ident\",\n ]\n@@ -1593,9 +1593,9 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.99\"\n+version = \"1.0.102\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"58dbef6ec655055e20b86b15a8cc6d439cca19b667537ac6a1369572d151ab13\"\n+checksum = \"3fcd952facd492f9be3ef0d0b7032a6e442ee9b361d4acc2b1d0c4aaa5f613a1\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\","}, {"sha": "b9e0d48c9bcdde8961001f8ee81f6e39834b73aa", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/518263d889818d16a09a8260f212f8ff4bf345f1/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=518263d889818d16a09a8260f212f8ff4bf345f1", "patch": "@@ -18,10 +18,11 @@ const LICENSES: &[&str] = &[\n     \"ISC\",\n     \"Unlicense/MIT\",\n     \"Unlicense OR MIT\",\n-    \"0BSD OR MIT OR Apache-2.0\", // adler license\n-    \"Zlib OR Apache-2.0 OR MIT\", // tinyvec\n-    \"MIT OR Apache-2.0 OR Zlib\", // tinyvec_macros\n-    \"MIT OR Zlib OR Apache-2.0\", // miniz_oxide\n+    \"0BSD OR MIT OR Apache-2.0\",                // adler license\n+    \"Zlib OR Apache-2.0 OR MIT\",                // tinyvec\n+    \"MIT OR Apache-2.0 OR Zlib\",                // tinyvec_macros\n+    \"MIT OR Zlib OR Apache-2.0\",                // miniz_oxide\n+    \"(MIT OR Apache-2.0) AND Unicode-DFS-2016\", // unicode_ident\n ];\n \n /// These are exceptions to Rust's permissive licensing policy, and\n@@ -235,6 +236,7 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"unic-langid-macros\",\n     \"unic-langid-macros-impl\",\n     \"unic-ucd-version\",\n+    \"unicode-ident\",\n     \"unicode-normalization\",\n     \"unicode-script\",\n     \"unicode-security\","}]}