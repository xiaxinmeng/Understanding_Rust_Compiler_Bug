{"sha": "b457d707e870413ab5e1879094ed16e5a329d891", "node_id": "C_kwDOAAsO6NoAKGI0NTdkNzA3ZTg3MDQxM2FiNWUxODc5MDk0ZWQxNmU1YTMyOWQ4OTE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-09T13:51:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-09T13:51:22Z"}, "message": "Rollup merge of #103694 - WaffleLapkin:mask_doc_example, r=scottmcm\n\nAdd documentation examples for `pointer::mask`\n\nThe examples are somewhat convoluted, but I don't know how to make this better :(", "tree": {"sha": "1fbe64b8688c8739673d03fca4be7cfc8785f515", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fbe64b8688c8739673d03fca4be7cfc8785f515"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b457d707e870413ab5e1879094ed16e5a329d891", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJja7BaCRBK7hj4Ov3rIwAAZNkIAAYjxE3LuXFrnuyeBTGfq6oT\nAfD6KvHG71GZWKV5vN4daU7Lkacs8k6T11WbrWYanIPuivP3qu1ruq2u69yx83v1\nkTegJF655fcfoHat4y7qEqBZrPt2ZF2UIfSzAxO7Ouvo3iQS7ZLd14FEFZBCaHB6\nnVaGiC9L82AoxvHnl1i8tuJoBtrBWce66joh21hJVLHqkDt317p+SXnNI8WVVw9J\nwQsC3vfaVUxQSCehVYxvUL64hPzYAdC7Ka/HcA86+66W26SDvHa2xsWRb0325ExI\nn7/RyLRFKmQYb9O+uOo4lr7mohQuyp1Bhgdup8b344RDkP5Jv+Jn4X/WXwSGbJo=\n=aGdD\n-----END PGP SIGNATURE-----\n", "payload": "tree 1fbe64b8688c8739673d03fca4be7cfc8785f515\nparent 1db7f690b19408b4ae86a13f74a8181a1c74721d\nparent 8498e3a9bbee8048a9cf81790a627400d3d87569\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1668001882 +0530\ncommitter GitHub <noreply@github.com> 1668001882 +0530\n\nRollup merge of #103694 - WaffleLapkin:mask_doc_example, r=scottmcm\n\nAdd documentation examples for `pointer::mask`\n\nThe examples are somewhat convoluted, but I don't know how to make this better :(\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b457d707e870413ab5e1879094ed16e5a329d891", "html_url": "https://github.com/rust-lang/rust/commit/b457d707e870413ab5e1879094ed16e5a329d891", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b457d707e870413ab5e1879094ed16e5a329d891/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1db7f690b19408b4ae86a13f74a8181a1c74721d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1db7f690b19408b4ae86a13f74a8181a1c74721d", "html_url": "https://github.com/rust-lang/rust/commit/1db7f690b19408b4ae86a13f74a8181a1c74721d"}, {"sha": "8498e3a9bbee8048a9cf81790a627400d3d87569", "url": "https://api.github.com/repos/rust-lang/rust/commits/8498e3a9bbee8048a9cf81790a627400d3d87569", "html_url": "https://github.com/rust-lang/rust/commit/8498e3a9bbee8048a9cf81790a627400d3d87569"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "926d2ae51139864944c44d843ba81f6c176d9bd5", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b457d707e870413ab5e1879094ed16e5a329d891/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b457d707e870413ab5e1879094ed16e5a329d891/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=b457d707e870413ab5e1879094ed16e5a329d891", "patch": "@@ -568,6 +568,31 @@ impl<T: ?Sized> *const T {\n     ///\n     /// For non-`Sized` pointees this operation changes only the data pointer,\n     /// leaving the metadata untouched.\n+    ///\n+    /// ## Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_mask, strict_provenance)]\n+    /// let v = 17_u32;\n+    /// let ptr: *const u32 = &v;\n+    ///\n+    /// // `u32` is 4 bytes aligned,\n+    /// // which means that lower 2 bits are always 0.\n+    /// let tag_mask = 0b11;\n+    /// let ptr_mask = !tag_mask;\n+    ///\n+    /// // We can store something in these lower bits\n+    /// let tagged_ptr = ptr.map_addr(|a| a | 0b10);\n+    ///\n+    /// // Get the \"tag\" back\n+    /// let tag = tagged_ptr.addr() & tag_mask;\n+    /// assert_eq!(tag, 0b10);\n+    ///\n+    /// // Note that `tagged_ptr` is unaligned, it's UB to read from it.\n+    /// // To get original pointer `mask` can be used:\n+    /// let masked_ptr = tagged_ptr.mask(ptr_mask);\n+    /// assert_eq!(unsafe { *masked_ptr }, 17);\n+    /// ```\n     #[unstable(feature = \"ptr_mask\", issue = \"98290\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline(always)]"}, {"sha": "f71696e9ca0fa9e1b072d6e0f31c1386cc6508e3", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b457d707e870413ab5e1879094ed16e5a329d891/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b457d707e870413ab5e1879094ed16e5a329d891/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=b457d707e870413ab5e1879094ed16e5a329d891", "patch": "@@ -588,6 +588,34 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// For non-`Sized` pointees this operation changes only the data pointer,\n     /// leaving the metadata untouched.\n+    ///\n+    /// ## Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_mask, strict_provenance)]\n+    /// let mut v = 17_u32;\n+    /// let ptr: *mut u32 = &mut v;\n+    ///\n+    /// // `u32` is 4 bytes aligned,\n+    /// // which means that lower 2 bits are always 0.\n+    /// let tag_mask = 0b11;\n+    /// let ptr_mask = !tag_mask;\n+    ///\n+    /// // We can store something in these lower bits\n+    /// let tagged_ptr = ptr.map_addr(|a| a | 0b10);\n+    ///\n+    /// // Get the \"tag\" back\n+    /// let tag = tagged_ptr.addr() & tag_mask;\n+    /// assert_eq!(tag, 0b10);\n+    ///\n+    /// // Note that `tagged_ptr` is unaligned, it's UB to read from/write to it.\n+    /// // To get original pointer `mask` can be used:\n+    /// let masked_ptr = tagged_ptr.mask(ptr_mask);\n+    /// assert_eq!(unsafe { *masked_ptr }, 17);\n+    ///\n+    /// unsafe { *masked_ptr = 0 };\n+    /// assert_eq!(v, 0);\n+    /// ```\n     #[unstable(feature = \"ptr_mask\", issue = \"98290\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline(always)]"}]}