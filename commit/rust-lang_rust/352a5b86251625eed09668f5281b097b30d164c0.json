{"sha": "352a5b86251625eed09668f5281b097b30d164c0", "node_id": "C_kwDOAAsO6NoAKDM1MmE1Yjg2MjUxNjI1ZWVkMDk2NjhmNTI4MWIwOTdiMzBkMTY0YzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-12T11:51:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-12T11:51:31Z"}, "message": "Auto merge of #13212 - Veykril:no-std-config, r=Veykril\n\nAdd config to unconditionally prefer core imports over std\n\nFixes https://github.com/rust-lang/rust-analyzer/issues/12979", "tree": {"sha": "f06068325a89a760578210e77e88f1a0a18b059c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f06068325a89a760578210e77e88f1a0a18b059c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/352a5b86251625eed09668f5281b097b30d164c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/352a5b86251625eed09668f5281b097b30d164c0", "html_url": "https://github.com/rust-lang/rust/commit/352a5b86251625eed09668f5281b097b30d164c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/352a5b86251625eed09668f5281b097b30d164c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc131422e9d7a2f4e118a2364ab3359b8d736c26", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc131422e9d7a2f4e118a2364ab3359b8d736c26", "html_url": "https://github.com/rust-lang/rust/commit/bc131422e9d7a2f4e118a2364ab3359b8d736c26"}, {"sha": "7d19971666d50a0719e9a88f7dc67822ba96f87c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d19971666d50a0719e9a88f7dc67822ba96f87c", "html_url": "https://github.com/rust-lang/rust/commit/7d19971666d50a0719e9a88f7dc67822ba96f87c"}], "stats": {"total": 199, "additions": 156, "deletions": 43}, "files": [{"sha": "f46054e8cc5ec7c55c7b569b956a82633478974a", "filename": "crates/hir-def/src/find_path.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fhir-def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fhir-def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ffind_path.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -16,19 +16,25 @@ use crate::{\n \n /// Find a path that can be used to refer to a certain item. This can depend on\n /// *from where* you're referring to the item, hence the `from` parameter.\n-pub fn find_path(db: &dyn DefDatabase, item: ItemInNs, from: ModuleId) -> Option<ModPath> {\n+pub fn find_path(\n+    db: &dyn DefDatabase,\n+    item: ItemInNs,\n+    from: ModuleId,\n+    prefer_core: bool,\n+) -> Option<ModPath> {\n     let _p = profile::span(\"find_path\");\n-    find_path_inner(db, item, from, None)\n+    find_path_inner(db, item, from, None, prefer_core)\n }\n \n pub fn find_path_prefixed(\n     db: &dyn DefDatabase,\n     item: ItemInNs,\n     from: ModuleId,\n     prefix_kind: PrefixKind,\n+    prefer_core: bool,\n ) -> Option<ModPath> {\n     let _p = profile::span(\"find_path_prefixed\");\n-    find_path_inner(db, item, from, Some(prefix_kind))\n+    find_path_inner(db, item, from, Some(prefix_kind), prefer_core)\n }\n \n const MAX_PATH_LEN: usize = 15;\n@@ -100,12 +106,22 @@ fn find_path_inner(\n     item: ItemInNs,\n     from: ModuleId,\n     prefixed: Option<PrefixKind>,\n+    prefer_core: bool,\n ) -> Option<ModPath> {\n     // FIXME: Do fast path for std/core libs?\n \n     let mut visited_modules = FxHashSet::default();\n     let def_map = from.def_map(db);\n-    find_path_inner_(db, &def_map, from, item, MAX_PATH_LEN, prefixed, &mut visited_modules)\n+    find_path_inner_(\n+        db,\n+        &def_map,\n+        from,\n+        item,\n+        MAX_PATH_LEN,\n+        prefixed,\n+        &mut visited_modules,\n+        prefer_core,\n+    )\n }\n \n fn find_path_inner_(\n@@ -116,6 +132,7 @@ fn find_path_inner_(\n     max_len: usize,\n     mut prefixed: Option<PrefixKind>,\n     visited_modules: &mut FxHashSet<ModuleId>,\n+    prefer_core: bool,\n ) -> Option<ModPath> {\n     if max_len == 0 {\n         return None;\n@@ -191,7 +208,9 @@ fn find_path_inner_(\n     // Recursive case:\n     // - if the item is an enum variant, refer to it via the enum\n     if let Some(ModuleDefId::EnumVariantId(variant)) = item.as_module_def_id() {\n-        if let Some(mut path) = find_path(db, ItemInNs::Types(variant.parent.into()), from) {\n+        if let Some(mut path) =\n+            find_path(db, ItemInNs::Types(variant.parent.into()), from, prefer_core)\n+        {\n             let data = db.enum_data(variant.parent);\n             path.push_segment(data.variants[variant.local_id].name.clone());\n             return Some(path);\n@@ -202,7 +221,7 @@ fn find_path_inner_(\n     }\n \n     // - otherwise, look for modules containing (reexporting) it and import it from one of those\n-    let prefer_no_std = db.crate_supports_no_std(crate_root.krate);\n+    let prefer_no_std = prefer_core || db.crate_supports_no_std(crate_root.krate);\n     let mut best_path = None;\n     let mut best_path_len = max_len;\n \n@@ -223,6 +242,7 @@ fn find_path_inner_(\n                 best_path_len - 1,\n                 prefixed,\n                 visited_modules,\n+                prefer_core,\n             ) {\n                 path.push_segment(name);\n \n@@ -253,6 +273,7 @@ fn find_path_inner_(\n                     best_path_len - 1,\n                     prefixed,\n                     visited_modules,\n+                    prefer_core,\n                 )?;\n                 cov_mark::hit!(partially_imported);\n                 path.push_segment(info.path.segments.last()?.clone());\n@@ -428,7 +449,8 @@ mod tests {\n             .take_types()\n             .unwrap();\n \n-        let found_path = find_path_inner(&db, ItemInNs::Types(resolved), module, prefix_kind);\n+        let found_path =\n+            find_path_inner(&db, ItemInNs::Types(resolved), module, prefix_kind, false);\n         assert_eq!(found_path, Some(mod_path), \"{:?}\", prefix_kind);\n     }\n "}, {"sha": "874abdaea8370f4ef2a8e3bc1c28abab3d5c6dcc", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -533,6 +533,7 @@ impl HirDisplay for Ty {\n                             f.db.upcast(),\n                             ItemInNs::Types((*def_id).into()),\n                             module_id,\n+                            false,\n                         ) {\n                             write!(f, \"{}\", path)?;\n                         } else {"}, {"sha": "5fa4c1516248c844b69d94ff87ef05ee542d985c", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -582,8 +582,13 @@ impl Module {\n \n     /// Finds a path that can be used to refer to the given item from within\n     /// this module, if possible.\n-    pub fn find_use_path(self, db: &dyn DefDatabase, item: impl Into<ItemInNs>) -> Option<ModPath> {\n-        hir_def::find_path::find_path(db, item.into().into(), self.into())\n+    pub fn find_use_path(\n+        self,\n+        db: &dyn DefDatabase,\n+        item: impl Into<ItemInNs>,\n+        prefer_core: bool,\n+    ) -> Option<ModPath> {\n+        hir_def::find_path::find_path(db, item.into().into(), self.into(), prefer_core)\n     }\n \n     /// Finds a path that can be used to refer to the given item from within\n@@ -593,8 +598,15 @@ impl Module {\n         db: &dyn DefDatabase,\n         item: impl Into<ItemInNs>,\n         prefix_kind: PrefixKind,\n+        prefer_core: bool,\n     ) -> Option<ModPath> {\n-        hir_def::find_path::find_path_prefixed(db, item.into().into(), self.into(), prefix_kind)\n+        hir_def::find_path::find_path_prefixed(\n+            db,\n+            item.into().into(),\n+            self.into(),\n+            prefix_kind,\n+            prefer_core,\n+        )\n     }\n }\n "}, {"sha": "fe2dfca6d5e14a7172b2250c7292b73e589db203", "filename": "crates/ide-assists/src/assist_config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fassist_config.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fassist_config.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fassist_config.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -13,4 +13,5 @@ pub struct AssistConfig {\n     pub snippet_cap: Option<SnippetCap>,\n     pub allowed: Option<Vec<AssistKind>>,\n     pub insert_use: InsertUseConfig,\n+    pub prefer_core: bool,\n }"}, {"sha": "d4e21b778c515a0acf327a862857fa9d76d2af21", "filename": "crates/ide-assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -87,7 +87,7 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext<'_>)\n             .into_iter()\n             .filter_map(|variant| {\n                 Some((\n-                    build_pat(ctx.db(), module, variant)?,\n+                    build_pat(ctx.db(), module, variant, ctx.config.prefer_core)?,\n                     variant.should_be_hidden(ctx.db(), module.krate()),\n                 ))\n             })\n@@ -132,8 +132,9 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext<'_>)\n                 let is_hidden = variants\n                     .iter()\n                     .any(|variant| variant.should_be_hidden(ctx.db(), module.krate()));\n-                let patterns =\n-                    variants.into_iter().filter_map(|variant| build_pat(ctx.db(), module, variant));\n+                let patterns = variants.into_iter().filter_map(|variant| {\n+                    build_pat(ctx.db(), module, variant, ctx.config.prefer_core)\n+                });\n \n                 (ast::Pat::from(make::tuple_pat(patterns)), is_hidden)\n             })\n@@ -349,10 +350,16 @@ fn resolve_tuple_of_enum_def(\n         .collect()\n }\n \n-fn build_pat(db: &RootDatabase, module: hir::Module, var: ExtendedVariant) -> Option<ast::Pat> {\n+fn build_pat(\n+    db: &RootDatabase,\n+    module: hir::Module,\n+    var: ExtendedVariant,\n+    prefer_core: bool,\n+) -> Option<ast::Pat> {\n     match var {\n         ExtendedVariant::Variant(var) => {\n-            let path = mod_path_to_ast(&module.find_use_path(db, ModuleDef::from(var))?);\n+            let path =\n+                mod_path_to_ast(&module.find_use_path(db, ModuleDef::from(var), prefer_core)?);\n \n             // FIXME: use HIR for this; it doesn't currently expose struct vs. tuple vs. unit variants though\n             let pat: ast::Pat = match var.source(db)?.value.kind() {"}, {"sha": "88a6b8558c955b2b5c219fad6e75629aff6f9048", "filename": "crates/ide-assists/src/handlers/auto_import.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -89,8 +89,11 @@ use crate::{AssistContext, AssistId, AssistKind, Assists, GroupLabel};\n // ```\n pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     let (import_assets, syntax_under_caret) = find_importable_node(ctx)?;\n-    let mut proposed_imports =\n-        import_assets.search_for_imports(&ctx.sema, ctx.config.insert_use.prefix_kind);\n+    let mut proposed_imports = import_assets.search_for_imports(\n+        &ctx.sema,\n+        ctx.config.insert_use.prefix_kind,\n+        ctx.config.prefer_core,\n+    );\n     if proposed_imports.is_empty() {\n         return None;\n     }"}, {"sha": "e0c0e9a484710f3cc399d50eee920b840f21d629", "filename": "crates/ide-assists/src/handlers/convert_into_to_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -50,7 +50,7 @@ pub(crate) fn convert_into_to_from(acc: &mut Assists, ctx: &AssistContext<'_>) -\n             _ => return None,\n         };\n \n-        mod_path_to_ast(&module.find_use_path(ctx.db(), src_type_def)?)\n+        mod_path_to_ast(&module.find_use_path(ctx.db(), src_type_def, ctx.config.prefer_core)?)\n     };\n \n     let dest_type = match &ast_trait {"}, {"sha": "749d94d5a9283e9c43276dc6c73907a969949319", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -152,6 +152,7 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext<'_>) -> Op\n                         ctx.sema.db,\n                         ModuleDef::from(control_flow_enum),\n                         ctx.config.insert_use.prefix_kind,\n+                        ctx.config.prefer_core,\n                     );\n \n                     if let Some(mod_path) = mod_path {"}, {"sha": "431f7b3c0fd62fbcbe43c4048f9c901095cfcc16", "filename": "crates/ide-assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -409,6 +409,7 @@ fn process_references(\n                     ctx.sema.db,\n                     *enum_module_def,\n                     ctx.config.insert_use.prefix_kind,\n+                    ctx.config.prefer_core,\n                 );\n                 if let Some(mut mod_path) = mod_path {\n                     mod_path.pop_segment();"}, {"sha": "cf4ed84281aba1c0a74079e0c235dcb915cf6f2f", "filename": "crates/ide-assists/src/handlers/generate_deref.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_deref.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -58,7 +58,8 @@ fn generate_record_deref(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<(\n \n     let module = ctx.sema.to_def(&strukt)?.module(ctx.db());\n     let trait_ = deref_type_to_generate.to_trait(&ctx.sema, module.krate())?;\n-    let trait_path = module.find_use_path(ctx.db(), ModuleDef::Trait(trait_))?;\n+    let trait_path =\n+        module.find_use_path(ctx.db(), ModuleDef::Trait(trait_), ctx.config.prefer_core)?;\n \n     let field_type = field.ty()?;\n     let field_name = field.name()?;\n@@ -98,7 +99,8 @@ fn generate_tuple_deref(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()\n \n     let module = ctx.sema.to_def(&strukt)?.module(ctx.db());\n     let trait_ = deref_type_to_generate.to_trait(&ctx.sema, module.krate())?;\n-    let trait_path = module.find_use_path(ctx.db(), ModuleDef::Trait(trait_))?;\n+    let trait_path =\n+        module.find_use_path(ctx.db(), ModuleDef::Trait(trait_), ctx.config.prefer_core)?;\n \n     let field_type = field.ty()?;\n     let target = field.syntax().text_range();"}, {"sha": "ceb7dac0fe97153bbd3242c68298036d6ff3bf62", "filename": "crates/ide-assists/src/handlers/generate_new.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -60,8 +60,11 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option\n \n                 let item_in_ns = hir::ItemInNs::from(hir::ModuleDef::from(ty.as_adt()?));\n \n-                let type_path = current_module\n-                    .find_use_path(ctx.sema.db, item_for_path_search(ctx.sema.db, item_in_ns)?)?;\n+                let type_path = current_module.find_use_path(\n+                    ctx.sema.db,\n+                    item_for_path_search(ctx.sema.db, item_in_ns)?,\n+                    ctx.config.prefer_core,\n+                )?;\n \n                 let expr = use_trivial_constructor(\n                     &ctx.sema.db,"}, {"sha": "cb81ebd228520e6d9d8b6dc69dfa1184b56125e8", "filename": "crates/ide-assists/src/handlers/qualify_method_call.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_method_call.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -44,8 +44,11 @@ pub(crate) fn qualify_method_call(acc: &mut Assists, ctx: &AssistContext<'_>) ->\n     let current_module = ctx.sema.scope(call.syntax())?.module();\n     let target_module_def = ModuleDef::from(resolved_call);\n     let item_in_ns = ItemInNs::from(target_module_def);\n-    let receiver_path = current_module\n-        .find_use_path(ctx.sema.db, item_for_path_search(ctx.sema.db, item_in_ns)?)?;\n+    let receiver_path = current_module.find_use_path(\n+        ctx.sema.db,\n+        item_for_path_search(ctx.sema.db, item_in_ns)?,\n+        ctx.config.prefer_core,\n+    )?;\n \n     let qualify_candidate = QualifyCandidate::ImplMethod(ctx.sema.db, call, resolved_call);\n "}, {"sha": "232cd39e8ba2037e8bef37d3f5f84c1fb06c06b0", "filename": "crates/ide-assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -37,7 +37,8 @@ use crate::{\n // ```\n pub(crate) fn qualify_path(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n     let (import_assets, syntax_under_caret) = find_importable_node(ctx)?;\n-    let mut proposed_imports = import_assets.search_for_relative_paths(&ctx.sema);\n+    let mut proposed_imports =\n+        import_assets.search_for_relative_paths(&ctx.sema, ctx.config.prefer_core);\n     if proposed_imports.is_empty() {\n         return None;\n     }"}, {"sha": "04a1366327f6ad2bade6580e4ee7ad89065c553c", "filename": "crates/ide-assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -85,7 +85,7 @@ pub(crate) fn replace_derive_with_manual_impl(\n     })\n     .flat_map(|trait_| {\n         current_module\n-            .find_use_path(ctx.sema.db, hir::ModuleDef::Trait(trait_))\n+            .find_use_path(ctx.sema.db, hir::ModuleDef::Trait(trait_), ctx.config.prefer_core)\n             .as_ref()\n             .map(mod_path_to_ast)\n             .zip(Some(trait_))"}, {"sha": "533e1670a045df88dcc03f82afbe975db0993967", "filename": "crates/ide-assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -67,6 +67,7 @@ pub(crate) fn replace_qualified_name_with_use(\n                 ctx.sema.db,\n                 module,\n                 ctx.config.insert_use.prefix_kind,\n+                ctx.config.prefer_core,\n             )\n         })\n         .flatten();"}, {"sha": "4e589dc86abb296071dec41dad927a3692d01555", "filename": "crates/ide-assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -29,6 +29,7 @@ pub(crate) const TEST_CONFIG: AssistConfig = AssistConfig {\n         group: true,\n         skip_glob_imports: true,\n     },\n+    prefer_core: false,\n };\n \n pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {"}, {"sha": "89a971e544dacf4e4b8c06e99ecaf0af07e57caf", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -551,7 +551,9 @@ fn enum_variants_with_paths(\n     }\n \n     for variant in variants {\n-        if let Some(path) = ctx.module.find_use_path(ctx.db, hir::ModuleDef::from(variant)) {\n+        if let Some(path) =\n+            ctx.module.find_use_path(ctx.db, hir::ModuleDef::from(variant), ctx.config.prefer_core)\n+        {\n             // Variants with trivial paths are already added by the existing completion logic,\n             // so we should avoid adding these twice\n             if path.segments().len() > 1 {"}, {"sha": "1ccf33a96b5c7169903f8dce2023146eafcc40d2", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -165,7 +165,11 @@ pub(crate) fn complete_expr_path(\n                     hir::Adt::Struct(strukt) => {\n                         let path = ctx\n                             .module\n-                            .find_use_path(ctx.db, hir::ModuleDef::from(strukt))\n+                            .find_use_path(\n+                                ctx.db,\n+                                hir::ModuleDef::from(strukt),\n+                                ctx.config.prefer_core,\n+                            )\n                             .filter(|it| it.len() > 1);\n \n                         acc.add_struct_literal(ctx, path_ctx, strukt, path, None);\n@@ -183,7 +187,7 @@ pub(crate) fn complete_expr_path(\n                     hir::Adt::Union(un) => {\n                         let path = ctx\n                             .module\n-                            .find_use_path(ctx.db, hir::ModuleDef::from(un))\n+                            .find_use_path(ctx.db, hir::ModuleDef::from(un), ctx.config.prefer_core)\n                             .filter(|it| it.len() > 1);\n \n                         acc.add_union_literal(ctx, un, path, None);"}, {"sha": "528959943bb94fe2a7cf4d320f013960b4ad928f", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -262,7 +262,11 @@ fn import_on_the_fly(\n \n     acc.add_all(\n         import_assets\n-            .search_for_imports(&ctx.sema, ctx.config.insert_use.prefix_kind)\n+            .search_for_imports(\n+                &ctx.sema,\n+                ctx.config.insert_use.prefix_kind,\n+                ctx.config.prefer_core,\n+            )\n             .into_iter()\n             .filter(ns_filter)\n             .filter(|import| {\n@@ -306,7 +310,11 @@ fn import_on_the_fly_pat_(\n \n     acc.add_all(\n         import_assets\n-            .search_for_imports(&ctx.sema, ctx.config.insert_use.prefix_kind)\n+            .search_for_imports(\n+                &ctx.sema,\n+                ctx.config.insert_use.prefix_kind,\n+                ctx.config.prefer_core,\n+            )\n             .into_iter()\n             .filter(ns_filter)\n             .filter(|import| {\n@@ -344,7 +352,7 @@ fn import_on_the_fly_method(\n     let user_input_lowercased = potential_import_name.to_lowercase();\n \n     import_assets\n-        .search_for_imports(&ctx.sema, ctx.config.insert_use.prefix_kind)\n+        .search_for_imports(&ctx.sema, ctx.config.insert_use.prefix_kind, ctx.config.prefer_core)\n         .into_iter()\n         .filter(|import| {\n             !ctx.is_item_hidden(&import.item_to_import)"}, {"sha": "54ebce1eb7985480339c5a060c31d20ccafacc5c", "filename": "crates/ide-completion/src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-completion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-completion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fconfig.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -17,6 +17,7 @@ pub struct CompletionConfig {\n     pub callable: Option<CallableSnippets>,\n     pub snippet_cap: Option<SnippetCap>,\n     pub insert_use: InsertUseConfig,\n+    pub prefer_core: bool,\n     pub snippets: Vec<Snippet>,\n }\n "}, {"sha": "7cefb6bb4a3082aee43cb7c95ce93ed5c76946b3", "filename": "crates/ide-completion/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Flib.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -234,7 +234,12 @@ pub fn resolve_completion_edits(\n         );\n         let import = items_with_name\n             .filter_map(|candidate| {\n-                current_module.find_use_path_prefixed(db, candidate, config.insert_use.prefix_kind)\n+                current_module.find_use_path_prefixed(\n+                    db,\n+                    candidate,\n+                    config.insert_use.prefix_kind,\n+                    config.prefer_core,\n+                )\n             })\n             .find(|mod_path| mod_path.to_string() == full_import_path);\n         if let Some(import_path) = import {"}, {"sha": "2dc62bbdc65c31f533432ca95258b4e19b840d6a", "filename": "crates/ide-completion/src/snippet.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-completion%2Fsrc%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-completion%2Fsrc%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fsnippet.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -174,8 +174,12 @@ fn import_edits(ctx: &CompletionContext<'_>, requires: &[GreenNode]) -> Option<V\n             hir::PathResolution::Def(def) => def.into(),\n             _ => return None,\n         };\n-        let path =\n-            ctx.module.find_use_path_prefixed(ctx.db, item, ctx.config.insert_use.prefix_kind)?;\n+        let path = ctx.module.find_use_path_prefixed(\n+            ctx.db,\n+            item,\n+            ctx.config.insert_use.prefix_kind,\n+            ctx.config.prefer_core,\n+        )?;\n         Some((path.len() > 1).then(|| LocatedImport::new(path.clone(), item, item, None)))\n     };\n     let mut res = Vec::with_capacity(requires.len());"}, {"sha": "d24c9148566f7a9a994e0caaee5b0be061fbe9ef", "filename": "crates/ide-completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -66,6 +66,7 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n     enable_private_editable: false,\n     callable: Some(CallableSnippets::FillArguments),\n     snippet_cap: SnippetCap::new(true),\n+    prefer_core: false,\n     insert_use: InsertUseConfig {\n         granularity: ImportGranularity::Crate,\n         prefix_kind: PrefixKind::Plain,"}, {"sha": "53bc516109a26d02c996e0ab68ab22e2cd9024e2", "filename": "crates/ide-db/src/imports/import_assets.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Fimport_assets.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -212,18 +212,20 @@ impl ImportAssets {\n         &self,\n         sema: &Semantics<'_, RootDatabase>,\n         prefix_kind: PrefixKind,\n+        prefer_core: bool,\n     ) -> Vec<LocatedImport> {\n         let _p = profile::span(\"import_assets::search_for_imports\");\n-        self.search_for(sema, Some(prefix_kind))\n+        self.search_for(sema, Some(prefix_kind), prefer_core)\n     }\n \n     /// This may return non-absolute paths if a part of the returned path is already imported into scope.\n     pub fn search_for_relative_paths(\n         &self,\n         sema: &Semantics<'_, RootDatabase>,\n+        prefer_core: bool,\n     ) -> Vec<LocatedImport> {\n         let _p = profile::span(\"import_assets::search_for_relative_paths\");\n-        self.search_for(sema, None)\n+        self.search_for(sema, None, prefer_core)\n     }\n \n     pub fn path_fuzzy_name_to_exact(&mut self, case_sensitive: bool) {\n@@ -242,6 +244,7 @@ impl ImportAssets {\n         &self,\n         sema: &Semantics<'_, RootDatabase>,\n         prefixed: Option<PrefixKind>,\n+        prefer_core: bool,\n     ) -> Vec<LocatedImport> {\n         let _p = profile::span(\"import_assets::search_for\");\n \n@@ -252,6 +255,7 @@ impl ImportAssets {\n                 item_for_path_search(sema.db, item)?,\n                 &self.module_with_candidate,\n                 prefixed,\n+                prefer_core,\n             )\n         };\n \n@@ -564,11 +568,12 @@ fn get_mod_path(\n     item_to_search: ItemInNs,\n     module_with_candidate: &Module,\n     prefixed: Option<PrefixKind>,\n+    prefer_core: bool,\n ) -> Option<ModPath> {\n     if let Some(prefix_kind) = prefixed {\n-        module_with_candidate.find_use_path_prefixed(db, item_to_search, prefix_kind)\n+        module_with_candidate.find_use_path_prefixed(db, item_to_search, prefix_kind, prefer_core)\n     } else {\n-        module_with_candidate.find_use_path(db, item_to_search)\n+        module_with_candidate.find_use_path(db, item_to_search, prefer_core)\n     }\n }\n "}, {"sha": "12d873b4a0aa8be0c067f697cb7823375e7ce625", "filename": "crates/ide-db/src/path_transform.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-db%2Fsrc%2Fpath_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-db%2Fsrc%2Fpath_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fpath_transform.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -173,6 +173,7 @@ impl<'a> Ctx<'a> {\n                             let found_path = self.target_module.find_use_path(\n                                 self.source_scope.db.upcast(),\n                                 hir::ModuleDef::Trait(trait_ref),\n+                                false,\n                             )?;\n                             match ast::make::ty_path(mod_path_to_ast(&found_path)) {\n                                 ast::Type::PathType(path_ty) => Some(path_ty),\n@@ -209,7 +210,7 @@ impl<'a> Ctx<'a> {\n                 }\n \n                 let found_path =\n-                    self.target_module.find_use_path(self.source_scope.db.upcast(), def)?;\n+                    self.target_module.find_use_path(self.source_scope.db.upcast(), def, false)?;\n                 let res = mod_path_to_ast(&found_path).clone_for_update();\n                 if let Some(args) = path.segment().and_then(|it| it.generic_arg_list()) {\n                     if let Some(segment) = res.segment() {"}, {"sha": "06073ca1b250163f9b28f8944d0d92aca15a1a9d", "filename": "crates/ide-diagnostics/src/handlers/json_is_not_rust.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fjson_is_not_rust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fjson_is_not_rust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fjson_is_not_rust.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -137,6 +137,7 @@ pub(crate) fn json_in_items(\n                                         sema.db,\n                                         it,\n                                         config.insert_use.prefix_kind,\n+                                        config.prefer_core,\n                                     ) {\n                                         insert_use(\n                                             &scope,\n@@ -152,6 +153,7 @@ pub(crate) fn json_in_items(\n                                         sema.db,\n                                         it,\n                                         config.insert_use.prefix_kind,\n+                                        config.prefer_core,\n                                     ) {\n                                         insert_use(\n                                             &scope,"}, {"sha": "5a81a55d8221e0bb8805c6d56ac79db7e8aea9db", "filename": "crates/ide-diagnostics/src/handlers/missing_fields.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmissing_fields.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -124,6 +124,7 @@ fn fixes(ctx: &DiagnosticsContext<'_>, d: &hir::MissingFields) -> Option<Vec<Ass\n                         let type_path = current_module?.find_use_path(\n                             ctx.sema.db,\n                             item_for_path_search(ctx.sema.db, item_in_ns)?,\n+                            ctx.config.prefer_core,\n                         )?;\n \n                         use_trivial_constructor("}, {"sha": "22e644bb59e0831f05e38fa4e630bdd80775c4ac", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -150,6 +150,7 @@ pub struct DiagnosticsConfig {\n     pub expr_fill_default: ExprFillDefaultMode,\n     // FIXME: We may want to include a whole `AssistConfig` here\n     pub insert_use: InsertUseConfig,\n+    pub prefer_core: bool,\n }\n \n impl DiagnosticsConfig {\n@@ -170,6 +171,7 @@ impl DiagnosticsConfig {\n                 group: false,\n                 skip_glob_imports: false,\n             },\n+            prefer_core: false,\n         }\n     }\n }"}, {"sha": "57b5ab6abda6936f281eaf5315854261cd4d0e7b", "filename": "crates/ide-ssr/src/matching.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-ssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Fide-ssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-ssr%2Fsrc%2Fmatching.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -648,9 +648,10 @@ impl Match {\n             .module();\n         for (path, resolved_path) in &template.resolved_paths {\n             if let hir::PathResolution::Def(module_def) = resolved_path.resolution {\n-                let mod_path = module.find_use_path(sema.db, module_def).ok_or_else(|| {\n-                    match_error!(\"Failed to render template path `{}` at match location\")\n-                })?;\n+                let mod_path =\n+                    module.find_use_path(sema.db, module_def, false).ok_or_else(|| {\n+                        match_error!(\"Failed to render template path `{}` at match location\")\n+                    })?;\n                 self.rendered_template_paths.insert(path.clone(), mod_path);\n             }\n         }"}, {"sha": "6d1bf08124fa26ad4fdf2b451feb50a7c5c33101", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -263,6 +263,8 @@ config_data! {\n         imports_group_enable: bool                           = \"true\",\n         /// Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\n         imports_merge_glob: bool           = \"true\",\n+        /// Prefer to use imports of the core crate over the std crate.\n+        imports_prefer_core: bool                     = \"false\",\n         /// The path structure for newly inserted paths to use.\n         imports_prefix: ImportPrefixDef               = \"\\\"plain\\\"\",\n \n@@ -918,6 +920,7 @@ impl Config {\n                 ExprFillDefaultDef::Default => ExprFillDefaultMode::Default,\n             },\n             insert_use: self.insert_use_config(),\n+            prefer_core: self.data.imports_prefer_core,\n         }\n     }\n \n@@ -1133,6 +1136,7 @@ impl Config {\n                 CallableCompletionDef::None => None,\n             },\n             insert_use: self.insert_use_config(),\n+            prefer_core: self.data.imports_prefer_core,\n             snippet_cap: SnippetCap::new(try_or_def!(\n                 self.caps\n                     .text_document\n@@ -1156,6 +1160,7 @@ impl Config {\n             snippet_cap: SnippetCap::new(self.experimental(\"snippetTextEdit\")),\n             allowed: None,\n             insert_use: self.insert_use_config(),\n+            prefer_core: self.data.imports_prefer_core,\n         }\n     }\n "}, {"sha": "5dbb64d7df197b3561971da833d40dec42c59e4b", "filename": "crates/rust-analyzer/src/integrated_benchmarks.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fintegrated_benchmarks.rs?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -145,6 +145,7 @@ fn integrated_completion_benchmark() {\n                 skip_glob_imports: true,\n             },\n             snippets: Vec::new(),\n+            prefer_core: false,\n         };\n         let position =\n             FilePosition { file_id, offset: TextSize::try_from(completion_offset).unwrap() };\n@@ -182,6 +183,7 @@ fn integrated_completion_benchmark() {\n                 skip_glob_imports: true,\n             },\n             snippets: Vec::new(),\n+            prefer_core: false,\n         };\n         let position =\n             FilePosition { file_id, offset: TextSize::try_from(completion_offset).unwrap() };"}, {"sha": "6757624aea6ac4730ca6706f02e6a49afe37fb98", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -353,6 +353,11 @@ Group inserted imports by the https://rust-analyzer.github.io/manual.html#auto-i\n --\n Whether to allow import insertion to merge new imports into single path glob imports like `use std::fmt::*;`.\n --\n+[[rust-analyzer.imports.prefer.core]]rust-analyzer.imports.prefer.core (default: `false`)::\n++\n+--\n+Prefer to use imports of the core crate over the std crate.\n+--\n [[rust-analyzer.imports.prefix]]rust-analyzer.imports.prefix (default: `\"plain\"`)::\n +\n --"}, {"sha": "7e91d989f156de7343e3ef42e976710139ea0d3d", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/352a5b86251625eed09668f5281b097b30d164c0/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/352a5b86251625eed09668f5281b097b30d164c0/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=352a5b86251625eed09668f5281b097b30d164c0", "patch": "@@ -803,6 +803,11 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.imports.prefer.core\": {\n+                    \"markdownDescription\": \"Prefer to use imports of the core crate over the std crate.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.imports.prefix\": {\n                     \"markdownDescription\": \"The path structure for newly inserted paths to use.\",\n                     \"default\": \"plain\","}]}