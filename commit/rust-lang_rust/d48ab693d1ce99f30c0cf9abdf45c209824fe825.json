{"sha": "d48ab693d1ce99f30c0cf9abdf45c209824fe825", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0OGFiNjkzZDFjZTk5ZjMwYzBjZjlhYmRmNDVjMjA5ODI0ZmU4MjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-30T06:44:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-30T06:44:14Z"}, "message": "Auto merge of #49219 - eddyb:proc-macro-decouple, r=alexcrichton\n\nDecouple proc_macro from the rest of the compiler.\n\nThis PR removes all dependencies of `proc_macro` on compiler crates and allows multiple copies of `proc_macro`, built even by different compilers (but from the same source), to interoperate.\n\nPractically, it allows:\n* running proc macro tests at stage1 (I moved most from `-fulldeps` to the regular suites)\n* using proc macros in the compiler itself (may require some rustbuild trickery)\n\nOn the server (i.e. compiler front-end) side:\n* `server::*` traits are implemented to provide the concrete types and methods\n  * the concrete types are completely separated from the `proc_macro` public API\n  * the only use of the type implementing `Server` is to be passed to `Client::run`\n\nOn the client (i.e. proc macro) side (potentially using a different `proc_macro` instance!):\n* `client::Client` wraps around client-side (expansion) function pointers\n  * it encapsulates the `proc_macro` instance used by the client\n  * its `run` method can be called by a server, to execute the client-side function\n    * the client instance is bridged to the provided server, while it runs\n    * ~~currently a thread is spawned, could use process isolation in the future~~\n(not the case anymore, see #56058)\n* proc macro crates get a generated `static` holding a `&[ProcMacro]`\n  * this describes all derives/attr/bang proc macros, replacing the \"registrar\" function\n  * each variant of `ProcMacro` contains an appropriately typed `Client<fn(...) -> ...>`\n\n`proc_macro` public APIs call into the server via an internal \"bridge\":\n* only a currently running proc macro `Client` can interact with those APIs\n  * server code might not be able to (if it uses a different `proc_macro` instance)\n    * however, it can always create and `run` its own `Client`, but that may be inefficient\n* the `bridge` uses serialization, C ABI and integer handles to avoid Rust ABI instability\n* each invocation of a proc macro results in disjoint integers in its `proc_macro` handles\n  * this prevents using values of those types across invocations (if they even can be kept)\n\nr? @alexcrichton cc @jseyfried @nikomatsakis @Zoxc @thepowersgang", "tree": {"sha": "83dfb826fd7ff387e79c3e4c4c7ddd7d5317eba6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83dfb826fd7ff387e79c3e4c4c7ddd7d5317eba6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d48ab693d1ce99f30c0cf9abdf45c209824fe825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d48ab693d1ce99f30c0cf9abdf45c209824fe825", "html_url": "https://github.com/rust-lang/rust/commit/d48ab693d1ce99f30c0cf9abdf45c209824fe825", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d48ab693d1ce99f30c0cf9abdf45c209824fe825/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e90a12a8a95933604a8b609197fce61bb24a38c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e90a12a8a95933604a8b609197fce61bb24a38c", "html_url": "https://github.com/rust-lang/rust/commit/3e90a12a8a95933604a8b609197fce61bb24a38c"}, {"sha": "3a04d448f935dcd8ed0e5ff98e776431196a4ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a04d448f935dcd8ed0e5ff98e776431196a4ece", "html_url": "https://github.com/rust-lang/rust/commit/3a04d448f935dcd8ed0e5ff98e776431196a4ece"}], "stats": {"total": 4495, "additions": 3327, "deletions": 1168}, "files": [{"sha": "234485afa809fa40da08013778925612886d33d1", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1599,12 +1599,6 @@ dependencies = [\n [[package]]\n name = \"proc_macro\"\n version = \"0.0.0\"\n-dependencies = [\n- \"rustc_data_structures 0.0.0\",\n- \"rustc_errors 0.0.0\",\n- \"syntax 0.0.0\",\n- \"syntax_pos 0.0.0\",\n-]\n \n [[package]]\n name = \"profiler_builtins\"\n@@ -1933,7 +1927,6 @@ dependencies = [\n  \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"polonius-engine 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"proc_macro 0.0.0\",\n  \"rustc-rayon 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon-core 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_apfloat 0.0.0\",\n@@ -2351,7 +2344,6 @@ dependencies = [\n  \"flate2 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memmap 0.6.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"proc_macro 0.0.0\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n@@ -2890,7 +2882,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"fmt_macros 0.0.0\",\n  \"log 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"proc_macro 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_errors 0.0.0\",\n  \"rustc_target 0.0.0\",\n@@ -2980,6 +2971,7 @@ name = \"test\"\n version = \"0.0.0\"\n dependencies = [\n  \"getopts 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc_macro 0.0.0\",\n  \"term 0.0.0\",\n ]\n "}, {"sha": "d18a48e5d2270a7a863e731ae0889f5ebb065ed1", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -129,10 +129,12 @@ fn main() {\n         // Help the libc crate compile by assisting it in finding the MUSL\n         // native libraries.\n         if let Some(s) = env::var_os(\"MUSL_ROOT\") {\n-            let mut root = OsString::from(\"native=\");\n-            root.push(&s);\n-            root.push(\"/lib\");\n-            cmd.arg(\"-L\").arg(&root);\n+            if target.contains(\"musl\") {\n+                let mut root = OsString::from(\"native=\");\n+                root.push(&s);\n+                root.push(\"/lib\");\n+                cmd.arg(\"-L\").arg(&root);\n+            }\n         }\n \n         // Override linker if necessary."}, {"sha": "079fdee7e86269b6711c1d146595b10055da98d2", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -390,7 +390,6 @@ impl<'a> Builder<'a> {\n                 test::RunPassFullDeps,\n                 test::RunFailFullDeps,\n                 test::CompileFailFullDeps,\n-                test::IncrementalFullDeps,\n                 test::Rustdoc,\n                 test::Pretty,\n                 test::RunPassPretty,"}, {"sha": "e6c260a1426f97f6bc2b549fe4d03cdfe22db06f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -839,12 +839,6 @@ host_test!(CompileFailFullDeps {\n     suite: \"compile-fail-fulldeps\"\n });\n \n-host_test!(IncrementalFullDeps {\n-    path: \"src/test/incremental-fulldeps\",\n-    mode: \"incremental\",\n-    suite: \"incremental-fulldeps\"\n-});\n-\n host_test!(Rustdoc {\n     path: \"src/test/rustdoc\",\n     mode: \"rustdoc\",\n@@ -982,6 +976,11 @@ impl Step for Compiletest {\n             builder.ensure(compile::Std { compiler, target: compiler.host });\n         }\n \n+        // HACK(eddyb) ensure that `libproc_macro` is available on the host.\n+        builder.ensure(compile::Test { compiler, target: compiler.host });\n+        // Also provide `rust_test_helpers` for the host.\n+        builder.ensure(native::TestHelpers { target: compiler.host });\n+\n         builder.ensure(native::TestHelpers { target });\n         builder.ensure(RemoteCopyLibs { compiler, target });\n \n@@ -1049,7 +1048,11 @@ impl Step for Compiletest {\n             cmd.arg(\"--linker\").arg(linker);\n         }\n \n-        let hostflags = flags.clone();\n+        let mut hostflags = flags.clone();\n+        hostflags.push(format!(\n+            \"-Lnative={}\",\n+            builder.test_helpers_out(compiler.host).display()\n+        ));\n         cmd.arg(\"--host-rustcflags\").arg(hostflags.join(\" \"));\n \n         let mut targetflags = flags;"}, {"sha": "f903f79f9afc02c29638cb3b344096794e9f784f", "filename": "src/libproc_macro/Cargo.toml", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2FCargo.toml?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -5,10 +5,3 @@ version = \"0.0.0\"\n \n [lib]\n path = \"lib.rs\"\n-crate-type = [\"dylib\"]\n-\n-[dependencies]\n-syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../libsyntax_pos\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n-rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "f228841c1e80f6aa1c6ba9715ed407a519f5b0d2", "filename": "src/libproc_macro/bridge/buffer.rs", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fbridge%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fbridge%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fbuffer.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -0,0 +1,170 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Buffer management for same-process client<->server communication.\n+\n+use std::io::{self, Write};\n+use std::mem;\n+use std::ops::{Deref, DerefMut};\n+use std::slice;\n+\n+#[repr(C)]\n+struct Slice<'a, T: 'a> {\n+    data: &'a [T; 0],\n+    len: usize,\n+}\n+\n+unsafe impl<'a, T: Sync> Sync for Slice<'a, T> {}\n+unsafe impl<'a, T: Sync> Send for Slice<'a, T> {}\n+\n+impl<T> Copy for Slice<'a, T> {}\n+impl<T> Clone for Slice<'a, T> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+impl<T> From<&'a [T]> for Slice<'a, T> {\n+    fn from(xs: &'a [T]) -> Self {\n+        Slice {\n+            data: unsafe { &*(xs.as_ptr() as *const [T; 0]) },\n+            len: xs.len(),\n+        }\n+    }\n+}\n+\n+impl<T> Deref for Slice<'a, T> {\n+    type Target = [T];\n+    fn deref(&self) -> &[T] {\n+        unsafe { slice::from_raw_parts(self.data.as_ptr(), self.len) }\n+    }\n+}\n+\n+#[repr(C)]\n+pub struct Buffer<T: Copy> {\n+    data: *mut T,\n+    len: usize,\n+    capacity: usize,\n+    extend_from_slice: extern \"C\" fn(Buffer<T>, Slice<T>) -> Buffer<T>,\n+    drop: extern \"C\" fn(Buffer<T>),\n+}\n+\n+unsafe impl<T: Copy + Sync> Sync for Buffer<T> {}\n+unsafe impl<T: Copy + Send> Send for Buffer<T> {}\n+\n+impl<T: Copy> Default for Buffer<T> {\n+    fn default() -> Self {\n+        Self::from(vec![])\n+    }\n+}\n+\n+impl<T: Copy> Deref for Buffer<T> {\n+    type Target = [T];\n+    fn deref(&self) -> &[T] {\n+        unsafe { slice::from_raw_parts(self.data as *const T, self.len) }\n+    }\n+}\n+\n+impl<T: Copy> DerefMut for Buffer<T> {\n+    fn deref_mut(&mut self) -> &mut [T] {\n+        unsafe { slice::from_raw_parts_mut(self.data, self.len) }\n+    }\n+}\n+\n+impl<T: Copy> Buffer<T> {\n+    pub(super) fn new() -> Self {\n+        Self::default()\n+    }\n+\n+    pub(super) fn clear(&mut self) {\n+        self.len = 0;\n+    }\n+\n+    pub(super) fn take(&mut self) -> Self {\n+        mem::replace(self, Self::default())\n+    }\n+\n+    pub(super) fn extend_from_slice(&mut self, xs: &[T]) {\n+        // Fast path to avoid going through an FFI call.\n+        if let Some(final_len) = self.len.checked_add(xs.len()) {\n+            if final_len <= self.capacity {\n+                let dst = unsafe { slice::from_raw_parts_mut(self.data, self.capacity) };\n+                dst[self.len..][..xs.len()].copy_from_slice(xs);\n+                self.len = final_len;\n+                return;\n+            }\n+        }\n+        let b = self.take();\n+        *self = (b.extend_from_slice)(b, Slice::from(xs));\n+    }\n+}\n+\n+impl Write for Buffer<u8> {\n+    fn write(&mut self, xs: &[u8]) -> io::Result<usize> {\n+        self.extend_from_slice(xs);\n+        Ok(xs.len())\n+    }\n+\n+    fn write_all(&mut self, xs: &[u8]) -> io::Result<()> {\n+        self.extend_from_slice(xs);\n+        Ok(())\n+    }\n+\n+    fn flush(&mut self) -> io::Result<()> {\n+        Ok(())\n+    }\n+}\n+\n+impl<T: Copy> Drop for Buffer<T> {\n+    fn drop(&mut self) {\n+        let b = self.take();\n+        (b.drop)(b);\n+    }\n+}\n+\n+impl<T: Copy> From<Vec<T>> for Buffer<T> {\n+    fn from(mut v: Vec<T>) -> Self {\n+        let (data, len, capacity) = (v.as_mut_ptr(), v.len(), v.capacity());\n+        mem::forget(v);\n+\n+        // This utility function is nested in here because it can *only*\n+        // be safely called on `Buffer`s created by *this* `proc_macro`.\n+        fn to_vec<T: Copy>(b: Buffer<T>) -> Vec<T> {\n+            unsafe {\n+                let Buffer {\n+                    data,\n+                    len,\n+                    capacity,\n+                    ..\n+                } = b;\n+                mem::forget(b);\n+                Vec::from_raw_parts(data, len, capacity)\n+            }\n+        }\n+\n+        extern \"C\" fn extend_from_slice<T: Copy>(b: Buffer<T>, xs: Slice<T>) -> Buffer<T> {\n+            let mut v = to_vec(b);\n+            v.extend_from_slice(&xs);\n+            Buffer::from(v)\n+        }\n+\n+        extern \"C\" fn drop<T: Copy>(b: Buffer<T>) {\n+            mem::drop(to_vec(b));\n+        }\n+\n+        Buffer {\n+            data,\n+            len,\n+            capacity,\n+            extend_from_slice,\n+            drop,\n+        }\n+    }\n+}"}, {"sha": "ed27df4496256aa12f51afc5073a7c8afa3f6025", "filename": "src/libproc_macro/bridge/client.rs", "status": "added", "additions": 504, "deletions": 0, "changes": 504, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fclient.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -0,0 +1,504 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Client-side types.\n+\n+use super::*;\n+\n+macro_rules! define_handles {\n+    (\n+        'owned: $($oty:ident,)*\n+        'interned: $($ity:ident,)*\n+    ) => {\n+        #[repr(C)]\n+        #[allow(non_snake_case)]\n+        pub struct HandleCounters {\n+            $($oty: AtomicUsize,)*\n+            $($ity: AtomicUsize,)*\n+        }\n+\n+        impl HandleCounters {\n+            // FIXME(#53451) public to work around `Cannot create local mono-item` ICE.\n+            pub extern \"C\" fn get() -> &'static Self {\n+                static COUNTERS: HandleCounters = HandleCounters {\n+                    $($oty: AtomicUsize::new(1),)*\n+                    $($ity: AtomicUsize::new(1),)*\n+                };\n+                &COUNTERS\n+            }\n+        }\n+\n+        // FIXME(eddyb) generate the definition of `HandleStore` in `server.rs`.\n+        #[repr(C)]\n+        #[allow(non_snake_case)]\n+        pub(super) struct HandleStore<S: server::Types> {\n+            $($oty: handle::OwnedStore<S::$oty>,)*\n+            $($ity: handle::InternedStore<S::$ity>,)*\n+        }\n+\n+        impl<S: server::Types> HandleStore<S> {\n+            pub(super) fn new(handle_counters: &'static HandleCounters) -> Self {\n+                HandleStore {\n+                    $($oty: handle::OwnedStore::new(&handle_counters.$oty),)*\n+                    $($ity: handle::InternedStore::new(&handle_counters.$ity),)*\n+                }\n+            }\n+        }\n+\n+        $(\n+            #[repr(C)]\n+            pub(crate) struct $oty(handle::Handle);\n+            impl !Send for $oty {}\n+            impl !Sync for $oty {}\n+\n+            // Forward `Drop::drop` to the inherent `drop` method.\n+            impl Drop for $oty {\n+                fn drop(&mut self) {\n+                    $oty(self.0).drop();\n+                }\n+            }\n+\n+            impl<S> Encode<S> for $oty {\n+                fn encode(self, w: &mut Writer, s: &mut S) {\n+                    let handle = self.0;\n+                    mem::forget(self);\n+                    handle.encode(w, s);\n+                }\n+            }\n+\n+            impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>\n+                for Marked<S::$oty, $oty>\n+            {\n+                fn decode(r: &mut Reader, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {\n+                    s.$oty.take(handle::Handle::decode(r, &mut ()))\n+                }\n+            }\n+\n+            impl<S> Encode<S> for &$oty {\n+                fn encode(self, w: &mut Writer, s: &mut S) {\n+                    self.0.encode(w, s);\n+                }\n+            }\n+\n+            impl<S: server::Types> Decode<'_, 's, HandleStore<server::MarkedTypes<S>>>\n+                for &'s Marked<S::$oty, $oty>\n+            {\n+                fn decode(r: &mut Reader, s: &'s HandleStore<server::MarkedTypes<S>>) -> Self {\n+                    &s.$oty[handle::Handle::decode(r, &mut ())]\n+                }\n+            }\n+\n+            impl<S> Encode<S> for &mut $oty {\n+                fn encode(self, w: &mut Writer, s: &mut S) {\n+                    self.0.encode(w, s);\n+                }\n+            }\n+\n+            impl<S: server::Types> DecodeMut<'_, 's, HandleStore<server::MarkedTypes<S>>>\n+                for &'s mut Marked<S::$oty, $oty>\n+            {\n+                fn decode(r: &mut Reader, s: &'s mut HandleStore<server::MarkedTypes<S>>) -> Self {\n+                    &mut s.$oty[handle::Handle::decode(r, &mut ())]\n+                }\n+            }\n+\n+            impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>\n+                for Marked<S::$oty, $oty>\n+            {\n+                fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {\n+                    s.$oty.alloc(self).encode(w, s);\n+                }\n+            }\n+\n+            impl<S> DecodeMut<'_, '_, S> for $oty {\n+                fn decode(r: &mut Reader, s: &mut S) -> Self {\n+                    $oty(handle::Handle::decode(r, s))\n+                }\n+            }\n+        )*\n+\n+        $(\n+            #[repr(C)]\n+            #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n+            pub(crate) struct $ity(handle::Handle);\n+            impl !Send for $ity {}\n+            impl !Sync for $ity {}\n+\n+            impl<S> Encode<S> for $ity {\n+                fn encode(self, w: &mut Writer, s: &mut S) {\n+                    self.0.encode(w, s);\n+                }\n+            }\n+\n+            impl<S: server::Types> DecodeMut<'_, '_, HandleStore<server::MarkedTypes<S>>>\n+                for Marked<S::$ity, $ity>\n+            {\n+                fn decode(r: &mut Reader, s: &mut HandleStore<server::MarkedTypes<S>>) -> Self {\n+                    s.$ity.copy(handle::Handle::decode(r, &mut ()))\n+                }\n+            }\n+\n+            impl<S: server::Types> Encode<HandleStore<server::MarkedTypes<S>>>\n+                for Marked<S::$ity, $ity>\n+            {\n+                fn encode(self, w: &mut Writer, s: &mut HandleStore<server::MarkedTypes<S>>) {\n+                    s.$ity.alloc(self).encode(w, s);\n+                }\n+            }\n+\n+            impl<S> DecodeMut<'_, '_, S> for $ity {\n+                fn decode(r: &mut Reader, s: &mut S) -> Self {\n+                    $ity(handle::Handle::decode(r, s))\n+                }\n+            }\n+        )*\n+    }\n+}\n+define_handles! {\n+    'owned:\n+    TokenStream,\n+    TokenStreamBuilder,\n+    TokenStreamIter,\n+    Group,\n+    Literal,\n+    SourceFile,\n+    MultiSpan,\n+    Diagnostic,\n+\n+    'interned:\n+    Punct,\n+    Ident,\n+    Span,\n+}\n+\n+// FIXME(eddyb) generate these impls by pattern-matching on the\n+// names of methods - also could use the presence of `fn drop`\n+// to distinguish between 'owned and 'interned, above.\n+// Alternatively, special 'modes\" could be listed of types in with_api\n+// instead of pattern matching on methods, here and in server decl.\n+\n+impl Clone for TokenStream {\n+    fn clone(&self) -> Self {\n+        self.clone()\n+    }\n+}\n+\n+impl Clone for TokenStreamIter {\n+    fn clone(&self) -> Self {\n+        self.clone()\n+    }\n+}\n+\n+impl Clone for Group {\n+    fn clone(&self) -> Self {\n+        self.clone()\n+    }\n+}\n+\n+impl Clone for Literal {\n+    fn clone(&self) -> Self {\n+        self.clone()\n+    }\n+}\n+\n+// FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n+impl fmt::Debug for Literal {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.write_str(&self.debug())\n+    }\n+}\n+\n+impl Clone for SourceFile {\n+    fn clone(&self) -> Self {\n+        self.clone()\n+    }\n+}\n+\n+impl fmt::Debug for Span {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.write_str(&self.debug())\n+    }\n+}\n+\n+macro_rules! define_client_side {\n+    ($($name:ident {\n+        $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)*) $(-> $ret_ty:ty)*;)*\n+    }),* $(,)*) => {\n+        $(impl $name {\n+            $(pub(crate) fn $method($($arg: $arg_ty),*) $(-> $ret_ty)* {\n+                Bridge::with(|bridge| {\n+                    let mut b = bridge.cached_buffer.take();\n+\n+                    b.clear();\n+                    api_tags::Method::$name(api_tags::$name::$method).encode(&mut b, &mut ());\n+                    reverse_encode!(b; $($arg),*);\n+\n+                    b = bridge.dispatch.call(b);\n+\n+                    let r = Result::<_, PanicMessage>::decode(&mut &b[..], &mut ());\n+\n+                    bridge.cached_buffer = b;\n+\n+                    r.unwrap_or_else(|e| panic::resume_unwind(e.into()))\n+                })\n+            })*\n+        })*\n+    }\n+}\n+with_api!(self, self, define_client_side);\n+\n+enum BridgeState<'a> {\n+    /// No server is currently connected to this client.\n+    NotConnected,\n+\n+    /// A server is connected and available for requests.\n+    Connected(Bridge<'a>),\n+\n+    /// Access to the bridge is being exclusively acquired\n+    /// (e.g. during `BridgeState::with`).\n+    InUse,\n+}\n+\n+enum BridgeStateL {}\n+\n+impl<'a> scoped_cell::ApplyL<'a> for BridgeStateL {\n+    type Out = BridgeState<'a>;\n+}\n+\n+thread_local! {\n+    static BRIDGE_STATE: scoped_cell::ScopedCell<BridgeStateL> =\n+        scoped_cell::ScopedCell::new(BridgeState::NotConnected);\n+}\n+\n+impl BridgeState<'_> {\n+    /// Take exclusive control of the thread-local\n+    /// `BridgeState`, and pass it to `f`, mutably.\n+    /// The state will be restored after `f` exits, even\n+    /// by panic, including modifications made to it by `f`.\n+    ///\n+    /// NB: while `f` is running, the thread-local state\n+    /// is `BridgeState::InUse`.\n+    fn with<R>(f: impl FnOnce(&mut BridgeState) -> R) -> R {\n+        BRIDGE_STATE.with(|state| {\n+            state.replace(BridgeState::InUse, |mut state| {\n+                // FIXME(#52812) pass `f` directly to `replace` when `RefMutL` is gone\n+                f(&mut *state)\n+            })\n+        })\n+    }\n+}\n+\n+impl Bridge<'_> {\n+    fn enter<R>(self, f: impl FnOnce() -> R) -> R {\n+        // Hide the default panic output within `proc_macro` expansions.\n+        // NB. the server can't do this because it may use a different libstd.\n+        static HIDE_PANICS_DURING_EXPANSION: Once = Once::new();\n+        HIDE_PANICS_DURING_EXPANSION.call_once(|| {\n+            let prev = panic::take_hook();\n+            panic::set_hook(Box::new(move |info| {\n+                let hide = BridgeState::with(|state| match state {\n+                    BridgeState::NotConnected => false,\n+                    BridgeState::Connected(_) | BridgeState::InUse => true,\n+                });\n+                if !hide {\n+                    prev(info)\n+                }\n+            }));\n+        });\n+\n+        BRIDGE_STATE.with(|state| state.set(BridgeState::Connected(self), f))\n+    }\n+\n+    fn with<R>(f: impl FnOnce(&mut Bridge) -> R) -> R {\n+        BridgeState::with(|state| match state {\n+            BridgeState::NotConnected => {\n+                panic!(\"procedural macro API is used outside of a procedural macro\");\n+            }\n+            BridgeState::InUse => {\n+                panic!(\"procedural macro API is used while it's already in use\");\n+            }\n+            BridgeState::Connected(bridge) => f(bridge),\n+        })\n+    }\n+}\n+\n+/// A client-side \"global object\" (usually a function pointer),\n+/// which may be using a different `proc_macro` from the one\n+/// used by the server, but can be interacted with compatibly.\n+///\n+/// NB: `F` must have FFI-friendly memory layout (e.g. a pointer).\n+/// The call ABI of function pointers used for `F` doesn't\n+/// need to match between server and client, since it's only\n+/// passed between them and (eventually) called by the client.\n+#[repr(C)]\n+#[derive(Copy, Clone)]\n+pub struct Client<F> {\n+    pub(super) get_handle_counters: extern \"C\" fn() -> &'static HandleCounters,\n+    pub(super) run: extern \"C\" fn(Bridge, F) -> Buffer<u8>,\n+    pub(super) f: F,\n+}\n+\n+// FIXME(#53451) public to work around `Cannot create local mono-item` ICE,\n+// affecting not only the function itself, but also the `BridgeState` `thread_local!`.\n+pub extern \"C\" fn __run_expand1(\n+    mut bridge: Bridge,\n+    f: fn(::TokenStream) -> ::TokenStream,\n+) -> Buffer<u8> {\n+    // The initial `cached_buffer` contains the input.\n+    let mut b = bridge.cached_buffer.take();\n+\n+    panic::catch_unwind(panic::AssertUnwindSafe(|| {\n+        bridge.enter(|| {\n+            let reader = &mut &b[..];\n+            let input = TokenStream::decode(reader, &mut ());\n+\n+            // Put the `cached_buffer` back in the `Bridge`, for requests.\n+            Bridge::with(|bridge| bridge.cached_buffer = b.take());\n+\n+            let output = f(::TokenStream(input)).0;\n+\n+            // Take the `cached_buffer` back out, for the output value.\n+            b = Bridge::with(|bridge| bridge.cached_buffer.take());\n+\n+            // HACK(eddyb) Separate encoding a success value (`Ok(output)`)\n+            // from encoding a panic (`Err(e: PanicMessage)`) to avoid\n+            // having handles outside the `bridge.enter(|| ...)` scope, and\n+            // to catch panics that could happen while encoding the success.\n+            //\n+            // Note that panics should be impossible beyond this point, but\n+            // this is defensively trying to avoid any accidental panicking\n+            // reaching the `extern \"C\"` (which should `abort` but may not\n+            // at the moment, so this is also potentially preventing UB).\n+            b.clear();\n+            Ok::<_, ()>(output).encode(&mut b, &mut ());\n+        })\n+    }))\n+    .map_err(PanicMessage::from)\n+    .unwrap_or_else(|e| {\n+        b.clear();\n+        Err::<(), _>(e).encode(&mut b, &mut ());\n+    });\n+    b\n+}\n+\n+impl Client<fn(::TokenStream) -> ::TokenStream> {\n+    pub const fn expand1(f: fn(::TokenStream) -> ::TokenStream) -> Self {\n+        Client {\n+            get_handle_counters: HandleCounters::get,\n+            run: __run_expand1,\n+            f,\n+        }\n+    }\n+}\n+\n+// FIXME(#53451) public to work around `Cannot create local mono-item` ICE,\n+// affecting not only the function itself, but also the `BridgeState` `thread_local!`.\n+pub extern \"C\" fn __run_expand2(\n+    mut bridge: Bridge,\n+    f: fn(::TokenStream, ::TokenStream) -> ::TokenStream,\n+) -> Buffer<u8> {\n+    // The initial `cached_buffer` contains the input.\n+    let mut b = bridge.cached_buffer.take();\n+\n+    panic::catch_unwind(panic::AssertUnwindSafe(|| {\n+        bridge.enter(|| {\n+            let reader = &mut &b[..];\n+            let input = TokenStream::decode(reader, &mut ());\n+            let input2 = TokenStream::decode(reader, &mut ());\n+\n+            // Put the `cached_buffer` back in the `Bridge`, for requests.\n+            Bridge::with(|bridge| bridge.cached_buffer = b.take());\n+\n+            let output = f(::TokenStream(input), ::TokenStream(input2)).0;\n+\n+            // Take the `cached_buffer` back out, for the output value.\n+            b = Bridge::with(|bridge| bridge.cached_buffer.take());\n+\n+            // HACK(eddyb) Separate encoding a success value (`Ok(output)`)\n+            // from encoding a panic (`Err(e: PanicMessage)`) to avoid\n+            // having handles outside the `bridge.enter(|| ...)` scope, and\n+            // to catch panics that could happen while encoding the success.\n+            //\n+            // Note that panics should be impossible beyond this point, but\n+            // this is defensively trying to avoid any accidental panicking\n+            // reaching the `extern \"C\"` (which should `abort` but may not\n+            // at the moment, so this is also potentially preventing UB).\n+            b.clear();\n+            Ok::<_, ()>(output).encode(&mut b, &mut ());\n+        })\n+    }))\n+    .map_err(PanicMessage::from)\n+    .unwrap_or_else(|e| {\n+        b.clear();\n+        Err::<(), _>(e).encode(&mut b, &mut ());\n+    });\n+    b\n+}\n+\n+impl Client<fn(::TokenStream, ::TokenStream) -> ::TokenStream> {\n+    pub const fn expand2(f: fn(::TokenStream, ::TokenStream) -> ::TokenStream) -> Self {\n+        Client {\n+            get_handle_counters: HandleCounters::get,\n+            run: __run_expand2,\n+            f,\n+        }\n+    }\n+}\n+\n+#[repr(C)]\n+#[derive(Copy, Clone)]\n+pub enum ProcMacro {\n+    CustomDerive {\n+        trait_name: &'static str,\n+        attributes: &'static [&'static str],\n+        client: Client<fn(::TokenStream) -> ::TokenStream>,\n+    },\n+\n+    Attr {\n+        name: &'static str,\n+        client: Client<fn(::TokenStream, ::TokenStream) -> ::TokenStream>,\n+    },\n+\n+    Bang {\n+        name: &'static str,\n+        client: Client<fn(::TokenStream) -> ::TokenStream>,\n+    },\n+}\n+\n+impl ProcMacro {\n+    pub const fn custom_derive(\n+        trait_name: &'static str,\n+        attributes: &'static [&'static str],\n+        expand: fn(::TokenStream) -> ::TokenStream,\n+    ) -> Self {\n+        ProcMacro::CustomDerive {\n+            trait_name,\n+            attributes,\n+            client: Client::expand1(expand),\n+        }\n+    }\n+\n+    pub const fn attr(\n+        name: &'static str,\n+        expand: fn(::TokenStream, ::TokenStream) -> ::TokenStream,\n+    ) -> Self {\n+        ProcMacro::Attr {\n+            name,\n+            client: Client::expand2(expand),\n+        }\n+    }\n+\n+    pub const fn bang(name: &'static str, expand: fn(::TokenStream) -> ::TokenStream) -> Self {\n+        ProcMacro::Bang {\n+            name,\n+            client: Client::expand1(expand),\n+        }\n+    }\n+}"}, {"sha": "92fe7baae097c5c882cdae043d1331f6d50fc783", "filename": "src/libproc_macro/bridge/closure.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fbridge%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fbridge%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fclosure.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Closure type (equivalent to `&mut dyn FnMut(A) -> R`) that's `repr(C)`.\n+\n+#[repr(C)]\n+pub struct Closure<'a, A, R> {\n+    call: unsafe extern \"C\" fn(&mut Env, A) -> R,\n+    env: &'a mut Env,\n+}\n+\n+extern \"C\" {\n+    type Env;\n+}\n+\n+impl<'a, A, R> !Sync for Closure<'a, A, R> {}\n+impl<'a, A, R> !Send for Closure<'a, A, R> {}\n+\n+impl<'a, A, R, F: FnMut(A) -> R> From<&'a mut F> for Closure<'a, A, R> {\n+    fn from(f: &'a mut F) -> Self {\n+        unsafe extern \"C\" fn call<A, R, F: FnMut(A) -> R>(env: &mut Env, arg: A) -> R {\n+            (*(env as *mut _ as *mut F))(arg)\n+        }\n+        Closure {\n+            call: call::<A, R, F>,\n+            env: unsafe { &mut *(f as *mut _ as *mut Env) },\n+        }\n+    }\n+}\n+\n+impl<'a, A, R> Closure<'a, A, R> {\n+    pub fn call(&mut self, arg: A) -> R {\n+        unsafe { (self.call)(self.env, arg) }\n+    }\n+}"}, {"sha": "5c91a1408a42f5b77ca0b7e6438887459c9b0e4e", "filename": "src/libproc_macro/bridge/handle.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fbridge%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fbridge%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fhandle.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -0,0 +1,92 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Server-side handles and storage for per-handle data.\n+\n+use std::collections::{BTreeMap, HashMap};\n+use std::hash::Hash;\n+use std::num::NonZeroU32;\n+use std::ops::{Index, IndexMut};\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+pub(super) type Handle = NonZeroU32;\n+\n+pub(super) struct OwnedStore<T: 'static> {\n+    counter: &'static AtomicUsize,\n+    data: BTreeMap<Handle, T>,\n+}\n+\n+impl<T> OwnedStore<T> {\n+    pub(super) fn new(counter: &'static AtomicUsize) -> Self {\n+        // Ensure the handle counter isn't 0, which would panic later,\n+        // when `NonZeroU32::new` (aka `Handle::new`) is called in `alloc`.\n+        assert_ne!(counter.load(Ordering::SeqCst), 0);\n+\n+        OwnedStore {\n+            counter,\n+            data: BTreeMap::new(),\n+        }\n+    }\n+}\n+\n+impl<T> OwnedStore<T> {\n+    pub(super) fn alloc(&mut self, x: T) -> Handle {\n+        let counter = self.counter.fetch_add(1, Ordering::SeqCst);\n+        let handle = Handle::new(counter as u32).expect(\"`proc_macro` handle counter overflowed\");\n+        assert!(self.data.insert(handle, x).is_none());\n+        handle\n+    }\n+\n+    pub(super) fn take(&mut self, h: Handle) -> T {\n+        self.data\n+            .remove(&h)\n+            .expect(\"use-after-free in `proc_macro` handle\")\n+    }\n+}\n+\n+impl<T> Index<Handle> for OwnedStore<T> {\n+    type Output = T;\n+    fn index(&self, h: Handle) -> &T {\n+        self.data\n+            .get(&h)\n+            .expect(\"use-after-free in `proc_macro` handle\")\n+    }\n+}\n+\n+impl<T> IndexMut<Handle> for OwnedStore<T> {\n+    fn index_mut(&mut self, h: Handle) -> &mut T {\n+        self.data\n+            .get_mut(&h)\n+            .expect(\"use-after-free in `proc_macro` handle\")\n+    }\n+}\n+\n+pub(super) struct InternedStore<T: 'static> {\n+    owned: OwnedStore<T>,\n+    interner: HashMap<T, Handle>,\n+}\n+\n+impl<T: Copy + Eq + Hash> InternedStore<T> {\n+    pub(super) fn new(counter: &'static AtomicUsize) -> Self {\n+        InternedStore {\n+            owned: OwnedStore::new(counter),\n+            interner: HashMap::new(),\n+        }\n+    }\n+\n+    pub(super) fn alloc(&mut self, x: T) -> Handle {\n+        let owned = &mut self.owned;\n+        *self.interner.entry(x).or_insert_with(|| owned.alloc(x))\n+    }\n+\n+    pub(super) fn copy(&mut self, h: Handle) -> T {\n+        self.owned[h]\n+    }\n+}"}, {"sha": "f03c63fc04c8146800f6b2a133a9d64bd67e975a", "filename": "src/libproc_macro/bridge/mod.rs", "status": "added", "additions": 413, "deletions": 0, "changes": 413, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fbridge%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fmod.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -0,0 +1,413 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Internal interface for communicating between a `proc_macro` client\n+//! (a proc macro crate) and a `proc_macro` server (a compiler front-end).\n+//!\n+//! Serialization (with C ABI buffers) and unique integer handles are employed\n+//! to allow safely interfacing between two copies of `proc_macro` built\n+//! (from the same source) by different compilers with potentially mismatching\n+//! Rust ABIs (e.g. stage0/bin/rustc vs stage1/bin/rustc during bootstrap).\n+\n+#![deny(unsafe_code)]\n+\n+use std::fmt;\n+use std::hash::Hash;\n+use std::marker;\n+use std::mem;\n+use std::ops::Bound;\n+use std::panic;\n+use std::sync::atomic::AtomicUsize;\n+use std::sync::Once;\n+use std::thread;\n+use {Delimiter, Level, LineColumn, Spacing};\n+\n+/// Higher-order macro describing the server RPC API, allowing automatic\n+/// generation of type-safe Rust APIs, both client-side and server-side.\n+///\n+/// `with_api!(MySelf, my_self, my_macro)` expands to:\n+/// ```rust,ignore (pseudo-code)\n+/// my_macro! {\n+///     // ...\n+///     Literal {\n+///         // ...\n+///         fn character(ch: char) -> MySelf::Literal;\n+///         // ...\n+///         fn span(my_self: &MySelf::Literal) -> MySelf::Span;\n+///         fn set_span(my_self: &mut MySelf::Literal, span: MySelf::Span);\n+///     },\n+///     // ...\n+/// }\n+/// ```\n+///\n+/// The first two arguments serve to customize the arguments names\n+/// and argument/return types, to enable several different usecases:\n+///\n+/// If `my_self` is just `self`, then each `fn` signature can be used\n+/// as-is for a method. If it's anything else (`self_` in practice),\n+/// then the signatures don't have a special `self` argument, and\n+/// can, therefore, have a different one introduced.\n+///\n+/// If `MySelf` is just `Self`, then the types are only valid inside\n+/// a trait or a trait impl, where the trait has associated types\n+/// for each of the API types. If non-associated types are desired,\n+/// a module name (`self` in practice) can be used instead of `Self`.\n+macro_rules! with_api {\n+    ($S:ident, $self:ident, $m:ident) => {\n+        $m! {\n+            TokenStream {\n+                fn drop($self: $S::TokenStream);\n+                fn clone($self: &$S::TokenStream) -> $S::TokenStream;\n+                fn new() -> $S::TokenStream;\n+                fn is_empty($self: &$S::TokenStream) -> bool;\n+                fn from_str(src: &str) -> $S::TokenStream;\n+                fn to_string($self: &$S::TokenStream) -> String;\n+                fn from_token_tree(\n+                    tree: TokenTree<$S::Group, $S::Punct, $S::Ident, $S::Literal>,\n+                ) -> $S::TokenStream;\n+                fn into_iter($self: $S::TokenStream) -> $S::TokenStreamIter;\n+            },\n+            TokenStreamBuilder {\n+                fn drop($self: $S::TokenStreamBuilder);\n+                fn new() -> $S::TokenStreamBuilder;\n+                fn push($self: &mut $S::TokenStreamBuilder, stream: $S::TokenStream);\n+                fn build($self: $S::TokenStreamBuilder) -> $S::TokenStream;\n+            },\n+            TokenStreamIter {\n+                fn drop($self: $S::TokenStreamIter);\n+                fn clone($self: &$S::TokenStreamIter) -> $S::TokenStreamIter;\n+                fn next(\n+                    $self: &mut $S::TokenStreamIter,\n+                ) -> Option<TokenTree<$S::Group, $S::Punct, $S::Ident, $S::Literal>>;\n+            },\n+            Group {\n+                fn drop($self: $S::Group);\n+                fn clone($self: &$S::Group) -> $S::Group;\n+                fn new(delimiter: Delimiter, stream: $S::TokenStream) -> $S::Group;\n+                fn delimiter($self: &$S::Group) -> Delimiter;\n+                fn stream($self: &$S::Group) -> $S::TokenStream;\n+                fn span($self: &$S::Group) -> $S::Span;\n+                fn span_open($self: &$S::Group) -> $S::Span;\n+                fn span_close($self: &$S::Group) -> $S::Span;\n+                fn set_span($self: &mut $S::Group, span: $S::Span);\n+            },\n+            Punct {\n+                fn new(ch: char, spacing: Spacing) -> $S::Punct;\n+                fn as_char($self: $S::Punct) -> char;\n+                fn spacing($self: $S::Punct) -> Spacing;\n+                fn span($self: $S::Punct) -> $S::Span;\n+                fn with_span($self: $S::Punct, span: $S::Span) -> $S::Punct;\n+            },\n+            Ident {\n+                fn new(string: &str, span: $S::Span, is_raw: bool) -> $S::Ident;\n+                fn span($self: $S::Ident) -> $S::Span;\n+                fn with_span($self: $S::Ident, span: $S::Span) -> $S::Ident;\n+            },\n+            Literal {\n+                fn drop($self: $S::Literal);\n+                fn clone($self: &$S::Literal) -> $S::Literal;\n+                // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n+                fn debug($self: &$S::Literal) -> String;\n+                fn integer(n: &str) -> $S::Literal;\n+                fn typed_integer(n: &str, kind: &str) -> $S::Literal;\n+                fn float(n: &str) -> $S::Literal;\n+                fn f32(n: &str) -> $S::Literal;\n+                fn f64(n: &str) -> $S::Literal;\n+                fn string(string: &str) -> $S::Literal;\n+                fn character(ch: char) -> $S::Literal;\n+                fn byte_string(bytes: &[u8]) -> $S::Literal;\n+                fn span($self: &$S::Literal) -> $S::Span;\n+                fn set_span($self: &mut $S::Literal, span: $S::Span);\n+                fn subspan(\n+                    $self: &$S::Literal,\n+                    start: Bound<usize>,\n+                    end: Bound<usize>,\n+                ) -> Option<$S::Span>;\n+            },\n+            SourceFile {\n+                fn drop($self: $S::SourceFile);\n+                fn clone($self: &$S::SourceFile) -> $S::SourceFile;\n+                fn eq($self: &$S::SourceFile, other: &$S::SourceFile) -> bool;\n+                fn path($self: &$S::SourceFile) -> String;\n+                fn is_real($self: &$S::SourceFile) -> bool;\n+            },\n+            MultiSpan {\n+                fn drop($self: $S::MultiSpan);\n+                fn new() -> $S::MultiSpan;\n+                fn push($self: &mut $S::MultiSpan, span: $S::Span);\n+            },\n+            Diagnostic {\n+                fn drop($self: $S::Diagnostic);\n+                fn new(level: Level, msg: &str, span: $S::MultiSpan) -> $S::Diagnostic;\n+                fn sub(\n+                    $self: &mut $S::Diagnostic,\n+                    level: Level,\n+                    msg: &str,\n+                    span: $S::MultiSpan,\n+                );\n+                fn emit($self: $S::Diagnostic);\n+            },\n+            Span {\n+                fn debug($self: $S::Span) -> String;\n+                fn def_site() -> $S::Span;\n+                fn call_site() -> $S::Span;\n+                fn source_file($self: $S::Span) -> $S::SourceFile;\n+                fn parent($self: $S::Span) -> Option<$S::Span>;\n+                fn source($self: $S::Span) -> $S::Span;\n+                fn start($self: $S::Span) -> LineColumn;\n+                fn end($self: $S::Span) -> LineColumn;\n+                fn join($self: $S::Span, other: $S::Span) -> Option<$S::Span>;\n+                fn resolved_at($self: $S::Span, at: $S::Span) -> $S::Span;\n+            },\n+        }\n+    };\n+}\n+\n+// FIXME(eddyb) this calls `encode` for each argument, but in reverse,\n+// to avoid borrow conflicts from borrows started by `&mut` arguments.\n+macro_rules! reverse_encode {\n+    ($writer:ident;) => {};\n+    ($writer:ident; $first:ident $(, $rest:ident)*) => {\n+        reverse_encode!($writer; $($rest),*);\n+        $first.encode(&mut $writer, &mut ());\n+    }\n+}\n+\n+// FIXME(eddyb) this calls `decode` for each argument, but in reverse,\n+// to avoid borrow conflicts from borrows started by `&mut` arguments.\n+macro_rules! reverse_decode {\n+    ($reader:ident, $s:ident;) => {};\n+    ($reader:ident, $s:ident; $first:ident: $first_ty:ty $(, $rest:ident: $rest_ty:ty)*) => {\n+        reverse_decode!($reader, $s; $($rest: $rest_ty),*);\n+        let $first = <$first_ty>::decode(&mut $reader, $s);\n+    }\n+}\n+\n+#[allow(unsafe_code)]\n+mod buffer;\n+#[forbid(unsafe_code)]\n+pub mod client;\n+#[allow(unsafe_code)]\n+mod closure;\n+#[forbid(unsafe_code)]\n+mod handle;\n+#[macro_use]\n+#[forbid(unsafe_code)]\n+mod rpc;\n+#[allow(unsafe_code)]\n+mod scoped_cell;\n+#[forbid(unsafe_code)]\n+pub mod server;\n+\n+use self::buffer::Buffer;\n+pub use self::rpc::PanicMessage;\n+use self::rpc::{Decode, DecodeMut, Encode, Reader, Writer};\n+\n+/// An active connection between a server and a client.\n+/// The server creates the bridge (`Bridge::run_server` in `server.rs`),\n+/// then passes it to the client through the function pointer in the `run`\n+/// field of `client::Client`. The client holds its copy of the `Bridge`\n+/// in TLS during its execution (`Bridge::{enter, with}` in `client.rs`).\n+#[repr(C)]\n+pub struct Bridge<'a> {\n+    /// Reusable buffer (only `clear`-ed, never shrunk), primarily\n+    /// used for making requests, but also for passing input to client.\n+    cached_buffer: Buffer<u8>,\n+\n+    /// Server-side function that the client uses to make requests.\n+    dispatch: closure::Closure<'a, Buffer<u8>, Buffer<u8>>,\n+}\n+\n+impl<'a> !Sync for Bridge<'a> {}\n+impl<'a> !Send for Bridge<'a> {}\n+\n+#[forbid(unsafe_code)]\n+#[allow(non_camel_case_types)]\n+mod api_tags {\n+    use super::rpc::{DecodeMut, Encode, Reader, Writer};\n+\n+    macro_rules! declare_tags {\n+        ($($name:ident {\n+            $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)*) $(-> $ret_ty:ty)*;)*\n+        }),* $(,)*) => {\n+            $(\n+                pub(super) enum $name {\n+                    $($method),*\n+                }\n+                rpc_encode_decode!(enum $name { $($method),* });\n+            )*\n+\n+\n+            pub(super) enum Method {\n+                $($name($name)),*\n+            }\n+            rpc_encode_decode!(enum Method { $($name(m)),* });\n+        }\n+    }\n+    with_api!(self, self, declare_tags);\n+}\n+\n+/// Helper to wrap associated types to allow trait impl dispatch.\n+/// That is, normally a pair of impls for `T::Foo` and `T::Bar`\n+/// can overlap, but if the impls are, instead, on types like\n+/// `Marked<T::Foo, Foo>` and `Marked<T::Bar, Bar>`, they can't.\n+trait Mark {\n+    type Unmarked;\n+    fn mark(unmarked: Self::Unmarked) -> Self;\n+}\n+\n+/// Unwrap types wrapped by `Mark::mark` (see `Mark` for details).\n+trait Unmark {\n+    type Unmarked;\n+    fn unmark(self) -> Self::Unmarked;\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n+struct Marked<T, M> {\n+    value: T,\n+    _marker: marker::PhantomData<M>,\n+}\n+\n+impl<T, M> Mark for Marked<T, M> {\n+    type Unmarked = T;\n+    fn mark(unmarked: Self::Unmarked) -> Self {\n+        Marked {\n+            value: unmarked,\n+            _marker: marker::PhantomData,\n+        }\n+    }\n+}\n+impl<T, M> Unmark for Marked<T, M> {\n+    type Unmarked = T;\n+    fn unmark(self) -> Self::Unmarked {\n+        self.value\n+    }\n+}\n+impl<T, M> Unmark for &'a Marked<T, M> {\n+    type Unmarked = &'a T;\n+    fn unmark(self) -> Self::Unmarked {\n+        &self.value\n+    }\n+}\n+impl<T, M> Unmark for &'a mut Marked<T, M> {\n+    type Unmarked = &'a mut T;\n+    fn unmark(self) -> Self::Unmarked {\n+        &mut self.value\n+    }\n+}\n+\n+impl<T: Mark> Mark for Option<T> {\n+    type Unmarked = Option<T::Unmarked>;\n+    fn mark(unmarked: Self::Unmarked) -> Self {\n+        unmarked.map(T::mark)\n+    }\n+}\n+impl<T: Unmark> Unmark for Option<T> {\n+    type Unmarked = Option<T::Unmarked>;\n+    fn unmark(self) -> Self::Unmarked {\n+        self.map(T::unmark)\n+    }\n+}\n+\n+macro_rules! mark_noop {\n+    ($($ty:ty),* $(,)*) => {\n+        $(\n+            impl Mark for $ty {\n+                type Unmarked = Self;\n+                fn mark(unmarked: Self::Unmarked) -> Self {\n+                    unmarked\n+                }\n+            }\n+            impl Unmark for $ty {\n+                type Unmarked = Self;\n+                fn unmark(self) -> Self::Unmarked {\n+                    self\n+                }\n+            }\n+        )*\n+    }\n+}\n+mark_noop! {\n+    (),\n+    bool,\n+    char,\n+    &'a [u8],\n+    &'a str,\n+    String,\n+    Delimiter,\n+    Level,\n+    LineColumn,\n+    Spacing,\n+    Bound<usize>,\n+}\n+\n+rpc_encode_decode!(\n+    enum Delimiter {\n+        Parenthesis,\n+        Brace,\n+        Bracket,\n+        None,\n+    }\n+);\n+rpc_encode_decode!(\n+    enum Level {\n+        Error,\n+        Warning,\n+        Note,\n+        Help,\n+    }\n+);\n+rpc_encode_decode!(struct LineColumn { line, column });\n+rpc_encode_decode!(\n+    enum Spacing {\n+        Alone,\n+        Joint,\n+    }\n+);\n+\n+#[derive(Clone)]\n+pub enum TokenTree<G, P, I, L> {\n+    Group(G),\n+    Punct(P),\n+    Ident(I),\n+    Literal(L),\n+}\n+\n+impl<G: Mark, P: Mark, I: Mark, L: Mark> Mark for TokenTree<G, P, I, L> {\n+    type Unmarked = TokenTree<G::Unmarked, P::Unmarked, I::Unmarked, L::Unmarked>;\n+    fn mark(unmarked: Self::Unmarked) -> Self {\n+        match unmarked {\n+            TokenTree::Group(tt) => TokenTree::Group(G::mark(tt)),\n+            TokenTree::Punct(tt) => TokenTree::Punct(P::mark(tt)),\n+            TokenTree::Ident(tt) => TokenTree::Ident(I::mark(tt)),\n+            TokenTree::Literal(tt) => TokenTree::Literal(L::mark(tt)),\n+        }\n+    }\n+}\n+impl<G: Unmark, P: Unmark, I: Unmark, L: Unmark> Unmark for TokenTree<G, P, I, L> {\n+    type Unmarked = TokenTree<G::Unmarked, P::Unmarked, I::Unmarked, L::Unmarked>;\n+    fn unmark(self) -> Self::Unmarked {\n+        match self {\n+            TokenTree::Group(tt) => TokenTree::Group(tt.unmark()),\n+            TokenTree::Punct(tt) => TokenTree::Punct(tt.unmark()),\n+            TokenTree::Ident(tt) => TokenTree::Ident(tt.unmark()),\n+            TokenTree::Literal(tt) => TokenTree::Literal(tt.unmark()),\n+        }\n+    }\n+}\n+\n+rpc_encode_decode!(\n+    enum TokenTree<G, P, I, L> {\n+        Group(tt),\n+        Punct(tt),\n+        Ident(tt),\n+        Literal(tt),\n+    }\n+);"}, {"sha": "fafc3d0074065b153aaf9ee2d613bc85211d5ef5", "filename": "src/libproc_macro/bridge/rpc.rs", "status": "added", "additions": 319, "deletions": 0, "changes": 319, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Frpc.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -0,0 +1,319 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Serialization for client<->server communication.\n+\n+use std::any::Any;\n+use std::char;\n+use std::io::Write;\n+use std::num::NonZeroU32;\n+use std::ops::Bound;\n+use std::str;\n+\n+pub(super) type Writer = super::buffer::Buffer<u8>;\n+\n+pub(super) trait Encode<S>: Sized {\n+    fn encode(self, w: &mut Writer, s: &mut S);\n+}\n+\n+pub(super) type Reader<'a> = &'a [u8];\n+\n+pub(super) trait Decode<'a, 's, S>: Sized {\n+    fn decode(r: &mut Reader<'a>, s: &'s S) -> Self;\n+}\n+\n+pub(super) trait DecodeMut<'a, 's, S>: Sized {\n+    fn decode(r: &mut Reader<'a>, s: &'s mut S) -> Self;\n+}\n+\n+macro_rules! rpc_encode_decode {\n+    (uleb128 $ty:ty) => {\n+        impl<S> Encode<S> for $ty {\n+            fn encode(mut self, w: &mut Writer, s: &mut S) {\n+                let mut byte = 0x80;\n+                while byte & 0x80 != 0 {\n+                    byte = (self & 0x7f) as u8;\n+                    self >>= 7;\n+                    if self != 0 {\n+                        byte |= 0x80;\n+                    }\n+                    byte.encode(w, s);\n+                }\n+            }\n+        }\n+\n+        impl<S> DecodeMut<'_, '_, S> for $ty {\n+            fn decode(r: &mut Reader, s: &mut S) -> Self {\n+                let mut byte = 0x80;\n+                let mut v = 0;\n+                let mut shift = 0;\n+                while byte & 0x80 != 0 {\n+                    byte = u8::decode(r, s);\n+                    v |= ((byte & 0x7f) as Self) << shift;\n+                    shift += 7;\n+                }\n+                v\n+            }\n+        }\n+    };\n+    (struct $name:ident { $($field:ident),* $(,)* }) => {\n+        impl<S> Encode<S> for $name {\n+            fn encode(self, w: &mut Writer, s: &mut S) {\n+                $(self.$field.encode(w, s);)*\n+            }\n+        }\n+\n+        impl<S> DecodeMut<'_, '_, S> for $name {\n+            fn decode(r: &mut Reader, s: &mut S) -> Self {\n+                $name {\n+                    $($field: DecodeMut::decode(r, s)),*\n+                }\n+            }\n+        }\n+    };\n+    (enum $name:ident $(<$($T:ident),+>)* { $($variant:ident $(($field:ident))*),* $(,)* }) => {\n+        impl<S, $($($T: Encode<S>),+)*> Encode<S> for $name $(<$($T),+>)* {\n+            fn encode(self, w: &mut Writer, s: &mut S) {\n+                // HACK(eddyb) `Tag` enum duplicated between the\n+                // two impls as there's no other place to stash it.\n+                #[repr(u8)] enum Tag { $($variant),* }\n+                #[allow(non_upper_case_globals)]\n+                impl Tag { $(const $variant: u8 = Tag::$variant as u8;)* }\n+\n+                match self {\n+                    $($name::$variant $(($field))* => {\n+                        <Tag>::$variant.encode(w, s);\n+                        $($field.encode(w, s);)*\n+                    })*\n+                }\n+            }\n+        }\n+\n+        impl<S, $($($T: for<'s> DecodeMut<'a, 's, S>),+)*> DecodeMut<'a, '_, S>\n+            for $name $(<$($T),+>)*\n+        {\n+            fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {\n+                // HACK(eddyb) `Tag` enum duplicated between the\n+                // two impls as there's no other place to stash it.\n+                #[repr(u8)] enum Tag { $($variant),* }\n+                #[allow(non_upper_case_globals)]\n+                impl Tag { $(const $variant: u8 = Tag::$variant as u8;)* }\n+\n+                match u8::decode(r, s) {\n+                    $(<Tag>::$variant => {\n+                        $(let $field = DecodeMut::decode(r, s);)*\n+                        $name::$variant $(($field))*\n+                    })*\n+                    _ => unreachable!(),\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+impl<S> Encode<S> for () {\n+    fn encode(self, _: &mut Writer, _: &mut S) {}\n+}\n+\n+impl<S> DecodeMut<'_, '_, S> for () {\n+    fn decode(_: &mut Reader, _: &mut S) -> Self {}\n+}\n+\n+impl<S> Encode<S> for u8 {\n+    fn encode(self, w: &mut Writer, _: &mut S) {\n+        w.write_all(&[self]).unwrap();\n+    }\n+}\n+\n+impl<S> DecodeMut<'_, '_, S> for u8 {\n+    fn decode(r: &mut Reader, _: &mut S) -> Self {\n+        let x = r[0];\n+        *r = &r[1..];\n+        x\n+    }\n+}\n+\n+rpc_encode_decode!(uleb128 u32);\n+rpc_encode_decode!(uleb128 usize);\n+\n+impl<S> Encode<S> for bool {\n+    fn encode(self, w: &mut Writer, s: &mut S) {\n+        (self as u8).encode(w, s);\n+    }\n+}\n+\n+impl<S> DecodeMut<'_, '_, S> for bool {\n+    fn decode(r: &mut Reader, s: &mut S) -> Self {\n+        match u8::decode(r, s) {\n+            0 => false,\n+            1 => true,\n+            _ => unreachable!(),\n+        }\n+    }\n+}\n+\n+impl<S> Encode<S> for char {\n+    fn encode(self, w: &mut Writer, s: &mut S) {\n+        (self as u32).encode(w, s);\n+    }\n+}\n+\n+impl<S> DecodeMut<'_, '_, S> for char {\n+    fn decode(r: &mut Reader, s: &mut S) -> Self {\n+        char::from_u32(u32::decode(r, s)).unwrap()\n+    }\n+}\n+\n+impl<S> Encode<S> for NonZeroU32 {\n+    fn encode(self, w: &mut Writer, s: &mut S) {\n+        self.get().encode(w, s);\n+    }\n+}\n+\n+impl<S> DecodeMut<'_, '_, S> for NonZeroU32 {\n+    fn decode(r: &mut Reader, s: &mut S) -> Self {\n+        Self::new(u32::decode(r, s)).unwrap()\n+    }\n+}\n+\n+impl<S, A: Encode<S>, B: Encode<S>> Encode<S> for (A, B) {\n+    fn encode(self, w: &mut Writer, s: &mut S) {\n+        self.0.encode(w, s);\n+        self.1.encode(w, s);\n+    }\n+}\n+\n+impl<S, A: for<'s> DecodeMut<'a, 's, S>, B: for<'s> DecodeMut<'a, 's, S>> DecodeMut<'a, '_, S>\n+    for (A, B)\n+{\n+    fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {\n+        (DecodeMut::decode(r, s), DecodeMut::decode(r, s))\n+    }\n+}\n+\n+rpc_encode_decode!(\n+    enum Bound<T> {\n+        Included(x),\n+        Excluded(x),\n+        Unbounded,\n+    }\n+);\n+\n+rpc_encode_decode!(\n+    enum Option<T> {\n+        None,\n+        Some(x),\n+    }\n+);\n+\n+rpc_encode_decode!(\n+    enum Result<T, E> {\n+        Ok(x),\n+        Err(e),\n+    }\n+);\n+\n+impl<S> Encode<S> for &[u8] {\n+    fn encode(self, w: &mut Writer, s: &mut S) {\n+        self.len().encode(w, s);\n+        w.write_all(self).unwrap();\n+    }\n+}\n+\n+impl<S> DecodeMut<'a, '_, S> for &'a [u8] {\n+    fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {\n+        let len = usize::decode(r, s);\n+        let xs = &r[..len];\n+        *r = &r[len..];\n+        xs\n+    }\n+}\n+\n+impl<S> Encode<S> for &str {\n+    fn encode(self, w: &mut Writer, s: &mut S) {\n+        self.as_bytes().encode(w, s);\n+    }\n+}\n+\n+impl<S> DecodeMut<'a, '_, S> for &'a str {\n+    fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {\n+        str::from_utf8(<&[u8]>::decode(r, s)).unwrap()\n+    }\n+}\n+\n+impl<S> Encode<S> for String {\n+    fn encode(self, w: &mut Writer, s: &mut S) {\n+        self[..].encode(w, s);\n+    }\n+}\n+\n+impl<S> DecodeMut<'_, '_, S> for String {\n+    fn decode(r: &mut Reader, s: &mut S) -> Self {\n+        <&str>::decode(r, s).to_string()\n+    }\n+}\n+\n+/// Simplied version of panic payloads, ignoring\n+/// types other than `&'static str` and `String`.\n+pub enum PanicMessage {\n+    StaticStr(&'static str),\n+    String(String),\n+    Unknown,\n+}\n+\n+impl From<Box<dyn Any + Send>> for PanicMessage {\n+    fn from(payload: Box<dyn Any + Send + 'static>) -> Self {\n+        if let Some(s) = payload.downcast_ref::<&'static str>() {\n+            return PanicMessage::StaticStr(s);\n+        }\n+        if let Ok(s) = payload.downcast::<String>() {\n+            return PanicMessage::String(*s);\n+        }\n+        PanicMessage::Unknown\n+    }\n+}\n+\n+impl Into<Box<dyn Any + Send>> for PanicMessage {\n+    fn into(self) -> Box<dyn Any + Send> {\n+        match self {\n+            PanicMessage::StaticStr(s) => Box::new(s),\n+            PanicMessage::String(s) => Box::new(s),\n+            PanicMessage::Unknown => {\n+                struct UnknownPanicMessage;\n+                Box::new(UnknownPanicMessage)\n+            }\n+        }\n+    }\n+}\n+\n+impl PanicMessage {\n+    pub fn as_str(&self) -> Option<&str> {\n+        match self {\n+            PanicMessage::StaticStr(s) => Some(s),\n+            PanicMessage::String(s) => Some(s),\n+            PanicMessage::Unknown => None,\n+        }\n+    }\n+}\n+\n+impl<S> Encode<S> for PanicMessage {\n+    fn encode(self, w: &mut Writer, s: &mut S) {\n+        self.as_str().encode(w, s);\n+    }\n+}\n+\n+impl<S> DecodeMut<'_, '_, S> for PanicMessage {\n+    fn decode(r: &mut Reader, s: &mut S) -> Self {\n+        match Option::<String>::decode(r, s) {\n+            Some(s) => PanicMessage::String(s),\n+            None => PanicMessage::Unknown,\n+        }\n+    }\n+}"}, {"sha": "51d1fece79b92a4926e741872c55479091aae486", "filename": "src/libproc_macro/bridge/scoped_cell.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fbridge%2Fscoped_cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fbridge%2Fscoped_cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fscoped_cell.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -0,0 +1,90 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! `Cell` variant for (scoped) existential lifetimes.\n+\n+use std::cell::Cell;\n+use std::mem;\n+use std::ops::{Deref, DerefMut};\n+\n+/// Type lambda application, with a lifetime.\n+pub trait ApplyL<'a> {\n+    type Out;\n+}\n+\n+/// Type lambda taking a lifetime, i.e. `Lifetime -> Type`.\n+pub trait LambdaL: for<'a> ApplyL<'a> {}\n+\n+impl<T: for<'a> ApplyL<'a>> LambdaL for T {}\n+\n+// HACK(eddyb) work around projection limitations with a newtype\n+// FIXME(#52812) replace with `&'a mut <T as ApplyL<'b>>::Out`\n+pub struct RefMutL<'a, 'b, T: LambdaL>(&'a mut <T as ApplyL<'b>>::Out);\n+\n+impl<'a, 'b, T: LambdaL> Deref for RefMutL<'a, 'b, T> {\n+    type Target = <T as ApplyL<'b>>::Out;\n+    fn deref(&self) -> &Self::Target {\n+        self.0\n+    }\n+}\n+\n+impl<'a, 'b, T: LambdaL> DerefMut for RefMutL<'a, 'b, T> {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        self.0\n+    }\n+}\n+\n+pub struct ScopedCell<T: LambdaL>(Cell<<T as ApplyL<'static>>::Out>);\n+\n+impl<T: LambdaL> ScopedCell<T> {\n+    pub const fn new(value: <T as ApplyL<'static>>::Out) -> Self {\n+        ScopedCell(Cell::new(value))\n+    }\n+\n+    /// Set the value in `self` to `replacement` while\n+    /// running `f`, which gets the old value, mutably.\n+    /// The old value will be restored after `f` exits, even\n+    /// by panic, including modifications made to it by `f`.\n+    pub fn replace<'a, R>(\n+        &self,\n+        replacement: <T as ApplyL<'a>>::Out,\n+        f: impl for<'b, 'c> FnOnce(RefMutL<'b, 'c, T>) -> R,\n+    ) -> R {\n+        /// Wrapper that ensures that the cell always gets filled\n+        /// (with the original state, optionally changed by `f`),\n+        /// even if `f` had panicked.\n+        struct PutBackOnDrop<'a, T: LambdaL> {\n+            cell: &'a ScopedCell<T>,\n+            value: Option<<T as ApplyL<'static>>::Out>,\n+        }\n+\n+        impl<'a, T: LambdaL> Drop for PutBackOnDrop<'a, T> {\n+            fn drop(&mut self) {\n+                self.cell.0.set(self.value.take().unwrap());\n+            }\n+        }\n+\n+        let mut put_back_on_drop = PutBackOnDrop {\n+            cell: self,\n+            value: Some(self.0.replace(unsafe {\n+                let erased = mem::transmute_copy(&replacement);\n+                mem::forget(replacement);\n+                erased\n+            })),\n+        };\n+\n+        f(RefMutL(put_back_on_drop.value.as_mut().unwrap()))\n+    }\n+\n+    /// Set the value in `self` to `value` while running `f`.\n+    pub fn set<'a, R>(&self, value: <T as ApplyL<'a>>::Out, f: impl FnOnce() -> R) -> R {\n+        self.replace(value, |_| f())\n+    }\n+}"}, {"sha": "f500b17d1caf316f01105fff1d59d2d9cb96bf07", "filename": "src/libproc_macro/bridge/server.rs", "status": "added", "additions": 352, "deletions": 0, "changes": 352, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fbridge%2Fserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fbridge%2Fserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fserver.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -0,0 +1,352 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Server-side traits.\n+\n+use super::*;\n+\n+// FIXME(eddyb) generate the definition of `HandleStore` in `server.rs`.\n+use super::client::HandleStore;\n+\n+/// Declare an associated item of one of the traits below, optionally\n+/// adjusting it (i.e. adding bounds to types and default bodies to methods).\n+macro_rules! associated_item {\n+    (type TokenStream) =>\n+        (type TokenStream: 'static + Clone;);\n+    (type TokenStreamBuilder) =>\n+        (type TokenStreamBuilder: 'static;);\n+    (type TokenStreamIter) =>\n+        (type TokenStreamIter: 'static + Clone;);\n+    (type Group) =>\n+        (type Group: 'static + Clone;);\n+    (type Punct) =>\n+        (type Punct: 'static + Copy + Eq + Hash;);\n+    (type Ident) =>\n+        (type Ident: 'static + Copy + Eq + Hash;);\n+    (type Literal) =>\n+        (type Literal: 'static + Clone;);\n+    (type SourceFile) =>\n+        (type SourceFile: 'static + Clone;);\n+    (type MultiSpan) =>\n+        (type MultiSpan: 'static;);\n+    (type Diagnostic) =>\n+        (type Diagnostic: 'static;);\n+    (type Span) =>\n+        (type Span: 'static + Copy + Eq + Hash;);\n+    (fn drop(&mut self, $arg:ident: $arg_ty:ty)) =>\n+        (fn drop(&mut self, $arg: $arg_ty) { mem::drop($arg) });\n+    (fn clone(&mut self, $arg:ident: $arg_ty:ty) -> $ret_ty:ty) =>\n+        (fn clone(&mut self, $arg: $arg_ty) -> $ret_ty { $arg.clone() });\n+    ($($item:tt)*) => ($($item)*;)\n+}\n+\n+macro_rules! declare_server_traits {\n+    ($($name:ident {\n+        $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)*) $(-> $ret_ty:ty)*;)*\n+    }),* $(,)*) => {\n+        pub trait Types {\n+            $(associated_item!(type $name);)*\n+        }\n+\n+        $(pub trait $name: Types {\n+            $(associated_item!(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)*);)*\n+        })*\n+\n+        pub trait Server: Types $(+ $name)* {}\n+        impl<S: Types $(+ $name)*> Server for S {}\n+    }\n+}\n+with_api!(Self, self_, declare_server_traits);\n+\n+pub(super) struct MarkedTypes<S: Types>(S);\n+\n+macro_rules! define_mark_types_impls {\n+    ($($name:ident {\n+        $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)*) $(-> $ret_ty:ty)*;)*\n+    }),* $(,)*) => {\n+        impl<S: Types> Types for MarkedTypes<S> {\n+            $(type $name = Marked<S::$name, client::$name>;)*\n+        }\n+\n+        $(impl<S: $name> $name for MarkedTypes<S> {\n+            $(fn $method(&mut self, $($arg: $arg_ty),*) $(-> $ret_ty)* {\n+                <_>::mark($name::$method(&mut self.0, $($arg.unmark()),*))\n+            })*\n+        })*\n+    }\n+}\n+with_api!(Self, self_, define_mark_types_impls);\n+\n+struct Dispatcher<S: Types> {\n+    handle_store: HandleStore<S>,\n+    server: S,\n+}\n+\n+macro_rules! define_dispatcher_impl {\n+    ($($name:ident {\n+        $(fn $method:ident($($arg:ident: $arg_ty:ty),* $(,)*) $(-> $ret_ty:ty)*;)*\n+    }),* $(,)*) => {\n+        // FIXME(eddyb) `pub` only for `ExecutionStrategy` below.\n+        pub trait DispatcherTrait {\n+            // HACK(eddyb) these are here to allow `Self::$name` to work below.\n+            $(type $name;)*\n+            fn dispatch(&mut self, b: Buffer<u8>) -> Buffer<u8>;\n+        }\n+\n+        impl<S: Server> DispatcherTrait for Dispatcher<MarkedTypes<S>> {\n+            $(type $name = <MarkedTypes<S> as Types>::$name;)*\n+            fn dispatch(&mut self, mut b: Buffer<u8>) -> Buffer<u8> {\n+                let Dispatcher { handle_store, server } = self;\n+\n+                let mut reader = &b[..];\n+                match api_tags::Method::decode(&mut reader, &mut ()) {\n+                    $(api_tags::Method::$name(m) => match m {\n+                        $(api_tags::$name::$method => {\n+                            let mut call_method = || {\n+                                reverse_decode!(reader, handle_store; $($arg: $arg_ty),*);\n+                                $name::$method(server, $($arg),*)\n+                            };\n+                            // HACK(eddyb) don't use `panic::catch_unwind` in a panic.\n+                            // If client and server happen to use the same `libstd`,\n+                            // `catch_unwind` asserts that the panic counter was 0,\n+                            // even when the closure passed to it didn't panic.\n+                            let r = if thread::panicking() {\n+                                Ok(call_method())\n+                            } else {\n+                                panic::catch_unwind(panic::AssertUnwindSafe(call_method))\n+                                    .map_err(PanicMessage::from)\n+                            };\n+\n+                            b.clear();\n+                            r.encode(&mut b, handle_store);\n+                        })*\n+                    }),*\n+                }\n+                b\n+            }\n+        }\n+    }\n+}\n+with_api!(Self, self_, define_dispatcher_impl);\n+\n+pub trait ExecutionStrategy {\n+    fn run_bridge_and_client<D: Copy + Send + 'static>(\n+        &self,\n+        dispatcher: &mut impl DispatcherTrait,\n+        input: Buffer<u8>,\n+        run_client: extern \"C\" fn(Bridge, D) -> Buffer<u8>,\n+        client_data: D,\n+    ) -> Buffer<u8>;\n+}\n+\n+pub struct SameThread;\n+\n+impl ExecutionStrategy for SameThread {\n+    fn run_bridge_and_client<D: Copy + Send + 'static>(\n+        &self,\n+        dispatcher: &mut impl DispatcherTrait,\n+        input: Buffer<u8>,\n+        run_client: extern \"C\" fn(Bridge, D) -> Buffer<u8>,\n+        client_data: D,\n+    ) -> Buffer<u8> {\n+        let mut dispatch = |b| dispatcher.dispatch(b);\n+\n+        run_client(\n+            Bridge {\n+                cached_buffer: input,\n+                dispatch: (&mut dispatch).into(),\n+            },\n+            client_data,\n+        )\n+    }\n+}\n+\n+// NOTE(eddyb) Two implementations are provided, the second one is a bit\n+// faster but neither is anywhere near as fast as same-thread execution.\n+\n+pub struct CrossThread1;\n+\n+impl ExecutionStrategy for CrossThread1 {\n+    fn run_bridge_and_client<D: Copy + Send + 'static>(\n+        &self,\n+        dispatcher: &mut impl DispatcherTrait,\n+        input: Buffer<u8>,\n+        run_client: extern \"C\" fn(Bridge, D) -> Buffer<u8>,\n+        client_data: D,\n+    ) -> Buffer<u8> {\n+        use std::sync::mpsc::channel;\n+\n+        let (req_tx, req_rx) = channel();\n+        let (res_tx, res_rx) = channel();\n+\n+        let join_handle = thread::spawn(move || {\n+            let mut dispatch = |b| {\n+                req_tx.send(b).unwrap();\n+                res_rx.recv().unwrap()\n+            };\n+\n+            run_client(\n+                Bridge {\n+                    cached_buffer: input,\n+                    dispatch: (&mut dispatch).into(),\n+                },\n+                client_data,\n+            )\n+        });\n+\n+        for b in req_rx {\n+            res_tx.send(dispatcher.dispatch(b)).unwrap();\n+        }\n+\n+        join_handle.join().unwrap()\n+    }\n+}\n+\n+pub struct CrossThread2;\n+\n+impl ExecutionStrategy for CrossThread2 {\n+    fn run_bridge_and_client<D: Copy + Send + 'static>(\n+        &self,\n+        dispatcher: &mut impl DispatcherTrait,\n+        input: Buffer<u8>,\n+        run_client: extern \"C\" fn(Bridge, D) -> Buffer<u8>,\n+        client_data: D,\n+    ) -> Buffer<u8> {\n+        use std::sync::{Arc, Mutex};\n+\n+        enum State<T> {\n+            Req(T),\n+            Res(T),\n+        }\n+\n+        let mut state = Arc::new(Mutex::new(State::Res(Buffer::new())));\n+\n+        let server_thread = thread::current();\n+        let state2 = state.clone();\n+        let join_handle = thread::spawn(move || {\n+            let mut dispatch = |b| {\n+                *state2.lock().unwrap() = State::Req(b);\n+                server_thread.unpark();\n+                loop {\n+                    thread::park();\n+                    if let State::Res(b) = &mut *state2.lock().unwrap() {\n+                        break b.take();\n+                    }\n+                }\n+            };\n+\n+            let r = run_client(\n+                Bridge {\n+                    cached_buffer: input,\n+                    dispatch: (&mut dispatch).into(),\n+                },\n+                client_data,\n+            );\n+\n+            // Wake up the server so it can exit the dispatch loop.\n+            drop(state2);\n+            server_thread.unpark();\n+\n+            r\n+        });\n+\n+        // Check whether `state2` was dropped, to know when to stop.\n+        while Arc::get_mut(&mut state).is_none() {\n+            thread::park();\n+            let mut b = match &mut *state.lock().unwrap() {\n+                State::Req(b) => b.take(),\n+                _ => continue,\n+            };\n+            b = dispatcher.dispatch(b.take());\n+            *state.lock().unwrap() = State::Res(b);\n+            join_handle.thread().unpark();\n+        }\n+\n+        join_handle.join().unwrap()\n+    }\n+}\n+\n+fn run_server<\n+    S: Server,\n+    I: Encode<HandleStore<MarkedTypes<S>>>,\n+    O: for<'a, 's> DecodeMut<'a, 's, HandleStore<MarkedTypes<S>>>,\n+    D: Copy + Send + 'static,\n+>(\n+    strategy: &impl ExecutionStrategy,\n+    handle_counters: &'static client::HandleCounters,\n+    server: S,\n+    input: I,\n+    run_client: extern \"C\" fn(Bridge, D) -> Buffer<u8>,\n+    client_data: D,\n+) -> Result<O, PanicMessage> {\n+    let mut dispatcher = Dispatcher {\n+        handle_store: HandleStore::new(handle_counters),\n+        server: MarkedTypes(server),\n+    };\n+\n+    let mut b = Buffer::new();\n+    input.encode(&mut b, &mut dispatcher.handle_store);\n+\n+    b = strategy.run_bridge_and_client(&mut dispatcher, b, run_client, client_data);\n+\n+    Result::decode(&mut &b[..], &mut dispatcher.handle_store)\n+}\n+\n+impl client::Client<fn(::TokenStream) -> ::TokenStream> {\n+    pub fn run<S: Server>(\n+        &self,\n+        strategy: &impl ExecutionStrategy,\n+        server: S,\n+        input: S::TokenStream,\n+    ) -> Result<S::TokenStream, PanicMessage> {\n+        let client::Client {\n+            get_handle_counters,\n+            run,\n+            f,\n+        } = *self;\n+        run_server(\n+            strategy,\n+            get_handle_counters(),\n+            server,\n+            <MarkedTypes<S> as Types>::TokenStream::mark(input),\n+            run,\n+            f,\n+        )\n+        .map(<MarkedTypes<S> as Types>::TokenStream::unmark)\n+    }\n+}\n+\n+impl client::Client<fn(::TokenStream, ::TokenStream) -> ::TokenStream> {\n+    pub fn run<S: Server>(\n+        &self,\n+        strategy: &impl ExecutionStrategy,\n+        server: S,\n+        input: S::TokenStream,\n+        input2: S::TokenStream,\n+    ) -> Result<S::TokenStream, PanicMessage> {\n+        let client::Client {\n+            get_handle_counters,\n+            run,\n+            f,\n+        } = *self;\n+        run_server(\n+            strategy,\n+            get_handle_counters(),\n+            server,\n+            (\n+                <MarkedTypes<S> as Types>::TokenStream::mark(input),\n+                <MarkedTypes<S> as Types>::TokenStream::mark(input2),\n+            ),\n+            run,\n+            f,\n+        )\n+        .map(<MarkedTypes<S> as Types>::TokenStream::unmark)\n+    }\n+}"}, {"sha": "4234f0bcd21c1708b031e1483c1375cb4ebbd445", "filename": "src/libproc_macro/diagnostic.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fdiagnostic.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -10,8 +10,6 @@\n \n use Span;\n \n-use rustc_errors as errors;\n-\n /// An enum representing a diagnostic level.\n #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n #[derive(Copy, Clone, Debug)]\n@@ -180,22 +178,22 @@ impl Diagnostic {\n     /// Emit the diagnostic.\n     #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n     pub fn emit(self) {\n-        fn to_internal(spans: Vec<Span>) -> ::syntax_pos::MultiSpan {\n-            let spans: Vec<_> = spans.into_iter().map(|s| s.0).collect();\n-            ::syntax_pos::MultiSpan::from_spans(spans)\n+        fn to_internal(spans: Vec<Span>) -> ::bridge::client::MultiSpan {\n+            let mut multi_span = ::bridge::client::MultiSpan::new();\n+            for span in spans {\n+                multi_span.push(span.0);\n+            }\n+            multi_span\n         }\n \n-        let level = self.level.to_internal();\n-        let mut diag = errors::Diagnostic::new(level, &*self.message);\n-        diag.set_span(to_internal(self.spans));\n-\n-        for child in self.children {\n-            let level = child.level.to_internal();\n-            diag.sub(level, &*child.message, to_internal(child.spans), None);\n+        let mut diag = ::bridge::client::Diagnostic::new(\n+            self.level,\n+            &self.message[..],\n+            to_internal(self.spans),\n+        );\n+        for c in self.children {\n+            diag.sub(c.level, &c.message[..], to_internal(c.spans));\n         }\n-\n-        ::__internal::with_sess(move |sess, _| {\n-            errors::DiagnosticBuilder::new_diagnostic(&sess.span_diagnostic, diag).emit();\n-        });\n+        diag.emit();\n     }\n }"}, {"sha": "32c81302931f36865b659062c0ce9bb4c860a86b", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 154, "deletions": 385, "changes": 539, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -28,40 +28,30 @@\n        test(attr(allow(dead_code, deprecated, unused_variables, unused_mut))))]\n \n #![feature(nll)]\n-#![feature(rustc_private)]\n #![feature(staged_api)]\n-#![feature(lang_items)]\n+#![feature(const_fn)]\n+#![feature(extern_types)]\n+#![feature(in_band_lifetimes)]\n #![feature(optin_builtin_traits)]\n #![feature(non_exhaustive)]\n+#![feature(specialization)]\n \n #![recursion_limit=\"256\"]\n \n-extern crate syntax;\n-extern crate syntax_pos;\n-extern crate rustc_errors;\n-extern crate rustc_data_structures;\n-\n #[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]\n #[doc(hidden)]\n-pub mod rustc;\n+pub mod bridge;\n \n mod diagnostic;\n \n #[unstable(feature = \"proc_macro_diagnostic\", issue = \"54140\")]\n pub use diagnostic::{Diagnostic, Level, MultiSpan};\n \n+use std::{fmt, iter, mem};\n use std::ops::{Bound, RangeBounds};\n-use std::{ascii, fmt, iter};\n use std::path::PathBuf;\n-use rustc_data_structures::sync::Lrc;\n use std::str::FromStr;\n \n-use syntax::errors::DiagnosticBuilder;\n-use syntax::parse::{self, token};\n-use syntax::symbol::Symbol;\n-use syntax::tokenstream::{self, DelimSpan};\n-use syntax_pos::{Pos, FileName, BytePos};\n-\n /// The main type provided by this crate, representing an abstract stream of\n /// tokens, or, more specifically, a sequence of token trees.\n /// The type provide interfaces for iterating over those token trees and, conversely,\n@@ -71,7 +61,7 @@ use syntax_pos::{Pos, FileName, BytePos};\n /// and `#[proc_macro_derive]` definitions.\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n #[derive(Clone)]\n-pub struct TokenStream(tokenstream::TokenStream);\n+pub struct TokenStream(bridge::client::TokenStream);\n \n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n impl !Send for TokenStream {}\n@@ -94,7 +84,7 @@ impl TokenStream {\n     /// Returns an empty `TokenStream` containing no token trees.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn new() -> TokenStream {\n-        TokenStream(tokenstream::TokenStream::empty())\n+        TokenStream(bridge::client::TokenStream::new())\n     }\n \n     /// Checks if this `TokenStream` is empty.\n@@ -116,11 +106,16 @@ impl FromStr for TokenStream {\n     type Err = LexError;\n \n     fn from_str(src: &str) -> Result<TokenStream, LexError> {\n-        __internal::with_sess(|sess, data| {\n-            Ok(__internal::token_stream_wrap(parse::parse_stream_from_source_str(\n-                FileName::ProcMacroSourceCode, src.to_string(), sess, Some(data.call_site.0)\n-            )))\n-        })\n+        Ok(TokenStream(bridge::client::TokenStream::from_str(src)))\n+    }\n+}\n+\n+// NB: the bridge only provides `to_string`, implement `fmt::Display`\n+// based on it (the reverse of the usual relationship between the two).\n+#[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n+impl ToString for TokenStream {\n+    fn to_string(&self) -> String {\n+        self.0.to_string()\n     }\n }\n \n@@ -130,7 +125,7 @@ impl FromStr for TokenStream {\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n impl fmt::Display for TokenStream {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.0.fmt(f)\n+        f.write_str(&self.to_string())\n     }\n }\n \n@@ -150,7 +145,12 @@ pub use quote::{quote, quote_span};\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl From<TokenTree> for TokenStream {\n     fn from(tree: TokenTree) -> TokenStream {\n-        TokenStream(tree.to_internal())\n+        TokenStream(bridge::client::TokenStream::from_token_tree(match tree {\n+            TokenTree::Group(tt) => bridge::TokenTree::Group(tt.0),\n+            TokenTree::Punct(tt) => bridge::TokenTree::Punct(tt.0),\n+            TokenTree::Ident(tt) => bridge::TokenTree::Ident(tt.0),\n+            TokenTree::Literal(tt) => bridge::TokenTree::Literal(tt.0)\n+        }))\n     }\n }\n \n@@ -167,7 +167,7 @@ impl iter::FromIterator<TokenTree> for TokenStream {\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n impl iter::FromIterator<TokenStream> for TokenStream {\n     fn from_iter<I: IntoIterator<Item = TokenStream>>(streams: I) -> Self {\n-        let mut builder = tokenstream::TokenStreamBuilder::new();\n+        let mut builder = bridge::client::TokenStreamBuilder::new();\n         for stream in streams {\n             builder.push(stream.0);\n         }\n@@ -185,52 +185,34 @@ impl Extend<TokenTree> for TokenStream {\n #[stable(feature = \"token_stream_extend\", since = \"1.30.0\")]\n impl Extend<TokenStream> for TokenStream {\n     fn extend<I: IntoIterator<Item = TokenStream>>(&mut self, streams: I) {\n-        self.0.extend(streams.into_iter().map(|stream| stream.0));\n+        // FIXME(eddyb) Use an optimized implementation if/when possible.\n+        *self = iter::once(mem::replace(self, Self::new())).chain(streams).collect();\n     }\n }\n \n /// Public implementation details for the `TokenStream` type, such as iterators.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n pub mod token_stream {\n-    use syntax::tokenstream;\n-    use {TokenTree, TokenStream, Delimiter};\n+    use {bridge, Group, Ident, Literal, Punct, TokenTree, TokenStream};\n \n     /// An iterator over `TokenStream`'s `TokenTree`s.\n     /// The iteration is \"shallow\", e.g. the iterator doesn't recurse into delimited groups,\n     /// and returns whole groups as token trees.\n     #[derive(Clone)]\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n-    pub struct IntoIter {\n-        cursor: tokenstream::Cursor,\n-        stack: Vec<TokenTree>,\n-    }\n+    pub struct IntoIter(bridge::client::TokenStreamIter);\n \n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     impl Iterator for IntoIter {\n         type Item = TokenTree;\n \n         fn next(&mut self) -> Option<TokenTree> {\n-            loop {\n-                let tree = self.stack.pop().or_else(|| {\n-                    let next = self.cursor.next_as_stream()?;\n-                    Some(TokenTree::from_internal(next, &mut self.stack))\n-                })?;\n-                // HACK: The condition \"dummy span + group with empty delimiter\" represents an AST\n-                // fragment approximately converted into a token stream. This may happen, for\n-                // example, with inputs to proc macro attributes, including derives. Such \"groups\"\n-                // need to flattened during iteration over stream's token trees.\n-                // Eventually this needs to be removed in favor of keeping original token trees\n-                // and not doing the roundtrip through AST.\n-                if tree.span().0.is_dummy() {\n-                    if let TokenTree::Group(ref group) = tree {\n-                        if group.delimiter() == Delimiter::None {\n-                            self.cursor.insert(group.stream.clone().0);\n-                            continue\n-                        }\n-                    }\n-                }\n-                return Some(tree);\n-            }\n+            self.0.next().map(|tree| match tree {\n+                bridge::TokenTree::Group(tt) => TokenTree::Group(Group(tt)),\n+                bridge::TokenTree::Punct(tt) => TokenTree::Punct(Punct(tt)),\n+                bridge::TokenTree::Ident(tt) => TokenTree::Ident(Ident(tt)),\n+                bridge::TokenTree::Literal(tt) => TokenTree::Literal(Literal(tt)),\n+            })\n         }\n     }\n \n@@ -240,7 +222,7 @@ pub mod token_stream {\n         type IntoIter = IntoIter;\n \n         fn into_iter(self) -> IntoIter {\n-            IntoIter { cursor: self.0.trees(), stack: Vec::new() }\n+            IntoIter(self.0.into_iter())\n         }\n     }\n }\n@@ -264,7 +246,7 @@ mod quote;\n /// A region of source code, along with macro expansion information.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n #[derive(Copy, Clone)]\n-pub struct Span(syntax_pos::Span);\n+pub struct Span(bridge::client::Span);\n \n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Send for Span {}\n@@ -286,7 +268,7 @@ impl Span {\n     /// A span that resolves at the macro definition site.\n     #[unstable(feature = \"proc_macro_def_site\", issue = \"54724\")]\n     pub fn def_site() -> Span {\n-        ::__internal::with_sess(|_, data| data.def_site)\n+        Span(bridge::client::Span::def_site())\n     }\n \n     /// The span of the invocation of the current procedural macro.\n@@ -295,15 +277,13 @@ impl Span {\n     /// at the macro call site will be able to refer to them as well.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn call_site() -> Span {\n-        ::__internal::with_sess(|_, data| data.call_site)\n+        Span(bridge::client::Span::call_site())\n     }\n \n     /// The original source file into which this span points.\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn source_file(&self) -> SourceFile {\n-        SourceFile {\n-            source_file: __internal::lookup_char_pos(self.0.lo()).file,\n-        }\n+        SourceFile(self.0.source_file())\n     }\n \n     /// The `Span` for the tokens in the previous macro expansion from which\n@@ -318,47 +298,34 @@ impl Span {\n     /// value is the same as `*self`.\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn source(&self) -> Span {\n-        Span(self.0.source_callsite())\n+        Span(self.0.source())\n     }\n \n     /// Get the starting line/column in the source file for this span.\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn start(&self) -> LineColumn {\n-        let loc = __internal::lookup_char_pos(self.0.lo());\n-        LineColumn {\n-            line: loc.line,\n-            column: loc.col.to_usize()\n-        }\n+        self.0.start()\n     }\n \n     /// Get the ending line/column in the source file for this span.\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn end(&self) -> LineColumn {\n-        let loc = __internal::lookup_char_pos(self.0.hi());\n-        LineColumn {\n-            line: loc.line,\n-            column: loc.col.to_usize()\n-        }\n+        self.0.end()\n     }\n \n     /// Create a new span encompassing `self` and `other`.\n     ///\n     /// Returns `None` if `self` and `other` are from different files.\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn join(&self, other: Span) -> Option<Span> {\n-        let self_loc = __internal::lookup_char_pos(self.0.lo());\n-        let other_loc = __internal::lookup_char_pos(other.0.lo());\n-\n-        if self_loc.file.name != other_loc.file.name { return None }\n-\n-        Some(Span(self.0.to(other.0)))\n+        self.0.join(other.0).map(Span)\n     }\n \n     /// Creates a new span with the same line/column information as `self` but\n     /// that resolves symbols as though it were at `other`.\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn resolved_at(&self, other: Span) -> Span {\n-        Span(self.0.with_ctxt(other.0.ctxt()))\n+        Span(self.0.resolved_at(other.0))\n     }\n \n     /// Creates a new span with the same name resolution behavior as `self` but\n@@ -384,10 +351,7 @@ impl Span {\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Debug for Span {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{:?} bytes({}..{})\",\n-               self.0.ctxt(),\n-               self.0.lo().0,\n-               self.0.hi().0)\n+        self.0.fmt(f)\n     }\n }\n \n@@ -412,14 +376,7 @@ impl !Sync for LineColumn {}\n /// The source file of a given `Span`.\n #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n #[derive(Clone)]\n-pub struct SourceFile {\n-    source_file: Lrc<syntax_pos::SourceFile>,\n-}\n-\n-#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n-impl !Send for SourceFile {}\n-#[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n-impl !Sync for SourceFile {}\n+pub struct SourceFile(bridge::client::SourceFile);\n \n impl SourceFile {\n     /// Get the path to this source file.\n@@ -434,10 +391,7 @@ impl SourceFile {\n     /// [`is_real`]: #method.is_real\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn path(&self) -> PathBuf {\n-        match self.source_file.name {\n-            FileName::Real(ref path) => path.clone(),\n-            _ => PathBuf::from(self.source_file.name.to_string())\n-        }\n+        PathBuf::from(self.0.path())\n     }\n \n     /// Returns `true` if this source file is a real source file, and not generated by an external\n@@ -447,7 +401,7 @@ impl SourceFile {\n         // This is a hack until intercrate spans are implemented and we can have real source files\n         // for spans generated in external macros.\n         // https://github.com/rust-lang/rust/pull/43604#issuecomment-333334368\n-        self.source_file.is_real_file()\n+        self.0.is_real()\n     }\n }\n \n@@ -465,7 +419,7 @@ impl fmt::Debug for SourceFile {\n #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n impl PartialEq for SourceFile {\n     fn eq(&self, other: &Self) -> bool {\n-        Lrc::ptr_eq(&self.source_file, &other.source_file)\n+        self.0.eq(&other.0)\n     }\n }\n \n@@ -579,18 +533,27 @@ impl From<Literal> for TokenTree {\n     }\n }\n \n+// NB: the bridge only provides `to_string`, implement `fmt::Display`\n+// based on it (the reverse of the usual relationship between the two).\n+#[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n+impl ToString for TokenTree {\n+    fn to_string(&self) -> String {\n+        match *self {\n+            TokenTree::Group(ref t) => t.to_string(),\n+            TokenTree::Ident(ref t) => t.to_string(),\n+            TokenTree::Punct(ref t) => t.to_string(),\n+            TokenTree::Literal(ref t) => t.to_string(),\n+        }\n+    }\n+}\n+\n /// Prints the token tree as a string that is supposed to be losslessly convertible back\n /// into the same token tree (modulo spans), except for possibly `TokenTree::Group`s\n /// with `Delimiter::None` delimiters and negative numeric literals.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for TokenTree {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            TokenTree::Group(ref t) => t.fmt(f),\n-            TokenTree::Ident(ref t) => t.fmt(f),\n-            TokenTree::Punct(ref t) => t.fmt(f),\n-            TokenTree::Literal(ref t) => t.fmt(f),\n-        }\n+        f.write_str(&self.to_string())\n     }\n }\n \n@@ -599,11 +562,7 @@ impl fmt::Display for TokenTree {\n /// A `Group` internally contains a `TokenStream` which is surrounded by `Delimiter`s.\n #[derive(Clone)]\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n-pub struct Group {\n-    delimiter: Delimiter,\n-    stream: TokenStream,\n-    span: DelimSpan,\n-}\n+pub struct Group(bridge::client::Group);\n \n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Send for Group {}\n@@ -640,17 +599,13 @@ impl Group {\n     /// method below.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn new(delimiter: Delimiter, stream: TokenStream) -> Group {\n-        Group {\n-            delimiter: delimiter,\n-            stream: stream,\n-            span: DelimSpan::from_single(Span::call_site().0),\n-        }\n+        Group(bridge::client::Group::new(delimiter, stream.0))\n     }\n \n     /// Returns the delimiter of this `Group`\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn delimiter(&self) -> Delimiter {\n-        self.delimiter\n+        self.0.delimiter()\n     }\n \n     /// Returns the `TokenStream` of tokens that are delimited in this `Group`.\n@@ -659,7 +614,7 @@ impl Group {\n     /// returned above.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn stream(&self) -> TokenStream {\n-        self.stream.clone()\n+        TokenStream(self.0.stream())\n     }\n \n     /// Returns the span for the delimiters of this token stream, spanning the\n@@ -671,7 +626,7 @@ impl Group {\n     /// ```\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn span(&self) -> Span {\n-        Span(self.span.entire())\n+        Span(self.0.span())\n     }\n \n     /// Returns the span pointing to the opening delimiter of this group.\n@@ -682,7 +637,7 @@ impl Group {\n     /// ```\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn span_open(&self) -> Span {\n-        Span(self.span.open)\n+        Span(self.0.span_open())\n     }\n \n     /// Returns the span pointing to the closing delimiter of this group.\n@@ -693,7 +648,7 @@ impl Group {\n     /// ```\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn span_close(&self) -> Span {\n-        Span(self.span.close)\n+        Span(self.0.span_close())\n     }\n \n     /// Configures the span for this `Group`'s delimiters, but not its internal\n@@ -704,7 +659,16 @@ impl Group {\n     /// tokens at the level of the `Group`.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn set_span(&mut self, span: Span) {\n-        self.span = DelimSpan::from_single(span.0);\n+        self.0.set_span(span.0);\n+    }\n+}\n+\n+// NB: the bridge only provides `to_string`, implement `fmt::Display`\n+// based on it (the reverse of the usual relationship between the two).\n+#[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n+impl ToString for Group {\n+    fn to_string(&self) -> String {\n+        TokenStream::from(TokenTree::from(self.clone())).to_string()\n     }\n }\n \n@@ -714,7 +678,7 @@ impl Group {\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Group {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        TokenStream::from(TokenTree::from(self.clone())).fmt(f)\n+        f.write_str(&self.to_string())\n     }\n }\n \n@@ -735,11 +699,7 @@ impl fmt::Debug for Group {\n /// forms of `Spacing` returned.\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n #[derive(Clone)]\n-pub struct Punct {\n-    ch: char,\n-    spacing: Spacing,\n-    span: Span,\n-}\n+pub struct Punct(bridge::client::Punct);\n \n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl !Send for Punct {}\n@@ -774,17 +734,13 @@ impl Punct {\n         if !LEGAL_CHARS.contains(&ch) {\n             panic!(\"unsupported character `{:?}`\", ch)\n         }\n-        Punct {\n-            ch: ch,\n-            spacing: spacing,\n-            span: Span::call_site(),\n-        }\n+        Punct(bridge::client::Punct::new(ch, spacing))\n     }\n \n     /// Returns the value of this punctuation character as `char`.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn as_char(&self) -> char {\n-        self.ch\n+        self.0.as_char()\n     }\n \n     /// Returns the spacing of this punctuation character, indicating whether it's immediately\n@@ -793,19 +749,28 @@ impl Punct {\n     /// (`Alone`) so the operator has certainly ended.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn spacing(&self) -> Spacing {\n-        self.spacing\n+        self.0.spacing()\n     }\n \n     /// Returns the span for this punctuation character.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn span(&self) -> Span {\n-        self.span\n+        Span(self.0.span())\n     }\n \n     /// Configure the span for this punctuation character.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn set_span(&mut self, span: Span) {\n-        self.span = span;\n+        self.0 = self.0.with_span(span.0);\n+    }\n+}\n+\n+// NB: the bridge only provides `to_string`, implement `fmt::Display`\n+// based on it (the reverse of the usual relationship between the two).\n+#[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n+impl ToString for Punct {\n+    fn to_string(&self) -> String {\n+        TokenStream::from(TokenTree::from(self.clone())).to_string()\n     }\n }\n \n@@ -814,7 +779,7 @@ impl Punct {\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Punct {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        TokenStream::from(TokenTree::from(self.clone())).fmt(f)\n+        f.write_str(&self.to_string())\n     }\n }\n \n@@ -832,16 +797,7 @@ impl fmt::Debug for Punct {\n /// An identifier (`ident`).\n #[derive(Clone)]\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n-pub struct Ident {\n-    sym: Symbol,\n-    span: Span,\n-    is_raw: bool,\n-}\n-\n-#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n-impl !Send for Ident {}\n-#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n-impl !Sync for Ident {}\n+pub struct Ident(bridge::client::Ident);\n \n impl Ident {\n     fn is_valid(string: &str) -> bool {\n@@ -878,7 +834,7 @@ impl Ident {\n         if !Ident::is_valid(string) {\n             panic!(\"`{:?}` is not a valid identifier\", string)\n         }\n-        Ident::new_maybe_raw(string, span, false)\n+        Ident(bridge::client::Ident::new(string, span.0, false))\n     }\n \n     /// Same as `Ident::new`, but creates a raw identifier (`r#ident`).\n@@ -887,20 +843,29 @@ impl Ident {\n         if !Ident::is_valid(string) {\n             panic!(\"`{:?}` is not a valid identifier\", string)\n         }\n-        Ident::new_maybe_raw(string, span, true)\n+        Ident(bridge::client::Ident::new(string, span.0, true))\n     }\n \n     /// Returns the span of this `Ident`, encompassing the entire string returned\n     /// by `as_str`.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn span(&self) -> Span {\n-        self.span\n+        Span(self.0.span())\n     }\n \n     /// Configures the span of this `Ident`, possibly changing its hygiene context.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn set_span(&mut self, span: Span) {\n-        self.span = span;\n+        self.0 = self.0.with_span(span.0);\n+    }\n+}\n+\n+// NB: the bridge only provides `to_string`, implement `fmt::Display`\n+// based on it (the reverse of the usual relationship between the two).\n+#[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n+impl ToString for Ident {\n+    fn to_string(&self) -> String {\n+        TokenStream::from(TokenTree::from(self.clone())).to_string()\n     }\n }\n \n@@ -909,7 +874,7 @@ impl Ident {\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Ident {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        TokenStream::from(TokenTree::from(self.clone())).fmt(f)\n+        f.write_str(&self.to_string())\n     }\n }\n \n@@ -927,19 +892,9 @@ impl fmt::Debug for Ident {\n /// character (`'a'`), byte character (`b'a'`), an integer or floating point number\n /// with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`).\n /// Boolean literals like `true` and `false` do not belong here, they are `Ident`s.\n-// FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n-#[derive(Clone, Debug)]\n-#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n-pub struct Literal {\n-    lit: token::Lit,\n-    suffix: Option<Symbol>,\n-    span: Span,\n-}\n-\n-#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n-impl !Send for Literal {}\n+#[derive(Clone)]\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n-impl !Sync for Literal {}\n+pub struct Literal(bridge::client::Literal);\n \n macro_rules! suffixed_int_literals {\n     ($($name:ident => $kind:ident,)*) => ($(\n@@ -956,11 +911,7 @@ macro_rules! suffixed_int_literals {\n         /// below.\n         #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n         pub fn $name(n: $kind) -> Literal {\n-            Literal {\n-                lit: token::Lit::Integer(Symbol::intern(&n.to_string())),\n-                suffix: Some(Symbol::intern(stringify!($kind))),\n-                span: Span::call_site(),\n-            }\n+            Literal(bridge::client::Literal::typed_integer(&n.to_string(), stringify!($kind)))\n         }\n     )*)\n }\n@@ -982,11 +933,7 @@ macro_rules! unsuffixed_int_literals {\n         /// below.\n         #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n         pub fn $name(n: $kind) -> Literal {\n-            Literal {\n-                lit: token::Lit::Integer(Symbol::intern(&n.to_string())),\n-                suffix: None,\n-                span: Span::call_site(),\n-            }\n+            Literal(bridge::client::Literal::integer(&n.to_string()))\n         }\n     )*)\n }\n@@ -1039,11 +986,7 @@ impl Literal {\n         if !n.is_finite() {\n             panic!(\"Invalid float literal {}\", n);\n         }\n-        Literal {\n-            lit: token::Lit::Float(Symbol::intern(&n.to_string())),\n-            suffix: None,\n-            span: Span::call_site(),\n-        }\n+        Literal(bridge::client::Literal::float(&n.to_string()))\n     }\n \n     /// Creates a new suffixed floating-point literal.\n@@ -1064,11 +1007,7 @@ impl Literal {\n         if !n.is_finite() {\n             panic!(\"Invalid float literal {}\", n);\n         }\n-        Literal {\n-            lit: token::Lit::Float(Symbol::intern(&n.to_string())),\n-            suffix: Some(Symbol::intern(\"f32\")),\n-            span: Span::call_site(),\n-        }\n+        Literal(bridge::client::Literal::f32(&n.to_string()))\n     }\n \n     /// Creates a new unsuffixed floating-point literal.\n@@ -1088,11 +1027,7 @@ impl Literal {\n         if !n.is_finite() {\n             panic!(\"Invalid float literal {}\", n);\n         }\n-        Literal {\n-            lit: token::Lit::Float(Symbol::intern(&n.to_string())),\n-            suffix: None,\n-            span: Span::call_site(),\n-        }\n+        Literal(bridge::client::Literal::float(&n.to_string()))\n     }\n \n     /// Creates a new suffixed floating-point literal.\n@@ -1113,61 +1048,37 @@ impl Literal {\n         if !n.is_finite() {\n             panic!(\"Invalid float literal {}\", n);\n         }\n-        Literal {\n-            lit: token::Lit::Float(Symbol::intern(&n.to_string())),\n-            suffix: Some(Symbol::intern(\"f64\")),\n-            span: Span::call_site(),\n-        }\n+        Literal(bridge::client::Literal::f64(&n.to_string()))\n     }\n \n     /// String literal.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn string(string: &str) -> Literal {\n-        let mut escaped = String::new();\n-        for ch in string.chars() {\n-            escaped.extend(ch.escape_debug());\n-        }\n-        Literal {\n-            lit: token::Lit::Str_(Symbol::intern(&escaped)),\n-            suffix: None,\n-            span: Span::call_site(),\n-        }\n+        Literal(bridge::client::Literal::string(string))\n     }\n \n     /// Character literal.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn character(ch: char) -> Literal {\n-        let mut escaped = String::new();\n-        escaped.extend(ch.escape_unicode());\n-        Literal {\n-            lit: token::Lit::Char(Symbol::intern(&escaped)),\n-            suffix: None,\n-            span: Span::call_site(),\n-        }\n+        Literal(bridge::client::Literal::character(ch))\n     }\n \n     /// Byte string literal.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn byte_string(bytes: &[u8]) -> Literal {\n-        let string = bytes.iter().cloned().flat_map(ascii::escape_default)\n-            .map(Into::<char>::into).collect::<String>();\n-        Literal {\n-            lit: token::Lit::ByteStr(Symbol::intern(&string)),\n-            suffix: None,\n-            span: Span::call_site(),\n-        }\n+        Literal(bridge::client::Literal::byte_string(bytes))\n     }\n \n     /// Returns the span encompassing this literal.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn span(&self) -> Span {\n-        self.span\n+        Span(self.0.span())\n     }\n \n     /// Configures the span associated for this literal.\n     #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n     pub fn set_span(&mut self, span: Span) {\n-        self.span = span;\n+        self.0.set_span(span.0);\n     }\n \n     /// Returns a `Span` that is a subset of `self.span()` containing only the\n@@ -1183,35 +1094,28 @@ impl Literal {\n     // was 'c' or whether it was '\\u{63}'.\n     #[unstable(feature = \"proc_macro_span\", issue = \"54725\")]\n     pub fn subspan<R: RangeBounds<usize>>(&self, range: R) -> Option<Span> {\n-        let inner = self.span().0;\n-        let length = inner.hi().to_usize() - inner.lo().to_usize();\n-\n-        let start = match range.start_bound() {\n-            Bound::Included(&lo) => lo,\n-            Bound::Excluded(&lo) => lo + 1,\n-            Bound::Unbounded => 0,\n-        };\n-\n-        let end = match range.end_bound() {\n-            Bound::Included(&hi) => hi + 1,\n-            Bound::Excluded(&hi) => hi,\n-            Bound::Unbounded => length,\n-        };\n-\n-        // Bounds check the values, preventing addition overflow and OOB spans.\n-        if start > u32::max_value() as usize\n-            || end > u32::max_value() as usize\n-            || (u32::max_value() - start as u32) < inner.lo().to_u32()\n-            || (u32::max_value() - end as u32) < inner.lo().to_u32()\n-            || start >= end\n-            || end > length\n-        {\n-            return None;\n+        // HACK(eddyb) something akin to `Option::cloned`, but for `Bound<&T>`.\n+        fn cloned_bound<T: Clone>(bound: Bound<&T>) -> Bound<T> {\n+            match bound {\n+                Bound::Included(x) => Bound::Included(x.clone()),\n+                Bound::Excluded(x) => Bound::Excluded(x.clone()),\n+                Bound::Unbounded => Bound::Unbounded,\n+            }\n         }\n \n-        let new_lo = inner.lo() + BytePos::from_usize(start);\n-        let new_hi = inner.lo() + BytePos::from_usize(end);\n-        Some(Span(inner.with_lo(new_lo).with_hi(new_hi)))\n+        self.0.subspan(\n+            cloned_bound(range.start_bound()),\n+            cloned_bound(range.end_bound()),\n+        ).map(Span)\n+    }\n+}\n+\n+// NB: the bridge only provides `to_string`, implement `fmt::Display`\n+// based on it (the reverse of the usual relationship between the two).\n+#[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n+impl ToString for Literal {\n+    fn to_string(&self) -> String {\n+        TokenStream::from(TokenTree::from(self.clone())).to_string()\n     }\n }\n \n@@ -1220,149 +1124,14 @@ impl Literal {\n #[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n impl fmt::Display for Literal {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        TokenStream::from(TokenTree::from(self.clone())).fmt(f)\n+        f.write_str(&self.to_string())\n     }\n }\n \n-/// Permanently unstable internal implementation details of this crate. This\n-/// should not be used.\n-///\n-/// These methods are used by the rest of the compiler to generate instances of\n-/// `TokenStream` to hand to macro definitions, as well as consume the output.\n-///\n-/// Note that this module is also intentionally separate from the rest of the\n-/// crate. This allows the `#[unstable]` directive below to naturally apply to\n-/// all of the contents.\n-#[unstable(feature = \"proc_macro_internals\", issue = \"27812\")]\n-#[doc(hidden)]\n-pub mod __internal {\n-    use std::cell::Cell;\n-    use std::ptr;\n-\n-    use syntax::ast;\n-    use syntax::ext::base::ExtCtxt;\n-    use syntax::ptr::P;\n-    use syntax::parse::{self, ParseSess};\n-    use syntax::parse::token::{self, Token};\n-    use syntax::tokenstream;\n-    use syntax_pos::{BytePos, Loc, DUMMY_SP};\n-    use syntax_pos::hygiene::{SyntaxContext, Transparency};\n-\n-    use super::{TokenStream, LexError, Span};\n-\n-    pub fn lookup_char_pos(pos: BytePos) -> Loc {\n-        with_sess(|sess, _| sess.source_map().lookup_char_pos(pos))\n-    }\n-\n-    pub fn new_token_stream(item: P<ast::Item>) -> TokenStream {\n-        let token = Token::interpolated(token::NtItem(item));\n-        TokenStream(tokenstream::TokenTree::Token(DUMMY_SP, token).into())\n-    }\n-\n-    pub fn token_stream_wrap(inner: tokenstream::TokenStream) -> TokenStream {\n-        TokenStream(inner)\n-    }\n-\n-    pub fn token_stream_parse_items(stream: TokenStream) -> Result<Vec<P<ast::Item>>, LexError> {\n-        with_sess(move |sess, _| {\n-            let mut parser = parse::stream_to_parser(sess, stream.0);\n-            let mut items = Vec::new();\n-\n-            while let Some(item) = try!(parser.parse_item().map_err(super::parse_to_lex_err)) {\n-                items.push(item)\n-            }\n-\n-            Ok(items)\n-        })\n-    }\n-\n-    pub fn token_stream_inner(stream: TokenStream) -> tokenstream::TokenStream {\n-        stream.0\n-    }\n-\n-    pub trait Registry {\n-        fn register_custom_derive(&mut self,\n-                                  trait_name: &str,\n-                                  expand: fn(TokenStream) -> TokenStream,\n-                                  attributes: &[&'static str]);\n-\n-        fn register_attr_proc_macro(&mut self,\n-                                    name: &str,\n-                                    expand: fn(TokenStream, TokenStream) -> TokenStream);\n-\n-        fn register_bang_proc_macro(&mut self,\n-                                    name: &str,\n-                                    expand: fn(TokenStream) -> TokenStream);\n-    }\n-\n-    #[derive(Clone, Copy)]\n-    pub struct ProcMacroData {\n-        pub def_site: Span,\n-        pub call_site: Span,\n-    }\n-\n-    #[derive(Clone, Copy)]\n-    struct ProcMacroSess {\n-        parse_sess: *const ParseSess,\n-        data: ProcMacroData,\n-    }\n-\n-    // Emulate scoped_thread_local!() here essentially\n-    thread_local! {\n-        static CURRENT_SESS: Cell<ProcMacroSess> = Cell::new(ProcMacroSess {\n-            parse_sess: ptr::null(),\n-            data: ProcMacroData { def_site: Span(DUMMY_SP), call_site: Span(DUMMY_SP) },\n-        });\n-    }\n-\n-    pub fn set_sess<F, R>(cx: &ExtCtxt, f: F) -> R\n-        where F: FnOnce() -> R\n-    {\n-        struct Reset { prev: ProcMacroSess }\n-\n-        impl Drop for Reset {\n-            fn drop(&mut self) {\n-                CURRENT_SESS.with(|p| p.set(self.prev));\n-            }\n-        }\n-\n-        CURRENT_SESS.with(|p| {\n-            let _reset = Reset { prev: p.get() };\n-\n-            // No way to determine def location for a proc macro right now, so use call location.\n-            let location = cx.current_expansion.mark.expn_info().unwrap().call_site;\n-            let to_span = |transparency| Span(location.with_ctxt(\n-                SyntaxContext::empty().apply_mark_with_transparency(cx.current_expansion.mark,\n-                                                                    transparency))\n-            );\n-            p.set(ProcMacroSess {\n-                parse_sess: cx.parse_sess,\n-                data: ProcMacroData {\n-                    def_site: to_span(Transparency::Opaque),\n-                    call_site: to_span(Transparency::Transparent),\n-                },\n-            });\n-            f()\n-        })\n-    }\n-\n-    pub fn in_sess() -> bool\n-    {\n-        !CURRENT_SESS.with(|sess| sess.get()).parse_sess.is_null()\n-    }\n-\n-    pub fn with_sess<F, R>(f: F) -> R\n-        where F: FnOnce(&ParseSess, &ProcMacroData) -> R\n-    {\n-        let sess = CURRENT_SESS.with(|sess| sess.get());\n-        if sess.parse_sess.is_null() {\n-            panic!(\"procedural macro API is used outside of a procedural macro\");\n-        }\n-        f(unsafe { &*sess.parse_sess }, &sess.data)\n+#[stable(feature = \"proc_macro_lib2\", since = \"1.29.0\")]\n+impl fmt::Debug for Literal {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n+        self.0.fmt(f)\n     }\n }\n-\n-fn parse_to_lex_err(mut err: DiagnosticBuilder) -> LexError {\n-    err.cancel();\n-    LexError { _inner: () }\n-}"}, {"sha": "3ce02d1afb10bf60089a65413463d4ac69930304", "filename": "src/libproc_macro/rustc.rs", "status": "removed", "additions": 0, "deletions": 283, "changes": 283, "blob_url": "https://github.com/rust-lang/rust/blob/3e90a12a8a95933604a8b609197fce61bb24a38c/src%2Flibproc_macro%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e90a12a8a95933604a8b609197fce61bb24a38c/src%2Flibproc_macro%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Frustc.rs?ref=3e90a12a8a95933604a8b609197fce61bb24a38c", "patch": "@@ -1,283 +0,0 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use {Delimiter, Level, Spacing, Span, __internal};\n-use {Group, Ident, Literal, Punct, TokenTree};\n-\n-use rustc_errors as errors;\n-use syntax::ast;\n-use syntax::parse::lexer::comments;\n-use syntax::parse::token;\n-use syntax::tokenstream;\n-use syntax_pos::symbol::{keywords, Symbol};\n-\n-impl Ident {\n-    pub(crate) fn new_maybe_raw(string: &str, span: Span, is_raw: bool) -> Ident {\n-        let sym = Symbol::intern(string);\n-        if is_raw\n-            && (sym == keywords::Underscore.name()\n-                || ast::Ident::with_empty_ctxt(sym).is_path_segment_keyword())\n-        {\n-            panic!(\"`{:?}` is not a valid raw identifier\", string)\n-        }\n-        Ident { sym, span, is_raw }\n-    }\n-}\n-\n-impl Delimiter {\n-    pub(crate) fn from_internal(delim: token::DelimToken) -> Delimiter {\n-        match delim {\n-            token::Paren => Delimiter::Parenthesis,\n-            token::Brace => Delimiter::Brace,\n-            token::Bracket => Delimiter::Bracket,\n-            token::NoDelim => Delimiter::None,\n-        }\n-    }\n-\n-    pub(crate) fn to_internal(self) -> token::DelimToken {\n-        match self {\n-            Delimiter::Parenthesis => token::Paren,\n-            Delimiter::Brace => token::Brace,\n-            Delimiter::Bracket => token::Bracket,\n-            Delimiter::None => token::NoDelim,\n-        }\n-    }\n-}\n-\n-impl TokenTree {\n-    pub(crate) fn from_internal(\n-        stream: tokenstream::TokenStream,\n-        stack: &mut Vec<TokenTree>,\n-    ) -> TokenTree {\n-        use syntax::parse::token::*;\n-\n-        let (tree, is_joint) = stream.as_tree();\n-        let (span, token) = match tree {\n-            tokenstream::TokenTree::Token(span, token) => (span, token),\n-            tokenstream::TokenTree::Delimited(span, delimed) => {\n-                let delimiter = Delimiter::from_internal(delimed.delim);\n-                let mut g = Group::new(delimiter, ::TokenStream(delimed.tts.into()));\n-                g.span = span;\n-                return g.into();\n-            }\n-        };\n-\n-        let op_kind = if is_joint {\n-            Spacing::Joint\n-        } else {\n-            Spacing::Alone\n-        };\n-        macro_rules! tt {\n-            ($e:expr) => {{\n-                let mut x = TokenTree::from($e);\n-                x.set_span(Span(span));\n-                x\n-            }};\n-        }\n-        macro_rules! op {\n-            ($a:expr) => {\n-                tt!(Punct::new($a, op_kind))\n-            };\n-            ($a:expr, $b:expr) => {{\n-                stack.push(tt!(Punct::new($b, op_kind)));\n-                tt!(Punct::new($a, Spacing::Joint))\n-            }};\n-            ($a:expr, $b:expr, $c:expr) => {{\n-                stack.push(tt!(Punct::new($c, op_kind)));\n-                stack.push(tt!(Punct::new($b, Spacing::Joint)));\n-                tt!(Punct::new($a, Spacing::Joint))\n-            }};\n-        }\n-\n-        match token {\n-            Eq => op!('='),\n-            Lt => op!('<'),\n-            Le => op!('<', '='),\n-            EqEq => op!('=', '='),\n-            Ne => op!('!', '='),\n-            Ge => op!('>', '='),\n-            Gt => op!('>'),\n-            AndAnd => op!('&', '&'),\n-            OrOr => op!('|', '|'),\n-            Not => op!('!'),\n-            Tilde => op!('~'),\n-            BinOp(Plus) => op!('+'),\n-            BinOp(Minus) => op!('-'),\n-            BinOp(Star) => op!('*'),\n-            BinOp(Slash) => op!('/'),\n-            BinOp(Percent) => op!('%'),\n-            BinOp(Caret) => op!('^'),\n-            BinOp(And) => op!('&'),\n-            BinOp(Or) => op!('|'),\n-            BinOp(Shl) => op!('<', '<'),\n-            BinOp(Shr) => op!('>', '>'),\n-            BinOpEq(Plus) => op!('+', '='),\n-            BinOpEq(Minus) => op!('-', '='),\n-            BinOpEq(Star) => op!('*', '='),\n-            BinOpEq(Slash) => op!('/', '='),\n-            BinOpEq(Percent) => op!('%', '='),\n-            BinOpEq(Caret) => op!('^', '='),\n-            BinOpEq(And) => op!('&', '='),\n-            BinOpEq(Or) => op!('|', '='),\n-            BinOpEq(Shl) => op!('<', '<', '='),\n-            BinOpEq(Shr) => op!('>', '>', '='),\n-            At => op!('@'),\n-            Dot => op!('.'),\n-            DotDot => op!('.', '.'),\n-            DotDotDot => op!('.', '.', '.'),\n-            DotDotEq => op!('.', '.', '='),\n-            Comma => op!(','),\n-            Semi => op!(';'),\n-            Colon => op!(':'),\n-            ModSep => op!(':', ':'),\n-            RArrow => op!('-', '>'),\n-            LArrow => op!('<', '-'),\n-            FatArrow => op!('=', '>'),\n-            Pound => op!('#'),\n-            Dollar => op!('$'),\n-            Question => op!('?'),\n-            SingleQuote => op!('\\''),\n-\n-            Ident(ident, false) => tt!(self::Ident::new(&ident.as_str(), Span(span))),\n-            Ident(ident, true) => tt!(self::Ident::new_raw(&ident.as_str(), Span(span))),\n-            Lifetime(ident) => {\n-                let ident = ident.without_first_quote();\n-                stack.push(tt!(self::Ident::new(&ident.as_str(), Span(span))));\n-                tt!(Punct::new('\\'', Spacing::Joint))\n-            }\n-            Literal(lit, suffix) => tt!(self::Literal {\n-                lit,\n-                suffix,\n-                span: Span(span)\n-            }),\n-            DocComment(c) => {\n-                let style = comments::doc_comment_style(&c.as_str());\n-                let stripped = comments::strip_doc_comment_decoration(&c.as_str());\n-                let stream = vec![\n-                    tt!(self::Ident::new(\"doc\", Span(span))),\n-                    tt!(Punct::new('=', Spacing::Alone)),\n-                    tt!(self::Literal::string(&stripped)),\n-                ].into_iter()\n-                    .collect();\n-                stack.push(tt!(Group::new(Delimiter::Bracket, stream)));\n-                if style == ast::AttrStyle::Inner {\n-                    stack.push(tt!(Punct::new('!', Spacing::Alone)));\n-                }\n-                tt!(Punct::new('#', Spacing::Alone))\n-            }\n-\n-            Interpolated(_) => __internal::with_sess(|sess, _| {\n-                let tts = token.interpolated_to_tokenstream(sess, span);\n-                tt!(Group::new(Delimiter::None, ::TokenStream(tts)))\n-            }),\n-\n-            DotEq => op!('.', '='),\n-            OpenDelim(..) | CloseDelim(..) => unreachable!(),\n-            Whitespace | Comment | Shebang(..) | Eof => unreachable!(),\n-        }\n-    }\n-\n-    pub(crate) fn to_internal(self) -> tokenstream::TokenStream {\n-        use syntax::parse::token::*;\n-        use syntax::tokenstream::{Delimited, TokenTree};\n-\n-        let (ch, kind, span) = match self {\n-            self::TokenTree::Punct(tt) => (tt.as_char(), tt.spacing(), tt.span()),\n-            self::TokenTree::Group(tt) => {\n-                return TokenTree::Delimited(\n-                    tt.span,\n-                    Delimited {\n-                        delim: tt.delimiter.to_internal(),\n-                        tts: tt.stream.0.into(),\n-                    },\n-                ).into();\n-            }\n-            self::TokenTree::Ident(tt) => {\n-                let token = Ident(ast::Ident::new(tt.sym, tt.span.0), tt.is_raw);\n-                return TokenTree::Token(tt.span.0, token).into();\n-            }\n-            self::TokenTree::Literal(self::Literal {\n-                lit: Lit::Integer(ref a),\n-                suffix,\n-                span,\n-            })\n-                if a.as_str().starts_with(\"-\") =>\n-            {\n-                let minus = BinOp(BinOpToken::Minus);\n-                let integer = Symbol::intern(&a.as_str()[1..]);\n-                let integer = Literal(Lit::Integer(integer), suffix);\n-                let a = TokenTree::Token(span.0, minus);\n-                let b = TokenTree::Token(span.0, integer);\n-                return vec![a, b].into_iter().collect();\n-            }\n-            self::TokenTree::Literal(self::Literal {\n-                lit: Lit::Float(ref a),\n-                suffix,\n-                span,\n-            })\n-                if a.as_str().starts_with(\"-\") =>\n-            {\n-                let minus = BinOp(BinOpToken::Minus);\n-                let float = Symbol::intern(&a.as_str()[1..]);\n-                let float = Literal(Lit::Float(float), suffix);\n-                let a = TokenTree::Token(span.0, minus);\n-                let b = TokenTree::Token(span.0, float);\n-                return vec![a, b].into_iter().collect();\n-            }\n-            self::TokenTree::Literal(tt) => {\n-                let token = Literal(tt.lit, tt.suffix);\n-                return TokenTree::Token(tt.span.0, token).into();\n-            }\n-        };\n-\n-        let token = match ch {\n-            '=' => Eq,\n-            '<' => Lt,\n-            '>' => Gt,\n-            '!' => Not,\n-            '~' => Tilde,\n-            '+' => BinOp(Plus),\n-            '-' => BinOp(Minus),\n-            '*' => BinOp(Star),\n-            '/' => BinOp(Slash),\n-            '%' => BinOp(Percent),\n-            '^' => BinOp(Caret),\n-            '&' => BinOp(And),\n-            '|' => BinOp(Or),\n-            '@' => At,\n-            '.' => Dot,\n-            ',' => Comma,\n-            ';' => Semi,\n-            ':' => Colon,\n-            '#' => Pound,\n-            '$' => Dollar,\n-            '?' => Question,\n-            '\\'' => SingleQuote,\n-            _ => unreachable!(),\n-        };\n-\n-        let tree = TokenTree::Token(span.0, token);\n-        match kind {\n-            Spacing::Alone => tree.into(),\n-            Spacing::Joint => tree.joint(),\n-        }\n-    }\n-}\n-\n-impl Level {\n-    pub(crate) fn to_internal(self) -> errors::Level {\n-        match self {\n-            Level::Error => errors::Level::Error,\n-            Level::Warning => errors::Level::Warning,\n-            Level::Note => errors::Level::Note,\n-            Level::Help => errors::Level::Help,\n-        }\n-    }\n-}"}, {"sha": "3316735de663e24fa757a2ba4571a926066b1fc2", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -18,7 +18,6 @@ lazy_static = \"1.0.0\"\n scoped-tls = { version = \"0.1.1\", features = [\"nightly\"] }\n log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n polonius-engine = \"0.5.0\"\n-proc_macro = { path = \"../libproc_macro\" }\n rustc-rayon = \"0.1.1\"\n rustc-rayon-core = \"0.1.1\"\n rustc_apfloat = { path = \"../librustc_apfloat\" }"}, {"sha": "388bbc52c3b1a1bbb4649f020bc0601446879abd", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -596,7 +596,7 @@ define_dep_nodes!( <'tcx>\n     [] ReachableNonGenerics(CrateNum),\n     [] NativeLibraries(CrateNum),\n     [] PluginRegistrarFn(CrateNum),\n-    [] DeriveRegistrarFn(CrateNum),\n+    [] ProcMacroDeclsStatic(CrateNum),\n     [input] CrateDisambiguator(CrateNum),\n     [input] CrateHash(CrateNum),\n     [input] OriginalCrateName(CrateNum),"}, {"sha": "549a848a39dc1cdb184d263a7ae21944e29e4664", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -127,9 +127,8 @@ fn calculate_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             sess.crt_static() => Linkage::Static,\n         config::CrateType::Executable => Linkage::Dynamic,\n \n-        // proc-macro crates are required to be dylibs, and they're currently\n-        // required to link to libsyntax as well.\n-        config::CrateType::ProcMacro => Linkage::Dynamic,\n+        // proc-macro crates are mostly cdylibs, but we also need metadata.\n+        config::CrateType::ProcMacro => Linkage::Static,\n \n         // No linkage happens with rlibs, we just needed the metadata (which we\n         // got long ago), so don't bother with anything."}, {"sha": "d1c3acc57b723b5260ceff0c672846e8dbafe0c5", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -68,7 +68,7 @@ pub struct Session {\n     /// For a library crate, this is always none\n     pub entry_fn: Once<Option<(NodeId, Span, config::EntryFnType)>>,\n     pub plugin_registrar_fn: Once<Option<ast::NodeId>>,\n-    pub derive_registrar_fn: Once<Option<ast::NodeId>>,\n+    pub proc_macro_decls_static: Once<Option<ast::NodeId>>,\n     pub default_sysroot: Option<PathBuf>,\n     /// The name of the root source file of the crate, in the local file system.\n     /// `None` means that there is no source file.\n@@ -687,9 +687,9 @@ impl Session {\n         )\n     }\n \n-    pub fn generate_derive_registrar_symbol(&self, disambiguator: CrateDisambiguator) -> String {\n+    pub fn generate_proc_macro_decls_symbol(&self, disambiguator: CrateDisambiguator) -> String {\n         format!(\n-            \"__rustc_derive_registrar_{}__\",\n+            \"__rustc_proc_macro_decls_{}__\",\n             disambiguator.to_fingerprint().to_hex()\n         )\n     }\n@@ -1146,7 +1146,7 @@ pub fn build_session_(\n         // For a library crate, this is always none\n         entry_fn: Once::new(),\n         plugin_registrar_fn: Once::new(),\n-        derive_registrar_fn: Once::new(),\n+        proc_macro_decls_static: Once::new(),\n         default_sysroot,\n         local_crate_source_file,\n         working_dir,"}, {"sha": "5d12aaeed5f7920641a3bb6efcdb7098d010503f", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -591,7 +591,7 @@ impl<'tcx> QueryDescription<'tcx> for queries::plugin_registrar_fn<'tcx> {\n     }\n }\n \n-impl<'tcx> QueryDescription<'tcx> for queries::derive_registrar_fn<'tcx> {\n+impl<'tcx> QueryDescription<'tcx> for queries::proc_macro_decls_static<'tcx> {\n     fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n         \"looking up the derive registrar for a crate\".into()\n     }"}, {"sha": "699c2d111c6397aa8acbd77bc6359f35131a0bc7", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -470,7 +470,7 @@ define_queries! { <'tcx>\n         [] fn foreign_modules: ForeignModules(CrateNum) -> Lrc<Vec<ForeignModule>>,\n \n         [] fn plugin_registrar_fn: PluginRegistrarFn(CrateNum) -> Option<DefId>,\n-        [] fn derive_registrar_fn: DeriveRegistrarFn(CrateNum) -> Option<DefId>,\n+        [] fn proc_macro_decls_static: ProcMacroDeclsStatic(CrateNum) -> Option<DefId>,\n         [] fn crate_disambiguator: CrateDisambiguator(CrateNum) -> CrateDisambiguator,\n         [] fn crate_hash: CrateHash(CrateNum) -> Svh,\n         [] fn original_crate_name: OriginalCrateName(CrateNum) -> Symbol,"}, {"sha": "5f33d466c4a19f2d5a36ee5ce1feac849963d83c", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1200,7 +1200,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::ReachableNonGenerics => { force!(reachable_non_generics, krate!()); }\n         DepKind::NativeLibraries => { force!(native_libraries, krate!()); }\n         DepKind::PluginRegistrarFn => { force!(plugin_registrar_fn, krate!()); }\n-        DepKind::DeriveRegistrarFn => { force!(derive_registrar_fn, krate!()); }\n+        DepKind::ProcMacroDeclsStatic => { force!(proc_macro_decls_static, krate!()); }\n         DepKind::CrateDisambiguator => { force!(crate_disambiguator, krate!()); }\n         DepKind::CrateHash => { force!(crate_hash, krate!()); }\n         DepKind::OriginalCrateName => { force!(original_crate_name, krate!()); }"}, {"sha": "7a246af82e5fe7b14641324fcf9e17568e8629ae", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -24,7 +24,6 @@ use std::sync::mpsc::{Sender};\n use syntax_pos::{SpanData};\n use ty::TyCtxt;\n use dep_graph::{DepNode};\n-use proc_macro;\n use lazy_static;\n use session::Session;\n \n@@ -47,14 +46,13 @@ lazy_static! {\n }\n \n fn panic_hook(info: &panic::PanicInfo<'_>) {\n-    if !proc_macro::__internal::in_sess() {\n-        (*DEFAULT_HOOK)(info);\n+    (*DEFAULT_HOOK)(info);\n \n-        let backtrace = env::var_os(\"RUST_BACKTRACE\").map(|x| &x != \"0\").unwrap_or(false);\n+    let backtrace = env::var_os(\"RUST_BACKTRACE\").map(|x| &x != \"0\").unwrap_or(false);\n \n-        if backtrace {\n-            TyCtxt::try_print_query_stack();\n-        }\n+    if backtrace {\n+        TyCtxt::try_print_query_stack();\n+    }\n \n         #[cfg(windows)]\n         unsafe {\n@@ -66,7 +64,6 @@ fn panic_hook(info: &panic::PanicInfo<'_>) {\n                 DebugBreak();\n             }\n         }\n-    }\n }\n \n pub fn install_panic_hook() {"}, {"sha": "0fb2641a4f82e70242c0ebb43d7554075cf00ddf", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -157,7 +157,7 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         })\n         .collect();\n \n-    if let Some(id) = *tcx.sess.derive_registrar_fn.get() {\n+    if let Some(id) = *tcx.sess.proc_macro_decls_static.get() {\n         let def_id = tcx.hir.local_def_id(id);\n         reachable_non_generics.insert(def_id, SymbolExportLevel::C);\n     }"}, {"sha": "344a2525784720416e5f34ff396099184cb1b43a", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -257,9 +257,9 @@ fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n             return tcx.sess.generate_plugin_registrar_symbol(disambiguator);\n         }\n-        if *tcx.sess.derive_registrar_fn.get() == Some(id) {\n+        if *tcx.sess.proc_macro_decls_static.get() == Some(id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n-            return tcx.sess.generate_derive_registrar_symbol(disambiguator);\n+            return tcx.sess.generate_proc_macro_decls_symbol(disambiguator);\n         }\n     }\n "}, {"sha": "56e480208e1c39060cc61db6a3f7ee3c86df923e", "filename": "src/librustc_cratesio_shim/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_cratesio_shim%2Fsrc%2Flib.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -15,4 +15,5 @@\n \n extern crate bitflags;\n extern crate log;\n+extern crate proc_macro;\n extern crate unicode_width;"}, {"sha": "c1705ad2d58ff08f8dbcf1004a78769815b862da", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -62,7 +62,7 @@ use syntax::symbol::Symbol;\n use syntax_pos::{FileName, hygiene};\n use syntax_ext;\n \n-use derive_registrar;\n+use proc_macro_decls;\n use pretty::ReplaceBodyWithLoop;\n \n use profile;\n@@ -1066,7 +1066,7 @@ where\n             let num_crate_types = crate_types.len();\n             let is_proc_macro_crate = crate_types.contains(&config::CrateType::ProcMacro);\n             let is_test_crate = sess.opts.test;\n-            syntax_ext::proc_macro_registrar::modify(\n+            syntax_ext::proc_macro_decls::modify(\n                 &sess.parse_sess,\n                 &mut resolver,\n                 krate,\n@@ -1243,8 +1243,8 @@ where\n         .set(time(sess, \"looking for plugin registrar\", || {\n             plugin::build::find_plugin_registrar(sess.diagnostic(), &hir_map)\n         }));\n-    sess.derive_registrar_fn\n-        .set(derive_registrar::find(&hir_map));\n+    sess.proc_macro_decls_static\n+        .set(proc_macro_decls::find(&hir_map));\n \n     time(sess, \"loop checking\", || loops::check_crate(sess, &hir_map));\n "}, {"sha": "b063176d3cafae9f0048f6167fa4dca8fe72a3ad", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -127,7 +127,7 @@ mod test;\n pub mod profile;\n pub mod driver;\n pub mod pretty;\n-mod derive_registrar;\n+mod proc_macro_decls;\n \n pub mod target_features {\n     use syntax::ast;"}, {"sha": "136a27b1ced471812c491c045643d6db1c0bb02a", "filename": "src/librustc_driver/proc_macro_decls.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_driver%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_driver%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fproc_macro_decls.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -17,19 +17,19 @@ use syntax::attr;\n pub fn find(hir_map: &Map) -> Option<ast::NodeId> {\n     let krate = hir_map.krate();\n \n-    let mut finder = Finder { registrar: None };\n+    let mut finder = Finder { decls: None };\n     krate.visit_all_item_likes(&mut finder);\n-    finder.registrar\n+    finder.decls\n }\n \n struct Finder {\n-    registrar: Option<ast::NodeId>,\n+    decls: Option<ast::NodeId>,\n }\n \n impl<'v> ItemLikeVisitor<'v> for Finder {\n     fn visit_item(&mut self, item: &hir::Item) {\n-        if attr::contains_name(&item.attrs, \"rustc_derive_registrar\") {\n-            self.registrar = Some(item.id);\n+        if attr::contains_name(&item.attrs, \"rustc_proc_macro_decls\") {\n+            self.decls = Some(item.id);\n         }\n     }\n ", "previous_filename": "src/librustc_driver/derive_registrar.rs"}, {"sha": "337c87c24ba2b2ae0483d58576e722079fe86cbd", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -12,7 +12,6 @@ crate-type = [\"dylib\"]\n flate2 = \"1.0\"\n log = \"0.4\"\n memmap = \"0.6\"\n-proc_macro = { path = \"../libproc_macro\" }\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }"}, {"sha": "4ff29f5c04d41fa3385c0e17d29dae27c3db48ec", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 36, "deletions": 50, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -36,7 +36,6 @@ use std::{cmp, fs};\n \n use syntax::ast;\n use syntax::attr;\n-use syntax::edition::Edition;\n use syntax::ext::base::SyntaxExtension;\n use syntax::symbol::Symbol;\n use syntax::visit;\n@@ -231,7 +230,7 @@ impl<'a> CrateLoader<'a> {\n \n         let dependencies: Vec<CrateNum> = cnum_map.iter().cloned().collect();\n \n-        let proc_macros = crate_root.macro_derive_registrar.map(|_| {\n+        let proc_macros = crate_root.proc_macro_decls_static.map(|_| {\n             self.load_derive_macros(&crate_root, dylib.clone().map(|p| p.0), span)\n         });\n \n@@ -339,7 +338,7 @@ impl<'a> CrateLoader<'a> {\n         match result {\n             LoadResult::Previous(cnum) => {\n                 let data = self.cstore.get_crate_data(cnum);\n-                if data.root.macro_derive_registrar.is_some() {\n+                if data.root.proc_macro_decls_static.is_some() {\n                     dep_kind = DepKind::UnexportedMacrosOnly;\n                 }\n                 data.dep_kind.with_lock(|data_dep_kind| {\n@@ -431,7 +430,7 @@ impl<'a> CrateLoader<'a> {\n                           dep_kind: DepKind)\n                           -> cstore::CrateNumMap {\n         debug!(\"resolving deps of external crate\");\n-        if crate_root.macro_derive_registrar.is_some() {\n+        if crate_root.proc_macro_decls_static.is_some() {\n             return cstore::CrateNumMap::new();\n         }\n \n@@ -533,9 +532,8 @@ impl<'a> CrateLoader<'a> {\n     fn load_derive_macros(&mut self, root: &CrateRoot, dylib: Option<PathBuf>, span: Span)\n                           -> Vec<(ast::Name, Lrc<SyntaxExtension>)> {\n         use std::{env, mem};\n-        use proc_macro::TokenStream;\n-        use proc_macro::__internal::Registry;\n         use dynamic_lib::DynamicLibrary;\n+        use proc_macro::bridge::client::ProcMacro;\n         use syntax_ext::deriving::custom::ProcMacroDerive;\n         use syntax_ext::proc_macro_impl::{AttrProcMacro, BangProcMacro};\n \n@@ -550,61 +548,49 @@ impl<'a> CrateLoader<'a> {\n             Err(err) => self.sess.span_fatal(span, &err),\n         };\n \n-        let sym = self.sess.generate_derive_registrar_symbol(root.disambiguator);\n-        let registrar = unsafe {\n+        let sym = self.sess.generate_proc_macro_decls_symbol(root.disambiguator);\n+        let decls = unsafe {\n             let sym = match lib.symbol(&sym) {\n                 Ok(f) => f,\n                 Err(err) => self.sess.span_fatal(span, &err),\n             };\n-            mem::transmute::<*mut u8, fn(&mut dyn Registry)>(sym)\n+            *(sym as *const &[ProcMacro])\n         };\n \n-        struct MyRegistrar {\n-            extensions: Vec<(ast::Name, Lrc<SyntaxExtension>)>,\n-            edition: Edition,\n-        }\n-\n-        impl Registry for MyRegistrar {\n-            fn register_custom_derive(&mut self,\n-                                      trait_name: &str,\n-                                      expand: fn(TokenStream) -> TokenStream,\n-                                      attributes: &[&'static str]) {\n-                let attrs = attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();\n-                let derive = ProcMacroDerive::new(expand, attrs.clone());\n-                let derive = SyntaxExtension::ProcMacroDerive(\n-                    Box::new(derive), attrs, self.edition\n-                );\n-                self.extensions.push((Symbol::intern(trait_name), Lrc::new(derive)));\n-            }\n-\n-            fn register_attr_proc_macro(&mut self,\n-                                        name: &str,\n-                                        expand: fn(TokenStream, TokenStream) -> TokenStream) {\n-                let expand = SyntaxExtension::AttrProcMacro(\n-                    Box::new(AttrProcMacro { inner: expand }), self.edition\n-                );\n-                self.extensions.push((Symbol::intern(name), Lrc::new(expand)));\n-            }\n-\n-            fn register_bang_proc_macro(&mut self,\n-                                        name: &str,\n-                                        expand: fn(TokenStream) -> TokenStream) {\n-                let expand = SyntaxExtension::ProcMacro {\n-                    expander: Box::new(BangProcMacro { inner: expand }),\n-                    allow_internal_unstable: false,\n-                    edition: self.edition,\n-                };\n-                self.extensions.push((Symbol::intern(name), Lrc::new(expand)));\n+        let extensions = decls.iter().map(|&decl| {\n+            match decl {\n+                ProcMacro::CustomDerive { trait_name, attributes, client } => {\n+                    let attrs = attributes.iter().cloned().map(Symbol::intern).collect::<Vec<_>>();\n+                    (trait_name, SyntaxExtension::ProcMacroDerive(\n+                        Box::new(ProcMacroDerive {\n+                            client,\n+                            attrs: attrs.clone(),\n+                        }),\n+                        attrs,\n+                        root.edition,\n+                    ))\n+                }\n+                ProcMacro::Attr { name, client } => {\n+                    (name, SyntaxExtension::AttrProcMacro(\n+                        Box::new(AttrProcMacro { client }),\n+                        root.edition,\n+                    ))\n+                }\n+                ProcMacro::Bang { name, client } => {\n+                    (name, SyntaxExtension::ProcMacro {\n+                        expander: Box::new(BangProcMacro { client }),\n+                        allow_internal_unstable: false,\n+                        edition: root.edition,\n+                    })\n+                }\n             }\n-        }\n-\n-        let mut my_registrar = MyRegistrar { extensions: Vec::new(), edition: root.edition };\n-        registrar(&mut my_registrar);\n+        }).map(|(name, ext)| (Symbol::intern(name), Lrc::new(ext))).collect();\n \n         // Intentionally leak the dynamic library. We can't ever unload it\n         // since the library can make things that will live arbitrarily long.\n         mem::forget(lib);\n-        my_registrar.extensions\n+\n+        extensions\n     }\n \n     /// Look for a plugin registrar. Returns library path, crate"}, {"sha": "d0fa63a6163dbeb667d70afc69d8938b0c27cbec", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -203,8 +203,8 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n             DefId { krate: def_id.krate, index }\n         })\n     }\n-    derive_registrar_fn => {\n-        cdata.root.macro_derive_registrar.map(|index| {\n+    proc_macro_decls_static => {\n+        cdata.root.proc_macro_decls_static.map(|index| {\n             DefId { krate: def_id.krate, index }\n         })\n     }\n@@ -431,8 +431,9 @@ impl cstore::CStore {\n             use syntax::ext::base::SyntaxExtension;\n             use syntax_ext::proc_macro_impl::BangProcMacro;\n \n+            let client = ::proc_macro::bridge::client::Client::expand1(::proc_macro::quote);\n             let ext = SyntaxExtension::ProcMacro {\n-                expander: Box::new(BangProcMacro { inner: ::proc_macro::quote }),\n+                expander: Box::new(BangProcMacro { client }),\n                 allow_internal_unstable: true,\n                 edition: data.root.edition,\n             };"}, {"sha": "2736c60ffb6fa9412df5825925be77517bb89892", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -496,8 +496,8 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 .plugin_registrar_fn\n                 .get()\n                 .map(|id| tcx.hir.local_def_id(id).index),\n-            macro_derive_registrar: if is_proc_macro {\n-                let id = tcx.sess.derive_registrar_fn.get().unwrap();\n+            proc_macro_decls_static: if is_proc_macro {\n+                let id = tcx.sess.proc_macro_decls_static.get().unwrap();\n                 Some(tcx.hir.local_def_id(id).index)\n             } else {\n                 None"}, {"sha": "d4e51693d7edf818ecaa14291e3d2d810eeaf1fd", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -713,7 +713,7 @@ impl<'a> Context<'a> {\n \n         let root = metadata.get_root();\n         if let Some(is_proc_macro) = self.is_proc_macro {\n-            if root.macro_derive_registrar.is_some() != is_proc_macro {\n+            if root.proc_macro_decls_static.is_some() != is_proc_macro {\n                 return None;\n             }\n         }"}, {"sha": "e91d15b78c0759364d280d877dc2586c58f9b435", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -196,7 +196,7 @@ pub struct CrateRoot {\n     pub has_panic_handler: bool,\n     pub has_default_lib_allocator: bool,\n     pub plugin_registrar_fn: Option<DefIndex>,\n-    pub macro_derive_registrar: Option<DefIndex>,\n+    pub proc_macro_decls_static: Option<DefIndex>,\n \n     pub crate_deps: LazySeq<CrateDep>,\n     pub dylib_dependency_formats: LazySeq<Option<LinkagePreference>>,"}, {"sha": "c93abc39ff3b9f1237085c2c992bfc4ed562090b", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1122,8 +1122,8 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n     (\"proc_macro_attribute\", Normal, Ungated),\n     (\"proc_macro\", Normal, Ungated),\n \n-    (\"rustc_derive_registrar\", Normal, Gated(Stability::Unstable,\n-                                             \"rustc_derive_registrar\",\n+    (\"rustc_proc_macro_decls\", Normal, Gated(Stability::Unstable,\n+                                             \"rustc_proc_macro_decls\",\n                                              \"used internally by rustc\",\n                                              cfg_fn!(rustc_attrs))),\n "}, {"sha": "4979d0b3e92a4c4e2083c3c4eeaca4ea609fd7ba", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -10,7 +10,6 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n fmt_macros = { path = \"../libfmt_macros\" }\n-proc_macro = { path = \"../libproc_macro\" }\n rustc_errors = { path = \"../librustc_errors\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "5c82d1911383ee3bee9761e90feac47e4d321a48", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 38, "deletions": 31, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,15 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::panic;\n-\n use errors::FatalError;\n-use proc_macro::{TokenStream, __internal};\n use syntax::ast::{self, ItemKind, Attribute, Mac};\n use syntax::attr::{mark_used, mark_known};\n use syntax::source_map::Span;\n use syntax::ext::base::*;\n+use syntax::parse;\n+use syntax::parse::token::{self, Token};\n+use syntax::tokenstream;\n use syntax::visit::Visitor;\n+use syntax_pos::DUMMY_SP;\n+\n+use proc_macro_impl::EXEC_STRATEGY;\n \n struct MarkAttrs<'a>(&'a [ast::Name]);\n \n@@ -32,14 +35,10 @@ impl<'a> Visitor<'a> for MarkAttrs<'a> {\n }\n \n pub struct ProcMacroDerive {\n-    inner: fn(TokenStream) -> TokenStream,\n-    attrs: Vec<ast::Name>,\n-}\n-\n-impl ProcMacroDerive {\n-    pub fn new(inner: fn(TokenStream) -> TokenStream, attrs: Vec<ast::Name>) -> ProcMacroDerive {\n-        ProcMacroDerive { inner: inner, attrs: attrs }\n-    }\n+    pub client: ::proc_macro::bridge::client::Client<\n+        fn(::proc_macro::TokenStream) -> ::proc_macro::TokenStream,\n+    >,\n+    pub attrs: Vec<ast::Name>,\n }\n \n impl MultiItemModifier for ProcMacroDerive {\n@@ -75,21 +74,17 @@ impl MultiItemModifier for ProcMacroDerive {\n         // Mark attributes as known, and used.\n         MarkAttrs(&self.attrs).visit_item(&item);\n \n-        let input = __internal::new_token_stream(ecx.resolver.eliminate_crate_var(item));\n-        let res = __internal::set_sess(ecx, || {\n-            let inner = self.inner;\n-            panic::catch_unwind(panic::AssertUnwindSafe(|| inner(input)))\n-        });\n+        let item = ecx.resolver.eliminate_crate_var(item);\n+        let token = Token::interpolated(token::NtItem(item));\n+        let input = tokenstream::TokenTree::Token(DUMMY_SP, token).into();\n \n-        let stream = match res {\n+        let server = ::proc_macro_server::Rustc::new(ecx);\n+        let stream = match self.client.run(&EXEC_STRATEGY, server, input) {\n             Ok(stream) => stream,\n             Err(e) => {\n                 let msg = \"proc-macro derive panicked\";\n                 let mut err = ecx.struct_span_fatal(span, msg);\n-                if let Some(s) = e.downcast_ref::<String>() {\n-                    err.help(&format!(\"message: {}\", s));\n-                }\n-                if let Some(s) = e.downcast_ref::<&'static str>() {\n+                if let Some(s) = e.as_str() {\n                     err.help(&format!(\"message: {}\", s));\n                 }\n \n@@ -99,21 +94,33 @@ impl MultiItemModifier for ProcMacroDerive {\n         };\n \n         let error_count_before = ecx.parse_sess.span_diagnostic.err_count();\n-        __internal::set_sess(ecx, || {\n-            let msg = \"proc-macro derive produced unparseable tokens\";\n-            match __internal::token_stream_parse_items(stream) {\n-                // fail if there have been errors emitted\n-                Ok(_) if ecx.parse_sess.span_diagnostic.err_count() > error_count_before => {\n-                    ecx.struct_span_fatal(span, msg).emit();\n-                    FatalError.raise();\n+        let msg = \"proc-macro derive produced unparseable tokens\";\n+\n+        let mut parser = parse::stream_to_parser(ecx.parse_sess, stream);\n+        let mut items = vec![];\n+\n+        loop {\n+            match parser.parse_item() {\n+                Ok(None) => break,\n+                Ok(Some(item)) => {\n+                    items.push(Annotatable::Item(item))\n                 }\n-                Ok(new_items) => new_items.into_iter().map(Annotatable::Item).collect(),\n-                Err(_) => {\n+                Err(mut err) => {\n                     // FIXME: handle this better\n+                    err.cancel();\n                     ecx.struct_span_fatal(span, msg).emit();\n                     FatalError.raise();\n                 }\n             }\n-        })\n+        }\n+\n+\n+        // fail if there have been errors emitted\n+        if ecx.parse_sess.span_diagnostic.err_count() > error_count_before {\n+            ecx.struct_span_fatal(span, msg).emit();\n+            FatalError.raise();\n+        }\n+\n+        items\n     }\n }"}, {"sha": "1d814a67876b8baed1b5ae765164273f0cab52f0", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -14,7 +14,10 @@\n        html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n+#![feature(in_band_lifetimes)]\n+#![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]\n+#![feature(proc_macro_span)]\n #![feature(decl_macro)]\n #![feature(nll)]\n #![feature(str_escape)]\n@@ -55,10 +58,9 @@ mod trace_macros;\n mod test;\n mod test_case;\n \n-pub mod proc_macro_registrar;\n-\n-\n+pub mod proc_macro_decls;\n pub mod proc_macro_impl;\n+mod proc_macro_server;\n \n use rustc_data_structures::sync::Lrc;\n use syntax::ast;"}, {"sha": "c859275ed020cb727394890071ceab5c76474a99", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "renamed", "additions": 68, "deletions": 74, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -91,7 +91,7 @@ pub fn modify(sess: &ParseSess,\n         return krate;\n     }\n \n-    krate.module.items.push(mk_registrar(&mut cx, &derives, &attr_macros, &bang_macros));\n+    krate.module.items.push(mk_decls(&mut cx, &derives, &attr_macros, &bang_macros));\n \n     krate\n }\n@@ -339,19 +339,21 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n //      mod $gensym {\n //          extern crate proc_macro;\n //\n-//          use proc_macro::__internal::Registry;\n+//          use proc_macro::bridge::client::ProcMacro;\n //\n-//          #[plugin_registrar]\n-//          fn registrar(registrar: &mut Registry) {\n-//              registrar.register_custom_derive($name_trait1, ::$name1, &[]);\n-//              registrar.register_custom_derive($name_trait2, ::$name2, &[\"attribute_name\"]);\n+//          #[rustc_proc_macro_decls]\n+//          static DECLS: &[ProcMacro] = &[\n+//              ProcMacro::custom_derive($name_trait1, &[], ::$name1);\n+//              ProcMacro::custom_derive($name_trait2, &[\"attribute_name\"], ::$name2);\n //              // ...\n-//          }\n+//          ];\n //      }\n-fn mk_registrar(cx: &mut ExtCtxt,\n-                custom_derives: &[ProcMacroDerive],\n-                custom_attrs: &[ProcMacroDef],\n-                custom_macros: &[ProcMacroDef]) -> P<ast::Item> {\n+fn mk_decls(\n+    cx: &mut ExtCtxt,\n+    custom_derives: &[ProcMacroDerive],\n+    custom_attrs: &[ProcMacroDef],\n+    custom_macros: &[ProcMacroDef],\n+) -> P<ast::Item> {\n     let mark = Mark::fresh(Mark::root());\n     mark.set_expn_info(ExpnInfo {\n         call_site: DUMMY_SP,\n@@ -370,75 +372,67 @@ fn mk_registrar(cx: &mut ExtCtxt,\n                         Vec::new(),\n                         ast::ItemKind::ExternCrate(None));\n \n-    let __internal = Ident::from_str(\"__internal\");\n-    let registry = Ident::from_str(\"Registry\");\n-    let registrar = Ident::from_str(\"_registrar\");\n-    let register_custom_derive = Ident::from_str(\"register_custom_derive\");\n-    let register_attr_proc_macro = Ident::from_str(\"register_attr_proc_macro\");\n-    let register_bang_proc_macro = Ident::from_str(\"register_bang_proc_macro\");\n+    let bridge = Ident::from_str(\"bridge\");\n+    let client = Ident::from_str(\"client\");\n+    let proc_macro_ty = Ident::from_str(\"ProcMacro\");\n+    let custom_derive = Ident::from_str(\"custom_derive\");\n+    let attr = Ident::from_str(\"attr\");\n+    let bang = Ident::from_str(\"bang\");\n     let crate_kw = Ident::with_empty_ctxt(keywords::Crate.name());\n-    let local_path = |cx: &mut ExtCtxt, sp: Span, name: Ident| {\n-        cx.path(sp.with_ctxt(span.ctxt()), vec![crate_kw, name])\n+\n+    let decls = {\n+        let local_path = |sp: Span, name| {\n+            cx.expr_path(cx.path(sp.with_ctxt(span.ctxt()), vec![crate_kw, name]))\n+        };\n+        let proc_macro_ty_method_path = |method| cx.expr_path(cx.path(span, vec![\n+            proc_macro, bridge, client, proc_macro_ty, method,\n+        ]));\n+        custom_derives.iter().map(|cd| {\n+            cx.expr_call(span, proc_macro_ty_method_path(custom_derive), vec![\n+                cx.expr_str(cd.span, cd.trait_name),\n+                cx.expr_vec_slice(\n+                    span,\n+                    cd.attrs.iter().map(|&s| cx.expr_str(cd.span, s)).collect::<Vec<_>>()\n+                ),\n+                local_path(cd.span, cd.function_name),\n+            ])\n+        }).chain(custom_attrs.iter().map(|ca| {\n+            cx.expr_call(span, proc_macro_ty_method_path(attr), vec![\n+                cx.expr_str(ca.span, ca.function_name.name),\n+                local_path(ca.span, ca.function_name),\n+            ])\n+        })).chain(custom_macros.iter().map(|cm| {\n+            cx.expr_call(span, proc_macro_ty_method_path(bang), vec![\n+                cx.expr_str(cm.span, cm.function_name.name),\n+                local_path(cm.span, cm.function_name),\n+            ])\n+        })).collect()\n     };\n \n-    let mut stmts = custom_derives.iter().map(|cd| {\n-        let path = local_path(cx, cd.span, cd.function_name);\n-        let trait_name = cx.expr_str(cd.span, cd.trait_name);\n-        let attrs = cx.expr_vec_slice(\n-            span,\n-            cd.attrs.iter().map(|&s| cx.expr_str(cd.span, s)).collect::<Vec<_>>()\n-        );\n-        let registrar = cx.expr_ident(span, registrar);\n-        let ufcs_path = cx.path(span, vec![proc_macro, __internal, registry,\n-                                           register_custom_derive]);\n-\n-        cx.stmt_expr(cx.expr_call(span, cx.expr_path(ufcs_path),\n-                                  vec![registrar, trait_name, cx.expr_path(path), attrs]))\n-\n-    }).collect::<Vec<_>>();\n-\n-    stmts.extend(custom_attrs.iter().map(|ca| {\n-        let name = cx.expr_str(ca.span, ca.function_name.name);\n-        let path = local_path(cx, ca.span, ca.function_name);\n-        let registrar = cx.expr_ident(ca.span, registrar);\n-\n-        let ufcs_path = cx.path(span,\n-                                vec![proc_macro, __internal, registry, register_attr_proc_macro]);\n-\n-        cx.stmt_expr(cx.expr_call(span, cx.expr_path(ufcs_path),\n-                                  vec![registrar, name, cx.expr_path(path)]))\n-    }));\n-\n-    stmts.extend(custom_macros.iter().map(|cm| {\n-        let name = cx.expr_str(cm.span, cm.function_name.name);\n-        let path = local_path(cx, cm.span, cm.function_name);\n-        let registrar = cx.expr_ident(cm.span, registrar);\n-\n-        let ufcs_path = cx.path(span,\n-                                vec![proc_macro, __internal, registry, register_bang_proc_macro]);\n-\n-        cx.stmt_expr(cx.expr_call(span, cx.expr_path(ufcs_path),\n-                                  vec![registrar, name, cx.expr_path(path)]))\n-    }));\n-\n-    let path = cx.path(span, vec![proc_macro, __internal, registry]);\n-    let registrar_path = cx.ty_path(path);\n-    let arg_ty = cx.ty_rptr(span, registrar_path, None, ast::Mutability::Mutable);\n-    let func = cx.item_fn(span,\n-                          registrar,\n-                          vec![cx.arg(span, registrar, arg_ty)],\n-                          cx.ty(span, ast::TyKind::Tup(Vec::new())),\n-                          cx.block(span, stmts));\n-\n-    let derive_registrar = cx.meta_word(span, Symbol::intern(\"rustc_derive_registrar\"));\n-    let derive_registrar = cx.attribute(span, derive_registrar);\n-    let func = func.map(|mut i| {\n-        i.attrs.push(derive_registrar);\n+    let decls_static = cx.item_static(\n+        span,\n+        Ident::from_str(\"_DECLS\"),\n+        cx.ty_rptr(span,\n+            cx.ty(span, ast::TyKind::Slice(\n+                cx.ty_path(cx.path(span,\n+                    vec![proc_macro, bridge, client, proc_macro_ty])))),\n+            None, ast::Mutability::Immutable),\n+        ast::Mutability::Immutable,\n+        cx.expr_vec_slice(span, decls),\n+    ).map(|mut i| {\n+        let attr = cx.meta_word(span, Symbol::intern(\"rustc_proc_macro_decls\"));\n+        i.attrs.push(cx.attribute(span, attr));\n         i.vis = respan(span, ast::VisibilityKind::Public);\n         i\n     });\n-    let ident = ast::Ident::with_empty_ctxt(Symbol::gensym(\"registrar\"));\n-    let module = cx.item_mod(span, span, ident, Vec::new(), vec![krate, func]).map(|mut i| {\n+\n+    let module = cx.item_mod(\n+        span,\n+        span,\n+        ast::Ident::with_empty_ctxt(Symbol::gensym(\"decls\")),\n+        vec![],\n+        vec![krate, decls_static],\n+    ).map(|mut i| {\n         i.vis = respan(span, ast::VisibilityKind::Public);\n         i\n     });", "previous_filename": "src/libsyntax_ext/proc_macro_registrar.rs"}, {"sha": "43ef31a00baa59c4aa5c32b9c8ef0f8aad287184", "filename": "src/libsyntax_ext/proc_macro_impl.rs", "status": "modified", "additions": 16, "deletions": 30, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibsyntax_ext%2Fproc_macro_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibsyntax_ext%2Fproc_macro_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_impl.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::panic;\n \n use errors::FatalError;\n \n@@ -17,11 +16,13 @@ use syntax::ext::base::*;\n use syntax::tokenstream::TokenStream;\n use syntax::ext::base;\n \n-use proc_macro::TokenStream as TsShim;\n-use proc_macro::__internal;\n+pub const EXEC_STRATEGY: ::proc_macro::bridge::server::SameThread =\n+    ::proc_macro::bridge::server::SameThread;\n \n pub struct AttrProcMacro {\n-    pub inner: fn(TsShim, TsShim) -> TsShim,\n+    pub client: ::proc_macro::bridge::client::Client<\n+        fn(::proc_macro::TokenStream, ::proc_macro::TokenStream) -> ::proc_macro::TokenStream,\n+    >,\n }\n \n impl base::AttrProcMacro for AttrProcMacro {\n@@ -31,22 +32,13 @@ impl base::AttrProcMacro for AttrProcMacro {\n                    annotation: TokenStream,\n                    annotated: TokenStream)\n                    -> TokenStream {\n-        let annotation = __internal::token_stream_wrap(annotation);\n-        let annotated = __internal::token_stream_wrap(annotated);\n-\n-        let res = __internal::set_sess(ecx, || {\n-            panic::catch_unwind(panic::AssertUnwindSafe(|| (self.inner)(annotation, annotated)))\n-        });\n-\n-        match res {\n-            Ok(stream) => __internal::token_stream_inner(stream),\n+        let server = ::proc_macro_server::Rustc::new(ecx);\n+        match self.client.run(&EXEC_STRATEGY, server, annotation, annotated) {\n+            Ok(stream) => stream,\n             Err(e) => {\n                 let msg = \"custom attribute panicked\";\n                 let mut err = ecx.struct_span_fatal(span, msg);\n-                if let Some(s) = e.downcast_ref::<String>() {\n-                    err.help(&format!(\"message: {}\", s));\n-                }\n-                if let Some(s) = e.downcast_ref::<&'static str>() {\n+                if let Some(s) = e.as_str() {\n                     err.help(&format!(\"message: {}\", s));\n                 }\n \n@@ -58,7 +50,9 @@ impl base::AttrProcMacro for AttrProcMacro {\n }\n \n pub struct BangProcMacro {\n-    pub inner: fn(TsShim) -> TsShim,\n+    pub client: ::proc_macro::bridge::client::Client<\n+        fn(::proc_macro::TokenStream) -> ::proc_macro::TokenStream,\n+    >,\n }\n \n impl base::ProcMacro for BangProcMacro {\n@@ -67,21 +61,13 @@ impl base::ProcMacro for BangProcMacro {\n                    span: Span,\n                    input: TokenStream)\n                    -> TokenStream {\n-        let input = __internal::token_stream_wrap(input);\n-\n-        let res = __internal::set_sess(ecx, || {\n-            panic::catch_unwind(panic::AssertUnwindSafe(|| (self.inner)(input)))\n-        });\n-\n-        match res {\n-            Ok(stream) => __internal::token_stream_inner(stream),\n+        let server = ::proc_macro_server::Rustc::new(ecx);\n+        match self.client.run(&EXEC_STRATEGY, server, input) {\n+            Ok(stream) => stream,\n             Err(e) => {\n                 let msg = \"proc macro panicked\";\n                 let mut err = ecx.struct_span_fatal(span, msg);\n-                if let Some(s) = e.downcast_ref::<String>() {\n-                    err.help(&format!(\"message: {}\", s));\n-                }\n-                if let Some(s) = e.downcast_ref::<&'static str>() {\n+                if let Some(s) = e.as_str() {\n                     err.help(&format!(\"message: {}\", s));\n                 }\n "}, {"sha": "56bd58b28a66e6553f4faf95dfe10153daf4247e", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "added", "additions": 751, "deletions": 0, "changes": 751, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -0,0 +1,751 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use errors::{self, Diagnostic, DiagnosticBuilder};\n+use std::panic;\n+\n+use proc_macro::bridge::{server, TokenTree};\n+use proc_macro::{Delimiter, Level, LineColumn, Spacing};\n+\n+use rustc_data_structures::sync::Lrc;\n+use std::ascii;\n+use std::ops::Bound;\n+use syntax::ast;\n+use syntax::ext::base::ExtCtxt;\n+use syntax::parse::lexer::comments;\n+use syntax::parse::{self, token, ParseSess};\n+use syntax::tokenstream::{self, DelimSpan, TokenStream};\n+use syntax_pos::hygiene::{SyntaxContext, Transparency};\n+use syntax_pos::symbol::{keywords, Symbol};\n+use syntax_pos::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n+\n+trait FromInternal<T> {\n+    fn from_internal(x: T) -> Self;\n+}\n+\n+trait ToInternal<T> {\n+    fn to_internal(self) -> T;\n+}\n+\n+impl FromInternal<token::DelimToken> for Delimiter {\n+    fn from_internal(delim: token::DelimToken) -> Delimiter {\n+        match delim {\n+            token::Paren => Delimiter::Parenthesis,\n+            token::Brace => Delimiter::Brace,\n+            token::Bracket => Delimiter::Bracket,\n+            token::NoDelim => Delimiter::None,\n+        }\n+    }\n+}\n+\n+impl ToInternal<token::DelimToken> for Delimiter {\n+    fn to_internal(self) -> token::DelimToken {\n+        match self {\n+            Delimiter::Parenthesis => token::Paren,\n+            Delimiter::Brace => token::Brace,\n+            Delimiter::Bracket => token::Bracket,\n+            Delimiter::None => token::NoDelim,\n+        }\n+    }\n+}\n+\n+impl FromInternal<(TokenStream, &'_ ParseSess, &'_ mut Vec<Self>)>\n+    for TokenTree<Group, Punct, Ident, Literal>\n+{\n+    fn from_internal((stream, sess, stack): (TokenStream, &ParseSess, &mut Vec<Self>)) -> Self {\n+        use syntax::parse::token::*;\n+\n+        let (tree, joint) = stream.as_tree();\n+        let (span, token) = match tree {\n+            tokenstream::TokenTree::Delimited(span, delimed) => {\n+                let delimiter = Delimiter::from_internal(delimed.delim);\n+                return TokenTree::Group(Group {\n+                    delimiter,\n+                    stream: delimed.tts.into(),\n+                    span,\n+                });\n+            }\n+            tokenstream::TokenTree::Token(span, token) => (span, token),\n+        };\n+\n+        macro_rules! tt {\n+            ($ty:ident { $($field:ident $(: $value:expr)*),+ $(,)* }) => (\n+                TokenTree::$ty(self::$ty {\n+                    $($field $(: $value)*,)*\n+                    span,\n+                })\n+            )\n+        }\n+        macro_rules! op {\n+            ($a:expr) => {\n+                tt!(Punct { ch: $a, joint })\n+            };\n+            ($a:expr, $b:expr) => {{\n+                stack.push(tt!(Punct { ch: $b, joint }));\n+                tt!(Punct {\n+                    ch: $a,\n+                    joint: true\n+                })\n+            }};\n+            ($a:expr, $b:expr, $c:expr) => {{\n+                stack.push(tt!(Punct { ch: $c, joint }));\n+                stack.push(tt!(Punct {\n+                    ch: $b,\n+                    joint: true\n+                }));\n+                tt!(Punct {\n+                    ch: $a,\n+                    joint: true\n+                })\n+            }};\n+        }\n+\n+        match token {\n+            Eq => op!('='),\n+            Lt => op!('<'),\n+            Le => op!('<', '='),\n+            EqEq => op!('=', '='),\n+            Ne => op!('!', '='),\n+            Ge => op!('>', '='),\n+            Gt => op!('>'),\n+            AndAnd => op!('&', '&'),\n+            OrOr => op!('|', '|'),\n+            Not => op!('!'),\n+            Tilde => op!('~'),\n+            BinOp(Plus) => op!('+'),\n+            BinOp(Minus) => op!('-'),\n+            BinOp(Star) => op!('*'),\n+            BinOp(Slash) => op!('/'),\n+            BinOp(Percent) => op!('%'),\n+            BinOp(Caret) => op!('^'),\n+            BinOp(And) => op!('&'),\n+            BinOp(Or) => op!('|'),\n+            BinOp(Shl) => op!('<', '<'),\n+            BinOp(Shr) => op!('>', '>'),\n+            BinOpEq(Plus) => op!('+', '='),\n+            BinOpEq(Minus) => op!('-', '='),\n+            BinOpEq(Star) => op!('*', '='),\n+            BinOpEq(Slash) => op!('/', '='),\n+            BinOpEq(Percent) => op!('%', '='),\n+            BinOpEq(Caret) => op!('^', '='),\n+            BinOpEq(And) => op!('&', '='),\n+            BinOpEq(Or) => op!('|', '='),\n+            BinOpEq(Shl) => op!('<', '<', '='),\n+            BinOpEq(Shr) => op!('>', '>', '='),\n+            At => op!('@'),\n+            Dot => op!('.'),\n+            DotDot => op!('.', '.'),\n+            DotDotDot => op!('.', '.', '.'),\n+            DotDotEq => op!('.', '.', '='),\n+            Comma => op!(','),\n+            Semi => op!(';'),\n+            Colon => op!(':'),\n+            ModSep => op!(':', ':'),\n+            RArrow => op!('-', '>'),\n+            LArrow => op!('<', '-'),\n+            FatArrow => op!('=', '>'),\n+            Pound => op!('#'),\n+            Dollar => op!('$'),\n+            Question => op!('?'),\n+            SingleQuote => op!('\\''),\n+\n+            Ident(ident, is_raw) => tt!(Ident {\n+                sym: ident.name,\n+                is_raw\n+            }),\n+            Lifetime(ident) => {\n+                let ident = ident.without_first_quote();\n+                stack.push(tt!(Ident {\n+                    sym: ident.name,\n+                    is_raw: false\n+                }));\n+                tt!(Punct {\n+                    ch: '\\'',\n+                    joint: true\n+                })\n+            }\n+            Literal(lit, suffix) => tt!(Literal { lit, suffix }),\n+            DocComment(c) => {\n+                let style = comments::doc_comment_style(&c.as_str());\n+                let stripped = comments::strip_doc_comment_decoration(&c.as_str());\n+                let mut escaped = String::new();\n+                for ch in stripped.chars() {\n+                    escaped.extend(ch.escape_debug());\n+                }\n+                let stream = vec![\n+                    Ident(ast::Ident::new(Symbol::intern(\"doc\"), span), false),\n+                    Eq,\n+                    Literal(Lit::Str_(Symbol::intern(&escaped)), None),\n+                ]\n+                .into_iter()\n+                .map(|token| tokenstream::TokenTree::Token(span, token))\n+                .collect();\n+                stack.push(TokenTree::Group(Group {\n+                    delimiter: Delimiter::Bracket,\n+                    stream,\n+                    span: DelimSpan::from_single(span),\n+                }));\n+                if style == ast::AttrStyle::Inner {\n+                    stack.push(tt!(Punct {\n+                        ch: '!',\n+                        joint: false\n+                    }));\n+                }\n+                tt!(Punct {\n+                    ch: '#',\n+                    joint: false\n+                })\n+            }\n+\n+            Interpolated(_) => {\n+                let stream = token.interpolated_to_tokenstream(sess, span);\n+                TokenTree::Group(Group {\n+                    delimiter: Delimiter::None,\n+                    stream,\n+                    span: DelimSpan::from_single(span),\n+                })\n+            }\n+\n+            DotEq => op!('.', '='),\n+            OpenDelim(..) | CloseDelim(..) => unreachable!(),\n+            Whitespace | Comment | Shebang(..) | Eof => unreachable!(),\n+        }\n+    }\n+}\n+\n+impl ToInternal<TokenStream> for TokenTree<Group, Punct, Ident, Literal> {\n+    fn to_internal(self) -> TokenStream {\n+        use syntax::parse::token::*;\n+\n+        let (ch, joint, span) = match self {\n+            TokenTree::Punct(Punct { ch, joint, span }) => (ch, joint, span),\n+            TokenTree::Group(Group {\n+                delimiter,\n+                stream,\n+                span,\n+            }) => {\n+                return tokenstream::TokenTree::Delimited(\n+                    span,\n+                    tokenstream::Delimited {\n+                        delim: delimiter.to_internal(),\n+                        tts: stream.into(),\n+                    },\n+                )\n+                .into();\n+            }\n+            TokenTree::Ident(self::Ident { sym, span, is_raw }) => {\n+                let token = Ident(ast::Ident::new(sym, span), is_raw);\n+                return tokenstream::TokenTree::Token(span, token).into();\n+            }\n+            TokenTree::Literal(self::Literal {\n+                lit: Lit::Integer(ref a),\n+                suffix,\n+                span,\n+            }) if a.as_str().starts_with(\"-\") => {\n+                let minus = BinOp(BinOpToken::Minus);\n+                let integer = Symbol::intern(&a.as_str()[1..]);\n+                let integer = Literal(Lit::Integer(integer), suffix);\n+                let a = tokenstream::TokenTree::Token(span, minus);\n+                let b = tokenstream::TokenTree::Token(span, integer);\n+                return vec![a, b].into_iter().collect();\n+            }\n+            TokenTree::Literal(self::Literal {\n+                lit: Lit::Float(ref a),\n+                suffix,\n+                span,\n+            }) if a.as_str().starts_with(\"-\") => {\n+                let minus = BinOp(BinOpToken::Minus);\n+                let float = Symbol::intern(&a.as_str()[1..]);\n+                let float = Literal(Lit::Float(float), suffix);\n+                let a = tokenstream::TokenTree::Token(span, minus);\n+                let b = tokenstream::TokenTree::Token(span, float);\n+                return vec![a, b].into_iter().collect();\n+            }\n+            TokenTree::Literal(self::Literal { lit, suffix, span }) => {\n+                return tokenstream::TokenTree::Token(span, Literal(lit, suffix)).into()\n+            }\n+        };\n+\n+        let token = match ch {\n+            '=' => Eq,\n+            '<' => Lt,\n+            '>' => Gt,\n+            '!' => Not,\n+            '~' => Tilde,\n+            '+' => BinOp(Plus),\n+            '-' => BinOp(Minus),\n+            '*' => BinOp(Star),\n+            '/' => BinOp(Slash),\n+            '%' => BinOp(Percent),\n+            '^' => BinOp(Caret),\n+            '&' => BinOp(And),\n+            '|' => BinOp(Or),\n+            '@' => At,\n+            '.' => Dot,\n+            ',' => Comma,\n+            ';' => Semi,\n+            ':' => Colon,\n+            '#' => Pound,\n+            '$' => Dollar,\n+            '?' => Question,\n+            '\\'' => SingleQuote,\n+            _ => unreachable!(),\n+        };\n+\n+        let tree = tokenstream::TokenTree::Token(span, token);\n+        if joint {\n+            tree.joint()\n+        } else {\n+            tree.into()\n+        }\n+    }\n+}\n+\n+impl ToInternal<errors::Level> for Level {\n+    fn to_internal(self) -> errors::Level {\n+        match self {\n+            Level::Error => errors::Level::Error,\n+            Level::Warning => errors::Level::Warning,\n+            Level::Note => errors::Level::Note,\n+            Level::Help => errors::Level::Help,\n+            _ => unreachable!(\"unknown proc_macro::Level variant: {:?}\", self),\n+        }\n+    }\n+}\n+\n+#[derive(Clone)]\n+pub struct TokenStreamIter {\n+    cursor: tokenstream::Cursor,\n+    stack: Vec<TokenTree<Group, Punct, Ident, Literal>>,\n+}\n+\n+#[derive(Clone)]\n+pub struct Group {\n+    delimiter: Delimiter,\n+    stream: TokenStream,\n+    span: DelimSpan,\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct Punct {\n+    ch: char,\n+    // NB. not using `Spacing` here because it doesn't implement `Hash`.\n+    joint: bool,\n+    span: Span,\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct Ident {\n+    sym: Symbol,\n+    span: Span,\n+    is_raw: bool,\n+}\n+\n+// FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n+#[derive(Clone, Debug)]\n+pub struct Literal {\n+    lit: token::Lit,\n+    suffix: Option<Symbol>,\n+    span: Span,\n+}\n+\n+pub(crate) struct Rustc<'a> {\n+    sess: &'a ParseSess,\n+    def_site: Span,\n+    call_site: Span,\n+}\n+\n+impl<'a> Rustc<'a> {\n+    pub fn new(cx: &'a ExtCtxt) -> Self {\n+        // No way to determine def location for a proc macro right now, so use call location.\n+        let location = cx.current_expansion.mark.expn_info().unwrap().call_site;\n+        let to_span = |transparency| {\n+            location.with_ctxt(\n+                SyntaxContext::empty()\n+                    .apply_mark_with_transparency(cx.current_expansion.mark, transparency),\n+            )\n+        };\n+        Rustc {\n+            sess: cx.parse_sess,\n+            def_site: to_span(Transparency::Opaque),\n+            call_site: to_span(Transparency::Transparent),\n+        }\n+    }\n+}\n+\n+impl server::Types for Rustc<'_> {\n+    type TokenStream = TokenStream;\n+    type TokenStreamBuilder = tokenstream::TokenStreamBuilder;\n+    type TokenStreamIter = TokenStreamIter;\n+    type Group = Group;\n+    type Punct = Punct;\n+    type Ident = Ident;\n+    type Literal = Literal;\n+    type SourceFile = Lrc<SourceFile>;\n+    type MultiSpan = Vec<Span>;\n+    type Diagnostic = Diagnostic;\n+    type Span = Span;\n+}\n+\n+impl server::TokenStream for Rustc<'_> {\n+    fn new(&mut self) -> Self::TokenStream {\n+        TokenStream::empty()\n+    }\n+    fn is_empty(&mut self, stream: &Self::TokenStream) -> bool {\n+        stream.is_empty()\n+    }\n+    fn from_str(&mut self, src: &str) -> Self::TokenStream {\n+        parse::parse_stream_from_source_str(\n+            FileName::ProcMacroSourceCode,\n+            src.to_string(),\n+            self.sess,\n+            Some(self.call_site),\n+        )\n+    }\n+    fn to_string(&mut self, stream: &Self::TokenStream) -> String {\n+        stream.to_string()\n+    }\n+    fn from_token_tree(\n+        &mut self,\n+        tree: TokenTree<Self::Group, Self::Punct, Self::Ident, Self::Literal>,\n+    ) -> Self::TokenStream {\n+        tree.to_internal()\n+    }\n+    fn into_iter(&mut self, stream: Self::TokenStream) -> Self::TokenStreamIter {\n+        TokenStreamIter {\n+            cursor: stream.trees(),\n+            stack: vec![],\n+        }\n+    }\n+}\n+\n+impl server::TokenStreamBuilder for Rustc<'_> {\n+    fn new(&mut self) -> Self::TokenStreamBuilder {\n+        tokenstream::TokenStreamBuilder::new()\n+    }\n+    fn push(&mut self, builder: &mut Self::TokenStreamBuilder, stream: Self::TokenStream) {\n+        builder.push(stream);\n+    }\n+    fn build(&mut self, builder: Self::TokenStreamBuilder) -> Self::TokenStream {\n+        builder.build()\n+    }\n+}\n+\n+impl server::TokenStreamIter for Rustc<'_> {\n+    fn next(\n+        &mut self,\n+        iter: &mut Self::TokenStreamIter,\n+    ) -> Option<TokenTree<Self::Group, Self::Punct, Self::Ident, Self::Literal>> {\n+        loop {\n+            let tree = iter.stack.pop().or_else(|| {\n+                let next = iter.cursor.next_as_stream()?;\n+                Some(TokenTree::from_internal((next, self.sess, &mut iter.stack)))\n+            })?;\n+            // HACK: The condition \"dummy span + group with empty delimiter\" represents an AST\n+            // fragment approximately converted into a token stream. This may happen, for\n+            // example, with inputs to proc macro attributes, including derives. Such \"groups\"\n+            // need to flattened during iteration over stream's token trees.\n+            // Eventually this needs to be removed in favor of keeping original token trees\n+            // and not doing the roundtrip through AST.\n+            if let TokenTree::Group(ref group) = tree {\n+                if group.delimiter == Delimiter::None && group.span.entire().is_dummy() {\n+                    iter.cursor.insert(group.stream.clone());\n+                    continue;\n+                }\n+            }\n+            return Some(tree);\n+        }\n+    }\n+}\n+\n+impl server::Group for Rustc<'_> {\n+    fn new(&mut self, delimiter: Delimiter, stream: Self::TokenStream) -> Self::Group {\n+        Group {\n+            delimiter,\n+            stream,\n+            span: DelimSpan::from_single(server::Span::call_site(self)),\n+        }\n+    }\n+    fn delimiter(&mut self, group: &Self::Group) -> Delimiter {\n+        group.delimiter\n+    }\n+    fn stream(&mut self, group: &Self::Group) -> Self::TokenStream {\n+        group.stream.clone()\n+    }\n+    fn span(&mut self, group: &Self::Group) -> Self::Span {\n+        group.span.entire()\n+    }\n+    fn span_open(&mut self, group: &Self::Group) -> Self::Span {\n+        group.span.open\n+    }\n+    fn span_close(&mut self, group: &Self::Group) -> Self::Span {\n+        group.span.close\n+    }\n+    fn set_span(&mut self, group: &mut Self::Group, span: Self::Span) {\n+        group.span = DelimSpan::from_single(span);\n+    }\n+}\n+\n+impl server::Punct for Rustc<'_> {\n+    fn new(&mut self, ch: char, spacing: Spacing) -> Self::Punct {\n+        Punct {\n+            ch,\n+            joint: spacing == Spacing::Joint,\n+            span: server::Span::call_site(self),\n+        }\n+    }\n+    fn as_char(&mut self, punct: Self::Punct) -> char {\n+        punct.ch\n+    }\n+    fn spacing(&mut self, punct: Self::Punct) -> Spacing {\n+        if punct.joint {\n+            Spacing::Joint\n+        } else {\n+            Spacing::Alone\n+        }\n+    }\n+    fn span(&mut self, punct: Self::Punct) -> Self::Span {\n+        punct.span\n+    }\n+    fn with_span(&mut self, punct: Self::Punct, span: Self::Span) -> Self::Punct {\n+        Punct { span, ..punct }\n+    }\n+}\n+\n+impl server::Ident for Rustc<'_> {\n+    fn new(&mut self, string: &str, span: Self::Span, is_raw: bool) -> Self::Ident {\n+        let sym = Symbol::intern(string);\n+        if is_raw\n+            && (sym == keywords::Underscore.name()\n+                || ast::Ident::with_empty_ctxt(sym).is_path_segment_keyword())\n+        {\n+            panic!(\"`{:?}` is not a valid raw identifier\", string)\n+        }\n+        Ident { sym, span, is_raw }\n+    }\n+    fn span(&mut self, ident: Self::Ident) -> Self::Span {\n+        ident.span\n+    }\n+    fn with_span(&mut self, ident: Self::Ident, span: Self::Span) -> Self::Ident {\n+        Ident { span, ..ident }\n+    }\n+}\n+\n+impl server::Literal for Rustc<'_> {\n+    // FIXME(eddyb) `Literal` should not expose internal `Debug` impls.\n+    fn debug(&mut self, literal: &Self::Literal) -> String {\n+        format!(\"{:?}\", literal)\n+    }\n+    fn integer(&mut self, n: &str) -> Self::Literal {\n+        Literal {\n+            lit: token::Lit::Integer(Symbol::intern(n)),\n+            suffix: None,\n+            span: server::Span::call_site(self),\n+        }\n+    }\n+    fn typed_integer(&mut self, n: &str, kind: &str) -> Self::Literal {\n+        Literal {\n+            lit: token::Lit::Integer(Symbol::intern(n)),\n+            suffix: Some(Symbol::intern(kind)),\n+            span: server::Span::call_site(self),\n+        }\n+    }\n+    fn float(&mut self, n: &str) -> Self::Literal {\n+        Literal {\n+            lit: token::Lit::Float(Symbol::intern(n)),\n+            suffix: None,\n+            span: server::Span::call_site(self),\n+        }\n+    }\n+    fn f32(&mut self, n: &str) -> Self::Literal {\n+        Literal {\n+            lit: token::Lit::Float(Symbol::intern(n)),\n+            suffix: Some(Symbol::intern(\"f32\")),\n+            span: server::Span::call_site(self),\n+        }\n+    }\n+    fn f64(&mut self, n: &str) -> Self::Literal {\n+        Literal {\n+            lit: token::Lit::Float(Symbol::intern(n)),\n+            suffix: Some(Symbol::intern(\"f64\")),\n+            span: server::Span::call_site(self),\n+        }\n+    }\n+    fn string(&mut self, string: &str) -> Self::Literal {\n+        let mut escaped = String::new();\n+        for ch in string.chars() {\n+            escaped.extend(ch.escape_debug());\n+        }\n+        Literal {\n+            lit: token::Lit::Str_(Symbol::intern(&escaped)),\n+            suffix: None,\n+            span: server::Span::call_site(self),\n+        }\n+    }\n+    fn character(&mut self, ch: char) -> Self::Literal {\n+        let mut escaped = String::new();\n+        escaped.extend(ch.escape_unicode());\n+        Literal {\n+            lit: token::Lit::Char(Symbol::intern(&escaped)),\n+            suffix: None,\n+            span: server::Span::call_site(self),\n+        }\n+    }\n+    fn byte_string(&mut self, bytes: &[u8]) -> Self::Literal {\n+        let string = bytes\n+            .iter()\n+            .cloned()\n+            .flat_map(ascii::escape_default)\n+            .map(Into::<char>::into)\n+            .collect::<String>();\n+        Literal {\n+            lit: token::Lit::ByteStr(Symbol::intern(&string)),\n+            suffix: None,\n+            span: server::Span::call_site(self),\n+        }\n+    }\n+    fn span(&mut self, literal: &Self::Literal) -> Self::Span {\n+        literal.span\n+    }\n+    fn set_span(&mut self, literal: &mut Self::Literal, span: Self::Span) {\n+        literal.span = span;\n+    }\n+    fn subspan(\n+        &mut self,\n+        literal: &Self::Literal,\n+        start: Bound<usize>,\n+        end: Bound<usize>,\n+    ) -> Option<Self::Span> {\n+        let span = literal.span;\n+        let length = span.hi().to_usize() - span.lo().to_usize();\n+\n+        let start = match start {\n+            Bound::Included(lo) => lo,\n+            Bound::Excluded(lo) => lo + 1,\n+            Bound::Unbounded => 0,\n+        };\n+\n+        let end = match end {\n+            Bound::Included(hi) => hi + 1,\n+            Bound::Excluded(hi) => hi,\n+            Bound::Unbounded => length,\n+        };\n+\n+        // Bounds check the values, preventing addition overflow and OOB spans.\n+        if start > u32::max_value() as usize\n+            || end > u32::max_value() as usize\n+            || (u32::max_value() - start as u32) < span.lo().to_u32()\n+            || (u32::max_value() - end as u32) < span.lo().to_u32()\n+            || start >= end\n+            || end > length\n+        {\n+            return None;\n+        }\n+\n+        let new_lo = span.lo() + BytePos::from_usize(start);\n+        let new_hi = span.lo() + BytePos::from_usize(end);\n+        Some(span.with_lo(new_lo).with_hi(new_hi))\n+    }\n+}\n+\n+impl<'a> server::SourceFile for Rustc<'a> {\n+    fn eq(&mut self, file1: &Self::SourceFile, file2: &Self::SourceFile) -> bool {\n+        Lrc::ptr_eq(file1, file2)\n+    }\n+    fn path(&mut self, file: &Self::SourceFile) -> String {\n+        match file.name {\n+            FileName::Real(ref path) => path\n+                .to_str()\n+                .expect(\"non-UTF8 file path in `proc_macro::SourceFile::path`\")\n+                .to_string(),\n+            _ => file.name.to_string(),\n+        }\n+    }\n+    fn is_real(&mut self, file: &Self::SourceFile) -> bool {\n+        file.is_real_file()\n+    }\n+}\n+\n+impl server::MultiSpan for Rustc<'_> {\n+    fn new(&mut self) -> Self::MultiSpan {\n+        vec![]\n+    }\n+    fn push(&mut self, spans: &mut Self::MultiSpan, span: Self::Span) {\n+        spans.push(span)\n+    }\n+}\n+\n+impl server::Diagnostic for Rustc<'_> {\n+    fn new(&mut self, level: Level, msg: &str, spans: Self::MultiSpan) -> Self::Diagnostic {\n+        let mut diag = Diagnostic::new(level.to_internal(), msg);\n+        diag.set_span(MultiSpan::from_spans(spans));\n+        diag\n+    }\n+    fn sub(\n+        &mut self,\n+        diag: &mut Self::Diagnostic,\n+        level: Level,\n+        msg: &str,\n+        spans: Self::MultiSpan,\n+    ) {\n+        diag.sub(level.to_internal(), msg, MultiSpan::from_spans(spans), None);\n+    }\n+    fn emit(&mut self, diag: Self::Diagnostic) {\n+        DiagnosticBuilder::new_diagnostic(&self.sess.span_diagnostic, diag).emit()\n+    }\n+}\n+\n+impl server::Span for Rustc<'_> {\n+    fn debug(&mut self, span: Self::Span) -> String {\n+        format!(\"{:?} bytes({}..{})\", span.ctxt(), span.lo().0, span.hi().0)\n+    }\n+    fn def_site(&mut self) -> Self::Span {\n+        self.def_site\n+    }\n+    fn call_site(&mut self) -> Self::Span {\n+        self.call_site\n+    }\n+    fn source_file(&mut self, span: Self::Span) -> Self::SourceFile {\n+        self.sess.source_map().lookup_char_pos(span.lo()).file\n+    }\n+    fn parent(&mut self, span: Self::Span) -> Option<Self::Span> {\n+        span.ctxt().outer().expn_info().map(|i| i.call_site)\n+    }\n+    fn source(&mut self, span: Self::Span) -> Self::Span {\n+        span.source_callsite()\n+    }\n+    fn start(&mut self, span: Self::Span) -> LineColumn {\n+        let loc = self.sess.source_map().lookup_char_pos(span.lo());\n+        LineColumn {\n+            line: loc.line,\n+            column: loc.col.to_usize(),\n+        }\n+    }\n+    fn end(&mut self, span: Self::Span) -> LineColumn {\n+        let loc = self.sess.source_map().lookup_char_pos(span.hi());\n+        LineColumn {\n+            line: loc.line,\n+            column: loc.col.to_usize(),\n+        }\n+    }\n+    fn join(&mut self, first: Self::Span, second: Self::Span) -> Option<Self::Span> {\n+        let self_loc = self.sess.source_map().lookup_char_pos(first.lo());\n+        let other_loc = self.sess.source_map().lookup_char_pos(second.lo());\n+\n+        if self_loc.file.name != other_loc.file.name {\n+            return None;\n+        }\n+\n+        Some(first.to(second))\n+    }\n+    fn resolved_at(&mut self, span: Self::Span, at: Self::Span) -> Self::Span {\n+        span.with_ctxt(at.ctxt())\n+    }\n+}"}, {"sha": "aade10ed6c3244fd8a97caa5fc72a858367feef5", "filename": "src/libtest/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibtest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Flibtest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2FCargo.toml?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -11,3 +11,6 @@ crate-type = [\"dylib\", \"rlib\"]\n [dependencies]\n getopts = \"0.2\"\n term = { path = \"../libterm\" }\n+\n+# not actually used but needed to always have proc_macro in the sysroot\n+proc_macro = { path = \"../libproc_macro\" }"}, {"sha": "798cd1406ac81664c64663fdcce91e14a0c79992", "filename": "src/test/compile-fail/proc-macro/attr-invalid-exprs.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fattr-invalid-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fattr-invalid-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fattr-invalid-exprs.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:attr-stmt-expr.rs\n-// ignore-stage1\n \n //! Attributes producing expressions in invalid locations\n ", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/attr-invalid-exprs.rs"}, {"sha": "6d1d5dfe8ccdb43ea95fd4731bded618190a4c15", "filename": "src/test/compile-fail/proc-macro/attr-stmt-expr.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fattr-stmt-expr.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:attr-stmt-expr.rs\n-// ignore-stage1\n \n #![feature(proc_macro_hygiene)]\n ", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/attr-stmt-expr.rs"}, {"sha": "ed2e8ec00a9f2ebf2178bef59620abc34711a997", "filename": "src/test/compile-fail/proc-macro/attribute-with-error.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fattribute-with-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fattribute-with-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fattribute-with-error.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:attribute-with-error.rs\n-// ignore-stage1\n \n #![feature(custom_inner_attributes)]\n ", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/attribute-with-error.rs"}, {"sha": "f89d74de50f4195e53174b8556f29a85a80729a5", "filename": "src/test/compile-fail/proc-macro/attribute.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fattribute.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n+// no-prefer-dynamic\n+\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/attribute.rs"}, {"sha": "e129711129a20fa8e369d6beaa0ee24030e7216a", "filename": "src/test/compile-fail/proc-macro/attributes-included.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fattributes-included.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fattributes-included.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fattributes-included.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:attributes-included.rs\n-// ignore-stage1\n // compile-pass\n \n #![warn(unused)]", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/attributes-included.rs"}, {"sha": "4cfeec2f8a665e48188e3630a5e99bf59fcc29f6", "filename": "src/test/compile-fail/proc-macro/auxiliary/attr-stmt-expr.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/attr-stmt-expr.rs"}, {"sha": "142840926694416cf168585356242933777d2abb", "filename": "src/test/compile-fail/proc-macro/auxiliary/attribute-with-error.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fattribute-with-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fattribute-with-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fattribute-with-error.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/attribute-with-error.rs"}, {"sha": "a1f4209662d86b396528ec03de286323f26365e7", "filename": "src/test/compile-fail/proc-macro/auxiliary/attributes-included.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fattributes-included.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fattributes-included.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fattributes-included.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/attributes-included.rs"}, {"sha": "3f0a45743671c3f25dce469868d4758c9cc12d4f", "filename": "src/test/compile-fail/proc-macro/auxiliary/bang_proc_macro2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro2.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/bang_proc_macro2.rs"}, {"sha": "cd8750bc89c42c8022ab2c50bfe834193540b0a4", "filename": "src/test/compile-fail/proc-macro/auxiliary/derive-a-b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-a-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-a-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-a-b.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/derive-a-b.rs"}, {"sha": "53b2c23e5d7df2d8b4a70d4dc79dc8cb0a0e5928", "filename": "src/test/compile-fail/proc-macro/auxiliary/derive-a.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-a.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/derive-a.rs"}, {"sha": "5787546fb1e5a92dbdfea507a352fb9b55e1fd56", "filename": "src/test/compile-fail/proc-macro/auxiliary/derive-b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-b.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/derive-b.rs"}, {"sha": "b2ded05eb51fb1c049e27013159f2a60bb4d8ab4", "filename": "src/test/compile-fail/proc-macro/auxiliary/derive-bad.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-bad.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// no-prefer-dynamic\n // force-host\n+// no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n ", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/derive-bad.rs"}, {"sha": "719fbdb15ef2a7f852a2f9056d7661ea12ade038", "filename": "src/test/compile-fail/proc-macro/auxiliary/derive-clona.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-clona.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-clona.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-clona.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/derive-clona.rs"}, {"sha": "64dcf72ba2029b5165dbf06c32f669c2783ba024", "filename": "src/test/compile-fail/proc-macro/auxiliary/derive-foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-foo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-foo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-foo.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/derive-foo.rs"}, {"sha": "2d492d341ebbaa2aea3098537fdc9277dee5aa9f", "filename": "src/test/compile-fail/proc-macro/auxiliary/derive-unstable-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-unstable-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-unstable-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-unstable-2.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/derive-unstable-2.rs"}, {"sha": "a7b5d1e3e54cf94e65eb0ce618a56d226577fd25", "filename": "src/test/compile-fail/proc-macro/auxiliary/derive-unstable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fderive-unstable.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/derive-unstable.rs"}, {"sha": "5365e8238e99f5793a2ef58d13779b5909b2ffc6", "filename": "src/test/compile-fail/proc-macro/auxiliary/issue-41211.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fissue-41211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fissue-41211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fissue-41211.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/issue-41211.rs"}, {"sha": "e1a7ffaa26cb7851a3b31117fc7a299b78806661", "filename": "src/test/compile-fail/proc-macro/auxiliary/issue_38586.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fissue_38586.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fissue_38586.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fissue_38586.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/issue_38586.rs"}, {"sha": "e71b792a48a1434740c2164c4f7a977c501f7736", "filename": "src/test/compile-fail/proc-macro/auxiliary/issue_50493.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fissue_50493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fissue_50493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fissue_50493.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/issue_50493.rs"}, {"sha": "cc9420e15372b8eb5708742e37756da161bdb07e", "filename": "src/test/compile-fail/proc-macro/auxiliary/more-gates.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fmore-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fmore-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fmore-gates.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/more-gates.rs"}, {"sha": "7e4b7fe263d8c9382b8ea000b454c57f7cb911fb", "filename": "src/test/compile-fail/proc-macro/auxiliary/proc-macro-gates.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Fproc-macro-gates.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// no-prefer-dynamic\n // force-host\n+// no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n ", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/proc-macro-gates.rs"}, {"sha": "0e4343a90d64522b1c8c9834aba934ebd30f7d4c", "filename": "src/test/compile-fail/proc-macro/auxiliary/test-macros.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/test-macros.rs"}, {"sha": "f8c287b6b72b234a45f6af8718d5a23544c4c071", "filename": "src/test/compile-fail/proc-macro/define-two.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fdefine-two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fdefine-two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fdefine-two.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/define-two.rs"}, {"sha": "ac27e87ace10515f862cd5ed1cbd26fa16d9dd0e", "filename": "src/test/compile-fail/proc-macro/derive-bad.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fderive-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fderive-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fderive-bad.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:derive-bad.rs\n-// ignore-stage1\n \n #[macro_use]\n extern crate derive_bad;", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/derive-bad.rs"}, {"sha": "f36236c53562d2ba085876d97cd949181abce5ff", "filename": "src/test/compile-fail/proc-macro/derive-still-gated.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fderive-still-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fderive-still-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fderive-still-gated.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/derive-still-gated.rs"}, {"sha": "e4fcbb117a5057c0dd55eb757713496102a08bad", "filename": "src/test/compile-fail/proc-macro/expand-to-unstable-2.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fexpand-to-unstable-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fexpand-to-unstable-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fexpand-to-unstable-2.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:derive-unstable-2.rs\n-// ignore-stage1\n \n #![allow(warnings)]\n ", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/expand-to-unstable-2.rs"}, {"sha": "836e336fc22f013e86983a5c0530a0ebac944719", "filename": "src/test/compile-fail/proc-macro/expand-to-unstable.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fexpand-to-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fexpand-to-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fexpand-to-unstable.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:derive-unstable.rs\n-// ignore-stage1\n \n #![allow(warnings)]\n ", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/expand-to-unstable.rs"}, {"sha": "d8bb3571c080b749c2f85e5c2a6cc256f0bd0dcc", "filename": "src/test/compile-fail/proc-macro/export-macro.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fexport-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fexport-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fexport-macro.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -10,6 +10,9 @@\n \n // error-pattern: cannot export macro_rules! macros from a `proc-macro` crate\n \n+// force-host\n+// no-prefer-dynamic\n+\n #![crate_type = \"proc-macro\"]\n \n #[macro_export]", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/export-macro.rs"}, {"sha": "07e5723c1c18eaeb2939216494d5bdca10f9820f", "filename": "src/test/compile-fail/proc-macro/exports.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fexports.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n+// no-prefer-dynamic\n+\n #![crate_type = \"proc-macro\"]\n #![allow(warnings)]\n ", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/exports.rs"}, {"sha": "f37980c5e0f5428d8d0e4404f296aa88b38ef143", "filename": "src/test/compile-fail/proc-macro/illegal-proc-macro-derive-use.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fillegal-proc-macro-derive-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fillegal-proc-macro-derive-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fillegal-proc-macro-derive-use.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/illegal-proc-macro-derive-use.rs"}, {"sha": "fae2439344fb08ab6b94b9278a9c1c5f17dca235", "filename": "src/test/compile-fail/proc-macro/import.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fimport.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/import.rs"}, {"sha": "691c28058012215ee21aabe8ca48cf06e726e769", "filename": "src/test/compile-fail/proc-macro/issue-37788.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fissue-37788.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fissue-37788.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fissue-37788.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/issue-37788.rs"}, {"sha": "649220ac401f0d4043ebe70446e5cb544b5cd6c5", "filename": "src/test/compile-fail/proc-macro/issue-38586.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fissue-38586.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fissue-38586.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fissue-38586.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:issue_38586.rs\n-// ignore-stage1\n \n #[macro_use]\n extern crate issue_38586;", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/issue-38586.rs"}, {"sha": "e0922c452b5fb0afd8e23a3fb38a58d7fb72fe45", "filename": "src/test/compile-fail/proc-macro/issue-41211.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fissue-41211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fissue-41211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fissue-41211.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/issue-41211.rs"}, {"sha": "635da57049714c3475a06e60f30dfecc97cd9ca1", "filename": "src/test/compile-fail/proc-macro/issue-50493.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fissue-50493.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fissue-50493.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fissue-50493.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:issue_50493.rs\n-// ignore-stage1\n \n #[macro_use]\n extern crate issue_50493;", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/issue-50493.rs"}, {"sha": "4133e75e3a62d8f33ca7d1c80a1db23e020b544a", "filename": "src/test/compile-fail/proc-macro/item-error.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fitem-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fitem-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fitem-error.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:derive-b.rs\n-// ignore-stage1\n \n #![allow(warnings)]\n ", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/item-error.rs"}, {"sha": "d49c61202713b1e4d47ce2d780e64e9abf5225ab", "filename": "src/test/compile-fail/proc-macro/lints_in_proc_macros.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Flints_in_proc_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Flints_in_proc_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Flints_in_proc_macros.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:bang_proc_macro2.rs\n-// ignore-stage1\n \n #![feature(proc_macro_hygiene)]\n #![allow(unused_macros)]", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/lints_in_proc_macros.rs"}, {"sha": "43d7077d02210448ca0c16c755398dd6ac45f607", "filename": "src/test/compile-fail/proc-macro/macros-in-extern.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fmacros-in-extern.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:test-macros.rs\n-// ignore-stage1\n // ignore-wasm32\n \n extern crate test_macros;", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/macros-in-extern.rs"}, {"sha": "4c038179544ffff75f9ca952fbcf82ff8ee43a64", "filename": "src/test/compile-fail/proc-macro/more-gates.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fmore-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fmore-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fmore-gates.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/more-gates.rs"}, {"sha": "ab05ca28386ab0f094db1a05e55c0b4701274b1b", "filename": "src/test/compile-fail/proc-macro/no-macro-use-attr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fno-macro-use-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fno-macro-use-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fno-macro-use-attr.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/no-macro-use-attr.rs"}, {"sha": "6e52411500e22fda25ff28e267d9d76af696c866", "filename": "src/test/compile-fail/proc-macro/proc-macro-attributes.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fproc-macro-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fproc-macro-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fproc-macro-attributes.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:derive-b.rs\n-// ignore-stage1\n \n #[macro_use]\n extern crate derive_b;", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-attributes.rs"}, {"sha": "5049a474dd215064a695fb7885d6734f9372e847", "filename": "src/test/compile-fail/proc-macro/proc-macro-gates.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fproc-macro-gates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fproc-macro-gates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fproc-macro-gates.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-gates.rs"}, {"sha": "dc182414a1ddcc196a6500d5d299f193c5d8c760", "filename": "src/test/compile-fail/proc-macro/proc-macro-gates2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fproc-macro-gates2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fproc-macro-gates2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fproc-macro-gates2.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/proc-macro-gates2.rs"}, {"sha": "e995eb549fae97f9627202ac35344f2469ff3814", "filename": "src/test/compile-fail/proc-macro/pub-at-crate-root.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fpub-at-crate-root.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fpub-at-crate-root.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fpub-at-crate-root.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n+// no-prefer-dynamic\n+\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/pub-at-crate-root.rs"}, {"sha": "a5fcfde1dda1eb2d1932e3ad3409b4c361b27f03", "filename": "src/test/compile-fail/proc-macro/shadow-builtin.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fshadow-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fshadow-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fshadow-builtin.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n+// no-prefer-dynamic\n+\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/shadow-builtin.rs"}, {"sha": "9bff1c57ae4e0d63ffd3ff965d7c2b3e6ae642a9", "filename": "src/test/compile-fail/proc-macro/shadow.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Fshadow.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/shadow.rs"}, {"sha": "06bd3f9dd6a2d29ace49399e578e7b586e857770", "filename": "src/test/compile-fail/proc-macro/two-crate-types-1.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Ftwo-crate-types-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Ftwo-crate-types-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Ftwo-crate-types-1.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -10,5 +10,8 @@\n \n // error-pattern: cannot mix `proc-macro` crate type with others\n \n+// force-host\n+// no-prefer-dynamic\n+\n #![crate_type = \"proc-macro\"]\n #![crate_type = \"rlib\"]", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/two-crate-types-1.rs"}, {"sha": "dd5e5acbec868b4a3ed6c0b992035158724689dc", "filename": "src/test/compile-fail/proc-macro/two-crate-types-2.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Ftwo-crate-types-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Ftwo-crate-types-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-macro%2Ftwo-crate-types-2.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -10,3 +10,4 @@\n \n // error-pattern: cannot mix `proc-macro` crate type with others\n // compile-flags: --crate-type rlib --crate-type proc-macro\n+// force-host", "previous_filename": "src/test/compile-fail-fulldeps/proc-macro/two-crate-types-2.rs"}, {"sha": "34d200982053f5d8faf99bdd6d207edd991edece", "filename": "src/test/incremental/auxiliary/incremental_proc_macro_aux.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fincremental%2Fauxiliary%2Fincremental_proc_macro_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fincremental%2Fauxiliary%2Fincremental_proc_macro_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fauxiliary%2Fincremental_proc_macro_aux.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/incremental-fulldeps/auxiliary/incremental_proc_macro_aux.rs"}, {"sha": "fa6bff4660a7f31601ea8958e37564ff61fddfb7", "filename": "src/test/incremental/auxiliary/issue_49482_macro_def.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fincremental%2Fauxiliary%2Fissue_49482_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fincremental%2Fauxiliary%2Fissue_49482_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fauxiliary%2Fissue_49482_macro_def.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type=\"proc-macro\"]", "previous_filename": "src/test/incremental-fulldeps/auxiliary/issue_49482_macro_def.rs"}, {"sha": "aa9aa3b58b90c277c9f211ab9ed7f925ed808727", "filename": "src/test/incremental/auxiliary/issue_49482_reexport.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fincremental%2Fauxiliary%2Fissue_49482_reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fincremental%2Fauxiliary%2Fissue_49482_reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fauxiliary%2Fissue_49482_reexport.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/incremental-fulldeps/auxiliary/issue_49482_reexport.rs"}, {"sha": "635501fd60cfc291dc7cc7f5f4e2917b245be1a9", "filename": "src/test/incremental/auxiliary/issue_54059.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fincremental%2Fauxiliary%2Fissue_54059.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fincremental%2Fauxiliary%2Fissue_54059.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fauxiliary%2Fissue_54059.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n // check that having extern \"C\" functions in a proc macro doesn't crash.", "previous_filename": "src/test/incremental-fulldeps/auxiliary/issue_54059.rs"}, {"sha": "495f4ff0ed046e548b31d0a78c0f9d61ba262248", "filename": "src/test/incremental/incremental_proc_macro.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fincremental%2Fincremental_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fincremental%2Fincremental_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fincremental_proc_macro.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:incremental_proc_macro_aux.rs\n-// ignore-stage1\n // revisions: cfail1 cfail2\n // compile-pass\n ", "previous_filename": "src/test/incremental-fulldeps/incremental_proc_macro.rs"}, {"sha": "65e86e868bbf97a36e714b7e8413f18b0028747b", "filename": "src/test/incremental/issue-49482.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fincremental%2Fissue-49482.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fincremental%2Fissue-49482.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-49482.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:issue_49482_macro_def.rs\n // aux-build:issue_49482_reexport.rs\n-// ignore-stage1\n // revisions: rpass1\n \n extern crate issue_49482_reexport;", "previous_filename": "src/test/incremental-fulldeps/issue-49482.rs"}, {"sha": "2f4ea72b06673d0404b6f6f2ddb60d5ab8f83dd7", "filename": "src/test/incremental/issue-54059.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fincremental%2Fissue-54059.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fincremental%2Fissue-54059.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-54059.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:issue_54059.rs\n-// ignore-stage1\n // ignore-wasm32-bare no libc for ffi testing\n // ignore-windows - dealing with weird symbols issues on dylibs isn't worth it\n // revisions: rpass1", "previous_filename": "src/test/incremental-fulldeps/issue-54059.rs"}, {"sha": "f38bf6e92eb754e3158275b58f79833e7a46f607", "filename": "src/test/pretty/attr-derive.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fpretty%2Fattr-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fpretty%2Fattr-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fattr-derive.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:derive-foo.rs\n-// ignore-stage1\n // pp-exact\n // Testing that both the inner item and next outer item are\n // preserved, and that the first outer item parsed in main is not"}, {"sha": "3552b20fd414bd9067ce967fafa458a209acc1b7", "filename": "src/test/pretty/auxiliary/derive-foo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fpretty%2Fauxiliary%2Fderive-foo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fpretty%2Fauxiliary%2Fderive-foo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fauxiliary%2Fderive-foo.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]"}, {"sha": "0a681401b1afbdd4eff22b4e5968c25e22d84832", "filename": "src/test/run-make-fulldeps/issue-38237/Makefile", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-make-fulldeps%2Fissue-38237%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-make-fulldeps%2Fissue-38237%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-38237%2FMakefile?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,11 +1,5 @@\n -include ../tools.mk\n \n-ifeq ($(findstring stage1,$(RUST_BUILD_STAGE)),stage1)\n-# ignore stage1\n-all:\n-\n-else\n all:\n \t$(RUSTC) foo.rs; $(RUSTC) bar.rs\n \t$(RUSTDOC) baz.rs -L $(TMPDIR) -o $(TMPDIR)\n-endif"}, {"sha": "d2c8e7fd0434ccec9b9178829801ae514cbfe07f", "filename": "src/test/run-make-fulldeps/rustc-macro-dep-files/Makefile", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e90a12a8a95933604a8b609197fce61bb24a38c/src%2Ftest%2Frun-make-fulldeps%2Frustc-macro-dep-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/3e90a12a8a95933604a8b609197fce61bb24a38c/src%2Ftest%2Frun-make-fulldeps%2Frustc-macro-dep-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustc-macro-dep-files%2FMakefile?ref=3e90a12a8a95933604a8b609197fce61bb24a38c", "patch": "@@ -1,12 +0,0 @@\n--include ../tools.mk\n-\n-ifeq ($(findstring stage1,$(RUST_BUILD_STAGE)),stage1)\n-# ignore stage1\n-all:\n-\n-else\n-all:\n-\t$(RUSTC) foo.rs\n-\t$(RUSTC) bar.rs --emit dep-info\n-\t$(CGREP) -v \"proc-macro source\" < $(TMPDIR)/bar.d\n-endif"}, {"sha": "0420a389168f1a51b8a46f2bacb8f4a98cf71f0e", "filename": "src/test/run-make/rustc-macro-dep-files/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2FMakefile?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -0,0 +1,8 @@\n+-include ../../run-make-fulldeps/tools.mk\n+\n+# FIXME(eddyb) provide `HOST_RUSTC` and `TARGET_RUSTC`\n+# instead of hardcoding them everywhere they're needed.\n+all:\n+\t$(BARE_RUSTC) foo.rs --out-dir $(TMPDIR)\n+\t$(RUSTC) bar.rs --target $(TARGET) --emit dep-info\n+\t$(CGREP) -v \"proc-macro source\" < $(TMPDIR)/bar.d"}, {"sha": "b2d7f3f348ce87168fc6674003fd183683841cc4", "filename": "src/test/run-make/rustc-macro-dep-files/bar.rs", "status": "renamed", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2Fbar.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![no_std]\n+#![crate_type = \"lib\"]\n+\n #[macro_use]\n extern crate foo;\n \n #[derive(A)]\n struct A;\n-\n-fn main() {\n-    let _b = B;\n-}", "previous_filename": "src/test/run-make-fulldeps/rustc-macro-dep-files/bar.rs"}, {"sha": "2f2524f6ef11513d17e87479214020a6f4875a39", "filename": "src/test/run-make/rustc-macro-dep-files/foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2Ffoo.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-make-fulldeps/rustc-macro-dep-files/foo.rs"}, {"sha": "f4d3f2c94caf1a2091c62aea06b0331517fe8e21", "filename": "src/test/run-pass-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/issue-40001-plugin.rs"}, {"sha": "e8cbf5a270e038268eccf116cd2f5de267c431c0", "filename": "src/test/run-pass-fulldeps/compiler-calls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fcompiler-calls.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -11,6 +11,7 @@\n // Test that the CompilerCalls interface to the compiler works.\n \n // ignore-cross-compile\n+// ignore-stage1\n \n #![feature(rustc_private)]\n "}, {"sha": "b828199883fa081108077eb6560e0d191a858fe5", "filename": "src/test/run-pass-fulldeps/issue-40001.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass-fulldeps%2Fissue-40001.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass-fulldeps%2Fissue-40001.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fissue-40001.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/issue-40001.rs"}, {"sha": "940b1ea5df41a3180e2aefd2f6e8cf76848b2657", "filename": "src/test/run-pass/auxiliary/cond_plugin.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fauxiliary%2Fcond_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fauxiliary%2Fcond_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fcond_plugin.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/auxiliary/cond_plugin.rs"}, {"sha": "f3a0f2cc6257cfe0bdd5f77be451831233e98909", "filename": "src/test/run-pass/auxiliary/hello_macro.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fauxiliary%2Fhello_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fauxiliary%2Fhello_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fhello_macro.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/auxiliary/hello_macro.rs"}, {"sha": "d111db841a5bbc96095f5aa23475c8633fab24c6", "filename": "src/test/run-pass/auxiliary/proc_macro_def.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fauxiliary%2Fproc_macro_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fauxiliary%2Fproc_macro_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fproc_macro_def.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/auxiliary/proc_macro_def.rs"}, {"sha": "d8e36336028bed882096f7373f6288d972cfe057", "filename": "src/test/run-pass/macro-quote-cond.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fmacro-quote-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fmacro-quote-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-quote-cond.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(unused_parens)]\n // aux-build:cond_plugin.rs\n-// ignore-stage1\n \n #![feature(proc_macro_hygiene)]\n ", "previous_filename": "src/test/run-pass-fulldeps/macro-quote-cond.rs"}, {"sha": "473f92f7b74e8de6352b1b8294b59ede4728eaa0", "filename": "src/test/run-pass/macro-quote-test.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fmacro-quote-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fmacro-quote-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-quote-test.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -11,7 +11,6 @@\n // Test that a macro can emit delimiters with nothing inside - `()`, `{}`\n \n // aux-build:hello_macro.rs\n-// ignore-stage1\n \n #![feature(proc_macro_hygiene)]\n ", "previous_filename": "src/test/run-pass-fulldeps/macro-quote-test.rs"}, {"sha": "7ea7ceafc28766d6a12f0263aa324c950ff8da9e", "filename": "src/test/run-pass/proc-macro/add-impl.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fadd-impl.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:add-impl.rs\n-// ignore-stage1\n \n #[macro_use]\n extern crate add_impl;", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/add-impl.rs"}, {"sha": "591f3331d28c00382f421852d34df791cf43c583", "filename": "src/test/run-pass/proc-macro/append-impl.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fappend-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fappend-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fappend-impl.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:append-impl.rs\n-// ignore-stage1\n \n #![allow(warnings)]\n ", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/append-impl.rs"}, {"sha": "b2ee5c2a20a9253230c5a2a47fed8feb76af7068", "filename": "src/test/run-pass/proc-macro/attr-args.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fattr-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fattr-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fattr-args.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:attr-args.rs\n-// ignore-stage1\n \n #![allow(warnings)]\n ", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/attr-args.rs"}, {"sha": "58ffd0ce8b06054378d248b14663849e33592413", "filename": "src/test/run-pass/proc-macro/attr-cfg.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fattr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fattr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fattr-cfg.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:attr-cfg.rs\n-// ignore-stage1\n // revisions: foo bar\n \n extern crate attr_cfg;", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/attr-cfg.rs"}, {"sha": "383c193ddb4512643a31d071e503690bc0e02e56", "filename": "src/test/run-pass/proc-macro/attr-on-trait.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fattr-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fattr-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fattr-on-trait.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:attr-on-trait.rs\n-// ignore-stage1\n \n extern crate attr_on_trait;\n ", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/attr-on-trait.rs"}, {"sha": "43a5695f1b760aed61defddd414b8ed4c5d67d9c", "filename": "src/test/run-pass/proc-macro/attr-stmt-expr.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fattr-stmt-expr.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:attr-stmt-expr.rs\n-// ignore-stage1\n \n #![feature(stmt_expr_attributes, proc_macro_hygiene)]\n ", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/attr-stmt-expr.rs"}, {"sha": "806d70eebde5f6f91b06d9f6cd2c5a6d991f80dc", "filename": "src/test/run-pass/proc-macro/auxiliary/add-impl.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fadd-impl.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/add-impl.rs"}, {"sha": "fdce709e5bad68e39a2d6e85a6ed2edd67f5aaa5", "filename": "src/test/run-pass/proc-macro/auxiliary/append-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fappend-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fappend-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fappend-impl.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/append-impl.rs"}, {"sha": "1f45a799a17f205550090fd10a22659e9b154950", "filename": "src/test/run-pass/proc-macro/auxiliary/attr-args.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fattr-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fattr-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fattr-args.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/attr-args.rs"}, {"sha": "553d2ca42f85dc8039f094b604ba8e818418b722", "filename": "src/test/run-pass/proc-macro/auxiliary/attr-cfg.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fattr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fattr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fattr-cfg.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/attr-cfg.rs"}, {"sha": "f5431ddb2a36b68c1e6dd899ad1f81a645fb6255", "filename": "src/test/run-pass/proc-macro/auxiliary/attr-on-trait.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fattr-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fattr-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fattr-on-trait.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/attr-on-trait.rs"}, {"sha": "4704bd16cbc4f010ecaeca459622afb5a0be491c", "filename": "src/test/run-pass/proc-macro/auxiliary/attr-stmt-expr.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/attr-stmt-expr.rs"}, {"sha": "45301879e99bda9fed74db949e364c51c36a8471", "filename": "src/test/run-pass/proc-macro/auxiliary/bang-macro.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fbang-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fbang-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fbang-macro.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/bang-macro.rs"}, {"sha": "ed878a25e99836a3c3132d50ae37168fdfaf9053", "filename": "src/test/run-pass/proc-macro/auxiliary/call-site.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fcall-site.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fcall-site.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fcall-site.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/call-site.rs"}, {"sha": "b0d71f248d7d2799eee8fe94ceb3f01076d012cb", "filename": "src/test/run-pass/proc-macro/auxiliary/count_compound_ops.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fcount_compound_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fcount_compound_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fcount_compound_ops.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![feature(proc_macro_hygiene, proc_macro_quote)]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/count_compound_ops.rs"}, {"sha": "250d9508c234a3fdb1004a62846f996a342f805b", "filename": "src/test/run-pass/proc-macro/auxiliary/custom-attr-only-one-derive.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fcustom-attr-only-one-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fcustom-attr-only-one-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fcustom-attr-only-one-derive.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/custom-attr-only-one-derive.rs"}, {"sha": "55c2b3c575e5901aa47fcc5fdaabd9d05a962e28", "filename": "src/test/run-pass/proc-macro/auxiliary/derive-a.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-a.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-a.rs"}, {"sha": "406f169c24d39670ad68a1ea7d3a18844ad6dd00", "filename": "src/test/run-pass/proc-macro/auxiliary/derive-atob.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-atob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-atob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-atob.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-atob.rs"}, {"sha": "20ba0de5e385d80604d6775db17c6a6e2fe7bd56", "filename": "src/test/run-pass/proc-macro/auxiliary/derive-attr-cfg.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-attr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-attr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-attr-cfg.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-attr-cfg.rs"}, {"sha": "d69e69de1c2f863aed567d596811148b4b077a41", "filename": "src/test/run-pass/proc-macro/auxiliary/derive-b.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-b.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-b.rs"}, {"sha": "91a82ba52c80ffff0e902203fffc4ae83ac1596f", "filename": "src/test/run-pass/proc-macro/auxiliary/derive-ctod.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-ctod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-ctod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-ctod.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-ctod.rs"}, {"sha": "635d3364f0db5a8c2be84a3a754f4804b83eeaa9", "filename": "src/test/run-pass/proc-macro/auxiliary/derive-nothing.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-nothing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-nothing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-nothing.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-nothing.rs"}, {"sha": "f62e0cd12a123304dc8546c9bcf0f42b55707d5a", "filename": "src/test/run-pass/proc-macro/auxiliary/derive-same-struct.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-same-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-same-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-same-struct.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n-// compile-flags:--crate-type proc-macro\n+\n+#![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;\n ", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-same-struct.rs"}, {"sha": "eafd457675fda89e89854a3c40daf234839319f2", "filename": "src/test/run-pass/proc-macro/auxiliary/derive-two-attrs.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-two-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-two-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-two-attrs.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-two-attrs.rs"}, {"sha": "e6d3d9185035c2bc8d088fac75874b360f25b03d", "filename": "src/test/run-pass/proc-macro/auxiliary/derive-union.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fderive-union.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-union.rs"}, {"sha": "f37679552ecaf5113e993b118888182b66e790d4", "filename": "src/test/run-pass/proc-macro/auxiliary/double.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fdouble.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fdouble.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fdouble.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/double.rs"}, {"sha": "943acd9cecf069f6ec85a546eea4144eeeeb8987", "filename": "src/test/run-pass/proc-macro/auxiliary/empty-crate.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fempty-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fempty-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fempty-crate.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/empty-crate.rs"}, {"sha": "d7f8ec43e52656ed9db8a81e49290d1daa03f984", "filename": "src/test/run-pass/proc-macro/auxiliary/expand-with-a-macro.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fexpand-with-a-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fexpand-with-a-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fexpand-with-a-macro.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/expand-with-a-macro.rs"}, {"sha": "030c53b3e6f320bf5ab8542192bbb0c71a067159", "filename": "src/test/run-pass/proc-macro/auxiliary/external-crate-var.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fexternal-crate-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fexternal-crate-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fexternal-crate-var.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/external-crate-var.rs"}, {"sha": "9f300837315b1a59b5b3fadd20131b4a28cd1311", "filename": "src/test/run-pass/proc-macro/auxiliary/gen-lifetime-token.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fgen-lifetime-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fgen-lifetime-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fgen-lifetime-token.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/gen-lifetime-token.rs"}, {"sha": "ca88482064bc91ba39659f539d1c13afdf9de50b", "filename": "src/test/run-pass/proc-macro/auxiliary/hygiene_example.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fhygiene_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fhygiene_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fhygiene_example.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/hygiene_example.rs"}, {"sha": "af3b60173aca3d9f9c53398b11ae5249120a12be", "filename": "src/test/run-pass/proc-macro/auxiliary/hygiene_example_codegen.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fhygiene_example_codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fhygiene_example_codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fhygiene_example_codegen.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![feature(proc_macro_quote, proc_macro_hygiene)]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/hygiene_example_codegen.rs"}, {"sha": "9094310fb3e766866d0835a5d161d7baca5d83eb", "filename": "src/test/run-pass/proc-macro/auxiliary/issue-39889.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fissue-39889.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fissue-39889.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fissue-39889.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/issue-39889.rs"}, {"sha": "e74b9dc7454868608181400464cf85f599b748f9", "filename": "src/test/run-pass/proc-macro/auxiliary/issue-42708.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fissue-42708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fissue-42708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fissue-42708.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/issue-42708.rs"}, {"sha": "a8a03ca540c882d29b69fcf77a42c12c4744b9b9", "filename": "src/test/run-pass/proc-macro/auxiliary/issue-50061.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fissue-50061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fissue-50061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fissue-50061.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/issue-50061.rs"}, {"sha": "c52496d0b30d7fa841cc6d691f4628c90dc64def", "filename": "src/test/run-pass/proc-macro/auxiliary/lifetimes.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Flifetimes.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/lifetimes.rs"}, {"sha": "ff28c1db4f0b14856fb7d17b329d1e7697021104", "filename": "src/test/run-pass/proc-macro/auxiliary/modify-ast.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fmodify-ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fmodify-ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fmodify-ast.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/modify-ast.rs"}, {"sha": "ef4fd8d84a224c43a37247d791b96984960b6f1e", "filename": "src/test/run-pass/proc-macro/auxiliary/negative-token.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fnegative-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fnegative-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fnegative-token.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/negative-token.rs"}, {"sha": "90209e042b23fd582a47c1fc73cf2759c5e15ac8", "filename": "src/test/run-pass/proc-macro/auxiliary/not-joint.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fnot-joint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fnot-joint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fnot-joint.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/not-joint.rs"}, {"sha": "8e2c5c0a088d29b1c09eebf3887a39c8670f13c3", "filename": "src/test/run-pass/proc-macro/auxiliary/span-api-tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fspan-api-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fspan-api-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fspan-api-tests.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/span-api-tests.rs"}, {"sha": "b4666e2cb61bdde822f346cbba4516e86427ab09", "filename": "src/test/run-pass/proc-macro/auxiliary/span-test-macros.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fspan-test-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fspan-test-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Fspan-test-macros.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/span-test-macros.rs"}, {"sha": "0e4343a90d64522b1c8c9834aba934ebd30f7d4c", "filename": "src/test/run-pass/proc-macro/auxiliary/test-macros.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fauxiliary%2Ftest-macros.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/test-macros.rs"}, {"sha": "f433bc64c6e23dc7136de8857b71bd9fed624b25", "filename": "src/test/run-pass/proc-macro/bang-macro.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fbang-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fbang-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fbang-macro.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:bang-macro.rs\n-// ignore-stage1\n \n #![feature(proc_macro_hygiene)]\n ", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/bang-macro.rs"}, {"sha": "ccbf33cc73b53a366beeff39f3a1c12f2de0a8a0", "filename": "src/test/run-pass/proc-macro/call-site.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fcall-site.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fcall-site.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fcall-site.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -11,7 +11,6 @@\n #![allow(unused_variables)]\n #![allow(unused_imports)]\n // aux-build:call-site.rs\n-// ignore-stage1\n \n #![feature(proc_macro_hygiene)]\n ", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/call-site.rs"}, {"sha": "46a5906e46ad196cda74988ca26422bbe4789e43", "filename": "src/test/run-pass/proc-macro/count_compound_ops.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fcount_compound_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fcount_compound_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fcount_compound_ops.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:count_compound_ops.rs\n-// ignore-stage1\n \n #![feature(proc_macro_hygiene)]\n ", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/count_compound_ops.rs"}, {"sha": "00b467ad1c9b7a3cf73ec59e809a9995f4918deb", "filename": "src/test/run-pass/proc-macro/crate-var.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fcrate-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fcrate-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fcrate-var.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:double.rs\n // aux-build:external-crate-var.rs\n-// ignore-stage1\n \n #![allow(unused)]\n ", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/crate-var.rs"}, {"sha": "3b2833a4bcf756fae3545d0305a7efdd21d1b4d0", "filename": "src/test/run-pass/proc-macro/custom-attr-only-one-derive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fcustom-attr-only-one-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fcustom-attr-only-one-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fcustom-attr-only-one-derive.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/custom-attr-only-one-derive.rs"}, {"sha": "f804042374d72ba05310fee2f913fd41b1ed33f2", "filename": "src/test/run-pass/proc-macro/derive-attr-cfg.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-attr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-attr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-attr-cfg.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(dead_code)]\n // aux-build:derive-attr-cfg.rs\n-// ignore-stage1\n \n extern crate derive_attr_cfg;\n use derive_attr_cfg::Foo;", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/derive-attr-cfg.rs"}, {"sha": "60a6cf7662d0193090c81c8a92b5a5065e31e41d", "filename": "src/test/run-pass/proc-macro/derive-b.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-b.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:derive-b.rs\n-// ignore-stage1\n \n #![feature(unrestricted_attribute_tokens)]\n ", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/derive-b.rs"}, {"sha": "7aff32e16cebddcc4b9d45180a6ef3c3e5b675eb", "filename": "src/test/run-pass/proc-macro/derive-same-struct.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-same-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-same-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-same-struct.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -11,7 +11,6 @@\n #![allow(path_statements)]\n #![allow(dead_code)]\n // aux-build:derive-same-struct.rs\n-// ignore-stage1\n \n #[macro_use]\n extern crate derive_same_struct;", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/derive-same-struct.rs"}, {"sha": "77605de5e33fcfc82aaf38df21309f019959c4f1", "filename": "src/test/run-pass/proc-macro/derive-same-struct.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-same-struct.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-same-struct.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-same-struct.stdout?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/derive-same-struct.stdout"}, {"sha": "5a53a4e8db34f6ad37372c4781c87ec302b1ea92", "filename": "src/test/run-pass/proc-macro/derive-test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-test.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/derive-test.rs"}, {"sha": "9c2ba481f5e97e2c76119b483a970962c6cb4cd4", "filename": "src/test/run-pass/proc-macro/derive-two-attrs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-two-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-two-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-two-attrs.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/derive-two-attrs.rs"}, {"sha": "2aae1d8635feb7027b5232be5ce2e46dcf53ab52", "filename": "src/test/run-pass/proc-macro/derive-union.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fderive-union.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(unused_variables)]\n // aux-build:derive-union.rs\n-// ignore-stage1\n \n #[macro_use]\n extern crate derive_union;", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/derive-union.rs"}, {"sha": "1a0c0506112cbda678cdbdf0c5110cb8c961e297", "filename": "src/test/run-pass/proc-macro/empty-crate.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fempty-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fempty-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fempty-crate.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(unused_imports)]\n // aux-build:empty-crate.rs\n-// ignore-stage1\n \n #[macro_use]\n extern crate empty_crate;", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/empty-crate.rs"}, {"sha": "944973ee7063ac06aaa654ccbc16e93160f5353c", "filename": "src/test/run-pass/proc-macro/expand-with-a-macro.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fexpand-with-a-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fexpand-with-a-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fexpand-with-a-macro.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n // aux-build:expand-with-a-macro.rs\n-// ignore-stage1\n+\n+// ignore-wasm32-bare compiled with panic=abort by default\n \n #![deny(warnings)]\n ", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/expand-with-a-macro.rs"}, {"sha": "ce2fed86e46ae86850870b2c9b0b821bfa5cedf6", "filename": "src/test/run-pass/proc-macro/gen-lifetime-token.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fgen-lifetime-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fgen-lifetime-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fgen-lifetime-token.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/gen-lifetime-token.rs"}, {"sha": "41857fde26920df12d87a1e4a087faa96ab42db9", "filename": "src/test/run-pass/proc-macro/hygiene_example.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fhygiene_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fhygiene_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fhygiene_example.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -11,7 +11,6 @@\n #![allow(unused_macros)]\n // aux-build:hygiene_example_codegen.rs\n // aux-build:hygiene_example.rs\n-// ignore-stage1\n \n #![feature(proc_macro_hygiene)]\n ", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/hygiene_example.rs"}, {"sha": "99500a77f09eadda377b8c12f67e3a7a49d2b913", "filename": "src/test/run-pass/proc-macro/issue-39889.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fissue-39889.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fissue-39889.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fissue-39889.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(dead_code)]\n // aux-build:issue-39889.rs\n-// ignore-stage1\n \n extern crate issue_39889;\n use issue_39889::Issue39889;", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/issue-39889.rs"}, {"sha": "8f9c8723953f2d1699911511818231e2cdb104c3", "filename": "src/test/run-pass/proc-macro/issue-42708.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fissue-42708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fissue-42708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fissue-42708.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:issue-42708.rs\n-// ignore-stage1\n \n #![feature(decl_macro)]\n #![allow(unused)]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/issue-42708.rs"}, {"sha": "1a751161a4465d63e9d6cc405b86d739c6a28d55", "filename": "src/test/run-pass/proc-macro/issue-50061.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fissue-50061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fissue-50061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fissue-50061.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(path_statements)]\n // aux-build:issue-50061.rs\n-// ignore-stage1\n \n #![feature(decl_macro)]\n ", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/issue-50061.rs"}, {"sha": "7cd234df650fb57db7b97c78a105658ed151c843", "filename": "src/test/run-pass/proc-macro/lifetimes.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Flifetimes.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(unused_variables)]\n // aux-build:lifetimes.rs\n-// ignore-stage1\n \n extern crate lifetimes;\n use lifetimes::*;", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/lifetimes.rs"}, {"sha": "319e99d4e44d29e53d9d8771d60d21868d496b06", "filename": "src/test/run-pass/proc-macro/load-two.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fload-two.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fload-two.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fload-two.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -12,7 +12,6 @@\n #![allow(dead_code)]\n // aux-build:derive-atob.rs\n // aux-build:derive-ctod.rs\n-// ignore-stage1\n \n #[macro_use]\n extern crate derive_atob;", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/load-two.rs"}, {"sha": "ce62cabf281dbd88439b1f1e56ed6d0ecd0a0cd0", "filename": "src/test/run-pass/proc-macro/macros-in-extern.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fmacros-in-extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fmacros-in-extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fmacros-in-extern.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:test-macros.rs\n-// ignore-stage1\n // ignore-wasm32\n \n #![feature(macros_in_extern)]", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/macros-in-extern.rs"}, {"sha": "d6f7cc4699adb39c9fb0cbd05918e3667afa5038", "filename": "src/test/run-pass/proc-macro/modify-ast.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fmodify-ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fmodify-ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fmodify-ast.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/modify-ast.rs"}, {"sha": "f953ba8df7e407fb69778c526775af690e2d1a19", "filename": "src/test/run-pass/proc-macro/negative-token.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fnegative-token.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fnegative-token.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fnegative-token.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:negative-token.rs\n-// ignore-stage1\n \n #![feature(proc_macro_hygiene)]\n ", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/negative-token.rs"}, {"sha": "7a53348f96396ebd3acc270477e7d583f9b0bcd2", "filename": "src/test/run-pass/proc-macro/not-joint.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fnot-joint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fnot-joint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fnot-joint.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/not-joint.rs"}, {"sha": "ba0cd3b398d5565ad41f001f86facbe88039475f", "filename": "src/test/run-pass/proc-macro/smoke.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fsmoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fsmoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fsmoke.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -11,7 +11,6 @@\n #![allow(unused_must_use)]\n #![allow(path_statements)]\n // aux-build:derive-a.rs\n-// ignore-stage1\n \n #[macro_use]\n extern crate derive_a;", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/smoke.rs"}, {"sha": "415cada265ec7c35da8be1ad174d12fddf3c3b34", "filename": "src/test/run-pass/proc-macro/span-api-tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fspan-api-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fspan-api-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fspan-api-tests.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/span-api-tests.rs"}, {"sha": "b1ac8038fa28334cbfc167b423309f1f5675daf5", "filename": "src/test/run-pass/proc-macro/struct-field-macro.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fstruct-field-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc-macro%2Fstruct-field-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-macro%2Fstruct-field-macro.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(dead_code)]\n // aux-build:derive-nothing.rs\n-// ignore-stage1\n \n #[macro_use]\n extern crate derive_nothing;", "previous_filename": "src/test/run-pass-fulldeps/proc-macro/struct-field-macro.rs"}, {"sha": "e14ceca8e4211ea0ef1c14fbb8e538d7432885bb", "filename": "src/test/run-pass/proc_macro.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frun-pass%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc_macro.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:proc_macro_def.rs\n-// ignore-stage1\n // ignore-cross-compile\n \n #![feature(proc_macro_hygiene)]", "previous_filename": "src/test/run-pass-fulldeps/proc_macro.rs"}, {"sha": "b3b403a7b86aa921de44438b216ed1e7dcc8aef8", "filename": "src/test/rustdoc/doc-proc-macro.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frustdoc%2Fdoc-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frustdoc%2Fdoc-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-proc-macro.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-stage1\n-\n // Issue #52129: ICE when trying to document the `quote` proc-macro from proc_macro\n \n // As of this writing, we don't currently attempt to document proc-macros. However, we shouldn't"}, {"sha": "bde1fd8b1e4373fa56a4d72f9689cb2f7b7ececd", "filename": "src/test/rustdoc/inline_cross/auxiliary/proc_macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fproc_macro.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type=\"proc-macro\"]"}, {"sha": "c259e9cdaacf1a4612998241f5d9d603e02b2eb8", "filename": "src/test/rustdoc/inline_cross/proc_macro.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fproc_macro.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-stage1\n // aux-build:proc_macro.rs\n // build-aux-docs\n "}, {"sha": "23d0d00580731ef648649467071b972056a08b73", "filename": "src/test/rustdoc/proc-macro.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frustdoc%2Fproc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frustdoc%2Fproc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fproc-macro.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-stage1\n+// force-host\n+// no-prefer-dynamic\n \n #![crate_type=\"proc-macro\"]\n #![crate_name=\"some_macros\"]"}, {"sha": "6ad5556b8f5db686d723148ac894a7a1658658a6", "filename": "src/test/rustdoc/rustc-macro-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frustdoc%2Frustc-macro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Frustdoc%2Frustc-macro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frustc-macro-crate.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n-// ignore-stage1\n \n #![crate_type = \"proc-macro\"]\n "}, {"sha": "679cb7728680ddbf26eefe2887c77cd9f7191a09", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/attr_proc_macro.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3e90a12a8a95933604a8b609197fce61bb24a38c/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e90a12a8a95933604a8b609197fce61bb24a38c/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs?ref=3e90a12a8a95933604a8b609197fce61bb24a38c", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::TokenStream;\n-\n-#[proc_macro_attribute]\n-pub fn attr_proc_macro(_: TokenStream, input: TokenStream) -> TokenStream {\n-    input\n-}"}, {"sha": "6484725814a10b75581b8fa23a92e263dc695954", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/bang_proc_macro.rs", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3e90a12a8a95933604a8b609197fce61bb24a38c/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e90a12a8a95933604a8b609197fce61bb24a38c/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs?ref=3e90a12a8a95933604a8b609197fce61bb24a38c", "patch": "@@ -1,23 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// force-host\n-// no-prefer-dynamic\n-\n-#![crate_type = \"proc-macro\"]\n-\n-extern crate proc_macro;\n-\n-use proc_macro::TokenStream;\n-\n-#[proc_macro]\n-pub fn bang_proc_macro(input: TokenStream) -> TokenStream {\n-    input\n-}"}, {"sha": "921e2ce2fe004936b47279f82f4ff3d1ed5277e4", "filename": "src/test/ui/custom-derive/auxiliary/plugin.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fcustom-derive%2Fauxiliary%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fcustom-derive%2Fauxiliary%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fauxiliary%2Fplugin.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/custom-derive/auxiliary/plugin.rs"}, {"sha": "8478ff1a6ae6c7616833547b4f4323bd5a1a6a18", "filename": "src/test/ui/custom-derive/derive-in-mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fcustom-derive%2Fderive-in-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fcustom-derive%2Fderive-in-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fderive-in-mod.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/custom-derive/derive-in-mod.rs"}, {"sha": "ba072ba3568b7aac6ad2f8a3889eaa74100af974", "filename": "src/test/ui/custom-derive/helper-attr-blocked-by-import-ambig.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,5 +1,4 @@\n // aux-build:plugin.rs\n-// ignore-stage1\n \n #[macro_use(WithHelper)]\n extern crate plugin;", "previous_filename": "src/test/ui-fulldeps/custom-derive/helper-attr-blocked-by-import-ambig.rs"}, {"sha": "2c9d226cc9ef7c8beca691013c4abf968e87bbaa", "filename": "src/test/ui/custom-derive/helper-attr-blocked-by-import-ambig.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import-ambig.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,16 +1,16 @@\n error[E0659]: `helper` is ambiguous (derive helper attribute vs any other name)\n-  --> $DIR/helper-attr-blocked-by-import-ambig.rs:10:3\n+  --> $DIR/helper-attr-blocked-by-import-ambig.rs:9:3\n    |\n LL | #[helper] //~ ERROR `helper` is ambiguous\n    |   ^^^^^^ ambiguous name\n    |\n note: `helper` could refer to the derive helper attribute defined here\n-  --> $DIR/helper-attr-blocked-by-import-ambig.rs:9:10\n+  --> $DIR/helper-attr-blocked-by-import-ambig.rs:8:10\n    |\n LL | #[derive(WithHelper)]\n    |          ^^^^^^^^^^\n note: `helper` could also refer to the attribute macro imported here\n-  --> $DIR/helper-attr-blocked-by-import-ambig.rs:7:5\n+  --> $DIR/helper-attr-blocked-by-import-ambig.rs:6:5\n    |\n LL | use plugin::helper;\n    |     ^^^^^^^^^^^^^^", "previous_filename": "src/test/ui-fulldeps/custom-derive/helper-attr-blocked-by-import-ambig.stderr"}, {"sha": "abbf014f55337483f2fb9ee31a53e00c5086d533", "filename": "src/test/ui/custom-derive/helper-attr-blocked-by-import.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fhelper-attr-blocked-by-import.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,6 +1,5 @@\n // compile-pass\n // aux-build:plugin.rs\n-// ignore-stage1\n \n #[macro_use(WithHelper)]\n extern crate plugin;", "previous_filename": "src/test/ui-fulldeps/custom-derive/helper-attr-blocked-by-import.rs"}, {"sha": "92c47eba9adb4007b0a4d6224102db2109dee9c3", "filename": "src/test/ui/custom-derive/issue-36935.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:plugin.rs\n-// ignore-stage1\n+\n \n #[macro_use] extern crate plugin;\n ", "previous_filename": "src/test/ui-fulldeps/custom-derive/issue-36935.rs"}, {"sha": "ecbe0a9a0c079e04e655428c9bb136c7b5546ab2", "filename": "src/test/ui/custom-derive/issue-36935.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcustom-derive%2Fissue-36935.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/custom-derive/issue-36935.stderr"}, {"sha": "6a47e50f62dbb6bbc0872213531d539760acdf70", "filename": "src/test/ui/proc-macro/ambiguous-builtin-attrs-test.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs-test.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/ambiguous-builtin-attrs-test.rs"}, {"sha": "db07055b6a1093334f06b7d8dfb21029b46f38f7", "filename": "src/test/ui/proc-macro/ambiguous-builtin-attrs-test.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs-test.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/ambiguous-builtin-attrs-test.stderr"}, {"sha": "9f4f0abf32486ec3fbb1dd9943990fc2db68286b", "filename": "src/test/ui/proc-macro/ambiguous-builtin-attrs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/ambiguous-builtin-attrs.rs"}, {"sha": "79dc922b9db2cc8e95ea9519eb214f246489c9dc", "filename": "src/test/ui/proc-macro/ambiguous-builtin-attrs.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fambiguous-builtin-attrs.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/ambiguous-builtin-attrs.stderr"}, {"sha": "7b1eecd1558659f4665d2978d9839febc9074710", "filename": "src/test/ui/proc-macro/attribute-order-restricted.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-order-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-order-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-order-restricted.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/attribute-order-restricted.rs"}, {"sha": "a4f165cd1b52c65470e116dbed27a4c33152c9b3", "filename": "src/test/ui/proc-macro/attribute-order-restricted.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-order-restricted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-order-restricted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-order-restricted.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/attribute-order-restricted.stderr"}, {"sha": "af47dad9e0bd7240fd7b28e9338a434bce5c304f", "filename": "src/test/ui/proc-macro/attribute-spans-preserved.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/attribute-spans-preserved.rs"}, {"sha": "329e5bea61cd5ba54cd20d50d6f1583e032b664d", "filename": "src/test/ui/proc-macro/attribute-spans-preserved.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/attribute-spans-preserved.stderr"}, {"sha": "b1487fcd5edbdd7b8db1619f214b78db01b78de0", "filename": "src/test/ui/proc-macro/attribute-spans-preserved.stdout", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-spans-preserved.stdout?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/attribute-spans-preserved.stdout"}, {"sha": "679cb7728680ddbf26eefe2887c77cd9f7191a09", "filename": "src/test/ui/proc-macro/auxiliary/attr_proc_macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr_proc_macro.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/auxiliary/attr_proc_macro.rs"}, {"sha": "9f7a7e4f222843d5adda767916f10710baa8d28e", "filename": "src/test/ui/proc-macro/auxiliary/attribute-spans-preserved.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattribute-spans-preserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattribute-spans-preserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattribute-spans-preserved.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/proc-macro/auxiliary/attribute-spans-preserved.rs"}, {"sha": "6484725814a10b75581b8fa23a92e263dc695954", "filename": "src/test/ui/proc-macro/auxiliary/bang_proc_macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/auxiliary/bang_proc_macro.rs"}, {"sha": "571ea1bc5f395a35f689344710e2a63fc2caf0cb", "filename": "src/test/ui/proc-macro/auxiliary/builtin-attrs.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fbuiltin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fbuiltin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fbuiltin-attrs.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/proc-macro/auxiliary/builtin-attrs.rs"}, {"sha": "719fbdb15ef2a7f852a2f9056d7661ea12ade038", "filename": "src/test/ui/proc-macro/auxiliary/derive-clona.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-clona.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-clona.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-clona.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/auxiliary/derive-clona.rs"}, {"sha": "64dcf72ba2029b5165dbf06c32f669c2783ba024", "filename": "src/test/ui/proc-macro/auxiliary/derive-foo.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-foo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-foo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-foo.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/auxiliary/derive-foo.rs"}, {"sha": "9912a89dafb3f0e799725e740baf8b623cb1ab5d", "filename": "src/test/ui/proc-macro/auxiliary/derive-helper-shadowed-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowed-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowed-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowed-2.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/auxiliary/derive-helper-shadowed-2.rs"}, {"sha": "5b5243dd60ee3b89847a0bddd8c09d0909464648", "filename": "src/test/ui/proc-macro/auxiliary/derive-helper-shadowed.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowed.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,3 +1,4 @@\n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/proc-macro/auxiliary/derive-helper-shadowed.rs"}, {"sha": "6e0bdcba9c50f11b39a90826b6d9c7aa635859c2", "filename": "src/test/ui/proc-macro/auxiliary/derive-helper-shadowing.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-helper-shadowing.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,3 +1,4 @@\n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/proc-macro/auxiliary/derive-helper-shadowing.rs"}, {"sha": "d7fa5b6bed10dc749243aa42040314c720279a87", "filename": "src/test/ui/proc-macro/auxiliary/derive-panic.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-panic.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// no-prefer-dynamic\n // force-host\n+// no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n ", "previous_filename": "src/test/ui-fulldeps/proc-macro/auxiliary/derive-panic.rs"}, {"sha": "a1f025de3be73d1b62ee6ebf2bd23f1190c79040", "filename": "src/test/ui/proc-macro/auxiliary/generate-mod.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgenerate-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgenerate-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fgenerate-mod.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n // run-pass\n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/proc-macro/auxiliary/generate-mod.rs"}, {"sha": "cc899fa610d13fa2afb6a5a19b014a2b81e4471c", "filename": "src/test/ui/proc-macro/auxiliary/invalid-punct-ident.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Finvalid-punct-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Finvalid-punct-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Finvalid-punct-ident.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/auxiliary/invalid-punct-ident.rs"}, {"sha": "d9f290dec7ef928db64d19dd994a5826300e3b88", "filename": "src/test/ui/proc-macro/auxiliary/issue-53481.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-53481.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-53481.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-53481.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,3 +1,4 @@\n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/proc-macro/auxiliary/issue-53481.rs"}, {"sha": "8348d0888e49f4a57c9622da7a519b69ea280f4b", "filename": "src/test/ui/proc-macro/auxiliary/lifetimes.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Flifetimes.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/auxiliary/lifetimes.rs"}, {"sha": "08ff604fead1f68f95d3210f820ea38d9d60687a", "filename": "src/test/ui/proc-macro/auxiliary/macro-brackets.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmacro-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmacro-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmacro-brackets.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/proc-macro/auxiliary/macro-brackets.rs"}, {"sha": "e122b22e080d68b45d6f7c18c138abc870cdfb6f", "filename": "src/test/ui/proc-macro/auxiliary/multispan.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmultispan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmultispan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fmultispan.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/proc-macro/auxiliary/multispan.rs"}, {"sha": "e195f425ab34f676aa1941e3a87d3dd44b55dc07", "filename": "src/test/ui/proc-macro/auxiliary/nested-item-spans.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnested-item-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnested-item-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fnested-item-spans.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/proc-macro/auxiliary/nested-item-spans.rs"}, {"sha": "a007fad3675a9d28827555b6dc6775fac2732be4", "filename": "src/test/ui/proc-macro/auxiliary/parent-source-spans.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fparent-source-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fparent-source-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fparent-source-spans.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![feature(proc_macro_diagnostic, proc_macro_span)]", "previous_filename": "src/test/ui-fulldeps/proc-macro/auxiliary/parent-source-spans.rs"}, {"sha": "33c7968104b72c6be01dfb3f8c1409552804deeb", "filename": "src/test/ui/proc-macro/auxiliary/span-preservation.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fspan-preservation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fspan-preservation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fspan-preservation.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,3 +1,4 @@\n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/proc-macro/auxiliary/span-preservation.rs"}, {"sha": "dbf355fea5054814fcad493d92057f56a0e36ea3", "filename": "src/test/ui/proc-macro/auxiliary/subspan.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fsubspan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fsubspan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fsubspan.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/auxiliary/subspan.rs"}, {"sha": "b23841077e3938b2485b58e951f51de1fa8fc912", "filename": "src/test/ui/proc-macro/auxiliary/three-equals.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fthree-equals.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/proc-macro/auxiliary/three-equals.rs"}, {"sha": "792b54b3b945ae4a5f8e043934334b055896f912", "filename": "src/test/ui/proc-macro/derive-helper-shadowed.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowed.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/derive-helper-shadowed.rs"}, {"sha": "aa9eae0ba317afc4159519d71ed7823cb3cf7367", "filename": "src/test/ui/proc-macro/derive-helper-shadowing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/derive-helper-shadowing.rs"}, {"sha": "cc50fefc46453d393defc7bfb7ba3dbc691deed7", "filename": "src/test/ui/proc-macro/derive-helper-shadowing.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-helper-shadowing.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/derive-helper-shadowing.stderr"}, {"sha": "25a2a37614778e4f4c62b843659154bf79123c61", "filename": "src/test/ui/proc-macro/extern-prelude-extern-crate-proc-macro.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fextern-prelude-extern-crate-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fextern-prelude-extern-crate-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fextern-prelude-extern-crate-proc-macro.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/extern-prelude-extern-crate-proc-macro.rs"}, {"sha": "977faf7decdf50741f1acd147a92a546a79c32ef", "filename": "src/test/ui/proc-macro/generate-mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/generate-mod.rs"}, {"sha": "a981b1bc8b85a2930522ea6bc0ef59f73c533c5d", "filename": "src/test/ui/proc-macro/generate-mod.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgenerate-mod.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/generate-mod.stderr"}, {"sha": "cca954fdc6b9013367df0a089073b6f1d5463283", "filename": "src/test/ui/proc-macro/invalid-attributes.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/proc-macro/invalid-attributes.rs"}, {"sha": "c480bcb5df982d7a12fdb88131bb4b2773595cd1", "filename": "src/test/ui/proc-macro/invalid-attributes.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-attributes.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,35 +1,35 @@\n error: `#[proc_macro]` attribute does not take any arguments\n-  --> $DIR/invalid-attributes.rs:19:1\n+  --> $DIR/invalid-attributes.rs:20:1\n    |\n LL | #[proc_macro = \"test\"] //~ ERROR: does not take any arguments\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[proc_macro]` attribute does not take any arguments\n-  --> $DIR/invalid-attributes.rs:22:1\n+  --> $DIR/invalid-attributes.rs:23:1\n    |\n LL | #[proc_macro()] //~ ERROR: does not take any arguments\n    | ^^^^^^^^^^^^^^^\n \n error: `#[proc_macro]` attribute does not take any arguments\n-  --> $DIR/invalid-attributes.rs:25:1\n+  --> $DIR/invalid-attributes.rs:26:1\n    |\n LL | #[proc_macro(x)] //~ ERROR: does not take any arguments\n    | ^^^^^^^^^^^^^^^^\n \n error: `#[proc_macro_attribute]` attribute does not take any arguments\n-  --> $DIR/invalid-attributes.rs:28:1\n+  --> $DIR/invalid-attributes.rs:29:1\n    |\n LL | #[proc_macro_attribute = \"test\"] //~ ERROR: does not take any arguments\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[proc_macro_attribute]` attribute does not take any arguments\n-  --> $DIR/invalid-attributes.rs:31:1\n+  --> $DIR/invalid-attributes.rs:32:1\n    |\n LL | #[proc_macro_attribute()] //~ ERROR: does not take any arguments\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `#[proc_macro_attribute]` attribute does not take any arguments\n-  --> $DIR/invalid-attributes.rs:34:1\n+  --> $DIR/invalid-attributes.rs:35:1\n    |\n LL | #[proc_macro_attribute(x)] //~ ERROR: does not take any arguments\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui-fulldeps/proc-macro/invalid-attributes.stderr"}, {"sha": "576c156c1059e01c7fc6e36b050eef6e4f93bffc", "filename": "src/test/ui/proc-macro/invalid-punct-ident-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/invalid-punct-ident-1.rs"}, {"sha": "3b3619e2637f88ca62747c0995ae89bfa93cddbd", "filename": "src/test/ui/proc-macro/invalid-punct-ident-1.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-1.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/invalid-punct-ident-1.stderr"}, {"sha": "874a7d169d19dceec39638732336ab5e16198b00", "filename": "src/test/ui/proc-macro/invalid-punct-ident-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/invalid-punct-ident-2.rs"}, {"sha": "869c0908bb51a6d1793e8137ec1f6a4415c687b5", "filename": "src/test/ui/proc-macro/invalid-punct-ident-2.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-2.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/invalid-punct-ident-2.stderr"}, {"sha": "f73bf500545d52f08032bbdfd53417dae40d0a52", "filename": "src/test/ui/proc-macro/invalid-punct-ident-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/invalid-punct-ident-3.rs"}, {"sha": "716f6ffa098203255685bbda8a82ad70498de7d3", "filename": "src/test/ui/proc-macro/invalid-punct-ident-3.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-3.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/invalid-punct-ident-3.stderr"}, {"sha": "1e93c69c6502c3dc840d94d1553c268f1e695314", "filename": "src/test/ui/proc-macro/invalid-punct-ident-4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/invalid-punct-ident-4.rs"}, {"sha": "669a1eb58392163fcbe97a03d534036331a13806", "filename": "src/test/ui/proc-macro/invalid-punct-ident-4.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finvalid-punct-ident-4.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/invalid-punct-ident-4.stderr"}, {"sha": "479fd1db630a392b2350f637279650e954e43573", "filename": "src/test/ui/proc-macro/issue-53481.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fissue-53481.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fissue-53481.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-53481.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/issue-53481.rs"}, {"sha": "ff6464a7a3a70fdee854028d6a4e1c3fd54efa9b", "filename": "src/test/ui/proc-macro/lifetimes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/lifetimes.rs"}, {"sha": "6baf2b16998f17e62b27c12e3862a11dede4f989", "filename": "src/test/ui/proc-macro/lifetimes.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/lifetimes.stderr"}, {"sha": "462eaf0341704a66987eb650cb621df47f5acaf0", "filename": "src/test/ui/proc-macro/load-panic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/load-panic.rs"}, {"sha": "30ad53f9041f0b294e62e189285aefb175516e84", "filename": "src/test/ui/proc-macro/load-panic.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fload-panic.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/load-panic.stderr"}, {"sha": "b29f2775201b8baa6feabf560ec444913e4a0573", "filename": "src/test/ui/proc-macro/macro-brackets.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/macro-brackets.rs"}, {"sha": "7c263d38df9714c7329801f9917a6a74158d0e25", "filename": "src/test/ui/proc-macro/macro-brackets.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-brackets.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/macro-brackets.stderr"}, {"sha": "02526b60db0adf5952d3595af0e5186c6c307871", "filename": "src/test/ui/proc-macro/macro-namespace-reserved-2.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/proc-macro/macro-namespace-reserved-2.rs"}, {"sha": "9e989ebdd314815c982fc2eba5e399e762da80d3", "filename": "src/test/ui/proc-macro/macro-namespace-reserved-2.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved-2.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,53 +1,53 @@\n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:34:5\n+  --> $DIR/macro-namespace-reserved-2.rs:35:5\n    |\n LL |     my_macro!(); //~ ERROR can't use a procedural macro from the same crate that defines it\n    |     ^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:37:5\n+  --> $DIR/macro-namespace-reserved-2.rs:38:5\n    |\n LL |     my_macro_attr!(); //~ ERROR can't use a procedural macro from the same crate that defines it\n    |     ^^^^^^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:40:5\n+  --> $DIR/macro-namespace-reserved-2.rs:41:5\n    |\n LL |     MyTrait!(); //~ ERROR can't use a procedural macro from the same crate that defines it\n    |     ^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:43:3\n+  --> $DIR/macro-namespace-reserved-2.rs:44:3\n    |\n LL | #[my_macro] //~ ERROR can't use a procedural macro from the same crate that defines it\n    |   ^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:45:3\n+  --> $DIR/macro-namespace-reserved-2.rs:46:3\n    |\n LL | #[my_macro_attr] //~ ERROR can't use a procedural macro from the same crate that defines it\n    |   ^^^^^^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:47:3\n+  --> $DIR/macro-namespace-reserved-2.rs:48:3\n    |\n LL | #[MyTrait] //~ ERROR can't use a procedural macro from the same crate that defines it\n    |   ^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:50:10\n+  --> $DIR/macro-namespace-reserved-2.rs:51:10\n    |\n LL | #[derive(my_macro)] //~ ERROR can't use a procedural macro from the same crate that defines it\n    |          ^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:52:10\n+  --> $DIR/macro-namespace-reserved-2.rs:53:10\n    |\n LL | #[derive(my_macro_attr)] //~ ERROR can't use a procedural macro from the same crate that defines it\n    |          ^^^^^^^^^^^^^\n \n error: can't use a procedural macro from the same crate that defines it\n-  --> $DIR/macro-namespace-reserved-2.rs:54:10\n+  --> $DIR/macro-namespace-reserved-2.rs:55:10\n    |\n LL | #[derive(MyTrait)] //~ ERROR can't use a procedural macro from the same crate that defines it\n    |          ^^^^^^^", "previous_filename": "src/test/ui-fulldeps/proc-macro/macro-namespace-reserved-2.stderr"}, {"sha": "b0a3dbf0c1fab4d15244c571df97e24a4cbe966b", "filename": "src/test/ui/proc-macro/macro-namespace-reserved.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![feature(decl_macro)]", "previous_filename": "src/test/ui-fulldeps/proc-macro/macro-namespace-reserved.rs"}, {"sha": "c453bde6c17961a0fab9ad3be8f08cf1dc5bfab0", "filename": "src/test/ui/proc-macro/macro-namespace-reserved.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-namespace-reserved.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,5 +1,5 @@\n error[E0428]: the name `my_macro` is defined multiple times\n-  --> $DIR/macro-namespace-reserved.rs:34:1\n+  --> $DIR/macro-namespace-reserved.rs:35:1\n    |\n LL | pub fn my_macro(input: TokenStream) -> TokenStream {\n    | -------------------------------------------------- previous definition of the macro `my_macro` here\n@@ -10,7 +10,7 @@ LL | macro my_macro() {} //~ ERROR the name `my_macro` is defined multiple times\n    = note: `my_macro` must be defined only once in the macro namespace of this module\n \n error[E0428]: the name `my_macro_attr` is defined multiple times\n-  --> $DIR/macro-namespace-reserved.rs:35:1\n+  --> $DIR/macro-namespace-reserved.rs:36:1\n    |\n LL | pub fn my_macro_attr(input: TokenStream, _: TokenStream) -> TokenStream {\n    | ----------------------------------------------------------------------- previous definition of the macro `my_macro_attr` here\n@@ -21,7 +21,7 @@ LL | macro my_macro_attr() {} //~ ERROR the name `my_macro_attr` is defined mult\n    = note: `my_macro_attr` must be defined only once in the macro namespace of this module\n \n error[E0428]: the name `MyTrait` is defined multiple times\n-  --> $DIR/macro-namespace-reserved.rs:36:1\n+  --> $DIR/macro-namespace-reserved.rs:37:1\n    |\n LL | #[proc_macro_derive(MyTrait)]\n    |                     ------- previous definition of the macro `MyTrait` here\n@@ -32,7 +32,7 @@ LL | macro MyTrait() {} //~ ERROR the name `MyTrait` is defined multiple times\n    = note: `MyTrait` must be defined only once in the macro namespace of this module\n \n error[E0428]: the name `SameName` is defined multiple times\n-  --> $DIR/macro-namespace-reserved.rs:44:1\n+  --> $DIR/macro-namespace-reserved.rs:45:1\n    |\n LL | #[proc_macro_derive(SameName)]\n    |                     -------- previous definition of the macro `SameName` here", "previous_filename": "src/test/ui-fulldeps/proc-macro/macro-namespace-reserved.stderr"}, {"sha": "904562e903d65634e3bcbe5dc41657435749d187", "filename": "src/test/ui/proc-macro/macro-use-attr.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-use-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-use-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-use-attr.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/macro-use-attr.rs"}, {"sha": "d7713f48e703b8574f95cf47b28a852ad6247b88", "filename": "src/test/ui/proc-macro/macro-use-bang.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-use-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-use-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmacro-use-bang.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/macro-use-bang.rs"}, {"sha": "03067868a81f9ec3d786aac0d4a5f52e51e8f990", "filename": "src/test/ui/proc-macro/multispan.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:multispan.rs\n-// ignore-stage1\n \n #![feature(proc_macro_hygiene)]\n ", "previous_filename": "src/test/ui-fulldeps/proc-macro/multispan.rs"}, {"sha": "39bdbb5e4501e4ee89179d86441f2f97334fcea7", "filename": "src/test/ui/proc-macro/multispan.stderr", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmultispan.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,83 +1,83 @@\n error: hello to you, too!\n-  --> $DIR/multispan.rs:25:5\n+  --> $DIR/multispan.rs:24:5\n    |\n LL |     hello!(hi); //~ ERROR hello to you, too!\n    |     ^^^^^^^^^^^\n    |\n note: found these 'hi's\n-  --> $DIR/multispan.rs:25:12\n+  --> $DIR/multispan.rs:24:12\n    |\n LL |     hello!(hi); //~ ERROR hello to you, too!\n    |            ^^\n \n error: hello to you, too!\n-  --> $DIR/multispan.rs:28:5\n+  --> $DIR/multispan.rs:27:5\n    |\n LL |     hello!(hi hi); //~ ERROR hello to you, too!\n    |     ^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n-  --> $DIR/multispan.rs:28:12\n+  --> $DIR/multispan.rs:27:12\n    |\n LL |     hello!(hi hi); //~ ERROR hello to you, too!\n    |            ^^ ^^\n \n error: hello to you, too!\n-  --> $DIR/multispan.rs:31:5\n+  --> $DIR/multispan.rs:30:5\n    |\n LL |     hello!(hi hi hi); //~ ERROR hello to you, too!\n    |     ^^^^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n-  --> $DIR/multispan.rs:31:12\n+  --> $DIR/multispan.rs:30:12\n    |\n LL |     hello!(hi hi hi); //~ ERROR hello to you, too!\n    |            ^^ ^^ ^^\n \n error: hello to you, too!\n-  --> $DIR/multispan.rs:34:5\n+  --> $DIR/multispan.rs:33:5\n    |\n LL |     hello!(hi hey hi yo hi beep beep hi hi); //~ ERROR hello to you, too!\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n-  --> $DIR/multispan.rs:34:12\n+  --> $DIR/multispan.rs:33:12\n    |\n LL |     hello!(hi hey hi yo hi beep beep hi hi); //~ ERROR hello to you, too!\n    |            ^^     ^^    ^^           ^^ ^^\n \n error: hello to you, too!\n-  --> $DIR/multispan.rs:35:5\n+  --> $DIR/multispan.rs:34:5\n    |\n LL |     hello!(hi there, hi how are you? hi... hi.); //~ ERROR hello to you, too!\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n-  --> $DIR/multispan.rs:35:12\n+  --> $DIR/multispan.rs:34:12\n    |\n LL |     hello!(hi there, hi how are you? hi... hi.); //~ ERROR hello to you, too!\n    |            ^^        ^^              ^^    ^^\n \n error: hello to you, too!\n-  --> $DIR/multispan.rs:36:5\n+  --> $DIR/multispan.rs:35:5\n    |\n LL |     hello!(whoah. hi di hi di ho); //~ ERROR hello to you, too!\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n-  --> $DIR/multispan.rs:36:19\n+  --> $DIR/multispan.rs:35:19\n    |\n LL |     hello!(whoah. hi di hi di ho); //~ ERROR hello to you, too!\n    |                   ^^    ^^\n \n error: hello to you, too!\n-  --> $DIR/multispan.rs:37:5\n+  --> $DIR/multispan.rs:36:5\n    |\n LL |     hello!(hi good hi and good bye); //~ ERROR hello to you, too!\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: found these 'hi's\n-  --> $DIR/multispan.rs:37:12\n+  --> $DIR/multispan.rs:36:12\n    |\n LL |     hello!(hi good hi and good bye); //~ ERROR hello to you, too!\n    |            ^^      ^^", "previous_filename": "src/test/ui-fulldeps/proc-macro/multispan.stderr"}, {"sha": "8f059d6344df67bae76a34d748eb27ebd556289b", "filename": "src/test/ui/proc-macro/nested-item-spans.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/nested-item-spans.rs"}, {"sha": "75140747e8c76fbe3e7b7d207360edc2e7b8ed6b", "filename": "src/test/ui/proc-macro/nested-item-spans.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-item-spans.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/nested-item-spans.stderr"}, {"sha": "437973a426e41ae004302a4207985eeda2f22999", "filename": "src/test/ui/proc-macro/non-root.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fnon-root.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fnon-root.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnon-root.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/proc-macro/non-root.rs"}, {"sha": "8c14f644d7a642b810c75f46de38d01e20f667b7", "filename": "src/test/ui/proc-macro/non-root.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fnon-root.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fnon-root.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnon-root.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,5 +1,5 @@\n error: functions tagged with `#[proc_macro]` must currently reside in the root of the crate\n-  --> $DIR/non-root.rs:20:5\n+  --> $DIR/non-root.rs:21:5\n    |\n LL |     pub fn foo(arg: TokenStream) -> TokenStream { arg }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui-fulldeps/proc-macro/non-root.stderr"}, {"sha": "8f8e22ba1c34d7cd9a3bf93a94c956143ad7766b", "filename": "src/test/ui/proc-macro/parent-source-spans.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:parent-source-spans.rs\n-// ignore-stage1\n+\n \n #![feature(decl_macro, proc_macro_hygiene)]\n ", "previous_filename": "src/test/ui-fulldeps/proc-macro/parent-source-spans.rs"}, {"sha": "0442c4f6ce71f313d51a2aae24c94f81e6cd744a", "filename": "src/test/ui/proc-macro/parent-source-spans.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/parent-source-spans.stderr"}, {"sha": "7c66af172fd5ed1208f156b4d49f55d905e5495f", "filename": "src/test/ui/proc-macro/reserved-macro-names.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Freserved-macro-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Freserved-macro-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Freserved-macro-names.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,3 +1,6 @@\n+// force-host\n+// no-prefer-dynamic\n+\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;", "previous_filename": "src/test/ui-fulldeps/proc-macro/reserved-macro-names.rs"}, {"sha": "5ebe62a4969bbbaa8b55edd8347afa0e351e74d1", "filename": "src/test/ui/proc-macro/reserved-macro-names.stderr", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Freserved-macro-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Freserved-macro-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Freserved-macro-names.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,17 +1,17 @@\n error: name `cfg` is reserved in macro namespace\n-  --> $DIR/reserved-macro-names.rs:7:8\n+  --> $DIR/reserved-macro-names.rs:10:8\n    |\n LL | pub fn cfg(_: TokenStream, input: TokenStream) -> TokenStream {\n    |        ^^^\n \n error: name `cfg_attr` is reserved in macro namespace\n-  --> $DIR/reserved-macro-names.rs:13:8\n+  --> $DIR/reserved-macro-names.rs:16:8\n    |\n LL | pub fn cfg_attr(_: TokenStream, input: TokenStream) -> TokenStream {\n    |        ^^^^^^^^\n \n error: name `derive` is reserved in macro namespace\n-  --> $DIR/reserved-macro-names.rs:19:8\n+  --> $DIR/reserved-macro-names.rs:22:8\n    |\n LL | pub fn derive(_: TokenStream, input: TokenStream) -> TokenStream {\n    |        ^^^^^^", "previous_filename": "src/test/ui-fulldeps/proc-macro/reserved-macro-names.stderr"}, {"sha": "1940151357c8f82a478b434f6943ce8e0394623f", "filename": "src/test/ui/proc-macro/resolve-error.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/resolve-error.rs"}, {"sha": "59ca668d4852553736fd0879fa9f54394204748c", "filename": "src/test/ui/proc-macro/resolve-error.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fresolve-error.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/resolve-error.stderr"}, {"sha": "4d6903187e449a9f6daed2084a0f3216f26eb3cd", "filename": "src/test/ui/proc-macro/signature.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n+// no-prefer-dynamic\n+\n #![crate_type = \"proc-macro\"]\n #![allow(warnings)]\n ", "previous_filename": "src/test/ui-fulldeps/proc-macro/signature.rs"}, {"sha": "681e72c08c4456e59938bd92cf53a7c819d95306", "filename": "src/test/ui/proc-macro/signature.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsignature.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/signature.rs:17:1\n+  --> $DIR/signature.rs:20:1\n    |\n LL | / pub unsafe extern fn foo(a: i32, b: u32) -> u32 {\n LL | |     //~^ ERROR: mismatched types", "previous_filename": "src/test/ui-fulldeps/proc-macro/signature.stderr"}, {"sha": "adcb42ab2d1ccc4e3431aefc4b794b0e2e45bf09", "filename": "src/test/ui/proc-macro/span-preservation.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/span-preservation.rs"}, {"sha": "f33245aec37201e031ddf1f5a4e0ac225822d219", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/span-preservation.stderr"}, {"sha": "dccf6e20448a666f49f45c366085b8b7e9f6435a", "filename": "src/test/ui/proc-macro/subspan.rs", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fsubspan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fsubspan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsubspan.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:subspan.rs\n-// ignore-stage1\n \n extern crate subspan;\n ", "previous_filename": "src/test/ui-fulldeps/subspan.rs"}, {"sha": "d9339bdaf7632c9255713aa73ed2cb3de7cc946c", "filename": "src/test/ui/proc-macro/subspan.stderr", "status": "renamed", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fsubspan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fsubspan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fsubspan.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,95 +1,95 @@\n error: found 'hi's\n-  --> $DIR/subspan.rs:22:1\n+  --> $DIR/subspan.rs:21:1\n    |\n LL | subspan!(\"hi\"); //~ ERROR found 'hi's\n    | ^^^^^^^^^^^^^^^\n    |\n note: here\n-  --> $DIR/subspan.rs:22:11\n+  --> $DIR/subspan.rs:21:11\n    |\n LL | subspan!(\"hi\"); //~ ERROR found 'hi's\n    |           ^^\n \n error: found 'hi's\n-  --> $DIR/subspan.rs:25:1\n+  --> $DIR/subspan.rs:24:1\n    |\n LL | subspan!(\"hihi\"); //~ ERROR found 'hi's\n    | ^^^^^^^^^^^^^^^^^\n    |\n note: here\n-  --> $DIR/subspan.rs:25:11\n+  --> $DIR/subspan.rs:24:11\n    |\n LL | subspan!(\"hihi\"); //~ ERROR found 'hi's\n    |           ^^^^\n \n error: found 'hi's\n-  --> $DIR/subspan.rs:28:1\n+  --> $DIR/subspan.rs:27:1\n    |\n LL | subspan!(\"hihihi\"); //~ ERROR found 'hi's\n    | ^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n-  --> $DIR/subspan.rs:28:11\n+  --> $DIR/subspan.rs:27:11\n    |\n LL | subspan!(\"hihihi\"); //~ ERROR found 'hi's\n    |           ^^^^^^\n \n error: found 'hi's\n-  --> $DIR/subspan.rs:31:1\n+  --> $DIR/subspan.rs:30:1\n    |\n LL | subspan!(\"why I hide? hi!\"); //~ ERROR found 'hi's\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n-  --> $DIR/subspan.rs:31:17\n+  --> $DIR/subspan.rs:30:17\n    |\n LL | subspan!(\"why I hide? hi!\"); //~ ERROR found 'hi's\n    |                 ^^    ^^\n \n error: found 'hi's\n-  --> $DIR/subspan.rs:32:1\n+  --> $DIR/subspan.rs:31:1\n    |\n LL | subspan!(\"hey, hi, hidy, hidy, hi hi\"); //~ ERROR found 'hi's\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n-  --> $DIR/subspan.rs:32:16\n+  --> $DIR/subspan.rs:31:16\n    |\n LL | subspan!(\"hey, hi, hidy, hidy, hi hi\"); //~ ERROR found 'hi's\n    |                ^^  ^^    ^^    ^^ ^^\n \n error: found 'hi's\n-  --> $DIR/subspan.rs:33:1\n+  --> $DIR/subspan.rs:32:1\n    |\n LL | subspan!(\"this is a hi, and this is another hi\"); //~ ERROR found 'hi's\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n-  --> $DIR/subspan.rs:33:12\n+  --> $DIR/subspan.rs:32:12\n    |\n LL | subspan!(\"this is a hi, and this is another hi\"); //~ ERROR found 'hi's\n    |            ^^       ^^       ^^             ^^\n \n error: found 'hi's\n-  --> $DIR/subspan.rs:34:1\n+  --> $DIR/subspan.rs:33:1\n    |\n LL | subspan!(\"how are you this evening\"); //~ ERROR found 'hi's\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n-  --> $DIR/subspan.rs:34:24\n+  --> $DIR/subspan.rs:33:24\n    |\n LL | subspan!(\"how are you this evening\"); //~ ERROR found 'hi's\n    |                        ^^\n \n error: found 'hi's\n-  --> $DIR/subspan.rs:35:1\n+  --> $DIR/subspan.rs:34:1\n    |\n LL | subspan!(\"this is highly eradic\"); //~ ERROR found 'hi's\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: here\n-  --> $DIR/subspan.rs:35:12\n+  --> $DIR/subspan.rs:34:12\n    |\n LL | subspan!(\"this is highly eradic\"); //~ ERROR found 'hi's\n    |            ^^     ^^", "previous_filename": "src/test/ui-fulldeps/subspan.stderr"}, {"sha": "e3285d3e821f0b80e436038a00361c07a21c399a", "filename": "src/test/ui/proc-macro/three-equals.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // aux-build:three-equals.rs\n-// ignore-stage1\n+\n \n #![feature(proc_macro_hygiene)]\n ", "previous_filename": "src/test/ui-fulldeps/proc-macro/three-equals.rs"}, {"sha": "1a0337f93f9acffec96aaa506647a564f202d587", "filename": "src/test/ui/proc-macro/three-equals.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fthree-equals.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/proc-macro/three-equals.stderr"}, {"sha": "b8a05e89a664a3e3397442b2729d798a226b6b8b", "filename": "src/test/ui/rust-2018/auxiliary/suggestions-not-always-applicable.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Fsuggestions-not-always-applicable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Fsuggestions-not-always-applicable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Fsuggestions-not-always-applicable.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// force-host\n // no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]", "previous_filename": "src/test/ui-fulldeps/rust-2018/auxiliary/suggestions-not-always-applicable.rs"}, {"sha": "51314abaad222555bb8d655008666fa77e3be104", "filename": "src/test/ui/rust-2018/proc-macro-crate-in-paths.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Frust-2018%2Fproc-macro-crate-in-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Frust-2018%2Fproc-macro-crate-in-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fproc-macro-crate-in-paths.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // compile-pass\n+// force-host\n+// no-prefer-dynamic\n \n #![crate_type = \"proc-macro\"]\n #![deny(rust_2018_compatibility)]", "previous_filename": "src/test/ui-fulldeps/rust-2018/proc-macro-crate-in-paths.rs"}, {"sha": "b64ebed030588fae9cccd48b4f963f1d580c0aa5", "filename": "src/test/ui/rust-2018/suggestions-not-always-applicable.fixed", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.fixed?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/rust-2018/suggestions-not-always-applicable.fixed"}, {"sha": "b64ebed030588fae9cccd48b4f963f1d580c0aa5", "filename": "src/test/ui/rust-2018/suggestions-not-always-applicable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/rust-2018/suggestions-not-always-applicable.rs"}, {"sha": "415733a346fc6a60397df89f4b25b9c8bf9c2495", "filename": "src/test/ui/rust-2018/suggestions-not-always-applicable.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fsuggestions-not-always-applicable.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "previous_filename": "src/test/ui-fulldeps/rust-2018/suggestions-not-always-applicable.stderr"}, {"sha": "110cfefcd92e597cad757ea3bbdb5e086f75a19f", "filename": "src/test/ui/unnecessary-extern-crate.rs", "status": "renamed", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Funnecessary-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Funnecessary-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funnecessary-extern-crate.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -13,10 +13,10 @@\n #![deny(unused_extern_crates)]\n #![feature(alloc, test, libc, crate_visibility_modifier)]\n \n-extern crate alloc;\n+extern crate libc;\n //~^ ERROR unused extern crate\n //~| HELP remove\n-extern crate alloc as x;\n+extern crate libc as x;\n //~^ ERROR unused extern crate\n //~| HELP remove\n \n@@ -27,22 +27,22 @@ extern crate test;\n \n pub extern crate test as y;\n \n-pub extern crate libc;\n+pub extern crate alloc;\n \n-pub(crate) extern crate libc as a;\n+pub(crate) extern crate alloc as a;\n \n-crate extern crate libc as b;\n+crate extern crate alloc as b;\n \n mod foo {\n-    pub(in crate::foo) extern crate libc as c;\n+    pub(in crate::foo) extern crate alloc as c;\n \n-    pub(super) extern crate libc as d;\n+    pub(super) extern crate alloc as d;\n \n-    extern crate alloc;\n+    extern crate libc;\n     //~^ ERROR unused extern crate\n     //~| HELP remove\n \n-    extern crate alloc as x;\n+    extern crate libc as x;\n     //~^ ERROR unused extern crate\n     //~| HELP remove\n \n@@ -51,35 +51,31 @@ mod foo {\n     pub extern crate test as y;\n \n     mod bar {\n-        extern crate alloc;\n+        extern crate libc;\n         //~^ ERROR unused extern crate\n         //~| HELP remove\n \n-        extern crate alloc as x;\n+        extern crate libc as x;\n         //~^ ERROR unused extern crate\n         //~| HELP remove\n \n-        pub(in crate::foo::bar) extern crate libc as e;\n+        pub(in crate::foo::bar) extern crate alloc as e;\n \n         fn dummy() {\n-            unsafe {\n-                e::getpid();\n-            }\n+            e::string::String::new();\n         }\n     }\n \n     fn dummy() {\n-        unsafe {\n-            c::getpid();\n-            d::getpid();\n-        }\n+        c::string::String::new();\n+        d::string::String::new();\n     }\n }\n \n \n fn main() {\n-    unsafe { a::getpid(); }\n-    unsafe { b::getpid(); }\n+    a::string::String::new();\n+    b::string::String::new();\n \n     proc_macro::TokenStream::new();\n }", "previous_filename": "src/test/ui-fulldeps/unnecessary-extern-crate.rs"}, {"sha": "1315bff791deb9062d6623b4a409b3ca6beb3611", "filename": "src/test/ui/unnecessary-extern-crate.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Funnecessary-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftest%2Fui%2Funnecessary-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funnecessary-extern-crate.stderr?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1,8 +1,8 @@\n error: unused extern crate\n   --> $DIR/unnecessary-extern-crate.rs:16:1\n    |\n-LL | extern crate alloc;\n-   | ^^^^^^^^^^^^^^^^^^^ help: remove it\n+LL | extern crate libc;\n+   | ^^^^^^^^^^^^^^^^^^ help: remove it\n    |\n note: lint level defined here\n   --> $DIR/unnecessary-extern-crate.rs:13:9\n@@ -13,32 +13,32 @@ LL | #![deny(unused_extern_crates)]\n error: unused extern crate\n   --> $DIR/unnecessary-extern-crate.rs:19:1\n    |\n-LL | extern crate alloc as x;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n+LL | extern crate libc as x;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n \n error: unused extern crate\n   --> $DIR/unnecessary-extern-crate.rs:41:5\n    |\n-LL |     extern crate alloc;\n-   |     ^^^^^^^^^^^^^^^^^^^ help: remove it\n+LL |     extern crate libc;\n+   |     ^^^^^^^^^^^^^^^^^^ help: remove it\n \n error: unused extern crate\n   --> $DIR/unnecessary-extern-crate.rs:45:5\n    |\n-LL |     extern crate alloc as x;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n+LL |     extern crate libc as x;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n \n error: unused extern crate\n   --> $DIR/unnecessary-extern-crate.rs:54:9\n    |\n-LL |         extern crate alloc;\n-   |         ^^^^^^^^^^^^^^^^^^^ help: remove it\n+LL |         extern crate libc;\n+   |         ^^^^^^^^^^^^^^^^^^ help: remove it\n \n error: unused extern crate\n   --> $DIR/unnecessary-extern-crate.rs:58:9\n    |\n-LL |         extern crate alloc as x;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n+LL |         extern crate libc as x;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: remove it\n \n error: aborting due to 6 previous errors\n ", "previous_filename": "src/test/ui-fulldeps/unnecessary-extern-crate.stderr"}, {"sha": "b650e056eb774a6c1ea59200309c7c60ba809f44", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d48ab693d1ce99f30c0cf9abdf45c209824fe825/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=d48ab693d1ce99f30c0cf9abdf45c209824fe825", "patch": "@@ -1829,10 +1829,10 @@ impl<'test> TestCx<'test> {\n             rustc.args(self.split_maybe_args(&self.config.host_rustcflags));\n         } else {\n             rustc.args(self.split_maybe_args(&self.config.target_rustcflags));\n-        }\n-        if !is_rustdoc {\n-            if let Some(ref linker) = self.config.linker {\n-                rustc.arg(format!(\"-Clinker={}\", linker));\n+            if !is_rustdoc {\n+                if let Some(ref linker) = self.config.linker {\n+                    rustc.arg(format!(\"-Clinker={}\", linker));\n+                }\n             }\n         }\n "}]}