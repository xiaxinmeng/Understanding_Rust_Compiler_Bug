{"sha": "7538450b8d5e831dca7891bdd54ebdf25d865970", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1Mzg0NTBiOGQ1ZTgzMWRjYTc4OTFiZGQ1NGViZGYyNWQ4NjU5NzA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-08T02:04:21Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-11T16:35:59Z"}, "message": "libsyntax: Remove newtype enums from libsyntax. rs=deenum", "tree": {"sha": "1d817db800d585202c5ee271eb5e82123c0043cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d817db800d585202c5ee271eb5e82123c0043cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7538450b8d5e831dca7891bdd54ebdf25d865970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7538450b8d5e831dca7891bdd54ebdf25d865970", "html_url": "https://github.com/rust-lang/rust/commit/7538450b8d5e831dca7891bdd54ebdf25d865970", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7538450b8d5e831dca7891bdd54ebdf25d865970/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc4869945c42b6df04487955e914319466975ae9", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4869945c42b6df04487955e914319466975ae9", "html_url": "https://github.com/rust-lang/rust/commit/dc4869945c42b6df04487955e914319466975ae9"}], "stats": {"total": 54, "additions": 14, "deletions": 40}, "files": [{"sha": "27dba9c2b5ebc23a57ee4b8c88099a60b87d98ae", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7538450b8d5e831dca7891bdd54ebdf25d865970/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7538450b8d5e831dca7891bdd54ebdf25d865970/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7538450b8d5e831dca7891bdd54ebdf25d865970", "patch": "@@ -1086,16 +1086,11 @@ pub enum variant_kind {\n #[auto_encode]\n #[auto_decode]\n #[deriving_eq]\n-pub struct enum_def_ {\n+pub struct enum_def {\n     variants: ~[variant],\n     common: Option<@struct_def>,\n }\n \n-#[auto_encode]\n-#[auto_decode]\n-#[deriving_eq]\n-pub enum enum_def = enum_def_;\n-\n #[auto_encode]\n #[auto_decode]\n #[deriving_eq]"}, {"sha": "0d6ece8ad92f14336c748096b0922a243a44e8f6", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7538450b8d5e831dca7891bdd54ebdf25d865970/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7538450b8d5e831dca7891bdd54ebdf25d865970/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=7538450b8d5e831dca7891bdd54ebdf25d865970", "patch": "@@ -35,11 +35,11 @@ pub trait Pos {\n }\n \n /// A byte offset\n-pub enum BytePos = uint;\n+pub struct BytePos(uint);\n /// A character offset. Because of multibyte utf8 characters, a byte offset\n /// is not equivalent to a character offset. The CodeMap will convert BytePos\n /// values to CharPos values as necessary.\n-pub enum CharPos = uint;\n+pub struct CharPos(uint);\n \n // XXX: Lots of boilerplate in these impls, but so far my attempts to fix\n // have been unsuccessful"}, {"sha": "c99d89776431a9968d9f424aad97e89b03fc6d95", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7538450b8d5e831dca7891bdd54ebdf25d865970/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7538450b8d5e831dca7891bdd54ebdf25d865970/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=7538450b8d5e831dca7891bdd54ebdf25d865970", "patch": "@@ -1327,16 +1327,4 @@ mod test {\n                        CallToEmitEnumVariantArg (1),\n                        CallToEmitUint (44)]);\n         }\n-\n-    pub enum BPos = uint;\n-\n-    #[auto_encode]\n-    pub struct HasPos { pos : BPos }\n-\n-    #[test] fn encode_newtype_test () {\n-        check_equal (to_call_log (HasPos {pos:BPos(48)}),\n-                    ~[CallToEmitStruct(~\"HasPos\",1),\n-                      CallToEmitField(~\"pos\",0),\n-                      CallToEmitUint(48)]);\n-    }\n }"}, {"sha": "fd8b2dbf72f815365b49416555b81a9d333a45b0", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7538450b8d5e831dca7891bdd54ebdf25d865970/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7538450b8d5e831dca7891bdd54ebdf25d865970/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=7538450b8d5e831dca7891bdd54ebdf25d865970", "patch": "@@ -238,9 +238,7 @@ impl to_type_decls for state {\n             cx.item_enum_poly(\n                 name,\n                 self.span,\n-                ast::enum_def(enum_def_ {\n-                    variants: items_msg,\n-                    common: None }),\n+                ast::enum_def { variants: items_msg, common: None },\n                 cx.strip_bounds(&self.generics)\n             )\n         ]"}, {"sha": "427760c920f6dab1f163050f80c2ddd123b2fbdb", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7538450b8d5e831dca7891bdd54ebdf25d865970/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7538450b8d5e831dca7891bdd54ebdf25d865970/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=7538450b8d5e831dca7891bdd54ebdf25d865970", "patch": "@@ -254,16 +254,14 @@ pub fn noop_fold_item_underscore(i: &item_, fld: @ast_fold) -> item_ {\n         }\n         item_enum(ref enum_definition, ref generics) => {\n             item_enum(\n-                ast::enum_def(\n-                    ast::enum_def_ {\n-                        variants: do enum_definition.variants.map |x| {\n-                            fld.fold_variant(x)\n-                        },\n-                        common: do enum_definition.common.map |x| {\n-                            fold_struct_def(*x, fld)\n-                        }\n+                ast::enum_def {\n+                    variants: do enum_definition.variants.map |x| {\n+                        fld.fold_variant(x)\n+                    },\n+                    common: do enum_definition.common.map |x| {\n+                        fold_struct_def(*x, fld)\n                     }\n-                ),\n+                },\n                 fold_generics(generics, fld))\n         }\n         item_struct(ref struct_def, ref generics) => {\n@@ -684,10 +682,7 @@ fn noop_fold_variant(v: &variant_, fld: @ast_fold) -> variant_ {\n                 fold_struct_def(*x, fld)\n             };\n             kind = enum_variant_kind(\n-                ast::enum_def(ast::enum_def_ {\n-                    variants: variants,\n-                    common: common\n-                })\n+                ast::enum_def { variants: variants, common: common }\n             );\n         }\n     }"}, {"sha": "b2f11b8c437ad9b6c6bf7f710fd41cfb8abc47d5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7538450b8d5e831dca7891bdd54ebdf25d865970/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7538450b8d5e831dca7891bdd54ebdf25d865970/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7538450b8d5e831dca7891bdd54ebdf25d865970", "patch": "@@ -3775,7 +3775,7 @@ pub impl Parser {\n                         enum\");\n         }\n \n-        enum_def(ast::enum_def_ { variants: variants, common: common_fields })\n+        ast::enum_def { variants: variants, common: common_fields }\n     }\n \n     fn parse_item_enum(&self) -> item_info {\n@@ -3801,9 +3801,7 @@ pub impl Parser {\n             return (\n                 id,\n                 item_enum(\n-                    enum_def(\n-                        ast::enum_def_ { variants: ~[variant], common: None }\n-                    ),\n+                    ast::enum_def { variants: ~[variant], common: None },\n                     generics),\n                 None\n             );"}]}