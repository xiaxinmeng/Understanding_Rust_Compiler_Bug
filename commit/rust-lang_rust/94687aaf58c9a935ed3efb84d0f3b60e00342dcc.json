{"sha": "94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0Njg3YWFmNThjOWE5MzVlZDNlZmI4NGQwZjNiNjBlMDAzNDJkY2M=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2017-01-31T02:38:13Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2017-02-01T02:27:13Z"}, "message": "Removes FIXMEs related to #22405", "tree": {"sha": "a42706bc2694e3dc22245713b2947b33ab3f865a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a42706bc2694e3dc22245713b2947b33ab3f865a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "html_url": "https://github.com/rust-lang/rust/commit/94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e9e0552767113ec24f6f8f207ade36a7bc5a091", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9e0552767113ec24f6f8f207ade36a7bc5a091", "html_url": "https://github.com/rust-lang/rust/commit/8e9e0552767113ec24f6f8f207ade36a7bc5a091"}], "stats": {"total": 124, "additions": 16, "deletions": 108}, "files": [{"sha": "53ac17c052f6af89a27831ba50f2f7d1686bb4ba", "filename": "src/libcoretest/hash/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Flibcoretest%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Flibcoretest%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fmod.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -66,7 +66,6 @@ fn test_writer_hasher() {\n     assert_eq!(hash(& s), 97 + 0xFF);\n     let cs: &[u8] = &[1, 2, 3];\n     assert_eq!(hash(& cs), 9);\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let cs: Box<[u8]> = Box::new([1, 2, 3]);\n     assert_eq!(hash(& cs), 9);\n "}, {"sha": "6d02f76c33d162ed628f2c9a93488f2b1790c1eb", "filename": "src/libcoretest/iter.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Flibcoretest%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Flibcoretest%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fiter.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -700,7 +700,6 @@ fn test_collect() {\n \n #[test]\n fn test_all() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let v: Box<[isize]> = Box::new([1, 2, 3, 4, 5]);\n     assert!(v.iter().all(|&x| x < 10));\n     assert!(!v.iter().all(|&x| x % 2 == 0));\n@@ -710,7 +709,6 @@ fn test_all() {\n \n #[test]\n fn test_any() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let v: Box<[isize]> = Box::new([1, 2, 3, 4, 5]);\n     assert!(v.iter().any(|&x| x < 10));\n     assert!(v.iter().any(|&x| x % 2 == 0));"}, {"sha": "61b1a0a0b4d25a702fe28a2b9fbc19696fd51935", "filename": "src/test/compile-fail-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -36,11 +36,9 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_macro(\"identity\", expand_identity);\n     reg.register_syntax_extension(\n         Symbol::intern(\"into_multi_foo\"),\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         MultiModifier(Box::new(expand_into_foo_multi)));\n     reg.register_syntax_extension(\n         Symbol::intern(\"duplicate\"),\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         MultiDecorator(Box::new(expand_duplicate)));\n }\n "}, {"sha": "f58eca7c8ae39229b8d75910cebcb205e37119ec", "filename": "src/test/compile-fail/borrowck/borrowck-borrowed-uniq-rvalue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -17,7 +17,6 @@ use std::collections::HashMap;\n fn main() {\n     let tmp: Box<_>;\n     let mut buggy_map: HashMap<usize, &usize> = HashMap::new();\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     buggy_map.insert(42, &*Box::new(1)); //~ ERROR borrowed value does not live long enough\n \n     // but it is ok if we use a temporary"}, {"sha": "e5afccb9cf3943080ae12feb22ce6675f4ccced6", "filename": "src/test/compile-fail/cross-borrow-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -16,7 +16,6 @@ trait Trait { fn foo(&self) {} }\n impl Trait for Foo {}\n \n pub fn main() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let x: Box<Trait> = Box::new(Foo);\n     let _y: &Trait = x; //~  ERROR mismatched types\n                         //~| expected type `&Trait`"}, {"sha": "10c8f1eed00b0dfe89e26e241c48f738d69db49d", "filename": "src/test/compile-fail/dst-bad-assign-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -41,7 +41,6 @@ impl ToBar for Bar1 {\n pub fn main() {\n     // Assignment.\n     let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = *z;\n     //~^ ERROR `ToBar: std::marker::Sized` is not satisfied"}, {"sha": "4f7d07600ad154e68712ea96b736c627d8161d0c", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -41,7 +41,6 @@ impl ToBar for Bar1 {\n pub fn main() {\n     // Assignment.\n     let f5: &mut Fat<ToBar> = &mut Fat { f1: 5, f2: \"some str\", ptr: Bar1 {f :42} };\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = Bar1 {f: 36};\n     //~^ ERROR mismatched types"}, {"sha": "d4e7dc7e9a35dfc705e0e5bdf36ee8159bcd12e4", "filename": "src/test/compile-fail/issue-10291.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10291.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n fn test<'x>(x: &'x isize) {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n         x //~ ERROR E0312\n     }));"}, {"sha": "7afb8314ea689ffeba0615e449e18a503b16f2f1", "filename": "src/test/compile-fail/issue-11515.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11515.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -15,7 +15,6 @@ struct Test {\n }\n \n fn main() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let closure: Box<Fn()+'static> = Box::new(|| ());\n     let test = box Test { func: closure }; //~ ERROR mismatched types\n }"}, {"sha": "bddc9c13815e741ef8d9b2b00928acc90236e1d9", "filename": "src/test/compile-fail/issue-17441.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -13,7 +13,6 @@ fn main() {\n     //~^ ERROR cast to unsized type: `&[usize; 2]` as `[usize]`\n     //~^^ HELP consider using an implicit coercion to `&[usize]` instead\n \n-    // FIXME (#22405): Replace `std::boxed::Box::new` with `box` here when/if possible.\n     let _bar = Box::new(1_usize) as std::fmt::Debug;\n     //~^ ERROR cast to unsized type: `std::boxed::Box<usize>` as `std::fmt::Debug`\n     //~^^ HELP try casting to a `Box` instead"}, {"sha": "4996da057dd8ebc7be04358282479c5810b8a486", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -12,7 +12,6 @@\n // and rejected.\n \n fn main() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     (|| Box::new(*(&[0][..])))();\n     //~^ ERROR `[{integer}]: std::marker::Sized` is not satisfied\n }"}, {"sha": "9a7b3781f1e24873ab6a627eb857695caa671176", "filename": "src/test/compile-fail/issue-18783.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -10,8 +10,6 @@\n \n use std::cell::RefCell;\n \n-// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-\n fn main() {\n     let mut y = 1;\n     let c = RefCell::new(vec![]);"}, {"sha": "851f5dfeabe8ac31fa90ce61c8d6f96093ff6f84", "filename": "src/test/compile-fail/issue-3763.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -25,13 +25,11 @@ fn main() {\n     let _woohoo = (&my_struct).priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n \n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let _woohoo = (Box::new(my_struct)).priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private\n \n     (&my_struct).happyfun();               //~ ERROR method `happyfun` is private\n \n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     (Box::new(my_struct)).happyfun();          //~ ERROR method `happyfun` is private\n     let nope = my_struct.priv_field;\n     //~^ ERROR field `priv_field` of struct `my_mod::MyStruct` is private"}, {"sha": "c5aae894c3ecbc44c60b6de14a7dae510442b6c6", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -13,7 +13,6 @@\n fn id<T>(t: T) -> T { t }\n \n fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     id(Box::new(|| *v))\n         //~^ ERROR E0373\n         //~| NOTE `v` is borrowed here"}, {"sha": "9dcf902a69f916c7f343ebcd3de73f1853519ff9", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -24,7 +24,6 @@ impl<K, V> Map<K, V> for HashMap<K, V> {}\n fn main() {\n     let x: Box<HashMap<isize, isize>> = box HashMap::new();\n     let x: Box<Map<isize, isize>> = x;\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let y: Box<Map<usize, isize>> = Box::new(x);\n     //~^ ERROR `std::boxed::Box<Map<isize, isize>>: Map<usize, isize>` is not satisfied\n }"}, {"sha": "d52960659999421e78f3c93c2eb359369a6c0195", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -38,7 +38,6 @@ fn innocent_looking_victim() {\n }\n \n fn conspirator<F>(mut f: F) where F: FnMut(&mut R, bool) {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let mut r = R {c: Box::new(f)};\n     f(&mut r, false) //~ ERROR use of moved value\n }"}, {"sha": "687b2c344a3b755d42f6baa392b31ddc18b1741a", "filename": "src/test/compile-fail/region-object-lifetime-in-coercion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -14,8 +14,6 @@\n trait Foo {}\n impl<'a> Foo for &'a [u8] {}\n \n-// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-\n fn a(v: &[u8]) -> Box<Foo + 'static> {\n     let x: Box<Foo + 'static> = Box::new(v);\n     //~^ ERROR cannot infer an appropriate lifetime due to conflicting"}, {"sha": "6b88abfca6c914f8ae611bbb8af82ffbf5491c58", "filename": "src/test/compile-fail/regions-close-associated-type-into-object.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-associated-type-into-object.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -10,8 +10,6 @@\n \n #![feature(box_syntax)]\n \n-// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-\n trait X {}\n \n trait Iter {"}, {"sha": "c9063405bd7e203ea6e449e214bf078df37131f5", "filename": "src/test/compile-fail/regions-close-param-into-object.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fregions-close-param-into-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fregions-close-param-into-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-param-into-object.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-\n trait X { fn foo(&self) {} }\n \n fn p1<T>(v: T) -> Box<X+'static>"}, {"sha": "010b7d17688125542558d0f2db720d50c91def7d", "filename": "src/test/compile-fail/regions-nested-fns.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-nested-fns.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-\n fn ignore<T>(t: T) {}\n \n fn nested<'x>(x: &'x isize) {"}, {"sha": "fb726e31af586a5ba81e434d086ccf8d3f7af9d1", "filename": "src/test/compile-fail/regions-proc-bound-capture.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-proc-bound-capture.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-\n fn borrowed_proc<'a>(x: &'a isize) -> Box<FnMut()->(isize) + 'a> {\n     // This is legal, because the region bound on `proc`\n     // states that it captures `x`."}, {"sha": "7ca63b9896fe0064035144f28cffdba4f118f45e", "filename": "src/test/compile-fail/regions-steal-closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -21,7 +21,6 @@ fn box_it<'r>(x: Box<FnMut() + 'r>) -> closure_box<'r> {\n fn main() {\n     let mut cl_box = {\n         let mut i = 3;\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         box_it(Box::new(|| i += 1)) //~ ERROR `i` does not live long enough\n     };\n     cl_box.cl.call_mut(());"}, {"sha": "3839e90ed9fe769263f0ab6faac96b5a34b32c75", "filename": "src/test/compile-fail/trait-coercion-generic-bad.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-bad.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -23,7 +23,6 @@ impl Trait<&'static str> for Struct {\n }\n \n fn main() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let s: Box<Trait<isize>> = Box::new(Struct { person: \"Fred\" });\n     //~^ ERROR `Struct: Trait<isize>` is not satisfied\n     s.f(1);"}, {"sha": "18d3ded77f8f3d61bb57ccc07f78b3eae0fb8256", "filename": "src/test/compile-fail/trait-coercion-generic-regions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-coercion-generic-regions.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -25,6 +25,5 @@ impl Trait<&'static str> for Struct {\n fn main() {\n     let person = \"Fred\".to_string();\n     let person: &str = &person;  //~ ERROR `person` does not live long enough\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let s: Box<Trait<&'static str>> = Box::new(Struct { person: person });\n }"}, {"sha": "427be5607600db9abbc86a80e7598358116a13ad", "filename": "src/test/compile-fail/unboxed-closure-illegal-move.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -18,8 +18,6 @@ fn to_fn<A,F:Fn<A>>(f: F) -> F { f }\n fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n \n-// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-\n fn main() {\n     // By-ref cases\n     {"}, {"sha": "c09feec1d4af25b1b713ce74fe4875153404905c", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -18,7 +18,6 @@ impl Drop for r {\n }\n \n fn main() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let i = Box::new(r { b: true });\n     let _j = i.clone(); //~ ERROR no method named `clone` found\n     println!(\"{:?}\", i);"}, {"sha": "aa2f1626a6a868bf635a4c0c57c582dc5c53165c", "filename": "src/test/run-pass-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -38,15 +38,12 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_macro(\"identity\", expand_identity);\n     reg.register_syntax_extension(\n         Symbol::intern(\"into_multi_foo\"),\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         MultiModifier(Box::new(expand_into_foo_multi)));\n     reg.register_syntax_extension(\n         Symbol::intern(\"duplicate\"),\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         MultiDecorator(Box::new(expand_duplicate)));\n     reg.register_syntax_extension(\n         Symbol::intern(\"caller\"),\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         MultiDecorator(Box::new(expand_caller)));\n }\n "}, {"sha": "3c8868f1664e8185d471185b3ecd872bb80ff94f", "filename": "src/test/run-pass-fulldeps/auxiliary/plugin_args.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin_args.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -48,6 +48,5 @@ impl TTMacroExpander for Expander {\n pub fn plugin_registrar(reg: &mut Registry) {\n     let args = reg.args().to_owned();\n     reg.register_syntax_extension(Symbol::intern(\"plugin_args\"),\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         NormalTT(Box::new(Expander { args: args, }), None, false));\n }"}, {"sha": "1573b0807173f3061906c565d31a69b7612f4d9d", "filename": "src/test/run-pass-fulldeps/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass-fulldeps%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass-fulldeps%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fderiving-encodable-decodable-box.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -24,7 +24,6 @@ struct A {\n }\n \n fn main() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let obj = A { foo: Box::new([true, false]) };\n     let s = json::encode(&obj).unwrap();\n     let obj2: A = json::decode(&s).unwrap();"}, {"sha": "4af642a106c153722181b72ab7f1df6bad963629", "filename": "src/test/run-pass-valgrind/dst-dtor-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-1.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -28,7 +28,6 @@ struct Fat<T: ?Sized> {\n \n pub fn main() {\n     {\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         let _x: Box<Fat<Trait>> = Box::<Fat<Foo>>::new(Fat { f: Foo });\n     }\n     unsafe {"}, {"sha": "283b8202b35d0bb5b63b69805d415972404810c1", "filename": "src/test/run-pass-valgrind/dst-dtor-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-valgrind%2Fdst-dtor-2.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -25,7 +25,6 @@ struct Fat<T: ?Sized> {\n \n pub fn main() {\n     {\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         let _x: Box<Fat<[Foo]>> = Box::<Fat<[Foo; 3]>>::new(Fat { f: [Foo, Foo, Foo] });\n     }\n     unsafe {"}, {"sha": "0a6135080bb6e8c93743efa8d88ee1b21e7c5123", "filename": "src/test/run-pass/associated-types-doubleendediterator-object.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-doubleendediterator-object.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -26,7 +26,6 @@ fn pairwise_sub(mut t: Box<DoubleEndedIterator<Item=isize>>) -> isize {\n \n fn main() {\n     let v = vec![1, 2, 3, 4, 5, 6];\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let r = pairwise_sub(Box::new(v.into_iter()));\n     assert_eq!(r, 9);\n }"}, {"sha": "a074aea9caa5c35a47a7ee3100e20adea18dd01e", "filename": "src/test/run-pass/coerce-expect-unsized.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-expect-unsized.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -19,15 +19,6 @@ use std::rc::Rc;\n // rvalue expressions to be unsized. See #20169 for more information.\n \n pub fn main() {\n-    // FIXME #22405: We cannot infer the type `Box<[isize; k]>` for\n-    // the r-value expression from the context `Box<[isize]>`, and\n-    // therefore the `box EXPR` desugaring breaks down.\n-    //\n-    // One could reasonably claim that the `box EXPR` desugaring is\n-    // effectively regressing half of Issue #20169. Hopefully we will\n-    // eventually fix that, at which point the `Box::new` calls below\n-    // should be replaced wth uses of `box`.\n-\n     let _: Box<[isize]> = Box::new({ [1, 2, 3] });\n     let _: Box<[isize]> = Box::new(if true { [1, 2, 3] } else { [1, 3, 4] });\n     let _: Box<[isize]> = Box::new(match true { true => [1, 2, 3], false => [1, 3, 4] });"}, {"sha": "c9e5b014da37ae16af1d7fb1c7b1326aacb23da9", "filename": "src/test/run-pass/deriving-default-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -21,7 +21,6 @@ struct A {\n \n pub fn main() {\n     let a: A = Default::default();\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let b: Box<[_]> = Box::<[bool; 0]>::new([]);\n     assert_eq!(a.foo, b);\n }"}, {"sha": "16c49065008aa264cf8185e82e18bac817bdd376", "filename": "src/test/run-pass/deriving-eq-ord-boxed-slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -12,7 +12,6 @@\n struct Foo(Box<[u8]>);\n \n pub fn main() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let a = Foo(Box::new([0, 1, 2]));\n     let b = Foo(Box::new([0, 1, 2]));\n     assert_eq!(a, b);"}, {"sha": "9fb4635765ca0a3cd1e61c59036096bff524f3b7", "filename": "src/test/run-pass/dst-deref-mut.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -39,7 +39,6 @@ pub fn foo(arr: &mut Arr) {\n }\n \n fn main() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let mut a = Arr { ptr: Box::new([1, 2, 3]) };\n     foo(&mut a);\n }"}, {"sha": "4a143873e6e1347d1b9bb5cbbb6a71a04d7f6b64", "filename": "src/test/run-pass/dst-deref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -34,7 +34,6 @@ pub fn foo(arr: &Arr) {\n }\n \n fn main() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let a = Arr { ptr: Box::new([1, 2, 3]) };\n     foo(&a);\n }"}, {"sha": "56199c1aa61fa5506586781cabcf4c68e6414fb3", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -127,7 +127,6 @@ pub fn main() {\n     let f2 : Box<Fat<[isize]>> = f1;\n     foo(&*f2);\n \n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let f3 : Box<Fat<[isize]>> =\n         Box::<Fat<[_; 3]>>::new(Fat { f1: 5, f2: \"some str\", ptr: [1, 2, 3] });\n     foo(&*f3);"}, {"sha": "d8d7d9a28bfbdb5ffc8f12aa439e57b23a9903b4", "filename": "src/test/run-pass/dst-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -97,7 +97,6 @@ pub fn main() {\n \n     // &*\n     //\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let f7: Box<ToBar> = Box::new(Bar1 {f :42});\n     bar(&*f7);\n "}, {"sha": "3dbe7da6ac704ee97f3f1300a8f5307d791be3e7", "filename": "src/test/run-pass/empty-allocation-non-null.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-allocation-non-null.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-\n-\n pub fn main() {\n     assert!(Some(Box::new(())).is_some());\n "}, {"sha": "bd90ce683c45202dc8b468a2d4ea25d874a71eaf", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -62,7 +62,6 @@ mod map_reduce {\n         }\n \n         let ctrl_clone = ctrl.clone();\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         ::map(input, Box::new(|a,b| emit(&mut intermediates, ctrl.clone(), a, b)));\n         ctrl_clone.send(ctrl_proto::mapper_done).unwrap();\n     }"}, {"sha": "516278df178eb5eb11e8469f9045647a6d776b49", "filename": "src/test/run-pass/hrtb-precedence-of-plus.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -17,7 +17,6 @@\n // cause a compilation error. Issue #18772.\n \n fn adder(y: isize) -> Box<Fn(isize) -> isize + 'static> {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     Box::new(move |x| y + x)\n }\n "}, {"sha": "25c66bf8d485ff0949f0fcb4d234a967782e235f", "filename": "src/test/run-pass/issue-11205.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-11205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-11205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11205.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -12,8 +12,6 @@\n \n #![allow(dead_code)]\n \n-// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-\n trait Foo { fn dummy(&self) { } }\n impl Foo for isize {}\n fn foo(_: [&Foo; 2]) {}"}, {"sha": "62da3b1467559e6ed51cb7060420ea5db8f34994", "filename": "src/test/run-pass/issue-11677.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-11677.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-11677.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11677.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -27,6 +27,5 @@ impl X<isize> for F {\n }\n \n fn main() {\n-  // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n   S {f: Box::new(F), g: Box::new(F) };\n }"}, {"sha": "aec45216b1b7366d949d8253b6dc8944a8cfbaf8", "filename": "src/test/run-pass/issue-12744.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-12744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-12744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12744.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     fn test() -> Box<std::any::Any + 'static> { Box::new(1) }\n     println!(\"{:?}\", test())\n }"}, {"sha": "ccdfa0646c6aaba123dc686ea160e40364fe98f3", "filename": "src/test/run-pass/issue-13808.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-13808.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-13808.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13808.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -16,7 +16,6 @@ struct Foo<'a> {\n \n impl<'a> Foo<'a> {\n     fn new<F>(listener: F) -> Foo<'a> where F: FnMut() + 'a {\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         Foo { listener: Box::new(listener) }\n     }\n }"}, {"sha": "8aaa24e991ea12662e72de944fd46e08c7da81a0", "filename": "src/test/run-pass/issue-14589.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-14589.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-14589.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14589.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -11,8 +11,6 @@\n // All 3 expressions should work in that the argument gets\n // coerced to a trait object\n \n-// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-\n // pretty-expanded FIXME #23616\n \n fn main() {"}, {"sha": "df5d62e7699bb6919347ba87622ed8005c00b8e3", "filename": "src/test/run-pass/issue-14919.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14919.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -31,7 +31,6 @@ trait IntoMatcher<'a, T> {\n \n impl<'a, 'b, F> IntoMatcher<'a, CharPredMatcher<'a, 'b>> for F where F: FnMut(char) -> bool + 'b {\n     fn into_matcher(self, s: &'a str) -> CharPredMatcher<'a, 'b> {\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         CharPredMatcher {\n             str: s,\n             pred: Box::new(self),"}, {"sha": "5613211b31df427f85c18940b2fc04e81f013a0d", "filename": "src/test/run-pass/issue-16668.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16668.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -16,7 +16,6 @@ struct Parser<'a, I, O> {\n \n impl<'a, I: 'a, O: 'a> Parser<'a, I, O> {\n     fn compose<K: 'a>(mut self, mut rhs: Parser<'a, O, K>) -> Parser<'a, I, K> {\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         Parser {\n             parse: Box::new(move |x: I| {\n                 match (self.parse)(x) {"}, {"sha": "8178c1fd7c885e293b725e4a94f3805b781a127d", "filename": "src/test/run-pass/issue-17734.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-17734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-17734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17734.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -17,8 +17,6 @@ fn f(s: Box<str>) -> Box<str> {\n \n fn main() {\n     // There is currently no safe way to construct a `Box<str>`, so improvise\n-    //\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let box_arr: Box<[u8]> = Box::new(['h' as u8, 'e' as u8, 'l' as u8, 'l' as u8, 'o' as u8]);\n     let box_str: Box<str> = unsafe { std::mem::transmute(box_arr) };\n     assert_eq!(&*box_str, \"hello\");"}, {"sha": "7db7e3b28e8e66c3728d00ceccef0b4539f44da4", "filename": "src/test/run-pass/issue-20575.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-20575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-20575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20575.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -13,7 +13,6 @@\n // pretty-expanded FIXME #23616\n \n fn main() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let functions: [Box<Fn() -> Option<()>>; 1] = [Box::new(|| None)];\n \n     let _: Option<Vec<()>> = functions.iter().map(|f| (*f)()).collect();"}, {"sha": "3b56b2e28ff22ecebf7309bbd492800cce791680", "filename": "src/test/run-pass/issue-3052.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3052.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -13,7 +13,6 @@\n type Connection = Box<FnMut(Vec<u8>) + 'static>;\n \n fn f() -> Option<Connection> {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let mock_connection: Connection = Box::new(|_| {});\n     Some(mock_connection)\n }"}, {"sha": "d1bf7e066cb5ae098c067bfea9e95cbb56941c78", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -26,7 +26,6 @@ fn foo(name: String, samples_chan: Sender<Msg>) {\n     thread::spawn(move|| {\n         let mut samples_chan = samples_chan;\n \n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         let callback: SamplesFn = Box::new(move |buffer| {\n             for i in 0..buffer.len() {\n                 println!(\"{}: {}\", i, buffer[i])"}, {"sha": "428eed0787a833db32a0959fed1a74f89a35c61a", "filename": "src/test/run-pass/newlambdas-ret-infer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -11,7 +11,6 @@\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n-// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n // pretty-expanded FIXME #23616\n \n fn unique() -> Box<FnMut()+'static> { return Box::new(|| ()); }"}, {"sha": "439ea3f2b579c0919e998c7042156e51c2e9ea7d", "filename": "src/test/run-pass/newlambdas-ret-infer2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -11,7 +11,6 @@\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n-// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n // pretty-expanded FIXME #23616\n \n fn unique() -> Box<FnMut()+'static> { Box::new(|| ()) }"}, {"sha": "c7a4accff85e12ad7853bb427bbf29bbbcd84ce2", "filename": "src/test/run-pass/regions-fn-subtyping.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-fn-subtyping.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -16,8 +16,6 @@\n #![allow(unused_variables)]\n #![allow(unknown_features)]\n \n-// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-\n // Should pass region checking.\n fn ok(f: Box<FnMut(&usize)>) {\n     // Here, g is a function that can accept a usize pointer with"}, {"sha": "ae4adbfb1f497f71b38138f7291be3d523311e29", "filename": "src/test/run-pass/regions-relate-bound-regions-on-closures-to-inference-variables.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-relate-bound-regions-on-closures-to-inference-variables.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -31,7 +31,6 @@ struct Foo<'a,'tcx:'a> {\n \n impl<'a,'tcx> Foo<'a,'tcx> {\n     fn bother(&mut self) -> isize {\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         self.elaborate_bounds(Box::new(|this| {\n             // (*) Here: type of `this` is `&'f0 Foo<&'f1, '_2>`,\n             // where `'f0` and `'f1` are fresh, free regions that"}, {"sha": "47d0737dfc451d0c88ba70d4c62c24a56b0edf4f", "filename": "src/test/run-pass/show-boxed-slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -12,6 +12,5 @@\n struct Foo(Box<[u8]>);\n \n pub fn main() {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     println!(\"{:?}\", Foo(Box::new([0, 1, 2])));\n }"}, {"sha": "c58442aa58f332b0d1a3b26473628d013e9991f6", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -105,7 +105,6 @@ fn check_legs(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n }\n fn check_names(arc: Arc<Vec<Box<Pet+Sync+Send>>>) {\n     for pet in arc.iter() {\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n         pet.name(Box::new(|name| {\n             assert!(name.as_bytes()[0] == 'a' as u8 && name.as_bytes()[1] == 'l' as u8);\n         }))"}, {"sha": "40453262ddf3a6019f53b986092dda0ef6c12a0d", "filename": "src/test/run-pass/trait-coercion-generic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -26,7 +26,6 @@ impl Trait<&'static str> for Struct {\n \n pub fn main() {\n     let a = Struct { x: 1, y: 2 };\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let b: Box<Trait<&'static str>> = Box::new(a);\n     b.f(\"Mary\");\n     let c: &Trait<&'static str> = &a;"}, {"sha": "130c6ee7521b4634c6cd5c22234aac083ed11fdc", "filename": "src/test/run-pass/trait-coercion.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -30,8 +30,6 @@ impl Trait for Struct {\n \n fn foo(mut a: Box<Write>) {}\n \n-// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-\n pub fn main() {\n     let a = Struct { x: 1, y: 2 };\n     let b: Box<Trait> = Box::new(a);"}, {"sha": "789d2237c543c544c9f92a0782749b0d61d25e90", "filename": "src/test/run-pass/unboxed-closures-call-sugar-object-autoderef.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -15,7 +15,6 @@\n use std::ops::FnMut;\n \n fn make_adder(x: isize) -> Box<FnMut(isize)->isize + 'static> {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     Box::new(move |y| { x + y })\n }\n "}, {"sha": "e73077154717048cc21f76db5c3ec05ef14c73ca", "filename": "src/test/run-pass/unboxed-closures-call-sugar-object.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -13,7 +13,6 @@\n use std::ops::FnMut;\n \n fn make_adder(x: isize) -> Box<FnMut(isize)->isize + 'static> {\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     Box::new(move |y| { x + y })\n }\n "}, {"sha": "6264d11186452b7e164eeb354acd5a60be80c855", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -18,7 +18,6 @@ struct Test<'a> {\n     f: Box<FnMut() + 'a>\n }\n \n-// FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n fn call<F>(mut f: F) where F: FnMut(Fn) {\n     f(Box::new(|| {\n     //~^ ERROR: cannot borrow `f` as mutable more than once\n@@ -58,7 +57,6 @@ fn test6() {\n fn test7() {\n     fn foo<F>(_: F) where F: FnMut(Box<FnMut(isize)>, isize) {}\n     let mut f = |g: Box<FnMut(isize)>, b: isize| {};\n-    // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     f(Box::new(|a| {\n         foo(f);\n         //~^ ERROR cannot move `f` into closure because it is borrowed"}, {"sha": "58b3f205fe35289c9dc185c3ab32ab6f0cf4e2c9", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94687aaf58c9a935ed3efb84d0f3b60e00342dcc/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=94687aaf58c9a935ed3efb84d0f3b60e00342dcc", "patch": "@@ -1,44 +1,44 @@\n error[E0499]: cannot borrow `f` as mutable more than once at a time\n-  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:23:16\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:22:16\n    |\n-23 |     f(Box::new(|| {\n+22 |     f(Box::new(|| {\n    |     -          ^^ second mutable borrow occurs here\n    |     |\n    |     first mutable borrow occurs here\n-24 |     //~^ ERROR: cannot borrow `f` as mutable more than once\n-25 |         f((Box::new(|| {})))\n+23 |     //~^ ERROR: cannot borrow `f` as mutable more than once\n+24 |         f((Box::new(|| {})))\n    |         - borrow occurs due to use of `f` in closure\n-26 |     }));\n+25 |     }));\n    |       - first borrow ends here\n \n error: cannot borrow immutable borrowed content `*f` as mutable\n-  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:36:5\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:35:5\n    |\n-35 | fn test2<F>(f: &F) where F: FnMut() {\n+34 | fn test2<F>(f: &F) where F: FnMut() {\n    |                -- use `&mut F` here to make mutable\n-36 |     (*f)(); //~ ERROR: cannot borrow immutable borrowed content `*f` as mutable\n+35 |     (*f)(); //~ ERROR: cannot borrow immutable borrowed content `*f` as mutable\n    |     ^^^^ cannot borrow as mutable\n \n error: cannot borrow immutable `Box` content `*f.f` as mutable\n-  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:44:5\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:43:5\n    |\n-43 | fn test4(f: &Test) {\n+42 | fn test4(f: &Test) {\n    |             ----- use `&mut Test` here to make mutable\n-44 |     f.f.call_mut(()) //~ ERROR: cannot borrow immutable `Box` content `*f.f` as mutable\n+43 |     f.f.call_mut(()) //~ ERROR: cannot borrow immutable `Box` content `*f.f` as mutable\n    |     ^^^ cannot borrow as mutable\n \n error[E0504]: cannot move `f` into closure because it is borrowed\n-  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:63:13\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:61:13\n    |\n-62 |     f(Box::new(|a| {\n+60 |     f(Box::new(|a| {\n    |     - borrow of `f` occurs here\n-63 |         foo(f);\n+61 |         foo(f);\n    |             ^ move into closure occurs here\n \n error[E0507]: cannot move out of captured outer variable in an `FnMut` closure\n-  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:63:13\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:61:13\n    |\n-63 |         foo(f);\n+61 |         foo(f);\n    |             ^ cannot move out of captured outer variable in an `FnMut` closure\n \n error: aborting due to 5 previous errors"}]}