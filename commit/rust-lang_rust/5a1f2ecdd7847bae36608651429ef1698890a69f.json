{"sha": "5a1f2ecdd7847bae36608651429ef1698890a69f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMWYyZWNkZDc4NDdiYWUzNjYwODY1MTQyOWVmMTY5ODg5MGE2OWY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-24T21:09:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-24T21:09:45Z"}, "message": "Rollup merge of #75180 - KodrAus:feat/error-by-ref, r=m-ou-se\n\nImplement Error for &(impl Error)\n\nOpening this up just to see what it breaks. It's unfortunate that `&(impl Error)` doesn't actually implement `Error`. If this direct approach doesn't work out then I'll try something different, like an `Error::by_ref` method.\n\n**EDIT:** This is a super low-priority experiment so feel free to cancel it for more important crater runs! \ud83d\ude42\n\n-----\n\n# Stabilization Report\n\n## Why?\n\nWe've been working for the last few years to try \"fix\" the `Error` trait, which is probably one of the most fundamental in the whole standard library. One of its issues is that we commonly expect you to work with abstract errors through `dyn Trait`, but references and smart pointers over `dyn Trait` don't actually implement the `Error` trait. If you have a `&dyn Error` or a `Box<dyn Error>` you simply can't pass it to a method that wants a `impl Error`.\n\n## What does this do?\n\nThis stabilizes the following trait impl:\n\n```rust\nimpl<'a, T: Error + ?Sized + 'static> Error for &'a T;\n```\n\nThis means that `&dyn Error` will now satisfy a `impl Error` bound.\n\nIt doesn't do anything with `Box<dyn Error>` directly. We discussed how we could do `Box<dyn Error>` in the thread here (and elsewhere in the past), but it seems like we need something like lattice-based specialization or a sprinkling of snowflake compiler magic to make that work. Having said that, with this new impl you _can_ now get a `impl Error` from a `Box<dyn Error>`  by dereferencing it.\n\n## What breaks?\n\nA crater run revealed a few crates broke with something like the following:\n\n```rust\n// where e: &'short &'long dyn Error\nerr.source()\n```\n\npreviously we'd auto-deref that `&'short &'long dyn Error` to return a `Option<&'long dyn Error>` from `source`, but now will call directly on `&'short impl Error`, so will return a `Option<&'short dyn Error>`. The fix is to manually deref:\n\n```rust\n// where e: &'short &'long dyn Error\n(*err).source()\n```\n\nIn the recent Libs meeting we considered this acceptable breakage.", "tree": {"sha": "21ad06054dc77b501ab11e0a20c84d4523348255", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21ad06054dc77b501ab11e0a20c84d4523348255"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a1f2ecdd7847bae36608651429ef1698890a69f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgDeIaCRBK7hj4Ov3rIwAAdHIIAHQOZBHB2wss4Putr5vz9NLv\n8e0wuQRf9jvqsdTo3ZjOgZTOOOWudIBa8HEPNgBJycSXhS6cFD1YPtwvkbd6Fy/v\ncMYmB4YcLhk0vmoyNTjKSSbOFo+S8R737TK2xmrsXIHhAuCeDR8roXbVtCiDMHxM\n1AFoTefPM2MHWEbCDI6zqLYJN7alREGC87FVv+IxIBIo0iIGd8evh0D7DG+ls0K5\nqQIzgW3PUQBHlGWO80Z66t1IN72doOvOgA9O9vJXeSfN/OlBIN1T1U9bovj3/A6N\nrZaG0FWj2I6YS8qehPFJZiza6XAJ9VChbCT/8eCKgotw/FRtU2A3XCRK7ecSm+E=\n=g5uN\n-----END PGP SIGNATURE-----\n", "payload": "tree 21ad06054dc77b501ab11e0a20c84d4523348255\nparent 9a9477fada5baf69d693e717d6df902e411a73d6\nparent bbf5001b9428bbf5b4ac93f42dc7017b27c9002f\nauthor Jonas Schievink <jonasschievink@gmail.com> 1611522585 +0100\ncommitter GitHub <noreply@github.com> 1611522585 +0100\n\nRollup merge of #75180 - KodrAus:feat/error-by-ref, r=m-ou-se\n\nImplement Error for &(impl Error)\n\nOpening this up just to see what it breaks. It's unfortunate that `&(impl Error)` doesn't actually implement `Error`. If this direct approach doesn't work out then I'll try something different, like an `Error::by_ref` method.\n\n**EDIT:** This is a super low-priority experiment so feel free to cancel it for more important crater runs! \ud83d\ude42\n\n-----\n\n# Stabilization Report\n\n## Why?\n\nWe've been working for the last few years to try \"fix\" the `Error` trait, which is probably one of the most fundamental in the whole standard library. One of its issues is that we commonly expect you to work with abstract errors through `dyn Trait`, but references and smart pointers over `dyn Trait` don't actually implement the `Error` trait. If you have a `&dyn Error` or a `Box<dyn Error>` you simply can't pass it to a method that wants a `impl Error`.\n\n## What does this do?\n\nThis stabilizes the following trait impl:\n\n```rust\nimpl<'a, T: Error + ?Sized + 'static> Error for &'a T;\n```\n\nThis means that `&dyn Error` will now satisfy a `impl Error` bound.\n\nIt doesn't do anything with `Box<dyn Error>` directly. We discussed how we could do `Box<dyn Error>` in the thread here (and elsewhere in the past), but it seems like we need something like lattice-based specialization or a sprinkling of snowflake compiler magic to make that work. Having said that, with this new impl you _can_ now get a `impl Error` from a `Box<dyn Error>`  by dereferencing it.\n\n## What breaks?\n\nA crater run revealed a few crates broke with something like the following:\n\n```rust\n// where e: &'short &'long dyn Error\nerr.source()\n```\n\npreviously we'd auto-deref that `&'short &'long dyn Error` to return a `Option<&'long dyn Error>` from `source`, but now will call directly on `&'short impl Error`, so will return a `Option<&'short dyn Error>`. The fix is to manually deref:\n\n```rust\n// where e: &'short &'long dyn Error\n(*err).source()\n```\n\nIn the recent Libs meeting we considered this acceptable breakage.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a1f2ecdd7847bae36608651429ef1698890a69f", "html_url": "https://github.com/rust-lang/rust/commit/5a1f2ecdd7847bae36608651429ef1698890a69f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a1f2ecdd7847bae36608651429ef1698890a69f/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a9477fada5baf69d693e717d6df902e411a73d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a9477fada5baf69d693e717d6df902e411a73d6", "html_url": "https://github.com/rust-lang/rust/commit/9a9477fada5baf69d693e717d6df902e411a73d6"}, {"sha": "bbf5001b9428bbf5b4ac93f42dc7017b27c9002f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf5001b9428bbf5b4ac93f42dc7017b27c9002f", "html_url": "https://github.com/rust-lang/rust/commit/bbf5001b9428bbf5b4ac93f42dc7017b27c9002f"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "605d953f5da7130add600f95f886b3de1c0675a1", "filename": "library/std/src/error.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5a1f2ecdd7847bae36608651429ef1698890a69f/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a1f2ecdd7847bae36608651429ef1698890a69f/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=5a1f2ecdd7847bae36608651429ef1698890a69f", "patch": "@@ -486,6 +486,27 @@ impl<T: Error> Error for Box<T> {\n     }\n }\n \n+#[stable(feature = \"error_by_ref\", since = \"1.51.0\")]\n+impl<'a, T: Error + ?Sized> Error for &'a T {\n+    #[allow(deprecated, deprecated_in_future)]\n+    fn description(&self) -> &str {\n+        Error::description(&**self)\n+    }\n+\n+    #[allow(deprecated)]\n+    fn cause(&self) -> Option<&dyn Error> {\n+        Error::cause(&**self)\n+    }\n+\n+    fn source(&self) -> Option<&(dyn Error + 'static)> {\n+        Error::source(&**self)\n+    }\n+\n+    fn backtrace(&self) -> Option<&Backtrace> {\n+        Error::backtrace(&**self)\n+    }\n+}\n+\n #[stable(feature = \"fmt_error\", since = \"1.11.0\")]\n impl Error for fmt::Error {\n     #[allow(deprecated)]"}]}