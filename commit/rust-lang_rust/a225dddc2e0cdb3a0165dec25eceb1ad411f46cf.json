{"sha": "a225dddc2e0cdb3a0165dec25eceb1ad411f46cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMjVkZGRjMmUwY2RiM2EwMTY1ZGVjMjVlY2ViMWFkNDExZjQ2Y2Y=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-22T18:32:46Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-08-14T16:34:32Z"}, "message": "Add some documentation for (De|En)codable", "tree": {"sha": "48d9ab785d9ed1e14ff9319ab3b5e4fd05204ea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48d9ab785d9ed1e14ff9319ab3b5e4fd05204ea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a225dddc2e0cdb3a0165dec25eceb1ad411f46cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a225dddc2e0cdb3a0165dec25eceb1ad411f46cf", "html_url": "https://github.com/rust-lang/rust/commit/a225dddc2e0cdb3a0165dec25eceb1ad411f46cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a225dddc2e0cdb3a0165dec25eceb1ad411f46cf/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b90018e987d65f386e66a52fd0197c4bfe36d022", "url": "https://api.github.com/repos/rust-lang/rust/commits/b90018e987d65f386e66a52fd0197c4bfe36d022", "html_url": "https://github.com/rust-lang/rust/commit/b90018e987d65f386e66a52fd0197c4bfe36d022"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "291648869fb69ed9d064aba56c9ffc84ccd62dc2", "filename": "src/librustc_middle/ty/codec.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a225dddc2e0cdb3a0165dec25eceb1ad411f46cf/src%2Flibrustc_middle%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a225dddc2e0cdb3a0165dec25eceb1ad411f46cf/src%2Flibrustc_middle%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcodec.rs?ref=a225dddc2e0cdb3a0165dec25eceb1ad411f46cf", "patch": "@@ -74,6 +74,16 @@ pub trait TyEncoder<'tcx>: Encoder {\n     fn encode_alloc_id(&mut self, alloc_id: &AllocId) -> Result<(), Self::Error>;\n }\n \n+/// Trait for decoding to a reference.\n+///\n+/// This is a separate trait from `Decodable` so that we can implement it for\n+/// upstream types, such as `FxHashSet`.\n+///\n+/// The `TyDecodable` derive macro will use this trait for fields that are\n+/// references (and don't use a type alias to hide that).\n+///\n+/// `Decodable` can still be implemented in cases where `Decodable` is required\n+/// by a trait bound.\n pub trait RefDecodable<'tcx, D: TyDecoder<'tcx>> {\n     fn decode(d: &mut D) -> Result<&'tcx Self, D::Error>;\n }\n@@ -301,6 +311,7 @@ macro_rules! impl_decodable_via_ref {\n         })*\n     }\n }\n+\n impl<'tcx, D: TyDecoder<'tcx>> RefDecodable<'tcx, D> for ty::AdtDef {\n     fn decode(decoder: &mut D) -> Result<&'tcx Self, D::Error> {\n         let def_id = <DefId as Decodable<D>>::decode(decoder)?;"}, {"sha": "05c9cf3981b6e91753368ccd1dd55dd9a88e7d28", "filename": "src/librustc_serialize/serialize.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a225dddc2e0cdb3a0165dec25eceb1ad411f46cf/src%2Flibrustc_serialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a225dddc2e0cdb3a0165dec25eceb1ad411f46cf/src%2Flibrustc_serialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_serialize%2Fserialize.rs?ref=a225dddc2e0cdb3a0165dec25eceb1ad411f46cf", "patch": "@@ -379,10 +379,32 @@ pub trait Decoder {\n     fn error(&mut self, err: &str) -> Self::Error;\n }\n \n+/// Trait for types that can be serialized\n+///\n+/// This can be implemented using the `Encodable`, `TyEncodable` and\n+/// `MetadataEncodable` macros.\n+///\n+/// * `Encodable` should be used in crates that don't depend on\n+///   `librustc_middle`.\n+/// * `TyEncodable` should be used for types that are only serialized in crate\n+///   metadata or the incremental cache, except for simple enums.where\n+/// * `MetadataEncodable` is used in `rustc_metadata` for types that are only\n+///   serialized in crate metadata.\n pub trait Encodable<S: Encoder> {\n     fn encode(&self, s: &mut S) -> Result<(), S::Error>;\n }\n \n+/// Trait for types that can be deserialized\n+///\n+/// This can be implemented using the `Decodable`, `TyDecodable` and\n+/// `MetadataDecodable` macros.\n+///\n+/// * `Decodable` should be used in crates that don't depend on\n+///   `librustc_middle`.\n+/// * `TyDecodable` should be used for types that are only serialized in crate\n+///   metadata or the incremental cache, except for simple enums.where\n+/// * `MetadataDecodable` is used in `rustc_metadata` for types that are only\n+///   serialized in crate metadata.\n pub trait Decodable<D: Decoder>: Sized {\n     fn decode(d: &mut D) -> Result<Self, D::Error>;\n }"}]}