{"sha": "e2cd4597dae1ed0aa3967bd2a656a42daa1ad27f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyY2Q0NTk3ZGFlMWVkMGFhMzk2N2JkMmE2NTZhNDJkYWExYWQyN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-27T12:02:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-27T12:02:42Z"}, "message": "auto merge of #17890 : pnkfelix/rust/fsk-fix-issue-17887, r=alexcrichton\n\nFixes `config.mk` so that it should not contain multiple inconsistent entries for the same option.\r\n\r\nUsed aforementioned variants to extract options that have explicit `putvar` calls associated with them in the subsequent code.  When the explicit `putvar` call was conditional on some potentially complex condition, moved the `putvar` call out to the main control flow of the script so that it always runs if necessary.\r\n\r\n----\r\n\r\nAs a driveby fix, captured the error exit when doing the test run of `rustc --version` from `CFG_LOCAL_RUST_ROOT`, and signal explicit configure failure when it did not run successfully.  (If we cannot run `rustc`, we really shouldn't try to keep going.)\r\n\r\n----\r\n\r\nFix #17887.", "tree": {"sha": "9b976166497db6fd783c4a43368dd999d4e8b081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b976166497db6fd783c4a43368dd999d4e8b081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2cd4597dae1ed0aa3967bd2a656a42daa1ad27f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2cd4597dae1ed0aa3967bd2a656a42daa1ad27f", "html_url": "https://github.com/rust-lang/rust/commit/e2cd4597dae1ed0aa3967bd2a656a42daa1ad27f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2cd4597dae1ed0aa3967bd2a656a42daa1ad27f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0efafbd85e2e0965746adba7e899ce904d324dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0efafbd85e2e0965746adba7e899ce904d324dc", "html_url": "https://github.com/rust-lang/rust/commit/a0efafbd85e2e0965746adba7e899ce904d324dc"}, {"sha": "6f1e6273880eb40ae12ffd11191fd8758ee437b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f1e6273880eb40ae12ffd11191fd8758ee437b9", "html_url": "https://github.com/rust-lang/rust/commit/6f1e6273880eb40ae12ffd11191fd8758ee437b9"}], "stats": {"total": 131, "additions": 92, "deletions": 39}, "files": [{"sha": "0bd37bc485d865ae4715ee87049390d958a63811", "filename": "configure", "status": "modified", "additions": 92, "deletions": 39, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/e2cd4597dae1ed0aa3967bd2a656a42daa1ad27f/configure", "raw_url": "https://github.com/rust-lang/rust/raw/e2cd4597dae1ed0aa3967bd2a656a42daa1ad27f/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=e2cd4597dae1ed0aa3967bd2a656a42daa1ad27f", "patch": "@@ -151,11 +151,22 @@ validate_opt () {\n     done\n }\n \n-valopt() {\n-    VAL_OPTIONS=\"$VAL_OPTIONS $1\"\n+# `valopt OPTION_NAME DEFAULT DOC` extracts a string-valued option\n+# from command line, using provided default value for the option if\n+# not present, and saves it to the generated config.mk.\n+#\n+# `valopt_nosave` is much the same, except that it does not save the\n+# result to config.mk (instead the script should use `putvar` itself\n+# later on to save it).  `valopt_core` is the core upon which the\n+# other two are built.\n \n-    local OP=$1\n-    local DEFAULT=$2\n+valopt_core() {\n+    VAL_OPTIONS=\"$VAL_OPTIONS $2\"\n+\n+    local SAVE=$1\n+    local OP=$2\n+    local DEFAULT=$3\n+    shift\n     shift\n     shift\n     local DOC=\"$*\"\n@@ -172,7 +183,10 @@ valopt() {\n                 eval $V=$val\n             fi\n         done\n-        putvar $V\n+        if [ \"$SAVE\" = \"save\" ]\n+        then\n+            putvar $V\n+        fi\n     else\n         if [ -z \"$DEFAULT\" ]\n         then\n@@ -183,11 +197,30 @@ valopt() {\n     fi\n }\n \n-opt() {\n-    BOOL_OPTIONS=\"$BOOL_OPTIONS $1\"\n+valopt_nosave() {\n+    valopt_core nosave \"$@\"\n+}\n+\n+valopt() {\n+    valopt_core save \"$@\"\n+}\n \n-    local OP=$1\n-    local DEFAULT=$2\n+# `opt OPTION_NAME DEFAULT DOC` extracts a boolean-valued option from\n+# command line, using the provided default value (0/1) for the option\n+# if not present, and saves it to the generated config.mk.\n+#\n+# `opt_nosave` is much the same, except that it does not save the\n+# result to config.mk (instead the script should use `putvar` itself\n+# later on to save it).  `opt_core` is the core upon which the other\n+# two are built.\n+\n+opt_core() {\n+    BOOL_OPTIONS=\"$BOOL_OPTIONS $2\"\n+\n+    local SAVE=$1\n+    local OP=$2\n+    local DEFAULT=$3\n+    shift\n     shift\n     shift\n     local DOC=\"$*\"\n@@ -211,7 +244,10 @@ opt() {\n                 FLAG=$(echo $FLAG | tr 'a-z' 'A-Z')\n                 local V=\"CFG_${FLAG}_${OP}\"\n                 eval $V=1\n-                putvar $V\n+                if [ \"$SAVE\" = \"save\" ]\n+                then\n+                   putvar $V\n+                fi\n             fi\n         done\n     else\n@@ -223,6 +259,14 @@ opt() {\n      fi\n }\n \n+opt_nosave() {\n+    opt_core nosave \"$@\"\n+}\n+\n+opt() {\n+    opt_core save \"$@\"\n+}\n+\n envopt() {\n     local NAME=$1\n     local V=\"CFG_${NAME}\"\n@@ -422,38 +466,40 @@ opt llvm-assertions 1 \"build LLVM with assertions\"\n opt debug 1 \"build with extra debug fun\"\n opt ratchet-bench 0 \"ratchet benchmarks\"\n opt fast-make 0 \"use .gitmodules as timestamp for submodule deps\"\n-opt manage-submodules 1 \"let the build manage the git submodules\"\n opt mingw-cross 0 \"cross-compile for win32 using mingw\"\n-opt clang 0 \"prefer clang to gcc for building the runtime\"\n opt ccache 0 \"invoke gcc/clang via ccache to reuse object files between builds\"\n opt local-rust 0 \"use an installed rustc rather than downloading a snapshot\"\n-opt inject-std-version 1 \"inject the current compiler version of libstd into programs\"\n opt llvm-static-stdcpp 0 \"statically link to libstdc++ for LLVM\"\n opt rpath 0 \"build rpaths into rustc itself\"\n opt nightly 0 \"build nightly packages\"\n opt verify-install 1 \"verify installed binaries work\"\n-opt jemalloc 1 \"build liballoc with jemalloc\"\n # This is used by the automation to produce single-target nightlies\n opt dist-host-only 0 \"only install bins for the host architecture\"\n-valopt prefix \"/usr/local\" \"set installation prefix\"\n-valopt local-rust-root \"/usr/local\" \"set prefix for local rust binary\"\n-valopt llvm-root \"\" \"set LLVM root\"\n-valopt jemalloc-root \"\" \"set directory where libjemalloc_pic.a is located\"\n-valopt android-cross-path \"/opt/ndk_standalone\" \"Android NDK standalone path\"\n-valopt mingw32-cross-path \"\" \"MinGW32 cross compiler path\"\n-\n-valopt build \"${DEFAULT_BUILD}\" \"GNUs ./configure syntax LLVM build triple\"\n-valopt host \"${CFG_BUILD}\" \"GNUs ./configure syntax LLVM host triples\"\n-valopt target \"${CFG_HOST}\" \"GNUs ./configure syntax LLVM target triples\"\n+opt inject-std-version 1 \"inject the current compiler version of libstd into programs\"\n+opt jemalloc 1 \"build liballoc with jemalloc\"\n \n valopt localstatedir \"/var/lib\" \"local state directory\"\n valopt sysconfdir \"/etc\" \"install system configuration files\"\n \n valopt datadir \"${CFG_PREFIX}/share\" \"install data\"\n valopt infodir \"${CFG_PREFIX}/share/info\" \"install additional info\"\n-valopt mandir \"${CFG_PREFIX}/share/man\" \"install man pages in PATH\"\n+valopt llvm-root \"\" \"set LLVM root\"\n+valopt jemalloc-root \"\" \"set directory where libjemalloc_pic.a is located\"\n+valopt build \"${DEFAULT_BUILD}\" \"GNUs ./configure syntax LLVM build triple\"\n+valopt android-cross-path \"/opt/ndk_standalone\" \"Android NDK standalone path\"\n+valopt mingw32-cross-path \"\" \"MinGW32 cross compiler path\"\n+\n+# Many of these are saved below during the \"writing configuration\" step\n+# (others are conditionally saved).\n+opt_nosave manage-submodules 1 \"let the build manage the git submodules\"\n+opt_nosave clang 0 \"prefer clang to gcc for building the runtime\"\n \n-valopt release-channel \"dev\" \"the name of the release channel to build\"\n+valopt_nosave prefix \"/usr/local\" \"set installation prefix\"\n+valopt_nosave local-rust-root \"/usr/local\" \"set prefix for local rust binary\"\n+valopt_nosave host \"${CFG_BUILD}\" \"GNUs ./configure syntax LLVM host triples\"\n+valopt_nosave target \"${CFG_HOST}\" \"GNUs ./configure syntax LLVM target triples\"\n+valopt_nosave mandir \"${CFG_PREFIX}/share/man\" \"install man pages in PATH\"\n+valopt_nosave release-channel \"dev\" \"the name of the release channel to build\"\n \n # On windows we just store the libraries in the bin directory because\n # there's no rpath. This is where the build system itself puts libraries;\n@@ -491,8 +537,8 @@ esac\n if [ ! -z \"$CFG_ENABLE_NIGHTLY\" ]\n then\n     CFG_RELEASE_CHANNEL=nightly\n-    putvar CFG_RELEASE_CHANNEL\n fi\n+putvar CFG_RELEASE_CHANNEL\n \n step_msg \"looking for build programs\"\n \n@@ -605,17 +651,27 @@ then\n         err \"no local rust to use\"\n     fi\n \n-    LRV=`${CFG_LOCAL_RUST_ROOT}/bin/rustc${BIN_SUF} --version`\n+    CMD=\"${CFG_LOCAL_RUST_ROOT}/bin/rustc${BIN_SUF}\"\n+    LRV=`$CMD --version`\n+    if [ $? -ne 0 ]\n+    then\n+        step_msg \"failure while running $CMD --version\"\n+        exit 1\n+    fi\n     step_msg \"using rustc at: ${CFG_LOCAL_RUST_ROOT} with version: $LRV\"\n     putvar CFG_LOCAL_RUST_ROOT\n+else\n+    if [ ! -z \"$CFG_LOCAL_RUST_ROOT\" ]\n+    then\n+       warn \"Use of --local-rust-root without --enable-local-rust\"\n+    fi\n fi\n \n # Force freebsd to build with clang; gcc doesn't like us there\n if [ $CFG_OSTYPE = unknown-freebsd ]\n then\n     step_msg \"on FreeBSD, forcing use of clang\"\n     CFG_ENABLE_CLANG=1\n-    putvar CFG_ENABLE_CLANG\n fi\n \n if [ -z \"$CFG_ENABLE_CLANG\" -a -z \"$CFG_GCC\" ]\n@@ -632,12 +688,10 @@ then\n     then\n         step_msg \"on OS X 10.9, forcing use of clang\"\n         CFG_ENABLE_CLANG=1\n-        putvar CFG_ENABLE_CLANG\n     else\n         if [ $(\"$CFG_GCC\" --version 2>&1 | grep -c ' 4\\.[0-6]') -ne 0 ]; then\n             step_msg \"older GCC found, using clang instead\"\n             CFG_ENABLE_CLANG=1\n-            putvar CFG_ENABLE_CLANG\n         else\n             # on OS X, with xcode 5 and newer, certain developers may have\n             # cc, gcc and g++ point to a  mixture of clang and gcc\n@@ -663,6 +717,13 @@ then\n     fi\n fi\n \n+# Okay, at this point, we have made up our minds about whether we are\n+# going to force CFG_ENABLE_CLANG or not; save the setting if so.\n+if [ ! -z \"$CFG_ENABLE_CLANG\" ]\n+then\n+    putvar CFG_ENABLE_CLANG\n+fi\n+\n if [ ! -z \"$CFG_LLVM_ROOT\" -a -e \"$CFG_LLVM_ROOT/bin/llvm-config\" ]\n then\n     step_msg \"using custom LLVM at $CFG_LLVM_ROOT\"\n@@ -1203,18 +1264,11 @@ putvar CFG_OSTYPE\n putvar CFG_CPUTYPE\n putvar CFG_CONFIGURE_ARGS\n putvar CFG_PREFIX\n-putvar CFG_BUILD\n putvar CFG_HOST\n putvar CFG_TARGET\n-putvar CFG_LIBDIR\n putvar CFG_LIBDIR_RELATIVE\n putvar CFG_DISABLE_MANAGE_SUBMODULES\n-putvar CFG_ANDROID_CROSS_PATH\n-putvar CFG_MINGW32_CROSS_PATH\n putvar CFG_MANDIR\n-putvar CFG_DISABLE_INJECT_STD_VERSION\n-putvar CFG_JEMALLOC_ROOT\n-putvar CFG_DISABLE_JEMALLOC\n \n # Avoid spurious warnings from clang by feeding it original source on\n # ccache-miss rather than preprocessed input.\n@@ -1237,7 +1291,6 @@ then\n     putvar CFG_PANDOC\n fi\n \n-putvar CFG_LLVM_ROOT\n putvar CFG_LLVM_SRC_DIR\n \n for t in $CFG_HOST"}]}