{"sha": "2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYzJhYzFlNmIzODJiOGM2NTgwNzFmNjFjM2Y5NWFlNDQ0ZGNjMTY=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-08-14T19:18:14Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-08-21T01:02:24Z"}, "message": "liblibc: don't use int/uint for intptr_t/uintptr_t\n\nint/uint aren't considered FFI safe, replace them with the actual type they\nrepresent (i64/u64 or i32/u32). This is a breaking change, but at most a cast\nto `uint` or `int` needs to be added.\n\n[breaking-change]", "tree": {"sha": "6da6e648ec0fd760354cdcb235fbd7edb5a35c14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6da6e648ec0fd760354cdcb235fbd7edb5a35c14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "html_url": "https://github.com/rust-lang/rust/commit/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cffa32c21b08cec443dd2d0388e39cf381b6bfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cffa32c21b08cec443dd2d0388e39cf381b6bfc", "html_url": "https://github.com/rust-lang/rust/commit/0cffa32c21b08cec443dd2d0388e39cf381b6bfc"}], "stats": {"total": 145, "additions": 74, "deletions": 71}, "files": [{"sha": "859a2bce9728e181e2dae95da4ed27376bcddde1", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "patch": "@@ -507,8 +507,8 @@ pub mod types {\n             pub mod c99 {\n                 pub type c_longlong = i64;\n                 pub type c_ulonglong = u64;\n-                pub type intptr_t = int;\n-                pub type uintptr_t = uint;\n+                pub type intptr_t = i32;\n+                pub type uintptr_t = u32;\n             }\n             #[cfg(target_arch = \"x86\")]\n             #[cfg(target_arch = \"mips\")]\n@@ -702,8 +702,8 @@ pub mod types {\n             pub mod c99 {\n                 pub type c_longlong = i64;\n                 pub type c_ulonglong = u64;\n-                pub type intptr_t = int;\n-                pub type uintptr_t = uint;\n+                pub type intptr_t = i64;\n+                pub type uintptr_t = u64;\n             }\n             pub mod posix88 {\n                 pub type off_t = i64;\n@@ -911,8 +911,8 @@ pub mod types {\n             pub mod c99 {\n                 pub type c_longlong = i64;\n                 pub type c_ulonglong = u64;\n-                pub type intptr_t = int;\n-                pub type uintptr_t = uint;\n+                pub type intptr_t = i64;\n+                pub type uintptr_t = u64;\n             }\n             pub mod posix88 {\n                 pub type off_t = i64;\n@@ -1124,8 +1124,8 @@ pub mod types {\n             pub mod c99 {\n                 pub type c_longlong = i64;\n                 pub type c_ulonglong = u64;\n-                pub type intptr_t = int;\n-                pub type uintptr_t = uint;\n+                pub type intptr_t = i64;\n+                pub type uintptr_t = u64;\n             }\n             pub mod posix88 {\n                 pub type off_t = i64;\n@@ -1243,9 +1243,10 @@ pub mod types {\n             }\n \n             pub mod bsd44 {\n-                use types::os::arch::c95::{c_char, c_int, c_uint, size_t, uintptr_t};\n+                use types::os::arch::c95::{c_char, c_int, c_uint, size_t};\n+                use types::os::arch::c99::uintptr_t;\n \n-                pub type SOCKET = uint;\n+                pub type SOCKET = uintptr_t;\n                 pub type socklen_t = c_int;\n                 pub type sa_family_t = u16;\n                 pub type in_port_t = u16;\n@@ -1356,8 +1357,8 @@ pub mod types {\n             pub mod c99 {\n                 pub type c_longlong = i64;\n                 pub type c_ulonglong = u64;\n-                pub type intptr_t = int;\n-                pub type uintptr_t = uint;\n+                pub type intptr_t = i32;\n+                pub type uintptr_t = u32;\n             }\n \n             pub mod posix88 {\n@@ -1486,7 +1487,7 @@ pub mod types {\n                     pub dwPageSize: DWORD,\n                     pub lpMinimumApplicationAddress: LPVOID,\n                     pub lpMaximumApplicationAddress: LPVOID,\n-                    pub dwActiveProcessorMask: uint,\n+                    pub dwActiveProcessorMask: uintptr_t,\n                     pub dwNumberOfProcessors: DWORD,\n                     pub dwProcessorType: DWORD,\n                     pub dwAllocationGranularity: DWORD,\n@@ -1720,8 +1721,8 @@ pub mod types {\n             pub mod c99 {\n                 pub type c_longlong = i64;\n                 pub type c_ulonglong = u64;\n-                pub type intptr_t = int;\n-                pub type uintptr_t = uint;\n+                pub type intptr_t = i32;\n+                pub type uintptr_t = u32;\n             }\n             pub mod posix88 {\n                 pub type off_t = i64;\n@@ -1821,8 +1822,8 @@ pub mod types {\n             pub mod c99 {\n                 pub type c_longlong = i64;\n                 pub type c_ulonglong = u64;\n-                pub type intptr_t = int;\n-                pub type uintptr_t = uint;\n+                pub type intptr_t = i64;\n+                pub type uintptr_t = u64;\n             }\n             pub mod posix88 {\n                 pub type off_t = i64;\n@@ -4401,7 +4402,7 @@ pub mod funcs {\n                 pub fn glob(pattern: *const c_char,\n                             flags: c_int,\n                             errfunc: ::Nullable<extern \"C\" fn(epath: *const c_char,\n-                                                              errno: int) -> int>,\n+                                                              errno: c_int) -> int>,\n                             pglob: *mut glob_t);\n                 pub fn globfree(pglob: *mut glob_t);\n             }"}, {"sha": "d22ce25c778d7b024164587952ba66de8277c8c3", "filename": "src/libnative/io/c_unix.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Flibnative%2Fio%2Fc_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Flibnative%2Fio%2Fc_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_unix.rs?ref=2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "patch": "@@ -235,6 +235,7 @@ mod signal {\n     pub type sigset_t = u32;\n     #[cfg(target_os = \"freebsd\")]\n     #[cfg(target_os = \"dragonfly\")]\n+    #[repr(C)]\n     pub struct sigset_t {\n         bits: [u32, ..4],\n     }"}, {"sha": "80b4764014673e2901bf155f99985857d4d4ba99", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "patch": "@@ -369,9 +369,9 @@ impl LintPass for CTypes {\n \n                             if !ty::is_ffi_safe(cx.tcx, tty) {\n                                 cx.span_lint(CTYPES, ty.span,\n-                                             \"found enum type without foreign-function-safe\n+                                             \"found type without foreign-function-safe\n                                              representation annotation in foreign module, consider \\\n-                                             adding a #[repr(...)] attribute to the enumeration\");\n+                                             adding a #[repr(...)] attribute to the type\");\n                             }\n                         }\n                         _ => ()"}, {"sha": "e7b031c6b51801ac676635f71c8070e8252daf6a", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "patch": "@@ -378,14 +378,14 @@ pub unsafe fn free_req(v: *mut c_void) {\n #[test]\n fn handle_sanity_check() {\n     unsafe {\n-        assert_eq!(UV_HANDLE_TYPE_MAX as uint, rust_uv_handle_type_max());\n+        assert_eq!(UV_HANDLE_TYPE_MAX as libc::uintptr_t, rust_uv_handle_type_max());\n     }\n }\n \n #[test]\n fn request_sanity_check() {\n     unsafe {\n-        assert_eq!(UV_REQ_TYPE_MAX as uint, rust_uv_req_type_max());\n+        assert_eq!(UV_REQ_TYPE_MAX as libc::uintptr_t, rust_uv_req_type_max());\n     }\n }\n "}, {"sha": "7780c61e8667194f030e2691bf0881bdc602d46a", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "patch": "@@ -59,7 +59,7 @@ use libc::c_char;\n /// Get the number of cores available\n pub fn num_cpus() -> uint {\n     unsafe {\n-        return rust_get_num_cpus();\n+        return rust_get_num_cpus() as uint;\n     }\n \n     extern {"}, {"sha": "0e3b531e4581c90455bf9bfadb160cfd20b276d6", "filename": "src/test/auxiliary/extern-crosscrate-source.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern-crosscrate-source.rs?ref=2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "patch": "@@ -24,17 +24,17 @@ pub mod rustrt {\n     }\n }\n \n-pub fn fact(n: uint) -> uint {\n+pub fn fact(n: libc::uintptr_t) -> libc::uintptr_t {\n     unsafe {\n         println!(\"n = {}\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n \n pub extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1u {\n+    if data == 1 {\n         data\n     } else {\n-        fact(data - 1u) * data\n+        fact(data - 1) * data\n     }\n }"}, {"sha": "d4a40ade72c3262a3cc5c4f08e9261cc9542ef8e", "filename": "src/test/compile-fail/issue-14309.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Fcompile-fail%2Fissue-14309.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Fcompile-fail%2Fissue-14309.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14309.rs?ref=2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "patch": "@@ -11,19 +11,19 @@\n #![deny(ctypes)]\n #![allow(dead_code)]\n \n-struct A { //~ NOTE consider adding `#[repr(C)]` to this type\n-    x: int\n+struct A {\n+    x: i32\n }\n \n #[repr(C, packed)]\n struct B {\n-    x: int,\n+    x: i32,\n     y: A\n }\n \n #[repr(C)]\n struct C {\n-    x: int\n+    x: i32\n }\n \n type A2 = A;\n@@ -37,13 +37,13 @@ struct D {\n }\n \n extern \"C\" {\n-    fn foo(x: A); //~ ERROR found struct without FFI-safe representation used in FFI\n-    fn bar(x: B); //~ ERROR FFI-safe\n+    fn foo(x: A); //~ ERROR found type without foreign-function-safe\n+    fn bar(x: B); //~ ERROR foreign-function-safe\n     fn baz(x: C);\n-    fn qux(x: A2); //~ ERROR FFI-safe\n-    fn quux(x: B2); //~ ERROR FFI-safe\n+    fn qux(x: A2); //~ ERROR foreign-function-safe\n+    fn quux(x: B2); //~ ERROR foreign-function-safe\n     fn corge(x: C2);\n-    fn fred(x: D); //~ ERROR FFI-safe\n+    fn fred(x: D); //~ ERROR foreign-function-safe\n }\n \n fn main() { }"}, {"sha": "d45a3b027a79439a3bb831d2d8956dcea2ae27f5", "filename": "src/test/compile-fail/lint-ctypes-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs?ref=2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "patch": "@@ -18,9 +18,9 @@ enum T { E, F, G }\n \n extern {\n    fn zf(x: Z);\n-   fn uf(x: U);\n-   fn bf(x: B); //~ ERROR found enum without FFI-safe\n-   fn tf(x: T); //~ ERROR found enum without FFI-safe\n+   fn uf(x: U); //~ ERROR found type without foreign-function-safe\n+   fn bf(x: B); //~ ERROR found type without foreign-function-safe\n+   fn tf(x: T); //~ ERROR found type without foreign-function-safe\n }\n \n pub fn main() { }"}, {"sha": "93a5752d004aa65f52d048e0abb7af4b744170d9", "filename": "src/test/run-pass/extern-call-deep.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs?ref=2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "patch": "@@ -22,22 +22,22 @@ mod rustrt {\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1u {\n+    if data == 1 {\n         data\n     } else {\n-        count(data - 1u) + 1u\n+        count(data - 1) + 1\n     }\n }\n \n-fn count(n: uint) -> uint {\n+fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n     unsafe {\n         println!(\"n = {}\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n \n pub fn main() {\n-    let result = count(1000u);\n+    let result = count(1000);\n     println!(\"result = {}\", result);\n-    assert_eq!(result, 1000u);\n+    assert_eq!(result, 1000);\n }"}, {"sha": "bc5ccc30c527c5298c472a046419b371b645b100", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "patch": "@@ -23,14 +23,14 @@ mod rustrt {\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1u {\n+    if data == 1 {\n         data\n     } else {\n-        count(data - 1u) + 1u\n+        count(data - 1) + 1\n     }\n }\n \n-fn count(n: uint) -> uint {\n+fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n     unsafe {\n         println!(\"n = {}\", n);\n         rustrt::rust_dbg_call(cb, n)\n@@ -41,8 +41,8 @@ pub fn main() {\n     // Make sure we're on a task with small Rust stacks (main currently\n     // has a large stack)\n     task::spawn(proc() {\n-        let result = count(1000u);\n+        let result = count(1000);\n         println!(\"result = {}\", result);\n-        assert_eq!(result, 1000u);\n+        assert_eq!(result, 1000);\n     });\n }"}, {"sha": "52697d96b32d97edd9f6477710aa560ae33ffa57", "filename": "src/test/run-pass/extern-call-indirect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-indirect.rs?ref=2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "patch": "@@ -22,22 +22,22 @@ mod rustrt {\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1u {\n+    if data == 1 {\n         data\n     } else {\n-        fact(data - 1u) * data\n+        fact(data - 1) * data\n     }\n }\n \n-fn fact(n: uint) -> uint {\n+fn fact(n: libc::uintptr_t) -> libc::uintptr_t {\n     unsafe {\n         println!(\"n = {}\", n);\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n \n pub fn main() {\n-    let result = fact(10u);\n+    let result = fact(10);\n     println!(\"result = {}\", result);\n-    assert_eq!(result, 3628800u);\n+    assert_eq!(result, 3628800);\n }"}, {"sha": "ae9430370d52077900fe61a82adb771bd7f591a8", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "patch": "@@ -27,14 +27,14 @@ mod rustrt {\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1u {\n+    if data == 1 {\n         data\n     } else {\n-        count(data - 1u) + count(data - 1u)\n+        count(data - 1) + count(data - 1)\n     }\n }\n \n-fn count(n: uint) -> uint {\n+fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n     unsafe {\n         println!(\"n = {}\", n);\n         rustrt::rust_dbg_call(cb, n)\n@@ -45,8 +45,8 @@ pub fn main() {\n     // Make sure we're on a task with small Rust stacks (main currently\n     // has a large stack)\n     task::spawn(proc() {\n-        let result = count(12u);\n+        let result = count(12);\n         println!(\"result = {}\", result);\n-        assert_eq!(result, 2048u);\n+        assert_eq!(result, 2048);\n     });\n }"}, {"sha": "18e20332adc91e1693cf6c5c7dae6c9a127c4759", "filename": "src/test/run-pass/extern-crosscrate.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-crosscrate.rs?ref=2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "patch": "@@ -11,16 +11,17 @@\n //aux-build:extern-crosscrate-source.rs\n \n extern crate externcallback;\n+extern crate libc;\n \n-fn fact(n: uint) -> uint {\n+fn fact(n: libc::uintptr_t) -> libc::uintptr_t {\n     unsafe {\n         println!(\"n = {}\", n);\n         externcallback::rustrt::rust_dbg_call(externcallback::cb, n)\n     }\n }\n \n pub fn main() {\n-    let result = fact(10u);\n+    let result = fact(10);\n     println!(\"result = {}\", result);\n-    assert_eq!(result, 3628800u);\n+    assert_eq!(result, 3628800);\n }"}, {"sha": "87d96880e4bd340a07fa837b0c03315d1b4c7abe", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "patch": "@@ -26,24 +26,24 @@ mod rustrt {\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1u {\n+    if data == 1 {\n         data\n     } else {\n         task::deschedule();\n-        count(data - 1u) + count(data - 1u)\n+        count(data - 1) + count(data - 1)\n     }\n }\n \n-fn count(n: uint) -> uint {\n+fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n     unsafe {\n         rustrt::rust_dbg_call(cb, n)\n     }\n }\n \n pub fn main() {\n-    for _ in range(0, 100u) {\n+    for _ in range(0u, 100) {\n         task::spawn(proc() {\n-            assert_eq!(count(5u), 16u);\n+            assert_eq!(count(5), 16);\n         });\n     }\n }"}, {"sha": "7fb68e9f8a03863e92a93e70034d3e387229a2ac", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dc2ac1e6b382b8c658071f61c3f95ae444dcc16/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=2dc2ac1e6b382b8c658071f61c3f95ae444dcc16", "patch": "@@ -23,14 +23,14 @@ mod rustrt {\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1u {\n+    if data == 1 {\n         data\n     } else {\n-        count(data - 1u) + count(data - 1u)\n+        count(data - 1) + count(data - 1)\n     }\n }\n \n-fn count(n: uint) -> uint {\n+fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n     unsafe {\n         task::deschedule();\n         rustrt::rust_dbg_call(cb, n)\n@@ -40,9 +40,9 @@ fn count(n: uint) -> uint {\n pub fn main() {\n     for _ in range(0, 10u) {\n         task::spawn(proc() {\n-            let result = count(5u);\n+            let result = count(5);\n             println!(\"result = {}\", result);\n-            assert_eq!(result, 16u);\n+            assert_eq!(result, 16);\n         });\n     }\n }"}]}