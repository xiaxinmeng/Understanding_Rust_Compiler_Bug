{"sha": "28a76a90009d605349babcd2755962ab93913327", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4YTc2YTkwMDA5ZDYwNTM0OWJhYmNkMjc1NTk2MmFiOTM5MTMzMjc=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-26T11:28:02Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-26T14:36:32Z"}, "message": "Don't inspect the generated existential type items", "tree": {"sha": "4c7a6cea873da7c0b28f14b22c697a979fb36e8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c7a6cea873da7c0b28f14b22c697a979fb36e8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28a76a90009d605349babcd2755962ab93913327", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28a76a90009d605349babcd2755962ab93913327", "html_url": "https://github.com/rust-lang/rust/commit/28a76a90009d605349babcd2755962ab93913327", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28a76a90009d605349babcd2755962ab93913327/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "764232cb2a8407c72b9fea68835e686240e30ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/764232cb2a8407c72b9fea68835e686240e30ef3", "html_url": "https://github.com/rust-lang/rust/commit/764232cb2a8407c72b9fea68835e686240e30ef3"}], "stats": {"total": 144, "additions": 20, "deletions": 124}, "files": [{"sha": "a537b7d41c44b631777de4a141ff039759e47e1e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/28a76a90009d605349babcd2755962ab93913327/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a76a90009d605349babcd2755962ab93913327/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=28a76a90009d605349babcd2755962ab93913327", "patch": "@@ -419,7 +419,7 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n                 convert_variant_ctor(tcx, struct_def.id());\n             }\n         },\n-        hir::ItemExistential(..) |\n+        hir::ItemExistential(..) => {}\n         hir::ItemTy(..) | hir::ItemStatic(..) | hir::ItemConst(..) | hir::ItemFn(..) => {\n             tcx.generics_of(def_id);\n             tcx.type_of(def_id);\n@@ -1066,24 +1066,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 ItemExistential(hir::ExistTy { impl_trait_fn: None, .. }) => unimplemented!(),\n                 // existential types desugared from impl Trait\n                 ItemExistential(hir::ExistTy { impl_trait_fn: Some(owner), .. }) => {\n-                    tcx.typeck_tables_of(owner).concrete_existential_types\n-                        .get(&def_id)\n-                        .cloned()\n-                        .unwrap_or_else(|| {\n-                            // This can occur if some error in the\n-                            // owner fn prevented us from populating\n-                            // the `concrete_existential_types` table.\n-                            tcx.sess.delay_span_bug(\n-                                DUMMY_SP,\n-                                &format!(\n-                                    \"owner {:?} has no existential type for {:?} in its tables\",\n-                                    owner,\n-                                    def_id,\n-                                ),\n-                            );\n-\n-                            tcx.types.err\n-                        })\n+                    tcx.typeck_tables_of(owner).concrete_existential_types[&def_id]\n                 },\n                 ItemTrait(..) | ItemTraitAlias(..) |\n                 ItemMod(..) |"}, {"sha": "af91c9e26491185231b6cb16547b696e2465fa0b", "filename": "src/test/ui/error-codes/E0657.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28a76a90009d605349babcd2755962ab93913327/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a76a90009d605349babcd2755962ab93913327/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0657.rs?ref=28a76a90009d605349babcd2755962ab93913327", "patch": "@@ -19,7 +19,7 @@ fn free_fn_capture_hrtb_in_impl_trait()\n     -> Box<for<'a> Id<impl Lt<'a>>>\n         //~^ ERROR `impl Trait` can only capture lifetimes bound at the fn or impl level [E0657]\n {\n-    () //~ ERROR mismatched types\n+    Box::new(())\n }\n \n struct Foo;\n@@ -28,7 +28,7 @@ impl Foo {\n         -> Box<for<'a> Id<impl Lt<'a>>>\n             //~^ ERROR `impl Trait` can only capture lifetimes bound at the fn or impl level\n     {\n-        () //~ ERROR mismatched types\n+        Box::new(())\n     }\n }\n "}, {"sha": "737ae3a163ac20c219e2ed3db3929f9a4f184aae", "filename": "src/test/ui/error-codes/E0657.stderr", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/28a76a90009d605349babcd2755962ab93913327/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28a76a90009d605349babcd2755962ab93913327/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0657.stderr?ref=28a76a90009d605349babcd2755962ab93913327", "patch": "@@ -10,25 +10,6 @@ error[E0657]: `impl Trait` can only capture lifetimes bound at the fn or impl le\n LL |         -> Box<for<'a> Id<impl Lt<'a>>>\n    |                                   ^^\n \n-error[E0308]: mismatched types\n-  --> $DIR/E0657.rs:22:5\n-   |\n-LL |     () //~ ERROR mismatched types\n-   |     ^^ expected struct `std::boxed::Box`, found ()\n-   |\n-   = note: expected type `std::boxed::Box<(dyn Id<_> + 'static)>`\n-              found type `()`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/E0657.rs:31:9\n-   |\n-LL |         () //~ ERROR mismatched types\n-   |         ^^ expected struct `std::boxed::Box`, found ()\n-   |\n-   = note: expected type `std::boxed::Box<(dyn Id<_> + 'static)>`\n-              found type `()`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors occurred: E0308, E0657.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0657`."}, {"sha": "a594ee8aab42a7033de49326de2e48e50b895234", "filename": "src/test/ui/impl-trait/auto-trait-leak.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28a76a90009d605349babcd2755962ab93913327/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a76a90009d605349babcd2755962ab93913327/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.rs?ref=28a76a90009d605349babcd2755962ab93913327", "patch": "@@ -23,9 +23,7 @@ fn main() {\n // return type, which can't depend on the obligation.\n fn cycle1() -> impl Clone {\n     //~^ ERROR cycle detected\n-    //~| ERROR cycle detected\n     send(cycle2().clone());\n-    //~^ ERROR `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n \n     Rc::new(Cell::new(5))\n }"}, {"sha": "490817c46f811368843c77c315dda72cb07cda53", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 9, "deletions": 47, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/28a76a90009d605349babcd2755962ab93913327/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28a76a90009d605349babcd2755962ab93913327/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=28a76a90009d605349babcd2755962ab93913327", "patch": "@@ -1,67 +1,29 @@\n-error[E0391]: cycle detected when processing `cycle1::{{exist-impl-Trait}}`\n-  --> $DIR/auto-trait-leak.rs:24:16\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   |                ^^^^^^^^^^\n-   |\n-note: ...which requires processing `cycle1`...\n+error[E0391]: cycle detected when processing `cycle1`\n   --> $DIR/auto-trait-leak.rs:24:1\n    |\n LL | fn cycle1() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n note: ...which requires processing `cycle2::{{exist-impl-Trait}}`...\n-  --> $DIR/auto-trait-leak.rs:33:16\n+  --> $DIR/auto-trait-leak.rs:31:16\n    |\n LL | fn cycle2() -> impl Clone {\n    |                ^^^^^^^^^^\n note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:33:1\n+  --> $DIR/auto-trait-leak.rs:31:1\n    |\n LL | fn cycle2() -> impl Clone {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n-   = note: ...which again requires processing `cycle1::{{exist-impl-Trait}}`, completing the cycle\n-\n-error[E0391]: cycle detected when processing `cycle1::{{exist-impl-Trait}}`\n+note: ...which requires processing `cycle1::{{exist-impl-Trait}}`...\n   --> $DIR/auto-trait-leak.rs:24:16\n    |\n LL | fn cycle1() -> impl Clone {\n    |                ^^^^^^^^^^\n-   |\n-note: ...which requires processing `cycle1`...\n-  --> $DIR/auto-trait-leak.rs:24:1\n-   |\n-LL | fn cycle1() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...which requires evaluating trait selection obligation `impl std::clone::Clone: std::marker::Send`...\n-note: ...which requires processing `cycle2::{{exist-impl-Trait}}`...\n-  --> $DIR/auto-trait-leak.rs:33:16\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   |                ^^^^^^^^^^\n-note: ...which requires processing `cycle2`...\n-  --> $DIR/auto-trait-leak.rs:33:1\n-   |\n-LL | fn cycle2() -> impl Clone {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: ...which again requires processing `cycle1::{{exist-impl-Trait}}`, completing the cycle\n-\n-error[E0277]: `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak.rs:27:5\n-   |\n-LL |     send(cycle2().clone());\n-   |     ^^^^ `std::rc::Rc<std::string::String>` cannot be sent between threads safely\n-   |\n-   = help: within `impl std::clone::Clone`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::string::String>`\n-   = note: required because it appears within the type `impl std::clone::Clone`\n-note: required by `send`\n-  --> $DIR/auto-trait-leak.rs:16:1\n-   |\n-LL | fn send<T: Send>(_: T) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires processing `cycle1`, completing the cycle\n+note: cycle used when type-checking all item bodies\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0277, E0391.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "57a0040600a255d506e893c997c8b983494b9479", "filename": "src/test/ui/impl_trait_projections.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28a76a90009d605349babcd2755962ab93913327/src%2Ftest%2Fui%2Fimpl_trait_projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28a76a90009d605349babcd2755962ab93913327/src%2Ftest%2Fui%2Fimpl_trait_projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl_trait_projections.rs?ref=28a76a90009d605349babcd2755962ab93913327", "patch": "@@ -34,9 +34,8 @@ fn projection_with_named_trait_is_disallowed(x: impl Iterator)\n fn projection_with_named_trait_inside_path_is_disallowed()\n     -> <::std::ops::Range<impl Debug> as Iterator>::Item\n //~^ ERROR `impl Trait` is not allowed in path parameters\n-//~| ERROR trait bound `impl std::fmt::Debug: std::iter::Step` is not satisfied\n-{ //~ ERROR trait bound `impl std::fmt::Debug: std::iter::Step` is not satisfied\n-    (1i32..100).next().unwrap() //~ ERROR mismatched types\n+{\n+    (1i32..100).next().unwrap()\n }\n \n fn projection_from_impl_trait_inside_dyn_trait_is_disallowed()"}, {"sha": "f6d58984ecef747ae3994640d005c6380d7ae928", "filename": "src/test/ui/impl_trait_projections.stderr", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/28a76a90009d605349babcd2755962ab93913327/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28a76a90009d605349babcd2755962ab93913327/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr?ref=28a76a90009d605349babcd2755962ab93913327", "patch": "@@ -17,7 +17,7 @@ LL |     -> <::std::ops::Range<impl Debug> as Iterator>::Item\n    |                           ^^^^^^^^^^\n \n error[E0667]: `impl Trait` is not allowed in path parameters\n-  --> $DIR/impl_trait_projections.rs:43:29\n+  --> $DIR/impl_trait_projections.rs:42:29\n    |\n LL |     -> <dyn Iterator<Item = impl Debug> as Iterator>::Item\n    |                             ^^^^^^^^^^\n@@ -30,34 +30,7 @@ LL | fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n    |\n    = note: specify the type using the syntax `<impl std::iter::Iterator as Trait>::Item`\n \n-error[E0277]: the trait bound `impl std::fmt::Debug: std::iter::Step` is not satisfied\n-  --> $DIR/impl_trait_projections.rs:38:1\n-   |\n-LL | / { //~ ERROR trait bound `impl std::fmt::Debug: std::iter::Step` is not satisfied\n-LL | |     (1i32..100).next().unwrap() //~ ERROR mismatched types\n-LL | | }\n-   | |_^ the trait `std::iter::Step` is not implemented for `impl std::fmt::Debug`\n-   |\n-   = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::ops::Range<impl std::fmt::Debug>`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/impl_trait_projections.rs:39:5\n-   |\n-LL |     (1i32..100).next().unwrap() //~ ERROR mismatched types\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected anonymized type, found i32\n-   |\n-   = note: expected type `impl std::fmt::Debug`\n-              found type `i32`\n-\n-error[E0277]: the trait bound `impl std::fmt::Debug: std::iter::Step` is not satisfied\n-  --> $DIR/impl_trait_projections.rs:35:8\n-   |\n-LL |     -> <::std::ops::Range<impl Debug> as Iterator>::Item\n-   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::iter::Step` is not implemented for `impl std::fmt::Debug`\n-   |\n-   = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::ops::Range<impl std::fmt::Debug>`\n-\n-error: aborting due to 8 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors occurred: E0223, E0277, E0308, E0667.\n+Some errors occurred: E0223, E0667.\n For more information about an error, try `rustc --explain E0223`."}]}