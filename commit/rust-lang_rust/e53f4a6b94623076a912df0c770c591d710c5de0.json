{"sha": "e53f4a6b94623076a912df0c770c591d710c5de0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1M2Y0YTZiOTQ2MjMwNzZhOTEyZGYwYzc3MGM1OTFkNzEwYzVkZTA=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-09-29T20:40:26Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-09-30T16:54:03Z"}, "message": "Add `if let` to the reference", "tree": {"sha": "ff14599837abada41d64c4aaa2bbf7964dd15260", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff14599837abada41d64c4aaa2bbf7964dd15260"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e53f4a6b94623076a912df0c770c591d710c5de0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e53f4a6b94623076a912df0c770c591d710c5de0", "html_url": "https://github.com/rust-lang/rust/commit/e53f4a6b94623076a912df0c770c591d710c5de0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e53f4a6b94623076a912df0c770c591d710c5de0/comments", "author": null, "committer": null, "parents": [{"sha": "13e00e4a3d18802ca6407e59935be9f2c33ec061", "url": "https://api.github.com/repos/rust-lang/rust/commits/13e00e4a3d18802ca6407e59935be9f2c33ec061", "html_url": "https://github.com/rust-lang/rust/commit/13e00e4a3d18802ca6407e59935be9f2c33ec061"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "14fc1d8d73d6869b1d280a215bf646b30e7a835e", "filename": "src/doc/reference.md", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e53f4a6b94623076a912df0c770c591d710c5de0/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/e53f4a6b94623076a912df0c770c591d710c5de0/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=e53f4a6b94623076a912df0c770c591d710c5de0", "patch": "@@ -3231,7 +3231,7 @@ for i in range(0u, 256) {\n if_expr : \"if\" no_struct_literal_expr '{' block '}'\n           else_tail ? ;\n \n-else_tail : \"else\" [ if_expr\n+else_tail : \"else\" [ if_expr | if_let_expr\n                    | '{' block '}' ] ;\n ```\n \n@@ -3436,6 +3436,19 @@ let message = match maybe_digit {\n };\n ```\n \n+### If let expressions\n+\n+```{.ebnf .gram}\n+if_let_expr : \"if\" \"let\" pat '=' expr '{' block '}'\n+               else_tail ? ;\n+else_tail : \"else\" [ if_expr | if_let_expr | '{' block '}' ] ;\n+```\n+\n+An `if let` expression is semantically identical to an `if` expression but in place\n+of a condition expression it expects a refutable let statement. If the value of the\n+expression on the right hand side of the let statement matches the pattern, the corresponding\n+block will execute, otherwise flow proceeds to the first `else` block that follows.\n+\n ### Return expressions\n \n ```{.ebnf .gram}"}]}