{"sha": "493cabbde7f5838cbc0e1ccebc15dd6a5c82c1c5", "node_id": "C_kwDOAAsO6NoAKDQ5M2NhYmJkZTdmNTgzOGNiYzBlMWNjZWJjMTVkZDZhNWM4MmMxYzU", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-02-02T08:47:11Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-02-02T08:47:11Z"}, "message": "Treat scope info retrieval failure as assist failure", "tree": {"sha": "306e397d0873933e2dc11da5c55cdd3eadf7a890", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/306e397d0873933e2dc11da5c55cdd3eadf7a890"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/493cabbde7f5838cbc0e1ccebc15dd6a5c82c1c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmPbeRMACgkQ4laYqTBY\nYXGzfBAAp66YknFtKC5yX9NSz2cwipJianxtlyjkIpYEs5+Kx/7Oi6kYmBdFG1Al\nTBC8BEpzfcP44IOBOsdFrDNNY+AWEexgYpSCUg99NwZu2RfDECwE29gArhQl7fSG\n/9Oc2Li2N+D5T3xNfg4z+5d5BMI/Vl7P40eLfalE9qQP+iVkyaeV9475T3JKnx6P\n0U67N8gwsqXdIuiQVcRoRuS0oKHdqqmKKKjNZJvjaevZ+xgersU/Ql1Qg9yNfbIw\nJ3PB0eU3jjOOPecfMO61uuPB3MTCNHe4bxAzsPUw7MDMT2KlePY9Ys1rU65/idGt\npRRTq3RV7dFUBWDsQc13EE87oYZg3toZvq/yKhbNskdnav7y5aek0j9+6uRBEgCP\np5+DpCRRC8zPFCrIxijFJeMM8kf12HQL78uDfWoEpD2Ex/KHjmiAE6Ds4v+wC8gH\nGWRZO6aWOhM4tMnmeg4thDM2GWWZskjYivuikS98kD6IWxhd03TCs2xXWDb+A99a\nuBsjOgMagBP5s0KFwJZj3mLLhhK/h0+uSsq4lwswPWs0v/kj07CM9CQuEJM0TA15\nsyO4CFv9OIR8fZ4346cGHNsInDtpVjIPOWlyTWTfk83m3ZPPM/VGn+R3YYKqyr47\nqMnGwXoO+z16rJDVadUh9c1Fq5WaM1VaRL+BSfujy1HqD+mbCt4=\n=Xtmu\n-----END PGP SIGNATURE-----", "payload": "tree 306e397d0873933e2dc11da5c55cdd3eadf7a890\nparent 3edde6fcc1506d5c1bf7c74e42defaa44423595c\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1675327631 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1675327631 +0900\n\nTreat scope info retrieval failure as assist failure\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/493cabbde7f5838cbc0e1ccebc15dd6a5c82c1c5", "html_url": "https://github.com/rust-lang/rust/commit/493cabbde7f5838cbc0e1ccebc15dd6a5c82c1c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/493cabbde7f5838cbc0e1ccebc15dd6a5c82c1c5/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3edde6fcc1506d5c1bf7c74e42defaa44423595c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3edde6fcc1506d5c1bf7c74e42defaa44423595c", "html_url": "https://github.com/rust-lang/rust/commit/3edde6fcc1506d5c1bf7c74e42defaa44423595c"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "45b27a63ce26d43b7c60ebf5cc0601bec415147a", "filename": "crates/ide-assists/src/handlers/generate_function.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/493cabbde7f5838cbc0e1ccebc15dd6a5c82c1c5/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/493cabbde7f5838cbc0e1ccebc15dd6a5c82c1c5/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=493cabbde7f5838cbc0e1ccebc15dd6a5c82c1c5", "patch": "@@ -290,7 +290,7 @@ impl FunctionBuilder {\n         );\n \n         let (generic_param_list, where_clause) =\n-            fn_generic_params(ctx, necessary_generic_params, &target);\n+            fn_generic_params(ctx, necessary_generic_params, &target)?;\n \n         Some(Self {\n             target,\n@@ -336,7 +336,7 @@ impl FunctionBuilder {\n         );\n \n         let (generic_param_list, where_clause) =\n-            fn_generic_params(ctx, necessary_generic_params, &target);\n+            fn_generic_params(ctx, necessary_generic_params, &target)?;\n \n         Some(Self {\n             target,\n@@ -551,7 +551,8 @@ fn fn_args(\n     ))\n }\n \n-/// Gets parameter bounds and where predicates in scope and filters out irrelevant ones.\n+/// Gets parameter bounds and where predicates in scope and filters out irrelevant ones. Returns\n+/// `None` when it fails to get scope information.\n ///\n /// See comment on `filter_unnecessary_bounds()` for what bounds we consider relevant.\n ///\n@@ -562,10 +563,10 @@ fn fn_generic_params(\n     ctx: &AssistContext<'_>,\n     necessary_params: FxHashSet<hir::GenericParam>,\n     target: &GeneratedFunctionTarget,\n-) -> (Option<ast::GenericParamList>, Option<ast::WhereClause>) {\n+) -> Option<(Option<ast::GenericParamList>, Option<ast::WhereClause>)> {\n     if necessary_params.is_empty() {\n         // Not really needed but fast path.\n-        return (None, None);\n+        return Some((None, None));\n     }\n \n     // 1. Get generic parameters (with bounds) and where predicates in scope.\n@@ -592,8 +593,8 @@ fn fn_generic_params(\n \n     // 4. Rewrite paths\n     if let Some(param) = generic_params.first() {\n-        let source_scope = ctx.sema.scope(param.syntax()).unwrap();\n-        let target_scope = ctx.sema.scope(&target.parent()).unwrap();\n+        let source_scope = ctx.sema.scope(param.syntax())?;\n+        let target_scope = ctx.sema.scope(&target.parent())?;\n         if source_scope.module() != target_scope.module() {\n             let transform = PathTransform::generic_transformation(&target_scope, &source_scope);\n             let generic_params = generic_params.iter().map(|it| it.syntax());\n@@ -606,7 +607,7 @@ fn fn_generic_params(\n     let where_clause =\n         if where_preds.is_empty() { None } else { Some(make::where_clause(where_preds)) };\n \n-    (Some(generic_param_list), where_clause)\n+    Some((Some(generic_param_list), where_clause))\n }\n \n fn params_and_where_preds_in_scope("}]}