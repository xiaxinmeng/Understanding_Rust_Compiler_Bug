{"sha": "11d4708f3afc455b4d572d862f1e759442fc67f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZDQ3MDhmM2FmYzQ1NWI0ZDU3MmQ4NjJmMWU3NTk0NDJmYzY3ZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-18T17:58:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-18T17:58:25Z"}, "message": "Auto merge of #34342 - GuillaumeGomez:E0406, r=eddyb\n\nRemoved unused E0406 and unused functions\n\nFixes #34301.\n\nIt removes the unused E0406 and also unused functions.\n\ncc @eddyb", "tree": {"sha": "1c2ac743d57ff996bd37e0d0c14a96bc071de4d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c2ac743d57ff996bd37e0d0c14a96bc071de4d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11d4708f3afc455b4d572d862f1e759442fc67f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11d4708f3afc455b4d572d862f1e759442fc67f5", "html_url": "https://github.com/rust-lang/rust/commit/11d4708f3afc455b4d572d862f1e759442fc67f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11d4708f3afc455b4d572d862f1e759442fc67f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4d03da825160c9e1d3550dd9769ef4b96ef8e89", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4d03da825160c9e1d3550dd9769ef4b96ef8e89", "html_url": "https://github.com/rust-lang/rust/commit/f4d03da825160c9e1d3550dd9769ef4b96ef8e89"}, {"sha": "8637b4b034f2f9c6713cbeb3cad54dd122665fe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8637b4b034f2f9c6713cbeb3cad54dd122665fe0", "html_url": "https://github.com/rust-lang/rust/commit/8637b4b034f2f9c6713cbeb3cad54dd122665fe0"}], "stats": {"total": 34, "additions": 1, "deletions": 33}, "files": [{"sha": "208b5f11e20d125c4787cd1662898ae31d50718c", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11d4708f3afc455b4d572d862f1e759442fc67f5/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d4708f3afc455b4d572d862f1e759442fc67f5/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=11d4708f3afc455b4d572d862f1e759442fc67f5", "patch": "@@ -1105,7 +1105,7 @@ register_diagnostics! {\n //  E0257,\n //  E0258,\n     E0402, // cannot use an outer type parameter in this context\n-    E0406, // undeclared associated type\n+//  E0406, merged into 420\n //  E0410, merged into 408\n //  E0413, merged into 530\n //  E0414, merged into 530"}, {"sha": "e82b4e2fcd72f3f265c5097375e01a059437354e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/11d4708f3afc455b4d572d862f1e759442fc67f5/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11d4708f3afc455b4d572d862f1e759442fc67f5/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=11d4708f3afc455b4d572d862f1e759442fc67f5", "patch": "@@ -104,8 +104,6 @@ enum ResolutionError<'a> {\n     IsNotATrait(&'a str),\n     /// error E0405: use of undeclared trait name\n     UndeclaredTraitName(&'a str, SuggestedCandidates),\n-    /// error E0406: undeclared associated type\n-    UndeclaredAssociatedType,\n     /// error E0407: method is not a member of trait\n     MethodNotMemberOfTrait(Name, &'a str),\n     /// error E0437: type is not a member of trait\n@@ -229,9 +227,6 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n             err.span_label(span, &format!(\"`{}` is not in scope\", name));\n             err\n         }\n-        ResolutionError::UndeclaredAssociatedType => {\n-            struct_span_err!(resolver.session, span, E0406, \"undeclared associated type\")\n-        }\n         ResolutionError::MethodNotMemberOfTrait(method, trait_) => {\n             struct_span_err!(resolver.session,\n                              span,\n@@ -519,9 +514,6 @@ impl<'a, 'v> Visitor<'v> for Resolver<'a> {\n     fn visit_ty(&mut self, ty: &Ty) {\n         self.resolve_type(ty);\n     }\n-    fn visit_generics(&mut self, generics: &Generics) {\n-        self.resolve_generics(generics);\n-    }\n     fn visit_poly_trait_ref(&mut self, tref: &ast::PolyTraitRef, m: &ast::TraitBoundModifier) {\n         match self.resolve_trait_reference(tref.trait_ref.ref_id, &tref.trait_ref.path, 0) {\n             Ok(def) => self.record_def(tref.trait_ref.ref_id, def),\n@@ -1850,30 +1842,6 @@ impl<'a> Resolver<'a> {\n         })\n     }\n \n-    fn resolve_generics(&mut self, generics: &Generics) {\n-        for predicate in &generics.where_clause.predicates {\n-            match predicate {\n-                &ast::WherePredicate::BoundPredicate(_) |\n-                &ast::WherePredicate::RegionPredicate(_) => {}\n-                &ast::WherePredicate::EqPredicate(ref eq_pred) => {\n-                    self.resolve_path(eq_pred.id, &eq_pred.path, 0, TypeNS).and_then(|path_res| {\n-                        if let PathResolution { base_def: Def::TyParam(..), .. } = path_res {\n-                            Ok(self.record_def(eq_pred.id, path_res))\n-                        } else {\n-                            Err(false)\n-                        }\n-                    }).map_err(|error_reported| {\n-                        self.record_def(eq_pred.id, err_path_resolution());\n-                        if error_reported { return }\n-                        let error_variant = ResolutionError::UndeclaredAssociatedType;\n-                        resolve_error(self, eq_pred.span, error_variant);\n-                    }).unwrap_or(());\n-                }\n-            }\n-        }\n-        visit::walk_generics(self, generics);\n-    }\n-\n     fn with_current_self_type<T, F>(&mut self, self_type: &Ty, f: F) -> T\n         where F: FnOnce(&mut Resolver) -> T\n     {"}]}