{"sha": "acdf43f2575d534893840091c6c0a19b861ab263", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZGY0M2YyNTc1ZDUzNDg5Mzg0MDA5MWM2YzBhMTliODYxYWIyNjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-17T06:00:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-17T06:00:55Z"}, "message": "Auto merge of #7225 - InquisitivePenguin:unnessecary-async, r=llogiq\n\nNew lint: `unused_async`\n\nchangelog: Adds a lint, `unused_async`, which checks for async functions with no await statements\n\n`unused_async` is a lint that reduces code smell and overhead by encouraging async functions to be refactored into synchronous functions.\n\nFixes #7176\n\n### Examples\n\n```rust\nasync fn get_random_number() -> i64 {\n    4 // Chosen by fair dice roll. Guaranteed to be random.\n}\n```\n\nCould be written as:\n\n```rust\nfn get_random_number() -> i64 {\n    4 // Chosen by fair dice roll. Guaranteed to be random.\n}\n```\n\nSomething like this, however, should **not** be caught by clippy:\n```rust\n#[async_trait]\ntrait AsyncTrait {\n    async fn foo();\n}\n\nstruct Bar;\n\n#[async_trait]\nimpl AsyncTrait for Bar {\n    async fn foo() {\n        println!(\"bar\");\n    }\n}\n```", "tree": {"sha": "3d7521ce2a5242fef39a141112c56833d1961613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d7521ce2a5242fef39a141112c56833d1961613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acdf43f2575d534893840091c6c0a19b861ab263", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acdf43f2575d534893840091c6c0a19b861ab263", "html_url": "https://github.com/rust-lang/rust/commit/acdf43f2575d534893840091c6c0a19b861ab263", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acdf43f2575d534893840091c6c0a19b861ab263/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44e07476647ffb26f1aae034813a7ca430cb37b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/44e07476647ffb26f1aae034813a7ca430cb37b9", "html_url": "https://github.com/rust-lang/rust/commit/44e07476647ffb26f1aae034813a7ca430cb37b9"}, {"sha": "75ef9dc708e669bccbc18c3be4873c613058ef30", "url": "https://api.github.com/repos/rust-lang/rust/commits/75ef9dc708e669bccbc18c3be4873c613058ef30", "html_url": "https://github.com/rust-lang/rust/commit/75ef9dc708e669bccbc18c3be4873c613058ef30"}], "stats": {"total": 125, "additions": 125, "deletions": 0}, "files": [{"sha": "6b11354e83073d806ba5614df7c22ea7ee30dce7", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acdf43f2575d534893840091c6c0a19b861ab263/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/acdf43f2575d534893840091c6c0a19b861ab263/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=acdf43f2575d534893840091c6c0a19b861ab263", "patch": "@@ -2722,6 +2722,7 @@ Released 2018-09-13\n [`unsound_collection_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsound_collection_transmute\n [`unstable_as_mut_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#unstable_as_mut_slice\n [`unstable_as_slice`]: https://rust-lang.github.io/rust-clippy/master/index.html#unstable_as_slice\n+[`unused_async`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_async\n [`unused_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_collect\n [`unused_io_amount`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_io_amount\n [`unused_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_self"}, {"sha": "22d9f6e12a5135bd845459c9c0f5a5ae67813aaf", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/acdf43f2575d534893840091c6c0a19b861ab263/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acdf43f2575d534893840091c6c0a19b861ab263/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=acdf43f2575d534893840091c6c0a19b861ab263", "patch": "@@ -364,6 +364,7 @@ mod unnecessary_sort_by;\n mod unnecessary_wraps;\n mod unnested_or_patterns;\n mod unsafe_removed_from_name;\n+mod unused_async;\n mod unused_io_amount;\n mod unused_self;\n mod unused_unit;\n@@ -961,6 +962,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         unnecessary_wraps::UNNECESSARY_WRAPS,\n         unnested_or_patterns::UNNESTED_OR_PATTERNS,\n         unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME,\n+        unused_async::UNUSED_ASYNC,\n         unused_io_amount::UNUSED_IO_AMOUNT,\n         unused_self::UNUSED_SELF,\n         unused_unit::UNUSED_UNIT,\n@@ -1273,6 +1275,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box manual_map::ManualMap);\n     store.register_late_pass(move || box if_then_some_else_none::IfThenSomeElseNone::new(msrv));\n     store.register_early_pass(|| box bool_assert_comparison::BoolAssertComparison);\n+    store.register_late_pass(|| box unused_async::UnusedAsync);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(arithmetic::FLOAT_ARITHMETIC),\n@@ -1417,6 +1420,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(unit_types::LET_UNIT_VALUE),\n         LintId::of(unnecessary_wraps::UNNECESSARY_WRAPS),\n         LintId::of(unnested_or_patterns::UNNESTED_OR_PATTERNS),\n+        LintId::of(unused_async::UNUSED_ASYNC),\n         LintId::of(unused_self::UNUSED_SELF),\n         LintId::of(wildcard_imports::ENUM_GLOB_USE),\n         LintId::of(wildcard_imports::WILDCARD_IMPORTS),"}, {"sha": "18ee07d3a9587f2269cdd0ffa622676f4af889eb", "filename": "clippy_lints/src/unused_async.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/acdf43f2575d534893840091c6c0a19b861ab263/clippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acdf43f2575d534893840091c6c0a19b861ab263/clippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_async.rs?ref=acdf43f2575d534893840091c6c0a19b861ab263", "patch": "@@ -0,0 +1,92 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n+use rustc_hir::{Body, Expr, ExprKind, FnDecl, FnHeader, HirId, IsAsync, Item, ItemKind, YieldSource};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for functions that are declared `async` but have no `.await`s inside of them.\n+    ///\n+    /// **Why is this bad?** Async functions with no async code create overhead, both mentally and computationally.\n+    /// Callers of async methods either need to be calling from an async function themselves or run it on an executor, both of which\n+    /// causes runtime overhead and hassle for the caller.\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // Bad\n+    /// async fn get_random_number() -> i64 {\n+    ///     4 // Chosen by fair dice roll. Guaranteed to be random.\n+    /// }\n+    /// let number_future = get_random_number();\n+    ///\n+    /// // Good\n+    /// fn get_random_number_improved() -> i64 {\n+    ///     4 // Chosen by fair dice roll. Guaranteed to be random.\n+    /// }\n+    /// let number_future = async { get_random_number_improved() };\n+    /// ```\n+    pub UNUSED_ASYNC,\n+    pedantic,\n+    \"finds async functions with no await statements\"\n+}\n+\n+declare_lint_pass!(UnusedAsync => [UNUSED_ASYNC]);\n+\n+struct AsyncFnVisitor<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    found_await: bool,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for AsyncFnVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, ex: &'tcx Expr<'tcx>) {\n+        if let ExprKind::Yield(_, YieldSource::Await { .. }) = ex.kind {\n+            self.found_await = true;\n+        }\n+        walk_expr(self, ex);\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::OnlyBodies(self.cx.tcx.hir())\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n+    fn check_item(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n+        if let ItemKind::Trait(..) = item.kind {\n+            return;\n+        }\n+    }\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        fn_kind: FnKind<'tcx>,\n+        fn_decl: &'tcx FnDecl<'tcx>,\n+        body: &Body<'tcx>,\n+        span: Span,\n+        hir_id: HirId,\n+    ) {\n+        if let FnKind::ItemFn(_, _, FnHeader { asyncness, .. }, _) = &fn_kind {\n+            if matches!(asyncness, IsAsync::Async) {\n+                let mut visitor = AsyncFnVisitor { cx, found_await: false };\n+                walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), span, hir_id);\n+                if !visitor.found_await {\n+                    span_lint_and_help(\n+                        cx,\n+                        UNUSED_ASYNC,\n+                        span,\n+                        \"unused `async` for function with no await statements\",\n+                        None,\n+                        \"consider removing the `async` from this function\",\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "4f4203f5fdbf67fd59049f85769d322ae2ff73ba", "filename": "tests/ui/unused_async.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/acdf43f2575d534893840091c6c0a19b861ab263/tests%2Fui%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acdf43f2575d534893840091c6c0a19b861ab263/tests%2Fui%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_async.rs?ref=acdf43f2575d534893840091c6c0a19b861ab263", "patch": "@@ -0,0 +1,15 @@\n+// edition:2018\n+#![warn(clippy::unused_async)]\n+\n+async fn foo() -> i32 {\n+    4\n+}\n+\n+async fn bar() -> i32 {\n+    foo().await\n+}\n+\n+fn main() {\n+    foo();\n+    bar();\n+}"}, {"sha": "8b834d205b176970c8911b5f371c1282de83feb1", "filename": "tests/ui/unused_async.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/acdf43f2575d534893840091c6c0a19b861ab263/tests%2Fui%2Funused_async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acdf43f2575d534893840091c6c0a19b861ab263/tests%2Fui%2Funused_async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_async.stderr?ref=acdf43f2575d534893840091c6c0a19b861ab263", "patch": "@@ -0,0 +1,13 @@\n+error: unused `async` for function with no await statements\n+  --> $DIR/unused_async.rs:4:1\n+   |\n+LL | / async fn foo() -> i32 {\n+LL | |     4\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::unused-async` implied by `-D warnings`\n+   = help: consider removing the `async` from this function\n+\n+error: aborting due to previous error\n+"}]}