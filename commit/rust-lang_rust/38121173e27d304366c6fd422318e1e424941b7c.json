{"sha": "38121173e27d304366c6fd422318e1e424941b7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MTIxMTczZTI3ZDMwNDM2NmM2ZmQ0MjIzMThlMWU0MjQ5NDFiN2M=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T17:04:05Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T17:21:48Z"}, "message": "Rename `MetaItem.node` to `MetaItem.kind`", "tree": {"sha": "9016704208a96e5da5e8918388f512ba5f03a638", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9016704208a96e5da5e8918388f512ba5f03a638"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38121173e27d304366c6fd422318e1e424941b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38121173e27d304366c6fd422318e1e424941b7c", "html_url": "https://github.com/rust-lang/rust/commit/38121173e27d304366c6fd422318e1e424941b7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38121173e27d304366c6fd422318e1e424941b7c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4748679611c97c09cfb7096917d7830c410a4ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4748679611c97c09cfb7096917d7830c410a4ad", "html_url": "https://github.com/rust-lang/rust/commit/b4748679611c97c09cfb7096917d7830c410a4ad"}], "stats": {"total": 100, "additions": 50, "deletions": 50}, "files": [{"sha": "91c6c968f9853dd8d589e3785000510933f66584", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -361,7 +361,7 @@ impl_stable_hash_for!(enum ::syntax::ast::NestedMetaItem {\n \n impl_stable_hash_for!(struct ::syntax::ast::MetaItem {\n     path,\n-    node,\n+    kind,\n     span\n });\n "}, {"sha": "16d19e41db4f4422d35fc478047b8dfc1923cef9", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -218,7 +218,7 @@ impl<'a> LintLevelsBuilder<'a> {\n             let mut reason = None;\n             let tail_li = &metas[metas.len()-1];\n             if let Some(item) = tail_li.meta_item() {\n-                match item.node {\n+                match item.kind {\n                     ast::MetaItemKind::Word => {}  // actual lint names handled later\n                     ast::MetaItemKind::NameValue(ref name_value) => {\n                         if item.path == sym::reason {\n@@ -264,7 +264,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                         let mut err = bad_attr(sp);\n                         let mut add_label = true;\n                         if let Some(item) = li.meta_item() {\n-                            if let ast::MetaItemKind::NameValue(_) = item.node {\n+                            if let ast::MetaItemKind::NameValue(_) = item.kind {\n                                 if item.path == sym::reason {\n                                     err.span_label(sp, \"reason in lint attribute must come last\");\n                                     add_label = false;"}, {"sha": "2d726fcd176124c5c99b4f3d00dc38f6a52f283d", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -59,7 +59,7 @@ impl LibFeatureCollector<'tcx> {\n             attr.check_name(**stab_attr)\n         }) {\n             let meta_item = attr.meta();\n-            if let Some(MetaItem { node: MetaItemKind::List(ref metas), .. }) = meta_item {\n+            if let Some(MetaItem { kind: MetaItemKind::List(ref metas), .. }) = meta_item {\n                 let mut feature = None;\n                 let mut since = None;\n                 for meta in metas {"}, {"sha": "73b731b07619dc68a31337551bcb9a272ed7257d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -1879,7 +1879,7 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n                     if meta_item.path.segments.len() != 1 {\n                         error!(\"argument key must be an identifier\");\n                     }\n-                    match &meta_item.node {\n+                    match &meta_item.kind {\n                         MetaItemKind::List(..) => {\n                             error!(r#\"expected `key` or `key=\"value\"`\"#);\n                         }"}, {"sha": "774a5af1b1ca804d25b11a12aa294a4b28fc305a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -700,7 +700,7 @@ impl RustcDefaultCalls {\n                     let mut cfgs = sess.parse_sess.config.iter().filter_map(|&(name, ref value)| {\n                         let gated_cfg = GatedCfg::gate(&ast::MetaItem {\n                             path: ast::Path::from_ident(ast::Ident::with_dummy_span(name)),\n-                            node: ast::MetaItemKind::Word,\n+                            kind: ast::MetaItemKind::Word,\n                             span: DUMMY_SP,\n                         });\n "}, {"sha": "72df875fc8f4f4e80269f0fd73f08e604f21d25f", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -556,7 +556,7 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<c\n                             sym::bin\n                         ];\n \n-                        if let ast::MetaItemKind::NameValue(spanned) = a.meta().unwrap().node {\n+                        if let ast::MetaItemKind::NameValue(spanned) = a.meta().unwrap().kind {\n                             let span = spanned.span;\n                             let lev_candidate = find_best_match_for_name(\n                                 crate_types.iter(),"}, {"sha": "f76aa95dd2cc8e40642dfc89669714dfe40a819d", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -944,7 +944,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 }\n                 let ill_formed = |span| span_err!(self.r.session, span, E0466, \"bad macro import\");\n                 match attr.meta() {\n-                    Some(meta) => match meta.node {\n+                    Some(meta) => match meta.kind {\n                         MetaItemKind::Word => {\n                             import_all = Some(meta.span);\n                             break;"}, {"sha": "3ac3ce2a02c2e9c51437b7e22f2429cac885d1fe", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -2653,7 +2653,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         if attr.path != sym::inline {\n             return ia;\n         }\n-        match attr.meta().map(|i| i.node) {\n+        match attr.meta().map(|i| i.kind) {\n             Some(MetaItemKind::Word) => {\n                 mark_used(attr);\n                 InlineAttr::Hint\n@@ -2694,7 +2694,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             return ia;\n         }\n         let err = |sp, s| span_err!(tcx.sess.diagnostic(), sp, E0722, \"{}\", s);\n-        match attr.meta().map(|i| i.node) {\n+        match attr.meta().map(|i| i.kind) {\n             Some(MetaItemKind::Word) => {\n                 err(attr.span, \"expected one argument\");\n                 ia"}, {"sha": "da3b52afadffb50a6252d2e43e9cef0fac1dbe0a", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -68,7 +68,7 @@ impl Cfg {\n                 span: cfg.span\n             }),\n         };\n-        match cfg.node {\n+        match cfg.kind {\n             MetaItemKind::Word => Ok(Cfg::Cfg(name, None)),\n             MetaItemKind::NameValue(ref lit) => match lit.kind {\n                 LitKind::Str(value, _) => Ok(Cfg::Cfg(name, Some(value))),"}, {"sha": "e5fd91b5f76ab0fcf999b69d61cecbe808f0e063", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -17,7 +17,7 @@ fn name_value_cfg(name: &str, value: &str) -> Cfg {\n fn dummy_meta_item_word(name: &str) -> MetaItem {\n     MetaItem {\n         path: Path::from_ident(Ident::from_str(name)),\n-        node: MetaItemKind::Word,\n+        kind: MetaItemKind::Word,\n         span: DUMMY_SP,\n     }\n }\n@@ -26,7 +26,7 @@ macro_rules! dummy_meta_item_list {\n     ($name:ident, [$($list:ident),* $(,)?]) => {\n         MetaItem {\n             path: Path::from_ident(Ident::from_str(stringify!($name))),\n-            node: MetaItemKind::List(vec![\n+            kind: MetaItemKind::List(vec![\n                 $(\n                     NestedMetaItem::MetaItem(\n                         dummy_meta_item_word(stringify!($list)),"}, {"sha": "ce2144710581538b317625a6536598ac08559f88", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -778,11 +778,11 @@ impl Attributes {\n     fn extract_cfg(mi: &ast::MetaItem) -> Option<&ast::MetaItem> {\n         use syntax::ast::NestedMetaItem::MetaItem;\n \n-        if let ast::MetaItemKind::List(ref nmis) = mi.node {\n+        if let ast::MetaItemKind::List(ref nmis) = mi.kind {\n             if nmis.len() == 1 {\n                 if let MetaItem(ref cfg_mi) = nmis[0] {\n                     if cfg_mi.check_name(sym::cfg) {\n-                        if let ast::MetaItemKind::List(ref cfg_nmis) = cfg_mi.node {\n+                        if let ast::MetaItemKind::List(ref cfg_nmis) = cfg_mi.kind {\n                             if cfg_nmis.len() == 1 {\n                                 if let MetaItem(ref content_mi) = cfg_nmis[0] {\n                                     return Some(content_mi);"}, {"sha": "a7f035dc9ecc7388fa8911711b92fe38729f514b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -472,7 +472,7 @@ pub enum NestedMetaItem {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct MetaItem {\n     pub path: Path,\n-    pub node: MetaItemKind,\n+    pub kind: MetaItemKind,\n     pub span: Span,\n }\n "}, {"sha": "2a8e6b2cc95109c6f6ff5354734b2dddaf977f7e", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -106,7 +106,7 @@ pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Op\n     attrs.iter().fold(None, |ia, attr| {\n         if attr.check_name(sym::unwind) {\n             if let Some(meta) = attr.meta() {\n-                if let MetaItemKind::List(items) = meta.node {\n+                if let MetaItemKind::List(items) = meta.kind {\n                     if items.len() == 1 {\n                         if items[0].check_name(sym::allowed) {\n                             return Some(UnwindAttr::Allowed);\n@@ -239,7 +239,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n             allow_const_fn_ptr = true;\n         }\n         // attributes with data\n-        else if let Some(MetaItem { node: MetaItemKind::List(ref metas), .. }) = meta {\n+        else if let Some(MetaItem { kind: MetaItemKind::List(ref metas), .. }) = meta {\n             let meta = meta.as_ref().unwrap();\n             let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n                 if item.is_some() {\n@@ -534,7 +534,7 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n         if cfg.path.segments.len() != 1 {\n             return error(cfg.path.span, \"`cfg` predicate key must be an identifier\");\n         }\n-        match &cfg.node {\n+        match &cfg.kind {\n             MetaItemKind::List(..) => {\n                 error(cfg.span, \"unexpected parentheses after `cfg` predicate key\")\n             }\n@@ -563,7 +563,7 @@ pub fn eval_condition<F>(cfg: &ast::MetaItem, sess: &ParseSess, eval: &mut F)\n                          -> bool\n     where F: FnMut(&ast::MetaItem) -> bool\n {\n-    match cfg.node {\n+    match cfg.kind {\n         ast::MetaItemKind::List(ref mis) => {\n             for mi in mis.iter() {\n                 if !mi.is_meta_item() {\n@@ -642,7 +642,7 @@ fn find_deprecation_generic<'a, I>(sess: &ParseSess,\n         }\n \n         let meta = attr.meta().unwrap();\n-        depr = match &meta.node {\n+        depr = match &meta.kind {\n             MetaItemKind::Word => Some(Deprecation { since: None, note: None }),\n             MetaItemKind::NameValue(..) => {\n                 meta.value_str().map(|note| {\n@@ -830,7 +830,7 @@ pub fn find_repr_attrs(sess: &ParseSess, attr: &Attribute) -> Vec<ReprAttr> {\n                 } else {\n                     if let Some(meta_item) = item.meta_item() {\n                         if meta_item.check_name(sym::align) {\n-                            if let MetaItemKind::NameValue(ref value) = meta_item.node {\n+                            if let MetaItemKind::NameValue(ref value) = meta_item.kind {\n                                 recognised = true;\n                                 let mut err = struct_span_err!(diagnostic, item.span(), E0693,\n                                     \"incorrect `repr(align)` attribute format\");\n@@ -941,7 +941,7 @@ crate fn check_builtin_attribute(\n                              name == sym::test || name == sym::bench;\n \n     match attr.parse_meta(sess) {\n-        Ok(meta) => if !should_skip(name) && !template.compatible(&meta.node) {\n+        Ok(meta) => if !should_skip(name) && !template.compatible(&meta.kind) {\n             let error_msg = format!(\"malformed `{}` attribute input\", name);\n             let mut msg = \"attribute must be of the form \".to_owned();\n             let mut suggestions = vec![];"}, {"sha": "122cb7fb12b246b44f742b565788a11dc849189f", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -174,7 +174,7 @@ impl Attribute {\n \n     pub fn meta_item_list(&self) -> Option<Vec<NestedMetaItem>> {\n         match self.meta() {\n-            Some(MetaItem { node: MetaItemKind::List(list), .. }) => Some(list),\n+            Some(MetaItem { kind: MetaItemKind::List(list), .. }) => Some(list),\n             _ => None\n         }\n     }\n@@ -210,14 +210,14 @@ impl MetaItem {\n     //     #[attribute(name = \"value\")]\n     //                 ^^^^^^^^^^^^^^\n     pub fn name_value_literal(&self) -> Option<&Lit> {\n-        match &self.node {\n+        match &self.kind {\n             MetaItemKind::NameValue(v) => Some(v),\n             _ => None,\n         }\n     }\n \n     pub fn value_str(&self) -> Option<Symbol> {\n-        match self.node {\n+        match self.kind {\n             MetaItemKind::NameValue(ref v) => {\n                 match v.kind {\n                     LitKind::Str(ref s, _) => Some(*s),\n@@ -229,14 +229,14 @@ impl MetaItem {\n     }\n \n     pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n-        match self.node {\n+        match self.kind {\n             MetaItemKind::List(ref l) => Some(&l[..]),\n             _ => None\n         }\n     }\n \n     pub fn is_word(&self) -> bool {\n-        match self.node {\n+        match self.kind {\n             MetaItemKind::Word => true,\n             _ => false,\n         }\n@@ -261,11 +261,11 @@ impl Attribute {\n         let mut tokens = self.tokens.trees().peekable();\n         Some(MetaItem {\n             path: self.path.clone(),\n-            node: if let Some(node) = MetaItemKind::from_tokens(&mut tokens) {\n+            kind: if let Some(kind) = MetaItemKind::from_tokens(&mut tokens) {\n                 if tokens.peek().is_some() {\n                     return None;\n                 }\n-                node\n+                kind\n             } else {\n                 return None;\n             },\n@@ -314,7 +314,7 @@ impl Attribute {\n     pub fn parse_meta<'a>(&self, sess: &'a ParseSess) -> PResult<'a, MetaItem> {\n         Ok(MetaItem {\n             path: self.path.clone(),\n-            node: self.parse(sess, |parser| parser.parse_meta_item_kind())?,\n+            kind: self.parse(sess, |parser| parser.parse_meta_item_kind())?,\n             span: self.span,\n         })\n     }\n@@ -336,7 +336,7 @@ impl Attribute {\n                 id: self.id,\n                 style: self.style,\n                 path: meta.path,\n-                tokens: meta.node.tokens(meta.span),\n+                tokens: meta.kind.tokens(meta.span),\n                 is_sugared_doc: true,\n                 span: self.span,\n             })\n@@ -356,15 +356,15 @@ pub fn mk_name_value_item_str(ident: Ident, str: Symbol, str_span: Span) -> Meta\n pub fn mk_name_value_item(ident: Ident, lit_kind: LitKind, lit_span: Span) -> MetaItem {\n     let lit = Lit::from_lit_kind(lit_kind, lit_span);\n     let span = ident.span.to(lit_span);\n-    MetaItem { path: Path::from_ident(ident), span, node: MetaItemKind::NameValue(lit) }\n+    MetaItem { path: Path::from_ident(ident), span, kind: MetaItemKind::NameValue(lit) }\n }\n \n pub fn mk_list_item(ident: Ident, items: Vec<NestedMetaItem>) -> MetaItem {\n-    MetaItem { path: Path::from_ident(ident), span: ident.span, node: MetaItemKind::List(items) }\n+    MetaItem { path: Path::from_ident(ident), span: ident.span, kind: MetaItemKind::List(items) }\n }\n \n pub fn mk_word_item(ident: Ident) -> MetaItem {\n-    MetaItem { path: Path::from_ident(ident), span: ident.span, node: MetaItemKind::Word }\n+    MetaItem { path: Path::from_ident(ident), span: ident.span, kind: MetaItemKind::Word }\n }\n \n pub fn mk_nested_word_item(ident: Ident) -> NestedMetaItem {\n@@ -395,12 +395,12 @@ pub fn mk_attr(style: AttrStyle, path: Path, tokens: TokenStream, span: Span) ->\n \n /// Returns an inner attribute with the given value and span.\n pub fn mk_attr_inner(item: MetaItem) -> Attribute {\n-    mk_attr(AttrStyle::Inner, item.path, item.node.tokens(item.span), item.span)\n+    mk_attr(AttrStyle::Inner, item.path, item.kind.tokens(item.span), item.span)\n }\n \n /// Returns an outer attribute with the given value and span.\n pub fn mk_attr_outer(item: MetaItem) -> Attribute {\n-    mk_attr(AttrStyle::Outer, item.path, item.node.tokens(item.span), item.span)\n+    mk_attr(AttrStyle::Outer, item.path, item.kind.tokens(item.span), item.span)\n }\n \n pub fn mk_sugared_doc_attr(text: Symbol, span: Span) -> Attribute {\n@@ -483,7 +483,7 @@ impl MetaItem {\n             idents.push(TokenTree::Token(Token::from_ast_ident(segment.ident)).into());\n             last_pos = segment.ident.span.hi();\n         }\n-        self.node.tokens(self.span).append_to_tree_and_joint_vec(&mut idents);\n+        self.kind.tokens(self.span).append_to_tree_and_joint_vec(&mut idents);\n         TokenStream::new(idents)\n     }\n \n@@ -531,14 +531,14 @@ impl MetaItem {\n             _ => return None,\n         };\n         let list_closing_paren_pos = tokens.peek().map(|tt| tt.span().hi());\n-        let node = MetaItemKind::from_tokens(tokens)?;\n-        let hi = match node {\n+        let kind = MetaItemKind::from_tokens(tokens)?;\n+        let hi = match kind {\n             MetaItemKind::NameValue(ref lit) => lit.span.hi(),\n             MetaItemKind::List(..) => list_closing_paren_pos.unwrap_or(path.span.hi()),\n             _ => path.span.hi(),\n         };\n         let span = path.span.with_hi(hi);\n-        Some(MetaItem { path, node, span })\n+        Some(MetaItem { path, kind, span })\n     }\n }\n "}, {"sha": "02e7c6775a49d1ed45098d7d27cdbd3bcfe8fa1b", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -659,7 +659,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     if !item.derive_allowed() {\n                         return fragment_kind.dummy(span);\n                     }\n-                    let meta = ast::MetaItem { node: ast::MetaItemKind::Word, span, path };\n+                    let meta = ast::MetaItem { kind: ast::MetaItemKind::Word, span, path };\n                     let items = expander.expand(self.cx, span, &meta, item);\n                     fragment_kind.expect_from_annotatables(items)\n                 }\n@@ -1534,7 +1534,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                 id: at.id,\n                 style: at.style,\n                 path: meta.path,\n-                tokens: meta.node.tokens(meta.span),\n+                tokens: meta.kind.tokens(meta.span),\n                 is_sugared_doc: false,\n             };\n         } else {"}, {"sha": "43b5df38e143cbddca4d2b78801174c9092ce1a5", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -576,8 +576,8 @@ pub fn noop_visit_meta_list_item<T: MutVisitor>(li: &mut NestedMetaItem, vis: &m\n }\n \n pub fn noop_visit_meta_item<T: MutVisitor>(mi: &mut MetaItem, vis: &mut T) {\n-    let MetaItem { path: _, node, span } = mi;\n-    match node {\n+    let MetaItem { path: _, kind, span } = mi;\n+    match kind {\n         MetaItemKind::Word => {}\n         MetaItemKind::List(mis) => visit_vec(mis, |mi| vis.visit_meta_list_item(mi)),\n         MetaItemKind::NameValue(_s) => {}"}, {"sha": "44688bd36b5fbb3182261e297b8a7240e9844411", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -179,7 +179,7 @@ impl<'a> Parser<'a> {\n         };\n         Ok(if let Some(meta) = meta {\n             self.bump();\n-            (meta.path, meta.node.tokens(meta.span))\n+            (meta.path, meta.kind.tokens(meta.span))\n         } else {\n             let path = self.parse_path(PathStyle::Mod)?;\n             let tokens = if self.check(&token::OpenDelim(DelimToken::Paren)) ||\n@@ -281,9 +281,9 @@ impl<'a> Parser<'a> {\n \n         let lo = self.token.span;\n         let path = self.parse_path(PathStyle::Mod)?;\n-        let node = self.parse_meta_item_kind()?;\n+        let kind = self.parse_meta_item_kind()?;\n         let span = lo.to(self.prev_span);\n-        Ok(ast::MetaItem { path, node, span })\n+        Ok(ast::MetaItem { path, kind, span })\n     }\n \n     crate fn parse_meta_item_kind(&mut self) -> PResult<'a, ast::MetaItemKind> {"}, {"sha": "463ae9124ca23e2beb4432460d4646771050d816", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -114,7 +114,7 @@ impl<'a> Parser<'a> {\n     pub fn parse_path_allowing_meta(&mut self, style: PathStyle) -> PResult<'a, Path> {\n         let meta_ident = match self.token.kind {\n             token::Interpolated(ref nt) => match **nt {\n-                token::NtMeta(ref meta) => match meta.node {\n+                token::NtMeta(ref meta) => match meta.kind {\n                     ast::MetaItemKind::Word => Some(meta.path.clone()),\n                     _ => None,\n                 },"}, {"sha": "a5792dab4749cc05ea149d0637e0ebd2a67cc50c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38121173e27d304366c6fd422318e1e424941b7c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=38121173e27d304366c6fd422318e1e424941b7c", "patch": "@@ -662,7 +662,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n \n     fn print_meta_item(&mut self, item: &ast::MetaItem) {\n         self.ibox(INDENT_UNIT);\n-        match item.node {\n+        match item.kind {\n             ast::MetaItemKind::Word => self.print_path(&item.path, false, 0),\n             ast::MetaItemKind::NameValue(ref value) => {\n                 self.print_path(&item.path, false, 0);"}]}