{"sha": "c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0Njg1NDc3ZTA3NzFlZTIxYWZhNmI5M2VhMGQ0Y2EyYzdmNmFiZDk=", "commit": {"author": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-13T16:53:00Z"}, "committer": {"name": "Brendan Zabarauskas", "email": "bjzaba@yahoo.com.au", "date": "2013-04-13T16:53:00Z"}, "message": "Consolidate tests of numeric operations", "tree": {"sha": "20f634f93ce97455e4971d3e5e6155a3286b383f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20f634f93ce97455e4971d3e5e6155a3286b383f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9", "html_url": "https://github.com/rust-lang/rust/commit/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9/comments", "author": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brendanzab", "id": 695077, "node_id": "MDQ6VXNlcjY5NTA3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/695077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brendanzab", "html_url": "https://github.com/brendanzab", "followers_url": "https://api.github.com/users/brendanzab/followers", "following_url": "https://api.github.com/users/brendanzab/following{/other_user}", "gists_url": "https://api.github.com/users/brendanzab/gists{/gist_id}", "starred_url": "https://api.github.com/users/brendanzab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brendanzab/subscriptions", "organizations_url": "https://api.github.com/users/brendanzab/orgs", "repos_url": "https://api.github.com/users/brendanzab/repos", "events_url": "https://api.github.com/users/brendanzab/events{/privacy}", "received_events_url": "https://api.github.com/users/brendanzab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce6ee7bb041044c3e236be7aefae97931e596407", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce6ee7bb041044c3e236be7aefae97931e596407", "html_url": "https://github.com/rust-lang/rust/commit/ce6ee7bb041044c3e236be7aefae97931e596407"}], "stats": {"total": 112, "additions": 29, "deletions": 83}, "files": [{"sha": "5e672ea0dfa867996f79bc16c04e787d9708a21b", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9", "patch": "@@ -555,18 +555,6 @@ impl num::FromStrRadix for f32 {\n     }\n }\n \n-#[test]\n-pub fn test_num() {\n-    let ten: f32 = num::cast(10);\n-    let two: f32 = num::cast(2);\n-\n-    assert!((ten.add(&two)    == num::cast(12)));\n-    assert!((ten.sub(&two)    == num::cast(8)));\n-    assert!((ten.mul(&two)    == num::cast(20)));\n-    assert!((ten.div(&two)    == num::cast(5)));\n-    assert!((ten.modulo(&two) == num::cast(0)));\n-}\n-\n //\n // Local Variables:\n // mode: rust"}, {"sha": "4c96da73d2130522112899b86ece62f937f8451a", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9", "patch": "@@ -577,18 +577,6 @@ impl num::FromStrRadix for f64 {\n     }\n }\n \n-#[test]\n-pub fn test_num() {\n-    let ten: f64 = num::cast(10);\n-    let two: f64 = num::cast(2);\n-\n-    assert!((ten.add(&two)    == num::cast(12)));\n-    assert!((ten.sub(&two)    == num::cast(8)));\n-    assert!((ten.mul(&two)    == num::cast(20)));\n-    assert!((ten.div(&two)    == num::cast(5)));\n-    assert!((ten.modulo(&two) == num::cast(0)));\n-}\n-\n //\n // Local Variables:\n // mode: rust"}, {"sha": "1ab0e24f62dc94dd8b08de9825f1dfe54cb2a047", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9", "patch": "@@ -663,18 +663,6 @@ pub fn test_round() {\n     assert!(round(-3.5) == -4.0);\n }\n \n-#[test]\n-pub fn test_num() {\n-    let ten: float = num::cast(10);\n-    let two: float = num::cast(2);\n-\n-    assert!((ten.add(&two)    == num::cast(12)));\n-    assert!((ten.sub(&two)    == num::cast(8)));\n-    assert!((ten.mul(&two)    == num::cast(20)));\n-    assert!((ten.div(&two)    == num::cast(5)));\n-    assert!((ten.modulo(&two) == num::cast(0)));\n-}\n-\n \n //\n // Local Variables:"}, {"sha": "6fbe44737d1840d15dfba89548a2f2d693969e53", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9", "patch": "@@ -397,18 +397,6 @@ fn test_int_from_str_overflow() {\n     assert!((i64::from_str(~\"-9223372036854775809\").is_none()));\n }\n \n-#[test]\n-pub fn test_num() {\n-    let ten: T = num::cast(10);\n-    let two: T = num::cast(2);\n-\n-    assert!((ten.add(&two)    == num::cast(12)));\n-    assert!((ten.sub(&two)    == num::cast(8)));\n-    assert!((ten.mul(&two)    == num::cast(20)));\n-    assert!((ten.div(&two)    == num::cast(5)));\n-    assert!((ten.modulo(&two) == num::cast(0)));\n-}\n-\n #[test]\n pub fn test_ranges() {\n     let mut l = ~[];"}, {"sha": "fc81393693c871f4548875242c65d163fe37f4a1", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9", "patch": "@@ -202,6 +202,35 @@ pub fn pow_with_uint<T:NumCast+One+Zero+Copy+Div<T,T>+Mul<T,T>>(\n     total\n }\n \n+#[cfg(test)]\n+fn test_num<T:Num + NumCast>(ten: T, two: T) {\n+    assert!(ten.add(&two)    == cast(12));\n+    assert!(ten.sub(&two)    == cast(8));\n+    assert!(ten.mul(&two)    == cast(20));\n+    assert!(ten.div(&two)    == cast(5));\n+    assert!(ten.modulo(&two) == cast(0));\n+\n+    assert!(ten.add(&two)    == ten + two);\n+    assert!(ten.sub(&two)    == ten - two);\n+    assert!(ten.mul(&two)    == ten * two);\n+    assert!(ten.div(&two)    == ten / two);\n+    assert!(ten.modulo(&two) == ten % two);\n+}\n+\n+#[test] fn test_u8_num()    { test_num(10u8,  2u8)  }\n+#[test] fn test_u16_num()   { test_num(10u16, 2u16) }\n+#[test] fn test_u32_num()   { test_num(10u32, 2u32) }\n+#[test] fn test_u64_num()   { test_num(10u64, 2u64) }\n+#[test] fn test_uint_num()  { test_num(10u,   2u)   }\n+#[test] fn test_i8_num()    { test_num(10i8,  2i8)  }\n+#[test] fn test_i16_num()   { test_num(10i16, 2i16) }\n+#[test] fn test_i32_num()   { test_num(10i32, 2i32) }\n+#[test] fn test_i64_num()   { test_num(10i64, 2i64) }\n+#[test] fn test_int_num()   { test_num(10i,   2i)   }\n+#[test] fn test_f32_num()   { test_num(10f32, 2f32) }\n+#[test] fn test_f64_num()   { test_num(10f64, 2f64) }\n+#[test] fn test_float_num() { test_num(10f,   2f)   }\n+\n macro_rules! test_cast_20(\n     ($_20:expr) => ({\n         let _20 = $_20;\n@@ -263,26 +292,3 @@ macro_rules! test_cast_20(\n #[test] fn test_f32_cast()   { test_cast_20!(20f32) }\n #[test] fn test_f64_cast()   { test_cast_20!(20f64) }\n #[test] fn test_float_cast() { test_cast_20!(20f)   }\n-\n-#[test]\n-fn test_generic_cast() {\n-    use ops::Add;\n-\n-    fn add_2<T: Add<T,T> + NumCast>(n: T) -> T {\n-        n + cast(2)\n-    }\n-\n-    assert!(add_2(1u)   == 3u);\n-    assert!(add_2(1u8)  == 3u8);\n-    assert!(add_2(1u16) == 3u16);\n-    assert!(add_2(1u32) == 3u32);\n-    assert!(add_2(1u64) == 3u64);\n-    assert!(add_2(1i)   == 3i);\n-    assert!(add_2(1i8)  == 3i8);\n-    assert!(add_2(1i16) == 3i16);\n-    assert!(add_2(1i32) == 3i32);\n-    assert!(add_2(1i64) == 3i64);\n-    assert!(add_2(1f)   == 3f);\n-    assert!(add_2(1f32) == 3f32);\n-    assert!(add_2(1f64) == 3f64);\n-}"}, {"sha": "1cbdabafdab9693c88c77ce506b315e427ed8271", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=c4685477e0771ee21afa6b93ea0d4ca2c7f6abd9", "patch": "@@ -411,18 +411,6 @@ pub fn test_ranges() {\n     }\n }\n \n-#[test]\n-pub fn test_num() {\n-    let ten: T = num::cast(10);\n-    let two: T = num::cast(2);\n-\n-    assert!((ten.add(&two)    == num::cast(12)));\n-    assert!((ten.sub(&two)    == num::cast(8)));\n-    assert!((ten.mul(&two)    == num::cast(20)));\n-    assert!((ten.div(&two)    == num::cast(5)));\n-    assert!((ten.modulo(&two) == num::cast(0)));\n-}\n-\n #[test]\n #[should_fail]\n #[ignore(cfg(windows))]"}]}