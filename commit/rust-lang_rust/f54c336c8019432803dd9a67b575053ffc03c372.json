{"sha": "f54c336c8019432803dd9a67b575053ffc03c372", "node_id": "C_kwDOAAsO6NoAKGY1NGMzMzZjODAxOTQzMjgwM2RkOWE2N2I1NzUwNTNmZmMwM2MzNzI", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-21T23:56:26Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-24T01:20:07Z"}, "message": "fix #103425, remove extra type error after missing semicolon error", "tree": {"sha": "bfd04f003289e9db7554086d392f0fa3ac051f4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfd04f003289e9db7554086d392f0fa3ac051f4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f54c336c8019432803dd9a67b575053ffc03c372", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f54c336c8019432803dd9a67b575053ffc03c372", "html_url": "https://github.com/rust-lang/rust/commit/f54c336c8019432803dd9a67b575053ffc03c372", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f54c336c8019432803dd9a67b575053ffc03c372/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9be2f35a4c1ed1b04aa4a6945b64763f599259ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/9be2f35a4c1ed1b04aa4a6945b64763f599259ff", "html_url": "https://github.com/rust-lang/rust/commit/9be2f35a4c1ed1b04aa4a6945b64763f599259ff"}], "stats": {"total": 109, "additions": 80, "deletions": 29}, "files": [{"sha": "12753c6785c9aa5ecb2c5a9a78946c3b382cec47", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/f54c336c8019432803dd9a67b575053ffc03c372/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54c336c8019432803dd9a67b575053ffc03c372/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=f54c336c8019432803dd9a67b575053ffc03c372", "patch": "@@ -553,39 +553,46 @@ impl<'a> Parser<'a> {\n         match stmt.kind {\n             // Expression without semicolon.\n             StmtKind::Expr(ref mut expr)\n-                if self.token != token::Eof && classify::expr_requires_semi_to_be_stmt(expr) =>\n-            {\n+                if self.token != token::Eof && classify::expr_requires_semi_to_be_stmt(expr) => {\n                 // Just check for errors and recover; do not eat semicolon yet.\n-                if let Err(mut e) =\n-                    self.expect_one_of(&[], &[token::Semi, token::CloseDelim(Delimiter::Brace)])\n-                {\n-                    if let TokenKind::DocComment(..) = self.token.kind {\n-                        if let Ok(snippet) = self.span_to_snippet(self.token.span) {\n-                            let sp = self.token.span;\n-                            let marker = &snippet[..3];\n-                            let (comment_marker, doc_comment_marker) = marker.split_at(2);\n-\n-                            e.span_suggestion(\n-                                sp.with_hi(sp.lo() + BytePos(marker.len() as u32)),\n-                                &format!(\n-                                    \"add a space before `{}` to use a regular comment\",\n-                                    doc_comment_marker,\n-                                ),\n-                                format!(\"{} {}\", comment_marker, doc_comment_marker),\n-                                Applicability::MaybeIncorrect,\n-                            );\n+                // `expect_one_of` returns PResult<'a, bool /* recovered */>\n+                let replace_with_err =\n+                    match self.expect_one_of(&[], &[token::Semi, token::CloseDelim(Delimiter::Brace)]) {\n+                    // Recover from parser, skip type error to avoid extra errors.\n+                    Ok(true) => true,\n+                    Err(mut e) => {\n+                        if let TokenKind::DocComment(..) = self.token.kind &&\n+                            let Ok(snippet) = self.span_to_snippet(self.token.span) {\n+                                let sp = self.token.span;\n+                                let marker = &snippet[..3];\n+                                let (comment_marker, doc_comment_marker) = marker.split_at(2);\n+\n+                                e.span_suggestion(\n+                                    sp.with_hi(sp.lo() + BytePos(marker.len() as u32)),\n+                                    &format!(\n+                                        \"add a space before `{}` to use a regular comment\",\n+                                        doc_comment_marker,\n+                                    ),\n+                                    format!(\"{} {}\", comment_marker, doc_comment_marker),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n                         }\n-                    }\n-                    if let Err(mut e) =\n-                        self.check_mistyped_turbofish_with_multiple_type_params(e, expr)\n-                    {\n-                        if recover.no() {\n-                            return Err(e);\n+\n+                        if let Err(mut e) =\n+                            self.check_mistyped_turbofish_with_multiple_type_params(e, expr)\n+                        {\n+                            if recover.no() {\n+                                return Err(e);\n+                            }\n+                            e.emit();\n+                            self.recover_stmt();\n                         }\n-                        e.emit();\n-                        self.recover_stmt();\n+                        true\n                     }\n-                    // Don't complain about type errors in body tail after parse error (#57383).\n+                    _ => false\n+                };\n+                if replace_with_err {\n+                    // We already emitted an error, so don't emit another type error\n                     let sp = expr.span.to(self.prev_token.span);\n                     *expr = self.mk_expr_err(sp);\n                 }"}, {"sha": "c2f8123ca4e6770aec5010a73de8c5b77863a304", "filename": "src/test/ui/parser/issue-103425.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f54c336c8019432803dd9a67b575053ffc03c372/src%2Ftest%2Fui%2Fparser%2Fissue-103425.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f54c336c8019432803dd9a67b575053ffc03c372/src%2Ftest%2Fui%2Fparser%2Fissue-103425.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103425.rs?ref=f54c336c8019432803dd9a67b575053ffc03c372", "patch": "@@ -0,0 +1,15 @@\n+fn f() -> f32 {\n+    3\n+    //~^ ERROR expected `;`\n+    5.0\n+}\n+\n+fn k() -> f32 {\n+    2_u32\n+    //~^ ERROR expected `;`\n+    3_i8\n+    //~^ ERROR expected `;`\n+    5.0\n+}\n+\n+fn main() {}"}, {"sha": "0efe3e3ca7117549a64beafff40eebebc0351d40", "filename": "src/test/ui/parser/issue-103425.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f54c336c8019432803dd9a67b575053ffc03c372/src%2Ftest%2Fui%2Fparser%2Fissue-103425.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f54c336c8019432803dd9a67b575053ffc03c372/src%2Ftest%2Fui%2Fparser%2Fissue-103425.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103425.stderr?ref=f54c336c8019432803dd9a67b575053ffc03c372", "patch": "@@ -0,0 +1,29 @@\n+error: expected `;`, found `5.0`\n+  --> $DIR/issue-103425.rs:2:6\n+   |\n+LL |     3\n+   |      ^ help: add `;` here\n+LL |\n+LL |     5.0\n+   |     --- unexpected token\n+\n+error: expected `;`, found `3_i8`\n+  --> $DIR/issue-103425.rs:8:10\n+   |\n+LL |     2_u32\n+   |          ^ help: add `;` here\n+LL |\n+LL |     3_i8\n+   |     ---- unexpected token\n+\n+error: expected `;`, found `5.0`\n+  --> $DIR/issue-103425.rs:10:9\n+   |\n+LL |     3_i8\n+   |         ^ help: add `;` here\n+LL |\n+LL |     5.0\n+   |     --- unexpected token\n+\n+error: aborting due to 3 previous errors\n+"}]}