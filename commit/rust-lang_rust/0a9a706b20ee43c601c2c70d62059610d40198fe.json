{"sha": "0a9a706b20ee43c601c2c70d62059610d40198fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhOWE3MDZiMjBlZTQzYzYwMWMyYzcwZDYyMDU5NjEwZDQwMTk4ZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-28T16:51:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-28T16:51:32Z"}, "message": "auto merge of #10089 : pythonesque/rust/issue-7718, r=catamorphism\n\nSeems pretty straightforward, but please let me know if I'm doing something wrong or the test needs to be rewritten.", "tree": {"sha": "ff772f91f86491154e37ff81a53308384b6c1c95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff772f91f86491154e37ff81a53308384b6c1c95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a9a706b20ee43c601c2c70d62059610d40198fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a9a706b20ee43c601c2c70d62059610d40198fe", "html_url": "https://github.com/rust-lang/rust/commit/0a9a706b20ee43c601c2c70d62059610d40198fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a9a706b20ee43c601c2c70d62059610d40198fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "560d9999bc79f26fdcc890f9359c293ef20e93d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/560d9999bc79f26fdcc890f9359c293ef20e93d4", "html_url": "https://github.com/rust-lang/rust/commit/560d9999bc79f26fdcc890f9359c293ef20e93d4"}, {"sha": "a239c0ed66c511886ad0e2acf5b550d25b37427c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a239c0ed66c511886ad0e2acf5b550d25b37427c", "html_url": "https://github.com/rust-lang/rust/commit/a239c0ed66c511886ad0e2acf5b550d25b37427c"}], "stats": {"total": 65, "additions": 42, "deletions": 23}, "files": [{"sha": "8aba36370d0b8888d427efce708dc7e4eeb846af", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=0a9a706b20ee43c601c2c70d62059610d40198fe", "patch": "@@ -757,7 +757,9 @@ pub fn build_session_options(binary: @str,\n \n     let statik = debugging_opts & session::statik != 0;\n \n-    let addl_lib_search_paths = matches.opt_strs(\"L\").map(|s| Path::new(s.as_slice()));\n+    let addl_lib_search_paths = matches.opt_strs(\"L\").map(|s| {\n+      Path::new(s.as_slice())\n+    }).move_iter().collect();\n     let linker = matches.opt_str(\"linker\");\n     let linker_args = matches.opt_strs(\"link-args\").flat_map( |a| {\n         a.split_iter(' ').map(|arg| arg.to_owned()).collect()"}, {"sha": "8c1693935c72d561fc53be6ab54c4c7002c59d67", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=0a9a706b20ee43c601c2c70d62059610d40198fe", "patch": "@@ -29,7 +29,7 @@ use syntax::parse::token;\n use syntax;\n \n use std::int;\n-use std::hashmap::HashMap;\n+use std::hashmap::{HashMap,HashSet};\n \n #[deriving(Eq)]\n pub enum Os { OsWin32, OsMacos, OsLinux, OsAndroid, OsFreebsd, }\n@@ -158,9 +158,9 @@ pub struct options {\n     save_temps: bool,\n     jit: bool,\n     output_type: back::link::output_type,\n-    addl_lib_search_paths: @mut ~[Path], // This is mutable for rustpkg, which\n-                                         // updates search paths based on the\n-                                         // parsed code\n+    addl_lib_search_paths: @mut HashSet<Path>, // This is mutable for rustpkg, which\n+                                               // updates search paths based on the\n+                                               // parsed code\n     linker: Option<~str>,\n     linker_args: ~[~str],\n     maybe_sysroot: Option<@Path>,\n@@ -366,7 +366,7 @@ pub fn basic_options() -> @options {\n         save_temps: false,\n         jit: false,\n         output_type: link::output_type_exe,\n-        addl_lib_search_paths: @mut ~[],\n+        addl_lib_search_paths: @mut HashSet::new(),\n         linker: None,\n         linker_args: ~[],\n         maybe_sysroot: None,"}, {"sha": "94dfc006076f98c2a0436c103fd2c503128e2e55", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=0a9a706b20ee43c601c2c70d62059610d40198fe", "patch": "@@ -40,11 +40,11 @@ pub trait FileSearch {\n \n pub fn mk_filesearch(maybe_sysroot: &Option<@Path>,\n                      target_triple: &str,\n-                     addl_lib_search_paths: @mut ~[Path])\n+                     addl_lib_search_paths: @mut HashSet<Path>)\n                   -> @FileSearch {\n     struct FileSearchImpl {\n         sysroot: @Path,\n-        addl_lib_search_paths: @mut ~[Path],\n+        addl_lib_search_paths: @mut HashSet<Path>,\n         target_triple: ~str\n     }\n     impl FileSearch for FileSearchImpl {"}, {"sha": "0a30978db2b812325d1427b51d414b8acfb02069", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=0a9a706b20ee43c601c2c70d62059610d40198fe", "patch": "@@ -20,7 +20,7 @@ use syntax;\n \n use std::os;\n use std::local_data;\n-use std::hashmap::HashMap;\n+use std::hashmap::{HashMap,HashSet};\n \n use visit_ast::RustdocVisitor;\n use clean;\n@@ -39,7 +39,7 @@ pub struct CrateAnalysis {\n \n /// Parses, resolves, and typechecks the given crate\n fn get_ast_and_resolve(cpath: &Path,\n-                       libs: ~[Path]) -> (DocContext, CrateAnalysis) {\n+                       libs: HashSet<Path>) -> (DocContext, CrateAnalysis) {\n     use syntax::codemap::dummy_spanned;\n     use rustc::driver::driver::{file_input, build_configuration,\n                                 phase_1_parse_input,\n@@ -89,7 +89,7 @@ fn get_ast_and_resolve(cpath: &Path,\n             CrateAnalysis { reexports: reexports, exported_items: exported_items });\n }\n \n-pub fn run_core (libs: ~[Path], path: &Path) -> (clean::Crate, CrateAnalysis) {\n+pub fn run_core (libs: HashSet<Path>, path: &Path) -> (clean::Crate, CrateAnalysis) {\n     let (ctxt, analysis) = get_ast_and_resolve(path, libs);\n     let ctxt = @ctxt;\n     debug!(\"defmap:\");"}, {"sha": "770d535c6ea9e85b9d346c163ff2cda6c3788141", "filename": "src/librustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Flibrustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Flibrustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rs?ref=0a9a706b20ee43c601c2c70d62059610d40198fe", "patch": "@@ -198,7 +198,7 @@ fn rust_input(cratefile: &str, matches: &getopts::Matches) -> Output {\n     info!(\"starting to run rustc\");\n     let (crate, analysis) = do std::task::try {\n         let cr = cr.take();\n-        core::run_core(libs.take(), &cr)\n+        core::run_core(libs.take().move_iter().collect(), &cr)\n     }.unwrap();\n     info!(\"finished with rustc\");\n     local_data::set(analysiskey, analysis);"}, {"sha": "77fe2ae8f704bf43fb1806e4c431f507582df869", "filename": "src/librustpkg/context.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Flibrustpkg%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Flibrustpkg%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fcontext.rs?ref=0a9a706b20ee43c601c2c70d62059610d40198fe", "patch": "@@ -10,10 +10,12 @@\n \n // Context data structure used by rustpkg\n \n-use std::os;\n use extra::workcache;\n use rustc::driver::session::{OptLevel, No};\n \n+use std::hashmap::HashSet;\n+use std::os;\n+\n #[deriving(Clone)]\n pub struct Context {\n     // Config strings that the user passed in with --cfg\n@@ -60,7 +62,7 @@ impl BuildContext {\n         self.context.add_library_path(p);\n     }\n \n-    pub fn additional_library_paths(&self) -> ~[Path] {\n+    pub fn additional_library_paths(&self) -> HashSet<Path> {\n         self.context.rustc_flags.additional_library_paths.clone()\n     }\n }\n@@ -96,7 +98,7 @@ pub struct RustcFlags {\n     target_cpu: Option<~str>,\n     // Additional library directories, which get passed with the -L flag\n     // This can't be set with a rustpkg flag, only from package scripts\n-    additional_library_paths: ~[Path],\n+    additional_library_paths: HashSet<Path>,\n     // Any -Z features\n     experimental_features: Option<~[~str]>\n }\n@@ -163,7 +165,7 @@ impl Context {\n     }\n \n     pub fn add_library_path(&mut self, p: Path) {\n-        self.rustc_flags.additional_library_paths.push(p);\n+        self.rustc_flags.additional_library_paths.insert(p);\n     }\n }\n \n@@ -227,7 +229,7 @@ impl RustcFlags {\n             save_temps: false,\n             target: None,\n             target_cpu: None,\n-            additional_library_paths: ~[],\n+            additional_library_paths: HashSet::new(),\n             experimental_features: None\n         }\n     }"}, {"sha": "1711dc992357cffb1862172f3e8dce0a0b13ee58", "filename": "src/librustpkg/rustpkg.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Flibrustpkg%2Frustpkg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Flibrustpkg%2Frustpkg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rs?ref=0a9a706b20ee43c601c2c70d62059610d40198fe", "patch": "@@ -25,6 +25,7 @@ extern mod rustc;\n extern mod syntax;\n \n use std::{os, result, run, str, task};\n+use std::hashmap::HashSet;\n pub use std::path::Path;\n \n use extra::workcache;\n@@ -841,7 +842,8 @@ pub fn main_args(args: &[~str]) -> int {\n         save_temps: save_temps,\n         target: target,\n         target_cpu: target_cpu,\n-        additional_library_paths: ~[], // No way to set this from the rustpkg command line\n+        additional_library_paths:\n+            HashSet::new(), // No way to set this from the rustpkg command line\n         experimental_features: experimental_features\n     };\n "}, {"sha": "026f443ec792550ca48ab4832a6bfd8478f44d46", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=0a9a706b20ee43c601c2c70d62059610d40198fe", "patch": "@@ -285,11 +285,7 @@ pub fn compile_input(context: &BuildContext,\n                                       debug!(\"a dependency: {}\", p.display());\n                                       // Pass the directory containing a dependency\n                                       // as an additional lib search path\n-                                      if !addl_lib_search_paths.contains(&p) {\n-                                          // Might be inefficient, but this set probably\n-                                          // won't get too large -- tjc\n-                                          addl_lib_search_paths.push(p);\n-                                      }\n+                                      addl_lib_search_paths.insert(p);\n                                   });\n \n     // Inject the link attributes so we get the right package name and version"}, {"sha": "4eaae8b0ef4a1071f0118671ea90d8e8ef3b3bc4", "filename": "src/test/run-pass/duplicated-external-mods.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Ftest%2Frun-pass%2Fduplicated-external-mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a9a706b20ee43c601c2c70d62059610d40198fe/src%2Ftest%2Frun-pass%2Fduplicated-external-mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fduplicated-external-mods.rs?ref=0a9a706b20ee43c601c2c70d62059610d40198fe", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+// aux-build:anon-extern-mod-cross-crate-1.rs\n+// aux-build:anon-extern-mod-cross-crate-1.rs\n+extern mod anonexternmod;\n+\n+pub fn main() { }\n+"}]}