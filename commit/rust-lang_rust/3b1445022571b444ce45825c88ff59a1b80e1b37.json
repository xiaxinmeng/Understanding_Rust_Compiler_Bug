{"sha": "3b1445022571b444ce45825c88ff59a1b80e1b37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMTQ0NTAyMjU3MWI0NDRjZTQ1ODI1Yzg4ZmY1OWExYjgwZTFiMzc=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-09-11T16:55:05Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-09-25T02:09:43Z"}, "message": "Added tests.", "tree": {"sha": "30d384c9913fb3a5a60ae0125bef3f6bbee0cab2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30d384c9913fb3a5a60ae0125bef3f6bbee0cab2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b1445022571b444ce45825c88ff59a1b80e1b37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1445022571b444ce45825c88ff59a1b80e1b37", "html_url": "https://github.com/rust-lang/rust/commit/3b1445022571b444ce45825c88ff59a1b80e1b37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b1445022571b444ce45825c88ff59a1b80e1b37/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d5de0b1f804b55bd6043521de34705c737779d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5de0b1f804b55bd6043521de34705c737779d1", "html_url": "https://github.com/rust-lang/rust/commit/8d5de0b1f804b55bd6043521de34705c737779d1"}], "stats": {"total": 171, "additions": 170, "deletions": 1}, "files": [{"sha": "631967c3f08b0edf758e0c90e895feee0927a60f", "filename": "src/test/run-pass/impl-trait-in-bindings.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3b1445022571b444ce45825c88ff59a1b80e1b37/src%2Ftest%2Frun-pass%2Fimpl-trait-in-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1445022571b444ce45825c88ff59a1b80e1b37/src%2Ftest%2Frun-pass%2Fimpl-trait-in-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait-in-bindings.rs?ref=3b1445022571b444ce45825c88ff59a1b80e1b37", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(impl_trait_in_bindings)]\n+\n+use std::fmt::Debug;\n+\n+const FOO: impl Debug + Clone + PartialEq<i32> = 42;\n+\n+static BAR: impl Debug + Clone + PartialEq<i32> = 42;\n+\n+fn a<T: Clone>(x: T) {\n+    let y: impl Clone = x;\n+    let _ = y.clone();\n+}\n+\n+fn b<T: Clone>(x: T) {\n+    let f = move || {\n+        let y: impl Clone = x;\n+        let _ = y.clone();\n+    };\n+    f();\n+}\n+\n+trait Foo<T: Clone> {\n+    fn a(x: T) {\n+        let y: impl Clone = x;\n+        let _ = y.clone();\n+    }\n+}\n+\n+impl<T: Clone> Foo<T> for i32 {\n+    fn a(x: T) {\n+        let y: impl Clone = x;\n+        let _ = y.clone();\n+    }\n+}\n+\n+fn main() {\n+    let foo: impl Debug + Clone + PartialEq<i32> = 42;\n+\n+    assert_eq!(FOO.clone(), 42);\n+    assert_eq!(BAR.clone(), 42);\n+    assert_eq!(foo.clone(), 42);\n+\n+    a(42);\n+    b(42);\n+    i32::a(42);\n+}"}, {"sha": "88b7a52af7fd36d15715543da012c0ec2e6b8bb7", "filename": "src/test/ui/impl-trait/bindings-opaque.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3b1445022571b444ce45825c88ff59a1b80e1b37/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1445022571b444ce45825c88ff59a1b80e1b37/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.rs?ref=3b1445022571b444ce45825c88ff59a1b80e1b37", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(impl_trait_in_bindings)]\n+\n+const FOO: impl Copy = 42;\n+\n+static BAR: impl Copy = 42;\n+\n+fn main() {\n+    let foo: impl Copy = 42;\n+\n+    let _ = FOO.count_ones();\n+    let _ = BAR.count_ones();\n+    let _ = foo.count_ones();\n+}"}, {"sha": "00358ee502e8686d6bf1c5481135870f3fbdefa0", "filename": "src/test/ui/impl-trait/bindings-opaque.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3b1445022571b444ce45825c88ff59a1b80e1b37/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b1445022571b444ce45825c88ff59a1b80e1b37/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings-opaque.stderr?ref=3b1445022571b444ce45825c88ff59a1b80e1b37", "patch": "@@ -0,0 +1,21 @@\n+error[E0599]: no method named `count_ones` found for type `impl std::marker::Copy` in the current scope\n+  --> $DIR/bindings-opaque.rs:20:17\n+   |\n+LL |     let _ = FOO.count_ones();\n+   |                 ^^^^^^^^^^\n+\n+error[E0599]: no method named `count_ones` found for type `impl std::marker::Copy` in the current scope\n+  --> $DIR/bindings-opaque.rs:21:17\n+   |\n+LL |     let _ = BAR.count_ones();\n+   |                 ^^^^^^^^^^\n+\n+error[E0599]: no method named `count_ones` found for type `impl std::marker::Copy` in the current scope\n+  --> $DIR/bindings-opaque.rs:22:17\n+   |\n+LL |     let _ = foo.count_ones();\n+   |                 ^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "571571aa75141b1b3723be78d78eb8d58c2dc3a0", "filename": "src/test/ui/impl-trait/bindings.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3b1445022571b444ce45825c88ff59a1b80e1b37/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1445022571b444ce45825c88ff59a1b80e1b37/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.rs?ref=3b1445022571b444ce45825c88ff59a1b80e1b37", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(impl_trait_in_bindings)]\n+\n+fn a<T: Clone>(x: T) {\n+    const foo: impl Clone = x;\n+}\n+\n+fn b<T: Clone>(x: T) {\n+    let _ = move || {\n+        const foo: impl Clone = x;\n+    };\n+}\n+\n+trait Foo<T: Clone> {\n+    fn a(x: T) {\n+        const foo: impl Clone = x;\n+    }\n+}\n+\n+impl<T: Clone> Foo<T> for i32 {\n+    fn a(x: T) {\n+        const foo: impl Clone = x;\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "70a736d2fd18a075d90df51d8d6bd66124d9d250", "filename": "src/test/ui/impl-trait/bindings.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3b1445022571b444ce45825c88ff59a1b80e1b37/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b1445022571b444ce45825c88ff59a1b80e1b37/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbindings.stderr?ref=3b1445022571b444ce45825c88ff59a1b80e1b37", "patch": "@@ -0,0 +1,35 @@\n+error[E0434]: can't capture dynamic environment in a fn item\n+  --> $DIR/bindings.rs:14:29\n+   |\n+LL |     const foo: impl Clone = x;\n+   |                             ^\n+   |\n+   = help: use the `|| { ... }` closure form instead\n+\n+error[E0434]: can't capture dynamic environment in a fn item\n+  --> $DIR/bindings.rs:19:33\n+   |\n+LL |         const foo: impl Clone = x;\n+   |                                 ^\n+   |\n+   = help: use the `|| { ... }` closure form instead\n+\n+error[E0434]: can't capture dynamic environment in a fn item\n+  --> $DIR/bindings.rs:25:33\n+   |\n+LL |         const foo: impl Clone = x;\n+   |                                 ^\n+   |\n+   = help: use the `|| { ... }` closure form instead\n+\n+error[E0434]: can't capture dynamic environment in a fn item\n+  --> $DIR/bindings.rs:31:33\n+   |\n+LL |         const foo: impl Clone = x;\n+   |                                 ^\n+   |\n+   = help: use the `|| { ... }` closure form instead\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0434`."}, {"sha": "4c5592c119c974c034e44812ec6f44baf222aafa", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b1445022571b444ce45825c88ff59a1b80e1b37/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1445022571b444ce45825c88ff59a1b80e1b37/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=3b1445022571b444ce45825c88ff59a1b80e1b37", "patch": "@@ -232,4 +232,3 @@ fn main() {\n     let _in_return_in_local_variable = || -> impl Fn() { || {} };\n     //~^ ERROR `impl Trait` not allowed outside of function and inherent method return types\n }\n-"}]}