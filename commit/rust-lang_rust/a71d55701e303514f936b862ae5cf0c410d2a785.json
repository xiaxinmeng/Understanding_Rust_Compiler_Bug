{"sha": "a71d55701e303514f936b862ae5cf0c410d2a785", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MWQ1NTcwMWUzMDM1MTRmOTM2Yjg2MmFlNWNmMGM0MTBkMmE3ODU=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-05-04T15:09:28Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-06-05T20:09:27Z"}, "message": "Addressed points raised in review.", "tree": {"sha": "75ce2639b20fd5e0254d03523e0bf859257fd177", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75ce2639b20fd5e0254d03523e0bf859257fd177"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a71d55701e303514f936b862ae5cf0c410d2a785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a71d55701e303514f936b862ae5cf0c410d2a785", "html_url": "https://github.com/rust-lang/rust/commit/a71d55701e303514f936b862ae5cf0c410d2a785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a71d55701e303514f936b862ae5cf0c410d2a785/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4310ba2c985c161260bbdfef5d92ceea552e9055", "url": "https://api.github.com/repos/rust-lang/rust/commits/4310ba2c985c161260bbdfef5d92ceea552e9055", "html_url": "https://github.com/rust-lang/rust/commit/4310ba2c985c161260bbdfef5d92ceea552e9055"}], "stats": {"total": 1112, "additions": 793, "deletions": 319}, "files": [{"sha": "a49744aa523a91cb801564e4a057161ff1d4dd2d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1382,12 +1382,12 @@ impl<'a> LoweringContext<'a> {\n                 if existential_desugaring {\n                     // Desugar `AssocTy: Bounds` into `AssocTy = impl Bounds`.\n \n-                    let impl_ty_node_id = self.sess.next_node_id();\n+                    let impl_trait_node_id = self.sess.next_node_id();\n                     let parent_def_index = self.current_hir_id_owner.last().unwrap().0;\n                     self.resolver.definitions().create_def_with_parent(\n                         parent_def_index,\n-                        impl_ty_node_id,\n-                        DefPathData::Misc,\n+                        impl_trait_node_id,\n+                        DefPathData::ImplTrait,\n                         DefIndexAddressSpace::High,\n                         Mark::root(),\n                         DUMMY_SP\n@@ -1397,7 +1397,7 @@ impl<'a> LoweringContext<'a> {\n                         this.lower_ty(\n                             &Ty {\n                                 id: this.sess.next_node_id(),\n-                                node: TyKind::ImplTrait(impl_ty_node_id, bounds.clone()),\n+                                node: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n                                 span: DUMMY_SP,\n                             },\n                             itctx,\n@@ -1410,9 +1410,8 @@ impl<'a> LoweringContext<'a> {\n                     let bounds = self.lower_param_bounds(bounds, itctx);\n \n                     let id = self.sess.next_node_id();\n-                    let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(id);\n                     P(hir::Ty {\n-                        hir_id,\n+                        hir_id: self.lower_node_id(id),\n                         node: hir::TyKind::AssocTyExistential(bounds),\n                         span: DUMMY_SP,\n                     })\n@@ -1423,7 +1422,7 @@ impl<'a> LoweringContext<'a> {\n         hir::TypeBinding {\n             hir_id: self.lower_node_id(c.id),\n             ident: c.ident,\n-            ty\n+            ty,\n             span: c.span,\n         }\n     }\n@@ -1647,7 +1646,7 @@ impl<'a> LoweringContext<'a> {\n         // Not tracking it makes lints in rustc and clippy very fragile, as\n         // frequently opened issues show.\n         let exist_ty_span = self.mark_span_with_reason(\n-            CompilerDesugaringKind::ExistentialReturnType,\n+            CompilerDesugaringKind::ExistentialType,\n             span,\n             None,\n         );"}, {"sha": "3edd75fb725dafbd8fa66855c43135641019bb96", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -276,7 +276,7 @@ pub enum DefPathData {\n     // they are treated specially by the `def_path` function.\n     /// The crate root (marker)\n     CrateRoot,\n-    // Catch-all for random DefId things like DUMMY_NODE_ID\n+    // Catch-all for random DefId things like `DUMMY_NODE_ID`\n     Misc,\n     // Different kinds of items and item-like things:\n     /// An impl\n@@ -298,9 +298,9 @@ pub enum DefPathData {\n     AnonConst,\n     /// An `impl Trait` type node\n     ImplTrait,\n-    /// GlobalMetaData identifies a piece of crate metadata that is global to\n-    /// a whole crate (as opposed to just one item). GlobalMetaData components\n-    /// are only supposed to show up right below the crate root.\n+    /// Identifies a piece of crate metadata that is global to a whole crate\n+    /// (as opposed to just one item). `GlobalMetaData` components are only\n+    /// supposed to show up right below the crate root.\n     GlobalMetaData(InternedString),\n }\n "}, {"sha": "978a5556d31bff1c9a838caa63c8b7e8904606cc", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -842,7 +842,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     /// Returns the nearest enclosing scope. A scope is roughly an item or block.\n-    pub fn get_enclosing_scope(&self, id: HirId) -> Option<HirId> {\n+    pub fn get_enclosing_scope(&self, hir_id: HirId) -> Option<HirId> {\n         self.walk_parent_nodes(hir_id, |node| match *node {\n             Node::Item(i) => {\n                 match i.node {\n@@ -880,14 +880,14 @@ impl<'hir> Map<'hir> {\n     }\n \n     /// Returns the defining scope for an existential type definition.\n-    pub fn get_defining_scope(&self, id: NodeId) -> Option<NodeId> {\n+    pub fn get_defining_scope(&self, id: HirId) -> Option<HirId> {\n         let mut scope = id;\n         loop {\n             scope = self.get_enclosing_scope(scope)?;\n-            if scope == CRATE_NODE_ID {\n-                return Some(CRATE_NODE_ID);\n+            if scope == CRATE_HIR_ID {\n+                return Some(CRATE_HIR_ID);\n             }\n-            match self.get(scope) {\n+            match self.get_by_hir_id(scope) {\n                 Node::Item(i) => {\n                     match i.node {\n                         ItemKind::Existential(ExistTy { impl_trait_fn: None, .. }) => {}"}, {"sha": "f884651e8be3213cbb78975b5042a64238e4e24b", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1780,7 +1780,7 @@ pub struct ImplItem {\n     pub span: Span,\n }\n \n-/// Represents different contents within `impl`s\n+/// Represents different contents within `impl`s.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub enum ImplItemKind {\n     /// An associated constant of the given type, set to the constant result\n@@ -1794,7 +1794,7 @@ pub enum ImplItemKind {\n     Existential(GenericBounds),\n }\n \n-// Bind a type to an associated type: `A=Foo`.\n+// Bind a type to an associated type (`A = Foo`).\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct TypeBinding {\n     pub hir_id: HirId,"}, {"sha": "0cdd9a863ccb846cc5b0a5cb6ce9908229f821e3", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -408,7 +408,7 @@ impl_stable_hash_for!(enum ::syntax_pos::hygiene::CompilerDesugaringKind {\n     Async,\n     Await,\n     QuestionMark,\n-    ExistentialReturnType,\n+    ExistentialType,\n     ForLoop,\n     TryBlock\n });"}, {"sha": "50f85ea7770a4529d11771b27b25669e761134b6", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -953,14 +953,13 @@ pub fn may_define_existential_type(\n     );\n \n     // Named existential types can be defined by any siblings or children of siblings.\n-    let scope_node_id = tcx.hir()\n-        .get_defining_scope(tcx.hir().hir_to_node_id(opaque_hir_id))\n+    let scope = tcx.hir()\n+        .get_defining_scope(opaque_hir_id)\n         .expect(\"could not get defining scope\");\n-    let scope_id = tcx.hir().node_to_hir_id(scope_node_id);\n     // We walk up the node tree until we hit the root or the scope of the opaque type.\n-    while hir_id != scope_id && hir_id != hir::CRATE_HIR_ID {\n+    while hir_id != scope && hir_id != hir::CRATE_HIR_ID {\n         hir_id = tcx.hir().get_parent_item(hir_id);\n     }\n     // Syntactically, we are allowed to define the concrete type if:\n-    hir_id == scope_id\n+    hir_id == scope\n }"}, {"sha": "f4f7456a97ad65b746e8eb41296340265e210348", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -716,23 +716,14 @@ impl<'a> ReplaceBodyWithLoop<'a> {\n                                     ast::GenericArg::Type(ty) => Some(ty),\n                                     _ => None,\n                                 });\n-                                let any_assoc_ty_bounds = data.constraints.iter().any(|c| {\n-                                    if let ast::AssocTyConstraintKind::Bound { .. } = c.kind {\n-                                        true\n-                                    } else {\n-                                        false\n-                                    }\n-                                });\n-                                any_assoc_ty_bounds ||\n                                 any_involves_impl_trait(types.into_iter()) ||\n-                                any_involves_impl_trait(data.constraints.iter().filter_map(|c| {\n-                                    if let ast::AssocTyConstraintKind::Equality { ref ty }\n-                                            = c.kind {\n-                                        Some(ty)\n-                                    } else {\n-                                        None\n+                                data.constraints.iter().any(|c| {\n+                                    match c.kind {\n+                                        ast::AssocTyConstraintKind::Bound { .. } => true,\n+                                        ast::AssocTyConstraintKind::Equality { ref ty } =>\n+                                            involves_impl_trait(ty),\n                                     }\n-                                }))\n+                                })\n                             },\n                             Some(&ast::GenericArgs::Parenthesized(ref data)) => {\n                                 any_involves_impl_trait(data.inputs.iter()) ||"}, {"sha": "18f3c0285c210238563eda858b33e17861246191", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -2533,7 +2533,7 @@ impl<'a> Resolver<'a> {\n                 self.with_current_self_item(item, |this| {\n                     this.with_generic_param_rib(HasGenericParams(generics, ItemRibKind), |this| {\n                         let item_def_id = this.definitions.local_def_id(item.id);\n-                        this.with_self_rib(Def::SelfTy(Some(item_def_id), None), |this| {\n+                        this.with_self_rib(Res::SelfTy(Some(item_def_id), None), |this| {\n                             visit::walk_item(this, item)\n                         })\n                     })"}, {"sha": "e37ad77b086fdb5626126fac9278368087d0321a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -764,7 +764,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         let mut dup_bindings = FxHashMap::default();\n         for binding in &assoc_bindings {\n             // Specify type to assert that error was already reported in `Err` case.\n-            let _ =\n+            let _: Result<_, ErrorReported> =\n                 self.add_predicates_for_ast_type_binding(\n                     trait_ref.hir_ref_id,\n                     poly_trait_ref,\n@@ -933,8 +933,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n     }\n \n     /// Translates the AST's notion of ty param bounds (which are an enum consisting of a newtyped\n-    /// `Ty` or a region) to ty's notion of ty param bounds, which can either be user-defined traits\n-    /// or the built-in trait `Send`.\n+    /// `Ty` or a region) to ty's notion of ty param bounds (which can either be user-defined traits\n+    /// or the built-in trait `Sized`).\n     pub fn compute_bounds(&self,\n         param_ty: Ty<'tcx>,\n         ast_bounds: &[hir::GenericBound],"}, {"sha": "2751cd0a37ec0f7fcbce879a32a18c31161d4429", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1650,24 +1650,23 @@ fn find_existential_constraints<'a, 'tcx>(\n         }\n     }\n \n-    let node_id = tcx.hir().as_local_node_id(def_id).unwrap();\n-    let scope_node_id = tcx.hir()\n-        .get_defining_scope(node_id)\n+    let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+    let scope = tcx.hir()\n+        .get_defining_scope(hir_id)\n         .expect(\"could not get defining scope\");\n-    let scope_id = tcx.hir().node_to_hir_id(scope_node_id);\n     let mut locator = ConstraintLocator {\n         def_id,\n         tcx,\n         found: None,\n     };\n \n-    debug!(\"find_existential_constraints: scope_id={:?}\", scope_id);\n+    debug!(\"find_existential_constraints: scope={:?}\", scope);\n \n-    if scope_id == hir::CRATE_HIR_ID {\n+    if scope == hir::CRATE_HIR_ID {\n         intravisit::walk_crate(&mut locator, tcx.hir().krate());\n     } else {\n-        debug!(\"find_existential_constraints: scope={:?}\", tcx.hir().get_by_hir_id(scope_id));\n-        match tcx.hir().get_by_hir_id(scope_id) {\n+        debug!(\"find_existential_constraints: scope={:?}\", tcx.hir().get_by_hir_id(scope));\n+        match tcx.hir().get_by_hir_id(scope) {\n             Node::Item(ref it) => intravisit::walk_item(&mut locator, it),\n             Node::ImplItem(ref it) => intravisit::walk_impl_item(&mut locator, it),\n             Node::TraitItem(ref it) => intravisit::walk_trait_item(&mut locator, it),"}, {"sha": "af283e6c0bc6f086874e471290c06379d6de066a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -2445,7 +2445,7 @@ pub struct PolyTrait {\n \n /// A representation of a type suitable for hyperlinking purposes. Ideally, one can get the original\n /// type out of the AST/`TyCtxt` given one of these, if more information is needed. Most\n-/// importanntly, it does not preserve mutability or boxes.\n+/// importantly, it does not preserve mutability or boxes.\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Debug, Hash)]\n pub enum Type {\n     /// Structs/enums/traits (most that would be an `hir::TyKind::Path`)."}, {"sha": "b827416ab53c2523cb76352af134b79198d8a9df", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -714,7 +714,7 @@ pub enum CompilerDesugaringKind {\n     /// Desugaring of an `impl Trait` in return type position\n     /// to an `existential type Foo: Trait;` and replacing the\n     /// `impl Trait` with `Foo`.\n-    ExistentialReturnType,\n+    ExistentialType,\n     Async,\n     Await,\n     ForLoop,\n@@ -728,7 +728,7 @@ impl CompilerDesugaringKind {\n             CompilerDesugaringKind::Await => \"await\",\n             CompilerDesugaringKind::QuestionMark => \"?\",\n             CompilerDesugaringKind::TryBlock => \"try block\",\n-            CompilerDesugaringKind::ExistentialReturnType => \"existential type\",\n+            CompilerDesugaringKind::ExistentialType => \"existential type\",\n             CompilerDesugaringKind::ForLoop => \"for loop\",\n         })\n     }"}, {"sha": "db421e6973d0776a0f81cc5896c380aefac64445", "filename": "src/test/ui/associated-type-bounds/nested-lifetime-bounds.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fnested-lifetime-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fnested-lifetime-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fnested-lifetime-bounds.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -6,4 +6,3 @@ LL |     for<'a> <_2 as Iterator>::Item: for<'b> Lam<&'a &'b u8, App = _0>,\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0316`."}, {"sha": "c25f12d008703c997b0e191b48d05f5af4e304a6", "filename": "src/test/ui/associated-types/associated-types-path-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-2.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -49,7 +49,7 @@ error[E0308]: mismatched types\n    |\n LL |     let _: i32 = f2(2i32);\n    |                  ^^^^^^^^ expected i32, found u32\n-help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `u32` to `i32` or panic if it the converted value wouldn't fit\n    |\n LL |     let _: i32 = f2(2i32).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e881201ddfcc0a977cdb277b8ac6d0483fd23602", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut.stderr", "status": "modified", "additions": 91, "deletions": 13, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,5 +1,80 @@\n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut.rs:12:24\n+error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n+  --> $DIR/borrowck-closures-two-mut.rs:14:24\n+   |\n+LL |     let c1 = to_fn_mut(|| x = 4);\n+   |                        -- - previous borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| x = 5);\n+   |                        ^^ - borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+...\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n+  --> $DIR/borrowck-closures-two-mut.rs:26:24\n+   |\n+LL |     let c1 = to_fn_mut(|| set(&mut x));\n+   |                        --          - previous borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n+   |                        ^^          - borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+...\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n+  --> $DIR/borrowck-closures-two-mut.rs:34:24\n+   |\n+LL |     let c1 = to_fn_mut(|| x = 5);\n+   |                        -- - previous borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n+   |                        ^^          - borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+...\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n+  --> $DIR/borrowck-closures-two-mut.rs:42:24\n+   |\n+LL |     let c1 = to_fn_mut(|| x = 5);\n+   |                        -- - previous borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nested closure)\n+   |                        ^^                                  - borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+...\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time (Ast)\n+  --> $DIR/borrowck-closures-two-mut.rs:55:24\n+   |\n+LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n+   |                        --           - previous borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        first mutable borrow occurs here\n+LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n+   |                        ^^           - borrow occurs due to use of `x` in closure\n+   |                        |\n+   |                        second mutable borrow occurs here\n+...\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n+  --> $DIR/borrowck-closures-two-mut.rs:14:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 4);\n    |                        -- - first borrow occurs due to use of `x` in closure\n@@ -9,11 +84,12 @@ LL |     let c2 = to_fn_mut(|| x = 5);\n    |                        ^^ - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n+LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut.rs:23:24\n+error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n+  --> $DIR/borrowck-closures-two-mut.rs:26:24\n    |\n LL |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - first borrow occurs due to use of `x` in closure\n@@ -23,11 +99,12 @@ LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n+LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut.rs:30:24\n+error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n+  --> $DIR/borrowck-closures-two-mut.rs:34:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - first borrow occurs due to use of `x` in closure\n@@ -37,11 +114,12 @@ LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n+LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut.rs:37:24\n+error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n+  --> $DIR/borrowck-closures-two-mut.rs:42:24\n    |\n LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - first borrow occurs due to use of `x` in closure\n@@ -51,12 +129,12 @@ LL |     let c2 = to_fn_mut(|| { let _y = to_fn_mut(|| set(&mut x)); }); // (nes\n    |                        ^^                                  - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |\n+...\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n-error[E0499]: cannot borrow `x` as mutable more than once at a time\n-  --> $DIR/borrowck-closures-two-mut.rs:49:24\n+error[E0499]: cannot borrow `x` as mutable more than once at a time (Mir)\n+  --> $DIR/borrowck-closures-two-mut.rs:55:24\n    |\n LL |     let c1 = to_fn_mut(|| set(&mut *x.f));\n    |                        --           - first borrow occurs due to use of `x` in closure\n@@ -66,10 +144,10 @@ LL |     let c2 = to_fn_mut(|| set(&mut *x.f));\n    |                        ^^           - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |\n+...\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0499`."}, {"sha": "3618a7cb2cd39d75f38a20dcb3200cb5ac2d5999", "filename": "src/test/ui/borrowck/borrowck-reinit.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,5 +1,15 @@\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/borrowck-reinit.rs:6:16\n+error[E0382]: use of moved value: `x` (Ast)\n+  --> $DIR/borrowck-reinit.rs:8:16\n+   |\n+LL |     drop(x);\n+   |          - value moved here\n+LL |     let _ = (1,x);\n+   |                ^ value used here after move\n+   |\n+   = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `x` (Mir)\n+  --> $DIR/borrowck-reinit.rs:8:16\n    |\n LL |     let mut x = Box::new(0);\n    |         ----- move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -9,6 +19,6 @@ LL |     drop(x);\n LL |     let _ = (1,x);\n    |                ^ value used here after move\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "c291ed224eb3c632d6515e4adf60598aed1be88e", "filename": "src/test/ui/borrowck/borrowck-storage-dead.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,9 +1,15 @@\n-error[E0381]: use of possibly uninitialized variable: `x`\n-  --> $DIR/borrowck-storage-dead.rs:16:17\n+error[E0381]: use of possibly uninitialized variable: `x` (Ast)\n+  --> $DIR/borrowck-storage-dead.rs:18:17\n    |\n LL |         let _ = x + 1;\n    |                 ^ use of possibly uninitialized `x`\n \n-error: aborting due to previous error\n+error[E0381]: use of possibly uninitialized variable: `x` (Mir)\n+  --> $DIR/borrowck-storage-dead.rs:18:17\n+   |\n+LL |         let _ = x + 1;\n+   |                 ^ use of possibly uninitialized `x`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0381`."}, {"sha": "8b21e926666748956f607775049e4b676b61b50b", "filename": "src/test/ui/borrowck/immutable-arg.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fimmutable-arg.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,11 +1,19 @@\n-error[E0384]: cannot assign to immutable argument `_x`\n-  --> $DIR/immutable-arg.rs:2:5\n+error[E0384]: cannot assign twice to immutable variable `_x` (Ast)\n+  --> $DIR/immutable-arg.rs:4:5\n+   |\n+LL | fn foo(_x: u32) {\n+   |        -- first assignment to `_x`\n+LL |     _x = 4;\n+   |     ^^^^^^ cannot assign twice to immutable variable\n+\n+error[E0384]: cannot assign to immutable argument `_x` (Mir)\n+  --> $DIR/immutable-arg.rs:4:5\n    |\n LL | fn foo(_x: u32) {\n    |        -- help: make this binding mutable: `mut _x`\n LL |     _x = 4;\n    |     ^^^^^^ cannot assign to immutable argument\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0384`."}, {"sha": "fd4d318b5ddf1cea094b9bb9e73933e9febce6dc", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,11 +1,29 @@\n-error[E0382]: use of moved value\n-  --> $DIR/issue-41962.rs:5:21\n+error[E0382]: use of partially moved value: `maybe` (Ast)\n+  --> $DIR/issue-41962.rs:7:30\n+   |\n+LL |         if let Some(thing) = maybe {\n+   |                     -----    ^^^^^ value used here after move\n+   |                     |\n+   |                     value moved here\n+   |\n+   = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `(maybe as std::prelude::v1::Some).0` (Ast)\n+  --> $DIR/issue-41962.rs:7:21\n+   |\n+LL |         if let Some(thing) = maybe {\n+   |                     ^^^^^ value moved here in previous iteration of loop\n+   |\n+   = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value (Mir)\n+  --> $DIR/issue-41962.rs:7:21\n    |\n LL |         if let Some(thing) = maybe {\n    |                     ^^^^^ value moved here, in previous iteration of loop\n    |\n    = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "78f129e79ea24363b8123a97c23e0babd7772351", "filename": "src/test/ui/const-generics/const-param-before-other-params.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -4,17 +4,17 @@ warning: the feature `const_generics` is incomplete and may cause the compiler t\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n \n-error: lifetime parameters must be declared prior to const parameters\n+error: type parameters must be declared prior to const parameters\n   --> $DIR/const-param-before-other-params.rs:4:21\n    |\n-LL | fn bar<const X: (), 'a>(_: &'a ()) {\n-   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n+LL | fn foo<const X: (), T>(_: &T) {\n+   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`\n \n-error: type parameters must be declared prior to const parameters\n+error: lifetime parameters must be declared prior to const parameters\n   --> $DIR/const-param-before-other-params.rs:8:21\n    |\n-LL | fn foo<const X: (), T>(_: &T) {\n-   |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`\n+LL | fn bar<const X: (), 'a>(_: &'a ()) {\n+   |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f667de83b56d4dae87b780c6326089ce604a7b37", "filename": "src/test/ui/deprecation/deprecation-in-staged-api.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-staged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-staged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-in-staged-api.rs?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,8 +1,8 @@\n-// #[deprecated] can't be used in staged api\n+// #[deprecated] cannot be used in staged API\n \n #![feature(staged_api)]\n \n #![stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n \n #[deprecated]\n-fn main() { } //~ERROR `#[deprecated]` cannot be used in staged api\n+fn main() { } //~ ERROR `#[deprecated]` cannot be used in staged API"}, {"sha": "3d75251e15616212c218228ec86194506ec1c04e", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.rs?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -10,61 +10,62 @@ impl Tr1 for S1 { type As1 = S2; }\n \n trait _Tr3 {\n     type A: Iterator<Item: Copy>;\n-    //~^ ERROR associated type bounds are unstable (see issue #52662) [E0658]\n+    //~^ ERROR associated type bounds are unstable\n \n     type B: Iterator<Item: 'static>;\n-    //~^ ERROR associated type bounds are unstable (see issue #52662) [E0658]\n+    //~^ ERROR associated type bounds are unstable\n }\n \n struct _St1<T: Tr1<As1: Tr2>> {\n-//~^ ERROR associated type bounds are unstable (see issue #52662) [E0658]\n+//~^ ERROR associated type bounds are unstable\n     outest: T,\n     outer: T::As1,\n     inner: <T::As1 as Tr2>::As2,\n }\n \n enum _En1<T: Tr1<As1: Tr2>> {\n-//~^ ERROR associated type bounds are unstable (see issue #52662) [E0658]\n+//~^ ERROR associated type bounds are unstable\n     Outest(T),\n     Outer(T::As1),\n     Inner(<T::As1 as Tr2>::As2),\n }\n \n union _Un1<T: Tr1<As1: Tr2>> {\n-//~^ ERROR associated type bounds are unstable (see issue #52662) [E0658]\n+//~^ ERROR associated type bounds are unstable\n     outest: T,\n     outer: T::As1,\n     inner: <T::As1 as Tr2>::As2,\n }\n \n type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n-//~^ ERROR associated type bounds are unstable (see issue #52662) [E0658]\n+//~^ ERROR associated type bounds are unstable\n \n fn _apit(_: impl Tr1<As1: Copy>) {}\n-//~^ ERROR associated type bounds are unstable (see issue #52662) [E0658]\n+//~^ ERROR associated type bounds are unstable\n fn _apit_dyn(_: &dyn Tr1<As1: Copy>) {}\n-//~^ ERROR associated type bounds are unstable (see issue #52662) [E0658]\n+//~^ ERROR associated type bounds are unstable\n \n fn _rpit() -> impl Tr1<As1: Copy> { S1 }\n-//~^ ERROR associated type bounds are unstable (see issue #52662) [E0658]\n+//~^ ERROR associated type bounds are unstable\n+\n fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n-//~^ ERROR associated type bounds are unstable (see issue #52662) [E0658]\n+//~^ ERROR associated type bounds are unstable\n \n const _cdef: impl Tr1<As1: Copy> = S1;\n-//~^ ERROR associated type bounds are unstable (see issue #52662) [E0658]\n+//~^ ERROR associated type bounds are unstable\n //~| ERROR `impl Trait` not allowed outside of function and inherent method return types [E0562]\n // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n // const _cdef_dyn: &dyn Tr1<As1: Copy> = &S1;\n \n static _sdef: impl Tr1<As1: Copy> = S1;\n-//~^ ERROR associated type bounds are unstable (see issue #52662) [E0658]\n+//~^ ERROR associated type bounds are unstable\n //~| ERROR `impl Trait` not allowed outside of function and inherent method return types [E0562]\n // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n // static _sdef_dyn: &dyn Tr1<As1: Copy> = &S1;\n \n fn main() {\n     let _: impl Tr1<As1: Copy> = S1;\n-    //~^ ERROR associated type bounds are unstable (see issue #52662) [E0658]\n+    //~^ ERROR associated type bounds are unstable\n     //~| ERROR `impl Trait` not allowed outside of function and inherent method return types [E0562]\n     // FIXME: uncomment when `impl_trait_in_bindings` feature is fixed.\n     // let _: &dyn Tr1<As1: Copy> = &S1;"}, {"sha": "702f61262df69f0a02739b9d59fdbd3e694efd45", "filename": "src/test/ui/feature-gates/feature-gate-associated_type_bounds.stderr", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-associated_type_bounds.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,125 +1,138 @@\n-error[E0658]: associated type bounds are unstable (see issue #52662)\n+error[E0658]: associated type bounds are unstable\n   --> $DIR/feature-gate-associated_type_bounds.rs:12:22\n    |\n LL |     type A: Iterator<Item: Copy>;\n    |                      ^^^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n    = help: add #![feature(associated_type_bounds)] to the crate attributes to enable\n \n-error[E0658]: associated type bounds are unstable (see issue #52662)\n+error[E0658]: associated type bounds are unstable\n   --> $DIR/feature-gate-associated_type_bounds.rs:15:22\n    |\n LL |     type B: Iterator<Item: 'static>;\n    |                      ^^^^^^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n    = help: add #![feature(associated_type_bounds)] to the crate attributes to enable\n \n-error[E0658]: associated type bounds are unstable (see issue #52662)\n+error[E0658]: associated type bounds are unstable\n   --> $DIR/feature-gate-associated_type_bounds.rs:19:20\n    |\n LL | struct _St1<T: Tr1<As1: Tr2>> {\n    |                    ^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n    = help: add #![feature(associated_type_bounds)] to the crate attributes to enable\n \n-error[E0658]: associated type bounds are unstable (see issue #52662)\n+error[E0658]: associated type bounds are unstable\n   --> $DIR/feature-gate-associated_type_bounds.rs:26:18\n    |\n LL | enum _En1<T: Tr1<As1: Tr2>> {\n    |                  ^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n    = help: add #![feature(associated_type_bounds)] to the crate attributes to enable\n \n-error[E0658]: associated type bounds are unstable (see issue #52662)\n+error[E0658]: associated type bounds are unstable\n   --> $DIR/feature-gate-associated_type_bounds.rs:33:19\n    |\n LL | union _Un1<T: Tr1<As1: Tr2>> {\n    |                   ^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n    = help: add #![feature(associated_type_bounds)] to the crate attributes to enable\n \n-error[E0658]: associated type bounds are unstable (see issue #52662)\n+error[E0658]: associated type bounds are unstable\n   --> $DIR/feature-gate-associated_type_bounds.rs:40:37\n    |\n LL | type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n    |                                     ^^^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n    = help: add #![feature(associated_type_bounds)] to the crate attributes to enable\n \n-error[E0658]: associated type bounds are unstable (see issue #52662)\n+error[E0658]: associated type bounds are unstable\n   --> $DIR/feature-gate-associated_type_bounds.rs:43:22\n    |\n LL | fn _apit(_: impl Tr1<As1: Copy>) {}\n    |                      ^^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n    = help: add #![feature(associated_type_bounds)] to the crate attributes to enable\n \n-error[E0658]: associated type bounds are unstable (see issue #52662)\n+error[E0658]: associated type bounds are unstable\n   --> $DIR/feature-gate-associated_type_bounds.rs:45:26\n    |\n LL | fn _apit_dyn(_: &dyn Tr1<As1: Copy>) {}\n    |                          ^^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n    = help: add #![feature(associated_type_bounds)] to the crate attributes to enable\n \n-error[E0658]: associated type bounds are unstable (see issue #52662)\n+error[E0658]: associated type bounds are unstable\n   --> $DIR/feature-gate-associated_type_bounds.rs:48:24\n    |\n LL | fn _rpit() -> impl Tr1<As1: Copy> { S1 }\n    |                        ^^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n    = help: add #![feature(associated_type_bounds)] to the crate attributes to enable\n \n-error[E0658]: associated type bounds are unstable (see issue #52662)\n-  --> $DIR/feature-gate-associated_type_bounds.rs:50:31\n+error[E0658]: associated type bounds are unstable\n+  --> $DIR/feature-gate-associated_type_bounds.rs:51:31\n    |\n LL | fn _rpit_dyn() -> Box<dyn Tr1<As1: Copy>> { Box::new(S1) }\n    |                               ^^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n    = help: add #![feature(associated_type_bounds)] to the crate attributes to enable\n \n-error[E0658]: associated type bounds are unstable (see issue #52662)\n-  --> $DIR/feature-gate-associated_type_bounds.rs:53:23\n+error[E0658]: associated type bounds are unstable\n+  --> $DIR/feature-gate-associated_type_bounds.rs:54:23\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |                       ^^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n    = help: add #![feature(associated_type_bounds)] to the crate attributes to enable\n \n-error[E0658]: associated type bounds are unstable (see issue #52662)\n-  --> $DIR/feature-gate-associated_type_bounds.rs:59:24\n+error[E0658]: associated type bounds are unstable\n+  --> $DIR/feature-gate-associated_type_bounds.rs:60:24\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |                        ^^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n    = help: add #![feature(associated_type_bounds)] to the crate attributes to enable\n \n-error[E0658]: associated type bounds are unstable (see issue #52662)\n-  --> $DIR/feature-gate-associated_type_bounds.rs:66:21\n+error[E0658]: associated type bounds are unstable\n+  --> $DIR/feature-gate-associated_type_bounds.rs:67:21\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |                     ^^^^^^^^^\n    |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/52662\n    = help: add #![feature(associated_type_bounds)] to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:53:14\n+  --> $DIR/feature-gate-associated_type_bounds.rs:54:14\n    |\n LL | const _cdef: impl Tr1<As1: Copy> = S1;\n    |              ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(impl_trait_in_bindings)] to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:59:15\n+  --> $DIR/feature-gate-associated_type_bounds.rs:60:15\n    |\n LL | static _sdef: impl Tr1<As1: Copy> = S1;\n    |               ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(impl_trait_in_bindings)] to the crate attributes to enable\n \n error[E0562]: `impl Trait` not allowed outside of function and inherent method return types\n-  --> $DIR/feature-gate-associated_type_bounds.rs:66:12\n+  --> $DIR/feature-gate-associated_type_bounds.rs:67:12\n    |\n LL |     let _: impl Tr1<As1: Copy> = S1;\n    |            ^^^^^^^^^^^^^^^^^^^\n@@ -128,5 +141,5 @@ LL |     let _: impl Tr1<As1: Copy> = S1;\n \n error: aborting due to 16 previous errors\n \n-Some errors occurred: E0562, E0658.\n+Some errors have detailed explanations: E0562, E0658.\n For more information about an error, try `rustc --explain E0562`."}, {"sha": "56f425b7e70a0439d35756d8b0f05275329c8f1d", "filename": "src/test/ui/generator/yield-while-local-borrowed.stderr", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-local-borrowed.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,21 +1,39 @@\n-error[E0626]: borrow may still be in use when generator yields\n-  --> $DIR/yield-while-local-borrowed.rs:13:17\n+error[E0626]: borrow may still be in use when generator yields (Ast)\n+  --> $DIR/yield-while-local-borrowed.rs:15:22\n+   |\n+LL |         let a = &mut 3;\n+   |                      ^\n+...\n+LL |         yield();\n+   |         ------- possible yield occurs here\n+\n+error[E0626]: borrow may still be in use when generator yields (Ast)\n+  --> $DIR/yield-while-local-borrowed.rs:43:22\n+   |\n+LL |             let b = &a;\n+   |                      ^\n+...\n+LL |             yield();\n+   |             ------- possible yield occurs here\n+\n+error[E0626]: borrow may still be in use when generator yields (Mir)\n+  --> $DIR/yield-while-local-borrowed.rs:15:17\n    |\n LL |         let a = &mut 3;\n    |                 ^^^^^^\n-LL |\n+...\n LL |         yield();\n    |         ------- possible yield occurs here\n \n-error[E0626]: borrow may still be in use when generator yields\n-  --> $DIR/yield-while-local-borrowed.rs:40:21\n+error[E0626]: borrow may still be in use when generator yields (Mir)\n+  --> $DIR/yield-while-local-borrowed.rs:43:21\n    |\n LL |             let b = &a;\n    |                     ^^\n-LL |\n+...\n LL |             yield();\n    |             ------- possible yield occurs here\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0626`."}, {"sha": "9dafe1c24f1c254cee5845602ae36edd012c2bbd", "filename": "src/test/ui/indexing-requires-a-uint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Findexing-requires-a-uint.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n    |\n LL |     bar::<isize>(i);  // i should not be re-coerced back to an isize\n    |                  ^ expected isize, found usize\n-help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `usize` to `isize` or panic if it the converted value wouldn't fit\n    |\n LL |     bar::<isize>(i.try_into().unwrap());  // i should not be re-coerced back to an isize\n    |                  ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "b5b3f27f0e6cd886eda277685f189e85f80fda45", "filename": "src/test/ui/integer-literal-suffix-inference.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finteger-literal-suffix-inference.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(a16);\n    |           ^^^ expected i8, found i16\n-help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to `i8` or panic if it the converted value wouldn't fit\n    |\n LL |     id_i8(a16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(a32);\n    |           ^^^ expected i8, found i32\n-help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `i8` or panic if it the converted value wouldn't fit\n    |\n LL |     id_i8(a32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(a64);\n    |           ^^^ expected i8, found i64\n-help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to `i8` or panic if it the converted value wouldn't fit\n    |\n LL |     id_i8(a64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -42,7 +42,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i16(a32);\n    |            ^^^ expected i16, found i32\n-help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `i16` or panic if it the converted value wouldn't fit\n    |\n LL |     id_i16(a32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -52,7 +52,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i16(a64);\n    |            ^^^ expected i16, found i64\n-help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to `i16` or panic if it the converted value wouldn't fit\n    |\n LL |     id_i16(a64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -80,7 +80,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i32(a64);\n    |            ^^^ expected i32, found i64\n-help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to `i32` or panic if it the converted value wouldn't fit\n    |\n LL |     id_i32(a64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -117,7 +117,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(c16);\n    |           ^^^ expected i8, found i16\n-help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to `i8` or panic if it the converted value wouldn't fit\n    |\n LL |     id_i8(c16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -127,7 +127,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(c32);\n    |           ^^^ expected i8, found i32\n-help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `i8` or panic if it the converted value wouldn't fit\n    |\n LL |     id_i8(c32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -137,7 +137,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i8(c64);\n    |           ^^^ expected i8, found i64\n-help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to `i8` or panic if it the converted value wouldn't fit\n    |\n LL |     id_i8(c64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -156,7 +156,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i16(c32);\n    |            ^^^ expected i16, found i32\n-help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `i16` or panic if it the converted value wouldn't fit\n    |\n LL |     id_i16(c32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -166,7 +166,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i16(c64);\n    |            ^^^ expected i16, found i64\n-help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to `i16` or panic if it the converted value wouldn't fit\n    |\n LL |     id_i16(c64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -194,7 +194,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_i32(c64);\n    |            ^^^ expected i32, found i64\n-help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to `i32` or panic if it the converted value wouldn't fit\n    |\n LL |     id_i32(c64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -231,7 +231,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u8(b16);\n    |           ^^^ expected u8, found u16\n-help: you can convert an `u16` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `u16` to `u8` or panic if it the converted value wouldn't fit\n    |\n LL |     id_u8(b16.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -241,7 +241,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u8(b32);\n    |           ^^^ expected u8, found u32\n-help: you can convert an `u32` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `u32` to `u8` or panic if it the converted value wouldn't fit\n    |\n LL |     id_u8(b32.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -251,7 +251,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u8(b64);\n    |           ^^^ expected u8, found u64\n-help: you can convert an `u64` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `u64` to `u8` or panic if it the converted value wouldn't fit\n    |\n LL |     id_u8(b64.try_into().unwrap());\n    |           ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -270,7 +270,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u16(b32);\n    |            ^^^ expected u16, found u32\n-help: you can convert an `u32` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `u32` to `u16` or panic if it the converted value wouldn't fit\n    |\n LL |     id_u16(b32.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -280,7 +280,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u16(b64);\n    |            ^^^ expected u16, found u64\n-help: you can convert an `u64` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `u64` to `u16` or panic if it the converted value wouldn't fit\n    |\n LL |     id_u16(b64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -308,7 +308,7 @@ error[E0308]: mismatched types\n    |\n LL |     id_u32(b64);\n    |            ^^^ expected u32, found u64\n-help: you can convert an `u64` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `u64` to `u32` or panic if it the converted value wouldn't fit\n    |\n LL |     id_u32(b64.try_into().unwrap());\n    |            ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "b16b7a5b2cf0462e7384f64bdc0c237977f65092", "filename": "src/test/ui/issues/issue-13359.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13359.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo(1*(1 as isize));\n    |         ^^^^^^^^^^^^^^ expected i16, found isize\n-help: you can convert an `isize` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to `i16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo((1*(1 as isize)).try_into().unwrap());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n    |\n LL |     bar(1*(1 as usize));\n    |         ^^^^^^^^^^^^^^ expected u32, found usize\n-help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `usize` to `u32` or panic if it the converted value wouldn't fit\n    |\n LL |     bar((1*(1 as usize)).try_into().unwrap());\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "8dd9287ffec79030e60c6de8d20cc43f85d01f97", "filename": "src/test/ui/issues/issue-31910.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     X = Trait::Number,\n    |         ^^^^^^^^^^^^^ expected isize, found i32\n-help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `isize` or panic if it the converted value wouldn't fit\n    |\n LL |     X = Trait::Number.try_into().unwrap(),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "854e18003f330f77e7ea38579e365781d9abad70", "filename": "src/test/ui/issues/issue-45697-1.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fissues%2Fissue-45697-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fissues%2Fissue-45697-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45697-1.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,4 +1,12 @@\n-error[E0503]: cannot use `*y.pointer` because it was mutably borrowed\n+error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Ast)\n+  --> $DIR/issue-45697-1.rs:20:9\n+   |\n+LL |         let z = copy_borrowed_ptr(&mut y);\n+   |                                        - borrow of `*y.pointer` occurs here\n+LL |         *y.pointer += 1;\n+   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n+\n+error[E0503]: cannot use `*y.pointer` because it was mutably borrowed (Mir)\n   --> $DIR/issue-45697-1.rs:20:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n@@ -9,7 +17,7 @@ LL |         *y.pointer += 1;\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here\n \n-error[E0506]: cannot assign to `*y.pointer` because it is borrowed\n+error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Mir)\n   --> $DIR/issue-45697-1.rs:20:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n@@ -20,7 +28,7 @@ LL |         *y.pointer += 1;\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0503, E0506.\n For more information about an error, try `rustc --explain E0503`."}, {"sha": "01ae416b1cf140b93accb81cefce2cd3a1e3ba26", "filename": "src/test/ui/issues/issue-45697.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fissues%2Fissue-45697.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fissues%2Fissue-45697.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-45697.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,4 +1,12 @@\n-error[E0503]: cannot use `*y.pointer` because it was mutably borrowed\n+error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Ast)\n+  --> $DIR/issue-45697.rs:20:9\n+   |\n+LL |         let z = copy_borrowed_ptr(&mut y);\n+   |                                        - borrow of `*y.pointer` occurs here\n+LL |         *y.pointer += 1;\n+   |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n+\n+error[E0503]: cannot use `*y.pointer` because it was mutably borrowed (Mir)\n   --> $DIR/issue-45697.rs:20:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n@@ -9,7 +17,7 @@ LL |         *y.pointer += 1;\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here\n \n-error[E0506]: cannot assign to `*y.pointer` because it is borrowed\n+error[E0506]: cannot assign to `*y.pointer` because it is borrowed (Mir)\n   --> $DIR/issue-45697.rs:20:9\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n@@ -20,7 +28,7 @@ LL |         *y.pointer += 1;\n LL |         *z.pointer += 1;\n    |         --------------- borrow later used here\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0503, E0506.\n For more information about an error, try `rustc --explain E0503`."}, {"sha": "51026c9f2d834f660fb8b3acb4750af9e8967a0c", "filename": "src/test/ui/issues/issue-46471-1.stderr", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fissues%2Fissue-46471-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fissues%2Fissue-46471-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46471-1.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,5 +1,16 @@\n-error[E0597]: `z` does not live long enough\n-  --> $DIR/issue-46471-1.rs:4:9\n+error[E0597]: `z` does not live long enough (Ast)\n+  --> $DIR/issue-46471-1.rs:6:14\n+   |\n+LL |         &mut z\n+   |              ^ borrowed value does not live long enough\n+LL |     };\n+   |     - `z` dropped here while still borrowed\n+...\n+LL | }\n+   | - borrowed value needs to live until here\n+\n+error[E0597]: `z` does not live long enough (Mir)\n+  --> $DIR/issue-46471-1.rs:6:9\n    |\n LL |         &mut z\n    |         ^^^^^^\n@@ -9,6 +20,6 @@ LL |         &mut z\n LL |     };\n    |     - `z` dropped here while still borrowed\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "90202e307eb110115dcc8827be093d552e196683", "filename": "src/test/ui/issues/issue-46471.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fissues%2Fissue-46471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fissues%2Fissue-46471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46471.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,9 +1,21 @@\n-error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-46471.rs:3:5\n+error[E0597]: `x` does not live long enough (Ast)\n+  --> $DIR/issue-46471.rs:5:6\n+   |\n+LL |     &x\n+   |      ^ borrowed value does not live long enough\n+...\n+LL | }\n+   | - borrowed value only lives until here\n+   |\n+   = note: borrowed value must be valid for the static lifetime...\n+\n+error[E0515]: cannot return reference to local variable `x` (Mir)\n+  --> $DIR/issue-46471.rs:5:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0515`.\n+Some errors have detailed explanations: E0515, E0597.\n+For more information about an error, try `rustc --explain E0515`."}, {"sha": "0cc93a081b2afb8b077b6dada663bbc68812e08d", "filename": "src/test/ui/issues/issue-46472.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fissues%2Fissue-46472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fissues%2Fissue-46472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46472.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,12 +1,28 @@\n-error[E0515]: cannot return reference to temporary value\n-  --> $DIR/issue-46472.rs:2:5\n+error[E0597]: borrowed value does not live long enough (Ast)\n+  --> $DIR/issue-46472.rs:4:10\n+   |\n+LL |     &mut 4\n+   |          ^ temporary value does not live long enough\n+...\n+LL | }\n+   | - temporary value only lives until here\n+   |\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 3:8...\n+  --> $DIR/issue-46472.rs:3:8\n+   |\n+LL | fn bar<'a>() -> &'a mut u32 {\n+   |        ^^\n+\n+error[E0515]: cannot return reference to temporary value (Mir)\n+  --> $DIR/issue-46472.rs:4:5\n    |\n LL |     &mut 4\n    |     ^^^^^-\n    |     |    |\n    |     |    temporary value created here\n    |     returns a reference to data owned by the current function\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0515`.\n+Some errors have detailed explanations: E0515, E0597.\n+For more information about an error, try `rustc --explain E0515`."}, {"sha": "e15290f0b9ee9e94b8e726fd53a3af7ed06e4e52", "filename": "src/test/ui/lifetimes/lifetime-errors/liveness-assign-imm-local-notes.stderr", "status": "modified", "additions": 41, "deletions": 10, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fliveness-assign-imm-local-notes.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,5 +1,36 @@\n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/liveness-assign-imm-local-notes.rs:10:9\n+error[E0384]: cannot assign twice to immutable variable `x` (Ast)\n+  --> $DIR/liveness-assign-imm-local-notes.rs:13:9\n+   |\n+LL |         x = 2;\n+   |         ----- first assignment to `x`\n+LL |         x = 3;\n+   |         ^^^^^ cannot assign twice to immutable variable\n+\n+error[E0384]: cannot assign twice to immutable variable `x` (Ast)\n+  --> $DIR/liveness-assign-imm-local-notes.rs:25:13\n+   |\n+LL |             x = 2;\n+   |             ----- first assignment to `x`\n+LL |             x = 3;\n+   |             ^^^^^ cannot assign twice to immutable variable\n+\n+error[E0384]: cannot assign twice to immutable variable `x` (Ast)\n+  --> $DIR/liveness-assign-imm-local-notes.rs:35:13\n+   |\n+LL |             x = 1;\n+   |             ^^^^^ cannot assign twice to immutable variable\n+\n+error[E0384]: cannot assign twice to immutable variable `x` (Ast)\n+  --> $DIR/liveness-assign-imm-local-notes.rs:38:13\n+   |\n+LL |             x = 1;\n+   |             ----- first assignment to `x`\n+...\n+LL |             x = 2;\n+   |             ^^^^^ cannot assign twice to immutable variable\n+\n+error[E0384]: cannot assign twice to immutable variable `x` (Mir)\n+  --> $DIR/liveness-assign-imm-local-notes.rs:13:9\n    |\n LL |     let x;\n    |         - help: make this binding mutable: `mut x`\n@@ -9,8 +40,8 @@ LL |         x = 2;\n LL |         x = 3;\n    |         ^^^^^ cannot assign twice to immutable variable\n \n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/liveness-assign-imm-local-notes.rs:21:13\n+error[E0384]: cannot assign twice to immutable variable `x` (Mir)\n+  --> $DIR/liveness-assign-imm-local-notes.rs:25:13\n    |\n LL |         let x;\n    |             - help: make this binding mutable: `mut x`\n@@ -20,27 +51,27 @@ LL |             x = 2;\n LL |             x = 3;\n    |             ^^^^^ cannot assign twice to immutable variable\n \n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/liveness-assign-imm-local-notes.rs:30:13\n+error[E0384]: cannot assign twice to immutable variable `x` (Mir)\n+  --> $DIR/liveness-assign-imm-local-notes.rs:35:13\n    |\n LL |     let x;\n    |         - help: make this binding mutable: `mut x`\n ...\n LL |             x = 1;\n    |             ^^^^^ cannot assign twice to immutable variable\n \n-error[E0384]: cannot assign twice to immutable variable `x`\n-  --> $DIR/liveness-assign-imm-local-notes.rs:32:13\n+error[E0384]: cannot assign twice to immutable variable `x` (Mir)\n+  --> $DIR/liveness-assign-imm-local-notes.rs:38:13\n    |\n LL |     let x;\n    |         - help: make this binding mutable: `mut x`\n ...\n LL |             x = 1;\n    |             ----- first assignment to `x`\n-LL |         } else {\n+...\n LL |             x = 2;\n    |             ^^^^^ cannot assign twice to immutable variable\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0384`."}, {"sha": "49c72a655e57adf5633f7e7eea19192c17b6715b", "filename": "src/test/ui/methods/method-ambig-one-trait-unknown-int-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-one-trait-unknown-int-type.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -11,7 +11,7 @@ error[E0308]: mismatched types\n    |\n LL |     let y: usize = x.foo();\n    |                    ^^^^^^^ expected usize, found isize\n-help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to `usize` or panic if it the converted value wouldn't fit\n    |\n LL |     let y: usize = x.foo().try_into().unwrap();\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "1a81df8e2c464c7fafa27f31a168c151a81c9a3c", "filename": "src/test/ui/mismatched_types/issue-26480.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-26480.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -6,7 +6,7 @@ LL |                   $arr.len() * size_of($arr[0]));\n ...\n LL |     write!(hello);\n    |     -------------- in this macro invocation\n-help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `usize` to `u64` or panic if it the converted value wouldn't fit\n    |\n LL |                   ($arr.len() * size_of($arr[0])).try_into().unwrap());\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "c49dbdab402108d534b89a9f62d4be3bc522ebf8", "filename": "src/test/ui/moves/moves-based-on-type-tuple.stderr", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,5 +1,15 @@\n-error[E0382]: use of moved value: `x`\n-  --> $DIR/moves-based-on-type-tuple.rs:4:13\n+error[E0382]: use of moved value: `x` (Ast)\n+  --> $DIR/moves-based-on-type-tuple.rs:6:13\n+   |\n+LL |     box (x, x)\n+   |          -  ^ value used here after move\n+   |          |\n+   |          value moved here\n+   |\n+   = note: move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `x` (Mir)\n+  --> $DIR/moves-based-on-type-tuple.rs:6:13\n    |\n LL | fn dup(x: Box<isize>) -> Box<(Box<isize>,Box<isize>)> {\n    |        - move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -8,6 +18,6 @@ LL |     box (x, x)\n    |          |\n    |          value moved here\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "abb5343845b57b402bf1a7d70aca9184911e4f1c", "filename": "src/test/ui/nll/get_default.stderr", "status": "modified", "additions": 47, "deletions": 11, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,5 +1,41 @@\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n-  --> $DIR/get_default.rs:21:17\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n+  --> $DIR/get_default.rs:23:17\n+   |\n+LL |         match map.get() {\n+   |               --- immutable borrow occurs here\n+...\n+LL |                 map.set(String::new()); // Ideally, this would not error.\n+   |                 ^^^ mutable borrow occurs here\n+...\n+LL | }\n+   | - immutable borrow ends here\n+\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n+  --> $DIR/get_default.rs:35:17\n+   |\n+LL |         match map.get() {\n+   |               --- immutable borrow occurs here\n+LL |             Some(v) => {\n+LL |                 map.set(String::new()); // Both AST and MIR error here\n+   |                 ^^^ mutable borrow occurs here\n+...\n+LL | }\n+   | - immutable borrow ends here\n+\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Ast)\n+  --> $DIR/get_default.rs:41:17\n+   |\n+LL |         match map.get() {\n+   |               --- immutable borrow occurs here\n+...\n+LL |                 map.set(String::new()); // Ideally, just AST would error here\n+   |                 ^^^ mutable borrow occurs here\n+...\n+LL | }\n+   | - immutable borrow ends here\n+\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n+  --> $DIR/get_default.rs:23:17\n    |\n LL | fn ok(map: &mut Map) -> &String {\n    |            - let's call the lifetime of this reference `'1`\n@@ -11,10 +47,10 @@ LL |                 return v;\n    |                        - returning this value requires that `*map` is borrowed for `'1`\n ...\n LL |                 map.set(String::new()); // Ideally, this would not error.\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+   |                 ^^^ mutable borrow occurs here\n \n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n-  --> $DIR/get_default.rs:32:17\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n+  --> $DIR/get_default.rs:35:17\n    |\n LL | fn err(map: &mut Map) -> &String {\n    |             - let's call the lifetime of this reference `'1`\n@@ -23,13 +59,13 @@ LL |         match map.get() {\n    |               --- immutable borrow occurs here\n LL |             Some(v) => {\n LL |                 map.set(String::new()); // Both AST and MIR error here\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n-LL |\n+   |                 ^^^ mutable borrow occurs here\n+...\n LL |                 return v;\n    |                        - returning this value requires that `*map` is borrowed for `'1`\n \n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n-  --> $DIR/get_default.rs:37:17\n+error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable (Mir)\n+  --> $DIR/get_default.rs:41:17\n    |\n LL | fn err(map: &mut Map) -> &String {\n    |             - let's call the lifetime of this reference `'1`\n@@ -41,8 +77,8 @@ LL |                 return v;\n    |                        - returning this value requires that `*map` is borrowed for `'1`\n ...\n LL |                 map.set(String::new()); // Ideally, just AST would error here\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+   |                 ^^^ mutable borrow occurs here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0502`."}, {"sha": "85703bda31c4e50521320d096b9244a859051e1f", "filename": "src/test/ui/nll/loan_ends_mid_block_pair.stderr", "status": "modified", "additions": 57, "deletions": 3, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_pair.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,5 +1,59 @@\n-error[E0506]: cannot assign to `data.0` because it is borrowed\n-  --> $DIR/loan_ends_mid_block_pair.rs:12:5\n+error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n+  --> $DIR/loan_ends_mid_block_pair.rs:14:5\n+   |\n+LL |     let c = &mut data.0;\n+   |                  ------ borrow of `data.0` occurs here\n+LL |     capitalize(c);\n+LL |     data.0 = 'e';\n+   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n+\n+error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n+  --> $DIR/loan_ends_mid_block_pair.rs:17:5\n+   |\n+LL |     let c = &mut data.0;\n+   |                  ------ borrow of `data.0` occurs here\n+...\n+LL |     data.0 = 'f';\n+   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n+\n+error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n+  --> $DIR/loan_ends_mid_block_pair.rs:19:5\n+   |\n+LL |     let c = &mut data.0;\n+   |                  ------ borrow of `data.0` occurs here\n+...\n+LL |     data.0 = 'g';\n+   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n+\n+error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n+  --> $DIR/loan_ends_mid_block_pair.rs:28:5\n+   |\n+LL |     let c = &mut data.0;\n+   |                  ------ borrow of `data.0` occurs here\n+LL |     capitalize(c);\n+LL |     data.0 = 'e';\n+   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n+\n+error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n+  --> $DIR/loan_ends_mid_block_pair.rs:30:5\n+   |\n+LL |     let c = &mut data.0;\n+   |                  ------ borrow of `data.0` occurs here\n+...\n+LL |     data.0 = 'f';\n+   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n+\n+error[E0506]: cannot assign to `data.0` because it is borrowed (Ast)\n+  --> $DIR/loan_ends_mid_block_pair.rs:32:5\n+   |\n+LL |     let c = &mut data.0;\n+   |                  ------ borrow of `data.0` occurs here\n+...\n+LL |     data.0 = 'g';\n+   |     ^^^^^^^^^^^^ assignment to borrowed `data.0` occurs here\n+\n+error[E0506]: cannot assign to `data.0` because it is borrowed (Mir)\n+  --> $DIR/loan_ends_mid_block_pair.rs:14:5\n    |\n LL |     let c = &mut data.0;\n    |             ----------- borrow of `data.0` occurs here\n@@ -10,6 +64,6 @@ LL |     data.0 = 'e';\n LL |     capitalize(c);\n    |                - borrow later used here\n \n-error: aborting due to previous error\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0506`."}, {"sha": "a3f1391f001401159b92a234bb8bdf343c039c5b", "filename": "src/test/ui/nll/loan_ends_mid_block_vec.stderr", "status": "modified", "additions": 80, "deletions": 8, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,5 +1,77 @@\n-error[E0499]: cannot borrow `data` as mutable more than once at a time\n-  --> $DIR/loan_ends_mid_block_vec.rs:11:5\n+error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n+  --> $DIR/loan_ends_mid_block_vec.rs:13:5\n+   |\n+LL |     let slice = &mut data;\n+   |                      ---- first mutable borrow occurs here\n+LL |     capitalize(slice);\n+LL |     data.push('d');\n+   |     ^^^^ second mutable borrow occurs here\n+...\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n+  --> $DIR/loan_ends_mid_block_vec.rs:16:5\n+   |\n+LL |     let slice = &mut data;\n+   |                      ---- first mutable borrow occurs here\n+...\n+LL |     data.push('e');\n+   |     ^^^^ second mutable borrow occurs here\n+...\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n+  --> $DIR/loan_ends_mid_block_vec.rs:19:5\n+   |\n+LL |     let slice = &mut data;\n+   |                      ---- first mutable borrow occurs here\n+...\n+LL |     data.push('f');\n+   |     ^^^^ second mutable borrow occurs here\n+...\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n+  --> $DIR/loan_ends_mid_block_vec.rs:29:5\n+   |\n+LL |     let slice = &mut data;\n+   |                      ---- first mutable borrow occurs here\n+LL |     capitalize(slice);\n+LL |     data.push('d');\n+   |     ^^^^ second mutable borrow occurs here\n+...\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n+  --> $DIR/loan_ends_mid_block_vec.rs:31:5\n+   |\n+LL |     let slice = &mut data;\n+   |                      ---- first mutable borrow occurs here\n+...\n+LL |     data.push('e');\n+   |     ^^^^ second mutable borrow occurs here\n+...\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `data` as mutable more than once at a time (Ast)\n+  --> $DIR/loan_ends_mid_block_vec.rs:33:5\n+   |\n+LL |     let slice = &mut data;\n+   |                      ---- first mutable borrow occurs here\n+...\n+LL |     data.push('f');\n+   |     ^^^^ second mutable borrow occurs here\n+LL |\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `data` as mutable more than once at a time (Mir)\n+  --> $DIR/loan_ends_mid_block_vec.rs:13:5\n    |\n LL |     let slice = &mut data;\n    |                 --------- first mutable borrow occurs here\n@@ -10,8 +82,8 @@ LL |     data.push('d');\n LL |     capitalize(slice);\n    |                ----- first borrow later used here\n \n-error[E0499]: cannot borrow `data` as mutable more than once at a time\n-  --> $DIR/loan_ends_mid_block_vec.rs:13:5\n+error[E0499]: cannot borrow `data` as mutable more than once at a time (Mir)\n+  --> $DIR/loan_ends_mid_block_vec.rs:16:5\n    |\n LL |     let slice = &mut data;\n    |                 --------- first mutable borrow occurs here\n@@ -22,18 +94,18 @@ LL |     data.push('e');\n LL |     capitalize(slice);\n    |                ----- first borrow later used here\n \n-error[E0499]: cannot borrow `data` as mutable more than once at a time\n-  --> $DIR/loan_ends_mid_block_vec.rs:15:5\n+error[E0499]: cannot borrow `data` as mutable more than once at a time (Mir)\n+  --> $DIR/loan_ends_mid_block_vec.rs:19:5\n    |\n LL |     let slice = &mut data;\n    |                 --------- first mutable borrow occurs here\n ...\n LL |     data.push('f');\n    |     ^^^^ second mutable borrow occurs here\n-LL |\n+...\n LL |     capitalize(slice);\n    |                ----- first borrow later used here\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 9 previous errors\n \n For more information about this error, try `rustc --explain E0499`."}, {"sha": "aa876a0bcb3bfd2e3684483c726fcfd47c33a1d0", "filename": "src/test/ui/nll/region-ends-after-if-condition.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,15 +1,39 @@\n-error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable\n-  --> $DIR/region-ends-after-if-condition.rs:26:9\n+error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable (Ast)\n+  --> $DIR/region-ends-after-if-condition.rs:19:9\n+   |\n+LL |     let value = &my_struct.field;\n+   |                  --------------- immutable borrow occurs here\n+LL |     if value.is_empty() {\n+LL |         my_struct.field.push_str(\"Hello, world!\");\n+   |         ^^^^^^^^^^^^^^^ mutable borrow occurs here\n+...\n+LL | }\n+   | - immutable borrow ends here\n+\n+error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable (Ast)\n+  --> $DIR/region-ends-after-if-condition.rs:29:9\n+   |\n+LL |     let value = &my_struct.field;\n+   |                  --------------- immutable borrow occurs here\n+LL |     if value.is_empty() {\n+LL |         my_struct.field.push_str(\"Hello, world!\");\n+   |         ^^^^^^^^^^^^^^^ mutable borrow occurs here\n+...\n+LL | }\n+   | - immutable borrow ends here\n+\n+error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable (Mir)\n+  --> $DIR/region-ends-after-if-condition.rs:29:9\n    |\n LL |     let value = &my_struct.field;\n    |                 ---------------- immutable borrow occurs here\n LL |     if value.is_empty() {\n LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+   |         ^^^^^^^^^^^^^^^ mutable borrow occurs here\n ...\n LL |     drop(value);\n    |          ----- immutable borrow later used here\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0502`."}, {"sha": "09882d55cb70e065596840bbcf15fea1c8197ed7", "filename": "src/test/ui/nll/return_from_loop.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -1,15 +1,39 @@\n-error[E0499]: cannot borrow `my_struct.field` as mutable more than once at a time\n-  --> $DIR/return_from_loop.rs:20:9\n+error[E0499]: cannot borrow `my_struct.field` as mutable more than once at a time (Ast)\n+  --> $DIR/return_from_loop.rs:22:9\n+   |\n+LL |     let value = &mut my_struct.field;\n+   |                      --------------- first mutable borrow occurs here\n+LL |     loop {\n+LL |         my_struct.field.push_str(\"Hello, world!\");\n+   |         ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+...\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `my_struct.field` as mutable more than once at a time (Ast)\n+  --> $DIR/return_from_loop.rs:35:9\n+   |\n+LL |     let value = &mut my_struct.field;\n+   |                      --------------- first mutable borrow occurs here\n+LL |     loop {\n+LL |         my_struct.field.push_str(\"Hello, world!\");\n+   |         ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+...\n+LL | }\n+   | - first borrow ends here\n+\n+error[E0499]: cannot borrow `my_struct.field` as mutable more than once at a time (Mir)\n+  --> $DIR/return_from_loop.rs:22:9\n    |\n LL |     let value = &mut my_struct.field;\n    |                 -------------------- first mutable borrow occurs here\n LL |     loop {\n LL |         my_struct.field.push_str(\"Hello, world!\");\n    |         ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-LL |\n+...\n LL |         value.len();\n    |         ----- first borrow later used here\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0499`."}, {"sha": "ead3a79da027080abb9b4001730d35739cc08872", "filename": "src/test/ui/numeric/const-scope.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fconst-scope.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -37,7 +37,7 @@ error[E0308]: mismatched types\n    |\n LL |     let d: i8 = c;\n    |                 ^ expected i8, found i32\n-help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `i8` or panic if it the converted value wouldn't fit\n    |\n LL |     let d: i8 = c.try_into().unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "5a9349b4c0f2987ac3c67e131a31a3c53060712c", "filename": "src/test/ui/numeric/len.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Flen.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     test(array.len());\n    |          ^^^^^^^^^^^ expected u32, found usize\n-help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `usize` to `u32` or panic if it the converted value wouldn't fit\n    |\n LL |     test(array.len().try_into().unwrap());\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "be4411e630becfdbfec6b2ce31d0dbcb8dfd62e4", "filename": "src/test/ui/numeric/numeric-cast-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast-2.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     let x: u16 = foo();\n    |                  ^^^^^ expected u16, found i32\n-help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `u16` or panic if it the converted value wouldn't fit\n    |\n LL |     let x: u16 = foo().try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n    |\n LL |     let y: i64 = x + x;\n    |                  ^^^^^ expected i64, found u16\n-help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert an `u16` to `i64` or panic if it the converted value wouldn't fit\n    |\n LL |     let y: i64 = (x + x).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ error[E0308]: mismatched types\n    |\n LL |     let z: i32 = x + x;\n    |                  ^^^^^ expected i32, found u16\n-help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `u16` to `i32` or panic if it the converted value wouldn't fit\n    |\n LL |     let z: i32 = (x + x).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "9e7dcf7e41b555165dc1596d979ccb0675699964", "filename": "src/test/ui/numeric/numeric-cast.stderr", "status": "modified", "additions": 78, "deletions": 78, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fnumeric-cast.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_u64);\n    |                  ^^^^^ expected usize, found u64\n-help: you can convert an `u64` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `u64` to `usize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -13,7 +13,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_u32);\n    |                  ^^^^^ expected usize, found u32\n-help: you can convert an `u32` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `u32` to `usize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,7 +23,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_u16);\n    |                  ^^^^^ expected usize, found u16\n-help: you can convert an `u16` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `u16` to `usize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -33,7 +33,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_u8);\n    |                  ^^^^ expected usize, found u8\n-help: you can convert an `u8` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `u8` to `usize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_u8.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -43,7 +43,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_isize);\n    |                  ^^^^^^^ expected usize, found isize\n-help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to `usize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_isize.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -53,7 +53,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_i64);\n    |                  ^^^^^ expected usize, found i64\n-help: you can convert an `i64` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to `usize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_i64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -63,7 +63,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_i32);\n    |                  ^^^^^ expected usize, found i32\n-help: you can convert an `i32` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `usize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_i32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -73,7 +73,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_i16);\n    |                  ^^^^^ expected usize, found i16\n-help: you can convert an `i16` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to `usize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_i16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -83,7 +83,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<usize>(x_i8);\n    |                  ^^^^ expected usize, found i8\n-help: you can convert an `i8` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to `usize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<usize>(x_i8.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -93,7 +93,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_usize);\n    |                  ^^^^^^^ expected isize, found usize\n-help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `usize` to `isize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_usize.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -103,7 +103,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_u64);\n    |                  ^^^^^ expected isize, found u64\n-help: you can convert an `u64` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `u64` to `isize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -113,7 +113,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_u32);\n    |                  ^^^^^ expected isize, found u32\n-help: you can convert an `u32` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `u32` to `isize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -123,7 +123,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_u16);\n    |                  ^^^^^ expected isize, found u16\n-help: you can convert an `u16` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `u16` to `isize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -133,7 +133,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_u8);\n    |                  ^^^^ expected isize, found u8\n-help: you can convert an `u8` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `u8` to `isize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_u8.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -143,7 +143,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_i64);\n    |                  ^^^^^ expected isize, found i64\n-help: you can convert an `i64` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to `isize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_i64.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -153,7 +153,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_i32);\n    |                  ^^^^^ expected isize, found i32\n-help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `isize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_i32.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -163,7 +163,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_i16);\n    |                  ^^^^^ expected isize, found i16\n-help: you can convert an `i16` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to `isize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_i16.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -173,7 +173,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<isize>(x_i8);\n    |                  ^^^^ expected isize, found i8\n-help: you can convert an `i8` to `isize` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to `isize` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<isize>(x_i8.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -183,7 +183,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_usize);\n    |                ^^^^^^^ expected u64, found usize\n-help: you can convert an `usize` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `usize` to `u64` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -220,7 +220,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_isize);\n    |                ^^^^^^^ expected u64, found isize\n-help: you can convert an `isize` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to `u64` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -230,7 +230,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_i64);\n    |                ^^^^^ expected u64, found i64\n-help: you can convert an `i64` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to `u64` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -240,7 +240,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_i32);\n    |                ^^^^^ expected u64, found i32\n-help: you can convert an `i32` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `u64` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -250,7 +250,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_i16);\n    |                ^^^^^ expected u64, found i16\n-help: you can convert an `i16` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to `u64` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_i16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -260,7 +260,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u64>(x_i8);\n    |                ^^^^ expected u64, found i8\n-help: you can convert an `i8` to `u64` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to `u64` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u64>(x_i8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -270,7 +270,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_usize);\n    |                ^^^^^^^ expected i64, found usize\n-help: you can convert an `usize` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert an `usize` to `i64` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -280,7 +280,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_u64);\n    |                ^^^^^ expected i64, found u64\n-help: you can convert an `u64` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert an `u64` to `i64` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -290,7 +290,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_u32);\n    |                ^^^^^ expected i64, found u32\n-help: you can convert an `u32` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert an `u32` to `i64` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -300,7 +300,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_u16);\n    |                ^^^^^ expected i64, found u16\n-help: you can convert an `u16` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert an `u16` to `i64` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -310,7 +310,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_u8);\n    |                ^^^^ expected i64, found u8\n-help: you can convert an `u8` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert an `u8` to `i64` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_u8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -320,7 +320,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i64>(x_isize);\n    |                ^^^^^^^ expected i64, found isize\n-help: you can convert an `isize` to `i64` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to `i64` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i64>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -357,7 +357,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_usize);\n    |                ^^^^^^^ expected u32, found usize\n-help: you can convert an `usize` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `usize` to `u32` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -367,7 +367,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_u64);\n    |                ^^^^^ expected u32, found u64\n-help: you can convert an `u64` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `u64` to `u32` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -395,7 +395,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_isize);\n    |                ^^^^^^^ expected u32, found isize\n-help: you can convert an `isize` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to `u32` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -405,7 +405,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_i64);\n    |                ^^^^^ expected u32, found i64\n-help: you can convert an `i64` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to `u32` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -415,7 +415,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_i32);\n    |                ^^^^^ expected u32, found i32\n-help: you can convert an `i32` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `u32` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -425,7 +425,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_i16);\n    |                ^^^^^ expected u32, found i16\n-help: you can convert an `i16` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to `u32` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_i16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -435,7 +435,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u32>(x_i8);\n    |                ^^^^ expected u32, found i8\n-help: you can convert an `i8` to `u32` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to `u32` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u32>(x_i8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -445,7 +445,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_usize);\n    |                ^^^^^^^ expected i32, found usize\n-help: you can convert an `usize` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `usize` to `i32` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -455,7 +455,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_u64);\n    |                ^^^^^ expected i32, found u64\n-help: you can convert an `u64` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `u64` to `i32` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -465,7 +465,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_u32);\n    |                ^^^^^ expected i32, found u32\n-help: you can convert an `u32` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `u32` to `i32` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -475,7 +475,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_u16);\n    |                ^^^^^ expected i32, found u16\n-help: you can convert an `u16` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `u16` to `i32` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -485,7 +485,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_u8);\n    |                ^^^^ expected i32, found u8\n-help: you can convert an `u8` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `u8` to `i32` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_u8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -495,7 +495,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_isize);\n    |                ^^^^^^^ expected i32, found isize\n-help: you can convert an `isize` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to `i32` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -505,7 +505,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i32>(x_i64);\n    |                ^^^^^ expected i32, found i64\n-help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to `i32` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i32>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -533,7 +533,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_usize);\n    |                ^^^^^^^ expected u16, found usize\n-help: you can convert an `usize` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `usize` to `u16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -543,7 +543,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_u64);\n    |                ^^^^^ expected u16, found u64\n-help: you can convert an `u64` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `u64` to `u16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -553,7 +553,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_u32);\n    |                ^^^^^ expected u16, found u32\n-help: you can convert an `u32` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `u32` to `u16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -572,7 +572,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_isize);\n    |                ^^^^^^^ expected u16, found isize\n-help: you can convert an `isize` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to `u16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -582,7 +582,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_i64);\n    |                ^^^^^ expected u16, found i64\n-help: you can convert an `i64` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to `u16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -592,7 +592,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_i32);\n    |                ^^^^^ expected u16, found i32\n-help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `u16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -602,7 +602,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_i16);\n    |                ^^^^^ expected u16, found i16\n-help: you can convert an `i16` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to `u16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_i16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -612,7 +612,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u16>(x_i8);\n    |                ^^^^ expected u16, found i8\n-help: you can convert an `i8` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to `u16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u16>(x_i8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -622,7 +622,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_usize);\n    |                ^^^^^^^ expected i16, found usize\n-help: you can convert an `usize` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `usize` to `i16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_usize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -632,7 +632,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_u64);\n    |                ^^^^^ expected i16, found u64\n-help: you can convert an `u64` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `u64` to `i16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -642,7 +642,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_u32);\n    |                ^^^^^ expected i16, found u32\n-help: you can convert an `u32` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `u32` to `i16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -652,7 +652,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_u16);\n    |                ^^^^^ expected i16, found u16\n-help: you can convert an `u16` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `u16` to `i16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u16.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -662,7 +662,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_u8);\n    |                ^^^^ expected i16, found u8\n-help: you can convert an `u8` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `u8` to `i16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_u8.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -672,7 +672,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_isize);\n    |                ^^^^^^^ expected i16, found isize\n-help: you can convert an `isize` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to `i16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_isize.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -682,7 +682,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_i64);\n    |                ^^^^^ expected i16, found i64\n-help: you can convert an `i64` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to `i16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_i64.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -692,7 +692,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i16>(x_i32);\n    |                ^^^^^ expected i16, found i32\n-help: you can convert an `i32` to `i16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `i16` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i16>(x_i32.try_into().unwrap());\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -711,7 +711,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_usize);\n    |               ^^^^^^^ expected u8, found usize\n-help: you can convert an `usize` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `usize` to `u8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_usize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -721,7 +721,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_u64);\n    |               ^^^^^ expected u8, found u64\n-help: you can convert an `u64` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `u64` to `u8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_u64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -731,7 +731,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_u32);\n    |               ^^^^^ expected u8, found u32\n-help: you can convert an `u32` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `u32` to `u8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_u32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -741,7 +741,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_u16);\n    |               ^^^^^ expected u8, found u16\n-help: you can convert an `u16` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `u16` to `u8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_u16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -751,7 +751,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_isize);\n    |               ^^^^^^^ expected u8, found isize\n-help: you can convert an `isize` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to `u8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_isize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -761,7 +761,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_i64);\n    |               ^^^^^ expected u8, found i64\n-help: you can convert an `i64` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to `u8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_i64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -771,7 +771,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_i32);\n    |               ^^^^^ expected u8, found i32\n-help: you can convert an `i32` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `u8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_i32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -781,7 +781,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_i16);\n    |               ^^^^^ expected u8, found i16\n-help: you can convert an `i16` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to `u8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_i16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -791,7 +791,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<u8>(x_i8);\n    |               ^^^^ expected u8, found i8\n-help: you can convert an `i8` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i8` to `u8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<u8>(x_i8.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -801,7 +801,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_usize);\n    |               ^^^^^^^ expected i8, found usize\n-help: you can convert an `usize` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `usize` to `i8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_usize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -811,7 +811,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_u64);\n    |               ^^^^^ expected i8, found u64\n-help: you can convert an `u64` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `u64` to `i8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -821,7 +821,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_u32);\n    |               ^^^^^ expected i8, found u32\n-help: you can convert an `u32` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `u32` to `i8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -831,7 +831,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_u16);\n    |               ^^^^^ expected i8, found u16\n-help: you can convert an `u16` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `u16` to `i8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -841,7 +841,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_u8);\n    |               ^^^^ expected i8, found u8\n-help: you can convert an `u8` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `u8` to `i8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_u8.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -851,7 +851,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_isize);\n    |               ^^^^^^^ expected i8, found isize\n-help: you can convert an `isize` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to `i8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_isize.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -861,7 +861,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_i64);\n    |               ^^^^^ expected i8, found i64\n-help: you can convert an `i64` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to `i8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_i64.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -871,7 +871,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_i32);\n    |               ^^^^^ expected i8, found i32\n-help: you can convert an `i32` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `i8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_i32.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -881,7 +881,7 @@ error[E0308]: mismatched types\n    |\n LL |     foo::<i8>(x_i16);\n    |               ^^^^^ expected i8, found i16\n-help: you can convert an `i16` to `i8` and panic if the converted value wouldn't fit\n+help: you can convert an `i16` to `i8` or panic if it the converted value wouldn't fit\n    |\n LL |     foo::<i8>(x_i16.try_into().unwrap());\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "7eeefa9550543860a179d9e200bb5e8e7cac9582", "filename": "src/test/ui/pub/pub-restricted.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpub%2Fpub-restricted.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -21,18 +21,7 @@ LL | pub (b) fn bfn() {}\n            `pub(in path::to::module)`: visible only on the specified path\n \n error[E0704]: incorrect visibility restriction\n-  --> $DIR/pub-restricted.rs:7:6\n-   |\n-LL | pub (crate::a) fn cfn() {}\n-   |      ^^^^^^^^ help: make this visible only to module `crate::a` with `in`: `in crate::a`\n-   |\n-   = help: some possible visibility restrictions are:\n-           `pub(crate)`: visible only on the current crate\n-           `pub(super)`: visible only in the current module's parent\n-           `pub(in path::to::module)`: visible only on the specified path\n-\n-error[E0704]: incorrect visibility restriction\n-  --> $DIR/pub-restricted.rs:24:14\n+  --> $DIR/pub-restricted.rs:22:14\n    |\n LL |         pub (a) invalid: usize,\n    |              ^ help: make this visible only to module `a` with `in`: `in a`\n@@ -43,7 +32,7 @@ LL |         pub (a) invalid: usize,\n            `pub(in path::to::module)`: visible only on the specified path\n \n error[E0704]: incorrect visibility restriction\n-  --> $DIR/pub-restricted.rs:33:6\n+  --> $DIR/pub-restricted.rs:31:6\n    |\n LL | pub (xyz) fn xyz() {}\n    |      ^^^ help: make this visible only to module `xyz` with `in`: `in xyz`\n@@ -54,11 +43,11 @@ LL | pub (xyz) fn xyz() {}\n            `pub(in path::to::module)`: visible only on the specified path\n \n error: visibilities can only be restricted to ancestor modules\n-  --> $DIR/pub-restricted.rs:25:17\n+  --> $DIR/pub-restricted.rs:23:17\n    |\n LL |         pub (in x) non_parent_invalid: usize,\n    |                 ^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0704`."}, {"sha": "6772aa1c38d2c7bfe4144a24152c49d144008e6b", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -42,7 +42,7 @@ error[E0308]: mismatched types\n    |\n LL |     let f = [0; -4_isize];\n    |                 ^^^^^^^^ expected usize, found isize\n-help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to `usize` or panic if it the converted value wouldn't fit\n    |\n LL |     let f = [0; (-4_isize).try_into().unwrap()];\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -52,7 +52,7 @@ error[E0308]: mismatched types\n    |\n LL |     let f = [0_usize; -1_isize];\n    |                       ^^^^^^^^ expected usize, found isize\n-help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to `usize` or panic if it the converted value wouldn't fit\n    |\n LL |     let f = [0_usize; (-1_isize).try_into().unwrap()];\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "97523fe82cd4ed4269af260b02f4aad82e3e2fe6", "filename": "src/test/ui/shift-various-bad-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshift-various-bad-types.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -27,7 +27,7 @@ error[E0308]: mismatched types\n    |\n LL |     let _: i32 = 22_i64 >> 1_i32;\n    |                  ^^^^^^^^^^^^^^^ expected i32, found i64\n-help: you can convert an `i64` to `i32` and panic if the converted value wouldn't fit\n+help: you can convert an `i64` to `i32` or panic if it the converted value wouldn't fit\n    |\n LL |     let _: i32 = (22_i64 >> 1_i32).try_into().unwrap();\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "6ddd93d632e151d1710b1d3419653d2fa7509f38", "filename": "src/test/ui/symbol-names/basic.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -0,0 +1,14 @@\n+error: symbol-name(_ZN5basic4main17h08bcaf310214ed52E)\n+  --> $DIR/basic.rs:3:1\n+   |\n+LL | #[rustc_symbol_name]\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: def-path(main)\n+  --> $DIR/basic.rs:4:1\n+   |\n+LL | #[rustc_def_path]\n+   | ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "eda8646b5b4de1f035fbf03a7bbe5766bbf51acc", "filename": "src/test/ui/symbol-names/impl1.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -0,0 +1,26 @@\n+error: symbol-name(_ZN5impl13foo3Foo3bar17hc487d6ec13fe9124E)\n+  --> $DIR/impl1.rs:8:9\n+   |\n+LL |         #[rustc_symbol_name]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: def-path(foo::Foo::bar)\n+  --> $DIR/impl1.rs:9:9\n+   |\n+LL |         #[rustc_def_path]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h38577281258e1527E)\n+  --> $DIR/impl1.rs:18:9\n+   |\n+LL |         #[rustc_symbol_name]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: def-path(bar::<impl foo::Foo>::baz)\n+  --> $DIR/impl1.rs:19:9\n+   |\n+LL |         #[rustc_def_path]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "9acd63c2c25f14fe477fc30bb0aa9757f35cacfa", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent-projection-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent-projection-error.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -6,7 +6,7 @@ LL | fn global_bound_is_hidden() -> u8\n ...\n LL |     B::get_x()\n    |     ^^^^^^^^^^ expected u8, found i32\n-help: you can convert an `i32` to `u8` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `u8` or panic if it the converted value wouldn't fit\n    |\n LL |     B::get_x().try_into().unwrap()\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "f51f2defd475925766abc6fdbc226b426e9cfc4d", "filename": "src/test/ui/tutorial-suffix-inference-test.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a71d55701e303514f936b862ae5cf0c410d2a785/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftutorial-suffix-inference-test.stderr?ref=a71d55701e303514f936b862ae5cf0c410d2a785", "patch": "@@ -12,7 +12,7 @@ error[E0308]: mismatched types\n    |\n LL |     identity_u16(y);\n    |                  ^ expected u16, found i32\n-help: you can convert an `i32` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `i32` to `u16` or panic if it the converted value wouldn't fit\n    |\n LL |     identity_u16(y.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ error[E0308]: mismatched types\n    |\n LL |     identity_u16(a);\n    |                  ^ expected u16, found isize\n-help: you can convert an `isize` to `u16` and panic if the converted value wouldn't fit\n+help: you can convert an `isize` to `u16` or panic if it the converted value wouldn't fit\n    |\n LL |     identity_u16(a.try_into().unwrap());\n    |                  ^^^^^^^^^^^^^^^^^^^^^"}]}