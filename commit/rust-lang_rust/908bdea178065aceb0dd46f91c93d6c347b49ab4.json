{"sha": "908bdea178065aceb0dd46f91c93d6c347b49ab4", "node_id": "C_kwDOAAsO6NoAKDkwOGJkZWExNzgwNjVhY2ViMGRkNDZmOTFjOTNkNmMzNDdiNDlhYjQ", "commit": {"author": {"name": "Tim Hutt", "email": "tdhutt@gmail.com", "date": "2022-09-10T11:02:54Z"}, "committer": {"name": "Tim Hutt", "email": "tdhutt@gmail.com", "date": "2022-09-19T12:30:24Z"}, "message": "Document surprising and dangerous fs::Permissions behaviour on Unix\n\nThis documents the very surprising behaviour that `set_readonly(false)` will make a file *world writable* on Unix. I would go so far as to say that this function should be deprecated on Unix, or maybe even entirely. But documenting the bad behaviour is a good first step.", "tree": {"sha": "f35f7ca1b227daac3857d51ba2f5fe639a048dcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f35f7ca1b227daac3857d51ba2f5fe639a048dcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/908bdea178065aceb0dd46f91c93d6c347b49ab4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/908bdea178065aceb0dd46f91c93d6c347b49ab4", "html_url": "https://github.com/rust-lang/rust/commit/908bdea178065aceb0dd46f91c93d6c347b49ab4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/908bdea178065aceb0dd46f91c93d6c347b49ab4/comments", "author": {"login": "Timmmm", "id": 376842, "node_id": "MDQ6VXNlcjM3Njg0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/376842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Timmmm", "html_url": "https://github.com/Timmmm", "followers_url": "https://api.github.com/users/Timmmm/followers", "following_url": "https://api.github.com/users/Timmmm/following{/other_user}", "gists_url": "https://api.github.com/users/Timmmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Timmmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Timmmm/subscriptions", "organizations_url": "https://api.github.com/users/Timmmm/orgs", "repos_url": "https://api.github.com/users/Timmmm/repos", "events_url": "https://api.github.com/users/Timmmm/events{/privacy}", "received_events_url": "https://api.github.com/users/Timmmm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Timmmm", "id": 376842, "node_id": "MDQ6VXNlcjM3Njg0Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/376842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Timmmm", "html_url": "https://github.com/Timmmm", "followers_url": "https://api.github.com/users/Timmmm/followers", "following_url": "https://api.github.com/users/Timmmm/following{/other_user}", "gists_url": "https://api.github.com/users/Timmmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/Timmmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Timmmm/subscriptions", "organizations_url": "https://api.github.com/users/Timmmm/orgs", "repos_url": "https://api.github.com/users/Timmmm/repos", "events_url": "https://api.github.com/users/Timmmm/events{/privacy}", "received_events_url": "https://api.github.com/users/Timmmm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d", "html_url": "https://github.com/rust-lang/rust/commit/db9d86b58dff2a19d84d5e557641dfbb4cbb3a8d"}], "stats": {"total": 67, "additions": 64, "deletions": 3}, "files": [{"sha": "188ff00e1f8dda454aecd1e3ef4874a5259ddf7b", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/908bdea178065aceb0dd46f91c93d6c347b49ab4/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/908bdea178065aceb0dd46f91c93d6c347b49ab4/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=908bdea178065aceb0dd46f91c93d6c347b49ab4", "patch": "@@ -1365,6 +1365,34 @@ impl FileTimes {\n impl Permissions {\n     /// Returns `true` if these permissions describe a readonly (unwritable) file.\n     ///\n+    /// # Note\n+    ///\n+    /// This function does not take Access Control Lists (ACLs) or Unix group\n+    /// membership into account.\n+    ///\n+    /// # Windows\n+    ///\n+    /// On Windows this returns [`FILE_ATTRIBUTE_READONLY`](https://docs.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants).\n+    /// If `FILE_ATTRIBUTE_READONLY` is set then writes to the file will fail\n+    /// but the user may still have permission to change this flag. If\n+    /// `FILE_ATTRIBUTE_READONLY` is *not* set then writes may still fail due\n+    /// to lack of write permission.\n+    /// The behavior of this attribute for directories depends on the Windows\n+    /// version.\n+    ///\n+    /// # Unix (including macOS)\n+    ///\n+    /// On Unix-based platforms this checks if *any* of the owner, group or others\n+    /// write permission bits are set. It does not check if the current\n+    /// user is in the file's assigned group. It also does not check ACLs.\n+    /// Therefore even if this returns true you may not be able to write to the\n+    /// file, and vice versa. The [`PermissionsExt`] trait gives direct access\n+    /// to the permission bits but also does not read ACLs. If you need to\n+    /// accurately know whether or not a file is writable use the `access()`\n+    /// function from libc.\n+    ///\n+    /// [`PermissionsExt`]: crate::os::unix::fs::PermissionsExt\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -1390,8 +1418,40 @@ impl Permissions {\n     /// using the resulting `Permission` will update file permissions to allow\n     /// writing.\n     ///\n-    /// This operation does **not** modify the filesystem. To modify the\n-    /// filesystem use the [`set_permissions`] function.\n+    /// This operation does **not** modify the files attributes. This only\n+    /// changes the in-memory value of these attributes for this `Permissions`\n+    /// instance. To modify the files attributes use the [`set_permissions`]\n+    /// function which commits these attribute changes to the file.\n+    ///\n+    /// # Note\n+    ///\n+    /// `set_readonly(false)` makes the file *world-writable* on Unix.\n+    /// You can use the [`PermissionsExt`] trait on Unix to avoid this issue.\n+    ///\n+    /// It also does not take Access Control Lists (ACLs) or Unix group\n+    /// membership into account.\n+    ///\n+    /// # Windows\n+    ///\n+    /// On Windows this sets or clears [`FILE_ATTRIBUTE_READONLY`](https://docs.microsoft.com/en-us/windows/win32/fileio/file-attribute-constants).\n+    /// If `FILE_ATTRIBUTE_READONLY` is set then writes to the file will fail\n+    /// but the user may still have permission to change this flag. If\n+    /// `FILE_ATTRIBUTE_READONLY` is *not* set then the write may still fail if\n+    /// the user does not have permission to write to the file.\n+    ///\n+    /// In Windows 7 and earlier this attribute prevents deleting empty\n+    /// directories. It does not prevent modifying the directory contents.\n+    /// On later versions of Windows this attribute is ignored for directories.\n+    ///\n+    /// # Unix (including macOS)\n+    ///\n+    /// On Unix-based platforms this sets or clears the write access bit for\n+    /// the owner, group *and* others, equivalent to `chmod a+w <file>`\n+    /// or `chmod a-w <file>` respectively. The latter will grant write access\n+    /// to all users! You can use the [`PermissionsExt`] trait on Unix\n+    /// to avoid this issue.\n+    ///\n+    /// [`PermissionsExt`]: crate::os::unix::fs::PermissionsExt\n     ///\n     /// # Examples\n     ///\n@@ -1405,7 +1465,8 @@ impl Permissions {\n     ///\n     ///     permissions.set_readonly(true);\n     ///\n-    ///     // filesystem doesn't change\n+    ///     // filesystem doesn't change, only the in memory state of the\n+    ///     // readonly permission\n     ///     assert_eq!(false, metadata.permissions().readonly());\n     ///\n     ///     // just this particular `permissions`."}]}