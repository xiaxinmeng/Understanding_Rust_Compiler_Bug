{"sha": "63f1c24d8ac1f920da7564aa59027b2bd5c7d1bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZjFjMjRkOGFjMWY5MjBkYTc1NjRhYTU5MDI3YjJiZDVjN2QxYmQ=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2017-10-09T15:49:53Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2017-12-14T17:56:26Z"}, "message": "add trait aliases to typeck", "tree": {"sha": "6acf236826917fdf6ac72a760a9b3251a6734387", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6acf236826917fdf6ac72a760a9b3251a6734387"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63f1c24d8ac1f920da7564aa59027b2bd5c7d1bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63f1c24d8ac1f920da7564aa59027b2bd5c7d1bd", "html_url": "https://github.com/rust-lang/rust/commit/63f1c24d8ac1f920da7564aa59027b2bd5c7d1bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63f1c24d8ac1f920da7564aa59027b2bd5c7d1bd/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eefc9db15f22c993ba1103cb93d3265e528d667", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eefc9db15f22c993ba1103cb93d3265e528d667", "html_url": "https://github.com/rust-lang/rust/commit/2eefc9db15f22c993ba1103cb93d3265e528d667"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "4e1a79d4613e739361dffc48135bcd94809df875", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63f1c24d8ac1f920da7564aa59027b2bd5c7d1bd/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f1c24d8ac1f920da7564aa59027b2bd5c7d1bd/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=63f1c24d8ac1f920da7564aa59027b2bd5c7d1bd", "patch": "@@ -2577,6 +2577,7 @@ fn associated_item_def_ids<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           .map(|id| tcx.hir.local_def_id(id.node_id))\n                           .collect()\n         }\n+        hir::ItemTraitAlias(..) => vec![],\n         _ => span_bug!(item.span, \"associated_item_def_ids: not impl or trait\")\n     };\n     Rc::new(vec)"}, {"sha": "6b37a30cb82d84e9058c40e1021cb0a50ecba892", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63f1c24d8ac1f920da7564aa59027b2bd5c7d1bd/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f1c24d8ac1f920da7564aa59027b2bd5c7d1bd/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=63f1c24d8ac1f920da7564aa59027b2bd5c7d1bd", "patch": "@@ -336,6 +336,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let path = &trait_ref.path;\n         match path.def {\n             Def::Trait(trait_def_id) => trait_def_id,\n+            Def::TraitAlias(alias_def_id) => alias_def_id,\n             Def::Err => {\n                 self.tcx().sess.fatal(\"cannot continue compilation due to previous error\");\n             }"}, {"sha": "918146605fd4dce5c3cac4c7a59b0f97f69078a9", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/63f1c24d8ac1f920da7564aa59027b2bd5c7d1bd/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f1c24d8ac1f920da7564aa59027b2bd5c7d1bd/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=63f1c24d8ac1f920da7564aa59027b2bd5c7d1bd", "patch": "@@ -441,6 +441,11 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n             tcx.at(it.span).super_predicates_of(def_id);\n             tcx.predicates_of(def_id);\n         },\n+        hir::ItemTraitAlias(..) => {\n+            tcx.generics_of(def_id);\n+            tcx.trait_def(def_id);\n+            tcx.predicates_of(def_id);\n+        },\n         hir::ItemStruct(ref struct_def, _) |\n         hir::ItemUnion(ref struct_def, _) => {\n             tcx.generics_of(def_id);\n@@ -672,6 +677,7 @@ fn super_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let (generics, bounds) = match item.node {\n         hir::ItemTrait(.., ref generics, ref supertraits, _) => (generics, supertraits),\n+        hir::ItemTraitAlias(ref generics, ref supertraits) => (generics, supertraits),\n         _ => span_bug!(item.span,\n                        \"super_predicates invoked on non-trait\"),\n     };\n@@ -715,6 +721,7 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let unsafety = match item.node {\n         hir::ItemTrait(_, unsafety, ..) => unsafety,\n+        hir::ItemTraitAlias(..) => hir::Unsafety::Normal,\n         _ => span_bug!(item.span, \"trait_def_of_item invoked on non-trait\"),\n     };\n \n@@ -902,7 +909,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     (generics, None)\n                 }\n \n-                ItemTrait(_, _, ref generics, ..) => {\n+                ItemTrait(_, _, ref generics, ..) | ItemTraitAlias(ref generics, ..) => {\n                     // Add in the self type parameter.\n                     //\n                     // Something of a hack: use the node id for the trait, also as\n@@ -1132,7 +1139,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                     tcx.mk_adt(def, substs)\n                 }\n                 ItemAutoImpl(..) |\n-                ItemTrait(..) |\n+                ItemTrait(..) | ItemTraitAlias(..) |\n                 ItemMod(..) |\n                 ItemForeignMod(..) |\n                 ItemGlobalAsm(..) |"}]}