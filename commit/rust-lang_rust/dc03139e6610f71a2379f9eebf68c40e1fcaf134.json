{"sha": "dc03139e6610f71a2379f9eebf68c40e1fcaf134", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMDMxMzllNjYxMGY3MWEyMzc5ZjllZWJmNjhjNDBlMWZjYWYxMzQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-25T21:38:18Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-08-25T21:38:18Z"}, "message": "Include missing tools in the manifest and mark them as unavailable", "tree": {"sha": "a2a0c5f4434d177838cd0fad4a07055df22cb4d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2a0c5f4434d177838cd0fad4a07055df22cb4d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc03139e6610f71a2379f9eebf68c40e1fcaf134", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCAAGBQJbgcxwAAoJEOjBBC3RYkUZpb4IAJTU8Or3l+Qn0jpusoEJtSaH\n5oWxUlZmx9ykHsiWOzVdyKDJTm0rOPPbHL3Pc7u+SsvJFfVnDVN+iw8YxsnDJmdf\n+hdjXCc2nuI89RswwQ81+ofxjGk1+2t09E4mfmABjo0qkCKPDxY8vYn2CrIVl+4T\nz8Ykv9auapXZSper1NW4uuzYdeb7IMYnYUaVkntSE+F1+RdgZl6KUuI3IiSXsSJ+\nRQpi3GMRQkx8pCQw1vp2N5xVzO13JuzKiUBtKOHWFtAHfbiL996mE/EBLkFslVWe\nbOuuN0UluVtxQcE1mujIluMdjDxq9TMrvrgjd+L4wgFkl7HY7Tklfev1KumWE0I=\n=c4eD\n-----END PGP SIGNATURE-----", "payload": "tree a2a0c5f4434d177838cd0fad4a07055df22cb4d1\nparent af2be23fd156fe93ca4db2f2a0f047f1ad5c6533\nauthor Pietro Albini <pietro@pietroalbini.org> 1535233098 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1535233098 +0200\n\nInclude missing tools in the manifest and mark them as unavailable\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc03139e6610f71a2379f9eebf68c40e1fcaf134", "html_url": "https://github.com/rust-lang/rust/commit/dc03139e6610f71a2379f9eebf68c40e1fcaf134", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc03139e6610f71a2379f9eebf68c40e1fcaf134/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af2be23fd156fe93ca4db2f2a0f047f1ad5c6533", "url": "https://api.github.com/repos/rust-lang/rust/commits/af2be23fd156fe93ca4db2f2a0f047f1ad5c6533", "html_url": "https://github.com/rust-lang/rust/commit/af2be23fd156fe93ca4db2f2a0f047f1ad5c6533"}], "stats": {"total": 112, "additions": 46, "deletions": 66}, "files": [{"sha": "173a349e44fcd517a706f8b7b3edb8be76f8f0e2", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 46, "deletions": 66, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/dc03139e6610f71a2379f9eebf68c40e1fcaf134/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc03139e6610f71a2379f9eebf68c40e1fcaf134/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=dc03139e6610f71a2379f9eebf68c40e1fcaf134", "patch": "@@ -324,15 +324,7 @@ impl Builder {\n         self.package(\"llvm-tools-preview\", &mut manifest.pkg, TARGETS);\n         self.package(\"lldb-preview\", &mut manifest.pkg, TARGETS);\n \n-        let clippy_present = manifest.pkg.contains_key(\"clippy-preview\");\n-        let rls_present = manifest.pkg.contains_key(\"rls-preview\");\n-        let rustfmt_present = manifest.pkg.contains_key(\"rustfmt-preview\");\n-        let llvm_tools_present = manifest.pkg.contains_key(\"llvm-tools-preview\");\n-        let lldb_present = manifest.pkg.contains_key(\"lldb-preview\");\n-\n-        if rls_present {\n-            manifest.renames.insert(\"rls\".to_owned(), Rename { to: \"rls-preview\".to_owned() });\n-        }\n+        manifest.renames.insert(\"rls\".to_owned(), Rename { to: \"rls-preview\".to_owned() });\n \n         let mut pkg = Package {\n             version: self.cached_version(\"rust\")\n@@ -371,40 +363,17 @@ impl Builder {\n                 });\n             }\n \n-            if clippy_present {\n-                extensions.push(Component {\n-                    pkg: \"clippy-preview\".to_string(),\n-                    target: host.to_string(),\n-                });\n-            }\n-            if rls_present {\n-                extensions.push(Component {\n-                    pkg: \"rls-preview\".to_string(),\n-                    target: host.to_string(),\n-                });\n-            }\n-            if rustfmt_present {\n-                extensions.push(Component {\n-                    pkg: \"rustfmt-preview\".to_string(),\n-                    target: host.to_string(),\n-                });\n-            }\n-            if llvm_tools_present {\n-                extensions.push(Component {\n-                    pkg: \"llvm-tools-preview\".to_string(),\n-                    target: host.to_string(),\n-                });\n-            }\n-            if lldb_present {\n-                extensions.push(Component {\n-                    pkg: \"lldb-preview\".to_string(),\n-                    target: host.to_string(),\n-                });\n-            }\n-            extensions.push(Component {\n-                pkg: \"rust-analysis\".to_string(),\n-                target: host.to_string(),\n-            });\n+            // Tools are always present in the manifest, but might be marked as unavailable if they\n+            // weren't built\n+            extensions.extend(vec![\n+                Component { pkg: \"clippy-preview\".to_string(), target: host.to_string() },\n+                Component { pkg: \"rls-preview\".to_string(), target: host.to_string() },\n+                Component { pkg: \"rustfmt-preview\".to_string(), target: host.to_string() },\n+                Component { pkg: \"llvm-tools-preview\".to_string(), target: host.to_string() },\n+                Component { pkg: \"lldb-preview\".to_string(), target: host.to_string() },\n+                Component { pkg: \"rust-analysis\".to_string(), target: host.to_string() },\n+            ]);\n+\n             for target in TARGETS {\n                 if target != host {\n                     extensions.push(Component {\n@@ -459,32 +428,43 @@ impl Builder {\n                pkgname: &str,\n                dst: &mut BTreeMap<String, Package>,\n                targets: &[&str]) {\n-        let version = match *self.cached_version(pkgname) {\n-            Some(ref version) => version.clone(),\n-            None => {\n-                println!(\"Skipping package {}\", pkgname);\n-                return;\n-            }\n+        let (version, is_present) = match *self.cached_version(pkgname) {\n+            Some(ref version) => (version.clone(), true),\n+            None => (String::new(), false),\n         };\n \n         let targets = targets.iter().map(|name| {\n-            let filename = self.filename(pkgname, name);\n-            let digest = match self.digests.remove(&filename) {\n-                Some(digest) => digest,\n-                None => return (name.to_string(), Target::unavailable()),\n-            };\n-            let xz_filename = filename.replace(\".tar.gz\", \".tar.xz\");\n-            let xz_digest = self.digests.remove(&xz_filename);\n-\n-            (name.to_string(), Target {\n-                available: true,\n-                url: Some(self.url(&filename)),\n-                hash: Some(digest),\n-                xz_url: xz_digest.as_ref().map(|_| self.url(&xz_filename)),\n-                xz_hash: xz_digest,\n-                components: None,\n-                extensions: None,\n-            })\n+            if is_present {\n+                let filename = self.filename(pkgname, name);\n+                let digest = match self.digests.remove(&filename) {\n+                    Some(digest) => digest,\n+                    None => return (name.to_string(), Target::unavailable()),\n+                };\n+                let xz_filename = filename.replace(\".tar.gz\", \".tar.xz\");\n+                let xz_digest = self.digests.remove(&xz_filename);\n+\n+                (name.to_string(), Target {\n+                    available: true,\n+                    url: Some(self.url(&filename)),\n+                    hash: Some(digest),\n+                    xz_url: xz_digest.as_ref().map(|_| self.url(&xz_filename)),\n+                    xz_hash: xz_digest,\n+                    components: None,\n+                    extensions: None,\n+                })\n+            } else {\n+                // If the component is not present for this build add it anyway but mark it as\n+                // unavailable -- this way rustup won't allow upgrades without --force\n+                (name.to_string(), Target {\n+                    available: false,\n+                    url: None,\n+                    hash: None,\n+                    xz_url: None,\n+                    xz_hash: None,\n+                    components: None,\n+                    extensions: None,\n+                })\n+            }\n         }).collect();\n \n         dst.insert(pkgname.to_string(), Package {"}]}