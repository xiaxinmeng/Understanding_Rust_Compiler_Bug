{"sha": "4f532dacfc50287dc61e9ab302dcbdc059bd0a1b", "node_id": "C_kwDOAAsO6NoAKDRmNTMyZGFjZmM1MDI4N2RjNjFlOWFiMzAyZGNiZGMwNTliZDBhMWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-20T21:12:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-20T21:12:20Z"}, "message": "Rollup merge of #108279 - Nilstrieb:int, r=scottmcm\n\nUse named arguments for `{,u}int_impls` macro\n\nThis makes it way easier to understand.\n\nr? `@scottmcm`", "tree": {"sha": "24e33cdaebfb3b119dab7369a7723e7775164c8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24e33cdaebfb3b119dab7369a7723e7775164c8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f532dacfc50287dc61e9ab302dcbdc059bd0a1b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj8+I0CRBK7hj4Ov3rIwAAipAIAI92EvYO/V/BtC8sm2Le4m8q\nPBFmS2ir3rZduOs7w1sOMLHdWQoVvQpROabmVqQAEbEpCStvEZhYUlBg5kDu+xsZ\n4CkV3mww2MZESYlaKsuVHcpsxnIJFxCgLnoeAX+jZYzHZ9sPQfto0QcFts5Krm8E\nYKxrY1GjhRC7cm7qinUPUX3K4Rta/99x1uzO6l/rOGUQHL1qtj+mSdfFDfUSM3K8\niU0YG88agxaxPyBZe9VlCGGlTGF1OVvwNLmHnqDqHFhyFAD+w+9E0UDebWcLPkuI\nPcb7DyeCn5roDPzI3Z9LDLSDsB+FCyWVPHo6ZYjkcNEcorqQO8+HxnoAqzNfW2k=\n=FCBN\n-----END PGP SIGNATURE-----\n", "payload": "tree 24e33cdaebfb3b119dab7369a7723e7775164c8e\nparent ea7ca705e655119f57c496560964ca4a6f47af79\nparent eb5d82bc9c98fa36deaf39de2b5b6dd9fc48c0cc\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1676927540 +0100\ncommitter GitHub <noreply@github.com> 1676927540 +0100\n\nRollup merge of #108279 - Nilstrieb:int, r=scottmcm\n\nUse named arguments for `{,u}int_impls` macro\n\nThis makes it way easier to understand.\n\nr? `@scottmcm`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f532dacfc50287dc61e9ab302dcbdc059bd0a1b", "html_url": "https://github.com/rust-lang/rust/commit/4f532dacfc50287dc61e9ab302dcbdc059bd0a1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f532dacfc50287dc61e9ab302dcbdc059bd0a1b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea7ca705e655119f57c496560964ca4a6f47af79", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7ca705e655119f57c496560964ca4a6f47af79", "html_url": "https://github.com/rust-lang/rust/commit/ea7ca705e655119f57c496560964ca4a6f47af79"}, {"sha": "eb5d82bc9c98fa36deaf39de2b5b6dd9fc48c0cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5d82bc9c98fa36deaf39de2b5b6dd9fc48c0cc", "html_url": "https://github.com/rust-lang/rust/commit/eb5d82bc9c98fa36deaf39de2b5b6dd9fc48c0cc"}], "stats": {"total": 434, "additions": 356, "deletions": 78}, "files": [{"sha": "572191d0f9bbbf9d2ee00246fd2df1967ee47c21", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4f532dacfc50287dc61e9ab302dcbdc059bd0a1b/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f532dacfc50287dc61e9ab302dcbdc059bd0a1b/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=4f532dacfc50287dc61e9ab302dcbdc059bd0a1b", "patch": "@@ -1,9 +1,24 @@\n macro_rules! int_impl {\n-    ($SelfT:ty, $ActualT:ident, $UnsignedT:ty, $BITS:expr, $BITS_MINUS_ONE:expr, $Min:expr, $Max:expr,\n-     $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n-     $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n-     $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr,\n-     $bound_condition:expr) => {\n+    (\n+        Self = $SelfT:ty,\n+        ActualT = $ActualT:ident,\n+        UnsignedT = $UnsignedT:ty,\n+        BITS = $BITS:expr,\n+        BITS_MINUS_ONE = $BITS_MINUS_ONE:expr,\n+        Min = $Min:expr,\n+        Max = $Max:expr,\n+        rot = $rot:expr,\n+        rot_op = $rot_op:expr,\n+        rot_result = $rot_result:expr,\n+        swap_op = $swap_op:expr,\n+        swapped = $swapped:expr,\n+        reversed = $reversed:expr,\n+        le_bytes = $le_bytes:expr,\n+        be_bytes = $be_bytes:expr,\n+        to_xe_bytes_doc = $to_xe_bytes_doc:expr,\n+        from_xe_bytes_doc = $from_xe_bytes_doc:expr,\n+        bound_condition = $bound_condition:expr,\n+    ) => {\n         /// The smallest value that can be represented by this integer type\n         #[doc = concat!(\"(&minus;2<sup>\", $BITS_MINUS_ONE, \"</sup>\", $bound_condition, \").\")]\n         ///"}, {"sha": "a50c91579fa76818e4c467148616f9654464b738", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 317, "deletions": 67, "changes": 384, "blob_url": "https://github.com/rust-lang/rust/blob/4f532dacfc50287dc61e9ab302dcbdc059bd0a1b/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f532dacfc50287dc61e9ab302dcbdc059bd0a1b/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=4f532dacfc50287dc61e9ab302dcbdc059bd0a1b", "patch": "@@ -226,72 +226,217 @@ macro_rules! widening_impl {\n }\n \n impl i8 {\n-    int_impl! { i8, i8, u8, 8, 7, -128, 127, 2, \"-0x7e\", \"0xa\", \"0x12\", \"0x12\", \"0x48\",\n-    \"[0x12]\", \"[0x12]\", \"\", \"\", \"\" }\n+    int_impl! {\n+        Self = i8,\n+        ActualT = i8,\n+        UnsignedT = u8,\n+        BITS = 8,\n+        BITS_MINUS_ONE = 7,\n+        Min = -128,\n+        Max = 127,\n+        rot = 2,\n+        rot_op = \"-0x7e\",\n+        rot_result = \"0xa\",\n+        swap_op = \"0x12\",\n+        swapped = \"0x12\",\n+        reversed = \"0x48\",\n+        le_bytes = \"[0x12]\",\n+        be_bytes = \"[0x12]\",\n+        to_xe_bytes_doc = \"\",\n+        from_xe_bytes_doc = \"\",\n+        bound_condition = \"\",\n+    }\n }\n \n impl i16 {\n-    int_impl! { i16, i16, u16, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\", \"0x3412\",\n-    \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\", \"\" }\n+    int_impl! {\n+        Self = i16,\n+        ActualT = i16,\n+        UnsignedT = u16,\n+        BITS = 16,\n+        BITS_MINUS_ONE = 15,\n+        Min = -32768,\n+        Max = 32767,\n+        rot = 4,\n+        rot_op = \"-0x5ffd\",\n+        rot_result = \"0x3a\",\n+        swap_op = \"0x1234\",\n+        swapped = \"0x3412\",\n+        reversed = \"0x2c48\",\n+        le_bytes = \"[0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34]\",\n+        to_xe_bytes_doc = \"\",\n+        from_xe_bytes_doc = \"\",\n+        bound_condition = \"\",\n+    }\n }\n \n impl i32 {\n-    int_impl! { i32, i32, u32, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n-    \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\", \"\" }\n+    int_impl! {\n+        Self = i32,\n+        ActualT = i32,\n+        UnsignedT = u32,\n+        BITS = 32,\n+        BITS_MINUS_ONE = 31,\n+        Min = -2147483648,\n+        Max = 2147483647,\n+        rot = 8,\n+        rot_op = \"0x10000b3\",\n+        rot_result = \"0xb301\",\n+        swap_op = \"0x12345678\",\n+        swapped = \"0x78563412\",\n+        reversed = \"0x1e6a2c48\",\n+        le_bytes = \"[0x78, 0x56, 0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34, 0x56, 0x78]\",\n+        to_xe_bytes_doc = \"\",\n+        from_xe_bytes_doc = \"\",\n+        bound_condition = \"\",\n+    }\n }\n \n impl i64 {\n-    int_impl! { i64, i64, u64, 64, 63, -9223372036854775808, 9223372036854775807, 12,\n-    \"0xaa00000000006e1\", \"0x6e10aa\", \"0x1234567890123456\", \"0x5634129078563412\",\n-    \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\", \"\", \"\", \"\" }\n+    int_impl! {\n+        Self = i64,\n+        ActualT = i64,\n+        UnsignedT = u64,\n+        BITS = 64,\n+        BITS_MINUS_ONE = 63,\n+        Min = -9223372036854775808,\n+        Max = 9223372036854775807,\n+        rot = 12,\n+        rot_op = \"0xaa00000000006e1\",\n+        rot_result = \"0x6e10aa\",\n+        swap_op = \"0x1234567890123456\",\n+        swapped = \"0x5634129078563412\",\n+        reversed = \"0x6a2c48091e6a2c48\",\n+        le_bytes = \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n+        to_xe_bytes_doc = \"\",\n+        from_xe_bytes_doc = \"\",\n+        bound_condition = \"\",\n+    }\n }\n \n impl i128 {\n-    int_impl! { i128, i128, u128, 128, 127, -170141183460469231731687303715884105728,\n-    170141183460469231731687303715884105727, 16,\n-    \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n-    \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n-    \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n-      0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n-      0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\", \"\", \"\", \"\" }\n+    int_impl! {\n+        Self = i128,\n+        ActualT = i128,\n+        UnsignedT = u128,\n+        BITS = 128,\n+        BITS_MINUS_ONE = 127,\n+        Min = -170141183460469231731687303715884105728,\n+        Max = 170141183460469231731687303715884105727,\n+        rot = 16,\n+        rot_op = \"0x13f40000000000000000000000004f76\",\n+        rot_result = \"0x4f7613f4\",\n+        swap_op = \"0x12345678901234567890123456789012\",\n+        swapped = \"0x12907856341290785634129078563412\",\n+        reversed = \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n+        le_bytes = \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n+            0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n+            0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\",\n+        to_xe_bytes_doc = \"\",\n+        from_xe_bytes_doc = \"\",\n+        bound_condition = \"\",\n+    }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n impl isize {\n-    int_impl! { isize, i16, usize, 16, 15, -32768, 32767, 4, \"-0x5ffd\", \"0x3a\", \"0x1234\",\n-    \"0x3412\", \"0x2c48\", \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n-    \" on 16-bit targets\" }\n+    int_impl! {\n+        Self = isize,\n+        ActualT = i16,\n+        UnsignedT = usize,\n+        BITS = 16,\n+        BITS_MINUS_ONE = 15,\n+        Min = -32768,\n+        Max = 32767,\n+        rot = 4,\n+        rot_op = \"-0x5ffd\",\n+        rot_result = \"0x3a\",\n+        swap_op = \"0x1234\",\n+        swapped = \"0x3412\",\n+        reversed = \"0x2c48\",\n+        le_bytes = \"[0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34]\",\n+        to_xe_bytes_doc = usize_isize_to_xe_bytes_doc!(),\n+        from_xe_bytes_doc = usize_isize_from_xe_bytes_doc!(),\n+        bound_condition = \" on 16-bit targets\",\n+    }\n }\n \n #[cfg(target_pointer_width = \"32\")]\n impl isize {\n-    int_impl! { isize, i32, usize, 32, 31, -2147483648, 2147483647, 8, \"0x10000b3\", \"0xb301\",\n-    \"0x12345678\", \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n-    \" on 32-bit targets\" }\n+    int_impl! {\n+        Self = isize,\n+        ActualT = i32,\n+        UnsignedT = usize,\n+        BITS = 32,\n+        BITS_MINUS_ONE = 31,\n+        Min = -2147483648,\n+        Max = 2147483647,\n+        rot = 8,\n+        rot_op = \"0x10000b3\",\n+        rot_result = \"0xb301\",\n+        swap_op = \"0x12345678\",\n+        swapped = \"0x78563412\",\n+        reversed = \"0x1e6a2c48\",\n+        le_bytes = \"[0x78, 0x56, 0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34, 0x56, 0x78]\",\n+        to_xe_bytes_doc = usize_isize_to_xe_bytes_doc!(),\n+        from_xe_bytes_doc = usize_isize_from_xe_bytes_doc!(),\n+        bound_condition = \" on 32-bit targets\",\n+    }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n impl isize {\n-    int_impl! { isize, i64, usize, 64, 63, -9223372036854775808, 9223372036854775807,\n-    12, \"0xaa00000000006e1\", \"0x6e10aa\",  \"0x1234567890123456\", \"0x5634129078563412\",\n-    \"0x6a2c48091e6a2c48\", \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n-    \" on 64-bit targets\" }\n+    int_impl! {\n+        Self = isize,\n+        ActualT = i64,\n+        UnsignedT = usize,\n+        BITS = 64,\n+        BITS_MINUS_ONE = 63,\n+        Min = -9223372036854775808,\n+        Max = 9223372036854775807,\n+        rot = 12,\n+        rot_op = \"0xaa00000000006e1\",\n+        rot_result = \"0x6e10aa\",\n+        swap_op = \"0x1234567890123456\",\n+        swapped = \"0x5634129078563412\",\n+        reversed = \"0x6a2c48091e6a2c48\",\n+        le_bytes = \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n+        to_xe_bytes_doc = usize_isize_to_xe_bytes_doc!(),\n+        from_xe_bytes_doc = usize_isize_from_xe_bytes_doc!(),\n+        bound_condition = \" on 64-bit targets\",\n+    }\n }\n \n /// If 6th bit set ascii is upper case.\n const ASCII_CASE_MASK: u8 = 0b0010_0000;\n \n impl u8 {\n-    uint_impl! { u8, u8, i8, NonZeroU8, 8, 255, 2, \"0x82\", \"0xa\", \"0x12\", \"0x12\", \"0x48\", \"[0x12]\",\n-    \"[0x12]\", \"\", \"\", \"\" }\n+    uint_impl! {\n+        Self = u8,\n+        ActualT = u8,\n+        SignedT = i8,\n+        NonZeroT = NonZeroU8,\n+        BITS = 8,\n+        MAX = 255,\n+        rot = 2,\n+        rot_op = \"0x82\",\n+        rot_result = \"0xa\",\n+        swap_op = \"0x12\",\n+        swapped = \"0x12\",\n+        reversed = \"0x48\",\n+        le_bytes = \"[0x12]\",\n+        be_bytes = \"[0x12]\",\n+        to_xe_bytes_doc = \"\",\n+        from_xe_bytes_doc = \"\",\n+        bound_condition = \"\",\n+    }\n     widening_impl! { u8, u16, 8, unsigned }\n \n     /// Checks if the value is within the ASCII range.\n@@ -875,8 +1020,25 @@ impl u8 {\n }\n \n impl u16 {\n-    uint_impl! { u16, u16, i16, NonZeroU16, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n-    \"[0x34, 0x12]\", \"[0x12, 0x34]\", \"\", \"\", \"\" }\n+    uint_impl! {\n+        Self = u16,\n+        ActualT = u16,\n+        SignedT = i16,\n+        NonZeroT = NonZeroU16,\n+        BITS = 16,\n+        MAX = 65535,\n+        rot = 4,\n+        rot_op = \"0xa003\",\n+        rot_result = \"0x3a\",\n+        swap_op = \"0x1234\",\n+        swapped = \"0x3412\",\n+        reversed = \"0x2c48\",\n+        le_bytes = \"[0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34]\",\n+        to_xe_bytes_doc = \"\",\n+        from_xe_bytes_doc = \"\",\n+        bound_condition = \"\",\n+    }\n     widening_impl! { u16, u32, 16, unsigned }\n \n     /// Checks if the value is a Unicode surrogate code point, which are disallowed values for [`char`].\n@@ -906,56 +1068,144 @@ impl u16 {\n }\n \n impl u32 {\n-    uint_impl! { u32, u32, i32, NonZeroU32, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n-    \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\", \"\", \"\", \"\" }\n+    uint_impl! {\n+        Self = u32,\n+        ActualT = u32,\n+        SignedT = i32,\n+        NonZeroT = NonZeroU32,\n+        BITS = 32,\n+        MAX = 4294967295,\n+        rot = 8,\n+        rot_op = \"0x10000b3\",\n+        rot_result = \"0xb301\",\n+        swap_op = \"0x12345678\",\n+        swapped = \"0x78563412\",\n+        reversed = \"0x1e6a2c48\",\n+        le_bytes = \"[0x78, 0x56, 0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34, 0x56, 0x78]\",\n+        to_xe_bytes_doc = \"\",\n+        from_xe_bytes_doc = \"\",\n+        bound_condition = \"\",\n+    }\n     widening_impl! { u32, u64, 32, unsigned }\n }\n \n impl u64 {\n-    uint_impl! { u64, u64, i64, NonZeroU64, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n-    \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n-    \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n-    \"\", \"\", \"\"}\n+    uint_impl! {\n+        Self = u64,\n+        ActualT = u64,\n+        SignedT = i64,\n+        NonZeroT = NonZeroU64,\n+        BITS = 64,\n+        MAX = 18446744073709551615,\n+        rot = 12,\n+        rot_op = \"0xaa00000000006e1\",\n+        rot_result = \"0x6e10aa\",\n+        swap_op = \"0x1234567890123456\",\n+        swapped = \"0x5634129078563412\",\n+        reversed = \"0x6a2c48091e6a2c48\",\n+        le_bytes = \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n+        to_xe_bytes_doc = \"\",\n+        from_xe_bytes_doc = \"\",\n+        bound_condition = \"\",\n+    }\n     widening_impl! { u64, u128, 64, unsigned }\n }\n \n impl u128 {\n-    uint_impl! { u128, u128, i128, NonZeroU128, 128, 340282366920938463463374607431768211455, 16,\n-    \"0x13f40000000000000000000000004f76\", \"0x4f7613f4\", \"0x12345678901234567890123456789012\",\n-    \"0x12907856341290785634129078563412\", \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n-    \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n-      0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n-      0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\",\n-     \"\", \"\", \"\"}\n+    uint_impl! {\n+        Self = u128,\n+        ActualT = u128,\n+        SignedT = i128,\n+        NonZeroT = NonZeroU128,\n+        BITS = 128,\n+        MAX = 340282366920938463463374607431768211455,\n+        rot = 16,\n+        rot_op = \"0x13f40000000000000000000000004f76\",\n+        rot_result = \"0x4f7613f4\",\n+        swap_op = \"0x12345678901234567890123456789012\",\n+        swapped = \"0x12907856341290785634129078563412\",\n+        reversed = \"0x48091e6a2c48091e6a2c48091e6a2c48\",\n+        le_bytes = \"[0x12, 0x90, 0x78, 0x56, 0x34, 0x12, 0x90, 0x78, \\\n+            0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56, \\\n+            0x78, 0x90, 0x12, 0x34, 0x56, 0x78, 0x90, 0x12]\",\n+        to_xe_bytes_doc = \"\",\n+        from_xe_bytes_doc = \"\",\n+        bound_condition = \"\",\n+    }\n }\n \n #[cfg(target_pointer_width = \"16\")]\n impl usize {\n-    uint_impl! { usize, u16, isize, NonZeroUsize, 16, 65535, 4, \"0xa003\", \"0x3a\", \"0x1234\", \"0x3412\", \"0x2c48\",\n-    \"[0x34, 0x12]\", \"[0x12, 0x34]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n-    \" on 16-bit targets\" }\n+    uint_impl! {\n+        Self = usize,\n+        ActualT = u16,\n+        SignedT = isize,\n+        NonZeroT = NonZeroUsize,\n+        BITS = 16,\n+        MAX = 65535,\n+        rot = 4,\n+        rot_op = \"0xa003\",\n+        rot_result = \"0x3a\",\n+        swap_op = \"0x1234\",\n+        swapped = \"0x3412\",\n+        reversed = \"0x2c48\",\n+        le_bytes = \"[0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34]\",\n+        to_xe_bytes_doc = usize_isize_to_xe_bytes_doc!(),\n+        from_xe_bytes_doc = usize_isize_from_xe_bytes_doc!(),\n+        bound_condition = \" on 16-bit targets\",\n+    }\n     widening_impl! { usize, u32, 16, unsigned }\n }\n+\n #[cfg(target_pointer_width = \"32\")]\n impl usize {\n-    uint_impl! { usize, u32, isize, NonZeroUsize, 32, 4294967295, 8, \"0x10000b3\", \"0xb301\", \"0x12345678\",\n-    \"0x78563412\", \"0x1e6a2c48\", \"[0x78, 0x56, 0x34, 0x12]\", \"[0x12, 0x34, 0x56, 0x78]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n-    \" on 32-bit targets\" }\n+    uint_impl! {\n+        Self = usize,\n+        ActualT = u32,\n+        SignedT = isize,\n+        NonZeroT = NonZeroUsize,\n+        BITS = 32,\n+        MAX = 4294967295,\n+        rot = 8,\n+        rot_op = \"0x10000b3\",\n+        rot_result = \"0xb301\",\n+        swap_op = \"0x12345678\",\n+        swapped = \"0x78563412\",\n+        reversed = \"0x1e6a2c48\",\n+        le_bytes = \"[0x78, 0x56, 0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34, 0x56, 0x78]\",\n+        to_xe_bytes_doc = usize_isize_to_xe_bytes_doc!(),\n+        from_xe_bytes_doc = usize_isize_from_xe_bytes_doc!(),\n+        bound_condition = \" on 32-bit targets\",\n+    }\n     widening_impl! { usize, u64, 32, unsigned }\n }\n \n #[cfg(target_pointer_width = \"64\")]\n impl usize {\n-    uint_impl! { usize, u64, isize, NonZeroUsize, 64, 18446744073709551615, 12, \"0xaa00000000006e1\", \"0x6e10aa\",\n-    \"0x1234567890123456\", \"0x5634129078563412\", \"0x6a2c48091e6a2c48\",\n-    \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n-    \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n-    usize_isize_to_xe_bytes_doc!(), usize_isize_from_xe_bytes_doc!(),\n-    \" on 64-bit targets\" }\n+    uint_impl! {\n+        Self = usize,\n+        ActualT = u64,\n+        SignedT = isize,\n+        NonZeroT = NonZeroUsize,\n+        BITS = 64,\n+        MAX = 18446744073709551615,\n+        rot = 12,\n+        rot_op = \"0xaa00000000006e1\",\n+        rot_result = \"0x6e10aa\",\n+        swap_op = \"0x1234567890123456\",\n+        swapped = \"0x5634129078563412\",\n+        reversed = \"0x6a2c48091e6a2c48\",\n+        le_bytes = \"[0x56, 0x34, 0x12, 0x90, 0x78, 0x56, 0x34, 0x12]\",\n+        be_bytes = \"[0x12, 0x34, 0x56, 0x78, 0x90, 0x12, 0x34, 0x56]\",\n+        to_xe_bytes_doc = usize_isize_to_xe_bytes_doc!(),\n+        from_xe_bytes_doc = usize_isize_from_xe_bytes_doc!(),\n+        bound_condition = \" on 64-bit targets\",\n+    }\n     widening_impl! { usize, u128, 64, unsigned }\n }\n "}, {"sha": "c4fe8e966fdbff23daccf7a491db6ca1a1b277b0", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4f532dacfc50287dc61e9ab302dcbdc059bd0a1b/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f532dacfc50287dc61e9ab302dcbdc059bd0a1b/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=4f532dacfc50287dc61e9ab302dcbdc059bd0a1b", "patch": "@@ -1,10 +1,23 @@\n macro_rules! uint_impl {\n-    ($SelfT:ty, $ActualT:ident, $SignedT:ident, $NonZeroT:ident,\n-        $BITS:expr, $MaxV:expr,\n-        $rot:expr, $rot_op:expr, $rot_result:expr, $swap_op:expr, $swapped:expr,\n-        $reversed:expr, $le_bytes:expr, $be_bytes:expr,\n-        $to_xe_bytes_doc:expr, $from_xe_bytes_doc:expr,\n-        $bound_condition:expr) => {\n+    (\n+        Self = $SelfT:ty,\n+        ActualT = $ActualT:ident,\n+        SignedT = $SignedT:ident,\n+        NonZeroT = $NonZeroT:ident,\n+        BITS = $BITS:expr,\n+        MAX = $MaxV:expr,\n+        rot = $rot:expr,\n+        rot_op = $rot_op:expr,\n+        rot_result = $rot_result:expr,\n+        swap_op = $swap_op:expr,\n+        swapped = $swapped:expr,\n+        reversed = $reversed:expr,\n+        le_bytes = $le_bytes:expr,\n+        be_bytes = $be_bytes:expr,\n+        to_xe_bytes_doc = $to_xe_bytes_doc:expr,\n+        from_xe_bytes_doc = $from_xe_bytes_doc:expr,\n+        bound_condition = $bound_condition:expr,\n+    ) => {\n         /// The smallest value that can be represented by this integer type.\n         ///\n         /// # Examples"}]}