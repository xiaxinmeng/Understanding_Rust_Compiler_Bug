{"sha": "62b17bac92595d384aaeb0a0fdc5c03269a0dbac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYjE3YmFjOTI1OTVkMzg0YWFlYjBhMGZkYzVjMDMyNjlhMGRiYWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-09T12:54:38Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-09T12:54:38Z"}, "message": "Simplify", "tree": {"sha": "b6a1aa5d77339a1a95aa0d4073f695dd591e28e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6a1aa5d77339a1a95aa0d4073f695dd591e28e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62b17bac92595d384aaeb0a0fdc5c03269a0dbac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62b17bac92595d384aaeb0a0fdc5c03269a0dbac", "html_url": "https://github.com/rust-lang/rust/commit/62b17bac92595d384aaeb0a0fdc5c03269a0dbac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62b17bac92595d384aaeb0a0fdc5c03269a0dbac/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4fb7476efc8bf956c56ba2b0e946f48f38a6efc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fb7476efc8bf956c56ba2b0e946f48f38a6efc", "html_url": "https://github.com/rust-lang/rust/commit/d4fb7476efc8bf956c56ba2b0e946f48f38a6efc"}], "stats": {"total": 80, "additions": 28, "deletions": 52}, "files": [{"sha": "ad456bc0011a790a7e2e1b68f2083cbd098991fd", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62b17bac92595d384aaeb0a0fdc5c03269a0dbac/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b17bac92595d384aaeb0a0fdc5c03269a0dbac/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=62b17bac92595d384aaeb0a0fdc5c03269a0dbac", "patch": "@@ -33,7 +33,7 @@ use crate::{\n \n pub(crate) use html::highlight_as_html;\n \n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, Copy)]\n pub struct HlRange {\n     pub range: TextRange,\n     pub highlight: Highlight,"}, {"sha": "de2180b047ccf12fe4ba41dc9f59667c3ee2f329", "filename": "crates/ide/src/syntax_highlighting/injection.rs", "status": "modified", "additions": 27, "deletions": 51, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/62b17bac92595d384aaeb0a0fdc5c03269a0dbac/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62b17bac92595d384aaeb0a0fdc5c03269a0dbac/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finjection.rs?ref=62b17bac92595d384aaeb0a0fdc5c03269a0dbac", "patch": "@@ -21,74 +21,50 @@ pub(super) fn highlight_injection(\n     if !active_parameter.name.starts_with(\"ra_fixture\") {\n         return None;\n     }\n-\n     let value = literal.value()?;\n-    let marker_info = MarkerInfo::new(&*value);\n-    let (analysis, tmp_file_id) = Analysis::from_single_file(marker_info.cleaned_text.clone());\n \n     if let Some(range) = literal.open_quote_text_range() {\n         hl.add(HlRange { range, highlight: HlTag::StringLiteral.into(), binding_hash: None })\n     }\n \n-    for mut hl_range in analysis.highlight(tmp_file_id).unwrap() {\n-        let range = marker_info.map_range_up(hl_range.range);\n-        if let Some(range) = literal.map_range_up(range) {\n-            hl_range.range = range;\n-            hl.add(hl_range);\n-        }\n-    }\n-\n-    if let Some(range) = literal.close_quote_text_range() {\n-        hl.add(HlRange { range, highlight: HlTag::StringLiteral.into(), binding_hash: None })\n-    }\n-\n-    Some(())\n-}\n+    let mut inj = Injector::default();\n \n-/// Data to remove `$0` from string and map ranges\n-#[derive(Default, Debug)]\n-struct MarkerInfo {\n-    cleaned_text: String,\n-    markers: Vec<TextRange>,\n-}\n+    let mut text = &*value;\n+    let mut offset: TextSize = 0.into();\n \n-impl MarkerInfo {\n-    fn new(mut text: &str) -> Self {\n+    while !text.is_empty() {\n         let marker = \"$0\";\n+        let idx = text.find(marker).unwrap_or(text.len());\n+        let (chunk, next) = text.split_at(idx);\n+        inj.add(chunk, TextRange::at(offset, TextSize::of(chunk)));\n \n-        let mut res = MarkerInfo::default();\n-        let mut offset: TextSize = 0.into();\n-        while !text.is_empty() {\n-            let idx = text.find(marker).unwrap_or(text.len());\n-            let (chunk, next) = text.split_at(idx);\n-            text = next;\n-            res.cleaned_text.push_str(chunk);\n-            offset += TextSize::of(chunk);\n+        text = next;\n+        offset += TextSize::of(chunk);\n \n-            if let Some(next) = text.strip_prefix(marker) {\n-                text = next;\n+        if let Some(next) = text.strip_prefix(marker) {\n+            text = next;\n \n-                let marker_len = TextSize::of(marker);\n-                res.markers.push(TextRange::at(offset, marker_len));\n-                offset += marker_len;\n-            }\n+            let marker_len = TextSize::of(marker);\n+            offset += marker_len;\n         }\n-        res\n     }\n-    fn map_range_up(&self, range: TextRange) -> TextRange {\n-        TextRange::new(\n-            self.map_offset_up(range.start(), true),\n-            self.map_offset_up(range.end(), false),\n-        )\n-    }\n-    fn map_offset_up(&self, mut offset: TextSize, start: bool) -> TextSize {\n-        for r in &self.markers {\n-            if r.start() < offset || (start && r.start() == offset) {\n-                offset += r.len()\n+\n+    let (analysis, tmp_file_id) = Analysis::from_single_file(inj.text().to_string());\n+\n+    for mut hl_range in analysis.highlight(tmp_file_id).unwrap() {\n+        for range in inj.map_range_up(hl_range.range) {\n+            if let Some(range) = literal.map_range_up(range) {\n+                hl_range.range = range;\n+                hl.add(hl_range.clone());\n             }\n         }\n-        offset\n     }\n+\n+    if let Some(range) = literal.close_quote_text_range() {\n+        hl.add(HlRange { range, highlight: HlTag::StringLiteral.into(), binding_hash: None })\n+    }\n+\n+    Some(())\n }\n \n const RUSTDOC_FENCE: &'static str = \"```\";"}]}