{"sha": "611adc83dae6a2e50ac4c4fde8ef814ca1c56273", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMWFkYzgzZGFlNmEyZTUwYWM0YzRmZGU4ZWY4MTRjYTFjNTYyNzM=", "commit": {"author": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-03-31T16:00:23Z"}, "committer": {"name": "veetaha", "email": "veetaha2@gmail.com", "date": "2020-03-31T16:00:23Z"}, "message": "Simplify", "tree": {"sha": "395505a363d1c26e1ddaa2f73084663bd2ed2d02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/395505a363d1c26e1ddaa2f73084663bd2ed2d02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/611adc83dae6a2e50ac4c4fde8ef814ca1c56273", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/611adc83dae6a2e50ac4c4fde8ef814ca1c56273", "html_url": "https://github.com/rust-lang/rust/commit/611adc83dae6a2e50ac4c4fde8ef814ca1c56273", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/611adc83dae6a2e50ac4c4fde8ef814ca1c56273/comments", "author": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veetaha", "id": 36276403, "node_id": "MDQ6VXNlcjM2Mjc2NDAz", "avatar_url": "https://avatars.githubusercontent.com/u/36276403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veetaha", "html_url": "https://github.com/Veetaha", "followers_url": "https://api.github.com/users/Veetaha/followers", "following_url": "https://api.github.com/users/Veetaha/following{/other_user}", "gists_url": "https://api.github.com/users/Veetaha/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veetaha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veetaha/subscriptions", "organizations_url": "https://api.github.com/users/Veetaha/orgs", "repos_url": "https://api.github.com/users/Veetaha/repos", "events_url": "https://api.github.com/users/Veetaha/events{/privacy}", "received_events_url": "https://api.github.com/users/Veetaha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f0d8db529478ce41b429f06708fa600a97c2151", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f0d8db529478ce41b429f06708fa600a97c2151", "html_url": "https://github.com/rust-lang/rust/commit/6f0d8db529478ce41b429f06708fa600a97c2151"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "13ecd537ad399b6a7acee59638768de712e08e93", "filename": "crates/ra_hir_ty/src/display.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/611adc83dae6a2e50ac4c4fde8ef814ca1c56273/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611adc83dae6a2e50ac4c4fde8ef814ca1c56273/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdisplay.rs?ref=611adc83dae6a2e50ac4c4fde8ef814ca1c56273", "patch": "@@ -190,8 +190,6 @@ impl HirDisplay for ApplicationTy {\n                 };\n                 write!(f, \"{}\", name)?;\n                 if self.parameters.len() > 0 {\n-                    write!(f, \"<\")?;\n-\n                     let mut non_default_parameters = Vec::with_capacity(self.parameters.len());\n                     let parameters_to_write = if f.omit_verbose_types() {\n                         match self\n@@ -200,8 +198,8 @@ impl HirDisplay for ApplicationTy {\n                             .map(|generic_def_id| f.db.generic_defaults(generic_def_id))\n                             .filter(|defaults| !defaults.is_empty())\n                         {\n-                            Option::None => self.parameters.0.as_ref(),\n-                            Option::Some(default_parameters) => {\n+                            None => self.parameters.0.as_ref(),\n+                            Some(default_parameters) => {\n                                 for (i, parameter) in self.parameters.iter().enumerate() {\n                                     match (parameter, default_parameters.get(i)) {\n                                         (&Ty::Unknown, _) | (_, None) => {\n@@ -221,7 +219,7 @@ impl HirDisplay for ApplicationTy {\n                     } else {\n                         self.parameters.0.as_ref()\n                     };\n-\n+                    write!(f, \"<\")?;\n                     f.write_joined(parameters_to_write, \", \")?;\n                     write!(f, \">\")?;\n                 }\n@@ -231,9 +229,9 @@ impl HirDisplay for ApplicationTy {\n                     AssocContainerId::TraitId(it) => it,\n                     _ => panic!(\"not an associated type\"),\n                 };\n-                let trait_name = f.db.trait_data(trait_).name.clone();\n-                let name = f.db.type_alias_data(type_alias).name.clone();\n-                write!(f, \"{}::{}\", trait_name, name)?;\n+                let trait_ = f.db.trait_data(trait_);\n+                let type_alias = f.db.type_alias_data(type_alias);\n+                write!(f, \"{}::{}\", trait_.name, type_alias.name)?;\n                 if self.parameters.len() > 0 {\n                     write!(f, \"<\")?;\n                     f.write_joined(&*self.parameters.0, \", \")?;\n@@ -266,8 +264,8 @@ impl HirDisplay for ProjectionTy {\n             return write!(f, \"{}\", TYPE_HINT_TRUNCATION);\n         }\n \n-        let trait_name = f.db.trait_data(self.trait_(f.db)).name.clone();\n-        write!(f, \"<{} as {}\", self.parameters[0].display(f.db), trait_name,)?;\n+        let trait_ = f.db.trait_data(self.trait_(f.db));\n+        write!(f, \"<{} as {}\", self.parameters[0].display(f.db), trait_.name)?;\n         if self.parameters.len() > 1 {\n             write!(f, \"<\")?;\n             f.write_joined(&self.parameters[1..], \", \")?;\n@@ -312,7 +310,7 @@ impl HirDisplay for Ty {\n                     Ty::Opaque(_) => write!(f, \"impl \")?,\n                     _ => unreachable!(),\n                 };\n-                write_bounds_like_dyn_trait(&predicates, f)?;\n+                write_bounds_like_dyn_trait(predicates, f)?;\n             }\n             Ty::Unknown => write!(f, \"{{unknown}}\")?,\n             Ty::Infer(..) => write!(f, \"_\")?,\n@@ -345,7 +343,7 @@ fn write_bounds_like_dyn_trait(\n                 // We assume that the self type is $0 (i.e. the\n                 // existential) here, which is the only thing that's\n                 // possible in actual Rust, and hence don't print it\n-                write!(f, \"{}\", f.db.trait_data(trait_ref.trait_).name.clone())?;\n+                write!(f, \"{}\", f.db.trait_data(trait_ref.trait_).name)?;\n                 if trait_ref.substs.len() > 1 {\n                     write!(f, \"<\")?;\n                     f.write_joined(&trait_ref.substs[1..], \", \")?;\n@@ -362,9 +360,8 @@ fn write_bounds_like_dyn_trait(\n                     write!(f, \"<\")?;\n                     angle_open = true;\n                 }\n-                let name =\n-                    f.db.type_alias_data(projection_pred.projection_ty.associated_ty).name.clone();\n-                write!(f, \"{} = \", name)?;\n+                let type_alias = f.db.type_alias_data(projection_pred.projection_ty.associated_ty);\n+                write!(f, \"{} = \", type_alias.name)?;\n                 projection_pred.ty.hir_fmt(f)?;\n             }\n             GenericPredicate::Error => {\n@@ -398,7 +395,7 @@ impl TraitRef {\n         } else {\n             write!(f, \": \")?;\n         }\n-        write!(f, \"{}\", f.db.trait_data(self.trait_).name.clone())?;\n+        write!(f, \"{}\", f.db.trait_data(self.trait_).name)?;\n         if self.substs.len() > 1 {\n             write!(f, \"<\")?;\n             f.write_joined(&self.substs[1..], \", \")?;"}]}