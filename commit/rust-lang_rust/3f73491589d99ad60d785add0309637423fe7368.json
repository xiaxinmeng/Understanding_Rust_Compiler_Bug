{"sha": "3f73491589d99ad60d785add0309637423fe7368", "node_id": "C_kwDOAAsO6NoAKDNmNzM0OTE1ODlkOTlhZDYwZDc4NWFkZDAzMDk2Mzc0MjNmZTczNjg", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-02-28T20:54:07Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-02-28T20:54:07Z"}, "message": "Only count mutations with projections as borrows\n\nBecause bindings also count as a mutation, the previous behavior counted\nall variables as borrowed, completely negating the effect of drop\ntracking.", "tree": {"sha": "7d92d8da114dc5753aa61fbe070a3402b42e8464", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d92d8da114dc5753aa61fbe070a3402b42e8464"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f73491589d99ad60d785add0309637423fe7368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f73491589d99ad60d785add0309637423fe7368", "html_url": "https://github.com/rust-lang/rust/commit/3f73491589d99ad60d785add0309637423fe7368", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f73491589d99ad60d785add0309637423fe7368/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97cde9fe08804a3a5208d77f6870ad7d43f8c9c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3", "html_url": "https://github.com/rust-lang/rust/commit/97cde9fe08804a3a5208d77f6870ad7d43f8c9c3"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "f2907bb2634aee18839491a0b82bb9d2f63aebb4", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3f73491589d99ad60d785add0309637423fe7368/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f73491589d99ad60d785add0309637423fe7368/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=3f73491589d99ad60d785add0309637423fe7368", "patch": "@@ -107,11 +107,19 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         assignee_place: &expr_use_visitor::PlaceWithHirId<'tcx>,\n         diag_expr_id: HirId,\n     ) {\n-        debug!(\"mutate {:?}; diag_expr_id={:?}\", assignee_place, diag_expr_id);\n-        // Count mutations as a borrow.\n-        self.places\n-            .borrowed\n-            .insert(TrackedValue::from_place_with_projections_allowed(assignee_place));\n+        debug!(\"mutate {assignee_place:?}; diag_expr_id={diag_expr_id:?}\");\n+        // Count mutations as a borrow when done through a projection.\n+        //\n+        // The goal here is to catch cases such as `x.y = 42`, since MIR will count this\n+        // as a borrow of `x`, and we need to match that behavior.\n+        //\n+        // FIXME(eholk): this is probably still more conservative than we need to be. For example,\n+        // we may need to count `*x = 42` as a borrow of `x`, since it overwrites all of `x`.\n+        if !assignee_place.place.projections.is_empty() {\n+            self.places\n+                .borrowed\n+                .insert(TrackedValue::from_place_with_projections_allowed(assignee_place));\n+        }\n     }\n \n     fn fake_read("}, {"sha": "9f4502709418360292aac88ced59524164532199", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f73491589d99ad60d785add0309637423fe7368/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f73491589d99ad60d785add0309637423fe7368/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=3f73491589d99ad60d785add0309637423fe7368", "patch": "@@ -49,7 +49,11 @@ pub trait Delegate<'tcx> {\n \n     /// The path at `assignee_place` is being assigned to.\n     /// `diag_expr_id` is the id used for diagnostics (see `consume` for more details).\n-    fn mutate(&mut self, assignee_place: &PlaceWithHirId<'tcx>, diag_expr_id: hir::HirId);\n+    fn mutate(\n+        &mut self,\n+        assignee_place: &PlaceWithHirId<'tcx>,\n+        diag_expr_id: hir::HirId\n+    );\n \n     /// The `place` should be a fake read because of specified `cause`.\n     fn fake_read(&mut self, place: Place<'tcx>, cause: FakeReadCause, diag_expr_id: hir::HirId);"}]}