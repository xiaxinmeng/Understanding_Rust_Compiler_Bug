{"sha": "f3f63da7c8ac7c89b95a85f1e7c1d4ec300dea0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZjYzZGE3YzhhYzdjODliOTVhODVmMWU3YzFkNGVjMzAwZGVhMGQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-06T00:06:01Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-06T00:06:01Z"}, "message": "Translate trivial bindings. Un-XFAIL bind-trivial.rs.", "tree": {"sha": "33de77deb2d0d833d4fece5db3c76e5336d05c18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33de77deb2d0d833d4fece5db3c76e5336d05c18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3f63da7c8ac7c89b95a85f1e7c1d4ec300dea0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3f63da7c8ac7c89b95a85f1e7c1d4ec300dea0d", "html_url": "https://github.com/rust-lang/rust/commit/f3f63da7c8ac7c89b95a85f1e7c1d4ec300dea0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3f63da7c8ac7c89b95a85f1e7c1d4ec300dea0d/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d2a6c73ca5b0e082c3fb2a3eee40e18029355f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2a6c73ca5b0e082c3fb2a3eee40e18029355f9", "html_url": "https://github.com/rust-lang/rust/commit/5d2a6c73ca5b0e082c3fb2a3eee40e18029355f9"}], "stats": {"total": 29, "additions": 21, "deletions": 8}, "files": [{"sha": "c407403c8fc1be81a66b503097ad77a3cb02f459", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3f63da7c8ac7c89b95a85f1e7c1d4ec300dea0d/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f3f63da7c8ac7c89b95a85f1e7c1d4ec300dea0d/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=f3f63da7c8ac7c89b95a85f1e7c1d4ec300dea0d", "patch": "@@ -418,6 +418,7 @@ TEST_XFAILS_RUSTC := $(filter-out \\\n                         arith-0.rs \\\n                         arith-1.rs \\\n                         arith-2.rs \\\n+                        bind-trivial.rs \\\n                         bitwise.rs \\\n                         bool-not.rs \\\n                         box.rs \\"}, {"sha": "992100f8b88313233b86dd1a70782024e7aa0582", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f3f63da7c8ac7c89b95a85f1e7c1d4ec300dea0d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3f63da7c8ac7c89b95a85f1e7c1d4ec300dea0d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f3f63da7c8ac7c89b95a85f1e7c1d4ec300dea0d", "patch": "@@ -1952,18 +1952,30 @@ impure fn trans_bind(@block_ctxt cx, @ast.expr f,\n                      vec[option.t[@ast.expr]] args,\n                      &ast.ann ann) -> result {\n     auto f_res = trans_lval(cx, f);\n-    auto bcx = f_res.res.bcx;\n-    auto pair_t = node_type(cx.fcx.ccx, ann);\n-    auto pair_v = bcx.build.Alloca(pair_t);\n     if (f_res.is_mem) {\n         cx.fcx.ccx.sess.unimpl(\"re-binding existing function\");\n     } else {\n-        auto code_cell =\n-            bcx.build.GEP(pair_v, vec(C_int(0),\n-                                      C_int(abi.fn_field_code)));\n-        bcx.build.Store(f_res.res.val, code_cell);\n+        let vec[@ty.t] bound = vec();\n+        for (option.t[@ast.expr] argopt in args) {\n+            alt (argopt) {\n+                case (none[@ast.expr]) {\n+                }\n+                case (some[@ast.expr](?e)) {\n+                    append[@ty.t](bound, ty.expr_ty(e));\n+                }\n+            }\n+        }\n+        if (_vec.len[@ty.t](bound) == 0u) {\n+            // Trivial 'binding': just return the static pair-ptr.\n+            ret f_res.res;\n+        } else {\n+            auto bcx = f_res.res.bcx;\n+            auto pair_t = node_type(cx.fcx.ccx, ann);\n+            auto pair_v = bcx.build.Alloca(pair_t);\n+            cx.fcx.ccx.sess.unimpl(\"nontrivial binding\");\n+            ret res(bcx, pair_v);\n+        }\n     }\n-    ret res(bcx, pair_v);\n }\n \n impure fn trans_call(@block_ctxt cx, @ast.expr f,"}]}