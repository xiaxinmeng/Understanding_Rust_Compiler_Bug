{"sha": "8234a85d158ec83581d970a4a669f97b07c56c2f", "node_id": "C_kwDOAAsO6NoAKDgyMzRhODVkMTU4ZWM4MzU4MWQ5NzBhNGE2NjlmOTdiMDdjNTZjMmY", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-29T15:51:05Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-29T15:51:05Z"}, "message": "compress", "tree": {"sha": "e76cec12a887460a363eeaadd73136fd31f7c365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e76cec12a887460a363eeaadd73136fd31f7c365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8234a85d158ec83581d970a4a669f97b07c56c2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8234a85d158ec83581d970a4a669f97b07c56c2f", "html_url": "https://github.com/rust-lang/rust/commit/8234a85d158ec83581d970a4a669f97b07c56c2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8234a85d158ec83581d970a4a669f97b07c56c2f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad4b02ecc00977538cf7225a8b47cfc76d386221", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad4b02ecc00977538cf7225a8b47cfc76d386221", "html_url": "https://github.com/rust-lang/rust/commit/ad4b02ecc00977538cf7225a8b47cfc76d386221"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "234e584eeb7193566032845a8cf5507cff646034", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8234a85d158ec83581d970a4a669f97b07c56c2f/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8234a85d158ec83581d970a4a669f97b07c56c2f/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=8234a85d158ec83581d970a4a669f97b07c56c2f", "patch": "@@ -59,7 +59,7 @@ pub(crate) mod entry {\n         }\n \n         pub(crate) fn stmt(p: &mut Parser) {\n-            expressions::stmt(p, expressions::StmtWithSemi::No, true);\n+            expressions::stmt(p, expressions::StmtWithSemi::No);\n         }\n \n         pub(crate) fn pat(p: &mut Parser) {\n@@ -103,7 +103,7 @@ pub(crate) mod entry {\n                     continue;\n                 }\n \n-                expressions::stmt(p, expressions::StmtWithSemi::Optional, true);\n+                expressions::stmt(p, expressions::StmtWithSemi::Optional);\n             }\n \n             m.complete(p, MACRO_STMTS);"}, {"sha": "3238b6e9f4464bc62d055e14d31cc17fc90c5465", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8234a85d158ec83581d970a4a669f97b07c56c2f/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8234a85d158ec83581d970a4a669f97b07c56c2f/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=8234a85d158ec83581d970a4a669f97b07c56c2f", "patch": "@@ -5,6 +5,7 @@ use super::*;\n pub(crate) use self::atom::{block_expr, match_arm_list};\n pub(super) use self::atom::{literal, LITERAL_FIRST};\n \n+#[derive(PartialEq, Eq)]\n pub(super) enum StmtWithSemi {\n     Yes,\n     No,\n@@ -28,7 +29,7 @@ fn expr_no_struct(p: &mut Parser) {\n     expr_bp(p, None, r, 1);\n }\n \n-pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi, prefer_expr: bool) {\n+pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi) {\n     let m = p.start();\n     // test attr_on_expr_stmt\n     // fn foo() {\n@@ -52,7 +53,7 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi, prefer_expr: bool) {\n     };\n \n     if let Some((cm, blocklike)) = expr_stmt(p, Some(m)) {\n-        if !(p.at(T!['}']) || (prefer_expr && p.at(EOF))) {\n+        if !(p.at(T!['}']) || (with_semi != StmtWithSemi::Yes && p.at(EOF))) {\n             // test no_semi_after_block\n             // fn foo() {\n             //     if true {}\n@@ -149,7 +150,7 @@ pub(super) fn expr_block_contents(p: &mut Parser) {\n             continue;\n         }\n \n-        stmt(p, StmtWithSemi::Yes, false);\n+        stmt(p, StmtWithSemi::Yes);\n     }\n }\n "}]}