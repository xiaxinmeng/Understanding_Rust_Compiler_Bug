{"sha": "c9e47e724f72643232569aeab06180d545267ec6", "node_id": "C_kwDOAAsO6NoAKGM5ZTQ3ZTcyNGY3MjY0MzIzMjU2OWFlYWIwNjE4MGQ1NDUyNjdlYzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T09:39:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-13T09:39:41Z"}, "message": "Auto merge of #96709 - jackh726:gats-stabilization, r=compiler-errors\n\nStabilize generic associated types\n\nCloses #44265\n\nr? `@nikomatsakis`\n\n# \u26a1 Status of the discussion \u26a1\n\n* [x] There have been several serious concerns raised, [summarized here](https://github.com/rust-lang/rust/pull/96709#issuecomment-1129311660).\n* [x] There has also been a [deep-dive comment](https://github.com/rust-lang/rust/pull/96709#issuecomment-1167220240) explaining some of the \"patterns of code\" that are enabled by GATs, based on use-cases posted to this thread or on the tracking issue.\n* [x] We have modeled some aspects of GATs in [a-mir-formality](https://github.com/nikomatsakis/a-mir-formality) to give better confidence in how they will be resolved in the future. [You can read a write-up here](https://github.com/rust-lang/types-team/blob/master/minutes/2022-07-08-implied-bounds-and-wf-checking.md).\n* [x] The major points of the discussion have been [summarized on the GAT initiative repository](https://rust-lang.github.io/generic-associated-types-initiative/mvp.html).\n* [x] [FCP has been proposed](https://github.com/rust-lang/rust/pull/96709#issuecomment-1129311660) and we are awaiting final decisions and discussion amidst the relevant team members.\n\n# Stabilization proposal\n\nThis PR proposes the stabilization of `#![feature(generic_associated_types)]`. While there a number of future additions to be made and bugs to be fixed (both discussed below), properly doing these will require significant language design and will ultimately likely be backwards-compatible. Given the overwhelming desire to have some form of generic associated types (GATs) available on stable and the stability of the \"simple\" uses, stabilizing the current subset of GAT features is almost certainly the correct next step.\n\nTracking issue: #44265\nInitiative: https://rust-lang.github.io/generic-associated-types-initiative/\nRFC: https://github.com/rust-lang/rfcs/blob/master/text/1598-generic_associated_types.md\nVersion: 1.65 (2022-08-22 => beta, 2022-11-03 => stable).\n\n## Motivation\n\nThere are a myriad of potential use cases for GATs. Stabilization unblocks probable future language features (e.g. async functions in traits), potential future standard library features (e.g. a `LendingIterator` or some form of `Iterator` with a lifetime generic), and a plethora of user use cases (some of which can be seen just by scrolling through the tracking issue and looking at all the issues linking to it).\n\nThere are a myriad of potential use cases for GATs. First, there are many users that have chosen to not use GATs primarily because they are not stable (some of which can be seen just by scrolling through the tracking issue and looking at all the issues linking to it). Second, while language feature desugaring isn't *blocked* on stabilization, it gives more confidence on using the feature. Likewise, library features like `LendingIterator` are not necessarily blocked on stabilization to be implemented unstably; however few, if any, public-facing APIs actually use unstable features.\n\nThis feature has a long history of design, discussion, and developement - the RFC was first introduced roughly 6 years ago. While there are still a number of features left to implement and bugs left to fix, it's clear that it's unlikely those will have backwards-incompatibility concerns. Additionally, the bugs that do exist do not strongly impede the most-common use cases.\n\n## What is stabilized\n\nThe primary language feature stabilized here is the ability to have generics on associated types, as so. Additionally, where clauses on associated types will now be accepted, regardless if the associated type is generic or not.\n\n```rust\ntrait ATraitWithGATs {\n    type Assoc<'a, T> where T: 'a;\n}\n\ntrait ATraitWithoutGATs<'a, T> {\n    type Assoc where T: 'a;\n}\n```\n\nWhen adding an impl for a trait with generic associated types, the generics for the associated type are copied as well. Note that where clauses are allowed both after the specified type and before the equals sign; however, the latter is a warn-by-default deprecation.\n\n```rust\nstruct X;\nstruct Y;\n\nimpl ATraitWithGATs for X {\n    type Assoc<'a, T> = &'a T\n      where T: 'a;\n}\nimpl ATraitWithGATs for Y {\n    type Assoc<'a, T>\n      where T: 'a\n    = &'a T;\n}\n```\n\nTo use a GAT in a function, generics are specified on the associated type, as if it was a struct or enum. GATs can also be specified in trait bounds:\n\n```rust\nfn accepts_gat<'a, T>(t: &'a T) -> T::Assoc<'a, T>\n  where for<'x> T: ATraitWithGATs<Assoc<'a, T> = &'a T> {\n    ...\n}\n```\n\nGATs can also appear in trait methods. However, depending on how they are used, they may confer where clauses on the associated type definition. More information can be found [here](https://github.com/rust-lang/rust/issues/87479). Briefly, where clauses are required when those bounds can be proven in the methods that *construct* the GAT or other associated types that use the GAT in the trait. This allows impls to have maximum flexibility in the types defined for the associated type.\n\nTo take a relatively simple example:\n\n```rust\ntrait Iterable {\n    type Item<'a>;\n    type Iterator<'a>: Iterator<Item = Self::Item<'a>>;\n\n    fn iter<'x>(&'x self) -> Self::Iterator<'x>;\n    //^ We know that `Self: 'a` for `Iterator<'a>`, so we require that bound on `Iterator`\n    //  `Iterator` uses `Self::Item`, so we also require a `Self: 'a` on `Item` too\n}\n```\n\nA couple well-explained examples are available in a previous [blog post](https://blog.rust-lang.org/2021/08/03/GATs-stabilization-push.html).\n\n## What isn't stabilized/implemented\n\n### Universal type/const quantification\n\nCurrently, you can write a bound like `X: for<'a> Trait<Assoc<'a> = &'a ()>`. However, you cannot currently write `for<T> X: Trait<Assoc<T> = T>` or `for<const N> X: Trait<Assoc<N> = [usize; N]>`.\n\nHere is an example where this is needed:\n\n```rust\ntrait Foo {}\n\ntrait Trait {\n    type Assoc<F: Foo>;\n}\n\ntrait Trait2: Sized {\n    fn foo<F: Foo, T: Trait<Assoc<F> = F>>(_t: T);\n}\n```\n\nIn the above example, the *caller* must specify `F`, which is likely not what is desired.\n\n### Object-safe GATs\n\nUnlike non-generic associated types, traits with GATs are not currently object-safe. In other words the following are not allowed:\n\n```rust\ntrait Trait {\n    type Assoc<'a>;\n}\n\nfn foo(t: &dyn for<'a> Trait<Assoc<'a> = &'a ()>) {}\n         //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not allowed\n\nlet ty: Box<dyn for<'a> Trait<Assoc<'a> = &'a ()>>;\n          //^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not allowed\n```\n\n### Higher-kinded types\n\nYou cannot write currently (and there are no current plans to implement this):\n\n```rust\nstruct Struct<'a> {}\n\nfn foo(s: for<'a> Struct<'a>) {}\n```\n\n## Tests\n\nThere are many tests covering GATs that can be found in  `src/test/ui/generic-associated-types`. Here, I'll list (in alphanumeric order) tests highlight some important behavior or contain important patterns.\n\n- `./parse/*`: Parsing of GATs in traits and impls, and the trait path with GATs\n- `./collections-project-default.rs`: Interaction with associated type defaults\n- `./collections.rs`: The `Collection` pattern\n- `./const-generics-gat-in-trait-return-type-*.rs`: Const parameters\n- `./constraint-assoc-type-suggestion.rs`: Emit correct syntax in suggestion\n- `./cross-crate-bounds.rs`: Ensure we handles bounds across crates the same\n- `./elided-in-expr-position.rs`: Disallow lifetime elision in return position\n- `./gat-in-trait-path-undeclared-lifetime.rs`: Ensure we error on undeclared lifetime in trait path\n- `./gat-in-trait-path.rs`: Base trait path case\n- `./gat-trait-path-generic-type-arg.rs`: Don't allow shadowing of parameters\n- `./gat-trait-path-parenthesised-args.rs`: Don't allow paranthesized args in trait path\n- `./generic-associated-types-where.rs`: Ensure that we require where clauses from trait to be met on impl\n- `./impl_bounds.rs`: Check that the bounds on GATs in an impl are checked\n- `./issue-76826.rs`: `Windows` pattern\n- `./issue-78113-lifetime-mismatch-dyn-trait-box.rs`: Implicit 'static diagnostics\n- `./issue-84931.rs`: Ensure that we have a where clause on GAT to ensure trait parameter lives long enough\n- `./issue-87258_a.rs`: Unconstrained opaque type with TAITs\n- `./issue-87429-2.rs`: Ensure we can use bound vars in the bounds\n- `./issue-87429-associated-type-default.rs`: Ensure bounds hold with associated type defaults, for both trait and impl\n- `./issue-87429-specialization.rs`: Check that bounds hold under specialization\n- `./issue-88595.rs`: Under the outlives lint, we require a bound for both trait and GAT lifetime when trait lifetime is used in function\n- `./issue-90014.rs`: Lifetime bounds are checked with TAITs\n- `./issue-91139.rs`: Under migrate mode, but not NLL, we don't capture implied bounds from HRTB lifetimes used in a function and GATs\n- `./issue-91762.rs`: We used to too eagerly pick param env candidates when normalizing with GATs. We now require explicit parameters specified.\n- `./issue-95305.rs`: Disallow lifetime elision in trait paths\n- `./iterable.rs`: `Iterable` pattern\n- `./method-unsatified-assoc-type-predicate.rs`: Print predicates with GATs correctly in method resolve error\n- `./missing_lifetime_const.rs`: Ensure we must specify lifetime args (not elidable)\n- `./missing-where-clause-on-trait.rs`: Ensure we don't allow stricter bounds on impl than trait\n- `./parameter_number_and_kind_impl.rs`: Ensure paramters on GAT in impl match GAT in trait\n- `./pointer_family.rs`: `PointerFamily` pattern\n- `./projection-bound-cycle.rs`: Don't allow invalid cycles to prove bounds\n- `./self-outlives-lint.rs`: Ensures that an e.g. `Self: 'a` is written on the traits GAT if that bound can be implied from the GAT usage in the trait\n- `./shadowing.rs`: Don't allow lifetime shadowing in params\n- `./streaming_iterator.rs`: `StreamingIterator`(`LendingIterator`) pattern\n- `./trait-objects.rs`: Disallow trait objects for traits with GATs\n- `./variance_constraints.rs`: Require that GAT substs be invariant\n\n## Remaining bugs and open issues\n\nA full list of remaining open issues can be found at: https://github.com/rust-lang/rust/labels/F-generic_associated_types\n\nThere are some `known-bug` tests in-tree at `src/test/ui/generic-associated-types/bugs`.\n\nHere I'll categorize most of those that GAT bugs (or involve a pattern found more with GATs), but not those that include GATs but not a GAT issue in and of itself. (I also won't include issues directly for things listed elsewhere here.)\n\nUsing the concrete type of a GAT instead of the projection type can give errors, since lifetimes are chosen to be early-bound vs late-bound.\n- #85533\n- #87803\n\nIn certain cases, we can run into cycle or overflow errors. This is more generally a problem with associated types.\n- #87755\n- #87758\n\nBounds on an associatd type need to be proven by an impl, but where clauses need to be proven by the usage. This can lead to confusion when users write one when they mean the other.\n- #87831\n- #90573\n\nWe sometimes can't normalize closure signatures fully. Really an asociated types issue, but might happen a bit more frequently with GATs, since more obvious place for HRTB lifetimes.\n- #88382\n\nWhen calling a function, we assign types to parameters \"too late\", after we already try (and fail) to normalize projections. Another associated types issue that might pop up more with GATs.\n- #88460\n- #96230\n\nWe don't fully have implied bounds for lifetimes appearing in GAT trait paths, which can lead to unconstrained type errors.\n- #88526\n\nSuggestion for adding lifetime bounds can suggest unhelpful fixes (`T: 'a` instead of `Self: 'a`), but the next compiler error after making the suggested change is helpful.\n- #90816\n- #92096\n- #95268\n\nWe can end up requiring that `for<'a> I: 'a` when we really want `for<'a where I: 'a> I: 'a`. This can leave unhelpful errors than effectively can't be satisfied unless `I: 'static`. Requires bigger changes and not only GATs.\n- #91693\n\nUnlike with non-generic associated types, we don't eagerly normalize with param env candidates. This is intended behavior (for now), to avoid accidentaly stabilizing picking arbitrary impls.\n- #91762\n\nSome Iterator adapter patterns (namely `filter`) require Polonius or unsafe to work.\n- #92985\n\n## Potential Future work\n\n### Universal type/const quantification\n\nNo work has been done to implement this. There are also some questions around implied bounds.\n\n###  Object-safe GATs\n\nThe intention is to make traits with GATs object-safe. There are some design work to be done around well-formedness rules and general implementation.\n\n### GATified std lib types\n\nIt would be helpful to either introduce new std lib traits (like `LendingIterator`) or to modify existing ones (adding a `'a` generic to `Iterator::Item`). There also a number of other candidates, like `Index`/`IndexMut` and `Fn`/`FnMut`/`FnOnce`.\n\n### Reduce the need for `for<'a>`\n\nSeen [here](https://github.com/rust-lang/rfcs/pull/1598#issuecomment-2611378730). One possible syntax:\n\n```rust\ntrait Iterable {\n    type Iter<'a>: Iterator<Item = Self::Item<'a>>;\n}\n\nfn foo<T>() where T: Iterable, T::Item<let 'a>: Display { } //note the `let`!\n```\n\n### Better implied bounds on higher-ranked things\n\nCurrently if we have a `type Item<'a> where self: 'a`, and a `for<'a> T: Iterator<Item<'a> = &'a ()`, this requires `for<'a> Self: 'a`. Really, we want `for<'a where T: 'a> ...`\n\nThere was some mentions of this all the back in the RFC thread [here](https://github.com/rust-lang/rfcs/pull/1598#issuecomment-264340514).\n\n## Alternatives\n\n### Make generics on associated type in bounds a binder\n\nImagine the bound `for<'a> T: Trait<Item<'a>= &'a ()>`. It might be that `for<'a>` is \"too large\" and it should instead be `T: Trait<for<'a> Item<'a>= &'a ()>`. Brought up in RFC thread [here](https://github.com/rust-lang/rfcs/pull/1598#issuecomment-229443863) and in a few places since.\n\nAnother related question: Is `for<'a>` the right syntax? Maybe `where<'a>`? Also originally found in RFC thread [here](https://github.com/rust-lang/rfcs/pull/1598#issuecomment-261639969).\n\n### Stabilize lifetime GATs first\n\nThis has been brought up a few times. The idea is to only allow GATs with lifetime parameters to in initial stabilization. This was probably most useful prior to actual implementation. At this point, lifetimes, types, and consts are all implemented and work. It feels like an arbitrary split without strong reason.\n\n## History\n\n* On 2016-04-30, [RFC opened](https://github.com/rust-lang/rfcs/pull/1598)\n* On 2017-09-02, RFC merged and [tracking issue opened](https://github.com/rust-lang/rust/issues/44265)\n* On 2017-10-23, [Move Generics from MethodSig to TraitItem and ImplItem](https://github.com/rust-lang/rust/pull/44766)\n* On 2017-12-01, [Generic Associated Types Parsing & Name Resolution](https://github.com/rust-lang/rust/pull/45904)\n* On 2017-12-15, [https://github.com/rust-lang/rust/pull/46706](https://github.com/rust-lang/rust/pull/46706)\n* On 2018-04-23, [Feature gate where clauses on associated types](https://github.com/rust-lang/rust/pull/49368)\n* On 2018-05-10, [Extend tests for RFC1598 (GAT)](https://github.com/rust-lang/rust/pull/49423)\n* On 2018-05-24, [Finish implementing GATs (Chalk)](https://github.com/rust-lang/chalk/pull/134)\n* On 2019-12-21, [Make GATs less ICE-prone](https://github.com/rust-lang/rust/pull/67160)\n* On 2020-02-13, [fix lifetime shadowing check in GATs](https://github.com/rust-lang/rust/pull/68938)\n* On 2020-06-20, [Projection bound validation](https://github.com/rust-lang/rust/pull/72788)\n* On 2020-10-06, [Separate projection bounds and predicates](https://github.com/rust-lang/rust/pull/73905)\n* On 2021-02-05, [Generic associated types in trait paths](https://github.com/rust-lang/rust/pull/79554)\n* On 2021-02-06, [Trait objects do not work with generic associated types](https://github.com/rust-lang/rust/issues/81823)\n* On 2021-04-28, [Make traits with GATs not object safe](https://github.com/rust-lang/rust/pull/84622)\n* On 2021-05-11, [Improve diagnostics for GATs](https://github.com/rust-lang/rust/pull/82272)\n* On 2021-07-16, [Make GATs no longer an incomplete feature](https://github.com/rust-lang/rust/pull/84623)\n* On 2021-07-16, [Replace associated item bound vars with placeholders when projecting](https://github.com/rust-lang/rust/pull/86993)\n* On 2021-07-26, [GATs: Decide whether to have defaults for `where Self: 'a`](https://github.com/rust-lang/rust/issues/87479)\n* On 2021-08-25, [Normalize projections under binders](https://github.com/rust-lang/rust/pull/85499)\n* On 2021-08-03, [The push for GATs stabilization](https://blog.rust-lang.org/2021/08/03/GATs-stabilization-push.html)\n* On 2021-08-12, [Detect stricter constraints on gats where clauses in impls vs trait](https://github.com/rust-lang/rust/pull/88336)\n* On 2021-09-20, [Proposal: Change syntax of where clauses on type aliases](https://github.com/rust-lang/rust/issues/89122)\n* On 2021-11-06, [Implementation of GATs outlives lint](https://github.com/rust-lang/rust/pull/89970)\n* On 2021-12-29. [Parse and suggest moving where clauses after equals for type aliases](https://github.com/rust-lang/rust/pull/92118)\n* On 2022-01-15, [Ignore static lifetimes for GATs outlives lint](https://github.com/rust-lang/rust/pull/92865)\n* On 2022-02-08, [Don't constrain projection predicates with inference vars in GAT substs](https://github.com/rust-lang/rust/pull/92917)\n* On 2022-02-15, [Rework GAT where clause check](https://github.com/rust-lang/rust/pull/93820)\n* On 2022-02-19, [Only mark projection as ambiguous if GAT substs are constrained](https://github.com/rust-lang/rust/pull/93892)\n* On 2022-03-03, [Support GATs in Rustdoc](https://github.com/rust-lang/rust/pull/94009)\n* On 2022-03-06, [Change location of where clause on GATs](https://github.com/rust-lang/rust/pull/90076)\n* On 2022-05-04, [A shiny future with GATs blog post](https://jackh726.github.io/rust/2022/05/04/a-shiny-future-with-gats.html)\n* On 2022-05-04, [Stabilization PR](https://github.com/rust-lang/rust/pull/96709)", "tree": {"sha": "472773a6b3fb8478c939a8dc01766a5fd7e55513", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/472773a6b3fb8478c939a8dc01766a5fd7e55513"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9e47e724f72643232569aeab06180d545267ec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e47e724f72643232569aeab06180d545267ec6", "html_url": "https://github.com/rust-lang/rust/commit/c9e47e724f72643232569aeab06180d545267ec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9e47e724f72643232569aeab06180d545267ec6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e40972ebf86040de884d5b5b54e3345af504c140", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40972ebf86040de884d5b5b54e3345af504c140", "html_url": "https://github.com/rust-lang/rust/commit/e40972ebf86040de884d5b5b54e3345af504c140"}, {"sha": "748b031056f109b0e2e58ab1e2f0189b83c32f3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/748b031056f109b0e2e58ab1e2f0189b83c32f3e", "html_url": "https://github.com/rust-lang/rust/commit/748b031056f109b0e2e58ab1e2f0189b83c32f3e"}], "stats": {"total": 12, "additions": 0, "deletions": 12}, "files": [{"sha": "9482512efca0a4dd94062b992478ddc6a95e1795", "filename": "tests/source/issue_4257.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9e47e724f72643232569aeab06180d545267ec6/tests%2Fsource%2Fissue_4257.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e47e724f72643232569aeab06180d545267ec6/tests%2Fsource%2Fissue_4257.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_4257.rs?ref=c9e47e724f72643232569aeab06180d545267ec6", "patch": "@@ -1,6 +1,3 @@\n-#![feature(generic_associated_types)]\n-#![allow(incomplete_features)]\n-\n trait Trait<T> {\n     type Type<'a> where T: 'a;\n     fn foo(x: &T) -> Self::Type<'_>;"}, {"sha": "c254db7b509cc765189cacc188f56a28490dae3f", "filename": "tests/source/issue_4911.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9e47e724f72643232569aeab06180d545267ec6/tests%2Fsource%2Fissue_4911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e47e724f72643232569aeab06180d545267ec6/tests%2Fsource%2Fissue_4911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_4911.rs?ref=c9e47e724f72643232569aeab06180d545267ec6", "patch": "@@ -1,4 +1,3 @@\n-#![feature(generic_associated_types)]\n #![feature(min_type_alias_impl_trait)]\n \n impl SomeTrait for SomeType {"}, {"sha": "307d9a4a1aba195c5a342d9e2ae7bcf8e20c28ba", "filename": "tests/source/issue_4943.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e47e724f72643232569aeab06180d545267ec6/tests%2Fsource%2Fissue_4943.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e47e724f72643232569aeab06180d545267ec6/tests%2Fsource%2Fissue_4943.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue_4943.rs?ref=c9e47e724f72643232569aeab06180d545267ec6", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n impl SomeStruct {\n     fn process<T>(v: T) -> <Self as GAT>::R<T>\n     where Self: GAT<R<T> = T>"}, {"sha": "309a66c8dc3ccfb6e7782a36bb483a213926203d", "filename": "tests/target/issue_4257.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9e47e724f72643232569aeab06180d545267ec6/tests%2Ftarget%2Fissue_4257.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e47e724f72643232569aeab06180d545267ec6/tests%2Ftarget%2Fissue_4257.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4257.rs?ref=c9e47e724f72643232569aeab06180d545267ec6", "patch": "@@ -1,6 +1,3 @@\n-#![feature(generic_associated_types)]\n-#![allow(incomplete_features)]\n-\n trait Trait<T> {\n     type Type<'a>\n     where"}, {"sha": "0f64aa7f766fd649518262618f634d9e12f43d6e", "filename": "tests/target/issue_4911.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9e47e724f72643232569aeab06180d545267ec6/tests%2Ftarget%2Fissue_4911.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e47e724f72643232569aeab06180d545267ec6/tests%2Ftarget%2Fissue_4911.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4911.rs?ref=c9e47e724f72643232569aeab06180d545267ec6", "patch": "@@ -1,4 +1,3 @@\n-#![feature(generic_associated_types)]\n #![feature(min_type_alias_impl_trait)]\n \n impl SomeTrait for SomeType {"}, {"sha": "bc8f1a366da29d75c30ab1ee13af05d1d2ff30ee", "filename": "tests/target/issue_4943.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e47e724f72643232569aeab06180d545267ec6/tests%2Ftarget%2Fissue_4943.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e47e724f72643232569aeab06180d545267ec6/tests%2Ftarget%2Fissue_4943.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue_4943.rs?ref=c9e47e724f72643232569aeab06180d545267ec6", "patch": "@@ -1,5 +1,3 @@\n-#![feature(generic_associated_types)]\n-\n impl SomeStruct {\n     fn process<T>(v: T) -> <Self as GAT>::R<T>\n     where"}]}