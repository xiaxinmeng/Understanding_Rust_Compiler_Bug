{"sha": "9412316ac39db2a91284d809e2ada9c69afe5b50", "node_id": "C_kwDOAAsO6NoAKDk0MTIzMTZhYzM5ZGIyYTkxMjg0ZDgwOWUyYWRhOWM2OWFmZTViNTA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-28T02:12:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-28T02:12:09Z"}, "message": "Rollup merge of #88375 - joshlf:patch-3, r=dtolnay\n\nClarify that ManuallyDrop<T> has same layout as T\n\nThis PR implements the documentation change under discussion in https://github.com/rust-lang/unsafe-code-guidelines/issues/302. It should not be approved or merged until the discussion there is resolved.", "tree": {"sha": "35675b2780a562effc41ab8e4f5ff8f32e78b469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35675b2780a562effc41ab8e4f5ff8f32e78b469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9412316ac39db2a91284d809e2ada9c69afe5b50", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiQRl5CRBK7hj4Ov3rIwAAFo4IALHzrv7y1G+JS2mWkXZ/bCOK\nOtznYsXD/oQ8xLMepiWWmE1Ul4iae/72hacvdhPsX/eZx2DTfG4McMvbt+ITZZq4\nAkv0WWvqr7EcNXUAxLucxX1FOhP3DPgSfLnS+E59vrKVGeovNIX28koEhqp3kIsw\nRBUlTDa5q4jIsMYieaDo5OtAv3iBOyT1ql+78QxeretQaYUQEP7m3YRgA1MFrsat\nt0YMwnsCifKNbECSqS0iGpt4ljzK9zAtwikLeSWtyQQfK8BlMI6m/Usyqapinxu1\npRbHP2qgMyYo12R26h6BMgbhtt9vjwy5bXLiOdnH3ou0/h2LEOYSKoqZq+LQ/uQ=\n=QQdc\n-----END PGP SIGNATURE-----\n", "payload": "tree 35675b2780a562effc41ab8e4f5ff8f32e78b469\nparent 62523045ec681ee8c2ecb8d395fbcaccf336284b\nparent 01b9fac09924de8be7fd3479d8a900f57b9c710f\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648433529 +0200\ncommitter GitHub <noreply@github.com> 1648433529 +0200\n\nRollup merge of #88375 - joshlf:patch-3, r=dtolnay\n\nClarify that ManuallyDrop<T> has same layout as T\n\nThis PR implements the documentation change under discussion in https://github.com/rust-lang/unsafe-code-guidelines/issues/302. It should not be approved or merged until the discussion there is resolved.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9412316ac39db2a91284d809e2ada9c69afe5b50", "html_url": "https://github.com/rust-lang/rust/commit/9412316ac39db2a91284d809e2ada9c69afe5b50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9412316ac39db2a91284d809e2ada9c69afe5b50/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62523045ec681ee8c2ecb8d395fbcaccf336284b", "url": "https://api.github.com/repos/rust-lang/rust/commits/62523045ec681ee8c2ecb8d395fbcaccf336284b", "html_url": "https://github.com/rust-lang/rust/commit/62523045ec681ee8c2ecb8d395fbcaccf336284b"}, {"sha": "01b9fac09924de8be7fd3479d8a900f57b9c710f", "url": "https://api.github.com/repos/rust-lang/rust/commits/01b9fac09924de8be7fd3479d8a900f57b9c710f", "html_url": "https://github.com/rust-lang/rust/commit/01b9fac09924de8be7fd3479d8a900f57b9c710f"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "3d719afe49e4a5c0ff1b842e70b5ab75299c18ef", "filename": "library/core/src/mem/manually_drop.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9412316ac39db2a91284d809e2ada9c69afe5b50/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9412316ac39db2a91284d809e2ada9c69afe5b50/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmanually_drop.rs?ref=9412316ac39db2a91284d809e2ada9c69afe5b50", "patch": "@@ -4,11 +4,12 @@ use crate::ptr;\n /// A wrapper to inhibit compiler from automatically calling `T`\u2019s destructor.\n /// This wrapper is 0-cost.\n ///\n-/// `ManuallyDrop<T>` is subject to the same layout optimizations as `T`.\n-/// As a consequence, it has *no effect* on the assumptions that the compiler makes\n-/// about its contents. For example, initializing a `ManuallyDrop<&mut T>`\n-/// with [`mem::zeroed`] is undefined behavior.\n-/// If you need to handle uninitialized data, use [`MaybeUninit<T>`] instead.\n+/// `ManuallyDrop<T>` is guaranteed to have the same layout as `T`, and is subject\n+/// to the same layout optimizations as `T`. As a consequence, it has *no effect*\n+/// on the assumptions that the compiler makes about its contents. For example,\n+/// initializing a `ManuallyDrop<&mut T>` with [`mem::zeroed`] is undefined\n+/// behavior. If you need to handle uninitialized data, use [`MaybeUninit<T>`]\n+/// instead.\n ///\n /// Note that accessing the value inside a `ManuallyDrop<T>` is safe.\n /// This means that a `ManuallyDrop<T>` whose content has been dropped must not"}]}