{"sha": "f57413b717e12449612068406063571f6a4b43a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NzQxM2I3MTdlMTI0NDk2MTIwNjg0MDYwNjM1NzFmNmE0YjQzYTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-16T01:42:27Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-11-16T21:23:19Z"}, "message": "Suggest borrowing when it would satisfy an unmet trait bound\n\nWhen there are multiple implementors for the same trait that is present\nin an unmet binding, modify the E0277 error to refer to the parent\nobligation and verify whether borrowing the argument being passed in\nwould satisfy the unmet bound. If it would, suggest it.", "tree": {"sha": "321ec05c93379cc60037747519549333b476feff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/321ec05c93379cc60037747519549333b476feff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f57413b717e12449612068406063571f6a4b43a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f57413b717e12449612068406063571f6a4b43a9", "html_url": "https://github.com/rust-lang/rust/commit/f57413b717e12449612068406063571f6a4b43a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f57413b717e12449612068406063571f6a4b43a9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "405a3dd91c4e844652c09810e71183babc9ed160", "url": "https://api.github.com/repos/rust-lang/rust/commits/405a3dd91c4e844652c09810e71183babc9ed160", "html_url": "https://github.com/rust-lang/rust/commit/405a3dd91c4e844652c09810e71183babc9ed160"}], "stats": {"total": 131, "additions": 107, "deletions": 24}, "files": [{"sha": "35790324a2f62ff955857f0334dce43f21ae6dd3", "filename": "src/libcore/ops/function.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f57413b717e12449612068406063571f6a4b43a9/src%2Flibcore%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57413b717e12449612068406063571f6a4b43a9/src%2Flibcore%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Ffunction.rs?ref=f57413b717e12449612068406063571f6a4b43a9", "patch": "@@ -137,10 +137,6 @@ pub trait Fn<Args> : FnMut<Args> {\n #[rustc_paren_sugar]\n #[rustc_on_unimplemented(\n     on(Args=\"()\", note=\"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}\"),\n-    on(\n-        all(Args=\"(char,)\", _Self=\"std::string::String\"),\n-        note=\"borrowing the `{Self}` might fix the problem\"\n-    ),\n     message=\"expected a `{FnMut}<{Args}>` closure, found `{Self}`\",\n     label=\"expected an `FnMut<{Args}>` closure, found `{Self}`\",\n )]"}, {"sha": "f511862b37b84e2fb5f297276b250a9b727c66cd", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 72, "deletions": 2, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/f57413b717e12449612068406063571f6a4b43a9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57413b717e12449612068406063571f6a4b43a9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=f57413b717e12449612068406063571f6a4b43a9", "patch": "@@ -33,7 +33,7 @@ use crate::ty::subst::Subst;\n use crate::ty::SubtypePredicate;\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n-use errors::{Applicability, DiagnosticBuilder, pluralize};\n+use errors::{Applicability, DiagnosticBuilder, pluralise, Style};\n use std::fmt;\n use syntax::ast;\n use syntax::symbol::{sym, kw};\n@@ -723,7 +723,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             post_message,\n                             pre_message,\n                         ) = self.get_parent_trait_ref(&obligation.cause.code)\n-                                .map(|t| (format!(\" in `{}`\", t), format!(\"within `{}`, \", t)))\n+                            .map(|t| (format!(\" in `{}`\", t), format!(\"within `{}`, \", t)))\n                             .unwrap_or_default();\n \n                         let OnUnimplementedNote {\n@@ -787,6 +787,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         self.suggest_borrow_on_unsized_slice(&obligation.cause.code, &mut err);\n                         self.suggest_fn_call(&obligation, &mut err, &trait_ref, points_at_arg);\n                         self.suggest_remove_reference(&obligation, &mut err, &trait_ref);\n+                        if self.suggest_add_reference_to_arg(\n+                            &obligation,\n+                            &mut err,\n+                            &trait_ref,\n+                            points_at_arg,\n+                        ) {\n+                            self.note_obligation_cause(&mut err, obligation);\n+                            err.emit();\n+                            return;\n+                        }\n                         self.suggest_semicolon_removal(&obligation, &mut err, span, &trait_ref);\n \n                         // Try to report a help message\n@@ -1302,6 +1312,66 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_add_reference_to_arg(\n+        &self,\n+        obligation: &PredicateObligation<'tcx>,\n+        err: &mut DiagnosticBuilder<'tcx>,\n+        trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n+        points_at_arg: bool,\n+    ) -> bool {\n+        if !points_at_arg {\n+            return false;\n+        }\n+\n+        let span = obligation.cause.span;\n+        let param_env = obligation.param_env;\n+        let trait_ref = trait_ref.skip_binder();\n+\n+        if let ObligationCauseCode::ImplDerivedObligation(obligation) = &obligation.cause.code {\n+            // Try to apply the original trait binding obligation by borrowing.\n+            let self_ty = trait_ref.self_ty();\n+            let found = self_ty.to_string();\n+            let new_self_ty = self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, self_ty);\n+            let substs = self.tcx.mk_substs_trait(new_self_ty, &[]);\n+            let new_trait_ref = ty::TraitRef::new(obligation.parent_trait_ref.def_id(), substs);\n+            let new_obligation = Obligation::new(\n+                ObligationCause::dummy(),\n+                param_env,\n+                new_trait_ref.to_predicate(),\n+            );\n+            if self.predicate_may_hold(&new_obligation) {\n+                if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                    // We have a very specific type of error, where just borrowing this argument\n+                    // might solve the problem. In cases like this, the important part is the\n+                    // original type obligation, not the last one that failed, which is arbitrary.\n+                    // Because of this, we modify the error to refer to the original obligation and\n+                    // return early in the caller.\n+                    err.message = vec![(\n+                        format!(\n+                            \"the trait bound `{}: {}` is not satisfied\",\n+                            found,\n+                            obligation.parent_trait_ref.skip_binder(),\n+                        ),\n+                        Style::NoStyle,\n+                    )];\n+                    if snippet.starts_with('&') {\n+                        // This is already a literal borrow and the obligation is failing\n+                        // somewhere else in the obligation chain. Do not suggest non-sense.\n+                        return false;\n+                    }\n+                    err.span_suggestion(\n+                        span,\n+                        \"consider borrowing here\",\n+                        format!(\"&{}\", snippet),\n+                        Applicability::MachineApplicable,\n+                    );\n+                    return true;\n+                }\n+            }\n+        }\n+        false\n+    }\n+\n     /// Whenever references are used by mistake, like `for (i, e) in &vec.iter().enumerate()`,\n     /// suggest removing these references until we reach a type that implements the trait.\n     fn suggest_remove_reference("}, {"sha": "06b3157a77a84c4a463e15a478cbed71d7331fbe", "filename": "src/test/ui/derives/deriving-copyclone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f57413b717e12449612068406063571f6a4b43a9/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57413b717e12449612068406063571f6a4b43a9/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.rs?ref=f57413b717e12449612068406063571f6a4b43a9", "patch": "@@ -28,10 +28,10 @@ fn main() {\n     is_clone(B { a: 1, b: 2 });\n \n     // B<C> cannot be copied or cloned\n-    is_copy(B { a: 1, b: C }); //~ERROR Copy\n-    is_clone(B { a: 1, b: C }); //~ERROR Clone\n+    is_copy(B { a: 1, b: C }); //~ ERROR Copy\n+    is_clone(B { a: 1, b: C }); //~ ERROR Clone\n \n     // B<D> can be cloned but not copied\n-    is_copy(B { a: 1, b: D }); //~ERROR Copy\n+    is_copy(B { a: 1, b: D }); //~ ERROR Copy\n     is_clone(B { a: 1, b: D });\n }"}, {"sha": "561706469c648cddb4179d4f71af317353fa0359", "filename": "src/test/ui/derives/deriving-copyclone.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f57413b717e12449612068406063571f6a4b43a9/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f57413b717e12449612068406063571f6a4b43a9/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fderiving-copyclone.stderr?ref=f57413b717e12449612068406063571f6a4b43a9", "patch": "@@ -5,7 +5,10 @@ LL | fn is_copy<T: Copy>(_: T) {}\n    |    -------    ---- required by this bound in `is_copy`\n ...\n LL |     is_copy(B { a: 1, b: C });\n-   |             ^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `C`\n+   |             ^^^^^^^^^^^^^^^^\n+   |             |\n+   |             the trait `std::marker::Copy` is not implemented for `C`\n+   |             help: consider borrowing here: `&B { a: 1, b: C }`\n    |\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `B<C>`\n \n@@ -16,7 +19,10 @@ LL | fn is_clone<T: Clone>(_: T) {}\n    |    --------    ----- required by this bound in `is_clone`\n ...\n LL |     is_clone(B { a: 1, b: C });\n-   |              ^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `C`\n+   |              ^^^^^^^^^^^^^^^^\n+   |              |\n+   |              the trait `std::clone::Clone` is not implemented for `C`\n+   |              help: consider borrowing here: `&B { a: 1, b: C }`\n    |\n    = note: required because of the requirements on the impl of `std::clone::Clone` for `B<C>`\n \n@@ -27,7 +33,10 @@ LL | fn is_copy<T: Copy>(_: T) {}\n    |    -------    ---- required by this bound in `is_copy`\n ...\n LL |     is_copy(B { a: 1, b: D });\n-   |             ^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `D`\n+   |             ^^^^^^^^^^^^^^^^\n+   |             |\n+   |             the trait `std::marker::Copy` is not implemented for `D`\n+   |             help: consider borrowing here: `&B { a: 1, b: D }`\n    |\n    = note: required because of the requirements on the impl of `std::marker::Copy` for `B<D>`\n "}, {"sha": "d5fcc68a759cb9f971352ffc0cdfb0c388010e41", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f57413b717e12449612068406063571f6a4b43a9/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57413b717e12449612068406063571f6a4b43a9/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.rs?ref=f57413b717e12449612068406063571f6a4b43a9", "patch": "@@ -11,5 +11,5 @@ fn take_param<T:Foo>(foo: &T) { }\n fn main() {\n     let x: Box<_> = box 3;\n     take_param(&x);\n-    //~^ ERROR `std::boxed::Box<{integer}>: std::marker::Copy` is not satisfied\n+    //~^ ERROR the trait bound `std::boxed::Box<{integer}>: Foo` is not satisfied\n }"}, {"sha": "318b7b0f10a0af4cbcfb67749817bfadab8b437a", "filename": "src/test/ui/kindck/kindck-impl-type-params-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f57413b717e12449612068406063571f6a4b43a9/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f57413b717e12449612068406063571f6a4b43a9/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params-2.stderr?ref=f57413b717e12449612068406063571f6a4b43a9", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `std::boxed::Box<{integer}>: std::marker::Copy` is not satisfied\n+error[E0277]: the trait bound `std::boxed::Box<{integer}>: Foo` is not satisfied\n   --> $DIR/kindck-impl-type-params-2.rs:13:16\n    |\n LL | fn take_param<T:Foo>(foo: &T) { }"}, {"sha": "da1a7a7520e07436857bff2ff28b6afa69e81695", "filename": "src/test/ui/kindck/kindck-inherited-copy-bound.curr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f57413b717e12449612068406063571f6a4b43a9/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f57413b717e12449612068406063571f6a4b43a9/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-inherited-copy-bound.curr.stderr?ref=f57413b717e12449612068406063571f6a4b43a9", "patch": "@@ -1,4 +1,4 @@\n-error[E0277]: the trait bound `std::boxed::Box<{integer}>: std::marker::Copy` is not satisfied\n+error[E0277]: the trait bound `std::boxed::Box<{integer}>: Foo` is not satisfied\n   --> $DIR/kindck-inherited-copy-bound.rs:21:16\n    |\n LL | fn take_param<T:Foo>(foo: &T) { }"}, {"sha": "9535bf1b2ced5f60d6b8a7caf28cfa87540b0c64", "filename": "src/test/ui/suggestions/issue-62843.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f57413b717e12449612068406063571f6a4b43a9/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f57413b717e12449612068406063571f6a4b43a9/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-62843.stderr?ref=f57413b717e12449612068406063571f6a4b43a9", "patch": "@@ -1,11 +1,13 @@\n-error[E0277]: expected a `std::ops::FnMut<(char,)>` closure, found `std::string::String`\n+error[E0277]: the trait bound `std::string::String: std::str::pattern::Pattern<'_>` is not satisfied\n   --> $DIR/issue-62843.rs:4:32\n    |\n LL |     println!(\"{:?}\", line.find(pattern));\n-   |                                ^^^^^^^ expected an `FnMut<(char,)>` closure, found `std::string::String`\n+   |                                ^^^^^^^\n+   |                                |\n+   |                                expected an `FnMut<(char,)>` closure, found `std::string::String`\n+   |                                help: consider borrowing here: `&pattern`\n    |\n    = help: the trait `std::ops::FnMut<(char,)>` is not implemented for `std::string::String`\n-   = note: borrowing the `std::string::String` might fix the problem\n    = note: required because of the requirements on the impl of `std::str::pattern::Pattern<'_>` for `std::string::String`\n \n error: aborting due to previous error"}, {"sha": "8ed39986781cd3354d4ed5c1194ccf11cca238d1", "filename": "src/test/ui/traits/traits-negative-impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f57413b717e12449612068406063571f6a4b43a9/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f57413b717e12449612068406063571f6a4b43a9/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.rs?ref=f57413b717e12449612068406063571f6a4b43a9", "patch": "@@ -46,7 +46,7 @@ fn dummy2() {\n     impl !Send for TestType {}\n \n     is_send(Box::new(TestType));\n-    //~^ ERROR `dummy2::TestType` cannot be sent between threads safely\n+    //~^ ERROR the trait bound `dummy2::TestType: std::marker::Send` is not satisfied\n }\n \n fn dummy3() {\n@@ -64,5 +64,5 @@ fn main() {\n     // This will complain about a missing Send impl because `Sync` is implement *just*\n     // for T that are `Send`. Look at #20366 and #19950\n     is_sync(Outer2(TestType));\n-    //~^ ERROR `main::TestType` cannot be sent between threads safely\n+    //~^ ERROR the trait bound `main::TestType: std::marker::Sync` is not satisfied\n }"}, {"sha": "448bb90205d035810eced2d5b8de64720b9a0157", "filename": "src/test/ui/traits/traits-negative-impls.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f57413b717e12449612068406063571f6a4b43a9/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f57413b717e12449612068406063571f6a4b43a9/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-negative-impls.stderr?ref=f57413b717e12449612068406063571f6a4b43a9", "patch": "@@ -43,14 +43,17 @@ LL |     is_send((8, TestType));\n    = help: within `({integer}, dummy1c::TestType)`, the trait `std::marker::Send` is not implemented for `dummy1c::TestType`\n    = note: required because it appears within the type `({integer}, dummy1c::TestType)`\n \n-error[E0277]: `dummy2::TestType` cannot be sent between threads safely\n+error[E0277]: the trait bound `dummy2::TestType: std::marker::Send` is not satisfied\n   --> $DIR/traits-negative-impls.rs:48:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |    -------    ---- required by this bound in `is_send`\n ...\n LL |     is_send(Box::new(TestType));\n-   |             ^^^^^^^^^^^^^^^^^^ `dummy2::TestType` cannot be sent between threads safely\n+   |             ^^^^^^^^^^^^^^^^^^\n+   |             |\n+   |             `dummy2::TestType` cannot be sent between threads safely\n+   |             help: consider borrowing here: `&Box::new(TestType)`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `dummy2::TestType`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<dummy2::TestType>`\n@@ -70,14 +73,17 @@ LL |     is_send(Box::new(Outer2(TestType)));\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<Outer2<dummy3::TestType>>`\n    = note: required because it appears within the type `std::boxed::Box<Outer2<dummy3::TestType>>`\n \n-error[E0277]: `main::TestType` cannot be sent between threads safely\n+error[E0277]: the trait bound `main::TestType: std::marker::Sync` is not satisfied\n   --> $DIR/traits-negative-impls.rs:66:13\n    |\n LL | fn is_sync<T: Sync>(_: T) {}\n    |    -------    ---- required by this bound in `is_sync`\n ...\n LL |     is_sync(Outer2(TestType));\n-   |             ^^^^^^^^^^^^^^^^ `main::TestType` cannot be sent between threads safely\n+   |             ^^^^^^^^^^^^^^^^\n+   |             |\n+   |             `main::TestType` cannot be sent between threads safely\n+   |             help: consider borrowing here: `&Outer2(TestType)`\n    |\n    = help: the trait `std::marker::Send` is not implemented for `main::TestType`\n    = note: required because of the requirements on the impl of `std::marker::Sync` for `Outer2<main::TestType>`"}]}