{"sha": "580c6a29d47a9cd786c89df98d97e6de13f49291", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MGM2YTI5ZDQ3YTljZDc4NmM4OWRmOThkOTdlNmRlMTNmNDkyOTE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-07T18:18:29Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-03-11T18:17:32Z"}, "message": "resolve: Print import chains on privacy errors", "tree": {"sha": "064f712e2c1801b4db351f29773e3af3b9624c5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/064f712e2c1801b4db351f29773e3af3b9624c5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/580c6a29d47a9cd786c89df98d97e6de13f49291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/580c6a29d47a9cd786c89df98d97e6de13f49291", "html_url": "https://github.com/rust-lang/rust/commit/580c6a29d47a9cd786c89df98d97e6de13f49291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/580c6a29d47a9cd786c89df98d97e6de13f49291/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71ebc6182012d80e076e4aaa03e0dbe44132fcbf", "url": "https://api.github.com/repos/rust-lang/rust/commits/71ebc6182012d80e076e4aaa03e0dbe44132fcbf", "html_url": "https://github.com/rust-lang/rust/commit/71ebc6182012d80e076e4aaa03e0dbe44132fcbf"}], "stats": {"total": 113, "additions": 95, "deletions": 18}, "files": [{"sha": "063c62ad9aac781c8829e92f98a97f816232f126", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 49, "deletions": 12, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/580c6a29d47a9cd786c89df98d97e6de13f49291/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580c6a29d47a9cd786c89df98d97e6de13f49291/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=580c6a29d47a9cd786c89df98d97e6de13f49291", "patch": "@@ -1,4 +1,5 @@\n use std::cmp::Reverse;\n+use std::ptr;\n \n use log::debug;\n use rustc::bug;\n@@ -936,26 +937,62 @@ impl<'a> Resolver<'a> {\n     crate fn report_privacy_error(&self, privacy_error: &PrivacyError<'_>) {\n         let PrivacyError { ident, binding, .. } = *privacy_error;\n \n+        let res = binding.res();\n         let ctor_fields_span = self.ctor_fields_span(binding);\n-        let mut descr = binding.res().descr().to_string();\n-        if ctor_fields_span.is_some() {\n-            descr += \" constructor\";\n-        }\n-        if binding.is_import() {\n-            descr += \" import\";\n-        }\n-\n+        let plain_descr = res.descr().to_string();\n+        let nonimport_descr =\n+            if ctor_fields_span.is_some() { plain_descr + \" constructor\" } else { plain_descr };\n+        let import_descr = nonimport_descr.clone() + \" import\";\n+        let get_descr =\n+            |b: &NameBinding<'_>| if b.is_import() { &import_descr } else { &nonimport_descr };\n+\n+        // Print the primary message.\n+        let descr = get_descr(binding);\n         let mut err =\n             struct_span_err!(self.session, ident.span, E0603, \"{} `{}` is private\", descr, ident);\n         err.span_label(ident.span, &format!(\"this {} is private\", descr));\n         if let Some(span) = ctor_fields_span {\n             err.span_label(span, \"a constructor is private if any of the fields is private\");\n         }\n \n-        err.span_note(\n-            self.session.source_map().def_span(binding.span),\n-            &format!(\"the {} `{}` is defined here\", descr, ident),\n-        );\n+        // Print the whole import chain to make it easier to see what happens.\n+        let first_binding = binding;\n+        let mut next_binding = Some(binding);\n+        let mut next_ident = ident;\n+        while let Some(binding) = next_binding {\n+            let name = next_ident;\n+            next_binding = match binding.kind {\n+                _ if res == Res::Err => None,\n+                NameBindingKind::Import { binding, import, .. } => match import.kind {\n+                    _ if binding.span.is_dummy() => None,\n+                    ImportKind::Single { source, .. } => {\n+                        next_ident = source;\n+                        Some(binding)\n+                    }\n+                    ImportKind::Glob { .. } | ImportKind::MacroUse => Some(binding),\n+                    ImportKind::ExternCrate { .. } => None,\n+                },\n+                _ => None,\n+            };\n+\n+            let first = ptr::eq(binding, first_binding);\n+            let descr = get_descr(binding);\n+            let msg = format!(\n+                \"{and_refers_to}the {item} `{name}`{which} is defined here{dots}\",\n+                and_refers_to = if first { \"\" } else { \"...and refers to \" },\n+                item = descr,\n+                name = name,\n+                which = if first { \"\" } else { \" which\" },\n+                dots = if next_binding.is_some() { \"...\" } else { \"\" },\n+            );\n+            let def_span = self.session.source_map().def_span(binding.span);\n+            let mut note_span = MultiSpan::from_span(def_span);\n+            if !first && next_binding.is_none() && binding.vis == ty::Visibility::Public {\n+                note_span.push_span_label(def_span, \"consider importing it directly\".into());\n+            }\n+            err.span_note(note_span, &msg);\n+        }\n+\n         err.emit();\n     }\n }"}, {"sha": "3eee7118e5a2290f1d74d722ad08a5823a929b08", "filename": "src/test/ui/imports/issue-55884-2.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/580c6a29d47a9cd786c89df98d97e6de13f49291/src%2Ftest%2Fui%2Fimports%2Fissue-55884-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/580c6a29d47a9cd786c89df98d97e6de13f49291/src%2Ftest%2Fui%2Fimports%2Fissue-55884-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-55884-2.stderr?ref=580c6a29d47a9cd786c89df98d97e6de13f49291", "patch": "@@ -4,11 +4,26 @@ error[E0603]: struct import `ParseOptions` is private\n LL | pub use parser::ParseOptions;\n    |                 ^^^^^^^^^^^^ this struct import is private\n    |\n-note: the struct import `ParseOptions` is defined here\n+note: the struct import `ParseOptions` is defined here...\n   --> $DIR/issue-55884-2.rs:9:9\n    |\n LL |     use ParseOptions;\n    |         ^^^^^^^^^^^^\n+note: ...and refers to the struct import `ParseOptions` which is defined here...\n+  --> $DIR/issue-55884-2.rs:12:9\n+   |\n+LL | pub use parser::ParseOptions;\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+note: ...and refers to the struct import `ParseOptions` which is defined here...\n+  --> $DIR/issue-55884-2.rs:6:13\n+   |\n+LL |     pub use options::*;\n+   |             ^^^^^^^^^^\n+note: ...and refers to the struct `ParseOptions` which is defined here\n+  --> $DIR/issue-55884-2.rs:2:5\n+   |\n+LL |     pub struct ParseOptions {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ consider importing it directly\n \n error: aborting due to previous error\n "}, {"sha": "d63fbc7ec6781d6c378f7e6e6a60d7dc31c734f9", "filename": "src/test/ui/imports/reexports.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/580c6a29d47a9cd786c89df98d97e6de13f49291/src%2Ftest%2Fui%2Fimports%2Freexports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/580c6a29d47a9cd786c89df98d97e6de13f49291/src%2Ftest%2Fui%2Fimports%2Freexports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Freexports.stderr?ref=580c6a29d47a9cd786c89df98d97e6de13f49291", "patch": "@@ -16,23 +16,33 @@ error[E0603]: module import `foo` is private\n LL |     use b::a::foo::S;\n    |               ^^^ this module import is private\n    |\n-note: the module import `foo` is defined here\n+note: the module import `foo` is defined here...\n   --> $DIR/reexports.rs:21:17\n    |\n LL |         pub use super::foo; // This is OK since the value `foo` is visible enough.\n    |                 ^^^^^^^^^^\n+note: ...and refers to the module `foo` which is defined here\n+  --> $DIR/reexports.rs:16:5\n+   |\n+LL |     mod foo {\n+   |     ^^^^^^^\n \n error[E0603]: module import `foo` is private\n   --> $DIR/reexports.rs:34:15\n    |\n LL |     use b::b::foo::S as T;\n    |               ^^^ this module import is private\n    |\n-note: the module import `foo` is defined here\n+note: the module import `foo` is defined here...\n   --> $DIR/reexports.rs:26:17\n    |\n LL |         pub use super::*; // This is also OK since the value `foo` is visible enough.\n    |                 ^^^^^^^^\n+note: ...and refers to the module `foo` which is defined here\n+  --> $DIR/reexports.rs:16:5\n+   |\n+LL |     mod foo {\n+   |     ^^^^^^^\n \n warning: glob import doesn't reexport anything because no candidate is public enough\n   --> $DIR/reexports.rs:9:17"}, {"sha": "b10c3a5265971c6ce14fedcf765f92c267486dbf", "filename": "src/test/ui/privacy/privacy2.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/580c6a29d47a9cd786c89df98d97e6de13f49291/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/580c6a29d47a9cd786c89df98d97e6de13f49291/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr?ref=580c6a29d47a9cd786c89df98d97e6de13f49291", "patch": "@@ -10,11 +10,16 @@ error[E0603]: function import `foo` is private\n LL |     use bar::glob::foo;\n    |                    ^^^ this function import is private\n    |\n-note: the function import `foo` is defined here\n+note: the function import `foo` is defined here...\n   --> $DIR/privacy2.rs:10:13\n    |\n LL |         use foo;\n    |             ^^^\n+note: ...and refers to the function `foo` which is defined here\n+  --> $DIR/privacy2.rs:14:1\n+   |\n+LL | pub fn foo() {}\n+   | ^^^^^^^^^^^^ consider importing it directly\n \n error: requires `sized` lang_item\n "}, {"sha": "2244f3a46b266b3e05851f5f4da883795993863b", "filename": "src/test/ui/shadowed/shadowed-use-visibility.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/580c6a29d47a9cd786c89df98d97e6de13f49291/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-use-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/580c6a29d47a9cd786c89df98d97e6de13f49291/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-use-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-use-visibility.stderr?ref=580c6a29d47a9cd786c89df98d97e6de13f49291", "patch": "@@ -4,23 +4,33 @@ error[E0603]: module import `bar` is private\n LL |     use foo::bar::f as g;\n    |              ^^^ this module import is private\n    |\n-note: the module import `bar` is defined here\n+note: the module import `bar` is defined here...\n   --> $DIR/shadowed-use-visibility.rs:4:9\n    |\n LL |     use foo as bar;\n    |         ^^^^^^^^^^\n+note: ...and refers to the module `foo` which is defined here\n+  --> $DIR/shadowed-use-visibility.rs:1:1\n+   |\n+LL | mod foo {\n+   | ^^^^^^^\n \n error[E0603]: module import `f` is private\n   --> $DIR/shadowed-use-visibility.rs:15:10\n    |\n LL | use bar::f::f;\n    |          ^ this module import is private\n    |\n-note: the module import `f` is defined here\n+note: the module import `f` is defined here...\n   --> $DIR/shadowed-use-visibility.rs:11:9\n    |\n LL |     use foo as f;\n    |         ^^^^^^^^\n+note: ...and refers to the module `foo` which is defined here\n+  --> $DIR/shadowed-use-visibility.rs:1:1\n+   |\n+LL | mod foo {\n+   | ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}]}