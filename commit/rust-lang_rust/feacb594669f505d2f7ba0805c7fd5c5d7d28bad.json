{"sha": "feacb594669f505d2f7ba0805c7fd5c5d7d28bad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlYWNiNTk0NjY5ZjUwNWQyZjdiYTA4MDVjN2ZkNWM1ZDdkMjhiYWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-27T20:06:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-27T20:06:47Z"}, "message": "auto merge of #11841 : huonw/rust/noinline-fail, r=alexcrichton\n\nIn two ways:\r\n- for a plain `fail!(a)` we make the generic part of `begin_unwind` as small as possible (makes `fn main() { fail!() }` compile 2-3x faster, due to less monomorphisation bloat)\r\n- for `fail!(\"format {}\", \"string\")`, we avoid touching the generics completely by doing the formatting in a specialised function, which (with optimisations) saves a function call at the call-site of `fail!`. (This one has significantly less benefit than the first.)", "tree": {"sha": "345b03546629c7fc63d39da3f2ec433b6d168f61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/345b03546629c7fc63d39da3f2ec433b6d168f61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feacb594669f505d2f7ba0805c7fd5c5d7d28bad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feacb594669f505d2f7ba0805c7fd5c5d7d28bad", "html_url": "https://github.com/rust-lang/rust/commit/feacb594669f505d2f7ba0805c7fd5c5d7d28bad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feacb594669f505d2f7ba0805c7fd5c5d7d28bad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6d7812da841ddedf6c765eebb655be9866956ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6d7812da841ddedf6c765eebb655be9866956ce", "html_url": "https://github.com/rust-lang/rust/commit/d6d7812da841ddedf6c765eebb655be9866956ce"}, {"sha": "b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212", "html_url": "https://github.com/rust-lang/rust/commit/b4bb8c0f4ee1234e9d84aa7cb1a9ad691a509212"}], "stats": {"total": 49, "additions": 43, "deletions": 6}, "files": [{"sha": "4032b63790bf6572c1cdd0361918d044ec8771c1", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/feacb594669f505d2f7ba0805c7fd5c5d7d28bad/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feacb594669f505d2f7ba0805c7fd5c5d7d28bad/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=feacb594669f505d2f7ba0805c7fd5c5d7d28bad", "patch": "@@ -48,8 +48,18 @@ macro_rules! fail(\n         ::std::rt::begin_unwind($msg, file!(), line!())\n     );\n     ($fmt:expr, $($arg:tt)*) => (\n-        ::std::rt::begin_unwind(format!($fmt, $($arg)*), file!(), line!())\n-    )\n+        {\n+            // a closure can't have return type !, so we need a full\n+            // function to pass to format_args!, *and* we need the\n+            // file and line numbers right here; so an inner bare fn\n+            // is our only choice.\n+            #[inline]\n+            fn run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n+                ::std::rt::begin_unwind_fmt(fmt, file!(), line!())\n+            }\n+            format_args!(run_fmt, $fmt, $($arg)*)\n+        }\n+        )\n )\n \n #[macro_export]"}, {"sha": "0e30f3e2efd0976990adc5cc32745dcc52335bde", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/feacb594669f505d2f7ba0805c7fd5c5d7d28bad/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feacb594669f505d2f7ba0805c7fd5c5d7d28bad/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=feacb594669f505d2f7ba0805c7fd5c5d7d28bad", "patch": "@@ -69,7 +69,7 @@ use self::task::{Task, BlockedTask};\n pub use self::util::default_sched_threads;\n \n // Export unwinding facilities used by the failure macros\n-pub use self::unwind::{begin_unwind, begin_unwind_raw};\n+pub use self::unwind::{begin_unwind, begin_unwind_raw, begin_unwind_fmt};\n \n // FIXME: these probably shouldn't be public...\n #[doc(hidden)]"}, {"sha": "25a92148e96a93fdbad153a9b0ebf16aca3a3b06", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/feacb594669f505d2f7ba0805c7fd5c5d7d28bad/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feacb594669f505d2f7ba0805c7fd5c5d7d28bad/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=feacb594669f505d2f7ba0805c7fd5c5d7d28bad", "patch": "@@ -58,6 +58,7 @@\n use any::{Any, AnyRefExt};\n use c_str::CString;\n use cast;\n+use fmt;\n use kinds::Send;\n use option::{Some, None, Option};\n use prelude::drop;\n@@ -382,17 +383,43 @@ pub fn begin_unwind_raw(msg: *u8, file: *u8, line: uint) -> ! {\n     begin_unwind(msg, file, line as uint)\n }\n \n+/// The entry point for unwinding with a formatted message.\n+///\n+/// This is designed to reduce the amount of code required at the call\n+/// site as much as possible (so that `fail!()` has as low an implact\n+/// on (e.g.) the inlining of other functions as possible), by moving\n+/// the actual formatting into this shared place.\n+#[inline(never)] #[cold]\n+pub fn begin_unwind_fmt(msg: &fmt::Arguments, file: &'static str, line: uint) -> ! {\n+    begin_unwind_inner(~fmt::format(msg), file, line)\n+}\n+\n /// This is the entry point of unwinding for fail!() and assert!().\n-#[inline(never)] #[cold] // this is the slow path, please never inline this\n+#[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n pub fn begin_unwind<M: Any + Send>(msg: M, file: &'static str, line: uint) -> ! {\n-    // Note that this should be the only allocation performed in this block.\n+    // Note that this should be the only allocation performed in this code path.\n     // Currently this means that fail!() on OOM will invoke this code path,\n     // but then again we're not really ready for failing on OOM anyway. If\n     // we do start doing this, then we should propagate this allocation to\n     // be performed in the parent of this task instead of the task that's\n     // failing.\n-    let msg = ~msg as ~Any;\n \n+    // see below for why we do the `Any` coercion here.\n+    begin_unwind_inner(~msg, file, line)\n+}\n+\n+\n+/// The core of the unwinding.\n+///\n+/// This is non-generic to avoid instantiation bloat in other crates\n+/// (which makes compilation of small crates noticably slower). (Note:\n+/// we need the `Any` object anyway, we're not just creating it to\n+/// avoid being generic.)\n+///\n+/// Do this split took the LLVM IR line counts of `fn main() { fail!()\n+/// }` from ~1900/3700 (-O/no opts) to 180/590.\n+#[inline(never)] #[cold] // this is the slow path, please never inline this\n+fn begin_unwind_inner(msg: ~Any, file: &'static str, line: uint) -> ! {\n     let mut task;\n     {\n         let msg_s = match msg.as_ref::<&'static str>() {"}]}