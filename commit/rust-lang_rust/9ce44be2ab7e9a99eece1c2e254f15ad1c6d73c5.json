{"sha": "9ce44be2ab7e9a99eece1c2e254f15ad1c6d73c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZTQ0YmUyYWI3ZTlhOTllZWNlMWMyZTI1NGYxNWFkMWM2ZDczYzU=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-05-27T12:51:08Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-27T14:10:26Z"}, "message": "Address review comments, have MissingUnsafe diagnostic point to each unsafe use, update tests", "tree": {"sha": "904c2c860ff62242bb01af23ea662c70cbe1152f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/904c2c860ff62242bb01af23ea662c70cbe1152f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ce44be2ab7e9a99eece1c2e254f15ad1c6d73c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce44be2ab7e9a99eece1c2e254f15ad1c6d73c5", "html_url": "https://github.com/rust-lang/rust/commit/9ce44be2ab7e9a99eece1c2e254f15ad1c6d73c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ce44be2ab7e9a99eece1c2e254f15ad1c6d73c5/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9569886a915f2411adaecbcad28eda8b163c3e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9569886a915f2411adaecbcad28eda8b163c3e3", "html_url": "https://github.com/rust-lang/rust/commit/b9569886a915f2411adaecbcad28eda8b163c3e3"}], "stats": {"total": 44, "additions": 19, "deletions": 25}, "files": [{"sha": "a59efb34768dcc7ce3656fbc8ce16e55909d293f", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ce44be2ab7e9a99eece1c2e254f15ad1c6d73c5/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce44be2ab7e9a99eece1c2e254f15ad1c6d73c5/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=9ce44be2ab7e9a99eece1c2e254f15ad1c6d73c5", "patch": "@@ -3,10 +3,7 @@\n use std::any::Any;\n \n use hir_expand::{db::AstDatabase, name::Name, HirFileId, InFile};\n-use ra_syntax::{\n-    ast::{self, NameOwner},\n-    AstNode, AstPtr, SyntaxNodePtr,\n-};\n+use ra_syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n use stdx::format_to;\n \n pub use hir_def::{diagnostics::UnresolvedModule, expr::MatchArm, path::Path};\n@@ -176,27 +173,27 @@ impl AstDiagnostic for BreakOutsideOfLoop {\n #[derive(Debug)]\n pub struct MissingUnsafe {\n     pub file: HirFileId,\n-    pub fn_def: AstPtr<ast::FnDef>,\n+    pub expr: AstPtr<ast::Expr>,\n }\n \n impl Diagnostic for MissingUnsafe {\n     fn message(&self) -> String {\n-        format!(\"Missing unsafe keyword on fn\")\n+        format!(\"This operation is unsafe and requires an unsafe function or block\")\n     }\n     fn source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.fn_def.clone().into() }\n+        InFile { file_id: self.file, value: self.expr.clone().into() }\n     }\n     fn as_any(&self) -> &(dyn Any + Send + 'static) {\n         self\n     }\n }\n \n impl AstDiagnostic for MissingUnsafe {\n-    type AST = ast::Name;\n+    type AST = ast::Expr;\n \n     fn ast(&self, db: &impl AstDatabase) -> Self::AST {\n         let root = db.parse_or_expand(self.source().file_id).unwrap();\n         let node = self.source().value.to_node(&root);\n-        ast::FnDef::cast(node).unwrap().name().unwrap()\n+        ast::Expr::cast(node).unwrap()\n     }\n }"}, {"sha": "5f332aadbba695bfc84c0e1a5b06c820919131fb", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9ce44be2ab7e9a99eece1c2e254f15ad1c6d73c5/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce44be2ab7e9a99eece1c2e254f15ad1c6d73c5/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=9ce44be2ab7e9a99eece1c2e254f15ad1c6d73c5", "patch": "@@ -2,9 +2,7 @@\n \n use std::sync::Arc;\n \n-use hir_def::{\n-    path::path, resolver::HasResolver, src::HasSource, AdtId, DefWithBodyId, FunctionId, Lookup,\n-};\n+use hir_def::{path::path, resolver::HasResolver, AdtId, DefWithBodyId, FunctionId};\n use hir_expand::diagnostics::DiagnosticSink;\n use ra_syntax::{ast, AstPtr};\n use rustc_hash::FxHashSet;\n@@ -346,7 +344,7 @@ pub fn unsafe_expressions(\n                 }\n             }\n             Expr::Call { callee, .. } => {\n-                let ty = &infer.type_of_expr[*callee];\n+                let ty = &infer[*callee];\n                 if let &Ty::Apply(ApplicationTy {\n                     ctor: TypeCtor::FnDef(CallableDef::FunctionId(func)),\n                     ..\n@@ -361,7 +359,7 @@ pub fn unsafe_expressions(\n                 if infer\n                     .method_resolution(id)\n                     .map(|func| db.function_data(func).is_unsafe)\n-                    .unwrap_or_else(|| false)\n+                    .unwrap_or(false)\n                 {\n                     unsafe_exprs.push(UnsafeExpr::new(id));\n                 }\n@@ -409,20 +407,19 @@ impl<'a, 'b> UnsafeValidator<'a, 'b> {\n         let func_data = db.function_data(self.func);\n         if func_data.is_unsafe\n             || unsafe_expressions\n-                .into_iter()\n+                .iter()\n                 .filter(|unsafe_expr| !unsafe_expr.inside_unsafe_block)\n                 .count()\n                 == 0\n         {\n             return;\n         }\n \n-        let loc = self.func.lookup(db.upcast());\n-        let in_file = loc.source(db.upcast());\n-\n-        let file = in_file.file_id;\n-        let fn_def = AstPtr::new(&in_file.value);\n-\n-        self.sink.push(MissingUnsafe { file, fn_def })\n+        let (_, body_source) = db.body_with_source_map(def);\n+        for unsafe_expr in unsafe_expressions {\n+            if let Ok(in_file) = body_source.as_ref().expr_syntax(unsafe_expr.expr) {\n+                self.sink.push(MissingUnsafe { file: in_file.file_id, expr: in_file.value })\n+            }\n+        }\n     }\n }"}, {"sha": "26b3aeb50e03dec4aec73bcc7185b47281cc46fa", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ce44be2ab7e9a99eece1c2e254f15ad1c6d73c5/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce44be2ab7e9a99eece1c2e254f15ad1c6d73c5/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=9ce44be2ab7e9a99eece1c2e254f15ad1c6d73c5", "patch": "@@ -552,7 +552,7 @@ fn missing_unsafe() {\n     .diagnostics()\n     .0;\n \n-    assert_snapshot!(diagnostics, @r#\"\"fn missing_unsafe() {\\n    let x = &5 as *const usize;\\n    let y = *x;\\n}\": Missing unsafe keyword on fn\"#);\n+    assert_snapshot!(diagnostics, @r#\"\"*x\": This operation is unsafe and requires an unsafe function or block\"#);\n }\n \n #[test]\n@@ -573,7 +573,7 @@ fn missing_unsafe() {\n     .diagnostics()\n     .0;\n \n-    assert_snapshot!(diagnostics, @r#\"\"fn missing_unsafe() {\\n    unsafe_fn();\\n}\": Missing unsafe keyword on fn\"#);\n+    assert_snapshot!(diagnostics, @r#\"\"unsafe_fn()\": This operation is unsafe and requires an unsafe function or block\"#);\n }\n \n #[test]\n@@ -599,7 +599,7 @@ fn missing_unsafe() {\n     .diagnostics()\n     .0;\n \n-    assert_snapshot!(diagnostics, @r#\"\"fn missing_unsafe() {\\n    HasUnsafe.unsafe_fn();\\n}\": Missing unsafe keyword on fn\"#);\n+    assert_snapshot!(diagnostics, @r#\"\"HasUnsafe.unsafe_fn()\": This operation is unsafe and requires an unsafe function or block\"#);\n }\n \n #[test]"}]}