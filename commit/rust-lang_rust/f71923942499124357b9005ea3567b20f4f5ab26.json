{"sha": "f71923942499124357b9005ea3567b20f4f5ab26", "node_id": "C_kwDOAAsO6NoAKGY3MTkyMzk0MjQ5OTEyNDM1N2I5MDA1ZWEzNTY3YjIwZjRmNWFiMjY", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-07-02T20:19:49Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-07-02T20:48:48Z"}, "message": "move optimize-tests flag handling from bootstrap to compiletest", "tree": {"sha": "8277e4260eef9b7a5ea37cb2f26f27f53980b315", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8277e4260eef9b7a5ea37cb2f26f27f53980b315"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f71923942499124357b9005ea3567b20f4f5ab26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f71923942499124357b9005ea3567b20f4f5ab26", "html_url": "https://github.com/rust-lang/rust/commit/f71923942499124357b9005ea3567b20f4f5ab26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f71923942499124357b9005ea3567b20f4f5ab26/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "125f33aa4c45a6eff14a23d2505455b55a3b0d15", "url": "https://api.github.com/repos/rust-lang/rust/commits/125f33aa4c45a6eff14a23d2505455b55a3b0d15", "html_url": "https://github.com/rust-lang/rust/commit/125f33aa4c45a6eff14a23d2505455b55a3b0d15"}], "stats": {"total": 52, "additions": 29, "deletions": 23}, "files": [{"sha": "f3395507bb08bd25e58aae276cd4a6e8b58f17bb", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f71923942499124357b9005ea3567b20f4f5ab26/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71923942499124357b9005ea3567b20f4f5ab26/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=f71923942499124357b9005ea3567b20f4f5ab26", "patch": "@@ -1363,16 +1363,10 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n         if let Some(ref npm) = builder.config.npm {\n             cmd.arg(\"--npm\").arg(npm);\n         }\n-\n-        let mut flags = if is_rustdoc { Vec::new() } else { vec![\"-Crpath\".to_string()] };\n-        if !is_rustdoc && mode != \"ui\" {\n-            if builder.config.rust_optimize_tests {\n-                flags.push(\"-O\".to_string());\n-            }\n-        }\n         if builder.config.rust_optimize_tests {\n             cmd.arg(\"--optimize-tests\");\n         }\n+        let mut flags = if is_rustdoc { Vec::new() } else { vec![\"-Crpath\".to_string()] };\n         flags.push(format!(\"-Cdebuginfo={}\", builder.config.rust_debuginfo_level_tests));\n         flags.push(builder.config.cmd.rustc_args().join(\" \"));\n "}, {"sha": "be81ff881f3a897f4e827ab93ebae7711ef44c97", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f71923942499124357b9005ea3567b20f4f5ab26/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71923942499124357b9005ea3567b20f4f5ab26/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=f71923942499124357b9005ea3567b20f4f5ab26", "patch": "@@ -269,9 +269,8 @@ pub struct Config {\n     /// Flags to pass to the compiler when building for the target\n     pub target_rustcflags: Option<String>,\n \n-    /// Whether tests should be optimized.\n-    /// Currently only provides a default for UI-tests that are run-pass.\n-    /// Other tests are controlled by rustcflags or the testfiles themselves.\n+    /// Whether tests should be optimized by default. Individual test-suites and test files may\n+    /// override this setting.\n     pub optimize_tests: bool,\n \n     /// What panic strategy the target is built with.  Unwind supports Abort, but"}, {"sha": "a8a151ca114d2aa82960e2458312d5cccf843468", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f71923942499124357b9005ea3567b20f4f5ab26/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71923942499124357b9005ea3567b20f4f5ab26/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=f71923942499124357b9005ea3567b20f4f5ab26", "patch": "@@ -102,7 +102,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         )\n         .optmulti(\"\", \"host-rustcflags\", \"flags to pass to rustc for host\", \"FLAGS\")\n         .optmulti(\"\", \"target-rustcflags\", \"flags to pass to rustc for target\", \"FLAGS\")\n-        .optflag(\"\", \"optimize-tests\", \"build UI tests with optimization enabled\")\n+        .optflag(\"\", \"optimize-tests\", \"run tests with optimizations enabled\")\n         .optopt(\"\", \"target-panic\", \"what panic strategy the target supports\", \"unwind | abort\")\n         .optflag(\"\", \"verbose\", \"run tests verbosely, showing all output\")\n         .optflag("}, {"sha": "35ed4e8c957900cd133fc8eae8082eb606179a42", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f71923942499124357b9005ea3567b20f4f5ab26/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f71923942499124357b9005ea3567b20f4f5ab26/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=f71923942499124357b9005ea3567b20f4f5ab26", "patch": "@@ -1862,6 +1862,31 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n+        if self.config.optimize_tests && !is_rustdoc {\n+            match self.config.mode {\n+                Ui => {\n+                    // If optimize-tests is true we still only want to optimize tests that actually get\n+                    // executed and that don't specify their own optimization levels.\n+                    // Note: aux libs don't have a pass-mode, so they won't get optimized\n+                    // unless compile-flags are set in the aux file.\n+                    if self.config.optimize_tests\n+                        && self.props.pass_mode(&self.config) == Some(PassMode::Run)\n+                        && !self\n+                            .props\n+                            .compile_flags\n+                            .iter()\n+                            .any(|arg| arg == \"-O\" || arg.contains(\"opt-level\"))\n+                    {\n+                        rustc.arg(\"-O\");\n+                    }\n+                }\n+                DebugInfo => { /* debuginfo tests must be unoptimized */ }\n+                _ => {\n+                    rustc.arg(\"-O\");\n+                }\n+            }\n+        }\n+\n         match self.config.mode {\n             Incremental => {\n                 // If we are extracting and matching errors in the new\n@@ -1875,18 +1900,6 @@ impl<'test> TestCx<'test> {\n                 rustc.arg(\"-Zdeduplicate-diagnostics=no\");\n             }\n             Ui => {\n-                // If optimize-tests is true we still only want to optimize tests that actually get\n-                // executed and that don't specify their own optimization levels\n-                if self.config.optimize_tests\n-                    && self.props.pass_mode(&self.config) == Some(PassMode::Run)\n-                    && !self\n-                        .props\n-                        .compile_flags\n-                        .iter()\n-                        .any(|arg| arg == \"-O\" || arg.contains(\"opt-level\"))\n-                {\n-                    rustc.arg(\"-O\");\n-                }\n                 if !self.props.compile_flags.iter().any(|s| s.starts_with(\"--error-format\")) {\n                     rustc.args(&[\"--error-format\", \"json\"]);\n                     rustc.args(&[\"--json\", \"future-incompat\"]);"}]}