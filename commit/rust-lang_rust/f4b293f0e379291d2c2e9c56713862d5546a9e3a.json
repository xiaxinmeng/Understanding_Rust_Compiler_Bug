{"sha": "f4b293f0e379291d2c2e9c56713862d5546a9e3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YjI5M2YwZTM3OTI5MWQyYzJlOWM1NjcxMzg2MmQ1NTQ2YTllM2E=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-04T00:06:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-04T00:08:33Z"}, "message": "rt: Fix the 0 bytes lost issue\n\nThis is a workaround for #1815. libev uses realloc(0) to\nfree the loop, which valgrind doesn't like. We have suppressions\nto make valgrind ignore them.\n\nValgrind also has a sanity check when collecting allocation backtraces\nthat the stack pointer must be at least 512 bytes into the stack (at\nleast 512 bytes of frames must have come before). When this is not\nthe case it doesn't collect the backtrace.\n\nUnfortunately, with our spaghetti stacks that valgrind check triggers\nsometimes and we don't get the backtrace for the realloc(0), it\nfails to be suppressed, and it gets reported as 0 bytes lost\nfrom a malloc with no backtrace.\n\nThis fixes the issue by alloca'ing 512 bytes before calling uv_loop_delete", "tree": {"sha": "1670904813760765f98a4c1020a2f2ea3b09e0c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1670904813760765f98a4c1020a2f2ea3b09e0c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4b293f0e379291d2c2e9c56713862d5546a9e3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b293f0e379291d2c2e9c56713862d5546a9e3a", "html_url": "https://github.com/rust-lang/rust/commit/f4b293f0e379291d2c2e9c56713862d5546a9e3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4b293f0e379291d2c2e9c56713862d5546a9e3a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f892dcb01c93c3af4be3c291f22da88e38bd835", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f892dcb01c93c3af4be3c291f22da88e38bd835", "html_url": "https://github.com/rust-lang/rust/commit/1f892dcb01c93c3af4be3c291f22da88e38bd835"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "370f80acdf3392eba431c6c2d56f6d69201d1cc8", "filename": "src/etc/x86.supp", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4b293f0e379291d2c2e9c56713862d5546a9e3a/src%2Fetc%2Fx86.supp", "raw_url": "https://github.com/rust-lang/rust/raw/f4b293f0e379291d2c2e9c56713862d5546a9e3a/src%2Fetc%2Fx86.supp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fx86.supp?ref=f4b293f0e379291d2c2e9c56713862d5546a9e3a", "patch": "@@ -374,15 +374,7 @@\n }\n \n {\n-   libuv-0-byte-realloc1\n-   Memcheck:Leak\n-   fun:malloc\n-   ...\n-   fun:uv_loop_delete\n-}\n-\n-{\n-   libuv-0-byte-realloc2\n+   libuv-0-byte-realloc\n    Memcheck:Leak\n    fun:malloc\n    ..."}, {"sha": "e3c29ae974af7d8e644bc0f4c79854e8ab03d8f8", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4b293f0e379291d2c2e9c56713862d5546a9e3a/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f4b293f0e379291d2c2e9c56713862d5546a9e3a/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=f4b293f0e379291d2c2e9c56713862d5546a9e3a", "patch": "@@ -83,6 +83,22 @@ rust_uv_loop_new() {\n \n extern \"C\" void\n rust_uv_loop_delete(uv_loop_t* loop) {\n+    // FIXME: This is a workaround for #1815. libev uses realloc(0) to\n+    // free the loop, which valgrind doesn't like. We have suppressions\n+    // to make valgrind ignore them.\n+    //\n+    // Valgrind also has a sanity check when collecting allocation backtraces\n+    // that the stack pointer must be at least 512 bytes into the stack (at\n+    // least 512 bytes of frames must have come before). When this is not\n+    // the case it doesn't collect the backtrace.\n+    //\n+    // Unfortunately, with our spaghetti stacks that valgrind check triggers\n+    // sometimes and we don't get the backtrace for the realloc(0), it\n+    // fails to be suppressed, and it gets reported as 0 bytes lost\n+    // from a malloc with no backtrace.\n+    //\n+    // This pads our stack with some extra space before deleting the loop\n+    alloca(512);\n     uv_loop_delete(loop);\n }\n "}]}