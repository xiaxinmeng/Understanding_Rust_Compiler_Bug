{"sha": "70fd5428226bfc6c75314a987a643b8e7d82fb31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZmQ1NDI4MjI2YmZjNmM3NTMxNGE5ODdhNjQzYjhlN2Q4MmZiMzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-19T14:04:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-19T14:04:18Z"}, "message": "Introduce hir::Param\n\nWe generally shouldn't expose TypeRef out of hir. So, let's just use a\nplacehoder here.", "tree": {"sha": "3268a6ff56b652188ab175129ce7d9fed552ad01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3268a6ff56b652188ab175129ce7d9fed552ad01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70fd5428226bfc6c75314a987a643b8e7d82fb31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70fd5428226bfc6c75314a987a643b8e7d82fb31", "html_url": "https://github.com/rust-lang/rust/commit/70fd5428226bfc6c75314a987a643b8e7d82fb31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70fd5428226bfc6c75314a987a643b8e7d82fb31/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8d266fa6dd7ee883d1bba52eb6a37c5e473978f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f", "html_url": "https://github.com/rust-lang/rust/commit/e8d266fa6dd7ee883d1bba52eb6a37c5e473978f"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "68ccedc60bf8104d74bbc9f3056e0bed4b4177fa", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70fd5428226bfc6c75314a987a643b8e7d82fb31/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70fd5428226bfc6c75314a987a643b8e7d82fb31/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=70fd5428226bfc6c75314a987a643b8e7d82fb31", "patch": "@@ -673,8 +673,13 @@ impl Function {\n         Some(SelfParam { func: self.id })\n     }\n \n-    pub fn params(self, db: &dyn HirDatabase) -> Vec<TypeRef> {\n-        db.function_data(self.id).params.clone()\n+    pub fn params(self, db: &dyn HirDatabase) -> Vec<Param> {\n+        db.function_data(self.id)\n+            .params\n+            .iter()\n+            .skip(if self.self_param(db).is_some() { 1 } else { 0 })\n+            .map(|_| Param { _ty: () })\n+            .collect()\n     }\n \n     pub fn is_unsafe(self, db: &dyn HirDatabase) -> bool {\n@@ -707,6 +712,10 @@ pub struct SelfParam {\n     func: FunctionId,\n }\n \n+pub struct Param {\n+    _ty: (),\n+}\n+\n impl SelfParam {\n     pub fn access(self, db: &dyn HirDatabase) -> Access {\n         let func_data = db.function_data(self.func);"}]}