{"sha": "f4bd03b99837442c519e71625c9135a27f1dcc1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0YmQwM2I5OTgzNzQ0MmM1MTllNzE2MjVjOTEzNWEyN2YxZGNjMWI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T01:22:15Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-14T06:07:55Z"}, "message": "rustc: Replace the lexer's error handling with diagnostic impl", "tree": {"sha": "f7fdb65fb24a7f222ddb1a25097edd87479c8e86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7fdb65fb24a7f222ddb1a25097edd87479c8e86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4bd03b99837442c519e71625c9135a27f1dcc1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4bd03b99837442c519e71625c9135a27f1dcc1b", "html_url": "https://github.com/rust-lang/rust/commit/f4bd03b99837442c519e71625c9135a27f1dcc1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4bd03b99837442c519e71625c9135a27f1dcc1b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e90701c546fbdfdccd12aea72f8c084642caef5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e90701c546fbdfdccd12aea72f8c084642caef5f", "html_url": "https://github.com/rust-lang/rust/commit/e90701c546fbdfdccd12aea72f8c084642caef5f"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "2e5807ce2d1e4a1b023c4dcf355893d381c5ac64", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4bd03b99837442c519e71625c9135a27f1dcc1b/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bd03b99837442c519e71625c9135a27f1dcc1b/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=f4bd03b99837442c519e71625c9135a27f1dcc1b", "patch": "@@ -285,7 +285,7 @@ fn pretty_print_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n       }\n       ppm_normal. { ann = pprust::no_ann(); }\n     }\n-    pprust::print_crate(sess.codemap, crate, input,\n+    pprust::print_crate(sess.codemap, sess.diagnostic, crate, input,\n                         io::string_reader(src), io::stdout(), ann);\n }\n "}, {"sha": "18fb155dc847830e081616f50480ab50b97e1e74", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f4bd03b99837442c519e71625c9135a27f1dcc1b/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bd03b99837442c519e71625c9135a27f1dcc1b/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=f4bd03b99837442c519e71625c9135a27f1dcc1b", "patch": "@@ -10,6 +10,7 @@ import driver::diagnostic;\n \n type reader = @{\n     cm: codemap::codemap,\n+    diagnostic: diagnostic::handler,\n     src: str,\n     len: uint,\n     mutable col: uint,\n@@ -48,14 +49,18 @@ impl reader for reader {\n         } else { self.curr = -1 as char; }\n     }\n     fn err(m: str) {\n-        diagnostic::emit_error(\n-            some((self.cm, ast_util::mk_sp(self.chpos, self.chpos))), m);\n+        self.diagnostic.span_err(\n+            ast_util::mk_sp(self.chpos, self.chpos),\n+            m);\n     }\n }\n \n-fn new_reader(cm: codemap::codemap, src: str, filemap: codemap::filemap,\n+fn new_reader(cm: codemap::codemap,\n+              diagnostic: diagnostic::handler,\n+              src: str, filemap: codemap::filemap,\n               itr: @interner::interner<str>) -> reader {\n-    let r = @{cm: cm, src: src, len: str::byte_len(src),\n+    let r = @{cm: cm, diagnostic: diagnostic,\n+              src: src, len: str::byte_len(src),\n               mutable col: 0u, mutable pos: 0u, mutable curr: -1 as char,\n               mutable chpos: filemap.start_pos.ch, mutable strs: [],\n               filemap: filemap, interner: itr};\n@@ -666,12 +671,15 @@ fn is_lit(t: token::token) -> bool {\n \n type lit = {lit: str, pos: uint};\n \n-fn gather_comments_and_literals(cm: codemap::codemap, path: str,\n+fn gather_comments_and_literals(cm: codemap::codemap,\n+                                diagnostic: diagnostic::handler,\n+                                path: str,\n                                 srdr: io::reader) ->\n    {cmnts: [cmnt], lits: [lit]} {\n     let src = str::unsafe_from_bytes(srdr.read_whole_stream());\n     let itr = @interner::mk::<str>(str::hash, str::eq);\n-    let rdr = new_reader(cm, src, codemap::new_filemap(path, 0u, 0u), itr);\n+    let rdr = new_reader(cm, diagnostic, src,\n+                         codemap::new_filemap(path, 0u, 0u), itr);\n     let comments: [cmnt] = [];\n     let literals: [lit] = [];\n     let first_read: bool = true;"}, {"sha": "30f2ab6d371f173ae73665d9c2736a0dd31d0dc9", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4bd03b99837442c519e71625c9135a27f1dcc1b/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bd03b99837442c519e71625c9135a27f1dcc1b/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=f4bd03b99837442c519e71625c9135a27f1dcc1b", "patch": "@@ -102,7 +102,8 @@ fn new_parser_from_file(sess: parse_sess, cfg: ast::crate_cfg, path: str,\n     let filemap = codemap::new_filemap(path, chpos, byte_pos);\n     sess.cm.files += [filemap];\n     let itr = @interner::mk(str::hash, str::eq);\n-    let rdr = lexer::new_reader(sess.cm, src, filemap, itr);\n+    let rdr = lexer::new_reader(sess.cm, sess.diagnostic,\n+                                src, filemap, itr);\n     ret new_parser(sess, cfg, rdr, ftype);\n }\n \n@@ -112,7 +113,8 @@ fn new_parser_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n     let filemap = codemap::new_filemap(name, 0u, 0u);\n     sess.cm.files += [filemap];\n     let itr = @interner::mk(str::hash, str::eq);\n-    let rdr = lexer::new_reader(sess.cm, source, filemap, itr);\n+    let rdr = lexer::new_reader(sess.cm, sess.diagnostic,\n+                                source, filemap, itr);\n     ret new_parser(sess, cfg, rdr, ftype);\n }\n "}, {"sha": "ea2404e849caaa718ab677d31f9fe5244daf719d", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4bd03b99837442c519e71625c9135a27f1dcc1b/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4bd03b99837442c519e71625c9135a27f1dcc1b/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=f4bd03b99837442c519e71625c9135a27f1dcc1b", "patch": "@@ -9,6 +9,7 @@ import option::{some, none};\n import pp::{break_offset, word, printer,\n             space, zerobreak, hardbreak, breaks, consistent,\n             inconsistent, eof};\n+import driver::diagnostic;\n \n // The ps is stored here to prevent recursive type.\n // FIXME use a nominal tag instead\n@@ -59,10 +60,11 @@ const default_columns: uint = 78u;\n // Requires you to pass an input filename and reader so that\n // it can scan the input text for comments and literals to\n // copy forward.\n-fn print_crate(cm: codemap, crate: @ast::crate, filename: str, in: io::reader,\n+fn print_crate(cm: codemap, diagnostic: diagnostic::handler,\n+               crate: @ast::crate, filename: str, in: io::reader,\n                out: io::writer, ann: pp_ann) {\n     let boxes: [pp::breaks] = [];\n-    let r = lexer::gather_comments_and_literals(cm, filename, in);\n+    let r = lexer::gather_comments_and_literals(cm, diagnostic, filename, in);\n     let s =\n         @{s: pp::mk_printer(out, default_columns),\n           cm: some(cm),"}]}