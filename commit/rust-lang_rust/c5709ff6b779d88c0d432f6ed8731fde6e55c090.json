{"sha": "c5709ff6b779d88c0d432f6ed8731fde6e55c090", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NzA5ZmY2Yjc3OWQ4OGMwZDQzMmY2ZWQ4NzMxZmRlNmU1NWMwOTA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-08T22:01:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-13T09:56:38Z"}, "message": "const-prop: handle overflow_check consistently for all operators", "tree": {"sha": "c39034cc0d92bf86f0f0e62192745a9bea665451", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c39034cc0d92bf86f0f0e62192745a9bea665451"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5709ff6b779d88c0d432f6ed8731fde6e55c090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5709ff6b779d88c0d432f6ed8731fde6e55c090", "html_url": "https://github.com/rust-lang/rust/commit/c5709ff6b779d88c0d432f6ed8731fde6e55c090", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5709ff6b779d88c0d432f6ed8731fde6e55c090/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0633a0e3801e4efc9ab07bf811e442bd379ce93a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0633a0e3801e4efc9ab07bf811e442bd379ce93a", "html_url": "https://github.com/rust-lang/rust/commit/0633a0e3801e4efc9ab07bf811e442bd379ce93a"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "5c6c003b3a6980e76515a9a1b519b2894d7366ee", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c5709ff6b779d88c0d432f6ed8731fde6e55c090/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5709ff6b779d88c0d432f6ed8731fde6e55c090/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=c5709ff6b779d88c0d432f6ed8731fde6e55c090", "patch": "@@ -541,7 +541,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         right: &Operand<'tcx>,\n         source_info: SourceInfo,\n         place_layout: TyLayout<'tcx>,\n-        overflow_check: bool,\n     ) -> Option<()> {\n         let r =\n             self.use_ecx(|this| this.ecx.read_immediate(this.ecx.eval_operand(right, None)?))?;\n@@ -564,18 +563,14 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             }\n         }\n \n-        // If overflow checking is enabled (like in debug mode by default),\n-        // then we'll already catch overflow when we evaluate the `Assert` statement\n-        // in MIR. However, if overflow checking is disabled, then there won't be any\n-        // `Assert` statement and so we have to do additional checking here.\n-        if !overflow_check {\n-            if self.use_ecx(|this| {\n-                let l = this.ecx.read_immediate(this.ecx.eval_operand(left, None)?)?;\n-                let (_res, overflow, _ty) = this.ecx.overflowing_binary_op(op, l, r)?;\n-                Ok(overflow)\n-            })? {\n-                self.report_panic_as_lint(source_info, PanicInfo::Overflow(op))?;\n-            }\n+        // The remaining operators are handled through `overflowing_binary_op`.\n+        // FIXME: Why do we not also do this for `Shr` and `Shl`?\n+        if self.use_ecx(|this| {\n+            let l = this.ecx.read_immediate(this.ecx.eval_operand(left, None)?)?;\n+            let (_res, overflow, _ty) = this.ecx.overflowing_binary_op(op, l, r)?;\n+            Ok(overflow)\n+        })? {\n+            self.report_panic_as_lint(source_info, PanicInfo::Overflow(op))?;\n         }\n \n         Some(())\n@@ -618,9 +613,9 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n             // Additional checking: check for overflows on integer binary operations and report\n             // them to the user as lints.\n-            Rvalue::BinaryOp(op, left, right) => {\n+            Rvalue::BinaryOp(op, left, right) if !overflow_check => {\n                 trace!(\"checking BinaryOp(op = {:?}, left = {:?}, right = {:?})\", op, left, right);\n-                self.check_binary_op(*op, left, right, source_info, place_layout, overflow_check)?;\n+                self.check_binary_op(*op, left, right, source_info, place_layout)?;\n             }\n \n             // Do not try creating references (#67862)"}]}