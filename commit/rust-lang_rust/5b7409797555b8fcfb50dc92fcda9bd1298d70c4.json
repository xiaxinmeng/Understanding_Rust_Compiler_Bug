{"sha": "5b7409797555b8fcfb50dc92fcda9bd1298d70c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNzQwOTc5NzU1NWI4ZmNmYjUwZGM5MmZjZGE5YmQxMjk4ZDcwYzQ=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-02T04:06:49Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-06T04:01:52Z"}, "message": "Undo addition of boxes\n\nI don't think the boxing helped performance, in fact I think it\npotentially made it worse. The data was still being copied, but now it\nwas through a pointer. Thinking about it more, I think boxing might only\nhelp when you're passing a big object around by value all the time,\nrather than the slowdown being that you're cloning it.", "tree": {"sha": "93f4cc10b26dabd43aea3feb7d468579f2b4bbb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93f4cc10b26dabd43aea3feb7d468579f2b4bbb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b7409797555b8fcfb50dc92fcda9bd1298d70c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7409797555b8fcfb50dc92fcda9bd1298d70c4", "html_url": "https://github.com/rust-lang/rust/commit/5b7409797555b8fcfb50dc92fcda9bd1298d70c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b7409797555b8fcfb50dc92fcda9bd1298d70c4/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c09d9d34f02c72b93da25ba27758db7d7cddb1f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c09d9d34f02c72b93da25ba27758db7d7cddb1f4", "html_url": "https://github.com/rust-lang/rust/commit/c09d9d34f02c72b93da25ba27758db7d7cddb1f4"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "e2ce9ad23f478d214852359bb2ce0c843828b496", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b7409797555b8fcfb50dc92fcda9bd1298d70c4/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7409797555b8fcfb50dc92fcda9bd1298d70c4/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=5b7409797555b8fcfb50dc92fcda9bd1298d70c4", "patch": "@@ -1,7 +1,6 @@\n use super::{plain_text_summary, short_markdown_summary};\n use super::{ErrorCodes, IdMap, Ignore, LangString, Markdown, MarkdownHtml};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n-use std::cell::RefCell;\n \n #[test]\n fn test_unique_id() {"}, {"sha": "864fbccbcc45172e85051686f0933a2876380bd2", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b7409797555b8fcfb50dc92fcda9bd1298d70c4/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b7409797555b8fcfb50dc92fcda9bd1298d70c4/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=5b7409797555b8fcfb50dc92fcda9bd1298d70c4", "patch": "@@ -52,10 +52,10 @@ crate struct Context<'tcx> {\n     /// publicly reused items to redirect to the right location.\n     pub(super) render_redirect_pages: bool,\n     /// The map used to ensure all generated 'id=' attributes are unique.\n-    pub(super) id_map: Box<RefCell<IdMap>>,\n+    pub(super) id_map: RefCell<IdMap>,\n     /// Tracks section IDs for `Deref` targets so they match in both the main\n     /// body and the sidebar.\n-    pub(super) deref_id_map: Box<RefCell<FxHashMap<DefId, String>>>,\n+    pub(super) deref_id_map: RefCell<FxHashMap<DefId, String>>,\n     /// Shared mutable state.\n     ///\n     /// Issue for improving the situation: [#82381][]\n@@ -76,7 +76,7 @@ crate struct Context<'tcx> {\n \n // `Context` is cloned a lot, so we don't want the size to grow unexpectedly.\n #[cfg(target_arch = \"x86_64\")]\n-rustc_data_structures::static_assert_size!(Context<'_>, 88);\n+rustc_data_structures::static_assert_size!(Context<'_>, 152);\n \n impl<'tcx> Context<'tcx> {\n     pub(super) fn path(&self, filename: &str) -> PathBuf {\n@@ -415,8 +415,8 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             current: Vec::new(),\n             dst,\n             render_redirect_pages: false,\n-            id_map: Box::new(RefCell::new(id_map)),\n-            deref_id_map: Box::new(RefCell::new(FxHashMap::default())),\n+            id_map: RefCell::new(id_map),\n+            deref_id_map: RefCell::new(FxHashMap::default()),\n             shared: Rc::new(scx),\n             cache: Rc::new(cache),\n         };\n@@ -438,8 +438,8 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             current: self.current.clone(),\n             dst: self.dst.clone(),\n             render_redirect_pages: self.render_redirect_pages,\n-            id_map: Box::new(RefCell::new(id_map)),\n-            deref_id_map: Box::new(RefCell::new(FxHashMap::default())),\n+            id_map: RefCell::new(id_map),\n+            deref_id_map: RefCell::new(FxHashMap::default()),\n             shared: Rc::clone(&self.shared),\n             cache: Rc::clone(&self.cache),\n         }"}]}