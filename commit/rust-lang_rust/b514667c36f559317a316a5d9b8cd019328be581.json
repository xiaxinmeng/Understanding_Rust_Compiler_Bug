{"sha": "b514667c36f559317a316a5d9b8cd019328be581", "node_id": "C_kwDOAAsO6NoAKGI1MTQ2NjdjMzZmNTU5MzE3YTMxNmE1ZDliOGNkMDE5MzI4YmU1ODE", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-24T18:28:45Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-25T14:24:19Z"}, "message": "adjust for more backtrace pruning", "tree": {"sha": "8d608126e4a3fa82e4f811148e35b4fee7ab9c35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d608126e4a3fa82e4f811148e35b4fee7ab9c35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b514667c36f559317a316a5d9b8cd019328be581", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b514667c36f559317a316a5d9b8cd019328be581", "html_url": "https://github.com/rust-lang/rust/commit/b514667c36f559317a316a5d9b8cd019328be581", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b514667c36f559317a316a5d9b8cd019328be581/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "url": "https://api.github.com/repos/rust-lang/rust/commits/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "html_url": "https://github.com/rust-lang/rust/commit/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697"}], "stats": {"total": 295, "additions": 102, "deletions": 193}, "files": [{"sha": "e64a1f9090214f36ae8160550dc5623bdfd14d4a", "filename": "tests/fail/intrinsics/copy_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,10 +1,10 @@\n-//@error-pattern: overflow computing total size\n use std::mem;\n \n fn main() {\n     let x = 0;\n     let mut y = 0;\n     unsafe {\n         (&mut y as *mut i32).copy_from(&x, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+        //~^ERROR: overflow computing total size\n     }\n }"}, {"sha": "3534f4d1fb85b9a01fcb3eda3de6fd8903001736", "filename": "tests/fail/intrinsics/copy_overflow.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,19 +1,13 @@\n error: Undefined Behavior: overflow computing total size of `copy`\n-  --> RUSTLIB/core/src/intrinsics.rs:LL:CC\n+  --> $DIR/copy_overflow.rs:LL:CC\n    |\n-LL |         copy(src, dst, count)\n-   |         ^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy`\n+LL |         (&mut y as *mut i32).copy_from(&x, 1usize << (mem::size_of::<usize>() * 8 - 1));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow computing total size of `copy`\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::intrinsics::copy::<i32>` at RUSTLIB/core/src/intrinsics.rs:LL:CC\n-   = note: inside `std::ptr::mut_ptr::<impl *mut i32>::copy_from` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n-note: inside `main` at $DIR/copy_overflow.rs:LL:CC\n-  --> $DIR/copy_overflow.rs:LL:CC\n-   |\n-LL |         (&mut y as *mut i32).copy_from(&x, 1usize << (mem::size_of::<usize>() * 8 - 1));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/copy_overflow.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "b6a110ee84d2cf428f62f545360dc05bec318655", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,8 +1,7 @@\n-//@error-pattern: pointer to 5 bytes starting at offset 0 is out-of-bounds\n fn main() {\n     let v = [0i8; 4];\n     let x = &v as *const i8;\n     // The error is inside another function, so we cannot match it by line\n-    let x = unsafe { x.offset(5) };\n+    let x = unsafe { x.offset(5) }; //~ERROR: pointer to 5 bytes starting at offset 0 is out-of-bounds\n     panic!(\"this should never print: {:?}\", x);\n }"}, {"sha": "afa2c8306466cbecbdae49d5c605cb87ed74e583", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_1.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,18 +1,13 @@\n error: Undefined Behavior: out-of-bounds pointer arithmetic: ALLOC has size 4, so pointer to 5 bytes starting at offset 0 is out-of-bounds\n-  --> RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n+  --> $DIR/out_of_bounds_ptr_1.rs:LL:CC\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: ALLOC has size 4, so pointer to 5 bytes starting at offset 0 is out-of-bounds\n+LL |     let x = unsafe { x.offset(5) };\n+   |                      ^^^^^^^^^^^ out-of-bounds pointer arithmetic: ALLOC has size 4, so pointer to 5 bytes starting at offset 0 is out-of-bounds\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n-note: inside `main` at $DIR/out_of_bounds_ptr_1.rs:LL:CC\n-  --> $DIR/out_of_bounds_ptr_1.rs:LL:CC\n-   |\n-LL |     let x = unsafe { x.offset(5) };\n-   |                      ^^^^^^^^^^^\n+   = note: inside `main` at $DIR/out_of_bounds_ptr_1.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "0d4eea9a5bdeaf6fbe9122f5bb0516b7f898418b", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,7 +1,6 @@\n-//@error-pattern: overflowing in-bounds pointer arithmetic\n fn main() {\n     let v = [0i8; 4];\n     let x = &v as *const i8;\n-    let x = unsafe { x.offset(isize::MIN) };\n+    let x = unsafe { x.offset(isize::MIN) }; //~ERROR: overflowing in-bounds pointer arithmetic\n     panic!(\"this should never print: {:?}\", x);\n }"}, {"sha": "a32b50a18e6a6df15fae7fe609871aa98acf3f3a", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_2.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,18 +1,13 @@\n error: Undefined Behavior: overflowing in-bounds pointer arithmetic\n-  --> RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n+  --> $DIR/out_of_bounds_ptr_2.rs:LL:CC\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n+LL |     let x = unsafe { x.offset(isize::MIN) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n-note: inside `main` at $DIR/out_of_bounds_ptr_2.rs:LL:CC\n-  --> $DIR/out_of_bounds_ptr_2.rs:LL:CC\n-   |\n-LL |     let x = unsafe { x.offset(isize::MIN) };\n-   |                      ^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/out_of_bounds_ptr_2.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "701bc33a645e18beaf39ee5330fca203cbfb3112", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_3.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,7 +1,6 @@\n-//@error-pattern: pointer to 1 byte starting at offset -1 is out-of-bounds\n fn main() {\n     let v = [0i8; 4];\n     let x = &v as *const i8;\n-    let x = unsafe { x.offset(-1) };\n+    let x = unsafe { x.offset(-1) }; //~ERROR: pointer to 1 byte starting at offset -1 is out-of-bounds\n     panic!(\"this should never print: {:?}\", x);\n }"}, {"sha": "d06c33beb48a173332d5cfb65333999a1b35838d", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_3.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,18 +1,13 @@\n error: Undefined Behavior: out-of-bounds pointer arithmetic: ALLOC has size 4, so pointer to 1 byte starting at offset -1 is out-of-bounds\n-  --> RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n+  --> $DIR/out_of_bounds_ptr_3.rs:LL:CC\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: ALLOC has size 4, so pointer to 1 byte starting at offset -1 is out-of-bounds\n+LL |     let x = unsafe { x.offset(-1) };\n+   |                      ^^^^^^^^^^^^ out-of-bounds pointer arithmetic: ALLOC has size 4, so pointer to 1 byte starting at offset -1 is out-of-bounds\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n-note: inside `main` at $DIR/out_of_bounds_ptr_3.rs:LL:CC\n-  --> $DIR/out_of_bounds_ptr_3.rs:LL:CC\n-   |\n-LL |     let x = unsafe { x.offset(-1) };\n-   |                      ^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/out_of_bounds_ptr_3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "fe2e85be69868fe99cf579ac98e724d6b6c8495f", "filename": "tests/fail/intrinsics/overflowing-unchecked-rsh.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,10 +1,8 @@\n-#![feature(core_intrinsics)]\n-\n-use std::intrinsics::*;\n+#![feature(unchecked_math)]\n \n fn main() {\n     unsafe {\n-        let _n = unchecked_shr(1i64, 64);\n+        let _n = 1i64.unchecked_shr(64);\n         //~^ ERROR: overflowing shift by 64 in `unchecked_shr`\n     }\n }"}, {"sha": "bba92602285ac131e939fe516f07bebb98072308", "filename": "tests/fail/intrinsics/overflowing-unchecked-rsh.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Foverflowing-unchecked-rsh.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: overflowing shift by 64 in `unchecked_shr`\n   --> $DIR/overflowing-unchecked-rsh.rs:LL:CC\n    |\n-LL |         let _n = unchecked_shr(1i64, 64);\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 64 in `unchecked_shr`\n+LL |         let _n = 1i64.unchecked_shr(64);\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^ overflowing shift by 64 in `unchecked_shr`\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "e2329c131398456a7fd633228ee3daec0b97af36", "filename": "tests/fail/intrinsics/ptr_offset_0_plus_0.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,8 +1,9 @@\n-//@error-pattern: null pointer is a dangling pointer\n //@compile-flags: -Zmiri-permissive-provenance\n \n+#[rustfmt::skip] // fails with \"left behind trailing whitespace\"\n fn main() {\n     let x = 0 as *mut i32;\n     let _x = x.wrapping_offset(8); // ok, this has no inbounds tag\n     let _x = unsafe { x.offset(0) }; // UB despite offset 0, NULL is never inbounds\n+    //~^ERROR: null pointer is a dangling pointer\n }"}, {"sha": "40a5022351dd7acead6cae80e5227056b61323a0", "filename": "tests/fail/intrinsics/ptr_offset_0_plus_0.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,18 +1,13 @@\n error: Undefined Behavior: out-of-bounds pointer arithmetic: null pointer is a dangling pointer (it has no provenance)\n-  --> RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n+  --> $DIR/ptr_offset_0_plus_0.rs:LL:CC\n    |\n-LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: null pointer is a dangling pointer (it has no provenance)\n+LL |     let _x = unsafe { x.offset(0) }; // UB despite offset 0, NULL is never inbounds\n+   |                       ^^^^^^^^^^^ out-of-bounds pointer arithmetic: null pointer is a dangling pointer (it has no provenance)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::ptr::mut_ptr::<impl *mut i32>::offset` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n-note: inside `main` at $DIR/ptr_offset_0_plus_0.rs:LL:CC\n-  --> $DIR/ptr_offset_0_plus_0.rs:LL:CC\n-   |\n-LL |     let _x = unsafe { x.offset(0) }; // UB despite offset 0, NULL is never inbounds\n-   |                       ^^^^^^^^^^^\n+   = note: inside `main` at $DIR/ptr_offset_0_plus_0.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "0e5acf08b2030da9f6f17672c7da5921f0641170", "filename": "tests/fail/intrinsics/ptr_offset_from_oob.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,11 +1,7 @@\n-#![feature(core_intrinsics)]\n-\n-use std::intrinsics::ptr_offset_from;\n-\n fn main() {\n     let start_ptr = &4 as *const _ as *const u8;\n     let length = 10;\n     let end_ptr = start_ptr.wrapping_add(length);\n     // Even if the offset is 0, a dangling OOB pointer is not allowed.\n-    unsafe { ptr_offset_from(end_ptr, end_ptr) }; //~ERROR: pointer at offset 10 is out-of-bounds\n+    unsafe { end_ptr.offset_from(end_ptr) }; //~ERROR: pointer at offset 10 is out-of-bounds\n }"}, {"sha": "546245a499e1227567357388296ddb56e8d61573", "filename": "tests/fail/intrinsics/ptr_offset_from_oob.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_from_oob.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: out-of-bounds offset_from: ALLOC has size 4, so pointer at offset 10 is out-of-bounds\n   --> $DIR/ptr_offset_from_oob.rs:LL:CC\n    |\n-LL |     unsafe { ptr_offset_from(end_ptr, end_ptr) };\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: ALLOC has size 4, so pointer at offset 10 is out-of-bounds\n+LL |     unsafe { end_ptr.offset_from(end_ptr) };\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds offset_from: ALLOC has size 4, so pointer at offset 10 is out-of-bounds\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "19bd265c143512d40eb789755d90653232e5cb79", "filename": "tests/fail/intrinsics/ptr_offset_int_plus_int.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,9 +1,8 @@\n-//@error-pattern: is a dangling pointer\n //@compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     // Can't offset an integer pointer by non-zero offset.\n     unsafe {\n-        let _val = (1 as *mut u8).offset(1);\n+        let _val = (1 as *mut u8).offset(1); //~ERROR: is a dangling pointer\n     }\n }"}, {"sha": "a96717a067071032a063149deacac70897151016", "filename": "tests/fail/intrinsics/ptr_offset_int_plus_int.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,18 +1,13 @@\n error: Undefined Behavior: out-of-bounds pointer arithmetic: 0x1[noalloc] is a dangling pointer (it has no provenance)\n-  --> RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n+  --> $DIR/ptr_offset_int_plus_int.rs:LL:CC\n    |\n-LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: 0x1[noalloc] is a dangling pointer (it has no provenance)\n+LL |         let _val = (1 as *mut u8).offset(1);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: 0x1[noalloc] is a dangling pointer (it has no provenance)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::ptr::mut_ptr::<impl *mut u8>::offset` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n-note: inside `main` at $DIR/ptr_offset_int_plus_int.rs:LL:CC\n-  --> $DIR/ptr_offset_int_plus_int.rs:LL:CC\n-   |\n-LL |         let _val = (1 as *mut u8).offset(1);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/ptr_offset_int_plus_int.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "fd3c9b44615c2a4a8e81d8575ba65fd1e6e2df29", "filename": "tests/fail/intrinsics/ptr_offset_int_plus_ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,10 +1,9 @@\n-//@error-pattern: is a dangling pointer\n //@compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     let ptr = Box::into_raw(Box::new(0u32));\n     // Can't start with an integer pointer and get to something usable\n     unsafe {\n-        let _val = (1 as *mut u8).offset(ptr as isize);\n+        let _val = (1 as *mut u8).offset(ptr as isize); //~ERROR: is a dangling pointer\n     }\n }"}, {"sha": "c1abe01dcea561225c6006727bb5cf7d9ff5f92e", "filename": "tests/fail/intrinsics/ptr_offset_int_plus_ptr.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,18 +1,13 @@\n error: Undefined Behavior: out-of-bounds pointer arithmetic: 0x1[noalloc] is a dangling pointer (it has no provenance)\n-  --> RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n+  --> $DIR/ptr_offset_int_plus_ptr.rs:LL:CC\n    |\n-LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: 0x1[noalloc] is a dangling pointer (it has no provenance)\n+LL |         let _val = (1 as *mut u8).offset(ptr as isize);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: 0x1[noalloc] is a dangling pointer (it has no provenance)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::ptr::mut_ptr::<impl *mut u8>::offset` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n-note: inside `main` at $DIR/ptr_offset_int_plus_ptr.rs:LL:CC\n-  --> $DIR/ptr_offset_int_plus_ptr.rs:LL:CC\n-   |\n-LL |         let _val = (1 as *mut u8).offset(ptr as isize);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/ptr_offset_int_plus_ptr.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "c3db1e23b9bfbc6e14bf4981b66495c10dd47107", "filename": "tests/fail/intrinsics/ptr_offset_overflow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,6 +1,5 @@\n-//@error-pattern: overflowing in-bounds pointer arithmetic\n fn main() {\n     let v = [1i8, 2];\n     let x = &v[1] as *const i8;\n-    let _val = unsafe { x.offset(isize::MIN) };\n+    let _val = unsafe { x.offset(isize::MIN) }; //~ERROR: overflowing in-bounds pointer arithmetic\n }"}, {"sha": "d5935006e43bc1c481acd1eb7caf34c7bbfb2883", "filename": "tests/fail/intrinsics/ptr_offset_overflow.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,18 +1,13 @@\n error: Undefined Behavior: overflowing in-bounds pointer arithmetic\n-  --> RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n+  --> $DIR/ptr_offset_overflow.rs:LL:CC\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n+LL |     let _val = unsafe { x.offset(isize::MIN) };\n+   |                         ^^^^^^^^^^^^^^^^^^^^ overflowing in-bounds pointer arithmetic\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::ptr::const_ptr::<impl *const i8>::offset` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n-note: inside `main` at $DIR/ptr_offset_overflow.rs:LL:CC\n-  --> $DIR/ptr_offset_overflow.rs:LL:CC\n-   |\n-LL |     let _val = unsafe { x.offset(isize::MIN) };\n-   |                         ^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/ptr_offset_overflow.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "575e28854b1a92fcb16a014133a20a3cd5cdb47d", "filename": "tests/fail/intrinsics/ptr_offset_ptr_plus_0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,7 +1,7 @@\n-//@error-pattern: pointer at offset 32 is out-of-bounds\n-\n+#[rustfmt::skip] // fails with \"left behind trailing whitespace\"\n fn main() {\n     let x = Box::into_raw(Box::new(0u32));\n     let x = x.wrapping_offset(8); // ok, this has no inbounds tag\n     let _x = unsafe { x.offset(0) }; // UB despite offset 0, the pointer is not inbounds of the only object it can point to\n+    //~^ERROR: pointer at offset 32 is out-of-bounds\n }"}, {"sha": "5c516d5a490f328f34a171abe473c3e77fe1c272", "filename": "tests/fail/intrinsics/ptr_offset_ptr_plus_0.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,18 +1,13 @@\n error: Undefined Behavior: out-of-bounds pointer arithmetic: ALLOC has size 4, so pointer at offset 32 is out-of-bounds\n-  --> RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n+  --> $DIR/ptr_offset_ptr_plus_0.rs:LL:CC\n    |\n-LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: ALLOC has size 4, so pointer at offset 32 is out-of-bounds\n+LL |     let _x = unsafe { x.offset(0) }; // UB despite offset 0, the pointer is not inbounds of the only object it can point to\n+   |                       ^^^^^^^^^^^ out-of-bounds pointer arithmetic: ALLOC has size 4, so pointer at offset 32 is out-of-bounds\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::ptr::mut_ptr::<impl *mut u32>::offset` at RUSTLIB/core/src/ptr/mut_ptr.rs:LL:CC\n-note: inside `main` at $DIR/ptr_offset_ptr_plus_0.rs:LL:CC\n-  --> $DIR/ptr_offset_ptr_plus_0.rs:LL:CC\n-   |\n-LL |     let _x = unsafe { x.offset(0) }; // UB despite offset 0, the pointer is not inbounds of the only object it can point to\n-   |                       ^^^^^^^^^^^\n+   = note: inside `main` at $DIR/ptr_offset_ptr_plus_0.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "13265d0fb0ee429cb41b5581ba62d3ec391e6503", "filename": "tests/fail/intrinsics/unchecked_add1.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_add1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_add1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_add1.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,7 +1,6 @@\n-#![feature(core_intrinsics)]\n+#![feature(unchecked_math)]\n+\n fn main() {\n     // MAX overflow\n-    unsafe {\n-        std::intrinsics::unchecked_add(40000u16, 30000); //~ ERROR: overflow executing `unchecked_add`\n-    }\n+    let _val = unsafe { 40000u16.unchecked_add(30000) }; //~ ERROR: overflow executing `unchecked_add`\n }"}, {"sha": "062acbb8de8cfce7738ea473d34b14f6589e4ae3", "filename": "tests/fail/intrinsics/unchecked_add1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_add1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_add1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_add1.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: overflow executing `unchecked_add`\n   --> $DIR/unchecked_add1.rs:LL:CC\n    |\n-LL |         std::intrinsics::unchecked_add(40000u16, 30000);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_add`\n+LL |     let _val = unsafe { 40000u16.unchecked_add(30000) };\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_add`\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "229f50321d7dfe1bd7b6a4a828ffe0bd2423e126", "filename": "tests/fail/intrinsics/unchecked_add2.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_add2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_add2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_add2.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,7 +1,6 @@\n-#![feature(core_intrinsics)]\n+#![feature(unchecked_math)]\n+\n fn main() {\n     // MIN overflow\n-    unsafe {\n-        std::intrinsics::unchecked_add(-30000i16, -8000); //~ ERROR: overflow executing `unchecked_add`\n-    }\n+    let _val = unsafe { (-30000i16).unchecked_add(-8000) }; //~ ERROR: overflow executing `unchecked_add`\n }"}, {"sha": "09b622d6e2960483994c727a09bbb79ded0389e1", "filename": "tests/fail/intrinsics/unchecked_add2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_add2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_add2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_add2.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: overflow executing `unchecked_add`\n   --> $DIR/unchecked_add2.rs:LL:CC\n    |\n-LL |         std::intrinsics::unchecked_add(-30000i16, -8000);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_add`\n+LL |     let _val = unsafe { (-30000i16).unchecked_add(-8000) };\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_add`\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "810d3418dc8fe46840b669c50a19fb29ddefd4e0", "filename": "tests/fail/intrinsics/unchecked_mul1.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,7 +1,5 @@\n-#![feature(core_intrinsics)]\n+#![feature(unchecked_math)]\n fn main() {\n     // MAX overflow\n-    unsafe {\n-        std::intrinsics::unchecked_mul(300u16, 250u16); //~ ERROR: overflow executing `unchecked_mul`\n-    }\n+    let _val = unsafe { 300u16.unchecked_mul(250u16) }; //~ ERROR: overflow executing `unchecked_mul`\n }"}, {"sha": "e260c343c4e625c720ab7f3708cc9b1e3a0d86b5", "filename": "tests/fail/intrinsics/unchecked_mul1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_mul1.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: overflow executing `unchecked_mul`\n   --> $DIR/unchecked_mul1.rs:LL:CC\n    |\n-LL |         std::intrinsics::unchecked_mul(300u16, 250u16);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_mul`\n+LL |     let _val = unsafe { 300u16.unchecked_mul(250u16) };\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_mul`\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "421019542a95af940009fdf0973360e5646ccb44", "filename": "tests/fail/intrinsics/unchecked_mul2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,7 +1,5 @@\n-#![feature(core_intrinsics)]\n+#![feature(unchecked_math)]\n fn main() {\n     // MIN overflow\n-    unsafe {\n-        std::intrinsics::unchecked_mul(1_000_000_000i32, -4); //~ ERROR: overflow executing `unchecked_mul`\n-    }\n+    let _val = unsafe { 1_000_000_000i32.unchecked_mul(-4) }; //~ ERROR: overflow executing `unchecked_mul`\n }"}, {"sha": "88b3a49b98eca72b3e3961deb6a828f54fe617e3", "filename": "tests/fail/intrinsics/unchecked_mul2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_mul2.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: overflow executing `unchecked_mul`\n   --> $DIR/unchecked_mul2.rs:LL:CC\n    |\n-LL |         std::intrinsics::unchecked_mul(1_000_000_000i32, -4);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_mul`\n+LL |     let _val = unsafe { 1_000_000_000i32.unchecked_mul(-4) };\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_mul`\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "c6e0066674413500492ce6cb2f7e18df92233b92", "filename": "tests/fail/intrinsics/unchecked_sub1.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,7 +1,5 @@\n-#![feature(core_intrinsics)]\n+#![feature(unchecked_math)]\n fn main() {\n     // MIN overflow\n-    unsafe {\n-        std::intrinsics::unchecked_sub(14u32, 22); //~ ERROR: overflow executing `unchecked_sub`\n-    }\n+    let _val = unsafe { 14u32.unchecked_sub(22) }; //~ ERROR: overflow executing `unchecked_sub`\n }"}, {"sha": "ebd7bc10eb4131bf5754a55b2b3bf4665718785a", "filename": "tests/fail/intrinsics/unchecked_sub1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_sub1.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: overflow executing `unchecked_sub`\n   --> $DIR/unchecked_sub1.rs:LL:CC\n    |\n-LL |         std::intrinsics::unchecked_sub(14u32, 22);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_sub`\n+LL |     let _val = unsafe { 14u32.unchecked_sub(22) };\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_sub`\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "65aa292e212da824b268836a9d4e7cb628478c74", "filename": "tests/fail/intrinsics/unchecked_sub2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,7 +1,5 @@\n-#![feature(core_intrinsics)]\n+#![feature(unchecked_math)]\n fn main() {\n     // MAX overflow\n-    unsafe {\n-        std::intrinsics::unchecked_sub(30000i16, -7000); //~ ERROR: overflow executing `unchecked_sub`\n-    }\n+    let _val = unsafe { 30000i16.unchecked_sub(-7000) }; //~ ERROR: overflow executing `unchecked_sub`\n }"}, {"sha": "73d7c4d86bc024afe49c88c2b349c0f16576a0f9", "filename": "tests/fail/intrinsics/unchecked_sub2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Funchecked_sub2.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,8 +1,8 @@\n error: Undefined Behavior: overflow executing `unchecked_sub`\n   --> $DIR/unchecked_sub2.rs:LL:CC\n    |\n-LL |         std::intrinsics::unchecked_sub(30000i16, -7000);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_sub`\n+LL |     let _val = unsafe { 30000i16.unchecked_sub(-7000) };\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ overflow executing `unchecked_sub`\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "84fa2c29739012cd8d498639bd5103d8621e9985", "filename": "tests/fail/invalid_enum_tag.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Finvalid_enum_tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Finvalid_enum_tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_enum_tag.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -2,8 +2,6 @@\n // Make sure we find these even with many checks disabled.\n //@compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n-//@error-pattern: enum value has invalid tag\n-\n use std::mem;\n \n #[repr(C)]\n@@ -16,5 +14,5 @@ pub enum Foo {\n \n fn main() {\n     let f = unsafe { std::mem::transmute::<i32, Foo>(42) };\n-    let _val = mem::discriminant(&f);\n+    let _val = mem::discriminant(&f); //~ERROR: enum value has invalid tag\n }"}, {"sha": "eff59cbfc8c271adb9a2eb535c84d3d098567ebc", "filename": "tests/fail/invalid_enum_tag.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Finvalid_enum_tag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Finvalid_enum_tag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_enum_tag.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,18 +1,13 @@\n error: Undefined Behavior: enum value has invalid tag: $HEX\n-  --> RUSTLIB/core/src/mem/mod.rs:LL:CC\n+  --> $DIR/invalid_enum_tag.rs:LL:CC\n    |\n-LL |     Discriminant(intrinsics::discriminant_value(v))\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ enum value has invalid tag: $HEX\n+LL |     let _val = mem::discriminant(&f);\n+   |                ^^^^^^^^^^^^^^^^^^^^^ enum value has invalid tag: $HEX\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::mem::discriminant::<Foo>` at RUSTLIB/core/src/mem/mod.rs:LL:CC\n-note: inside `main` at $DIR/invalid_enum_tag.rs:LL:CC\n-  --> $DIR/invalid_enum_tag.rs:LL:CC\n-   |\n-LL |     let _val = mem::discriminant(&f);\n-   |                ^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/invalid_enum_tag.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "91ba18f7680559d27f54c8c5c60c6dfd73fc7ee3", "filename": "tests/fail/provenance/ptr_invalid_offset.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,11 +1,10 @@\n //@compile-flags: -Zmiri-strict-provenance\n-//@error-pattern: is a dangling pointer\n #![feature(strict_provenance)]\n \n fn main() {\n     let x = 22;\n     let ptr = &x as *const _ as *const u8;\n     let roundtrip = std::ptr::invalid::<u8>(ptr as usize);\n     // Not even offsetting this is allowed.\n-    let _ = unsafe { roundtrip.offset(1) };\n+    let _ = unsafe { roundtrip.offset(1) }; //~ERROR: is a dangling pointer\n }"}, {"sha": "813a6515b7714c2e5c70d0a1cbe1a050aa5d76e0", "filename": "tests/fail/provenance/ptr_invalid_offset.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,18 +1,13 @@\n error: Undefined Behavior: out-of-bounds pointer arithmetic: $HEX[noalloc] is a dangling pointer (it has no provenance)\n-  --> RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n+  --> $DIR/ptr_invalid_offset.rs:LL:CC\n    |\n-LL |         unsafe { intrinsics::offset(self, count) }\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: $HEX[noalloc] is a dangling pointer (it has no provenance)\n+LL |     let _ = unsafe { roundtrip.offset(1) };\n+   |                      ^^^^^^^^^^^^^^^^^^^ out-of-bounds pointer arithmetic: $HEX[noalloc] is a dangling pointer (it has no provenance)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::ptr::const_ptr::<impl *const u8>::offset` at RUSTLIB/core/src/ptr/const_ptr.rs:LL:CC\n-note: inside `main` at $DIR/ptr_invalid_offset.rs:LL:CC\n-  --> $DIR/ptr_invalid_offset.rs:LL:CC\n-   |\n-LL |     let _ = unsafe { roundtrip.offset(1) };\n-   |                      ^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/ptr_invalid_offset.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "6a7622671b59df81caf613ad07291f63ad81b764", "filename": "tests/fail/should-pass/cpp20_rwc_syncs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,6 +1,5 @@\n //@ignore-target-windows: Concurrency on Windows is not supported yet.\n //@compile-flags: -Zmiri-ignore-leaks\n-//@error-pattern: unreachable\n \n // https://plv.mpi-sws.org/scfix/paper.pdf\n // 2.2 Second Problem: SC Fences are Too Weak\n@@ -77,7 +76,7 @@ fn test_cpp20_rwc_syncs() {\n     if (b, c) == (0, 0) {\n         // This *should* be unreachable, but Miri will reach it.\n         unsafe {\n-            std::hint::unreachable_unchecked();\n+            std::hint::unreachable_unchecked(); //~ERROR: unreachable\n         }\n     }\n }"}, {"sha": "17573a33b3d7015bf8a75fae84cd2eecab1ffaef", "filename": "tests/fail/should-pass/cpp20_rwc_syncs.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,18 +1,13 @@\n error: Undefined Behavior: entering unreachable code\n-  --> RUSTLIB/core/src/hint.rs:LL:CC\n+  --> $DIR/cpp20_rwc_syncs.rs:LL:CC\n    |\n-LL |     unsafe { intrinsics::unreachable() }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ entering unreachable code\n+LL |             std::hint::unreachable_unchecked();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ entering unreachable code\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::hint::unreachable_unchecked` at RUSTLIB/core/src/hint.rs:LL:CC\n-note: inside `test_cpp20_rwc_syncs` at $DIR/cpp20_rwc_syncs.rs:LL:CC\n-  --> $DIR/cpp20_rwc_syncs.rs:LL:CC\n-   |\n-LL |             std::hint::unreachable_unchecked();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `test_cpp20_rwc_syncs` at $DIR/cpp20_rwc_syncs.rs:LL:CC\n note: inside `main` at $DIR/cpp20_rwc_syncs.rs:LL:CC\n   --> $DIR/cpp20_rwc_syncs.rs:LL:CC\n    |"}, {"sha": "3389d5b9ddeafd46d2748f3f863596ea7947da96", "filename": "tests/fail/unreachable.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Funreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Funreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funreachable.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,4 +1,3 @@\n-//@error-pattern: entering unreachable code\n fn main() {\n-    unsafe { std::hint::unreachable_unchecked() }\n+    unsafe { std::hint::unreachable_unchecked() } //~ERROR: entering unreachable code\n }"}, {"sha": "b487b4374756bf969ea2fcd1887fdc8319c714ac", "filename": "tests/fail/unreachable.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Funreachable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Funreachable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funreachable.stderr?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -1,18 +1,13 @@\n error: Undefined Behavior: entering unreachable code\n-  --> RUSTLIB/core/src/hint.rs:LL:CC\n+  --> $DIR/unreachable.rs:LL:CC\n    |\n-LL |     unsafe { intrinsics::unreachable() }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^ entering unreachable code\n+LL |     unsafe { std::hint::unreachable_unchecked() }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ entering unreachable code\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n    = note: backtrace:\n-   = note: inside `std::hint::unreachable_unchecked` at RUSTLIB/core/src/hint.rs:LL:CC\n-note: inside `main` at $DIR/unreachable.rs:LL:CC\n-  --> $DIR/unreachable.rs:LL:CC\n-   |\n-LL |     unsafe { std::hint::unreachable_unchecked() }\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: inside `main` at $DIR/unreachable.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n "}, {"sha": "95a10510713ccab7a5d3b6563facafdc50f5e3c4", "filename": "tests/fail/weak_memory/racing_mixed_size.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fweak_memory%2Fracing_mixed_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b514667c36f559317a316a5d9b8cd019328be581/tests%2Ffail%2Fweak_memory%2Fracing_mixed_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fweak_memory%2Fracing_mixed_size.rs?ref=b514667c36f559317a316a5d9b8cd019328be581", "patch": "@@ -4,6 +4,7 @@\n \n #![feature(core_intrinsics)]\n \n+use std::ptr;\n use std::sync::atomic::AtomicU32;\n use std::sync::atomic::Ordering::*;\n use std::thread::spawn;\n@@ -30,7 +31,7 @@ pub fn main() {\n         let x_ptr = x as *const AtomicU32 as *const u32;\n         let x_split = split_u32_ptr(x_ptr);\n         unsafe {\n-            let hi = &(*x_split)[0] as *const u16;\n+            let hi = ptr::addr_of!((*x_split)[0]);\n             std::intrinsics::atomic_load_relaxed(hi); //~ ERROR: imperfectly overlapping\n         }\n     });"}]}