{"sha": "2752e328c9696aa3f8f61046507392ecdedc6667", "node_id": "C_kwDOAAsO6NoAKDI3NTJlMzI4Yzk2OTZhYTNmOGY2MTA0NjUwNzM5MmVjZGVkYzY2Njc", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-24T15:31:38Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-21T16:00:31Z"}, "message": "Allow opaque types in trait impl headers and rely on coherence to reject unsound cases", "tree": {"sha": "dcadf8f99d47b13f43218a114431ab6500ee57e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcadf8f99d47b13f43218a114431ab6500ee57e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2752e328c9696aa3f8f61046507392ecdedc6667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2752e328c9696aa3f8f61046507392ecdedc6667", "html_url": "https://github.com/rust-lang/rust/commit/2752e328c9696aa3f8f61046507392ecdedc6667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2752e328c9696aa3f8f61046507392ecdedc6667/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fe6f36224e92db6fbde952e0b7e50863161f6ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe6f36224e92db6fbde952e0b7e50863161f6ee", "html_url": "https://github.com/rust-lang/rust/commit/7fe6f36224e92db6fbde952e0b7e50863161f6ee"}], "stats": {"total": 453, "additions": 224, "deletions": 229}, "files": [{"sha": "d66b6585fb6f7c10d27304bc5741a88818145bef", "filename": "compiler/rustc_hir_analysis/src/coherence/orphan.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Forphan.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -5,7 +5,6 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{struct_span_err, DelayDm};\n use rustc_errors::{Diagnostic, ErrorGuaranteed};\n use rustc_hir as hir;\n-use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::util::IgnoreRegions;\n use rustc_middle::ty::{\n@@ -47,58 +46,6 @@ fn do_orphan_check_impl<'tcx>(\n     let sp = tcx.def_span(def_id);\n     let tr = impl_.of_trait.as_ref().unwrap();\n \n-    // Ensure no opaque types are present in this impl header. See issues #76202 and #86411 for examples,\n-    // and #84660 where it would otherwise allow unsoundness.\n-    if trait_ref.has_opaque_types() {\n-        trace!(\"{:#?}\", item);\n-        // First we find the opaque type in question.\n-        for ty in trait_ref.substs {\n-            for ty in ty.walk() {\n-                let ty::subst::GenericArgKind::Type(ty) = ty.unpack() else { continue };\n-                let ty::Opaque(def_id, _) = *ty.kind() else { continue };\n-                trace!(?def_id);\n-\n-                // Then we search for mentions of the opaque type's type alias in the HIR\n-                struct SpanFinder<'tcx> {\n-                    sp: Span,\n-                    def_id: DefId,\n-                    tcx: TyCtxt<'tcx>,\n-                }\n-                impl<'v, 'tcx> hir::intravisit::Visitor<'v> for SpanFinder<'tcx> {\n-                    #[instrument(level = \"trace\", skip(self, _id))]\n-                    fn visit_path(&mut self, path: &'v hir::Path<'v>, _id: hir::HirId) {\n-                        // You can't mention an opaque type directly, so we look for type aliases\n-                        if let hir::def::Res::Def(hir::def::DefKind::TyAlias, def_id) = path.res {\n-                            // And check if that type alias's type contains the opaque type we're looking for\n-                            for arg in self.tcx.type_of(def_id).walk() {\n-                                if let GenericArgKind::Type(ty) = arg.unpack() {\n-                                    if let ty::Opaque(def_id, _) = *ty.kind() {\n-                                        if def_id == self.def_id {\n-                                            // Finally we update the span to the mention of the type alias\n-                                            self.sp = path.span;\n-                                            return;\n-                                        }\n-                                    }\n-                                }\n-                            }\n-                        }\n-                        hir::intravisit::walk_path(self, path)\n-                    }\n-                }\n-\n-                let mut visitor = SpanFinder { sp, def_id, tcx };\n-                hir::intravisit::walk_item(&mut visitor, item);\n-                let reported = tcx\n-                    .sess\n-                    .struct_span_err(visitor.sp, \"cannot implement trait on type alias impl trait\")\n-                    .span_note(tcx.def_span(def_id), \"type alias impl trait defined here\")\n-                    .emit();\n-                return Err(reported);\n-            }\n-        }\n-        span_bug!(sp, \"opaque type not found, but `has_opaque_types` is set\")\n-    }\n-\n     match traits::orphan_check(tcx, item.owner_id.to_def_id()) {\n         Ok(()) => {}\n         Err(err) => emit_orphan_check_error("}, {"sha": "1ee4985cf8de044ae3c69696403b3999455d51d4", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -42,7 +42,6 @@ where\n     ClosureSimplifiedType(D),\n     GeneratorSimplifiedType(D),\n     GeneratorWitnessSimplifiedType(usize),\n-    OpaqueSimplifiedType(D),\n     FunctionSimplifiedType(usize),\n     PlaceholderSimplifiedType,\n }\n@@ -127,7 +126,7 @@ pub fn simplify_type<'tcx>(\n             TreatParams::AsPlaceholder => Some(PlaceholderSimplifiedType),\n             TreatParams::AsInfer => None,\n         },\n-        ty::Projection(_) => match treat_params {\n+        ty::Opaque(..) | ty::Projection(_) => match treat_params {\n             // When treating `ty::Param` as a placeholder, projections also\n             // don't unify with anything else as long as they are fully normalized.\n             //\n@@ -138,7 +137,6 @@ pub fn simplify_type<'tcx>(\n             }\n             TreatParams::AsPlaceholder | TreatParams::AsInfer => None,\n         },\n-        ty::Opaque(def_id, _) => Some(OpaqueSimplifiedType(def_id)),\n         ty::Foreign(def_id) => Some(ForeignSimplifiedType(def_id)),\n         ty::Bound(..) | ty::Infer(_) | ty::Error(_) => None,\n     }\n@@ -151,8 +149,7 @@ impl<D: Copy + Debug + Eq> SimplifiedTypeGen<D> {\n             | ForeignSimplifiedType(d)\n             | TraitSimplifiedType(d)\n             | ClosureSimplifiedType(d)\n-            | GeneratorSimplifiedType(d)\n-            | OpaqueSimplifiedType(d) => Some(d),\n+            | GeneratorSimplifiedType(d) => Some(d),\n             _ => None,\n         }\n     }\n@@ -182,7 +179,6 @@ impl<D: Copy + Debug + Eq> SimplifiedTypeGen<D> {\n             ClosureSimplifiedType(d) => ClosureSimplifiedType(map(d)),\n             GeneratorSimplifiedType(d) => GeneratorSimplifiedType(map(d)),\n             GeneratorWitnessSimplifiedType(n) => GeneratorWitnessSimplifiedType(n),\n-            OpaqueSimplifiedType(d) => OpaqueSimplifiedType(map(d)),\n             FunctionSimplifiedType(n) => FunctionSimplifiedType(n),\n             PlaceholderSimplifiedType => PlaceholderSimplifiedType,\n         }\n@@ -229,7 +225,7 @@ impl DeepRejectCtxt {\n         match impl_ty.kind() {\n             // Start by checking whether the type in the impl may unify with\n             // pretty much everything. Just return `true` in that case.\n-            ty::Param(_) | ty::Projection(_) | ty::Error(_) => return true,\n+            ty::Param(_) | ty::Projection(_) | ty::Error(_) | ty::Opaque(..) => return true,\n             // These types only unify with inference variables or their own\n             // variant.\n             ty::Bool\n@@ -247,8 +243,7 @@ impl DeepRejectCtxt {\n             | ty::Never\n             | ty::Tuple(..)\n             | ty::FnPtr(..)\n-            | ty::Foreign(..)\n-            | ty::Opaque(..) => {}\n+            | ty::Foreign(..) => {}\n             ty::FnDef(..)\n             | ty::Closure(..)\n             | ty::Generator(..)\n@@ -328,10 +323,7 @@ impl DeepRejectCtxt {\n                 _ => false,\n             },\n \n-            // Opaque types in impls should be forbidden, but that doesn't\n-            // stop compilation. So this match arm should never return true\n-            // if compilation succeeds.\n-            ty::Opaque(..) => matches!(k, ty::Opaque(..)),\n+            ty::Opaque(..) => true,\n \n             // Impls cannot contain these types as these cannot be named directly.\n             ty::FnDef(..) | ty::Closure(..) | ty::Generator(..) => false,"}, {"sha": "ff013b761e3797c833b5db3d59096b790e6593b5", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::Diagnostic;\n use rustc_hir::def_id::{DefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::CRATE_HIR_ID;\n-use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n+use rustc_infer::infer::{DefiningAnchor, InferCtxt, TyCtxtInferExt};\n use rustc_infer::traits::util;\n use rustc_middle::traits::specialization_graph::OverlapMode;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n@@ -94,7 +94,7 @@ pub fn overlapping_impls<'tcx>(\n         return None;\n     }\n \n-    let infcx = tcx.infer_ctxt().build();\n+    let infcx = tcx.infer_ctxt().with_opaque_type_inference(DefiningAnchor::Bubble).build();\n     let selcx = &mut SelectionContext::intercrate(&infcx);\n     let overlaps =\n         overlap(selcx, skip_leak_check, impl1_def_id, impl2_def_id, overlap_mode).is_some();\n@@ -105,7 +105,7 @@ pub fn overlapping_impls<'tcx>(\n     // In the case where we detect an error, run the check again, but\n     // this time tracking intercrate ambiguity causes for better\n     // diagnostics. (These take time and can lead to false errors.)\n-    let infcx = tcx.infer_ctxt().build();\n+    let infcx = tcx.infer_ctxt().with_opaque_type_inference(DefiningAnchor::Bubble).build();\n     let selcx = &mut SelectionContext::intercrate(&infcx);\n     selcx.enable_tracking_intercrate_ambiguity_causes();\n     Some(overlap(selcx, skip_leak_check, impl1_def_id, impl2_def_id, overlap_mode).unwrap())"}, {"sha": "5b6a62b24d4b32281173d42358401d8fc2788ebc", "filename": "src/test/ui/coherence/coherence-with-closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-closure.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -8,7 +8,6 @@ fn defining_use() -> OpaqueClosure {\n struct Wrapper<T>(T);\n trait Trait {}\n impl Trait for Wrapper<OpaqueClosure> {}\n-//~^ ERROR cannot implement trait on type alias impl trait\n impl<T: Sync> Trait for Wrapper<T> {}\n //~^ ERROR conflicting implementations of trait `Trait` for type `Wrapper<OpaqueClosure>`\n "}, {"sha": "431108e14d7d85949809482b045d2d3fb433f35d", "filename": "src/test/ui/coherence/coherence-with-closure.stderr", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-closure.stderr?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -1,24 +1,11 @@\n error[E0119]: conflicting implementations of trait `Trait` for type `Wrapper<OpaqueClosure>`\n-  --> $DIR/coherence-with-closure.rs:12:1\n+  --> $DIR/coherence-with-closure.rs:11:1\n    |\n LL | impl Trait for Wrapper<OpaqueClosure> {}\n    | ------------------------------------- first implementation here\n-LL |\n LL | impl<T: Sync> Trait for Wrapper<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Wrapper<OpaqueClosure>`\n \n-error: cannot implement trait on type alias impl trait\n-  --> $DIR/coherence-with-closure.rs:10:24\n-   |\n-LL | impl Trait for Wrapper<OpaqueClosure> {}\n-   |                        ^^^^^^^^^^^^^\n-   |\n-note: type alias impl trait defined here\n-  --> $DIR/coherence-with-closure.rs:3:22\n-   |\n-LL | type OpaqueClosure = impl Sized;\n-   |                      ^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "70665ba06f95435b138f5c608ae0d2dfed43153f", "filename": "src/test/ui/coherence/coherence-with-generator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-generator.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -12,7 +12,6 @@ fn defining_use() -> OpaqueGenerator {\n struct Wrapper<T>(T);\n trait Trait {}\n impl Trait for Wrapper<OpaqueGenerator> {}\n-//~^ ERROR cannot implement trait on type alias impl trait\n impl<T: Sync> Trait for Wrapper<T> {}\n //~^ ERROR conflicting implementations of trait `Trait` for type `Wrapper<OpaqueGenerator>`\n "}, {"sha": "6d3be2e16c6578b37746a5bd5cc5f5b2ac39c229", "filename": "src/test/ui/coherence/coherence-with-generator.stderr", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-generator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-generator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-with-generator.stderr?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -1,24 +1,11 @@\n error[E0119]: conflicting implementations of trait `Trait` for type `Wrapper<OpaqueGenerator>`\n-  --> $DIR/coherence-with-generator.rs:16:1\n+  --> $DIR/coherence-with-generator.rs:15:1\n    |\n LL | impl Trait for Wrapper<OpaqueGenerator> {}\n    | --------------------------------------- first implementation here\n-LL |\n LL | impl<T: Sync> Trait for Wrapper<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `Wrapper<OpaqueGenerator>`\n \n-error: cannot implement trait on type alias impl trait\n-  --> $DIR/coherence-with-generator.rs:14:24\n-   |\n-LL | impl Trait for Wrapper<OpaqueGenerator> {}\n-   |                        ^^^^^^^^^^^^^^^\n-   |\n-note: type alias impl trait defined here\n-  --> $DIR/coherence-with-generator.rs:3:24\n-   |\n-LL | type OpaqueGenerator = impl Sized;\n-   |                        ^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "35994e4a5ba3f5b7556ef82e9cbb6c0def9e12e6", "filename": "src/test/ui/impl-trait/auto-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -20,7 +20,6 @@ impl<T: Send> AnotherTrait for T {}\n // in the future.)\n impl AnotherTrait for D<OpaqueType> {\n     //~^ ERROR conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n-    //~| ERROR cannot implement trait on type alias impl trait\n }\n \n fn main() {}"}, {"sha": "81009413c9a268f550e356fe32381bf0e3526a88", "filename": "src/test/ui/impl-trait/auto-trait.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -7,18 +7,6 @@ LL | impl<T: Send> AnotherTrait for T {}\n LL | impl AnotherTrait for D<OpaqueType> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<OpaqueType>`\n \n-error: cannot implement trait on type alias impl trait\n-  --> $DIR/auto-trait.rs:21:25\n-   |\n-LL | impl AnotherTrait for D<OpaqueType> {\n-   |                         ^^^^^^^^^^\n-   |\n-note: type alias impl trait defined here\n-  --> $DIR/auto-trait.rs:7:19\n-   |\n-LL | type OpaqueType = impl OpaqueTrait;\n-   |                   ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "70e24a3a9d029b946073b198b4d1cbf7583381a1", "filename": "src/test/ui/impl-trait/negative-reasoning.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -18,7 +18,6 @@ impl<T: std::fmt::Debug> AnotherTrait for T {}\n // This is in error, because we cannot assume that `OpaqueType: !Debug`\n impl AnotherTrait for D<OpaqueType> {\n     //~^ ERROR conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n-    //~| ERROR cannot implement trait on type alias impl trait\n }\n \n fn main() {}"}, {"sha": "6b8cc9e7374239c2c14036bf2ce6bfd6628323ad", "filename": "src/test/ui/impl-trait/negative-reasoning.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -9,18 +9,6 @@ LL | impl AnotherTrait for D<OpaqueType> {\n    |\n    = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `OpaqueType` in future versions\n \n-error: cannot implement trait on type alias impl trait\n-  --> $DIR/negative-reasoning.rs:19:25\n-   |\n-LL | impl AnotherTrait for D<OpaqueType> {\n-   |                         ^^^^^^^^^^\n-   |\n-note: type alias impl trait defined here\n-  --> $DIR/negative-reasoning.rs:7:19\n-   |\n-LL | type OpaqueType = impl OpaqueTrait;\n-   |                   ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "af9dfe25bb4ce0b4ecaeb198800be7c6e81bd25b", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -5,13 +5,13 @@ type Foo = impl PartialEq<(Foo, i32)>;\n struct Bar;\n \n impl PartialEq<(Foo, i32)> for Bar {\n-//~^ ERROR cannot implement trait on type alias impl trait\n     fn eq(&self, _other: &(Foo, i32)) -> bool {\n         true\n     }\n }\n \n fn foo() -> Foo {\n+    //~^ ERROR can't compare `Bar` with `(Bar, i32)`\n     Bar\n }\n "}, {"sha": "7b63a3d0b9f104fbbe52c964cd4eef44293594ca", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -1,14 +1,15 @@\n-error: cannot implement trait on type alias impl trait\n-  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs:7:17\n+error[E0277]: can't compare `Bar` with `(Bar, i32)`\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs:13:13\n    |\n-LL | impl PartialEq<(Foo, i32)> for Bar {\n-   |                 ^^^\n+LL | fn foo() -> Foo {\n+   |             ^^^ no implementation for `Bar == (Bar, i32)`\n+LL |\n+LL |     Bar\n+   |     --- return type was inferred to be `Bar` here\n    |\n-note: type alias impl trait defined here\n-  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs:3:12\n-   |\n-LL | type Foo = impl PartialEq<(Foo, i32)>;\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: the trait `PartialEq<(Bar, i32)>` is not implemented for `Bar`\n+   = help: the trait `PartialEq<(Foo, i32)>` is implemented for `Bar`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "91f1ed48133f574014eecf8a0fffc31e896bd014", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -2,24 +2,27 @@\n \n mod a {\n     type Foo = impl PartialEq<(Foo, i32)>;\n+    //~^ ERROR: unconstrained opaque type\n \n     struct Bar;\n \n     impl PartialEq<(Bar, i32)> for Bar {\n         fn eq(&self, _other: &(Foo, i32)) -> bool {\n+            //~^ ERROR: `eq` has an incompatible type for trait\n             true\n         }\n     }\n }\n \n mod b {\n     type Foo = impl PartialEq<(Foo, i32)>;\n+    //~^ ERROR: unconstrained opaque type\n \n     struct Bar;\n \n     impl PartialEq<(Foo, i32)> for Bar {\n-        //~^ ERROR cannot implement trait on type alias impl trait\n         fn eq(&self, _other: &(Bar, i32)) -> bool {\n+            //~^ ERROR: `eq` has an incompatible type for trait\n             true\n         }\n     }"}, {"sha": "3dda5761ada6b34a97ef22bab914c84611f369cf", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.stderr", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -1,14 +1,49 @@\n-error: cannot implement trait on type alias impl trait\n-  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:20:21\n+error: unconstrained opaque type\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:4:16\n    |\n-LL |     impl PartialEq<(Foo, i32)> for Bar {\n-   |                     ^^^\n+LL |     type Foo = impl PartialEq<(Foo, i32)>;\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Foo` must be used in combination with a concrete type within the same module\n+\n+error[E0053]: method `eq` has an incompatible type for trait\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:10:30\n+   |\n+LL |     type Foo = impl PartialEq<(Foo, i32)>;\n+   |                -------------------------- the found opaque type\n+...\n+LL |         fn eq(&self, _other: &(Foo, i32)) -> bool {\n+   |                              ^^^^^^^^^^^\n+   |                              |\n+   |                              expected struct `a::Bar`, found opaque type\n+   |                              help: change the parameter type to match the trait: `&(a::Bar, i32)`\n    |\n-note: type alias impl trait defined here\n-  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:16:16\n+   = note: expected fn pointer `fn(&a::Bar, &(a::Bar, i32)) -> _`\n+              found fn pointer `fn(&a::Bar, &(a::Foo, i32)) -> _`\n+\n+error: unconstrained opaque type\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:18:16\n    |\n LL |     type Foo = impl PartialEq<(Foo, i32)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Foo` must be used in combination with a concrete type within the same module\n+\n+error[E0053]: method `eq` has an incompatible type for trait\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:24:30\n+   |\n+LL |     type Foo = impl PartialEq<(Foo, i32)>;\n+   |                -------------------------- the expected opaque type\n+...\n+LL |         fn eq(&self, _other: &(Bar, i32)) -> bool {\n+   |                              ^^^^^^^^^^^\n+   |                              |\n+   |                              expected opaque type, found struct `b::Bar`\n+   |                              help: change the parameter type to match the trait: `&(b::Foo, i32)`\n+   |\n+   = note: expected fn pointer `fn(&b::Bar, &(b::Foo, i32)) -> _`\n+              found fn pointer `fn(&b::Bar, &(b::Bar, i32)) -> _`\n \n-error: aborting due to previous error\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0053`."}, {"sha": "2462e703a71656053f59d5df6fbfefd3cadfc1eb", "filename": "src/test/ui/traits/alias/issue-83613.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -9,5 +9,4 @@ trait AnotherTrait {}\n impl<T: Send> AnotherTrait for T {}\n impl AnotherTrait for OpaqueType {}\n //~^ ERROR conflicting implementations of trait `AnotherTrait` for type `OpaqueType`\n-//~| ERROR cannot implement trait on type alias impl trait\n fn main() {}"}, {"sha": "a78294da6c140766c4650b8a9aabe8bf3fc2c0cf", "filename": "src/test/ui/traits/alias/issue-83613.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -6,18 +6,6 @@ LL | impl<T: Send> AnotherTrait for T {}\n LL | impl AnotherTrait for OpaqueType {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `OpaqueType`\n \n-error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-83613.rs:10:23\n-   |\n-LL | impl AnotherTrait for OpaqueType {}\n-   |                       ^^^^^^^^^^\n-   |\n-note: type alias impl trait defined here\n-  --> $DIR/issue-83613.rs:4:19\n-   |\n-LL | type OpaqueType = impl OpaqueTrait;\n-   |                   ^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "077a31494a972fe4517a0cb9cae4a54774538f4e", "filename": "src/test/ui/type-alias-impl-trait/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -12,6 +12,6 @@ fn use_alias<T>(val: T) -> AliasOfForeignType<T> {\n }\n \n impl<T> foreign_crate::ForeignTrait for AliasOfForeignType<T> {}\n-//~^ ERROR cannot implement trait on type alias impl trait\n+//~^ ERROR only traits defined in the current crate can be implemented for arbitrary types\n \n fn main() {}"}, {"sha": "c923eb08ab312fa5d5cb112b834d1b0dee596624", "filename": "src/test/ui/type-alias-impl-trait/coherence.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fcoherence.stderr?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -1,14 +1,14 @@\n-error: cannot implement trait on type alias impl trait\n-  --> $DIR/coherence.rs:14:41\n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence.rs:14:1\n    |\n LL | impl<T> foreign_crate::ForeignTrait for AliasOfForeignType<T> {}\n-   |                                         ^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------\n+   | |                                       |\n+   | |                                       `AliasOfForeignType<T>` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n    |\n-note: type alias impl trait defined here\n-  --> $DIR/coherence.rs:9:30\n-   |\n-LL | type AliasOfForeignType<T> = impl LocalTrait;\n-   |                              ^^^^^^^^^^^^^^^\n+   = note: define and implement a trait or new type instead\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0117`."}, {"sha": "0efbd1c2bd5fd4cb4700a04957722f6d82bab782", "filename": "src/test/ui/type-alias-impl-trait/impl_trait_for_generic_tait.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_generic_tait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_generic_tait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_generic_tait.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+trait Foo {\n+    type Assoc;\n+}\n+\n+impl Foo for i32 {\n+    type Assoc = u32;\n+}\n+type ImplTrait = impl Sized;\n+fn constrain() -> ImplTrait {\n+    1u64\n+}\n+impl Foo for i64 {\n+    type Assoc = ImplTrait;\n+}\n+\n+trait Bar<T> {}\n+\n+impl<T: Foo> Bar<<T as Foo>::Assoc> for T {}\n+\n+fn main() {}"}, {"sha": "9f32c5d888b5f40efa983dc4ed6f7fde064f27c5", "filename": "src/test/ui/type-alias-impl-trait/impl_trait_for_tait.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_tait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_tait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_tait.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -0,0 +1,21 @@\n+// compile-flags: --crate-type=lib\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+type Alias = impl Sized;\n+\n+fn constrain() -> Alias {\n+    1i32\n+}\n+\n+trait HideIt {\n+    type Assoc;\n+}\n+\n+impl HideIt for () {\n+    type Assoc = Alias;\n+}\n+\n+pub trait Yay {}\n+\n+impl Yay for <() as HideIt>::Assoc {}"}, {"sha": "8ec20acef4de6df8d6dd4d34e7d089c58b341d5f", "filename": "src/test/ui/type-alias-impl-trait/impl_trait_for_tait_bound.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_tait_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_tait_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_tait_bound.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -0,0 +1,19 @@\n+#![feature(type_alias_impl_trait)]\n+\n+use std::fmt::Debug;\n+\n+type Foo = impl Debug;\n+pub trait Yay { }\n+impl Yay for Foo { }\n+\n+fn foo() {\n+    is_yay::<u32>();   //~ ERROR: the trait bound `u32: Yay` is not satisfied\n+    is_debug::<u32>(); // OK\n+    is_yay::<Foo>();   // OK\n+    is_debug::<Foo>(); // OK\n+}\n+\n+fn is_yay<T: Yay>() { }\n+fn is_debug<T: Debug>() { }\n+\n+fn main() {}"}, {"sha": "1c83105a18affe735ab0032e4488304f04848119", "filename": "src/test/ui/type-alias-impl-trait/impl_trait_for_tait_bound.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_tait_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_tait_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_tait_bound.stderr?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: the trait bound `u32: Yay` is not satisfied\n+  --> $DIR/impl_trait_for_tait_bound.rs:10:14\n+   |\n+LL |     is_yay::<u32>();\n+   |              ^^^ the trait `Yay` is not implemented for `u32`\n+   |\n+   = help: the trait `Yay` is implemented for `Foo`\n+note: required by a bound in `is_yay`\n+  --> $DIR/impl_trait_for_tait_bound.rs:16:14\n+   |\n+LL | fn is_yay<T: Yay>() { }\n+   |              ^^^ required by this bound in `is_yay`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a4b8c2d190db93c9d5c67f48a94f059b818c0797", "filename": "src/test/ui/type-alias-impl-trait/impl_trait_for_tait_bound2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_tait_bound2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_tait_bound2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_tait_bound2.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -0,0 +1,16 @@\n+#![feature(type_alias_impl_trait)]\n+\n+use std::fmt::Debug;\n+\n+type Foo = impl Debug;\n+\n+pub trait Yay { }\n+impl Yay for u32 { }\n+\n+fn foo() {\n+    is_yay::<Foo>(); //~ ERROR: the trait bound `Foo: Yay` is not satisfied\n+}\n+\n+fn is_yay<T: Yay>() { }\n+\n+fn main() {}"}, {"sha": "a6440f02c27d856b6e022de13ca933b15f9c0071", "filename": "src/test/ui/type-alias-impl-trait/impl_trait_for_tait_bound2.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_tait_bound2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_tait_bound2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fimpl_trait_for_tait_bound2.stderr?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: the trait bound `Foo: Yay` is not satisfied\n+  --> $DIR/impl_trait_for_tait_bound2.rs:11:14\n+   |\n+LL |     is_yay::<Foo>();\n+   |              ^^^ the trait `Yay` is not implemented for `Foo`\n+   |\n+   = help: the trait `Yay` is implemented for `u32`\n+note: required by a bound in `is_yay`\n+  --> $DIR/impl_trait_for_tait_bound2.rs:14:14\n+   |\n+LL | fn is_yay<T: Yay>() { }\n+   |              ^^^ required by this bound in `is_yay`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "9a9b2269f802eebf488667a03a464fcbc032ec23", "filename": "src/test/ui/type-alias-impl-trait/issue-65384.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -8,7 +8,7 @@ impl MyTrait for () {}\n type Bar = impl MyTrait;\n \n impl MyTrait for Bar {}\n-//~^ ERROR: cannot implement trait on type alias impl trait\n+//~^ ERROR: conflicting implementations of trait `MyTrait` for type `()`\n \n fn bazr() -> Bar { }\n "}, {"sha": "f6692ae320733d679e5562c84c1efc0827de7813", "filename": "src/test/ui/type-alias-impl-trait/issue-65384.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.stderr?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -1,14 +1,12 @@\n-error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-65384.rs:10:18\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `()`\n+  --> $DIR/issue-65384.rs:10:1\n    |\n+LL | impl MyTrait for () {}\n+   | ------------------- first implementation here\n+...\n LL | impl MyTrait for Bar {}\n-   |                  ^^^\n-   |\n-note: type alias impl trait defined here\n-  --> $DIR/issue-65384.rs:8:12\n-   |\n-LL | type Bar = impl MyTrait;\n-   |            ^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `()`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "b97e444c6d0e0d0824f38998a9ff9bdc107418fb", "filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -1,6 +1,8 @@\n // Regression test for issue #76202\n // Tests that we don't ICE when we have a trait impl on a TAIT.\n \n+// check-pass\n+\n #![feature(type_alias_impl_trait)]\n \n trait Dummy {}\n@@ -14,7 +16,12 @@ trait Test {\n }\n \n impl Test for F {\n-    //~^ ERROR cannot implement trait\n+    fn test(self) {}\n+}\n+\n+// Ok because `i32` does not implement `Dummy`,\n+// so it can't possibly be the hidden type of `F`.\n+impl Test for i32 {\n     fn test(self) {}\n }\n "}, {"sha": "2d4a6854a920be74ffc2add35ade869546709f08", "filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fe6f36224e92db6fbde952e0b7e50863161f6ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fe6f36224e92db6fbde952e0b7e50863161f6ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.stderr?ref=7fe6f36224e92db6fbde952e0b7e50863161f6ee", "patch": "@@ -1,14 +0,0 @@\n-error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-76202-trait-impl-for-tait.rs:16:15\n-   |\n-LL | impl Test for F {\n-   |               ^\n-   |\n-note: type alias impl trait defined here\n-  --> $DIR/issue-76202-trait-impl-for-tait.rs:9:10\n-   |\n-LL | type F = impl Dummy;\n-   |          ^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "2ba4befea2a3930fc4b37fa3141e364c2a363c25", "filename": "src/test/ui/type-alias-impl-trait/issue-84660-trait-impl-for-tait.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-trait-impl-for-tait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-trait-impl-for-tait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-trait-impl-for-tait.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -1,6 +1,8 @@\n // Regression test for issues #84660 and #86411: both are variations on #76202.\n // Tests that we don't ICE when we have an opaque type appearing anywhere in an impl header.\n \n+// check-pass\n+\n #![feature(type_alias_impl_trait)]\n \n trait Foo {}\n@@ -12,7 +14,7 @@ trait TraitArg<T> {\n     fn f();\n }\n \n-impl TraitArg<Bar> for () { //~ ERROR cannot implement trait\n+impl TraitArg<Bar> for () {\n     fn f() {\n         println!(\"ho\");\n     }"}, {"sha": "bb70d07be59bb0da395cd94836186ebc06d5e379", "filename": "src/test/ui/type-alias-impl-trait/issue-84660-trait-impl-for-tait.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fe6f36224e92db6fbde952e0b7e50863161f6ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-trait-impl-for-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fe6f36224e92db6fbde952e0b7e50863161f6ee/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-trait-impl-for-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-trait-impl-for-tait.stderr?ref=7fe6f36224e92db6fbde952e0b7e50863161f6ee", "patch": "@@ -1,14 +0,0 @@\n-error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-84660-trait-impl-for-tait.rs:15:15\n-   |\n-LL | impl TraitArg<Bar> for () {\n-   |               ^^^\n-   |\n-note: type alias impl trait defined here\n-  --> $DIR/issue-84660-trait-impl-for-tait.rs:8:12\n-   |\n-LL | type Bar = impl Foo;\n-   |            ^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "48d4b0c96ff0a0602e97efe2a622c44d741caa0d", "filename": "src/test/ui/type-alias-impl-trait/issue-84660-unsoundness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-unsoundness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-unsoundness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-unsoundness.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -13,14 +13,14 @@ trait Trait<T, In> {\n     fn convert(i: In) -> Self::Out;\n }\n \n-impl<In, Out> Trait<Bar, In> for Out { //~ ERROR cannot implement trait\n+impl<In, Out> Trait<Bar, In> for Out {\n     type Out = Out;\n     fn convert(_i: In) -> Self::Out {\n         unreachable!();\n     }\n }\n \n-impl<In, Out> Trait<(), In> for Out {\n+impl<In, Out> Trait<(), In> for Out { //~ ERROR conflicting implementations of trait `Trait<Bar, _>`\n     type Out = In;\n     fn convert(i: In) -> Self::Out {\n         i"}, {"sha": "6a75e1bd2c0fa879eed9bbed7a2079d6c961acf3", "filename": "src/test/ui/type-alias-impl-trait/issue-84660-unsoundness.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-unsoundness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-unsoundness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-unsoundness.stderr?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -1,14 +1,12 @@\n-error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-84660-unsoundness.rs:16:21\n+error[E0119]: conflicting implementations of trait `Trait<Bar, _>`\n+  --> $DIR/issue-84660-unsoundness.rs:23:1\n    |\n LL | impl<In, Out> Trait<Bar, In> for Out {\n-   |                     ^^^\n-   |\n-note: type alias impl trait defined here\n-  --> $DIR/issue-84660-unsoundness.rs:8:12\n-   |\n-LL | type Bar = impl Foo;\n-   |            ^^^^^^^^\n+   | ------------------------------------ first implementation here\n+...\n+LL | impl<In, Out> Trait<(), In> for Out {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "b0ebdd1bfab7d9e4108579346fe821c5d8758056", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.rs?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -4,11 +4,11 @@\n use std::fmt::Debug;\n \n type FooX = impl Debug;\n+//~^ ERROR unconstrained opaque type\n \n trait Foo<A> { }\n \n impl Foo<FooX> for () { }\n-//~^ cannot implement trait on type alias impl trait\n \n fn foo() -> impl Foo<FooX> {\n     ()"}, {"sha": "b1d947a9ccf4ec62423b7119c21b4cd7ee1f120f", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference3.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2752e328c9696aa3f8f61046507392ecdedc6667/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.stderr?ref=2752e328c9696aa3f8f61046507392ecdedc6667", "patch": "@@ -1,14 +1,10 @@\n-error: cannot implement trait on type alias impl trait\n-  --> $DIR/nested-tait-inference3.rs:10:10\n-   |\n-LL | impl Foo<FooX> for () { }\n-   |          ^^^^\n-   |\n-note: type alias impl trait defined here\n+error: unconstrained opaque type\n   --> $DIR/nested-tait-inference3.rs:6:13\n    |\n LL | type FooX = impl Debug;\n    |             ^^^^^^^^^^\n+   |\n+   = note: `FooX` must be used in combination with a concrete type within the same module\n \n error: aborting due to previous error\n "}]}