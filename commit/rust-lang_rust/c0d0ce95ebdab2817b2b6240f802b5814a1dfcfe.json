{"sha": "c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe", "node_id": "C_kwDOAAsO6NoAKGMwZDBjZTk1ZWJkYWIyODE3YjJiNjI0MGY4MDJiNTgxNGExZGZjZmU", "commit": {"author": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2022-07-21T17:28:24Z"}, "committer": {"name": "Jack Wrenn", "email": "jack@wrenn.fyi", "date": "2022-07-27T17:33:56Z"}, "message": "safe transmute: tweak tracing\n\nref: https://github.com/rust-lang/rust/pull/92268#discussion_r925246903\nref: https://github.com/rust-lang/rust/pull/92268#discussion_r925250811\nref: https://github.com/rust-lang/rust/pull/92268#discussion_r925255782", "tree": {"sha": "00f1864d4a714c21b5d05c9f7babcf52770d4596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00f1864d4a714c21b5d05c9f7babcf52770d4596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe", "html_url": "https://github.com/rust-lang/rust/commit/c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe/comments", "author": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jswrenn", "id": 3820879, "node_id": "MDQ6VXNlcjM4MjA4Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/3820879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jswrenn", "html_url": "https://github.com/jswrenn", "followers_url": "https://api.github.com/users/jswrenn/followers", "following_url": "https://api.github.com/users/jswrenn/following{/other_user}", "gists_url": "https://api.github.com/users/jswrenn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jswrenn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jswrenn/subscriptions", "organizations_url": "https://api.github.com/users/jswrenn/orgs", "repos_url": "https://api.github.com/users/jswrenn/repos", "events_url": "https://api.github.com/users/jswrenn/events{/privacy}", "received_events_url": "https://api.github.com/users/jswrenn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fa70c3b1272c986eed27f838b645892ad435772", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa70c3b1272c986eed27f838b645892ad435772", "html_url": "https://github.com/rust-lang/rust/commit/0fa70c3b1272c986eed27f838b645892ad435772"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "f2742dc8ee5ada1b46b78c9f5d0f27be62ea19a9", "filename": "compiler/rustc_transmute/src/layout/dfa.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fdfa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fdfa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fdfa.rs?ref=c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe", "patch": "@@ -103,7 +103,7 @@ where\n         Self { transitions, start, accepting }\n     }\n \n-    #[tracing::instrument]\n+    #[instrument(level = \"DEBUG\")]\n     #[cfg_attr(feature = \"rustc\", allow(rustc::potential_query_instability))]\n     pub(crate) fn from_nfa(nfa: Nfa<R>) -> Self {\n         let Nfa { transitions: nfa_transitions, start: nfa_start, accepting: nfa_accepting } = nfa;"}, {"sha": "70b3ba02b05b53a5c11f23890bbf57aaafa3ea9f", "filename": "compiler/rustc_transmute/src/layout/tree.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs?ref=c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe", "patch": "@@ -76,7 +76,6 @@ where\n     }\n \n     /// A `Tree` whose layout is entirely padding of the given width.\n-    #[tracing::instrument]\n     pub(crate) fn padding(width_in_bytes: usize) -> Self {\n         Self::Seq(vec![Self::uninit(); width_in_bytes])\n     }\n@@ -316,10 +315,7 @@ pub(crate) mod rustc {\n                             tcx,\n                         )?,\n                         AdtKind::Enum => {\n-                            tracing::trace!(\n-                                adt_def = ?adt_def,\n-                                \"treeifying enum\"\n-                            );\n+                            tracing::trace!(?adt_def, \"treeifying enum\");\n                             let mut tree = Tree::uninhabited();\n \n                             for (idx, discr) in adt_def.discriminants(tcx) {\n@@ -398,13 +394,13 @@ pub(crate) mod rustc {\n \n             // The layout of the variant is prefixed by the discriminant, if any.\n             if let Some(discr) = discr {\n-                tracing::trace!(discr = ?discr, \"treeifying discriminant\");\n+                tracing::trace!(?discr, \"treeifying discriminant\");\n                 let discr_layout = alloc::Layout::from_size_align(\n                     layout_summary.discriminant_size,\n                     clamp(layout_summary.discriminant_align),\n                 )\n                 .unwrap();\n-                tracing::trace!(discr_layout = ?discr_layout, \"computed discriminant layout\");\n+                tracing::trace!(?discr_layout, \"computed discriminant layout\");\n                 variant_layout = variant_layout.extend(discr_layout).unwrap().0;\n                 tree = tree.then(Self::from_disr(discr, tcx, layout_summary.discriminant_size));\n             }\n@@ -469,11 +465,7 @@ pub(crate) mod rustc {\n             layout.align().abi.bytes().try_into().unwrap(),\n         )\n         .unwrap();\n-        tracing::trace!(\n-            ty = ?ty,\n-            layout = ?layout,\n-            \"computed layout for type\"\n-        );\n+        tracing::trace!(?ty, ?layout, \"computed layout for type\");\n         Ok(layout)\n     }\n }"}, {"sha": "cfc7c752a6bd60bf6c4d5444faa8568c41885dee", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe", "patch": "@@ -8,6 +8,9 @@\n )]\n #![allow(dead_code, unused_variables)]\n \n+#[macro_use]\n+extern crate tracing;\n+\n #[cfg(feature = \"rustc\")]\n pub(crate) use rustc_data_structures::fx::{FxHashMap as Map, FxHashSet as Set};\n "}, {"sha": "8fb85527a0f0a6589583723f1b215c190dbb3e3e", "filename": "compiler/rustc_transmute/src/maybe_transmutable/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs?ref=c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe", "patch": "@@ -64,7 +64,7 @@ mod rustc {\n     impl<'tcx> MaybeTransmutableQuery<Ty<'tcx>, TyCtxt<'tcx>> {\n         /// This method begins by converting `src` and `dst` from `Ty`s to `Tree`s,\n         /// then computes an answer using those trees.\n-        #[tracing::instrument(skip(self), fields(src = ?self.src, dst = ?self.dst))]\n+        #[instrument(level = \"DEBUG\", skip(self), fields(src = ?self.src, dst = ?self.dst))]\n         pub fn answer(self) -> Answer<<TyCtxt<'tcx> as QueryContext>::Ref> {\n             let query_or_answer = self.map_layouts(|src, dst, scope, &context| {\n                 // Convert `src` and `dst` from their rustc representations, to `Tree`-based\n@@ -103,14 +103,14 @@ where\n     /// This method begins by de-def'ing `src` and `dst`, and prunes private paths from `dst`,\n     /// then converts `src` and `dst` to `Nfa`s, and computes an answer using those NFAs.\n     #[inline(always)]\n-    #[tracing::instrument(skip(self), fields(src = ?self.src, dst = ?self.dst))]\n+    #[instrument(level = \"DEBUG\", skip(self), fields(src = ?self.src, dst = ?self.dst))]\n     pub(crate) fn answer(self) -> Answer<<C as QueryContext>::Ref> {\n         let assume_visibility = self.assume.visibility;\n         let query_or_answer = self.map_layouts(|src, dst, scope, context| {\n             // Remove all `Def` nodes from `src`, without checking their visibility.\n             let src = src.prune(&|def| true);\n \n-            tracing::trace!(src = ?src, \"pruned src\");\n+            tracing::trace!(?src, \"pruned src\");\n \n             // Remove all `Def` nodes from `dst`, additionally...\n             let dst = if assume_visibility {\n@@ -121,7 +121,7 @@ where\n                 dst.prune(&|def| context.is_accessible_from(def, scope))\n             };\n \n-            tracing::trace!(dst = ?dst, \"pruned dst\");\n+            tracing::trace!(?dst, \"pruned dst\");\n \n             // Convert `src` from a tree-based representation to an NFA-based representation.\n             // If the conversion fails because `src` is uninhabited, conclude that the transmutation\n@@ -152,7 +152,7 @@ where\n     ///\n     /// This method converts `src` and `dst` to DFAs, then computes an answer using those DFAs.\n     #[inline(always)]\n-    #[tracing::instrument(skip(self), fields(src = ?self.src, dst = ?self.dst))]\n+    #[instrument(level = \"DEBUG\", skip(self), fields(src = ?self.src, dst = ?self.dst))]\n     pub(crate) fn answer(self) -> Answer<<C as QueryContext>::Ref> {\n         let query_or_answer = self\n             .map_layouts(|src, dst, scope, context| Ok((Dfa::from_nfa(src), Dfa::from_nfa(dst))));\n@@ -192,7 +192,7 @@ where\n     }\n \n     #[inline(always)]\n-    #[tracing::instrument(skip(self))]\n+    #[instrument(level = \"DEBUG\", skip(self))]\n     fn answer_memo(\n         &self,\n         cache: &mut Map<(dfa::State, dfa::State), Answer<<C as QueryContext>::Ref>>,"}, {"sha": "1a66b6cfe00efbd053b7b056aab1bfaa2e20b682", "filename": "compiler/rustc_transmute/src/maybe_transmutable/query_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs?ref=c0d0ce95ebdab2817b2b6240f802b5814a1dfcfe", "patch": "@@ -52,7 +52,7 @@ mod rustc {\n \n         type Scope = Ty<'tcx>;\n \n-        #[tracing::instrument(skip(self))]\n+        #[instrument(level = \"DEBUG\", skip(self))]\n         fn is_accessible_from(&self, def: Self::Def, scope: Self::Scope) -> bool {\n             use layout::rustc::Def;\n             use rustc_middle::ty;\n@@ -82,7 +82,7 @@ mod rustc {\n                 false\n             };\n \n-            tracing::trace!(ret = ?ret, \"ret\");\n+            tracing::trace!(?ret, \"ret\");\n             ret\n         }\n "}]}