{"sha": "e40585f2483b6aabe0107662727c906839717555", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MDU4NWYyNDgzYjZhYWJlMDEwNzY2MjcyN2M5MDY4Mzk3MTc1NTU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2018-06-15T23:00:07Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-29T08:10:58Z"}, "message": "Remove definiton of valid pointer\n\nThe enumerated list of conditions is replaced by an explanation that\nrust doesn't have a formal memory model. It does say that pointers\ncreated directly from references are guaranteed to be valid, and links\nto both the \"Unsafe Code\" section of the book and the \"Undefined\nBehavior\" section of the reference.", "tree": {"sha": "66e19e5f6c68a57d35a1b706cc1031028a2d8263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66e19e5f6c68a57d35a1b706cc1031028a2d8263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e40585f2483b6aabe0107662727c906839717555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e40585f2483b6aabe0107662727c906839717555", "html_url": "https://github.com/rust-lang/rust/commit/e40585f2483b6aabe0107662727c906839717555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e40585f2483b6aabe0107662727c906839717555/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30122e91d95e63dc47063b3b596c72ba65eec0a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/30122e91d95e63dc47063b3b596c72ba65eec0a1", "html_url": "https://github.com/rust-lang/rust/commit/30122e91d95e63dc47063b3b596c72ba65eec0a1"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "dd27bc715fa9068c2b738f9829bc228aa4d9bf9e", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e40585f2483b6aabe0107662727c906839717555/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e40585f2483b6aabe0107662727c906839717555/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=e40585f2483b6aabe0107662727c906839717555", "patch": "@@ -17,20 +17,27 @@\n //! # Safety\n //!\n //! Many functions in this module take raw pointers as arguments and dereference\n-//! them. For this to be safe, these pointers must be valid. A valid pointer\n-//! is one that satisfies **all** of the following conditions:\n+//! them. For this to be safe, these pointers must be valid. However, because\n+//! rust does not yet have a formal memory model, determining whether an\n+//! arbitrary pointer is a valid one can be tricky. One thing is certain:\n+//! creating a raw pointer from a reference (e.g. `&x as *const _`) *always*\n+//! results in a valid pointer. By exploiting this\u2014and by taking care when\n+//! using [pointer arithmetic]\u2014users can be confident in the correctness of\n+//! their unsafe code.\n //!\n-//! * The pointer is not null.\n-//! * The pointer is not dangling (it does not point to memory which has been\n-//!   freed).\n-//! * The pointer satisfies [LLVM's pointer aliasing rules].\n+//! For more information on dereferencing raw pointers, see the both the [book]\n+//! and the section in the reference devoted to [undefined behavior][ub].\n+//!\n+//! ## Alignment\n //!\n //! Valid pointers are not necessarily properly aligned. However, most functions\n //! require their arguments to be properly aligned, and will explicitly state\n //! this requirement in the `Safety` section. Notable exceptions to this are\n //! [`read_unaligned`] and [`write_unaligned`].\n //!\n-//! [LLVM's pointer aliasing rules]: https://llvm.org/docs/LangRef.html#pointer-aliasing-rules\n+//! [ub]: ../../reference/behavior-considered-undefined.html\n+//! [book]: ../../book/second-edition/ch19-01-unsafe-rust.html#dereferencing-a-raw-pointer\n+//! [pointer arithmetic]: ../../std/primitive.pointer.html#method.offset\n //! [`read_unaligned`]: ./fn.read_unaligned.html\n //! [`write_unaligned`]: ./fn.write_unaligned.html\n "}]}