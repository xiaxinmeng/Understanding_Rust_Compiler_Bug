{"sha": "04a41f889f563b2384c63c990b5423d201d62ebd", "node_id": "C_kwDOAAsO6NoAKDA0YTQxZjg4OWY1NjNiMjM4NGM2M2M5OTBiNTQyM2QyMDFkNjJlYmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-20T12:58:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-20T12:58:13Z"}, "message": "Auto merge of #107105 - matthiaskrgr:rollup-rkz9t7r, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #106783 (Recover labels written as identifiers)\n - #106973 (Don't treat closures from other crates as local)\n - #106979 (Document how to get the type of a default associated type)\n - #107053 (signal update string representation for haiku.)\n - #107058 (Recognise double-equals homoglyph)\n - #107067 (Custom MIR: Support storage statements)\n - #107076 (Added const-generic ui test case for issue #106419)\n - #107091 (Fix broken format strings in `infer.ftl`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9d9e675e350653f151e0e956cc568d863ef6cd7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d9e675e350653f151e0e956cc568d863ef6cd7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04a41f889f563b2384c63c990b5423d201d62ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04a41f889f563b2384c63c990b5423d201d62ebd", "html_url": "https://github.com/rust-lang/rust/commit/04a41f889f563b2384c63c990b5423d201d62ebd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04a41f889f563b2384c63c990b5423d201d62ebd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56ee85274e5a3a4dda92f3bf73d1664c74ff9c15", "url": "https://api.github.com/repos/rust-lang/rust/commits/56ee85274e5a3a4dda92f3bf73d1664c74ff9c15", "html_url": "https://github.com/rust-lang/rust/commit/56ee85274e5a3a4dda92f3bf73d1664c74ff9c15"}, {"sha": "c42fad8ff3b912719e5cbedc6756c6d1f27f8db3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c42fad8ff3b912719e5cbedc6756c6d1f27f8db3", "html_url": "https://github.com/rust-lang/rust/commit/c42fad8ff3b912719e5cbedc6756c6d1f27f8db3"}], "stats": {"total": 897, "additions": 532, "deletions": 365}, "files": [{"sha": "cc38d71b484a452eed88db0be449f89a99d15cd1", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -193,7 +193,7 @@ infer_actual_impl_expl_expected_signature_any = {$leading_ellipsis ->\n infer_actual_impl_expl_expected_signature_some = {$leading_ellipsis ->\n     [true] ...\n     *[false] {\"\"}\n-}closure with signature `{$ty_or_sig}` must implement `{$trait_path}`, for some specific lifetime `'{lifetime_1}`...\n+}closure with signature `{$ty_or_sig}` must implement `{$trait_path}`, for some specific lifetime `'{$lifetime_1}`...\n infer_actual_impl_expl_expected_signature_nothing = {$leading_ellipsis ->\n     [true] ...\n     *[false] {\"\"}\n@@ -209,7 +209,7 @@ infer_actual_impl_expl_expected_passive_any = {$leading_ellipsis ->\n infer_actual_impl_expl_expected_passive_some = {$leading_ellipsis ->\n     [true] ...\n     *[false] {\"\"}\n-}`{$trait_path}` would have to be implemented for the type `{$ty_or_sig}`, for some specific lifetime `'{lifetime_1}`...\n+}`{$trait_path}` would have to be implemented for the type `{$ty_or_sig}`, for some specific lifetime `'{$lifetime_1}`...\n infer_actual_impl_expl_expected_passive_nothing = {$leading_ellipsis ->\n     [true] ...\n     *[false] {\"\"}\n@@ -225,7 +225,7 @@ infer_actual_impl_expl_expected_other_any = {$leading_ellipsis ->\n infer_actual_impl_expl_expected_other_some = {$leading_ellipsis ->\n     [true] ...\n     *[false] {\"\"}\n-}`{$ty_or_sig}` must implement `{$trait_path}`, for some specific lifetime `'{lifetime_1}`...\n+}`{$ty_or_sig}` must implement `{$trait_path}`, for some specific lifetime `'{$lifetime_1}`...\n infer_actual_impl_expl_expected_other_nothing = {$leading_ellipsis ->\n     [true] ...\n     *[false] {\"\"}\n@@ -268,11 +268,11 @@ infer_but_calling_introduces = {$has_param_name ->\n     [true] `{$param_name}`\n     *[false] `fn` parameter\n } has {$lifetime_kind ->\n-    [named] lifetime `{lifetime}`\n+    [named] lifetime `{$lifetime}`\n     *[anon] an anonymous lifetime `'_`\n } but calling `{assoc_item}` introduces an implicit `'static` lifetime requirement\n     .label1 = {$has_lifetime ->\n-        [named] lifetime `{lifetime}`\n+        [named] lifetime `{$lifetime}`\n         *[anon] an anonymous lifetime `'_`\n     }\n     .label2 = ...is used and required to live as long as `'static` here because of an implicit lifetime bound on the {$has_impl_path ->\n@@ -284,11 +284,11 @@ infer_but_needs_to_satisfy = {$has_param_name ->\n     [true] `{$param_name}`\n     *[false] `fn` parameter\n } has {$has_lifetime ->\n-    [named] lifetime `{lifetime}`\n+    [named] lifetime `{$lifetime}`\n     *[anon] an anonymous lifetime `'_`\n } but it needs to satisfy a `'static` lifetime requirement\n     .influencer = this data with {$has_lifetime ->\n-        [named] lifetime `{lifetime}`\n+        [named] lifetime `{$lifetime}`\n         *[anon] an anonymous lifetime `'_`\n     }...\n     .require = {$spans_empty ->\n@@ -302,7 +302,7 @@ infer_more_targeted = {$has_param_name ->\n     [true] `{$param_name}`\n     *[false] `fn` parameter\n } has {$has_lifetime ->\n-    [named] lifetime `{lifetime}`\n+    [named] lifetime `{$lifetime}`\n     *[anon] an anonymous lifetime `'_`\n } but calling `{$ident}` introduces an implicit `'static` lifetime requirement\n "}, {"sha": "bb7fba3ee7119ad9c00af8c9f4311bfd4d5c11b2", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -37,6 +37,11 @@ impl AssocItem {\n         Ident::new(self.name, tcx.def_ident_span(self.def_id).unwrap())\n     }\n \n+    /// Gets the defaultness of the associated item.\n+    /// To get the default associated type, use the [`type_of`] query on the\n+    /// [`DefId`] of the type.\n+    ///\n+    /// [`type_of`]: crate::ty::TyCtxt::type_of\n     pub fn defaultness(&self, tcx: TyCtxt<'_>) -> hir::Defaultness {\n         tcx.impl_defaultness(self.def_id)\n     }"}, {"sha": "0bca02589bce131284365337c70dfa61bcae3596", "filename": "compiler/rustc_mir_build/src/build/custom/parse/instruction.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fcustom%2Fparse%2Finstruction.rs?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -12,6 +12,12 @@ use super::{parse_by_kind, PResult, ParseCtxt};\n impl<'tcx, 'body> ParseCtxt<'tcx, 'body> {\n     pub fn parse_statement(&self, expr_id: ExprId) -> PResult<StatementKind<'tcx>> {\n         parse_by_kind!(self, expr_id, _, \"statement\",\n+            @call(\"mir_storage_live\", args) => {\n+                Ok(StatementKind::StorageLive(self.parse_local(args[0])?))\n+            },\n+            @call(\"mir_storage_dead\", args) => {\n+                Ok(StatementKind::StorageDead(self.parse_local(args[0])?))\n+            },\n             @call(\"mir_retag\", args) => {\n                 Ok(StatementKind::Retag(RetagKind::Default, Box::new(self.parse_place(args[0])?)))\n             },"}, {"sha": "34d003ccfa7b4fbde64ca4b7cf6ba25f0341cc30", "filename": "compiler/rustc_parse/src/lexer/unicode_chars.rs", "status": "modified", "additions": 322, "deletions": 320, "changes": 642, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funicode_chars.rs?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -7,329 +7,331 @@ use rustc_errors::{Applicability, Diagnostic};\n use rustc_span::{symbol::kw, BytePos, Pos, Span};\n \n #[rustfmt::skip] // for line breaks\n-pub(crate) const UNICODE_ARRAY: &[(char, &str, char)] = &[\n-    ('\u2028', \"Line Separator\", ' '),\n-    ('\u2029', \"Paragraph Separator\", ' '),\n-    ('\u1680', \"Ogham Space mark\", ' '),\n-    ('\u2000', \"En Quad\", ' '),\n-    ('\u2001', \"Em Quad\", ' '),\n-    ('\u2002', \"En Space\", ' '),\n-    ('\u2003', \"Em Space\", ' '),\n-    ('\u2004', \"Three-Per-Em Space\", ' '),\n-    ('\u2005', \"Four-Per-Em Space\", ' '),\n-    ('\u2006', \"Six-Per-Em Space\", ' '),\n-    ('\u2008', \"Punctuation Space\", ' '),\n-    ('\u2009', \"Thin Space\", ' '),\n-    ('\u200a', \"Hair Space\", ' '),\n-    ('\u205f', \"Medium Mathematical Space\", ' '),\n-    ('\u00a0', \"No-Break Space\", ' '),\n-    ('\u2007', \"Figure Space\", ' '),\n-    ('\u202f', \"Narrow No-Break Space\", ' '),\n-    ('\u3000', \"Ideographic Space\", ' '),\n-\n-    ('\u07fa', \"Nko Lajanyalan\", '_'),\n-    ('\ufe4d', \"Dashed Low Line\", '_'),\n-    ('\ufe4e', \"Centreline Low Line\", '_'),\n-    ('\ufe4f', \"Wavy Low Line\", '_'),\n-    ('\uff3f', \"Fullwidth Low Line\", '_'),\n-\n-    ('\u2010', \"Hyphen\", '-'),\n-    ('\u2011', \"Non-Breaking Hyphen\", '-'),\n-    ('\u2012', \"Figure Dash\", '-'),\n-    ('\u2013', \"En Dash\", '-'),\n-    ('\u2014', \"Em Dash\", '-'),\n-    ('\ufe58', \"Small Em Dash\", '-'),\n-    ('\u06d4', \"Arabic Full Stop\", '-'),\n-    ('\u2043', \"Hyphen Bullet\", '-'),\n-    ('\u02d7', \"Modifier Letter Minus Sign\", '-'),\n-    ('\u2212', \"Minus Sign\", '-'),\n-    ('\u2796', \"Heavy Minus Sign\", '-'),\n-    ('\u2cba', \"Coptic Letter Dialect-P Ni\", '-'),\n-    ('\u30fc', \"Katakana-Hiragana Prolonged Sound Mark\", '-'),\n-    ('\uff0d', \"Fullwidth Hyphen-Minus\", '-'),\n-    ('\u2015', \"Horizontal Bar\", '-'),\n-    ('\u2500', \"Box Drawings Light Horizontal\", '-'),\n-    ('\u2501', \"Box Drawings Heavy Horizontal\", '-'),\n-    ('\u31d0', \"CJK Stroke H\", '-'),\n-    ('\ua7f7', \"Latin Epigraphic Letter Sideways I\", '-'),\n-    ('\u1173', \"Hangul Jungseong Eu\", '-'),\n-    ('\u3161', \"Hangul Letter Eu\", '-'),\n-    ('\u4e00', \"CJK Unified Ideograph-4E00\", '-'),\n-    ('\u2f00', \"Kangxi Radical One\", '-'),\n-\n-    ('\u060d', \"Arabic Date Separator\", ','),\n-    ('\u066b', \"Arabic Decimal Separator\", ','),\n-    ('\u201a', \"Single Low-9 Quotation Mark\", ','),\n-    ('\u00b8', \"Cedilla\", ','),\n-    ('\ua4f9', \"Lisu Letter Tone Na Po\", ','),\n-    ('\uff0c', \"Fullwidth Comma\", ','),\n-\n-    ('\u037e', \"Greek Question Mark\", ';'),\n-    ('\uff1b', \"Fullwidth Semicolon\", ';'),\n-    ('\ufe14', \"Presentation Form For Vertical Semicolon\", ';'),\n-\n-    ('\u0903', \"Devanagari Sign Visarga\", ':'),\n-    ('\u0a83', \"Gujarati Sign Visarga\", ':'),\n-    ('\uff1a', \"Fullwidth Colon\", ':'),\n-    ('\u0589', \"Armenian Full Stop\", ':'),\n-    ('\u0703', \"Syriac Supralinear Colon\", ':'),\n-    ('\u0704', \"Syriac Sublinear Colon\", ':'),\n-    ('\u16ec', \"Runic Multiple Punctuation\", ':'),\n-    ('\ufe30', \"Presentation Form For Vertical Two Dot Leader\", ':'),\n-    ('\u1803', \"Mongolian Full Stop\", ':'),\n-    ('\u1809', \"Mongolian Manchu Full Stop\", ':'),\n-    ('\u205a', \"Two Dot Punctuation\", ':'),\n-    ('\u05c3', \"Hebrew Punctuation Sof Pasuq\", ':'),\n-    ('\u02f8', \"Modifier Letter Raised Colon\", ':'),\n-    ('\ua789', \"Modifier Letter Colon\", ':'),\n-    ('\u2236', \"Ratio\", ':'),\n-    ('\u02d0', \"Modifier Letter Triangular Colon\", ':'),\n-    ('\ua4fd', \"Lisu Letter Tone Mya Jeu\", ':'),\n-    ('\ufe13', \"Presentation Form For Vertical Colon\", ':'),\n-\n-    ('\uff01', \"Fullwidth Exclamation Mark\", '!'),\n-    ('\u01c3', \"Latin Letter Retroflex Click\", '!'),\n-    ('\u2d51', \"Tifinagh Letter Tuareg Yang\", '!'),\n-    ('\ufe15', \"Presentation Form For Vertical Exclamation Mark\", '!'),\n-\n-    ('\u0294', \"Latin Letter Glottal Stop\", '?'),\n-    ('\u0241', \"Latin Capital Letter Glottal Stop\", '?'),\n-    ('\u097d', \"Devanagari Letter Glottal Stop\", '?'),\n-    ('\u13ae', \"Cherokee Letter He\", '?'),\n-    ('\ua6eb', \"Bamum Letter Ntuu\", '?'),\n-    ('\uff1f', \"Fullwidth Question Mark\", '?'),\n-    ('\ufe16', \"Presentation Form For Vertical Question Mark\", '?'),\n-\n-    ('\ud834\udd6d', \"Musical Symbol Combining Augmentation Dot\", '.'),\n-    ('\u2024', \"One Dot Leader\", '.'),\n-    ('\u0701', \"Syriac Supralinear Full Stop\", '.'),\n-    ('\u0702', \"Syriac Sublinear Full Stop\", '.'),\n-    ('\ua60e', \"Vai Full Stop\", '.'),\n-    ('\ud802\ude50', \"Kharoshthi Punctuation Dot\", '.'),\n-    ('\u0660', \"Arabic-Indic Digit Zero\", '.'),\n-    ('\u06f0', \"Extended Arabic-Indic Digit Zero\", '.'),\n-    ('\ua4f8', \"Lisu Letter Tone Mya Ti\", '.'),\n-    ('\u00b7', \"Middle Dot\", '.'),\n-    ('\u30fb', \"Katakana Middle Dot\", '.'),\n-    ('\uff65', \"Halfwidth Katakana Middle Dot\", '.'),\n-    ('\u16eb', \"Runic Single Punctuation\", '.'),\n-    ('\u0387', \"Greek Ano Teleia\", '.'),\n-    ('\u2e31', \"Word Separator Middle Dot\", '.'),\n-    ('\ud800\udd01', \"Aegean Word Separator Dot\", '.'),\n-    ('\u2022', \"Bullet\", '.'),\n-    ('\u2027', \"Hyphenation Point\", '.'),\n-    ('\u2219', \"Bullet Operator\", '.'),\n-    ('\u22c5', \"Dot Operator\", '.'),\n-    ('\ua78f', \"Latin Letter Sinological Dot\", '.'),\n-    ('\u1427', \"Canadian Syllabics Final Middle Dot\", '.'),\n-    ('\u1427', \"Canadian Syllabics Final Middle Dot\", '.'),\n-    ('\uff0e', \"Fullwidth Full Stop\", '.'),\n-    ('\u3002', \"Ideographic Full Stop\", '.'),\n-    ('\ufe12', \"Presentation Form For Vertical Ideographic Full Stop\", '.'),\n-\n-    ('\u055d', \"Armenian Comma\", '\\''),\n-    ('\uff07', \"Fullwidth Apostrophe\", '\\''),\n-    ('\u2018', \"Left Single Quotation Mark\", '\\''),\n-    ('\u2019', \"Right Single Quotation Mark\", '\\''),\n-    ('\u201b', \"Single High-Reversed-9 Quotation Mark\", '\\''),\n-    ('\u2032', \"Prime\", '\\''),\n-    ('\u2035', \"Reversed Prime\", '\\''),\n-    ('\u055a', \"Armenian Apostrophe\", '\\''),\n-    ('\u05f3', \"Hebrew Punctuation Geresh\", '\\''),\n-    ('`', \"Grave Accent\", '\\''),\n-    ('\u1fef', \"Greek Varia\", '\\''),\n-    ('\uff40', \"Fullwidth Grave Accent\", '\\''),\n-    ('\u00b4', \"Acute Accent\", '\\''),\n-    ('\u0384', \"Greek Tonos\", '\\''),\n-    ('\u1ffd', \"Greek Oxia\", '\\''),\n-    ('\u1fbd', \"Greek Koronis\", '\\''),\n-    ('\u1fbf', \"Greek Psili\", '\\''),\n-    ('\u1ffe', \"Greek Dasia\", '\\''),\n-    ('\u02b9', \"Modifier Letter Prime\", '\\''),\n-    ('\u0374', \"Greek Numeral Sign\", '\\''),\n-    ('\u02c8', \"Modifier Letter Vertical Line\", '\\''),\n-    ('\u02ca', \"Modifier Letter Acute Accent\", '\\''),\n-    ('\u02cb', \"Modifier Letter Grave Accent\", '\\''),\n-    ('\u02f4', \"Modifier Letter Middle Grave Accent\", '\\''),\n-    ('\u02bb', \"Modifier Letter Turned Comma\", '\\''),\n-    ('\u02bd', \"Modifier Letter Reversed Comma\", '\\''),\n-    ('\u02bc', \"Modifier Letter Apostrophe\", '\\''),\n-    ('\u02be', \"Modifier Letter Right Half Ring\", '\\''),\n-    ('\ua78c', \"Latin Small Letter Saltillo\", '\\''),\n-    ('\u05d9', \"Hebrew Letter Yod\", '\\''),\n-    ('\u07f4', \"Nko High Tone Apostrophe\", '\\''),\n-    ('\u07f5', \"Nko Low Tone Apostrophe\", '\\''),\n-    ('\u144a', \"Canadian Syllabics West-Cree P\", '\\''),\n-    ('\u16cc', \"Runic Letter Short-Twig-Sol S\", '\\''),\n-    ('\ud81b\udf51', \"Miao Sign Aspiration\", '\\''),\n-    ('\ud81b\udf52', \"Miao Sign Reformed Voicing\", '\\''),\n-\n-    ('\u1cd3', \"Vedic Sign Nihshvasa\", '\"'),\n-    ('\uff02', \"Fullwidth Quotation Mark\", '\"'),\n-    ('\u201c', \"Left Double Quotation Mark\", '\"'),\n-    ('\u201d', \"Right Double Quotation Mark\", '\"'),\n-    ('\u201f', \"Double High-Reversed-9 Quotation Mark\", '\"'),\n-    ('\u2033', \"Double Prime\", '\"'),\n-    ('\u2036', \"Reversed Double Prime\", '\"'),\n-    ('\u3003', \"Ditto Mark\", '\"'),\n-    ('\u05f4', \"Hebrew Punctuation Gershayim\", '\"'),\n-    ('\u02dd', \"Double Acute Accent\", '\"'),\n-    ('\u02ba', \"Modifier Letter Double Prime\", '\"'),\n-    ('\u02f6', \"Modifier Letter Middle Double Acute Accent\", '\"'),\n-    ('\u02f5', \"Modifier Letter Middle Double Grave Accent\", '\"'),\n-    ('\u02ee', \"Modifier Letter Double Apostrophe\", '\"'),\n-    ('\u05f2', \"Hebrew Ligature Yiddish Double Yod\", '\"'),\n-    ('\u275e', \"Heavy Double Comma Quotation Mark Ornament\", '\"'),\n-    ('\u275d', \"Heavy Double Turned Comma Quotation Mark Ornament\", '\"'),\n-\n-    ('\uff08', \"Fullwidth Left Parenthesis\", '('),\n-    ('\u2768', \"Medium Left Parenthesis Ornament\", '('),\n-    ('\ufd3e', \"Ornate Left Parenthesis\", '('),\n-\n-    ('\uff09', \"Fullwidth Right Parenthesis\", ')'),\n-    ('\u2769', \"Medium Right Parenthesis Ornament\", ')'),\n-    ('\ufd3f', \"Ornate Right Parenthesis\", ')'),\n-\n-    ('\uff3b', \"Fullwidth Left Square Bracket\", '['),\n-    ('\u2772', \"Light Left Tortoise Shell Bracket Ornament\", '['),\n-    ('\u300c', \"Left Corner Bracket\", '['),\n-    ('\u300e', \"Left White Corner Bracket\", '['),\n-    ('\u3010', \"Left Black Lenticular Bracket\", '['),\n-    ('\u3014', \"Left Tortoise Shell Bracket\", '['),\n-    ('\u3016', \"Left White Lenticular Bracket\", '['),\n-    ('\u3018', \"Left White Tortoise Shell Bracket\", '['),\n-    ('\u301a', \"Left White Square Bracket\", '['),\n-\n-    ('\uff3d', \"Fullwidth Right Square Bracket\", ']'),\n-    ('\u2773', \"Light Right Tortoise Shell Bracket Ornament\", ']'),\n-    ('\u300d', \"Right Corner Bracket\", ']'),\n-    ('\u300f', \"Right White Corner Bracket\", ']'),\n-    ('\u3011', \"Right Black Lenticular Bracket\", ']'),\n-    ('\u3015', \"Right Tortoise Shell Bracket\", ']'),\n-    ('\u3017', \"Right White Lenticular Bracket\", ']'),\n-    ('\u3019', \"Right White Tortoise Shell Bracket\", ']'),\n-    ('\u301b', \"Right White Square Bracket\", ']'),\n-\n-    ('\u2774', \"Medium Left Curly Bracket Ornament\", '{'),\n-    ('\ud834\udd14', \"Musical Symbol Brace\", '{'),\n-    ('\uff5b', \"Fullwidth Left Curly Bracket\", '{'),\n-\n-    ('\u2775', \"Medium Right Curly Bracket Ornament\", '}'),\n-    ('\uff5d', \"Fullwidth Right Curly Bracket\", '}'),\n-\n-    ('\u204e', \"Low Asterisk\", '*'),\n-    ('\u066d', \"Arabic Five Pointed Star\", '*'),\n-    ('\u2217', \"Asterisk Operator\", '*'),\n-    ('\ud800\udf1f', \"Old Italic Letter Ess\", '*'),\n-    ('\uff0a', \"Fullwidth Asterisk\", '*'),\n-\n-    ('\u1735', \"Philippine Single Punctuation\", '/'),\n-    ('\u2041', \"Caret Insertion Point\", '/'),\n-    ('\u2215', \"Division Slash\", '/'),\n-    ('\u2044', \"Fraction Slash\", '/'),\n-    ('\u2571', \"Box Drawings Light Diagonal Upper Right To Lower Left\", '/'),\n-    ('\u27cb', \"Mathematical Rising Diagonal\", '/'),\n-    ('\u29f8', \"Big Solidus\", '/'),\n-    ('\ud834\ude3a', \"Greek Instrumental Notation Symbol-47\", '/'),\n-    ('\u31d3', \"CJK Stroke Sp\", '/'),\n-    ('\u3033', \"Vertical Kana Repeat Mark Upper Half\", '/'),\n-    ('\u2cc6', \"Coptic Capital Letter Old Coptic Esh\", '/'),\n-    ('\u30ce', \"Katakana Letter No\", '/'),\n-    ('\u4e3f', \"CJK Unified Ideograph-4E3F\", '/'),\n-    ('\u2f03', \"Kangxi Radical Slash\", '/'),\n-    ('\uff0f', \"Fullwidth Solidus\", '/'),\n-\n-    ('\uff3c', \"Fullwidth Reverse Solidus\", '\\\\'),\n-    ('\ufe68', \"Small Reverse Solidus\", '\\\\'),\n-    ('\u2216', \"Set Minus\", '\\\\'),\n-    ('\u27cd', \"Mathematical Falling Diagonal\", '\\\\'),\n-    ('\u29f5', \"Reverse Solidus Operator\", '\\\\'),\n-    ('\u29f9', \"Big Reverse Solidus\", '\\\\'),\n-    ('\u29f9', \"Greek Vocal Notation Symbol-16\", '\\\\'),\n-    ('\u29f9', \"Greek Instrumental Symbol-48\", '\\\\'),\n-    ('\u31d4', \"CJK Stroke D\", '\\\\'),\n-    ('\u4e36', \"CJK Unified Ideograph-4E36\", '\\\\'),\n-    ('\u2f02', \"Kangxi Radical Dot\", '\\\\'),\n-    ('\u3001', \"Ideographic Comma\", '\\\\'),\n-    ('\u30fd', \"Katakana Iteration Mark\", '\\\\'),\n-\n-    ('\ua778', \"Latin Small Letter Um\", '&'),\n-    ('\uff06', \"Fullwidth Ampersand\", '&'),\n-\n-    ('\u16ed', \"Runic Cross Punctuation\", '+'),\n-    ('\u2795', \"Heavy Plus Sign\", '+'),\n-    ('\ud800\ude9b', \"Lycian Letter H\", '+'),\n-    ('\ufb29', \"Hebrew Letter Alternative Plus Sign\", '+'),\n-    ('\uff0b', \"Fullwidth Plus Sign\", '+'),\n-\n-    ('\u2039', \"Single Left-Pointing Angle Quotation Mark\", '<'),\n-    ('\u276e', \"Heavy Left-Pointing Angle Quotation Mark Ornament\", '<'),\n-    ('\u02c2', \"Modifier Letter Left Arrowhead\", '<'),\n-    ('\ud834\ude36', \"Greek Instrumental Symbol-40\", '<'),\n-    ('\u1438', \"Canadian Syllabics Pa\", '<'),\n-    ('\u16b2', \"Runic Letter Kauna\", '<'),\n-    ('\u276c', \"Medium Left-Pointing Angle Bracket Ornament\", '<'),\n-    ('\u27e8', \"Mathematical Left Angle Bracket\", '<'),\n-    ('\u2329', \"Left-Pointing Angle Bracket\", '<'),\n-    ('\u3008', \"Left Angle Bracket\", '<'),\n-    ('\u31db', \"CJK Stroke Pd\", '<'),\n-    ('\u304f', \"Hiragana Letter Ku\", '<'),\n-    ('\ud847\udfe8', \"CJK Unified Ideograph-21FE8\", '<'),\n-    ('\u300a', \"Left Double Angle Bracket\", '<'),\n-    ('\uff1c', \"Fullwidth Less-Than Sign\", '<'),\n-\n-    ('\u1400', \"Canadian Syllabics Hyphen\", '='),\n-    ('\u2e40', \"Double Hyphen\", '='),\n-    ('\u30a0', \"Katakana-Hiragana Double Hyphen\", '='),\n-    ('\ua4ff', \"Lisu Punctuation Full Stop\", '='),\n-    ('\uff1d', \"Fullwidth Equals Sign\", '='),\n-\n-    ('\u203a', \"Single Right-Pointing Angle Quotation Mark\", '>'),\n-    ('\u276f', \"Heavy Right-Pointing Angle Quotation Mark Ornament\", '>'),\n-    ('\u02c3', \"Modifier Letter Right Arrowhead\", '>'),\n-    ('\ud834\ude37', \"Greek Instrumental Symbol-42\", '>'),\n-    ('\u1433', \"Canadian Syllabics Po\", '>'),\n-    ('\ud81b\udf3f', \"Miao Letter Archaic Zza\", '>'),\n-    ('\u276d', \"Medium Right-Pointing Angle Bracket Ornament\", '>'),\n-    ('\u27e9', \"Mathematical Right Angle Bracket\", '>'),\n-    ('\u232a', \"Right-Pointing Angle Bracket\", '>'),\n-    ('\u3009', \"Right Angle Bracket\", '>'),\n-    ('\u300b', \"Right Double Angle Bracket\", '>'),\n-    ('\uff1e', \"Fullwidth Greater-Than Sign\", '>'),\n+pub(crate) const UNICODE_ARRAY: &[(char, &str, &str)] = &[\n+    ('\u2028', \"Line Separator\", \" \"),\n+    ('\u2029', \"Paragraph Separator\", \" \"),\n+    ('\u1680', \"Ogham Space mark\", \" \"),\n+    ('\u2000', \"En Quad\", \" \"),\n+    ('\u2001', \"Em Quad\", \" \"),\n+    ('\u2002', \"En Space\", \" \"),\n+    ('\u2003', \"Em Space\", \" \"),\n+    ('\u2004', \"Three-Per-Em Space\", \" \"),\n+    ('\u2005', \"Four-Per-Em Space\", \" \"),\n+    ('\u2006', \"Six-Per-Em Space\", \" \"),\n+    ('\u2008', \"Punctuation Space\", \" \"),\n+    ('\u2009', \"Thin Space\", \" \"),\n+    ('\u200a', \"Hair Space\", \" \"),\n+    ('\u205f', \"Medium Mathematical Space\", \" \"),\n+    ('\u00a0', \"No-Break Space\", \" \"),\n+    ('\u2007', \"Figure Space\", \" \"),\n+    ('\u202f', \"Narrow No-Break Space\", \" \"),\n+    ('\u3000', \"Ideographic Space\", \" \"),\n+\n+    ('\u07fa', \"Nko Lajanyalan\", \"_\"),\n+    ('\ufe4d', \"Dashed Low Line\", \"_\"),\n+    ('\ufe4e', \"Centreline Low Line\", \"_\"),\n+    ('\ufe4f', \"Wavy Low Line\", \"_\"),\n+    ('\uff3f', \"Fullwidth Low Line\", \"_\"),\n+\n+    ('\u2010', \"Hyphen\", \"-\"),\n+    ('\u2011', \"Non-Breaking Hyphen\", \"-\"),\n+    ('\u2012', \"Figure Dash\", \"-\"),\n+    ('\u2013', \"En Dash\", \"-\"),\n+    ('\u2014', \"Em Dash\", \"-\"),\n+    ('\ufe58', \"Small Em Dash\", \"-\"),\n+    ('\u06d4', \"Arabic Full Stop\", \"-\"),\n+    ('\u2043', \"Hyphen Bullet\", \"-\"),\n+    ('\u02d7', \"Modifier Letter Minus Sign\", \"-\"),\n+    ('\u2212', \"Minus Sign\", \"-\"),\n+    ('\u2796', \"Heavy Minus Sign\", \"-\"),\n+    ('\u2cba', \"Coptic Letter Dialect-P Ni\", \"-\"),\n+    ('\u30fc', \"Katakana-Hiragana Prolonged Sound Mark\", \"-\"),\n+    ('\uff0d', \"Fullwidth Hyphen-Minus\", \"-\"),\n+    ('\u2015', \"Horizontal Bar\", \"-\"),\n+    ('\u2500', \"Box Drawings Light Horizontal\", \"-\"),\n+    ('\u2501', \"Box Drawings Heavy Horizontal\", \"-\"),\n+    ('\u31d0', \"CJK Stroke H\", \"-\"),\n+    ('\ua7f7', \"Latin Epigraphic Letter Sideways I\", \"-\"),\n+    ('\u1173', \"Hangul Jungseong Eu\", \"-\"),\n+    ('\u3161', \"Hangul Letter Eu\", \"-\"),\n+    ('\u4e00', \"CJK Unified Ideograph-4E00\", \"-\"),\n+    ('\u2f00', \"Kangxi Radical One\", \"-\"),\n+\n+    ('\u060d', \"Arabic Date Separator\", \",\"),\n+    ('\u066b', \"Arabic Decimal Separator\", \",\"),\n+    ('\u201a', \"Single Low-9 Quotation Mark\", \",\"),\n+    ('\u00b8', \"Cedilla\", \",\"),\n+    ('\ua4f9', \"Lisu Letter Tone Na Po\", \",\"),\n+    ('\uff0c', \"Fullwidth Comma\", \",\"),\n+\n+    ('\u037e', \"Greek Question Mark\", \";\"),\n+    ('\uff1b', \"Fullwidth Semicolon\", \";\"),\n+    ('\ufe14', \"Presentation Form For Vertical Semicolon\", \";\"),\n+\n+    ('\u0903', \"Devanagari Sign Visarga\", \":\"),\n+    ('\u0a83', \"Gujarati Sign Visarga\", \":\"),\n+    ('\uff1a', \"Fullwidth Colon\", \":\"),\n+    ('\u0589', \"Armenian Full Stop\", \":\"),\n+    ('\u0703', \"Syriac Supralinear Colon\", \":\"),\n+    ('\u0704', \"Syriac Sublinear Colon\", \":\"),\n+    ('\u16ec', \"Runic Multiple Punctuation\", \":\"),\n+    ('\ufe30', \"Presentation Form For Vertical Two Dot Leader\", \":\"),\n+    ('\u1803', \"Mongolian Full Stop\", \":\"),\n+    ('\u1809', \"Mongolian Manchu Full Stop\", \":\"),\n+    ('\u205a', \"Two Dot Punctuation\", \":\"),\n+    ('\u05c3', \"Hebrew Punctuation Sof Pasuq\", \":\"),\n+    ('\u02f8', \"Modifier Letter Raised Colon\", \":\"),\n+    ('\ua789', \"Modifier Letter Colon\", \":\"),\n+    ('\u2236', \"Ratio\", \":\"),\n+    ('\u02d0', \"Modifier Letter Triangular Colon\", \":\"),\n+    ('\ua4fd', \"Lisu Letter Tone Mya Jeu\", \":\"),\n+    ('\ufe13', \"Presentation Form For Vertical Colon\", \":\"),\n+\n+    ('\uff01', \"Fullwidth Exclamation Mark\", \"!\"),\n+    ('\u01c3', \"Latin Letter Retroflex Click\", \"!\"),\n+    ('\u2d51', \"Tifinagh Letter Tuareg Yang\", \"!\"),\n+    ('\ufe15', \"Presentation Form For Vertical Exclamation Mark\", \"!\"),\n+\n+    ('\u0294', \"Latin Letter Glottal Stop\", \"?\"),\n+    ('\u0241', \"Latin Capital Letter Glottal Stop\", \"?\"),\n+    ('\u097d', \"Devanagari Letter Glottal Stop\", \"?\"),\n+    ('\u13ae', \"Cherokee Letter He\", \"?\"),\n+    ('\ua6eb', \"Bamum Letter Ntuu\", \"?\"),\n+    ('\uff1f', \"Fullwidth Question Mark\", \"?\"),\n+    ('\ufe16', \"Presentation Form For Vertical Question Mark\", \"?\"),\n+\n+    ('\ud834\udd6d', \"Musical Symbol Combining Augmentation Dot\", \".\"),\n+    ('\u2024', \"One Dot Leader\", \".\"),\n+    ('\u0701', \"Syriac Supralinear Full Stop\", \".\"),\n+    ('\u0702', \"Syriac Sublinear Full Stop\", \".\"),\n+    ('\ua60e', \"Vai Full Stop\", \".\"),\n+    ('\ud802\ude50', \"Kharoshthi Punctuation Dot\", \".\"),\n+    ('\u0660', \"Arabic-Indic Digit Zero\", \".\"),\n+    ('\u06f0', \"Extended Arabic-Indic Digit Zero\", \".\"),\n+    ('\ua4f8', \"Lisu Letter Tone Mya Ti\", \".\"),\n+    ('\u00b7', \"Middle Dot\", \".\"),\n+    ('\u30fb', \"Katakana Middle Dot\", \".\"),\n+    ('\uff65', \"Halfwidth Katakana Middle Dot\", \".\"),\n+    ('\u16eb', \"Runic Single Punctuation\", \".\"),\n+    ('\u0387', \"Greek Ano Teleia\", \".\"),\n+    ('\u2e31', \"Word Separator Middle Dot\", \".\"),\n+    ('\ud800\udd01', \"Aegean Word Separator Dot\", \".\"),\n+    ('\u2022', \"Bullet\", \".\"),\n+    ('\u2027', \"Hyphenation Point\", \".\"),\n+    ('\u2219', \"Bullet Operator\", \".\"),\n+    ('\u22c5', \"Dot Operator\", \".\"),\n+    ('\ua78f', \"Latin Letter Sinological Dot\", \".\"),\n+    ('\u1427', \"Canadian Syllabics Final Middle Dot\", \".\"),\n+    ('\u1427', \"Canadian Syllabics Final Middle Dot\", \".\"),\n+    ('\uff0e', \"Fullwidth Full Stop\", \".\"),\n+    ('\u3002', \"Ideographic Full Stop\", \".\"),\n+    ('\ufe12', \"Presentation Form For Vertical Ideographic Full Stop\", \".\"),\n+\n+    ('\u055d', \"Armenian Comma\", \"\\'\"),\n+    ('\uff07', \"Fullwidth Apostrophe\", \"\\'\"),\n+    ('\u2018', \"Left Single Quotation Mark\", \"\\'\"),\n+    ('\u2019', \"Right Single Quotation Mark\", \"\\'\"),\n+    ('\u201b', \"Single High-Reversed-9 Quotation Mark\", \"\\'\"),\n+    ('\u2032', \"Prime\", \"\\'\"),\n+    ('\u2035', \"Reversed Prime\", \"\\'\"),\n+    ('\u055a', \"Armenian Apostrophe\", \"\\'\"),\n+    ('\u05f3', \"Hebrew Punctuation Geresh\", \"\\'\"),\n+    ('`', \"Grave Accent\", \"\\'\"),\n+    ('\u1fef', \"Greek Varia\", \"\\'\"),\n+    ('\uff40', \"Fullwidth Grave Accent\", \"\\'\"),\n+    ('\u00b4', \"Acute Accent\", \"\\'\"),\n+    ('\u0384', \"Greek Tonos\", \"\\'\"),\n+    ('\u1ffd', \"Greek Oxia\", \"\\'\"),\n+    ('\u1fbd', \"Greek Koronis\", \"\\'\"),\n+    ('\u1fbf', \"Greek Psili\", \"\\'\"),\n+    ('\u1ffe', \"Greek Dasia\", \"\\'\"),\n+    ('\u02b9', \"Modifier Letter Prime\", \"\\'\"),\n+    ('\u0374', \"Greek Numeral Sign\", \"\\'\"),\n+    ('\u02c8', \"Modifier Letter Vertical Line\", \"\\'\"),\n+    ('\u02ca', \"Modifier Letter Acute Accent\", \"\\'\"),\n+    ('\u02cb', \"Modifier Letter Grave Accent\", \"\\'\"),\n+    ('\u02f4', \"Modifier Letter Middle Grave Accent\", \"\\'\"),\n+    ('\u02bb', \"Modifier Letter Turned Comma\", \"\\'\"),\n+    ('\u02bd', \"Modifier Letter Reversed Comma\", \"\\'\"),\n+    ('\u02bc', \"Modifier Letter Apostrophe\", \"\\'\"),\n+    ('\u02be', \"Modifier Letter Right Half Ring\", \"\\'\"),\n+    ('\ua78c', \"Latin Small Letter Saltillo\", \"\\'\"),\n+    ('\u05d9', \"Hebrew Letter Yod\", \"\\'\"),\n+    ('\u07f4', \"Nko High Tone Apostrophe\", \"\\'\"),\n+    ('\u07f5', \"Nko Low Tone Apostrophe\", \"\\'\"),\n+    ('\u144a', \"Canadian Syllabics West-Cree P\", \"\\'\"),\n+    ('\u16cc', \"Runic Letter Short-Twig-Sol S\", \"\\'\"),\n+    ('\ud81b\udf51', \"Miao Sign Aspiration\", \"\\'\"),\n+    ('\ud81b\udf52', \"Miao Sign Reformed Voicing\", \"\\'\"),\n+\n+    ('\u1cd3', \"Vedic Sign Nihshvasa\", \"\\\"\"),\n+    ('\uff02', \"Fullwidth Quotation Mark\", \"\\\"\"),\n+    ('\u201c', \"Left Double Quotation Mark\", \"\\\"\"),\n+    ('\u201d', \"Right Double Quotation Mark\", \"\\\"\"),\n+    ('\u201f', \"Double High-Reversed-9 Quotation Mark\", \"\\\"\"),\n+    ('\u2033', \"Double Prime\", \"\\\"\"),\n+    ('\u2036', \"Reversed Double Prime\", \"\\\"\"),\n+    ('\u3003', \"Ditto Mark\", \"\\\"\"),\n+    ('\u05f4', \"Hebrew Punctuation Gershayim\", \"\\\"\"),\n+    ('\u02dd', \"Double Acute Accent\", \"\\\"\"),\n+    ('\u02ba', \"Modifier Letter Double Prime\", \"\\\"\"),\n+    ('\u02f6', \"Modifier Letter Middle Double Acute Accent\", \"\\\"\"),\n+    ('\u02f5', \"Modifier Letter Middle Double Grave Accent\", \"\\\"\"),\n+    ('\u02ee', \"Modifier Letter Double Apostrophe\", \"\\\"\"),\n+    ('\u05f2', \"Hebrew Ligature Yiddish Double Yod\", \"\\\"\"),\n+    ('\u275e', \"Heavy Double Comma Quotation Mark Ornament\", \"\\\"\"),\n+    ('\u275d', \"Heavy Double Turned Comma Quotation Mark Ornament\", \"\\\"\"),\n+\n+    ('\uff08', \"Fullwidth Left Parenthesis\", \"(\"),\n+    ('\u2768', \"Medium Left Parenthesis Ornament\", \"(\"),\n+    ('\ufd3e', \"Ornate Left Parenthesis\", \"(\"),\n+\n+    ('\uff09', \"Fullwidth Right Parenthesis\", \")\"),\n+    ('\u2769', \"Medium Right Parenthesis Ornament\", \")\"),\n+    ('\ufd3f', \"Ornate Right Parenthesis\", \")\"),\n+\n+    ('\uff3b', \"Fullwidth Left Square Bracket\", \"[\"),\n+    ('\u2772', \"Light Left Tortoise Shell Bracket Ornament\", \"[\"),\n+    ('\u300c', \"Left Corner Bracket\", \"[\"),\n+    ('\u300e', \"Left White Corner Bracket\", \"[\"),\n+    ('\u3010', \"Left Black Lenticular Bracket\", \"[\"),\n+    ('\u3014', \"Left Tortoise Shell Bracket\", \"[\"),\n+    ('\u3016', \"Left White Lenticular Bracket\", \"[\"),\n+    ('\u3018', \"Left White Tortoise Shell Bracket\", \"[\"),\n+    ('\u301a', \"Left White Square Bracket\", \"[\"),\n+\n+    ('\uff3d', \"Fullwidth Right Square Bracket\", \"]\"),\n+    ('\u2773', \"Light Right Tortoise Shell Bracket Ornament\", \"]\"),\n+    ('\u300d', \"Right Corner Bracket\", \"]\"),\n+    ('\u300f', \"Right White Corner Bracket\", \"]\"),\n+    ('\u3011', \"Right Black Lenticular Bracket\", \"]\"),\n+    ('\u3015', \"Right Tortoise Shell Bracket\", \"]\"),\n+    ('\u3017', \"Right White Lenticular Bracket\", \"]\"),\n+    ('\u3019', \"Right White Tortoise Shell Bracket\", \"]\"),\n+    ('\u301b', \"Right White Square Bracket\", \"]\"),\n+\n+    ('\u2774', \"Medium Left Curly Bracket Ornament\", \"{\"),\n+    ('\ud834\udd14', \"Musical Symbol Brace\", \"{\"),\n+    ('\uff5b', \"Fullwidth Left Curly Bracket\", \"{\"),\n+\n+    ('\u2775', \"Medium Right Curly Bracket Ornament\", \"}\"),\n+    ('\uff5d', \"Fullwidth Right Curly Bracket\", \"}\"),\n+\n+    ('\u204e', \"Low Asterisk\", \"*\"),\n+    ('\u066d', \"Arabic Five Pointed Star\", \"*\"),\n+    ('\u2217', \"Asterisk Operator\", \"*\"),\n+    ('\ud800\udf1f', \"Old Italic Letter Ess\", \"*\"),\n+    ('\uff0a', \"Fullwidth Asterisk\", \"*\"),\n+\n+    ('\u1735', \"Philippine Single Punctuation\", \"/\"),\n+    ('\u2041', \"Caret Insertion Point\", \"/\"),\n+    ('\u2215', \"Division Slash\", \"/\"),\n+    ('\u2044', \"Fraction Slash\", \"/\"),\n+    ('\u2571', \"Box Drawings Light Diagonal Upper Right To Lower Left\", \"/\"),\n+    ('\u27cb', \"Mathematical Rising Diagonal\", \"/\"),\n+    ('\u29f8', \"Big Solidus\", \"/\"),\n+    ('\ud834\ude3a', \"Greek Instrumental Notation Symbol-47\", \"/\"),\n+    ('\u31d3', \"CJK Stroke Sp\", \"/\"),\n+    ('\u3033', \"Vertical Kana Repeat Mark Upper Half\", \"/\"),\n+    ('\u2cc6', \"Coptic Capital Letter Old Coptic Esh\", \"/\"),\n+    ('\u30ce', \"Katakana Letter No\", \"/\"),\n+    ('\u4e3f', \"CJK Unified Ideograph-4E3F\", \"/\"),\n+    ('\u2f03', \"Kangxi Radical Slash\", \"/\"),\n+    ('\uff0f', \"Fullwidth Solidus\", \"/\"),\n+\n+    ('\uff3c', \"Fullwidth Reverse Solidus\", \"\\\\\"),\n+    ('\ufe68', \"Small Reverse Solidus\", \"\\\\\"),\n+    ('\u2216', \"Set Minus\", \"\\\\\"),\n+    ('\u27cd', \"Mathematical Falling Diagonal\", \"\\\\\"),\n+    ('\u29f5', \"Reverse Solidus Operator\", \"\\\\\"),\n+    ('\u29f9', \"Big Reverse Solidus\", \"\\\\\"),\n+    ('\u29f9', \"Greek Vocal Notation Symbol-16\", \"\\\\\"),\n+    ('\u29f9', \"Greek Instrumental Symbol-48\", \"\\\\\"),\n+    ('\u31d4', \"CJK Stroke D\", \"\\\\\"),\n+    ('\u4e36', \"CJK Unified Ideograph-4E36\", \"\\\\\"),\n+    ('\u2f02', \"Kangxi Radical Dot\", \"\\\\\"),\n+    ('\u3001', \"Ideographic Comma\", \"\\\\\"),\n+    ('\u30fd', \"Katakana Iteration Mark\", \"\\\\\"),\n+\n+    ('\ua778', \"Latin Small Letter Um\", \"&\"),\n+    ('\uff06', \"Fullwidth Ampersand\", \"&\"),\n+\n+    ('\u16ed', \"Runic Cross Punctuation\", \"+\"),\n+    ('\u2795', \"Heavy Plus Sign\", \"+\"),\n+    ('\ud800\ude9b', \"Lycian Letter H\", \"+\"),\n+    ('\ufb29', \"Hebrew Letter Alternative Plus Sign\", \"+\"),\n+    ('\uff0b', \"Fullwidth Plus Sign\", \"+\"),\n+\n+    ('\u2039', \"Single Left-Pointing Angle Quotation Mark\", \"<\"),\n+    ('\u276e', \"Heavy Left-Pointing Angle Quotation Mark Ornament\", \"<\"),\n+    ('\u02c2', \"Modifier Letter Left Arrowhead\", \"<\"),\n+    ('\ud834\ude36', \"Greek Instrumental Symbol-40\", \"<\"),\n+    ('\u1438', \"Canadian Syllabics Pa\", \"<\"),\n+    ('\u16b2', \"Runic Letter Kauna\", \"<\"),\n+    ('\u276c', \"Medium Left-Pointing Angle Bracket Ornament\", \"<\"),\n+    ('\u27e8', \"Mathematical Left Angle Bracket\", \"<\"),\n+    ('\u2329', \"Left-Pointing Angle Bracket\", \"<\"),\n+    ('\u3008', \"Left Angle Bracket\", \"<\"),\n+    ('\u31db', \"CJK Stroke Pd\", \"<\"),\n+    ('\u304f', \"Hiragana Letter Ku\", \"<\"),\n+    ('\ud847\udfe8', \"CJK Unified Ideograph-21FE8\", \"<\"),\n+    ('\u300a', \"Left Double Angle Bracket\", \"<\"),\n+    ('\uff1c', \"Fullwidth Less-Than Sign\", \"<\"),\n+\n+    ('\u1400', \"Canadian Syllabics Hyphen\", \"=\"),\n+    ('\u2e40', \"Double Hyphen\", \"=\"),\n+    ('\u30a0', \"Katakana-Hiragana Double Hyphen\", \"=\"),\n+    ('\ua4ff', \"Lisu Punctuation Full Stop\", \"=\"),\n+    ('\uff1d', \"Fullwidth Equals Sign\", \"=\"),\n+\n+    ('\u203a', \"Single Right-Pointing Angle Quotation Mark\", \">\"),\n+    ('\u276f', \"Heavy Right-Pointing Angle Quotation Mark Ornament\", \">\"),\n+    ('\u02c3', \"Modifier Letter Right Arrowhead\", \">\"),\n+    ('\ud834\ude37', \"Greek Instrumental Symbol-42\", \">\"),\n+    ('\u1433', \"Canadian Syllabics Po\", \">\"),\n+    ('\ud81b\udf3f', \"Miao Letter Archaic Zza\", \">\"),\n+    ('\u276d', \"Medium Right-Pointing Angle Bracket Ornament\", \">\"),\n+    ('\u27e9', \"Mathematical Right Angle Bracket\", \">\"),\n+    ('\u232a', \"Right-Pointing Angle Bracket\", \">\"),\n+    ('\u3009', \"Right Angle Bracket\", \">\"),\n+    ('\u300b', \"Right Double Angle Bracket\", \">\"),\n+    ('\uff1e', \"Fullwidth Greater-Than Sign\", \">\"),\n+    ('\u2a75', \"Two Consecutive Equals Signs\", \"==\")\n ];\n \n // FIXME: the lexer could be used to turn the ASCII version of unicode homoglyphs, instead of\n // keeping the substitution token in this table. Ideally, this should be inside `rustc_lexer`.\n // However, we should first remove compound tokens like `<<` from `rustc_lexer`, and then add\n // fancier error recovery to it, as there will be less overall work to do this way.\n-const ASCII_ARRAY: &[(char, &str, Option<token::TokenKind>)] = &[\n-    (' ', \"Space\", None),\n-    ('_', \"Underscore\", Some(token::Ident(kw::Underscore, false))),\n-    ('-', \"Minus/Hyphen\", Some(token::BinOp(token::Minus))),\n-    (',', \"Comma\", Some(token::Comma)),\n-    (';', \"Semicolon\", Some(token::Semi)),\n-    (':', \"Colon\", Some(token::Colon)),\n-    ('!', \"Exclamation Mark\", Some(token::Not)),\n-    ('?', \"Question Mark\", Some(token::Question)),\n-    ('.', \"Period\", Some(token::Dot)),\n-    ('(', \"Left Parenthesis\", Some(token::OpenDelim(Delimiter::Parenthesis))),\n-    (')', \"Right Parenthesis\", Some(token::CloseDelim(Delimiter::Parenthesis))),\n-    ('[', \"Left Square Bracket\", Some(token::OpenDelim(Delimiter::Bracket))),\n-    (']', \"Right Square Bracket\", Some(token::CloseDelim(Delimiter::Bracket))),\n-    ('{', \"Left Curly Brace\", Some(token::OpenDelim(Delimiter::Brace))),\n-    ('}', \"Right Curly Brace\", Some(token::CloseDelim(Delimiter::Brace))),\n-    ('*', \"Asterisk\", Some(token::BinOp(token::Star))),\n-    ('/', \"Slash\", Some(token::BinOp(token::Slash))),\n-    ('\\\\', \"Backslash\", None),\n-    ('&', \"Ampersand\", Some(token::BinOp(token::And))),\n-    ('+', \"Plus Sign\", Some(token::BinOp(token::Plus))),\n-    ('<', \"Less-Than Sign\", Some(token::Lt)),\n-    ('=', \"Equals Sign\", Some(token::Eq)),\n-    ('>', \"Greater-Than Sign\", Some(token::Gt)),\n+const ASCII_ARRAY: &[(&str, &str, Option<token::TokenKind>)] = &[\n+    (\" \", \"Space\", None),\n+    (\"_\", \"Underscore\", Some(token::Ident(kw::Underscore, false))),\n+    (\"-\", \"Minus/Hyphen\", Some(token::BinOp(token::Minus))),\n+    (\",\", \"Comma\", Some(token::Comma)),\n+    (\";\", \"Semicolon\", Some(token::Semi)),\n+    (\":\", \"Colon\", Some(token::Colon)),\n+    (\"!\", \"Exclamation Mark\", Some(token::Not)),\n+    (\"?\", \"Question Mark\", Some(token::Question)),\n+    (\".\", \"Period\", Some(token::Dot)),\n+    (\"(\", \"Left Parenthesis\", Some(token::OpenDelim(Delimiter::Parenthesis))),\n+    (\")\", \"Right Parenthesis\", Some(token::CloseDelim(Delimiter::Parenthesis))),\n+    (\"[\", \"Left Square Bracket\", Some(token::OpenDelim(Delimiter::Bracket))),\n+    (\"]\", \"Right Square Bracket\", Some(token::CloseDelim(Delimiter::Bracket))),\n+    (\"{\", \"Left Curly Brace\", Some(token::OpenDelim(Delimiter::Brace))),\n+    (\"}\", \"Right Curly Brace\", Some(token::CloseDelim(Delimiter::Brace))),\n+    (\"*\", \"Asterisk\", Some(token::BinOp(token::Star))),\n+    (\"/\", \"Slash\", Some(token::BinOp(token::Slash))),\n+    (\"\\\\\", \"Backslash\", None),\n+    (\"&\", \"Ampersand\", Some(token::BinOp(token::And))),\n+    (\"+\", \"Plus Sign\", Some(token::BinOp(token::Plus))),\n+    (\"<\", \"Less-Than Sign\", Some(token::Lt)),\n+    (\"=\", \"Equals Sign\", Some(token::Eq)),\n+    (\"==\", \"Double Equals Sign\", Some(token::EqEq)),\n+    (\">\", \"Greater-Than Sign\", Some(token::Gt)),\n     // FIXME: Literals are already lexed by this point, so we can't recover gracefully just by\n     // spitting the correct token out.\n-    ('\\'', \"Single Quote\", None),\n-    ('\"', \"Quotation Mark\", None),\n+    (\"\\'\", \"Single Quote\", None),\n+    (\"\\\"\", \"Quotation Mark\", None),\n ];\n \n pub(super) fn check_for_substitution<'a>(\n@@ -339,11 +341,11 @@ pub(super) fn check_for_substitution<'a>(\n     err: &mut Diagnostic,\n     count: usize,\n ) -> Option<token::TokenKind> {\n-    let &(_u_char, u_name, ascii_char) = UNICODE_ARRAY.iter().find(|&&(c, _, _)| c == ch)?;\n+    let &(_, u_name, ascii_str) = UNICODE_ARRAY.iter().find(|&&(c, _, _)| c == ch)?;\n \n     let span = Span::with_root_ctxt(pos, pos + Pos::from_usize(ch.len_utf8() * count));\n \n-    let Some((_ascii_char, ascii_name, token)) = ASCII_ARRAY.iter().find(|&&(c, _, _)| c == ascii_char) else {\n+    let Some((_, ascii_name, token)) = ASCII_ARRAY.iter().find(|&&(s, _, _)| s == ascii_str) else {\n         let msg = format!(\"substitution character not found for '{}'\", ch);\n         reader.sess.span_diagnostic.span_bug_no_panic(span, &msg);\n         return None;\n@@ -354,7 +356,7 @@ pub(super) fn check_for_substitution<'a>(\n         let msg = format!(\n             \"Unicode characters '\u201c' (Left Double Quotation Mark) and \\\n              '\u201d' (Right Double Quotation Mark) look like '{}' ({}), but are not\",\n-            ascii_char, ascii_name\n+            ascii_str, ascii_name\n         );\n         err.span_suggestion(\n             Span::with_root_ctxt(\n@@ -368,12 +370,12 @@ pub(super) fn check_for_substitution<'a>(\n     } else {\n         let msg = format!(\n             \"Unicode character '{}' ({}) looks like '{}' ({}), but it is not\",\n-            ch, u_name, ascii_char, ascii_name\n+            ch, u_name, ascii_str, ascii_name\n         );\n         err.span_suggestion(\n             span,\n             &msg,\n-            ascii_char.to_string().repeat(count),\n+            ascii_str.to_string().repeat(count),\n             Applicability::MaybeIncorrect,\n         );\n     }"}, {"sha": "bf93a89f065557efc5535cc75ad9ad1233047d8b", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 54, "deletions": 7, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -1353,9 +1353,6 @@ impl<'a> Parser<'a> {\n                 err.span_label(sp, \"while parsing this `loop` expression\");\n                 err\n             })\n-        } else if self.eat_keyword(kw::Continue) {\n-            let kind = ExprKind::Continue(self.eat_label());\n-            Ok(self.mk_expr(lo.to(self.prev_token.span), kind))\n         } else if self.eat_keyword(kw::Match) {\n             let match_sp = self.prev_token.span;\n             self.parse_match_expr().map_err(|mut err| {\n@@ -1379,6 +1376,8 @@ impl<'a> Parser<'a> {\n             self.parse_try_block(lo)\n         } else if self.eat_keyword(kw::Return) {\n             self.parse_return_expr()\n+        } else if self.eat_keyword(kw::Continue) {\n+            self.parse_continue_expr(lo)\n         } else if self.eat_keyword(kw::Break) {\n             self.parse_break_expr()\n         } else if self.eat_keyword(kw::Yield) {\n@@ -1715,10 +1714,10 @@ impl<'a> Parser<'a> {\n     fn parse_break_expr(&mut self) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_token.span;\n         let mut label = self.eat_label();\n-        let kind = if label.is_some() && self.token == token::Colon {\n+        let kind = if self.token == token::Colon && let Some(label) = label.take() {\n             // The value expression can be a labeled loop, see issue #86948, e.g.:\n             // `loop { break 'label: loop { break 'label 42; }; }`\n-            let lexpr = self.parse_labeled_expr(label.take().unwrap(), true)?;\n+            let lexpr = self.parse_labeled_expr(label, true)?;\n             self.sess.emit_err(LabeledLoopInBreak {\n                 span: lexpr.span,\n                 sub: WrapExpressionInParentheses {\n@@ -1730,8 +1729,8 @@ impl<'a> Parser<'a> {\n         } else if self.token != token::OpenDelim(Delimiter::Brace)\n             || !self.restrictions.contains(Restrictions::NO_STRUCT_LITERAL)\n         {\n-            let expr = self.parse_expr_opt()?;\n-            if let Some(expr) = &expr {\n+            let mut expr = self.parse_expr_opt()?;\n+            if let Some(expr) = &mut expr {\n                 if label.is_some()\n                     && matches!(\n                         expr.kind,\n@@ -1749,7 +1748,19 @@ impl<'a> Parser<'a> {\n                         BuiltinLintDiagnostics::BreakWithLabelAndLoop(expr.span),\n                     );\n                 }\n+\n+                // Recover `break label aaaaa`\n+                if self.may_recover()\n+                    && let ExprKind::Path(None, p) = &expr.kind\n+                    && let [segment] = &*p.segments\n+                    && let &ast::PathSegment { ident, args: None, .. } = segment\n+                    && let Some(next) = self.parse_expr_opt()?\n+                {\n+                    label = Some(self.recover_ident_into_label(ident));\n+                    *expr = next;\n+                }\n             }\n+\n             expr\n         } else {\n             None\n@@ -1758,6 +1769,23 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr)\n     }\n \n+    /// Parse `\"continue\" label?`.\n+    fn parse_continue_expr(&mut self, lo: Span) -> PResult<'a, P<Expr>> {\n+        let mut label = self.eat_label();\n+\n+        // Recover `continue label` -> `continue 'label`\n+        if self.may_recover()\n+            && label.is_none()\n+            && let Some((ident, _)) = self.token.ident()\n+        {\n+            self.bump();\n+            label = Some(self.recover_ident_into_label(ident));\n+        }\n+\n+        let kind = ExprKind::Continue(label);\n+        Ok(self.mk_expr(lo.to(self.prev_token.span), kind))\n+    }\n+\n     /// Parse `\"yield\" expr?`.\n     fn parse_yield_expr(&mut self) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_token.span;\n@@ -3046,6 +3074,25 @@ impl<'a> Parser<'a> {\n         false\n     }\n \n+    /// Converts an ident into 'label and emits an \"expected a label, found an identifier\" error.\n+    fn recover_ident_into_label(&mut self, ident: Ident) -> Label {\n+        // Convert `label` -> `'label`,\n+        // so that nameres doesn't complain about non-existing label\n+        let label = format!(\"'{}\", ident.name);\n+        let ident = Ident { name: Symbol::intern(&label), span: ident.span };\n+\n+        self.struct_span_err(ident.span, \"expected a label, found an identifier\")\n+            .span_suggestion(\n+                ident.span,\n+                \"labels start with a tick\",\n+                label,\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n+\n+        Label { ident }\n+    }\n+\n     /// Parses `ident (COLON expr)?`.\n     fn parse_expr_field(&mut self) -> PResult<'a, ExprField> {\n         let attrs = self.parse_outer_attributes()?;"}, {"sha": "225c1050c7c952fc41230b7bdde07365d65ad419", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -401,12 +401,12 @@ fn resolve_negative_obligation<'tcx>(\n     infcx.resolve_regions(&outlives_env).is_empty()\n }\n \n+#[instrument(level = \"debug\", skip(tcx), ret)]\n pub fn trait_ref_is_knowable<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_ref: ty::TraitRef<'tcx>,\n ) -> Result<(), Conflict> {\n-    debug!(\"trait_ref_is_knowable(trait_ref={:?})\", trait_ref);\n-    if orphan_check_trait_ref(tcx, trait_ref, InCrate::Remote).is_ok() {\n+    if orphan_check_trait_ref(trait_ref, InCrate::Remote).is_ok() {\n         // A downstream or cousin crate is allowed to implement some\n         // substitution of this trait-ref.\n         return Err(Conflict::Downstream);\n@@ -429,11 +429,9 @@ pub fn trait_ref_is_knowable<'tcx>(\n     // and if we are an intermediate owner, then we don't care\n     // about future-compatibility, which means that we're OK if\n     // we are an owner.\n-    if orphan_check_trait_ref(tcx, trait_ref, InCrate::Local).is_ok() {\n-        debug!(\"trait_ref_is_knowable: orphan check passed\");\n+    if orphan_check_trait_ref(trait_ref, InCrate::Local).is_ok() {\n         Ok(())\n     } else {\n-        debug!(\"trait_ref_is_knowable: nonlocal, nonfundamental, unowned\");\n         Err(Conflict::Upstream)\n     }\n }\n@@ -445,6 +443,7 @@ pub fn trait_ref_is_local_or_fundamental<'tcx>(\n     trait_ref.def_id.krate == LOCAL_CRATE || tcx.has_attr(trait_ref.def_id, sym::fundamental)\n }\n \n+#[derive(Debug)]\n pub enum OrphanCheckErr<'tcx> {\n     NonLocalInputType(Vec<(Ty<'tcx>, bool /* Is this the first input type? */)>),\n     UncoveredTy(Ty<'tcx>, Option<Ty<'tcx>>),\n@@ -456,21 +455,20 @@ pub enum OrphanCheckErr<'tcx> {\n ///\n /// 1. All type parameters in `Self` must be \"covered\" by some local type constructor.\n /// 2. Some local type must appear in `Self`.\n+#[instrument(level = \"debug\", skip(tcx), ret)]\n pub fn orphan_check(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Result<(), OrphanCheckErr<'_>> {\n-    debug!(\"orphan_check({:?})\", impl_def_id);\n-\n     // We only except this routine to be invoked on implementations\n     // of a trait, not inherent implementations.\n     let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap().subst_identity();\n-    debug!(\"orphan_check: trait_ref={:?}\", trait_ref);\n+    debug!(?trait_ref);\n \n     // If the *trait* is local to the crate, ok.\n     if trait_ref.def_id.is_local() {\n         debug!(\"trait {:?} is local to current crate\", trait_ref.def_id);\n         return Ok(());\n     }\n \n-    orphan_check_trait_ref(tcx, trait_ref, InCrate::Local)\n+    orphan_check_trait_ref(trait_ref, InCrate::Local)\n }\n \n /// Checks whether a trait-ref is potentially implementable by a crate.\n@@ -559,21 +557,19 @@ pub fn orphan_check(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Result<(), OrphanChe\n ///\n /// Note that this function is never called for types that have both type\n /// parameters and inference variables.\n+#[instrument(level = \"trace\", ret)]\n fn orphan_check_trait_ref<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n     trait_ref: ty::TraitRef<'tcx>,\n     in_crate: InCrate,\n ) -> Result<(), OrphanCheckErr<'tcx>> {\n-    debug!(\"orphan_check_trait_ref(trait_ref={:?}, in_crate={:?})\", trait_ref, in_crate);\n-\n     if trait_ref.needs_infer() && trait_ref.needs_subst() {\n         bug!(\n             \"can't orphan check a trait ref with both params and inference variables {:?}\",\n             trait_ref\n         );\n     }\n \n-    let mut checker = OrphanChecker::new(tcx, in_crate);\n+    let mut checker = OrphanChecker::new(in_crate);\n     match trait_ref.visit_with(&mut checker) {\n         ControlFlow::Continue(()) => Err(OrphanCheckErr::NonLocalInputType(checker.non_local_tys)),\n         ControlFlow::Break(OrphanCheckEarlyExit::ParamTy(ty)) => {\n@@ -592,7 +588,6 @@ fn orphan_check_trait_ref<'tcx>(\n }\n \n struct OrphanChecker<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n     in_crate: InCrate,\n     in_self_ty: bool,\n     /// Ignore orphan check failures and exclusively search for the first\n@@ -602,9 +597,8 @@ struct OrphanChecker<'tcx> {\n }\n \n impl<'tcx> OrphanChecker<'tcx> {\n-    fn new(tcx: TyCtxt<'tcx>, in_crate: InCrate) -> Self {\n+    fn new(in_crate: InCrate) -> Self {\n         OrphanChecker {\n-            tcx,\n             in_crate,\n             in_self_ty: true,\n             search_first_local_ty: false,\n@@ -697,13 +691,17 @@ impl<'tcx> TypeVisitor<'tcx> for OrphanChecker<'tcx> {\n                 }\n             }\n             ty::Error(_) => ControlFlow::Break(OrphanCheckEarlyExit::LocalTy(ty)),\n-            ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(..) => {\n-                self.tcx.sess.delay_span_bug(\n-                    DUMMY_SP,\n-                    format!(\"ty_is_local invoked on closure or generator: {:?}\", ty),\n-                );\n-                ControlFlow::Break(OrphanCheckEarlyExit::LocalTy(ty))\n+            ty::Closure(did, ..) | ty::Generator(did, ..) => {\n+                if self.def_id_is_local(did) {\n+                    ControlFlow::Break(OrphanCheckEarlyExit::LocalTy(ty))\n+                } else {\n+                    self.found_non_local_ty(ty)\n+                }\n             }\n+            // This should only be created when checking whether we have to check whether some\n+            // auto trait impl applies. There will never be multiple impls, so we can just\n+            // act as if it were a local type here.\n+            ty::GeneratorWitness(_) => ControlFlow::Break(OrphanCheckEarlyExit::LocalTy(ty)),\n             ty::Alias(ty::Opaque, ..) => {\n                 // This merits some explanation.\n                 // Normally, opaque types are not involved when performing"}, {"sha": "e3157b66902eb9dbfbfafbc505bdb786c88cbb2b", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -259,6 +259,8 @@ define!(\"mir_unreachable\", fn Unreachable() -> BasicBlock);\n define!(\"mir_drop\", fn Drop<T>(place: T, goto: BasicBlock));\n define!(\"mir_drop_and_replace\", fn DropAndReplace<T>(place: T, value: T, goto: BasicBlock));\n define!(\"mir_call\", fn Call<T>(place: T, goto: BasicBlock, call: T));\n+define!(\"mir_storage_live\", fn StorageLive<T>(local: T));\n+define!(\"mir_storage_dead\", fn StorageDead<T>(local: T));\n define!(\"mir_retag\", fn Retag<T>(place: T));\n define!(\"mir_move\", fn Move<T>(place: T) -> T);\n define!(\"mir_static\", fn Static<T>(s: T) -> &'static T);"}, {"sha": "3bc17b7754d85b7405c7eb33095cb8372e681f41", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -746,6 +746,8 @@ fn signal_string(signal: i32) -> &'static str {\n         libc::SIGWINCH => \" (SIGWINCH)\",\n         #[cfg(not(target_os = \"haiku\"))]\n         libc::SIGIO => \" (SIGIO)\",\n+        #[cfg(target_os = \"haiku\")]\n+        libc::SIGPOLL => \" (SIGPOLL)\",\n         libc::SIGSYS => \" (SIGSYS)\",\n         // For information on Linux signals, run `man 7 signal`\n         #[cfg(all("}, {"sha": "db041aab239e38e53845fec8cc3f293577a325ae", "filename": "tests/mir-opt/building/custom/simple_assign.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.rs?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -11,12 +11,14 @@ pub fn simple(x: i32) -> i32 {\n         let temp2: _;\n \n         {\n+            StorageLive(temp1);\n             temp1 = x;\n             Goto(exit)\n         }\n \n         exit = {\n             temp2 = Move(temp1);\n+            StorageDead(temp1);\n             RET = temp2;\n             Return()\n         }"}, {"sha": "743016708c583ae8cac3f1655dd6c8a2a02f05c7", "filename": "tests/mir-opt/building/custom/simple_assign.simple.built.after.mir", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fcustom%2Fsimple_assign.simple.built.after.mir?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -6,13 +6,15 @@ fn simple(_1: i32) -> i32 {\n     let mut _3: i32;                     // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n \n     bb0: {\n-        _2 = _1;                         // scope 0 at $DIR/simple_assign.rs:+6:13: +6:22\n-        goto -> bb1;                     // scope 0 at $DIR/simple_assign.rs:+7:13: +7:23\n+        StorageLive(_2);                 // scope 0 at $DIR/simple_assign.rs:+6:13: +6:31\n+        _2 = _1;                         // scope 0 at $DIR/simple_assign.rs:+7:13: +7:22\n+        goto -> bb1;                     // scope 0 at $DIR/simple_assign.rs:+8:13: +8:23\n     }\n \n     bb1: {\n-        _3 = move _2;                    // scope 0 at $DIR/simple_assign.rs:+11:13: +11:32\n-        _0 = _3;                         // scope 0 at $DIR/simple_assign.rs:+12:13: +12:24\n-        return;                          // scope 0 at $DIR/simple_assign.rs:+13:13: +13:21\n+        _3 = move _2;                    // scope 0 at $DIR/simple_assign.rs:+12:13: +12:32\n+        StorageDead(_2);                 // scope 0 at $DIR/simple_assign.rs:+13:13: +13:31\n+        _0 = _3;                         // scope 0 at $DIR/simple_assign.rs:+14:13: +14:24\n+        return;                          // scope 0 at $DIR/simple_assign.rs:+15:13: +15:21\n     }\n }"}, {"sha": "5eb8dc2a4687f53181f707efdea2267c79b558dd", "filename": "tests/ui/coherence/coherence-with-generator.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Fcoherence%2Fcoherence-with-generator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Fcoherence%2Fcoherence-with-generator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-with-generator.rs?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -1,5 +1,11 @@\n // Test that encountering closures during coherence does not cause issues.\n #![feature(type_alias_impl_trait, generators)]\n+#![cfg_attr(specialized, feature(specialization))]\n+#![allow(incomplete_features)]\n+\n+// revisions: stock specialized\n+// [specialized]check-pass\n+\n type OpaqueGenerator = impl Sized;\n fn defining_use() -> OpaqueGenerator {\n     || {\n@@ -13,6 +19,6 @@ struct Wrapper<T>(T);\n trait Trait {}\n impl Trait for Wrapper<OpaqueGenerator> {}\n impl<T: Sync> Trait for Wrapper<T> {}\n-//~^ ERROR conflicting implementations of trait `Trait` for type `Wrapper<OpaqueGenerator>`\n+//[stock]~^ ERROR conflicting implementations of trait `Trait` for type `Wrapper<OpaqueGenerator>`\n \n fn main() {}"}, {"sha": "478ac4912646d8312fc12f9ae782ef5e34138f73", "filename": "tests/ui/coherence/coherence-with-generator.stock.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Fcoherence%2Fcoherence-with-generator.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Fcoherence%2Fcoherence-with-generator.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-with-generator.stock.stderr?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `Trait` for type `Wrapper<OpaqueGenerator>`\n-  --> $DIR/coherence-with-generator.rs:15:1\n+  --> $DIR/coherence-with-generator.rs:21:1\n    |\n LL | impl Trait for Wrapper<OpaqueGenerator> {}\n    | --------------------------------------- first implementation here", "previous_filename": "tests/ui/coherence/coherence-with-generator.stderr"}, {"sha": "8363e5af4b61c97ed19475bc950e6aece56dc0de", "filename": "tests/ui/const-generics/issue-106419-struct-with-multiple-const-params.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Fconst-generics%2Fissue-106419-struct-with-multiple-const-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Fconst-generics%2Fissue-106419-struct-with-multiple-const-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissue-106419-struct-with-multiple-const-params.rs?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+#[derive(Clone)]\n+struct Bar<const A: usize, const B: usize>\n+where\n+    [(); A as usize]:,\n+    [(); B as usize]:,\n+{}\n+\n+fn main() {}"}, {"sha": "159d995b8dad303c1c8e0b0c9d79b12b2fd8929f", "filename": "tests/ui/parser/recover-unticked-labels.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Fparser%2Frecover-unticked-labels.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Fparser%2Frecover-unticked-labels.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-unticked-labels.fixed?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+\n+fn main() {\n+    'label: loop { break 'label };    //~ error: cannot find value `label` in this scope\n+    'label: loop { break 'label 0 };  //~ error: expected a label, found an identifier\n+    'label: loop { continue 'label }; //~ error: expected a label, found an identifier\n+}"}, {"sha": "56034de68449fdda7695545035c3cd7b8c979b89", "filename": "tests/ui/parser/recover-unticked-labels.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Fparser%2Frecover-unticked-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Fparser%2Frecover-unticked-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-unticked-labels.rs?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+\n+fn main() {\n+    'label: loop { break label };    //~ error: cannot find value `label` in this scope\n+    'label: loop { break label 0 };  //~ error: expected a label, found an identifier\n+    'label: loop { continue label }; //~ error: expected a label, found an identifier\n+}"}, {"sha": "c115dffb10e9c6e476bf9eddd7e214cb2b2b0e23", "filename": "tests/ui/parser/recover-unticked-labels.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Fparser%2Frecover-unticked-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Fparser%2Frecover-unticked-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Frecover-unticked-labels.stderr?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -0,0 +1,25 @@\n+error: expected a label, found an identifier\n+  --> $DIR/recover-unticked-labels.rs:5:26\n+   |\n+LL |     'label: loop { break label 0 };\n+   |                          ^^^^^ help: labels start with a tick: `'label`\n+\n+error: expected a label, found an identifier\n+  --> $DIR/recover-unticked-labels.rs:6:29\n+   |\n+LL |     'label: loop { continue label };\n+   |                             ^^^^^ help: labels start with a tick: `'label`\n+\n+error[E0425]: cannot find value `label` in this scope\n+  --> $DIR/recover-unticked-labels.rs:4:26\n+   |\n+LL |     'label: loop { break label };\n+   |     ------               ^^^^^\n+   |     |                    |\n+   |     |                    not found in this scope\n+   |     |                    help: use the similarly named label: `'label`\n+   |     a label with a similar name exists\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "cd25c7566897a752b2bb92223b7ba1aa11e02d83", "filename": "tests/ui/parser/unicode-chars.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Fparser%2Funicode-chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Fparser%2Funicode-chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Funicode-chars.rs?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -6,4 +6,7 @@ fn main() {\n     //~^ ERROR unknown start of token: \\u{a0}\n     //~^^ NOTE character appears 3 more times\n     //~^^^ HELP Unicode character '\u00a0' (No-Break Space) looks like ' ' (Space), but it is not\n+    let _ = 1 \u2a75 2;\n+    //~^ ERROR unknown start of token\n+    //~^^ HELP Unicode character '\u2a75' (Two Consecutive Equals Signs) looks like '==' (Double Equals Sign), but it is not\n }"}, {"sha": "086de5ec0997e82d34ced9cb6b4bcfb11b6d20bb", "filename": "tests/ui/parser/unicode-chars.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Fparser%2Funicode-chars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Fparser%2Funicode-chars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Funicode-chars.stderr?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -21,5 +21,16 @@ help: Unicode character '\u00a0' (No-Break Space) looks like ' ' (Space), but it is\n LL |         let\u00a0x\u00a0=\u00a00;\n    |     ++++\n \n-error: aborting due to 2 previous errors\n+error: unknown start of token: \\u{2a75}\n+  --> $DIR/unicode-chars.rs:9:15\n+   |\n+LL |     let _ = 1 \u2a75 2;\n+   |               ^\n+   |\n+help: Unicode character '\u2a75' (Two Consecutive Equals Signs) looks like '==' (Double Equals Sign), but it is not\n+   |\n+LL |     let _ = 1 == 2;\n+   |               ~~\n+\n+error: aborting due to 3 previous errors\n "}, {"sha": "0d3bace4db1f4baa6414c7d3b85fd5c46704be8c", "filename": "tests/ui/type-alias-impl-trait/issue-104817.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-104817.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-104817.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-104817.rs?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -0,0 +1,19 @@\n+#![feature(type_alias_impl_trait)]\n+#![cfg_attr(specialized, feature(specialization))]\n+#![allow(incomplete_features)]\n+\n+// revisions: stock specialized\n+// [specialized]check-pass\n+\n+trait OpaqueTrait {}\n+impl<T> OpaqueTrait for T {}\n+type OpaqueType = impl OpaqueTrait;\n+fn mk_opaque() -> OpaqueType {\n+    || 0\n+}\n+trait AnotherTrait {}\n+impl<T: Send> AnotherTrait for T {}\n+impl AnotherTrait for OpaqueType {}\n+//[stock]~^ conflicting implementations of trait `AnotherTrait` for type `OpaqueType`\n+\n+fn main() {}"}, {"sha": "47bae8bd12b6bba1731868e99e29b84fbdf88ad3", "filename": "tests/ui/type-alias-impl-trait/issue-104817.stock.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-104817.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04a41f889f563b2384c63c990b5423d201d62ebd/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-104817.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fissue-104817.stock.stderr?ref=04a41f889f563b2384c63c990b5423d201d62ebd", "patch": "@@ -0,0 +1,11 @@\n+error[E0119]: conflicting implementations of trait `AnotherTrait` for type `OpaqueType`\n+  --> $DIR/issue-104817.rs:16:1\n+   |\n+LL | impl<T: Send> AnotherTrait for T {}\n+   | -------------------------------- first implementation here\n+LL | impl AnotherTrait for OpaqueType {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `OpaqueType`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}]}