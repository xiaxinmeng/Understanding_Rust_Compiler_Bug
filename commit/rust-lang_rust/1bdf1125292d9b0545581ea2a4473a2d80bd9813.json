{"sha": "1bdf1125292d9b0545581ea2a4473a2d80bd9813", "node_id": "C_kwDOAAsO6NoAKDFiZGYxMTI1MjkyZDliMDU0NTU4MWVhMmE0NDczYTJkODBiZDk4MTM", "commit": {"author": {"name": "mejrs", "email": "", "date": "2022-11-26T20:22:49Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-12-17T18:08:25Z"}, "message": "Resolve various merge conflicts", "tree": {"sha": "fb00cab594365a2ec90476e8b02eba900cf4e975", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb00cab594365a2ec90476e8b02eba900cf4e975"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bdf1125292d9b0545581ea2a4473a2d80bd9813", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bdf1125292d9b0545581ea2a4473a2d80bd9813", "html_url": "https://github.com/rust-lang/rust/commit/1bdf1125292d9b0545581ea2a4473a2d80bd9813", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bdf1125292d9b0545581ea2a4473a2d80bd9813/comments", "author": {}, "committer": {}, "parents": [{"sha": "e71a722fa69974102e220444523b824da7eaa522", "url": "https://api.github.com/repos/rust-lang/rust/commits/e71a722fa69974102e220444523b824da7eaa522", "html_url": "https://github.com/rust-lang/rust/commit/e71a722fa69974102e220444523b824da7eaa522"}], "stats": {"total": 259, "additions": 129, "deletions": 130}, "files": [{"sha": "60d3d3e69abbe13385988c7a2478e4c33dea03e6", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bdf1125292d9b0545581ea2a4473a2d80bd9813/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1bdf1125292d9b0545581ea2a4473a2d80bd9813/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=1bdf1125292d9b0545581ea2a4473a2d80bd9813", "patch": "@@ -292,7 +292,7 @@ mir_build_borrow_of_moved_value = borrow of moved value\n     .label = value moved into `{$name}` here\n     .occurs_because_label = move occurs because `{$name}` has type `{$ty}` which does not implement the `Copy` trait\n     .value_borrowed_label = value borrowed here after move\n-    .suggest_borrowing = borrow this binding in the pattern to avoid moving the value\n+    .suggestion = borrow this binding in the pattern to avoid moving the value\n \n mir_build_multiple_mut_borrows = cannot borrow value as mutable more than once at a time\n     .label = first mutable borrow, by `{$name}`, occurs here"}, {"sha": "25d0e736e599f5ee4d66e501bb62bff8617a2102", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bdf1125292d9b0545581ea2a4473a2d80bd9813/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bdf1125292d9b0545581ea2a4473a2d80bd9813/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=1bdf1125292d9b0545581ea2a4473a2d80bd9813", "patch": "@@ -57,8 +57,8 @@ fluent_messages! {\n     lint => \"../locales/en-US/lint.ftl\",\n     metadata => \"../locales/en-US/metadata.ftl\",\n     middle => \"../locales/en-US/middle.ftl\",\n-    mir_dataflow => \"../locales/en-US/mir_dataflow.ftl\",\n     mir_build => \"../locales/en-US/mir_build.ftl\",\n+    mir_dataflow => \"../locales/en-US/mir_dataflow.ftl\",\n     monomorphize => \"../locales/en-US/monomorphize.ftl\",\n     parse => \"../locales/en-US/parse.ftl\",\n     passes => \"../locales/en-US/passes.ftl\","}, {"sha": "f3bfafb37b77f2aee4dd98f465531ce722be8b3e", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 115, "deletions": 113, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/1bdf1125292d9b0545581ea2a4473a2d80bd9813/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bdf1125292d9b0545581ea2a4473a2d80bd9813/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=1bdf1125292d9b0545581ea2a4473a2d80bd9813", "patch": "@@ -1,22 +1,24 @@\n use crate::thir::pattern::MatchCheckCtxt;\n-use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n-use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n+use rustc_errors::Handler;\n+use rustc_errors::{\n+    error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic, MultiSpan,\n+};\n+use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_middle::ty::{self, Ty};\n-use rustc_session::{parse::ParseSess, SessionDiagnostic};\n use rustc_span::{symbol::Ident, Span};\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::unconditional_recursion)]\n+#[diag(mir_build_unconditional_recursion)]\n #[help]\n pub struct UnconditionalRecursion {\n     #[label]\n     pub span: Span,\n-    #[label(mir_build::unconditional_recursion_call_site_label)]\n+    #[label(mir_build_unconditional_recursion_call_site_label)]\n     pub call_sites: Vec<Span>,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::unsafe_op_in_unsafe_fn_call_to_unsafe_fn_requires_unsafe)]\n+#[diag(mir_build_unsafe_op_in_unsafe_fn_call_to_unsafe_fn_requires_unsafe)]\n #[note]\n pub struct UnsafeOpInUnsafeFnCallToUnsafeFunctionRequiresUnsafe<'a> {\n     #[label]\n@@ -25,87 +27,87 @@ pub struct UnsafeOpInUnsafeFnCallToUnsafeFunctionRequiresUnsafe<'a> {\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::unsafe_op_in_unsafe_fn_call_to_unsafe_fn_requires_unsafe_nameless)]\n+#[diag(mir_build_unsafe_op_in_unsafe_fn_call_to_unsafe_fn_requires_unsafe_nameless)]\n #[note]\n pub struct UnsafeOpInUnsafeFnCallToUnsafeFunctionRequiresUnsafeNameless {\n     #[label]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::unsafe_op_in_unsafe_fn_inline_assembly_requires_unsafe)]\n+#[diag(mir_build_unsafe_op_in_unsafe_fn_inline_assembly_requires_unsafe)]\n #[note]\n pub struct UnsafeOpInUnsafeFnUseOfInlineAssemblyRequiresUnsafe {\n     #[label]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::unsafe_op_in_unsafe_fn_initializing_type_with_requires_unsafe)]\n+#[diag(mir_build_unsafe_op_in_unsafe_fn_initializing_type_with_requires_unsafe)]\n #[note]\n pub struct UnsafeOpInUnsafeFnInitializingTypeWithRequiresUnsafe {\n     #[label]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::unsafe_op_in_unsafe_fn_mutable_static_requires_unsafe)]\n+#[diag(mir_build_unsafe_op_in_unsafe_fn_mutable_static_requires_unsafe)]\n #[note]\n pub struct UnsafeOpInUnsafeFnUseOfMutableStaticRequiresUnsafe {\n     #[label]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::unsafe_op_in_unsafe_fn_extern_static_requires_unsafe)]\n+#[diag(mir_build_unsafe_op_in_unsafe_fn_extern_static_requires_unsafe)]\n #[note]\n pub struct UnsafeOpInUnsafeFnUseOfExternStaticRequiresUnsafe {\n     #[label]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::unsafe_op_in_unsafe_fn_deref_raw_pointer_requires_unsafe)]\n+#[diag(mir_build_unsafe_op_in_unsafe_fn_deref_raw_pointer_requires_unsafe)]\n #[note]\n pub struct UnsafeOpInUnsafeFnDerefOfRawPointerRequiresUnsafe {\n     #[label]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::unsafe_op_in_unsafe_fn_union_field_requires_unsafe)]\n+#[diag(mir_build_unsafe_op_in_unsafe_fn_union_field_requires_unsafe)]\n #[note]\n pub struct UnsafeOpInUnsafeFnAccessToUnionFieldRequiresUnsafe {\n     #[label]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::unsafe_op_in_unsafe_fn_mutation_of_layout_constrained_field_requires_unsafe)]\n+#[diag(mir_build_unsafe_op_in_unsafe_fn_mutation_of_layout_constrained_field_requires_unsafe)]\n #[note]\n pub struct UnsafeOpInUnsafeFnMutationOfLayoutConstrainedFieldRequiresUnsafe {\n     #[label]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::unsafe_op_in_unsafe_fn_borrow_of_layout_constrained_field_requires_unsafe)]\n+#[diag(mir_build_unsafe_op_in_unsafe_fn_borrow_of_layout_constrained_field_requires_unsafe)]\n pub struct UnsafeOpInUnsafeFnBorrowOfLayoutConstrainedFieldRequiresUnsafe {\n     #[label]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::unsafe_op_in_unsafe_fn_call_to_fn_with_requires_unsafe)]\n+#[diag(mir_build_unsafe_op_in_unsafe_fn_call_to_fn_with_requires_unsafe)]\n #[note]\n pub struct UnsafeOpInUnsafeFnCallToFunctionWithRequiresUnsafe<'a> {\n     #[label]\n     pub span: Span,\n     pub function: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::call_to_unsafe_fn_requires_unsafe, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_call_to_unsafe_fn_requires_unsafe, code = \"E0133\")]\n #[note]\n pub struct CallToUnsafeFunctionRequiresUnsafe<'a> {\n     #[primary_span]\n@@ -114,17 +116,17 @@ pub struct CallToUnsafeFunctionRequiresUnsafe<'a> {\n     pub function: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::call_to_unsafe_fn_requires_unsafe_nameless, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_call_to_unsafe_fn_requires_unsafe_nameless, code = \"E0133\")]\n #[note]\n pub struct CallToUnsafeFunctionRequiresUnsafeNameless {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::call_to_unsafe_fn_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_call_to_unsafe_fn_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n #[note]\n pub struct CallToUnsafeFunctionRequiresUnsafeUnsafeOpInUnsafeFnAllowed<'a> {\n     #[primary_span]\n@@ -133,9 +135,9 @@ pub struct CallToUnsafeFunctionRequiresUnsafeUnsafeOpInUnsafeFnAllowed<'a> {\n     pub function: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(\n-    mir_build::call_to_unsafe_fn_requires_unsafe_nameless_unsafe_op_in_unsafe_fn_allowed,\n+    mir_build_call_to_unsafe_fn_requires_unsafe_nameless_unsafe_op_in_unsafe_fn_allowed,\n     code = \"E0133\"\n )]\n #[note]\n@@ -145,36 +147,36 @@ pub struct CallToUnsafeFunctionRequiresUnsafeNamelessUnsafeOpInUnsafeFnAllowed {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::inline_assembly_requires_unsafe, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_inline_assembly_requires_unsafe, code = \"E0133\")]\n #[note]\n pub struct UseOfInlineAssemblyRequiresUnsafe {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::inline_assembly_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_inline_assembly_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n #[note]\n pub struct UseOfInlineAssemblyRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::initializing_type_with_requires_unsafe, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_initializing_type_with_requires_unsafe, code = \"E0133\")]\n #[note]\n pub struct InitializingTypeWithRequiresUnsafe {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(\n-    mir_build::initializing_type_with_requires_unsafe_unsafe_op_in_unsafe_fn_allowed,\n+    mir_build_initializing_type_with_requires_unsafe_unsafe_op_in_unsafe_fn_allowed,\n     code = \"E0133\"\n )]\n #[note]\n@@ -184,90 +186,90 @@ pub struct InitializingTypeWithRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::mutable_static_requires_unsafe, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_mutable_static_requires_unsafe, code = \"E0133\")]\n #[note]\n pub struct UseOfMutableStaticRequiresUnsafe {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::mutable_static_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_mutable_static_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n #[note]\n pub struct UseOfMutableStaticRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::extern_static_requires_unsafe, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_extern_static_requires_unsafe, code = \"E0133\")]\n #[note]\n pub struct UseOfExternStaticRequiresUnsafe {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::extern_static_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_extern_static_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n #[note]\n pub struct UseOfExternStaticRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::deref_raw_pointer_requires_unsafe, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_deref_raw_pointer_requires_unsafe, code = \"E0133\")]\n #[note]\n pub struct DerefOfRawPointerRequiresUnsafe {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::deref_raw_pointer_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_deref_raw_pointer_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n #[note]\n pub struct DerefOfRawPointerRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::union_field_requires_unsafe, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_union_field_requires_unsafe, code = \"E0133\")]\n #[note]\n pub struct AccessToUnionFieldRequiresUnsafe {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::union_field_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_union_field_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n #[note]\n pub struct AccessToUnionFieldRequiresUnsafeUnsafeOpInUnsafeFnAllowed {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::mutation_of_layout_constrained_field_requires_unsafe, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_mutation_of_layout_constrained_field_requires_unsafe, code = \"E0133\")]\n #[note]\n pub struct MutationOfLayoutConstrainedFieldRequiresUnsafe {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(\n-    mir_build::mutation_of_layout_constrained_field_requires_unsafe_unsafe_op_in_unsafe_fn_allowed,\n+    mir_build_mutation_of_layout_constrained_field_requires_unsafe_unsafe_op_in_unsafe_fn_allowed,\n     code = \"E0133\"\n )]\n #[note]\n@@ -277,18 +279,18 @@ pub struct MutationOfLayoutConstrainedFieldRequiresUnsafeUnsafeOpInUnsafeFnAllow\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::borrow_of_layout_constrained_field_requires_unsafe, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_borrow_of_layout_constrained_field_requires_unsafe, code = \"E0133\")]\n #[note]\n pub struct BorrowOfLayoutConstrainedFieldRequiresUnsafe {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n+#[derive(Diagnostic)]\n #[diag(\n-    mir_build::borrow_of_layout_constrained_field_requires_unsafe_unsafe_op_in_unsafe_fn_allowed,\n+    mir_build_borrow_of_layout_constrained_field_requires_unsafe_unsafe_op_in_unsafe_fn_allowed,\n     code = \"E0133\"\n )]\n #[note]\n@@ -298,8 +300,8 @@ pub struct BorrowOfLayoutConstrainedFieldRequiresUnsafeUnsafeOpInUnsafeFnAllowed\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::call_to_fn_with_requires_unsafe, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_call_to_fn_with_requires_unsafe, code = \"E0133\")]\n #[note]\n pub struct CallToFunctionWithRequiresUnsafe<'a> {\n     #[primary_span]\n@@ -308,8 +310,8 @@ pub struct CallToFunctionWithRequiresUnsafe<'a> {\n     pub function: &'a str,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::call_to_fn_with_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_call_to_fn_with_requires_unsafe_unsafe_op_in_unsafe_fn_allowed, code = \"E0133\")]\n #[note]\n pub struct CallToFunctionWithRequiresUnsafeUnsafeOpInUnsafeFnAllowed<'a> {\n     #[primary_span]\n@@ -319,22 +321,22 @@ pub struct CallToFunctionWithRequiresUnsafeUnsafeOpInUnsafeFnAllowed<'a> {\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::unused_unsafe)]\n+#[diag(mir_build_unused_unsafe)]\n pub struct UnusedUnsafe {\n     #[label]\n     pub span: Span,\n     #[subdiagnostic]\n     pub enclosing: Option<UnusedUnsafeEnclosing>,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum UnusedUnsafeEnclosing {\n-    #[label(mir_build::unused_unsafe_enclosing_block_label)]\n+    #[label(mir_build_unused_unsafe_enclosing_block_label)]\n     Block {\n         #[primary_span]\n         span: Span,\n     },\n-    #[label(mir_build::unused_unsafe_enclosing_fn_label)]\n+    #[label(mir_build_unused_unsafe_enclosing_fn_label)]\n     Function {\n         #[primary_span]\n         span: Span,\n@@ -348,11 +350,11 @@ pub(crate) struct NonExhaustivePatternsTypeNotEmpty<'p, 'tcx, 'm> {\n     pub ty: Ty<'tcx>,\n }\n \n-impl<'a> SessionDiagnostic<'a> for NonExhaustivePatternsTypeNotEmpty<'_, '_, '_> {\n-    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        let mut diag = sess.span_diagnostic.struct_span_err_with_code(\n+impl<'a> IntoDiagnostic<'a> for NonExhaustivePatternsTypeNotEmpty<'_, '_, '_> {\n+    fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag = handler.struct_span_err_with_code(\n             self.span,\n-            rustc_errors::fluent::mir_build::non_exhaustive_patterns_type_not_empty,\n+            rustc_errors::fluent::mir_build_non_exhaustive_patterns_type_not_empty,\n             error_code!(E0004),\n         );\n \n@@ -374,7 +376,7 @@ impl<'a> SessionDiagnostic<'a> for NonExhaustivePatternsTypeNotEmpty<'_, '_, '_>\n             let mut span: MultiSpan = def_span.into();\n             span.push_span_label(def_span, \"\");\n \n-            diag.span_note(span, rustc_errors::fluent::mir_build::def_note);\n+            diag.span_note(span, rustc_errors::fluent::def_note);\n         }\n \n         let is_variant_list_non_exhaustive = match self.ty.kind() {\n@@ -385,14 +387,14 @@ impl<'a> SessionDiagnostic<'a> for NonExhaustivePatternsTypeNotEmpty<'_, '_, '_>\n         };\n \n         if is_variant_list_non_exhaustive {\n-            diag.note(rustc_errors::fluent::mir_build::non_exhaustive_type_note);\n+            diag.note(rustc_errors::fluent::non_exhaustive_type_note);\n         } else {\n-            diag.note(rustc_errors::fluent::mir_build::type_note);\n+            diag.note(rustc_errors::fluent::type_note);\n         }\n \n         if let ty::Ref(_, sub_ty, _) = self.ty.kind() {\n-            if self.cx.tcx.is_ty_uninhabited_from(self.cx.module, *sub_ty, self.cx.param_env) {\n-                diag.note(rustc_errors::fluent::mir_build::reference_note);\n+            if !sub_ty.is_inhabited_from(self.cx.tcx, self.cx.module, self.cx.param_env) {\n+                diag.note(rustc_errors::fluent::reference_note);\n             }\n         }\n \n@@ -418,104 +420,104 @@ impl<'a> SessionDiagnostic<'a> for NonExhaustivePatternsTypeNotEmpty<'_, '_, '_>\n         if let Some((span, sugg)) = suggestion {\n             diag.span_suggestion_verbose(\n                 span,\n-                rustc_errors::fluent::mir_build::suggestion,\n+                rustc_errors::fluent::suggestion,\n                 sugg,\n                 Applicability::HasPlaceholders,\n             );\n         } else {\n-            diag.help(rustc_errors::fluent::mir_build::help);\n+            diag.help(rustc_errors::fluent::help);\n         }\n \n         diag\n     }\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::static_in_pattern, code = \"E0158\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_static_in_pattern, code = \"E0158\")]\n pub struct StaticInPattern {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::assoc_const_in_pattern, code = \"E0158\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_assoc_const_in_pattern, code = \"E0158\")]\n pub struct AssocConstInPattern {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::const_param_in_pattern, code = \"E0158\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_const_param_in_pattern, code = \"E0158\")]\n pub struct ConstParamInPattern {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::non_const_path, code = \"E0080\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_non_const_path, code = \"E0080\")]\n pub struct NonConstPath {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::unreachable_pattern)]\n+#[diag(mir_build_unreachable_pattern)]\n pub struct UnreachablePattern {\n     #[label]\n     pub span: Option<Span>,\n-    #[label(mir_build::catchall_label)]\n+    #[label(catchall_label)]\n     pub catchall: Option<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::const_pattern_depends_on_generic_parameter)]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_const_pattern_depends_on_generic_parameter)]\n pub struct ConstPatternDependsOnGenericParameter {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::could_not_eval_const_pattern)]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_could_not_eval_const_pattern)]\n pub struct CouldNotEvalConstPattern {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::lower_range_bound_must_be_less_than_or_equal_to_upper, code = \"E0030\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_lower_range_bound_must_be_less_than_or_equal_to_upper, code = \"E0030\")]\n pub struct LowerRangeBoundMustBeLessThanOrEqualToUpper {\n     #[primary_span]\n     #[label]\n     pub span: Span,\n-    #[note(mir_build::teach_note)]\n+    #[note(teach_note)]\n     pub teach: Option<()>,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::lower_range_bound_must_be_less_than_upper, code = \"E0579\")]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_lower_range_bound_must_be_less_than_upper, code = \"E0579\")]\n pub struct LowerRangeBoundMustBeLessThanUpper {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::leading_irrefutable_let_patterns)]\n+#[diag(mir_build_leading_irrefutable_let_patterns)]\n #[note]\n #[help]\n pub struct LeadingIrrefutableLetPatterns {\n     pub count: usize,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::trailing_irrefutable_let_patterns)]\n+#[diag(mir_build_trailing_irrefutable_let_patterns)]\n #[note]\n #[help]\n pub struct TrailingIrrefutableLetPatterns {\n     pub count: usize,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::bindings_with_variant_name, code = \"E0170\")]\n+#[diag(mir_build_bindings_with_variant_name, code = \"E0170\")]\n pub struct BindingsWithVariantName {\n     #[suggestion(code = \"{ty_path}::{ident}\", applicability = \"machine-applicable\")]\n     pub suggestion: Option<Span>,\n@@ -524,88 +526,88 @@ pub struct BindingsWithVariantName {\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::irrefutable_let_patterns_generic_let)]\n+#[diag(mir_build_irrefutable_let_patterns_generic_let)]\n #[note]\n #[help]\n pub struct IrrefutableLetPatternsGenericLet {\n     pub count: usize,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::irrefutable_let_patterns_if_let)]\n+#[diag(mir_build_irrefutable_let_patterns_if_let)]\n #[note]\n #[help]\n pub struct IrrefutableLetPatternsIfLet {\n     pub count: usize,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::irrefutable_let_patterns_if_let_guard)]\n+#[diag(mir_build_irrefutable_let_patterns_if_let_guard)]\n #[note]\n #[help]\n pub struct IrrefutableLetPatternsIfLetGuard {\n     pub count: usize,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::irrefutable_let_patterns_let_else)]\n+#[diag(mir_build_irrefutable_let_patterns_let_else)]\n #[note]\n #[help]\n pub struct IrrefutableLetPatternsLetElse {\n     pub count: usize,\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(mir_build::irrefutable_let_patterns_while_let)]\n+#[diag(mir_build_irrefutable_let_patterns_while_let)]\n #[note]\n #[help]\n pub struct IrrefutableLetPatternsWhileLet {\n     pub count: usize,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::borrow_of_moved_value)]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_borrow_of_moved_value)]\n pub struct BorrowOfMovedValue<'tcx> {\n     #[primary_span]\n     pub span: Span,\n     #[label]\n-    #[label(mir_build::occurs_because_label)]\n+    #[label(occurs_because_label)]\n     pub binding_span: Span,\n-    #[label(mir_build::value_borrowed_label)]\n+    #[label(value_borrowed_label)]\n     pub conflicts_ref: Vec<Span>,\n     pub name: Ident,\n     pub ty: Ty<'tcx>,\n     #[suggestion(code = \"ref \", applicability = \"machine-applicable\")]\n     pub suggest_borrowing: Option<Span>,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[diag(mir_build::multiple_mut_borrows)]\n+#[derive(Diagnostic)]\n+#[diag(mir_build_multiple_mut_borrows)]\n pub struct MultipleMutBorrows {\n     #[primary_span]\n     pub span: Span,\n     #[label]\n     pub binding_span: Span,\n-    #[subdiagnostic]\n+    #[subdiagnostic(eager)]\n     pub occurences: Vec<MultipleMutBorrowOccurence>,\n     pub name: Ident,\n }\n \n-#[derive(SessionSubdiagnostic)]\n+#[derive(Subdiagnostic)]\n pub enum MultipleMutBorrowOccurence {\n-    #[label(mir_build::mutable_borrow)]\n+    #[label(mutable_borrow)]\n     Mutable {\n         #[primary_span]\n         span: Span,\n         name_mut: Ident,\n     },\n-    #[label(mir_build::immutable_borrow)]\n+    #[label(immutable_borrow)]\n     Immutable {\n         #[primary_span]\n         span: Span,\n         name_immut: Ident,\n     },\n-    #[label(mir_build::moved)]\n+    #[label(moved)]\n     Moved {\n         #[primary_span]\n         span: Span,"}, {"sha": "ddd52114ecfe6a324c86a0d7ad7d581e4876d0e7", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1bdf1125292d9b0545581ea2a4473a2d80bd9813/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bdf1125292d9b0545581ea2a4473a2d80bd9813/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=1bdf1125292d9b0545581ea2a4473a2d80bd9813", "patch": "@@ -598,11 +598,6 @@ fn irrefutable_let_patterns(\n     count: usize,\n     span: Span,\n ) {\n-    let span = match source {\n-        LetSource::LetElse(span) => span,\n-        _ => span,\n-    };\n-\n     macro_rules! emit_diag {\n         ($lint:tt) => {{\n             tcx.emit_spanned_lint(IRREFUTABLE_LET_PATTERNS, id, span, $lint { count });\n@@ -613,7 +608,7 @@ fn irrefutable_let_patterns(\n         LetSource::GenericLet => emit_diag!(IrrefutableLetPatternsGenericLet),\n         LetSource::IfLet => emit_diag!(IrrefutableLetPatternsIfLet),\n         LetSource::IfLetGuard => emit_diag!(IrrefutableLetPatternsIfLetGuard),\n-        LetSource::LetElse(..) => emit_diag!(IrrefutableLetPatternsLetElse),\n+        LetSource::LetElse => emit_diag!(IrrefutableLetPatternsLetElse),\n         LetSource::WhileLet => emit_diag!(IrrefutableLetPatternsWhileLet),\n     }\n }\n@@ -968,7 +963,10 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_, '_>, pat: &Pa\n                     conflicts_ref,\n                     name,\n                     ty: typeck_results.node_type(pat.hir_id),\n-                    suggest_borrowing: pat.span.contains(binding_span).then(|| binding_span.shrink_to_lo()),\n+                    suggest_borrowing: pat\n+                        .span\n+                        .contains(binding_span)\n+                        .then(|| binding_span.shrink_to_lo()),\n                 });\n             }\n             return;\n@@ -1001,16 +999,15 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_, '_>, pat: &Pa\n         // Report mutability conflicts for e.g. `ref mut x @ Some(ref mut y)`.\n         let mut occurences = vec![];\n \n-        for (span, name) in conflicts_mut_mut {\n-            occurences.push(MultipleMutBorrowOccurence::Mutable { span, name_mut: name });\n+        for (span, name_mut) in conflicts_mut_mut {\n+            occurences.push(MultipleMutBorrowOccurence::Mutable { span, name_mut });\n         }\n-        for (span, name) in conflicts_mut_ref {\n-            occurences.push(MultipleMutBorrowOccurence::Immutable { span, name_immut: name });\n+        for (span, name_immut) in conflicts_mut_ref {\n+            occurences.push(MultipleMutBorrowOccurence::Immutable { span, name_immut });\n         }\n-        for (span, name) in conflicts_move {\n-            occurences.push(MultipleMutBorrowOccurence::Moved { span, name_moved: name });\n+        for (span, name_moved) in conflicts_move {\n+            occurences.push(MultipleMutBorrowOccurence::Moved { span, name_moved });\n         }\n-\n         sess.emit_err(MultipleMutBorrows { span: pat.span, binding_span, occurences, name });\n     } else if !conflicts_mut_ref.is_empty() {\n         // Report mutability conflicts for e.g. `ref x @ Some(ref mut y)` or the converse."}, {"sha": "2c775b397182b352eea62549c4b7179129e20178", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1bdf1125292d9b0545581ea2a4473a2d80bd9813/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bdf1125292d9b0545581ea2a4473a2d80bd9813/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=1bdf1125292d9b0545581ea2a4473a2d80bd9813", "patch": "@@ -565,7 +565,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 _ => bug!(\"Expected ConstKind::Param\"),\n             },\n             mir::ConstantKind::Val(_, _) => self.const_to_pat(value, id, span, false).kind,\n-            mir::ConstKind::Unevaluated(_) => {\n+            mir::ConstantKind::Unevaluated(..) => {\n                 // If we land here it means the const can't be evaluated because it's `TooGeneric`.\n                 self.tcx.sess.emit_err(ConstPatternDependsOnGenericParameter { span });\n                 return PatKind::Wild;"}]}