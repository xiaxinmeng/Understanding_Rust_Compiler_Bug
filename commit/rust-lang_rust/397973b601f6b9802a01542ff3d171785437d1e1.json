{"sha": "397973b601f6b9802a01542ff3d171785437d1e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5Nzk3M2I2MDFmNmI5ODAyYTAxNTQyZmYzZDE3MTc4NTQzN2QxZTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-08-30T20:06:05Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-17T15:32:15Z"}, "message": "make LUB/GLB of higher-ranked things actually do EQ", "tree": {"sha": "fba7c533950f59f27f6ca025dc053545780e2b4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fba7c533950f59f27f6ca025dc053545780e2b4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/397973b601f6b9802a01542ff3d171785437d1e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/397973b601f6b9802a01542ff3d171785437d1e1", "html_url": "https://github.com/rust-lang/rust/commit/397973b601f6b9802a01542ff3d171785437d1e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/397973b601f6b9802a01542ff3d171785437d1e1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02eed2e9a59c0b5df3260b38346562b85a7f3b44", "url": "https://api.github.com/repos/rust-lang/rust/commits/02eed2e9a59c0b5df3260b38346562b85a7f3b44", "html_url": "https://github.com/rust-lang/rust/commit/02eed2e9a59c0b5df3260b38346562b85a7f3b44"}], "stats": {"total": 84, "additions": 81, "deletions": 3}, "files": [{"sha": "982784f8c4067c35f05902b2e0cb0a46872d9cb4", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/397973b601f6b9802a01542ff3d171785437d1e1/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/397973b601f6b9802a01542ff3d171785437d1e1/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=397973b601f6b9802a01542ff3d171785437d1e1", "patch": "@@ -15,6 +15,7 @@ use super::Subtype;\n \n use traits::ObligationCause;\n use ty::{self, Ty, TyCtxt};\n+use ty::error::TypeError;\n use ty::relate::{Relate, RelateResult, TypeRelation};\n \n /// \"Greatest lower bound\" (common subtype)\n@@ -74,7 +75,29 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n                   -> RelateResult<'tcx, ty::Binder<T>>\n         where T: Relate<'tcx>\n     {\n-        self.fields.higher_ranked_glb(a, b, self.a_is_expected)\n+        let was_error = self.infcx().probe(|_snapshot| {\n+            // Subtle: use a fresh combine-fields here because we recover\n+            // from Err. Doing otherwise could propagate obligations out\n+            // through our `self.obligations` field.\n+            self.infcx()\n+                .combine_fields(self.fields.trace.clone(), self.fields.param_env)\n+                .higher_ranked_glb(a, b, self.a_is_expected)\n+                .is_err()\n+        });\n+\n+        // When higher-ranked types are involved, computing the LUB is\n+        // very challenging, switch to invariance. This is obviously\n+        // overly conservative but works ok in practice.\n+        match self.relate_with_variance(ty::Variance::Invariant, a, b) {\n+            Ok(_) => Ok(a.clone()),\n+            Err(err) => {\n+                if !was_error {\n+                    Err(TypeError::OldStyleLUB(Box::new(err)))\n+                } else {\n+                    Err(err)\n+                }\n+            }\n+        }\n     }\n }\n "}, {"sha": "bb2df94edd4cddc15593c0a47cad5acf822d40a1", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/397973b601f6b9802a01542ff3d171785437d1e1/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/397973b601f6b9802a01542ff3d171785437d1e1/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=397973b601f6b9802a01542ff3d171785437d1e1", "patch": "@@ -15,6 +15,7 @@ use super::Subtype;\n \n use traits::ObligationCause;\n use ty::{self, Ty, TyCtxt};\n+use ty::error::TypeError;\n use ty::relate::{Relate, RelateResult, TypeRelation};\n \n /// \"Least upper bound\" (common supertype)\n@@ -74,7 +75,29 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n                   -> RelateResult<'tcx, ty::Binder<T>>\n         where T: Relate<'tcx>\n     {\n-        self.fields.higher_ranked_lub(a, b, self.a_is_expected)\n+        let was_error = self.infcx().probe(|_snapshot| {\n+            // Subtle: use a fresh combine-fields here because we recover\n+            // from Err. Doing otherwise could propagate obligations out\n+            // through our `self.obligations` field.\n+            self.infcx()\n+                .combine_fields(self.fields.trace.clone(), self.fields.param_env)\n+                .higher_ranked_lub(a, b, self.a_is_expected)\n+                .is_err()\n+        });\n+\n+        // When higher-ranked types are involved, computing the LUB is\n+        // very challenging, switch to invariance. This is obviously\n+        // overly conservative but works ok in practice.\n+        match self.relate_with_variance(ty::Variance::Invariant, a, b) {\n+            Ok(_) => Ok(a.clone()),\n+            Err(err) => {\n+                if !was_error {\n+                    Err(TypeError::OldStyleLUB(Box::new(err)))\n+                } else {\n+                    Err(err)\n+                }\n+            }\n+        }\n     }\n }\n "}, {"sha": "afd1d04a870b7f6a7d484406e47af130f99eb767", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/397973b601f6b9802a01542ff3d171785437d1e1/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/397973b601f6b9802a01542ff3d171785437d1e1/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=397973b601f6b9802a01542ff3d171785437d1e1", "patch": "@@ -54,6 +54,8 @@ pub enum TypeError<'tcx> {\n     ProjectionBoundsLength(ExpectedFound<usize>),\n     TyParamDefaultMismatch(ExpectedFound<type_variable::Default<'tcx>>),\n     ExistentialMismatch(ExpectedFound<&'tcx ty::Slice<ty::ExistentialPredicate<'tcx>>>),\n+\n+    OldStyleLUB(Box<TypeError<'tcx>>),\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Debug, Copy)]\n@@ -170,6 +172,9 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                 report_maybe_different(f, format!(\"trait `{}`\", values.expected),\n                                        format!(\"trait `{}`\", values.found))\n             }\n+            OldStyleLUB(ref err) => {\n+                write!(f, \"{}\", err)\n+            }\n         }\n     }\n }"}, {"sha": "e5c24b4fcf92139bfc129928e65a3c28437adcb4", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/397973b601f6b9802a01542ff3d171785437d1e1/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/397973b601f6b9802a01542ff3d171785437d1e1/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=397973b601f6b9802a01542ff3d171785437d1e1", "patch": "@@ -428,7 +428,8 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             TyParamDefaultMismatch(ref x) => {\n                 return tcx.lift(x).map(TyParamDefaultMismatch)\n             }\n-            ExistentialMismatch(ref x) => return tcx.lift(x).map(ExistentialMismatch)\n+            ExistentialMismatch(ref x) => return tcx.lift(x).map(ExistentialMismatch),\n+            OldStyleLUB(ref x) => return tcx.lift(x).map(OldStyleLUB),\n         })\n     }\n }\n@@ -1174,6 +1175,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::error::TypeError<'tcx> {\n             Sorts(x) => Sorts(x.fold_with(folder)),\n             TyParamDefaultMismatch(ref x) => TyParamDefaultMismatch(x.fold_with(folder)),\n             ExistentialMismatch(x) => ExistentialMismatch(x.fold_with(folder)),\n+            OldStyleLUB(ref x) => OldStyleLUB(x.fold_with(folder)),\n         }\n     }\n \n@@ -1191,6 +1193,7 @@ impl<'tcx> TypeFoldable<'tcx> for ty::error::TypeError<'tcx> {\n                 b.visit_with(visitor)\n             },\n             Sorts(x) => x.visit_with(visitor),\n+            OldStyleLUB(ref x) => x.visit_with(visitor),\n             TyParamDefaultMismatch(ref x) => x.visit_with(visitor),\n             ExistentialMismatch(x) => x.visit_with(visitor),\n             Mismatch |"}, {"sha": "6b9bd67f9a5a4a0d7617dfe9c0b2441662e31159", "filename": "src/test/run-pass/lub-glb-with-unbound-infer-var.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/397973b601f6b9802a01542ff3d171785437d1e1/src%2Ftest%2Frun-pass%2Flub-glb-with-unbound-infer-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/397973b601f6b9802a01542ff3d171785437d1e1/src%2Ftest%2Frun-pass%2Flub-glb-with-unbound-infer-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flub-glb-with-unbound-infer-var.rs?ref=397973b601f6b9802a01542ff3d171785437d1e1", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test for a specific corner case: when we compute the LUB of two fn\n+// types and their parameters have unbound variables. In that case, we\n+// wind up relating those two variables. This was causing an ICE in an\n+// in-progress PR.\n+\n+fn main() {\n+    let a_f: fn(_) = |_| ();\n+    let b_f: fn(_) = |_| ();\n+    let c_f = match 22 {\n+        0 => a_f,\n+        _ => b_f,\n+    };\n+    c_f(4);\n+}"}]}