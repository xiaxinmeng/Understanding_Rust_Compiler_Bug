{"sha": "c3417b88aa20f835a5c19dc5d8539eb33f2802b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzNDE3Yjg4YWEyMGY4MzVhNWMxOWRjNWQ4NTM5ZWIzM2YyODAyYjk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-25T08:03:53Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-25T08:06:38Z"}, "message": "syntax: Fix #6416 by aborting on errors after test parse.", "tree": {"sha": "08641847ed5df67feeed74859c37e41dae54025e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08641847ed5df67feeed74859c37e41dae54025e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3417b88aa20f835a5c19dc5d8539eb33f2802b9", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3417b88aa20f835a5c19dc5d8539eb33f2802b9", "html_url": "https://github.com/rust-lang/rust/commit/c3417b88aa20f835a5c19dc5d8539eb33f2802b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3417b88aa20f835a5c19dc5d8539eb33f2802b9/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba9c3ebc02716252cf46944e4dd3a866cc51947c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9c3ebc02716252cf46944e4dd3a866cc51947c", "html_url": "https://github.com/rust-lang/rust/commit/ba9c3ebc02716252cf46944e4dd3a866cc51947c"}], "stats": {"total": 33, "additions": 24, "deletions": 9}, "files": [{"sha": "5cdf0ec1acc7101b2ce0126eecaf801dd1dc526f", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3417b88aa20f835a5c19dc5d8539eb33f2802b9/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3417b88aa20f835a5c19dc5d8539eb33f2802b9/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=c3417b88aa20f835a5c19dc5d8539eb33f2802b9", "patch": "@@ -384,12 +384,10 @@ mod test {\n                               span:sp(0,6)})\n     }\n \n-    // FIXME (#6416): For some reason, this fails and causes a test failure, even though it's\n-    // marked as `#[should_fail]`.\n-    /*#[should_fail]\n+    #[should_fail]\n     #[test] fn bad_path_expr_1() {\n         string_to_expr(@\"::abc::def::return\");\n-    }*/\n+    }\n \n     #[test] fn string_to_tts_1 () {\n         let (tts,_ps) = string_to_tts_and_sess(@\"fn a (b : int) { b; }\");"}, {"sha": "9d286f1759effb0ba54086bb48fd41ec498833ac", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c3417b88aa20f835a5c19dc5d8539eb33f2802b9/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3417b88aa20f835a5c19dc5d8539eb33f2802b9/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=c3417b88aa20f835a5c19dc5d8539eb33f2802b9", "patch": "@@ -33,29 +33,46 @@ pub fn string_to_parser(source_str: @str) -> Parser {\n     p\n }\n \n+fn with_error_checking_parse<T>(s: @str, f: &fn(&mut Parser) -> T) -> T {\n+    let mut p = string_to_parser(s);\n+    let x = f(&mut p);\n+    p.abort_if_errors();\n+    x\n+}\n+\n pub fn string_to_crate (source_str : @str) -> @ast::Crate {\n-    string_to_parser(source_str).parse_crate_mod()\n+    do with_error_checking_parse(source_str) |p| {\n+        p.parse_crate_mod()\n+    }\n }\n \n // parse a string, return an expr\n pub fn string_to_expr (source_str : @str) -> @ast::expr {\n-    string_to_parser(source_str).parse_expr()\n+    do with_error_checking_parse(source_str) |p| {\n+        p.parse_expr()\n+    }\n }\n \n // parse a string, return an item\n pub fn string_to_item (source_str : @str) -> Option<@ast::item> {\n-    string_to_parser(source_str).parse_item(~[])\n+    do with_error_checking_parse(source_str) |p| {\n+        p.parse_item(~[])\n+    }\n }\n \n // parse a string, return an item and the ParseSess\n pub fn string_to_item_and_sess (source_str : @str) -> (Option<@ast::item>,@mut ParseSess) {\n     let (p,ps) = string_to_parser_and_sess(source_str);\n-    (p.parse_item(~[]),ps)\n+    let io = p.parse_item(~[]);\n+    p.abort_if_errors();\n+    (io,ps)\n }\n \n // parse a string, return a stmt\n pub fn string_to_stmt(source_str : @str) -> @ast::stmt {\n-    string_to_parser(source_str).parse_stmt(~[])\n+    do with_error_checking_parse(source_str) |p| {\n+        p.parse_stmt(~[])\n+    }\n }\n \n // parse a string, return a pat. Uses \"irrefutable\"... which doesn't"}]}