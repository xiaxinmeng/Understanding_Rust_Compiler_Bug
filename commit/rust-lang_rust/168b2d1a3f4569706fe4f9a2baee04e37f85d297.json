{"sha": "168b2d1a3f4569706fe4f9a2baee04e37f85d297", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2OGIyZDFhM2Y0NTY5NzA2ZmU0ZjlhMmJhZWUwNGUzN2Y4NWQyOTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-14T21:36:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-14T21:36:54Z"}, "message": "auto merge of #13496 : alexcrichton/rust/issue-13495, r=sfackler\n\nThis bug was introduced in #13384 by accident, and this commit continues the\r\nwork of #13384 by finishing support for loading a syntax extension crate without\r\nregistering it with the local cstore.\r\n\r\nCloses #13495", "tree": {"sha": "254770da00e77a681fdbf3d2c05c732e4449d45f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/254770da00e77a681fdbf3d2c05c732e4449d45f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/168b2d1a3f4569706fe4f9a2baee04e37f85d297", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/168b2d1a3f4569706fe4f9a2baee04e37f85d297", "html_url": "https://github.com/rust-lang/rust/commit/168b2d1a3f4569706fe4f9a2baee04e37f85d297", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/168b2d1a3f4569706fe4f9a2baee04e37f85d297/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "246ebd2d5aebc68a581c33c33cbce5f2bc7dc7d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/246ebd2d5aebc68a581c33c33cbce5f2bc7dc7d6", "html_url": "https://github.com/rust-lang/rust/commit/246ebd2d5aebc68a581c33c33cbce5f2bc7dc7d6"}, {"sha": "e163ab215105753fd4e9b60a3786ff4636a0c3ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/e163ab215105753fd4e9b60a3786ff4636a0c3ff", "html_url": "https://github.com/rust-lang/rust/commit/e163ab215105753fd4e9b60a3786ff4636a0c3ff"}], "stats": {"total": 78, "additions": 53, "deletions": 25}, "files": [{"sha": "4fc7239e63b186f53bfed4d909977f0be062a0ea", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=168b2d1a3f4569706fe4f9a2baee04e37f85d297", "patch": "@@ -310,10 +310,10 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n     time(time_passes, \"looking for entry point\", (),\n          |_| middle::entry::find_entry_point(&sess, krate, &ast_map));\n \n-    *sess.macro_registrar_fn.borrow_mut() =\n+    sess.macro_registrar_fn.set(\n         time(time_passes, \"looking for macro registrar\", (), |_|\n             syntax::ext::registrar::find_macro_registrar(\n-                sess.diagnostic(), krate));\n+                sess.diagnostic(), krate)));\n \n     let freevars = time(time_passes, \"freevar finding\", (), |_|\n                         freevars::annotate_freevars(def_map, krate));\n@@ -1054,7 +1054,7 @@ pub fn build_session_(sopts: session::Options,\n         // For a library crate, this is always none\n         entry_fn: RefCell::new(None),\n         entry_type: Cell::new(None),\n-        macro_registrar_fn: RefCell::new(None),\n+        macro_registrar_fn: Cell::new(None),\n         default_sysroot: default_sysroot,\n         building_library: Cell::new(false),\n         local_crate_source_file: local_crate_source_file,"}, {"sha": "5d3069bbf3e2ec9e625b4969d00c4bd2be370673", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=168b2d1a3f4569706fe4f9a2baee04e37f85d297", "patch": "@@ -181,7 +181,7 @@ pub struct Session {\n     // For a library crate, this is always none\n     pub entry_fn: RefCell<Option<(NodeId, codemap::Span)>>,\n     pub entry_type: Cell<Option<EntryFnType>>,\n-    pub macro_registrar_fn: RefCell<Option<ast::DefId>>,\n+    pub macro_registrar_fn: Cell<Option<ast::NodeId>>,\n     pub default_sysroot: Option<Path>,\n     pub building_library: Cell<bool>,\n     // The name of the root source file of the crate, in the local file system. The path is always"}, {"sha": "e6b7049f4f8fa74ede7dd0e198b5842d847875dd", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=168b2d1a3f4569706fe4f9a2baee04e37f85d297", "patch": "@@ -16,7 +16,6 @@ use back::link;\n use back::svh::Svh;\n use driver::{driver, session};\n use driver::session::Session;\n-use metadata::csearch;\n use metadata::cstore;\n use metadata::cstore::CStore;\n use metadata::decoder;\n@@ -397,13 +396,14 @@ impl<'a> Loader<'a> {\n impl<'a> CrateLoader for Loader<'a> {\n     fn load_crate(&mut self, krate: &ast::ViewItem) -> MacroCrate {\n         let info = extract_crate_info(&self.env, krate).unwrap();\n-        let (cnum, data, library) = resolve_crate(&mut self.env, &None,\n-                                                  info.ident, &info.crate_id,\n-                                                  None, true, krate.span);\n+        let (_, data, library) = resolve_crate(&mut self.env, &None,\n+                                               info.ident, &info.crate_id,\n+                                               None, info.should_link,\n+                                               krate.span);\n         let macros = decoder::get_exported_macros(data);\n-        let cstore = &self.env.sess.cstore;\n-        let registrar = csearch::get_macro_registrar_fn(cstore, cnum)\n-                            .map(|did| csearch::get_symbol(cstore, did));\n+        let registrar = decoder::get_macro_registrar_fn(data).map(|id| {\n+            decoder::get_symbol(data.data.as_slice(), id)\n+        });\n         MacroCrate {\n             lib: library.dylib,\n             macros: macros.move_iter().collect(),"}, {"sha": "f02f9c6158227121ba934e2888d74d5b8650c728", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=168b2d1a3f4569706fe4f9a2baee04e37f85d297", "patch": "@@ -279,7 +279,7 @@ pub fn get_trait_of_method(cstore: &cstore::CStore,\n \n pub fn get_macro_registrar_fn(cstore: &cstore::CStore,\n                               crate_num: ast::CrateNum)\n-                              -> Option<ast::DefId> {\n+                              -> Option<ast::NodeId> {\n     let cdata = cstore.get_crate_data(crate_num);\n     decoder::get_macro_registrar_fn(cdata)\n }"}, {"sha": "5fe59a787737aea37253e839f1c1065e25579bc1", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=168b2d1a3f4569706fe4f9a2baee04e37f85d297", "patch": "@@ -1235,9 +1235,9 @@ pub fn get_native_libraries(cdata: Cmd) -> Vec<(cstore::NativeLibaryKind, ~str)>\n     return result;\n }\n \n-pub fn get_macro_registrar_fn(cdata: Cmd) -> Option<ast::DefId> {\n+pub fn get_macro_registrar_fn(cdata: Cmd) -> Option<ast::NodeId> {\n     reader::maybe_get_doc(reader::Doc(cdata.data()), tag_macro_registrar_fn)\n-        .map(|doc| item_def_id(doc, cdata))\n+        .map(|doc| FromPrimitive::from_u32(reader::doc_as_u32(doc)).unwrap())\n }\n \n pub fn get_exported_macros(cdata: Cmd) -> Vec<~str> {"}, {"sha": "d5313eb2578108a521e0aa1266323aa207ad403b", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=168b2d1a3f4569706fe4f9a2baee04e37f85d297", "patch": "@@ -1565,12 +1565,8 @@ fn encode_native_libraries(ecx: &EncodeContext, ebml_w: &mut Encoder) {\n }\n \n fn encode_macro_registrar_fn(ecx: &EncodeContext, ebml_w: &mut Encoder) {\n-    match *ecx.tcx.sess.macro_registrar_fn.borrow() {\n-        Some(did) => {\n-            ebml_w.start_tag(tag_macro_registrar_fn);\n-            encode_def_id(ebml_w, did);\n-            ebml_w.end_tag();\n-        }\n+    match ecx.tcx.sess.macro_registrar_fn.get() {\n+        Some(id) => { ebml_w.wr_tagged_u32(tag_macro_registrar_fn, id); }\n         None => {}\n     }\n }"}, {"sha": "b76708147e1b2224337d8dbeba887dcc92062981", "filename": "src/libsyntax/ext/registrar.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Flibsyntax%2Fext%2Fregistrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Flibsyntax%2Fext%2Fregistrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fregistrar.rs?ref=168b2d1a3f4569706fe4f9a2baee04e37f85d297", "patch": "@@ -36,18 +36,15 @@ impl Visitor<()> for MacroRegistrarContext {\n }\n \n pub fn find_macro_registrar(diagnostic: &diagnostic::SpanHandler,\n-                            krate: &ast::Crate) -> Option<ast::DefId> {\n+                            krate: &ast::Crate) -> Option<ast::NodeId> {\n     let mut ctx = MacroRegistrarContext { registrars: Vec::new() };\n     visit::walk_crate(&mut ctx, krate, ());\n \n     match ctx.registrars.len() {\n         0 => None,\n         1 => {\n             let (node_id, _) = ctx.registrars.pop().unwrap();\n-            Some(ast::DefId {\n-                krate: ast::LOCAL_CRATE,\n-                node: node_id\n-            })\n+            Some(node_id)\n         },\n         _ => {\n             diagnostic.handler().err(\"multiple macro registration functions found\");"}, {"sha": "4652556d34401e0378d40f530b396b0d2dac7177", "filename": "src/test/run-make/lto-syntax-extension/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Ftest%2Frun-make%2Flto-syntax-extension%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Ftest%2Frun-make%2Flto-syntax-extension%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-syntax-extension%2FMakefile?ref=168b2d1a3f4569706fe4f9a2baee04e37f85d297", "patch": "@@ -0,0 +1,6 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) lib.rs\n+\t$(RUSTC) main.rs -Z lto\n+\t$(call RUN,main)"}, {"sha": "fbe967786e25ecb61c99a398e60a81ef37134689", "filename": "src/test/run-make/lto-syntax-extension/lib.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Ftest%2Frun-make%2Flto-syntax-extension%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Ftest%2Frun-make%2Flto-syntax-extension%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-syntax-extension%2Flib.rs?ref=168b2d1a3f4569706fe4f9a2baee04e37f85d297", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[crate_type = \"rlib\"];"}, {"sha": "0c55d5fd3144d9e4f3a1fb9657cd0e563d6a2edf", "filename": "src/test/run-make/lto-syntax-extension/main.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Ftest%2Frun-make%2Flto-syntax-extension%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168b2d1a3f4569706fe4f9a2baee04e37f85d297/src%2Ftest%2Frun-make%2Flto-syntax-extension%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flto-syntax-extension%2Fmain.rs?ref=168b2d1a3f4569706fe4f9a2baee04e37f85d297", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(phase)]\n+\n+extern crate lib;\n+#[phase(syntax)] extern crate fourcc;\n+\n+fn main() {\n+    fourcc!(\"1234\");\n+}"}]}