{"sha": "edec83835aed689a9f5c6ab50d3eb5491007de25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZWM4MzgzNWFlZDY4OWE5ZjVjNmFiNTBkM2ViNTQ5MTAwN2RlMjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-13T04:26:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-13T04:26:53Z"}, "message": "Rollup merge of #57474 - emilio:save-analysis-path, r=nrc\n\nsave-analysis: Get path def from parent in case there's no def for the path itself.\n\nThis fixes #57462.\n\nThe relevant part from the hir type collector is:\n\n```\nDEBUG 2019-01-09T15:42:58Z: rustc::hir::map::collector: hir_map: NodeId(32) => Entry { parent: NodeId(33), dep_node: 4294967040, node: Expr(expr(32: <Foo>::new)) }\nDEBUG 2019-01-09T15:42:58Z: rustc::hir::map::collector: hir_map: NodeId(48) => Entry { parent: NodeId(32), dep_node: 4294967040, node: Ty(type(Foo)) }\nDEBUG 2019-01-09T15:42:58Z: rustc::hir::map::collector: hir_map: NodeId(30) => Entry { parent: NodeId(48), dep_node: 4294967040, node: PathSegment(PathSegment { ident: Foo#0, id: Some(NodeId(30)), def: Some(Err), args: None, infer_types: true }) }\nDEBUG 2019-01-09T15:42:58Z: rustc::hir::map::collector: hir_map: NodeId(31) => Entry { parent: NodeId(32), dep_node: 4294967040, node: PathSegment(PathSegment { ident: new#0, id: Some(NodeId(31)), def: Some(Err), args: None, infer_types: true }) }\n```\n\nWe have the right ID when looking for NodeId(31) and try with NodeId(32) (which\nis the right thing to look for) from get_path_data. But not when we look from `write_sub_paths_truncated`\n\nBasically process_path takes an id which is always the parent, and that we\nfall back to in get_path_data(), so we get the right result for the last path\nsegment, but not for the other segments that get written to from\nwrite_sub_paths_truncated.\n\nI think we can stop passing the explicit `id` around to get_path_data as a followup.", "tree": {"sha": "c5f466100926ade0fdf9c388de267eb7b6572f91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5f466100926ade0fdf9c388de267eb7b6572f91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edec83835aed689a9f5c6ab50d3eb5491007de25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcOr4NCRBK7hj4Ov3rIwAAdHIIACj5QTIcDDgrAWlt0Gaw6EHu\nwBGB4RyPqjv+/vhI7oqlQvyyWnJM5If0tIz5Ax3wD27FQJm7gagvtRnyYyTZBDGk\n8AsCzopgEIYoItARI4HDXbJfR22Qufs61CJWNdOJ5z7HmG5QlmcvblMsx4gslLeX\nk+4xRAyzdAgtteYB3+gnui6NFaWjV+C47aZqdzgdXdcSWfHmjStIMWKGNk2q+/oq\nb0Pzxk2O5YP0/HBREYH+zJZZ46ix+OaJyFV/jyrG4PBTnkCgv7T5/r6yIOXd+iyG\nJIwYUNsZ331RWNzF2z5VsZ3jObDU+yQL/IdhNkI/XdrkUPdQd2YyKn83yWW/Xh0=\n=BPUp\n-----END PGP SIGNATURE-----\n", "payload": "tree c5f466100926ade0fdf9c388de267eb7b6572f91\nparent b3290fd14ce4d15ccd6e4719af5d98552cb85efd\nparent c47ed149b2efe537822632c11d0675bdfb3d790c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547353613 +0100\ncommitter GitHub <noreply@github.com> 1547353613 +0100\n\nRollup merge of #57474 - emilio:save-analysis-path, r=nrc\n\nsave-analysis: Get path def from parent in case there's no def for the path itself.\n\nThis fixes #57462.\n\nThe relevant part from the hir type collector is:\n\n```\nDEBUG 2019-01-09T15:42:58Z: rustc::hir::map::collector: hir_map: NodeId(32) => Entry { parent: NodeId(33), dep_node: 4294967040, node: Expr(expr(32: <Foo>::new)) }\nDEBUG 2019-01-09T15:42:58Z: rustc::hir::map::collector: hir_map: NodeId(48) => Entry { parent: NodeId(32), dep_node: 4294967040, node: Ty(type(Foo)) }\nDEBUG 2019-01-09T15:42:58Z: rustc::hir::map::collector: hir_map: NodeId(30) => Entry { parent: NodeId(48), dep_node: 4294967040, node: PathSegment(PathSegment { ident: Foo#0, id: Some(NodeId(30)), def: Some(Err), args: None, infer_types: true }) }\nDEBUG 2019-01-09T15:42:58Z: rustc::hir::map::collector: hir_map: NodeId(31) => Entry { parent: NodeId(32), dep_node: 4294967040, node: PathSegment(PathSegment { ident: new#0, id: Some(NodeId(31)), def: Some(Err), args: None, infer_types: true }) }\n```\n\nWe have the right ID when looking for NodeId(31) and try with NodeId(32) (which\nis the right thing to look for) from get_path_data. But not when we look from `write_sub_paths_truncated`\n\nBasically process_path takes an id which is always the parent, and that we\nfall back to in get_path_data(), so we get the right result for the last path\nsegment, but not for the other segments that get written to from\nwrite_sub_paths_truncated.\n\nI think we can stop passing the explicit `id` around to get_path_data as a followup.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edec83835aed689a9f5c6ab50d3eb5491007de25", "html_url": "https://github.com/rust-lang/rust/commit/edec83835aed689a9f5c6ab50d3eb5491007de25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edec83835aed689a9f5c6ab50d3eb5491007de25/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3290fd14ce4d15ccd6e4719af5d98552cb85efd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3290fd14ce4d15ccd6e4719af5d98552cb85efd", "html_url": "https://github.com/rust-lang/rust/commit/b3290fd14ce4d15ccd6e4719af5d98552cb85efd"}, {"sha": "c47ed149b2efe537822632c11d0675bdfb3d790c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c47ed149b2efe537822632c11d0675bdfb3d790c", "html_url": "https://github.com/rust-lang/rust/commit/c47ed149b2efe537822632c11d0675bdfb3d790c"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "132bd4f1430a061803e8c0133963af39fe79747a", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edec83835aed689a9f5c6ab50d3eb5491007de25/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edec83835aed689a9f5c6ab50d3eb5491007de25/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=edec83835aed689a9f5c6ab50d3eb5491007de25", "patch": "@@ -625,9 +625,11 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             Node::Visibility(&Spanned {\n                 node: hir::VisibilityKind::Restricted { ref path, .. }, .. }) => path.def,\n \n-            Node::PathSegment(seg) => match seg.def {\n-                Some(def) => def,\n-                None => HirDef::Err,\n+            Node::PathSegment(seg) => {\n+                match seg.def {\n+                    Some(def) if def != HirDef::Err => def,\n+                    _ => self.get_path_def(self.tcx.hir().get_parent_node(id)),\n+                }\n             },\n             Node::Expr(&hir::Expr {\n                 node: hir::ExprKind::Struct(ref qpath, ..),"}]}