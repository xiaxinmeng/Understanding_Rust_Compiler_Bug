{"sha": "b248ee8746c4c016dd3001e59086f2c2f868f07e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNDhlZTg3NDZjNGMwMTZkZDMwMDFlNTkwODZmMmMyZjg2OGYwN2U=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-05T06:46:09Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-05-14T03:28:01Z"}, "message": "Use the new-style API for external crate listings", "tree": {"sha": "c4d6b572841d35eae038583e507c7ced031cde42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4d6b572841d35eae038583e507c7ced031cde42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b248ee8746c4c016dd3001e59086f2c2f868f07e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b248ee8746c4c016dd3001e59086f2c2f868f07e", "html_url": "https://github.com/rust-lang/rust/commit/b248ee8746c4c016dd3001e59086f2c2f868f07e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b248ee8746c4c016dd3001e59086f2c2f868f07e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f9b04bf9e14bb8cb718e5dd9564ac0b698a8395", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f9b04bf9e14bb8cb718e5dd9564ac0b698a8395", "html_url": "https://github.com/rust-lang/rust/commit/4f9b04bf9e14bb8cb718e5dd9564ac0b698a8395"}], "stats": {"total": 60, "additions": 45, "deletions": 15}, "files": [{"sha": "bfd5a618769ae85e2bd304e675495459f8deafbd", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b248ee8746c4c016dd3001e59086f2c2f868f07e/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b248ee8746c4c016dd3001e59086f2c2f868f07e/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=b248ee8746c4c016dd3001e59086f2c2f868f07e", "patch": "@@ -27,7 +27,7 @@\n //! the format of the output away from extracting it from the compiler.\n //! DumpCsvVisitor walks the AST and processes it.\n \n-use super::{escape, generated_code, recorder};\n+use super::{escape, generated_code, recorder, SaveContext};\n \n use session::Session;\n \n@@ -55,6 +55,7 @@ use util::ppaux;\n \n \n pub struct DumpCsvVisitor<'l, 'tcx: 'l> {\n+    save_ctxt: SaveContext<'l>,\n     sess: &'l Session,\n     analysis: &'l ty::CrateAnalysis<'tcx>,\n \n@@ -68,20 +69,12 @@ pub struct DumpCsvVisitor<'l, 'tcx: 'l> {\n }\n \n impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n-    fn nest<F>(&mut self, scope_id: NodeId, f: F) where\n-        F: FnOnce(&mut DumpCsvVisitor<'l, 'tcx>),\n-    {\n-        let parent_scope = self.cur_scope;\n-        self.cur_scope = scope_id;\n-        f(self);\n-        self.cur_scope = parent_scope;\n-    }\n-\n     pub fn new(sess: &'l Session,\n                analysis: &'l ty::CrateAnalysis<'tcx>,\n                output_file: Box<File>) -> DumpCsvVisitor<'l, 'tcx> {\n         DumpCsvVisitor {\n             sess: sess,\n+            save_ctxt: SaveContext { sess: sess },\n             analysis: analysis,\n             collected_paths: vec![],\n             collecting: false,\n@@ -101,14 +94,23 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         }\n     }\n \n+    fn nest<F>(&mut self, scope_id: NodeId, f: F) where\n+        F: FnOnce(&mut DumpCsvVisitor<'l, 'tcx>),\n+    {\n+        let parent_scope = self.cur_scope;\n+        self.cur_scope = scope_id;\n+        f(self);\n+        self.cur_scope = parent_scope;\n+    }\n+\n     pub fn dump_crate_info(&mut self, name: &str, krate: &ast::Crate) {\n-        // the current crate\n+        // The current crate.\n         self.fmt.crate_str(krate.span, name);\n \n-        // dump info about all the external crates referenced from this crate\n-        self.sess.cstore.iter_crate_data(|n, cmd| {\n-            self.fmt.external_crate_str(krate.span, &cmd.name, n);\n-        });\n+        // Dump info about all the external crates referenced from this crate.\n+        for c in &self.save_ctxt.get_external_crates() {\n+            self.fmt.external_crate_str(krate.span, &c.name, c.number);            \n+        }\n         self.fmt.recorder.record(\"end_external_crates\\n\");\n     }\n "}, {"sha": "260879ed324ea498113a4b662da6011d2991ee64", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b248ee8746c4c016dd3001e59086f2c2f868f07e/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b248ee8746c4c016dd3001e59086f2c2f868f07e/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=b248ee8746c4c016dd3001e59086f2c2f868f07e", "patch": "@@ -23,6 +23,34 @@ mod recorder;\n \n mod dump_csv;\n \n+pub struct SaveContext<'l> {\n+    sess: &'l Session,\n+}\n+\n+pub struct CrateData {\n+    pub name: String,\n+    pub number: u32,\n+}\n+\n+impl<'l> SaveContext<'l> {\n+    pub fn new<'ll>(sess: &'ll Session) -> SaveContext<'ll> {\n+        SaveContext {\n+            sess: sess\n+        }\n+    }\n+\n+    // List external crates used by the current crate.\n+    pub fn get_external_crates(&self) -> Vec<CrateData> {\n+        let mut result = Vec::new();\n+\n+        self.sess.cstore.iter_crate_data(|n, cmd| {\n+            result.push(CrateData { name: cmd.name.clone(), number: n });\n+        });\n+\n+        result\n+    }\n+}\n+\n #[allow(deprecated)]\n pub fn process_crate(sess: &Session,\n                      krate: &ast::Crate,"}]}