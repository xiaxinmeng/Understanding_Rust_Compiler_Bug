{"sha": "e42afd3129e502f219479916f5705c784330597f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MmFmZDMxMjllNTAyZjIxOTQ3OTkxNmY1NzA1Yzc4NDMzMDU5N2Y=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-03-08T18:22:48Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-03-10T01:40:59Z"}, "message": "Let const_deref \"dereference\" newtypes.", "tree": {"sha": "b86617b596c1f3e364125f1aec96451d976f0186", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b86617b596c1f3e364125f1aec96451d976f0186"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e42afd3129e502f219479916f5705c784330597f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e42afd3129e502f219479916f5705c784330597f", "html_url": "https://github.com/rust-lang/rust/commit/e42afd3129e502f219479916f5705c784330597f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e42afd3129e502f219479916f5705c784330597f/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ca1d353de16883a29732427b902501b7674fbe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca1d353de16883a29732427b902501b7674fbe5", "html_url": "https://github.com/rust-lang/rust/commit/5ca1d353de16883a29732427b902501b7674fbe5"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "b390be59f90002d09d59271a002eeeffdefd6995", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 47, "deletions": 10, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e42afd3129e502f219479916f5705c784330597f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e42afd3129e502f219479916f5705c784330597f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=e42afd3129e502f219479916f5705c784330597f", "patch": "@@ -106,15 +106,46 @@ fn const_addr_of(cx: @CrateContext, cv: ValueRef) -> ValueRef {\n     }\n }\n \n-pub fn const_deref(cx: @CrateContext, v: ValueRef) -> ValueRef {\n+fn const_deref_ptr(cx: @CrateContext, v: ValueRef) -> ValueRef {\n+    let v = match cx.const_globals.find(&(v as int)) {\n+        Some(v) => v,\n+        None => v\n+    };\n     unsafe {\n-        let v = match cx.const_globals.find(&(v as int)) {\n-            Some(v) => v,\n-            None => v\n-        };\n         fail_unless!(llvm::LLVMIsGlobalConstant(v) == True);\n-        let v = llvm::LLVMGetInitializer(v);\n-        v\n+        llvm::LLVMGetInitializer(v)\n+    }\n+}\n+\n+fn const_deref_newtype(cx: @CrateContext, v: ValueRef, t: ty::t)\n+    -> ValueRef {\n+    let repr = adt::represent_type(cx, t);\n+    adt::const_get_field(cx, repr, v, 0, 0)\n+}\n+\n+fn const_deref(cx: @CrateContext, v: ValueRef, t: ty::t, explicit: bool)\n+    -> (ValueRef, ty::t) {\n+    match ty::deref(cx.tcx, t, explicit) {\n+        Some(ref mt) => {\n+            fail_unless!(mt.mutbl != ast::m_mutbl);\n+            let dv = match ty::get(t).sty {\n+                ty::ty_ptr(*) | ty::ty_rptr(*) => {\n+                     const_deref_ptr(cx, v)\n+                }\n+                ty::ty_enum(*) | ty::ty_struct(*) => {\n+                    const_deref_newtype(cx, v, t)\n+                }\n+                _ => {\n+                    cx.sess.bug(fmt!(\"Unexpected dereferenceable type %s\",\n+                                     ty_to_str(cx.tcx, t)))\n+                }\n+            };\n+            (dv, mt.ty)\n+        }\n+        None => {\n+            cx.sess.bug(fmt!(\"Can't dereference const of type %s\",\n+                             ty_to_str(cx.tcx, t)))\n+        }\n     }\n }\n \n@@ -150,8 +181,11 @@ pub fn const_expr(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n                                            region %? sigil %?\", *r, *s))\n         }\n         Some(@ty::AutoDerefRef(ref adj)) => {\n+            let mut ty = ety;\n             for adj.autoderefs.times {\n-                llconst = const_deref(cx, llconst)\n+                let (dv, dt) = const_deref(cx, llconst, ty, false);\n+                llconst = dv;\n+                ty = dt;\n             }\n \n             match adj.autoref {\n@@ -263,7 +297,10 @@ fn const_expr_unadjusted(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n             return match u {\n               ast::box(_)  |\n               ast::uniq(_) |\n-              ast::deref  => const_deref(cx, te),\n+              ast::deref  => {\n+                let (dv, _dt) = const_deref(cx, te, ty, true);\n+                dv\n+              }\n               ast::not    => {\n                 match ty::get(ty).sty {\n                     ty::ty_bool => {\n@@ -313,7 +350,7 @@ fn const_expr_unadjusted(cx: @CrateContext, e: @ast::expr) -> ValueRef {\n                           let llunitty = type_of::type_of(cx, unit_ty);\n                           let unit_sz = machine::llsize_of(cx, llunitty);\n \n-                          (const_deref(cx, const_get_elt(cx, bv, [0])),\n+                          (const_deref_ptr(cx, const_get_elt(cx, bv, [0])),\n                            llvm::LLVMConstUDiv(const_get_elt(cx, bv, [1]),\n                                                unit_sz))\n                       },"}]}