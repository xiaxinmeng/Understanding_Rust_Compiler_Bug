{"sha": "1318e53ea8a8ed6da271d6130dab71131542ab98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMThlNTNlYThhOGVkNmRhMjcxZDYxMzBkYWI3MTEzMTU0MmFiOTg=", "commit": {"author": {"name": "Wesley Norris", "email": "repnop@outlook.com", "date": "2018-12-08T19:17:50Z"}, "committer": {"name": "Wesley Norris", "email": "repnop@outlook.com", "date": "2019-01-17T22:26:00Z"}, "message": "Persist doc test executables to given path.", "tree": {"sha": "01efe18de83a90b0deedd163aadff9d281d09f10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01efe18de83a90b0deedd163aadff9d281d09f10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1318e53ea8a8ed6da271d6130dab71131542ab98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1318e53ea8a8ed6da271d6130dab71131542ab98", "html_url": "https://github.com/rust-lang/rust/commit/1318e53ea8a8ed6da271d6130dab71131542ab98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1318e53ea8a8ed6da271d6130dab71131542ab98/comments", "author": {"login": "repnop", "id": 24203105, "node_id": "MDQ6VXNlcjI0MjAzMTA1", "avatar_url": "https://avatars.githubusercontent.com/u/24203105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/repnop", "html_url": "https://github.com/repnop", "followers_url": "https://api.github.com/users/repnop/followers", "following_url": "https://api.github.com/users/repnop/following{/other_user}", "gists_url": "https://api.github.com/users/repnop/gists{/gist_id}", "starred_url": "https://api.github.com/users/repnop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/repnop/subscriptions", "organizations_url": "https://api.github.com/users/repnop/orgs", "repos_url": "https://api.github.com/users/repnop/repos", "events_url": "https://api.github.com/users/repnop/events{/privacy}", "received_events_url": "https://api.github.com/users/repnop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "repnop", "id": 24203105, "node_id": "MDQ6VXNlcjI0MjAzMTA1", "avatar_url": "https://avatars.githubusercontent.com/u/24203105?v=4", "gravatar_id": "", "url": "https://api.github.com/users/repnop", "html_url": "https://github.com/repnop", "followers_url": "https://api.github.com/users/repnop/followers", "following_url": "https://api.github.com/users/repnop/following{/other_user}", "gists_url": "https://api.github.com/users/repnop/gists{/gist_id}", "starred_url": "https://api.github.com/users/repnop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/repnop/subscriptions", "organizations_url": "https://api.github.com/users/repnop/orgs", "repos_url": "https://api.github.com/users/repnop/repos", "events_url": "https://api.github.com/users/repnop/events{/privacy}", "received_events_url": "https://api.github.com/users/repnop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "html_url": "https://github.com/rust-lang/rust/commit/daa53a52a2667533d5fe59bfcc5b8614b79c3d31"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "279d3b921345ad91ad3776c0e15ae8fe2f879357", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1318e53ea8a8ed6da271d6130dab71131542ab98/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1318e53ea8a8ed6da271d6130dab71131542ab98/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=1318e53ea8a8ed6da271d6130dab71131542ab98", "patch": "@@ -68,6 +68,8 @@ pub struct Options {\n     pub should_test: bool,\n     /// List of arguments to pass to the test harness, if running tests.\n     pub test_args: Vec<String>,\n+    /// Whether to persist the doctest executables.\n+    pub persist_doctests: Option<PathBuf>,\n \n     // Options that affect the documentation process\n \n@@ -431,6 +433,7 @@ impl Options {\n         let enable_index_page = matches.opt_present(\"enable-index-page\") || index_page.is_some();\n         let static_root_path = matches.opt_str(\"static-root-path\");\n         let generate_search_filter = !matches.opt_present(\"disable-per-crate-search\");\n+        let persist_doctests = matches.opt_str(\"persist-doctests\").map(PathBuf::from);\n \n         let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n@@ -456,6 +459,7 @@ impl Options {\n             manual_passes,\n             display_warnings,\n             crate_version,\n+            persist_doctests,\n             render_options: RenderOptions {\n                 output,\n                 external_html,"}, {"sha": "7fe0999bdca5029ff98be5d4fd97d1ca8d781724", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1318e53ea8a8ed6da271d6130dab71131542ab98/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1318e53ea8a8ed6da271d6130dab71131542ab98/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=1318e53ea8a8ed6da271d6130dab71131542ab98", "patch": "@@ -340,6 +340,11 @@ fn opts() -> Vec<RustcOptGroup> {\n             o.optflag(\"\",\n                       \"disable-per-crate-search\",\n                       \"disables generating the crate selector on the search box\")\n+        unstable(\"persist-doctests\", |o| {\n+             o.optopt(\"\",\n+                       \"persist-doctests\",\n+                       \"Persists the rustdoc test executables\",\n+                       \"PATH\")\n         }),\n     ]\n }"}, {"sha": "65a96e9001b26f171c28a47503ba132f444ab999", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1318e53ea8a8ed6da271d6130dab71131542ab98/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1318e53ea8a8ed6da271d6130dab71131542ab98/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=1318e53ea8a8ed6da271d6130dab71131542ab98", "patch": "@@ -142,7 +142,7 @@ pub fn test(mut options: Options, diag: &errors::Handler) -> isize {\n                                        options.libs, options.codegen_options, options.externs,\n                                        true, opts, options.maybe_sysroot, None,\n                                        Some(options.input),\n-                                       options.linker, options.edition);\n+                                       options.linker, options.edition, options.persist_doctests);\n     collector.set_position(DUMMY_SP);\n     let codes = ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build());\n     let res = find_testable_code(&input_str, &mut collector, codes);"}, {"sha": "03b66759d40e1d9a26306044385ef20903465df0", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1318e53ea8a8ed6da271d6130dab71131542ab98/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1318e53ea8a8ed6da271d6130dab71131542ab98/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=1318e53ea8a8ed6da271d6130dab71131542ab98", "patch": "@@ -120,7 +120,8 @@ pub fn run(mut options: Options) -> isize {\n             Some(source_map),\n             None,\n             options.linker,\n-            options.edition\n+            options.edition,\n+            options.persist_doctests,\n         );\n \n         {\n@@ -184,7 +185,8 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n             cg: CodegenOptions, externs: Externs,\n             should_panic: bool, no_run: bool, as_test_harness: bool,\n             compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n-            maybe_sysroot: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition) {\n+            maybe_sysroot: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition,\n+            persist_doctests: Option<PathBuf>) {\n     // The test harness wants its own `main` and top-level functions, so\n     // never wrap the test in `fn main() { ... }`.\n     let (test, line_offset) = make_test(test, Some(cratename), as_test_harness, opts);\n@@ -249,6 +251,20 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n     let old = io::set_panic(Some(box Sink(data.clone())));\n     let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));\n \n+    enum DirState {\n+        Temp(tempfile::TempDir),\n+        Perm(PathBuf),\n+    }\n+\n+    impl DirState {\n+        fn path(&self) -> &std::path::Path {\n+            match self {\n+                DirState::Temp(t) => t.path(),\n+                DirState::Perm(p) => p.as_path(),\n+            }\n+        }\n+    }\n+\n     let (libdir, outdir, compile_result) = driver::spawn_thread_pool(sessopts, |sessopts| {\n         let source_map = Lrc::new(SourceMap::new(sessopts.file_path_mapping()));\n         let emitter = errors::emitter::EmitterWriter::new(box Sink(data.clone()),\n@@ -267,7 +283,17 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n         rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n         let outdir = Mutex::new(\n-            TempFileBuilder::new().prefix(\"rustdoctest\").tempdir().expect(\"rustdoc needs a tempdir\")\n+            if let Some(mut path) = persist_doctests {\n+                path.push(format!(\"{}_{}\", filename.to_string().rsplit('/').next().unwrap().replace(\".\", \"_\"), line));\n+                std::fs::create_dir_all(&path).expect(\"Couldn't create directory for doctest executables\");\n+\n+                DirState::Perm(path)\n+            } else {\n+                DirState::Temp(TempFileBuilder::new()\n+                                .prefix(\"rustdoctest\")\n+                                .tempdir()\n+                                .expect(\"rustdoc needs a tempdir\"))\n+            }\n         );\n         let libdir = sess.target_filesearch(PathKind::All).get_lib_path();\n         let mut control = driver::CompileController::basic();\n@@ -629,13 +655,15 @@ pub struct Collector {\n     filename: Option<PathBuf>,\n     linker: Option<PathBuf>,\n     edition: Edition,\n+    persist_doctests: Option<PathBuf>,\n }\n \n impl Collector {\n     pub fn new(cratename: String, cfgs: Vec<String>, libs: Vec<SearchPath>, cg: CodegenOptions,\n                externs: Externs, use_headers: bool, opts: TestOptions,\n                maybe_sysroot: Option<PathBuf>, source_map: Option<Lrc<SourceMap>>,\n-               filename: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition) -> Collector {\n+               filename: Option<PathBuf>, linker: Option<PathBuf>, edition: Edition,\n+               persist_doctests: Option<PathBuf>) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n@@ -652,6 +680,7 @@ impl Collector {\n             filename,\n             linker,\n             edition,\n+            persist_doctests,\n         }\n     }\n \n@@ -695,6 +724,8 @@ impl Tester for Collector {\n         let maybe_sysroot = self.maybe_sysroot.clone();\n         let linker = self.linker.clone();\n         let edition = config.edition.unwrap_or(self.edition);\n+        let persist_doctests = self.persist_doctests.clone();\n+\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n@@ -727,7 +758,8 @@ impl Tester for Collector {\n                                  &opts,\n                                  maybe_sysroot,\n                                  linker,\n-                                 edition)\n+                                 edition,\n+                                 persist_doctests)\n                     }))\n                 } {\n                     Ok(()) => (),"}]}