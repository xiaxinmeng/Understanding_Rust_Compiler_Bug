{"sha": "bcf992dc6c6e0e8ff81f46ed0925d274b3979251", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZjk5MmRjNmM2ZTBlOGZmODFmNDZlZDA5MjVkMjc0YjM5NzkyNTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-05T18:03:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-05T18:03:08Z"}, "message": "Rollup merge of #66710 - vorner:weak-into-raw-null-docs, r=dtolnay\n\nweak-into-raw: Clarify some details in Safety\n\nClarify it is OK to pass a pointer that never owned a weak count (one\nfrom Weak::new) back into it as it was created from it. Relates to\ndiscussion in #60728.\n\n@CAD97 Do you want to have a look at the new docs?", "tree": {"sha": "2a51d461bd33e528c463b197e2bb7424d6196b00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a51d461bd33e528c463b197e2bb7424d6196b00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcf992dc6c6e0e8ff81f46ed0925d274b3979251", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd6UZcCRBK7hj4Ov3rIwAAdHIIAGKPh1r89Mi6oaR4HsSEcK1S\nH2oJdfD2a72BYP2D5O+n8ji0eJkB9vXvirGJ2St/3uRrbZfq3GaW8HHhw3VNSU6z\nfQaJ7um12+/jMS5RJyf/qUzeJOJgwxBNv4v2H2CFwhCevSrRwD3ktScaQEsbowBb\npEMBUhDPaK8l2gwJdRnvy0Tt4u0TgDyUHfZJw4PkFba3VKifMRRqgjqKWbeO0kbe\nFpelESHFeBYY6/6vDrXFzhtqxrltMlynR33fW/gS1rcDen6WaYhxXhsSFQ6elLKi\nXKe4C9shxDw3WN68DmFYZ5G2IBQRyLxd2ix7o2Fd+D9sA4DUvTKbcEsz5ChMrNE=\n=De79\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a51d461bd33e528c463b197e2bb7424d6196b00\nparent a0312c156d8470179101ab71ef6a69c0b9a8dd0b\nparent 473151070bd939239aa8f9bf218e2753b8a479cf\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575568988 +0100\ncommitter GitHub <noreply@github.com> 1575568988 +0100\n\nRollup merge of #66710 - vorner:weak-into-raw-null-docs, r=dtolnay\n\nweak-into-raw: Clarify some details in Safety\n\nClarify it is OK to pass a pointer that never owned a weak count (one\nfrom Weak::new) back into it as it was created from it. Relates to\ndiscussion in #60728.\n\n@CAD97 Do you want to have a look at the new docs?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcf992dc6c6e0e8ff81f46ed0925d274b3979251", "html_url": "https://github.com/rust-lang/rust/commit/bcf992dc6c6e0e8ff81f46ed0925d274b3979251", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcf992dc6c6e0e8ff81f46ed0925d274b3979251/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0312c156d8470179101ab71ef6a69c0b9a8dd0b", "html_url": "https://github.com/rust-lang/rust/commit/a0312c156d8470179101ab71ef6a69c0b9a8dd0b"}, {"sha": "473151070bd939239aa8f9bf218e2753b8a479cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/473151070bd939239aa8f9bf218e2753b8a479cf", "html_url": "https://github.com/rust-lang/rust/commit/473151070bd939239aa8f9bf218e2753b8a479cf"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "1ff1c3c834f4ea4c10b3ed5133ec765601f040bf", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bcf992dc6c6e0e8ff81f46ed0925d274b3979251/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf992dc6c6e0e8ff81f46ed0925d274b3979251/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=bcf992dc6c6e0e8ff81f46ed0925d274b3979251", "patch": "@@ -1648,10 +1648,8 @@ impl<T> Weak<T> {\n \n     /// Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n     ///\n-    /// It is up to the caller to ensure that the object is still alive when accessing it through\n-    /// the pointer.\n-    ///\n-    /// The pointer may be [`null`] or be dangling in case the object has already been destroyed.\n+    /// The pointer is valid only if there are some strong references. The pointer may be dangling\n+    /// or even [`null`] otherwise.\n     ///\n     /// # Examples\n     ///\n@@ -1731,14 +1729,18 @@ impl<T> Weak<T> {\n     /// This can be used to safely get a strong reference (by calling [`upgrade`]\n     /// later) or to deallocate the weak count by dropping the `Weak<T>`.\n     ///\n-    /// It takes ownership of one weak count. In case a [`null`] is passed, a dangling [`Weak`] is\n-    /// returned.\n+    /// It takes ownership of one weak count (with the exception of pointers created by [`new`],\n+    /// as these don't have any corresponding weak count).\n     ///\n     /// # Safety\n     ///\n-    /// The pointer must represent one valid weak count. In other words, it must point to `T` which\n-    /// is or *was* managed by an [`Rc`] and the weak count of that [`Rc`] must not have reached\n-    /// 0. It is allowed for the strong count to be 0.\n+    /// The pointer must have originated from the [`into_raw`] (or [`as_raw`], provided there was\n+    /// a corresponding [`forget`] on the `Weak<T>`) and must still own its potential weak reference\n+    /// count.\n+    ///\n+    /// It is allowed for the strong count to be 0 at the time of calling this, but the weak count\n+    /// must be non-zero or the pointer must have originated from a dangling `Weak<T>` (one created\n+    /// by [`new`]).\n     ///\n     /// # Examples\n     ///\n@@ -1763,11 +1765,13 @@ impl<T> Weak<T> {\n     /// assert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n     /// ```\n     ///\n-    /// [`null`]: ../../std/ptr/fn.null.html\n     /// [`into_raw`]: struct.Weak.html#method.into_raw\n     /// [`upgrade`]: struct.Weak.html#method.upgrade\n     /// [`Rc`]: struct.Rc.html\n     /// [`Weak`]: struct.Weak.html\n+    /// [`as_raw`]: struct.Weak.html#method.as_raw\n+    /// [`new`]: struct.Weak.html#method.new\n+    /// [`forget`]: ../../std/mem/fn.forget.html\n     #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n         if ptr.is_null() {"}, {"sha": "19b0086fa333cc1a25005ff83c99b105c55232eb", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bcf992dc6c6e0e8ff81f46ed0925d274b3979251/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcf992dc6c6e0e8ff81f46ed0925d274b3979251/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=bcf992dc6c6e0e8ff81f46ed0925d274b3979251", "patch": "@@ -1324,10 +1324,8 @@ impl<T> Weak<T> {\n \n     /// Returns a raw pointer to the object `T` pointed to by this `Weak<T>`.\n     ///\n-    /// It is up to the caller to ensure that the object is still alive when accessing it through\n-    /// the pointer.\n-    ///\n-    /// The pointer may be [`null`] or be dangling in case the object has already been destroyed.\n+    /// The pointer is valid only if there are some strong references. The pointer may be dangling\n+    /// or even [`null`] otherwise.\n     ///\n     /// # Examples\n     ///\n@@ -1408,14 +1406,18 @@ impl<T> Weak<T> {\n     /// This can be used to safely get a strong reference (by calling [`upgrade`]\n     /// later) or to deallocate the weak count by dropping the `Weak<T>`.\n     ///\n-    /// It takes ownership of one weak count. In case a [`null`] is passed, a dangling [`Weak`] is\n-    /// returned.\n+    /// It takes ownership of one weak count (with the exception of pointers created by [`new`],\n+    /// as these don't have any corresponding weak count).\n     ///\n     /// # Safety\n     ///\n-    /// The pointer must represent one valid weak count. In other words, it must point to `T` which\n-    /// is or *was* managed by an [`Arc`] and the weak count of that [`Arc`] must not have reached\n-    /// 0. It is allowed for the strong count to be 0.\n+    /// The pointer must have originated from the [`into_raw`] (or [`as_raw'], provided there was\n+    /// a corresponding [`forget`] on the `Weak<T>`) and must still own its potential weak reference\n+    /// count.\n+    ///\n+    /// It is allowed for the strong count to be 0 at the time of calling this, but the weak count\n+    /// must be non-zero or the pointer must have originated from a dangling `Weak<T>` (one created\n+    /// by [`new`]).\n     ///\n     /// # Examples\n     ///\n@@ -1440,11 +1442,13 @@ impl<T> Weak<T> {\n     /// assert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n     /// ```\n     ///\n-    /// [`null`]: ../../std/ptr/fn.null.html\n+    /// [`as_raw`]: struct.Weak.html#method.as_raw\n+    /// [`new`]: struct.Weak.html#method.new\n     /// [`into_raw`]: struct.Weak.html#method.into_raw\n     /// [`upgrade`]: struct.Weak.html#method.upgrade\n     /// [`Weak`]: struct.Weak.html\n     /// [`Arc`]: struct.Arc.html\n+    /// [`forget`]: ../../std/mem/fn.forget.html\n     #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n     pub unsafe fn from_raw(ptr: *const T) -> Self {\n         if ptr.is_null() {"}]}