{"sha": "afa2741e6a51f94ec408b78bb7589fa0a0534a3c", "node_id": "C_kwDOAAsO6NoAKGFmYTI3NDFlNmE1MWY5NGVjNDA4Yjc4YmI3NTg5ZmEwYTA1MzRhM2M", "commit": {"author": {"name": "disco07", "email": "koneenok@outlook.fr", "date": "2023-05-05T19:33:16Z"}, "committer": {"name": "disco07", "email": "koneenok@outlook.fr", "date": "2023-05-05T19:33:16Z"}, "message": "redundant_pattern_matching", "tree": {"sha": "170149f268ec6f460f0c19e5557f1543418b4662", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/170149f268ec6f460f0c19e5557f1543418b4662"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afa2741e6a51f94ec408b78bb7589fa0a0534a3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afa2741e6a51f94ec408b78bb7589fa0a0534a3c", "html_url": "https://github.com/rust-lang/rust/commit/afa2741e6a51f94ec408b78bb7589fa0a0534a3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afa2741e6a51f94ec408b78bb7589fa0a0534a3c/comments", "author": {"login": "disco07", "id": 60718751, "node_id": "MDQ6VXNlcjYwNzE4NzUx", "avatar_url": "https://avatars.githubusercontent.com/u/60718751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/disco07", "html_url": "https://github.com/disco07", "followers_url": "https://api.github.com/users/disco07/followers", "following_url": "https://api.github.com/users/disco07/following{/other_user}", "gists_url": "https://api.github.com/users/disco07/gists{/gist_id}", "starred_url": "https://api.github.com/users/disco07/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/disco07/subscriptions", "organizations_url": "https://api.github.com/users/disco07/orgs", "repos_url": "https://api.github.com/users/disco07/repos", "events_url": "https://api.github.com/users/disco07/events{/privacy}", "received_events_url": "https://api.github.com/users/disco07/received_events", "type": "User", "site_admin": false}, "committer": {"login": "disco07", "id": 60718751, "node_id": "MDQ6VXNlcjYwNzE4NzUx", "avatar_url": "https://avatars.githubusercontent.com/u/60718751?v=4", "gravatar_id": "", "url": "https://api.github.com/users/disco07", "html_url": "https://github.com/disco07", "followers_url": "https://api.github.com/users/disco07/followers", "following_url": "https://api.github.com/users/disco07/following{/other_user}", "gists_url": "https://api.github.com/users/disco07/gists{/gist_id}", "starred_url": "https://api.github.com/users/disco07/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/disco07/subscriptions", "organizations_url": "https://api.github.com/users/disco07/orgs", "repos_url": "https://api.github.com/users/disco07/repos", "events_url": "https://api.github.com/users/disco07/events{/privacy}", "received_events_url": "https://api.github.com/users/disco07/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "371120bdbf58a331db5dcfb2d9cddc040f486de8", "url": "https://api.github.com/repos/rust-lang/rust/commits/371120bdbf58a331db5dcfb2d9cddc040f486de8", "html_url": "https://github.com/rust-lang/rust/commit/371120bdbf58a331db5dcfb2d9cddc040f486de8"}], "stats": {"total": 345, "additions": 319, "deletions": 26}, "files": [{"sha": "9656049feeb90d1476ac23db614ae009d4075452", "filename": "clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 90, "deletions": 1, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/afa2741e6a51f94ec408b78bb7589fa0a0534a3c/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa2741e6a51f94ec408b78bb7589fa0a0534a3c/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=afa2741e6a51f94ec408b78bb7589fa0a0534a3c", "patch": "@@ -186,9 +186,9 @@ fn find_sugg_for_if_let<'tcx>(\n }\n \n pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op: &Expr<'_>, arms: &[Arm<'_>]) {\n+    //eprintln!(\"{:#?}\", expr);\n     if arms.len() == 2 {\n         let node_pair = (&arms[0].pat.kind, &arms[1].pat.kind);\n-\n         let found_good_method = match node_pair {\n             (\n                 PatKind::TupleStruct(ref path_left, patterns_left, _),\n@@ -252,6 +252,68 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n                     None\n                 }\n             },\n+            (PatKind::TupleStruct(ref path_left, patterns, _), PatKind::Wild) if patterns.len() == 1 => {\n+                if let PatKind::Wild = patterns[0].kind {\n+                    let ident = match path_left {\n+                        QPath::Resolved(_, path) => {\n+                            let name = path.segments[0].ident;\n+                            Some(name)\n+                        },\n+                        _ => None,\n+                    };\n+                    if let Some(name) = ident {\n+                        match name.as_str() {\n+                            \"Ok\" => find_good_method_for_matches_macro(\n+                                cx,\n+                                arms,\n+                                path_left,\n+                                Item::Lang(ResultOk),\n+                                \"is_ok()\",\n+                                \"is_err()\",\n+                            ),\n+                            \"Some\" => find_good_method_for_matches_macro(\n+                                cx,\n+                                arms,\n+                                path_left,\n+                                Item::Lang(OptionSome),\n+                                \"is_some()\",\n+                                \"is_none()\",\n+                            ),\n+                            _ => None,\n+                        }\n+                    } else {\n+                        None\n+                    }\n+                } else {\n+                    None\n+                }\n+            },\n+            (PatKind::Path(ref path_left), PatKind::Wild) => {\n+                let ident = match path_left {\n+                    QPath::Resolved(_, path) => {\n+                        let name = path.segments[0].ident;\n+                        Some(name)\n+                    },\n+                    _ => None,\n+                };\n+\n+                if let Some(name) = ident {\n+                    match name.as_str() {\n+                        \"None\" => find_good_method_for_matches_macro(\n+                            cx,\n+                            arms,\n+                            path_left,\n+                            Item::Lang(OptionNone),\n+                            \"is_none()\",\n+                            \"is_some()\",\n+                        ),\n+                        _ => None,\n+                    }\n+                } else {\n+                    None\n+                }\n+                \n+            }\n             _ => None,\n         };\n \n@@ -345,3 +407,30 @@ fn find_good_method_for_match<'a>(\n         _ => None,\n     }\n }\n+\n+#[expect(clippy::too_many_arguments)]\n+fn find_good_method_for_matches_macro<'a>(\n+    cx: &LateContext<'_>,\n+    arms: &[Arm<'_>],\n+    path_left: &QPath<'_>,\n+    expected_item_left: Item,\n+    should_be_left: &'a str,\n+    should_be_right: &'a str,\n+) -> Option<&'a str> {\n+    let first_pat = arms[0].pat;\n+\n+    let body_node_pair = if is_pat_variant(cx, first_pat, path_left, expected_item_left) {\n+        (&arms[0].body.kind, &arms[1].body.kind)\n+    } else {\n+        return None;\n+    };\n+\n+    match body_node_pair {\n+        (ExprKind::Lit(lit_left), ExprKind::Lit(lit_right)) => match (&lit_left.node, &lit_right.node) {\n+            (LitKind::Bool(true), LitKind::Bool(false)) => Some(should_be_left),\n+            (LitKind::Bool(false), LitKind::Bool(true)) => Some(should_be_right),\n+            _ => None,\n+        },\n+        _ => None,\n+    }\n+}"}, {"sha": "c22a4d7456e4432e278a553eb8cccaca4c9860b1", "filename": "tests/ui/redundant_pattern_matching_option.fixed", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/afa2741e6a51f94ec408b78bb7589fa0a0534a3c/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/afa2741e6a51f94ec408b78bb7589fa0a0534a3c/tests%2Fui%2Fredundant_pattern_matching_option.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.fixed?ref=afa2741e6a51f94ec408b78bb7589fa0a0534a3c", "patch": "@@ -46,6 +46,7 @@ fn main() {\n     let _ = if opt.is_some() { true } else { false };\n \n     issue6067();\n+    issue10726();\n \n     let _ = if gen_opt().is_some() {\n         1\n@@ -88,3 +89,21 @@ fn issue7921() {\n     if (&None::<()>).is_none() {}\n     if (&None::<()>).is_none() {}\n }\n+\n+fn issue10726() {\n+    Some(42).is_some();\n+\n+    Some(42).is_none();\n+\n+    Some(42).is_none();\n+\n+    Some(42).is_some();\n+\n+    None::<()>.is_none();\n+\n+    None::<()>.is_none();\n+\n+    None::<()>.is_none();\n+\n+    None::<()>.is_some();\n+}"}, {"sha": "cd96e0d29a5a7472a4b8a95b525d09f0fb1ef655", "filename": "tests/ui/redundant_pattern_matching_option.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/afa2741e6a51f94ec408b78bb7589fa0a0534a3c/tests%2Fui%2Fredundant_pattern_matching_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa2741e6a51f94ec408b78bb7589fa0a0534a3c/tests%2Fui%2Fredundant_pattern_matching_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.rs?ref=afa2741e6a51f94ec408b78bb7589fa0a0534a3c", "patch": "@@ -55,6 +55,7 @@ fn main() {\n     let _ = if let Some(_) = opt { true } else { false };\n \n     issue6067();\n+    issue10726();\n \n     let _ = if let Some(_) = gen_opt() {\n         1\n@@ -103,3 +104,45 @@ fn issue7921() {\n     if let None = *(&None::<()>) {}\n     if let None = *&None::<()> {}\n }\n+\n+fn issue10726() {\n+    match Some(42) {\n+        Some(_) => true,\n+        _ => false,\n+    };\n+\n+    match Some(42) {\n+        Some(_) => false,\n+        _ => true,\n+    };\n+\n+    match Some(42) {\n+        None => true,\n+        _ => false,\n+    };\n+\n+    match Some(42) {\n+        None => false,\n+        _ => true,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        _ => true,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        _ => true,\n+    };\n+\n+    match None::<()> {\n+        None => true,\n+        _ => false,\n+    };\n+\n+    match None::<()> {\n+        None => false,\n+        _ => true,\n+    };\n+}"}, {"sha": "d397297074b4f0cdcc86e5bbef4a93d094ed38f4", "filename": "tests/ui/redundant_pattern_matching_option.stderr", "status": "modified", "additions": 84, "deletions": 12, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/afa2741e6a51f94ec408b78bb7589fa0a0534a3c/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afa2741e6a51f94ec408b78bb7589fa0a0534a3c/tests%2Fui%2Fredundant_pattern_matching_option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_option.stderr?ref=afa2741e6a51f94ec408b78bb7589fa0a0534a3c", "patch": "@@ -77,49 +77,49 @@ LL |     let _ = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:59:20\n+  --> $DIR/redundant_pattern_matching_option.rs:60:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:61:19\n+  --> $DIR/redundant_pattern_matching_option.rs:62:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:67:12\n+  --> $DIR/redundant_pattern_matching_option.rs:68:12\n    |\n LL |     if let Some(..) = gen_opt() {}\n    |     -------^^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:82:12\n+  --> $DIR/redundant_pattern_matching_option.rs:83:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:84:12\n+  --> $DIR/redundant_pattern_matching_option.rs:85:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:86:15\n+  --> $DIR/redundant_pattern_matching_option.rs:87:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:88:15\n+  --> $DIR/redundant_pattern_matching_option.rs:89:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_option.rs:90:5\n+  --> $DIR/redundant_pattern_matching_option.rs:91:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -128,7 +128,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:95:5\n+  --> $DIR/redundant_pattern_matching_option.rs:96:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -137,16 +137,88 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:103:12\n+  --> $DIR/redundant_pattern_matching_option.rs:104:12\n    |\n LL |     if let None = *(&None::<()>) {}\n    |     -------^^^^----------------- help: try this: `if (&None::<()>).is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching_option.rs:104:12\n+  --> $DIR/redundant_pattern_matching_option.rs:105:12\n    |\n LL |     if let None = *&None::<()> {}\n    |     -------^^^^--------------- help: try this: `if (&None::<()>).is_none()`\n \n-error: aborting due to 22 previous errors\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:109:5\n+   |\n+LL | /     match Some(42) {\n+LL | |         Some(_) => true,\n+LL | |         _ => false,\n+LL | |     };\n+   | |_____^ help: try this: `Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:114:5\n+   |\n+LL | /     match Some(42) {\n+LL | |         Some(_) => false,\n+LL | |         _ => true,\n+LL | |     };\n+   | |_____^ help: try this: `Some(42).is_none()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:119:5\n+   |\n+LL | /     match Some(42) {\n+LL | |         None => true,\n+LL | |         _ => false,\n+LL | |     };\n+   | |_____^ help: try this: `Some(42).is_none()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:124:5\n+   |\n+LL | /     match Some(42) {\n+LL | |         None => false,\n+LL | |         _ => true,\n+LL | |     };\n+   | |_____^ help: try this: `Some(42).is_some()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:129:5\n+   |\n+LL | /     match None::<()> {\n+LL | |         Some(_) => false,\n+LL | |         _ => true,\n+LL | |     };\n+   | |_____^ help: try this: `None::<()>.is_none()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:134:5\n+   |\n+LL | /     match None::<()> {\n+LL | |         Some(_) => false,\n+LL | |         _ => true,\n+LL | |     };\n+   | |_____^ help: try this: `None::<()>.is_none()`\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching_option.rs:139:5\n+   |\n+LL | /     match None::<()> {\n+LL | |         None => true,\n+LL | |         _ => false,\n+LL | |     };\n+   | |_____^ help: try this: `None::<()>.is_none()`\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/redundant_pattern_matching_option.rs:144:5\n+   |\n+LL | /     match None::<()> {\n+LL | |         None => false,\n+LL | |         _ => true,\n+LL | |     };\n+   | |_____^ help: try this: `None::<()>.is_some()`\n+\n+error: aborting due to 30 previous errors\n "}, {"sha": "a51e14a5b568f965e8e59819ff49c463192b7e4a", "filename": "tests/ui/redundant_pattern_matching_result.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/afa2741e6a51f94ec408b78bb7589fa0a0534a3c/tests%2Fui%2Fredundant_pattern_matching_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/afa2741e6a51f94ec408b78bb7589fa0a0534a3c/tests%2Fui%2Fredundant_pattern_matching_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_result.fixed?ref=afa2741e6a51f94ec408b78bb7589fa0a0534a3c", "patch": "@@ -43,6 +43,7 @@ fn main() {\n     issue5504();\n     issue6067();\n     issue6065();\n+    issue10726();\n \n     let _ = if gen_res().is_ok() {\n         1\n@@ -107,3 +108,13 @@ const fn issue6067() {\n \n     Err::<i32, i32>(42).is_err();\n }\n+\n+fn issue10726() {\n+    Ok::<i32, i32>(42).is_ok();\n+\n+    Ok::<i32, i32>(42).is_err();\n+\n+    Err::<i32, i32>(42).is_err();\n+\n+    Err::<i32, i32>(42).is_ok();\n+}"}, {"sha": "709e3d526a831058e1826d3522fec3fe6640fb5f", "filename": "tests/ui/redundant_pattern_matching_result.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/afa2741e6a51f94ec408b78bb7589fa0a0534a3c/tests%2Fui%2Fredundant_pattern_matching_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa2741e6a51f94ec408b78bb7589fa0a0534a3c/tests%2Fui%2Fredundant_pattern_matching_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_result.rs?ref=afa2741e6a51f94ec408b78bb7589fa0a0534a3c", "patch": "@@ -55,6 +55,7 @@ fn main() {\n     issue5504();\n     issue6067();\n     issue6065();\n+    issue10726();\n \n     let _ = if let Ok(_) = gen_res() {\n         1\n@@ -125,3 +126,25 @@ const fn issue6067() {\n         Err(_) => true,\n     };\n }\n+\n+fn issue10726() {\n+    match Ok::<i32, i32>(42) {\n+        Ok(_) => true,\n+        _ => false,\n+    };\n+\n+    match Ok::<i32, i32>(42) {\n+        Ok(_) => false,\n+        _ => true,\n+    };\n+\n+    match Err::<i32, i32>(42) {\n+        Ok(_) => false,\n+        _ => true,\n+    };\n+\n+    match Err::<i32, i32>(42) {\n+        Ok(_) => true,\n+        _ => false,\n+    };\n+}"}, {"sha": "0e8a983bf44ae4cc363e1a882fb64eb6ccb0ed88", "filename": "tests/ui/redundant_pattern_matching_result.stderr", "status": "modified", "additions": 49, "deletions": 13, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/afa2741e6a51f94ec408b78bb7589fa0a0534a3c/tests%2Fui%2Fredundant_pattern_matching_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afa2741e6a51f94ec408b78bb7589fa0a0534a3c/tests%2Fui%2Fredundant_pattern_matching_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching_result.stderr?ref=afa2741e6a51f94ec408b78bb7589fa0a0534a3c", "patch": "@@ -73,67 +73,67 @@ LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:59:20\n+  --> $DIR/redundant_pattern_matching_result.rs:60:20\n    |\n LL |     let _ = if let Ok(_) = gen_res() {\n    |             -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:61:19\n+  --> $DIR/redundant_pattern_matching_result.rs:62:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_result.rs:84:19\n+  --> $DIR/redundant_pattern_matching_result.rs:85:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_result.rs:85:16\n+  --> $DIR/redundant_pattern_matching_result.rs:86:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_result.rs:91:12\n+  --> $DIR/redundant_pattern_matching_result.rs:92:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching_result.rs:92:15\n+  --> $DIR/redundant_pattern_matching_result.rs:93:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:110:12\n+  --> $DIR/redundant_pattern_matching_result.rs:111:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:112:12\n+  --> $DIR/redundant_pattern_matching_result.rs:113:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:114:15\n+  --> $DIR/redundant_pattern_matching_result.rs:115:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:116:15\n+  --> $DIR/redundant_pattern_matching_result.rs:117:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching_result.rs:118:5\n+  --> $DIR/redundant_pattern_matching_result.rs:119:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -142,13 +142,49 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching_result.rs:123:5\n+  --> $DIR/redundant_pattern_matching_result.rs:124:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n LL | |         Err(_) => true,\n LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n-error: aborting due to 22 previous errors\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching_result.rs:131:5\n+   |\n+LL | /     match Ok::<i32, i32>(42) {\n+LL | |         Ok(_) => true,\n+LL | |         _ => false,\n+LL | |     };\n+   | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching_result.rs:136:5\n+   |\n+LL | /     match Ok::<i32, i32>(42) {\n+LL | |         Ok(_) => false,\n+LL | |         _ => true,\n+LL | |     };\n+   | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching_result.rs:141:5\n+   |\n+LL | /     match Err::<i32, i32>(42) {\n+LL | |         Ok(_) => false,\n+LL | |         _ => true,\n+LL | |     };\n+   | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching_result.rs:146:5\n+   |\n+LL | /     match Err::<i32, i32>(42) {\n+LL | |         Ok(_) => true,\n+LL | |         _ => false,\n+LL | |     };\n+   | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n+\n+error: aborting due to 26 previous errors\n "}]}