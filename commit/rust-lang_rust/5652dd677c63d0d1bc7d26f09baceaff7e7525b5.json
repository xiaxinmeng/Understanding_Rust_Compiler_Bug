{"sha": "5652dd677c63d0d1bc7d26f09baceaff7e7525b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NTJkZDY3N2M2M2QwZDFiYzdkMjZmMDliYWNlYWZmN2U3NTI1YjU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-03-26T22:57:16Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-03-26T22:57:16Z"}, "message": "Fix error index CSS file name", "tree": {"sha": "15f5866ba5c946e925aa5192622e057576771f44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15f5866ba5c946e925aa5192622e057576771f44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5652dd677c63d0d1bc7d26f09baceaff7e7525b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5652dd677c63d0d1bc7d26f09baceaff7e7525b5", "html_url": "https://github.com/rust-lang/rust/commit/5652dd677c63d0d1bc7d26f09baceaff7e7525b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5652dd677c63d0d1bc7d26f09baceaff7e7525b5/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50c50e3a82e80dcc31f366b81c491fd0bf8ed5ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/50c50e3a82e80dcc31f366b81c491fd0bf8ed5ac", "html_url": "https://github.com/rust-lang/rust/commit/50c50e3a82e80dcc31f366b81c491fd0bf8ed5ac"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "71708a0bdb1cf1497831b23ebdba6df980ff4f82", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5652dd677c63d0d1bc7d26f09baceaff7e7525b5/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5652dd677c63d0d1bc7d26f09baceaff7e7525b5/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=5652dd677c63d0d1bc7d26f09baceaff7e7525b5", "patch": "@@ -889,6 +889,7 @@ impl Step for ErrorIndex {\n         );\n         index.arg(\"html\");\n         index.arg(out.join(\"error-index.html\"));\n+        index.arg(crate::channel::CFG_RELEASE_NUM);\n \n         // FIXME: shouldn't have to pass this env var\n         index.env(\"CFG_BUILD\", &builder.config.build)"}, {"sha": "04986b59ea0f1afeee4df464bf31e649bbab707d", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5652dd677c63d0d1bc7d26f09baceaff7e7525b5/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5652dd677c63d0d1bc7d26f09baceaff7e7525b5/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=5652dd677c63d0d1bc7d26f09baceaff7e7525b5", "patch": "@@ -27,9 +27,10 @@ enum OutputFormat {\n }\n \n impl OutputFormat {\n-    fn from(format: &str) -> OutputFormat {\n+    fn from(format: &str, resource_suffix: &str) -> OutputFormat {\n         match &*format.to_lowercase() {\n-            \"html\"     => OutputFormat::HTML(HTMLFormatter(RefCell::new(IdMap::new()))),\n+            \"html\"     => OutputFormat::HTML(HTMLFormatter(RefCell::new(IdMap::new()),\n+                                                           resource_suffix.to_owned())),\n             \"markdown\" => OutputFormat::Markdown(MarkdownFormatter),\n             s          => OutputFormat::Unknown(s.to_owned()),\n         }\n@@ -44,7 +45,7 @@ trait Formatter {\n     fn footer(&self, output: &mut dyn Write) -> Result<(), Box<dyn Error>>;\n }\n \n-struct HTMLFormatter(RefCell<IdMap>);\n+struct HTMLFormatter(RefCell<IdMap>, String);\n struct MarkdownFormatter;\n \n impl Formatter for HTMLFormatter {\n@@ -55,7 +56,7 @@ impl Formatter for HTMLFormatter {\n <title>Rust Compiler Error Index</title>\n <meta charset=\"utf-8\">\n <!-- Include rust.css after light.css so its rules take priority. -->\n-<link rel=\"stylesheet\" type=\"text/css\" href=\"light.css\"/>\n+<link rel=\"stylesheet\" type=\"text/css\" href=\"light{suffix}.css\"/>\n <link rel=\"stylesheet\" type=\"text/css\" href=\"rust.css\"/>\n <style>\n .error-undescribed {{\n@@ -64,7 +65,7 @@ impl Formatter for HTMLFormatter {\n </style>\n </head>\n <body>\n-\"##)?;\n+\"##, suffix=self.1)?;\n         Ok(())\n     }\n \n@@ -242,9 +243,12 @@ fn main_with_result(format: OutputFormat, dst: &Path) -> Result<(), Box<dyn Erro\n \n fn parse_args() -> (OutputFormat, PathBuf) {\n     let mut args = env::args().skip(1);\n-    let format = args.next().map(|a| OutputFormat::from(&a))\n-                            .unwrap_or(OutputFormat::from(\"html\"));\n-    let dst = args.next().map(PathBuf::from).unwrap_or_else(|| {\n+    let format = args.next();\n+    let dst = args.next();\n+    let resource_suffix = args.next().unwrap_or_else(String::new);\n+    let format = format.map(|a| OutputFormat::from(&a, &resource_suffix))\n+                       .unwrap_or(OutputFormat::from(\"html\", &resource_suffix));\n+    let dst = dst.map(PathBuf::from).unwrap_or_else(|| {\n         match format {\n             OutputFormat::HTML(..) => PathBuf::from(\"doc/error-index.html\"),\n             OutputFormat::Markdown(..) => PathBuf::from(\"doc/error-index.md\"),"}]}