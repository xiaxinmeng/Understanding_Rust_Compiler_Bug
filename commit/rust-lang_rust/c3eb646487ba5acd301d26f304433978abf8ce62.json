{"sha": "c3eb646487ba5acd301d26f304433978abf8ce62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZWI2NDY0ODdiYTVhY2QzMDFkMjZmMzA0NDMzOTc4YWJmOGNlNjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-13T17:07:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-13T17:07:23Z"}, "message": "Merge #10225\n\n10225: internal: Add proc-macro fixture directive r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "b08e0d1c6d3af4cf7121ba8141d58bbb5e1397f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b08e0d1c6d3af4cf7121ba8141d58bbb5e1397f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3eb646487ba5acd301d26f304433978abf8ce62", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhP4VLCRBK7hj4Ov3rIwAANJcIAK9UCq51a/J7Umsglvw94rkP\nBfWpcfuU5EEaz96O5cIDc59HkvzriUaNipr3sfdkpMYNDgVwTMegvQDNUpSLKwoE\n4LrQyYgitMU08bRQ6tAVrM+TCBL1n7yXjZw5+6Av/ag9W1bKG1mLa1BpB3G0V/+2\nBhzaWpyzWCD5rcaapYkE+vXDKpqW5vWa5aNuOyIrSs7kqMtC/XxnFSVDlap4Z9bT\n1duvuLkrfeIGVa5HGFGLMaJ5XNzxmFJEgsgiFoyxuKUrdbZu3P1ZWmnZus0dMUJ4\n317lrzdiE+SJnrLqt3KqsGgO5DdFQwx/Nm+qyzGvB4kaFqVf5CwwK5hApt0vX5o=\n=Texp\n-----END PGP SIGNATURE-----\n", "payload": "tree b08e0d1c6d3af4cf7121ba8141d58bbb5e1397f4\nparent df34698cb84194c0e45cf1ccbe424fe664b71df7\nparent edc915fbb697fa57eed013bc86b77a17b0366382\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1631552843 +0000\ncommitter GitHub <noreply@github.com> 1631552843 +0000\n\nMerge #10225\n\n10225: internal: Add proc-macro fixture directive r=Veykril a=Veykril\n\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3eb646487ba5acd301d26f304433978abf8ce62", "html_url": "https://github.com/rust-lang/rust/commit/c3eb646487ba5acd301d26f304433978abf8ce62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3eb646487ba5acd301d26f304433978abf8ce62/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df34698cb84194c0e45cf1ccbe424fe664b71df7", "url": "https://api.github.com/repos/rust-lang/rust/commits/df34698cb84194c0e45cf1ccbe424fe664b71df7", "html_url": "https://github.com/rust-lang/rust/commit/df34698cb84194c0e45cf1ccbe424fe664b71df7"}, {"sha": "edc915fbb697fa57eed013bc86b77a17b0366382", "url": "https://api.github.com/repos/rust-lang/rust/commits/edc915fbb697fa57eed013bc86b77a17b0366382", "html_url": "https://github.com/rust-lang/rust/commit/edc915fbb697fa57eed013bc86b77a17b0366382"}], "stats": {"total": 90, "additions": 82, "deletions": 8}, "files": [{"sha": "417c081c6bb17983969a49440ecc0d3ed737b305", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 60, "deletions": 2, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c3eb646487ba5acd301d26f304433978abf8ce62/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3eb646487ba5acd301d26f304433978abf8ce62/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=c3eb646487ba5acd301d26f304433978abf8ce62", "patch": "@@ -6,11 +6,13 @@ use rustc_hash::FxHashMap;\n use test_utils::{\n     extract_range_or_offset, Fixture, RangeOrOffset, CURSOR_MARKER, ESCAPED_CURSOR_MARKER,\n };\n+use tt::Subtree;\n use vfs::{file_set::FileSet, VfsPath};\n \n use crate::{\n     input::CrateName, Change, CrateDisplayName, CrateGraph, CrateId, Edition, Env, FileId,\n-    FilePosition, FileRange, SourceDatabaseExt, SourceRoot, SourceRootId,\n+    FilePosition, FileRange, ProcMacro, ProcMacroExpander, ProcMacroExpansionError,\n+    SourceDatabaseExt, SourceRoot, SourceRootId,\n };\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n@@ -81,7 +83,7 @@ pub struct ChangeFixture {\n \n impl ChangeFixture {\n     pub fn parse(ra_fixture: &str) -> ChangeFixture {\n-        let (mini_core, fixture) = Fixture::parse(ra_fixture);\n+        let (mini_core, proc_macros, fixture) = Fixture::parse(ra_fixture);\n         let mut change = Change::new();\n \n         let mut files = Vec::new();\n@@ -203,6 +205,39 @@ impl ChangeFixture {\n                 crate_graph.add_dep(krate, CrateName::new(\"core\").unwrap(), core_crate).unwrap();\n             }\n         }\n+\n+        if !proc_macros.is_empty() {\n+            let proc_lib_file = file_id;\n+            file_id.0 += 1;\n+\n+            let mut fs = FileSet::default();\n+            fs.insert(\n+                proc_lib_file,\n+                VfsPath::new_virtual_path(\"/sysroot/proc_macros/lib.rs\".to_string()),\n+            );\n+            roots.push(SourceRoot::new_library(fs));\n+\n+            change.change_file(proc_lib_file, Some(Arc::new(String::new())));\n+\n+            let all_crates = crate_graph.crates_in_topological_order();\n+\n+            let proc_macros_crate = crate_graph.add_crate_root(\n+                proc_lib_file,\n+                Edition::Edition2021,\n+                Some(CrateDisplayName::from_canonical_name(\"proc_macros\".to_string())),\n+                CfgOptions::default(),\n+                CfgOptions::default(),\n+                Env::default(),\n+                test_proc_macros(&proc_macros),\n+            );\n+\n+            for krate in all_crates {\n+                crate_graph\n+                    .add_dep(krate, CrateName::new(\"proc_macros\").unwrap(), proc_macros_crate)\n+                    .unwrap();\n+            }\n+        }\n+\n         let root = match current_source_root_kind {\n             SourceRootKind::Local => SourceRoot::new_local(mem::take(&mut file_set)),\n             SourceRootKind::Library => SourceRoot::new_library(mem::take(&mut file_set)),\n@@ -215,6 +250,16 @@ impl ChangeFixture {\n     }\n }\n \n+fn test_proc_macros(proc_macros: &[String]) -> Vec<ProcMacro> {\n+    std::array::IntoIter::new([ProcMacro {\n+        name: \"identity\".into(),\n+        kind: crate::ProcMacroKind::Attr,\n+        expander: Arc::new(IdentityProcMacroExpander),\n+    }])\n+    .filter(|pm| proc_macros.iter().any(|name| name == &pm.name))\n+    .collect()\n+}\n+\n #[derive(Debug, Clone, Copy)]\n enum SourceRootKind {\n     Local,\n@@ -253,3 +298,16 @@ impl From<Fixture> for FileMeta {\n         }\n     }\n }\n+\n+#[derive(Debug)]\n+pub struct IdentityProcMacroExpander;\n+impl ProcMacroExpander for IdentityProcMacroExpander {\n+    fn expand(\n+        &self,\n+        subtree: &Subtree,\n+        _: Option<&Subtree>,\n+        _: &Env,\n+    ) -> Result<Subtree, ProcMacroExpansionError> {\n+        Ok(subtree.clone())\n+    }\n+}"}, {"sha": "99ae418f7c11104fc04b61c71b57f9c2a5e4aa78", "filename": "crates/rust-analyzer/tests/slow-tests/support.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3eb646487ba5acd301d26f304433978abf8ce62/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3eb646487ba5acd301d26f304433978abf8ce62/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fsupport.rs?ref=c3eb646487ba5acd301d26f304433978abf8ce62", "patch": "@@ -78,7 +78,8 @@ impl<'a> Project<'a> {\n             profile::init_from(crate::PROFILE);\n         });\n \n-        let (mini_core, fixtures) = Fixture::parse(self.fixture);\n+        let (mini_core, proc_macros, fixtures) = Fixture::parse(self.fixture);\n+        assert!(proc_macros.is_empty());\n         assert!(mini_core.is_none());\n         for entry in fixtures {\n             let path = tmp_dir.path().join(&entry.path['/'.len_utf8()..]);"}, {"sha": "b66065471de940a46850416102cefb2b22de4d6b", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c3eb646487ba5acd301d26f304433978abf8ce62/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3eb646487ba5acd301d26f304433978abf8ce62/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=c3eb646487ba5acd301d26f304433978abf8ce62", "patch": "@@ -92,19 +92,32 @@ impl Fixture {\n     ///  //- other meta\n     ///  ```\n     ///\n-    /// Fixture can also start with a minicore declaration:\n+    /// Fixture can also start with a proc_macros and minicore declaration(in that order):\n     ///\n     /// ```\n+    /// //- proc_macros: identity\n     /// //- minicore: sized\n     /// ```\n     ///\n-    /// That will include a subset of `libcore` into the fixture, see\n+    /// That will include predefined proc macros and a subset of `libcore` into the fixture, see\n     /// `minicore.rs` for what's available.\n-    pub fn parse(ra_fixture: &str) -> (Option<MiniCore>, Vec<Fixture>) {\n+    pub fn parse(ra_fixture: &str) -> (Option<MiniCore>, Vec<String>, Vec<Fixture>) {\n         let fixture = trim_indent(ra_fixture);\n         let mut fixture = fixture.as_str();\n         let mut mini_core = None;\n         let mut res: Vec<Fixture> = Vec::new();\n+        let mut test_proc_macros = vec![];\n+\n+        if fixture.starts_with(\"//- proc_macros:\") {\n+            let first_line = fixture.split_inclusive('\\n').next().unwrap();\n+            test_proc_macros = first_line\n+                .strip_prefix(\"//- proc_macros:\")\n+                .unwrap()\n+                .split(',')\n+                .map(|it| it.trim().to_string())\n+                .collect();\n+            fixture = &fixture[first_line.len()..];\n+        }\n \n         if fixture.starts_with(\"//- minicore:\") {\n             let first_line = fixture.split_inclusive('\\n').next().unwrap();\n@@ -144,7 +157,7 @@ impl Fixture {\n             }\n         }\n \n-        (mini_core, res)\n+        (mini_core, test_proc_macros, res)\n     }\n \n     //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b env:OUTDIR=path/to,OTHER=foo\n@@ -355,13 +368,15 @@ fn parse_fixture_checks_further_indented_metadata() {\n \n #[test]\n fn parse_fixture_gets_full_meta() {\n-    let (mini_core, parsed) = Fixture::parse(\n+    let (mini_core, proc_macros, parsed) = Fixture::parse(\n         r#\"\n+//- proc_macros: identity\n //- minicore: coerce_unsized\n //- /lib.rs crate:foo deps:bar,baz cfg:foo=a,bar=b,atom env:OUTDIR=path/to,OTHER=foo\n mod m;\n \"#,\n     );\n+    assert_eq!(proc_macros, vec![\"identity\".to_string()]);\n     assert_eq!(mini_core.unwrap().activated_flags, vec![\"coerce_unsized\".to_string()]);\n     assert_eq!(1, parsed.len());\n "}]}