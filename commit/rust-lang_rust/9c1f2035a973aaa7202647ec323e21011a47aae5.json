{"sha": "9c1f2035a973aaa7202647ec323e21011a47aae5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMWYyMDM1YTk3M2FhYTcyMDI2NDdlYzMyM2UyMTAxMWE0N2FhZTU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-29T18:21:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-29T18:21:13Z"}, "message": "Rollup merge of #72383 - DarkEld3r:issue-72322, r=matthewjasper\n\nSuggest using std::mem::drop function instead of explicit destructor call\n\nI would prefer to give a better suggestion that includes code example, but I'm currently stuck on getting the correct span for that.\n\nCloses #72322.", "tree": {"sha": "b11aacec3b3afeef03c0aa0d344d9146049e3511", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b11aacec3b3afeef03c0aa0d344d9146049e3511"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c1f2035a973aaa7202647ec323e21011a47aae5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0VKZCRBK7hj4Ov3rIwAAdHIIAIS1dAni6hJNydvU+5KCme0Z\nn8svSHvv6jytjsRn+NdJCtuo5LQ7mn3CLfZrEG/AU2DTfgqPnWeBEU8bEDiDiIjm\nO49hDZhYmglfdhVTVbzYquqsh9nIYTmyN2GkIwy8dbugzpFv0bcpbn51ltebmWLQ\n+DvjeiHcrYXc+V81JNy5EeWVWqGrjALB9CXodsMO0n/Ye8YHL/iHfMNqPao9zyTe\nyrztvS4/UVqkDv7ssk8QkDxxa9qFcVbaZrybPmq1Md7vsmaV0/OJoLuTW6HU4L32\nh4KB4sW044zT7krOuc3JTy36RA5UyuPMwAw0j/sZkmkp9KmhfflmKRAmSy+EYwM=\n=ItEd\n-----END PGP SIGNATURE-----\n", "payload": "tree b11aacec3b3afeef03c0aa0d344d9146049e3511\nparent cbcc4c4f05cef62d283d7205bd00ce7d7adcfec6\nparent 6ddbef170bf0b79b868088580e28c862b691bff3\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590776473 +0200\ncommitter GitHub <noreply@github.com> 1590776473 +0200\n\nRollup merge of #72383 - DarkEld3r:issue-72322, r=matthewjasper\n\nSuggest using std::mem::drop function instead of explicit destructor call\n\nI would prefer to give a better suggestion that includes code example, but I'm currently stuck on getting the correct span for that.\n\nCloses #72322.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c1f2035a973aaa7202647ec323e21011a47aae5", "html_url": "https://github.com/rust-lang/rust/commit/9c1f2035a973aaa7202647ec323e21011a47aae5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c1f2035a973aaa7202647ec323e21011a47aae5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbcc4c4f05cef62d283d7205bd00ce7d7adcfec6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbcc4c4f05cef62d283d7205bd00ce7d7adcfec6", "html_url": "https://github.com/rust-lang/rust/commit/cbcc4c4f05cef62d283d7205bd00ce7d7adcfec6"}, {"sha": "6ddbef170bf0b79b868088580e28c862b691bff3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ddbef170bf0b79b868088580e28c862b691bff3", "html_url": "https://github.com/rust-lang/rust/commit/6ddbef170bf0b79b868088580e28c862b691bff3"}], "stats": {"total": 59, "additions": 47, "deletions": 12}, "files": [{"sha": "f4e46a04931519b95e5386734bcafa02e87614c1", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9c1f2035a973aaa7202647ec323e21011a47aae5/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1f2035a973aaa7202647ec323e21011a47aae5/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=9c1f2035a973aaa7202647ec323e21011a47aae5", "patch": "@@ -21,11 +21,31 @@ use rustc_target::spec::abi;\n /// Checks that it is legal to call methods of the trait corresponding\n /// to `trait_id` (this only cares about the trait, not the specific\n /// method that is called).\n-pub fn check_legal_trait_for_method_call(tcx: TyCtxt<'_>, span: Span, trait_id: DefId) {\n+pub fn check_legal_trait_for_method_call(\n+    tcx: TyCtxt<'_>,\n+    span: Span,\n+    receiver: Option<Span>,\n+    trait_id: DefId,\n+) {\n     if tcx.lang_items().drop_trait() == Some(trait_id) {\n-        struct_span_err!(tcx.sess, span, E0040, \"explicit use of destructor method\")\n-            .span_label(span, \"explicit destructor calls not allowed\")\n-            .emit();\n+        let mut err = struct_span_err!(tcx.sess, span, E0040, \"explicit use of destructor method\");\n+        err.span_label(span, \"explicit destructor calls not allowed\");\n+\n+        let snippet = receiver\n+            .and_then(|s| tcx.sess.source_map().span_to_snippet(s).ok())\n+            .unwrap_or_default();\n+\n+        let suggestion =\n+            if snippet.is_empty() { \"drop\".to_string() } else { format!(\"drop({})\", snippet) };\n+\n+        err.span_suggestion(\n+            span,\n+            &format!(\"consider using `drop` function: `{}`\", suggestion),\n+            String::new(),\n+            Applicability::Unspecified,\n+        );\n+\n+        err.emit();\n     }\n }\n "}, {"sha": "7e4e1aa608ece784564b238251b60bda68f145f1", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c1f2035a973aaa7202647ec323e21011a47aae5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1f2035a973aaa7202647ec323e21011a47aae5/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=9c1f2035a973aaa7202647ec323e21011a47aae5", "patch": "@@ -597,9 +597,12 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n     fn enforce_illegal_method_limitations(&self, pick: &probe::Pick<'_>) {\n         // Disallow calls to the method `drop` defined in the `Drop` trait.\n         match pick.item.container {\n-            ty::TraitContainer(trait_def_id) => {\n-                callee::check_legal_trait_for_method_call(self.tcx, self.span, trait_def_id)\n-            }\n+            ty::TraitContainer(trait_def_id) => callee::check_legal_trait_for_method_call(\n+                self.tcx,\n+                self.span,\n+                Some(self.self_expr.span),\n+                trait_def_id,\n+            ),\n             ty::ImplContainer(..) => {}\n         }\n     }"}, {"sha": "3cb6ce61ee8d78da706c2986c192fc61b5cc9823", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c1f2035a973aaa7202647ec323e21011a47aae5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1f2035a973aaa7202647ec323e21011a47aae5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9c1f2035a973aaa7202647ec323e21011a47aae5", "patch": "@@ -5433,7 +5433,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 debug!(\"instantiate_value_path: def_id={:?} container={:?}\", def_id, container);\n                 match container {\n                     ty::TraitContainer(trait_did) => {\n-                        callee::check_legal_trait_for_method_call(tcx, span, trait_did)\n+                        callee::check_legal_trait_for_method_call(tcx, span, None, trait_did)\n                     }\n                     ty::ImplContainer(impl_def_id) => {\n                         if segments.len() == 1 {"}, {"sha": "69cf28b29704fafa1452cc6ded0ea23aa75bf480", "filename": "src/test/ui/error-codes/E0040.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c1f2035a973aaa7202647ec323e21011a47aae5/src%2Ftest%2Fui%2Ferror-codes%2FE0040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c1f2035a973aaa7202647ec323e21011a47aae5/src%2Ftest%2Fui%2Ferror-codes%2FE0040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0040.stderr?ref=9c1f2035a973aaa7202647ec323e21011a47aae5", "patch": "@@ -2,7 +2,10 @@ error[E0040]: explicit use of destructor method\n   --> $DIR/E0040.rs:13:7\n    |\n LL |     x.drop();\n-   |       ^^^^ explicit destructor calls not allowed\n+   |       ^^^^\n+   |       |\n+   |       explicit destructor calls not allowed\n+   |       help: consider using `drop` function: `drop(x)`\n \n error: aborting due to previous error\n "}, {"sha": "5ebe4ee4b90f89a146dc7dda6cdc5f914fae7ef6", "filename": "src/test/ui/explicit/explicit-call-to-dtor.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c1f2035a973aaa7202647ec323e21011a47aae5/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c1f2035a973aaa7202647ec323e21011a47aae5/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-dtor.stderr?ref=9c1f2035a973aaa7202647ec323e21011a47aae5", "patch": "@@ -2,7 +2,10 @@ error[E0040]: explicit use of destructor method\n   --> $DIR/explicit-call-to-dtor.rs:13:7\n    |\n LL |     x.drop();\n-   |       ^^^^ explicit destructor calls not allowed\n+   |       ^^^^\n+   |       |\n+   |       explicit destructor calls not allowed\n+   |       help: consider using `drop` function: `drop(x)`\n \n error: aborting due to previous error\n "}, {"sha": "cd3fb3119a5cfae286bbf7b0ad624f18da19374c", "filename": "src/test/ui/explicit/explicit-call-to-supertrait-dtor.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c1f2035a973aaa7202647ec323e21011a47aae5/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c1f2035a973aaa7202647ec323e21011a47aae5/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplicit%2Fexplicit-call-to-supertrait-dtor.stderr?ref=9c1f2035a973aaa7202647ec323e21011a47aae5", "patch": "@@ -2,7 +2,10 @@ error[E0040]: explicit use of destructor method\n   --> $DIR/explicit-call-to-supertrait-dtor.rs:17:14\n    |\n LL |         self.drop();\n-   |              ^^^^ explicit destructor calls not allowed\n+   |              ^^^^\n+   |              |\n+   |              explicit destructor calls not allowed\n+   |              help: consider using `drop` function: `drop(self)`\n \n error: aborting due to previous error\n "}, {"sha": "57c99739afd247f7e0c84ef7907a5043d8e1901e", "filename": "src/test/ui/illegal-ufcs-drop.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c1f2035a973aaa7202647ec323e21011a47aae5/src%2Ftest%2Fui%2Fillegal-ufcs-drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c1f2035a973aaa7202647ec323e21011a47aae5/src%2Ftest%2Fui%2Fillegal-ufcs-drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fillegal-ufcs-drop.stderr?ref=9c1f2035a973aaa7202647ec323e21011a47aae5", "patch": "@@ -2,7 +2,10 @@ error[E0040]: explicit use of destructor method\n   --> $DIR/illegal-ufcs-drop.rs:8:5\n    |\n LL |     Drop::drop(&mut Foo)\n-   |     ^^^^^^^^^^ explicit destructor calls not allowed\n+   |     ^^^^^^^^^^\n+   |     |\n+   |     explicit destructor calls not allowed\n+   |     help: consider using `drop` function: `drop`\n \n error: aborting due to previous error\n "}]}