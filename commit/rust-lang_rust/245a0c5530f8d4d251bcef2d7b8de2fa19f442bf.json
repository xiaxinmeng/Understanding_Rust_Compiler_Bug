{"sha": "245a0c5530f8d4d251bcef2d7b8de2fa19f442bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NWEwYzU1MzBmOGQ0ZDI1MWJjZWYyZDdiOGRlMmZhMTlmNDQyYmY=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-20T00:33:06Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-01T22:30:26Z"}, "message": "item_like_imports: Make all visible items glob importable.", "tree": {"sha": "11690ae6f31abbe9ae8ca35f3595169eccdc7952", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11690ae6f31abbe9ae8ca35f3595169eccdc7952"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/245a0c5530f8d4d251bcef2d7b8de2fa19f442bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/245a0c5530f8d4d251bcef2d7b8de2fa19f442bf", "html_url": "https://github.com/rust-lang/rust/commit/245a0c5530f8d4d251bcef2d7b8de2fa19f442bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/245a0c5530f8d4d251bcef2d7b8de2fa19f442bf/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "097b6d62fc7431b322b46b3a0e9f36134c13dd82", "url": "https://api.github.com/repos/rust-lang/rust/commits/097b6d62fc7431b322b46b3a0e9f36134c13dd82", "html_url": "https://github.com/rust-lang/rust/commit/097b6d62fc7431b322b46b3a0e9f36134c13dd82"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "12b708fa1a163c34bb44f3c2ca1d931dee84185d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/245a0c5530f8d4d251bcef2d7b8de2fa19f442bf/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245a0c5530f8d4d251bcef2d7b8de2fa19f442bf/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=245a0c5530f8d4d251bcef2d7b8de2fa19f442bf", "patch": "@@ -3255,6 +3255,10 @@ impl<'a> Resolver<'a> {\n         vis.is_accessible_from(self.current_module.normal_ancestor_id, self)\n     }\n \n+    fn is_accessible_from(&self, vis: ty::Visibility, module: Module<'a>) -> bool {\n+        vis.is_accessible_from(module.normal_ancestor_id, self)\n+    }\n+\n     fn report_privacy_errors(&self) {\n         if self.privacy_errors.len() == 0 { return }\n         let mut reported_spans = FnvHashSet();"}, {"sha": "4ab4ec4789d015cf47e2c1e8a34c0143e6010543", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/245a0c5530f8d4d251bcef2d7b8de2fa19f442bf/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245a0c5530f8d4d251bcef2d7b8de2fa19f442bf/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=245a0c5530f8d4d251bcef2d7b8de2fa19f442bf", "patch": "@@ -356,8 +356,11 @@ impl<'a> Resolver<'a> {\n         };\n \n         // Define `binding` in `module`s glob importers.\n-        if binding.vis == ty::Visibility::Public {\n-            for directive in module.glob_importers.borrow_mut().iter() {\n+        for directive in module.glob_importers.borrow_mut().iter() {\n+            if match self.new_import_semantics {\n+                true => self.is_accessible_from(binding.vis, directive.parent),\n+                false => binding.vis == ty::Visibility::Public,\n+            } {\n                 let imported_binding = self.import(binding, directive);\n                 let _ = self.try_define(directive.parent, name, ns, imported_binding);\n             }\n@@ -708,7 +711,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             resolution.borrow().binding().map(|binding| (*name, binding))\n         }).collect::<Vec<_>>();\n         for ((name, ns), binding) in bindings {\n-            if binding.pseudo_vis() == ty::Visibility::Public {\n+            if binding.pseudo_vis() == ty::Visibility::Public ||\n+               self.new_import_semantics && self.is_accessible(binding.vis) {\n                 let imported_binding = self.import(binding, directive);\n                 let _ = self.try_define(directive.parent, name, ns, imported_binding);\n             }"}, {"sha": "fc46b23351adf071f8e5893c71285ad495340452", "filename": "src/test/compile-fail/imports/reexports.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/245a0c5530f8d4d251bcef2d7b8de2fa19f442bf/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/245a0c5530f8d4d251bcef2d7b8de2fa19f442bf/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimports%2Freexports.rs?ref=245a0c5530f8d4d251bcef2d7b8de2fa19f442bf", "patch": "@@ -16,6 +16,7 @@ mod a {\n \n     mod a {\n         pub use super::foo; //~ ERROR cannot be reexported\n+        pub use super::*; //~ ERROR must import something with the glob's visibility\n     }\n }\n \n@@ -27,11 +28,17 @@ mod b {\n         pub use super::foo; // This is OK since the value `foo` is visible enough.\n         fn f(_: foo::S) {} // `foo` is imported in the type namespace (but not `pub` reexported).\n     }\n+\n+    pub mod b {\n+        pub use super::*; // This is also OK since the value `foo` is visible enough.\n+        fn f(_: foo::S) {} // Again, the module `foo` is imported (but not `pub` reexported).\n+    }\n }\n \n mod c {\n     // Test that `foo` is not reexported.\n     use b::a::foo::S; //~ ERROR `foo`\n+    use b::b::foo::S as T; //~ ERROR `foo`\n }\n \n fn main() {}"}]}