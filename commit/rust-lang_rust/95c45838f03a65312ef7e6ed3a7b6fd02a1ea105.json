{"sha": "95c45838f03a65312ef7e6ed3a7b6fd02a1ea105", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YzQ1ODM4ZjAzYTY1MzEyZWY3ZTZlZDNhN2I2ZmQwMmExZWExMDU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-24T14:51:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-24T14:51:28Z"}, "message": "Rollup merge of #72402 - marmeladema:resolver-outputs-def-id, r=ecstatic-morse\n\nRemove all uses of `NodeId` in `ResolverOutputs`\n\ncc #50928\n\nr? @ecstatic-morse", "tree": {"sha": "bb4a2ce7f43cc71c35d2fa923f64346d94ef7b77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb4a2ce7f43cc71c35d2fa923f64346d94ef7b77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95c45838f03a65312ef7e6ed3a7b6fd02a1ea105", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeyonwCRBK7hj4Ov3rIwAAdHIIAG2ERwvKrBOXI+jMKgfx/MuM\n2QJRatcIHcj+ebBdQ5Xl0IXIk/kO1+KrDuZyMUBk7Y60GuNKyyPxQwtvCgl3pdqS\nQlE/KMSJOSuKNwLBLWueg3ThHS1eyCHsaoRhJMcAV8V09FxbQQxR+K/l2KelN67c\nfaGb42z+XLx5+mjLizKjEVhPbE4En1DTaK/nKXaNg1etNN3fgCucigev4i5QcdQV\nMT4e6W0nl+727eHivEMzFcjwVyu5Yim1JjlmgaGXF+gJ2tvLt2qavYcGizpSZVWD\n38KiNDtSih0VQZds9H4T8s9zIiC97ML/xFlJTmKRlkvPGZDWRjf8eIaEiTM6cbU=\n=Y4Wp\n-----END PGP SIGNATURE-----\n", "payload": "tree bb4a2ce7f43cc71c35d2fa923f64346d94ef7b77\nparent 94fccccd2cdba42aed93ad7715e969ab6aad6301\nparent f31e076d98e3b6f457f975a0dcba9c4b0f43fc91\nauthor Ralf Jung <post@ralfj.de> 1590331888 +0200\ncommitter GitHub <noreply@github.com> 1590331888 +0200\n\nRollup merge of #72402 - marmeladema:resolver-outputs-def-id, r=ecstatic-morse\n\nRemove all uses of `NodeId` in `ResolverOutputs`\n\ncc #50928\n\nr? @ecstatic-morse\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95c45838f03a65312ef7e6ed3a7b6fd02a1ea105", "html_url": "https://github.com/rust-lang/rust/commit/95c45838f03a65312ef7e6ed3a7b6fd02a1ea105", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95c45838f03a65312ef7e6ed3a7b6fd02a1ea105/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94fccccd2cdba42aed93ad7715e969ab6aad6301", "url": "https://api.github.com/repos/rust-lang/rust/commits/94fccccd2cdba42aed93ad7715e969ab6aad6301", "html_url": "https://github.com/rust-lang/rust/commit/94fccccd2cdba42aed93ad7715e969ab6aad6301"}, {"sha": "f31e076d98e3b6f457f975a0dcba9c4b0f43fc91", "url": "https://api.github.com/repos/rust-lang/rust/commits/f31e076d98e3b6f457f975a0dcba9c4b0f43fc91", "html_url": "https://github.com/rust-lang/rust/commit/f31e076d98e3b6f457f975a0dcba9c4b0f43fc91"}], "stats": {"total": 179, "additions": 119, "deletions": 60}, "files": [{"sha": "c7a0822d27dd62c91e9af85fbeaaf19426a96cca", "filename": "src/librustc_hir/definitions.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/95c45838f03a65312ef7e6ed3a7b6fd02a1ea105/src%2Flibrustc_hir%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c45838f03a65312ef7e6ed3a7b6fd02a1ea105/src%2Flibrustc_hir%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdefinitions.rs?ref=95c45838f03a65312ef7e6ed3a7b6fd02a1ea105", "patch": "@@ -327,7 +327,9 @@ impl Definitions {\n \n     #[inline]\n     pub fn local_def_id(&self, node: ast::NodeId) -> LocalDefId {\n-        self.opt_local_def_id(node).unwrap()\n+        self.opt_local_def_id(node).unwrap_or_else(|| {\n+            panic!(\"no entry for node id: `{:?}` / `{:?}`\", node, self.opt_node_id_to_hir_id(node))\n+        })\n     }\n \n     #[inline]"}, {"sha": "5b53ab1778e3f93a24bf190a5dbdf8eae47c4d82", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 7, "deletions": 38, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/95c45838f03a65312ef7e6ed3a7b6fd02a1ea105/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c45838f03a65312ef7e6ed3a7b6fd02a1ea105/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=95c45838f03a65312ef7e6ed3a7b6fd02a1ea105", "patch": "@@ -35,7 +35,6 @@ use crate::ty::{InferTy, ParamTy, PolyFnSig, ProjectionTy};\n use crate::ty::{List, TyKind, TyS};\n use rustc_ast::ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n-use rustc_ast::node_id::NodeMap;\n use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n@@ -926,7 +925,7 @@ pub struct GlobalCtxt<'tcx> {\n     pub consts: CommonConsts<'tcx>,\n \n     /// Resolutions of `extern crate` items produced by resolver.\n-    extern_crate_map: NodeMap<CrateNum>,\n+    extern_crate_map: FxHashMap<DefId, CrateNum>,\n \n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n@@ -1116,13 +1115,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         };\n \n         let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n-        for (k, v) in resolutions.trait_map {\n-            let hir_id = definitions.node_id_to_hir_id(k);\n+        for (hir_id, v) in resolutions.trait_map.into_iter() {\n             let map = trait_map.entry(hir_id.owner).or_default();\n-            let v = v\n-                .into_iter()\n-                .map(|tc| tc.map_import_ids(|id| definitions.node_id_to_hir_id(id)))\n-                .collect();\n             map.insert(hir_id.local_id, StableVec::new(v));\n         }\n \n@@ -1139,32 +1133,10 @@ impl<'tcx> TyCtxt<'tcx> {\n             consts: common_consts,\n             extern_crate_map: resolutions.extern_crate_map,\n             trait_map,\n-            export_map: resolutions\n-                .export_map\n-                .into_iter()\n-                .map(|(k, v)| {\n-                    let exports: Vec<_> = v\n-                        .into_iter()\n-                        .map(|e| e.map_id(|id| definitions.node_id_to_hir_id(id)))\n-                        .collect();\n-                    (k, exports)\n-                })\n-                .collect(),\n-            maybe_unused_trait_imports: resolutions\n-                .maybe_unused_trait_imports\n-                .into_iter()\n-                .map(|id| definitions.local_def_id(id))\n-                .collect(),\n-            maybe_unused_extern_crates: resolutions\n-                .maybe_unused_extern_crates\n-                .into_iter()\n-                .map(|(id, sp)| (definitions.local_def_id(id).to_def_id(), sp))\n-                .collect(),\n-            glob_map: resolutions\n-                .glob_map\n-                .into_iter()\n-                .map(|(id, names)| (definitions.local_def_id(id), names))\n-                .collect(),\n+            export_map: resolutions.export_map,\n+            maybe_unused_trait_imports: resolutions.maybe_unused_trait_imports,\n+            maybe_unused_extern_crates: resolutions.maybe_unused_extern_crates,\n+            glob_map: resolutions.glob_map,\n             extern_prelude: resolutions.extern_prelude,\n             untracked_crate: krate,\n             definitions,\n@@ -2729,10 +2701,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         let id = tcx.hir().local_def_id_to_hir_id(id.expect_local());\n         tcx.stability().local_deprecation_entry(id)\n     };\n-    providers.extern_mod_stmt_cnum = |tcx, id| {\n-        let id = tcx.hir().as_local_node_id(id).unwrap();\n-        tcx.extern_crate_map.get(&id).cloned()\n-    };\n+    providers.extern_mod_stmt_cnum = |tcx, id| tcx.extern_crate_map.get(&id).cloned();\n     providers.all_crate_nums = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n         tcx.arena.alloc_slice(&tcx.cstore.crates_untracked())"}, {"sha": "aad3c6889c3ce013a2cc5ddf9710be18334927a9", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/95c45838f03a65312ef7e6ed3a7b6fd02a1ea105/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c45838f03a65312ef7e6ed3a7b6fd02a1ea105/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=95c45838f03a65312ef7e6ed3a7b6fd02a1ea105", "patch": "@@ -17,11 +17,11 @@ use crate::ty;\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use crate::ty::util::{Discr, IntTypeExt};\n use rustc_ast::ast;\n-use rustc_ast::node_id::{NodeId, NodeMap, NodeSet};\n use rustc_attr as attr;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::sorted_map::SortedIndexMultiMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -31,7 +31,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::lang_items::{FnMutTraitLangItem, FnOnceTraitLangItem, FnTraitLangItem};\n-use rustc_hir::{Constness, GlobMap, Node, TraitMap};\n+use rustc_hir::{Constness, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Encodable, Encoder};\n@@ -120,12 +120,12 @@ mod sty;\n pub struct ResolverOutputs {\n     pub definitions: rustc_hir::definitions::Definitions,\n     pub cstore: Box<CrateStoreDyn>,\n-    pub extern_crate_map: NodeMap<CrateNum>,\n-    pub trait_map: TraitMap<NodeId>,\n-    pub maybe_unused_trait_imports: NodeSet,\n-    pub maybe_unused_extern_crates: Vec<(NodeId, Span)>,\n-    pub export_map: ExportMap<NodeId>,\n-    pub glob_map: GlobMap,\n+    pub extern_crate_map: FxHashMap<DefId, CrateNum>,\n+    pub trait_map: FxHashMap<hir::HirId, Vec<hir::TraitCandidate<hir::HirId>>>,\n+    pub maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n+    pub maybe_unused_extern_crates: Vec<(DefId, Span)>,\n+    pub export_map: ExportMap<hir::HirId>,\n+    pub glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     /// Extern prelude entries. The value is `true` if the entry was introduced\n     /// via `extern crate` item and not `--extern` option or compiler built-in.\n     pub extern_prelude: FxHashMap<Symbol, bool>,"}, {"sha": "63a4cdfbf29285e5e9215d0151fb304278355e77", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 101, "deletions": 13, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/95c45838f03a65312ef7e6ed3a7b6fd02a1ea105/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c45838f03a65312ef7e6ed3a7b6fd02a1ea105/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=95c45838f03a65312ef7e6ed3a7b6fd02a1ea105", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n //! This crate is responsible for the part of name resolution that doesn't require type checker.\n //!\n //! Module structure of the crate is built here.\n@@ -1266,15 +1268,60 @@ impl<'a> Resolver<'a> {\n     }\n \n     pub fn into_outputs(self) -> ResolverOutputs {\n+        let definitions = self.definitions;\n+        let extern_crate_map = self\n+            .extern_crate_map\n+            .into_iter()\n+            .map(|(k, v)| (definitions.local_def_id(k).to_def_id(), v))\n+            .collect();\n+        let export_map = self\n+            .export_map\n+            .into_iter()\n+            .map(|(k, v)| {\n+                (\n+                    k,\n+                    v.into_iter()\n+                        .map(|e| e.map_id(|id| definitions.node_id_to_hir_id(id)))\n+                        .collect(),\n+                )\n+            })\n+            .collect();\n+        let trait_map = self\n+            .trait_map\n+            .into_iter()\n+            .map(|(k, v)| {\n+                (\n+                    definitions.node_id_to_hir_id(k),\n+                    v.into_iter()\n+                        .map(|tc| tc.map_import_ids(|id| definitions.node_id_to_hir_id(id)))\n+                        .collect(),\n+                )\n+            })\n+            .collect();\n+        let maybe_unused_trait_imports = self\n+            .maybe_unused_trait_imports\n+            .into_iter()\n+            .map(|id| definitions.local_def_id(id))\n+            .collect();\n+        let maybe_unused_extern_crates = self\n+            .maybe_unused_extern_crates\n+            .into_iter()\n+            .map(|(id, sp)| (definitions.local_def_id(id).to_def_id(), sp))\n+            .collect();\n+        let glob_map = self\n+            .glob_map\n+            .into_iter()\n+            .map(|(id, names)| (definitions.local_def_id(id), names))\n+            .collect();\n         ResolverOutputs {\n-            definitions: self.definitions,\n+            definitions: definitions,\n             cstore: Box::new(self.crate_loader.into_cstore()),\n-            extern_crate_map: self.extern_crate_map,\n-            export_map: self.export_map,\n-            trait_map: self.trait_map,\n-            glob_map: self.glob_map,\n-            maybe_unused_trait_imports: self.maybe_unused_trait_imports,\n-            maybe_unused_extern_crates: self.maybe_unused_extern_crates,\n+            extern_crate_map,\n+            export_map,\n+            trait_map,\n+            glob_map,\n+            maybe_unused_trait_imports,\n+            maybe_unused_extern_crates,\n             extern_prelude: self\n                 .extern_prelude\n                 .iter()\n@@ -1287,12 +1334,53 @@ impl<'a> Resolver<'a> {\n         ResolverOutputs {\n             definitions: self.definitions.clone(),\n             cstore: Box::new(self.cstore().clone()),\n-            extern_crate_map: self.extern_crate_map.clone(),\n-            export_map: self.export_map.clone(),\n-            trait_map: self.trait_map.clone(),\n-            glob_map: self.glob_map.clone(),\n-            maybe_unused_trait_imports: self.maybe_unused_trait_imports.clone(),\n-            maybe_unused_extern_crates: self.maybe_unused_extern_crates.clone(),\n+            extern_crate_map: self\n+                .extern_crate_map\n+                .iter()\n+                .map(|(&k, &v)| (self.definitions.local_def_id(k).to_def_id(), v))\n+                .collect(),\n+            export_map: self\n+                .export_map\n+                .iter()\n+                .map(|(&k, v)| {\n+                    (\n+                        k,\n+                        v.iter()\n+                            .map(|e| e.map_id(|id| self.definitions.node_id_to_hir_id(id)))\n+                            .collect(),\n+                    )\n+                })\n+                .collect(),\n+            trait_map: self\n+                .trait_map\n+                .iter()\n+                .map(|(&k, v)| {\n+                    (\n+                        self.definitions.node_id_to_hir_id(k),\n+                        v.iter()\n+                            .cloned()\n+                            .map(|tc| {\n+                                tc.map_import_ids(|id| self.definitions.node_id_to_hir_id(id))\n+                            })\n+                            .collect(),\n+                    )\n+                })\n+                .collect(),\n+            glob_map: self\n+                .glob_map\n+                .iter()\n+                .map(|(&id, names)| (self.definitions.local_def_id(id), names.clone()))\n+                .collect(),\n+            maybe_unused_trait_imports: self\n+                .maybe_unused_trait_imports\n+                .iter()\n+                .map(|&id| self.definitions.local_def_id(id))\n+                .collect(),\n+            maybe_unused_extern_crates: self\n+                .maybe_unused_extern_crates\n+                .iter()\n+                .map(|&(id, sp)| (self.definitions.local_def_id(id).to_def_id(), sp))\n+                .collect(),\n             extern_prelude: self\n                 .extern_prelude\n                 .iter()"}]}