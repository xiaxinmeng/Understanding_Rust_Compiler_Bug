{"sha": "06181008551b4f920d6e91e1f6bc270d78428bc6", "node_id": "C_kwDOAAsO6NoAKDA2MTgxMDA4NTUxYjRmOTIwZDZlOTFlMWY2YmMyNzBkNzg0MjhiYzY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-26T08:23:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-26T08:23:29Z"}, "message": "Merge #10354\n\n10354: internal: overhaul expression attribute parsing r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4bb5bc3c3a7825703f574830c242d57fc018fd07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bb5bc3c3a7825703f574830c242d57fc018fd07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06181008551b4f920d6e91e1f6bc270d78428bc6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhUC4BCRBK7hj4Ov3rIwAAUkMIAGK98OuyvtiAdrklAn8uF+iJ\nBFiX3L1/DwuQzBJeo+z89K3iT4wa4UA38hOC7XQtt0jB8DU1EN/mrhLx6JuHTFXW\nAV1jU894Lvu9uT65zWb93uUWKUmIj86JOr+ri96rjTr66F3HISPddLA4d4W8cHaa\njvKYQmz3pZSviPmcgW9b7SdLExZMpKKeJK/B7HdMIS401Za2x/10W9+/KK3Cz9CM\n6we59ioVjEVQ2UYT0nN20gHAvQlHT1ibwfgiN4pd4uOCVZkU4sxYWEAqz3qSMl/I\nxRGAJK9guD3mMbvtIbe30rRjq4xeH2rqTJORxs1XFRJ7eWS87meF3+v3X4ie4w4=\n=eQg5\n-----END PGP SIGNATURE-----\n", "payload": "tree 4bb5bc3c3a7825703f574830c242d57fc018fd07\nparent d401f2a062ffc4b458f158f535478d6cc8d09f44\nparent 56964c9bd383b80cf57df8d232876ada0686509f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1632644609 +0000\ncommitter GitHub <noreply@github.com> 1632644609 +0000\n\nMerge #10354\n\n10354: internal: overhaul expression attribute parsing r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06181008551b4f920d6e91e1f6bc270d78428bc6", "html_url": "https://github.com/rust-lang/rust/commit/06181008551b4f920d6e91e1f6bc270d78428bc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06181008551b4f920d6e91e1f6bc270d78428bc6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d401f2a062ffc4b458f158f535478d6cc8d09f44", "url": "https://api.github.com/repos/rust-lang/rust/commits/d401f2a062ffc4b458f158f535478d6cc8d09f44", "html_url": "https://github.com/rust-lang/rust/commit/d401f2a062ffc4b458f158f535478d6cc8d09f44"}, {"sha": "56964c9bd383b80cf57df8d232876ada0686509f", "url": "https://api.github.com/repos/rust-lang/rust/commits/56964c9bd383b80cf57df8d232876ada0686509f", "html_url": "https://github.com/rust-lang/rust/commit/56964c9bd383b80cf57df8d232876ada0686509f"}], "stats": {"total": 658, "additions": 314, "deletions": 344}, "files": [{"sha": "a34c18d6d0cbae115291677fd1cf942200a1743a", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -650,8 +650,10 @@ impl ExprCollector<'_> {\n                 self.statements_in_scope.push(Statement::Let { pat, type_ref, initializer });\n             }\n             ast::Stmt::ExprStmt(stmt) => {\n-                if self.check_cfg(&stmt).is_none() {\n-                    return;\n+                if let Some(expr) = stmt.expr() {\n+                    if self.check_cfg(&expr).is_none() {\n+                        return;\n+                    }\n                 }\n                 let has_semi = stmt.semicolon_token().is_some();\n                 // Note that macro could be expended to multiple statements"}, {"sha": "41b0328027c73687a112b96bfbe5f32ba12d531e", "filename": "crates/parser/src/event.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fparser%2Fsrc%2Fevent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fparser%2Fsrc%2Fevent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fevent.rs?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -93,8 +93,6 @@ pub(super) fn process(sink: &mut dyn TreeSink, mut events: Vec<Event>) {\n \n     for i in 0..events.len() {\n         match mem::replace(&mut events[i], Event::tombstone()) {\n-            Event::Start { kind: TOMBSTONE, .. } => (),\n-\n             Event::Start { kind, forward_parent } => {\n                 // For events[A, B, C], B is A's forward_parent, C is B's forward_parent,\n                 // in the normal control flow, the parent-child relation: `A -> B -> C`,\n@@ -109,9 +107,7 @@ pub(super) fn process(sink: &mut dyn TreeSink, mut events: Vec<Event>) {\n                     // append `A`'s forward_parent `B`\n                     fp = match mem::replace(&mut events[idx], Event::tombstone()) {\n                         Event::Start { kind, forward_parent } => {\n-                            if kind != TOMBSTONE {\n-                                forward_parents.push(kind);\n-                            }\n+                            forward_parents.push(kind);\n                             forward_parent\n                         }\n                         _ => unreachable!(),\n@@ -120,7 +116,9 @@ pub(super) fn process(sink: &mut dyn TreeSink, mut events: Vec<Event>) {\n                 }\n \n                 for kind in forward_parents.drain(..).rev() {\n-                    sink.start_node(kind);\n+                    if kind != TOMBSTONE {\n+                        sink.start_node(kind);\n+                    }\n                 }\n             }\n             Event::Finish => sink.finish_node(),"}, {"sha": "3d0ad6735ed4481a99416a672acb930d8fc73c39", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -63,7 +63,7 @@ pub(crate) mod entry_points {\n     pub(crate) use types::type_;\n \n     pub(crate) fn expr(p: &mut Parser) {\n-        let _ = expressions::expr_with_attrs(p);\n+        let _ = expressions::expr(p);\n     }\n \n     pub(crate) fn stmt(p: &mut Parser) {"}, {"sha": "574629f31a0edf9d0cc0b0066733cb277bc7bbb1", "filename": "crates/parser/src/grammar/attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fattributes.rs?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -41,7 +41,7 @@ pub(super) fn meta(p: &mut Parser) {\n     match p.current() {\n         T![=] => {\n             p.bump(T![=]);\n-            if expressions::expr(p).0.is_none() {\n+            if !expressions::expr(p) {\n                 p.error(\"expected expression\");\n             }\n         }"}, {"sha": "645101e2f7f6f57ae70eb7f3043e30c3bc24dddc", "filename": "crates/parser/src/grammar/expressions.rs", "status": "modified", "additions": 62, "deletions": 83, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions.rs?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -13,35 +13,19 @@ pub(super) enum StmtWithSemi {\n \n const EXPR_FIRST: TokenSet = LHS_FIRST;\n \n-pub(super) fn expr(p: &mut Parser) -> (Option<CompletedMarker>, BlockLike) {\n+pub(super) fn expr(p: &mut Parser) -> bool {\n     let r = Restrictions { forbid_structs: false, prefer_stmt: false };\n-    expr_bp(p, r, 1)\n+    expr_bp(p, None, r, 1).is_some()\n }\n \n-pub(super) fn expr_with_attrs(p: &mut Parser) -> bool {\n-    let m = p.start();\n-    let has_attrs = p.at(T![#]);\n-    attributes::outer_attrs(p);\n-\n-    let (cm, _block_like) = expr(p);\n-    let success = cm.is_some();\n-\n-    match (has_attrs, cm) {\n-        (true, Some(cm)) => cm.extend_to(p, m),\n-        _ => m.abandon(p),\n-    }\n-\n-    success\n-}\n-\n-pub(super) fn expr_stmt(p: &mut Parser) -> (Option<CompletedMarker>, BlockLike) {\n+pub(super) fn expr_stmt(p: &mut Parser, m: Option<Marker>) -> Option<(CompletedMarker, BlockLike)> {\n     let r = Restrictions { forbid_structs: false, prefer_stmt: true };\n-    expr_bp(p, r, 1)\n+    expr_bp(p, m, r, 1)\n }\n \n fn expr_no_struct(p: &mut Parser) {\n     let r = Restrictions { forbid_structs: true, prefer_stmt: false };\n-    expr_bp(p, r, 1);\n+    expr_bp(p, None, r, 1);\n }\n \n pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi, prefer_expr: bool) {\n@@ -53,7 +37,6 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi, prefer_expr: bool) {\n     //     #[C] #[D] {}\n     //     #[D] return ();\n     // }\n-    let has_attrs = p.at(T![#]);\n     attributes::outer_attrs(p);\n \n     if p.at(T![let]) {\n@@ -68,61 +51,39 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi, prefer_expr: bool) {\n         Err(m) => m,\n     };\n \n-    let (cm, blocklike) = expr_stmt(p);\n-    let kind = cm.as_ref().map(|cm| cm.kind()).unwrap_or(ERROR);\n-\n-    if has_attrs {\n-        if matches!(kind, BIN_EXPR | RANGE_EXPR) {\n-            // test_err attr_on_expr_not_allowed\n+    if let Some((cm, blocklike)) = expr_stmt(p, Some(m)) {\n+        if !(p.at(T!['}']) || (prefer_expr && p.at(EOF))) {\n+            // test no_semi_after_block\n             // fn foo() {\n-            //    #[A] 1 + 2;\n-            //    #[B] if true {};\n+            //     if true {}\n+            //     loop {}\n+            //     match () {}\n+            //     while true {}\n+            //     for _ in () {}\n+            //     {}\n+            //     {}\n+            //     macro_rules! test {\n+            //          () => {}\n+            //     }\n+            //     test!{}\n             // }\n-            p.error(format!(\"attributes are not allowed on {:?}\", kind));\n-        }\n-    }\n-\n-    if p.at(T!['}']) || (prefer_expr && p.at(EOF)) {\n-        // test attr_on_last_expr_in_block\n-        // fn foo() {\n-        //     { #[A] bar!()? }\n-        //     #[B] &()\n-        // }\n-        match cm {\n-            Some(cm) => cm.extend_to(p, m),\n-            None => m.abandon(p),\n-        }\n-    } else {\n-        // test no_semi_after_block\n-        // fn foo() {\n-        //     if true {}\n-        //     loop {}\n-        //     match () {}\n-        //     while true {}\n-        //     for _ in () {}\n-        //     {}\n-        //     {}\n-        //     macro_rules! test {\n-        //          () => {}\n-        //     }\n-        //     test!{}\n-        // }\n-\n-        match with_semi {\n-            StmtWithSemi::No => (),\n-            StmtWithSemi::Optional => {\n-                p.eat(T![;]);\n-            }\n-            StmtWithSemi::Yes => {\n-                if blocklike.is_block() {\n+            let m = cm.precede(p);\n+            match with_semi {\n+                StmtWithSemi::No => (),\n+                StmtWithSemi::Optional => {\n                     p.eat(T![;]);\n-                } else {\n-                    p.expect(T![;]);\n+                }\n+                StmtWithSemi::Yes => {\n+                    if blocklike.is_block() {\n+                        p.eat(T![;]);\n+                    } else {\n+                        p.expect(T![;]);\n+                    }\n                 }\n             }\n-        }\n \n-        m.complete(p, EXPR_STMT);\n+            m.complete(p, EXPR_STMT);\n+        }\n     }\n \n     // test let_stmt\n@@ -138,7 +99,7 @@ pub(super) fn stmt(p: &mut Parser, with_semi: StmtWithSemi, prefer_expr: bool) {\n         if p.eat(T![=]) {\n             // test let_stmt_init\n             // fn f() { let x = 92; }\n-            expressions::expr_with_attrs(p);\n+            expressions::expr(p);\n         }\n \n         match with_semi {\n@@ -234,20 +195,34 @@ fn current_op(p: &Parser) -> (u8, SyntaxKind) {\n }\n \n // Parses expression with binding power of at least bp.\n-fn expr_bp(p: &mut Parser, mut r: Restrictions, bp: u8) -> (Option<CompletedMarker>, BlockLike) {\n+fn expr_bp(\n+    p: &mut Parser,\n+    m: Option<Marker>,\n+    mut r: Restrictions,\n+    bp: u8,\n+) -> Option<(CompletedMarker, BlockLike)> {\n+    let m = m.unwrap_or_else(|| {\n+        let m = p.start();\n+        attributes::outer_attrs(p);\n+        m\n+    });\n     let mut lhs = match lhs(p, r) {\n         Some((lhs, blocklike)) => {\n+            let lhs = lhs.extend_to(p, m);\n             if r.prefer_stmt && blocklike.is_block() {\n                 // test stmt_bin_expr_ambiguity\n                 // fn f() {\n                 //     let _ = {1} & 2;\n                 //     {1} &2;\n                 // }\n-                return (Some(lhs), BlockLike::Block);\n+                return Some((lhs, BlockLike::Block));\n             }\n             lhs\n         }\n-        None => return (None, BlockLike::NotBlock),\n+        None => {\n+            m.abandon(p);\n+            return None;\n+        }\n     };\n \n     loop {\n@@ -285,10 +260,10 @@ fn expr_bp(p: &mut Parser, mut r: Restrictions, bp: u8) -> (Option<CompletedMark\n             }\n         }\n \n-        expr_bp(p, Restrictions { prefer_stmt: false, ..r }, op_bp + 1);\n+        expr_bp(p, None, Restrictions { prefer_stmt: false, ..r }, op_bp + 1);\n         lhs = m.complete(p, if is_range { RANGE_EXPR } else { BIN_EXPR });\n     }\n-    (Some(lhs), BlockLike::NotBlock)\n+    Some((lhs, BlockLike::NotBlock))\n }\n \n const LHS_FIRST: TokenSet =\n@@ -341,9 +316,10 @@ fn lhs(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)>\n                     m = p.start();\n                     p.bump(op);\n                     if p.at_ts(EXPR_FIRST) && !(r.forbid_structs && p.at(T!['{'])) {\n-                        expr_bp(p, r, 2);\n+                        expr_bp(p, None, r, 2);\n                     }\n-                    return Some((m.complete(p, RANGE_EXPR), BlockLike::NotBlock));\n+                    let cm = m.complete(p, RANGE_EXPR);\n+                    return Some((cm, BlockLike::NotBlock));\n                 }\n             }\n \n@@ -353,12 +329,15 @@ fn lhs(p: &mut Parser, r: Restrictions) -> Option<(CompletedMarker, BlockLike)>\n             //    {p}.x = 10;\n             // }\n             let (lhs, blocklike) = atom::atom_expr(p, r)?;\n-            return Some(postfix_expr(p, lhs, blocklike, !(r.prefer_stmt && blocklike.is_block())));\n+            let (cm, block_like) =\n+                postfix_expr(p, lhs, blocklike, !(r.prefer_stmt && blocklike.is_block()));\n+            return Some((cm, block_like));\n         }\n     };\n     // parse the interior of the unary expression\n-    expr_bp(p, r, 255);\n-    Some((m.complete(p, kind), BlockLike::NotBlock))\n+    expr_bp(p, None, r, 255);\n+    let cm = m.complete(p, kind);\n+    Some((cm, BlockLike::NotBlock))\n }\n \n fn postfix_expr(\n@@ -536,7 +515,7 @@ fn arg_list(p: &mut Parser) {\n         // fn main() {\n         //     foo(#[attr] 92)\n         // }\n-        if !expr_with_attrs(p) {\n+        if !expr(p) {\n             break;\n         }\n         if !p.at(T![')']) && !p.expect(T![,]) {"}, {"sha": "f6e9a5f1b346487495776ca188f1e97e83a18ca9", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -176,7 +176,7 @@ fn tuple_expr(p: &mut Parser) -> CompletedMarker {\n \n         // test tuple_attrs\n         // const A: (i64, i64) = (1, #[cfg(test)] 2);\n-        if !expr_with_attrs(p) {\n+        if !expr(p) {\n             break;\n         }\n \n@@ -209,7 +209,7 @@ fn array_expr(p: &mut Parser) -> CompletedMarker {\n \n         // test array_attrs\n         // const A: &[i64] = &[1, #[cfg(test)] 2];\n-        if !expr_with_attrs(p) {\n+        if !expr(p) {\n             break;\n         }\n \n@@ -438,7 +438,10 @@ fn match_arm(p: &mut Parser) {\n         match_guard(p);\n     }\n     p.expect(T![=>]);\n-    let blocklike = expr_stmt(p).1;\n+    let blocklike = match expr_stmt(p, None) {\n+        Some((_, blocklike)) => blocklike,\n+        None => BlockLike::NotBlock,\n+    };\n \n     // test match_arms_commas\n     // fn foo() {\n@@ -619,14 +622,14 @@ fn meta_var_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(L_DOLLAR));\n     let m = p.start();\n     p.bump(L_DOLLAR);\n-    let (completed, _is_block) =\n-        expr_bp(p, Restrictions { forbid_structs: false, prefer_stmt: false }, 1);\n+    let expr = expr_bp(p, None, Restrictions { forbid_structs: false, prefer_stmt: false }, 1);\n \n-    match (completed, p.current()) {\n-        (Some(it), R_DOLLAR) => {\n+    match (expr, p.current()) {\n+        (Some((cm, _)), R_DOLLAR) => {\n             p.bump(R_DOLLAR);\n+            // FIXME: this leaves the dollar hanging in the air...\n             m.abandon(p);\n-            it\n+            cm\n         }\n         _ => {\n             while !p.at(R_DOLLAR) {"}, {"sha": "1f9961bb924b16b54eaa21dad67121fc03ea2ef1", "filename": "crates/parser/src/parser.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fparser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fparser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fparser.rs?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -339,11 +339,16 @@ impl CompletedMarker {\n     }\n \n     /// Extends this completed marker *to the left* up to `m`.\n-    pub(crate) fn extend_to(self, p: &mut Parser, mut m: Marker) {\n-        assert!(m.pos <= self.pos);\n+    pub(crate) fn extend_to(self, p: &mut Parser, mut m: Marker) -> CompletedMarker {\n         m.bomb.defuse();\n-\n-        p.events.swap(self.pos as usize, m.pos as usize);\n+        let idx = m.pos as usize;\n+        match &mut p.events[idx] {\n+            Event::Start { forward_parent, .. } => {\n+                *forward_parent = Some(self.pos - m.pos);\n+            }\n+            _ => unreachable!(),\n+        }\n+        self\n     }\n \n     pub(crate) fn kind(&self) -> SyntaxKind {"}, {"sha": "2d4c689c7c6b49b06dd788b97393ade69c76bd53", "filename": "crates/syntax/test_data/parser/err/0009_broken_struct_type_parameter.rast", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.rast", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.rast?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -26,9 +26,8 @@ SOURCE_FILE@0..43\n           PATH_SEGMENT@23..24\n             NAME_REF@23..24\n               IDENT@23..24 \"f\"\n-    EXPR_STMT@24..25\n-      ERROR@24..25\n-        COLON@24..25 \":\"\n+    ERROR@24..25\n+      COLON@24..25 \":\"\n     WHITESPACE@25..26 \" \"\n     PATH_EXPR@26..29\n       PATH@26..29\n@@ -55,4 +54,3 @@ error 15..15: expected an item\n error 17..17: expected an item\n error 24..24: expected SEMICOLON\n error 24..24: expected expression\n-error 25..25: expected SEMICOLON"}, {"sha": "7e6d82bfb493bfdb7eed54e3ad1fb5950e3484d7", "filename": "crates/syntax/test_data/parser/err/0022_bad_exprs.rast", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -24,9 +24,8 @@ SOURCE_FILE@0..112\n           WHITESPACE@15..16 \" \"\n           ERROR@16..17\n             AT@16..17 \"@\"\n-      EXPR_STMT@17..18\n-        ERROR@17..18\n-          COMMA@17..18 \",\"\n+      ERROR@17..18\n+        COMMA@17..18 \",\"\n       WHITESPACE@18..19 \" \"\n       STRUCT@19..26\n         STRUCT_KW@19..25 \"struct\"\n@@ -71,15 +70,13 @@ SOURCE_FILE@0..112\n             WHITESPACE@52..53 \" \"\n             ERROR@53..54\n               AT@53..54 \"@\"\n-      EXPR_STMT@54..55\n-        ERROR@54..55\n-          COMMA@54..55 \",\"\n+      ERROR@54..55\n+        COMMA@54..55 \",\"\n       WHITESPACE@55..56 \" \"\n       IMPL@56..60\n         IMPL_KW@56..60 \"impl\"\n-      EXPR_STMT@60..61\n-        ERROR@60..61\n-          COMMA@60..61 \",\"\n+      ERROR@60..61\n+        COMMA@60..61 \",\"\n       WHITESPACE@61..62 \" \"\n       LET_STMT@62..65\n         LET_KW@62..65 \"let\"\n@@ -122,16 +119,13 @@ SOURCE_FILE@0..112\n             WHITESPACE@91..92 \" \"\n             ERROR@92..93\n               AT@92..93 \"@\"\n-      EXPR_STMT@93..94\n-        ERROR@93..94\n-          COMMA@93..94 \",\"\n+      ERROR@93..94\n+        COMMA@93..94 \",\"\n       WHITESPACE@94..95 \" \"\n-      EXPR_STMT@95..96\n-        ERROR@95..96\n-          R_BRACK@95..96 \"]\"\n-      EXPR_STMT@96..97\n-        ERROR@96..97\n-          COMMA@96..97 \",\"\n+      ERROR@95..96\n+        R_BRACK@95..96 \"]\"\n+      ERROR@96..97\n+        COMMA@96..97 \",\"\n       WHITESPACE@97..98 \" \"\n       TRAIT@98..104\n         TRAIT_KW@98..103 \"trait\"\n@@ -149,30 +143,24 @@ error 16..16: expected expression\n error 17..17: expected R_BRACK\n error 17..17: expected SEMICOLON\n error 17..17: expected expression\n-error 18..18: expected SEMICOLON\n error 25..25: expected a name\n error 26..26: expected `;`, `{`, or `(`\n error 30..30: expected pattern\n error 31..31: expected SEMICOLON\n error 53..53: expected expression\n error 54..54: expected SEMICOLON\n error 54..54: expected expression\n-error 55..55: expected SEMICOLON\n error 60..60: expected type\n error 60..60: expected `{`\n error 60..60: expected expression\n-error 61..61: expected SEMICOLON\n error 65..65: expected pattern\n error 65..65: expected SEMICOLON\n error 65..65: expected expression\n error 92..92: expected expression\n error 93..93: expected SEMICOLON\n error 93..93: expected expression\n-error 94..94: expected SEMICOLON\n error 95..95: expected expression\n-error 96..96: expected SEMICOLON\n error 96..96: expected expression\n-error 97..97: expected SEMICOLON\n error 103..103: expected a name\n error 104..104: expected `{`\n error 108..108: expected pattern"}, {"sha": "d29f12c1e510e3f2358dc832e8168db88f4404e0", "filename": "crates/syntax/test_data/parser/err/0024_many_type_parens.rast", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -143,10 +143,9 @@ SOURCE_FILE@0..240\n                             LIFETIME_IDENT@117..119 \"'a\"\n                         R_ANGLE@119..120 \">\"\n               R_PAREN@120..121 \")\"\n-      EXPR_STMT@121..123\n-        ERROR@121..122\n-          R_ANGLE@121..122 \">\"\n-        SEMICOLON@122..123 \";\"\n+      ERROR@121..122\n+        R_ANGLE@121..122 \">\"\n+      SEMICOLON@122..123 \";\"\n       WHITESPACE@123..128 \"\\n    \"\n       LET_STMT@128..141\n         LET_KW@128..131 \"let\"\n@@ -173,13 +172,11 @@ SOURCE_FILE@0..240\n             PATH_SEGMENT@141..146\n               NAME_REF@141..146\n                 IDENT@141..146 \"Sized\"\n-      EXPR_STMT@146..147\n-        ERROR@146..147\n-          R_PAREN@146..147 \")\"\n+      ERROR@146..147\n+        R_PAREN@146..147 \")\"\n       WHITESPACE@147..148 \" \"\n-      EXPR_STMT@148..149\n-        ERROR@148..149\n-          PLUS@148..149 \"+\"\n+      ERROR@148..149\n+        PLUS@148..149 \"+\"\n       WHITESPACE@149..150 \" \"\n       EXPR_STMT@150..180\n         TUPLE_EXPR@150..180\n@@ -288,10 +285,9 @@ SOURCE_FILE@0..240\n                     NAME_REF@229..234\n                       IDENT@229..234 \"Sized\"\n               R_PAREN@234..235 \")\"\n-      EXPR_STMT@235..237\n-        ERROR@235..236\n-          R_ANGLE@235..236 \">\"\n-        SEMICOLON@236..237 \";\"\n+      ERROR@235..236\n+        R_ANGLE@235..236 \">\"\n+      SEMICOLON@236..237 \";\"\n       WHITESPACE@237..238 \"\\n\"\n       R_CURLY@238..239 \"}\"\n   WHITESPACE@239..240 \"\\n\"\n@@ -306,9 +302,7 @@ error 141..141: expected R_ANGLE\n error 141..141: expected SEMICOLON\n error 146..146: expected SEMICOLON\n error 146..146: expected expression\n-error 147..147: expected SEMICOLON\n error 148..148: expected expression\n-error 149..149: expected SEMICOLON\n error 155..155: expected type\n error 158..158: expected IN_KW\n error 165..165: expected expression"}, {"sha": "797a08964821db5a796e9970a4bb191afd3484c9", "filename": "crates/syntax/test_data/parser/err/0043_weird_blocks.rast", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0043_weird_blocks.rast", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0043_weird_blocks.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0043_weird_blocks.rast?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -51,12 +51,11 @@ SOURCE_FILE@0..83\n       BLOCK_EXPR@66..80\n         L_CURLY@66..67 \"{\"\n         WHITESPACE@67..68 \" \"\n-        EXPR_STMT@68..75\n-          ERROR@68..75\n-            LABEL@68..75\n-              LIFETIME@68..74\n-                LIFETIME_IDENT@68..74 \"'label\"\n-              COLON@74..75 \":\"\n+        ERROR@68..75\n+          LABEL@68..75\n+            LIFETIME@68..74\n+              LIFETIME_IDENT@68..74 \"'label\"\n+            COLON@74..75 \":\"\n         WHITESPACE@75..76 \" \"\n         LITERAL@76..78\n           INT_NUMBER@76..78 \"92\"\n@@ -69,4 +68,3 @@ error 24..24: expected existential, fn, trait or impl\n error 41..41: expected existential, fn, trait or impl\n error 56..56: expected a block\n error 75..75: expected a loop\n-error 75..75: expected SEMICOLON"}, {"sha": "3774dd0733ee19c296d6830edcef8990a9667081", "filename": "crates/syntax/test_data/parser/inline/err/0002_misplaced_label_err.rast", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -11,19 +11,17 @@ SOURCE_FILE@0..30\n     BLOCK_EXPR@10..29\n       L_CURLY@10..11 \"{\"\n       WHITESPACE@11..16 \"\\n    \"\n-      EXPR_STMT@16..22\n-        ERROR@16..22\n-          LABEL@16..22\n-            LIFETIME@16..21\n-              LIFETIME_IDENT@16..21 \"'loop\"\n-            COLON@21..22 \":\"\n+      ERROR@16..22\n+        LABEL@16..22\n+          LIFETIME@16..21\n+            LIFETIME_IDENT@16..21 \"'loop\"\n+          COLON@21..22 \":\"\n       WHITESPACE@22..23 \" \"\n       IMPL@23..27\n         IMPL_KW@23..27 \"impl\"\n       WHITESPACE@27..28 \"\\n\"\n       R_CURLY@28..29 \"}\"\n   WHITESPACE@29..30 \"\\n\"\n error 22..22: expected a loop\n-error 22..22: expected SEMICOLON\n error 27..27: expected type\n error 27..27: expected `{`"}, {"sha": "7b8b7284f9c472ac240271a27a4585fda2c5939e", "filename": "crates/syntax/test_data/parser/inline/err/0009_attr_on_expr_not_allowed.rast", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rast", "raw_url": "https://github.com/rust-lang/rust/raw/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rast?ref=d401f2a062ffc4b458f158f535478d6cc8d09f44", "patch": "@@ -1,60 +0,0 @@\n-SOURCE_FILE@0..48\n-  FN@0..47\n-    FN_KW@0..2 \"fn\"\n-    WHITESPACE@2..3 \" \"\n-    NAME@3..6\n-      IDENT@3..6 \"foo\"\n-    PARAM_LIST@6..8\n-      L_PAREN@6..7 \"(\"\n-      R_PAREN@7..8 \")\"\n-    WHITESPACE@8..9 \" \"\n-    BLOCK_EXPR@9..47\n-      L_CURLY@9..10 \"{\"\n-      WHITESPACE@10..14 \"\\n   \"\n-      EXPR_STMT@14..25\n-        ATTR@14..18\n-          POUND@14..15 \"#\"\n-          L_BRACK@15..16 \"[\"\n-          META@16..17\n-            PATH@16..17\n-              PATH_SEGMENT@16..17\n-                NAME_REF@16..17\n-                  IDENT@16..17 \"A\"\n-          R_BRACK@17..18 \"]\"\n-        WHITESPACE@18..19 \" \"\n-        BIN_EXPR@19..24\n-          LITERAL@19..20\n-            INT_NUMBER@19..20 \"1\"\n-          WHITESPACE@20..21 \" \"\n-          PLUS@21..22 \"+\"\n-          WHITESPACE@22..23 \" \"\n-          LITERAL@23..24\n-            INT_NUMBER@23..24 \"2\"\n-        SEMICOLON@24..25 \";\"\n-      WHITESPACE@25..29 \"\\n   \"\n-      EXPR_STMT@29..45\n-        ATTR@29..33\n-          POUND@29..30 \"#\"\n-          L_BRACK@30..31 \"[\"\n-          META@31..32\n-            PATH@31..32\n-              PATH_SEGMENT@31..32\n-                NAME_REF@31..32\n-                  IDENT@31..32 \"B\"\n-          R_BRACK@32..33 \"]\"\n-        WHITESPACE@33..34 \" \"\n-        IF_EXPR@34..44\n-          IF_KW@34..36 \"if\"\n-          WHITESPACE@36..37 \" \"\n-          CONDITION@37..41\n-            LITERAL@37..41\n-              TRUE_KW@37..41 \"true\"\n-          WHITESPACE@41..42 \" \"\n-          BLOCK_EXPR@42..44\n-            L_CURLY@42..43 \"{\"\n-            R_CURLY@43..44 \"}\"\n-        SEMICOLON@44..45 \";\"\n-      WHITESPACE@45..46 \"\\n\"\n-      R_CURLY@46..47 \"}\"\n-  WHITESPACE@47..48 \"\\n\"\n-error 24..24: attributes are not allowed on BIN_EXPR"}, {"sha": "d725a07ce962edf364629f258ae9da5472c1e874", "filename": "crates/syntax/test_data/parser/inline/err/0009_attr_on_expr_not_allowed.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0009_attr_on_expr_not_allowed.rs?ref=d401f2a062ffc4b458f158f535478d6cc8d09f44", "patch": "@@ -1,4 +0,0 @@\n-fn foo() {\n-   #[A] 1 + 2;\n-   #[B] if true {};\n-}"}, {"sha": "2a4a52eeb500690e644eab205d4355123fa5be58", "filename": "crates/syntax/test_data/parser/inline/ok/0126_attr_on_expr_stmt.rast", "status": "modified", "additions": 54, "deletions": 54, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rast", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0126_attr_on_expr_stmt.rast?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -12,17 +12,17 @@ SOURCE_FILE@0..82\n       L_CURLY@9..10 \"{\"\n       WHITESPACE@10..15 \"\\n    \"\n       EXPR_STMT@15..26\n-        ATTR@15..19\n-          POUND@15..16 \"#\"\n-          L_BRACK@16..17 \"[\"\n-          META@17..18\n-            PATH@17..18\n-              PATH_SEGMENT@17..18\n-                NAME_REF@17..18\n-                  IDENT@17..18 \"A\"\n-          R_BRACK@18..19 \"]\"\n-        WHITESPACE@19..20 \" \"\n-        CALL_EXPR@20..25\n+        CALL_EXPR@15..25\n+          ATTR@15..19\n+            POUND@15..16 \"#\"\n+            L_BRACK@16..17 \"[\"\n+            META@17..18\n+              PATH@17..18\n+                PATH_SEGMENT@17..18\n+                  NAME_REF@17..18\n+                    IDENT@17..18 \"A\"\n+            R_BRACK@18..19 \"]\"\n+          WHITESPACE@19..20 \" \"\n           PATH_EXPR@20..23\n             PATH@20..23\n               PATH_SEGMENT@20..23\n@@ -34,17 +34,17 @@ SOURCE_FILE@0..82\n         SEMICOLON@25..26 \";\"\n       WHITESPACE@26..31 \"\\n    \"\n       EXPR_STMT@31..42\n-        ATTR@31..35\n-          POUND@31..32 \"#\"\n-          L_BRACK@32..33 \"[\"\n-          META@33..34\n-            PATH@33..34\n-              PATH_SEGMENT@33..34\n-                NAME_REF@33..34\n-                  IDENT@33..34 \"B\"\n-          R_BRACK@34..35 \"]\"\n-        WHITESPACE@35..36 \" \"\n-        MACRO_CALL@36..42\n+        MACRO_CALL@31..42\n+          ATTR@31..35\n+            POUND@31..32 \"#\"\n+            L_BRACK@32..33 \"[\"\n+            META@33..34\n+              PATH@33..34\n+                PATH_SEGMENT@33..34\n+                  NAME_REF@33..34\n+                    IDENT@33..34 \"B\"\n+            R_BRACK@34..35 \"]\"\n+          WHITESPACE@35..36 \" \"\n           PATH@36..39\n             PATH_SEGMENT@36..39\n               NAME_REF@36..39\n@@ -55,42 +55,42 @@ SOURCE_FILE@0..82\n             R_CURLY@41..42 \"}\"\n       WHITESPACE@42..47 \"\\n    \"\n       EXPR_STMT@47..59\n-        ATTR@47..51\n-          POUND@47..48 \"#\"\n-          L_BRACK@48..49 \"[\"\n-          META@49..50\n-            PATH@49..50\n-              PATH_SEGMENT@49..50\n-                NAME_REF@49..50\n-                  IDENT@49..50 \"C\"\n-          R_BRACK@50..51 \"]\"\n-        WHITESPACE@51..52 \" \"\n-        ATTR@52..56\n-          POUND@52..53 \"#\"\n-          L_BRACK@53..54 \"[\"\n-          META@54..55\n-            PATH@54..55\n-              PATH_SEGMENT@54..55\n-                NAME_REF@54..55\n-                  IDENT@54..55 \"D\"\n-          R_BRACK@55..56 \"]\"\n-        WHITESPACE@56..57 \" \"\n-        BLOCK_EXPR@57..59\n+        BLOCK_EXPR@47..59\n+          ATTR@47..51\n+            POUND@47..48 \"#\"\n+            L_BRACK@48..49 \"[\"\n+            META@49..50\n+              PATH@49..50\n+                PATH_SEGMENT@49..50\n+                  NAME_REF@49..50\n+                    IDENT@49..50 \"C\"\n+            R_BRACK@50..51 \"]\"\n+          WHITESPACE@51..52 \" \"\n+          ATTR@52..56\n+            POUND@52..53 \"#\"\n+            L_BRACK@53..54 \"[\"\n+            META@54..55\n+              PATH@54..55\n+                PATH_SEGMENT@54..55\n+                  NAME_REF@54..55\n+                    IDENT@54..55 \"D\"\n+            R_BRACK@55..56 \"]\"\n+          WHITESPACE@56..57 \" \"\n           L_CURLY@57..58 \"{\"\n           R_CURLY@58..59 \"}\"\n       WHITESPACE@59..64 \"\\n    \"\n       EXPR_STMT@64..79\n-        ATTR@64..68\n-          POUND@64..65 \"#\"\n-          L_BRACK@65..66 \"[\"\n-          META@66..67\n-            PATH@66..67\n-              PATH_SEGMENT@66..67\n-                NAME_REF@66..67\n-                  IDENT@66..67 \"D\"\n-          R_BRACK@67..68 \"]\"\n-        WHITESPACE@68..69 \" \"\n-        RETURN_EXPR@69..78\n+        RETURN_EXPR@64..78\n+          ATTR@64..68\n+            POUND@64..65 \"#\"\n+            L_BRACK@65..66 \"[\"\n+            META@66..67\n+              PATH@66..67\n+                PATH_SEGMENT@66..67\n+                  NAME_REF@66..67\n+                    IDENT@66..67 \"D\"\n+            R_BRACK@67..68 \"]\"\n+          WHITESPACE@68..69 \" \"\n           RETURN_KW@69..75 \"return\"\n           WHITESPACE@75..76 \" \"\n           TUPLE_EXPR@76..78"}, {"sha": "9daac234ac8744db2ee853bb30f1d8b0cde764dd", "filename": "crates/syntax/test_data/parser/inline/ok/0127_attr_on_last_expr_in_block.rast", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rast?ref=d401f2a062ffc4b458f158f535478d6cc8d09f44", "patch": "@@ -1,59 +0,0 @@\n-SOURCE_FILE@0..47\n-  FN@0..46\n-    FN_KW@0..2 \"fn\"\n-    WHITESPACE@2..3 \" \"\n-    NAME@3..6\n-      IDENT@3..6 \"foo\"\n-    PARAM_LIST@6..8\n-      L_PAREN@6..7 \"(\"\n-      R_PAREN@7..8 \")\"\n-    WHITESPACE@8..9 \" \"\n-    BLOCK_EXPR@9..46\n-      L_CURLY@9..10 \"{\"\n-      WHITESPACE@10..15 \"\\n    \"\n-      EXPR_STMT@15..31\n-        BLOCK_EXPR@15..31\n-          L_CURLY@15..16 \"{\"\n-          WHITESPACE@16..17 \" \"\n-          TRY_EXPR@17..29\n-            ATTR@17..21\n-              POUND@17..18 \"#\"\n-              L_BRACK@18..19 \"[\"\n-              META@19..20\n-                PATH@19..20\n-                  PATH_SEGMENT@19..20\n-                    NAME_REF@19..20\n-                      IDENT@19..20 \"A\"\n-              R_BRACK@20..21 \"]\"\n-            WHITESPACE@21..22 \" \"\n-            MACRO_CALL@22..28\n-              PATH@22..25\n-                PATH_SEGMENT@22..25\n-                  NAME_REF@22..25\n-                    IDENT@22..25 \"bar\"\n-              BANG@25..26 \"!\"\n-              TOKEN_TREE@26..28\n-                L_PAREN@26..27 \"(\"\n-                R_PAREN@27..28 \")\"\n-            QUESTION@28..29 \"?\"\n-          WHITESPACE@29..30 \" \"\n-          R_CURLY@30..31 \"}\"\n-      WHITESPACE@31..36 \"\\n    \"\n-      REF_EXPR@36..44\n-        ATTR@36..40\n-          POUND@36..37 \"#\"\n-          L_BRACK@37..38 \"[\"\n-          META@38..39\n-            PATH@38..39\n-              PATH_SEGMENT@38..39\n-                NAME_REF@38..39\n-                  IDENT@38..39 \"B\"\n-          R_BRACK@39..40 \"]\"\n-        WHITESPACE@40..41 \" \"\n-        AMP@41..42 \"&\"\n-        TUPLE_EXPR@42..44\n-          L_PAREN@42..43 \"(\"\n-          R_PAREN@43..44 \")\"\n-      WHITESPACE@44..45 \"\\n\"\n-      R_CURLY@45..46 \"}\"\n-  WHITESPACE@46..47 \"\\n\""}, {"sha": "9c5c8eb3615db5d65bd3fa414ccbfdb071b5f430", "filename": "crates/syntax/test_data/parser/inline/ok/0127_attr_on_last_expr_in_block.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d401f2a062ffc4b458f158f535478d6cc8d09f44/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0127_attr_on_last_expr_in_block.rs?ref=d401f2a062ffc4b458f158f535478d6cc8d09f44", "patch": "@@ -1,4 +0,0 @@\n-fn foo() {\n-    { #[A] bar!()? }\n-    #[B] &()\n-}"}, {"sha": "925fa4cbf6c87d97aae46b81aafb3ccb233db47e", "filename": "crates/syntax/test_data/parser/ok/0070_expr_attr_placement.rast", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0070_expr_attr_placement.rast", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0070_expr_attr_placement.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0070_expr_attr_placement.rast?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -0,0 +1,58 @@\n+SOURCE_FILE@0..44\n+  FN@0..43\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..4\n+      IDENT@3..4 \"f\"\n+    PARAM_LIST@4..6\n+      L_PAREN@4..5 \"(\"\n+      R_PAREN@5..6 \")\"\n+    WHITESPACE@6..7 \" \"\n+    BLOCK_EXPR@7..43\n+      L_CURLY@7..8 \"{\"\n+      WHITESPACE@8..13 \"\\n    \"\n+      PAREN_EXPR@13..41\n+        L_PAREN@13..14 \"(\"\n+        BIN_EXPR@14..40\n+          TRY_EXPR@14..23\n+            ATTR@14..18\n+              POUND@14..15 \"#\"\n+              L_BRACK@15..16 \"[\"\n+              META@16..17\n+                PATH@16..17\n+                  PATH_SEGMENT@16..17\n+                    NAME_REF@16..17\n+                      IDENT@16..17 \"a\"\n+              R_BRACK@17..18 \"]\"\n+            WHITESPACE@18..19 \" \"\n+            PATH_EXPR@19..22\n+              PATH@19..22\n+                PATH_SEGMENT@19..22\n+                  NAME_REF@19..22\n+                    IDENT@19..22 \"lhs\"\n+            QUESTION@22..23 \"?\"\n+          WHITESPACE@23..24 \" \"\n+          PLUS@24..25 \"+\"\n+          WHITESPACE@25..26 \" \"\n+          AWAIT_EXPR@26..40\n+            ATTR@26..30\n+              POUND@26..27 \"#\"\n+              L_BRACK@27..28 \"[\"\n+              META@28..29\n+                PATH@28..29\n+                  PATH_SEGMENT@28..29\n+                    NAME_REF@28..29\n+                      IDENT@28..29 \"b\"\n+              R_BRACK@29..30 \"]\"\n+            WHITESPACE@30..31 \" \"\n+            PATH_EXPR@31..34\n+              PATH@31..34\n+                PATH_SEGMENT@31..34\n+                  NAME_REF@31..34\n+                    IDENT@31..34 \"rhs\"\n+            DOT@34..35 \".\"\n+            AWAIT_KW@35..40 \"await\"\n+        R_PAREN@40..41 \")\"\n+      WHITESPACE@41..42 \"\\n\"\n+      R_CURLY@42..43 \"}\"\n+  WHITESPACE@43..44 \"\\n\""}, {"sha": "d8b7a3832a95351a86d83727917f92d020687c13", "filename": "crates/syntax/test_data/parser/ok/0070_expr_attr_placement.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0070_expr_attr_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0070_expr_attr_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0070_expr_attr_placement.rs?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -0,0 +1,3 @@\n+fn f() {\n+    (#[a] lhs? + #[b] rhs.await)\n+}"}, {"sha": "3a00212e80bf6c73adb3f63b839c8b9e21bbe78d", "filename": "crates/syntax/test_data/parser/ok/0071_stmt_attr_placement.rast", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0071_stmt_attr_placement.rast", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0071_stmt_attr_placement.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0071_stmt_attr_placement.rast?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -0,0 +1,69 @@\n+SOURCE_FILE@0..52\n+  FN@0..51\n+    FN_KW@0..2 \"fn\"\n+    WHITESPACE@2..3 \" \"\n+    NAME@3..6\n+      IDENT@3..6 \"foo\"\n+    PARAM_LIST@6..8\n+      L_PAREN@6..7 \"(\"\n+      R_PAREN@7..8 \")\"\n+    WHITESPACE@8..9 \" \"\n+    BLOCK_EXPR@9..51\n+      L_CURLY@9..10 \"{\"\n+      WHITESPACE@10..15 \"\\n    \"\n+      EXPR_STMT@15..36\n+        BLOCK_EXPR@15..36\n+          ATTR@15..19\n+            POUND@15..16 \"#\"\n+            L_BRACK@16..17 \"[\"\n+            META@17..18\n+              PATH@17..18\n+                PATH_SEGMENT@17..18\n+                  NAME_REF@17..18\n+                    IDENT@17..18 \"A\"\n+            R_BRACK@18..19 \"]\"\n+          WHITESPACE@19..20 \" \"\n+          L_CURLY@20..21 \"{\"\n+          WHITESPACE@21..22 \" \"\n+          TRY_EXPR@22..34\n+            ATTR@22..26\n+              POUND@22..23 \"#\"\n+              L_BRACK@23..24 \"[\"\n+              META@24..25\n+                PATH@24..25\n+                  PATH_SEGMENT@24..25\n+                    NAME_REF@24..25\n+                      IDENT@24..25 \"B\"\n+              R_BRACK@25..26 \"]\"\n+            WHITESPACE@26..27 \" \"\n+            MACRO_CALL@27..33\n+              PATH@27..30\n+                PATH_SEGMENT@27..30\n+                  NAME_REF@27..30\n+                    IDENT@27..30 \"bar\"\n+              BANG@30..31 \"!\"\n+              TOKEN_TREE@31..33\n+                L_PAREN@31..32 \"(\"\n+                R_PAREN@32..33 \")\"\n+            QUESTION@33..34 \"?\"\n+          WHITESPACE@34..35 \" \"\n+          R_CURLY@35..36 \"}\"\n+      WHITESPACE@36..41 \"\\n    \"\n+      REF_EXPR@41..49\n+        ATTR@41..45\n+          POUND@41..42 \"#\"\n+          L_BRACK@42..43 \"[\"\n+          META@43..44\n+            PATH@43..44\n+              PATH_SEGMENT@43..44\n+                NAME_REF@43..44\n+                  IDENT@43..44 \"C\"\n+          R_BRACK@44..45 \"]\"\n+        WHITESPACE@45..46 \" \"\n+        AMP@46..47 \"&\"\n+        TUPLE_EXPR@47..49\n+          L_PAREN@47..48 \"(\"\n+          R_PAREN@48..49 \")\"\n+      WHITESPACE@49..50 \"\\n\"\n+      R_CURLY@50..51 \"}\"\n+  WHITESPACE@51..52 \"\\n\""}, {"sha": "b4d5204bc0d43e7706d6241c9be7d288760061c5", "filename": "crates/syntax/test_data/parser/ok/0071_stmt_attr_placement.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0071_stmt_attr_placement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06181008551b4f920d6e91e1f6bc270d78428bc6/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0071_stmt_attr_placement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0071_stmt_attr_placement.rs?ref=06181008551b4f920d6e91e1f6bc270d78428bc6", "patch": "@@ -0,0 +1,4 @@\n+fn foo() {\n+    #[A] { #[B] bar!()? }\n+    #[C] &()\n+}"}]}