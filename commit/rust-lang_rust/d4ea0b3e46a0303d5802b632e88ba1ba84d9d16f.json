{"sha": "d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZWEwYjNlNDZhMDMwM2Q1ODAyYjYzMmU4OGJhMWJhODRkOWQxNmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-11T09:10:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-11T09:10:30Z"}, "message": "Auto merge of #78825 - Nicholas-Baron:unwrap_or_corrected, r=lcnr\n\n`unwrap_or` lint corrected\n\nhttps://github.com/rust-lang/rust/issues/78814#issuecomment-723305713\n\nThis pull request fixes the lint from clippy where `unwrap_or` could be better done as a `unwrap_or_else` or a `unwrap_or_default`.", "tree": {"sha": "052eab1b6fa0810f260cef027039442e5a27fd0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/052eab1b6fa0810f260cef027039442e5a27fd0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "html_url": "https://github.com/rust-lang/rust/commit/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38030ffb4e735b26260848b744c0910a5641e1db", "url": "https://api.github.com/repos/rust-lang/rust/commits/38030ffb4e735b26260848b744c0910a5641e1db", "html_url": "https://github.com/rust-lang/rust/commit/38030ffb4e735b26260848b744c0910a5641e1db"}, {"sha": "261ca04c925e1844bbd3525168d129055637e60e", "url": "https://api.github.com/repos/rust-lang/rust/commits/261ca04c925e1844bbd3525168d129055637e60e", "html_url": "https://github.com/rust-lang/rust/commit/261ca04c925e1844bbd3525168d129055637e60e"}], "stats": {"total": 61, "additions": 31, "deletions": 30}, "files": [{"sha": "5fc625bf9ef0f61fd8efdc4b994a650a5a9a9a1d", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "patch": "@@ -66,7 +66,7 @@ impl NestedMetaItem {\n         self.meta_item().and_then(|meta_item| meta_item.ident())\n     }\n     pub fn name_or_empty(&self) -> Symbol {\n-        self.ident().unwrap_or(Ident::invalid()).name\n+        self.ident().unwrap_or_else(Ident::invalid).name\n     }\n \n     /// Gets the string value if `self` is a `MetaItem` and the `MetaItem` is a\n@@ -139,7 +139,7 @@ impl Attribute {\n         }\n     }\n     pub fn name_or_empty(&self) -> Symbol {\n-        self.ident().unwrap_or(Ident::invalid()).name\n+        self.ident().unwrap_or_else(Ident::invalid).name\n     }\n \n     pub fn value_str(&self) -> Option<Symbol> {\n@@ -183,7 +183,7 @@ impl MetaItem {\n         if self.path.segments.len() == 1 { Some(self.path.segments[0].ident) } else { None }\n     }\n     pub fn name_or_empty(&self) -> Symbol {\n-        self.ident().unwrap_or(Ident::invalid()).name\n+        self.ident().unwrap_or_else(Ident::invalid).name\n     }\n \n     // Example:"}, {"sha": "9976140d6bd8c150aa3c4ef84aa8c3159006457f", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "patch": "@@ -282,7 +282,7 @@ fn mk_main(cx: &mut TestCtxt<'_>) -> P<ast::Item> {\n     let mut test_runner = cx\n         .test_runner\n         .clone()\n-        .unwrap_or(ecx.path(sp, vec![test_id, Ident::from_str_and_span(runner_name, sp)]));\n+        .unwrap_or_else(|| ecx.path(sp, vec![test_id, Ident::from_str_and_span(runner_name, sp)]));\n \n     test_runner.span = sp;\n "}, {"sha": "cd01acc9a83294821f022635967f3e6f0269121c", "filename": "compiler/rustc_codegen_cranelift/src/bin/cg_clif.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbin%2Fcg_clif.rs?ref=d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "patch": "@@ -27,8 +27,8 @@ impl rustc_driver::Callbacks for CraneliftPassesCallbacks {\n         config.opts.cg.panic = Some(PanicStrategy::Abort);\n         config.opts.debugging_opts.panic_abort_tests = true;\n         config.opts.maybe_sysroot = Some(\n-            config.opts.maybe_sysroot.clone().unwrap_or(\n-                std::env::current_exe()\n+            config.opts.maybe_sysroot.clone().unwrap_or_else(\n+                || std::env::current_exe()\n                     .unwrap()\n                     .parent()\n                     .unwrap()"}, {"sha": "d52b3be8cd3561b839c55d7f1390181e5281c087", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "patch": "@@ -979,12 +979,14 @@ fn generic_simd_intrinsic(\n \n         // Integer vector <i{in_bitwidth} x in_len>:\n         let (i_xn, in_elem_bitwidth) = match in_elem.kind() {\n-            ty::Int(i) => {\n-                (args[0].immediate(), i.bit_width().unwrap_or(bx.data_layout().pointer_size.bits()))\n-            }\n-            ty::Uint(i) => {\n-                (args[0].immediate(), i.bit_width().unwrap_or(bx.data_layout().pointer_size.bits()))\n-            }\n+            ty::Int(i) => (\n+                args[0].immediate(),\n+                i.bit_width().unwrap_or_else(|| bx.data_layout().pointer_size.bits()),\n+            ),\n+            ty::Uint(i) => (\n+                args[0].immediate(),\n+                i.bit_width().unwrap_or_else(|| bx.data_layout().pointer_size.bits()),\n+            ),\n             _ => return_error!(\n                 \"vector argument `{}`'s element type `{}`, expected integer element type\",\n                 in_ty,"}, {"sha": "d5ade86593e56dd9b5371fa3be1b516c2200b614", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "patch": "@@ -409,7 +409,7 @@ impl Definitions {\n     }\n \n     pub fn expansion_that_defined(&self, id: LocalDefId) -> ExpnId {\n-        self.expansions_that_defined.get(&id).copied().unwrap_or(ExpnId::root())\n+        self.expansions_that_defined.get(&id).copied().unwrap_or_else(ExpnId::root)\n     }\n \n     pub fn parent_module_of_macro_def(&self, expn_id: ExpnId) -> DefId {"}, {"sha": "746c3b6af12f017d04e6740acc23f491163f67f7", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "patch": "@@ -856,7 +856,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 .tables\n                 .children\n                 .get(self, index)\n-                .unwrap_or(Lazy::empty())\n+                .unwrap_or_else(Lazy::empty)\n                 .decode(self)\n                 .map(|index| ty::FieldDef {\n                     did: self.local_def_id(index),\n@@ -888,7 +888,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 .tables\n                 .children\n                 .get(self, item_id)\n-                .unwrap_or(Lazy::empty())\n+                .unwrap_or_else(Lazy::empty)\n                 .decode(self)\n                 .map(|index| self.get_variant(&self.kind(index), index, did, tcx.sess))\n                 .collect()\n@@ -1075,7 +1075,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n \n         // Iterate over all children.\n         let macros_only = self.dep_kind.lock().macros_only();\n-        let children = self.root.tables.children.get(self, id).unwrap_or(Lazy::empty());\n+        let children = self.root.tables.children.get(self, id).unwrap_or_else(Lazy::empty);\n         for child_index in children.decode((self, sess)) {\n             if macros_only {\n                 continue;\n@@ -1098,7 +1098,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                             .tables\n                             .children\n                             .get(self, child_index)\n-                            .unwrap_or(Lazy::empty());\n+                            .unwrap_or_else(Lazy::empty);\n                         for child_index in child_children.decode((self, sess)) {\n                             let kind = self.def_kind(child_index);\n                             callback(Export {\n@@ -1284,7 +1284,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     fn get_item_variances(&self, id: DefIndex) -> Vec<ty::Variance> {\n-        self.root.tables.variances.get(self, id).unwrap_or(Lazy::empty()).decode(self).collect()\n+        self.root.tables.variances.get(self, id).unwrap_or_else(Lazy::empty).decode(self).collect()\n     }\n \n     fn get_ctor_kind(&self, node_id: DefIndex) -> CtorKind {\n@@ -1323,7 +1323,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .tables\n             .attributes\n             .get(self, item_id)\n-            .unwrap_or(Lazy::empty())\n+            .unwrap_or_else(Lazy::empty)\n             .decode((self, sess))\n             .collect::<Vec<_>>()\n     }\n@@ -1333,7 +1333,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             .tables\n             .children\n             .get(self, id)\n-            .unwrap_or(Lazy::empty())\n+            .unwrap_or_else(Lazy::empty)\n             .decode(self)\n             .map(|index| respan(self.get_span(index, sess), self.item_ident(index, sess).name))\n             .collect()\n@@ -1349,7 +1349,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 .tables\n                 .inherent_impls\n                 .get(self, id)\n-                .unwrap_or(Lazy::empty())\n+                .unwrap_or_else(Lazy::empty)\n                 .decode(self)\n                 .map(|index| self.local_def_id(index)),\n         )"}, {"sha": "a5a7012852d71c438912c086957d0a42a7440fe8", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "patch": "@@ -582,7 +582,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             self.check_member_constraints(infcx, &mut errors_buffer);\n         }\n \n-        let outlives_requirements = outlives_requirements.unwrap_or(vec![]);\n+        let outlives_requirements = outlives_requirements.unwrap_or_default();\n \n         if outlives_requirements.is_empty() {\n             (None, errors_buffer)"}, {"sha": "98b7f03df38c9e1aece971b565457153cf7990b7", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "patch": "@@ -1305,7 +1305,7 @@ pub fn build_session(\n         early_error(sopts.error_format, &format!(\"Error loading host specification: {}\", e))\n     });\n \n-    let loader = file_loader.unwrap_or(Box::new(RealFileLoader));\n+    let loader = file_loader.unwrap_or_else(|| Box::new(RealFileLoader));\n     let hash_kind = sopts.debugging_opts.src_hash_algorithm.unwrap_or_else(|| {\n         if target_cfg.is_like_msvc {\n             SourceFileHashAlgorithm::Sha1"}, {"sha": "a91f693f17596af927b5b453843de89ab7276773", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "patch": "@@ -279,7 +279,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// tracking is not enabled, just returns an empty vector.\n     pub fn take_intercrate_ambiguity_causes(&mut self) -> Vec<IntercrateAmbiguityCause> {\n         assert!(self.intercrate);\n-        self.intercrate_ambiguity_causes.take().unwrap_or(vec![])\n+        self.intercrate_ambiguity_causes.take().unwrap_or_default()\n     }\n \n     pub fn infcx(&self) -> &'cx InferCtxt<'cx, 'tcx> {"}, {"sha": "0bb7b464f167bfcf9fb521f64ce8fe1f7e551ff0", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         closure_def_id: DefId,\n     ) -> Vec<DeferredCallResolution<'tcx>> {\n         let mut deferred_call_resolutions = self.deferred_call_resolutions.borrow_mut();\n-        deferred_call_resolutions.remove(&closure_def_id).unwrap_or(vec![])\n+        deferred_call_resolutions.remove(&closure_def_id).unwrap_or_default()\n     }\n \n     pub fn tag(&self) -> String {"}, {"sha": "713b24e583a6a42aee4ff7a37d91048514109714", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "patch": "@@ -244,7 +244,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ProbeScope::AllTraits,\n                 |probe_cx| Ok(probe_cx.candidate_method_names()),\n             )\n-            .unwrap_or(vec![]);\n+            .unwrap_or_default();\n         method_names\n             .iter()\n             .flat_map(|&method_name| {"}, {"sha": "e433f69a8b0bb4066ce975b04b9fc8cebbc724c1", "filename": "library/std/src/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "patch": "@@ -322,7 +322,7 @@ impl Instant {\n     /// ```\n     #[stable(feature = \"checked_duration_since\", since = \"1.39.0\")]\n     pub fn saturating_duration_since(&self, earlier: Instant) -> Duration {\n-        self.checked_duration_since(earlier).unwrap_or(Duration::new(0, 0))\n+        self.checked_duration_since(earlier).unwrap_or_default()\n     }\n \n     /// Returns the amount of time elapsed since this instant was created."}, {"sha": "366548d5b5fa2c8b0d6342be06fa2df785c9647c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "patch": "@@ -935,8 +935,7 @@ impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], &'a [Ident]) {\n                 .iter()\n                 .enumerate()\n                 .map(|(i, ty)| {\n-                    let mut name =\n-                        self.1.get(i).map(|ident| ident.to_string()).unwrap_or(String::new());\n+                    let mut name = self.1.get(i).map(|ident| ident.to_string()).unwrap_or_default();\n                     if name.is_empty() {\n                         name = \"_\".to_string();\n                     }"}, {"sha": "add28de17edef20e1f21d68b364161b041844045", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=d4ea0b3e46a0303d5802b632e88ba1ba84d9d16f", "patch": "@@ -128,7 +128,7 @@ pub fn build_index(krate: &clean::Crate, cache: &mut Cache) -> String {\n         .module\n         .as_ref()\n         .map(|module| shorten(plain_text_summary(module.doc_value())))\n-        .unwrap_or(String::new());\n+        .unwrap_or_default();\n \n     #[derive(Serialize)]\n     struct CrateData<'a> {"}]}