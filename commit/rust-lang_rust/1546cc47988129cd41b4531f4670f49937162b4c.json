{"sha": "1546cc47988129cd41b4531f4670f49937162b4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NDZjYzQ3OTg4MTI5Y2Q0MWI0NTMxZjQ2NzBmNDk5MzcxNjJiNGM=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-14T20:48:24Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-15T19:35:41Z"}, "message": "Fix ICE in `OUT_OF_BOUNDS_INDEXING` with ranges", "tree": {"sha": "3e1ae25c1b82b8eea08350255877939119986b7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e1ae25c1b82b8eea08350255877939119986b7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1546cc47988129cd41b4531f4670f49937162b4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1546cc47988129cd41b4531f4670f49937162b4c", "html_url": "https://github.com/rust-lang/rust/commit/1546cc47988129cd41b4531f4670f49937162b4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1546cc47988129cd41b4531f4670f49937162b4c/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "893d6e8bf2ef5c8cde1946a223471cfa061370ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/893d6e8bf2ef5c8cde1946a223471cfa061370ee", "html_url": "https://github.com/rust-lang/rust/commit/893d6e8bf2ef5c8cde1946a223471cfa061370ee"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "ece66ae20a239713d0064e72706b8ddaca6a1628", "filename": "src/array_indexing.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1546cc47988129cd41b4531f4670f49937162b4c/src%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1546cc47988129cd41b4531f4670f49937162b4c/src%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farray_indexing.rs?ref=1546cc47988129cd41b4531f4670f49937162b4c", "patch": "@@ -83,7 +83,7 @@ impl LateLintPass for ArrayIndexing {\n                         eval_const_expr_partial(cx.tcx, end, ExprTypeChecked, None)).map(|v| v.ok());\n \n                     if let Some((start, end)) = to_const_range(start, end, range.limits, size) {\n-                        if start >= size || end >= size {\n+                        if start > size || end > size {\n                             utils::span_lint(cx,\n                                              OUT_OF_BOUNDS_INDEXING,\n                                              e.span,\n@@ -109,14 +109,11 @@ impl LateLintPass for ArrayIndexing {\n     }\n }\n \n-/// Returns an option containing a tuple with the start and end (exclusive) of the range\n-///\n-/// Note: we assume the start and the end of the range are unsigned, since array slicing\n-/// works only on usize\n+/// Returns an option containing a tuple with the start and end (exclusive) of the range.\n fn to_const_range(start: Option<Option<ConstVal>>,\n-                    end: Option<Option<ConstVal>>,\n-                    limits: RangeLimits,\n-                    array_size: ConstInt)\n+                  end: Option<Option<ConstVal>>,\n+                  limits: RangeLimits,\n+                  array_size: ConstInt)\n                     -> Option<(ConstInt, ConstInt)> {\n     let start = match start {\n         Some(Some(ConstVal::Integral(x))) => x,\n@@ -127,13 +124,13 @@ fn to_const_range(start: Option<Option<ConstVal>>,\n     let end = match end {\n         Some(Some(ConstVal::Integral(x))) => {\n             if limits == RangeLimits::Closed {\n-                x\n+                (x + ConstInt::Infer(1)).expect(\"such a big array is not realistic\")\n             } else {\n-                (x - ConstInt::Infer(1)).expect(\"x > 0\")\n+                x\n             }\n         }\n         Some(_) => return None,\n-        None => (array_size - ConstInt::Infer(1)).expect(\"array_size > 0\"),\n+        None => array_size\n     };\n \n     Some((start, end))"}, {"sha": "35fadf8c1e4add72b5dc751f12004cc5a925c1af", "filename": "tests/compile-fail/array_indexing.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1546cc47988129cd41b4531f4670f49937162b4c/tests%2Fcompile-fail%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1546cc47988129cd41b4531f4670f49937162b4c/tests%2Fcompile-fail%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Farray_indexing.rs?ref=1546cc47988129cd41b4531f4670f49937162b4c", "patch": "@@ -16,6 +16,8 @@ fn main() {\n     &x[0...4]; //~ERROR: range is out of bounds\n     &x[..];\n     &x[1..];\n+    &x[4..];\n+    &x[5..]; //~ERROR: range is out of bounds\n     &x[..4];\n     &x[..5]; //~ERROR: range is out of bounds\n \n@@ -24,4 +26,16 @@ fn main() {\n     &y[1..2]; //~ERROR: slicing may panic\n     &y[..];\n     &y[0...4]; //~ERROR: slicing may panic\n+\n+    let empty: [i8; 0] = [];\n+    empty[0]; //~ERROR: const index is out of bounds\n+    &empty[1..5]; //~ERROR: range is out of bounds\n+    &empty[0...4]; //~ERROR: range is out of bounds\n+    &empty[..];\n+    &empty[0..];\n+    &empty[0..0];\n+    &empty[0...0]; //~ERROR: range is out of bounds\n+    &empty[..0];\n+    &empty[1..]; //~ERROR: range is out of bounds\n+    &empty[..4]; //~ERROR: range is out of bounds\n }"}]}