{"sha": "d2634478781be741c872f33c7793797c081dc16f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyNjM0NDc4NzgxYmU3NDFjODcyZjMzYzc3OTM3OTdjMDgxZGMxNmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-27T09:24:31Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-01-27T09:24:31Z"}, "message": "Replace EmptySinglePair with SmallVec", "tree": {"sha": "168cc66e61631b8548d146dd08ff6bf378c3f848", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/168cc66e61631b8548d146dd08ff6bf378c3f848"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2634478781be741c872f33c7793797c081dc16f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2634478781be741c872f33c7793797c081dc16f", "html_url": "https://github.com/rust-lang/rust/commit/d2634478781be741c872f33c7793797c081dc16f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2634478781be741c872f33c7793797c081dc16f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc595f1a555d7f43802679511e9fdf1f64f2c49a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc595f1a555d7f43802679511e9fdf1f64f2c49a", "html_url": "https://github.com/rust-lang/rust/commit/fc595f1a555d7f43802679511e9fdf1f64f2c49a"}], "stats": {"total": 166, "additions": 66, "deletions": 100}, "files": [{"sha": "5495cfa5eaa0dc9ca414764805b45b0d288c893e", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2634478781be741c872f33c7793797c081dc16f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d2634478781be741c872f33c7793797c081dc16f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d2634478781be741c872f33c7793797c081dc16f", "patch": "@@ -333,6 +333,7 @@ dependencies = [\n  \"indexmap\",\n  \"libloading\",\n  \"object\",\n+ \"smallvec\",\n  \"target-lexicon\",\n ]\n "}, {"sha": "3820fce6d1e0df69ff647f91965a2ac81741e230", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d2634478781be741c872f33c7793797c081dc16f/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d2634478781be741c872f33c7793797c081dc16f/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=d2634478781be741c872f33c7793797c081dc16f", "patch": "@@ -21,6 +21,7 @@ object = { version = \"0.22.0\", default-features = false, features = [\"std\", \"rea\n ar = { git = \"https://github.com/bjorn3/rust-ar.git\", branch = \"do_not_remove_cg_clif_ranlib\" }\n indexmap = \"1.0.2\"\n libloading = { version = \"0.6.0\", optional = true }\n+smallvec = \"1.6.1\"\n \n # Uncomment to use local checkout of cranelift\n #[patch.\"https://github.com/bytecodealliance/wasmtime/\"]"}, {"sha": "9aab45b62e2115f3cb6d4790ad333cc0a77d71a4", "filename": "src/abi/comments.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d2634478781be741c872f33c7793797c081dc16f/src%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2634478781be741c872f33c7793797c081dc16f/src%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fcomments.rs?ref=d2634478781be741c872f33c7793797c081dc16f", "patch": "@@ -8,7 +8,6 @@ use rustc_target::abi::call::PassMode;\n \n use cranelift_codegen::entity::EntityRef;\n \n-use crate::abi::pass_mode::*;\n use crate::prelude::*;\n \n pub(super) fn add_args_header_comment(fx: &mut FunctionCx<'_, '_, impl Module>) {\n@@ -22,7 +21,7 @@ pub(super) fn add_arg_comment<'tcx>(\n     kind: &str,\n     local: Option<mir::Local>,\n     local_field: Option<usize>,\n-    params: EmptySinglePair<Value>,\n+    params: &[Value],\n     arg_abi_mode: PassMode,\n     arg_layout: TyAndLayout<'tcx>,\n ) {\n@@ -38,9 +37,17 @@ pub(super) fn add_arg_comment<'tcx>(\n     };\n \n     let params = match params {\n-        Empty => Cow::Borrowed(\"-\"),\n-        Single(param) => Cow::Owned(format!(\"= {:?}\", param)),\n-        Pair(param_a, param_b) => Cow::Owned(format!(\"= {:?}, {:?}\", param_a, param_b)),\n+        [] => Cow::Borrowed(\"-\"),\n+        [param] => Cow::Owned(format!(\"= {:?}\", param)),\n+        [param_a, param_b] => Cow::Owned(format!(\"= {:?},{:?}\", param_a, param_b)),\n+        params => Cow::Owned(format!(\n+            \"= {}\",\n+            params\n+                .iter()\n+                .map(ToString::to_string)\n+                .collect::<Vec<_>>()\n+                .join(\",\")\n+        )),\n     };\n \n     let pass_mode = format!(\"{:?}\", arg_abi_mode);"}, {"sha": "bc35ca2de40f69d12385df70e6e3bab7a4991744", "filename": "src/abi/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d2634478781be741c872f33c7793797c081dc16f/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2634478781be741c872f33c7793797c081dc16f/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=d2634478781be741c872f33c7793797c081dc16f", "patch": "@@ -11,6 +11,7 @@ use rustc_target::abi::call::{Conv, FnAbi};\n use rustc_target::spec::abi::Abi;\n \n use cranelift_codegen::ir::AbiParam;\n+use smallvec::smallvec;\n \n use self::pass_mode::*;\n use crate::prelude::*;\n@@ -534,15 +535,15 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n                 );\n             }\n             let (ptr, method) = crate::vtable::get_ptr_and_method_ref(fx, args[0], idx);\n-            (Some(method), Single(ptr))\n+            (Some(method), smallvec![ptr])\n         }\n \n         // Normal call\n         Some(_) => (\n             None,\n             args.get(0)\n                 .map(|arg| adjust_arg_for_abi(fx, *arg, &fn_abi.args[0]))\n-                .unwrap_or(Empty),\n+                .unwrap_or(smallvec![]),\n         ),\n \n         // Indirect call\n@@ -557,7 +558,7 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n                 Some(func),\n                 args.get(0)\n                     .map(|arg| adjust_arg_for_abi(fx, *arg, &fn_abi.args[0]))\n-                    .unwrap_or(Empty),\n+                    .unwrap_or(smallvec![]),\n             )\n         }\n     };"}, {"sha": "e047ddcebc98b6442fa1adbe2687ae295783df40", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 42, "deletions": 86, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/d2634478781be741c872f33c7793797c081dc16f/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2634478781be741c872f33c7793797c081dc16f/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=d2634478781be741c872f33c7793797c081dc16f", "patch": "@@ -5,103 +5,49 @@ use crate::value_and_place::assert_assignable;\n \n use cranelift_codegen::ir::ArgumentPurpose;\n use rustc_target::abi::call::{ArgAbi, PassMode};\n-pub(super) use EmptySinglePair::*;\n-\n-#[derive(Copy, Clone, Debug)]\n-pub(super) enum EmptySinglePair<T> {\n-    Empty,\n-    Single(T),\n-    Pair(T, T),\n-}\n-\n-impl<T> EmptySinglePair<T> {\n-    pub(super) fn into_iter(self) -> EmptySinglePairIter<T> {\n-        EmptySinglePairIter(self)\n-    }\n-\n-    pub(super) fn map<U>(self, mut f: impl FnMut(T) -> U) -> EmptySinglePair<U> {\n-        match self {\n-            Empty => Empty,\n-            Single(v) => Single(f(v)),\n-            Pair(a, b) => Pair(f(a), f(b)),\n-        }\n-    }\n-}\n-\n-pub(super) struct EmptySinglePairIter<T>(EmptySinglePair<T>);\n-\n-impl<T> Iterator for EmptySinglePairIter<T> {\n-    type Item = T;\n-\n-    fn next(&mut self) -> Option<T> {\n-        match std::mem::replace(&mut self.0, Empty) {\n-            Empty => None,\n-            Single(v) => Some(v),\n-            Pair(a, b) => {\n-                self.0 = Single(b);\n-                Some(a)\n-            }\n-        }\n-    }\n-}\n-\n-impl<T: std::fmt::Debug> EmptySinglePair<T> {\n-    pub(super) fn assert_single(self) -> T {\n-        match self {\n-            Single(v) => v,\n-            _ => panic!(\"Called assert_single on {:?}\", self),\n-        }\n-    }\n-\n-    pub(super) fn assert_pair(self) -> (T, T) {\n-        match self {\n-            Pair(a, b) => (a, b),\n-            _ => panic!(\"Called assert_pair on {:?}\", self),\n-        }\n-    }\n-}\n+use smallvec::{smallvec, SmallVec};\n \n pub(super) trait ArgAbiExt<'tcx> {\n-    fn get_abi_param(&self, tcx: TyCtxt<'tcx>) -> EmptySinglePair<AbiParam>;\n+    fn get_abi_param(&self, tcx: TyCtxt<'tcx>) -> SmallVec<[AbiParam; 2]>;\n     fn get_abi_return(&self, tcx: TyCtxt<'tcx>) -> (Option<AbiParam>, Vec<AbiParam>);\n }\n \n impl<'tcx> ArgAbiExt<'tcx> for ArgAbi<'tcx, Ty<'tcx>> {\n-    fn get_abi_param(&self, tcx: TyCtxt<'tcx>) -> EmptySinglePair<AbiParam> {\n+    fn get_abi_param(&self, tcx: TyCtxt<'tcx>) -> SmallVec<[AbiParam; 2]> {\n         match self.mode {\n-            PassMode::Ignore => EmptySinglePair::Empty,\n+            PassMode::Ignore => smallvec![],\n             PassMode::Direct(_) => match &self.layout.abi {\n                 Abi::Scalar(scalar) => {\n-                    EmptySinglePair::Single(AbiParam::new(scalar_to_clif_type(tcx, scalar.clone())))\n+                    smallvec![AbiParam::new(scalar_to_clif_type(tcx, scalar.clone()))]\n                 }\n                 Abi::Vector { .. } => {\n                     let vector_ty = crate::intrinsics::clif_vector_type(tcx, self.layout).unwrap();\n-                    EmptySinglePair::Single(AbiParam::new(vector_ty))\n+                    smallvec![AbiParam::new(vector_ty)]\n                 }\n                 _ => unreachable!(\"{:?}\", self.layout.abi),\n             },\n             PassMode::Pair(_, _) => match &self.layout.abi {\n                 Abi::ScalarPair(a, b) => {\n                     let a = scalar_to_clif_type(tcx, a.clone());\n                     let b = scalar_to_clif_type(tcx, b.clone());\n-                    EmptySinglePair::Pair(AbiParam::new(a), AbiParam::new(b))\n+                    smallvec![AbiParam::new(a), AbiParam::new(b)]\n                 }\n                 _ => unreachable!(\"{:?}\", self.layout.abi),\n             },\n-            PassMode::Cast(_) => EmptySinglePair::Single(AbiParam::new(pointer_ty(tcx))),\n+            PassMode::Cast(_) => smallvec![AbiParam::new(pointer_ty(tcx))],\n             PassMode::Indirect {\n                 attrs: _,\n                 extra_attrs: None,\n                 on_stack,\n             } => {\n                 if on_stack {\n                     let size = u32::try_from(self.layout.size.bytes()).unwrap();\n-                    EmptySinglePair::Single(AbiParam::special(\n+                    smallvec![AbiParam::special(\n                         pointer_ty(tcx),\n                         ArgumentPurpose::StructArgument(size),\n-                    ))\n+                    )]\n                 } else {\n-                    EmptySinglePair::Single(AbiParam::new(pointer_ty(tcx)))\n+                    smallvec![AbiParam::new(pointer_ty(tcx))]\n                 }\n             }\n             PassMode::Indirect {\n@@ -110,10 +56,10 @@ impl<'tcx> ArgAbiExt<'tcx> for ArgAbi<'tcx, Ty<'tcx>> {\n                 on_stack,\n             } => {\n                 assert!(!on_stack);\n-                EmptySinglePair::Pair(\n+                smallvec![\n                     AbiParam::new(pointer_ty(tcx)),\n                     AbiParam::new(pointer_ty(tcx)),\n-                )\n+                ]\n             }\n         }\n     }\n@@ -176,18 +122,18 @@ pub(super) fn adjust_arg_for_abi<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Module>,\n     arg: CValue<'tcx>,\n     arg_abi: &ArgAbi<'tcx, Ty<'tcx>>,\n-) -> EmptySinglePair<Value> {\n+) -> SmallVec<[Value; 2]> {\n     assert_assignable(fx, arg.layout().ty, arg_abi.layout.ty);\n     match arg_abi.mode {\n-        PassMode::Ignore => Empty,\n-        PassMode::Direct(_) => Single(arg.load_scalar(fx)),\n+        PassMode::Ignore => smallvec![],\n+        PassMode::Direct(_) => smallvec![arg.load_scalar(fx)],\n         PassMode::Pair(_, _) => {\n             let (a, b) = arg.load_scalar_pair(fx);\n-            Pair(a, b)\n+            smallvec![a, b]\n         }\n         PassMode::Cast(_) | PassMode::Indirect { .. } => match arg.force_stack(fx) {\n-            (ptr, None) => Single(ptr.get_addr(fx)),\n-            (ptr, Some(meta)) => Pair(ptr.get_addr(fx), meta),\n+            (ptr, None) => smallvec![ptr.get_addr(fx)],\n+            (ptr, Some(meta)) => smallvec![ptr.get_addr(fx), meta],\n         },\n     }\n }\n@@ -202,47 +148,57 @@ pub(super) fn cvalue_for_param<'tcx>(\n     arg_abi: &ArgAbi<'tcx, Ty<'tcx>>,\n ) -> Option<CValue<'tcx>> {\n     let clif_types = arg_abi.get_abi_param(fx.tcx);\n-    let block_params =\n-        clif_types.map(|abi_param| fx.bcx.append_block_param(start_block, abi_param.value_type));\n+    let block_params = clif_types\n+        .into_iter()\n+        .map(|abi_param| fx.bcx.append_block_param(start_block, abi_param.value_type))\n+        .collect::<SmallVec<[_; 2]>>();\n \n     #[cfg(debug_assertions)]\n     crate::abi::comments::add_arg_comment(\n         fx,\n         \"arg\",\n         local,\n         local_field,\n-        block_params,\n+        &block_params,\n         arg_abi.mode,\n         arg_abi.layout,\n     );\n \n     match arg_abi.mode {\n         PassMode::Ignore => None,\n         PassMode::Direct(_) => {\n-            Some(CValue::by_val(block_params.assert_single(), arg_abi.layout))\n+            assert_eq!(block_params.len(), 1, \"{:?}\", block_params);\n+            Some(CValue::by_val(block_params[0], arg_abi.layout))\n         }\n         PassMode::Pair(_, _) => {\n-            let (a, b) = block_params.assert_pair();\n-            Some(CValue::by_val_pair(a, b, arg_abi.layout))\n+            assert_eq!(block_params.len(), 2, \"{:?}\", block_params);\n+            Some(CValue::by_val_pair(\n+                block_params[0],\n+                block_params[1],\n+                arg_abi.layout,\n+            ))\n         }\n         PassMode::Cast(_)\n         | PassMode::Indirect {\n             attrs: _,\n             extra_attrs: None,\n             on_stack: _,\n-        } => Some(CValue::by_ref(\n-            Pointer::new(block_params.assert_single()),\n-            arg_abi.layout,\n-        )),\n+        } => {\n+            assert_eq!(block_params.len(), 1, \"{:?}\", block_params);\n+            Some(CValue::by_ref(\n+                Pointer::new(block_params[0]),\n+                arg_abi.layout,\n+            ))\n+        }\n         PassMode::Indirect {\n             attrs: _,\n             extra_attrs: Some(_),\n             on_stack: _,\n         } => {\n-            let (ptr, meta) = block_params.assert_pair();\n+            assert_eq!(block_params.len(), 2, \"{:?}\", block_params);\n             Some(CValue::by_ref_unsized(\n-                Pointer::new(ptr),\n-                meta,\n+                Pointer::new(block_params[0]),\n+                block_params[1],\n                 arg_abi.layout,\n             ))\n         }"}, {"sha": "8376f845734ba435f6521ac7c2bc81d7bde5d52f", "filename": "src/abi/returning.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d2634478781be741c872f33c7793797c081dc16f/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2634478781be741c872f33c7793797c081dc16f/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=d2634478781be741c872f33c7793797c081dc16f", "patch": "@@ -1,10 +1,10 @@\n //! Return value handling\n \n-use crate::abi::pass_mode::*;\n use crate::prelude::*;\n \n use rustc_middle::ty::layout::FnAbiExt;\n use rustc_target::abi::call::{ArgAbi, FnAbi, PassMode};\n+use smallvec::{SmallVec, smallvec};\n \n /// Can the given type be returned into an ssa var or does it need to be returned on the stack.\n pub(crate) fn can_return_to_ssa_var<'tcx>(\n@@ -62,10 +62,10 @@ pub(super) fn codegen_return_param<'tcx>(\n     ssa_analyzed: &rustc_index::vec::IndexVec<Local, crate::analyze::SsaKind>,\n     start_block: Block,\n ) -> CPlace<'tcx> {\n-    let (ret_place, ret_param) = match fx.fn_abi.as_ref().unwrap().ret.mode {\n+    let (ret_place, ret_param): (_, SmallVec<[_; 2]>) = match fx.fn_abi.as_ref().unwrap().ret.mode {\n         PassMode::Ignore => (\n             CPlace::no_place(fx.fn_abi.as_ref().unwrap().ret.layout),\n-            Empty,\n+            smallvec![],\n         ),\n         PassMode::Direct(_) | PassMode::Pair(_, _) => {\n             let is_ssa = ssa_analyzed[RETURN_PLACE] == crate::analyze::SsaKind::Ssa;\n@@ -76,7 +76,7 @@ pub(super) fn codegen_return_param<'tcx>(\n                     fx.fn_abi.as_ref().unwrap().ret.layout,\n                     is_ssa,\n                 ),\n-                Empty,\n+                smallvec![],\n             )\n         }\n         PassMode::Cast(_)\n@@ -91,7 +91,7 @@ pub(super) fn codegen_return_param<'tcx>(\n                     Pointer::new(ret_param),\n                     fx.fn_abi.as_ref().unwrap().ret.layout,\n                 ),\n-                Single(ret_param),\n+                smallvec![ret_param],\n             )\n         }\n         PassMode::Indirect {\n@@ -110,7 +110,7 @@ pub(super) fn codegen_return_param<'tcx>(\n         \"ret\",\n         Some(RETURN_PLACE),\n         None,\n-        ret_param,\n+        &ret_param,\n         fx.fn_abi.as_ref().unwrap().ret.mode,\n         fx.fn_abi.as_ref().unwrap().ret.layout,\n     );"}]}