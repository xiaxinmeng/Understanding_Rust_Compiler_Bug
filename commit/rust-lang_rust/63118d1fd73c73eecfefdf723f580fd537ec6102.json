{"sha": "63118d1fd73c73eecfefdf723f580fd537ec6102", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMTE4ZDFmZDczYzczZWVjZmVmZGY3MjNmNTgwZmQ1MzdlYzYxMDI=", "commit": {"author": {"name": "Thomas de Zeeuw", "email": "thomasdezeeuw@gmail.com", "date": "2020-04-06T09:21:15Z"}, "committer": {"name": "Thomas de Zeeuw", "email": "thomasdezeeuw@gmail.com", "date": "2020-04-06T09:21:15Z"}, "message": "Improve io::Write::write_all_vectored docs\n\nAlso adds some more tests with different length IoSlices.", "tree": {"sha": "92d61c5e02e2f99ce5d40921425c57f7f8c053b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92d61c5e02e2f99ce5d40921425c57f7f8c053b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63118d1fd73c73eecfefdf723f580fd537ec6102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63118d1fd73c73eecfefdf723f580fd537ec6102", "html_url": "https://github.com/rust-lang/rust/commit/63118d1fd73c73eecfefdf723f580fd537ec6102", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63118d1fd73c73eecfefdf723f580fd537ec6102/comments", "author": {"login": "Thomasdezeeuw", "id": 3159064, "node_id": "MDQ6VXNlcjMxNTkwNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3159064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thomasdezeeuw", "html_url": "https://github.com/Thomasdezeeuw", "followers_url": "https://api.github.com/users/Thomasdezeeuw/followers", "following_url": "https://api.github.com/users/Thomasdezeeuw/following{/other_user}", "gists_url": "https://api.github.com/users/Thomasdezeeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thomasdezeeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thomasdezeeuw/subscriptions", "organizations_url": "https://api.github.com/users/Thomasdezeeuw/orgs", "repos_url": "https://api.github.com/users/Thomasdezeeuw/repos", "events_url": "https://api.github.com/users/Thomasdezeeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/Thomasdezeeuw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Thomasdezeeuw", "id": 3159064, "node_id": "MDQ6VXNlcjMxNTkwNjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3159064?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thomasdezeeuw", "html_url": "https://github.com/Thomasdezeeuw", "followers_url": "https://api.github.com/users/Thomasdezeeuw/followers", "following_url": "https://api.github.com/users/Thomasdezeeuw/following{/other_user}", "gists_url": "https://api.github.com/users/Thomasdezeeuw/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thomasdezeeuw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thomasdezeeuw/subscriptions", "organizations_url": "https://api.github.com/users/Thomasdezeeuw/orgs", "repos_url": "https://api.github.com/users/Thomasdezeeuw/repos", "events_url": "https://api.github.com/users/Thomasdezeeuw/events{/privacy}", "received_events_url": "https://api.github.com/users/Thomasdezeeuw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba91e7e374b3becd24ea133e0858dca201b794cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba91e7e374b3becd24ea133e0858dca201b794cc", "html_url": "https://github.com/rust-lang/rust/commit/ba91e7e374b3becd24ea133e0858dca201b794cc"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "6a60f1e087cf296780376c517de32f67859357e5", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/63118d1fd73c73eecfefdf723f580fd537ec6102/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63118d1fd73c73eecfefdf723f580fd537ec6102/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=63118d1fd73c73eecfefdf723f580fd537ec6102", "patch": "@@ -1377,7 +1377,7 @@ pub trait Write {\n         Ok(())\n     }\n \n-    /// Attempts to write an multiple buffers into this writer.\n+    /// Attempts to write multiple buffers into this writer.\n     ///\n     /// This method will continuously call [`write_vectored`] until there is no\n     /// more data to be written or an error of non-[`ErrorKind::Interrupted`]\n@@ -1393,16 +1393,17 @@ pub trait Write {\n     ///\n     /// # Notes\n     ///\n-    /// Different to `io::Write::write_vectored` this takes a *mutable*\n-    /// reference to a slice of `IoSlice`s, not a non-mutable reference, because\n-    /// we need to modify the slice to keep track of the bytes already written.\n     ///\n-    /// Once this function returns the contents of `bufs` is unspecified, as we\n-    /// don't know what the contents of `bufs` will be as that depends on how\n-    /// many writes we needed to do. We advice to see this function as taking\n-    /// ownership of `bufs` and don't use the variable after the future returns.\n-    /// The underlying buffers, to which `IoSlice` points (not the `IoSlice`\n-    /// itself), are unchanged and can be reused.\n+    /// Unlike `io::Write::write_vectored`, this takes a *mutable* reference to\n+    /// a slice of `IoSlice`s, not an immutable one. That's because we need to\n+    /// modify the slice to keep track of the bytes already written.\n+    ///\n+    /// Once this function returns, the contents of `bufs` are unspecified, as\n+    /// this depends on how many calls to write_vectored were necessary. It is\n+    /// best to understand this function as taking ownership of `bufs` and to\n+    /// not use `bufs` afterwards. The underlying buffers, to which the\n+    /// `IoSlice`s point (but not the `IoSlice`s themselves), are unchanged and\n+    /// can be reused.\n     ///\n     /// # Examples\n     ///\n@@ -1432,7 +1433,7 @@ pub trait Write {\n                 Ok(0) => {\n                     return Err(Error::new(ErrorKind::WriteZero, \"failed to write whole buffer\"));\n                 }\n-                Ok(n) => bufs = IoSlice::advance(mem::replace(&mut bufs, &mut []), n),\n+                Ok(n) => bufs = IoSlice::advance(mem::take(&mut bufs), n),\n                 Err(ref e) if e.kind() == ErrorKind::Interrupted => {}\n                 Err(e) => return Err(e),\n             }\n@@ -2956,11 +2957,16 @@ mod tests {\n             (vec![IoSlice::new(&[1, 2, 3, 4])], &[1, 2, 3, 4]),\n             (vec![IoSlice::new(&[1, 2, 3, 4, 5])], &[1, 2, 3, 4, 5]),\n             (vec![IoSlice::new(&[1]), IoSlice::new(&[2])], &[1, 2]),\n+            (vec![IoSlice::new(&[1]), IoSlice::new(&[2, 2])], &[1, 2, 2]),\n             (vec![IoSlice::new(&[1, 1]), IoSlice::new(&[2, 2])], &[1, 1, 2, 2]),\n+            (vec![IoSlice::new(&[1, 1]), IoSlice::new(&[2, 2, 2])], &[1, 1, 2, 2, 2]),\n+            (vec![IoSlice::new(&[1, 1]), IoSlice::new(&[2, 2, 2])], &[1, 1, 2, 2, 2]),\n             (vec![IoSlice::new(&[1, 1, 1]), IoSlice::new(&[2, 2, 2])], &[1, 1, 1, 2, 2, 2]),\n+            (vec![IoSlice::new(&[1, 1, 1]), IoSlice::new(&[2, 2, 2, 2])], &[1, 1, 1, 2, 2, 2, 2]),\n             (vec![IoSlice::new(&[1, 1, 1, 1]), IoSlice::new(&[2, 2, 2, 2])], &[1, 1, 1, 1, 2, 2, 2, 2]),\n             (vec![IoSlice::new(&[1]), IoSlice::new(&[2]), IoSlice::new(&[3])], &[1, 2, 3]),\n             (vec![IoSlice::new(&[1, 1]), IoSlice::new(&[2, 2]), IoSlice::new(&[3, 3])], &[1, 1, 2, 2, 3, 3]),\n+            (vec![IoSlice::new(&[1]), IoSlice::new(&[2, 2]), IoSlice::new(&[3, 3, 3])], &[1, 2, 2, 3, 3, 3]),\n             (vec![IoSlice::new(&[1, 1, 1]), IoSlice::new(&[2, 2, 2]), IoSlice::new(&[3, 3, 3])], &[1, 1, 1, 2, 2, 2, 3, 3, 3]),\n         ];\n "}]}