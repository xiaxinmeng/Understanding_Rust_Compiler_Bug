{"sha": "dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYjdkZThlMGU2ZDMwNWIwZGM0MmMwZjMwYTBjMzg4YjQ5YjI0OTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-24T07:52:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-24T07:52:53Z"}, "message": "auto merge of #7334 : thestinger/rust/old_iter, r=Aatch\n\nthe `test/run-pass/class-trait-bounded-param.rs` test was xfailed and\r\nwritten in an ancient dialect of Rust so I've just removed it\r\n\r\nthis also removes `to_vec` from DList because it's provided by\r\n`std::iter::to_vec`\r\n\r\nan Iterator implementation is added for OptVec but some transitional\r\ninternal iterator methods are still left", "tree": {"sha": "e9344b5c6c03495dc5322e9bbf24d111b895e66c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9344b5c6c03495dc5322e9bbf24d111b895e66c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "html_url": "https://github.com/rust-lang/rust/commit/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "832fe327218e556740ba4e028b7b60cb41212469", "url": "https://api.github.com/repos/rust-lang/rust/commits/832fe327218e556740ba4e028b7b60cb41212469", "html_url": "https://github.com/rust-lang/rust/commit/832fe327218e556740ba4e028b7b60cb41212469"}, {"sha": "da1a9a30fd647dee99713b3ae3b65f006641c14e", "url": "https://api.github.com/repos/rust-lang/rust/commits/da1a9a30fd647dee99713b3ae3b65f006641c14e", "html_url": "https://github.com/rust-lang/rust/commit/da1a9a30fd647dee99713b3ae3b65f006641c14e"}], "stats": {"total": 1056, "additions": 257, "deletions": 799}, "files": [{"sha": "6e4507d4277ab9444a02af464b66c60a8eba7123", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -666,12 +666,8 @@ impl BitvSet {\n     pub fn symmetric_difference_with(&mut self, other: &BitvSet) {\n         self.other_op(other, |w1, w2| w1 ^ w2);\n     }\n-}\n-\n-impl BaseIter<uint> for BitvSet {\n-    fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n \n-    fn each(&self, blk: &fn(v: &uint) -> bool) -> bool {\n+    pub fn each(&self, blk: &fn(v: &uint) -> bool) -> bool {\n         for self.bitv.storage.iter().enumerate().advance |(i, &w)| {\n             if !iterate_bits(i * uint::bits, w, |b| blk(&b)) {\n                 return false;"}, {"sha": "1767aa8c397252932b84f819de987579c9e6824e", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 36, "deletions": 58, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -21,8 +21,6 @@ Do not use ==, !=, <, etc on doubly-linked lists -- it may not terminate.\n use core::prelude::*;\n \n use core::managed;\n-use core::old_iter;\n-use core::vec;\n \n pub type DListLink<T> = Option<@mut DListNode<T>>;\n \n@@ -213,6 +211,42 @@ impl<T> DList<T> {\n }\n \n impl<T> DList<T> {\n+    /**\n+     * Iterates through the current contents.\n+     *\n+     * Attempts to access this dlist during iteration are allowed (to\n+     * allow for e.g. breadth-first search with in-place enqueues), but\n+     * removing the current node is forbidden.\n+     */\n+    pub fn each(@mut self, f: &fn(v: &T) -> bool) -> bool {\n+        let mut link = self.peek_n();\n+        while link.is_some() {\n+            let nobe = link.get();\n+            assert!(nobe.linked);\n+\n+            {\n+                let frozen_nobe = &*nobe;\n+                if !f(&frozen_nobe.data) { return false; }\n+            }\n+\n+            // Check (weakly) that the user didn't do a remove.\n+            if self.size == 0 {\n+                fail!(\"The dlist became empty during iteration??\")\n+            }\n+            if !nobe.linked ||\n+                (!((nobe.prev.is_some()\n+                    || managed::mut_ptr_eq(self.hd.expect(\"headless dlist?\"),\n+                                           nobe))\n+                   && (nobe.next.is_some()\n+                    || managed::mut_ptr_eq(self.tl.expect(\"tailless dlist?\"),\n+                                           nobe)))) {\n+                fail!(\"Removing a dlist node during iteration is forbidden!\")\n+            }\n+            link = nobe.next_link();\n+        }\n+        return true;\n+    }\n+\n     /// Get the size of the list. O(1).\n     pub fn len(@mut self) -> uint { self.size }\n     /// Returns true if the list is empty. O(1).\n@@ -484,56 +518,6 @@ impl<T:Copy> DList<T> {\n \n     /// Get data at the list's tail, failing if empty. O(1).\n     pub fn tail(@mut self) -> T { copy self.tail_n().data }\n-\n-    /// Get the elements of the list as a vector. O(n).\n-    pub fn to_vec(@mut self) -> ~[T] {\n-        let mut v = vec::with_capacity(self.size);\n-        for old_iter::eachi(&self) |index,data| {\n-            v[index] = copy *data;\n-        }\n-        v\n-    }\n-}\n-\n-impl<T> BaseIter<T> for @mut DList<T> {\n-    /**\n-     * Iterates through the current contents.\n-     *\n-     * Attempts to access this dlist during iteration are allowed (to\n-     * allow for e.g. breadth-first search with in-place enqueues), but\n-     * removing the current node is forbidden.\n-     */\n-    fn each(&self, f: &fn(v: &T) -> bool) -> bool {\n-        let mut link = self.peek_n();\n-        while link.is_some() {\n-            let nobe = link.get();\n-            assert!(nobe.linked);\n-\n-            {\n-                let frozen_nobe = &*nobe;\n-                if !f(&frozen_nobe.data) { return false; }\n-            }\n-\n-            // Check (weakly) that the user didn't do a remove.\n-            if self.size == 0 {\n-                fail!(\"The dlist became empty during iteration??\")\n-            }\n-            if !nobe.linked ||\n-                (!((nobe.prev.is_some()\n-                    || managed::mut_ptr_eq(self.hd.expect(\"headless dlist?\"),\n-                                           nobe))\n-                   && (nobe.next.is_some()\n-                    || managed::mut_ptr_eq(self.tl.expect(\"tailless dlist?\"),\n-                                           nobe)))) {\n-                fail!(\"Removing a dlist node during iteration is forbidden!\")\n-            }\n-            link = nobe.next_link();\n-        }\n-        return true;\n-    }\n-\n-    #[inline]\n-    fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n }\n \n #[cfg(test)]\n@@ -542,7 +526,6 @@ mod tests {\n \n     use super::*;\n \n-    use core::old_iter;\n     use core::vec;\n \n     #[test]\n@@ -759,11 +742,6 @@ mod tests {\n         assert_eq!(l.len(), 3);\n     }\n     #[test]\n-    fn test_dlist_foldl() {\n-        let l = from_vec(vec::from_fn(101, |x|x));\n-        assert_eq!(old_iter::foldl(&l, 0, |accum,elem| *accum+*elem), 5050);\n-    }\n-    #[test]\n     fn test_dlist_break_early() {\n         let l = from_vec([1,2,3,4,5]);\n         let mut x = 0;"}, {"sha": "4e201a6538ba428cc75b59bd971c09dc66e5a452", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -14,25 +14,15 @@\n \n use core::prelude::*;\n \n-use core::old_iter::BaseIter;\n use core::unstable::intrinsics::{move_val_init, init};\n use core::util::{replace, swap};\n use core::vec;\n \n-#[allow(missing_doc)]\n+/// A priority queue implemented with a binary heap\n pub struct PriorityQueue<T> {\n     priv data: ~[T],\n }\n \n-impl<T:Ord> BaseIter<T> for PriorityQueue<T> {\n-    /// Visit all values in the underlying vector.\n-    ///\n-    /// The values are **not** visited in order.\n-    fn each(&self, f: &fn(&T) -> bool) -> bool { self.data.iter().advance(f) }\n-\n-    fn size_hint(&self) -> Option<uint> { Some(self.data.len()) }\n-}\n-\n impl<T:Ord> Container for PriorityQueue<T> {\n     /// Returns the length of the queue\n     fn len(&self) -> uint { self.data.len() }\n@@ -47,6 +37,11 @@ impl<T:Ord> Mutable for PriorityQueue<T> {\n }\n \n impl<T:Ord> PriorityQueue<T> {\n+    /// Visit all values in the underlying vector.\n+    ///\n+    /// The values are **not** visited in order.\n+    pub fn each(&self, f: &fn(&T) -> bool) -> bool { self.data.iter().advance(f) }\n+\n     /// Returns the greatest item in the queue - fails if empty\n     pub fn top<'a>(&'a self) -> &'a T { &self.data[0] }\n "}, {"sha": "17126f0d32b5357e99f7c8d3f32c54a0fc788f89", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -19,8 +19,6 @@ use core::prelude::*;\n \n use core::cmp;\n use core::container::{Container, Mutable, Map, Set};\n-use core::old_iter::BaseIter;\n-use core::old_iter;\n use core::uint;\n use core::util::replace;\n use core::vec;\n@@ -212,12 +210,6 @@ impl Mutable for SmallIntSet {\n     fn clear(&mut self) { self.map.clear() }\n }\n \n-impl BaseIter<uint> for SmallIntSet {\n-    /// Visit all values in order\n-    fn each(&self, f: &fn(&uint) -> bool) -> bool { self.map.each_key(f) }\n-    fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n-}\n-\n impl Set<uint> for SmallIntSet {\n     /// Return true if the set contains a value\n     fn contains(&self, value: &uint) -> bool { self.map.contains_key(value) }\n@@ -233,12 +225,14 @@ impl Set<uint> for SmallIntSet {\n     /// Return true if the set has no elements in common with `other`.\n     /// This is equivalent to checking for an empty uintersection.\n     fn is_disjoint(&self, other: &SmallIntSet) -> bool {\n-        old_iter::all(self, |v| !other.contains(v))\n+        for self.each |v| { if other.contains(v) { return false } }\n+        true\n     }\n \n     /// Return true if the set is a subset of another\n     fn is_subset(&self, other: &SmallIntSet) -> bool {\n-        old_iter::all(self, |v| other.contains(v))\n+        for self.each |v| { if !other.contains(v) { return false } }\n+        true\n     }\n \n     /// Return true if the set is a superset of another\n@@ -286,6 +280,9 @@ impl Set<uint> for SmallIntSet {\n impl SmallIntSet {\n     /// Create an empty SmallIntSet\n     pub fn new() -> SmallIntSet { SmallIntSet{map: SmallIntMap::new()} }\n+\n+    /// Visit all values in order\n+    pub fn each(&self, f: &fn(&uint) -> bool) -> bool { self.map.each_key(f) }\n }\n \n #[cfg(test)]"}, {"sha": "4929dea9045bff8f9d788603f2cb15594252597d", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -249,22 +249,6 @@ pub struct TreeSet<T> {\n     priv map: TreeMap<T, ()>\n }\n \n-impl<T: TotalOrd> BaseIter<T> for TreeSet<T> {\n-    /// Visit all values in order\n-    #[inline]\n-    fn each(&self, f: &fn(&T) -> bool) -> bool { self.map.each_key(f) }\n-    #[inline]\n-    fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n-}\n-\n-impl<T: TotalOrd> ReverseIter<T> for TreeSet<T> {\n-    /// Visit all values in reverse order\n-    #[inline]\n-    fn each_reverse(&self, f: &fn(&T) -> bool) -> bool {\n-        self.map.each_key_reverse(f)\n-    }\n-}\n-\n impl<T: Eq + TotalOrd> Eq for TreeSet<T> {\n     #[inline]\n     fn eq(&self, other: &TreeSet<T>) -> bool { self.map == other.map }\n@@ -499,6 +483,16 @@ impl<T: TotalOrd> TreeSet<T> {\n     pub fn iter<'a>(&'a self) -> TreeSetIterator<'a, T> {\n         TreeSetIterator{iter: self.map.iter()}\n     }\n+\n+    /// Visit all values in order\n+    #[inline]\n+    pub fn each(&self, f: &fn(&T) -> bool) -> bool { self.map.each_key(f) }\n+\n+    /// Visit all values in reverse order\n+    #[inline]\n+    pub fn each_reverse(&self, f: &fn(&T) -> bool) -> bool {\n+        self.map.each_key_reverse(f)\n+    }\n }\n \n /// Lazy forward iterator over a set"}, {"sha": "1f2ede670fa1b0461e3cfc43bc03875af4cb5998", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -731,8 +731,8 @@ fn encode_info_for_method(ecx: &EncodeContext,\n     }\n \n     let mut combined_ty_params = opt_vec::Empty;\n-    combined_ty_params.push_all(&owner_generics.ty_params);\n-    combined_ty_params.push_all(&method_generics.ty_params);\n+    for owner_generics.ty_params.each |x| { combined_ty_params.push(copy *x) }\n+    for method_generics.ty_params.each |x| { combined_ty_params.push(copy *x) }\n     let len = combined_ty_params.len();\n     encode_type_param_bounds(ebml_w, ecx, &combined_ty_params);\n "}, {"sha": "7396dc1bd7bff0c66e8d439d14c6ebc4a3b35d99", "filename": "src/librustc/middle/borrowck/move_data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmove_data.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -507,7 +507,7 @@ impl FlowedMoveData {\n         for self.dfcx_moves.each_bit_on_entry_frozen(id) |index| {\n             let move = &self.move_data.moves[index];\n             let moved_path = move.path;\n-            if base_indices.contains(&moved_path) {\n+            if base_indices.iter().any_(|x| x == &moved_path) {\n                 // Scenario 1 or 2: `loan_path` or some base path of\n                 // `loan_path` was moved.\n                 if !f(move, self.move_data.path(moved_path).loan_path) {\n@@ -536,7 +536,7 @@ impl FlowedMoveData {\n                        -> bool {\n         //! True if `id` is the id of the LHS of an assignment\n \n-        self.move_data.assignee_ids.contains(&id)\n+        self.move_data.assignee_ids.iter().any_(|x| x == &id)\n     }\n \n     pub fn each_assignment_of(&self,"}, {"sha": "562bbca69297b7d0c87307e7de919116e1440923", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -3710,7 +3710,7 @@ impl Resolver {\n                 let function_type_rib = @Rib(rib_kind);\n                 self.type_ribs.push(function_type_rib);\n \n-                for generics.ty_params.eachi |index, type_parameter| {\n+                for generics.ty_params.iter().enumerate().advance |(index, type_parameter)| {\n                     let name = type_parameter.ident;\n                     debug!(\"with_type_parameter_rib: %d %d\", node_id,\n                            type_parameter.id);"}, {"sha": "b871ed3d57afb23cb8dbc2663e3ed54820d4d342", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -14,7 +14,6 @@ use cast::transmute;\n use container::Container;\n use iterator::IteratorUtil;\n use kinds::Copy;\n-use old_iter;\n use option::Option;\n use sys;\n use uint;\n@@ -129,7 +128,7 @@ pub fn map<T, U>(v: &[T], f: &fn(x: &T) -> U) -> @[U] {\n  * Creates an immutable vector of size `n_elts` and initializes the elements\n  * to the value returned by the function `op`.\n  */\n-pub fn from_fn<T>(n_elts: uint, op: old_iter::InitOp<T>) -> @[T] {\n+pub fn from_fn<T>(n_elts: uint, op: &fn(uint) -> T) -> @[T] {\n     do build_sized(n_elts) |push| {\n         let mut i: uint = 0u;\n         while i < n_elts { push(op(i)); i += 1u; }"}, {"sha": "046693632c6047c5b9f1d61fd1896424235c792a", "filename": "src/libstd/clone.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fclone.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -56,6 +56,18 @@ impl<'self, T> Clone for &'self T {\n     fn clone(&self) -> &'self T { *self }\n }\n \n+impl<'self, T> Clone for &'self [T] {\n+    /// Return a shallow copy of the slice.\n+    #[inline]\n+    fn clone(&self) -> &'self [T] { *self }\n+}\n+\n+impl<'self> Clone for &'self str {\n+    /// Return a shallow copy of the slice.\n+    #[inline]\n+    fn clone(&self) -> &'self str { *self }\n+}\n+\n macro_rules! clone_impl(\n     ($t:ty) => {\n         impl Clone for $t {"}, {"sha": "13c54799fac4d75c1b40941b00d34828523a6171", "filename": "src/libstd/core.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcore.rc?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -138,7 +138,6 @@ pub mod from_str;\n #[path = \"num/num.rs\"]\n pub mod num;\n pub mod iter;\n-pub mod old_iter;\n pub mod iterator;\n pub mod to_str;\n pub mod to_bytes;"}, {"sha": "d96191f296d77e9e088df36898b5d381ddf8bdaf", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -20,7 +20,7 @@ implementing the `Iterator` trait.\n #[allow(default_methods)]; // solid enough for the use case here\n \n use cmp;\n-use iter::{FromIter, Times};\n+use iter::Times;\n use num::{Zero, One};\n use option::{Option, Some, None};\n use ops::{Add, Mul};\n@@ -240,7 +240,7 @@ pub trait IteratorUtil<A> {\n     fn advance(&mut self, f: &fn(A) -> bool) -> bool;\n \n     /// Loops through the entire iterator, collecting all of the elements into\n-    /// a container implementing `FromIter`.\n+    /// a container implementing `FromIterator`.\n     ///\n     /// # Example\n     ///\n@@ -249,7 +249,7 @@ pub trait IteratorUtil<A> {\n     /// let b: ~[int] = a.iter().transform(|&x| x).collect();\n     /// assert!(a == b);\n     /// ~~~\n-    fn collect<B: FromIter<A>>(&mut self) -> B;\n+    fn collect<B: FromIterator<A, Self>>(&mut self) -> B;\n \n     /// Loops through `n` iterations, returning the `n`th element of the\n     /// iterator.\n@@ -411,8 +411,8 @@ impl<A, T: Iterator<A>> IteratorUtil<A> for T {\n     }\n \n     #[inline]\n-    fn collect<B: FromIter<A>>(&mut self) -> B {\n-        FromIter::from_iter::<A, B>(|f| self.advance(f))\n+    fn collect<B: FromIterator<A, T>>(&mut self) -> B {\n+        FromIterator::from_iterator(self)\n     }\n \n     /// Return the `n`th item yielded by an iterator."}, {"sha": "9b87d76a309d030d26bc7987d9d6eb9213219f24", "filename": "src/libstd/old_iter.rs", "status": "removed", "additions": 0, "deletions": 296, "changes": 296, "blob_url": "https://github.com/rust-lang/rust/blob/832fe327218e556740ba4e028b7b60cb41212469/src%2Flibstd%2Fold_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832fe327218e556740ba4e028b7b60cb41212469/src%2Flibstd%2Fold_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_iter.rs?ref=832fe327218e556740ba4e028b7b60cb41212469", "patch": "@@ -1,296 +0,0 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-/*!\n-\n-**Deprecated** iteration traits and common implementations.\n-\n-*/\n-\n-#[allow(missing_doc)];\n-\n-use cmp::Eq;\n-use kinds::Copy;\n-use option::{None, Option, Some};\n-use vec;\n-\n-/// A function used to initialize the elements of a sequence\n-pub type InitOp<'self,T> = &'self fn(uint) -> T;\n-\n-pub trait BaseIter<A> {\n-    fn each(&self, blk: &fn(v: &A) -> bool) -> bool;\n-    fn size_hint(&self) -> Option<uint>;\n-}\n-\n-pub trait ReverseIter<A>: BaseIter<A> {\n-    fn each_reverse(&self, blk: &fn(&A) -> bool) -> bool;\n-}\n-\n-pub trait ExtendedIter<A> {\n-    fn eachi(&self, blk: &fn(uint, v: &A) -> bool) -> bool;\n-    fn all(&self, blk: &fn(&A) -> bool) -> bool;\n-    fn any(&self, blk: &fn(&A) -> bool) -> bool;\n-    fn foldl<B>(&self, b0: B, blk: &fn(&B, &A) -> B) -> B;\n-    fn position(&self, f: &fn(&A) -> bool) -> Option<uint>;\n-    fn map_to_vec<B>(&self, op: &fn(&A) -> B) -> ~[B];\n-    fn flat_map_to_vec<B,IB: BaseIter<B>>(&self, op: &fn(&A) -> IB) -> ~[B];\n-}\n-\n-pub trait EqIter<A:Eq> {\n-    fn contains(&self, x: &A) -> bool;\n-    fn count(&self, x: &A) -> uint;\n-}\n-\n-pub trait CopyableIter<A:Copy> {\n-    fn filter_to_vec(&self, pred: &fn(&A) -> bool) -> ~[A];\n-    fn to_vec(&self) -> ~[A];\n-    fn find(&self, p: &fn(&A) -> bool) -> Option<A>;\n-}\n-\n-// A trait for sequences that can be built by imperatively pushing elements\n-// onto them.\n-pub trait Buildable<A> {\n-    /**\n-     * Builds a buildable sequence by calling a provided function with\n-     * an argument function that pushes an element onto the back of\n-     * the sequence.\n-     * This version takes an initial size for the sequence.\n-     *\n-     * # Arguments\n-     *\n-     * * size - A hint for an initial size of the sequence\n-     * * builder - A function that will construct the sequence. It receives\n-     *             as an argument a function that will push an element\n-     *             onto the sequence being constructed.\n-     */\n-     fn build_sized(size: uint, builder: &fn(push: &fn(A))) -> Self;\n-}\n-\n-#[inline]\n-pub fn _eachi<A,IA:BaseIter<A>>(this: &IA, blk: &fn(uint, &A) -> bool) -> bool {\n-    let mut i = 0;\n-    for this.each |a| {\n-        if !blk(i, a) {\n-            return false;\n-        }\n-        i += 1;\n-    }\n-    return true;\n-}\n-\n-pub fn eachi<A,IA:BaseIter<A>>(this: &IA, blk: &fn(uint, &A) -> bool) -> bool {\n-    _eachi(this, blk)\n-}\n-\n-#[inline]\n-pub fn all<A,IA:BaseIter<A>>(this: &IA, blk: &fn(&A) -> bool) -> bool {\n-    for this.each |a| {\n-        if !blk(a) {\n-            return false;\n-        }\n-    }\n-    return true;\n-}\n-\n-#[inline]\n-pub fn any<A,IA:BaseIter<A>>(this: &IA, blk: &fn(&A) -> bool) -> bool {\n-    for this.each |a| {\n-        if blk(a) {\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n-\n-#[inline]\n-pub fn filter_to_vec<A:Copy,IA:BaseIter<A>>(this: &IA,\n-                                            prd: &fn(&A) -> bool)\n-                                         -> ~[A] {\n-    do vec::build_sized_opt(this.size_hint()) |push| {\n-        for this.each |a| {\n-            if prd(a) { push(copy *a); }\n-        }\n-    }\n-}\n-\n-#[inline]\n-pub fn map_to_vec<A,B,IA:BaseIter<A>>(this: &IA, op: &fn(&A) -> B) -> ~[B] {\n-    do vec::build_sized_opt(this.size_hint()) |push| {\n-        for this.each |a| {\n-            push(op(a));\n-        }\n-    }\n-}\n-\n-#[inline]\n-pub fn flat_map_to_vec<A,B,IA:BaseIter<A>,IB:BaseIter<B>>(this: &IA,\n-                                                          op: &fn(&A) -> IB)\n-                                                       -> ~[B] {\n-    do vec::build |push| {\n-        for this.each |a| {\n-            for op(a).each |&b| {\n-                push(b);\n-            }\n-        }\n-    }\n-}\n-\n-#[inline]\n-pub fn foldl<A,B,IA:BaseIter<A>>(this: &IA, b0: B, blk: &fn(&B, &A) -> B)\n-                              -> B {\n-    let mut b = b0;\n-    for this.each |a| {\n-        b = blk(&b, a);\n-    }\n-    b\n-}\n-\n-#[inline]\n-pub fn to_vec<A:Copy,IA:BaseIter<A>>(this: &IA) -> ~[A] {\n-    map_to_vec(this, |&x| x)\n-}\n-\n-#[inline]\n-pub fn contains<A:Eq,IA:BaseIter<A>>(this: &IA, x: &A) -> bool {\n-    for this.each |a| {\n-        if *a == *x { return true; }\n-    }\n-    return false;\n-}\n-\n-#[inline]\n-pub fn count<A:Eq,IA:BaseIter<A>>(this: &IA, x: &A) -> uint {\n-    do foldl(this, 0) |count, value| {\n-        if *value == *x {\n-            *count + 1\n-        } else {\n-            *count\n-        }\n-    }\n-}\n-\n-#[inline]\n-pub fn position<A,IA:BaseIter<A>>(this: &IA, f: &fn(&A) -> bool)\n-                               -> Option<uint> {\n-    let mut i = 0;\n-    for this.each |a| {\n-        if f(a) { return Some(i); }\n-        i += 1;\n-    }\n-    return None;\n-}\n-\n-#[inline]\n-pub fn find<A:Copy,IA:BaseIter<A>>(this: &IA, f: &fn(&A) -> bool)\n-                                -> Option<A> {\n-    for this.each |i| {\n-        if f(i) { return Some(copy *i) }\n-    }\n-    return None;\n-}\n-\n-// Some functions for just building\n-\n-/**\n- * Builds a sequence by calling a provided function with an argument\n- * function that pushes an element to the back of a sequence.\n- *\n- * # Arguments\n- *\n- * * builder - A function that will construct the sequence. It receives\n- *             as an argument a function that will push an element\n- *             onto the sequence being constructed.\n- */\n-#[inline]\n-pub fn build<A,B: Buildable<A>>(builder: &fn(push: &fn(A))) -> B {\n-    Buildable::build_sized(4, builder)\n-}\n-\n-/**\n- * Builds a sequence by calling a provided function with an argument\n- * function that pushes an element to the back of the sequence.\n- * This version takes an initial size for the sequence.\n- *\n- * # Arguments\n- *\n- * * size - An option, maybe containing initial size of the sequence\n- *          to reserve.\n- * * builder - A function that will construct the sequence. It receives\n- *             as an argument a function that will push an element\n- *             onto the sequence being constructed.\n- */\n-#[inline]\n-pub fn build_sized_opt<A,B: Buildable<A>>(size: Option<uint>,\n-                                          builder: &fn(push: &fn(A))) -> B {\n-    Buildable::build_sized(size.get_or_default(4), builder)\n-}\n-\n-// Functions that combine iteration and building\n-\n-/// Applies a function to each element of an iterable and returns the results\n-/// in a sequence built via `BU`.  See also `map_to_vec`.\n-#[inline]\n-pub fn map<T,IT: BaseIter<T>,U,BU: Buildable<U>>(v: &IT, f: &fn(&T) -> U)\n-    -> BU {\n-    do build_sized_opt(v.size_hint()) |push| {\n-        for v.each() |elem| {\n-            push(f(elem));\n-        }\n-    }\n-}\n-\n-/**\n- * Creates and initializes a generic sequence from a function.\n- *\n- * Creates a generic sequence of size `n_elts` and initializes the elements\n- * to the value returned by the function `op`.\n- */\n-#[inline]\n-pub fn from_fn<T,BT: Buildable<T>>(n_elts: uint, op: InitOp<T>) -> BT {\n-    do Buildable::build_sized(n_elts) |push| {\n-        let mut i: uint = 0u;\n-        while i < n_elts { push(op(i)); i += 1u; }\n-    }\n-}\n-\n-/**\n- * Creates and initializes a generic sequence with some elements.\n- *\n- * Creates an immutable vector of size `n_elts` and initializes the elements\n- * to the value `t`.\n- */\n-#[inline]\n-pub fn from_elem<T:Copy,BT:Buildable<T>>(n_elts: uint, t: T) -> BT {\n-    do Buildable::build_sized(n_elts) |push| {\n-        let mut i: uint = 0;\n-        while i < n_elts { push(copy t); i += 1; }\n-    }\n-}\n-\n-/// Appends two generic sequences.\n-#[inline]\n-pub fn append<T:Copy,IT:BaseIter<T>,BT:Buildable<T>>(lhs: &IT, rhs: &IT)\n-                                                  -> BT {\n-    let size_opt = lhs.size_hint().chain_ref(\n-        |sz1| rhs.size_hint().map(|sz2| *sz1+*sz2));\n-    do build_sized_opt(size_opt) |push| {\n-        for lhs.each |x| { push(copy *x); }\n-        for rhs.each |x| { push(copy *x); }\n-    }\n-}\n-\n-/// Copies a generic sequence, possibly converting it to a different\n-/// type of sequence.\n-#[inline]\n-pub fn copy_seq<T:Copy,IT:BaseIter<T>,BT:Buildable<T>>(v: &IT) -> BT {\n-    do build_sized_opt(v.size_hint()) |push| {\n-        for v.each |x| { push(copy *x); }\n-    }\n-}"}, {"sha": "6d7cb2a28a88d7e27d155a1231dee5dd14d39fda", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -46,8 +46,6 @@ pub use cmp::{Eq, ApproxEq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Great\n pub use char::Char;\n pub use container::{Container, Mutable, Map, Set};\n pub use hash::Hash;\n-pub use old_iter::{BaseIter, ReverseIter, ExtendedIter, EqIter};\n-pub use old_iter::CopyableIter;\n pub use iter::{Times, FromIter};\n pub use iterator::{Iterator, IteratorUtil, OrdIterator};\n pub use num::{Num, NumCast};"}, {"sha": "f4a79934e7e43812ba2c58c20e701d26d1e8ceda", "filename": "src/libstd/rt/uvio.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Frt%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Frt%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuvio.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -15,7 +15,6 @@ use super::io::net::ip::IpAddr;\n use super::uv::*;\n use super::rtio::*;\n use ops::Drop;\n-use old_iter::CopyableIter;\n use cell::Cell;\n use cast::transmute;\n use super::sched::{Scheduler, local_sched};"}, {"sha": "16c287c1da82387fc063a3103254a506ba46529c", "filename": "src/libstd/str.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -29,7 +29,6 @@ use iterator::{Iterator, IteratorUtil, FilterIterator, AdditiveIterator, MapIter\n use libc;\n use num::Zero;\n use option::{None, Option, Some};\n-use old_iter::EqIter;\n use ptr;\n use ptr::RawPtr;\n use to_str::ToStr;\n@@ -2225,7 +2224,6 @@ mod tests {\n     use option::Some;\n     use libc::c_char;\n     use libc;\n-    use old_iter::BaseIter;\n     use ptr;\n     use str::*;\n     use vec;"}, {"sha": "9f812288621362542d23bc15f648891c217d2018", "filename": "src/libstd/to_str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_str.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -21,7 +21,6 @@ use iterator::IteratorUtil;\n use container::Map;\n use hash::Hash;\n use cmp::Eq;\n-use old_iter::BaseIter;\n use vec::ImmutableVector;\n use iterator::IteratorUtil;\n "}, {"sha": "e6449ef49229c730dc54904d3825cdae1e80129c", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -176,22 +176,6 @@ pub struct TrieSet {\n     priv map: TrieMap<()>\n }\n \n-impl BaseIter<uint> for TrieSet {\n-    /// Visit all values in order\n-    #[inline]\n-    fn each(&self, f: &fn(&uint) -> bool) -> bool { self.map.each_key(f) }\n-    #[inline]\n-    fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n-}\n-\n-impl ReverseIter<uint> for TrieSet {\n-    /// Visit all values in reverse order\n-    #[inline]\n-    fn each_reverse(&self, f: &fn(&uint) -> bool) -> bool {\n-        self.map.each_key_reverse(f)\n-    }\n-}\n-\n impl Container for TrieSet {\n     /// Return the number of elements in the set\n     #[inline]\n@@ -234,6 +218,16 @@ impl TrieSet {\n     pub fn remove(&mut self, value: &uint) -> bool {\n         self.map.remove(value)\n     }\n+\n+    /// Visit all values in order\n+    #[inline]\n+    pub fn each(&self, f: &fn(&uint) -> bool) -> bool { self.map.each_key(f) }\n+\n+    /// Visit all values in reverse order\n+    #[inline]\n+    pub fn each_reverse(&self, f: &fn(&uint) -> bool) -> bool {\n+        self.map.each_key_reverse(f)\n+    }\n }\n \n struct TrieNode<T> {"}, {"sha": "7b7a3020b9394ce300cd1bcaaccf5756823116b9", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -17,7 +17,6 @@ use cast;\n use container::{Container, Mutable};\n use cmp::{Eq, Ord, TotalEq, TotalOrd, Ordering, Less, Equal, Greater};\n use clone::Clone;\n-use old_iter;\n use iterator::{FromIterator, Iterator, IteratorUtil};\n use iter::FromIter;\n use kinds::Copy;\n@@ -124,7 +123,7 @@ pub fn capacity<T>(v: &const ~[T]) -> uint {\n  * Creates an owned vector of size `n_elts` and initializes the elements\n  * to the value returned by the function `op`.\n  */\n-pub fn from_fn<T>(n_elts: uint, op: old_iter::InitOp<T>) -> ~[T] {\n+pub fn from_fn<T>(n_elts: uint, op: &fn(uint) -> T) -> ~[T] {\n     unsafe {\n         let mut v = with_capacity(n_elts);\n         do as_mut_buf(v) |p, _len| {\n@@ -815,7 +814,7 @@ pub fn grow<T:Copy>(v: &mut ~[T], n: uint, initval: &T) {\n  * * init_op - A function to call to retreive each appended element's\n  *             value\n  */\n-pub fn grow_fn<T>(v: &mut ~[T], n: uint, op: old_iter::InitOp<T>) {\n+pub fn grow_fn<T>(v: &mut ~[T], n: uint, op: &fn(uint) -> T) {\n     let new_len = v.len() + n;\n     reserve_at_least(&mut *v, new_len);\n     let mut i: uint = 0u;\n@@ -1985,7 +1984,7 @@ pub trait OwnedVector<T> {\n     fn consume_reverse(self, f: &fn(uint, v: T));\n     fn filter(self, f: &fn(t: &T) -> bool) -> ~[T];\n     fn partition(self, f: &fn(&T) -> bool) -> (~[T], ~[T]);\n-    fn grow_fn(&mut self, n: uint, op: old_iter::InitOp<T>);\n+    fn grow_fn(&mut self, n: uint, op: &fn(uint) -> T);\n }\n \n impl<T> OwnedVector<T> for ~[T] {\n@@ -2064,7 +2063,7 @@ impl<T> OwnedVector<T> for ~[T] {\n     }\n \n     #[inline]\n-    fn grow_fn(&mut self, n: uint, op: old_iter::InitOp<T>) {\n+    fn grow_fn(&mut self, n: uint, op: &fn(uint) -> T) {\n         grow_fn(self, n, op);\n     }\n }\n@@ -2501,7 +2500,17 @@ impl<T> FromIter<T> for ~[T]{\n     }\n }\n \n-#[cfg(not(stage0))]\n+impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n+    pub fn from_iterator(iterator: &mut T) -> ~[A] {\n+        let mut xs = ~[];\n+        for iterator.advance |x| {\n+            xs.push(x);\n+        }\n+        xs\n+    }\n+}\n+\n+/* FIXME: #7341 - ICE\n impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n     pub fn from_iterator(iterator: &mut T) -> ~[A] {\n         let (lower, _) = iterator.size_hint();\n@@ -2512,6 +2521,7 @@ impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n         xs\n     }\n }\n+*/\n \n #[cfg(test)]\n mod tests {"}, {"sha": "55ac9c5ec1c82089078f9b985b5c2dd60b685639", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -375,7 +375,7 @@ impl gen_init for protocol {\n         let mut params: OptVec<ast::TyParam> = opt_vec::Empty;\n         for (copy self.states).iter().advance |s| {\n             for s.generics.ty_params.each |tp| {\n-                match params.find(|tpp| tp.ident == tpp.ident) {\n+                match params.iter().find_(|tpp| tp.ident == tpp.ident) {\n                   None => params.push(*tp),\n                   _ => ()\n                 }\n@@ -393,7 +393,7 @@ impl gen_init for protocol {\n         let mut params: OptVec<ast::TyParam> = opt_vec::Empty;\n         let fields = do (copy self.states).iter().transform |s| {\n             for s.generics.ty_params.each |tp| {\n-                match params.find(|tpp| tp.ident == tpp.ident) {\n+                match params.iter().find_(|tpp| tp.ident == tpp.ident) {\n                   None => params.push(*tp),\n                   _ => ()\n                 }"}, {"sha": "8917b481dc726063c51c1ed1b24687934e1d1011", "filename": "src/libsyntax/opt_vec.rs", "status": "modified", "additions": 38, "deletions": 79, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibsyntax%2Fopt_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Flibsyntax%2Fopt_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fopt_vec.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -17,9 +17,7 @@\n  */\n \n use core::prelude::*;\n-\n-use core::old_iter;\n-use core::old_iter::BaseIter;\n+use core::vec::VecIterator;\n \n #[deriving(Encodable, Decodable)]\n pub enum OptVec<T> {\n@@ -40,6 +38,13 @@ pub fn from<T>(t: ~[T]) -> OptVec<T> {\n }\n \n impl<T> OptVec<T> {\n+    fn each(&self, blk: &fn(v: &T) -> bool) -> bool {\n+        match *self {\n+            Empty => true,\n+            Vec(ref v) => v.iter().advance(blk)\n+        }\n+    }\n+\n     fn push(&mut self, t: T) {\n         match *self {\n             Vec(ref mut v) => {\n@@ -78,6 +83,28 @@ impl<T> OptVec<T> {\n             Vec(ref v) => v.len()\n         }\n     }\n+\n+    #[inline]\n+    fn iter<'r>(&'r self) -> OptVecIterator<'r, T> {\n+        match *self {\n+            Empty => OptVecIterator{iter: None},\n+            Vec(ref v) => OptVecIterator{iter: Some(v.iter())}\n+        }\n+    }\n+\n+    #[inline]\n+    fn map_to_vec<B>(&self, op: &fn(&T) -> B) -> ~[B] {\n+        self.iter().transform(op).collect()\n+    }\n+\n+    fn mapi_to_vec<B>(&self, op: &fn(uint, &T) -> B) -> ~[B] {\n+        let mut index = 0;\n+        self.map_to_vec(|a| {\n+            let i = index;\n+            index += 1;\n+            op(i, a)\n+        })\n+    }\n }\n \n pub fn take_vec<T>(v: OptVec<T>) -> ~[T] {\n@@ -96,22 +123,6 @@ impl<T:Copy> OptVec<T> {\n         }\n         return Vec(v0);\n     }\n-\n-    fn push_all<I: BaseIter<T>>(&mut self, from: &I) {\n-        for from.each |e| {\n-            self.push(copy *e);\n-        }\n-    }\n-\n-    #[inline]\n-    fn mapi_to_vec<B>(&self, op: &fn(uint, &T) -> B) -> ~[B] {\n-        let mut index = 0;\n-        old_iter::map_to_vec(self, |a| {\n-            let i = index;\n-            index += 1;\n-            op(i, a)\n-        })\n-    }\n }\n \n impl<A:Eq> Eq for OptVec<A> {\n@@ -131,68 +142,16 @@ impl<A:Eq> Eq for OptVec<A> {\n     }\n }\n \n-impl<A> BaseIter<A> for OptVec<A> {\n-    fn each(&self, blk: &fn(v: &A) -> bool) -> bool {\n-        match *self {\n-            Empty => true,\n-            Vec(ref v) => v.iter().advance(blk)\n-        }\n-    }\n-\n-    fn size_hint(&self) -> Option<uint> {\n-        Some(self.len())\n-    }\n+pub struct OptVecIterator<'self, T> {\n+    priv iter: Option<VecIterator<'self, T>>\n }\n \n-impl<A> old_iter::ExtendedIter<A> for OptVec<A> {\n+impl<'self, T> Iterator<&'self T> for OptVecIterator<'self, T> {\n     #[inline]\n-    fn eachi(&self, blk: &fn(v: uint, v: &A) -> bool) -> bool {\n-        old_iter::eachi(self, blk)\n-    }\n-    #[inline]\n-    fn all(&self, blk: &fn(&A) -> bool) -> bool {\n-        old_iter::all(self, blk)\n-    }\n-    #[inline]\n-    fn any(&self, blk: &fn(&A) -> bool) -> bool {\n-        old_iter::any(self, blk)\n-    }\n-    #[inline]\n-    fn foldl<B>(&self, b0: B, blk: &fn(&B, &A) -> B) -> B {\n-        old_iter::foldl(self, b0, blk)\n-    }\n-    #[inline]\n-    fn position(&self, f: &fn(&A) -> bool) -> Option<uint> {\n-        old_iter::position(self, f)\n-    }\n-    #[inline]\n-    fn map_to_vec<B>(&self, op: &fn(&A) -> B) -> ~[B] {\n-        old_iter::map_to_vec(self, op)\n-    }\n-    #[inline]\n-    fn flat_map_to_vec<B,IB:BaseIter<B>>(&self, op: &fn(&A) -> IB)\n-        -> ~[B] {\n-        old_iter::flat_map_to_vec(self, op)\n-    }\n-\n-}\n-\n-impl<A: Eq> old_iter::EqIter<A> for OptVec<A> {\n-    #[inline]\n-    fn contains(&self, x: &A) -> bool { old_iter::contains(self, x) }\n-    #[inline]\n-    fn count(&self, x: &A) -> uint { old_iter::count(self, x) }\n-}\n-\n-impl<A: Copy> old_iter::CopyableIter<A> for OptVec<A> {\n-    #[inline]\n-    fn filter_to_vec(&self, pred: &fn(&A) -> bool) -> ~[A] {\n-        old_iter::filter_to_vec(self, pred)\n-    }\n-    #[inline]\n-    fn to_vec(&self) -> ~[A] { old_iter::to_vec(self) }\n-    #[inline]\n-    fn find(&self, f: &fn(&A) -> bool) -> Option<A> {\n-        old_iter::find(self, f)\n+    fn next(&mut self) -> Option<&'self T> {\n+        match self.iter {\n+            Some(ref mut x) => x.next(),\n+            None => None\n+        }\n     }\n }"}, {"sha": "3d15ea16241f9f8e2c533bacf070500adb20ec93", "filename": "src/test/run-fail/extern-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -13,7 +13,6 @@\n // Instead the failure will be delivered after the callbacks return.\n \n use std::libc;\n-use std::old_iter;\n use std::task;\n \n mod rustrt {"}, {"sha": "0fe30059ef65a36891e19e66fd84efb2ef7ae67e", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -1,6 +1,4 @@\n-// xfail-test\n-// xfail'd because of a problem with by-value self.\n-\n+// xfail-test #5321\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "6674147e147696d8d6cc42021f6881bdcd048f4c", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/832fe327218e556740ba4e028b7b60cb41212469/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832fe327218e556740ba4e028b7b60cb41212469/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate.rs?ref=832fe327218e556740ba4e028b7b60cb41212469", "patch": "@@ -1,60 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test\n-\n-use to_str::*;\n-use to_str::to_str;\n-\n-class cat : to_str {\n-  priv {\n-    let mut meows : uint;\n-    fn meow() {\n-      error!(\"Meow\");\n-      self.meows += 1u;\n-      if self.meows % 5u == 0u {\n-          self.how_hungry += 1;\n-      }\n-    }\n-  }\n-\n-  let mut how_hungry : int;\n-  let name : str;\n-\n-  new(in_x : uint, in_y : int, in_name: str)\n-    { self.meows = in_x; self.how_hungry = in_y; self.name = in_name; }\n-\n-  fn speak() { self.meow(); }\n-\n-  fn eat() -> bool {\n-    if self.how_hungry > 0 {\n-        error!(\"OM NOM NOM\");\n-        self.how_hungry -= 2;\n-        return true;\n-    }\n-    else {\n-        error!(\"Not hungry!\");\n-        return false;\n-    }\n-  }\n-\n-  fn to_str() -> str { self.name }\n-}\n-\n-fn print_out<T:to_str>(thing: T, expected: str) {\n-  let actual = thing.to_str();\n-  debug!(\"%s\", actual);\n-  assert_eq!(actual, expected);\n-}\n-\n-pub fn main() {\n-  let nyan : to_str  = cat(0u, 2, \"nyan\") as to_str;\n-  print_out(nyan, \"nyan\");\n-}"}, {"sha": "655a9d4a0c072133304dd1fd19c87b75dcf92e69", "filename": "src/test/run-pass/class-impl-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #7307\n // xfail-fast\n \n extern mod extra;"}, {"sha": "c54b8db46c88972aa777533e3ca05e2acc35252c", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -13,7 +13,6 @@\n use std::cmp;\n use std::container::{Container, Mutable, Map};\n use std::int;\n-use std::old_iter::BaseIter;\n use std::uint;\n \n enum cat_type { tuxedo, tabby, tortoiseshell }"}, {"sha": "8565ab038413c81ced410b335a78149c50fb3fc6", "filename": "src/test/run-pass/class-implements-multiple-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #7305\n \n extern mod extra;\n use extra::oldmap::*;"}, {"sha": "75c62abcb0d55cdfa4b5747fe2c35809791f8cd0", "filename": "src/test/run-pass/class-trait-bounded-param.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/832fe327218e556740ba4e028b7b60cb41212469/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832fe327218e556740ba4e028b7b60cb41212469/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs?ref=832fe327218e556740ba4e028b7b60cb41212469", "patch": "@@ -1,35 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test\n-\n-extern mod extra;\n-use extra::oldmap::{map, hashmap, int_hash};\n-\n-class keys<K:Copy,V:Copy,M:Copy + map<K,V>>\n-    : old_iter::base_iter<K> {\n-\n-    let map: M;\n-\n-    new(map: M) {\n-        self.map = map;\n-    }\n-\n-    fn each(blk: &fn(K) -> bool) { self.map.each(|k, _v| blk(k) ) }\n-    fn size_hint() -> Option<uint> { Some(self.map.size()) }\n-    fn eachi(blk: &fn(uint, K) -> bool) { old_iter::eachi(self, blk) }\n-}\n-\n-pub fn main() {\n-    let m = int_hash();\n-    m.insert(1, 2);\n-    m.insert(3, 4);\n-    assert_eq!(old_iter::to_vec(keys(m)), ~[1, 3]);\n-}"}, {"sha": "f0c5b58d1559ceb9559b71cdd0ccb2895ecced0c", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-arg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -1,8 +1,6 @@\n-// xfail-test\n-\n fn sum(x: &[int]) -> int {\n     let mut sum = 0;\n-    for x.each |y| { sum += *y; }\n+    for x.iter().advance |y| { sum += *y; }\n     return sum;\n }\n \n@@ -14,8 +12,10 @@ fn sum_imm(y: &[int]) -> int {\n     sum(y)\n }\n \n+/* FIXME #7304\n fn sum_const(y: &const [int]) -> int {\n     sum(y)\n }\n+*/\n \n pub fn main() {}"}, {"sha": "590cd8250208a7fbb221d477c589b4de5cc49644", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-rcvr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -1,20 +1,20 @@\n-// xfail-test\n-\n+/* FIXME #7302\n fn foo(v: &const [uint]) -> ~[uint] {\n-    v.to_vec()\n+    v.to_owned()\n }\n+*/\n \n fn bar(v: &mut [uint]) -> ~[uint] {\n-    v.to_vec()\n+    v.to_owned()\n }\n \n fn bip(v: &[uint]) -> ~[uint] {\n-    v.to_vec()\n+    v.to_owned()\n }\n \n pub fn main() {\n-    let mut the_vec = ~[1, 2, 3, 100];\n-    assert_eq!(the_vec, foo(the_vec));\n-    assert_eq!(the_vec, bar(the_vec));\n-    assert_eq!(the_vec, bip(the_vec));\n+    let mut the_vec = ~[1u, 2, 3, 100];\n+//    assert_eq!(the_vec.clone(), foo(the_vec));\n+    assert_eq!(the_vec.clone(), bar(the_vec));\n+    assert_eq!(the_vec.clone(), bip(the_vec));\n }"}, {"sha": "7804ce48c7053206bf6c4d7adc8a1cbd40745b06", "filename": "src/test/run-pass/deriving-global.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-global.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -1,4 +1,5 @@\n-// xfail-test #7103 `extern mod` does not work on windows\n+// xfail-fast #7103 `extern mod` does not work on windows\n+// xfail-pretty - does not converge\n \n // Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at"}, {"sha": "955e02d4d2d896270d71dacd21a634049b26b715", "filename": "src/test/run-pass/deriving-meta-empty-trait-list.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fderiving-meta-empty-trait-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fderiving-meta-empty-trait-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-meta-empty-trait-list.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -10,6 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-fast\n+\n #[deriving]   //~ WARNING empty trait list in `deriving`\n struct Foo;\n "}, {"sha": "363c54f68129a2c0f8f28a62bc1ea9f79f7272b2", "filename": "src/test/run-pass/extern-mod-url.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fextern-mod-url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fextern-mod-url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-mod-url.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -10,7 +10,7 @@\n \n // Just a test that new-style extern mods parse\n \n-// xfail-test\n+// xfail-test FIXME #6407\n extern mod test = \"github.com/catamorphism/test-pkg\";\n \n-fn main() {}\n\\ No newline at end of file\n+fn main() {}"}, {"sha": "144cc7c1e287a661592896068ec793d0cea5f19c", "filename": "src/test/run-pass/fn-bare-size.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-size.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,12 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n-extern mod extra;\n+use std::sys;\n \n pub fn main() {\n     // Bare functions should just be a pointer\n-    assert!(sys::rustrt::size_of::<fn()>() ==\n-        sys::rustrt::size_of::<int>());\n+    assert_eq!(sys::size_of::<extern \"Rust\" fn()>(), sys::size_of::<int>());\n }"}, {"sha": "a11e89f37be1533fd71960ae8a94fe785934858c", "filename": "src/test/run-pass/foreign-mod.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fforeign-mod.rc", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fforeign-mod.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-mod.rc?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #7308\n // -*- rust -*-\n \n native mod libc = target_libc {"}, {"sha": "530f40c6a83d4d5bf30ce36f09be9cf4fbd653e9", "filename": "src/test/run-pass/issue-1866.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-1866.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-1866.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1866.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #1866\n mod a {\n     pub type rust_task = uint;\n     pub mod rustrt {\n+        use super::rust_task;\n         pub extern {\n             pub fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n         }\n@@ -21,6 +22,7 @@ mod a {\n mod b {\n     pub type rust_task = bool;\n     pub mod rustrt {\n+        use super::rust_task;\n         pub extern {\n             pub fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n         }"}, {"sha": "423888c1cf5b6e6c67c05b1e716707872bac8ce2", "filename": "src/test/run-pass/issue-2101.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/832fe327218e556740ba4e028b7b60cb41212469/src%2Ftest%2Frun-pass%2Fissue-2101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832fe327218e556740ba4e028b7b60cb41212469/src%2Ftest%2Frun-pass%2Fissue-2101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2101.rs?ref=832fe327218e556740ba4e028b7b60cb41212469", "patch": "@@ -1,30 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test\n-extern mod extra;\n-use extra::arena;\n-use extra::arena::Arena;\n-\n-enum hold { s(str) }\n-\n-fn init(ar: &a.arena::Arena, str: str) -> &a.hold {\n-    new(*ar) s(str)\n-}\n-\n-pub fn main(args: ~[str]) {\n-    let ar = arena::Arena();\n-    let leak = init(&ar, args[0]);\n-    match *leak {\n-        s(astr) {\n-            io::println(fmt!(\"%?\", astr));\n-        }\n-    };\n-}"}, {"sha": "d5ee712d412bca43b86a39b9ead0fda9739f089e", "filename": "src/test/run-pass/issue-2190-2.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-2.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,23 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #2190\n mod a {\n-fn foo(f: &fn()) { f() }\n-fn bar() {}\n-pub fn main() { foo(||bar()); }\n+    fn foo(f: &fn()) { f() }\n+    fn bar() {}\n+    pub fn main() { foo(||bar()); }\n }\n \n mod b {\n-fn foo(f: Option<&fn()>) { f.iter(|x|x()) }\n-fn bar() {}\n-pub fn main() { foo(Some(bar)); }\n+    fn foo(f: Option<&fn()>) { f.iter(|x|x()) }\n+    fn bar() {}\n+    pub fn main() { foo(Some(bar)); }\n }\n \n mod c {\n-fn foo(f: Option<&fn()>) { f.iter(|x|x()) }\n-fn bar() {}\n-pub fn main() { foo(Some(||bar())); }\n+    fn foo(f: Option<&fn()>) { f.iter(|x|x()) }\n+    fn bar() {}\n+    pub fn main() { foo(Some(||bar())); }\n }\n \n pub fn main() {"}, {"sha": "5cdc4238eafbab3f529c1a290dcb58732cd2b414", "filename": "src/test/run-pass/issue-3290.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-3290.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3290.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #3290\n fn main() {\n    let mut x = ~3;\n    x = x;"}, {"sha": "5f4409391396a39ca339c564b75dabb4a175a985", "filename": "src/test/run-pass/issue-3796.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-3796.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-3796.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3796.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #3796\n #[deny(dead_assignment)];\n fn main() {\n     let mut x = 1;"}, {"sha": "e293e40ac6903152e242d9c71ebedc7c841f3ef2", "filename": "src/test/run-pass/issue-3874.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-3874.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-3874.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3874.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #3874\n enum PureCounter { PureCounter(uint) }\n \n fn each(self: PureCounter, blk: &fn(v: &uint)) {"}, {"sha": "9a8b90db185bc43875d52da98c3f292c58cef582", "filename": "src/test/run-pass/issue-3979-2.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-3979-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-3979-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979-2.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -9,16 +9,17 @@\n // except according to those terms.\n \n // xfail-test\n+\n trait A {\n-    fn a_method();\n+    fn a_method(&self);\n }\n \n trait B: A {\n-    fn b_method();\n+    fn b_method(&self);\n }\n \n trait C: B {\n-    fn c_method() {\n+    fn c_method(&self) {\n         self.a_method();\n     }\n }"}, {"sha": "5884a35a1a1066e107328aaf6fbdc811896bd8e2", "filename": "src/test/run-pass/issue-3979-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3979-generics.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test FIXME #5946\n trait Positioned<S> {\n   fn SetX(&mut self, S);\n   fn X(&self) -> S;"}, {"sha": "5b668d710ddeb5180f5b62446be3d91586d150cb", "filename": "src/test/run-pass/issue-4241.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-4241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4241.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,11 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-fast\n+\n extern mod extra;\n \n use extra::net::tcp::TcpSocketBuf;\n \n+use std::io;\n+use std::int;\n+\n use std::io::{ReaderUtil,WriterUtil};\n \n enum Result {\n@@ -97,9 +101,9 @@ priv fn cmd_to_str(cmd: ~[~str]) -> ~str {\n   let mut res = ~\"*\";\n   res.push_str(cmd.len().to_str());\n   res.push_str(\"\\r\\n\");\n-    for cmd.each |s| {\n+    for cmd.iter().advance |s| {\n     res.push_str([~\"$\", s.len().to_str(), ~\"\\r\\n\",\n-                  copy *s, ~\"\\r\\n\"].concat()));\n+                  copy *s, ~\"\\r\\n\"].concat() );\n     }\n   res\n }"}, {"sha": "7b80974313e378a86d62c35062d3f3bb5d5a1941", "filename": "src/test/run-pass/issue-4541.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-4541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4541.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+use std::io;\n+\n fn parse_args() -> ~str {\n-    let args = std::os::args();\n+    let args = ::std::os::args();\n     let mut n = 0;\n \n     while n < args.len() {"}, {"sha": "4aa83b853de45518bef149d8cf58670bb58472b7", "filename": "src/test/run-pass/issue-4542.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-4542.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue-4542.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4542.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+use std::os;\n+\n pub fn main() {\n-    for os::args().each |arg| {\n+    let x = os::args();\n+    for x.iter().advance |arg| {\n         match arg.clone() {\n             s => { }\n         }"}, {"sha": "202385681ce6234c4661c9fa2a7cf80610855121", "filename": "src/test/run-pass/issue_3882.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue_3882.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fissue_3882.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue_3882.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -1,5 +1,3 @@\n-// xfail-test\n-\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -10,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// xfail-test\n // aux-build:issue_3882.rc\n extern mod linenoise;\n use linenoise::issue_3882::*;"}, {"sha": "b6b6e0e143795c461bc0d5f58bd5211068f9a0f1", "filename": "src/test/run-pass/labeled-break.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Flabeled-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Flabeled-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flabeled-break.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-fast\n-// xfail-test\n-\n pub fn main() {\n     'foo: loop {\n         loop {"}, {"sha": "99e1ae6ec56e300efd1fd9134b94c373b6355113", "filename": "src/test/run-pass/match-borrowed_str.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-borrowed_str.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -1,6 +1,8 @@\n-// xfail-test\n+// FIXME #7306\n // xfail-fast\n-// -*- rust -*-\n+\n+use std::io;\n+\n fn f1(ref_string: &str) {\n     match ref_string {\n         \"a\" => io::println(\"found a\"),"}, {"sha": "2db66054145068582a47489c576a36582c27d862", "filename": "src/test/run-pass/pipe-select-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-select-macro.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// FIXME #7303: xfail-test\n \n // Protocols\n proto! foo ("}, {"sha": "aa750c21d4588570be3c22e745bbfad2d3864955", "filename": "src/test/run-pass/preempt.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fpreempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fpreempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpreempt.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -11,23 +11,30 @@\n // xfail-test\n // This checks that preemption works.\n \n-fn starve_main(alive: chan<int>) {\n+// note: halfway done porting to modern rust\n+extern mod extra;\n+\n+use std::comm;\n+use extra::comm;\n+\n+fn starve_main(alive: Port<int>) {\n     debug!(\"signalling main\");\n-    alive.recv(1);\n+    alive.recv();\n     debug!(\"starving main\");\n-    let i: int = 0;\n+    let mut i: int = 0;\n     loop { i += 1; }\n }\n \n pub fn main() {\n-    let alive: port<int> = port();\n+    let (port, chan) = stream();\n+\n     debug!(\"main started\");\n-    let s: task = do task::spawn {\n-        starve_main(chan(alive));\n+    do spawn {\n+        starve_main(port);\n     };\n-    let i: int;\n+    let mut i: int = 0;\n     debug!(\"main waiting for alive signal\");\n-    alive.send(i);\n+    chan.send(i);\n     debug!(\"main got alive signal\");\n     while i < 50 { debug!(\"main iterated\"); i += 1; }\n     debug!(\"main completed\");"}, {"sha": "c8e87af9ec0a392a6cceae4d0d6090e3269a796e", "filename": "src/test/run-pass/rcvr-borrowed-to-region.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-region.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -1,6 +1,3 @@\n-// xfail-test\n-// xfail'd due to segfaults with by-value self.\n-\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -15,26 +12,24 @@ trait get {\n     fn get(self) -> int;\n }\n \n-// Note: impl on a slice\n-impl get for &'self int {\n+// FIXME #7302: Note: impl on a slice\n+impl<'self> get for &'self int {\n     fn get(self) -> int {\n-        return **self;\n+        return *self;\n     }\n }\n \n pub fn main() {\n-    /*\n     let x = @mut 6;\n     let y = x.get();\n     assert_eq!(y, 6);\n-    */\n \n     let x = @6;\n     let y = x.get();\n     debug!(\"y=%d\", y);\n     assert_eq!(y, 6);\n \n-    let mut x = ~6;\n+    let x = ~6;\n     let y = x.get();\n     debug!(\"y=%d\", y);\n     assert_eq!(y, 6);"}, {"sha": "45e5b1ad9c94a6164d3d04a565e70cacbe9675e5", "filename": "src/test/run-pass/regions-borrow-evec-at.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-at.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n fn foo(x: &[uint]) -> uint {\n     x[0]\n }"}, {"sha": "57f6596d1d7209d7325d5790a64822f5e81c25ef", "filename": "src/test/run-pass/resolve-issue-2428.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fresolve-issue-2428.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Fresolve-issue-2428.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresolve-issue-2428.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n static foo: int = 4 >> 1;\n enum bs { thing = foo }\n pub fn main() { assert!((thing as int == foo)); }"}, {"sha": "85a4f98d198c3afac6cdb188135aa898ec421928", "filename": "src/test/run-pass/tag-align-dyn-variants.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -10,6 +10,8 @@\n \n // xfail-test\n \n+use std::ptr;\n+\n enum a_tag<A,B> {\n     varA(A),\n     varB(B)"}, {"sha": "28088aa571eb20450eb7650d82897fba4b576fb2", "filename": "src/test/run-pass/tag-align-u64.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -10,6 +10,8 @@\n \n // xfail-test\n \n+use std::ptr;\n+\n enum a_tag {\n     a_tag(u64)\n }"}, {"sha": "637fc7a70f585d44170cd12c13c36e933d8a1327", "filename": "src/test/run-pass/trait-cast.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -1,4 +1,4 @@\n-// xfail-test\n+// xfail-test FIXME #5882\n // Weird borrow check bug\n \n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n@@ -17,45 +17,45 @@ struct Tree(@mut TreeR);\n struct TreeR {\n     left: Option<Tree>,\n     right: Option<Tree>,\n-    val: to_str\n+    val: ~to_str\n }\n \n trait to_str {\n-    fn to_str(&self) -> ~str;\n+    fn to_str_(&self) -> ~str;\n }\n \n impl<T:to_str> to_str for Option<T> {\n-    fn to_str(&self) -> ~str {\n+    fn to_str_(&self) -> ~str {\n         match *self {\n           None => { ~\"none\" }\n-          Some(ref t) => { ~\"some(\" + t.to_str() + ~\")\" }\n+          Some(ref t) => { ~\"some(\" + t.to_str_() + ~\")\" }\n         }\n     }\n }\n \n impl to_str for int {\n-    fn to_str(&self) -> ~str { int::str(*self) }\n+    fn to_str_(&self) -> ~str { self.to_str() }\n }\n \n impl to_str for Tree {\n-    fn to_str(&self) -> ~str {\n-        let l = self.left, r = self.right;\n+    fn to_str_(&self) -> ~str {\n+        let (l, r) = (self.left, self.right);\n         let val = &self.val;\n-        fmt!(\"[%s, %s, %s]\", val.to_str(), l.to_str(), r.to_str())\n+        fmt!(\"[%s, %s, %s]\", val.to_str_(), l.to_str_(), r.to_str_())\n     }\n }\n \n-fn foo<T:to_str>(x: T) -> ~str { x.to_str() }\n+fn foo<T:to_str>(x: T) -> ~str { x.to_str_() }\n \n pub fn main() {\n     let t1 = Tree(@mut TreeR{left: None,\n                              right: None,\n-                             val: 1 as to_str });\n+                             val: ~1 as ~to_str });\n     let t2 = Tree(@mut TreeR{left: Some(t1),\n                              right: Some(t1),\n-                             val: 2 as to_str });\n+                             val: ~2 as ~to_str });\n     let expected = ~\"[2, some([1, none, none]), some([1, none, none])]\";\n-    assert_eq!(t2.to_str(), expected);\n-    assert_eq!(foo(t2 as to_str), expected);\n+    assert!(t2.to_str_() == expected);\n+    assert!(foo(t2) == expected);\n     t1.left = Some(t2); // create cycle\n }"}, {"sha": "ba3e8e082b3454f5db3cd3ba986ca90f6ccf8ac2", "filename": "src/test/run-pass/traits.rs", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/832fe327218e556740ba4e028b7b60cb41212469/src%2Ftest%2Frun-pass%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832fe327218e556740ba4e028b7b60cb41212469/src%2Ftest%2Frun-pass%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits.rs?ref=832fe327218e556740ba4e028b7b60cb41212469", "patch": "@@ -1,55 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//xfail-test\n-\n-// Sketching traits.\n-\n-// methods with no implementation are required; methods with an\n-// implementation are provided.  No \"req\" keyword necessary.\n-trait Eq {\n-    fn eq(a: self) -> bool;\n-\n-    fn neq(a: self) -> bool {\n-        !self.eq(a)\n-    }\n-}\n-\n-// The `<` is pronounced `extends`.  Also under consideration is `<:`.\n-// Just using `:` is frowned upon, because (paraphrasing dherman) `:`\n-// is supposed to separate things from different universes.\n-trait Ord < Eq {\n-\n-    fn lt(a: self) -> bool;\n-\n-    fn lte(a: self) -> bool {\n-        self.lt(a) || self.eq(a)\n-    }\n-\n-    fn gt(a: self) -> bool {\n-        !self.lt(a) && !self.eq(a)\n-    }\n-\n-    fn gte(a: self) -> bool {\n-        !self.lt(a)\n-    }\n-}\n-\n-// pronounced \"impl of Ord for int\" -- not sold on this yet\n-impl Ord for int {\n-    fn lt(a: &int) -> bool {\n-        self < (*a)\n-    }\n-\n-    // is this the place to put this?\n-    fn eq(a: &int) -> bool {\n-        self == (*a)\n-    }\n-}"}, {"sha": "2341ee8d100c1805b967962ec4b5762870f0a83e", "filename": "src/test/run-pass/unconstrained-region.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Funconstrained-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493/src%2Ftest%2Frun-pass%2Funconstrained-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funconstrained-region.rs?ref=dfb7de8e0e6d305b0dc42c0f30a0c388b49b2493", "patch": "@@ -9,14 +9,15 @@\n // except according to those terms.\n \n // xfail-test\n-// See #3283\n-fn foo(blk: &fn(p: &'a fn() -> &'a fn())) {\n-        let mut state = 0;\n-        let statep = &mut state;\n+// FIXME: #7336: codegen bug makes this segfault on Linux x86_64\n+\n+fn foo<'a>(blk: &fn(p: &'a fn() -> &'a fn())) {\n+    let mut state = 0;\n+    let statep = &mut state;\n     do blk {\n         || { *statep = 1; }\n     }\n }\n fn main() {\n     do foo |p| { p()() }\n-}\n\\ No newline at end of file\n+}"}]}