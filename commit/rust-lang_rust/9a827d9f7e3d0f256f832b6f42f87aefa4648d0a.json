{"sha": "9a827d9f7e3d0f256f832b6f42f87aefa4648d0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhODI3ZDlmN2UzZDBmMjU2ZjgzMmI2ZjQyZjg3YWVmYTQ2NDhkMGE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-03T07:27:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-03T07:27:38Z"}, "message": "Rollup merge of #81223 - GuillaumeGomez:generate-redirect-map, r=jyn514\n\n[rustdoc] Generate redirect map file\n\nFixes #81134.\n\nSo with this code:\n\n```rust\n#![crate_name = \"foo\"]\n\npub use private::Quz;\npub use hidden::Bar;\n\nmod private {\n    pub struct Quz;\n}\n\n#[doc(hidden)]\npub mod hidden {\n    pub struct Bar;\n}\n\n#[macro_export]\nmacro_rules! foo {\n() => {}\n}\n```\n\nIt generates:\n\n```json\n{\n  \"foo/macro.foo!.html\": \"foo/macro.foo.html\",\n  \"foo/private/struct.Quz.html\": \"foo/struct.Quz.html\",\n  \"foo/hidden/struct.Bar.html\": \"foo/struct.Bar.html\"\n}\n```\n\nDo the pathes look as you expected ````@pietroalbini?````\n\nr? ````@jyn514````", "tree": {"sha": "c6528f7f25f1ac63087eb08c9a3e48cc6c1492a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6528f7f25f1ac63087eb08c9a3e48cc6c1492a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPzprCRBK7hj4Ov3rIwAAdHIIACCqn2nY4y2v0YnMzsKxEmPT\nn3XLcKnY3hbd5PgRYKBZn7toU1QbB/nZZFfjjsq0e7rZ3q0sVNbMX+MHxCbcdYwl\n/+XTa9OIVK/ZdYbFo4uDeax3FLzuUebK+lagHYEjtEYOrkKK63DqelDoeGMdpHot\niE5pBgNCh2z2w4gd4StpNsEX50WR5T8dB2wb3WeJJNVBcIQ2dWBuI3BWL50/lZAn\ntjW6Lr0mPSjjtSwhIjhhHK5r2z5GW2RHRod+AXOz7Z17VKaiQnFWg6Bi+g4EyiWa\nr+Tx5Rdw5hrobbmj9nuUIs0raXWgtXrE7WWSvb7cZmNygbpWJ4XqVrptYxVj/wY=\n=So2A\n-----END PGP SIGNATURE-----\n", "payload": "tree c6528f7f25f1ac63087eb08c9a3e48cc6c1492a8\nparent 35dbef235048f9a2939dc20effe083ca483c37ff\nparent 41fc58b7b56cbc1bf70b8928ba053110fa65a34b\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1614756458 +0900\ncommitter GitHub <noreply@github.com> 1614756458 +0900\n\nRollup merge of #81223 - GuillaumeGomez:generate-redirect-map, r=jyn514\n\n[rustdoc] Generate redirect map file\n\nFixes #81134.\n\nSo with this code:\n\n```rust\n#![crate_name = \"foo\"]\n\npub use private::Quz;\npub use hidden::Bar;\n\nmod private {\n    pub struct Quz;\n}\n\n#[doc(hidden)]\npub mod hidden {\n    pub struct Bar;\n}\n\n#[macro_export]\nmacro_rules! foo {\n() => {}\n}\n```\n\nIt generates:\n\n```json\n{\n  \"foo/macro.foo!.html\": \"foo/macro.foo.html\",\n  \"foo/private/struct.Quz.html\": \"foo/struct.Quz.html\",\n  \"foo/hidden/struct.Bar.html\": \"foo/struct.Bar.html\"\n}\n```\n\nDo the pathes look as you expected ````@pietroalbini?````\n\nr? ````@jyn514````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a", "html_url": "https://github.com/rust-lang/rust/commit/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35dbef235048f9a2939dc20effe083ca483c37ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/35dbef235048f9a2939dc20effe083ca483c37ff", "html_url": "https://github.com/rust-lang/rust/commit/35dbef235048f9a2939dc20effe083ca483c37ff"}, {"sha": "41fc58b7b56cbc1bf70b8928ba053110fa65a34b", "url": "https://api.github.com/repos/rust-lang/rust/commits/41fc58b7b56cbc1bf70b8928ba053110fa65a34b", "html_url": "https://github.com/rust-lang/rust/commit/41fc58b7b56cbc1bf70b8928ba053110fa65a34b"}], "stats": {"total": 160, "additions": 150, "deletions": 10}, "files": [{"sha": "de6942968ea0d7fb94bdf99417da441d1362db9a", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=9a827d9f7e3d0f256f832b6f42f87aefa4648d0a", "patch": "@@ -263,6 +263,8 @@ crate struct RenderOptions {\n     crate document_private: bool,\n     /// Document items that have `doc(hidden)`.\n     crate document_hidden: bool,\n+    /// If `true`, generate a JSON file in the crate folder instead of HTML redirection files.\n+    crate generate_redirect_map: bool,\n     crate unstable_features: rustc_feature::UnstableFeatures,\n }\n \n@@ -570,6 +572,7 @@ impl Options {\n         let document_private = matches.opt_present(\"document-private-items\");\n         let document_hidden = matches.opt_present(\"document-hidden-items\");\n         let run_check = matches.opt_present(\"check\");\n+        let generate_redirect_map = matches.opt_present(\"generate-redirect-map\");\n \n         let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n \n@@ -627,6 +630,7 @@ impl Options {\n                 generate_search_filter,\n                 document_private,\n                 document_hidden,\n+                generate_redirect_map,\n                 unstable_features: rustc_feature::UnstableFeatures::from_environment(\n                     crate_name.as_deref(),\n                 ),"}, {"sha": "394c57c7214e79c485b83aa549eebed9c9d1cb2d", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=9a827d9f7e3d0f256f832b6f42f87aefa4648d0a", "patch": "@@ -111,6 +111,10 @@ crate struct Context<'tcx> {\n     /// real location of an item. This is used to allow external links to\n     /// publicly reused items to redirect to the right location.\n     crate render_redirect_pages: bool,\n+    /// `None` by default, depends on the `generate-redirect-map` option flag. If this field is set\n+    /// to `Some(...)`, it'll store redirections and then generate a JSON file at the top level of\n+    /// the crate.\n+    crate redirections: Option<Rc<RefCell<FxHashMap<String, String>>>>,\n     /// The map used to ensure all generated 'id=' attributes are unique.\n     id_map: Rc<RefCell<IdMap>>,\n     /// Tracks section IDs for `Deref` targets so they match in both the main\n@@ -404,6 +408,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             static_root_path,\n             generate_search_filter,\n             unstable_features,\n+            generate_redirect_map,\n             ..\n         } = options;\n \n@@ -509,6 +514,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             all: Rc::new(RefCell::new(AllTypes::new())),\n             errors: Rc::new(receiver),\n             cache: Rc::new(cache),\n+            redirections: if generate_redirect_map { Some(Default::default()) } else { None },\n         };\n \n         CURRENT_DEPTH.with(|s| s.set(0));\n@@ -587,6 +593,15 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             &style_files,\n         );\n         self.shared.fs.write(&settings_file, v.as_bytes())?;\n+        if let Some(redirections) = self.redirections.take() {\n+            if !redirections.borrow().is_empty() {\n+                let redirect_map_path =\n+                    self.dst.join(&*krate.name.as_str()).join(\"redirect-map.json\");\n+                let paths = serde_json::to_string(&*redirections.borrow()).unwrap();\n+                self.shared.ensure_dir(&self.dst.join(&*krate.name.as_str()))?;\n+                self.shared.fs.write(&redirect_map_path, paths.as_bytes())?;\n+            }\n+        }\n \n         // Flush pending errors.\n         Arc::get_mut(&mut self.shared).unwrap().fs.close();\n@@ -675,9 +690,17 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             // to the new one (without).\n             if item_type == ItemType::Macro {\n                 let redir_name = format!(\"{}.{}!.html\", item_type, name);\n-                let redir_dst = self.dst.join(redir_name);\n-                let v = layout::redirect(file_name);\n-                self.shared.fs.write(&redir_dst, v.as_bytes())?;\n+                if let Some(ref redirections) = self.redirections {\n+                    let crate_name = &self.shared.layout.krate;\n+                    redirections.borrow_mut().insert(\n+                        format!(\"{}/{}\", crate_name, redir_name),\n+                        format!(\"{}/{}\", crate_name, file_name),\n+                    );\n+                } else {\n+                    let v = layout::redirect(file_name);\n+                    let redir_dst = self.dst.join(redir_name);\n+                    self.shared.fs.write(&redir_dst, v.as_bytes())?;\n+                }\n             }\n         }\n         Ok(())\n@@ -1588,17 +1611,27 @@ impl Context<'_> {\n                 &self.shared.style_files,\n             )\n         } else {\n-            let mut url = self.root_path();\n             if let Some(&(ref names, ty)) = self.cache.paths.get(&it.def_id) {\n+                let mut path = String::new();\n                 for name in &names[..names.len() - 1] {\n-                    url.push_str(name);\n-                    url.push('/');\n+                    path.push_str(name);\n+                    path.push('/');\n+                }\n+                path.push_str(&item_path(ty, names.last().unwrap()));\n+                match self.redirections {\n+                    Some(ref redirections) => {\n+                        let mut current_path = String::new();\n+                        for name in &self.current {\n+                            current_path.push_str(name);\n+                            current_path.push('/');\n+                        }\n+                        current_path.push_str(&item_path(ty, names.last().unwrap()));\n+                        redirections.borrow_mut().insert(current_path, path);\n+                    }\n+                    None => return layout::redirect(&format!(\"{}{}\", self.root_path(), path)),\n                 }\n-                url.push_str(&item_path(ty, names.last().unwrap()));\n-                layout::redirect(&url)\n-            } else {\n-                String::new()\n             }\n+            String::new()\n         }\n     }\n "}, {"sha": "c0e91a05dff54fea9125526c12775035c80b717b", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=9a827d9f7e3d0f256f832b6f42f87aefa4648d0a", "patch": "@@ -497,6 +497,13 @@ fn opts() -> Vec<RustcOptGroup> {\n             o.optopt(\"\", \"test-builder\", \"The rustc-like binary to use as the test builder\", \"PATH\")\n         }),\n         unstable(\"check\", |o| o.optflag(\"\", \"check\", \"Run rustdoc checks\")),\n+        unstable(\"generate-redirect-map\", |o| {\n+            o.optflag(\n+                \"\",\n+                \"generate-redirect-map\",\n+                \"Generate JSON file at the top level instead of generating HTML redirection files\",\n+            )\n+        }),\n     ]\n }\n "}, {"sha": "ce977fa0cea55050ca384c89f3ba583bc5325a06", "filename": "src/test/run-make-fulldeps/rustdoc-map-file/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2FMakefile?ref=9a827d9f7e3d0f256f832b6f42f87aefa4648d0a", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTDOC) -Z unstable-options --generate-redirect-map foo.rs -o \"$(TMPDIR)/out\"\n+\t\"$(PYTHON)\" validate_json.py \"$(TMPDIR)/out\""}, {"sha": "6b1ccbeac3010849dde4231d550c141f9532ae88", "filename": "src/test/run-make-fulldeps/rustdoc-map-file/expected.json", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Fexpected.json", "raw_url": "https://github.com/rust-lang/rust/raw/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Fexpected.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Fexpected.json?ref=9a827d9f7e3d0f256f832b6f42f87aefa4648d0a", "patch": "@@ -0,0 +1,5 @@\n+{\n+  \"foo/macro.foo!.html\": \"foo/macro.foo.html\",\n+  \"foo/private/struct.Quz.html\": \"foo/struct.Quz.html\",\n+  \"foo/hidden/struct.Bar.html\": \"foo/struct.Bar.html\"\n+}"}, {"sha": "e12b9d2292c5110d3d1bb3f3e197ffd13f94aa56", "filename": "src/test/run-make-fulldeps/rustdoc-map-file/foo.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Ffoo.rs?ref=9a827d9f7e3d0f256f832b6f42f87aefa4648d0a", "patch": "@@ -0,0 +1,16 @@\n+pub use private::Quz;\n+pub use hidden::Bar;\n+\n+mod private {\n+    pub struct Quz;\n+}\n+\n+#[doc(hidden)]\n+pub mod hidden {\n+    pub struct Bar;\n+}\n+\n+#[macro_export]\n+macro_rules! foo {\n+    () => {}\n+}"}, {"sha": "5c14c90b70d37d899f1f9d9c8d65c94d185d80e1", "filename": "src/test/run-make-fulldeps/rustdoc-map-file/validate_json.py", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Fvalidate_json.py", "raw_url": "https://github.com/rust-lang/rust/raw/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Fvalidate_json.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Frustdoc-map-file%2Fvalidate_json.py?ref=9a827d9f7e3d0f256f832b6f42f87aefa4648d0a", "patch": "@@ -0,0 +1,41 @@\n+#!/usr/bin/env python\n+\n+import os\n+import sys\n+import json\n+\n+\n+def find_redirect_map_file(folder, errors):\n+    for root, dirs, files in os.walk(folder):\n+        for name in files:\n+            if not name.endswith(\"redirect-map.json\"):\n+                continue\n+            with open(os.path.join(root, name)) as f:\n+                data = json.load(f)\n+            with open(\"expected.json\") as f:\n+                expected = json.load(f)\n+            for key in expected:\n+                if expected[key] != data.get(key):\n+                    errors.append(\"Expected `{}` for key `{}`, found: `{}`\".format(\n+                        expected[key], key, data.get(key)))\n+                else:\n+                    del data[key]\n+            for key in data:\n+                errors.append(\"Extra data not expected: key: `{}`, data: `{}`\".format(\n+                    key, data[key]))\n+            return True\n+    return False\n+\n+\n+if len(sys.argv) != 2:\n+    print(\"Expected doc directory to check!\")\n+    sys.exit(1)\n+\n+errors = []\n+if not find_redirect_map_file(sys.argv[1], errors):\n+    print(\"Didn't find the map file in `{}`...\".format(sys.argv[1]))\n+    sys.exit(1)\n+for err in errors:\n+    print(\"=> {}\".format(err))\n+if len(errors) != 0:\n+    sys.exit(1)"}, {"sha": "e9d021e0fa862476cffb164a7a5ab7e31e099994", "filename": "src/test/rustdoc/redirect-map-empty.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Ftest%2Frustdoc%2Fredirect-map-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Ftest%2Frustdoc%2Fredirect-map-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fredirect-map-empty.rs?ref=9a827d9f7e3d0f256f832b6f42f87aefa4648d0a", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -Z unstable-options --generate-redirect-map\n+\n+#![crate_name = \"foo\"]\n+\n+// @!has foo/redirect-map.json\n+pub struct Foo;"}, {"sha": "b7f16b64e38508f796cda30c44f284e9cbc4bd18", "filename": "src/test/rustdoc/redirect-map.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Ftest%2Frustdoc%2Fredirect-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a827d9f7e3d0f256f832b6f42f87aefa4648d0a/src%2Ftest%2Frustdoc%2Fredirect-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fredirect-map.rs?ref=9a827d9f7e3d0f256f832b6f42f87aefa4648d0a", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: -Z unstable-options --generate-redirect-map\n+\n+#![crate_name = \"foo\"]\n+\n+// @!has foo/private/struct.Quz.html\n+// @!has foo/hidden/struct.Bar.html\n+// @has foo/redirect-map.json\n+pub use private::Quz;\n+pub use hidden::Bar;\n+\n+mod private {\n+    pub struct Quz;\n+}\n+\n+#[doc(hidden)]\n+pub mod hidden {\n+    pub struct Bar;\n+}\n+\n+#[macro_export]\n+macro_rules! foo {\n+  () => {}\n+}"}]}