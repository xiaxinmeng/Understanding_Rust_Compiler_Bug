{"sha": "58132cb3b0ddadc2004a121f0bd85d12bf089ff6", "node_id": "C_kwDOAAsO6NoAKDU4MTMyY2IzYjBkZGFkYzIwMDRhMTIxZjBiZDg1ZDEyYmYwODlmZjY", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2023-03-10T15:43:04Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2023-05-18T20:42:13Z"}, "message": "Improve `SpanlessEq`\n* Don't consider expansions of different macros to be the same, even if they expand to the same tokens\n* Don't consider `cfg!` expansions to be equal if they check different configs.", "tree": {"sha": "e5f20d63c7ed387b380fe27d51f2f65738e16a87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5f20d63c7ed387b380fe27d51f2f65738e16a87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58132cb3b0ddadc2004a121f0bd85d12bf089ff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58132cb3b0ddadc2004a121f0bd85d12bf089ff6", "html_url": "https://github.com/rust-lang/rust/commit/58132cb3b0ddadc2004a121f0bd85d12bf089ff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5351170744bdc6dfca0f57908cd072cfa84a3f30", "url": "https://api.github.com/repos/rust-lang/rust/commits/5351170744bdc6dfca0f57908cd072cfa84a3f30", "html_url": "https://github.com/rust-lang/rust/commit/5351170744bdc6dfca0f57908cd072cfa84a3f30"}], "stats": {"total": 169, "additions": 135, "deletions": 34}, "files": [{"sha": "992d41bc378c7c83ba3465a1866ea748505376e0", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=58132cb3b0ddadc2004a121f0bd85d12bf089ff6", "patch": "@@ -1,6 +1,6 @@\n #![allow(clippy::float_cmp)]\n \n-use crate::source::{span_source_range, walk_span_to_context};\n+use crate::source::{get_source_text, walk_span_to_context};\n use crate::{clip, is_direct_expn_of, sext, unsext};\n use if_chain::if_chain;\n use rustc_ast::ast::{self, LitFloatType, LitKind};\n@@ -516,7 +516,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 if let Some(expr_span) = walk_span_to_context(expr.span, span.ctxt)\n                     && let expr_lo = expr_span.lo()\n                     && expr_lo >= span.lo\n-                    && let Some(src) = span_source_range(self.lcx, span.lo..expr_lo)\n+                    && let Some(src) = get_source_text(self.lcx, span.lo..expr_lo)\n                     && let Some(src) = src.as_str()\n                 {\n                     use rustc_lexer::TokenKind::{Whitespace, LineComment, BlockComment, Semi, OpenBrace};"}, {"sha": "a49246a7832727a6c4c1d5d8854e71d5318f8b19", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 49, "deletions": 3, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=58132cb3b0ddadc2004a121f0bd85d12bf089ff6", "patch": "@@ -14,7 +14,7 @@ use rustc_hir::{\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::TypeckResults;\n-use rustc_span::{sym, BytePos, Symbol, SyntaxContext};\n+use rustc_span::{sym, BytePos, ExpnKind, MacroKind, Symbol, SyntaxContext};\n use std::hash::{Hash, Hasher};\n use std::ops::Range;\n \n@@ -67,6 +67,8 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     pub fn inter_expr(&mut self) -> HirEqInterExpr<'_, 'a, 'tcx> {\n         HirEqInterExpr {\n             inner: self,\n+            left_ctxt: SyntaxContext::root(),\n+            right_ctxt: SyntaxContext::root(),\n             locals: HirIdMap::default(),\n         }\n     }\n@@ -94,6 +96,8 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n \n pub struct HirEqInterExpr<'a, 'b, 'tcx> {\n     inner: &'a mut SpanlessEq<'b, 'tcx>,\n+    left_ctxt: SyntaxContext,\n+    right_ctxt: SyntaxContext,\n \n     // When binding are declared, the binding ID in the left expression is mapped to the one on the\n     // right. For example, when comparing `{ let x = 1; x + 2 }` and `{ let y = 1; y + 2 }`,\n@@ -128,6 +132,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n     }\n \n     /// Checks whether two blocks are the same.\n+    #[expect(clippy::similar_names)]\n     fn eq_block(&mut self, left: &Block<'_>, right: &Block<'_>) -> bool {\n         use TokenKind::{BlockComment, LineComment, Semi, Whitespace};\n         if left.stmts.len() != right.stmts.len() {\n@@ -166,7 +171,8 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 // Can happen when macros expand to multiple statements, or rearrange statements.\n                 // Nothing in between the statements to check in this case.\n                 continue;\n-            } else if lstmt_span.lo < lstart || rstmt_span.lo < rstart {\n+            }\n+            if lstmt_span.lo < lstart || rstmt_span.lo < rstart {\n                 // Only one of the blocks had a weird macro.\n                 return false;\n             }\n@@ -243,7 +249,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n \n     #[expect(clippy::similar_names)]\n     pub fn eq_expr(&mut self, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n-        if !self.inner.allow_side_effects && left.span.ctxt() != right.span.ctxt() {\n+        if !self.check_ctxt(left.span.ctxt(), right.span.ctxt()) {\n             return false;\n         }\n \n@@ -476,6 +482,45 @@ impl HirEqInterExpr<'_, '_, '_> {\n     fn eq_type_binding(&mut self, left: &TypeBinding<'_>, right: &TypeBinding<'_>) -> bool {\n         left.ident.name == right.ident.name && self.eq_ty(left.ty(), right.ty())\n     }\n+\n+    fn check_ctxt(&mut self, left: SyntaxContext, right: SyntaxContext) -> bool {\n+        if self.left_ctxt == left && self.right_ctxt == right {\n+            return true;\n+        } else if self.left_ctxt == left || self.right_ctxt == right {\n+            // Only one context has changed. This can only happen if the two nodes are written differently.\n+            return false;\n+        } else if left != SyntaxContext::root() {\n+            let mut left_data = left.outer_expn_data();\n+            let mut right_data = right.outer_expn_data();\n+            loop {\n+                use TokenKind::{BlockComment, LineComment, Whitespace};\n+                if left_data.macro_def_id != right_data.macro_def_id\n+                    || (matches!(left_data.kind, ExpnKind::Macro(MacroKind::Bang, name) if name == sym::cfg)\n+                        && !eq_span_tokens(self.inner.cx, left_data.call_site, right_data.call_site, |t| {\n+                            !matches!(t, Whitespace | LineComment { .. } | BlockComment { .. })\n+                        }))\n+                {\n+                    // Either a different chain of macro calls, or different arguments to the `cfg` macro.\n+                    return false;\n+                }\n+                let left_ctxt = left_data.call_site.ctxt();\n+                let right_ctxt = right_data.call_site.ctxt();\n+                if left_ctxt == SyntaxContext::root() && right_ctxt == SyntaxContext::root() {\n+                    break;\n+                }\n+                if left_ctxt == SyntaxContext::root() || right_ctxt == SyntaxContext::root() {\n+                    // Different lengths for the expansion stack. This can only happen if nodes are written differently,\n+                    // or shouldn't be compared to start with.\n+                    return false;\n+                }\n+                left_data = left_ctxt.outer_expn_data();\n+                right_data = right_ctxt.outer_expn_data();\n+            }\n+        }\n+        self.left_ctxt = left;\n+        self.right_ctxt = right;\n+        true\n+    }\n }\n \n /// Some simple reductions like `{ return }` => `return`\n@@ -1075,6 +1120,7 @@ pub fn hash_expr(cx: &LateContext<'_>, e: &Expr<'_>) -> u64 {\n     h.finish()\n }\n \n+#[expect(clippy::similar_names)]\n fn eq_span_tokens(\n     cx: &LateContext<'_>,\n     left: impl SpanRange,"}, {"sha": "575c29a6b6f97f3b6783ab84bd5c26daf53e338a", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=58132cb3b0ddadc2004a121f0bd85d12bf089ff6", "patch": "@@ -1499,7 +1499,7 @@ pub fn is_range_full(cx: &LateContext<'_>, expr: &Expr<'_>, container_path: Opti\n                 && let const_val = cx.tcx.valtree_to_const_val((bnd_ty, min_val.to_valtree()))\n                 && let min_const_kind = ConstantKind::from_value(const_val, bnd_ty)\n                 && let Some(min_const) = miri_to_const(cx.tcx, min_const_kind)\n-                && let Some((start_const, _)) = constant(cx, cx.typeck_results(), start)\n+                && let Some(start_const) = constant(cx, cx.typeck_results(), start)\n             {\n                 start_const == min_const\n             } else {\n@@ -1515,7 +1515,7 @@ pub fn is_range_full(cx: &LateContext<'_>, expr: &Expr<'_>, container_path: Opti\n                         && let const_val = cx.tcx.valtree_to_const_val((bnd_ty, max_val.to_valtree()))\n                         && let max_const_kind = ConstantKind::from_value(const_val, bnd_ty)\n                         && let Some(max_const) = miri_to_const(cx.tcx, max_const_kind)\n-                        && let Some((end_const, _)) = constant(cx, cx.typeck_results(), end)\n+                        && let Some(end_const) = constant(cx, cx.typeck_results(), end)\n                     {\n                         end_const == max_const\n                     } else {"}, {"sha": "c6514a559340ceeb61e54aa43b1f4c32ba8b7451", "filename": "tests/ui/collapsible_if.fixed", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fcollapsible_if.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fcollapsible_if.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.fixed?ref=58132cb3b0ddadc2004a121f0bd85d12bf089ff6", "patch": "@@ -1,5 +1,10 @@\n //@run-rustfix\n-#![allow(clippy::assertions_on_constants, clippy::equatable_if_let)]\n+#![allow(\n+    clippy::assertions_on_constants,\n+    clippy::equatable_if_let,\n+    clippy::nonminimal_bool,\n+    clippy::eq_op\n+)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "2c85b68df632c8209cd1b56104d59c3ddcf4bdf4", "filename": "tests/ui/collapsible_if.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.rs?ref=58132cb3b0ddadc2004a121f0bd85d12bf089ff6", "patch": "@@ -1,5 +1,10 @@\n //@run-rustfix\n-#![allow(clippy::assertions_on_constants, clippy::equatable_if_let)]\n+#![allow(\n+    clippy::assertions_on_constants,\n+    clippy::equatable_if_let,\n+    clippy::nonminimal_bool,\n+    clippy::eq_op\n+)]\n \n #[rustfmt::skip]\n #[warn(clippy::collapsible_if)]"}, {"sha": "c687bae1acc524b033abda01444080b19958b9b1", "filename": "tests/ui/collapsible_if.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fcollapsible_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fcollapsible_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.stderr?ref=58132cb3b0ddadc2004a121f0bd85d12bf089ff6", "patch": "@@ -1,5 +1,5 @@\n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:9:5\n+  --> $DIR/collapsible_if.rs:14:5\n    |\n LL | /     if x == \"hello\" {\n LL | |         if y == \"world\" {\n@@ -17,7 +17,7 @@ LL +     }\n    |\n \n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:15:5\n+  --> $DIR/collapsible_if.rs:20:5\n    |\n LL | /     if x == \"hello\" || x == \"world\" {\n LL | |         if y == \"world\" || y == \"hello\" {\n@@ -34,7 +34,7 @@ LL +     }\n    |\n \n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:21:5\n+  --> $DIR/collapsible_if.rs:26:5\n    |\n LL | /     if x == \"hello\" && x == \"world\" {\n LL | |         if y == \"world\" || y == \"hello\" {\n@@ -51,7 +51,7 @@ LL +     }\n    |\n \n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:27:5\n+  --> $DIR/collapsible_if.rs:32:5\n    |\n LL | /     if x == \"hello\" || x == \"world\" {\n LL | |         if y == \"world\" && y == \"hello\" {\n@@ -68,7 +68,7 @@ LL +     }\n    |\n \n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:33:5\n+  --> $DIR/collapsible_if.rs:38:5\n    |\n LL | /     if x == \"hello\" && x == \"world\" {\n LL | |         if y == \"world\" && y == \"hello\" {\n@@ -85,7 +85,7 @@ LL +     }\n    |\n \n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:39:5\n+  --> $DIR/collapsible_if.rs:44:5\n    |\n LL | /     if 42 == 1337 {\n LL | |         if 'a' != 'A' {\n@@ -102,7 +102,7 @@ LL +     }\n    |\n \n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:95:5\n+  --> $DIR/collapsible_if.rs:100:5\n    |\n LL | /     if x == \"hello\" {\n LL | |         if y == \"world\" { // Collapsible\n@@ -119,15 +119,15 @@ LL +     }\n    |\n \n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:154:5\n+  --> $DIR/collapsible_if.rs:159:5\n    |\n LL | /     if matches!(true, true) {\n LL | |         if matches!(true, true) {}\n LL | |     }\n    | |_____^ help: collapse nested if block: `if matches!(true, true) && matches!(true, true) {}`\n \n error: this `if` statement can be collapsed\n-  --> $DIR/collapsible_if.rs:159:5\n+  --> $DIR/collapsible_if.rs:164:5\n    |\n LL | /     if matches!(true, true) && truth() {\n LL | |         if matches!(true, true) {}"}, {"sha": "3914b45464c719f3b3b48627f347a3292a75f489", "filename": "tests/ui/match_same_arms.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms.rs?ref=58132cb3b0ddadc2004a121f0bd85d12bf089ff6", "patch": "@@ -57,6 +57,16 @@ macro_rules! m {\n     (foo) => {};\n     (bar) => {};\n }\n+macro_rules! foo {\n+    () => {\n+        1\n+    };\n+}\n+macro_rules! bar {\n+    () => {\n+        1\n+    };\n+}\n \n fn main() {\n     let x = 0;\n@@ -111,4 +121,16 @@ fn main() {\n         },\n         _ => 0,\n     };\n+\n+    let _ = match 0 {\n+        0 => foo!(),\n+        1 => bar!(),\n+        _ => 1,\n+    };\n+\n+    let _ = match 0 {\n+        0 => cfg!(not_enabled),\n+        1 => cfg!(also_not_enabled),\n+        _ => false,\n+    };\n }"}, {"sha": "60b2975be04543f9649fde236d3a9c30cd257491", "filename": "tests/ui/match_same_arms2.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fmatch_same_arms2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fmatch_same_arms2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.rs?ref=58132cb3b0ddadc2004a121f0bd85d12bf089ff6", "patch": "@@ -239,4 +239,10 @@ fn main() {\n         3 => core::convert::identity::<u32>(todo!()),\n         _ => 5,\n     };\n+\n+    let _ = match 0 {\n+        0 => cfg!(not_enable),\n+        1 => cfg!(not_enable),\n+        _ => false,\n+    };\n }"}, {"sha": "8fb461bd28667e65f60981eccb6b49ef407a3e87", "filename": "tests/ui/match_same_arms2.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fmatch_same_arms2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fmatch_same_arms2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatch_same_arms2.stderr?ref=58132cb3b0ddadc2004a121f0bd85d12bf089ff6", "patch": "@@ -192,5 +192,20 @@ note: other arm here\n LL |         Some(Bar { x: 0, y: 5, .. }) => 1,\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 12 previous errors\n+error: this match arm has an identical body to another arm\n+  --> $DIR/match_same_arms2.rs:245:9\n+   |\n+LL |         1 => cfg!(not_enable),\n+   |         -^^^^^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: try merging the arm patterns: `1 | 0`\n+   |\n+   = help: or try changing either arm body\n+note: other arm here\n+  --> $DIR/match_same_arms2.rs:244:9\n+   |\n+LL |         0 => cfg!(not_enable),\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 13 previous errors\n "}, {"sha": "2df87a26d6d150ebda1e88b9630384527a639c05", "filename": "tests/ui/partialeq_to_none.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fpartialeq_to_none.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fpartialeq_to_none.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_to_none.fixed?ref=58132cb3b0ddadc2004a121f0bd85d12bf089ff6", "patch": "@@ -1,5 +1,6 @@\n //@run-rustfix\n #![warn(clippy::partialeq_to_none)]\n+#![allow(clippy::eq_op)]\n \n struct Foobar;\n "}, {"sha": "df6233b9afd6387ada1f2941cf3450f554a1aee8", "filename": "tests/ui/partialeq_to_none.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fpartialeq_to_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fpartialeq_to_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_to_none.rs?ref=58132cb3b0ddadc2004a121f0bd85d12bf089ff6", "patch": "@@ -1,5 +1,6 @@\n //@run-rustfix\n #![warn(clippy::partialeq_to_none)]\n+#![allow(clippy::eq_op)]\n \n struct Foobar;\n "}, {"sha": "4f84862a22b8f092f8b87eeeaff9fa57beed3191", "filename": "tests/ui/partialeq_to_none.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fpartialeq_to_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58132cb3b0ddadc2004a121f0bd85d12bf089ff6/tests%2Fui%2Fpartialeq_to_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_to_none.stderr?ref=58132cb3b0ddadc2004a121f0bd85d12bf089ff6", "patch": "@@ -1,61 +1,61 @@\n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:14:8\n+  --> $DIR/partialeq_to_none.rs:15:8\n    |\n LL |     if f != None { \"yay\" } else { \"nay\" }\n    |        ^^^^^^^^^ help: use `Option::is_some()` instead: `f.is_some()`\n    |\n    = note: `-D clippy::partialeq-to-none` implied by `-D warnings`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:44:13\n+  --> $DIR/partialeq_to_none.rs:45:13\n    |\n LL |     let _ = x == None;\n    |             ^^^^^^^^^ help: use `Option::is_none()` instead: `x.is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:45:13\n+  --> $DIR/partialeq_to_none.rs:46:13\n    |\n LL |     let _ = x != None;\n    |             ^^^^^^^^^ help: use `Option::is_some()` instead: `x.is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:46:13\n+  --> $DIR/partialeq_to_none.rs:47:13\n    |\n LL |     let _ = None == x;\n    |             ^^^^^^^^^ help: use `Option::is_none()` instead: `x.is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:47:13\n+  --> $DIR/partialeq_to_none.rs:48:13\n    |\n LL |     let _ = None != x;\n    |             ^^^^^^^^^ help: use `Option::is_some()` instead: `x.is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:49:8\n+  --> $DIR/partialeq_to_none.rs:50:8\n    |\n LL |     if foobar() == None {}\n    |        ^^^^^^^^^^^^^^^^ help: use `Option::is_none()` instead: `foobar().is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:51:8\n+  --> $DIR/partialeq_to_none.rs:52:8\n    |\n LL |     if bar().ok() != None {}\n    |        ^^^^^^^^^^^^^^^^^^ help: use `Option::is_some()` instead: `bar().ok().is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:53:13\n+  --> $DIR/partialeq_to_none.rs:54:13\n    |\n LL |     let _ = Some(1 + 2) != None;\n    |             ^^^^^^^^^^^^^^^^^^^ help: use `Option::is_some()` instead: `Some(1 + 2).is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:55:13\n+  --> $DIR/partialeq_to_none.rs:56:13\n    |\n LL |     let _ = { Some(0) } == None;\n    |             ^^^^^^^^^^^^^^^^^^^ help: use `Option::is_none()` instead: `{ Some(0) }.is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:57:13\n+  --> $DIR/partialeq_to_none.rs:58:13\n    |\n LL |       let _ = {\n    |  _____________^\n@@ -77,31 +77,31 @@ LL ~     }.is_some();\n    |\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:67:13\n+  --> $DIR/partialeq_to_none.rs:68:13\n    |\n LL |     let _ = optref() == &&None;\n    |             ^^^^^^^^^^^^^^^^^^ help: use `Option::is_none()` instead: `optref().is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:68:13\n+  --> $DIR/partialeq_to_none.rs:69:13\n    |\n LL |     let _ = &&None != optref();\n    |             ^^^^^^^^^^^^^^^^^^ help: use `Option::is_some()` instead: `optref().is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:69:13\n+  --> $DIR/partialeq_to_none.rs:70:13\n    |\n LL |     let _ = **optref() == None;\n    |             ^^^^^^^^^^^^^^^^^^ help: use `Option::is_none()` instead: `optref().is_none()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:70:13\n+  --> $DIR/partialeq_to_none.rs:71:13\n    |\n LL |     let _ = &None != *optref();\n    |             ^^^^^^^^^^^^^^^^^^ help: use `Option::is_some()` instead: `optref().is_some()`\n \n error: binary comparison to literal `Option::None`\n-  --> $DIR/partialeq_to_none.rs:73:13\n+  --> $DIR/partialeq_to_none.rs:74:13\n    |\n LL |     let _ = None != *x;\n    |             ^^^^^^^^^^ help: use `Option::is_some()` instead: `(*x).is_some()`"}]}