{"sha": "1d57da783b150a84c7b4ead283483bdd48029abb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNTdkYTc4M2IxNTBhODRjN2I0ZWFkMjgzNDgzYmRkNDgwMjlhYmI=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-04T07:21:44Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-08T19:06:22Z"}, "message": "Handle fallout in libnative\n\nAPI Changes:\n\n- GetAddrInfoRequest::run() returns Result<Vec<..>, ..>\n- Process::spawn() returns Result(.., Vec<..>), ..>", "tree": {"sha": "b477a60d63a15a62320bfc93bebb97d54cc6ab31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b477a60d63a15a62320bfc93bebb97d54cc6ab31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d57da783b150a84c7b4ead283483bdd48029abb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d57da783b150a84c7b4ead283483bdd48029abb", "html_url": "https://github.com/rust-lang/rust/commit/1d57da783b150a84c7b4ead283483bdd48029abb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d57da783b150a84c7b4ead283483bdd48029abb/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a99eff3fca670238bd7194dc83d8f4b968277dc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a99eff3fca670238bd7194dc83d8f4b968277dc6", "html_url": "https://github.com/rust-lang/rust/commit/a99eff3fca670238bd7194dc83d8f4b968277dc6"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "57b87f21521e8221844e230b806f2888fcf12f45", "filename": "src/libnative/io/addrinfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d57da783b150a84c7b4ead283483bdd48029abb/src%2Flibnative%2Fio%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d57da783b150a84c7b4ead283483bdd48029abb/src%2Flibnative%2Fio%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Faddrinfo.rs?ref=1d57da783b150a84c7b4ead283483bdd48029abb", "patch": "@@ -22,7 +22,7 @@ pub struct GetAddrInfoRequest;\n \n impl GetAddrInfoRequest {\n     pub fn run(host: Option<&str>, servname: Option<&str>,\n-               hint: Option<ai::Hint>) -> Result<~[ai::Info], IoError> {\n+               hint: Option<ai::Hint>) -> Result<Vec<ai::Info>, IoError> {\n         assert!(host.is_some() || servname.is_some());\n \n         let c_host = host.map_or(unsafe { CString::new(null(), true) }, |x| x.to_c_str());\n@@ -80,7 +80,7 @@ impl GetAddrInfoRequest {\n \n         unsafe { freeaddrinfo(res); }\n \n-        Ok(addrs.move_iter().collect())\n+        Ok(addrs)\n     }\n }\n "}, {"sha": "f2c2c66e1425fe521be0ff897e2a17c10b98b567", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d57da783b150a84c7b4ead283483bdd48029abb/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d57da783b150a84c7b4ead283483bdd48029abb/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=1d57da783b150a84c7b4ead283483bdd48029abb", "patch": "@@ -194,7 +194,7 @@ impl rtio::IoFactory for IoFactory {\n         })\n     }\n     fn get_host_addresses(&mut self, host: Option<&str>, servname: Option<&str>,\n-                          hint: Option<ai::Hint>) -> IoResult<~[ai::Info]> {\n+                          hint: Option<ai::Hint>) -> IoResult<Vec<ai::Info>> {\n         addrinfo::GetAddrInfoRequest::run(host, servname, hint)\n     }\n \n@@ -260,7 +260,7 @@ impl rtio::IoFactory for IoFactory {\n     }\n     fn spawn(&mut self, config: ProcessConfig)\n             -> IoResult<(Box<RtioProcess:Send>,\n-                         ~[Option<Box<RtioPipe:Send>>])> {\n+                         Vec<Option<Box<RtioPipe:Send>>>)> {\n         process::Process::spawn(config).map(|(p, io)| {\n             (box p as Box<RtioProcess:Send>,\n              io.move_iter().map(|p| p.map(|p| {"}, {"sha": "c83af20d1d84eac884ed7dd2b83372f2500f40a8", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1d57da783b150a84c7b4ead283483bdd48029abb/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d57da783b150a84c7b4ead283483bdd48029abb/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=1d57da783b150a84c7b4ead283483bdd48029abb", "patch": "@@ -67,7 +67,7 @@ impl Process {\n     ///     os pipe instead. This process takes ownership of these file\n     ///     descriptors, closing them upon destruction of the process.\n     pub fn spawn(config: p::ProcessConfig)\n-        -> Result<(Process, ~[Option<file::FileDesc>]), io::IoError>\n+        -> Result<(Process, Vec<Option<file::FileDesc>>), io::IoError>\n     {\n         // right now we only handle stdin/stdout/stderr.\n         if config.extra_io.len() > 0 {\n@@ -117,7 +117,7 @@ impl Process {\n                         exit_code: None,\n                         exit_signal: None,\n                     },\n-                    ret_io.move_iter().collect()))\n+                    ret_io))\n             }\n             Err(e) => Err(e)\n         }"}, {"sha": "ccde8d9c96af08cf15bcc141624531a4d5009aab", "filename": "src/libstd/rt/rtio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d57da783b150a84c7b4ead283483bdd48029abb/src%2Flibstd%2Frt%2Frtio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d57da783b150a84c7b4ead283483bdd48029abb/src%2Flibstd%2Frt%2Frtio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Frtio.rs?ref=1d57da783b150a84c7b4ead283483bdd48029abb", "patch": "@@ -191,7 +191,7 @@ pub trait IoFactory {\n     fn timer_init(&mut self) -> IoResult<Box<RtioTimer:Send>>;\n     fn spawn(&mut self, config: ProcessConfig)\n             -> IoResult<(Box<RtioProcess:Send>,\n-                         ~[Option<Box<RtioPipe:Send>>])>;\n+                         Vec<Option<Box<RtioPipe:Send>>>)>;\n     fn kill(&mut self, pid: libc::pid_t, signal: int) -> IoResult<()>;\n     fn pipe_open(&mut self, fd: c_int) -> IoResult<Box<RtioPipe:Send>>;\n     fn tty_open(&mut self, fd: c_int, readable: bool)"}]}