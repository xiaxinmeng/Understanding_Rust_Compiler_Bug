{"sha": "c48dcf74118b6e0df747f036a9b66701037f3fc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0OGRjZjc0MTE4YjZlMGRmNzQ3ZjAzNmE5YjY2NzAxMDM3ZjNmYzc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-11T10:51:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-11T10:51:07Z"}, "message": "Merge #3549\n\n3549: Implement env! macro r=matklad a=edwin0cheng\n\nThis PR implements `env!` macro by adding following things:\r\n\r\n1. Added `additional_outdirs` settings in vscode. (naming to be bikeshed)\r\n2. Added `ExternSourceId` which is a wrapping for SourceRootId but only used in extern sources. It is because `OUT_DIR` is not belonged to any crate and we have to access it behind an `AstDatabase`.\r\n3. This PR does not implement the `OUT_DIR` parsing from `cargo check`. I don't have general design about this,  @kiljacken could we reuse some cargo watch code for that ?\r\n\r\n~~Block on [#3536]~~\r\n\r\nPS: After this PR , we (kind of) completed the `include!(concat!(env!('OUT_DIR'),  \"foo.rs\")` macro call combo. [Exodia Obliterate!](https://www.youtube.com/watch?v=RfqNH3FoGi0)\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "bc047c31d43d2e16428c56bf7cdf305f4a30fa66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc047c31d43d2e16428c56bf7cdf305f4a30fa66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c48dcf74118b6e0df747f036a9b66701037f3fc7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeaMKbCRBK7hj4Ov3rIwAAdHIIAAtb/G1PEluouePTnAlRCP6b\nQ/ij+zgdlxfw3MUSC9OSVAKLvqmoDAJ+F0mChA25AHiT3nHEMIw6vnUzW43zss8m\nIQO+1sm/Nggpa3/xkIRcUgpX9OSLrtI/dYBYruxinmX7U5mLBiDuVdTmYxub7+sT\nhXMu3pFFD+pahSlJuq1s0luxswk74HjyKMm8+MUDcytEa5T26BUkDEx/aQY0qj7Q\nTqPA4owWkdGJqZTAAMqkuKharmKuTR8StSAX6gfiJMRTWMFuLV27mwWhaxDhpM0x\nOOl4ljqQAIYS6VyvLA5dPt0c4+QD+6+ojLC6Na0MDr8Su1iqnmMAUTkL3R6oyrA=\n=v4JH\n-----END PGP SIGNATURE-----\n", "payload": "tree bc047c31d43d2e16428c56bf7cdf305f4a30fa66\nparent 7b323b45a15809a20052f13d5a8f073aaa274a86\nparent 6ea7c319154f9ec10721f4041afc9d07d6b2476b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583923867 +0000\ncommitter GitHub <noreply@github.com> 1583923867 +0000\n\nMerge #3549\n\n3549: Implement env! macro r=matklad a=edwin0cheng\n\nThis PR implements `env!` macro by adding following things:\r\n\r\n1. Added `additional_outdirs` settings in vscode. (naming to be bikeshed)\r\n2. Added `ExternSourceId` which is a wrapping for SourceRootId but only used in extern sources. It is because `OUT_DIR` is not belonged to any crate and we have to access it behind an `AstDatabase`.\r\n3. This PR does not implement the `OUT_DIR` parsing from `cargo check`. I don't have general design about this,  @kiljacken could we reuse some cargo watch code for that ?\r\n\r\n~~Block on [#3536]~~\r\n\r\nPS: After this PR , we (kind of) completed the `include!(concat!(env!('OUT_DIR'),  \"foo.rs\")` macro call combo. [Exodia Obliterate!](https://www.youtube.com/watch?v=RfqNH3FoGi0)\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c48dcf74118b6e0df747f036a9b66701037f3fc7", "html_url": "https://github.com/rust-lang/rust/commit/c48dcf74118b6e0df747f036a9b66701037f3fc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c48dcf74118b6e0df747f036a9b66701037f3fc7/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b323b45a15809a20052f13d5a8f073aaa274a86", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b323b45a15809a20052f13d5a8f073aaa274a86", "html_url": "https://github.com/rust-lang/rust/commit/7b323b45a15809a20052f13d5a8f073aaa274a86"}, {"sha": "6ea7c319154f9ec10721f4041afc9d07d6b2476b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ea7c319154f9ec10721f4041afc9d07d6b2476b", "html_url": "https://github.com/rust-lang/rust/commit/6ea7c319154f9ec10721f4041afc9d07d6b2476b"}], "stats": {"total": 392, "additions": 320, "deletions": 72}, "files": [{"sha": "3dc86ca2dab04f7cfd93fd485aeedd136329f555", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -61,7 +61,14 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, ra_fixture: &str) -> FileId\n         };\n \n         let mut crate_graph = CrateGraph::default();\n-        crate_graph.add_crate_root(file_id, meta.edition, meta.krate, meta.cfg, meta.env);\n+        crate_graph.add_crate_root(\n+            file_id,\n+            meta.edition,\n+            meta.krate,\n+            meta.cfg,\n+            meta.env,\n+            Default::default(),\n+        );\n         crate_graph\n     } else {\n         let mut crate_graph = CrateGraph::default();\n@@ -71,6 +78,7 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, ra_fixture: &str) -> FileId\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         crate_graph\n     };\n@@ -119,6 +127,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n                 Some(krate.clone()),\n                 meta.cfg,\n                 meta.env,\n+                Default::default(),\n             );\n             let prev = crates.insert(krate.clone(), crate_id);\n             assert!(prev.is_none());\n@@ -155,6 +164,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n     } else {\n         for (from, to) in crate_deps {"}, {"sha": "06d40db96aa97d15916521db916047735646020b", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -113,6 +113,7 @@ pub struct CrateData {\n     pub display_name: Option<String>,\n     pub cfg_options: CfgOptions,\n     pub env: Env,\n+    pub extern_source: ExternSource,\n     pub dependencies: Vec<Dependency>,\n }\n \n@@ -122,11 +123,22 @@ pub enum Edition {\n     Edition2015,\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct ExternSourceId(pub u32);\n+\n #[derive(Default, Debug, Clone, PartialEq, Eq)]\n pub struct Env {\n     entries: FxHashMap<String, String>,\n }\n \n+// FIXME: Redesign vfs for solve the following limitation ?\n+// Note: Some env variables (e.g. OUT_DIR) are located outside of the\n+// crate. We store a map to allow remap it to ExternSourceId\n+#[derive(Default, Debug, Clone, PartialEq, Eq)]\n+pub struct ExternSource {\n+    extern_paths: FxHashMap<String, ExternSourceId>,\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Dependency {\n     pub crate_id: CrateId,\n@@ -141,13 +153,15 @@ impl CrateGraph {\n         display_name: Option<String>,\n         cfg_options: CfgOptions,\n         env: Env,\n+        extern_source: ExternSource,\n     ) -> CrateId {\n         let data = CrateData {\n             root_file_id: file_id,\n             edition,\n             display_name,\n             cfg_options,\n             env,\n+            extern_source,\n             dependencies: Vec::new(),\n         };\n         let crate_id = CrateId(self.arena.len() as u32);\n@@ -271,6 +285,27 @@ impl Env {\n     }\n }\n \n+impl ExternSource {\n+    pub fn extern_path(&self, path: &str) -> Option<(ExternSourceId, RelativePathBuf)> {\n+        self.extern_paths.iter().find_map(|(root_path, id)| {\n+            if path.starts_with(root_path) {\n+                let mut rel_path = &path[root_path.len()..];\n+                if rel_path.starts_with(\"/\") {\n+                    rel_path = &rel_path[1..];\n+                }\n+                let rel_path = RelativePathBuf::from_path(rel_path).ok()?;\n+                Some((id.clone(), rel_path))\n+            } else {\n+                None\n+            }\n+        })\n+    }\n+\n+    pub fn set_extern_path(&mut self, root_path: &str, root: ExternSourceId) {\n+        self.extern_paths.insert(root_path.to_owned(), root);\n+    }\n+}\n+\n #[derive(Debug)]\n pub struct ParseEditionError {\n     invalid_input: String,\n@@ -300,20 +335,23 @@ mod tests {\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n             Edition2018,\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n             Edition2018,\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n         assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n@@ -329,20 +367,23 @@ mod tests {\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n             Edition2018,\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n             Edition2018,\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n         assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n@@ -357,13 +398,15 @@ mod tests {\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n             Edition2018,\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         assert!(graph\n             .add_dep(crate1, CrateName::normalize_dashes(\"crate-name-with-dashes\"), crate2)"}, {"sha": "d500d5e85bac42e8024fe9b68561c9d9392c95c9", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -11,7 +11,8 @@ use ra_syntax::{ast, Parse, SourceFile, TextRange, TextUnit};\n pub use crate::{\n     cancellation::Canceled,\n     input::{\n-        CrateGraph, CrateId, CrateName, Dependency, Edition, Env, FileId, SourceRoot, SourceRootId,\n+        CrateGraph, CrateId, CrateName, Dependency, Edition, Env, ExternSource, ExternSourceId,\n+        FileId, SourceRoot, SourceRootId,\n     },\n };\n pub use relative_path::{RelativePath, RelativePathBuf};\n@@ -87,6 +88,12 @@ pub trait FileLoader {\n     fn resolve_relative_path(&self, anchor: FileId, relative_path: &RelativePath)\n         -> Option<FileId>;\n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>>;\n+\n+    fn resolve_extern_path(\n+        &self,\n+        extern_id: ExternSourceId,\n+        relative_path: &RelativePath,\n+    ) -> Option<FileId>;\n }\n \n /// Database which stores all significant input facts: source code and project\n@@ -164,4 +171,13 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n         let source_root = self.0.file_source_root(file_id);\n         self.0.source_root_crates(source_root)\n     }\n+\n+    fn resolve_extern_path(\n+        &self,\n+        extern_id: ExternSourceId,\n+        relative_path: &RelativePath,\n+    ) -> Option<FileId> {\n+        let source_root = self.0.source_root(SourceRootId(extern_id.0));\n+        source_root.file_by_relative_path(&relative_path)\n+    }\n }"}, {"sha": "0756916a8058953635a5079efb6f2ebc045550af", "filename": "crates/ra_hir_def/src/test_db.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -6,7 +6,7 @@ use std::{\n };\n \n use crate::db::DefDatabase;\n-use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath};\n+use ra_db::{salsa, CrateId, ExternSourceId, FileId, FileLoader, FileLoaderDelegate, RelativePath};\n \n #[salsa::database(\n     ra_db::SourceDatabaseExtStorage,\n@@ -52,6 +52,14 @@ impl FileLoader for TestDB {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n+\n+    fn resolve_extern_path(\n+        &self,\n+        extern_id: ExternSourceId,\n+        relative_path: &RelativePath,\n+    ) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_extern_path(extern_id, relative_path)\n+    }\n }\n \n impl TestDB {"}, {"sha": "a90007f264b0513e86a983f7b8ed562b0da3f746", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 122, "deletions": 60, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -90,15 +90,15 @@ register_builtin! {\n     (line, Line) => line_expand,\n     (stringify, Stringify) => stringify_expand,\n     (format_args, FormatArgs) => format_args_expand,\n-    (env, Env) => env_expand,\n-    (option_env, OptionEnv) => option_env_expand,\n     // format_args_nl only differs in that it adds a newline in the end,\n     // so we use the same stub expansion for now\n     (format_args_nl, FormatArgsNl) => format_args_expand,\n \n     EAGER:\n     (concat, Concat) => concat_expand,\n-    (include, Include) => include_expand\n+    (include, Include) => include_expand,\n+    (env, Env) => env_expand,\n+    (option_env, OptionEnv) => option_env_expand\n }\n \n fn line_expand(\n@@ -137,31 +137,6 @@ fn stringify_expand(\n     Ok(expanded)\n }\n \n-fn env_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n-    _tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n-    // dummy implementation for type-checking purposes\n-    // we cannot use an empty string here, because for\n-    // `include!(concat!(env!(\"OUT_DIR\"), \"/foo.rs\"))` will become\n-    // `include!(\"foo.rs\"), which maybe infinite loop\n-    let expanded = quote! { \"__RA_UNIMPLEMENTATED__\" };\n-\n-    Ok(expanded)\n-}\n-\n-fn option_env_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n-    _tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n-    // dummy implementation for type-checking purposes\n-    let expanded = quote! { std::option::Option::None::<&str> };\n-\n-    Ok(expanded)\n-}\n-\n fn column_expand(\n     _db: &dyn AstDatabase,\n     _id: LazyMacroId,\n@@ -278,30 +253,37 @@ fn concat_expand(\n \n fn relative_file(db: &dyn AstDatabase, call_id: MacroCallId, path: &str) -> Option<FileId> {\n     let call_site = call_id.as_file().original_file(db);\n-    let path = RelativePath::new(&path);\n \n-    let res = db.resolve_relative_path(call_site, &path)?;\n-    // Prevent include itself\n-    if res == call_site {\n-        return None;\n+    // Handle trivial case\n+    if let Some(res) = db.resolve_relative_path(call_site, &RelativePath::new(&path)) {\n+        // Prevent include itself\n+        return if res == call_site { None } else { Some(res) };\n     }\n-    Some(res)\n+\n+    // Extern paths ?\n+    let krate = db.relevant_crates(call_site).get(0)?.clone();\n+    let (extern_source_id, relative_file) =\n+        db.crate_graph()[krate].extern_source.extern_path(path)?;\n+\n+    db.resolve_extern_path(extern_source_id, &relative_file)\n }\n \n-fn include_expand(\n-    db: &dyn AstDatabase,\n-    arg_id: EagerMacroId,\n-    tt: &tt::Subtree,\n-) -> Result<(tt::Subtree, FragmentKind), mbe::ExpandError> {\n-    let path = tt\n-        .token_trees\n+fn parse_string(tt: &tt::Subtree) -> Result<String, mbe::ExpandError> {\n+    tt.token_trees\n         .get(0)\n         .and_then(|tt| match tt {\n             tt::TokenTree::Leaf(tt::Leaf::Literal(it)) => unquote_str(&it),\n             _ => None,\n         })\n-        .ok_or_else(|| mbe::ExpandError::ConversionError)?;\n+        .ok_or_else(|| mbe::ExpandError::ConversionError)\n+}\n \n+fn include_expand(\n+    db: &dyn AstDatabase,\n+    arg_id: EagerMacroId,\n+    tt: &tt::Subtree,\n+) -> Result<(tt::Subtree, FragmentKind), mbe::ExpandError> {\n+    let path = parse_string(tt)?;\n     let file_id =\n         relative_file(db, arg_id.into(), &path).ok_or_else(|| mbe::ExpandError::ConversionError)?;\n \n@@ -314,12 +296,58 @@ fn include_expand(\n     Ok((res, FragmentKind::Items))\n }\n \n+fn get_env_inner(db: &dyn AstDatabase, arg_id: EagerMacroId, key: &str) -> Option<String> {\n+    let call_id: MacroCallId = arg_id.into();\n+    let original_file = call_id.as_file().original_file(db);\n+\n+    let krate = db.relevant_crates(original_file).get(0)?.clone();\n+    db.crate_graph()[krate].env.get(key)\n+}\n+\n+fn env_expand(\n+    db: &dyn AstDatabase,\n+    arg_id: EagerMacroId,\n+    tt: &tt::Subtree,\n+) -> Result<(tt::Subtree, FragmentKind), mbe::ExpandError> {\n+    let key = parse_string(tt)?;\n+\n+    // FIXME:\n+    // If the environment variable is not defined int rustc, then a compilation error will be emitted.\n+    // We might do the same if we fully support all other stuffs.\n+    // But for now on, we should return some dummy string for better type infer purpose.\n+    // However, we cannot use an empty string here, because for\n+    // `include!(concat!(env!(\"OUT_DIR\"), \"/foo.rs\"))` will become\n+    // `include!(\"foo.rs\"), which might go to infinite loop\n+    let s = get_env_inner(db, arg_id, &key).unwrap_or(\"__RA_UNIMPLEMENTATED__\".to_string());\n+    let expanded = quote! { #s };\n+\n+    Ok((expanded, FragmentKind::Expr))\n+}\n+\n+fn option_env_expand(\n+    db: &dyn AstDatabase,\n+    arg_id: EagerMacroId,\n+    tt: &tt::Subtree,\n+) -> Result<(tt::Subtree, FragmentKind), mbe::ExpandError> {\n+    let key = parse_string(tt)?;\n+    let expanded = match get_env_inner(db, arg_id, &key) {\n+        None => quote! { std::option::Option::None::<&str> },\n+        Some(s) => quote! { std::option::Some(#s) },\n+    };\n+\n+    Ok((expanded, FragmentKind::Expr))\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use crate::{name::AsName, test_db::TestDB, AstNode, MacroCallId, MacroCallKind, MacroCallLoc};\n+    use crate::{\n+        name::AsName, test_db::TestDB, AstNode, EagerCallLoc, MacroCallId, MacroCallKind,\n+        MacroCallLoc,\n+    };\n     use ra_db::{fixture::WithFixture, SourceDatabase};\n     use ra_syntax::ast::NameOwner;\n+    use std::sync::Arc;\n \n     fn expand_builtin_macro(ra_fixture: &str) -> String {\n         let (db, file_id) = TestDB::with_single_file(&ra_fixture);\n@@ -330,27 +358,61 @@ mod tests {\n         let ast_id_map = db.ast_id_map(file_id.into());\n \n         let expander = find_by_name(&macro_calls[0].name().unwrap().as_name()).unwrap();\n-        let expander = expander.left().unwrap();\n \n-        // the first one should be a macro_rules\n-        let def = MacroDefId {\n-            krate: Some(CrateId(0)),\n-            ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_calls[0]))),\n-            kind: MacroDefKind::BuiltIn(expander),\n-        };\n+        let file_id = match expander {\n+            Either::Left(expander) => {\n+                // the first one should be a macro_rules\n+                let def = MacroDefId {\n+                    krate: Some(CrateId(0)),\n+                    ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_calls[0]))),\n+                    kind: MacroDefKind::BuiltIn(expander),\n+                };\n \n-        let loc = MacroCallLoc {\n-            def,\n-            kind: MacroCallKind::FnLike(AstId::new(\n-                file_id.into(),\n-                ast_id_map.ast_id(&macro_calls[1]),\n-            )),\n-        };\n+                let loc = MacroCallLoc {\n+                    def,\n+                    kind: MacroCallKind::FnLike(AstId::new(\n+                        file_id.into(),\n+                        ast_id_map.ast_id(&macro_calls[1]),\n+                    )),\n+                };\n+\n+                let id: MacroCallId = db.intern_macro(loc).into();\n+                id.as_file()\n+            }\n+            Either::Right(expander) => {\n+                // the first one should be a macro_rules\n+                let def = MacroDefId {\n+                    krate: Some(CrateId(0)),\n+                    ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_calls[0]))),\n+                    kind: MacroDefKind::BuiltInEager(expander),\n+                };\n \n-        let id: MacroCallId = db.intern_macro(loc).into();\n-        let parsed = db.parse_or_expand(id.as_file()).unwrap();\n+                let args = macro_calls[1].token_tree().unwrap();\n+                let parsed_args = mbe::ast_to_token_tree(&args).unwrap().0;\n+\n+                let arg_id = db.intern_eager_expansion({\n+                    EagerCallLoc {\n+                        def,\n+                        fragment: FragmentKind::Expr,\n+                        subtree: Arc::new(parsed_args.clone()),\n+                        file_id: file_id.into(),\n+                    }\n+                });\n+\n+                let (subtree, fragment) = expander.expand(&db, arg_id, &parsed_args).unwrap();\n+                let eager = EagerCallLoc {\n+                    def,\n+                    fragment,\n+                    subtree: Arc::new(subtree),\n+                    file_id: file_id.into(),\n+                };\n+\n+                let id: MacroCallId = db.intern_eager_expansion(eager.into()).into();\n+                id.as_file()\n+            }\n+        };\n \n-        parsed.text().to_string()\n+        db.parse_or_expand(file_id).unwrap().to_string()\n     }\n \n     #[test]"}, {"sha": "c1fb762debf6e358b5857b3d3976815827cf84aa", "filename": "crates/ra_hir_expand/src/test_db.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -5,7 +5,7 @@ use std::{\n     sync::{Arc, Mutex},\n };\n \n-use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath};\n+use ra_db::{salsa, CrateId, ExternSourceId, FileId, FileLoader, FileLoaderDelegate, RelativePath};\n \n #[salsa::database(\n     ra_db::SourceDatabaseExtStorage,\n@@ -51,4 +51,11 @@ impl FileLoader for TestDB {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n+    fn resolve_extern_path(\n+        &self,\n+        anchor: ExternSourceId,\n+        relative_path: &RelativePath,\n+    ) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_extern_path(anchor, relative_path)\n+    }\n }"}, {"sha": "0be2fea4b899a2c0031c88c55759d772777b3129", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -67,6 +67,13 @@ impl FileLoader for TestDB {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n+    fn resolve_extern_path(\n+        &self,\n+        extern_id: ra_db::ExternSourceId,\n+        relative_path: &RelativePath,\n+    ) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_extern_path(extern_id, relative_path)\n+    }\n }\n \n impl TestDB {"}, {"sha": "32457bbf7a1ff95c7510bcceb0b34d96f7dd382f", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -549,6 +549,26 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn infer_builtin_macros_env() {\n+    assert_snapshot!(\n+        infer(r#\"\n+//- /main.rs env:foo=bar\n+#[rustc_builtin_macro]\n+macro_rules! env {() => {}}\n+\n+fn main() {\n+    let x = env!(\"foo\");\n+}\n+\"#),\n+        @r###\"\n+    ![0; 5) '\"bar\"': &str\n+    [88; 116) '{     ...o\"); }': ()\n+    [98; 99) 'x': &str\n+    \"###\n+    );\n+}\n+\n #[test]\n fn infer_derive_clone_simple() {\n     let (db, pos) = TestDB::with_position("}, {"sha": "015fae19564cae41d39adbc56167f2cb1de62377", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -212,6 +212,7 @@ impl Analysis {\n             None,\n             cfg_options,\n             Env::default(),\n+            Default::default(),\n         );\n         change.add_file(source_root, file_id, \"main.rs\".into(), Arc::new(text));\n         change.set_crate_graph(crate_graph);"}, {"sha": "25816cf6fc5b93311d1fe68e8dd671a16cc2bb7a", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -102,6 +102,7 @@ impl MockAnalysis {\n                     None,\n                     cfg_options,\n                     Env::default(),\n+                    Default::default(),\n                 ));\n             } else if path.ends_with(\"/lib.rs\") {\n                 let crate_name = path.parent().unwrap().file_name().unwrap();\n@@ -111,6 +112,7 @@ impl MockAnalysis {\n                     Some(crate_name.to_owned()),\n                     cfg_options,\n                     Env::default(),\n+                    Default::default(),\n                 );\n                 if let Some(root_crate) = root_crate {\n                     crate_graph"}, {"sha": "76d130b9b9a8a0d8d134cb5842a3068e76adadf3", "filename": "crates/ra_ide/src/parent_module.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fparent_module.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -136,6 +136,7 @@ mod tests {\n             None,\n             CfgOptions::default(),\n             Env::default(),\n+            Default::default(),\n         );\n         let mut change = AnalysisChange::new();\n         change.set_crate_graph(crate_graph);"}, {"sha": "fc1b19def0e989cfb5538f8fc6da61ffea05c928", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -55,6 +55,13 @@ impl FileLoader for RootDatabase {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n+    fn resolve_extern_path(\n+        &self,\n+        extern_id: ra_db::ExternSourceId,\n+        relative_path: &RelativePath,\n+    ) -> Option<FileId> {\n+        FileLoaderDelegate(self).resolve_extern_path(extern_id, relative_path)\n+    }\n }\n \n impl salsa::Database for RootDatabase {"}, {"sha": "a6274709d5a1f64fd60cd25542c39ed5ca6e3d01", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -14,7 +14,7 @@ use std::{\n \n use anyhow::{bail, Context, Result};\n use ra_cfg::CfgOptions;\n-use ra_db::{CrateGraph, CrateName, Edition, Env, FileId};\n+use ra_db::{CrateGraph, CrateName, Edition, Env, ExternSource, ExternSourceId, FileId};\n use rustc_hash::FxHashMap;\n use serde_json::from_reader;\n \n@@ -162,6 +162,7 @@ impl ProjectWorkspace {\n     pub fn to_crate_graph(\n         &self,\n         default_cfg_options: &CfgOptions,\n+        outdirs: &FxHashMap<String, (ExternSourceId, String)>,\n         load: &mut dyn FnMut(&Path) -> Option<FileId>,\n     ) -> CrateGraph {\n         let mut crate_graph = CrateGraph::default();\n@@ -185,6 +186,8 @@ impl ProjectWorkspace {\n                             }\n                             opts\n                         };\n+\n+                        // FIXME: No crate name in json definition such that we cannot add OUT_DIR to env\n                         crates.insert(\n                             crate_id,\n                             crate_graph.add_crate_root(\n@@ -194,6 +197,7 @@ impl ProjectWorkspace {\n                                 None,\n                                 cfg_options,\n                                 Env::default(),\n+                                Default::default(),\n                             ),\n                         );\n                     }\n@@ -231,12 +235,20 @@ impl ProjectWorkspace {\n                             opts\n                         };\n \n+                        let mut env = Env::default();\n+                        let mut extern_source = ExternSource::default();\n+                        if let Some((id, path)) = outdirs.get(krate.name(&sysroot)) {\n+                            env.set(\"OUT_DIR\", path.clone());\n+                            extern_source.set_extern_path(&path, *id);\n+                        }\n+\n                         let crate_id = crate_graph.add_crate_root(\n                             file_id,\n                             Edition::Edition2018,\n                             Some(krate.name(&sysroot).to_string()),\n                             cfg_options,\n-                            Env::default(),\n+                            env,\n+                            extern_source,\n                         );\n                         sysroot_crates.insert(krate, crate_id);\n                     }\n@@ -275,12 +287,19 @@ impl ProjectWorkspace {\n                                 opts.insert_features(pkg.features(&cargo).iter().map(Into::into));\n                                 opts\n                             };\n+                            let mut env = Env::default();\n+                            let mut extern_source = ExternSource::default();\n+                            if let Some((id, path)) = outdirs.get(pkg.name(&cargo)) {\n+                                env.set(\"OUT_DIR\", path.clone());\n+                                extern_source.set_extern_path(&path, *id);\n+                            }\n                             let crate_id = crate_graph.add_crate_root(\n                                 file_id,\n                                 edition,\n                                 Some(pkg.name(&cargo).to_string()),\n                                 cfg_options,\n-                                Env::default(),\n+                                env,\n+                                extern_source,\n                             );\n                             if tgt.kind(&cargo) == TargetKind::Lib {\n                                 lib_tgt = Some(crate_id);"}, {"sha": "2ce69c9b300fb15bcb14a569c3affaeff36e0a64", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -52,7 +52,10 @@ pub(crate) fn load_cargo(\n         opts\n     };\n \n-    let crate_graph = ws.to_crate_graph(&default_cfg_options, &mut |path: &Path| {\n+    // FIXME: outdirs?\n+    let outdirs = FxHashMap::default();\n+\n+    let crate_graph = ws.to_crate_graph(&default_cfg_options, &outdirs, &mut |path: &Path| {\n         let vfs_file = vfs.load(path);\n         log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n         vfs_file.map(vfs_file_to_id)"}, {"sha": "a8bf29ddf0bb2d2d6f8816d9336085aff5914416", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -44,6 +44,9 @@ pub struct ServerConfig {\n     /// Fine grained feature flags to disable specific features.\n     pub feature_flags: FxHashMap<String, bool>,\n \n+    /// Fine grained controls for additional `OUT_DIR` env variables\n+    pub additional_out_dirs: FxHashMap<String, String>,\n+\n     pub rustfmt_args: Vec<String>,\n \n     /// Cargo feature configurations.\n@@ -64,6 +67,7 @@ impl Default for ServerConfig {\n             cargo_watch_all_targets: true,\n             with_sysroot: true,\n             feature_flags: FxHashMap::default(),\n+            additional_out_dirs: FxHashMap::default(),\n             cargo_features: Default::default(),\n             rustfmt_args: Vec::new(),\n         }"}, {"sha": "4f7aac75406d459e09493d404483cea257b9f664", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -196,6 +196,7 @@ pub fn main_loop(\n             Watch(!config.use_client_watching),\n             options,\n             feature_flags,\n+            config.additional_out_dirs,\n         )\n     };\n "}, {"sha": "9ef368529e6e996df69d32d7deb8ee4f4a94c119", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -26,6 +26,8 @@ use crate::{\n     vfs_glob::{Glob, RustPackageFilterBuilder},\n     LspError, Result,\n };\n+use ra_db::ExternSourceId;\n+use rustc_hash::{FxHashMap, FxHashSet};\n \n #[derive(Debug, Clone)]\n pub struct Options {\n@@ -78,6 +80,7 @@ impl WorldState {\n         watch: Watch,\n         options: Options,\n         feature_flags: FeatureFlags,\n+        additional_out_dirs: FxHashMap<String, String>,\n     ) -> WorldState {\n         let mut change = AnalysisChange::new();\n \n@@ -99,6 +102,19 @@ impl WorldState {\n                 RootEntry::new(pkg_root.path().clone(), filter.into_vfs_filter())\n             }));\n         }\n+\n+        let extern_dirs: FxHashSet<_> =\n+            additional_out_dirs.iter().map(|(_, path)| (PathBuf::from(path))).collect();\n+        let mut extern_source_roots = FxHashMap::default();\n+\n+        roots.extend(additional_out_dirs.iter().map(|(_, path)| {\n+            let mut filter = RustPackageFilterBuilder::default().set_member(false);\n+            for glob in exclude_globs.iter() {\n+                filter = filter.exclude(glob.clone());\n+            }\n+            RootEntry::new(PathBuf::from(&path), filter.into_vfs_filter())\n+        }));\n+\n         let (task_sender, task_receiver) = unbounded();\n         let task_sender = Box::new(move |t| task_sender.send(t).unwrap());\n         let (mut vfs, vfs_roots) = Vfs::new(roots, task_sender, watch);\n@@ -108,6 +124,11 @@ impl WorldState {\n             let is_local = folder_roots.iter().any(|it| vfs_root_path.starts_with(it));\n             change.add_root(SourceRootId(r.0), is_local);\n             change.set_debug_root_path(SourceRootId(r.0), vfs_root_path.display().to_string());\n+\n+            // FIXME: add path2root in vfs to simpily this logic\n+            if extern_dirs.contains(&vfs_root_path) {\n+                extern_source_roots.insert(vfs_root_path, ExternSourceId(r.0));\n+            }\n         }\n \n         // FIXME: Read default cfgs from config\n@@ -125,11 +146,20 @@ impl WorldState {\n             vfs_file.map(|f| FileId(f.0))\n         };\n \n-        workspaces.iter().map(|ws| ws.to_crate_graph(&default_cfg_options, &mut load)).for_each(\n-            |graph| {\n+        let mut outdirs = FxHashMap::default();\n+        for (name, path) in additional_out_dirs {\n+            let path = PathBuf::from(&path);\n+            if let Some(id) = extern_source_roots.get(&path) {\n+                outdirs.insert(name, (id.clone(), path.to_string_lossy().replace(\"\\\\\", \"/\")));\n+            }\n+        }\n+\n+        workspaces\n+            .iter()\n+            .map(|ws| ws.to_crate_graph(&default_cfg_options, &outdirs, &mut load))\n+            .for_each(|graph| {\n                 crate_graph.extend(graph);\n-            },\n-        );\n+            });\n         change.set_crate_graph(crate_graph);\n \n         // FIXME: Figure out the multi-workspace situation"}, {"sha": "1fe8e9f8ae3173b0712eac3e1c7b4c300b8767e3", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -224,6 +224,11 @@\n                     \"default\": true,\n                     \"description\": \"Whether to ask for permission before downloading any files from the Internet\"\n                 },\n+                \"rust-analyzer.additionalOutDirs\": {\n+                    \"type\": \"object\",\n+                    \"default\": {},\n+                    \"markdownDescription\": \"Fine grained controls for OUT_DIR `env!(\\\"OUT_DIR\\\")` variable. e.g. `{\\\"foo\\\":\\\"/path/to/foo\\\"}`, \"\n+                },\n                 \"rust-analyzer.serverPath\": {\n                     \"type\": [\n                         \"null\","}, {"sha": "6ce3b9235c197952de6810c296022667214f9aa6", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -37,6 +37,7 @@ export async function createClient(config: Config, serverPath: string): Promise<\n             excludeGlobs: config.excludeGlobs,\n             useClientWatching: config.useClientWatching,\n             featureFlags: config.featureFlags,\n+            additionalOutDirs: config.additionalOutDirs,\n             withSysroot: config.withSysroot,\n             cargoFeatures: config.cargoFeatures,\n             rustfmtArgs: config.rustfmtArgs,"}, {"sha": "3ade7e900fcddd4d4a7b52494a04516e900f8b72", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c48dcf74118b6e0df747f036a9b66701037f3fc7/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c48dcf74118b6e0df747f036a9b66701037f3fc7/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=c48dcf74118b6e0df747f036a9b66701037f3fc7", "patch": "@@ -154,6 +154,7 @@ export class Config {\n     get excludeGlobs() { return this.cfg.get(\"excludeGlobs\") as string[]; }\n     get useClientWatching() { return this.cfg.get(\"useClientWatching\") as boolean; }\n     get featureFlags() { return this.cfg.get(\"featureFlags\") as Record<string, boolean>; }\n+    get additionalOutDirs() { return this.cfg.get(\"additionalOutDirs\") as Record<string, string>; }\n     get rustfmtArgs() { return this.cfg.get(\"rustfmtArgs\") as string[]; }\n \n     get cargoWatchOptions(): CargoWatchOptions {"}]}