{"sha": "067c2e3d0393311ac3dc9d8abb8750fd2fd5dd11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2N2MyZTNkMDM5MzMxMWFjM2RjOWQ4YWJiODc1MGZkMmZkNWRkMTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-23T01:09:10Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-23T01:09:10Z"}, "message": "handle `#[bench]` functions better", "tree": {"sha": "7028ffc877f76a966e90e4caf86912a6b08f06c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7028ffc877f76a966e90e4caf86912a6b08f06c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/067c2e3d0393311ac3dc9d8abb8750fd2fd5dd11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/067c2e3d0393311ac3dc9d8abb8750fd2fd5dd11", "html_url": "https://github.com/rust-lang/rust/commit/067c2e3d0393311ac3dc9d8abb8750fd2fd5dd11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/067c2e3d0393311ac3dc9d8abb8750fd2fd5dd11/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f35141fbad39b94b071186e2d8259694bd4960d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f35141fbad39b94b071186e2d8259694bd4960d", "html_url": "https://github.com/rust-lang/rust/commit/8f35141fbad39b94b071186e2d8259694bd4960d"}], "stats": {"total": 62, "additions": 43, "deletions": 19}, "files": [{"sha": "1b48901d4ebecb50fc7d0025eac977070a27973d", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 43, "deletions": 19, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/067c2e3d0393311ac3dc9d8abb8750fd2fd5dd11/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/067c2e3d0393311ac3dc9d8abb8750fd2fd5dd11/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=067c2e3d0393311ac3dc9d8abb8750fd2fd5dd11", "patch": "@@ -747,9 +747,10 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n     visible_path.extend(path);\n \n     // Rather than directly give the test function to the test\n-    // harness, we create a wrapper like this:\n+    // harness, we create a wrapper like one of the following:\n     //\n-    //     || test::assert_test_result(real_function())\n+    //     || test::assert_test_result(real_function()) // for test\n+    //     |b| test::assert_test_result(real_function(b)) // for bench\n     //\n     // this will coerce into a fn pointer that is specialized to the\n     // actual return type of `real_function` (Typically `()`, but not always).\n@@ -758,24 +759,47 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n         let real_function_expr = ecx.expr_path(ecx.path_global(span, visible_path));\n         // construct path `test::assert_test_result`\n         let assert_test_result = test_path(\"assert_test_result\");\n-        // construct `|| {..}`\n-        ecx.lambda(\n-            span,\n-            vec![],\n-            // construct `assert_test_result(..)`\n-            ecx.expr_call(\n+        if test.bench {\n+            // construct `|b| {..}`\n+            let b_ident = Ident::with_empty_ctxt(Symbol::gensym(\"b\"));\n+            let b_expr = ecx.expr_ident(span, b_ident);\n+            ecx.lambda(\n                 span,\n-                ecx.expr_path(assert_test_result),\n-                vec![\n-                    // construct `real_function()`\n-                    ecx.expr_call(\n-                        span,\n-                        real_function_expr,\n-                        vec![],\n-                    )\n-                ],\n-            ),\n-        )\n+                vec![b_ident],\n+                // construct `assert_test_result(..)`\n+                ecx.expr_call(\n+                    span,\n+                    ecx.expr_path(assert_test_result),\n+                    vec![\n+                        // construct `real_function(b)`\n+                        ecx.expr_call(\n+                            span,\n+                            real_function_expr,\n+                            vec![b_expr],\n+                        )\n+                    ],\n+                ),\n+            )\n+        } else {\n+            // construct `|| {..}`\n+            ecx.lambda(\n+                span,\n+                vec![],\n+                // construct `assert_test_result(..)`\n+                ecx.expr_call(\n+                    span,\n+                    ecx.expr_path(assert_test_result),\n+                    vec![\n+                        // construct `real_function()`\n+                        ecx.expr_call(\n+                            span,\n+                            real_function_expr,\n+                            vec![],\n+                        )\n+                    ],\n+                ),\n+            )\n+        }\n     };\n \n     let variant_name = if test.bench { \"StaticBenchFn\" } else { \"StaticTestFn\" };"}]}