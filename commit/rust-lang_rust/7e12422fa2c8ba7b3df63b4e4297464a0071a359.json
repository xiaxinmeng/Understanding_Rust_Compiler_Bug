{"sha": "7e12422fa2c8ba7b3df63b4e4297464a0071a359", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMTI0MjJmYTJjOGJhN2IzZGY2M2I0ZTQyOTc0NjRhMDA3MWEzNTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-06T16:50:49Z"}, "committer": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-08-06T16:50:49Z"}, "message": "Merge #1652\n\n1652: Improve type hints behavior r=matklad a=SomeoneToIgnore\n\nThis PR fixed the following type hints issues:\r\n\r\n* Restructures the `InlayKind` enum contents based on the discussion here: https://github.com/rust-analyzer/rust-analyzer/pull/1606#issuecomment-515968055\r\n* Races described in #1639 \r\n* Caches the latest decorations received for each file to show them the next time the file is opened (instead of a new server request)\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "f88de34c48e08ea8cf481a29f5764f13492a9ac9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f88de34c48e08ea8cf481a29f5764f13492a9ac9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e12422fa2c8ba7b3df63b4e4297464a0071a359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e12422fa2c8ba7b3df63b4e4297464a0071a359", "html_url": "https://github.com/rust-lang/rust/commit/7e12422fa2c8ba7b3df63b4e4297464a0071a359", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e12422fa2c8ba7b3df63b4e4297464a0071a359/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "811492aa546d83daf56f61d334d6ee295651f111", "url": "https://api.github.com/repos/rust-lang/rust/commits/811492aa546d83daf56f61d334d6ee295651f111", "html_url": "https://github.com/rust-lang/rust/commit/811492aa546d83daf56f61d334d6ee295651f111"}, {"sha": "c5598d9ade92e9ec4474a14229bb34a44a4edad5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5598d9ade92e9ec4474a14229bb34a44a4edad5", "html_url": "https://github.com/rust-lang/rust/commit/c5598d9ade92e9ec4474a14229bb34a44a4edad5"}], "stats": {"total": 210, "additions": 98, "deletions": 112}, "files": [{"sha": "7b919031411086e228d2cfed765cb046a0d2496f", "filename": "crates/ra_ide_api/src/inlay_hints.rs", "status": "modified", "additions": 41, "deletions": 57, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/7e12422fa2c8ba7b3df63b4e4297464a0071a359/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e12422fa2c8ba7b3df63b4e4297464a0071a359/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Finlay_hints.rs?ref=7e12422fa2c8ba7b3df63b4e4297464a0071a359", "patch": "@@ -9,14 +9,9 @@ use ra_syntax::{\n     SmolStr, SyntaxKind, SyntaxNode, TextRange,\n };\n \n-#[derive(Debug, PartialEq, Eq, Clone)]\n+#[derive(Debug, PartialEq, Eq)]\n pub enum InlayKind {\n-    LetBindingType,\n-    ClosureParameterType,\n-    ForExpressionBindingType,\n-    IfExpressionType,\n-    WhileLetExpressionType,\n-    MatchArmType,\n+    TypeHint,\n }\n \n #[derive(Debug)]\n@@ -46,7 +41,7 @@ fn get_inlay_hints(\n             }\n             let pat = let_statement.pat()?;\n             let analyzer = SourceAnalyzer::new(db, file_id, let_statement.syntax(), None);\n-            Some(get_pat_hints(db, &analyzer, pat, InlayKind::LetBindingType, false))\n+            Some(get_pat_type_hints(db, &analyzer, pat, false))\n         })\n         .visit(|closure_parameter: LambdaExpr| {\n             let analyzer = SourceAnalyzer::new(db, file_id, closure_parameter.syntax(), None);\n@@ -55,33 +50,25 @@ fn get_inlay_hints(\n                     .params()\n                     .filter(|closure_param| closure_param.ascribed_type().is_none())\n                     .filter_map(|closure_param| closure_param.pat())\n-                    .map(|root_pat| {\n-                        get_pat_hints(\n-                            db,\n-                            &analyzer,\n-                            root_pat,\n-                            InlayKind::ClosureParameterType,\n-                            false,\n-                        )\n-                    })\n+                    .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, false))\n                     .flatten()\n                     .collect()\n             })\n         })\n         .visit(|for_expression: ForExpr| {\n             let pat = for_expression.pat()?;\n             let analyzer = SourceAnalyzer::new(db, file_id, for_expression.syntax(), None);\n-            Some(get_pat_hints(db, &analyzer, pat, InlayKind::ForExpressionBindingType, false))\n+            Some(get_pat_type_hints(db, &analyzer, pat, false))\n         })\n         .visit(|if_expr: IfExpr| {\n             let pat = if_expr.condition()?.pat()?;\n             let analyzer = SourceAnalyzer::new(db, file_id, if_expr.syntax(), None);\n-            Some(get_pat_hints(db, &analyzer, pat, InlayKind::IfExpressionType, true))\n+            Some(get_pat_type_hints(db, &analyzer, pat, true))\n         })\n         .visit(|while_expr: WhileExpr| {\n             let pat = while_expr.condition()?.pat()?;\n             let analyzer = SourceAnalyzer::new(db, file_id, while_expr.syntax(), None);\n-            Some(get_pat_hints(db, &analyzer, pat, InlayKind::WhileLetExpressionType, true))\n+            Some(get_pat_type_hints(db, &analyzer, pat, true))\n         })\n         .visit(|match_arm_list: MatchArmList| {\n             let analyzer = SourceAnalyzer::new(db, file_id, match_arm_list.syntax(), None);\n@@ -90,21 +77,18 @@ fn get_inlay_hints(\n                     .arms()\n                     .map(|match_arm| match_arm.pats())\n                     .flatten()\n-                    .map(|root_pat| {\n-                        get_pat_hints(db, &analyzer, root_pat, InlayKind::MatchArmType, true)\n-                    })\n+                    .map(|root_pat| get_pat_type_hints(db, &analyzer, root_pat, true))\n                     .flatten()\n                     .collect(),\n             )\n         })\n         .accept(&node)?\n }\n \n-fn get_pat_hints(\n+fn get_pat_type_hints(\n     db: &RootDatabase,\n     analyzer: &SourceAnalyzer,\n     root_pat: Pat,\n-    kind: InlayKind,\n     skip_root_pat_hint: bool,\n ) -> Vec<InlayHint> {\n     let original_pat = &root_pat.clone();\n@@ -118,7 +102,7 @@ fn get_pat_hints(\n         })\n         .map(|(range, pat_type)| InlayHint {\n             range,\n-            kind: kind.clone(),\n+            kind: InlayKind::TypeHint,\n             label: pat_type.display(db).to_string().into(),\n         })\n         .collect()\n@@ -232,52 +216,52 @@ fn main() {\n         assert_debug_snapshot_matches!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n     InlayHint {\n         range: [193; 197),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n     InlayHint {\n         range: [236; 244),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n     InlayHint {\n         range: [275; 279),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"&str\",\n     },\n     InlayHint {\n         range: [539; 543),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"(i32, char)\",\n     },\n     InlayHint {\n         range: [566; 567),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n     InlayHint {\n         range: [570; 571),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n     InlayHint {\n         range: [573; 574),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n     InlayHint {\n         range: [584; 585),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n     InlayHint {\n         range: [577; 578),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"f64\",\n     },\n     InlayHint {\n         range: [580; 581),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"f64\",\n     },\n ]\"#\n@@ -299,12 +283,12 @@ fn main() {\n         assert_debug_snapshot_matches!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n     InlayHint {\n         range: [21; 30),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n     InlayHint {\n         range: [57; 66),\n-        kind: ClosureParameterType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n ]\"#\n@@ -326,12 +310,12 @@ fn main() {\n         assert_debug_snapshot_matches!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n     InlayHint {\n         range: [21; 30),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n     InlayHint {\n         range: [44; 53),\n-        kind: ForExpressionBindingType,\n+        kind: TypeHint,\n         label: \"i32\",\n     },\n ]\"#\n@@ -364,35 +348,35 @@ fn main() {\n     if let CustomOption::Some(Test { a: CustomOption::Some(x), b: y }) = &test {};\n     if let CustomOption::Some(Test { a: CustomOption::None, b: y }) = &test {};\n     if let CustomOption::Some(Test { b: y, .. }) = &test {};\n-    \n+\n     if test == CustomOption::None {}\n }\"#,\n         );\n \n         assert_debug_snapshot_matches!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n     InlayHint {\n         range: [166; 170),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"CustomOption<Test>\",\n     },\n     InlayHint {\n         range: [334; 338),\n-        kind: IfExpressionType,\n+        kind: TypeHint,\n         label: \"&Test\",\n     },\n     InlayHint {\n         range: [389; 390),\n-        kind: IfExpressionType,\n+        kind: TypeHint,\n         label: \"&CustomOption<u32>\",\n     },\n     InlayHint {\n         range: [392; 393),\n-        kind: IfExpressionType,\n+        kind: TypeHint,\n         label: \"&u8\",\n     },\n     InlayHint {\n         range: [531; 532),\n-        kind: IfExpressionType,\n+        kind: TypeHint,\n         label: \"&u32\",\n     },\n ]\"#\n@@ -425,15 +409,15 @@ fn main() {\n     while let CustomOption::Some(Test { a: CustomOption::Some(x), b: y }) = &test {};\n     while let CustomOption::Some(Test { a: CustomOption::None, b: y }) = &test {};\n     while let CustomOption::Some(Test { b: y, .. }) = &test {};\n-    \n+\n     while test == CustomOption::None {}\n }\"#,\n         );\n \n         assert_debug_snapshot_matches!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n     InlayHint {\n         range: [166; 170),\n-        kind: LetBindingType,\n+        kind: TypeHint,\n         label: \"CustomOption<Test>\",\n     },\n ]\"#\n@@ -445,7 +429,7 @@ fn main() {\n         let (analysis, file_id) = single_file(\n             r#\"\n #[derive(PartialEq)]\n-enum CustomOption<T> { \n+enum CustomOption<T> {\n     None,\n     Some(T),\n }\n@@ -473,23 +457,23 @@ fn main() {\n \n         assert_debug_snapshot_matches!(analysis.inlay_hints(file_id).unwrap(), @r#\"[\n     InlayHint {\n-        range: [312; 316),\n-        kind: MatchArmType,\n+        range: [311; 315),\n+        kind: TypeHint,\n         label: \"Test\",\n     },\n     InlayHint {\n-        range: [359; 360),\n-        kind: MatchArmType,\n+        range: [358; 359),\n+        kind: TypeHint,\n         label: \"CustomOption<u32>\",\n     },\n     InlayHint {\n-        range: [362; 363),\n-        kind: MatchArmType,\n+        range: [361; 362),\n+        kind: TypeHint,\n         label: \"u8\",\n     },\n     InlayHint {\n-        range: [485; 486),\n-        kind: MatchArmType,\n+        range: [484; 485),\n+        kind: TypeHint,\n         label: \"u32\",\n     },\n ]\"#"}, {"sha": "686ee5d1237b789a71330a514f820bf5384d0b52", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7e12422fa2c8ba7b3df63b4e4297464a0071a359/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e12422fa2c8ba7b3df63b4e4297464a0071a359/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=7e12422fa2c8ba7b3df63b4e4297464a0071a359", "patch": "@@ -885,14 +885,7 @@ pub fn handle_inlay_hints(\n             label: api_type.label.to_string(),\n             range: api_type.range.conv_with(&line_index),\n             kind: match api_type.kind {\n-                ra_ide_api::InlayKind::LetBindingType => InlayKind::LetBindingType,\n-                ra_ide_api::InlayKind::ClosureParameterType => InlayKind::ClosureParameterType,\n-                ra_ide_api::InlayKind::ForExpressionBindingType => {\n-                    InlayKind::ForExpressionBindingType\n-                }\n-                ra_ide_api::InlayKind::IfExpressionType => InlayKind::IfExpressionType,\n-                ra_ide_api::InlayKind::WhileLetExpressionType => InlayKind::WhileLetExpressionType,\n-                ra_ide_api::InlayKind::MatchArmType => InlayKind::MatchArmType,\n+                ra_ide_api::InlayKind::TypeHint => InlayKind::TypeHint,\n             },\n         })\n         .collect())"}, {"sha": "6b986bcc93894728b21d98cce5c41abd8d5553d1", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7e12422fa2c8ba7b3df63b4e4297464a0071a359/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e12422fa2c8ba7b3df63b4e4297464a0071a359/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=7e12422fa2c8ba7b3df63b4e4297464a0071a359", "patch": "@@ -213,12 +213,7 @@ pub struct InlayHintsParams {\n \n #[derive(Debug, PartialEq, Eq, Deserialize, Serialize)]\n pub enum InlayKind {\n-    LetBindingType,\n-    ClosureParameterType,\n-    ForExpressionBindingType,\n-    IfExpressionType,\n-    WhileLetExpressionType,\n-    MatchArmType,\n+    TypeHint,\n }\n \n #[derive(Debug, Deserialize, Serialize)]"}, {"sha": "5393a2bc928ff8c69392b146c1b64406a26acf2f", "filename": "editors/code/src/commands/inlay_hints.ts", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7e12422fa2c8ba7b3df63b4e4297464a0071a359/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7e12422fa2c8ba7b3df63b4e4297464a0071a359/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Finlay_hints.ts?ref=7e12422fa2c8ba7b3df63b4e4297464a0071a359", "patch": "@@ -22,65 +22,67 @@ const typeHintDecorationType = vscode.window.createTextEditorDecorationType({\n export class HintsUpdater {\n     private displayHints = true;\n \n-    public async loadHints(\n-        editor: vscode.TextEditor | undefined\n-    ): Promise<void> {\n-        if (\n-            this.displayHints &&\n-            editor !== undefined &&\n-            this.isRustDocument(editor.document)\n-        ) {\n-            await this.updateDecorationsFromServer(\n-                editor.document.uri.toString(),\n-                editor\n-            );\n-        }\n-    }\n-\n     public async toggleHintsDisplay(displayHints: boolean): Promise<void> {\n         if (this.displayHints !== displayHints) {\n             this.displayHints = displayHints;\n-\n-            if (displayHints) {\n-                return this.updateHints();\n-            } else {\n-                const editor = vscode.window.activeTextEditor;\n-                if (editor != null) {\n-                    return editor.setDecorations(typeHintDecorationType, []);\n-                }\n-            }\n+            return this.refreshVisibleEditorsHints(\n+                displayHints ? undefined : []\n+            );\n         }\n     }\n \n-    public async updateHints(cause?: TextDocumentChangeEvent): Promise<void> {\n+    public async refreshHintsForVisibleEditors(\n+        cause?: TextDocumentChangeEvent\n+    ): Promise<void> {\n         if (!this.displayHints) {\n             return;\n         }\n-        const editor = vscode.window.activeTextEditor;\n-        if (editor == null) {\n+        if (\n+            cause !== undefined &&\n+            (cause.contentChanges.length === 0 ||\n+                !this.isRustDocument(cause.document))\n+        ) {\n             return;\n         }\n-        const document = cause == null ? editor.document : cause.document;\n-        if (!this.isRustDocument(document)) {\n-            return;\n+        return this.refreshVisibleEditorsHints();\n+    }\n+\n+    private async refreshVisibleEditorsHints(\n+        newDecorations?: vscode.DecorationOptions[]\n+    ) {\n+        const promises: Array<Promise<void>> = [];\n+\n+        for (const rustEditor of vscode.window.visibleTextEditors.filter(\n+            editor => this.isRustDocument(editor.document)\n+        )) {\n+            if (newDecorations !== undefined) {\n+                promises.push(\n+                    Promise.resolve(\n+                        rustEditor.setDecorations(\n+                            typeHintDecorationType,\n+                            newDecorations\n+                        )\n+                    )\n+                );\n+            } else {\n+                promises.push(this.updateDecorationsFromServer(rustEditor));\n+            }\n         }\n \n-        return await this.updateDecorationsFromServer(\n-            document.uri.toString(),\n-            editor\n-        );\n+        for (const promise of promises) {\n+            await promise;\n+        }\n     }\n \n     private isRustDocument(document: vscode.TextDocument): boolean {\n         return document && document.languageId === 'rust';\n     }\n \n     private async updateDecorationsFromServer(\n-        documentUri: string,\n         editor: TextEditor\n     ): Promise<void> {\n-        const newHints = await this.queryHints(documentUri);\n-        if (newHints != null) {\n+        const newHints = await this.queryHints(editor.document.uri.toString());\n+        if (newHints !== null) {\n             const newDecorations = newHints.map(hint => ({\n                 range: hint.range,\n                 renderOptions: { after: { contentText: `: ${hint.label}` } }"}, {"sha": "39fe6efd8890e2a8345f1334f28094e316b7547f", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7e12422fa2c8ba7b3df63b4e4297464a0071a359/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7e12422fa2c8ba7b3df63b4e4297464a0071a359/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=7e12422fa2c8ba7b3df63b4e4297464a0071a359", "patch": "@@ -151,15 +151,27 @@ export function activate(context: vscode.ExtensionContext) {\n \n     if (Server.config.displayInlayHints) {\n         const hintsUpdater = new HintsUpdater();\n-        hintsUpdater.loadHints(vscode.window.activeTextEditor).then(() => {\n+        hintsUpdater.refreshHintsForVisibleEditors().then(() => {\n+            // vscode may ignore top level hintsUpdater.refreshHintsForVisibleEditors()\n+            // so update the hints once when the focus changes to guarantee their presence\n+            let editorChangeDisposable: vscode.Disposable | null = null;\n+            editorChangeDisposable = vscode.window.onDidChangeActiveTextEditor(\n+                _ => {\n+                    if (editorChangeDisposable !== null) {\n+                        editorChangeDisposable.dispose();\n+                    }\n+                    return hintsUpdater.refreshHintsForVisibleEditors();\n+                }\n+            );\n+\n             disposeOnDeactivation(\n-                vscode.window.onDidChangeActiveTextEditor(editor =>\n-                    hintsUpdater.loadHints(editor)\n+                vscode.window.onDidChangeVisibleTextEditors(_ =>\n+                    hintsUpdater.refreshHintsForVisibleEditors()\n                 )\n             );\n             disposeOnDeactivation(\n                 vscode.workspace.onDidChangeTextDocument(e =>\n-                    hintsUpdater.updateHints(e)\n+                    hintsUpdater.refreshHintsForVisibleEditors(e)\n                 )\n             );\n             disposeOnDeactivation("}]}