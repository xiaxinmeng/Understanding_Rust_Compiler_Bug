{"sha": "fc816c37b734e594037f36114a2844d7e7b30f76", "node_id": "C_kwDOAAsO6NoAKGZjODE2YzM3YjczNGU1OTQwMzdmMzYxMTRhMjg0NGQ3ZTdiMzBmNzY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-11-16T06:51:20Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-11-16T21:30:01Z"}, "message": "Fix await suggestion better", "tree": {"sha": "a5063c9d148a2389f544e3f36863c2cd3d9e40ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5063c9d148a2389f544e3f36863c2cd3d9e40ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc816c37b734e594037f36114a2844d7e7b30f76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc816c37b734e594037f36114a2844d7e7b30f76", "html_url": "https://github.com/rust-lang/rust/commit/fc816c37b734e594037f36114a2844d7e7b30f76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc816c37b734e594037f36114a2844d7e7b30f76/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d914f17ca71a33a89b2dc3436fca51b1a091559e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d914f17ca71a33a89b2dc3436fca51b1a091559e", "html_url": "https://github.com/rust-lang/rust/commit/d914f17ca71a33a89b2dc3436fca51b1a091559e"}], "stats": {"total": 143, "additions": 123, "deletions": 20}, "files": [{"sha": "c25ec1356e2300ea366eca972e26d392825d85e6", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fc816c37b734e594037f36114a2844d7e7b30f76/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc816c37b734e594037f36114a2844d7e7b30f76/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=fc816c37b734e594037f36114a2844d7e7b30f76", "patch": "@@ -1794,31 +1794,38 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             },\n             (_, Some(ty)) if ty::TyS::same_type(exp_found.expected, ty) => {\n-                let span = match cause.code {\n-                    // scrutinee's span\n-                    ObligationCauseCode::Pattern { span: Some(span), .. } => span,\n-                    _ => exp_span,\n-                };\n-                diag.span_suggestion_verbose(\n-                    span.shrink_to_hi(),\n-                    \"consider `await`ing on the `Future`\",\n-                    \".await\".to_string(),\n-                    Applicability::MaybeIncorrect,\n-                );\n-            }\n-            (Some(ty), _) if ty::TyS::same_type(ty, exp_found.found) => {\n-                let span = match cause.code {\n-                    // scrutinee's span\n-                    ObligationCauseCode::Pattern { span: Some(span), .. } => span,\n-                    _ => exp_span,\n-                };\n                 diag.span_suggestion_verbose(\n-                    span.shrink_to_hi(),\n+                    exp_span.shrink_to_hi(),\n                     \"consider `await`ing on the `Future`\",\n                     \".await\".to_string(),\n                     Applicability::MaybeIncorrect,\n                 );\n             }\n+            (Some(ty), _) if ty::TyS::same_type(ty, exp_found.found) => match cause.code {\n+                ObligationCauseCode::Pattern { span: Some(span), .. }\n+                | ObligationCauseCode::IfExpression(box IfExpressionCause { then: span, .. }) => {\n+                    diag.span_suggestion_verbose(\n+                        span.shrink_to_hi(),\n+                        \"consider `await`ing on the `Future`\",\n+                        \".await\".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                ObligationCauseCode::MatchExpressionArm(box MatchExpressionArmCause {\n+                    ref prior_arms,\n+                    ..\n+                }) => {\n+                    diag.multipart_suggestion_verbose(\n+                        \"consider `await`ing on the `Future`\",\n+                        prior_arms\n+                            .iter()\n+                            .map(|arm| (arm.shrink_to_hi(), \".await\".to_string()))\n+                            .collect(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                _ => {}\n+            },\n             _ => {}\n         }\n     }"}, {"sha": "df74df79d9f47a0eda39ae622fad1490d0db252d", "filename": "src/test/ui/async-await/suggest-missing-await.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fc816c37b734e594037f36114a2844d7e7b30f76/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc816c37b734e594037f36114a2844d7e7b30f76/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs?ref=fc816c37b734e594037f36114a2844d7e7b30f76", "patch": "@@ -26,4 +26,32 @@ async fn suggest_await_in_async_fn_return() {\n     //~| SUGGESTION .await\n }\n \n+#[allow(unused)]\n+async fn suggest_await_on_if() {\n+    let _x = if true {\n+        dummy()\n+        //~^ HELP consider `await`ing on the `Future`\n+    } else {\n+        dummy().await\n+        //~^ ERROR `if` and `else` have incompatible types [E0308]\n+    };\n+}\n+\n+#[allow(unused)]\n+async fn suggest_await_on_previous_match_arms() {\n+    let _x = match 0usize {\n+        0 => dummy(), //~ HELP consider `await`ing on the `Future`\n+        1 => dummy(),\n+        2 => dummy().await,\n+        //~^ `match` arms have incompatible types [E0308]\n+    };\n+}\n+\n+#[allow(unused)]\n+async fn suggest_await_on_match_expr() {\n+    let _x = match dummy() { //~ HELP consider `await`ing on the `Future`\n+        () => {} //~ ERROR mismatched types [E0308]\n+    };\n+}\n+\n fn main() {}"}, {"sha": "aefe3096fd9b20a0b7d465da9545130fc2091dcb", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/fc816c37b734e594037f36114a2844d7e7b30f76/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc816c37b734e594037f36114a2844d7e7b30f76/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=fc816c37b734e594037f36114a2844d7e7b30f76", "patch": "@@ -38,6 +38,74 @@ help: consider using a semicolon here\n LL |     dummy();\n    |            +\n \n-error: aborting due to 2 previous errors\n+error[E0308]: `if` and `else` have incompatible types\n+  --> $DIR/suggest-missing-await.rs:35:9\n+   |\n+LL |       let _x = if true {\n+   |  ______________-\n+LL | |         dummy()\n+   | |         ------- expected because of this\n+LL | |\n+LL | |     } else {\n+LL | |         dummy().await\n+   | |         ^^^^^^^^^^^^^ expected opaque type, found `()`\n+LL | |\n+LL | |     };\n+   | |_____- `if` and `else` have incompatible types\n+   |\n+   = note:   expected type `impl Future`\n+           found unit type `()`\n+help: consider `await`ing on the `Future`\n+   |\n+LL |         dummy().await\n+   |                ++++++\n+\n+error[E0308]: `match` arms have incompatible types\n+  --> $DIR/suggest-missing-await.rs:45:14\n+   |\n+LL |       let _x = match 0usize {\n+   |  ______________-\n+LL | |         0 => dummy(),\n+   | |              ------- this is found to be of type `impl Future`\n+LL | |         1 => dummy(),\n+   | |              ------- this is found to be of type `impl Future`\n+LL | |         2 => dummy().await,\n+   | |              ^^^^^^^^^^^^^ expected opaque type, found `()`\n+LL | |\n+LL | |     };\n+   | |_____- `match` arms have incompatible types\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/suggest-missing-await.rs:18:18\n+   |\n+LL | async fn dummy() {}\n+   |                  ^ checked the `Output` of this `async fn`, expected opaque type\n+   = note: expected opaque type `impl Future`\n+                found unit type `()`\n+help: consider `await`ing on the `Future`\n+   |\n+LL ~         0 => dummy().await,\n+LL ~         1 => dummy().await,\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-missing-await.rs:53:9\n+   |\n+LL |         () => {}\n+   |         ^^ expected opaque type, found `()`\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/suggest-missing-await.rs:18:18\n+   |\n+LL | async fn dummy() {}\n+   |                  ^ checked the `Output` of this `async fn`, expected opaque type\n+   = note: expected opaque type `impl Future`\n+                found unit type `()`\n+help: consider `await`ing on the `Future`\n+   |\n+LL |     let _x = match dummy().await {\n+   |                           ++++++\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}