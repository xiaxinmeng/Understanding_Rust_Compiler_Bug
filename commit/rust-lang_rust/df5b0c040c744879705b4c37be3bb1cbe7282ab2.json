{"sha": "df5b0c040c744879705b4c37be3bb1cbe7282ab2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNWIwYzA0MGM3NDQ4Nzk3MDViNGMzN2JlM2JiMWNiZTcyODJhYjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-11T03:52:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-11T03:52:32Z"}, "message": "auto merge of #7046 : luqmana/rust/issue-7044, r=sanxiyn\n\nFixes #7044.", "tree": {"sha": "1e827daf214b7ec3f99ef21e40bdb7eb69ec3ad9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e827daf214b7ec3f99ef21e40bdb7eb69ec3ad9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df5b0c040c744879705b4c37be3bb1cbe7282ab2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df5b0c040c744879705b4c37be3bb1cbe7282ab2", "html_url": "https://github.com/rust-lang/rust/commit/df5b0c040c744879705b4c37be3bb1cbe7282ab2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df5b0c040c744879705b4c37be3bb1cbe7282ab2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37733c7eafdcf4bd6c4c95d38a05c307abda78d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/37733c7eafdcf4bd6c4c95d38a05c307abda78d6", "html_url": "https://github.com/rust-lang/rust/commit/37733c7eafdcf4bd6c4c95d38a05c307abda78d6"}, {"sha": "693b9ce4e88f60af6a486f6c55fff0a761b38030", "url": "https://api.github.com/repos/rust-lang/rust/commits/693b9ce4e88f60af6a486f6c55fff0a761b38030", "html_url": "https://github.com/rust-lang/rust/commit/693b9ce4e88f60af6a486f6c55fff0a761b38030"}], "stats": {"total": 80, "additions": 44, "deletions": 36}, "files": [{"sha": "97b0d61499bf4afd4dd7e8cd046761c9f2b1d851", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 30, "deletions": 36, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/df5b0c040c744879705b4c37be3bb1cbe7282ab2/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5b0c040c744879705b4c37be3bb1cbe7282ab2/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=df5b0c040c744879705b4c37be3bb1cbe7282ab2", "patch": "@@ -294,18 +294,6 @@ pub enum DuplicateCheckingMode {\n     OverwriteDuplicates\n }\n \n-// Returns the namespace associated with the given duplicate checking mode,\n-// or fails for OverwriteDuplicates. This is used for error messages.\n-pub fn namespace_for_duplicate_checking_mode(mode: DuplicateCheckingMode)\n-                                          -> Namespace {\n-    match mode {\n-        ForbidDuplicateModules | ForbidDuplicateTypes |\n-        ForbidDuplicateTypesAndValues => TypeNS,\n-        ForbidDuplicateValues => ValueNS,\n-        OverwriteDuplicates => fail!(\"OverwriteDuplicates has no namespace\")\n-    }\n-}\n-\n /// One local scope.\n pub struct Rib {\n     bindings: @mut HashMap<ident,def_like>,\n@@ -1007,37 +995,43 @@ impl Resolver {\n                 //   nothing.\n \n                 let mut is_duplicate = false;\n-                match duplicate_checking_mode {\n+                let ns = match duplicate_checking_mode {\n                     ForbidDuplicateModules => {\n-                        is_duplicate =\n-                            child.get_module_if_available().is_some();\n+                        is_duplicate = child.get_module_if_available().is_some();\n+                        Some(TypeNS)\n                     }\n                     ForbidDuplicateTypes => {\n                         match child.def_for_namespace(TypeNS) {\n                             Some(def_mod(_)) | None => {}\n                             Some(_) => is_duplicate = true\n                         }\n+                        Some(TypeNS)\n                     }\n                     ForbidDuplicateValues => {\n                         is_duplicate = child.defined_in_namespace(ValueNS);\n+                        Some(ValueNS)\n                     }\n                     ForbidDuplicateTypesAndValues => {\n+                        let mut n = None;\n                         match child.def_for_namespace(TypeNS) {\n                             Some(def_mod(_)) | None => {}\n-                            Some(_) => is_duplicate = true\n+                            Some(_) => {\n+                                n = Some(TypeNS);\n+                                is_duplicate = true;\n+                            }\n                         };\n                         if child.defined_in_namespace(ValueNS) {\n                             is_duplicate = true;\n+                            n = Some(ValueNS);\n                         }\n+                        n\n                     }\n-                    OverwriteDuplicates => {}\n-                }\n-                if duplicate_checking_mode != OverwriteDuplicates &&\n-                        is_duplicate {\n+                    OverwriteDuplicates => None\n+                };\n+                if is_duplicate {\n                     // Return an error here by looking up the namespace that\n                     // had the duplicate.\n-                    let ns = namespace_for_duplicate_checking_mode(\n-                        duplicate_checking_mode);\n+                    let ns = ns.unwrap();\n                     self.session.span_err(sp,\n                         fmt!(\"duplicate definition of %s `%s`\",\n                              namespace_to_str(ns),\n@@ -1195,22 +1189,22 @@ impl Resolver {\n \n             // These items live in both the type and value namespaces.\n             item_struct(struct_def, _) => {\n-                let (name_bindings, new_parent) =\n-                    self.add_child(ident, parent, ForbidDuplicateTypes, sp);\n+                // Adding to both Type and Value namespaces or just Type?\n+                let (forbid, ctor_id) = match struct_def.ctor_id {\n+                    Some(ctor_id)   => (ForbidDuplicateTypesAndValues, Some(ctor_id)),\n+                    None            => (ForbidDuplicateTypes, None)\n+                };\n \n-                name_bindings.define_type(\n-                    privacy, def_ty(local_def(item.id)), sp);\n+                let (name_bindings, new_parent) = self.add_child(ident, parent, forbid, sp);\n \n-                // If this struct is tuple-like or enum-like, define a name\n-                // in the value namespace.\n-                match struct_def.ctor_id {\n-                    None => {}\n-                    Some(ctor_id) => {\n-                        name_bindings.define_value(\n-                            privacy,\n-                            def_struct(local_def(ctor_id)),\n-                            sp);\n-                    }\n+                // Define a name in the type namespace.\n+                name_bindings.define_type(privacy, def_ty(local_def(item.id)), sp);\n+\n+                // If this is a newtype or unit-like struct, define a name\n+                // in the value namespace as well\n+                do ctor_id.while_some |cid| {\n+                    name_bindings.define_value(privacy, def_struct(local_def(cid)), sp);\n+                    None\n                 }\n \n                 // Record the def ID of this struct."}, {"sha": "ee332789b0ed56d6c77d092b03eef8fab3284683", "filename": "src/test/compile-fail/issue-7044.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df5b0c040c744879705b4c37be3bb1cbe7282ab2/src%2Ftest%2Fcompile-fail%2Fissue-7044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5b0c040c744879705b4c37be3bb1cbe7282ab2/src%2Ftest%2Fcompile-fail%2Fissue-7044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7044.rs?ref=df5b0c040c744879705b4c37be3bb1cbe7282ab2", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static X: int = 0;\n+struct X; //~ ERROR error: duplicate definition of value `X`\n+\n+fn main() {}"}]}