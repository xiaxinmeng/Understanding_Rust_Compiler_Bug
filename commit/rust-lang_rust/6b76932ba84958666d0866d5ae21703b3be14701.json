{"sha": "6b76932ba84958666d0866d5ae21703b3be14701", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNzY5MzJiYTg0OTU4NjY2ZDA4NjZkNWFlMjE3MDNiM2JlMTQ3MDE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-10T21:29:24Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-17T13:03:50Z"}, "message": "introduce Deref/DerefMut to model subtype rel\n\nThe idea is that ItemContentBuilder is a base-type of IndexBuilder.", "tree": {"sha": "a773e11d7822805cd8f0c19b1b73b8732954f114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a773e11d7822805cd8f0c19b1b73b8732954f114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b76932ba84958666d0866d5ae21703b3be14701", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b76932ba84958666d0866d5ae21703b3be14701", "html_url": "https://github.com/rust-lang/rust/commit/6b76932ba84958666d0866d5ae21703b3be14701", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b76932ba84958666d0866d5ae21703b3be14701/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2c7922d7f6cab865751c4c0977072942b78c287", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2c7922d7f6cab865751c4c0977072942b78c287", "html_url": "https://github.com/rust-lang/rust/commit/b2c7922d7f6cab865751c4c0977072942b78c287"}], "stats": {"total": 68, "additions": 50, "deletions": 18}, "files": [{"sha": "49bd861b131e426213e5b36838e822fdc093deab", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6b76932ba84958666d0866d5ae21703b3be14701/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b76932ba84958666d0866d5ae21703b3be14701/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=6b76932ba84958666d0866d5ae21703b3be14701", "patch": "@@ -54,7 +54,7 @@ use rustc::hir::intravisit::Visitor;\n use rustc::hir::intravisit;\n use rustc::hir::map::DefKey;\n \n-use super::index_builder::{IndexBuilder, XRef};\n+use super::index_builder::{IndexBuilder, ItemContentBuilder, XRef};\n \n pub struct EncodeContext<'a, 'tcx: 'a> {\n     pub diag: &'a Handler,\n@@ -132,7 +132,7 @@ fn encode_item_variances(rbml_w: &mut Encoder,\n     rbml_w.end_tag();\n }\n \n-impl<'a, 'tcx> IndexBuilder<'a, 'tcx> {\n+impl<'a, 'tcx> ItemContentBuilder<'a, 'tcx> {\n     fn encode_bounds_and_type_for_item(&mut self,\n                                        rbml_w: &mut Encoder,\n                                        id: NodeId) {\n@@ -164,7 +164,7 @@ fn write_closure_type<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n     rbml_w.mark_stable_position();\n }\n \n-impl<'a, 'tcx> IndexBuilder<'a, 'tcx> {\n+impl<'a, 'tcx> ItemContentBuilder<'a, 'tcx> {\n     fn encode_type(&mut self,\n                    rbml_w: &mut Encoder,\n                    typ: Ty<'tcx>) {\n@@ -200,7 +200,9 @@ impl<'a, 'tcx> IndexBuilder<'a, 'tcx> {\n             rbml_w.end_tag();\n         }\n     }\n+}\n \n+impl<'a, 'tcx> IndexBuilder<'a, 'tcx> {\n     fn encode_enum_variant_info(&mut self,\n                                 rbml_w: &mut Encoder,\n                                 did: DefId,\n@@ -302,7 +304,7 @@ fn encode_reexports(ecx: &EncodeContext,\n     }\n }\n \n-impl<'a, 'tcx> IndexBuilder<'a, 'tcx> {\n+impl<'a, 'tcx> ItemContentBuilder<'a, 'tcx> {\n     fn encode_info_for_mod(&mut self,\n                            rbml_w: &mut Encoder,\n                            md: &hir::Mod,\n@@ -487,7 +489,9 @@ impl<'a, 'tcx> IndexBuilder<'a, 'tcx> {\n \n         rbml_w.end_tag();\n     }\n+}\n \n+impl<'a, 'tcx> ItemContentBuilder<'a, 'tcx> {\n     fn encode_generics(&mut self,\n                        rbml_w: &mut Encoder,\n                        generics: &ty::Generics<'tcx>,\n@@ -532,7 +536,9 @@ impl<'a, 'tcx> IndexBuilder<'a, 'tcx> {\n             _ => encode_family(rbml_w, METHOD_FAMILY)\n         }\n     }\n+}\n \n+impl<'a, 'tcx> IndexBuilder<'a, 'tcx> {\n     fn encode_info_for_associated_const(&mut self,\n                                         rbml_w: &mut Encoder,\n                                         associated_const: &ty::AssociatedConst,\n@@ -680,7 +686,9 @@ impl<'a, 'tcx> IndexBuilder<'a, 'tcx> {\n         }\n         rbml_w.end_tag();\n     }\n+}\n \n+impl<'a, 'tcx> ItemContentBuilder<'a, 'tcx> {\n     fn encode_repr_attrs(&mut self,\n                          rbml_w: &mut Encoder,\n                          attrs: &[ast::Attribute]) {\n@@ -1237,9 +1245,7 @@ impl<'a, 'tcx> IndexBuilder<'a, 'tcx> {\n             }\n         }\n     }\n-}\n \n-impl<'a, 'tcx> IndexBuilder<'a, 'tcx> {\n     fn encode_info_for_foreign_item(&mut self,\n                                     rbml_w: &mut Encoder,\n                                     nitem: &hir::ForeignItem) {"}, {"sha": "915bf98519c908dfd88c85478190b44e5b0cbd1f", "filename": "src/librustc_metadata/index_builder.rs", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6b76932ba84958666d0866d5ae21703b3be14701/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b76932ba84958666d0866d5ae21703b3be14701/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=6b76932ba84958666d0866d5ae21703b3be14701", "patch": "@@ -15,11 +15,20 @@ use rustc::dep_graph::{DepNode, DepTask};\n use rustc::hir::def_id::DefId;\n use rustc::ty;\n use rustc_data_structures::fnv::FnvHashMap;\n+use std::ops::{Deref, DerefMut};\n \n+/// Builder that can encode new items, adding them into the index.\n+/// Item encoding cannot be nested.\n pub struct IndexBuilder<'a, 'tcx: 'a> {\n-    ecx: &'a EncodeContext<'a, 'tcx>,\n     items: IndexData,\n+    builder: ItemContentBuilder<'a, 'tcx>,\n+}\n+\n+/// Builder that can encode the content of items, but can't start a\n+/// new item itself. Most code is attached to here.\n+pub struct ItemContentBuilder<'a, 'tcx: 'a> {\n     xrefs: FnvHashMap<XRef<'tcx>, u32>, // sequentially-assigned\n+    ecx: &'a EncodeContext<'a, 'tcx>,\n }\n \n /// \"interned\" entries referenced by id\n@@ -29,16 +38,14 @@ pub enum XRef<'tcx> { Predicate(ty::Predicate<'tcx>) }\n impl<'a, 'tcx> IndexBuilder<'a, 'tcx> {\n     pub fn new(ecx: &'a EncodeContext<'a, 'tcx>) -> Self {\n         IndexBuilder {\n-            ecx: ecx,\n             items: IndexData::new(ecx.tcx.map.num_local_def_ids()),\n-            xrefs: FnvHashMap()\n+            builder: ItemContentBuilder {\n+                ecx: ecx,\n+                xrefs: FnvHashMap(),\n+            },\n         }\n     }\n \n-    pub fn ecx(&self) -> &'a EncodeContext<'a, 'tcx> {\n-        self.ecx\n-    }\n-\n     /// Records that `id` is being emitted at the current offset.\n     /// This data is later used to construct the item index in the\n     /// metadata so we can quickly find the data for a given item.\n@@ -51,13 +58,32 @@ impl<'a, 'tcx> IndexBuilder<'a, 'tcx> {\n         self.ecx.tcx.dep_graph.in_task(DepNode::MetaData(id))\n     }\n \n-    pub fn add_xref(&mut self, xref: XRef<'tcx>) -> u32 {\n-        let old_len = self.xrefs.len() as u32;\n-        *self.xrefs.entry(xref).or_insert(old_len)\n+    pub fn into_fields(self) -> (IndexData, FnvHashMap<XRef<'tcx>, u32>) {\n+        (self.items, self.builder.xrefs)\n     }\n+}\n \n-    pub fn into_fields(self) -> (IndexData, FnvHashMap<XRef<'tcx>, u32>) {\n-        (self.items, self.xrefs)\n+impl<'a, 'tcx> Deref for IndexBuilder<'a, 'tcx> {\n+    type Target = ItemContentBuilder<'a, 'tcx>;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.builder\n+    }\n+}\n+\n+impl<'a, 'tcx> DerefMut for IndexBuilder<'a, 'tcx> {\n+    fn deref_mut(&mut self) -> &mut Self::Target {\n+        &mut self.builder\n     }\n }\n \n+impl<'a, 'tcx> ItemContentBuilder<'a, 'tcx> {\n+    pub fn ecx(&self) -> &'a EncodeContext<'a, 'tcx> {\n+        self.ecx\n+    }\n+\n+    pub fn add_xref(&mut self, xref: XRef<'tcx>) -> u32 {\n+        let old_len = self.xrefs.len() as u32;\n+        *self.xrefs.entry(xref).or_insert(old_len)\n+    }\n+}"}]}