{"sha": "b33c3d6cd68788f62b79814726004da45546bfa7", "node_id": "C_kwDOAAsO6NoAKGIzM2MzZDZjZDY4Nzg4ZjYyYjc5ODE0NzI2MDA0ZGE0NTU0NmJmYTc", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-08-26T17:23:21Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-08-27T06:22:08Z"}, "message": "use smaller span for suggestions", "tree": {"sha": "efe7a1e2f5c49cedf7dddfaf3516252bee5f3372", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efe7a1e2f5c49cedf7dddfaf3516252bee5f3372"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b33c3d6cd68788f62b79814726004da45546bfa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b33c3d6cd68788f62b79814726004da45546bfa7", "html_url": "https://github.com/rust-lang/rust/commit/b33c3d6cd68788f62b79814726004da45546bfa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b33c3d6cd68788f62b79814726004da45546bfa7/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9845f4c47e7062867c73b6bed8f1df273b56d5d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9845f4c47e7062867c73b6bed8f1df273b56d5d7", "html_url": "https://github.com/rust-lang/rust/commit/9845f4c47e7062867c73b6bed8f1df273b56d5d7"}], "stats": {"total": 68, "additions": 35, "deletions": 33}, "files": [{"sha": "25cd960dbf1d0c232298fd6fee6f052f68392987", "filename": "compiler/rustc_attr/src/session_diagnostics.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b33c3d6cd68788f62b79814726004da45546bfa7/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33c3d6cd68788f62b79814726004da45546bfa7/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs?ref=b33c3d6cd68788f62b79814726004da45546bfa7", "patch": "@@ -223,14 +223,12 @@ impl<'a> SessionDiagnostic<'a> for UnsupportedLiteral {\n             error_code!(E0565),\n         );\n         if self.is_bytestr {\n-            if let Ok(lint_str) = sess.source_map().span_to_snippet(self.span) {\n-                diag.span_suggestion(\n-                    self.span,\n-                    fluent::attr::unsupported_literal_suggestion,\n-                    &lint_str[1..],\n-                    Applicability::MaybeIncorrect,\n-                );\n-            }\n+            diag.span_suggestion(\n+                sess.source_map().start_point(self.span),\n+                fluent::attr::unsupported_literal_suggestion,\n+                \"\",\n+                Applicability::MaybeIncorrect,\n+            );\n         }\n         diag\n     }"}, {"sha": "8bb8c7ac51559c6ae164c2c5c6ad3c622bfb4c80", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b33c3d6cd68788f62b79814726004da45546bfa7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33c3d6cd68788f62b79814726004da45546bfa7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=b33c3d6cd68788f62b79814726004da45546bfa7", "patch": "@@ -1299,7 +1299,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // local binding\n                     if let hir::def::Res::Local(hir_id) = path.res {\n                         let span = tcx.hir().span(hir_id);\n-                        let snippet = tcx.sess.source_map().span_to_snippet(span);\n                         let filename = tcx.sess.source_map().span_to_filename(span);\n \n                         let parent_node =\n@@ -1309,22 +1308,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             concrete_type,\n                         );\n \n-                        match (filename, parent_node, snippet) {\n+                        match (filename, parent_node) {\n                             (\n                                 FileName::Real(_),\n                                 Node::Local(hir::Local {\n                                     source: hir::LocalSource::Normal,\n                                     ty,\n                                     ..\n                                 }),\n-                                Ok(ref snippet),\n                             ) => {\n+                                let type_span = ty.map(|ty| ty.span.with_lo(span.hi())).unwrap_or(span.shrink_to_hi());\n                                 err.span_suggestion(\n                                     // account for `let x: _ = 42;`\n-                                    //                  ^^^^\n-                                    span.to(ty.as_ref().map(|ty| ty.span).unwrap_or(span)),\n+                                    //                   ^^^\n+                                    type_span,\n                                     &msg,\n-                                    format!(\"{}: {}\", snippet, concrete_type),\n+                                    format!(\": {concrete_type}\"),\n                                     Applicability::MaybeIncorrect,\n                                 );\n                             }"}, {"sha": "df14a966d1581e740b075fb6da71746be451aff1", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b33c3d6cd68788f62b79814726004da45546bfa7/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b33c3d6cd68788f62b79814726004da45546bfa7/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=b33c3d6cd68788f62b79814726004da45546bfa7", "patch": "@@ -763,16 +763,13 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         // If there is a single unbound associated type and a single excess generic param\n         // suggest replacing the generic param with the associated type bound\n         if provided_args_matches_unbound_traits && !unbound_types.is_empty() {\n-            let mut suggestions = vec![];\n             let unused_generics = &self.gen_args.args[self.num_expected_type_or_const_args()..];\n-            for (potential, name) in iter::zip(unused_generics, &unbound_types) {\n-                if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(potential.span()) {\n-                    suggestions.push((potential.span(), format!(\"{} = {}\", name, snippet)));\n-                }\n-            }\n+            let suggestions = iter::zip(unused_generics, &unbound_types)\n+                .map(|(potential, name)| (potential.span().shrink_to_lo(), format!(\"{name} = \")))\n+                .collect::<Vec<_>>();\n \n             if !suggestions.is_empty() {\n-                err.multipart_suggestion(\n+                err.multipart_suggestion_verbose(\n                     &format!(\n                         \"replace the generic bound{s} with the associated type{s}\",\n                         s = pluralize!(unbound_types.len())"}, {"sha": "d4bd673b84e1b70083273e08d5ccae0a4a4b36b8", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b33c3d6cd68788f62b79814726004da45546bfa7/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b33c3d6cd68788f62b79814726004da45546bfa7/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr?ref=b33c3d6cd68788f62b79814726004da45546bfa7", "patch": "@@ -50,7 +50,9 @@ error[E0565]: literal in `cfg` predicate value must be a string\n   --> $DIR/cfg-attr-syntax-validation.rs:25:11\n    |\n LL | #[cfg(a = b\"hi\")]\n-   |           ^^^^^ help: consider removing the prefix: `\"hi\"`\n+   |           -^^^^\n+   |           |\n+   |           help: consider removing the prefix\n \n error: expected unsuffixed literal or identifier, found `concat!(\"nonexistent\")`\n   --> $DIR/cfg-attr-syntax-validation.rs:30:25"}, {"sha": "653afae2191159f3dfcf50e8d82e622de7c90660", "filename": "src/test/ui/const-generics/issues/issue-87493.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b33c3d6cd68788f62b79814726004da45546bfa7/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b33c3d6cd68788f62b79814726004da45546bfa7/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87493.stderr?ref=b33c3d6cd68788f62b79814726004da45546bfa7", "patch": "@@ -13,15 +13,17 @@ error[E0107]: this trait takes 0 generic arguments but 1 generic argument was su\n   --> $DIR/issue-87493.rs:8:8\n    |\n LL |     T: MyTrait<Assoc == S::Assoc>,\n-   |        ^^^^^^^ ----------------- help: replace the generic bound with the associated type: `Assoc = Assoc == S::Assoc`\n-   |        |\n-   |        expected 0 generic arguments\n+   |        ^^^^^^^ expected 0 generic arguments\n    |\n note: trait defined here, with 0 generic parameters\n   --> $DIR/issue-87493.rs:1:11\n    |\n LL | pub trait MyTrait {\n    |           ^^^^^^^\n+help: replace the generic bound with the associated type\n+   |\n+LL |     T: MyTrait<Assoc = Assoc == S::Assoc>,\n+   |                +++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8b2b480d19586e40e090d90f1e1716e559c939b4", "filename": "src/test/ui/deprecation/deprecation-sanity.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b33c3d6cd68788f62b79814726004da45546bfa7/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b33c3d6cd68788f62b79814726004da45546bfa7/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr?ref=b33c3d6cd68788f62b79814726004da45546bfa7", "patch": "@@ -44,7 +44,9 @@ error[E0565]: literal in `deprecated` value must be a string\n   --> $DIR/deprecation-sanity.rs:19:25\n    |\n LL |     #[deprecated(note = b\"test\")]\n-   |                         ^^^^^^^ help: consider removing the prefix: `\"test\"`\n+   |                         -^^^^^^\n+   |                         |\n+   |                         help: consider removing the prefix\n \n error[E0565]: item in `deprecated` must be a key/value pair\n   --> $DIR/deprecation-sanity.rs:22:18"}, {"sha": "03430f8fa3a0bcd7da9197ebd7bdb9b4c5c82223", "filename": "src/test/ui/error-codes/E0107.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b33c3d6cd68788f62b79814726004da45546bfa7/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b33c3d6cd68788f62b79814726004da45546bfa7/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0107.stderr?ref=b33c3d6cd68788f62b79814726004da45546bfa7", "patch": "@@ -142,7 +142,7 @@ LL | pub trait T {\n help: replace the generic bounds with the associated types\n    |\n LL | fn trait_bound_generic<I: T<A = u8, B = u16>>(_i: I) {\n-   |                             ~~~~~~  ~~~~~~~\n+   |                             +++     +++\n \n error: aborting due to 10 previous errors\n "}, {"sha": "097871bd31906cb28c7014233419cfc8fe5b6e62", "filename": "src/test/ui/error-codes/E0565-2.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b33c3d6cd68788f62b79814726004da45546bfa7/src%2Ftest%2Fui%2Ferror-codes%2FE0565-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b33c3d6cd68788f62b79814726004da45546bfa7/src%2Ftest%2Fui%2Ferror-codes%2FE0565-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0565-2.stderr?ref=b33c3d6cd68788f62b79814726004da45546bfa7", "patch": "@@ -2,7 +2,9 @@ error[E0565]: literal in `deprecated` value must be a string\n   --> $DIR/E0565-2.rs:2:22\n    |\n LL | #[deprecated(since = b\"1.29\", note = \"hi\")]\n-   |                      ^^^^^^^ help: consider removing the prefix: `\"1.29\"`\n+   |                      -^^^^^^\n+   |                      |\n+   |                      help: consider removing the prefix\n \n error: aborting due to previous error\n "}, {"sha": "91733411637d032f1f46d771273579b3920eb7b1", "filename": "src/test/ui/methods/method-on-ambiguous-numeric-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b33c3d6cd68788f62b79814726004da45546bfa7/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b33c3d6cd68788f62b79814726004da45546bfa7/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-on-ambiguous-numeric-type.stderr?ref=b33c3d6cd68788f62b79814726004da45546bfa7", "patch": "@@ -18,7 +18,7 @@ LL |     let x = y.neg();\n help: you must specify a type for this binding, like `f32`\n    |\n LL |     let y: f32 = 2.0;\n-   |         ~~~~~~\n+   |          +++++\n \n error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n   --> $DIR/method-on-ambiguous-numeric-type.rs:19:26\n@@ -37,7 +37,7 @@ LL |     local_bar.pow(2);\n help: you must specify a type for this binding, like `i32`\n    |\n LL |     ($ident:ident) => { let $ident: i32 = 42; }\n-   |                             ~~~~~~~~~~~\n+   |                                   +++++\n \n error[E0689]: can't call method `pow` on ambiguous numeric type `{integer}`\n   --> $DIR/method-on-ambiguous-numeric-type.rs:30:9\n@@ -46,10 +46,10 @@ LL |     bar.pow(2);\n    |         ^^^\n    |\n help: you must specify a type for this binding, like `i32`\n-  --> $DIR/auxiliary/macro-in-other-crate.rs:3:29\n+  --> $DIR/auxiliary/macro-in-other-crate.rs:3:35\n    |\n LL |     ($ident:ident) => { let $ident: i32 = 42; }\n-   |                             ~~~~~~~~~~~\n+   |                                   +++++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "75b919232847832440a2cd0da3cc12bddd06f291", "filename": "src/test/ui/suggestions/use-type-argument-instead-of-assoc-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b33c3d6cd68788f62b79814726004da45546bfa7/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b33c3d6cd68788f62b79814726004da45546bfa7/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fuse-type-argument-instead-of-assoc-type.stderr?ref=b33c3d6cd68788f62b79814726004da45546bfa7", "patch": "@@ -12,7 +12,7 @@ LL | pub trait T<X, Y> {\n help: replace the generic bounds with the associated types\n    |\n LL |     i: Box<dyn T<usize, usize, A = usize, C = usize, B=usize>>,\n-   |                                ~~~~~~~~~  ~~~~~~~~~\n+   |                                +++        +++\n \n error[E0191]: the value of the associated types `A` (from trait `T`), `C` (from trait `T`) must be specified\n   --> $DIR/use-type-argument-instead-of-assoc-type.rs:7:16"}]}