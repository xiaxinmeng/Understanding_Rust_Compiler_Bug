{"sha": "92804cd4901b09777812d76c3f2a618ab2a3afce", "node_id": "C_kwDOAAsO6NoAKDkyODA0Y2Q0OTAxYjA5Nzc3ODEyZDc2YzNmMmE2MThhYjJhM2FmY2U", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-07-17T14:28:43Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-24T18:45:51Z"}, "message": "derive: Do not configure or clone items unless necessary", "tree": {"sha": "f22f7963e0eb385609b7814512dd6b2a74a165f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f22f7963e0eb385609b7814512dd6b2a74a165f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92804cd4901b09777812d76c3f2a618ab2a3afce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92804cd4901b09777812d76c3f2a618ab2a3afce", "html_url": "https://github.com/rust-lang/rust/commit/92804cd4901b09777812d76c3f2a618ab2a3afce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92804cd4901b09777812d76c3f2a618ab2a3afce/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c993984e4d543e23474b50217f04df3fa7a38dcc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c993984e4d543e23474b50217f04df3fa7a38dcc", "html_url": "https://github.com/rust-lang/rust/commit/c993984e4d543e23474b50217f04df3fa7a38dcc"}], "stats": {"total": 69, "additions": 47, "deletions": 22}, "files": [{"sha": "307730f7f5f14a9f88f4f627fe2a3b03f84fc3e8", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/92804cd4901b09777812d76c3f2a618ab2a3afce/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92804cd4901b09777812d76c3f2a618ab2a3afce/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=92804cd4901b09777812d76c3f2a618ab2a3afce", "patch": "@@ -2,17 +2,18 @@ use crate::util::check_builtin_macro_attribute;\n \n use rustc_ast as ast;\n use rustc_ast::mut_visit::MutVisitor;\n+use rustc_ast::ptr::P;\n use rustc_ast::tokenstream::CanSynthesizeMissingTokens;\n use rustc_ast::visit::Visitor;\n use rustc_ast::{mut_visit, visit};\n use rustc_ast::{AstLike, Attribute};\n use rustc_expand::base::{Annotatable, ExtCtxt};\n use rustc_expand::config::StripUnconfigured;\n use rustc_expand::configure;\n+use rustc_feature::Features;\n use rustc_parse::parser::ForceCollect;\n use rustc_session::utils::FlattenNonterminals;\n-\n-use rustc_ast::ptr::P;\n+use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use smallvec::SmallVec;\n@@ -24,21 +25,19 @@ crate fn expand(\n     annotatable: Annotatable,\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(ecx, meta_item, sym::cfg_eval);\n-    vec![cfg_eval(ecx, annotatable)]\n+    vec![cfg_eval(ecx.sess, ecx.ecfg.features, annotatable)]\n }\n \n-crate fn cfg_eval(ecx: &ExtCtxt<'_>, annotatable: Annotatable) -> Annotatable {\n-    CfgEval {\n-        cfg: &mut StripUnconfigured {\n-            sess: ecx.sess,\n-            features: ecx.ecfg.features,\n-            config_tokens: true,\n-        },\n-    }\n-    .configure_annotatable(annotatable)\n-    // Since the item itself has already been configured by the `InvocationCollector`,\n-    // we know that fold result vector will contain exactly one element.\n-    .unwrap()\n+crate fn cfg_eval(\n+    sess: &Session,\n+    features: Option<&Features>,\n+    annotatable: Annotatable,\n+) -> Annotatable {\n+    CfgEval { cfg: &mut StripUnconfigured { sess, features, config_tokens: true } }\n+        .configure_annotatable(annotatable)\n+        // Since the item itself has already been configured by the `InvocationCollector`,\n+        // we know that fold result vector will contain exactly one element.\n+        .unwrap()\n }\n \n struct CfgEval<'a, 'b> {"}, {"sha": "241c90c157125e5c90daae48737a863c763dead1", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/92804cd4901b09777812d76c3f2a618ab2a3afce/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92804cd4901b09777812d76c3f2a618ab2a3afce/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=92804cd4901b09777812d76c3f2a618ab2a3afce", "patch": "@@ -1,12 +1,13 @@\n use crate::cfg_eval::cfg_eval;\n \n-use rustc_ast::{self as ast, attr, token, ItemKind, MetaItemKind, NestedMetaItem, StmtKind};\n+use rustc_ast as ast;\n+use rustc_ast::{attr, token, GenericParamKind, ItemKind, MetaItemKind, NestedMetaItem, StmtKind};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_expand::base::{Annotatable, ExpandResult, ExtCtxt, Indeterminate, MultiItemModifier};\n use rustc_feature::AttributeTemplate;\n use rustc_parse::validate_attr;\n use rustc_session::Session;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n \n crate struct Expander;\n@@ -26,8 +27,7 @@ impl MultiItemModifier for Expander {\n             return ExpandResult::Ready(vec![item]);\n         }\n \n-        let configured_item = cfg_eval(ecx, item.clone());\n-\n+        let (sess, features) = (ecx.sess, ecx.ecfg.features);\n         let result =\n             ecx.resolver.resolve_derives(ecx.current_expansion.id, ecx.force_mode, &|| {\n                 let template =\n@@ -40,7 +40,8 @@ impl MultiItemModifier for Expander {\n                     template,\n                 );\n \n-                attr.meta_item_list()\n+                let mut resolutions: Vec<_> = attr\n+                    .meta_item_list()\n                     .unwrap_or_default()\n                     .into_iter()\n                     .filter_map(|nested_meta| match nested_meta {\n@@ -56,8 +57,21 @@ impl MultiItemModifier for Expander {\n                         report_path_args(sess, &meta);\n                         meta.path\n                     })\n-                    .map(|path| (path, configured_item.clone(), None))\n-                    .collect()\n+                    .map(|path| (path, dummy_annotatable(), None))\n+                    .collect();\n+\n+                // Do not configure or clone items unless necessary.\n+                match &mut resolutions[..] {\n+                    [] => {}\n+                    [(_, first_item, _), others @ ..] => {\n+                        *first_item = cfg_eval(sess, features, item.clone());\n+                        for (_, item, _) in others {\n+                            *item = first_item.clone();\n+                        }\n+                    }\n+                }\n+\n+                resolutions\n             });\n \n         match result {\n@@ -67,6 +81,18 @@ impl MultiItemModifier for Expander {\n     }\n }\n \n+// The cheapest `Annotatable` to construct.\n+fn dummy_annotatable() -> Annotatable {\n+    Annotatable::GenericParam(ast::GenericParam {\n+        id: ast::DUMMY_NODE_ID,\n+        ident: Ident::invalid(),\n+        attrs: Default::default(),\n+        bounds: Default::default(),\n+        is_placeholder: false,\n+        kind: GenericParamKind::Lifetime,\n+    })\n+}\n+\n fn report_bad_target(sess: &Session, item: &Annotatable, span: Span) -> bool {\n     let item_kind = match item {\n         Annotatable::Item(item) => Some(&item.kind),"}]}