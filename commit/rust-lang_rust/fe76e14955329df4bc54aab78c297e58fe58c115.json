{"sha": "fe76e14955329df4bc54aab78c297e58fe58c115", "node_id": "C_kwDOAAsO6NoAKGZlNzZlMTQ5NTUzMjlkZjRiYzU0YWFiNzhjMjk3ZTU4ZmU1OGMxMTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-20T21:52:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-20T21:52:10Z"}, "message": "Auto merge of #111646 - Voultapher:restore-branchless-code-gen-for-merge, r=cuviper\n\nUse code with reliable branchless code-gen for slice::sort merge\n\nThe recent LLVM 16 update changes code-gen to be not branchless anymore, in the slice::sort implementation merge function. This improves performance by 30% for random patterns, restoring the performance to the state with LLVM 15.\n\nFixes #111559", "tree": {"sha": "5daa17ab5eb28aefb222d82d481ded9ed1eb5649", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5daa17ab5eb28aefb222d82d481ded9ed1eb5649"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe76e14955329df4bc54aab78c297e58fe58c115", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe76e14955329df4bc54aab78c297e58fe58c115", "html_url": "https://github.com/rust-lang/rust/commit/fe76e14955329df4bc54aab78c297e58fe58c115", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe76e14955329df4bc54aab78c297e58fe58c115/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "url": "https://api.github.com/repos/rust-lang/rust/commits/77f4f828a2f19854fcbcdf69babe7d0ac1c92852", "html_url": "https://github.com/rust-lang/rust/commit/77f4f828a2f19854fcbcdf69babe7d0ac1c92852"}, {"sha": "42655ff03b5c3bb5bd8484e7b1b65d5990822d5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/42655ff03b5c3bb5bd8484e7b1b65d5990822d5b", "html_url": "https://github.com/rust-lang/rust/commit/42655ff03b5c3bb5bd8484e7b1b65d5990822d5b"}], "stats": {"total": 38, "additions": 12, "deletions": 26}, "files": [{"sha": "eb8595ca90d56601ef3bb39206f9acef2780cb5e", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 12, "deletions": 26, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fe76e14955329df4bc54aab78c297e58fe58c115/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe76e14955329df4bc54aab78c297e58fe58c115/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=fe76e14955329df4bc54aab78c297e58fe58c115", "patch": "@@ -1085,12 +1085,12 @@ where\n \n             // SAFETY: left and right must be valid and part of v same for out.\n             unsafe {\n-                let to_copy = if is_less(&*right, &**left) {\n-                    get_and_increment(&mut right)\n-                } else {\n-                    get_and_increment(left)\n-                };\n-                ptr::copy_nonoverlapping(to_copy, get_and_increment(out), 1);\n+                let is_l = is_less(&*right, &**left);\n+                let to_copy = if is_l { right } else { *left };\n+                ptr::copy_nonoverlapping(to_copy, *out, 1);\n+                *out = out.add(1);\n+                right = right.add(is_l as usize);\n+                *left = left.add(!is_l as usize);\n             }\n         }\n     } else {\n@@ -1113,32 +1113,18 @@ where\n \n             // SAFETY: left and right must be valid and part of v same for out.\n             unsafe {\n-                let to_copy = if is_less(&*right.sub(1), &*left.sub(1)) {\n-                    decrement_and_get(left)\n-                } else {\n-                    decrement_and_get(right)\n-                };\n-                ptr::copy_nonoverlapping(to_copy, decrement_and_get(&mut out), 1);\n+                let is_l = is_less(&*right.sub(1), &*left.sub(1));\n+                *left = left.sub(is_l as usize);\n+                *right = right.sub(!is_l as usize);\n+                let to_copy = if is_l { *left } else { *right };\n+                out = out.sub(1);\n+                ptr::copy_nonoverlapping(to_copy, out, 1);\n             }\n         }\n     }\n     // Finally, `hole` gets dropped. If the shorter run was not fully consumed, whatever remains of\n     // it will now be copied into the hole in `v`.\n \n-    unsafe fn get_and_increment<T>(ptr: &mut *mut T) -> *mut T {\n-        let old = *ptr;\n-\n-        // SAFETY: ptr.add(1) must still be a valid pointer and part of `v`.\n-        *ptr = unsafe { ptr.add(1) };\n-        old\n-    }\n-\n-    unsafe fn decrement_and_get<T>(ptr: &mut *mut T) -> *mut T {\n-        // SAFETY: ptr.sub(1) must still be a valid pointer and part of `v`.\n-        *ptr = unsafe { ptr.sub(1) };\n-        *ptr\n-    }\n-\n     // When dropped, copies the range `start..end` into `dest..`.\n     struct MergeHole<T> {\n         start: *mut T,"}]}