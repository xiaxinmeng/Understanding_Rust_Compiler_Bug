{"sha": "5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMmY2NWZiNTAzNTYyN2I4ZmIwYjFjZTBlOTI3YTQ5MmQ1NWUzYTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-14T07:46:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-14T07:46:48Z"}, "message": "auto merge of #6441 : alexcrichton/rust/issue-5531, r=luqmana\n\nAlso fix up all the fallout elsewhere throughout core. It's really nice being\r\nable to have the prelude.\r\n\r\nI'm not quite sure how resolution works with traits, but it seems to me like the public imports at the top-level of the core crate were leaking into the sub-crates, but that could also be working as intended. Regardless, things compile without the re-exports now.", "tree": {"sha": "c694aca3e3b43832d48460e5fa4fdb583977bbcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c694aca3e3b43832d48460e5fa4fdb583977bbcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "html_url": "https://github.com/rust-lang/rust/commit/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aa1122ec25d15a2a73a295f8298ad9c38b09a10", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aa1122ec25d15a2a73a295f8298ad9c38b09a10", "html_url": "https://github.com/rust-lang/rust/commit/3aa1122ec25d15a2a73a295f8298ad9c38b09a10"}, {"sha": "66e1e517019c70450dcadeb0d876c686729215e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/66e1e517019c70450dcadeb0d876c686729215e3", "html_url": "https://github.com/rust-lang/rust/commit/66e1e517019c70450dcadeb0d876c686729215e3"}], "stats": {"total": 161, "additions": 81, "deletions": 80}, "files": [{"sha": "d0f9a4ff90f1e0f31e9091c0499cc25167d636f9", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -11,8 +11,10 @@\n //! Managed vectors\n \n use cast::transmute;\n+use container::Container;\n use kinds::Copy;\n use old_iter;\n+use old_iter::BaseIter;\n use option::Option;\n use sys;\n use uint;"}, {"sha": "f4eb856865d0774fe625c1cd839f3dcd1784cd2a", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -13,12 +13,13 @@ Message passing\n */\n \n use cast::{transmute, transmute_mut};\n+use container::Container;\n use either::{Either, Left, Right};\n use kinds::Owned;\n use option::{Option, Some, None};\n use uint;\n-use unstable;\n use vec;\n+use vec::OwnedVector;\n use util::replace;\n use unstable::sync::{Exclusive, exclusive};\n \n@@ -577,7 +578,7 @@ impl<T:Owned,\n #[cfg(test)]\n mod test {\n     use either::Right;\n-    use super::{Chan, Port, oneshot, recv_one, stream};\n+    use super::{Chan, Port, oneshot, stream};\n \n     #[test]\n     fn test_select2() {"}, {"sha": "96b5e1b781de4f0e9539486ec30b046e88ede2ac", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -68,48 +68,6 @@ they contained the following prologue:\n #[cfg(test)] pub use ops = realcore::ops;\n #[cfg(test)] pub use cmp = realcore::cmp;\n \n-/* Reexported core operators */\n-\n-pub use kinds::{Const, Copy, Owned};\n-pub use ops::{Drop};\n-pub use ops::{Add, Sub, Mul, Div, Rem, Neg, Not};\n-pub use ops::{BitAnd, BitOr, BitXor};\n-pub use ops::{Shl, Shr, Index};\n-\n-\n-/* Reexported types and traits */\n-\n-pub use option::{Option, Some, None};\n-pub use result::{Result, Ok, Err};\n-\n-pub use path::Path;\n-pub use path::GenericPath;\n-pub use path::WindowsPath;\n-pub use path::PosixPath;\n-\n-pub use tuple::{CopyableTuple, ImmutableTuple, ExtendedTupleOps};\n-pub use str::{StrSlice};\n-pub use container::{Container, Mutable};\n-pub use vec::{CopyableVector, ImmutableVector};\n-pub use vec::{ImmutableEqVector, ImmutableCopyableVector};\n-pub use vec::{OwnedVector, OwnedCopyableVector, MutableVector};\n-pub use old_iter::{BaseIter, ExtendedIter, EqIter, CopyableIter};\n-pub use old_iter::{CopyableOrderedIter, CopyableNonstrictIter};\n-pub use old_iter::{ExtendedMutableIter};\n-pub use iter::Times;\n-\n-pub use num::{Num, NumCast};\n-pub use num::{Orderable, Signed, Unsigned, Round};\n-pub use num::{Algebraic, Trigonometric, Exponential, Hyperbolic};\n-pub use num::{Integer, Fractional, Real, RealExt};\n-pub use num::{Bitwise, BitCount, Bounded};\n-pub use num::{Primitive, Int, Float};\n-\n-pub use ptr::Ptr;\n-pub use from_str::FromStr;\n-pub use to_str::ToStr;\n-pub use clone::Clone;\n-\n // On Linux, link to the runtime with -lrt.\n #[cfg(target_os = \"linux\")]\n #[doc(hidden)]"}, {"sha": "1e29311e645f17efaded52d8816691e539ea9378", "filename": "src/libcore/either.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Feither.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -10,11 +10,14 @@\n \n //! A type that represents one of two alternatives\n \n+use container::Container;\n use cmp::Eq;\n use kinds::Copy;\n+use old_iter::BaseIter;\n use result::Result;\n use result;\n use vec;\n+use vec::OwnedVector;\n \n /// The either type\n #[deriving(Clone, Eq)]"}, {"sha": "cb02364d725f8401203b66908f2eca52bac1f973", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -21,6 +21,8 @@\n \n #[cfg(stage0)]\n use cast;\n+use container::Container;\n+use old_iter::BaseIter;\n use rt::io::Writer;\n use to_bytes::IterBytes;\n use uint;"}, {"sha": "ab5db67ddb6ff21166eaadfc74c388d580a2533b", "filename": "src/libcore/io.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -16,6 +16,7 @@ Basic input/output\n \n use result::Result;\n \n+use container::Container;\n use int;\n use libc;\n use libc::{c_int, c_long, c_void, size_t, ssize_t};\n@@ -24,11 +25,15 @@ use os;\n use cast;\n use path::Path;\n use ops::Drop;\n+use old_iter::{BaseIter, CopyableIter};\n use ptr;\n use result;\n use str;\n+use str::StrSlice;\n+use to_str::ToStr;\n use uint;\n use vec;\n+use vec::{OwnedVector, OwnedCopyableVector};\n \n #[allow(non_camel_case_types)] // not sure what to do about this\n pub type fd_t = c_int;"}, {"sha": "cfc9afb737c5f7d0503abd37d39cf57627287248", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -42,6 +42,7 @@ much easier to implement.\n \n #[cfg(not(stage0))] use cmp::Ord;\n #[cfg(not(stage0))] use option::{Option, Some, None};\n+#[cfg(not(stage0))] use vec::OwnedVector;\n \n #[cfg(stage0)]\n pub trait Times {"}, {"sha": "cea827298af06af9453b38c4e59e7442a562fd2d", "filename": "src/libcore/logging.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flogging.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -45,6 +45,7 @@ pub fn console_off() {\n #[cfg(not(test))]\n #[lang=\"log_type\"]\n pub fn log_type<T>(level: u32, object: &T) {\n+    use container::Container;\n     use cast::transmute;\n     use io;\n     use libc;"}, {"sha": "5ed99a839955990f1747af1f9786b5b92a096a5e", "filename": "src/libcore/num/strconv.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fstrconv.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -8,13 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use container::Container;\n use core::cmp::{Ord, Eq};\n use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use option::{None, Option, Some};\n use char;\n use str;\n use kinds::Copy;\n use vec;\n+use vec::{CopyableVector, ImmutableVector};\n+use vec::OwnedVector;\n use num::{NumCast, Zero, One, cast, pow_with_uint};\n use f64;\n "}, {"sha": "e171552af4c7409df98c0102324ff6d32190740b", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -48,6 +48,7 @@ use util;\n use num::Zero;\n use old_iter::{BaseIter, MutableIter, ExtendedIter};\n use old_iter;\n+use str::StrSlice;\n \n #[cfg(test)] use str;\n "}, {"sha": "2015c5474be32b46c276e7cf9c158d9078284eb6", "filename": "src/libcore/path.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -14,12 +14,16 @@ Cross-platform file path handling\n \n */\n \n+use container::Container;\n use cmp::Eq;\n use libc;\n use option::{None, Option, Some};\n use str;\n+use str::StrSlice;\n use to_str::ToStr;\n use ascii::{AsciiCast, AsciiStr};\n+use old_iter::BaseIter;\n+use vec::OwnedVector;\n \n #[cfg(windows)]\n pub use Path = self::WindowsPath;"}, {"sha": "fb80a43347e01556a2b263176379eb6cfe7511d9", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -82,6 +82,7 @@ bounded and unbounded protocols allows for less code duplication.\n \n */\n \n+use container::Container;\n use cast::{forget, transmute, transmute_copy};\n use either::{Either, Left, Right};\n use kinds::Owned;\n@@ -91,8 +92,10 @@ use option::{None, Option, Some};\n use unstable::finally::Finally;\n use unstable::intrinsics;\n use ptr;\n+use ptr::Ptr;\n use task;\n use vec;\n+use vec::OwnedVector;\n use util::replace;\n \n static SPIN_COUNT: uint = 0;"}, {"sha": "0aff6e06e69bdb38fd36d35950ff3863d831b197", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -353,7 +353,7 @@ pub mod ptr_tests {\n             assert!((p.fst == 50));\n             assert!((p.snd == 60));\n \n-            let mut v0 = ~[32000u16, 32001u16, 32002u16];\n+            let v0 = ~[32000u16, 32001u16, 32002u16];\n             let mut v1 = ~[0u16, 0u16, 0u16];\n \n             copy_memory(mut_offset(vec::raw::to_mut_ptr(v1), 1u),"}, {"sha": "0bf8635d1c8f326ded6cca612649bce771cd53ac", "filename": "src/libcore/repr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frepr.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -25,10 +25,11 @@ use managed;\n use ptr;\n use reflect;\n use reflect::{MovePtr, align};\n+use str::StrSlice;\n use to_str::ToStr;\n-use vec::UnboxedVecRepr;\n use vec::raw::{VecRepr, SliceRepr};\n use vec;\n+use vec::{OwnedVector, UnboxedVecRepr};\n \n #[cfg(test)] use io;\n "}, {"sha": "b7de667878399be1a310ba636c75aabb028190a8", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -17,7 +17,9 @@ use either;\n use either::Either;\n use kinds::Copy;\n use option::{None, Option, Some};\n+use old_iter::BaseIter;\n use vec;\n+use vec::OwnedVector;\n \n /// The result type\n #[deriving(Clone, Eq)]"}, {"sha": "fbbc82743407c28293743fc015dab80519d231d9", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -13,6 +13,7 @@\n #[doc(hidden)];\n \n use libc::c_char;\n+use ptr::Ptr;\n \n #[path = \"sched/mod.rs\"]\n mod sched;"}, {"sha": "3a4e9307d3b5069ba83b7115fa56a593dafa698d", "filename": "src/libcore/rt/stack.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fstack.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use container::Container;\n+use ptr::Ptr;\n use vec;\n \n pub struct StackSegment {"}, {"sha": "0c6843c605d159aa89f446cf6d892e6ad4c13a25", "filename": "src/libcore/rt/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Ftest.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -77,7 +77,7 @@ pub fn spawntask_try(f: ~fn()) -> Result<(), ()> {\n \n     // Switch to the scheduler\n     let f = Cell(Cell(f));\n-    let mut sched = local_sched::take();\n+    let sched = local_sched::take();\n     do sched.deschedule_running_task_and_then() |old_task| {\n         let old_task = Cell(old_task);\n         let f = f.take();"}, {"sha": "6499f0a3efdcf92e5aac820ee21dba196381829f", "filename": "src/libcore/rt/uv/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fmod.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -34,11 +34,13 @@ via `close` and `delete` methods.\n \n */\n \n+use container::Container;\n use option::*;\n use str::raw::from_c_str;\n use to_str::ToStr;\n use vec;\n use ptr;\n+use ptr::Ptr;\n use libc::{c_void, c_int, size_t, malloc, free};\n use cast::transmute;\n use ptr::null;"}, {"sha": "3e6aa657c57dd4273211f007dcd14214c845d42d", "filename": "src/libcore/rt/uv/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fnet.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -388,7 +388,7 @@ fn listen() {\n             assert!(status.is_none());\n             let mut server_stream_watcher = server_stream_watcher;\n             let mut loop_ = loop_;\n-            let mut client_tcp_watcher = TcpWatcher::new(&mut loop_);\n+            let client_tcp_watcher = TcpWatcher::new(&mut loop_);\n             let mut client_tcp_watcher = client_tcp_watcher.as_stream();\n             server_stream_watcher.accept(client_tcp_watcher);\n             let count_cell = Cell(0);"}, {"sha": "24bffd8d1cd2449afbbc3cd5e5dc63883a48721c", "filename": "src/libcore/rt/uvio.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frt%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frt%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuvio.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -15,10 +15,12 @@ use super::io::net::ip::IpAddr;\n use super::uv::*;\n use super::rtio::*;\n use ops::Drop;\n+use old_iter::CopyableIter;\n use cell::{Cell, empty_cell};\n use cast::transmute;\n use super::sched::{Scheduler, local_sched};\n \n+#[cfg(test)] use container::Container;\n #[cfg(test)] use uint;\n #[cfg(test)] use unstable::run_in_bare_thread;\n #[cfg(test)] use super::test::*;\n@@ -426,7 +428,7 @@ fn test_read_read_read() {\n                 let io = local_sched::unsafe_borrow_io();\n                 let mut listener = io.bind(addr).unwrap();\n                 let mut stream = listener.listen().unwrap();\n-                let mut buf = [1, .. 2048];\n+                let buf = [1, .. 2048];\n                 let mut total_bytes_written = 0;\n                 while total_bytes_written < MAX {\n                     stream.write(buf);"}, {"sha": "495cd75a0bf8e30bc93fda852259684fa6e97509", "filename": "src/libcore/rt/work_queue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frt%2Fwork_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frt%2Fwork_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fwork_queue.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use container::Container;\n use option::*;\n+use vec::OwnedVector;\n \n pub struct WorkQueue<T> {\n     priv queue: ~[T]"}, {"sha": "c865e77cc6b78e535c81891e8a2c1f9732f6145a", "filename": "src/libcore/run.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -778,7 +778,6 @@ pub fn waitpid(pid: pid_t) -> int {\n \n #[cfg(test)]\n mod tests {\n-    use libc;\n     use option::None;\n     use os;\n     use run::{readclose, writeclose};"}, {"sha": "d31152e1e1c665fd1a1165afacd63b7cf15707ed", "filename": "src/libcore/str.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -23,14 +23,19 @@ use cast;\n use char;\n use clone::Clone;\n use cmp::{TotalOrd, Ordering, Less, Equal, Greater};\n+use container::Container;\n+use iter::Times;\n+use iterator::Iterator;\n use libc;\n use option::{None, Option, Some};\n-use iterator::Iterator;\n+use old_iter::{BaseIter, EqIter};\n use ptr;\n+use ptr::Ptr;\n use str;\n+use to_str::ToStr;\n use uint;\n use vec;\n-use to_str::ToStr;\n+use vec::{OwnedVector, OwnedCopyableVector};\n \n #[cfg(not(test))] use cmp::{Eq, Ord, Equiv, TotalEq};\n \n@@ -3133,13 +3138,16 @@ impl<'self> Iterator<char> for StrCharIterator<'self> {\n \n #[cfg(test)]\n mod tests {\n+    use container::Container;\n     use char;\n     use option::Some;\n     use libc::c_char;\n     use libc;\n+    use old_iter::BaseIter;\n     use ptr;\n     use str::*;\n     use vec;\n+    use vec::ImmutableVector;\n     use cmp::{TotalOrd, Less, Equal, Greater};\n \n     #[test]"}, {"sha": "4e239c4c82c7dc38a1a6b49fa3490ad771c57dac", "filename": "src/libcore/str/ascii.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fstr%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fstr%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fascii.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -12,7 +12,10 @@\n \n use to_str::{ToStr,ToStrConsume};\n use str;\n+use str::StrSlice;\n use cast;\n+use old_iter::BaseIter;\n+use vec::{CopyableVector, ImmutableVector, OwnedVector};\n \n /// Datatype to hold one ascii character. It is 8 bit long.\n #[deriving(Clone, Eq)]"}, {"sha": "1518f80a125a90bd0278adc129cbb36a41535c40", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -772,7 +772,7 @@ fn test_add_wrapper() {\n     do b0.add_wrapper |body| {\n         let ch = Cell(ch.take());\n         let result: ~fn() = || {\n-            let mut ch = ch.take();\n+            let ch = ch.take();\n             body();\n             ch.send(());\n         };"}, {"sha": "9a1689ca0561451527bda7c2d0563bb28aa0aef8", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -78,7 +78,6 @@ use cell::Cell;\n use container::Map;\n use comm::{Chan, GenericChan};\n use prelude::*;\n-use unstable;\n use ptr;\n use hashmap::HashSet;\n use task::local_data_priv::{local_get, local_set, OldHandle};"}, {"sha": "6cc621e3419ad99797730d625a0b55e8954dbbb4", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -17,6 +17,7 @@ The `ToBytes` and `IterBytes` traits\n use io;\n use io::Writer;\n use option::{None, Option, Some};\n+use old_iter::BaseIter;\n use str;\n \n pub type Cb<'self> = &'self fn(buf: &[u8]) -> bool;"}, {"sha": "365cb847740b2240fae00c148e60086d38666b16", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -20,6 +20,7 @@ use hashmap::HashSet;\n use container::Map;\n use hash::Hash;\n use cmp::Eq;\n+use old_iter::BaseIter;\n \n pub trait ToStr {\n     fn to_str(&self) -> ~str;\n@@ -236,4 +237,4 @@ mod tests {\n         assert!(set_str == ~\"{1, 2}\" || set_str == ~\"{2, 1}\");\n         assert!(empty_set.to_str() == ~\"{}\");\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "88433f9cefe513da17621141f7f0a65bae046bce", "filename": "src/libcore/unstable/global.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Funstable%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Funstable%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fglobal.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -255,11 +255,7 @@ fn test_modify() {\n     unsafe {\n         do global_data_modify(key) |v| {\n             match v {\n-                None => {\n-                    unsafe {\n-                        Some(~UnsafeAtomicRcBox::new(10))\n-                    }\n-                }\n+                None => { Some(~UnsafeAtomicRcBox::new(10)) }\n                 _ => fail!()\n             }\n         }\n@@ -277,11 +273,7 @@ fn test_modify() {\n \n         do global_data_modify(key) |v| {\n             match v {\n-                None => {\n-                    unsafe {\n-                        Some(~UnsafeAtomicRcBox::new(10))\n-                    }\n-                }\n+                None => { Some(~UnsafeAtomicRcBox::new(10)) }\n                 _ => fail!()\n             }\n         }"}, {"sha": "d5c5230cef81929df455c0ec1bd5673b8d2b39f1", "filename": "src/libcore/unstable/weak_task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Funstable%2Fweak_task.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Funstable%2Fweak_task.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fweak_task.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -191,7 +191,7 @@ fn test_select_stream_and_oneshot() {\n     use comm::select2i;\n     use either::{Left, Right};\n \n-    let mut (port, chan) = stream();\n+    let (port, chan) = stream();\n     let port = Cell(port);\n     let (waitport, waitchan) = stream();\n     do spawn {"}, {"sha": "89f5b73953af90719c2b407503b93c56d487c814", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -22,9 +22,11 @@ use old_iter;\n use iterator::Iterator;\n use kinds::Copy;\n use libc;\n+use old_iter::{BaseIter, CopyableIter};\n use option::{None, Option, Some};\n use ptr::to_unsafe_ptr;\n use ptr;\n+use ptr::Ptr;\n use sys;\n use uint;\n use unstable::intrinsics;\n@@ -3594,7 +3596,7 @@ mod tests {\n         fn sub(a: int, b: &int) -> int {\n             a - *b\n         }\n-        let mut v = ~[1, 2, 3, 4];\n+        let v = ~[1, 2, 3, 4];\n         let sum = foldl(0, v, sub);\n         assert!(sum == -10);\n     }\n@@ -3604,7 +3606,7 @@ mod tests {\n         fn sub(a: &int, b: int) -> int {\n             *a - b\n         }\n-        let mut v = ~[1, 2, 3, 4];\n+        let v = ~[1, 2, 3, 4];\n         let sum = foldr(v, 0, sub);\n         assert!(sum == -2);\n     }\n@@ -3768,7 +3770,7 @@ mod tests {\n         assert!(position_between(~[], 0u, 0u, f).is_none());\n \n         fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n-        let mut v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+        let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert!(position_between(v, 0u, 0u, f).is_none());\n         assert!(position_between(v, 0u, 1u, f).is_none());\n@@ -3797,7 +3799,7 @@ mod tests {\n \n         fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n         fn g(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'd' }\n-        let mut v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+        let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert!(find(v, f) == Some((1, 'b')));\n         assert!(find(v, g).is_none());\n@@ -3808,7 +3810,7 @@ mod tests {\n         assert!(find_between(~[], 0u, 0u, f).is_none());\n \n         fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n-        let mut v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+        let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert!(find_between(v, 0u, 0u, f).is_none());\n         assert!(find_between(v, 0u, 1u, f).is_none());\n@@ -3837,7 +3839,7 @@ mod tests {\n \n         fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n         fn g(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'd' }\n-        let mut v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+        let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert!(position(v, f) == Some(1u));\n         assert!(position(v, g).is_none());\n@@ -3848,7 +3850,7 @@ mod tests {\n         assert!(rposition_between(~[], 0u, 0u, f).is_none());\n \n         fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n-        let mut v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+        let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert!(rposition_between(v, 0u, 0u, f).is_none());\n         assert!(rposition_between(v, 0u, 1u, f).is_none());\n@@ -3877,7 +3879,7 @@ mod tests {\n \n         fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n         fn g(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'd' }\n-        let mut v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+        let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert!(rfind(v, f) == Some((3, 'b')));\n         assert!(rfind(v, g).is_none());\n@@ -3888,7 +3890,7 @@ mod tests {\n         assert!(rfind_between(~[], 0u, 0u, f).is_none());\n \n         fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n-        let mut v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+        let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert!(rfind_between(v, 0u, 0u, f).is_none());\n         assert!(rfind_between(v, 0u, 1u, f).is_none());\n@@ -4357,7 +4359,7 @@ mod tests {\n     #[ignore(windows)]\n     #[should_fail]\n     fn test_map_fail() {\n-        let mut v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n+        let v = [(~0, @0), (~0, @0), (~0, @0), (~0, @0)];\n         let mut i = 0;\n         do map(v) |_elt| {\n             if i == 2 {"}, {"sha": "8c4cbd0bce58634e1c71b0a183e797b7243f7d01", "filename": "src/librustc/util/enum_set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibrustc%2Futil%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Flibrustc%2Futil%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fenum_set.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -82,19 +82,19 @@ pub impl<E:CLike> EnumSet<E> {\n     }\n }\n \n-impl<E:CLike> core::Sub<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n+impl<E:CLike> Sub<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n     fn sub(&self, e: &EnumSet<E>) -> EnumSet<E> {\n         EnumSet {bits: self.bits & !e.bits}\n     }\n }\n \n-impl<E:CLike> core::BitOr<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n+impl<E:CLike> BitOr<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n     fn bitor(&self, e: &EnumSet<E>) -> EnumSet<E> {\n         EnumSet {bits: self.bits | e.bits}\n     }\n }\n \n-impl<E:CLike> core::BitAnd<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n+impl<E:CLike> BitAnd<EnumSet<E>, EnumSet<E>> for EnumSet<E> {\n     fn bitand(&self, e: &EnumSet<E>) -> EnumSet<E> {\n         EnumSet {bits: self.bits & e.bits}\n     }"}, {"sha": "22f6a34a181fb249d5a3ad75097087c0a8a5eb39", "filename": "src/test/compile-fail/tag-that-dare-not-speak-its-name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs?ref=5a2f65fb5035627b8fb0b1ce0e927a492d55e3a4", "patch": "@@ -15,7 +15,7 @@\n \n extern mod core;\n \n-fn last<T>(v: ~[&T]) -> core::Option<T> {\n+fn last<T>(v: ~[&T]) -> core::option::Option<T> {\n     fail!();\n }\n "}]}