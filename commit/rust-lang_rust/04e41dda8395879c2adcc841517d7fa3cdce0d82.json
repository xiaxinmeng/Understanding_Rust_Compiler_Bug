{"sha": "04e41dda8395879c2adcc841517d7fa3cdce0d82", "node_id": "C_kwDOAAsO6NoAKDA0ZTQxZGRhODM5NTg3OWMyYWRjYzg0MTUxN2Q3ZmEzY2RjZTBkODI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-10T13:24:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-10T13:24:42Z"}, "message": "Rollup merge of #112297 - jyn514:remove-exclude-kind, r=Mark-Simulacrum\n\nbootstrap: Disallow `--exclude test::std`\n\nUse the top-level Kind to determine whether Steps are excluded.\n\nPreviously, this would use the `Kind` passed to `--exclude` (and not do any filtering at all if no kind was passed).\nThat meant that `x test linkchecker --exclude std` would fail - you had to explicitly say `--exclude test::std`.\n\nChange bootstrap to use the top-level Kind instead, which does the right thing automatically.\nNote that this breaks things like `x test --exclude doc::std`, but I'm not sure why you'd ever want to do that.\n\nThere's a lot of churn here, but the 1-line change in the first commit is the actual behavior change, the rest is just cleanup.\n\nFixes https://github.com/rust-lang/rust/issues/103201. Note that this effectively reverts most of https://github.com/rust-lang/rust/pull/91965.\n\ncc `@pietroalbini`", "tree": {"sha": "29fc11fe97aeba26a4cd73a0a22bfb995bc30854", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29fc11fe97aeba26a4cd73a0a22bfb995bc30854"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04e41dda8395879c2adcc841517d7fa3cdce0d82", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkhHmaCRBK7hj4Ov3rIwAAmn0IAFIqFqFbn3XlypzFLJ+FlLqs\nG5CzAco4XS6sJd7EwVO+oKrfXPSkHL2cwzgY1+Rjjt03VeJvZdhlzEFyErDJ/p/1\nYKTZbX9XBk1EVKuTyw0VPEgd4HD+HdmaOvPVh3+HwZFECkQaXj1Jt3ZEOoQayRpf\n/i6ekC2g+STXWUfO8KG2VA1EaBEs8WM4N0A8lDq166QGq7yw7EMG+yua4r3CXlhx\nlczzqQhF2r6jJI6uKGzgiFZibyjH1opdIF6nGEa53EKcXuQGIUoew3h1ho7aX6hu\n894MZKVcLppmRM0AEROLSRjnyzqVF5pkugrqgXqWJJkB58ot25wedwy0A2e85Lc=\n=v8O7\n-----END PGP SIGNATURE-----\n", "payload": "tree 29fc11fe97aeba26a4cd73a0a22bfb995bc30854\nparent 4b71d79c972a605959b0a7c82b323fbd8562f070\nparent c73c5dd35fa8171ba1634bf9111073706ccf993a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686403482 +0200\ncommitter GitHub <noreply@github.com> 1686403482 +0200\n\nRollup merge of #112297 - jyn514:remove-exclude-kind, r=Mark-Simulacrum\n\nbootstrap: Disallow `--exclude test::std`\n\nUse the top-level Kind to determine whether Steps are excluded.\n\nPreviously, this would use the `Kind` passed to `--exclude` (and not do any filtering at all if no kind was passed).\nThat meant that `x test linkchecker --exclude std` would fail - you had to explicitly say `--exclude test::std`.\n\nChange bootstrap to use the top-level Kind instead, which does the right thing automatically.\nNote that this breaks things like `x test --exclude doc::std`, but I'm not sure why you'd ever want to do that.\n\nThere's a lot of churn here, but the 1-line change in the first commit is the actual behavior change, the rest is just cleanup.\n\nFixes https://github.com/rust-lang/rust/issues/103201. Note that this effectively reverts most of https://github.com/rust-lang/rust/pull/91965.\n\ncc `@pietroalbini`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04e41dda8395879c2adcc841517d7fa3cdce0d82", "html_url": "https://github.com/rust-lang/rust/commit/04e41dda8395879c2adcc841517d7fa3cdce0d82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04e41dda8395879c2adcc841517d7fa3cdce0d82/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b71d79c972a605959b0a7c82b323fbd8562f070", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b71d79c972a605959b0a7c82b323fbd8562f070", "html_url": "https://github.com/rust-lang/rust/commit/4b71d79c972a605959b0a7c82b323fbd8562f070"}, {"sha": "c73c5dd35fa8171ba1634bf9111073706ccf993a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c73c5dd35fa8171ba1634bf9111073706ccf993a", "html_url": "https://github.com/rust-lang/rust/commit/c73c5dd35fa8171ba1634bf9111073706ccf993a"}], "stats": {"total": 90, "additions": 28, "deletions": 62}, "files": [{"sha": "1aba0713850aef9216cd75818de11fb0d9559082", "filename": "src/bootstrap/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/04e41dda8395879c2adcc841517d7fa3cdce0d82/src%2Fbootstrap%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/04e41dda8395879c2adcc841517d7fa3cdce0d82/src%2Fbootstrap%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCHANGELOG.md?ref=04e41dda8395879c2adcc841517d7fa3cdce0d82", "patch": "@@ -18,6 +18,7 @@ The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n - `x.py fmt` now formats only files modified between the merge-base of HEAD and the last commit in the master branch of the rust-lang repository and the current working directory. To restore old behaviour, use `x.py fmt .`. The check mode is not affected by this change. [#105702](https://github.com/rust-lang/rust/pull/105702)\n - The `llvm.version-check` config option has been removed. Older versions were never supported. If you still need to support older versions (e.g. you are applying custom patches), patch `check_llvm_version` in bootstrap to change the minimum version. [#108619](https://github.com/rust-lang/rust/pull/108619)\n - The `rust.ignore-git` option has been renamed to `rust.omit-git-hash`. [#110059](https://github.com/rust-lang/rust/pull/110059)\n+- `--exclude` no longer accepts a `Kind` as part of a Step; instead it uses the top-level Kind of the subcommand. If this matches how you were already using --exclude (e.g. `x test --exclude test::std`), simply remove the kind: `--exclude std`. If you were using a kind that did not match the top-level subcommand, please open an issue explaining why you wanted this feature.\n \n ### Non-breaking changes\n "}, {"sha": "ea1b34812e5cafad0590ad60ad6586a86cdc3df3", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 9, "deletions": 36, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/04e41dda8395879c2adcc841517d7fa3cdce0d82/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e41dda8395879c2adcc841517d7fa3cdce0d82/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=04e41dda8395879c2adcc841517d7fa3cdce0d82", "patch": "@@ -8,7 +8,7 @@ use std::fs::{self, File};\n use std::hash::Hash;\n use std::io::{BufRead, BufReader};\n use std::ops::Deref;\n-use std::path::{Component, Path, PathBuf};\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::time::{Duration, Instant};\n \n@@ -150,29 +150,6 @@ pub struct TaskPath {\n     pub kind: Option<Kind>,\n }\n \n-impl TaskPath {\n-    pub fn parse(path: impl Into<PathBuf>) -> TaskPath {\n-        let mut kind = None;\n-        let mut path = path.into();\n-\n-        let mut components = path.components();\n-        if let Some(Component::Normal(os_str)) = components.next() {\n-            if let Some(str) = os_str.to_str() {\n-                if let Some((found_kind, found_prefix)) = str.split_once(\"::\") {\n-                    if found_kind.is_empty() {\n-                        panic!(\"empty kind in task path {}\", path.display());\n-                    }\n-                    kind = Kind::parse(found_kind);\n-                    assert!(kind.is_some());\n-                    path = Path::new(found_prefix).join(components.as_path());\n-                }\n-            }\n-        }\n-\n-        TaskPath { path, kind }\n-    }\n-}\n-\n impl Debug for TaskPath {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         if let Some(kind) = &self.kind {\n@@ -216,17 +193,17 @@ impl PathSet {\n         PathSet::Set(set)\n     }\n \n-    fn has(&self, needle: &Path, module: Option<Kind>) -> bool {\n+    fn has(&self, needle: &Path, module: Kind) -> bool {\n         match self {\n             PathSet::Set(set) => set.iter().any(|p| Self::check(p, needle, module)),\n             PathSet::Suite(suite) => Self::check(suite, needle, module),\n         }\n     }\n \n     // internal use only\n-    fn check(p: &TaskPath, needle: &Path, module: Option<Kind>) -> bool {\n-        if let (Some(p_kind), Some(kind)) = (&p.kind, module) {\n-            p.path.ends_with(needle) && *p_kind == kind\n+    fn check(p: &TaskPath, needle: &Path, module: Kind) -> bool {\n+        if let Some(p_kind) = &p.kind {\n+            p.path.ends_with(needle) && *p_kind == module\n         } else {\n             p.path.ends_with(needle)\n         }\n@@ -238,11 +215,7 @@ impl PathSet {\n     /// This is used for `StepDescription::krate`, which passes all matching crates at once to\n     /// `Step::make_run`, rather than calling it many times with a single crate.\n     /// See `tests.rs` for examples.\n-    fn intersection_removing_matches(\n-        &self,\n-        needles: &mut Vec<&Path>,\n-        module: Option<Kind>,\n-    ) -> PathSet {\n+    fn intersection_removing_matches(&self, needles: &mut Vec<&Path>, module: Kind) -> PathSet {\n         let mut check = |p| {\n             for (i, n) in needles.iter().enumerate() {\n                 let matched = Self::check(p, n, module);\n@@ -307,7 +280,7 @@ impl StepDescription {\n     }\n \n     fn is_excluded(&self, builder: &Builder<'_>, pathset: &PathSet) -> bool {\n-        if builder.config.exclude.iter().any(|e| pathset.has(&e.path, e.kind)) {\n+        if builder.config.exclude.iter().any(|e| pathset.has(&e, builder.kind)) {\n             println!(\"Skipping {:?} because it is excluded\", pathset);\n             return true;\n         }\n@@ -562,7 +535,7 @@ impl<'a> ShouldRun<'a> {\n     ) -> Vec<PathSet> {\n         let mut sets = vec![];\n         for pathset in &self.paths {\n-            let subset = pathset.intersection_removing_matches(paths, Some(kind));\n+            let subset = pathset.intersection_removing_matches(paths, kind);\n             if subset != PathSet::empty() {\n                 sets.push(subset);\n             }\n@@ -2138,7 +2111,7 @@ impl<'a> Builder<'a> {\n         let should_run = (desc.should_run)(ShouldRun::new(self, desc.kind));\n \n         for path in &self.paths {\n-            if should_run.paths.iter().any(|s| s.has(path, Some(desc.kind)))\n+            if should_run.paths.iter().any(|s| s.has(path, desc.kind))\n                 && !desc.is_excluded(\n                     self,\n                     &PathSet::Suite(TaskPath { path: path.clone(), kind: Some(desc.kind) }),"}, {"sha": "31dcee58216ae01c259de7e6857bce18b817533b", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/04e41dda8395879c2adcc841517d7fa3cdce0d82/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e41dda8395879c2adcc841517d7fa3cdce0d82/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=04e41dda8395879c2adcc841517d7fa3cdce0d82", "patch": "@@ -101,23 +101,21 @@ fn test_invalid() {\n \n #[test]\n fn test_intersection() {\n-    let set = PathSet::Set(\n-        [\"library/core\", \"library/alloc\", \"library/std\"].into_iter().map(TaskPath::parse).collect(),\n-    );\n+    let set = |paths: &[&str]| {\n+        PathSet::Set(paths.into_iter().map(|p| TaskPath { path: p.into(), kind: None }).collect())\n+    };\n+    let library_set = set(&[\"library/core\", \"library/alloc\", \"library/std\"]);\n     let mut command_paths =\n         vec![Path::new(\"library/core\"), Path::new(\"library/alloc\"), Path::new(\"library/stdarch\")];\n-    let subset = set.intersection_removing_matches(&mut command_paths, None);\n-    assert_eq!(\n-        subset,\n-        PathSet::Set([\"library/core\", \"library/alloc\"].into_iter().map(TaskPath::parse).collect())\n-    );\n+    let subset = library_set.intersection_removing_matches(&mut command_paths, Kind::Build);\n+    assert_eq!(subset, set(&[\"library/core\", \"library/alloc\"]),);\n     assert_eq!(command_paths, vec![Path::new(\"library/stdarch\")]);\n }\n \n #[test]\n fn test_exclude() {\n     let mut config = configure(\"test\", &[\"A\"], &[\"A\"]);\n-    config.exclude = vec![TaskPath::parse(\"src/tools/tidy\")];\n+    config.exclude = vec![\"src/tools/tidy\".into()];\n     let cache = run_build(&[], config);\n \n     // Ensure we have really excluded tidy\n@@ -129,21 +127,16 @@ fn test_exclude() {\n \n #[test]\n fn test_exclude_kind() {\n-    let path = PathBuf::from(\"src/tools/cargotest\");\n-    let exclude = TaskPath::parse(\"test::src/tools/cargotest\");\n-    assert_eq!(exclude, TaskPath { kind: Some(Kind::Test), path: path.clone() });\n+    let path = PathBuf::from(\"compiler/rustc_data_structures\");\n \n     let mut config = configure(\"test\", &[\"A\"], &[\"A\"]);\n-    // Ensure our test is valid, and `test::Cargotest` would be run without the exclude.\n-    assert!(run_build(&[path.clone()], config.clone()).contains::<test::Cargotest>());\n-    // Ensure tests for cargotest are skipped.\n-    config.exclude = vec![exclude.clone()];\n-    assert!(!run_build(&[path.clone()], config).contains::<test::Cargotest>());\n-\n-    // Ensure builds for cargotest are not skipped.\n-    let mut config = configure(\"build\", &[\"A\"], &[\"A\"]);\n-    config.exclude = vec![exclude];\n-    assert!(run_build(&[path], config).contains::<tool::CargoTest>());\n+    // Ensure our test is valid, and `test::Rustc` would be run without the exclude.\n+    assert!(run_build(&[], config.clone()).contains::<test::CrateLibrustc>());\n+    // Ensure tests for rustc are skipped.\n+    config.exclude = vec![path.clone()];\n+    assert!(!run_build(&[], config.clone()).contains::<test::CrateLibrustc>());\n+    // Ensure builds for rustc are not skipped.\n+    assert!(run_build(&[], config).contains::<compile::Rustc>());\n }\n \n /// Ensure that if someone passes both a single crate and `library`, all library crates get built."}, {"sha": "c59df7eecf680adf3df710ae2a05aeedfe6551bb", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/04e41dda8395879c2adcc841517d7fa3cdce0d82/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e41dda8395879c2adcc841517d7fa3cdce0d82/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=04e41dda8395879c2adcc841517d7fa3cdce0d82", "patch": "@@ -17,7 +17,6 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::str::FromStr;\n \n-use crate::builder::TaskPath;\n use crate::cache::{Interned, INTERNER};\n use crate::cc_detect::{ndk_compiler, Language};\n use crate::channel::{self, GitInfo};\n@@ -80,7 +79,7 @@ pub struct Config {\n     pub sanitizers: bool,\n     pub profiler: bool,\n     pub omit_git_hash: bool,\n-    pub exclude: Vec<TaskPath>,\n+    pub exclude: Vec<PathBuf>,\n     pub include_default_paths: bool,\n     pub rustc_error_format: Option<String>,\n     pub json_output: bool,\n@@ -957,7 +956,7 @@ impl Config {\n \n         // Set flags.\n         config.paths = std::mem::take(&mut flags.paths);\n-        config.exclude = flags.exclude.into_iter().map(|path| TaskPath::parse(path)).collect();\n+        config.exclude = flags.exclude;\n         config.include_default_paths = flags.include_default_paths;\n         config.rustc_error_format = flags.rustc_error_format;\n         config.json_output = flags.json_output;"}, {"sha": "8af0565cd38de1dd1b0b35d0446cd2733f8eb73e", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04e41dda8395879c2adcc841517d7fa3cdce0d82/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04e41dda8395879c2adcc841517d7fa3cdce0d82/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=04e41dda8395879c2adcc841517d7fa3cdce0d82", "patch": "@@ -1537,7 +1537,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n \n         for exclude in &builder.config.exclude {\n             cmd.arg(\"--skip\");\n-            cmd.arg(&exclude.path);\n+            cmd.arg(&exclude);\n         }\n \n         // Get paths from cmd args"}]}