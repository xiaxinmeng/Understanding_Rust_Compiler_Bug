{"sha": "d44030d8ec6245edabdbe23a69be21bffb51eb11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NDAzMGQ4ZWM2MjQ1ZWRhYmRiZTIzYTY5YmUyMWJmZmI1MWViMTE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-15T22:21:57Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-15T22:28:48Z"}, "message": "Add pretty-printing for const generics\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "ac1d2ffc074d1fd9c4ccbb4eb886ffd0c6d94394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac1d2ffc074d1fd9c4ccbb4eb886ffd0c6d94394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d44030d8ec6245edabdbe23a69be21bffb51eb11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d44030d8ec6245edabdbe23a69be21bffb51eb11", "html_url": "https://github.com/rust-lang/rust/commit/d44030d8ec6245edabdbe23a69be21bffb51eb11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d44030d8ec6245edabdbe23a69be21bffb51eb11/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "725ba9625eca99537cb0caf2998b363e784dd654", "url": "https://api.github.com/repos/rust-lang/rust/commits/725ba9625eca99537cb0caf2998b363e784dd654", "html_url": "https://github.com/rust-lang/rust/commit/725ba9625eca99537cb0caf2998b363e784dd654"}], "stats": {"total": 39, "additions": 21, "deletions": 18}, "files": [{"sha": "031b3a3233d6f2cc57899ed45d2f1edaa068a5fc", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d44030d8ec6245edabdbe23a69be21bffb51eb11/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d44030d8ec6245edabdbe23a69be21bffb51eb11/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=d44030d8ec6245edabdbe23a69be21bffb51eb11", "patch": "@@ -1711,31 +1711,25 @@ impl<'a> State<'a> {\n                 }\n             };\n \n-            let mut types = vec![];\n-            let mut elide_lifetimes = true;\n-            for arg in &generic_args.args {\n-                match arg {\n-                    GenericArg::Lifetime(lt) => {\n-                        if !lt.is_elided() {\n-                            elide_lifetimes = false;\n-                        }\n-                    }\n-                    GenericArg::Type(ty) => {\n-                        types.push(ty);\n-                    }\n+            let mut nonelided_generic_args: bool = false;\n+            let elide_lifetimes = generic_args.args.iter().all(|arg| match arg {\n+                GenericArg::Lifetime(lt) => lt.is_elided(),\n+                _ => {\n+                    nonelided_generic_args = true;\n+                    true\n                 }\n-            }\n-            if !elide_lifetimes {\n+            });\n+\n+            if nonelided_generic_args {\n                 start_or_comma(self)?;\n                 self.commasep(Inconsistent, &generic_args.args, |s, generic_arg| {\n                     match generic_arg {\n-                        GenericArg::Lifetime(lt) => s.print_lifetime(lt),\n+                        GenericArg::Lifetime(lt) if !elide_lifetimes => s.print_lifetime(lt),\n+                        GenericArg::Lifetime(_) => Ok(()),\n                         GenericArg::Type(ty) => s.print_type(ty),\n+                        GenericArg::Const(ct) => s.print_anon_const(&ct.value),\n                     }\n                 })?;\n-            } else if !types.is_empty() {\n-                start_or_comma(self)?;\n-                self.commasep(Inconsistent, &types, |s, ty| s.print_type(&ty))?;\n             }\n \n             // FIXME(eddyb) This would leak into error messages, e.g.:\n@@ -2106,7 +2100,12 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_generic_param(&mut self, param: &GenericParam) -> io::Result<()> {\n+        if let GenericParamKind::Const { .. } = param.kind {\n+            self.word_space(\"const\")?;\n+        }\n+\n         self.print_ident(param.name.ident())?;\n+\n         match param.kind {\n             GenericParamKind::Lifetime { .. } => {\n                 let mut sep = \":\";\n@@ -2133,6 +2132,10 @@ impl<'a> State<'a> {\n                     _ => Ok(()),\n                 }\n             }\n+            GenericParamKind::Const { ref ty } => {\n+                self.word_space(\":\")?;\n+                self.print_type(ty)\n+            }\n         }\n     }\n "}]}