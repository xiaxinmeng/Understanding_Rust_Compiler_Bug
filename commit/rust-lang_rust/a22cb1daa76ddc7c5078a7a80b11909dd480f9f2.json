{"sha": "a22cb1daa76ddc7c5078a7a80b11909dd480f9f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyMmNiMWRhYTc2ZGRjN2M1MDc4YTdhODBiMTE5MDlkZDQ4MGY5ZjI=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-11-18T15:47:19Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-11-18T15:47:19Z"}, "message": "Use Source<&ast::Name> in classify_name", "tree": {"sha": "d829b5cf22dedfb99dc154b48a3576be48dfbbc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d829b5cf22dedfb99dc154b48a3576be48dfbbc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a22cb1daa76ddc7c5078a7a80b11909dd480f9f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a22cb1daa76ddc7c5078a7a80b11909dd480f9f2", "html_url": "https://github.com/rust-lang/rust/commit/a22cb1daa76ddc7c5078a7a80b11909dd480f9f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a22cb1daa76ddc7c5078a7a80b11909dd480f9f2/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cc4d058d2b0a8741ef67b71986b4c51b4459426", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc4d058d2b0a8741ef67b71986b4c51b4459426", "html_url": "https://github.com/rust-lang/rust/commit/9cc4d058d2b0a8741ef67b71986b4c51b4459426"}], "stats": {"total": 47, "additions": 22, "deletions": 25}, "files": [{"sha": "c6d678c0c7d02de799ee481de3c493368372d89f", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a22cb1daa76ddc7c5078a7a80b11909dd480f9f2/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a22cb1daa76ddc7c5078a7a80b11909dd480f9f2/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=a22cb1daa76ddc7c5078a7a80b11909dd480f9f2", "patch": "@@ -193,7 +193,9 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n             None\n         }\n     } else if let Some(name) = find_node_at_offset::<ast::Name>(file.syntax(), position.offset) {\n-        if let Some(name_kind) = classify_name(db, position.file_id, &name).map(|d| d.kind) {\n+        if let Some(name_kind) =\n+            classify_name(db, Source::new(position.file_id.into(), &name)).map(|d| d.kind)\n+        {\n             let mut _b: bool = true;\n             res.extend(hover_text_from_name_kind(db, name_kind, &mut _b));\n         }"}, {"sha": "cb343e59a093215b84d741a63171ea7ceac968dd", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a22cb1daa76ddc7c5078a7a80b11909dd480f9f2/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a22cb1daa76ddc7c5078a7a80b11909dd480f9f2/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=a22cb1daa76ddc7c5078a7a80b11909dd480f9f2", "patch": "@@ -110,7 +110,7 @@ fn find_name<'a>(\n     position: FilePosition,\n ) -> Option<RangeInfo<(String, NameDefinition)>> {\n     if let Some(name) = find_node_at_offset::<ast::Name>(&syntax, position.offset) {\n-        let def = classify_name(db, position.file_id, &name)?;\n+        let def = classify_name(db, Source::new(position.file_id.into(), &name))?;\n         let range = name.syntax().text_range();\n         return Some(RangeInfo::new(range, (name.text().to_string(), def)));\n     }"}, {"sha": "ea9d20e715acca43446aa109d242d7172a6a9c57", "filename": "crates/ra_ide_api/src/references/classify.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a22cb1daa76ddc7c5078a7a80b11909dd480f9f2/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a22cb1daa76ddc7c5078a7a80b11909dd480f9f2/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs?ref=a22cb1daa76ddc7c5078a7a80b11909dd480f9f2", "patch": "@@ -1,7 +1,6 @@\n //! Functions that are used to classify an element from its definition or reference.\n \n use hir::{FromSource, Module, ModuleSource, Path, PathResolution, Source, SourceAnalyzer};\n-use ra_db::FileId;\n use ra_prof::profile;\n use ra_syntax::{ast, match_ast, AstNode};\n use test_utils::tested_by;\n@@ -12,19 +11,14 @@ use super::{\n };\n use crate::db::RootDatabase;\n \n-pub(crate) fn classify_name(\n-    db: &RootDatabase,\n-    file_id: FileId,\n-    name: &ast::Name,\n-) -> Option<NameDefinition> {\n+pub(crate) fn classify_name(db: &RootDatabase, name: Source<&ast::Name>) -> Option<NameDefinition> {\n     let _p = profile(\"classify_name\");\n-    let parent = name.syntax().parent()?;\n-    let file_id = file_id.into();\n+    let parent = name.ast.syntax().parent()?;\n \n     match_ast! {\n         match parent {\n             ast::BindPat(it) => {\n-                let src = hir::Source { file_id, ast: it };\n+                let src = name.with_ast(it);\n                 let local = hir::Local::from_source(db, src)?;\n                 Some(NameDefinition {\n                     visibility: None,\n@@ -34,50 +28,50 @@ pub(crate) fn classify_name(\n             },\n             ast::RecordFieldDef(it) => {\n                 let ast = hir::FieldSource::Named(it);\n-                let src = hir::Source { file_id, ast };\n+                let src = name.with_ast(ast);\n                 let field = hir::StructField::from_source(db, src)?;\n                 Some(from_struct_field(db, field))\n             },\n             ast::Module(it) => {\n                 let def = {\n                     if !it.has_semi() {\n                         let ast = hir::ModuleSource::Module(it);\n-                        let src = hir::Source { file_id, ast };\n+                        let src = name.with_ast(ast);\n                         hir::Module::from_definition(db, src)\n                     } else {\n-                        let src = hir::Source { file_id, ast: it };\n+                        let src = name.with_ast(it);\n                         hir::Module::from_declaration(db, src)\n                     }\n                 }?;\n                 Some(from_module_def(db, def.into(), None))\n             },\n             ast::StructDef(it) => {\n-                let src = hir::Source { file_id, ast: it };\n+                let src = name.with_ast(it);\n                 let def = hir::Struct::from_source(db, src)?;\n                 Some(from_module_def(db, def.into(), None))\n             },\n             ast::EnumDef(it) => {\n-                let src = hir::Source { file_id, ast: it };\n+                let src = name.with_ast(it);\n                 let def = hir::Enum::from_source(db, src)?;\n                 Some(from_module_def(db, def.into(), None))\n             },\n             ast::TraitDef(it) => {\n-                let src = hir::Source { file_id, ast: it };\n+                let src = name.with_ast(it);\n                 let def = hir::Trait::from_source(db, src)?;\n                 Some(from_module_def(db, def.into(), None))\n             },\n             ast::StaticDef(it) => {\n-                let src = hir::Source { file_id, ast: it };\n+                let src = name.with_ast(it);\n                 let def = hir::Static::from_source(db, src)?;\n                 Some(from_module_def(db, def.into(), None))\n             },\n             ast::EnumVariant(it) => {\n-                let src = hir::Source { file_id, ast: it };\n+                let src = name.with_ast(it);\n                 let def = hir::EnumVariant::from_source(db, src)?;\n                 Some(from_module_def(db, def.into(), None))\n             },\n             ast::FnDef(it) => {\n-                let src = hir::Source { file_id, ast: it };\n+                let src = name.with_ast(it);\n                 let def = hir::Function::from_source(db, src)?;\n                 if parent.parent().and_then(ast::ItemList::cast).is_some() {\n                     Some(from_assoc_item(db, def.into()))\n@@ -86,7 +80,7 @@ pub(crate) fn classify_name(\n                 }\n             },\n             ast::ConstDef(it) => {\n-                let src = hir::Source { file_id, ast: it };\n+                let src = name.with_ast(it);\n                 let def = hir::Const::from_source(db, src)?;\n                 if parent.parent().and_then(ast::ItemList::cast).is_some() {\n                     Some(from_assoc_item(db, def.into()))\n@@ -95,7 +89,7 @@ pub(crate) fn classify_name(\n                 }\n             },\n             ast::TypeAliasDef(it) => {\n-                let src = hir::Source { file_id, ast: it };\n+                let src = name.with_ast(it);\n                 let def = hir::TypeAlias::from_source(db, src)?;\n                 if parent.parent().and_then(ast::ItemList::cast).is_some() {\n                     Some(from_assoc_item(db, def.into()))\n@@ -104,11 +98,11 @@ pub(crate) fn classify_name(\n                 }\n             },\n             ast::MacroCall(it) => {\n-                let src = hir::Source { file_id, ast: it};\n+                let src = name.with_ast(it);\n                 let def = hir::MacroDef::from_source(db, src.clone())?;\n \n                 let module_src = ModuleSource::from_child_node(db, src.as_ref().map(|it| it.syntax()));\n-                let module = Module::from_definition(db, Source::new(file_id, module_src))?;\n+                let module = Module::from_definition(db, src.with_ast(module_src))?;\n \n                 Some(NameDefinition {\n                     visibility: None,"}, {"sha": "2b653fe8fa2bfdf8f69c63117c3fd2faad3b8a26", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a22cb1daa76ddc7c5078a7a80b11909dd480f9f2/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a22cb1daa76ddc7c5078a7a80b11909dd480f9f2/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=a22cb1daa76ddc7c5078a7a80b11909dd480f9f2", "patch": "@@ -94,7 +94,8 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n             }\n             NAME => {\n                 let name = node.as_node().cloned().and_then(ast::Name::cast).unwrap();\n-                let name_kind = classify_name(db, file_id, &name).map(|d| d.kind);\n+                let name_kind =\n+                    classify_name(db, Source::new(file_id.into(), &name)).map(|d| d.kind);\n \n                 if let Some(Local(local)) = &name_kind {\n                     if let Some(name) = local.name(db) {"}]}