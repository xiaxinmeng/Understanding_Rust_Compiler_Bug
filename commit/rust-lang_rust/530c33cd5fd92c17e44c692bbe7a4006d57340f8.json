{"sha": "530c33cd5fd92c17e44c692bbe7a4006d57340f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMGMzM2NkNWZkOTJjMTdlNDRjNjkyYmJlN2E0MDA2ZDU3MzQwZjg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-23T01:22:47Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-23T01:49:33Z"}, "message": "Fix elided lifetimes shown as `'_` on async functions", "tree": {"sha": "540e442bd1d91e86124ff4b731423928c6ea865e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/540e442bd1d91e86124ff4b731423928c6ea865e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/530c33cd5fd92c17e44c692bbe7a4006d57340f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/530c33cd5fd92c17e44c692bbe7a4006d57340f8", "html_url": "https://github.com/rust-lang/rust/commit/530c33cd5fd92c17e44c692bbe7a4006d57340f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/530c33cd5fd92c17e44c692bbe7a4006d57340f8/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a90975c0f78219db45d3bee0676a22695ec103", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a90975c0f78219db45d3bee0676a22695ec103", "html_url": "https://github.com/rust-lang/rust/commit/50a90975c0f78219db45d3bee0676a22695ec103"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "e7fdf76ba7975d44a1bbeb2d81c88cdda0a804e9", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/530c33cd5fd92c17e44c692bbe7a4006d57340f8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530c33cd5fd92c17e44c692bbe7a4006d57340f8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=530c33cd5fd92c17e44c692bbe7a4006d57340f8", "patch": "@@ -635,6 +635,18 @@ impl Clean<Generics> for hir::Generics<'_> {\n                 _ => false,\n             }\n         }\n+        /// This can happen for `async fn`, e.g. `async fn f<'_>(&'_ self)`.\n+        ///\n+        /// See [`lifetime_to_generic_param`] in [`rustc_ast_lowering`] for more information.\n+        ///\n+        /// [`lifetime_to_generic_param`]: rustc_ast_lowering::LoweringContext::lifetime_to_generic_param\n+        fn is_elided_lifetime(param: &hir::GenericParam<'_>) -> bool {\n+            match param.kind {\n+                hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Elided } => true,\n+                _ => false,\n+            }\n+        }\n+\n         let impl_trait_params = self\n             .params\n             .iter()\n@@ -653,7 +665,7 @@ impl Clean<Generics> for hir::Generics<'_> {\n             .collect::<Vec<_>>();\n \n         let mut params = Vec::with_capacity(self.params.len());\n-        for p in self.params.iter().filter(|p| !is_impl_trait(p)) {\n+        for p in self.params.iter().filter(|p| !is_impl_trait(p) && !is_elided_lifetime(p)) {\n             let p = p.clean(cx);\n             params.push(p);\n         }\n@@ -1433,7 +1445,16 @@ impl Clean<Type> for hir::Ty<'_> {\n             TyKind::Never => Never,\n             TyKind::Ptr(ref m) => RawPointer(m.mutbl, box m.ty.clean(cx)),\n             TyKind::Rptr(ref l, ref m) => {\n-                let lifetime = if l.is_elided() { None } else { Some(l.clean(cx)) };\n+                // There are two times a `Fresh` lifetime can be created:\n+                // 1. For `&'_ x`, written by the user. This corresponds to `lower_lifetime` in `rustc_ast_lowering`.\n+                // 2. For `&x` as a parameter to an `async fn`. This corresponds to `elided_ref_lifetime in `rustc_ast_lowering`.\n+                //    See commit 749349fc9f7b12f212bca9ba2297e463328cb701 for more information.\n+                // Ideally we would only hide the `'_` for case 2., but I don't know a way to distinguish it.\n+                // Turning `fn f(&'_ self)` into `fn f(&self)` isn't the worst thing in the world, though;\n+                // there's no case where it could cause the function to fail to compile.\n+                let elided =\n+                    l.is_elided() || matches!(l.name, LifetimeName::Param(ParamName::Fresh(_)));\n+                let lifetime = if elided { None } else { Some(l.clean(cx)) };\n                 BorrowedRef { lifetime, mutability: m.mutbl, type_: box m.ty.clean(cx) }\n             }\n             TyKind::Slice(ref ty) => Slice(box ty.clean(cx)),"}, {"sha": "7a673b9f670660055a4e89ab04f7b3884d83e02d", "filename": "src/test/rustdoc/async-fn.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/530c33cd5fd92c17e44c692bbe7a4006d57340f8/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530c33cd5fd92c17e44c692bbe7a4006d57340f8/src%2Ftest%2Frustdoc%2Fasync-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fasync-fn.rs?ref=530c33cd5fd92c17e44c692bbe7a4006d57340f8", "patch": "@@ -1,3 +1,4 @@\n+// ignore-tidy-linelength\n // edition:2018\n #![feature(min_const_generics)]\n \n@@ -52,3 +53,31 @@ pub trait Trait<const N: usize> {}\n // @has async_fn/fn.const_generics.html\n // @has - '//pre[@class=\"rust fn\"]' 'pub async fn const_generics<const N: usize>(_: impl Trait<N>)'\n pub async fn const_generics<const N: usize>(_: impl Trait<N>) {}\n+\n+// test that elided lifetimes are properly elided and not displayed as `'_`\n+// regression test for #63037\n+// @has async_fn/fn.elided.html\n+// @has - '//pre[@class=\"rust fn\"]' 'pub async fn elided(foo: &str) -> &str'\n+pub async fn elided(foo: &str) -> &str {}\n+// This should really be shown as written, but for implementation reasons it's difficult.\n+// See `impl Clean for TyKind::Rptr`.\n+// @has async_fn/fn.user_elided.html\n+// @has - '//pre[@class=\"rust fn\"]' 'pub async fn user_elided(foo: &str) -> &str'\n+pub async fn user_elided(foo: &'_ str) -> &str {}\n+// @has async_fn/fn.static_trait.html\n+// @has - '//pre[@class=\"rust fn\"]' 'pub async fn static_trait(foo: &str) -> Box<dyn Bar>'\n+pub async fn static_trait(foo: &str) -> Box<dyn Bar> {}\n+// @has async_fn/fn.lifetime_for_trait.html\n+// @has - '//pre[@class=\"rust fn\"]' \"pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_>\"\n+pub async fn lifetime_for_trait(foo: &str) -> Box<dyn Bar + '_> {}\n+\n+struct AsyncFdReadyGuard<'a, T> { x: &'a T }\n+\n+impl Foo {\n+    // @has async_fn/struct.Foo.html\n+    // @has - '//h4[@class=\"method\"]' 'pub async fn complicated_lifetimes( &self, context: &impl Bar) -> impl Iterator<Item = &usize>'\n+    pub async fn complicated_lifetimes(&self, context: &impl Bar) -> impl Iterator<Item = &usize> {}\n+    // taken from `tokio` as an example of a method that was particularly bad before\n+    // @has - '//h4[@class=\"method\"]' \"pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()>\"\n+    pub async fn readable<T>(&self) -> Result<AsyncFdReadyGuard<'_, T>, ()> {}\n+}"}]}