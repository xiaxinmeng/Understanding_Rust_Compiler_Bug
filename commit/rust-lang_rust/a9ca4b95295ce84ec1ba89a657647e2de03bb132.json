{"sha": "a9ca4b95295ce84ec1ba89a657647e2de03bb132", "node_id": "C_kwDOAAsO6NoAKGE5Y2E0Yjk1Mjk1Y2U4NGVjMWJhODlhNjU3NjQ3ZTJkZTAzYmIxMzI", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-05-29T03:05:43Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-06-07T15:18:23Z"}, "message": "Add checksum verification for rustfmt downloads", "tree": {"sha": "ae1d6a1d0a2baacb8e2642858db18a392df12b65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae1d6a1d0a2baacb8e2642858db18a392df12b65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9ca4b95295ce84ec1ba89a657647e2de03bb132", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ca4b95295ce84ec1ba89a657647e2de03bb132", "html_url": "https://github.com/rust-lang/rust/commit/a9ca4b95295ce84ec1ba89a657647e2de03bb132", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9ca4b95295ce84ec1ba89a657647e2de03bb132/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81f511cc2b70a539357f39ba0dfd223224fe5d88", "url": "https://api.github.com/repos/rust-lang/rust/commits/81f511cc2b70a539357f39ba0dfd223224fe5d88", "html_url": "https://github.com/rust-lang/rust/commit/81f511cc2b70a539357f39ba0dfd223224fe5d88"}], "stats": {"total": 93, "additions": 83, "deletions": 10}, "files": [{"sha": "b6077574ee6002bbb3ba4300ff1005e75ab6143b", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ca4b95295ce84ec1ba89a657647e2de03bb132/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a9ca4b95295ce84ec1ba89a657647e2de03bb132/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a9ca4b95295ce84ec1ba89a657647e2de03bb132", "patch": "@@ -216,13 +216,15 @@ dependencies = [\n  \"cmake\",\n  \"filetime\",\n  \"getopts\",\n+ \"hex 0.4.2\",\n  \"ignore\",\n  \"libc\",\n  \"once_cell\",\n  \"opener\",\n  \"pretty_assertions 0.7.2\",\n  \"serde\",\n  \"serde_json\",\n+ \"sha2\",\n  \"sysinfo\",\n  \"tar\",\n  \"toml\","}, {"sha": "0e54837610a4b363d6f7452998801e8cc19b3fcd", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9ca4b95295ce84ec1ba89a657647e2de03bb132/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a9ca4b95295ce84ec1ba89a657647e2de03bb132/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=a9ca4b95295ce84ec1ba89a657647e2de03bb132", "patch": "@@ -40,8 +40,10 @@ filetime = \"0.2\"\n getopts = \"0.2.19\"\n cc = \"1.0.69\"\n libc = \"0.2\"\n+hex = \"0.4\"\n serde = { version = \"1.0.8\", features = [\"derive\"] }\n serde_json = \"1.0.2\"\n+sha2 = \"0.10\"\n tar = \"0.4\"\n toml = \"0.5\"\n ignore = \"0.4.10\""}, {"sha": "38d4f15d3c8589393a68f25ab0ef78bc8cc56028", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a9ca4b95295ce84ec1ba89a657647e2de03bb132/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ca4b95295ce84ec1ba89a657647e2de03bb132/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=a9ca4b95295ce84ec1ba89a657647e2de03bb132", "patch": "@@ -879,7 +879,6 @@ impl<'a> Builder<'a> {\n     ) {\n         // Use a temporary file in case we crash while downloading, to avoid a corrupt download in cache/.\n         let tempfile = self.tempdir().join(dest_path.file_name().unwrap());\n-        // FIXME: support `do_verify` (only really needed for nightly rustfmt)\n         self.download_with_retries(&tempfile, &format!(\"{}/{}\", base, url), help_on_error);\n         t!(std::fs::rename(&tempfile, dest_path));\n     }\n@@ -971,6 +970,28 @@ impl<'a> Builder<'a> {\n         t!(fs::remove_dir_all(dst.join(directory_prefix)));\n     }\n \n+    /// Returns whether the SHA256 checksum of `path` matches `expected`.\n+    pub(crate) fn verify(&self, path: &Path, expected: &str) -> bool {\n+        use sha2::Digest;\n+\n+        self.verbose(&format!(\"verifying {}\", path.display()));\n+        let mut hasher = sha2::Sha256::new();\n+        // FIXME: this is ok for rustfmt (4.1 MB large at time of writing), but it seems memory-intensive for rustc and larger components.\n+        // Consider using streaming IO instead?\n+        let contents = if self.config.dry_run { vec![] } else { t!(fs::read(path)) };\n+        hasher.update(&contents);\n+        let found = hex::encode(hasher.finalize().as_slice());\n+        let verified = found == expected;\n+        if !verified && !self.config.dry_run {\n+            println!(\n+                \"invalid checksum: \\n\\\n+                found:    {found}\\n\\\n+                expected: {expected}\",\n+            );\n+        }\n+        return verified;\n+    }\n+\n     /// Obtain a compiler at a given stage and for a given host. Explicitly does\n     /// not take `Compiler` since all `Compiler` instances are meant to be\n     /// obtained through this function, since it ensures that they are valid"}, {"sha": "70bd7473c872dd3718bae44a46657dcad53ae043", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a9ca4b95295ce84ec1ba89a657647e2de03bb132/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9ca4b95295ce84ec1ba89a657647e2de03bb132/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=a9ca4b95295ce84ec1ba89a657647e2de03bb132", "patch": "@@ -1486,6 +1486,7 @@ fn maybe_download_rustfmt(builder: &Builder<'_>) -> Option<PathBuf> {\n     #[derive(Deserialize)]\n     struct Stage0Metadata {\n         dist_server: String,\n+        checksums_sha256: HashMap<String, String>,\n         rustfmt: Option<RustfmtMetadata>,\n     }\n     #[derive(Deserialize)]\n@@ -1495,10 +1496,11 @@ fn maybe_download_rustfmt(builder: &Builder<'_>) -> Option<PathBuf> {\n     }\n \n     let stage0_json = builder.read(&builder.src.join(\"src\").join(\"stage0.json\"));\n-    let metadata = t!(serde_json::from_str::<Stage0Metadata>(&stage0_json));\n-    let RustfmtMetadata { date, version } = metadata.rustfmt?;\n+    let Stage0Metadata { dist_server, checksums_sha256, rustfmt } =\n+        t!(serde_json::from_str::<Stage0Metadata>(&stage0_json));\n+    let RustfmtMetadata { date, version } = rustfmt?;\n     let channel = format!(\"{version}-{date}\");\n-    let mut dist_server = env::var(\"RUSTUP_DIST_SERVER\").unwrap_or(metadata.dist_server);\n+    let mut dist_server = env::var(\"RUSTUP_DIST_SERVER\").unwrap_or(dist_server);\n     dist_server.push_str(\"/dist\");\n \n     let host = builder.config.build;\n@@ -1510,8 +1512,15 @@ fn maybe_download_rustfmt(builder: &Builder<'_>) -> Option<PathBuf> {\n     }\n \n     let filename = format!(\"rustfmt-{version}-{build}.tar.xz\", build = host.triple);\n-    download_component(builder, &dist_server, filename, \"rustfmt-preview\", &date, \"stage0\");\n-    assert!(rustfmt_path.exists());\n+    download_component(\n+        builder,\n+        &dist_server,\n+        filename,\n+        \"rustfmt-preview\",\n+        &date,\n+        \"stage0\",\n+        Some(checksums_sha256),\n+    );\n \n     builder.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"rustfmt\"));\n     builder.fix_bin_or_dylib(&bin_root.join(\"bin\").join(\"cargo-fmt\"));\n@@ -1564,6 +1573,7 @@ fn download_ci_component(builder: &Builder<'_>, filename: String, prefix: &str,\n         prefix,\n         commit,\n         \"ci-rustc\",\n+        None,\n     )\n }\n \n@@ -1574,17 +1584,55 @@ fn download_component(\n     prefix: &str,\n     key: &str,\n     destination: &str,\n+    checksums: Option<HashMap<String, String>>,\n ) {\n     let cache_dst = builder.out.join(\"cache\");\n     let cache_dir = cache_dst.join(key);\n     if !cache_dir.exists() {\n         t!(fs::create_dir_all(&cache_dir));\n     }\n \n+    let bin_root = builder.out.join(builder.config.build.triple).join(destination);\n     let tarball = cache_dir.join(&filename);\n-    if !tarball.exists() {\n-        builder.download_component(base_url, &format!(\"{key}/{filename}\"), &tarball, \"\");\n+    let url = format!(\"{key}/{filename}\");\n+\n+    // For the beta compiler, put special effort into ensuring the checksums are valid.\n+    // FIXME: maybe we should do this for download-rustc as well? but it would be a pain to update\n+    // this on each and every nightly ...\n+    let checksum = if let Some(checksums) = &checksums {\n+        let error = format!(\n+            \"src/stage0.json doesn't contain a checksum for {url}. \\\n+            Pre-built artifacts might not be available for this \\\n+            target at this time, see https://doc.rust-lang.org/nightly\\\n+            /rustc/platform-support.html for more information.\"\n+        );\n+        // TODO: add an enum { Commit, Published } so we don't have to hardcode `dist` in two places\n+        let sha256 = checksums.get(&format!(\"dist/{url}\")).expect(&error);\n+        if tarball.exists() {\n+            if builder.verify(&tarball, sha256) {\n+                builder.unpack(&tarball, &bin_root, prefix);\n+                return;\n+            } else {\n+                builder.verbose(&format!(\n+                    \"ignoring cached file {} due to failed verification\",\n+                    tarball.display()\n+                ));\n+                builder.remove(&tarball);\n+            }\n+        }\n+        Some(sha256)\n+    } else if tarball.exists() {\n+        return;\n+    } else {\n+        None\n+    };\n+\n+    builder.download_component(base_url, &url, &tarball, \"\");\n+    if let Some(sha256) = checksum {\n+        if !builder.verify(&tarball, sha256) {\n+            panic!(\"failed to verify {}\", tarball.display());\n+        }\n     }\n-    let bin_root = builder.out.join(builder.config.build.triple).join(destination);\n-    builder.unpack(&tarball, &bin_root, prefix)\n+\n+    builder.unpack(&tarball, &bin_root, prefix);\n }"}]}