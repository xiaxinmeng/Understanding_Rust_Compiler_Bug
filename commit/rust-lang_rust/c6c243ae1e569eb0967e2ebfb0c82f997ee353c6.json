{"sha": "c6c243ae1e569eb0967e2ebfb0c82f997ee353c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YzI0M2FlMWU1NjllYjA5NjdlMmViZmIwYzgyZjk5N2VlMzUzYzY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-03-04T02:28:53Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-03-04T02:28:53Z"}, "message": "Move check only relevant in error case out of critical path\n\nMove the check for potentially forgotten `return` in a tail expression\nof arbitrary expressions into the coercion error branch to avoid\ncomputing unncessary coercion checks on successful code.\n\nFollow up to #81458.", "tree": {"sha": "15c23c884e696b4257f356c6f6ec3072c746f582", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15c23c884e696b4257f356c6f6ec3072c746f582"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6c243ae1e569eb0967e2ebfb0c82f997ee353c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6c243ae1e569eb0967e2ebfb0c82f997ee353c6", "html_url": "https://github.com/rust-lang/rust/commit/c6c243ae1e569eb0967e2ebfb0c82f997ee353c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6c243ae1e569eb0967e2ebfb0c82f997ee353c6/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c77a1fa3ca574f2a40056f64d498db8efe0d8a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c77a1fa3ca574f2a40056f64d498db8efe0d8a8", "html_url": "https://github.com/rust-lang/rust/commit/1c77a1fa3ca574f2a40056f64d498db8efe0d8a8"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "d056f2c90f988270b4d0a4556d76ebb62a87de85", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c6c243ae1e569eb0967e2ebfb0c82f997ee353c6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6c243ae1e569eb0967e2ebfb0c82f997ee353c6/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=c6c243ae1e569eb0967e2ebfb0c82f997ee353c6", "patch": "@@ -207,17 +207,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ),\n                 };\n                 let cause = self.cause(span, code);\n-                let can_coerce_to_return_ty = match self.ret_coercion.as_ref() {\n-                    Some(ret_coercion) if self.in_tail_expr => {\n-                        let ret_ty = ret_coercion.borrow().expected_ty();\n-                        let ret_ty = self.inh.infcx.shallow_resolve(ret_ty);\n-                        self.can_coerce(arm_ty, ret_ty)\n-                            && prior_arm_ty.map_or(true, |t| self.can_coerce(t, ret_ty))\n-                            // The match arms need to unify for the case of `impl Trait`.\n-                            && !matches!(ret_ty.kind(), ty::Opaque(..))\n-                    }\n-                    _ => false,\n-                };\n \n                 // This is the moral equivalent of `coercion.coerce(self, cause, arm.body, arm_ty)`.\n                 // We use it this way to be able to expand on the potential error and detect when a\n@@ -229,6 +218,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     Some(&arm.body),\n                     arm_ty,\n                     Some(&mut |err: &mut DiagnosticBuilder<'_>| {\n+                        let can_coerce_to_return_ty = match self.ret_coercion.as_ref() {\n+                            Some(ret_coercion) if self.in_tail_expr => {\n+                                let ret_ty = ret_coercion.borrow().expected_ty();\n+                                let ret_ty = self.inh.infcx.shallow_resolve(ret_ty);\n+                                self.can_coerce(arm_ty, ret_ty)\n+                                    && prior_arm_ty.map_or(true, |t| self.can_coerce(t, ret_ty))\n+                                    // The match arms need to unify for the case of `impl Trait`.\n+                                    && !matches!(ret_ty.kind(), ty::Opaque(..))\n+                            }\n+                            _ => false,\n+                        };\n                         if let (Expectation::IsLast(stmt), Some(ret), true) =\n                             (orig_expected, self.ret_type_span, can_coerce_to_return_ty)\n                         {"}]}