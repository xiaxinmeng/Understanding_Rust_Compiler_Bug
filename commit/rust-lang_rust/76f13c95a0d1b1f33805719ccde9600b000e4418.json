{"sha": "76f13c95a0d1b1f33805719ccde9600b000e4418", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZjEzYzk1YTBkMWIxZjMzODA1NzE5Y2NkZTk2MDBiMDAwZTQ0MTg=", "commit": {"author": {"name": "Haitao Li", "email": "lihaitao@gmail.com", "date": "2011-12-12T13:40:03Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-13T00:15:29Z"}, "message": "rustc: Work around a segmentation fault\n\nOn Linux/Mac, I got a segmentation fault:\n\n  (gdb) bt\n  #0  0x00000000007519af in glue_take584 ()\n  #1  0x00000000006d4bec in\n    back::rpath::get_rpath_flags::_3899df2ca513c603 ()\n  #2  0x00000000006c7655 in back::link::link_binary::_7afde00a9791031c ()\n  #3  0x00000000007d3ff5 in driver::rustc::compile_input::thunk9212 ()\n  #4  0x0000000000710f24 in driver::rustc::time::_3e691b2a4ba58aee ()\n  #5  0x000000000071a79d in\n    driver::rustc::compile_input::_7b4a41b87c18e034 ()\n  #6  0x000000000072f0a9 in driver::rustc::main::_cd8b8c8185af3dee ()\n  #7  0x000000000072f1ed in _rust_main ()\n  #8  0x00007ffff7e6e146 in task_start_wrapper (a=<optimized out>) at\n    ../src/rt/rust_task.cpp:176\n\nThe variable `output` or `out_filename` becomes (null) after the definition\nof `fn unlib`. Move the function defintion to the beginning seems\nprevent the crash on Linux.", "tree": {"sha": "f113a9eed0247722caebf68001a932327a7a4574", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f113a9eed0247722caebf68001a932327a7a4574"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76f13c95a0d1b1f33805719ccde9600b000e4418", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76f13c95a0d1b1f33805719ccde9600b000e4418", "html_url": "https://github.com/rust-lang/rust/commit/76f13c95a0d1b1f33805719ccde9600b000e4418", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76f13c95a0d1b1f33805719ccde9600b000e4418/comments", "author": {"login": "lht", "id": 19508, "node_id": "MDQ6VXNlcjE5NTA4", "avatar_url": "https://avatars.githubusercontent.com/u/19508?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lht", "html_url": "https://github.com/lht", "followers_url": "https://api.github.com/users/lht/followers", "following_url": "https://api.github.com/users/lht/following{/other_user}", "gists_url": "https://api.github.com/users/lht/gists{/gist_id}", "starred_url": "https://api.github.com/users/lht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lht/subscriptions", "organizations_url": "https://api.github.com/users/lht/orgs", "repos_url": "https://api.github.com/users/lht/repos", "events_url": "https://api.github.com/users/lht/events{/privacy}", "received_events_url": "https://api.github.com/users/lht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c6f83f69312c681731f5fd28137de450b4d2881", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c6f83f69312c681731f5fd28137de450b4d2881", "html_url": "https://github.com/rust-lang/rust/commit/6c6f83f69312c681731f5fd28137de450b4d2881"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "d6cbd2aa9faea49fbba6e87e90c24b0e02e79979", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/76f13c95a0d1b1f33805719ccde9600b000e4418/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76f13c95a0d1b1f33805719ccde9600b000e4418/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=76f13c95a0d1b1f33805719ccde9600b000e4418", "patch": "@@ -561,6 +561,29 @@ fn link_binary(sess: session::session,\n                obj_filename: str,\n                out_filename: str,\n                lm: link_meta) {\n+    // Converts a library file name into a gcc -l argument\n+    fn unlib(config: @session::config, filename: str) -> str {\n+        let rmlib =\n+            bind fn (config: @session::config, filename: str) -> str {\n+                     if config.os == session::os_macos ||\n+                            config.os == session::os_linux &&\n+                                str::find(filename, \"lib\") == 0 {\n+                         ret str::slice(filename, 3u,\n+                                        str::byte_len(filename));\n+                     } else { ret filename; }\n+                 }(config, _);\n+        fn rmext(filename: str) -> str {\n+            let parts = str::split(filename, '.' as u8);\n+            vec::pop(parts);\n+            ret str::connect(parts, \".\");\n+        }\n+        ret alt config.os {\n+              session::os_macos. { rmext(rmlib(filename)) }\n+              session::os_linux. { rmext(rmlib(filename)) }\n+              _ { rmext(filename) }\n+            };\n+    }\n+\n     let output = if sess.building_library() {\n         let long_libname =\n             std::os::dylib_filename(#fmt(\"%s-%s-%s\",\n@@ -585,29 +608,6 @@ fn link_binary(sess: session::session,\n         lib_cmd = \"-dynamiclib\";\n     } else { lib_cmd = \"-shared\"; }\n \n-    // Converts a library file name into a gcc -l argument\n-    fn unlib(config: @session::config, filename: str) -> str {\n-        let rmlib =\n-            bind fn (config: @session::config, filename: str) -> str {\n-                     if config.os == session::os_macos ||\n-                            config.os == session::os_linux &&\n-                                str::find(filename, \"lib\") == 0 {\n-                         ret str::slice(filename, 3u,\n-                                        str::byte_len(filename));\n-                     } else { ret filename; }\n-                 }(config, _);\n-        fn rmext(filename: str) -> str {\n-            let parts = str::split(filename, '.' as u8);\n-            vec::pop(parts);\n-            ret str::connect(parts, \".\");\n-        }\n-        ret alt config.os {\n-              session::os_macos. { rmext(rmlib(filename)) }\n-              session::os_linux. { rmext(rmlib(filename)) }\n-              _ { rmext(filename) }\n-            };\n-    }\n-\n     let cstore = sess.get_cstore();\n     for cratepath: str in cstore::get_used_crate_files(cstore) {\n         if str::ends_with(cratepath, \".rlib\") {\n@@ -655,7 +655,7 @@ fn link_binary(sess: session::session,\n         gcc_args += [\"-lmorestack\"];\n     }\n \n-    gcc_args += rpath::get_rpath_flags(sess, out_filename);\n+    gcc_args += rpath::get_rpath_flags(sess, output);\n \n     log #fmt(\"gcc link args: %s\", str::connect(gcc_args, \" \"));\n     // We run 'gcc' here"}]}