{"sha": "ca1885de4178abe554f89a1d4556c2a4e742b03a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMTg4NWRlNDE3OGFiZTU1NGY4OWExZDQ1NTZjMmE0ZTc0MmIwM2E=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-08T23:13:05Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-15T20:55:43Z"}, "message": "Update some tests involving `Self`", "tree": {"sha": "74fd9e5bb5d2b33f05346840c1720b4e5d09c5fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74fd9e5bb5d2b33f05346840c1720b4e5d09c5fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca1885de4178abe554f89a1d4556c2a4e742b03a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca1885de4178abe554f89a1d4556c2a4e742b03a", "html_url": "https://github.com/rust-lang/rust/commit/ca1885de4178abe554f89a1d4556c2a4e742b03a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca1885de4178abe554f89a1d4556c2a4e742b03a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99ab45b91de9fc6c07903dbe3075757f0e5e9071", "url": "https://api.github.com/repos/rust-lang/rust/commits/99ab45b91de9fc6c07903dbe3075757f0e5e9071", "html_url": "https://github.com/rust-lang/rust/commit/99ab45b91de9fc6c07903dbe3075757f0e5e9071"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "b27d58018c296f78333ca6fb2c2d83006496cbc4", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ca1885de4178abe554f89a1d4556c2a4e742b03a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ca1885de4178abe554f89a1d4556c2a4e742b03a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.fixed?ref=ca1885de4178abe554f89a1d4556c2a4e742b03a", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+\n+trait Get {\n+    type Value;\n+    fn get(&self) -> <Self as Get>::Value;\n+}\n+\n+trait Other {\n+    fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value)  where Self: Get{}\n+    //~^ ERROR the trait bound `Self: Get` is not satisfied\n+}\n+\n+fn main() {\n+}"}, {"sha": "0f6cea8e69fcf29ef4e43816581e868427216875", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca1885de4178abe554f89a1d4556c2a4e742b03a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1885de4178abe554f89a1d4556c2a4e742b03a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.rs?ref=ca1885de4178abe554f89a1d4556c2a4e742b03a", "patch": "@@ -1,3 +1,6 @@\n+// run-rustfix\n+#![allow(unused_variables)]\n+\n trait Get {\n     type Value;\n     fn get(&self) -> <Self as Get>::Value;"}, {"sha": "f8fc2b37e730ff4f8aceaff461bd671852d16501", "filename": "src/test/ui/associated-types/associated-types-for-unimpl-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca1885de4178abe554f89a1d4556c2a4e742b03a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca1885de4178abe554f89a1d4556c2a4e742b03a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-for-unimpl-trait.stderr?ref=ca1885de4178abe554f89a1d4556c2a4e742b03a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Self: Get` is not satisfied\n-  --> $DIR/associated-types-for-unimpl-trait.rs:7:5\n+  --> $DIR/associated-types-for-unimpl-trait.rs:10:5\n    |\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-^"}, {"sha": "9bc308465ebdd5291eec215eddfbeb38bdcbbffd", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.fixed", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ca1885de4178abe554f89a1d4556c2a4e742b03a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ca1885de4178abe554f89a1d4556c2a4e742b03a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.fixed?ref=ca1885de4178abe554f89a1d4556c2a4e742b03a", "patch": "@@ -0,0 +1,30 @@\n+// run-rustfix\n+// Check that we get an error when you use `<Self as Get>::Value` in\n+// the trait definition even if there is no default method.\n+\n+trait Get {\n+    type Value;\n+}\n+\n+trait Other {\n+    fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get;\n+    //~^ ERROR E0277\n+}\n+\n+impl Get for () {\n+    type Value = f32;\n+}\n+\n+impl Get for f64 {\n+    type Value = u32;\n+}\n+\n+impl Other for () {\n+    fn okay<U:Get>(&self, _foo: U, _bar: <Self as Get>::Value) { }\n+}\n+\n+impl Other for f64 {\n+    fn okay<U:Get>(&self, _foo: U, _bar: <Self as Get>::Value) { }\n+}\n+\n+fn main() { }"}, {"sha": "549fc8fc618e03d7b2155a2c294ac01f9ddd935b", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca1885de4178abe554f89a1d4556c2a4e742b03a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca1885de4178abe554f89a1d4556c2a4e742b03a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.rs?ref=ca1885de4178abe554f89a1d4556c2a4e742b03a", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n // Check that we get an error when you use `<Self as Get>::Value` in\n // the trait definition even if there is no default method.\n "}, {"sha": "cb01488fa34d46d417c1c6269199dbdea2ceaee6", "filename": "src/test/ui/associated-types/associated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca1885de4178abe554f89a1d4556c2a4e742b03a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ca1885de4178abe554f89a1d4556c2a4e742b03a/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-projection-to-unrelated-trait-in-method-without-default.stderr?ref=ca1885de4178abe554f89a1d4556c2a4e742b03a", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: the trait bound `Self: Get` is not satisfied\n-  --> $DIR/associated-types-projection-to-unrelated-trait-in-method-without-default.rs:9:5\n+  --> $DIR/associated-types-projection-to-unrelated-trait-in-method-without-default.rs:10:5\n    |\n LL |     fn okay<U:Get>(&self, foo: U, bar: <Self as Get>::Value);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-"}]}