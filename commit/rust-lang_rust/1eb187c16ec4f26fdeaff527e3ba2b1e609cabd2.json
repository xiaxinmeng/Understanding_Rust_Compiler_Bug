{"sha": "1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYjE4N2MxNmVjNGYyNmZkZWFmZjUyN2UzYmEyYjFlNjA5Y2FiZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-22T10:44:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-22T10:44:38Z"}, "message": "Auto merge of #88139 - lcnr:marker-trait-attr, r=nikomatsakis\n\nmarker_traits: require `EvaluatedToOk` during winnowing\n\ncloses #84955, while it doesn't really fix it in a way that makes me happy it should prevent the issue for now and this\ntest can't be reproduced anyways, so it doesn't make much sense to keep it open.\n\nfixes #84917 as only one of the impls depends on regions, so we now drop the ambiguous one instead of the correct one.\n\ncc https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/winnowing.20soundly/near/247899832\n\nr? `@nikomatsakis`", "tree": {"sha": "18f682ff9ed72b38d477b84cbbe7145a5a145ce5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18f682ff9ed72b38d477b84cbbe7145a5a145ce5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2", "html_url": "https://github.com/rust-lang/rust/commit/1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80dad6477520553899049c994a6f534dce5a4951", "url": "https://api.github.com/repos/rust-lang/rust/commits/80dad6477520553899049c994a6f534dce5a4951", "html_url": "https://github.com/rust-lang/rust/commit/80dad6477520553899049c994a6f534dce5a4951"}, {"sha": "3329f67f173028bc41165894611ef54cab2c1438", "url": "https://api.github.com/repos/rust-lang/rust/commits/3329f67f173028bc41165894611ef54cab2c1438", "html_url": "https://github.com/rust-lang/rust/commit/3329f67f173028bc41165894611ef54cab2c1438"}], "stats": {"total": 96, "additions": 93, "deletions": 3}, "files": [{"sha": "f95e7b8b6c3314ab41aec716656c51a06a169fd5", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2", "patch": "@@ -1586,12 +1586,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // See if we can toss out `victim` based on specialization.\n                 // This requires us to know *for sure* that the `other` impl applies\n                 // i.e., `EvaluatedToOk`.\n+                //\n+                // FIXME(@lcnr): Using `modulo_regions` here seems kind of scary\n+                // to me but is required for `std` to compile, so I didn't change it\n+                // for now.\n+                let tcx = self.tcx();\n                 if other.evaluation.must_apply_modulo_regions() {\n-                    let tcx = self.tcx();\n                     if tcx.specializes((other_def, victim_def)) {\n                         return true;\n                     }\n-                    return match tcx.impls_are_allowed_to_overlap(other_def, victim_def) {\n+                }\n+\n+                if other.evaluation.must_apply_considering_regions() {\n+                    match tcx.impls_are_allowed_to_overlap(other_def, victim_def) {\n                         Some(ty::ImplOverlapKind::Permitted { marker: true }) => {\n                             // Subtle: If the predicate we are evaluating has inference\n                             // variables, do *not* allow discarding candidates due to\n@@ -1636,7 +1643,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         }\n                         Some(_) => true,\n                         None => false,\n-                    };\n+                    }\n                 } else {\n                     false\n                 }"}, {"sha": "a8f3db5f5b25bb08a6288b2a32e6018f2823c7a8", "filename": "src/test/ui/marker_trait_attr/overlapping-impl-1-modulo-regions.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlapping-impl-1-modulo-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlapping-impl-1-modulo-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Foverlapping-impl-1-modulo-regions.rs?ref=1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+#![feature(marker_trait_attr)]\n+\n+#[marker]\n+pub trait F {}\n+impl<T> F for T where T: Copy {}\n+impl<T> F for T where T: 'static {}\n+\n+fn main() {}"}, {"sha": "b3c667103555a6e1382ee3976f5783f2aadb5b53", "filename": "src/test/ui/marker_trait_attr/region-overlap.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.rs?ref=1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2", "patch": "@@ -0,0 +1,8 @@\n+#![feature(marker_trait_attr)]\n+\n+#[marker]\n+trait A {}\n+impl<'a> A for (&'static (), &'a ()) {} //~ ERROR type annotations needed\n+impl<'a> A for (&'a (), &'static ()) {} //~ ERROR type annotations needed\n+\n+fn main() {}"}, {"sha": "e4a94d56f12b02bc1454d3d45123ba5021e4f74b", "filename": "src/test/ui/marker_trait_attr/region-overlap.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr?ref=1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2", "patch": "@@ -0,0 +1,29 @@\n+error[E0283]: type annotations needed\n+  --> $DIR/region-overlap.rs:5:10\n+   |\n+LL | impl<'a> A for (&'static (), &'a ()) {}\n+   |          ^ cannot infer type for tuple `(&'static (), &'a ())`\n+   |\n+   = note: cannot satisfy `(&'static (), &'a ()): A`\n+note: required by a bound in `A`\n+  --> $DIR/region-overlap.rs:4:1\n+   |\n+LL | trait A {}\n+   | ^^^^^^^ required by this bound in `A`\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/region-overlap.rs:6:10\n+   |\n+LL | impl<'a> A for (&'a (), &'static ()) {}\n+   |          ^ cannot infer type for tuple `(&'a (), &'static ())`\n+   |\n+   = note: cannot satisfy `(&'a (), &'static ()): A`\n+note: required by a bound in `A`\n+  --> $DIR/region-overlap.rs:4:1\n+   |\n+LL | trait A {}\n+   | ^^^^^^^ required by this bound in `A`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0283`."}, {"sha": "2e5101b822c0c04d48f593a7554d8b065e60c6b1", "filename": "src/test/ui/marker_trait_attr/unsound-overlap.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2/src%2Ftest%2Fui%2Fmarker_trait_attr%2Funsound-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2/src%2Ftest%2Fui%2Fmarker_trait_attr%2Funsound-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Funsound-overlap.rs?ref=1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2", "patch": "@@ -0,0 +1,25 @@\n+#![feature(marker_trait_attr)]\n+\n+#[marker]\n+trait A {}\n+\n+trait B {}\n+\n+impl<T: A> B for T {}\n+impl<T: B> A for T {}\n+impl A for &str {}\n+impl<T: A + B> A for (T,) {}\n+trait TraitWithAssoc {\n+    type Assoc;\n+}\n+\n+impl<T: A> TraitWithAssoc for T {\n+    type Assoc = T;\n+}\n+\n+impl TraitWithAssoc for ((&str,),) {\n+    //~^ ERROR conflicting implementations\n+    type Assoc = ((&'static str,),);\n+}\n+\n+fn main() {}"}, {"sha": "5ebac8270ddff8b50685f6d66e329f3e21b0efe3", "filename": "src/test/ui/marker_trait_attr/unsound-overlap.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2/src%2Ftest%2Fui%2Fmarker_trait_attr%2Funsound-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2/src%2Ftest%2Fui%2Fmarker_trait_attr%2Funsound-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Funsound-overlap.stderr?ref=1eb187c16ec4f26fdeaff527e3ba2b1e609cabd2", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `TraitWithAssoc` for type `((&str,),)`\n+  --> $DIR/unsound-overlap.rs:20:1\n+   |\n+LL | impl<T: A> TraitWithAssoc for T {\n+   | ------------------------------- first implementation here\n+...\n+LL | impl TraitWithAssoc for ((&str,),) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `((&str,),)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}]}