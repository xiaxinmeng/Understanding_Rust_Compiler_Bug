{"sha": "b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1", "node_id": "C_kwDOAAsO6NoAKGI1ZDk2ZDVlYzUzODhiODljNzAwYjRiOWU2ZjdmNzNhZmE5Y2JjYjE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-04T10:39:26Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-04-04T10:39:26Z"}, "message": "Move a const-prop-lint specific hack from mir interpret to const-prop-lint and make it fallible", "tree": {"sha": "4cc8c9c0da32c8d8930584f0e69a8994c52f6253", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cc8c9c0da32c8d8930584f0e69a8994c52f6253"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1", "html_url": "https://github.com/rust-lang/rust/commit/b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35d06f9c747bc791d7d6902248d851da98616a57", "url": "https://api.github.com/repos/rust-lang/rust/commits/35d06f9c747bc791d7d6902248d851da98616a57", "html_url": "https://github.com/rust-lang/rust/commit/35d06f9c747bc791d7d6902248d851da98616a57"}], "stats": {"total": 76, "additions": 64, "deletions": 12}, "files": [{"sha": "5310ef0bb3ed0e076b82331dc33a2be2f5d484c3", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1", "patch": "@@ -612,14 +612,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         span: Option<Span>,\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::Provenance>> {\n-        // FIXME(const_prop): normalization needed b/c const prop lint in\n-        // `mir_drops_elaborated_and_const_checked`, which happens before\n-        // optimized MIR. Only after optimizing the MIR can we guarantee\n-        // that the `RevealAll` pass has happened and that the body's consts\n-        // are normalized, so any call to resolve before that needs to be\n-        // manually normalized.\n-        let val = self.tcx.normalize_erasing_regions(self.param_env, *val);\n-        match val {\n+        match *val {\n             mir::ConstantKind::Ty(ct) => {\n                 let ty = ct.ty();\n                 let valtree = self.eval_ty_constant(ct, span)?;"}, {"sha": "7c59879a187feb960570509010630f3387ea61da", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1", "patch": "@@ -193,9 +193,9 @@ impl<'tcx> NormalizeAfterErasingRegionsFolder<'tcx> {\n         let arg = self.param_env.and(arg);\n \n         self.tcx.try_normalize_generic_arg_after_erasing_regions(arg).unwrap_or_else(|_| bug!(\n-                \"Failed to normalize {:?}, maybe try to call `try_normalize_erasing_regions` instead\",\n-                arg.value\n-            ))\n+            \"Failed to normalize {:?}, maybe try to call `try_normalize_erasing_regions` instead\",\n+            arg.value\n+        ))\n     }\n }\n "}, {"sha": "176027b3b93e4fe23608522b748d4a44ef848dff", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1", "patch": "@@ -284,7 +284,15 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        self.use_ecx(source_info, |this| this.ecx.eval_mir_constant(&c.literal, Some(c.span), None))\n+        // Normalization needed b/c const prop lint runs in\n+        // `mir_drops_elaborated_and_const_checked`, which happens before\n+        // optimized MIR. Only after optimizing the MIR can we guarantee\n+        // that the `RevealAll` pass has happened and that the body's consts\n+        // are normalized, so any call to resolve before that needs to be\n+        // manually normalized.\n+        let val = self.tcx.try_normalize_erasing_regions(self.param_env, c.literal).ok()?;\n+\n+        self.use_ecx(source_info, |this| this.ecx.eval_mir_constant(&val, Some(c.span), None))\n     }\n \n     /// Returns the value, if any, of evaluating `place`."}, {"sha": "73f3405e3ad764c825cd7fe8c811a7166eeea7ec", "filename": "tests/ui/mir/issue-109743.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1/tests%2Fui%2Fmir%2Fissue-109743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1/tests%2Fui%2Fmir%2Fissue-109743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fissue-109743.rs?ref=b5d96d5ec5388b89c700b4b9e6f7f73afa9cbcb1", "patch": "@@ -0,0 +1,51 @@\n+// build-pass\n+// compile-flags: --crate-type=lib\n+\n+use std::marker::PhantomData;\n+\n+pub trait StreamOnce {\n+    type Token;\n+}\n+\n+impl StreamOnce for &str {\n+    type Token = ();\n+}\n+\n+pub trait Parser<Input: StreamOnce> {\n+    type PartialState: Default;\n+    fn parse_mode(&self, _state: &Self::PartialState) {}\n+    fn parse_mode_impl() {}\n+}\n+\n+pub fn parse_bool<'a>() -> impl Parser<&'a str> {\n+    pub struct TokensCmp<C, Input>\n+    where\n+        Input: StreamOnce,\n+    {\n+        _cmp: C,\n+        _marker: PhantomData<Input>,\n+    }\n+\n+    impl<Input, C> Parser<Input> for TokensCmp<C, Input>\n+    where\n+        C: FnMut(Input::Token),\n+        Input: StreamOnce,\n+    {\n+        type PartialState = ();\n+    }\n+\n+    TokensCmp { _cmp: |_| (), _marker: PhantomData }\n+}\n+\n+pub struct ParseBool;\n+\n+impl<'a> Parser<&'a str> for ParseBool\n+where\n+    &'a str: StreamOnce,\n+{\n+    type PartialState = ();\n+\n+    fn parse_mode_impl() {\n+        parse_bool().parse_mode(&Default::default())\n+    }\n+}"}]}