{"sha": "fa03c9454640032bb1b6a33f996eee0f39e2b946", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMDNjOTQ1NDY0MDAzMmJiMWI2YTMzZjk5NmVlZTBmMzllMmI5NDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-16T21:11:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-16T21:11:58Z"}, "message": "auto merge of #9892 : Kimundi/rust/ResultToStr, r=alexcrichton", "tree": {"sha": "9bf8a5d7aeda294b926c4348b8c662360553b898", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bf8a5d7aeda294b926c4348b8c662360553b898"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa03c9454640032bb1b6a33f996eee0f39e2b946", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa03c9454640032bb1b6a33f996eee0f39e2b946", "html_url": "https://github.com/rust-lang/rust/commit/fa03c9454640032bb1b6a33f996eee0f39e2b946", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa03c9454640032bb1b6a33f996eee0f39e2b946/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40180cdbea708307ca66dc6debddbd5ecc1ea41c", "url": "https://api.github.com/repos/rust-lang/rust/commits/40180cdbea708307ca66dc6debddbd5ecc1ea41c", "html_url": "https://github.com/rust-lang/rust/commit/40180cdbea708307ca66dc6debddbd5ecc1ea41c"}, {"sha": "abecd61a230d7057aeb1dc6d82e3c8101c7d9337", "url": "https://api.github.com/repos/rust-lang/rust/commits/abecd61a230d7057aeb1dc6d82e3c8101c7d9337", "html_url": "https://github.com/rust-lang/rust/commit/abecd61a230d7057aeb1dc6d82e3c8101c7d9337"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "47e0c099c98518fb2311124e6a5cd7c6d70f5fb6", "filename": "src/libstd/result.rs", "status": "modified", "additions": 47, "deletions": 6, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/fa03c9454640032bb1b6a33f996eee0f39e2b946/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa03c9454640032bb1b6a33f996eee0f39e2b946/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=fa03c9454640032bb1b6a33f996eee0f39e2b946", "patch": "@@ -22,6 +22,7 @@ use vec;\n use vec::OwnedVector;\n use to_str::ToStr;\n use str::StrSlice;\n+use fmt;\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n ///\n@@ -290,7 +291,7 @@ pub trait AsResult<T, E> {\n \n impl<T: Clone, E> option::ToOption<T> for Result<T, E> {\n     #[inline]\n-    fn to_option(&self)-> Option<T> {\n+    fn to_option(&self) -> Option<T> {\n         match *self {\n             Ok(ref t) => Some(t.clone()),\n             Err(_) => None,\n@@ -300,7 +301,7 @@ impl<T: Clone, E> option::ToOption<T> for Result<T, E> {\n \n impl<T, E> option::IntoOption<T> for Result<T, E> {\n     #[inline]\n-    fn into_option(self)-> Option<T> {\n+    fn into_option(self) -> Option<T> {\n         match self {\n             Ok(t) => Some(t),\n             Err(_) => None,\n@@ -310,7 +311,7 @@ impl<T, E> option::IntoOption<T> for Result<T, E> {\n \n impl<T, E> option::AsOption<T> for Result<T, E> {\n     #[inline]\n-    fn as_option<'a>(&'a self)-> Option<&'a T> {\n+    fn as_option<'a>(&'a self) -> Option<&'a T> {\n         match *self {\n             Ok(ref t) => Some(t),\n             Err(_) => None,\n@@ -340,7 +341,7 @@ impl<T, E> AsResult<T, E> for Result<T, E> {\n \n impl<T: Clone, E: Clone> either::ToEither<E, T> for Result<T, E> {\n     #[inline]\n-    fn to_either(&self)-> either::Either<E, T> {\n+    fn to_either(&self) -> either::Either<E, T> {\n         match *self {\n             Ok(ref t) => either::Right(t.clone()),\n             Err(ref e) => either::Left(e.clone()),\n@@ -350,7 +351,7 @@ impl<T: Clone, E: Clone> either::ToEither<E, T> for Result<T, E> {\n \n impl<T, E> either::IntoEither<E, T> for Result<T, E> {\n     #[inline]\n-    fn into_either(self)-> either::Either<E, T> {\n+    fn into_either(self) -> either::Either<E, T> {\n         match self {\n             Ok(t) => either::Right(t),\n             Err(e) => either::Left(e),\n@@ -360,14 +361,34 @@ impl<T, E> either::IntoEither<E, T> for Result<T, E> {\n \n impl<T, E> either::AsEither<E, T> for Result<T, E> {\n     #[inline]\n-    fn as_either<'a>(&'a self)-> either::Either<&'a E, &'a T> {\n+    fn as_either<'a>(&'a self) -> either::Either<&'a E, &'a T> {\n         match *self {\n             Ok(ref t) => either::Right(t),\n             Err(ref e) => either::Left(e),\n         }\n     }\n }\n \n+impl<T: ToStr, E: ToStr> ToStr for Result<T, E> {\n+    #[inline]\n+    fn to_str(&self) -> ~str {\n+        match *self {\n+            Ok(ref t) => format!(\"Ok({:s})\", t.to_str()),\n+            Err(ref e) => format!(\"Err({:s})\", e.to_str())\n+        }\n+    }\n+}\n+\n+impl<T: fmt::Default, E: fmt::Default> fmt::Default for Result<T, E> {\n+    #[inline]\n+    fn fmt(s: &Result<T, E>, f: &mut fmt::Formatter) {\n+        match *s {\n+            Ok(ref t) => write!(f.buf, \"Ok({})\", *t),\n+            Err(ref e) => write!(f.buf, \"Err({})\", *e)\n+        }\n+    }\n+}\n+\n /// Takes each element in the iterator: if it is an error, no further\n /// elements are taken, and the error is returned.\n /// Should no error occur, a vector containing the values of each Result\n@@ -441,6 +462,8 @@ mod tests {\n     use option;\n     use str::OwnedStr;\n     use vec::ImmutableVector;\n+    use to_str::ToStr;\n+    use fmt::Default;\n \n     pub fn op1() -> Result<int, ~str> { Ok(666) }\n     pub fn op2() -> Result<int, ~str> { Err(~\"sadface\") }\n@@ -659,4 +682,22 @@ mod tests {\n         assert_eq!(ok.as_either().unwrap_right(), &100);\n         assert_eq!(err.as_either().unwrap_left(), &404);\n     }\n+\n+    #[test]\n+    pub fn test_to_str() {\n+        let ok: Result<int, ~str> = Ok(100);\n+        let err: Result<int, ~str> = Err(~\"Err\");\n+\n+        assert_eq!(ok.to_str(), ~\"Ok(100)\");\n+        assert_eq!(err.to_str(), ~\"Err(Err)\");\n+    }\n+\n+    #[test]\n+    pub fn test_fmt_default() {\n+        let ok: Result<int, ~str> = Ok(100);\n+        let err: Result<int, ~str> = Err(~\"Err\");\n+\n+        assert_eq!(format!(\"{}\", ok), ~\"Ok(100)\");\n+        assert_eq!(format!(\"{}\", err), ~\"Err(Err)\");\n+    }\n }"}]}