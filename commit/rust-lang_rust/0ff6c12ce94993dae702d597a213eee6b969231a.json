{"sha": "0ff6c12ce94993dae702d597a213eee6b969231a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZjZjMTJjZTk0OTkzZGFlNzAyZDU5N2EyMTNlZWU2Yjk2OTIzMWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-04T05:21:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-04T05:21:50Z"}, "message": "auto merge of #11280 : c-a/rust/inline_byteswap, r=brson\n\nAfter writing some benchmarks for ebml::reader::vuint_at() I noticed that LLVM doesn't seem to inline the from_be32 function even though it only does a call to the bswap32 intrinsic in the x86_64 case. Marking the functions with #[inline(always)] fixes that and seems to me a reasonable thing to do. I got the following measurements in my vuint_at() benchmarks:\r\n\r\n- Before\r\ntest ebml::bench::vuint_at_A_aligned          ... bench:      1075 ns/iter (+/- 58)\r\ntest ebml::bench::vuint_at_A_unaligned        ... bench:      1073 ns/iter (+/- 5)\r\ntest ebml::bench::vuint_at_D_aligned          ... bench:      1150 ns/iter (+/- 5)\r\ntest ebml::bench::vuint_at_D_unaligned        ... bench:      1151 ns/iter (+/- 6)\r\n\r\n- Inline from_be32\r\ntest ebml::bench::vuint_at_A_aligned          ... bench:       769 ns/iter (+/- 9)\r\ntest ebml::bench::vuint_at_A_unaligned        ... bench:       795 ns/iter (+/- 6)\r\ntest ebml::bench::vuint_at_D_aligned          ... bench:       758 ns/iter (+/- 8)\r\ntest ebml::bench::vuint_at_D_unaligned        ... bench:       759 ns/iter (+/- 8)\r\n\r\n- Using vuint_at_slow()\r\ntest ebml::bench::vuint_at_A_aligned          ... bench:       646 ns/iter (+/- 7)\r\ntest ebml::bench::vuint_at_A_unaligned        ... bench:       645 ns/iter (+/- 3)\r\ntest ebml::bench::vuint_at_D_aligned          ... bench:       907 ns/iter (+/- 4)\r\ntest ebml::bench::vuint_at_D_unaligned        ... bench:      1085 ns/iter (+/- 16)\r\n\r\nAs expected inlining from_be32() gave a considerable speedup.\r\nI also tried how the \"slow\" version fared against the optimized version and noticed that it's\r\nactually a bit faster for small A class integers (using only two bytes) but slower for big D class integers (using four bytes)", "tree": {"sha": "615162f0e4e4815acbe85ee4710a8e811a5b3088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/615162f0e4e4815acbe85ee4710a8e811a5b3088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ff6c12ce94993dae702d597a213eee6b969231a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff6c12ce94993dae702d597a213eee6b969231a", "html_url": "https://github.com/rust-lang/rust/commit/0ff6c12ce94993dae702d597a213eee6b969231a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ff6c12ce94993dae702d597a213eee6b969231a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bfd2a84cfe83b3a0ff8f3a828303b378a8d94b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bfd2a84cfe83b3a0ff8f3a828303b378a8d94b9", "html_url": "https://github.com/rust-lang/rust/commit/8bfd2a84cfe83b3a0ff8f3a828303b378a8d94b9"}, {"sha": "a82f32b3ebe712f6e67e2c17cb5920bde83bdb6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a82f32b3ebe712f6e67e2c17cb5920bde83bdb6f", "html_url": "https://github.com/rust-lang/rust/commit/a82f32b3ebe712f6e67e2c17cb5920bde83bdb6f"}], "stats": {"total": 138, "additions": 111, "deletions": 27}, "files": [{"sha": "4a47af46afe0e055a98fca40baabd9f2d58a97d8", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0ff6c12ce94993dae702d597a213eee6b969231a/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff6c12ce94993dae702d597a213eee6b969231a/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=0ff6c12ce94993dae702d597a213eee6b969231a", "patch": "@@ -960,3 +960,87 @@ mod tests {\n         test_v(Some(3));\n     }\n }\n+\n+#[cfg(test)]\n+mod bench {\n+    use ebml::reader;\n+    use test::BenchHarness;\n+\n+    #[bench]\n+    pub fn vuint_at_A_aligned(bh: &mut BenchHarness) {\n+        use std::vec;\n+        let data = vec::from_fn(4*100, |i| {\n+            match (i % 2) {\n+              0 => 0x80u8,\n+              _ => i as u8,\n+            }\n+        });\n+        let mut sum = 0u;\n+        bh.iter(|| {\n+            let mut i = 0;\n+            while (i < data.len()) {\n+                sum += reader::vuint_at(data, i).val;\n+                i += 4;\n+            }\n+        });\n+    }\n+\n+    #[bench]\n+    pub fn vuint_at_A_unaligned(bh: &mut BenchHarness) {\n+        use std::vec;\n+        let data = vec::from_fn(4*100+1, |i| {\n+            match (i % 2) {\n+              1 => 0x80u8,\n+              _ => i as u8\n+            }\n+        });\n+        let mut sum = 0u;\n+        bh.iter(|| {\n+            let mut i = 1;\n+            while (i < data.len()) {\n+                sum += reader::vuint_at(data, i).val;\n+                i += 4;\n+            }\n+        });\n+    }\n+\n+    #[bench]\n+    pub fn vuint_at_D_aligned(bh: &mut BenchHarness) {\n+        use std::vec;\n+        let data = vec::from_fn(4*100, |i| {\n+            match (i % 4) {\n+              0 => 0x10u8,\n+              3 => i as u8,\n+              _ => 0u8\n+            }\n+        });\n+        let mut sum = 0u;\n+        bh.iter(|| {\n+            let mut i = 0;\n+            while (i < data.len()) {\n+                sum += reader::vuint_at(data, i).val;\n+                i += 4;\n+            }\n+        });\n+    }\n+\n+    #[bench]\n+    pub fn vuint_at_D_unaligned(bh: &mut BenchHarness) {\n+        use std::vec;\n+        let data = vec::from_fn(4*100+1, |i| {\n+            match (i % 4) {\n+              1 => 0x10u8,\n+              0 => i as u8,\n+              _ => 0u8\n+            }\n+        });\n+        let mut sum = 0u;\n+        bh.iter(|| {\n+            let mut i = 1;\n+            while (i < data.len()) {\n+                sum += reader::vuint_at(data, i).val;\n+                i += 4;\n+            }\n+        });\n+    }\n+}"}, {"sha": "9acc09dfcc68145fe6692ead092a4b6e5a990896", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0ff6c12ce94993dae702d597a213eee6b969231a/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff6c12ce94993dae702d597a213eee6b969231a/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=0ff6c12ce94993dae702d597a213eee6b969231a", "patch": "@@ -486,33 +486,33 @@ extern \"rust-intrinsic\" {\n     pub fn u64_mul_with_overflow(x: u64, y: u64) -> (u64, bool);\n }\n \n-#[cfg(target_endian = \"little\")] pub fn to_le16(x: i16) -> i16 { x }\n-#[cfg(target_endian = \"big\")]    pub fn to_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n-#[cfg(target_endian = \"little\")] pub fn to_le32(x: i32) -> i32 { x }\n-#[cfg(target_endian = \"big\")]    pub fn to_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n-#[cfg(target_endian = \"little\")] pub fn to_le64(x: i64) -> i64 { x }\n-#[cfg(target_endian = \"big\")]    pub fn to_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n-\n-#[cfg(target_endian = \"little\")] pub fn to_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n-#[cfg(target_endian = \"big\")]    pub fn to_be16(x: i16) -> i16 { x }\n-#[cfg(target_endian = \"little\")] pub fn to_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n-#[cfg(target_endian = \"big\")]    pub fn to_be32(x: i32) -> i32 { x }\n-#[cfg(target_endian = \"little\")] pub fn to_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n-#[cfg(target_endian = \"big\")]    pub fn to_be64(x: i64) -> i64 { x }\n-\n-#[cfg(target_endian = \"little\")] pub fn from_le16(x: i16) -> i16 { x }\n-#[cfg(target_endian = \"big\")]    pub fn from_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n-#[cfg(target_endian = \"little\")] pub fn from_le32(x: i32) -> i32 { x }\n-#[cfg(target_endian = \"big\")]    pub fn from_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n-#[cfg(target_endian = \"little\")] pub fn from_le64(x: i64) -> i64 { x }\n-#[cfg(target_endian = \"big\")]    pub fn from_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n-\n-#[cfg(target_endian = \"little\")] pub fn from_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n-#[cfg(target_endian = \"big\")]    pub fn from_be16(x: i16) -> i16 { x }\n-#[cfg(target_endian = \"little\")] pub fn from_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n-#[cfg(target_endian = \"big\")]    pub fn from_be32(x: i32) -> i32 { x }\n-#[cfg(target_endian = \"little\")] pub fn from_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n-#[cfg(target_endian = \"big\")]    pub fn from_be64(x: i64) -> i64 { x }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_le16(x: i16) -> i16 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_le32(x: i32) -> i32 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_le64(x: i64) -> i64 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_be16(x: i16) -> i16 { x }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_be32(x: i32) -> i32 { x }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn to_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn to_be64(x: i64) -> i64 { x }\n+\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_le16(x: i16) -> i16 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_le16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_le32(x: i32) -> i32 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_le32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_le64(x: i64) -> i64 { x }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_le64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_be16(x: i16) -> i16 { unsafe { bswap16(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_be16(x: i16) -> i16 { x }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_be32(x: i32) -> i32 { unsafe { bswap32(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_be32(x: i32) -> i32 { x }\n+#[cfg(target_endian = \"little\")] #[inline] pub fn from_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n+#[cfg(target_endian = \"big\")]    #[inline] pub fn from_be64(x: i64) -> i64 { x }\n \n /// `TypeId` represents a globally unique identifier for a type\n #[lang=\"type_id\"] // This needs to be kept in lockstep with the code in trans/intrinsic.rs and"}]}