{"sha": "783948fcbbf9c30b810b702b0b73a227359a6804", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4Mzk0OGZjYmJmOWMzMGI4MTBiNzAyYjBiNzNhMjI3MzU5YTY4MDQ=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-09-05T02:15:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-05T02:15:46Z"}, "message": "Fix handling of match arm's rewrite (#3775)", "tree": {"sha": "9a0c845364cf66e146e3955c7ed5bee1fc050ef9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a0c845364cf66e146e3955c7ed5bee1fc050ef9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/783948fcbbf9c30b810b702b0b73a227359a6804", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcG/SCRBK7hj4Ov3rIwAAdHIIAEQF/upHlpxXQRY8HRmnT9Wp\n5wg1OM4tRTGRvBfRaqzwT5dGCkKYQazSTNWBRCbM8rYPyScjZ+v7WrfwCR8Hx8lQ\nhIx8K2jCo63Tpc/hQdzEl+3/VR1UtnQdvs3ys4iDdtzeP7HzCktystfbtzUII7Bj\naEIAeSjcWGbd1HZ0kR6kL6W6vhJJ1Mcf8zgYN6E8YRgo7fLykTe10DiFrLsPgstg\nKh4DxUXq3LZtjnautrSOfwrpw2R5lFYB4oQVInz6ZbP4Kg2g6Lh8CLLRK1lnG5a9\n+H/Gm/AAPyAYOxk8pG7QRLoDLcy5my9JXWrYmG97exk+L3xUaE99dYwunYXXS0Q=\n=4b+o\n-----END PGP SIGNATURE-----\n", "payload": "tree 9a0c845364cf66e146e3955c7ed5bee1fc050ef9\nparent e81ec20af061d3a58216d4f23c20da87358d0d8a\nauthor Seiichi Uchida <seuchida@gmail.com> 1567649746 +0900\ncommitter GitHub <noreply@github.com> 1567649746 +0900\n\nFix handling of match arm's rewrite (#3775)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/783948fcbbf9c30b810b702b0b73a227359a6804", "html_url": "https://github.com/rust-lang/rust/commit/783948fcbbf9c30b810b702b0b73a227359a6804", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/783948fcbbf9c30b810b702b0b73a227359a6804/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e81ec20af061d3a58216d4f23c20da87358d0d8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e81ec20af061d3a58216d4f23c20da87358d0d8a", "html_url": "https://github.com/rust-lang/rust/commit/e81ec20af061d3a58216d4f23c20da87358d0d8a"}], "stats": {"total": 126, "additions": 95, "deletions": 31}, "files": [{"sha": "dfc27c5fa5a1b57d554670377d68feb88e746786", "filename": "src/macros.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/783948fcbbf9c30b810b702b0b73a227359a6804/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783948fcbbf9c30b810b702b0b73a227359a6804/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=783948fcbbf9c30b810b702b0b73a227359a6804", "patch": "@@ -190,24 +190,6 @@ fn return_macro_parse_failure_fallback(\n     Some(context.snippet(span).to_owned())\n }\n \n-struct InsideMacroGuard<'a> {\n-    context: &'a RewriteContext<'a>,\n-    is_nested: bool,\n-}\n-\n-impl<'a> InsideMacroGuard<'a> {\n-    fn inside_macro_context(context: &'a RewriteContext<'_>) -> InsideMacroGuard<'a> {\n-        let is_nested = context.inside_macro.replace(true);\n-        InsideMacroGuard { context, is_nested }\n-    }\n-}\n-\n-impl<'a> Drop for InsideMacroGuard<'a> {\n-    fn drop(&mut self) {\n-        self.context.inside_macro.replace(self.is_nested);\n-    }\n-}\n-\n pub(crate) fn rewrite_macro(\n     mac: &ast::Mac,\n     extra_ident: Option<ast::Ident>,\n@@ -221,9 +203,16 @@ pub(crate) fn rewrite_macro(\n     if should_skip {\n         None\n     } else {\n-        let guard = InsideMacroGuard::inside_macro_context(context);\n+        let guard = context.enter_macro();\n         let result = catch_unwind(AssertUnwindSafe(|| {\n-            rewrite_macro_inner(mac, extra_ident, context, shape, position, guard.is_nested)\n+            rewrite_macro_inner(\n+                mac,\n+                extra_ident,\n+                context,\n+                shape,\n+                position,\n+                guard.is_nested(),\n+            )\n         }));\n         match result {\n             Err(..) | Ok(None) => {\n@@ -263,7 +252,7 @@ fn rewrite_macro_inner(\n ) -> Option<String> {\n     if context.config.use_try_shorthand() {\n         if let Some(expr) = convert_try_mac(mac, context) {\n-            context.inside_macro.replace(false);\n+            context.leave_macro();\n             return expr.rewrite(context, shape);\n         }\n     }\n@@ -412,7 +401,7 @@ fn rewrite_macro_inner(\n                     Some(SeparatorTactic::Never)\n                 };\n                 if FORCED_BRACKET_MACROS.contains(macro_name) && !is_nested_macro {\n-                    context.inside_macro.replace(false);\n+                    context.leave_macro();\n                     if context.use_block_indent() {\n                         force_trailing_comma = Some(SeparatorTactic::Vertical);\n                     };"}, {"sha": "b608faded9e6ff7dcfdffefdc9cd78f0148a0f87", "filename": "src/matches.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/783948fcbbf9c30b810b702b0b73a227359a6804/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783948fcbbf9c30b810b702b0b73a227359a6804/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=783948fcbbf9c30b810b702b0b73a227359a6804", "patch": "@@ -19,7 +19,7 @@ use crate::source_map::SpanUtils;\n use crate::spanned::Spanned;\n use crate::utils::{\n     contains_skip, extra_offset, first_line_width, inner_attributes, last_line_extendable, mk_sp,\n-    ptr_vec_to_ref_vec, semicolon_for_expr, trimmed_last_line_width,\n+    ptr_vec_to_ref_vec, semicolon_for_expr, trimmed_last_line_width, unicode_str_width,\n };\n \n /// A simple wrapper type against `ast::Arm`. Used inside `write_list()`.\n@@ -452,7 +452,9 @@ fn rewrite_match_body(\n \n         match rewrite {\n             Some(ref body_str)\n-                if is_block || (!body_str.contains('\\n') && body_str.len() <= body_shape.width) =>\n+                if is_block\n+                    || (!body_str.contains('\\n')\n+                        && unicode_str_width(body_str) <= body_shape.width) =>\n             {\n                 return combine_orig_body(body_str);\n             }\n@@ -470,11 +472,6 @@ fn rewrite_match_body(\n         next_line_body_shape.width,\n     );\n     match (orig_body, next_line_body) {\n-        (Some(ref orig_str), Some(ref next_line_str))\n-            if orig_str == next_line_str || context.inside_macro() =>\n-        {\n-            combine_orig_body(orig_str)\n-        }\n         (Some(ref orig_str), Some(ref next_line_str))\n             if prefer_next_line(orig_str, next_line_str, RhsTactics::Default) =>\n         {\n@@ -575,6 +572,7 @@ fn can_flatten_block_around_this(body: &ast::Expr) -> bool {\n         | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n+        | ast::ExprKind::Index(ref expr, _)\n         | ast::ExprKind::Cast(ref expr, _) => can_flatten_block_around_this(expr),\n         _ => false,\n     }"}, {"sha": "19b749dc8e1b76fe4d2cc9b52f169ddaa0c01625", "filename": "src/rewrite.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/783948fcbbf9c30b810b702b0b73a227359a6804/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783948fcbbf9c30b810b702b0b73a227359a6804/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=783948fcbbf9c30b810b702b0b73a227359a6804", "patch": "@@ -29,7 +29,7 @@ pub(crate) struct RewriteContext<'a> {\n     pub(crate) parse_session: &'a ParseSess,\n     pub(crate) source_map: &'a SourceMap,\n     pub(crate) config: &'a Config,\n-    pub(crate) inside_macro: RefCell<bool>,\n+    pub(crate) inside_macro: Rc<RefCell<bool>>,\n     // Force block indent style even if we are using visual indent style.\n     pub(crate) use_block: RefCell<bool>,\n     // When `is_if_else_block` is true, unindent the comment on top\n@@ -45,6 +45,23 @@ pub(crate) struct RewriteContext<'a> {\n     pub(crate) skipped_range: Rc<RefCell<Vec<(usize, usize)>>>,\n }\n \n+pub(crate) struct InsideMacroGuard {\n+    is_nested_macro_context: bool,\n+    inside_macro_ref: Rc<RefCell<bool>>,\n+}\n+\n+impl InsideMacroGuard {\n+    pub(crate) fn is_nested(&self) -> bool {\n+        self.is_nested_macro_context\n+    }\n+}\n+\n+impl Drop for InsideMacroGuard {\n+    fn drop(&mut self) {\n+        self.inside_macro_ref.replace(self.is_nested_macro_context);\n+    }\n+}\n+\n impl<'a> RewriteContext<'a> {\n     pub(crate) fn snippet(&self, span: Span) -> &str {\n         self.snippet_provider.span_to_snippet(span).unwrap()\n@@ -63,6 +80,18 @@ impl<'a> RewriteContext<'a> {\n         *self.inside_macro.borrow()\n     }\n \n+    pub(crate) fn enter_macro(&self) -> InsideMacroGuard {\n+        let is_nested_macro_context = self.inside_macro.replace(true);\n+        InsideMacroGuard {\n+            is_nested_macro_context,\n+            inside_macro_ref: self.inside_macro.clone(),\n+        }\n+    }\n+\n+    pub(crate) fn leave_macro(&self) {\n+        self.inside_macro.replace(false);\n+    }\n+\n     pub(crate) fn is_if_else_block(&self) -> bool {\n         *self.is_if_else_block.borrow()\n     }"}, {"sha": "074ee37d10484d1009ab6623c1f11fe971f76abe", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/783948fcbbf9c30b810b702b0b73a227359a6804/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783948fcbbf9c30b810b702b0b73a227359a6804/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=783948fcbbf9c30b810b702b0b73a227359a6804", "patch": "@@ -870,7 +870,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             parse_session: self.parse_session,\n             source_map: self.source_map,\n             config: self.config,\n-            inside_macro: RefCell::new(false),\n+            inside_macro: Rc::new(RefCell::new(false)),\n             use_block: RefCell::new(false),\n             is_if_else_block: RefCell::new(false),\n             force_one_line_chain: RefCell::new(false),"}, {"sha": "f54082f92ebef82f5fb22da5cfadca43f1a7e4a1", "filename": "tests/source/match.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/783948fcbbf9c30b810b702b0b73a227359a6804/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783948fcbbf9c30b810b702b0b73a227359a6804/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=783948fcbbf9c30b810b702b0b73a227359a6804", "patch": "@@ -549,3 +549,22 @@ fn issue_3005() {\n                  },\n              }\n }\n+\n+// #3774\n+fn issue_3774() {\n+    {\n+        {\n+            {\n+                match foo {\n+                    Lam(_, _, _) | Pi(_, _, _) | Let(_, _, _, _) | Embed(_) | Var(_) => unreachab(),\n+                    Lam(_, _, _) | Pi(_, _, _) | Let(_, _, _, _) | Embed(_) | Var(_) => unreacha!(),\n+                    Lam(_, _, _) | Pi(_, _, _) | Let(_, _, _, _) | Embed(_) | Var(_) => unreachabl(),\n+                    Lam(_, _, _) | Pi(_, _, _) | Let(_, _, _, _) | Embed(_) | Var(_) => unreachae!(),\n+                    Lam(_, _, _) | Pi(_, _, _) | Let(_, _, _, _) | Embed(_) | Var(_) => unreachable(),\n+                    Lam(_, _, _) | Pi(_, _, _) | Let(_, _, _, _) | Embed(_) | Var(_) => unreachable!(),\n+                    Lam(_, _, _) | Pi(_, _, _) | Let(_, _, _, _) | Embed(_) | Var(_) => rrunreachable!(),\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "92abda9752e805ee9543c0e19e65f6b7e4c73c39", "filename": "tests/target/match.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/783948fcbbf9c30b810b702b0b73a227359a6804/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/783948fcbbf9c30b810b702b0b73a227359a6804/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=783948fcbbf9c30b810b702b0b73a227359a6804", "patch": "@@ -574,3 +574,32 @@ fn issue_3005() {\n         }\n     }\n }\n+\n+// #3774\n+fn issue_3774() {\n+    {\n+        {\n+            {\n+                match foo {\n+                    Lam(_, _, _) | Pi(_, _, _) | Let(_, _, _, _) | Embed(_) | Var(_) => unreachab(),\n+                    Lam(_, _, _) | Pi(_, _, _) | Let(_, _, _, _) | Embed(_) | Var(_) => unreacha!(),\n+                    Lam(_, _, _) | Pi(_, _, _) | Let(_, _, _, _) | Embed(_) | Var(_) => {\n+                        unreachabl()\n+                    }\n+                    Lam(_, _, _) | Pi(_, _, _) | Let(_, _, _, _) | Embed(_) | Var(_) => {\n+                        unreachae!()\n+                    }\n+                    Lam(_, _, _) | Pi(_, _, _) | Let(_, _, _, _) | Embed(_) | Var(_) => {\n+                        unreachable()\n+                    }\n+                    Lam(_, _, _) | Pi(_, _, _) | Let(_, _, _, _) | Embed(_) | Var(_) => {\n+                        unreachable!()\n+                    }\n+                    Lam(_, _, _) | Pi(_, _, _) | Let(_, _, _, _) | Embed(_) | Var(_) => {\n+                        rrunreachable!()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}]}