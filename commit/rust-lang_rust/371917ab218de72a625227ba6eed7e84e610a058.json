{"sha": "371917ab218de72a625227ba6eed7e84e610a058", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MTkxN2FiMjE4ZGU3MmE2MjUyMjdiYTZlZWQ3ZTg0ZTYxMGEwNTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-23T11:14:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-23T11:14:48Z"}, "message": "Auto merge of #74613 - Mark-Simulacrum:revert-gimli, r=nnethercote\n\nRevert libbacktrace -> gimli\n\nThis reverts 4cbd265c119cb1a5eb92e98d2bb93466f05efa46 028f8d7b85898683b99e05564cd2976c7e0d5b43 13db3cc1e8d2fd4b8e7c74d91002274d7b62801b d7a36d8964c927863faef5d3b42da08f37e5896c (and technically 79673d300915f846726c27b9e1974dc451013ee9 but it's made empty by previous reverts).\n\nThe current plan is to land this PR as a temporary change, so that we can get a better handle on the regressions introduced by it. Trying to fix/examine them in master is difficult, and we want to be better able to evaluate them without impact to other PRs being landed in the mean time.\n\nThat said, it is currently *my* belief that gimli, in one form or another, will need to land sometime soon. I think it's quite likely that it may slip a week or two, but I would personally push for re-landing it then \"regardless\" of the regressions. We should try to focus efforts on understanding and removing as much of the performance impact as possible, as everyone pretty much agrees that it should be quite minimal (and entirely in the linker, basically).\n\nr? @nnethercote", "tree": {"sha": "98586244f1e4a8913e17fe47b7b0620fad27d374", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98586244f1e4a8913e17fe47b7b0620fad27d374"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/371917ab218de72a625227ba6eed7e84e610a058", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/371917ab218de72a625227ba6eed7e84e610a058", "html_url": "https://github.com/rust-lang/rust/commit/371917ab218de72a625227ba6eed7e84e610a058", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/371917ab218de72a625227ba6eed7e84e610a058/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bbfa02b1b15974d5772b520aa027bf79f8c248e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bbfa02b1b15974d5772b520aa027bf79f8c248e", "html_url": "https://github.com/rust-lang/rust/commit/2bbfa02b1b15974d5772b520aa027bf79f8c248e"}, {"sha": "b747a33abdf4c9d21b604853bc6dee105e622209", "url": "https://api.github.com/repos/rust-lang/rust/commits/b747a33abdf4c9d21b604853bc6dee105e622209", "html_url": "https://github.com/rust-lang/rust/commit/b747a33abdf4c9d21b604853bc6dee105e622209"}], "stats": {"total": 163, "additions": 55, "deletions": 108}, "files": [{"sha": "5c0ab737f63dbd7da7c41695f382a9a2a275f1b6", "filename": ".gitmodules", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/371917ab218de72a625227ba6eed7e84e610a058/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/371917ab218de72a625227ba6eed7e84e610a058/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=371917ab218de72a625227ba6eed7e84e610a058", "patch": "@@ -44,6 +44,3 @@\n [submodule \"src/tools/rust-analyzer\"]\n \tpath = src/tools/rust-analyzer\n \turl = https://github.com/rust-analyzer/rust-analyzer.git\n-[submodule \"src/backtrace\"]\n-\tpath = src/backtrace\n-\turl = https://github.com/rust-lang/backtrace-rs.git"}, {"sha": "3b1a3c10fedc3f8f71396c6efacf42fe0ce383b7", "filename": "Cargo.lock", "status": "modified", "additions": 29, "deletions": 59, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/371917ab218de72a625227ba6eed7e84e610a058/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/371917ab218de72a625227ba6eed7e84e610a058/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=371917ab218de72a625227ba6eed7e84e610a058", "patch": "@@ -1,26 +1,10 @@\n # This file is automatically @generated by Cargo.\n # It is not intended for manual editing.\n [[package]]\n-name = \"addr2line\"\n-version = \"0.13.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1b6a2d3371669ab3ca9797670853d61402b03d0b4b9ebf33d677dfa720203072\"\n-dependencies = [\n- \"compiler_builtins\",\n- \"gimli\",\n- \"rustc-std-workspace-alloc\",\n- \"rustc-std-workspace-core\",\n-]\n-\n-[[package]]\n-name = \"adler\"\n-version = \"0.2.2\"\n+name = \"adler32\"\n+version = \"1.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ccc9a9dd069569f212bc4330af9f17c4afb5e8ce185e83dbb14f1349dda18b10\"\n-dependencies = [\n- \"compiler_builtins\",\n- \"rustc-std-workspace-core\",\n-]\n+checksum = \"7e522997b529f05601e05166c07ed17789691f562762c7f3b987263d2dedee5c\"\n \n [[package]]\n name = \"aho-corasick\"\n@@ -141,14 +125,28 @@ checksum = \"f8aac770f1885fd7e387acedd76065302551364496e46b3dd00860b2f8359b9d\"\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.50\"\n+version = \"0.3.46\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b1e692897359247cc6bb902933361652380af0f1b7651ae5c5013407f30e109e\"\n dependencies = [\n- \"addr2line\",\n+ \"backtrace-sys\",\n  \"cfg-if\",\n+ \"compiler_builtins\",\n  \"libc\",\n- \"miniz_oxide\",\n- \"object\",\n  \"rustc-demangle\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n+[[package]]\n+name = \"backtrace-sys\"\n+version = \"0.1.37\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"18fbebbe1c9d1f383a9cc7e8ccdb471b91c8d024ee9c2ca5b5346121fe8b4399\"\n+dependencies = [\n+ \"cc\",\n+ \"compiler_builtins\",\n+ \"libc\",\n+ \"rustc-std-workspace-core\",\n ]\n \n [[package]]\n@@ -690,9 +688,9 @@ dependencies = [\n \n [[package]]\n name = \"crc32fast\"\n-version = \"1.2.0\"\n+version = \"1.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n+checksum = \"e91d5240c6975ef33aeb5f148f35275c25eda8e8a5f95abe421978b05b8bf192\"\n dependencies = [\n  \"cfg-if\",\n ]\n@@ -1025,9 +1023,9 @@ checksum = \"37ab347416e802de484e4d03c7316c48f1ecb56574dfd4a46a80f173ce1de04d\"\n \n [[package]]\n name = \"flate2\"\n-version = \"1.0.16\"\n+version = \"1.0.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"68c90b0fc46cf89d227cc78b40e494ff81287a92dd07631e5af0d06fe3cf885e\"\n+checksum = \"ad3c5233c9a940c8719031b423d7e6c16af66e031cb0420b0896f5245bf181d3\"\n dependencies = [\n  \"cfg-if\",\n  \"crc32fast\",\n@@ -1161,17 +1159,6 @@ dependencies = [\n  \"wasi\",\n ]\n \n-[[package]]\n-name = \"gimli\"\n-version = \"0.22.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"aaf91faf136cb47367fa430cd46e37a788775e7fa104f8b4bcb3861dc389b724\"\n-dependencies = [\n- \"compiler_builtins\",\n- \"rustc-std-workspace-alloc\",\n- \"rustc-std-workspace-core\",\n-]\n-\n [[package]]\n name = \"git2\"\n version = \"0.13.5\"\n@@ -1832,14 +1819,11 @@ dependencies = [\n \n [[package]]\n name = \"miniz_oxide\"\n-version = \"0.4.0\"\n+version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"be0f75932c1f6cfae3c04000e40114adf955636e19040f9c0a2c380702aa1c7f\"\n+checksum = \"6f3f74f726ae935c3f514300cc6773a0c9492abc5e972d42ba0c0ebb88757625\"\n dependencies = [\n- \"adler\",\n- \"compiler_builtins\",\n- \"rustc-std-workspace-alloc\",\n- \"rustc-std-workspace-core\",\n+ \"adler32\",\n ]\n \n [[package]]\n@@ -1971,17 +1955,6 @@ dependencies = [\n  \"libc\",\n ]\n \n-[[package]]\n-name = \"object\"\n-version = \"0.20.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1ab52be62400ca80aa00285d25253d7f7c437b7375c4de678f5405d3afe82ca5\"\n-dependencies = [\n- \"compiler_builtins\",\n- \"rustc-std-workspace-alloc\",\n- \"rustc-std-workspace-core\",\n-]\n-\n [[package]]\n name = \"once_cell\"\n version = \"1.1.0\"\n@@ -4373,8 +4346,8 @@ dependencies = [\n name = \"std\"\n version = \"0.0.0\"\n dependencies = [\n- \"addr2line\",\n  \"alloc\",\n+ \"backtrace\",\n  \"cfg-if\",\n  \"compiler_builtins\",\n  \"core\",\n@@ -4383,13 +4356,10 @@ dependencies = [\n  \"hashbrown\",\n  \"hermit-abi\",\n  \"libc\",\n- \"miniz_oxide\",\n- \"object\",\n  \"panic_abort\",\n  \"panic_unwind\",\n  \"profiler_builtins\",\n  \"rand 0.7.3\",\n- \"rustc-demangle\",\n  \"unwind\",\n  \"wasi\",\n ]"}, {"sha": "efc6f4a0291ca6791b9088ad6f7a02bb4473106b", "filename": "Cargo.toml", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/371917ab218de72a625227ba6eed7e84e610a058/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/371917ab218de72a625227ba6eed7e84e610a058/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=371917ab218de72a625227ba6eed7e84e610a058", "patch": "@@ -80,11 +80,5 @@ rustc-std-workspace-core = { path = 'src/tools/rustc-std-workspace-core' }\n rustc-std-workspace-alloc = { path = 'src/tools/rustc-std-workspace-alloc' }\n rustc-std-workspace-std = { path = 'src/tools/rustc-std-workspace-std' }\n \n-# This crate's integration with libstd is a bit wonky, so we use a submodule\n-# instead of a crates.io dependency. Make sure everything else in the repo is\n-# also using the submodule, however, so we can avoid duplicate copies of the\n-# source code for this crate.\n-backtrace = { path = \"src/backtrace\" }\n-\n [patch.\"https://github.com/rust-lang/rust-clippy\"]\n clippy_lints = { path = \"src/tools/clippy/clippy_lints\" }"}, {"sha": "c76a75fa07bb0361eee0acda48734f8c58c797a2", "filename": "rustfmt.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371917ab218de72a625227ba6eed7e84e610a058/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/371917ab218de72a625227ba6eed7e84e610a058/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=371917ab218de72a625227ba6eed7e84e610a058", "patch": "@@ -30,7 +30,6 @@ ignore = [\n     \"src/tools/rust-analyzer\",\n     \"src/tools/rust-installer\",\n     \"src/tools/rustfmt\",\n-    \"src/backtrace\",\n \n     # We do not format this file as it is externally sourced and auto-generated.\n     \"src/libstd/sys/cloudabi/abi/cloudabi.rs\","}, {"sha": "5965cf5fc17affc84c11dc9972ae8f4dc2c32db1", "filename": "src/backtrace", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbacktrace?ref=2bbfa02b1b15974d5772b520aa027bf79f8c248e", "patch": "@@ -1 +0,0 @@\n-Subproject commit 5965cf5fc17affc84c11dc9972ae8f4dc2c32db1"}, {"sha": "c64934cd6c9ded20f166b32e7988f80eb94eb68c", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371917ab218de72a625227ba6eed7e84e610a058/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371917ab218de72a625227ba6eed7e84e610a058/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=371917ab218de72a625227ba6eed7e84e610a058", "patch": "@@ -1005,7 +1005,6 @@ impl Step for Src {\n         // (essentially libstd and all of its path dependencies)\n         let std_src_dirs = [\n             \"src/build_helper\",\n-            \"src/backtrace/src\",\n             \"src/liballoc\",\n             \"src/libcore\",\n             \"src/libpanic_abort\","}, {"sha": "8138dfa580d80c04aa50d356abb2e466c5fad54f", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/371917ab218de72a625227ba6eed7e84e610a058/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/371917ab218de72a625227ba6eed7e84e610a058/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=371917ab218de72a625227ba6eed7e84e610a058", "patch": "@@ -24,15 +24,11 @@ profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n unwind = { path = \"../libunwind\" }\n hashbrown = { version = \"0.6.2\", default-features = false, features = ['rustc-dep-of-std'] }\n \n-# Dependencies of the `backtrace` crate\n-addr2line = { version = \"0.13.0\", optional = true, default-features = false }\n-rustc-demangle = { version = \"0.1.4\", features = ['rustc-dep-of-std'] }\n-miniz_oxide = { version = \"0.4.0\", optional = true, default-features = false }\n-[dependencies.object]\n-version = \"0.20\"\n-optional = true\n-default-features = false\n-features = ['read_core', 'elf', 'macho', 'pe']\n+[dependencies.backtrace_rs]\n+package = \"backtrace\"\n+version = \"0.3.46\"\n+default-features = false # without the libstd `backtrace` feature, stub out everything\n+features = [ \"rustc-dep-of-std\" ] # enable build support for integrating into libstd\n \n [dev-dependencies]\n rand = \"0.7\"\n@@ -51,12 +47,11 @@ wasi = { version = \"0.9.0\", features = ['rustc-dep-of-std'], default-features =\n \n [features]\n backtrace = [\n-  \"gimli-symbolize\",\n-  'addr2line/rustc-dep-of-std',\n-  'object/rustc-dep-of-std',\n-  'miniz_oxide/rustc-dep-of-std',\n+  \"backtrace_rs/dbghelp\",          # backtrace/symbolize on MSVC\n+  \"backtrace_rs/libbacktrace\",     # symbolize on most platforms\n+  \"backtrace_rs/libunwind\",        # backtrace on most platforms\n+  \"backtrace_rs/dladdr\",           # symbolize on platforms w/o libbacktrace\n ]\n-gimli-symbolize = []\n \n panic-unwind = [\"panic_unwind\"]\n profiler = [\"profiler_builtins\"]"}, {"sha": "02e6811bc3f4357e33b732e17f138925562a31f7", "filename": "src/libstd/backtrace.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/371917ab218de72a625227ba6eed7e84e610a058/src%2Flibstd%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371917ab218de72a625227ba6eed7e84e610a058/src%2Flibstd%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbacktrace.rs?ref=371917ab218de72a625227ba6eed7e84e610a058", "patch": "@@ -91,14 +91,15 @@\n // `Backtrace`, but that's a relatively small price to pay relative to capturing\n // a backtrace or actually symbolizing it.\n \n-use crate::backtrace_rs::{self, BytesOrWideString};\n use crate::env;\n use crate::ffi::c_void;\n use crate::fmt;\n use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n use crate::sync::Mutex;\n use crate::sys_common::backtrace::{lock, output_filename};\n use crate::vec::Vec;\n+use backtrace::BytesOrWideString;\n+use backtrace_rs as backtrace;\n \n /// A captured OS thread stack backtrace.\n ///\n@@ -149,7 +150,7 @@ struct BacktraceFrame {\n }\n \n enum RawFrame {\n-    Actual(backtrace_rs::Frame),\n+    Actual(backtrace::Frame),\n     #[cfg(test)]\n     Fake,\n }\n@@ -196,7 +197,7 @@ impl fmt::Debug for BacktraceSymbol {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"{{ \")?;\n \n-        if let Some(fn_name) = self.name.as_ref().map(|b| backtrace_rs::SymbolName::new(b)) {\n+        if let Some(fn_name) = self.name.as_ref().map(|b| backtrace::SymbolName::new(b)) {\n             write!(fmt, \"fn: \\\"{:#}\\\"\", fn_name)?;\n         } else {\n             write!(fmt, \"fn: <unknown>\")?;\n@@ -222,7 +223,7 @@ impl fmt::Debug for BytesOrWide {\n                 BytesOrWide::Bytes(w) => BytesOrWideString::Bytes(w),\n                 BytesOrWide::Wide(w) => BytesOrWideString::Wide(w),\n             },\n-            backtrace_rs::PrintFmt::Short,\n+            backtrace::PrintFmt::Short,\n             crate::env::current_dir().as_ref().ok(),\n         )\n     }\n@@ -304,7 +305,7 @@ impl Backtrace {\n         let mut frames = Vec::new();\n         let mut actual_start = None;\n         unsafe {\n-            backtrace_rs::trace_unsynchronized(|frame| {\n+            backtrace::trace_unsynchronized(|frame| {\n                 frames.push(BacktraceFrame {\n                     frame: RawFrame::Actual(frame.clone()),\n                     symbols: Vec::new(),\n@@ -355,9 +356,9 @@ impl fmt::Display for Backtrace {\n \n         let full = fmt.alternate();\n         let (frames, style) = if full {\n-            (&capture.frames[..], backtrace_rs::PrintFmt::Full)\n+            (&capture.frames[..], backtrace::PrintFmt::Full)\n         } else {\n-            (&capture.frames[capture.actual_start..], backtrace_rs::PrintFmt::Short)\n+            (&capture.frames[capture.actual_start..], backtrace::PrintFmt::Short)\n         };\n \n         // When printing paths we try to strip the cwd if it exists, otherwise\n@@ -369,7 +370,7 @@ impl fmt::Display for Backtrace {\n             output_filename(fmt, path, style, cwd.as_ref().ok())\n         };\n \n-        let mut f = backtrace_rs::BacktraceFmt::new(fmt, style, &mut print_path);\n+        let mut f = backtrace::BacktraceFmt::new(fmt, style, &mut print_path);\n         f.add_context()?;\n         for frame in frames {\n             let mut f = f.frame();\n@@ -379,7 +380,7 @@ impl fmt::Display for Backtrace {\n                 for symbol in frame.symbols.iter() {\n                     f.print_raw(\n                         frame.frame.ip(),\n-                        symbol.name.as_ref().map(|b| backtrace_rs::SymbolName::new(b)),\n+                        symbol.name.as_ref().map(|b| backtrace::SymbolName::new(b)),\n                         symbol.filename.as_ref().map(|b| match b {\n                             BytesOrWide::Bytes(w) => BytesOrWideString::Bytes(w),\n                             BytesOrWide::Wide(w) => BytesOrWideString::Wide(w),\n@@ -414,7 +415,7 @@ impl Capture {\n                 RawFrame::Fake => unimplemented!(),\n             };\n             unsafe {\n-                backtrace_rs::resolve_frame_unsynchronized(frame, |symbol| {\n+                backtrace::resolve_frame_unsynchronized(frame, |symbol| {\n                     symbols.push(BacktraceSymbol {\n                         name: symbol.name().map(|m| m.as_bytes().to_vec()),\n                         filename: symbol.filename_raw().map(|b| match b {"}, {"sha": "43a3327d84b613905ad8c65daaf9ab52ff181633", "filename": "src/libstd/build.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371917ab218de72a625227ba6eed7e84e610a058/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371917ab218de72a625227ba6eed7e84e610a058/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=371917ab218de72a625227ba6eed7e84e610a058", "patch": "@@ -88,5 +88,4 @@ fn main() {\n         println!(\"cargo:rustc-cfg=feature=\\\"restricted-std\\\"\");\n     }\n     println!(\"cargo:rustc-env=STD_ENV_ARCH={}\", env::var(\"CARGO_CFG_TARGET_ARCH\").unwrap());\n-    println!(\"cargo:rustc-cfg=backtrace_in_libstd\");\n }"}, {"sha": "00f2fff94c9a16928b34e188bad85b7cf27bfcb7", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/371917ab218de72a625227ba6eed7e84e610a058/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371917ab218de72a625227ba6eed7e84e610a058/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=371917ab218de72a625227ba6eed7e84e610a058", "patch": "@@ -511,10 +511,6 @@ mod panicking;\n // compiler\n pub mod rt;\n \n-#[path = \"../backtrace/src/lib.rs\"]\n-#[allow(dead_code, unused_attributes)]\n-mod backtrace_rs;\n-\n // Pull in the `std_detect` crate directly into libstd. The contents of\n // `std_detect` are in a different repository: rust-lang/stdarch.\n //"}, {"sha": "9542e7209b4cf168347e18b00cc3253c349fb020", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/371917ab218de72a625227ba6eed7e84e610a058/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371917ab218de72a625227ba6eed7e84e610a058/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=371917ab218de72a625227ba6eed7e84e610a058", "patch": "@@ -171,7 +171,7 @@ fn default_hook(info: &PanicInfo<'_>) {\n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n     let backtrace_env = if panic_count::get() >= 2 {\n-        RustBacktrace::Print(crate::backtrace_rs::PrintFmt::Full)\n+        RustBacktrace::Print(backtrace_rs::PrintFmt::Full)\n     } else {\n         backtrace::rust_backtrace_env()\n     };"}, {"sha": "e9b1e86d7ae49ed8e66a6f5a995be65ceb8ef4d5", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/371917ab218de72a625227ba6eed7e84e610a058/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371917ab218de72a625227ba6eed7e84e610a058/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=371917ab218de72a625227ba6eed7e84e610a058", "patch": "@@ -1,4 +1,3 @@\n-use crate::backtrace_rs::{self, BacktraceFmt, BytesOrWideString, PrintFmt};\n use crate::borrow::Cow;\n /// Common code for printing the backtrace in the same way across the different\n /// supported platforms.\n@@ -10,6 +9,8 @@ use crate::path::{self, Path, PathBuf};\n use crate::sync::atomic::{self, Ordering};\n use crate::sys::mutex::Mutex;\n \n+use backtrace_rs::{BacktraceFmt, BytesOrWideString, PrintFmt};\n+\n /// Max number of frames to print.\n const MAX_NB_FRAMES: usize = 100;\n "}, {"sha": "559267a494f29a009954f07d66b8f02399e1f8ac", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/371917ab218de72a625227ba6eed7e84e610a058/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371917ab218de72a625227ba6eed7e84e610a058/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=371917ab218de72a625227ba6eed7e84e610a058", "patch": "@@ -17,7 +17,6 @@ const LICENSES: &[&str] = &[\n     \"MIT\",\n     \"Unlicense/MIT\",\n     \"Unlicense OR MIT\",\n-    \"0BSD OR MIT OR Apache-2.0\", // adler license\n ];\n \n /// These are exceptions to Rust's permissive licensing policy, and\n@@ -37,6 +36,7 @@ const EXCEPTIONS: &[(&str, &str)] = &[\n     (\"ryu\", \"Apache-2.0 OR BSL-1.0\"),       // rls/cargo/... (because of serde)\n     (\"bytesize\", \"Apache-2.0\"),             // cargo\n     (\"im-rc\", \"MPL-2.0+\"),                  // cargo\n+    (\"adler32\", \"BSD-3-Clause AND Zlib\"),   // cargo dep that isn't used\n     (\"constant_time_eq\", \"CC0-1.0\"),        // rustfmt\n     (\"sized-chunks\", \"MPL-2.0+\"),           // cargo via im-rc\n     (\"bitmaps\", \"MPL-2.0+\"),                // cargo via im-rc\n@@ -57,15 +57,15 @@ const RESTRICTED_DEPENDENCY_CRATES: &[&str] = &[\"rustc_middle\", \"rustc_codegen_l\n /// This list is here to provide a speed-bump to adding a new dependency to\n /// rustc. Please check with the compiler team before adding an entry.\n const PERMITTED_DEPENDENCIES: &[&str] = &[\n-    \"addr2line\",\n-    \"adler\",\n+    \"adler32\",\n     \"aho-corasick\",\n     \"annotate-snippets\",\n     \"ansi_term\",\n     \"arrayvec\",\n     \"atty\",\n     \"autocfg\",\n     \"backtrace\",\n+    \"backtrace-sys\",\n     \"bitflags\",\n     \"block-buffer\",\n     \"block-padding\",\n@@ -98,7 +98,6 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"generic-array\",\n     \"getopts\",\n     \"getrandom\",\n-    \"gimli\",\n     \"hashbrown\",\n     \"hermit-abi\",\n     \"humantime\",\n@@ -120,7 +119,6 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"miniz_oxide\",\n     \"nodrop\",\n     \"num_cpus\",\n-    \"object\",\n     \"once_cell\",\n     \"opaque-debug\",\n     \"parking_lot\","}, {"sha": "b4aafb815fc6b6b169a0caa91aa21de9a8c5b8dc", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/371917ab218de72a625227ba6eed7e84e610a058/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/371917ab218de72a625227ba6eed7e84e610a058/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=371917ab218de72a625227ba6eed7e84e610a058", "patch": "@@ -60,7 +60,6 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/tools/rust-installer\",\n         \"src/tools/rustfmt\",\n         \"src/doc/book\",\n-        \"src/backtrace\",\n         // Filter RLS output directories\n         \"target/rls\",\n     ];"}]}