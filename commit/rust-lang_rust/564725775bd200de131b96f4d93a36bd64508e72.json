{"sha": "564725775bd200de131b96f4d93a36bd64508e72", "node_id": "C_kwDOAAsO6NoAKDU2NDcyNTc3NWJkMjAwZGUxMzFiOTZmNGQ5M2EzNmJkNjQ1MDhlNzI", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-05-12T16:31:17Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-05-18T09:21:10Z"}, "message": "Improve \"unknown field\" error messages", "tree": {"sha": "4ebad1c6a5bfa16c442265ba7425329698642c0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ebad1c6a5bfa16c442265ba7425329698642c0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/564725775bd200de131b96f4d93a36bd64508e72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/564725775bd200de131b96f4d93a36bd64508e72", "html_url": "https://github.com/rust-lang/rust/commit/564725775bd200de131b96f4d93a36bd64508e72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/564725775bd200de131b96f4d93a36bd64508e72/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d422baa30c415e6aed786f1953b0ac1b7d840dc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d422baa30c415e6aed786f1953b0ac1b7d840dc1", "html_url": "https://github.com/rust-lang/rust/commit/d422baa30c415e6aed786f1953b0ac1b7d840dc1"}], "stats": {"total": 179, "additions": 169, "deletions": 10}, "files": [{"sha": "03e6bf03afef50dbf18f478deff9666e2f117534", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/564725775bd200de131b96f4d93a36bd64508e72/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/564725775bd200de131b96f4d93a36bd64508e72/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=564725775bd200de131b96f4d93a36bd64508e72", "patch": "@@ -25,6 +25,7 @@ clippy_lints = { path = \"clippy_lints\" }\n semver = \"1.0\"\n rustc_tools_util = { path = \"rustc_tools_util\" }\n tempfile = { version = \"3.2\", optional = true }\n+termize = \"0.1\"\n \n [dev-dependencies]\n compiletest_rs = { version = \"0.7.1\", features = [\"tmp\"] }"}, {"sha": "44c42d03e6001cd89c5dac76d8e8e60e2e7d018d", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/564725775bd200de131b96f4d93a36bd64508e72/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/564725775bd200de131b96f4d93a36bd64508e72/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=564725775bd200de131b96f4d93a36bd64508e72", "patch": "@@ -418,7 +418,7 @@ mod zero_sized_map_values;\n // end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n \n pub use crate::utils::conf::Conf;\n-use crate::utils::conf::TryConf;\n+use crate::utils::conf::{format_error, TryConf};\n \n /// Register all pre expansion lints\n ///\n@@ -463,7 +463,7 @@ pub fn read_conf(sess: &Session) -> Conf {\n         sess.struct_err(&format!(\n             \"error reading Clippy's configuration file `{}`: {}\",\n             file_name.display(),\n-            error\n+            format_error(error)\n         ))\n         .emit();\n     }"}, {"sha": "cd4d16fe95f75822965c9091d7b1999a4aeaeceb", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 122, "deletions": 7, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/564725775bd200de131b96f4d93a36bd64508e72/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/564725775bd200de131b96f4d93a36bd64508e72/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=564725775bd200de131b96f4d93a36bd64508e72", "patch": "@@ -6,7 +6,8 @@ use serde::de::{Deserializer, IgnoredAny, IntoDeserializer, MapAccess, Visitor};\n use serde::Deserialize;\n use std::error::Error;\n use std::path::{Path, PathBuf};\n-use std::{env, fmt, fs, io};\n+use std::str::FromStr;\n+use std::{cmp, env, fmt, fs, io, iter};\n \n /// Holds information used by `MISSING_ENFORCED_IMPORT_RENAMES` lint.\n #[derive(Clone, Debug, Deserialize)]\n@@ -43,18 +44,33 @@ pub enum DisallowedType {\n #[derive(Default)]\n pub struct TryConf {\n     pub conf: Conf,\n-    pub errors: Vec<String>,\n+    pub errors: Vec<Box<dyn Error>>,\n }\n \n impl TryConf {\n-    fn from_error(error: impl Error) -> Self {\n+    fn from_error(error: impl Error + 'static) -> Self {\n         Self {\n             conf: Conf::default(),\n-            errors: vec![error.to_string()],\n+            errors: vec![Box::new(error)],\n         }\n     }\n }\n \n+#[derive(Debug)]\n+struct ConfError(String);\n+\n+impl fmt::Display for ConfError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        <String as fmt::Display>::fmt(&self.0, f)\n+    }\n+}\n+\n+impl Error for ConfError {}\n+\n+fn conf_error(s: String) -> Box<dyn Error> {\n+    Box::new(ConfError(s))\n+}\n+\n macro_rules! define_Conf {\n     ($(\n         $(#[doc = $doc:literal])+\n@@ -103,11 +119,11 @@ macro_rules! define_Conf {\n                 while let Some(name) = map.next_key::<&str>()? {\n                     match Field::deserialize(name.into_deserializer())? {\n                         $(Field::$name => {\n-                            $(errors.push(format!(\"deprecated field `{}`. {}\", name, $dep));)?\n+                            $(errors.push(conf_error(format!(\"deprecated field `{}`. {}\", name, $dep)));)?\n                             match map.next_value() {\n-                                Err(e) => errors.push(e.to_string()),\n+                                Err(e) => errors.push(conf_error(e.to_string())),\n                                 Ok(value) => match $name {\n-                                    Some(_) => errors.push(format!(\"duplicate field `{}`\", name)),\n+                                    Some(_) => errors.push(conf_error(format!(\"duplicate field `{}`\", name))),\n                                     None => $name = Some(value),\n                                 }\n                             }\n@@ -383,3 +399,102 @@ pub fn read(path: &Path) -> TryConf {\n     };\n     toml::from_str(&content).unwrap_or_else(TryConf::from_error)\n }\n+\n+const SEPARATOR_WIDTH: usize = 4;\n+\n+// Check whether the error is \"unknown field\" and, if so, list the available fields sorted and at\n+// least one per line, more if `CLIPPY_TERMINAL_WIDTH` is set and allows it.\n+pub fn format_error(error: Box<dyn Error>) -> String {\n+    let s = error.to_string();\n+\n+    if_chain! {\n+        if error.downcast::<toml::de::Error>().is_ok();\n+        if let Some((prefix, mut fields, suffix)) = parse_unknown_field_message(&s);\n+        then {\n+            use fmt::Write;\n+\n+            fields.sort_unstable();\n+\n+            let (rows, column_widths) = calculate_dimensions(&fields);\n+\n+            let mut msg = String::from(prefix);\n+            for row in 0..rows {\n+                write!(msg, \"\\n\").unwrap();\n+                for (column, column_width) in column_widths.iter().copied().enumerate() {\n+                    let index = column * rows + row;\n+                    let field = fields.get(index).copied().unwrap_or_default();\n+                    write!(\n+                        msg,\n+                        \"{:separator_width$}{:field_width$}\",\n+                        \" \",\n+                        field,\n+                        separator_width = SEPARATOR_WIDTH,\n+                        field_width = column_width\n+                    )\n+                    .unwrap();\n+                }\n+            }\n+            write!(msg, \"\\n{}\", suffix).unwrap();\n+            msg\n+        } else {\n+            s\n+        }\n+    }\n+}\n+\n+// `parse_unknown_field_message` will become unnecessary if\n+// https://github.com/alexcrichton/toml-rs/pull/364 is merged.\n+fn parse_unknown_field_message(s: &str) -> Option<(&str, Vec<&str>, &str)> {\n+    // An \"unknown field\" message has the following form:\n+    //   unknown field `UNKNOWN`, expected one of `FIELD0`, `FIELD1`, ..., `FIELDN` at line X column Y\n+    //                                           ^^      ^^^^                     ^^\n+    if_chain! {\n+        if s.starts_with(\"unknown field\");\n+        let slices = s.split(\"`, `\").collect::<Vec<_>>();\n+        let n = slices.len();\n+        if n >= 2;\n+        if let Some((prefix, first_field)) = slices[0].rsplit_once(\" `\");\n+        if let Some((last_field, suffix)) = slices[n - 1].split_once(\"` \");\n+        then {\n+            let fields = iter::once(first_field)\n+                .chain(slices[1..n - 1].iter().copied())\n+                .chain(iter::once(last_field))\n+                .collect::<Vec<_>>();\n+            Some((prefix, fields, suffix))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+fn calculate_dimensions(fields: &[&str]) -> (usize, Vec<usize>) {\n+    let columns = env::var(\"CLIPPY_TERMINAL_WIDTH\")\n+        .ok()\n+        .and_then(|s| <usize as FromStr>::from_str(&s).ok())\n+        .map_or(1, |terminal_width| {\n+            let max_field_width = fields.iter().map(|field| field.len()).max().unwrap();\n+            cmp::max(1, terminal_width / (SEPARATOR_WIDTH + max_field_width))\n+        });\n+\n+    let rows = (fields.len() + (columns - 1)) / columns;\n+\n+    let column_widths = (0..columns)\n+        .map(|column| {\n+            if column < columns - 1 {\n+                (0..rows)\n+                    .map(|row| {\n+                        let index = column * rows + row;\n+                        let field = fields.get(index).copied().unwrap_or_default();\n+                        field.len()\n+                    })\n+                    .max()\n+                    .unwrap()\n+            } else {\n+                // Avoid adding extra space to the last column.\n+                0\n+            }\n+        })\n+        .collect::<Vec<_>>();\n+\n+    (rows, column_widths)\n+}"}, {"sha": "9ee4a40cbf2424715733eeab4e156055f52932e5", "filename": "src/main.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/564725775bd200de131b96f4d93a36bd64508e72/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/564725775bd200de131b96f4d93a36bd64508e72/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=564725775bd200de131b96f4d93a36bd64508e72", "patch": "@@ -123,8 +123,12 @@ impl ClippyCmd {\n             .map(|arg| format!(\"{}__CLIPPY_HACKERY__\", arg))\n             .collect();\n \n+        // Currently, `CLIPPY_TERMINAL_WIDTH` is used only to format \"unknown field\" error messages.\n+        let terminal_width = termize::dimensions().map_or(0, |(w, _)| w);\n+\n         cmd.env(\"RUSTC_WORKSPACE_WRAPPER\", Self::path())\n             .env(\"CLIPPY_ARGS\", clippy_args)\n+            .env(\"CLIPPY_TERMINAL_WIDTH\", terminal_width.to_string())\n             .arg(self.cargo_subcommand)\n             .args(&self.args);\n "}, {"sha": "92838aa57dfdaa9e1e93694bee9d17d3c49dd762", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/564725775bd200de131b96f4d93a36bd64508e72/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/564725775bd200de131b96f4d93a36bd64508e72/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=564725775bd200de131b96f4d93a36bd64508e72", "patch": "@@ -1,4 +1,43 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `enforced-import-renames`, `allowed-scripts`, `enable-raw-pointer-heuristic-for-send`, `max-suggested-slice-pattern-length`, `await-holding-invalid-types`, `max-include-file-size`, `allow-expect-in-tests`, `allow-unwrap-in-tests`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of\n+           allow-expect-in-tests\n+           allow-unwrap-in-tests\n+           allowed-scripts\n+           array-size-threshold\n+           avoid-breaking-exported-api\n+           await-holding-invalid-types\n+           blacklisted-names\n+           cargo-ignore-publish\n+           cognitive-complexity-threshold\n+           cyclomatic-complexity-threshold\n+           disallowed-methods\n+           disallowed-types\n+           doc-valid-idents\n+           enable-raw-pointer-heuristic-for-send\n+           enforced-import-renames\n+           enum-variant-name-threshold\n+           enum-variant-size-threshold\n+           literal-representation-threshold\n+           max-fn-params-bools\n+           max-include-file-size\n+           max-struct-bools\n+           max-suggested-slice-pattern-length\n+           max-trait-bounds\n+           msrv\n+           pass-by-value-size-limit\n+           single-char-binding-names-threshold\n+           standard-macro-braces\n+           third-party\n+           too-large-for-stack\n+           too-many-arguments-threshold\n+           too-many-lines-threshold\n+           trivial-copy-size-limit\n+           type-complexity-threshold\n+           unreadable-literal-lint-fractions\n+           upper-case-acronyms-aggressive\n+           vec-box-size-threshold\n+           verbose-bit-mask-threshold\n+           warn-on-all-wildcard-imports\n+       at line 5 column 1\n \n error: aborting due to previous error\n "}]}