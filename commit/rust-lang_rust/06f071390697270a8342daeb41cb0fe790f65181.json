{"sha": "06f071390697270a8342daeb41cb0fe790f65181", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZjA3MTM5MDY5NzI3MGE4MzQyZGFlYjQxY2IwZmU3OTBmNjUxODE=", "commit": {"author": {"name": "Ralph Giles", "email": "giles@thaumas.net", "date": "2011-05-05T06:19:38Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-05T17:55:54Z"}, "message": "Mark valgrind's _qzz_res as unused to silence warnings on gcc 4.6.\n\nThis applies c11675 by Julian Seward from valgrind trunk\n(svn://svn.valgrind.org/valgrind/trunk) to rustrt's included\ncopies of memcheck.h and valgrind.h, effectively backporting\nthe fix from the unreleased 3.6.2. The commit simply applies\nthe gcc 'unused' attribute to the relevant declarations.\n\nThis change allows compilation of the runtime code under\ngcc 4.6 with -Werror, as the makefile currently requests.", "tree": {"sha": "a43e5bb61c2e3a5b4ed217446a8e2b4198948019", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a43e5bb61c2e3a5b4ed217446a8e2b4198948019"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06f071390697270a8342daeb41cb0fe790f65181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06f071390697270a8342daeb41cb0fe790f65181", "html_url": "https://github.com/rust-lang/rust/commit/06f071390697270a8342daeb41cb0fe790f65181", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06f071390697270a8342daeb41cb0fe790f65181/comments", "author": {"login": "rillian", "id": 225102, "node_id": "MDQ6VXNlcjIyNTEwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/225102?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rillian", "html_url": "https://github.com/rillian", "followers_url": "https://api.github.com/users/rillian/followers", "following_url": "https://api.github.com/users/rillian/following{/other_user}", "gists_url": "https://api.github.com/users/rillian/gists{/gist_id}", "starred_url": "https://api.github.com/users/rillian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rillian/subscriptions", "organizations_url": "https://api.github.com/users/rillian/orgs", "repos_url": "https://api.github.com/users/rillian/repos", "events_url": "https://api.github.com/users/rillian/events{/privacy}", "received_events_url": "https://api.github.com/users/rillian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fea623211fafb2ce719eeb9ed47cdb9624e1fbe8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fea623211fafb2ce719eeb9ed47cdb9624e1fbe8", "html_url": "https://github.com/rust-lang/rust/commit/fea623211fafb2ce719eeb9ed47cdb9624e1fbe8"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "58480256e19dcf080829ebb2a274d9639c6c92bf", "filename": "src/rt/memcheck.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06f071390697270a8342daeb41cb0fe790f65181/src%2Frt%2Fmemcheck.h", "raw_url": "https://github.com/rust-lang/rust/raw/06f071390697270a8342daeb41cb0fe790f65181/src%2Frt%2Fmemcheck.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fmemcheck.h?ref=06f071390697270a8342daeb41cb0fe790f65181", "patch": "@@ -184,15 +184,15 @@ typedef\n \n /* Do a full memory leak check (like --leak-check=full) mid-execution. */\n #define VALGRIND_DO_LEAK_CHECK                                   \\\n-   {unsigned long _qzz_res;                                      \\\n+   {unsigned long _qzz_res __attribute((unused));                \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                      \\\n                             VG_USERREQ__DO_LEAK_CHECK,           \\\n                             0, 0, 0, 0, 0);                      \\\n    }\n \n /* Do a summary memory leak check (like --leak-check=summary) mid-execution. */\n #define VALGRIND_DO_QUICK_LEAK_CHECK\t\t\t\t \\\n-   {unsigned long _qzz_res;                                      \\\n+   {unsigned long _qzz_res __attribute((unused));                \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                      \\\n                             VG_USERREQ__DO_LEAK_CHECK,           \\\n                             1, 0, 0, 0, 0);                      \\\n@@ -207,7 +207,7 @@ typedef\n       are.  We also initialise '_qzz_leaked', etc because\n       VG_USERREQ__COUNT_LEAKS doesn't mark the values returned as\n       defined. */                                                        \\\n-   {unsigned long _qzz_res;                                              \\\n+   {unsigned long _qzz_res __attribute((unused));                        \\\n     unsigned long _qzz_leaked    = 0, _qzz_dubious    = 0;               \\\n     unsigned long _qzz_reachable = 0, _qzz_suppressed = 0;               \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                              \\\n@@ -229,7 +229,7 @@ typedef\n       are.  We also initialise '_qzz_leaked', etc because\n       VG_USERREQ__COUNT_LEAKS doesn't mark the values returned as\n       defined. */                                                        \\\n-   {unsigned long _qzz_res;                                              \\\n+   {unsigned long _qzz_res __attribute((unused));                        \\\n     unsigned long _qzz_leaked    = 0, _qzz_dubious    = 0;               \\\n     unsigned long _qzz_reachable = 0, _qzz_suppressed = 0;               \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                              \\"}, {"sha": "737cc2a8b42241d4dfed5242adf20420a369efd0", "filename": "src/rt/valgrind.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/06f071390697270a8342daeb41cb0fe790f65181/src%2Frt%2Fvalgrind.h", "raw_url": "https://github.com/rust-lang/rust/raw/06f071390697270a8342daeb41cb0fe790f65181/src%2Frt%2Fvalgrind.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fvalgrind.h?ref=06f071390697270a8342daeb41cb0fe790f65181", "patch": "@@ -4403,7 +4403,7 @@ vg_VALGRIND_DO_CLIENT_REQUEST_EXPR(uintptr_t _zzq_default,\n    since it provides a way to make sure valgrind will retranslate the\n    invalidated area.  Returns no value. */\n #define VALGRIND_DISCARD_TRANSLATIONS(_qzz_addr,_qzz_len)         \\\n-   {unsigned int _qzz_res;                                        \\\n+   {unsigned int _qzz_res __attribute((unused));                  \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                       \\\n                                VG_USERREQ__DISCARD_TRANSLATIONS,  \\\n                                _qzz_addr, _qzz_len, 0, 0, 0);     \\\n@@ -4652,7 +4652,7 @@ VALGRIND_PRINTF_BACKTRACE(const char *format, ...)\n    Ignored if addr == 0.\n */\n #define VALGRIND_MALLOCLIKE_BLOCK(addr, sizeB, rzB, is_zeroed)    \\\n-   {unsigned int _qzz_res;                                        \\\n+   {unsigned int _qzz_res __attribute((unused));                  \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                       \\\n                                VG_USERREQ__MALLOCLIKE_BLOCK,      \\\n                                addr, sizeB, rzB, is_zeroed, 0);   \\\n@@ -4662,63 +4662,63 @@ VALGRIND_PRINTF_BACKTRACE(const char *format, ...)\n    Ignored if addr == 0.\n */\n #define VALGRIND_FREELIKE_BLOCK(addr, rzB)                        \\\n-   {unsigned int _qzz_res;                                        \\\n+   {unsigned int _qzz_res __attribute((unused));                  \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                       \\\n                                VG_USERREQ__FREELIKE_BLOCK,        \\\n                                addr, rzB, 0, 0, 0);               \\\n    }\n \n /* Create a memory pool. */\n #define VALGRIND_CREATE_MEMPOOL(pool, rzB, is_zeroed)             \\\n-   {unsigned int _qzz_res;                                        \\\n+   {unsigned int _qzz_res __attribute((unused));                  \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                       \\\n                                VG_USERREQ__CREATE_MEMPOOL,        \\\n                                pool, rzB, is_zeroed, 0, 0);       \\\n    }\n \n /* Destroy a memory pool. */\n #define VALGRIND_DESTROY_MEMPOOL(pool)                            \\\n-   {unsigned int _qzz_res;                                        \\\n+   {unsigned int _qzz_res __attribute((unused));                  \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                       \\\n                                VG_USERREQ__DESTROY_MEMPOOL,       \\\n                                pool, 0, 0, 0, 0);                 \\\n    }\n \n /* Associate a piece of memory with a memory pool. */\n #define VALGRIND_MEMPOOL_ALLOC(pool, addr, size)                  \\\n-   {unsigned int _qzz_res;                                        \\\n+   {unsigned int _qzz_res __attribute((unused));                  \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                       \\\n                                VG_USERREQ__MEMPOOL_ALLOC,         \\\n                                pool, addr, size, 0, 0);           \\\n    }\n \n /* Disassociate a piece of memory from a memory pool. */\n #define VALGRIND_MEMPOOL_FREE(pool, addr)                         \\\n-   {unsigned int _qzz_res;                                        \\\n+   {unsigned int _qzz_res __attribute((unused));                  \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                       \\\n                                VG_USERREQ__MEMPOOL_FREE,          \\\n                                pool, addr, 0, 0, 0);              \\\n    }\n \n /* Disassociate any pieces outside a particular range. */\n #define VALGRIND_MEMPOOL_TRIM(pool, addr, size)                   \\\n-   {unsigned int _qzz_res;                                        \\\n+   {unsigned int _qzz_res __attribute((unused));                  \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                       \\\n                                VG_USERREQ__MEMPOOL_TRIM,          \\\n                                pool, addr, size, 0, 0);           \\\n    }\n \n /* Resize and/or move a piece associated with a memory pool. */\n #define VALGRIND_MOVE_MEMPOOL(poolA, poolB)                       \\\n-   {unsigned int _qzz_res;                                        \\\n+   {unsigned int _qzz_res __attribute((unused));                  \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                       \\\n                                VG_USERREQ__MOVE_MEMPOOL,          \\\n                                poolA, poolB, 0, 0, 0);            \\\n    }\n \n /* Resize and/or move a piece associated with a memory pool. */\n #define VALGRIND_MEMPOOL_CHANGE(pool, addrA, addrB, size)         \\\n-   {unsigned int _qzz_res;                                        \\\n+   {unsigned int _qzz_res __attribute((unused));                  \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                       \\\n                                VG_USERREQ__MEMPOOL_CHANGE,        \\\n                                pool, addrA, addrB, size, 0);      \\\n@@ -4747,23 +4747,23 @@ VALGRIND_PRINTF_BACKTRACE(const char *format, ...)\n /* Unmark the piece of memory associated with a stack id as being a\n    stack. */\n #define VALGRIND_STACK_DEREGISTER(id)                             \\\n-   {unsigned int _qzz_res;                                        \\\n+   {unsigned int _qzz_res __attribute((unused));                  \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                       \\\n                                VG_USERREQ__STACK_DEREGISTER,      \\\n                                id, 0, 0, 0, 0);                   \\\n    }\n \n /* Change the start and end address of the stack id. */\n #define VALGRIND_STACK_CHANGE(id, start, end)                     \\\n-   {unsigned int _qzz_res;                                        \\\n+   {unsigned int _qzz_res __attribute((unused));                  \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                       \\\n                                VG_USERREQ__STACK_CHANGE,          \\\n                                id, start, end, 0, 0);             \\\n    }\n \n /* Load PDB debug info for Wine PE image_map. */\n #define VALGRIND_LOAD_PDB_DEBUGINFO(fd, ptr, total_size, delta)   \\\n-   {unsigned int _qzz_res;                                        \\\n+   {unsigned int _qzz_res __attribute((unused));                  \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                       \\\n                                VG_USERREQ__LOAD_PDB_DEBUGINFO,    \\\n                                fd, ptr, total_size, delta, 0);    \\\n@@ -4774,7 +4774,7 @@ VALGRIND_PRINTF_BACKTRACE(const char *format, ...)\n    result will be dumped in there and is guaranteed to be zero\n    terminated.  If no info is found, the first byte is set to zero. */\n #define VALGRIND_MAP_IP_TO_SRCLOC(addr, buf64)                    \\\n-   {unsigned int _qzz_res;                                        \\\n+   {unsigned int _qzz_res __attribute((unused));                  \\\n     VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0,                       \\\n                                VG_USERREQ__MAP_IP_TO_SRCLOC,      \\\n                                addr, buf64, 0, 0, 0);             \\"}]}