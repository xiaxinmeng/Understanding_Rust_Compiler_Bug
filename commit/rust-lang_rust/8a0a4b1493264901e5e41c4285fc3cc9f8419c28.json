{"sha": "8a0a4b1493264901e5e41c4285fc3cc9f8419c28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMGE0YjE0OTMyNjQ5MDFlNWU0MWM0Mjg1ZmMzY2M5Zjg0MTljMjg=", "commit": {"author": {"name": "Mohsen Zohrevandi", "email": "mohsen.zohrevandi@fortanix.com", "date": "2021-04-29T15:44:45Z"}, "committer": {"name": "Mohsen Zohrevandi", "email": "mohsen.zohrevandi@fortanix.com", "date": "2021-04-29T15:51:18Z"}, "message": "Use atomics in join_orders_after_tls_destructors test\n\nstd::sync::mpsc uses thread locals and depending on the order TLS dtors\nare run `rx.recv()` can panic when used in a TLS dtor.", "tree": {"sha": "16166f17ae1c932d53c10a523498fbe4dc2a91e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16166f17ae1c932d53c10a523498fbe4dc2a91e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a0a4b1493264901e5e41c4285fc3cc9f8419c28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a0a4b1493264901e5e41c4285fc3cc9f8419c28", "html_url": "https://github.com/rust-lang/rust/commit/8a0a4b1493264901e5e41c4285fc3cc9f8419c28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a0a4b1493264901e5e41c4285fc3cc9f8419c28/comments", "author": {"login": "mzohreva", "id": 1142455, "node_id": "MDQ6VXNlcjExNDI0NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1142455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzohreva", "html_url": "https://github.com/mzohreva", "followers_url": "https://api.github.com/users/mzohreva/followers", "following_url": "https://api.github.com/users/mzohreva/following{/other_user}", "gists_url": "https://api.github.com/users/mzohreva/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzohreva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzohreva/subscriptions", "organizations_url": "https://api.github.com/users/mzohreva/orgs", "repos_url": "https://api.github.com/users/mzohreva/repos", "events_url": "https://api.github.com/users/mzohreva/events{/privacy}", "received_events_url": "https://api.github.com/users/mzohreva/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mzohreva", "id": 1142455, "node_id": "MDQ6VXNlcjExNDI0NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1142455?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mzohreva", "html_url": "https://github.com/mzohreva", "followers_url": "https://api.github.com/users/mzohreva/followers", "following_url": "https://api.github.com/users/mzohreva/following{/other_user}", "gists_url": "https://api.github.com/users/mzohreva/gists{/gist_id}", "starred_url": "https://api.github.com/users/mzohreva/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mzohreva/subscriptions", "organizations_url": "https://api.github.com/users/mzohreva/orgs", "repos_url": "https://api.github.com/users/mzohreva/repos", "events_url": "https://api.github.com/users/mzohreva/events{/privacy}", "received_events_url": "https://api.github.com/users/mzohreva/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d9eeff062053f87ab900fc7ebde6eb13a2a1645", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9eeff062053f87ab900fc7ebde6eb13a2a1645", "html_url": "https://github.com/rust-lang/rust/commit/5d9eeff062053f87ab900fc7ebde6eb13a2a1645"}], "stats": {"total": 122, "additions": 88, "deletions": 34}, "files": [{"sha": "494ad4e5fda9a5fe1b7eb37188dd9ca4c1355286", "filename": "library/std/src/thread/local/tests.rs", "status": "modified", "additions": 88, "deletions": 34, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/8a0a4b1493264901e5e41c4285fc3cc9f8419c28/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a0a4b1493264901e5e41c4285fc3cc9f8419c28/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs?ref=8a0a4b1493264901e5e41c4285fc3cc9f8419c28", "patch": "@@ -1,6 +1,6 @@\n use crate::cell::{Cell, UnsafeCell};\n-use crate::sync::atomic::{AtomicBool, Ordering};\n-use crate::sync::mpsc::{self, channel, Sender};\n+use crate::sync::atomic::{AtomicU8, Ordering};\n+use crate::sync::mpsc::{channel, Sender};\n use crate::thread::{self, LocalKey};\n use crate::thread_local;\n \n@@ -217,46 +217,100 @@ fn dtors_in_dtors_in_dtors_const_init() {\n // thread::yield_now and running the test several times.\n #[test]\n fn join_orders_after_tls_destructors() {\n-    static THREAD2_LAUNCHED: AtomicBool = AtomicBool::new(false);\n+    // We emulate a synchronous MPSC rendezvous channel using only atomics and\n+    // thread::yield_now. We can't use std::mpsc as the implementation itself\n+    // may rely on thread locals.\n+    //\n+    // The basic state machine for an SPSC rendezvous channel is:\n+    //           FRESH -> THREAD1_WAITING -> MAIN_THREAD_RENDEZVOUS\n+    // where the first transition is done by the \u201creceiving\u201d thread and the 2nd\n+    // transition is done by the \u201csending\u201d thread.\n+    //\n+    // We add an additional state `THREAD2_LAUNCHED` between `FRESH` and\n+    // `THREAD1_WAITING` to block until all threads are actually running.\n+    //\n+    // A thread that joins on the \u201creceiving\u201d thread completion should never\n+    // observe the channel in the `THREAD1_WAITING` state. If this does occur,\n+    // we switch to the \u201cpoison\u201d state `THREAD2_JOINED` and panic all around.\n+    // (This is equivalent to \u201csending\u201d from an alternate producer thread.)\n+    const FRESH: u8 = 0;\n+    const THREAD2_LAUNCHED: u8 = 1;\n+    const THREAD1_WAITING: u8 = 2;\n+    const MAIN_THREAD_RENDEZVOUS: u8 = 3;\n+    const THREAD2_JOINED: u8 = 4;\n+    static SYNC_STATE: AtomicU8 = AtomicU8::new(FRESH);\n \n     for _ in 0..10 {\n-        let (tx, rx) = mpsc::sync_channel(0);\n-        THREAD2_LAUNCHED.store(false, Ordering::SeqCst);\n+        SYNC_STATE.store(FRESH, Ordering::SeqCst);\n+\n+        let jh = thread::Builder::new()\n+            .name(\"thread1\".into())\n+            .spawn(move || {\n+                struct TlDrop;\n+\n+                impl Drop for TlDrop {\n+                    fn drop(&mut self) {\n+                        loop {\n+                            match SYNC_STATE.load(Ordering::SeqCst) {\n+                                FRESH => thread::yield_now(),\n+                                THREAD2_LAUNCHED => break,\n+                                v => unreachable!(\"sync state: {}\", v),\n+                            }\n+                        }\n+                        let mut sync_state = SYNC_STATE.swap(THREAD1_WAITING, Ordering::SeqCst);\n+                        loop {\n+                            match sync_state {\n+                                THREAD2_LAUNCHED | THREAD1_WAITING => thread::yield_now(),\n+                                MAIN_THREAD_RENDEZVOUS => break,\n+                                THREAD2_JOINED => panic!(\n+                                    \"Thread 1 still running after thread 2 joined on thread 1\"\n+                                ),\n+                                v => unreachable!(\"sync state: {}\", v),\n+                            }\n+                            sync_state = SYNC_STATE.load(Ordering::SeqCst);\n+                        }\n+                    }\n+                }\n \n-        let jh = thread::spawn(move || {\n-            struct RecvOnDrop(Cell<Option<mpsc::Receiver<()>>>);\n+                thread_local! {\n+                    static TL_DROP: TlDrop = TlDrop;\n+                }\n \n-            impl Drop for RecvOnDrop {\n-                fn drop(&mut self) {\n-                    let rx = self.0.take().unwrap();\n-                    while !THREAD2_LAUNCHED.load(Ordering::SeqCst) {\n-                        thread::yield_now();\n+                TL_DROP.with(|_| {})\n+            })\n+            .unwrap();\n+\n+        let jh2 = thread::Builder::new()\n+            .name(\"thread2\".into())\n+            .spawn(move || {\n+                assert_eq!(SYNC_STATE.swap(THREAD2_LAUNCHED, Ordering::SeqCst), FRESH);\n+                jh.join().unwrap();\n+                match SYNC_STATE.swap(THREAD2_JOINED, Ordering::SeqCst) {\n+                    MAIN_THREAD_RENDEZVOUS => return,\n+                    THREAD2_LAUNCHED | THREAD1_WAITING => {\n+                        panic!(\"Thread 2 running after thread 1 join before main thread rendezvous\")\n                     }\n-                    rx.recv().unwrap();\n+                    v => unreachable!(\"sync state: {:?}\", v),\n                 }\n+            })\n+            .unwrap();\n+\n+        loop {\n+            match SYNC_STATE.compare_exchange_weak(\n+                THREAD1_WAITING,\n+                MAIN_THREAD_RENDEZVOUS,\n+                Ordering::SeqCst,\n+                Ordering::SeqCst,\n+            ) {\n+                Ok(_) => break,\n+                Err(FRESH) => thread::yield_now(),\n+                Err(THREAD2_LAUNCHED) => thread::yield_now(),\n+                Err(THREAD2_JOINED) => {\n+                    panic!(\"Main thread rendezvous after thread 2 joined thread 1\")\n+                }\n+                v => unreachable!(\"sync state: {:?}\", v),\n             }\n-\n-            thread_local! {\n-                static TL_RX: RecvOnDrop = RecvOnDrop(Cell::new(None));\n-            }\n-\n-            TL_RX.with(|v| v.0.set(Some(rx)))\n-        });\n-\n-        let tx_clone = tx.clone();\n-        let jh2 = thread::spawn(move || {\n-            THREAD2_LAUNCHED.store(true, Ordering::SeqCst);\n-            jh.join().unwrap();\n-            tx_clone.send(()).expect_err(\n-                \"Expecting channel to be closed because thread 1 TLS destructors must've run\",\n-            );\n-        });\n-\n-        while !THREAD2_LAUNCHED.load(Ordering::SeqCst) {\n-            thread::yield_now();\n         }\n-        thread::yield_now();\n-        tx.send(()).expect(\"Expecting channel to be live because thread 2 must block on join\");\n         jh2.join().unwrap();\n     }\n }"}]}