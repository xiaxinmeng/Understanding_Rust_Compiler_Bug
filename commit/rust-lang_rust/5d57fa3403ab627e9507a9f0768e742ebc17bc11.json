{"sha": "5d57fa3403ab627e9507a9f0768e742ebc17bc11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNTdmYTM0MDNhYjYyN2U5NTA3YTlmMDc2OGU3NDJlYmMxN2JjMTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-02-06T15:13:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-02-11T04:48:28Z"}, "message": "update ebml interface", "tree": {"sha": "6449ba092d2fe2eb73bc208bb6948c946387ee79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6449ba092d2fe2eb73bc208bb6948c946387ee79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d57fa3403ab627e9507a9f0768e742ebc17bc11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d57fa3403ab627e9507a9f0768e742ebc17bc11", "html_url": "https://github.com/rust-lang/rust/commit/5d57fa3403ab627e9507a9f0768e742ebc17bc11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d57fa3403ab627e9507a9f0768e742ebc17bc11/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efd393d6137b06715dbd3a3e18bfd7ae4bd9bb6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/efd393d6137b06715dbd3a3e18bfd7ae4bd9bb6b", "html_url": "https://github.com/rust-lang/rust/commit/efd393d6137b06715dbd3a3e18bfd7ae4bd9bb6b"}], "stats": {"total": 68, "additions": 44, "deletions": 24}, "files": [{"sha": "9395558332f913cc431a92be2042035405cb736d", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5d57fa3403ab627e9507a9f0768e742ebc17bc11/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d57fa3403ab627e9507a9f0768e742ebc17bc11/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=5d57fa3403ab627e9507a9f0768e742ebc17bc11", "patch": "@@ -2,6 +2,7 @@\n \n import std::{io, ebml, map, list};\n import io::writer_util;\n+import ebml::writer_util;\n import syntax::ast::*;\n import syntax::ast_util;\n import syntax::ast_util::local_def;\n@@ -21,15 +22,22 @@ type encode_ctxt = {ccx: @crate_ctxt, type_abbrevs: abbrev_map};\n \n // Path table encoding\n fn encode_name(ebml_w: ebml::writer, name: str) {\n-    ebml::start_tag(ebml_w, tag_paths_data_name);\n-    ebml_w.writer.write(str::bytes(name));\n-    ebml::end_tag(ebml_w);\n+    ebml_w.wr_tag(tag_paths_data_name) {||\n+        ebml_w.wr_str(name);\n+    }\n }\n \n fn encode_def_id(ebml_w: ebml::writer, id: def_id) {\n-    ebml::start_tag(ebml_w, tag_def_id);\n-    ebml_w.writer.write(str::bytes(def_to_str(id)));\n-    ebml::end_tag(ebml_w);\n+    ebml_w.wr_tag(tag_def_id) {||\n+        ebml_w.wr_str(def_to_str(id));\n+    }\n+}\n+\n+fn encode_named_def_id(ebml_w: ebml::writer, name: str, id: def_id) {\n+    ebml_w.wr_tag(tag_paths_data_item) {||\n+        encode_name(ebml_w, name);\n+        encode_def_id(ebml_w, id);\n+    }\n }\n \n type entry<T> = {val: T, pos: uint};\n@@ -38,10 +46,10 @@ fn encode_enum_variant_paths(ebml_w: ebml::writer, variants: [variant],\n                             path: [str], &index: [entry<str>]) {\n     for variant: variant in variants {\n         add_to_index(ebml_w, path, index, variant.node.name);\n-        ebml::start_tag(ebml_w, tag_paths_data_item);\n-        encode_name(ebml_w, variant.node.name);\n-        encode_def_id(ebml_w, local_def(variant.node.id));\n-        ebml::end_tag(ebml_w);\n+        ebml_w.wr_tag(tag_paths_data_item) {||\n+            encode_name(ebml_w, variant.node.name);\n+            encode_def_id(ebml_w, local_def(variant.node.id));\n+        }\n     }\n }\n \n@@ -56,10 +64,7 @@ fn encode_native_module_item_paths(ebml_w: ebml::writer, nmod: native_mod,\n                                    path: [str], &index: [entry<str>]) {\n     for nitem: @native_item in nmod.items {\n         add_to_index(ebml_w, path, index, nitem.ident);\n-        ebml::start_tag(ebml_w, tag_paths_data_item);\n-        encode_name(ebml_w, nitem.ident);\n-        encode_def_id(ebml_w, local_def(nitem.id));\n-        ebml::end_tag(ebml_w);\n+        encode_named_def_id(ebml_w, nitem.ident, local_def(nitem.id));\n     }\n }\n \n@@ -71,17 +76,11 @@ fn encode_module_item_paths(ebml_w: ebml::writer, module: _mod, path: [str],\n         alt it.node {\n           item_const(_, _) {\n             add_to_index(ebml_w, path, index, it.ident);\n-            ebml::start_tag(ebml_w, tag_paths_data_item);\n-            encode_name(ebml_w, it.ident);\n-            encode_def_id(ebml_w, local_def(it.id));\n-            ebml::end_tag(ebml_w);\n+            encode_named_def_id(ebml_w, it.ident, local_def(it.id));\n           }\n           item_fn(_, tps, _) {\n             add_to_index(ebml_w, path, index, it.ident);\n-            ebml::start_tag(ebml_w, tag_paths_data_item);\n-            encode_name(ebml_w, it.ident);\n-            encode_def_id(ebml_w, local_def(it.id));\n-            ebml::end_tag(ebml_w);\n+            encode_named_def_id(ebml_w, it.ident, local_def(it.id));\n           }\n           item_mod(_mod) {\n             add_to_index(ebml_w, path, index, it.ident);"}, {"sha": "08f73c02aac5ac5db8d9855297993c2b099ee67c", "filename": "src/etc/ctags.rust", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d57fa3403ab627e9507a9f0768e742ebc17bc11/src%2Fetc%2Fctags.rust", "raw_url": "https://github.com/rust-lang/rust/raw/5d57fa3403ab627e9507a9f0768e742ebc17bc11/src%2Fetc%2Fctags.rust", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fctags.rust?ref=5d57fa3403ab627e9507a9f0768e742ebc17bc11", "patch": "@@ -5,3 +5,4 @@\n --regex-rust=/[ \\t]*enum[ \\t]+([a-zA-Z0-9_]+)/\\1/T,types/\n --regex-rust=/[ \\t]*resource[ \\t]+([a-zA-Z0-9_]+)/\\1/T,types/\n --regex-rust=/[ \\t]*mod[ \\t]+([a-zA-Z0-9_]+)/\\1/m,modules/\n+--regex-rust=/[ \\t]*const[ \\t]+([a-zA-Z0-9_]+)/\\1/m,consts/"}, {"sha": "c4b07086acde8111c5fc4556606010ff57056980", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5d57fa3403ab627e9507a9f0768e742ebc17bc11/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d57fa3403ab627e9507a9f0768e742ebc17bc11/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=5d57fa3403ab627e9507a9f0768e742ebc17bc11", "patch": "@@ -154,10 +154,9 @@ fn create_writer(w: io::writer) -> writer {\n // TODO: Provide a function to write the standard ebml header.\n fn start_tag(w: writer, tag_id: uint) {\n     // Write the enum ID:\n-\n     write_vint(w.writer, tag_id);\n-    // Write a placeholder four-byte size.\n \n+    // Write a placeholder four-byte size.\n     w.size_positions += [w.writer.tell()];\n     let zeroes: [u8] = [0u8, 0u8, 0u8, 0u8];\n     w.writer.write(zeroes);\n@@ -170,5 +169,26 @@ fn end_tag(w: writer) {\n     write_sized_vint(w.writer, cur_pos - last_size_pos - 4u, 4u);\n     w.writer.seek(cur_pos as int, io::seek_set);\n }\n+\n+impl writer_util for writer {\n+    fn wr_tag(tag_id: uint, blk: fn()) {\n+        start_tag(self, tag_id);\n+        blk();\n+        end_tag(self);\n+    }\n+\n+    fn wr_uint(id: uint) {\n+        write_vint(self.writer, id);\n+    }\n+\n+    fn wr_bytes(b: [u8]) {\n+        self.writer.write(b);\n+    }\n+\n+    fn wr_str(s: str) {\n+        self.wr_bytes(str::bytes(s));\n+    }\n+}\n+\n // TODO: optionally perform \"relaxations\" on end_tag to more efficiently\n // encode sizes; this is a fixed point iteration"}]}