{"sha": "78beb4c444b090159b3536a573d6807d9e11d3e0", "node_id": "C_kwDOAAsO6NoAKDc4YmViNGM0NDRiMDkwMTU5YjM1MzZhNTczZDY4MDdkOWUxMWQzZTA", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2022-07-03T07:22:10Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2022-07-03T07:22:10Z"}, "message": "Bump chalk", "tree": {"sha": "ac6ce3f838ffeb7e4e8c2e9bb4462e61a70c9688", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac6ce3f838ffeb7e4e8c2e9bb4462e61a70c9688"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78beb4c444b090159b3536a573d6807d9e11d3e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78beb4c444b090159b3536a573d6807d9e11d3e0", "html_url": "https://github.com/rust-lang/rust/commit/78beb4c444b090159b3536a573d6807d9e11d3e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78beb4c444b090159b3536a573d6807d9e11d3e0/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e05e6c60a7fe2f3477c1b61e74458d0199181c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/e05e6c60a7fe2f3477c1b61e74458d0199181c07", "html_url": "https://github.com/rust-lang/rust/commit/e05e6c60a7fe2f3477c1b61e74458d0199181c07"}], "stats": {"total": 134, "additions": 67, "deletions": 67}, "files": [{"sha": "bbcc4ad29f6e82cc5e4fa5c6029d5414b5ee496c", "filename": "Cargo.lock", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/78beb4c444b090159b3536a573d6807d9e11d3e0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/78beb4c444b090159b3536a573d6807d9e11d3e0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=78beb4c444b090159b3536a573d6807d9e11d3e0", "patch": "@@ -171,9 +171,9 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"chalk-derive\"\n-version = \"0.82.0\"\n+version = \"0.83.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ee9cd790d543c29ce953abcb28d54b9fbaf9c4033bfd3024de99b1aa0f3c3ada\"\n+checksum = \"83553c2ef7717e58aecdf42dd9e3c876229f5a1f35a16435b5ddc4addef81827\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -183,9 +183,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-ir\"\n-version = \"0.82.0\"\n+version = \"0.83.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dddf2c11f9de666c08c7591eb113efcdc740bd8ac602915475b045bcbe7f27a5\"\n+checksum = \"2dd42107d579d8ec2a5af20a8de62a37524a67bf6a4c0ff08a950068f0bfea91\"\n dependencies = [\n  \"bitflags\",\n  \"chalk-derive\",\n@@ -194,9 +194,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-recursive\"\n-version = \"0.82.0\"\n+version = \"0.83.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a60d5b35598702963ffd145b8bfa0d8d8ae9da3a731e4e0814aa21541b85c2d5\"\n+checksum = \"c444031541a76c13c145e76d91f1548e9feb2240e7f0c3e77879ceb694994f2d\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\",\n@@ -207,9 +207,9 @@ dependencies = [\n \n [[package]]\n name = \"chalk-solve\"\n-version = \"0.82.0\"\n+version = \"0.83.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d99da4fa3b224c07f6c2506e6905bca9d6aad665f11d25364e6818a7ea149215\"\n+checksum = \"c76f2db19c5e8a3d42340cf5b4d90b8c218750536fca35e2bb285ab6653c0bc8\"\n dependencies = [\n  \"chalk-derive\",\n  \"chalk-ir\","}, {"sha": "d359cb0ed1451e3762e25371e63234430308940c", "filename": "crates/hir-ty/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78beb4c444b090159b3536a573d6807d9e11d3e0/crates%2Fhir-ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/78beb4c444b090159b3536a573d6807d9e11d3e0/crates%2Fhir-ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2FCargo.toml?ref=78beb4c444b090159b3536a573d6807d9e11d3e0", "patch": "@@ -18,9 +18,9 @@ ena = \"0.14.0\"\n tracing = \"0.1.35\"\n rustc-hash = \"1.1.0\"\n scoped-tls = \"1.0.0\"\n-chalk-solve = { version = \"0.82.0\", default-features = false }\n-chalk-ir = \"0.82.0\"\n-chalk-recursive = { version = \"0.82.0\", default-features = false }\n+chalk-solve = { version = \"0.83.0\", default-features = false }\n+chalk-ir = \"0.83.0\"\n+chalk-recursive = { version = \"0.83.0\", default-features = false }\n la-arena = { version = \"0.3.0\", path = \"../../lib/la-arena\" }\n once_cell = \"1.12.0\"\n typed-arena = \"2.0.1\""}, {"sha": "23587cc6d0db7ab34a45993da25075ba6659eed4", "filename": "crates/hir-ty/src/builder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78beb4c444b090159b3536a573d6807d9e11d3e0/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78beb4c444b090159b3536a573d6807d9e11d3e0/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fbuilder.rs?ref=78beb4c444b090159b3536a573d6807d9e11d3e0", "patch": "@@ -4,7 +4,7 @@ use std::iter;\n \n use chalk_ir::{\n     cast::{Cast, CastTo, Caster},\n-    fold::Fold,\n+    fold::TypeFoldable,\n     interner::HasInterner,\n     AdtId, BoundVar, DebruijnIndex, Scalar,\n };\n@@ -276,7 +276,7 @@ impl TyBuilder<TypeAliasId> {\n     }\n }\n \n-impl<T: HasInterner<Interner = Interner> + Fold<Interner>> TyBuilder<Binders<T>> {\n+impl<T: HasInterner<Interner = Interner> + TypeFoldable<Interner>> TyBuilder<Binders<T>> {\n     fn subst_binders(b: Binders<T>) -> Self {\n         let param_kinds = b\n             .binders\n@@ -290,7 +290,7 @@ impl<T: HasInterner<Interner = Interner> + Fold<Interner>> TyBuilder<Binders<T>>\n         TyBuilder::new(b, param_kinds)\n     }\n \n-    pub fn build(self) -> <T as Fold<Interner>>::Result {\n+    pub fn build(self) -> T {\n         let (b, subst) = self.build_internal();\n         b.substitute(Interner, &subst)\n     }"}, {"sha": "014109f03d2cd1a6f5be5c8efd8c822eb5d572fe", "filename": "crates/hir-ty/src/infer/unify.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/78beb4c444b090159b3536a573d6807d9e11d3e0/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78beb4c444b090159b3536a573d6807d9e11d3e0/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Funify.rs?ref=78beb4c444b090159b3536a573d6807d9e11d3e0", "patch": "@@ -3,8 +3,8 @@\n use std::{fmt, mem, sync::Arc};\n \n use chalk_ir::{\n-    cast::Cast, fold::Fold, interner::HasInterner, zip::Zip, CanonicalVarKind, FloatTy, IntTy,\n-    NoSolution, TyVariableKind, UniverseIndex,\n+    cast::Cast, fold::TypeFoldable, interner::HasInterner, zip::Zip, CanonicalVarKind, FloatTy,\n+    IntTy, NoSolution, TyVariableKind, UniverseIndex,\n };\n use chalk_solve::infer::ParameterEnaVariableExt;\n use ena::unify::UnifyKey;\n@@ -20,12 +20,12 @@ use crate::{\n };\n \n impl<'a> InferenceContext<'a> {\n-    pub(super) fn canonicalize<T: Fold<Interner> + HasInterner<Interner = Interner>>(\n+    pub(super) fn canonicalize<T: TypeFoldable<Interner> + HasInterner<Interner = Interner>>(\n         &mut self,\n         t: T,\n-    ) -> Canonicalized<T::Result>\n+    ) -> Canonicalized<T>\n     where\n-        T::Result: HasInterner<Interner = Interner>,\n+        T: HasInterner<Interner = Interner>,\n     {\n         self.table.canonicalize(t)\n     }\n@@ -200,12 +200,12 @@ impl<'a> InferenceTable<'a> {\n         .intern(Interner)\n     }\n \n-    pub(crate) fn canonicalize<T: Fold<Interner> + HasInterner<Interner = Interner>>(\n+    pub(crate) fn canonicalize<T: TypeFoldable<Interner> + HasInterner<Interner = Interner>>(\n         &mut self,\n         t: T,\n-    ) -> Canonicalized<T::Result>\n+    ) -> Canonicalized<T>\n     where\n-        T::Result: HasInterner<Interner = Interner>,\n+        T: HasInterner<Interner = Interner>,\n     {\n         // try to resolve obligations before canonicalizing, since this might\n         // result in new knowledge about variables\n@@ -292,9 +292,9 @@ impl<'a> InferenceTable<'a> {\n         &mut self,\n         t: T,\n         fallback: &dyn Fn(InferenceVar, VariableKind, GenericArg, DebruijnIndex) -> GenericArg,\n-    ) -> T::Result\n+    ) -> T\n     where\n-        T: HasInterner<Interner = Interner> + Fold<Interner>,\n+        T: HasInterner<Interner = Interner> + TypeFoldable<Interner>,\n     {\n         self.resolve_with_fallback_inner(&mut Vec::new(), t, &fallback)\n     }\n@@ -310,9 +310,9 @@ impl<'a> InferenceTable<'a> {\n         )\n     }\n \n-    pub(crate) fn instantiate_canonical<T>(&mut self, canonical: Canonical<T>) -> T::Result\n+    pub(crate) fn instantiate_canonical<T>(&mut self, canonical: Canonical<T>) -> T\n     where\n-        T: HasInterner<Interner = Interner> + Fold<Interner> + std::fmt::Debug,\n+        T: HasInterner<Interner = Interner> + TypeFoldable<Interner> + std::fmt::Debug,\n     {\n         let subst = self.fresh_subst(canonical.binders.as_slice(Interner));\n         subst.apply(canonical.value, Interner)\n@@ -323,9 +323,9 @@ impl<'a> InferenceTable<'a> {\n         var_stack: &mut Vec<InferenceVar>,\n         t: T,\n         fallback: &dyn Fn(InferenceVar, VariableKind, GenericArg, DebruijnIndex) -> GenericArg,\n-    ) -> T::Result\n+    ) -> T\n     where\n-        T: HasInterner<Interner = Interner> + Fold<Interner>,\n+        T: HasInterner<Interner = Interner> + TypeFoldable<Interner>,\n     {\n         t.fold_with(\n             &mut resolve::Resolver { table: self, var_stack, fallback },\n@@ -334,9 +334,9 @@ impl<'a> InferenceTable<'a> {\n         .expect(\"fold failed unexpectedly\")\n     }\n \n-    pub(crate) fn resolve_completely<T>(&mut self, t: T) -> T::Result\n+    pub(crate) fn resolve_completely<T>(&mut self, t: T) -> T\n     where\n-        T: HasInterner<Interner = Interner> + Fold<Interner>,\n+        T: HasInterner<Interner = Interner> + TypeFoldable<Interner>,\n     {\n         self.resolve_with_fallback(t, &|_, _, d, _| d)\n     }\n@@ -447,19 +447,19 @@ impl<'a> InferenceTable<'a> {\n         }\n     }\n \n-    pub(crate) fn fudge_inference<T: Fold<Interner>>(\n+    pub(crate) fn fudge_inference<T: TypeFoldable<Interner>>(\n         &mut self,\n         f: impl FnOnce(&mut Self) -> T,\n-    ) -> T::Result {\n-        use chalk_ir::fold::Folder;\n+    ) -> T {\n+        use chalk_ir::fold::TypeFolder;\n         struct VarFudger<'a, 'b> {\n             table: &'a mut InferenceTable<'b>,\n             highest_known_var: InferenceVar,\n         }\n-        impl<'a, 'b> Folder<Interner> for VarFudger<'a, 'b> {\n+        impl<'a, 'b> TypeFolder<Interner> for VarFudger<'a, 'b> {\n             type Error = NoSolution;\n \n-            fn as_dyn(&mut self) -> &mut dyn Folder<Interner, Error = Self::Error> {\n+            fn as_dyn(&mut self) -> &mut dyn TypeFolder<Interner, Error = Self::Error> {\n                 self\n             }\n \n@@ -635,7 +635,7 @@ mod resolve {\n     };\n     use chalk_ir::{\n         cast::Cast,\n-        fold::{Fold, Folder},\n+        fold::{TypeFoldable, TypeFolder},\n         Fallible, NoSolution,\n     };\n     use hir_def::type_ref::ConstScalar;\n@@ -645,13 +645,13 @@ mod resolve {\n         pub(super) var_stack: &'a mut Vec<InferenceVar>,\n         pub(super) fallback: F,\n     }\n-    impl<'a, 'b, 'i, F> Folder<Interner> for Resolver<'a, 'b, F>\n+    impl<'a, 'b, 'i, F> TypeFolder<Interner> for Resolver<'a, 'b, F>\n     where\n         F: Fn(InferenceVar, VariableKind, GenericArg, DebruijnIndex) -> GenericArg + 'i,\n     {\n         type Error = NoSolution;\n \n-        fn as_dyn(&mut self) -> &mut dyn Folder<Interner, Error = Self::Error> {\n+        fn as_dyn(&mut self) -> &mut dyn TypeFolder<Interner, Error = Self::Error> {\n             self\n         }\n "}, {"sha": "5abbee89711d7a09d918aa09fd00eede85777e4c", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/78beb4c444b090159b3536a573d6807d9e11d3e0/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78beb4c444b090159b3536a573d6807d9e11d3e0/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=78beb4c444b090159b3536a573d6807d9e11d3e0", "patch": "@@ -33,7 +33,7 @@ mod test_db;\n use std::sync::Arc;\n \n use chalk_ir::{\n-    fold::{Fold, Shift},\n+    fold::{Shift, TypeFoldable},\n     interner::HasInterner,\n     NoSolution,\n };\n@@ -136,7 +136,7 @@ pub fn param_idx(db: &dyn HirDatabase, id: TypeOrConstParamId) -> Option<usize>\n \n pub(crate) fn wrap_empty_binders<T>(value: T) -> Binders<T>\n where\n-    T: Fold<Interner, Result = T> + HasInterner<Interner = Interner>,\n+    T: TypeFoldable<Interner> + HasInterner<Interner = Interner>,\n {\n     Binders::empty(Interner, value.shifted_in_from(Interner, DebruijnIndex::ONE))\n }\n@@ -264,14 +264,12 @@ impl CallableSig {\n     }\n }\n \n-impl Fold<Interner> for CallableSig {\n-    type Result = CallableSig;\n-\n+impl TypeFoldable<Interner> for CallableSig {\n     fn fold_with<E>(\n         self,\n-        folder: &mut dyn chalk_ir::fold::Folder<Interner, Error = E>,\n+        folder: &mut dyn chalk_ir::fold::TypeFolder<Interner, Error = E>,\n         outer_binder: DebruijnIndex,\n-    ) -> Result<Self::Result, E> {\n+    ) -> Result<Self, E> {\n         let vec = self.params_and_return.to_vec();\n         let folded = vec.fold_with(folder, outer_binder)?;\n         Ok(CallableSig { params_and_return: folded.into(), is_varargs: self.is_varargs })\n@@ -300,22 +298,22 @@ pub fn static_lifetime() -> Lifetime {\n     LifetimeData::Static.intern(Interner)\n }\n \n-pub(crate) fn fold_free_vars<T: HasInterner<Interner = Interner> + Fold<Interner>>(\n+pub(crate) fn fold_free_vars<T: HasInterner<Interner = Interner> + TypeFoldable<Interner>>(\n     t: T,\n     for_ty: impl FnMut(BoundVar, DebruijnIndex) -> Ty,\n     for_const: impl FnMut(Ty, BoundVar, DebruijnIndex) -> Const,\n-) -> T::Result {\n-    use chalk_ir::{fold::Folder, Fallible};\n+) -> T {\n+    use chalk_ir::{fold::TypeFolder, Fallible};\n     struct FreeVarFolder<F1, F2>(F1, F2);\n     impl<\n             'i,\n             F1: FnMut(BoundVar, DebruijnIndex) -> Ty + 'i,\n             F2: FnMut(Ty, BoundVar, DebruijnIndex) -> Const + 'i,\n-        > Folder<Interner> for FreeVarFolder<F1, F2>\n+        > TypeFolder<Interner> for FreeVarFolder<F1, F2>\n     {\n         type Error = NoSolution;\n \n-        fn as_dyn(&mut self) -> &mut dyn Folder<Interner, Error = Self::Error> {\n+        fn as_dyn(&mut self) -> &mut dyn TypeFolder<Interner, Error = Self::Error> {\n             self\n         }\n \n@@ -344,11 +342,11 @@ pub(crate) fn fold_free_vars<T: HasInterner<Interner = Interner> + Fold<Interner\n         .expect(\"fold failed unexpectedly\")\n }\n \n-pub(crate) fn fold_tys<T: HasInterner<Interner = Interner> + Fold<Interner>>(\n+pub(crate) fn fold_tys<T: HasInterner<Interner = Interner> + TypeFoldable<Interner>>(\n     t: T,\n     mut for_ty: impl FnMut(Ty, DebruijnIndex) -> Ty,\n     binders: DebruijnIndex,\n-) -> T::Result {\n+) -> T {\n     fold_tys_and_consts(\n         t,\n         |x, d| match x {\n@@ -359,22 +357,22 @@ pub(crate) fn fold_tys<T: HasInterner<Interner = Interner> + Fold<Interner>>(\n     )\n }\n \n-pub(crate) fn fold_tys_and_consts<T: HasInterner<Interner = Interner> + Fold<Interner>>(\n+pub(crate) fn fold_tys_and_consts<T: HasInterner<Interner = Interner> + TypeFoldable<Interner>>(\n     t: T,\n     f: impl FnMut(Either<Ty, Const>, DebruijnIndex) -> Either<Ty, Const>,\n     binders: DebruijnIndex,\n-) -> T::Result {\n+) -> T {\n     use chalk_ir::{\n-        fold::{Folder, SuperFold},\n+        fold::{TypeFolder, TypeSuperFoldable},\n         Fallible,\n     };\n     struct TyFolder<F>(F);\n-    impl<'i, F: FnMut(Either<Ty, Const>, DebruijnIndex) -> Either<Ty, Const> + 'i> Folder<Interner>\n-        for TyFolder<F>\n+    impl<'i, F: FnMut(Either<Ty, Const>, DebruijnIndex) -> Either<Ty, Const> + 'i>\n+        TypeFolder<Interner> for TyFolder<F>\n     {\n         type Error = NoSolution;\n \n-        fn as_dyn(&mut self) -> &mut dyn Folder<Interner, Error = Self::Error> {\n+        fn as_dyn(&mut self) -> &mut dyn TypeFolder<Interner, Error = Self::Error> {\n             self\n         }\n \n@@ -397,22 +395,22 @@ pub(crate) fn fold_tys_and_consts<T: HasInterner<Interner = Interner> + Fold<Int\n /// 'Canonicalizes' the `t` by replacing any errors with new variables. Also\n /// ensures there are no unbound variables or inference variables anywhere in\n /// the `t`.\n-pub fn replace_errors_with_variables<T>(t: &T) -> Canonical<T::Result>\n+pub fn replace_errors_with_variables<T>(t: &T) -> Canonical<T>\n where\n-    T: HasInterner<Interner = Interner> + Fold<Interner> + Clone,\n-    T::Result: HasInterner<Interner = Interner>,\n+    T: HasInterner<Interner = Interner> + TypeFoldable<Interner> + Clone,\n+    T: HasInterner<Interner = Interner>,\n {\n     use chalk_ir::{\n-        fold::{Folder, SuperFold},\n+        fold::{TypeFolder, TypeSuperFoldable},\n         Fallible,\n     };\n     struct ErrorReplacer {\n         vars: usize,\n     }\n-    impl Folder<Interner> for ErrorReplacer {\n+    impl TypeFolder<Interner> for ErrorReplacer {\n         type Error = NoSolution;\n \n-        fn as_dyn(&mut self) -> &mut dyn Folder<Interner, Error = Self::Error> {\n+        fn as_dyn(&mut self) -> &mut dyn TypeFolder<Interner, Error = Self::Error> {\n             self\n         }\n "}, {"sha": "f9747f3b34dbca8d4dd0d5f0ca22678dbb479cda", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78beb4c444b090159b3536a573d6807d9e11d3e0/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78beb4c444b090159b3536a573d6807d9e11d3e0/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=78beb4c444b090159b3536a573d6807d9e11d3e0", "patch": "@@ -12,7 +12,9 @@ use std::{\n };\n \n use base_db::CrateId;\n-use chalk_ir::{cast::Cast, fold::Fold, fold::Shift, interner::HasInterner, Mutability, Safety};\n+use chalk_ir::{\n+    cast::Cast, fold::Shift, fold::TypeFoldable, interner::HasInterner, Mutability, Safety,\n+};\n \n use hir_def::{\n     adt::StructKind,\n@@ -1751,10 +1753,10 @@ pub(crate) fn const_or_path_to_chalk(\n \n /// This replaces any 'free' Bound vars in `s` (i.e. those with indices past\n /// num_vars_to_keep) by `TyKind::Unknown`.\n-fn fallback_bound_vars<T: Fold<Interner> + HasInterner<Interner = Interner>>(\n+fn fallback_bound_vars<T: TypeFoldable<Interner> + HasInterner<Interner = Interner>>(\n     s: T,\n     num_vars_to_keep: usize,\n-) -> T::Result {\n+) -> T {\n     crate::fold_free_vars(\n         s,\n         |bound, binders| {"}]}