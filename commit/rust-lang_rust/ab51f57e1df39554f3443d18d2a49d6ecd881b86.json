{"sha": "ab51f57e1df39554f3443d18d2a49d6ecd881b86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNTFmNTdlMWRmMzk1NTRmMzQ0M2QxOGQyYTQ5ZDZlY2Q4ODFiODY=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-08-23T20:54:43Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2019-08-23T23:07:11Z"}, "message": "Parse `BoxPat`", "tree": {"sha": "e24e15c1d2535a50269f6aa35eecc5183d57ae8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e24e15c1d2535a50269f6aa35eecc5183d57ae8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab51f57e1df39554f3443d18d2a49d6ecd881b86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab51f57e1df39554f3443d18d2a49d6ecd881b86", "html_url": "https://github.com/rust-lang/rust/commit/ab51f57e1df39554f3443d18d2a49d6ecd881b86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab51f57e1df39554f3443d18d2a49d6ecd881b86/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6f3790106fdfa2aaf6a0510c737fd05939345e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6f3790106fdfa2aaf6a0510c737fd05939345e7", "html_url": "https://github.com/rust-lang/rust/commit/e6f3790106fdfa2aaf6a0510c737fd05939345e7"}], "stats": {"total": 51, "additions": 32, "deletions": 19}, "files": [{"sha": "67f1548a72a752f1ea8bdac6c4026566b87853cd", "filename": "crates/ra_parser/src/grammar/patterns.rs", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/ab51f57e1df39554f3443d18d2a49d6ecd881b86/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab51f57e1df39554f3443d18d2a49d6ecd881b86/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=ab51f57e1df39554f3443d18d2a49d6ecd881b86", "patch": "@@ -56,37 +56,33 @@ const PAT_RECOVERY_SET: TokenSet =\n     token_set![LET_KW, IF_KW, WHILE_KW, LOOP_KW, MATCH_KW, R_PAREN, COMMA];\n \n fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n-    let la0 = p.nth(0);\n-    let la1 = p.nth(1);\n-    if la0 == T![ref]\n-        || la0 == T![mut]\n-        || la0 == T![box]\n-        || (la0 == IDENT && !(la1 == T![::] || la1 == T!['('] || la1 == T!['{'] || la1 == T![!]))\n-    {\n-        return Some(bind_pat(p, true));\n-    }\n-    if paths::is_use_path_start(p) {\n-        return Some(path_pat(p));\n-    }\n+    // Checks the token after an IDENT to see if a pattern is a path (Struct { .. }) or macro\n+    // (T![x]).\n+    let is_path_or_macro_pat =\n+        |la1| la1 == T![::] || la1 == T!['('] || la1 == T!['{'] || la1 == T![!];\n \n-    if is_literal_pat_start(p) {\n-        return Some(literal_pat(p));\n-    }\n+    let m = match p.nth(0) {\n+        T![box] => box_pat(p),\n+        T![ref] | T![mut] | IDENT if !is_path_or_macro_pat(p.nth(1)) => bind_pat(p, true),\n+\n+        _ if paths::is_use_path_start(p) => path_pat(p),\n+        _ if is_literal_pat_start(p) => literal_pat(p),\n \n-    let m = match la0 {\n         T![_] => placeholder_pat(p),\n         T![&] => ref_pat(p),\n         T!['('] => tuple_pat(p),\n         T!['['] => slice_pat(p),\n+\n         _ => {\n             p.err_recover(\"expected pattern\", recovery_set);\n             return None;\n         }\n     };\n+\n     Some(m)\n }\n \n-fn is_literal_pat_start(p: &mut Parser) -> bool {\n+fn is_literal_pat_start(p: &Parser) -> bool {\n     p.at(T![-]) && (p.nth(1) == INT_NUMBER || p.nth(1) == FLOAT_NUMBER)\n         || p.at_ts(expressions::LITERAL_FIRST)\n }\n@@ -261,11 +257,9 @@ fn pat_list(p: &mut Parser, ket: SyntaxKind) {\n //     let ref mut d = ();\n //     let e @ _ = ();\n //     let ref mut f @ g @ _ = ();\n-//     let box i = Box::new(1i32);\n // }\n fn bind_pat(p: &mut Parser, with_at: bool) -> CompletedMarker {\n     let m = p.start();\n-    p.eat(T![box]);\n     p.eat(T![ref]);\n     p.eat(T![mut]);\n     name(p);\n@@ -274,3 +268,22 @@ fn bind_pat(p: &mut Parser, with_at: bool) -> CompletedMarker {\n     }\n     m.complete(p, BIND_PAT)\n }\n+\n+// test_err ref_box_pat\n+// fn main() {\n+//     let ref box i = ();\n+// }\n+\n+// test box_pat\n+// fn main() {\n+//     let box i = ();\n+//     let box Outer { box i, j: box Inner(box &x) } = ();\n+//     let box ref mut i = ();\n+// }\n+fn box_pat(p: &mut Parser) -> CompletedMarker {\n+    assert!(p.at(T![box]));\n+    let m = p.start();\n+    p.bump();\n+    pattern(p);\n+    m.complete(p, BOX_PAT)\n+}"}]}