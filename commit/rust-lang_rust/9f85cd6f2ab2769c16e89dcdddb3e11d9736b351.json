{"sha": "9f85cd6f2ab2769c16e89dcdddb3e11d9736b351", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmODVjZDZmMmFiMjc2OWMxNmU4OWRjZGRkYjNlMTFkOTczNmIzNTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-13T22:14:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-13T22:14:57Z"}, "message": "Auto merge of #87794 - bonega:enum_niche_prefer_zero, r=nagisa\n\nEnum should prefer discriminant zero for niche\n\nGiven an enum with unassigned zero-discriminant, rust should prefer it for niche selection.\nZero as discriminant for `Option<Enum>` makes it possible for LLVM to optimize resulting asm.\n\n- Eliminate branch when expected value coincides.\n- Use smaller instruction `test eax, eax` instead of `cmp eax, ?`\n- Possible interaction with zeroed memory?\n\nExample:\n```rust\n\npub enum Size {\n    One = 1,\n    Two = 2,\n    Three = 3,\n}\n\npub fn handle(x: Option<Size>) -> u8 {\n    match x {\n        None => {0}\n        Some(size) => {size as u8}\n    }\n}\n```\nIn this case discriminant zero is available as a niche.\n\nAbove example on nightly:\n```asm\n mov     eax, edi\n cmp     al, 4\n jne     .LBB0_2\n xor     eax, eax\n.LBB0_2:\n ret\n```\n\nPR:\n```asm\n mov     eax, edi\n ret\n```\n\nI created this PR because I had a performance regression when I tried to use an enum to represent legal grapheme byte-length for utf8.\n\nUsing an enum instead of `NonZeroU8` [here](https://github.com/bonega/yore/blob/d683304f5dfe2e99f769e6ab8adf8d60a0d1d9b3/src/internal/decoder_incomplete.rs#L90)\nresulted in a performance regression of about 5%.\nI consider this to be a somewhat realistic benchmark.\n\nThanks to `@ogoffart` for pointing me in the right direction!\n\nEdit: Updated description", "tree": {"sha": "75331189ed48a97105bb5782534240c5844f7afb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75331189ed48a97105bb5782534240c5844f7afb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f85cd6f2ab2769c16e89dcdddb3e11d9736b351", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f85cd6f2ab2769c16e89dcdddb3e11d9736b351", "html_url": "https://github.com/rust-lang/rust/commit/9f85cd6f2ab2769c16e89dcdddb3e11d9736b351", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f85cd6f2ab2769c16e89dcdddb3e11d9736b351/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bb77da74dac4768489127d21e32db19b59ada5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb77da74dac4768489127d21e32db19b59ada5b", "html_url": "https://github.com/rust-lang/rust/commit/9bb77da74dac4768489127d21e32db19b59ada5b"}, {"sha": "4d66fbc4b9b95a652636e3723937c3accec85d65", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d66fbc4b9b95a652636e3723937c3accec85d65", "html_url": "https://github.com/rust-lang/rust/commit/4d66fbc4b9b95a652636e3723937c3accec85d65"}], "stats": {"total": 91, "additions": 82, "deletions": 9}, "files": [{"sha": "616071592087da8a5573884bdc47b851bcd78ab3", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9f85cd6f2ab2769c16e89dcdddb3e11d9736b351/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f85cd6f2ab2769c16e89dcdddb3e11d9736b351/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=9f85cd6f2ab2769c16e89dcdddb3e11d9736b351", "patch": "@@ -1099,19 +1099,53 @@ impl Niche {\n         assert!(size.bits() <= 128);\n         let max_value = size.unsigned_int_max();\n \n-        if count > max_value {\n+        let niche = v.end.wrapping_add(1)..v.start;\n+        let available = niche.end.wrapping_sub(niche.start) & max_value;\n+        if count > available {\n             return None;\n         }\n \n-        // Compute the range of invalid values being reserved.\n-        let start = v.end.wrapping_add(1) & max_value;\n-        let end = v.end.wrapping_add(count) & max_value;\n-\n-        if v.contains(end) {\n-            return None;\n+        // Extend the range of valid values being reserved by moving either `v.start` or `v.end` bound.\n+        // Given an eventual `Option<T>`, we try to maximize the chance for `None` to occupy the niche of zero.\n+        // This is accomplished by prefering enums with 2 variants(`count==1`) and always taking the shortest path to niche zero.\n+        // Having `None` in niche zero can enable some special optimizations.\n+        //\n+        // Bound selection criteria:\n+        // 1. Select closest to zero given wrapping semantics.\n+        // 2. Avoid moving past zero if possible.\n+        //\n+        // In practice this means that enums with `count > 1` are unlikely to claim niche zero, since they have to fit perfectly.\n+        // If niche zero is already reserved, the selection of bounds are of little interest.\n+        let move_start = |v: WrappingRange| {\n+            let start = v.start.wrapping_sub(1) & max_value;\n+            Some((start, Scalar { value, valid_range: v.with_start(start) }))\n+        };\n+        let move_end = |v: WrappingRange| {\n+            let start = v.end.wrapping_add(1) & max_value;\n+            let end = v.end.wrapping_add(count) & max_value;\n+            Some((start, Scalar { value, valid_range: v.with_end(end) }))\n+        };\n+        let distance_end_zero = max_value - v.end;\n+        if v.start > v.end {\n+            // zero is unavailable because wrapping occurs\n+            move_end(v)\n+        } else if v.start <= distance_end_zero {\n+            if count <= v.start {\n+                move_start(v)\n+            } else {\n+                // moved past zero, use other bound\n+                move_end(v)\n+            }\n+        } else {\n+            let end = v.end.wrapping_add(count) & max_value;\n+            let overshot_zero = (1..=v.end).contains(&end);\n+            if overshot_zero {\n+                // moved past zero, use other bound\n+                move_start(v)\n+            } else {\n+                move_end(v)\n+            }\n         }\n-\n-        Some((start, Scalar { value, valid_range: v.with_end(end) }))\n     }\n }\n "}, {"sha": "0ab37a618daaca6796d76e11658394670f006b3d", "filename": "src/test/assembly/niche-prefer-zero.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9f85cd6f2ab2769c16e89dcdddb3e11d9736b351/src%2Ftest%2Fassembly%2Fniche-prefer-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f85cd6f2ab2769c16e89dcdddb3e11d9736b351/src%2Ftest%2Fassembly%2Fniche-prefer-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fniche-prefer-zero.rs?ref=9f85cd6f2ab2769c16e89dcdddb3e11d9736b351", "patch": "@@ -0,0 +1,25 @@\n+// Check that niche selection prefers zero and that jumps are optimized away.\n+// See https://github.com/rust-lang/rust/pull/87794\n+// assembly-output: emit-asm\n+// only-x86\n+// compile-flags: -Copt-level=3\n+\n+#![crate_type = \"lib\"]\n+\n+#[repr(u8)]\n+pub enum Size {\n+    One = 1,\n+    Two = 2,\n+    Three = 3,\n+}\n+\n+#[no_mangle]\n+pub fn handle(x: Option<Size>) -> u8 {\n+    match x {\n+        None => 0,\n+        Some(size) => size as u8,\n+    }\n+}\n+\n+// There should be no jumps in output\n+// CHECK-NOT: j"}, {"sha": "f20607a8903825e03b62b55007c475c21704cbd5", "filename": "src/test/ui/enum-discriminant/niche-prefer-zero.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f85cd6f2ab2769c16e89dcdddb3e11d9736b351/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche-prefer-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f85cd6f2ab2769c16e89dcdddb3e11d9736b351/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche-prefer-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fniche-prefer-zero.rs?ref=9f85cd6f2ab2769c16e89dcdddb3e11d9736b351", "patch": "@@ -0,0 +1,14 @@\n+// Check that niche selection prefers zero.\n+// See https://github.com/rust-lang/rust/pull/87794\n+// run-pass\n+#[repr(u8)]\n+pub enum Size {\n+    One = 1,\n+    Two = 2,\n+    Three = 3,\n+}\n+\n+fn main() {\n+    // check that `None` is zero\n+    assert_eq!(0, unsafe { std::mem::transmute::<Option<Size>, u8>(None) });\n+}"}]}