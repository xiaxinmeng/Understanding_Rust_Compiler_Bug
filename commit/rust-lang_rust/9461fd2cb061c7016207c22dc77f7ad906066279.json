{"sha": "9461fd2cb061c7016207c22dc77f7ad906066279", "node_id": "C_kwDOAAsO6NoAKDk0NjFmZDJjYjA2MWM3MDE2MjA3YzIyZGM3N2Y3YWQ5MDYwNjYyNzk", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-13T12:18:41Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-13T12:18:41Z"}, "message": "Remove TyCtxt parameter from emit_cgu\n\nTyCtxt isn't available on background threads.", "tree": {"sha": "ae60ef8876abe7550604413fbdfa48b951cb7db0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae60ef8876abe7550604413fbdfa48b951cb7db0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9461fd2cb061c7016207c22dc77f7ad906066279", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9461fd2cb061c7016207c22dc77f7ad906066279", "html_url": "https://github.com/rust-lang/rust/commit/9461fd2cb061c7016207c22dc77f7ad906066279", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9461fd2cb061c7016207c22dc77f7ad906066279/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c0766ce6cae86b0f340683d90a5ed02cace81f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c0766ce6cae86b0f340683d90a5ed02cace81f7", "html_url": "https://github.com/rust-lang/rust/commit/4c0766ce6cae86b0f340683d90a5ed02cace81f7"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "9d819e3995bbce8d1d747a6948e3ea3e1e6576fa", "filename": "src/driver/aot.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9461fd2cb061c7016207c22dc77f7ad906066279/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9461fd2cb061c7016207c22dc77f7ad906066279/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=9461fd2cb061c7016207c22dc77f7ad906066279", "patch": "@@ -7,12 +7,13 @@ use std::sync::Arc;\n \n use rustc_codegen_ssa::back::metadata::create_compressed_metadata_file;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule, CrateInfo, ModuleKind};\n+use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_middle::mir::mono::{CodegenUnit, MonoItem};\n use rustc_session::cgu_reuse_tracker::CguReuse;\n-use rustc_session::config::{DebugInfo, OutputType};\n+use rustc_session::config::{DebugInfo, OutputFilenames, OutputType};\n use rustc_session::Session;\n \n use cranelift_object::{ObjectBuilder, ObjectModule};\n@@ -115,7 +116,8 @@ fn make_module(sess: &Session, backend_config: &BackendConfig, name: String) ->\n }\n \n fn emit_cgu(\n-    tcx: TyCtxt<'_>,\n+    output_filenames: &OutputFilenames,\n+    prof: &SelfProfilerRef,\n     name: String,\n     module: ObjectModule,\n     debug: Option<DebugContext<'_>>,\n@@ -130,7 +132,8 @@ fn emit_cgu(\n \n     unwind_context.emit(&mut product);\n \n-    let module_regular = emit_module(tcx, product.object, ModuleKind::Regular, name.clone())?;\n+    let module_regular =\n+        emit_module(output_filenames, prof, product.object, ModuleKind::Regular, name.clone())?;\n \n     Ok(ModuleCodegenResult {\n         module_regular,\n@@ -146,12 +149,13 @@ fn emit_cgu(\n }\n \n fn emit_module(\n-    tcx: TyCtxt<'_>,\n+    output_filenames: &OutputFilenames,\n+    prof: &SelfProfilerRef,\n     object: cranelift_object::object::write::Object<'_>,\n     kind: ModuleKind,\n     name: String,\n ) -> Result<CompiledModule, String> {\n-    let tmp_file = tcx.output_filenames(()).temp_path(OutputType::Object, Some(&name));\n+    let tmp_file = output_filenames.temp_path(OutputType::Object, Some(&name));\n     let mut file = match File::create(&tmp_file) {\n         Ok(file) => file,\n         Err(err) => return Err(format!(\"error creating object file: {}\", err)),\n@@ -161,7 +165,7 @@ fn emit_module(\n         return Err(format!(\"error writing object file: {}\", err));\n     }\n \n-    tcx.sess.prof.artifact_size(\"object_file\", &*name, file.metadata().unwrap().len());\n+    prof.artifact_size(\"object_file\", &*name, file.metadata().unwrap().len());\n \n     Ok(CompiledModule { name, kind, object: Some(tmp_file), dwarf_object: None, bytecode: None })\n }\n@@ -288,7 +292,8 @@ fn module_codegen(\n     let unwind_context = cx.unwind_context;\n     tcx.sess.time(\"write object file\", || {\n         emit_cgu(\n-            tcx,\n+            &global_asm_config.output_filenames,\n+            &tcx.sess.prof,\n             cgu.name().as_str().to_string(),\n             module,\n             debug_context,\n@@ -361,7 +366,13 @@ pub(crate) fn run_aot(\n         let mut product = allocator_module.finish();\n         allocator_unwind_context.emit(&mut product);\n \n-        match emit_module(tcx, product.object, ModuleKind::Allocator, \"allocator_shim\".to_owned()) {\n+        match emit_module(\n+            tcx.output_filenames(()),\n+            &tcx.sess.prof,\n+            product.object,\n+            ModuleKind::Allocator,\n+            \"allocator_shim\".to_owned(),\n+        ) {\n             Ok(allocator_module) => Some(allocator_module),\n             Err(err) => tcx.sess.fatal(err),\n         }"}, {"sha": "dcbcaba30feeda219cea9d7042dd73e40167fe82", "filename": "src/global_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9461fd2cb061c7016207c22dc77f7ad906066279/src%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9461fd2cb061c7016207c22dc77f7ad906066279/src%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fglobal_asm.rs?ref=9461fd2cb061c7016207c22dc77f7ad906066279", "patch": "@@ -36,7 +36,7 @@ pub(crate) fn codegen_global_asm_item(tcx: TyCtxt<'_>, global_asm: &mut String,\n pub(crate) struct GlobalAsmConfig {\n     asm_enabled: bool,\n     assembler: PathBuf,\n-    output_filenames: Arc<OutputFilenames>,\n+    pub(crate) output_filenames: Arc<OutputFilenames>,\n }\n \n impl GlobalAsmConfig {"}]}