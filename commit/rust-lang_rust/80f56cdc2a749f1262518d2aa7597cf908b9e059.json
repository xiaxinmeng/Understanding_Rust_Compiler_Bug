{"sha": "80f56cdc2a749f1262518d2aa7597cf908b9e059", "node_id": "C_kwDOAAsO6NoAKDgwZjU2Y2RjMmE3NDlmMTI2MjUxOGQyYWE3NTk3Y2Y5MDhiOWUwNTk", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-18T11:31:12Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-02-21T06:09:11Z"}, "message": "review", "tree": {"sha": "beb695dc1bc401a95343da061dd87253e98aa238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/beb695dc1bc401a95343da061dd87253e98aa238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80f56cdc2a749f1262518d2aa7597cf908b9e059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80f56cdc2a749f1262518d2aa7597cf908b9e059", "html_url": "https://github.com/rust-lang/rust/commit/80f56cdc2a749f1262518d2aa7597cf908b9e059", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80f56cdc2a749f1262518d2aa7597cf908b9e059/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c909b6dc2254b1ceca049f878e67a8ab86118d37", "url": "https://api.github.com/repos/rust-lang/rust/commits/c909b6dc2254b1ceca049f878e67a8ab86118d37", "html_url": "https://github.com/rust-lang/rust/commit/c909b6dc2254b1ceca049f878e67a8ab86118d37"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "54a345daec8a5b1815d8a667b33064a94de58a2c", "filename": "compiler/rustc_middle/src/ty/impls_ty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/80f56cdc2a749f1262518d2aa7597cf908b9e059/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80f56cdc2a749f1262518d2aa7597cf908b9e059/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fimpls_ty.rs?ref=80f56cdc2a749f1262518d2aa7597cf908b9e059", "patch": "@@ -70,12 +70,20 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ty::subst::GenericArgKin\n             // See `fn intern_type_list` for more details.\n             //\n             // We therefore hash types without adding a hash for their discriminant.\n+            //\n+            // In order to make it very unlikely for the sequence of bytes being hashed for\n+            // a `GenericArgKind::Type` to be the same as the sequence of bytes being\n+            // hashed for one of the other variants, we hash a `0xFF` byte before hashing\n+            // their discriminant (since the discriminant of `TyKind` is unlikely to ever start\n+            // with 0xFF).\n             ty::subst::GenericArgKind::Type(ty) => ty.hash_stable(hcx, hasher),\n             ty::subst::GenericArgKind::Const(ct) => {\n+                0xFFu8.hash_stable(hcx, hasher);\n                 mem::discriminant(self).hash_stable(hcx, hasher);\n                 ct.hash_stable(hcx, hasher);\n             }\n             ty::subst::GenericArgKind::Lifetime(lt) => {\n+                0xFFu8.hash_stable(hcx, hasher);\n                 mem::discriminant(self).hash_stable(hcx, hasher);\n                 lt.hash_stable(hcx, hasher);\n             }"}, {"sha": "364ba07a44167affe43aaf9913de32cdd1f0a612", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/80f56cdc2a749f1262518d2aa7597cf908b9e059/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80f56cdc2a749f1262518d2aa7597cf908b9e059/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=80f56cdc2a749f1262518d2aa7597cf908b9e059", "patch": "@@ -51,7 +51,8 @@ pub enum GenericArgKind<'tcx> {\n /// This function goes from `&'a [Ty<'tcx>]` to `&'a [GenericArg<'tcx>]`\n ///\n /// This is sound as, for types, `GenericArg` is just\n-/// `NonZeroUsize::new_unchecked(ty as *const _ as usize)`.\n+/// `NonZeroUsize::new_unchecked(ty as *const _ as usize)` as\n+/// long as we use `0` for the `TYPE_TAG`.\n pub fn ty_slice_as_generic_args<'a, 'tcx>(ts: &'a [Ty<'tcx>]) -> &'a [GenericArg<'tcx>] {\n     assert_eq!(TYPE_TAG, 0);\n     // SAFETY: the whole slice is valid and immutable."}]}