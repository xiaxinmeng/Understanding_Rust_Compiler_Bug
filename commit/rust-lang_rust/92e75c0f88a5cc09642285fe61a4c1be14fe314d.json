{"sha": "92e75c0f88a5cc09642285fe61a4c1be14fe314d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZTc1YzBmODhhNWNjMDk2NDIyODVmZTYxYTRjMWJlMTRmZTMxNGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-25T11:57:46Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-25T12:09:32Z"}, "message": "factor wide ptr metadata checking into separate method\n\nalso fat -> wide", "tree": {"sha": "03ff814e85b39918b5b78a69242d64ae7591430f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03ff814e85b39918b5b78a69242d64ae7591430f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92e75c0f88a5cc09642285fe61a4c1be14fe314d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92e75c0f88a5cc09642285fe61a4c1be14fe314d", "html_url": "https://github.com/rust-lang/rust/commit/92e75c0f88a5cc09642285fe61a4c1be14fe314d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92e75c0f88a5cc09642285fe61a4c1be14fe314d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "783469ca09005d135c3204a55069707d1cd705a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/783469ca09005d135c3204a55069707d1cd705a9", "html_url": "https://github.com/rust-lang/rust/commit/783469ca09005d135c3204a55069707d1cd705a9"}], "stats": {"total": 87, "additions": 48, "deletions": 39}, "files": [{"sha": "f358a21f4af76c812f55ee8a30d5a27aea936d77", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 42, "deletions": 33, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/92e75c0f88a5cc09642285fe61a4c1be14fe314d/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92e75c0f88a5cc09642285fe61a4c1be14fe314d/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=92e75c0f88a5cc09642285fe61a4c1be14fe314d", "patch": "@@ -11,7 +11,7 @@ use std::hash::Hash;\n \n use super::{\n     GlobalAlloc, InterpResult,\n-    OpTy, Machine, InterpCx, ValueVisitor, MPlaceTy,\n+    Scalar, OpTy, Machine, InterpCx, ValueVisitor, MPlaceTy,\n };\n \n macro_rules! throw_validation_failure {\n@@ -250,6 +250,44 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n         self.path.truncate(path_len);\n         Ok(())\n     }\n+\n+    fn check_wide_ptr_meta(\n+        &mut self,\n+        meta: Option<Scalar<M::PointerTag>>,\n+        pointee: TyLayout<'tcx>,\n+    ) -> InterpResult<'tcx> {\n+        let tail = self.ecx.tcx.struct_tail_erasing_lifetimes(pointee.ty, self.ecx.param_env);\n+        match tail.sty {\n+            ty::Dynamic(..) => {\n+                let vtable = meta.unwrap();\n+                try_validation!(\n+                    self.ecx.memory.check_ptr_access(\n+                        vtable,\n+                        3*self.ecx.tcx.data_layout.pointer_size, // drop, size, align\n+                        self.ecx.tcx.data_layout.pointer_align.abi,\n+                    ),\n+                    \"dangling or unaligned vtable pointer in wide pointer or too small vtable\",\n+                    self.path\n+                );\n+                try_validation!(self.ecx.read_drop_type_from_vtable(vtable),\n+                    \"invalid drop fn in vtable\", self.path);\n+                try_validation!(self.ecx.read_size_and_align_from_vtable(vtable),\n+                    \"invalid size or align in vtable\", self.path);\n+                // FIXME: More checks for the vtable.\n+            }\n+            ty::Slice(..) | ty::Str => {\n+                try_validation!(meta.unwrap().to_usize(self.ecx),\n+                    \"non-integer slice length in wide pointer\", self.path);\n+            }\n+            ty::Foreign(..) => {\n+                // Unsized, but not wide.\n+            }\n+            _ =>\n+                bug!(\"Unexpected unsized type tail: {:?}\", tail),\n+        }\n+\n+        Ok(())\n+    }\n }\n \n impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n@@ -353,44 +391,15 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 }\n             }\n             _ if ty.is_box() || ty.is_region_ptr() => {\n-                // Handle fat pointers.\n+                // Handle wide pointers.\n                 // Check metadata early, for better diagnostics\n                 let ptr = try_validation!(value.to_scalar_ptr(),\n                     \"undefined address in pointer\", self.path);\n                 let meta = try_validation!(value.to_meta(),\n-                    \"uninitialized data in fat pointer metadata\", self.path);\n+                    \"uninitialized data in wide pointer metadata\", self.path);\n                 let layout = self.ecx.layout_of(value.layout.ty.builtin_deref(true).unwrap().ty)?;\n                 if layout.is_unsized() {\n-                    let tail = self.ecx.tcx.struct_tail_erasing_lifetimes(layout.ty,\n-                                                                          self.ecx.param_env);\n-                    match tail.sty {\n-                        ty::Dynamic(..) => {\n-                            let vtable = meta.unwrap();\n-                            try_validation!(\n-                                self.ecx.memory.check_ptr_access(\n-                                    vtable,\n-                                    3*self.ecx.tcx.data_layout.pointer_size, // drop, size, align\n-                                    self.ecx.tcx.data_layout.pointer_align.abi,\n-                                ),\n-                                \"dangling or unaligned vtable pointer or too small vtable\",\n-                                self.path\n-                            );\n-                            try_validation!(self.ecx.read_drop_type_from_vtable(vtable),\n-                                \"invalid drop fn in vtable\", self.path);\n-                            try_validation!(self.ecx.read_size_and_align_from_vtable(vtable),\n-                                \"invalid size or align in vtable\", self.path);\n-                            // FIXME: More checks for the vtable.\n-                        }\n-                        ty::Slice(..) | ty::Str => {\n-                            try_validation!(meta.unwrap().to_usize(self.ecx),\n-                                \"non-integer slice length in fat pointer\", self.path);\n-                        }\n-                        ty::Foreign(..) => {\n-                            // Unsized, but not fat.\n-                        }\n-                        _ =>\n-                            bug!(\"Unexpected unsized type tail: {:?}\", tail),\n-                    }\n+                    self.check_wide_ptr_meta(meta, layout)?;\n                 }\n                 // Make sure this is dereferencable and all.\n                 let (size, align) = self.ecx.size_and_align_of(meta, layout)?"}, {"sha": "54c33006d2b159ebd571bf5cf8acb0e82ff2f53f", "filename": "src/test/ui/consts/const-eval/union-ub-fat-ptr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/92e75c0f88a5cc09642285fe61a4c1be14fe314d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/92e75c0f88a5cc09642285fe61a4c1be14fe314d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr?ref=92e75c0f88a5cc09642285fe61a4c1be14fe314d", "patch": "@@ -10,15 +10,15 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:81:1\n    |\n LL | const C: &str = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.str};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in fat pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:84:1\n    |\n LL | const C2: &MyStr = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.my_str};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in fat pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n@@ -34,31 +34,31 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:93:1\n    |\n LL | const C3: &[u8] = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.slice};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in fat pointer\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in wide pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:97:1\n    |\n LL | const D: &dyn Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer or too small vtable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:100:1\n    |\n LL | const E: &dyn Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer or too small vtable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:103:1\n    |\n LL | const F: &dyn Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer or too small vtable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling or unaligned vtable pointer in wide pointer or too small vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}]}