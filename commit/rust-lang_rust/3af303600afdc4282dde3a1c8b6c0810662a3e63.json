{"sha": "3af303600afdc4282dde3a1c8b6c0810662a3e63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZjMwMzYwMGFmZGM0MjgyZGRlM2ExYzhiNmMwODEwNjYyYTNlNjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-15T16:42:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-15T16:42:36Z"}, "message": "Merge #8510 #8533\n\n8510: Move cursor position when using item movers r=jonas-schievink a=jonas-schievink\n\nThis updates the cursor position when moving items around to stay in the same location within the moved node.\r\n\r\nI changed the `moveItem` response to `SnippetTextEdit[]`, since that made more sense to me (the file was ignored by the client anyways, since the edits always apply to the current document). It also matches `onEnter`, which seems logical to me, but please let me know if this doesn't make sense.\r\n\r\nThere's still a bug in the client-side snippet code that will cause the cursor position to be slightly off when moving parameters in the same line (presumably we don't track the column correctly after deleting `$0`). Not really sure how to fix that immediately, but this PR should already be an improvement despite that bug.\n\n8533: Fix typo in style guide r=jonas-schievink a=jonas-schievink\n\nFixes bold text rendering\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "2ecf0422de2258515ad0d373320eb7df44857187", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ecf0422de2258515ad0d373320eb7df44857187"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3af303600afdc4282dde3a1c8b6c0810662a3e63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgeGz8CRBK7hj4Ov3rIwAAdHIIAE/LAwlpSJg9d2SJmcXANABx\n+PME0MgMmz6/2AvtSF0/snQG6T3E+6fUJ3UqOgGzliZb3nm96LD4b7ivXSJ2iiAF\n/83n9BB+g9yuSBqV2Mst87w8PBAKoR5EfnK9PB49PvTQRat95VuZgb8mBe7ghV52\n1pyNIEP1TL8HpTckiFVGDZl3xrdHp2j+pi7AHop/LzSry49DA1zzcm3SNyOyvwP9\nlradepsEy9Fvblho22o4Kbk8gMXZ2+W9WNEszPKYmG32trlCzFmd8ZRjR5xcdFYi\n5pkZHDsTxFipuGRor/LP7qKB8VsKmO5HrkSn+lM4hSPsFFJVKKMOi1oZ44Te//A=\n=pFgR\n-----END PGP SIGNATURE-----\n", "payload": "tree 2ecf0422de2258515ad0d373320eb7df44857187\nparent 8d17d0c58cbe7006c656aced985552f51e1bd675\nparent 30aae2cefb9d068055ca8d250d04a288e3684394\nparent 6e575d8c73fa93e2300c3c61343d7efa7f20b7bf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618504956 +0000\ncommitter GitHub <noreply@github.com> 1618504956 +0000\n\nMerge #8510 #8533\n\n8510: Move cursor position when using item movers r=jonas-schievink a=jonas-schievink\n\nThis updates the cursor position when moving items around to stay in the same location within the moved node.\r\n\r\nI changed the `moveItem` response to `SnippetTextEdit[]`, since that made more sense to me (the file was ignored by the client anyways, since the edits always apply to the current document). It also matches `onEnter`, which seems logical to me, but please let me know if this doesn't make sense.\r\n\r\nThere's still a bug in the client-side snippet code that will cause the cursor position to be slightly off when moving parameters in the same line (presumably we don't track the column correctly after deleting `$0`). Not really sure how to fix that immediately, but this PR should already be an improvement despite that bug.\n\n8533: Fix typo in style guide r=jonas-schievink a=jonas-schievink\n\nFixes bold text rendering\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3af303600afdc4282dde3a1c8b6c0810662a3e63", "html_url": "https://github.com/rust-lang/rust/commit/3af303600afdc4282dde3a1c8b6c0810662a3e63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3af303600afdc4282dde3a1c8b6c0810662a3e63/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d17d0c58cbe7006c656aced985552f51e1bd675", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d17d0c58cbe7006c656aced985552f51e1bd675", "html_url": "https://github.com/rust-lang/rust/commit/8d17d0c58cbe7006c656aced985552f51e1bd675"}, {"sha": "30aae2cefb9d068055ca8d250d04a288e3684394", "url": "https://api.github.com/repos/rust-lang/rust/commits/30aae2cefb9d068055ca8d250d04a288e3684394", "html_url": "https://github.com/rust-lang/rust/commit/30aae2cefb9d068055ca8d250d04a288e3684394"}, {"sha": "6e575d8c73fa93e2300c3c61343d7efa7f20b7bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e575d8c73fa93e2300c3c61343d7efa7f20b7bf", "html_url": "https://github.com/rust-lang/rust/commit/6e575d8c73fa93e2300c3c61343d7efa7f20b7bf"}], "stats": {"total": 159, "additions": 84, "deletions": 75}, "files": [{"sha": "246f10a0a8fbf1d7b85238368e9029b1993428fd", "filename": "crates/ide/src/move_item.rs", "status": "modified", "additions": 68, "deletions": 32, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/3af303600afdc4282dde3a1c8b6c0810662a3e63/crates%2Fide%2Fsrc%2Fmove_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af303600afdc4282dde3a1c8b6c0810662a3e63/crates%2Fide%2Fsrc%2Fmove_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmove_item.rs?ref=3af303600afdc4282dde3a1c8b6c0810662a3e63", "patch": "@@ -1,4 +1,4 @@\n-use std::iter::once;\n+use std::{iter::once, mem};\n \n use hir::Semantics;\n use ide_db::{base_db::FileRange, RootDatabase};\n@@ -102,7 +102,7 @@ fn move_in_direction(\n             ast::GenericArgList(it) => swap_sibling_in_list(node, it.generic_args(), range, direction),\n             ast::VariantList(it) => swap_sibling_in_list(node, it.variants(), range, direction),\n             ast::TypeBoundList(it) => swap_sibling_in_list(node, it.bounds(), range, direction),\n-            _ => Some(replace_nodes(node, &match direction {\n+            _ => Some(replace_nodes(range, node, &match direction {\n                 Direction::Up => node.prev_sibling(),\n                 Direction::Down => node.next_sibling(),\n             }?))\n@@ -125,7 +125,7 @@ fn swap_sibling_in_list<A: AstNode + Clone, I: Iterator<Item = A>>(\n         .next();\n \n     if let Some((l, r)) = list_lookup {\n-        Some(replace_nodes(l.syntax(), r.syntax()))\n+        Some(replace_nodes(range, l.syntax(), r.syntax()))\n     } else {\n         // Cursor is beyond any movable list item (for example, on curly brace in enum).\n         // It's not necessary, that parent of list is movable (arg list's parent is not, for example),\n@@ -134,11 +134,38 @@ fn swap_sibling_in_list<A: AstNode + Clone, I: Iterator<Item = A>>(\n     }\n }\n \n-fn replace_nodes(first: &SyntaxNode, second: &SyntaxNode) -> TextEdit {\n+fn replace_nodes<'a>(\n+    range: TextRange,\n+    mut first: &'a SyntaxNode,\n+    mut second: &'a SyntaxNode,\n+) -> TextEdit {\n+    let cursor_offset = if range.is_empty() {\n+        // FIXME: `applySnippetTextEdits` does not support non-empty selection ranges\n+        if first.text_range().contains_range(range) {\n+            Some(range.start() - first.text_range().start())\n+        } else if second.text_range().contains_range(range) {\n+            mem::swap(&mut first, &mut second);\n+            Some(range.start() - first.text_range().start())\n+        } else {\n+            None\n+        }\n+    } else {\n+        None\n+    };\n+\n+    let first_with_cursor = match cursor_offset {\n+        Some(offset) => {\n+            let mut item_text = first.text().to_string();\n+            item_text.insert_str(offset.into(), \"$0\");\n+            item_text\n+        }\n+        None => first.text().to_string(),\n+    };\n+\n     let mut edit = TextEditBuilder::default();\n \n     algo::diff(first, second).into_text_edit(&mut edit);\n-    algo::diff(second, first).into_text_edit(&mut edit);\n+    edit.replace(second.text_range(), first_with_cursor);\n \n     edit.finish()\n }\n@@ -188,7 +215,7 @@ fn main() {\n             expect![[r#\"\n fn main() {\n     match true {\n-        false => {\n+        false =>$0 {\n             println!(\"Test\");\n         },\n         true => {\n@@ -222,7 +249,7 @@ fn main() {\n         false => {\n             println!(\"Test\");\n         },\n-        true => {\n+        true =>$0 {\n             println!(\"Hello, world\");\n         }\n     };\n@@ -274,7 +301,7 @@ fn main() {\n             \"#,\n             expect![[r#\"\n fn main() {\n-    let test2 = 456;\n+    let test2$0 = 456;\n     let test = 123;\n }\n             \"#]],\n@@ -293,7 +320,7 @@ fn main() {\n             \"#,\n             expect![[r#\"\n fn main() {\n-    println!(\"All I want to say is...\");\n+    println!(\"All I want to say is...\");$0\n     println!(\"Hello, world\");\n }\n             \"#]],\n@@ -313,7 +340,7 @@ fn main() {\n fn main() {\n     if true {\n         println!(\"Test\");\n-    }\n+    }$0\n \n     println!(\"Hello, world\");\n }\n@@ -334,7 +361,7 @@ fn main() {\n fn main() {\n     for i in 0..10 {\n         println!(\"Test\");\n-    }\n+    }$0\n \n     println!(\"Hello, world\");\n }\n@@ -355,7 +382,7 @@ fn main() {\n fn main() {\n     loop {\n         println!(\"Test\");\n-    }\n+    }$0\n \n     println!(\"Hello, world\");\n }\n@@ -376,7 +403,7 @@ fn main() {\n fn main() {\n     while true {\n         println!(\"Test\");\n-    }\n+    }$0\n \n     println!(\"Hello, world\");\n }\n@@ -393,7 +420,7 @@ fn main() {\n             \"#,\n             expect![[r#\"\n fn main() {\n-    return 123;\n+    return 123;$0\n \n     println!(\"Hello, world\");\n }\n@@ -430,7 +457,7 @@ fn main() {}\n fn foo() {}$0$0\n             \"#,\n             expect![[r#\"\n-fn foo() {}\n+fn foo() {}$0\n \n fn main() {}\n             \"#]],\n@@ -451,7 +478,7 @@ impl Wow for Yay $0$0{}\n             expect![[r#\"\n struct Yay;\n \n-impl Wow for Yay {}\n+impl Wow for Yay $0{}\n \n trait Wow {}\n             \"#]],\n@@ -467,7 +494,7 @@ use std::vec::Vec;\n use std::collections::HashMap$0$0;\n             \"#,\n             expect![[r#\"\n-use std::collections::HashMap;\n+use std::collections::HashMap$0;\n use std::vec::Vec;\n             \"#]],\n             Direction::Up,\n@@ -502,7 +529,7 @@ fn main() {\n     }\n \n     #[test]\n-    fn test_moves_param_up() {\n+    fn test_moves_param() {\n         check(\n             r#\"\n fn test(one: i32, two$0$0: u32) {}\n@@ -512,14 +539,23 @@ fn main() {\n }\n             \"#,\n             expect![[r#\"\n-fn test(two: u32, one: i32) {}\n+fn test(two$0: u32, one: i32) {}\n \n fn main() {\n     test(123, 456);\n }\n             \"#]],\n             Direction::Up,\n         );\n+        check(\n+            r#\"\n+fn f($0$0arg: u8, arg2: u16) {}\n+            \"#,\n+            expect![[r#\"\n+fn f(arg2: u16, $0arg: u8) {}\n+            \"#]],\n+            Direction::Down,\n+        );\n     }\n \n     #[test]\n@@ -536,7 +572,7 @@ fn main() {\n fn test(one: i32, two: u32) {}\n \n fn main() {\n-    test(456, 123);\n+    test(456$0, 123);\n }\n             \"#]],\n             Direction::Up,\n@@ -557,7 +593,7 @@ fn main() {\n fn test(one: i32, two: u32) {}\n \n fn main() {\n-    test(456, 123);\n+    test(456, 123$0);\n }\n             \"#]],\n             Direction::Down,\n@@ -594,7 +630,7 @@ struct Test<A, B$0$0>(A, B);\n fn main() {}\n             \"#,\n             expect![[r#\"\n-struct Test<B, A>(A, B);\n+struct Test<B$0, A>(A, B);\n \n fn main() {}\n             \"#]],\n@@ -616,7 +652,7 @@ fn main() {\n struct Test<A, B>(A, B);\n \n fn main() {\n-    let t = Test::<&str, i32>(123, \"yay\");\n+    let t = Test::<&str$0, i32>(123, \"yay\");\n }\n             \"#]],\n             Direction::Up,\n@@ -636,7 +672,7 @@ fn main() {}\n             \"#,\n             expect![[r#\"\n enum Hello {\n-    Two,\n+    Two$0,\n     One\n }\n \n@@ -663,7 +699,7 @@ trait One {}\n \n trait Two {}\n \n-fn test<T: Two + One>(t: T) {}\n+fn test<T: Two$0 + One>(t: T) {}\n \n fn main() {}\n             \"#]],\n@@ -709,7 +745,7 @@ trait Yay {\n impl Yay for Test {\n     type One = i32;\n \n-    fn inner() {\n+    fn inner() {$0\n         println!(\"Mmmm\");\n     }\n \n@@ -736,7 +772,7 @@ fn test() {\n             \"#,\n             expect![[r#\"\n fn test() {\n-    mod hi {\n+    mod hi {$0\n         fn inner() {}\n     }\n \n@@ -764,7 +800,7 @@ fn main() {}\n             expect![[r#\"\n fn main() {}\n \n-#[derive(Debug)]\n+$0#[derive(Debug)]\n enum FooBar {\n     Foo,\n     Bar,\n@@ -784,7 +820,7 @@ fn main() {}\n             expect![[r#\"\n fn main() {}\n \n-enum FooBar {\n+$0enum FooBar {\n     Foo,\n     Bar,\n }\n@@ -804,7 +840,7 @@ fn main() {}\n             expect![[r#\"\n struct Test;\n \n-impl SomeTrait for Test {}\n+$0impl SomeTrait for Test {}\n \n trait SomeTrait {}\n \n@@ -831,7 +867,7 @@ fn main() {}\n enum FooBar {\n     Foo,\n     Bar,\n-}\n+}$0\n             \"#]],\n             Direction::Down,\n         );\n@@ -848,7 +884,7 @@ fn main() {}\n             expect![[r#\"\n struct Test;\n \n-impl SomeTrait for Test {}\n+impl SomeTrait for Test {}$0\n \n trait SomeTrait {}\n "}, {"sha": "1f59402e5ce48a0cdf31d261bc516af8f852326c", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3af303600afdc4282dde3a1c8b6c0810662a3e63/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af303600afdc4282dde3a1c8b6c0810662a3e63/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=3af303600afdc4282dde3a1c8b6c0810662a3e63", "patch": "@@ -1410,7 +1410,7 @@ pub(crate) fn handle_open_cargo_toml(\n pub(crate) fn handle_move_item(\n     snap: GlobalStateSnapshot,\n     params: lsp_ext::MoveItemParams,\n-) -> Result<Option<lsp_types::TextDocumentEdit>> {\n+) -> Result<Vec<lsp_ext::SnippetTextEdit>> {\n     let _p = profile::span(\"handle_move_item\");\n     let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n     let range = from_proto::file_range(&snap, params.text_document, params.range)?;\n@@ -1421,8 +1421,11 @@ pub(crate) fn handle_move_item(\n     };\n \n     match snap.analysis.move_item(range, direction)? {\n-        Some(text_edit) => Ok(Some(to_proto::text_document_edit(&snap, file_id, text_edit)?)),\n-        None => Ok(None),\n+        Some(text_edit) => {\n+            let line_index = snap.file_line_index(file_id)?;\n+            Ok(to_proto::snippet_text_edit_vec(&line_index, true, text_edit))\n+        }\n+        None => Ok(vec![]),\n     }\n }\n "}, {"sha": "d648cda32e7182cdfbdcacee8577d6d1b22a172e", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3af303600afdc4282dde3a1c8b6c0810662a3e63/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af303600afdc4282dde3a1c8b6c0810662a3e63/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=3af303600afdc4282dde3a1c8b6c0810662a3e63", "patch": "@@ -407,7 +407,7 @@ pub enum MoveItem {}\n \n impl Request for MoveItem {\n     type Params = MoveItemParams;\n-    type Result = Option<lsp_types::TextDocumentEdit>;\n+    type Result = Vec<SnippetTextEdit>;\n     const METHOD: &'static str = \"experimental/moveItem\";\n }\n "}, {"sha": "1a1f65f3b846daa4af5d4d015fae364dd41ef733", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3af303600afdc4282dde3a1c8b6c0810662a3e63/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3af303600afdc4282dde3a1c8b6c0810662a3e63/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=3af303600afdc4282dde3a1c8b6c0810662a3e63", "patch": "@@ -688,18 +688,6 @@ pub(crate) fn goto_definition_response(\n     }\n }\n \n-pub(crate) fn text_document_edit(\n-    snap: &GlobalStateSnapshot,\n-    file_id: FileId,\n-    edit: TextEdit,\n-) -> Result<lsp_types::TextDocumentEdit> {\n-    let text_document = optional_versioned_text_document_identifier(snap, file_id);\n-    let line_index = snap.file_line_index(file_id)?;\n-    let edits =\n-        edit.into_iter().map(|it| lsp_types::OneOf::Left(text_edit(&line_index, it))).collect();\n-    Ok(lsp_types::TextDocumentEdit { text_document, edits })\n-}\n-\n pub(crate) fn snippet_text_document_edit(\n     snap: &GlobalStateSnapshot,\n     is_snippet: bool,"}, {"sha": "a4d92242b77a7c7c4b67b45ac3847a3be05504e4", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3af303600afdc4282dde3a1c8b6c0810662a3e63/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/3af303600afdc4282dde3a1c8b6c0810662a3e63/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=3af303600afdc4282dde3a1c8b6c0810662a3e63", "patch": "@@ -1,8 +1,8 @@\n <!---\n-lsp_ext.rs hash: faae991334a151d0\n+lsp_ext.rs hash: b19ddc3ab8767af9\n \n If you need to change the above hash to make the test pass, please check if you\n-need to adjust this doc as well and ping this  issue:\n+need to adjust this doc as well and ping this issue:\n \n   https://github.com/rust-analyzer/rust-analyzer/issues/4604\n \n@@ -620,7 +620,7 @@ This request is sent from client to server to move item under cursor or selectio\n \n **Request:** `MoveItemParams`\n \n-**Response:** `TextDocumentEdit | null`\n+**Response:** `SnippetTextEdit[]`\n \n ```typescript\n export interface MoveItemParams {"}, {"sha": "078c478d41bcb64e4cd68acddb9d4f4eea24d003", "filename": "docs/dev/style.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3af303600afdc4282dde3a1c8b6c0810662a3e63/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/3af303600afdc4282dde3a1c8b6c0810662a3e63/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=3af303600afdc4282dde3a1c8b6c0810662a3e63", "patch": "@@ -159,7 +159,7 @@ More than one mark per test / code branch doesn't add significantly to understan\n Do not use `#[should_panic]` tests.\n Instead, explicitly check for `None`, `Err`, etc.\n \n-**Rationale:**a `#[should_panic]` is a tool for library authors, to makes sure that API does not fail silently, when misused.\n+**Rationale:** `#[should_panic]` is a tool for library authors, to makes sure that API does not fail silently, when misused.\n `rust-analyzer` is not a library, we don't need to test for API misuse, and we have to handle any user input without panics.\n Panic messages in the logs from the `#[should_panic]` tests are confusing.\n "}, {"sha": "4092435dbe77d8e1659619269023ebafd3c754c8", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3af303600afdc4282dde3a1c8b6c0810662a3e63/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3af303600afdc4282dde3a1c8b6c0810662a3e63/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=3af303600afdc4282dde3a1c8b6c0810662a3e63", "patch": "@@ -148,34 +148,16 @@ export function moveItem(ctx: Ctx, direction: ra.Direction): Cmd {\n         const client = ctx.client;\n         if (!editor || !client) return;\n \n-        const edit = await client.sendRequest(ra.moveItem, {\n+        const lcEdits = await client.sendRequest(ra.moveItem, {\n             range: client.code2ProtocolConverter.asRange(editor.selection),\n             textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n             direction\n         });\n \n-        if (!edit) return;\n+        if (!lcEdits) return;\n \n-        let cursor: vscode.Position | null = null;\n-\n-        await editor.edit((builder) => {\n-            client.protocol2CodeConverter.asTextEdits(edit.edits).forEach((edit: any) => {\n-                builder.replace(edit.range, edit.newText);\n-\n-                if (direction === ra.Direction.Up) {\n-                    if (!cursor || edit.range.end.isBeforeOrEqual(cursor)) {\n-                        cursor = edit.range.end;\n-                    }\n-                } else {\n-                    if (!cursor || edit.range.end.isAfterOrEqual(cursor)) {\n-                        cursor = edit.range.end;\n-                    }\n-                }\n-            });\n-        }).then(() => {\n-            const newPosition = cursor ?? editor.selection.start;\n-            editor.selection = new vscode.Selection(newPosition, newPosition);\n-        });\n+        const edits = client.protocol2CodeConverter.asTextEdits(lcEdits);\n+        await applySnippetTextEdits(editor, edits);\n     };\n }\n "}, {"sha": "f78de894b54fb1fd2acd44ab8cc118dd972221a4", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3af303600afdc4282dde3a1c8b6c0810662a3e63/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/3af303600afdc4282dde3a1c8b6c0810662a3e63/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=3af303600afdc4282dde3a1c8b6c0810662a3e63", "patch": "@@ -129,7 +129,7 @@ export interface OpenCargoTomlParams {\n     textDocument: lc.TextDocumentIdentifier;\n }\n \n-export const moveItem = new lc.RequestType<MoveItemParams, lc.TextDocumentEdit | void, void>(\"experimental/moveItem\");\n+export const moveItem = new lc.RequestType<MoveItemParams, lc.TextEdit[], void>(\"experimental/moveItem\");\n \n export interface MoveItemParams {\n     textDocument: lc.TextDocumentIdentifier;"}]}