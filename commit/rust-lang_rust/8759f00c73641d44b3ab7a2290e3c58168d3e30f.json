{"sha": "8759f00c73641d44b3ab7a2290e3c58168d3e30f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NTlmMDBjNzM2NDFkNDRiM2FiN2EyMjkwZTNjNTgxNjhkM2UzMGY=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-05-06T15:33:44Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2021-07-26T21:15:18Z"}, "message": "Actually infer args in visitors", "tree": {"sha": "b2d4cdbbaa0b84be96c03e068d0f1fa6539d4ec7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2d4cdbbaa0b84be96c03e068d0f1fa6539d4ec7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8759f00c73641d44b3ab7a2290e3c58168d3e30f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8759f00c73641d44b3ab7a2290e3c58168d3e30f", "html_url": "https://github.com/rust-lang/rust/commit/8759f00c73641d44b3ab7a2290e3c58168d3e30f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8759f00c73641d44b3ab7a2290e3c58168d3e30f/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3605675bb1b4f1fb65f80585ded2b62aea15bf2c", "html_url": "https://github.com/rust-lang/rust/commit/3605675bb1b4f1fb65f80585ded2b62aea15bf2c"}], "stats": {"total": 354, "additions": 257, "deletions": 97}, "files": [{"sha": "8cab83707dcbc8d9f3948bedbcb5a585ade2e46c", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -336,6 +336,8 @@ pub enum ParamKindOrd {\n     // is active. Specifically, if it's only `min_const_generics`, it will still require\n     // ordering consts after types.\n     Const { unordered: bool },\n+    // `Infer` is not actually constructed directly from the AST, but is implicitly constructed\n+    // during HIR lowering, and `ParamKindOrd` will implicitly order inferred variables last.\n     Infer,\n }\n "}, {"sha": "a19a2fbbe74f98a91c9e815d7bc0643c4f5f6486", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -51,7 +51,7 @@ use rustc_hir::def::{DefKind, Namespace, PartialRes, PerNS, Res};\n use rustc_hir::def_id::{DefId, DefIdMap, DefPathHash, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::definitions::{DefKey, DefPathData, Definitions};\n use rustc_hir::intravisit;\n-use rustc_hir::{ConstArg, GenericArg, ParamName};\n+use rustc_hir::{ConstArg, GenericArg, InferKind, ParamName};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_session::lint::builtin::{BARE_TRAIT_OBJECTS, MISSING_ABI};\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n@@ -1219,9 +1219,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             ast::GenericArg::Lifetime(lt) => GenericArg::Lifetime(self.lower_lifetime(&lt)),\n             ast::GenericArg::Type(ty) => {\n                 match ty.kind {\n-                    TyKind::Infer => {\n+                    TyKind::Infer if self.sess.features_untracked().generic_arg_infer => {\n                         let hir_id = self.lower_node_id(ty.id);\n-                        return GenericArg::Infer(hir::InferArg { hir_id, span: ty.span });\n+                        return GenericArg::Infer(hir::InferArg {\n+                            hir_id,\n+                            span: ty.span,\n+                            kind: InferKind::Type,\n+                        });\n                     }\n                     // We parse const arguments as path types as we cannot distinguish them during\n                     // parsing. We try to resolve that ambiguity by attempting resolution in both the"}, {"sha": "46bf49d640f2595d1a30ebd01a92963bb1ffed70", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -684,6 +684,9 @@ declare_features! (\n     /// Allows `cfg(target_abi = \"...\")`.\n     (active, cfg_target_abi, \"1.55.0\", Some(80970), None),\n \n+    /// Infer generic args for both consts and types.\n+    (active, generic_arg_infer, \"1.55.0\", Some(85077), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "4914280f5c87fe64ac0d114599ec73d1d80b4364", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -253,9 +253,23 @@ pub struct ConstArg {\n     pub span: Span,\n }\n \n+#[derive(Copy, Clone, Encodable, Debug, HashStable_Generic)]\n+pub enum InferKind {\n+    Const,\n+    Type,\n+}\n+\n+impl InferKind {\n+    #[inline]\n+    pub fn is_type(self) -> bool {\n+        matches!(self, InferKind::Type)\n+    }\n+}\n+\n #[derive(Encodable, Debug, HashStable_Generic)]\n pub struct InferArg {\n     pub hir_id: HirId,\n+    pub kind: InferKind,\n     pub span: Span,\n }\n \n@@ -365,22 +379,29 @@ impl GenericArgs<'_> {\n         panic!(\"GenericArgs::inputs: not a `Fn(T) -> U`\");\n     }\n \n-    pub fn own_counts(&self) -> GenericParamCount {\n-        // We could cache this as a property of `GenericParamCount`, but\n-        // the aim is to refactor this away entirely eventually and the\n-        // presence of this method will be a constant reminder.\n-        let mut own_counts: GenericParamCount = Default::default();\n+    #[inline]\n+    pub fn has_type_params(&self) -> bool {\n+        self.args.iter().any(|arg| matches!(arg, GenericArg::Type(_)))\n+    }\n \n-        for arg in self.args {\n-            match arg {\n-                GenericArg::Lifetime(_) => own_counts.lifetimes += 1,\n-                GenericArg::Type(_) => own_counts.types += 1,\n-                GenericArg::Const(_) => own_counts.consts += 1,\n-                GenericArg::Infer(_) => own_counts.infer += 1,\n-            };\n-        }\n+    #[inline]\n+    pub fn num_type_params(&self) -> usize {\n+        self.args.iter().filter(|arg| matches!(arg, GenericArg::Type(_))).count()\n+    }\n+\n+    #[inline]\n+    pub fn num_lifetime_params(&self) -> usize {\n+        self.args.iter().filter(|arg| matches!(arg, GenericArg::Lifetime(_))).count()\n+    }\n \n-        own_counts\n+    #[inline]\n+    pub fn has_lifetime_params(&self) -> bool {\n+        self.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n+    }\n+\n+    #[inline]\n+    pub fn num_generic_params(&self) -> usize {\n+        self.args.iter().filter(|arg| !matches!(arg, GenericArg::Lifetime(_))).count()\n     }\n \n     /// The span encompassing the text inside the surrounding brackets."}, {"sha": "94dd2116e166bdb68bb17f2b5dc3d8d0c375a1b8", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -103,7 +103,7 @@ impl<'a> State<'a> {\n             Node::TraitRef(a) => self.print_trait_ref(&a),\n             Node::Binding(a) | Node::Pat(a) => self.print_pat(&a),\n             Node::Arm(a) => self.print_arm(&a),\n-            Node::Infer(_) => self.print_string(\"_\", ast::StrStyle::Cooked),\n+            Node::Infer(_) => self.s.word(\"_\"),\n             Node::Block(a) => {\n                 // Containing cbox, will be closed by print-block at `}`.\n                 self.cbox(INDENT_UNIT);"}, {"sha": "cd91ecdf2bad3cbce953fb8b975b9283afff481b", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -1224,6 +1224,13 @@ impl<'tcx> Visitor<'tcx> for TypePrivacyVisitor<'tcx> {\n                 }\n             }\n         } else {\n+            let local_id = self.tcx.hir().local_def_id(inf.hir_id);\n+            if let Some(did) = self.tcx.opt_const_param_of(local_id) {\n+                if self.visit_def_id(did, \"inferred\", &\"\").is_break() {\n+                    return;\n+                }\n+            }\n+\n             // FIXME see above note for same issue.\n             if self.visit(rustc_typeck::hir_ty_to_ty(self.tcx, &inf.to_ty())).is_break() {\n                 return;"}, {"sha": "bf6d5542f62f8c5b743b9f5100be4591a1787e3b", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -2559,7 +2559,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 }\n                 GenericArg::Infer(inf) => {\n                     self.visit_id(inf.hir_id);\n-                    i += 1;\n+                    if inf.kind.is_type() {\n+                        i += 1;\n+                    }\n                 }\n             }\n         }"}, {"sha": "536ebdef426b899b312995cf959178f16bd9d8c4", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -622,6 +622,7 @@ symbols! {\n         generator,\n         generator_state,\n         generators,\n+        generic_arg_infer,\n         generic_associated_types,\n         generic_param_attrs,\n         get_context,"}, {"sha": "eb6265dec89c08bd4ba8147908db7fab87f4b349", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -39,11 +39,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         );\n \n         if let GenericParamDefKind::Const { .. } = param.kind {\n-            if matches!(\n-                arg,\n-                GenericArg::Type(hir::Ty { kind: hir::TyKind::Infer, .. }) | GenericArg::Infer(_)\n-            ) {\n+            if matches!(arg, GenericArg::Type(hir::Ty { kind: hir::TyKind::Infer, .. })) {\n                 err.help(\"const arguments cannot yet be inferred with `_`\");\n+                if sess.is_nightly_build() {\n+                    err.help(\n+                        \"add `#![feature(generic_arg_infer)]` to the crate attributes to enable\",\n+                    );\n+                }\n             }\n         }\n \n@@ -458,8 +460,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let default_counts = gen_params.own_defaults();\n         let param_counts = gen_params.own_counts();\n         let named_type_param_count = param_counts.types - has_self as usize;\n-        let arg_counts = gen_args.own_counts();\n-        let infer_lifetimes = gen_pos != GenericArgPosition::Type && arg_counts.lifetimes == 0;\n+        let infer_lifetimes =\n+            gen_pos != GenericArgPosition::Type && !gen_args.has_lifetime_params();\n \n         if gen_pos != GenericArgPosition::Type && !gen_args.bindings.is_empty() {\n             Self::prohibit_assoc_ty_binding(tcx, gen_args.bindings[0].span);\n@@ -517,7 +519,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let min_expected_lifetime_args = if infer_lifetimes { 0 } else { param_counts.lifetimes };\n         let max_expected_lifetime_args = param_counts.lifetimes;\n-        let num_provided_lifetime_args = arg_counts.lifetimes;\n+        let num_provided_lifetime_args = gen_args.num_lifetime_params();\n \n         let lifetimes_correct = check_lifetime_args(\n             min_expected_lifetime_args,\n@@ -588,14 +590,14 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     - default_counts.consts\n             };\n             debug!(\"expected_min: {:?}\", expected_min);\n-            debug!(\"arg_counts.lifetimes: {:?}\", arg_counts.lifetimes);\n+            debug!(\"arg_counts.lifetimes: {:?}\", gen_args.num_lifetime_params());\n \n             check_types_and_consts(\n                 expected_min,\n                 param_counts.consts + named_type_param_count,\n-                arg_counts.consts + arg_counts.types + arg_counts.infer,\n+                gen_args.num_generic_params(),\n                 param_counts.lifetimes + has_self as usize,\n-                arg_counts.lifetimes,\n+                gen_args.num_lifetime_params(),\n             )\n         };\n \n@@ -673,8 +675,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         position: GenericArgPosition,\n     ) -> ExplicitLateBound {\n         let param_counts = def.own_counts();\n-        let arg_counts = args.own_counts();\n-        let infer_lifetimes = position != GenericArgPosition::Type && arg_counts.lifetimes == 0;\n+        let infer_lifetimes = position != GenericArgPosition::Type && !args.has_lifetime_params();\n \n         if infer_lifetimes {\n             return ExplicitLateBound::No;\n@@ -687,7 +688,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let span = args.args[0].span();\n \n             if position == GenericArgPosition::Value\n-                && arg_counts.lifetimes != param_counts.lifetimes\n+                && args.num_lifetime_params() != param_counts.lifetimes\n             {\n                 let mut err = tcx.sess.struct_span_err(span, msg);\n                 err.span_note(span_late, note);"}, {"sha": "03c4c5dfa0c02e765556164bf8077df4c1db628b", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -463,8 +463,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n                     (&GenericParamDefKind::Const { has_default }, hir::GenericArg::Infer(inf)) => {\n                         if has_default {\n-                            // FIXME(const_generics): Actually infer parameter here?\n                             tcx.const_param_default(param.def_id).into()\n+                        } else if self.astconv.allow_ty_infer() {\n+                            // FIXME(const_generics): Actually infer parameter here?\n+                            todo!()\n                         } else {\n                             self.inferred_params.push(inf.span);\n                             tcx.ty_error().into()\n@@ -1963,7 +1965,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         }\n                         has_err = true;\n                         err_for_ty = true;\n-                        (inf.span, \"inferred\")\n+                        (inf.span, \"generic\")\n                     }\n                 };\n                 let mut err = struct_span_err!("}, {"sha": "f5776ae7cf66a47a1ec812bf5fbb9d6ebb024575", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -1480,10 +1480,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         self.fcx.const_arg_to_const(&ct.value, param.def_id).into()\n                     }\n                     (GenericParamDefKind::Type { .. }, GenericArg::Infer(inf)) => {\n-                        self.fcx.to_ty(&inf.to_ty()).into()\n+                        self.fcx.ty_infer(Some(param), inf.span).into()\n                     }\n                     (GenericParamDefKind::Const { .. }, GenericArg::Infer(inf)) => {\n-                        self.fcx.var_for_def(inf.span, param)\n+                        let tcx = self.fcx.tcx();\n+                        self.fcx.ct_infer(tcx.type_of(param.def_id), Some(param), inf.span).into()\n                     }\n                     _ => unreachable!(),\n                 }"}, {"sha": "3aceaba882d6cc4cc804b3215d7cd5c4bfba60e1", "filename": "compiler/rustc_typeck/src/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fconfirm.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -367,10 +367,11 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n                         self.cfcx.const_arg_to_const(&ct.value, param.def_id).into()\n                     }\n                     (GenericParamDefKind::Type { .. }, GenericArg::Infer(inf)) => {\n-                        self.cfcx.to_ty(&inf.to_ty()).into()\n+                        self.cfcx.ty_infer(Some(param), inf.span).into()\n                     }\n                     (GenericParamDefKind::Const { .. }, GenericArg::Infer(inf)) => {\n-                        self.cfcx.var_for_def(inf.span, param)\n+                        let tcx = self.cfcx.tcx();\n+                        self.cfcx.ct_infer(tcx.type_of(param.def_id), Some(param), inf.span).into()\n                     }\n                     _ => unreachable!(),\n                 }"}, {"sha": "96b3fa9aa0143e0011e6e18d2a5b7872cda398fb", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -20,6 +20,9 @@ use super::{bad_placeholder_type, is_suggestable_infer_ty};\n ///\n /// This should be called using the query `tcx.opt_const_param_of`.\n pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<DefId> {\n+    // FIXME(generic_arg_infer): allow for returning DefIds of inference of\n+    // GenericArg::Infer below. This may require a change where GenericArg::Infer has some flag\n+    // for const or type.\n     use hir::*;\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n "}, {"sha": "fb6257696b96d5a66abd2ff05bdaedf9725ac01b", "filename": "src/test/ui/const-generics/issues/issue-62878.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -1,5 +1,5 @@\n // revisions: full min\n-#![cfg_attr(full, feature(const_generics))]\n+#![cfg_attr(full, feature(const_generics, generic_arg_infer))]\n #![cfg_attr(full, allow(incomplete_features))]\n \n fn foo<const N: usize, const A: [u8; N]>() {}"}, {"sha": "57d6941587a435084415f852ebf43f6f066342d0", "filename": "src/test/ui/const-generics/min_const_generics/inferred_const.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finferred_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finferred_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Finferred_const.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -1,3 +1,4 @@\n+#![feature(generic_arg_infer)]\n // run-pass\n \n fn foo<const N: usize, const K: usize>(_data: [u32; N]) -> [u32; K] {"}, {"sha": "c17f02d58f325d57d073a7167baac194cca4de9d", "filename": "src/test/ui/feature-gates/feature-gate-generic_arg_infer.normal.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.normal.stderr?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -0,0 +1,12 @@\n+error[E0747]: type provided when a constant was expected\n+  --> $DIR/feature-gate-generic_arg_infer.rs:11:20\n+   |\n+LL |     let _x = foo::<_>([1,2]);\n+   |                    ^\n+   |\n+   = help: const arguments cannot yet be inferred with `_`\n+   = help: add `#![feature(generic_arg_infer)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "4729773b12ef04d9c8f9186313209b881f9aec1c", "filename": "src/test/ui/feature-gates/feature-gate-generic_arg_infer.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-generic_arg_infer.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -0,0 +1,13 @@\n+// [feature] run-pass\n+// revisions: normal feature\n+\n+#![cfg_attr(feature, feature(generic_arg_infer))]\n+\n+fn foo<const N: usize>(_: [u8; N]) -> [u8; N] {\n+  [0; N]\n+}\n+\n+fn main() {\n+    let _x = foo::<_>([1,2]);\n+    //[normal]~^ ERROR: type provided when a constant was expected\n+}"}, {"sha": "1b67ccd6c433786a7239ceee8a939b2976cf9dec", "filename": "src/test/ui/inference/infer-arg-test.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Finference%2Finfer-arg-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Finference%2Finfer-arg-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finfer-arg-test.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -0,0 +1,24 @@\n+#![feature(generic_arg_infer)]\n+\n+struct All<'a, T, const N: usize> {\n+  v: &'a T,\n+}\n+\n+struct BadInfer<_>;\n+//~^ ERROR expected identifier\n+//~| ERROR parameter `_` is never used\n+\n+fn all_fn<'a, T, const N: usize>() {}\n+\n+fn bad_infer_fn<_>() {}\n+//~^ ERROR expected identifier\n+\n+\n+fn main() {\n+  let a: All<_, _, _>;\n+  all_fn();\n+  let v: [u8; _];\n+  //~^ ERROR in expressions\n+  let v: [u8; 10] = [0; _];\n+  //~^ ERROR in expressions\n+}"}, {"sha": "30e171eac21214b8c421ce8e8bbb5c002d578700", "filename": "src/test/ui/inference/infer-arg-test.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Finference%2Finfer-arg-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Finference%2Finfer-arg-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Finfer-arg-test.stderr?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -0,0 +1,36 @@\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/infer-arg-test.rs:7:17\n+   |\n+LL | struct BadInfer<_>;\n+   |                 ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/infer-arg-test.rs:13:17\n+   |\n+LL | fn bad_infer_fn<_>() {}\n+   |                 ^ expected identifier, found reserved identifier\n+\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/infer-arg-test.rs:20:15\n+   |\n+LL |   let v: [u8; _];\n+   |               ^ `_` not allowed here\n+\n+error: in expressions, `_` can only be used on the left-hand side of an assignment\n+  --> $DIR/infer-arg-test.rs:22:25\n+   |\n+LL |   let v: [u8; 10] = [0; _];\n+   |                         ^ `_` not allowed here\n+\n+error[E0392]: parameter `_` is never used\n+  --> $DIR/infer-arg-test.rs:7:17\n+   |\n+LL | struct BadInfer<_>;\n+   |                 ^ unused parameter\n+   |\n+   = help: consider removing `_`, referring to it in a field, or using a marker such as `PhantomData`\n+   = help: if you intended `_` to be a const parameter, use `const _: usize` instead\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "8a1156b8fc8ad132846417a474b6e650591491fb", "filename": "src/test/ui/object-lifetime-default-inferred.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fobject-lifetime-default-inferred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fobject-lifetime-default-inferred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime-default-inferred.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -0,0 +1,35 @@\n+// run-pass\n+// Test that even with prior inferred parameters, object lifetimes of objects after are still\n+// valid.\n+\n+// pretty-expanded FIXME #23616\n+\n+#![allow(dead_code)]\n+#![feature(generic_arg_infer)]\n+\n+trait Test {\n+    fn foo(&self) { }\n+}\n+\n+struct Foo;\n+impl Test for Foo {}\n+\n+struct SomeStruct<'a> {\n+    t: &'a dyn Test,\n+    u: &'a (dyn Test+'a),\n+}\n+\n+fn a<'a, const N: usize>(_: [u8; N], t: &'a (dyn Test+'a), mut ss: SomeStruct<'a>) {\n+    ss.t = t;\n+}\n+\n+fn b<'a, T>(_: T, t: &'a (dyn Test+'a), mut ss: SomeStruct<'a>) {\n+    ss.u = t;\n+}\n+\n+fn main() {\n+    // Inside a function body, we can just infer both\n+    // lifetimes, to allow &'tmp (Display+'static).\n+    a::<_>([], &Foo as &dyn Test, SomeStruct{t:&Foo,u:&Foo});\n+    b::<_>(0u8, &Foo as &dyn Test, SomeStruct{t:&Foo,u:&Foo});\n+}"}, {"sha": "02af61e8539677c7530f13b08745ffe359b01db7", "filename": "src/test/ui/parser/issue-14303-fncall.full.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.full.stderr?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -0,0 +1,9 @@\n+error[E0747]: type provided when a lifetime was expected\n+  --> $DIR/issue-14303-fncall.rs:16:26\n+   |\n+LL |         .collect::<Vec<S<_, 'a>>>();\n+   |                          ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "9f3359b3f68a9c5a87d65de568d5a34abd9a804e", "filename": "src/test/ui/parser/issue-14303-fncall.generic_arg.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.generic_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.generic_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.generic_arg.stderr?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -1,5 +1,5 @@\n error[E0747]: inferred provided when a lifetime was expected\n-  --> $DIR/issue-14303-fncall.rs:13:26\n+  --> $DIR/issue-14303-fncall.rs:16:26\n    |\n LL |         .collect::<Vec<S<_, 'a>>>();\n    |                          ^", "previous_filename": "src/test/ui/parser/issue-14303-fncall.stderr"}, {"sha": "976a79a59b1f88adca4256d47549d95d07e642d7", "filename": "src/test/ui/parser/issue-14303-fncall.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -1,6 +1,9 @@\n-// can't run rustfix because it doesn't handle multipart suggestions correctly\n+// revisions: full generic_arg\n // compile-flags: -Zborrowck=mir\n+// can't run rustfix because it doesn't handle multipart suggestions correctly\n // we need the above to avoid ast borrowck failure in recovered code\n+#![cfg_attr(generic_arg, feature(generic_arg_infer))]\n+\n \n struct S<'a, T> {\n     a: &'a T,\n@@ -11,7 +14,8 @@ fn foo<'a, 'b>(start: &'a usize, end: &'a usize) {\n     let _x = (*start..*end)\n         .map(|x| S { a: start, b: end })\n         .collect::<Vec<S<_, 'a>>>();\n-        //~^ ERROR inferred provided when a lifetime was expected\n+        //[generic_arg]~^ ERROR inferred provided when a lifetime was expected\n+        //[full]~^^ ERROR type provided when a lifetime was expected\n }\n \n fn main() {}"}, {"sha": "3a42415e4746c9d3347f99cd49fd4596fb24c212", "filename": "src/test/ui/privacy/associated-item-privacy-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -282,7 +282,7 @@ LL |         let _: <Pub as PubTr<_>>::AssocTy;\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n    |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_parent_substs::mac` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:119:17"}, {"sha": "278d049224401e336ae581a7371a09fc1df014b2", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.full.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.full.stderr?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -1,5 +1,5 @@\n error[E0282]: type annotations needed for `Option<_>`\n-  --> $DIR/issue-42234-unknown-receiver-type.rs:7:7\n+  --> $DIR/issue-42234-unknown-receiver-type.rs:10:7\n    |\n LL |     let x: Option<_> = None;\n    |         - consider giving `x` the explicit type `Option<_>`, where the type parameter `T` is specified\n@@ -9,7 +9,7 @@ LL |     x.unwrap().method_that_could_exist_on_some_type();\n    = note: type must be known at this point\n \n error[E0282]: type annotations needed\n-  --> $DIR/issue-42234-unknown-receiver-type.rs:13:10\n+  --> $DIR/issue-42234-unknown-receiver-type.rs:16:10\n    |\n LL |         .sum::<_>()\n    |          ^^^ cannot infer type", "previous_filename": "src/test/ui/span/issue-42234-unknown-receiver-type.stderr"}, {"sha": "8d4ed4aea6a6c565a1b9c69774e2dc8b16424bc8", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.generic_arg.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.generic_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.generic_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.generic_arg.stderr?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -0,0 +1,21 @@\n+error[E0282]: type annotations needed for `Option<_>`\n+  --> $DIR/issue-42234-unknown-receiver-type.rs:10:7\n+   |\n+LL |     let x: Option<_> = None;\n+   |         - consider giving `x` the explicit type `Option<_>`, where the type parameter `T` is specified\n+LL |     x.unwrap().method_that_could_exist_on_some_type();\n+   |       ^^^^^^ cannot infer type for type parameter `T`\n+   |\n+   = note: type must be known at this point\n+\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-42234-unknown-receiver-type.rs:16:16\n+   |\n+LL |         .sum::<_>()\n+   |                ^ cannot infer type for type parameter `S` declared on the associated function `sum`\n+   |\n+   = note: type must be known at this point\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "15b00de44b93395b26a18c090be28268201d0d2a", "filename": "src/test/ui/span/issue-42234-unknown-receiver-type.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-42234-unknown-receiver-type.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -1,3 +1,6 @@\n+// revisions: full generic_arg\n+#![cfg_attr(generic_arg, feature(generic_arg_infer))]\n+\n // When the type of a method call's receiver is unknown, the span should point\n // to the receiver (and not the entire call, as was previously the case before\n // the fix of which this tests)."}, {"sha": "d5ee717accd26461c728990ce8a69465985580fc", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 47, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::{\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n     intravisit::{walk_ty, walk_inf, NestedVisitorMap, Visitor},\n-    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Node, Path, PathSegment,\n+    Expr, ExprKind, FnRetTy, FnSig, GenericArg, HirId, Impl, ImplItemKind, Item, ItemKind, Path,\n     QPath, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -280,52 +280,6 @@ impl<'tcx> Visitor<'tcx> for SkipTyCollector {\n     }\n }\n \n-<<<<<<< HEAD\n-=======\n-struct LintTyCollector<'a, 'tcx> {\n-    cx: &'a LateContext<'tcx>,\n-    self_ty: Ty<'tcx>,\n-    types_to_lint: Vec<HirId>,\n-    types_to_skip: Vec<HirId>,\n-}\n-\n-impl<'a, 'tcx> Visitor<'tcx> for LintTyCollector<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n-\n-    fn visit_ty(&mut self, hir_ty: &'tcx hir::Ty<'_>) {\n-        if_chain! {\n-            if let Some(ty) = self.cx.typeck_results().node_type_opt(hir_ty.hir_id);\n-            if should_lint_ty(hir_ty, ty, self.self_ty);\n-            then {\n-                self.types_to_lint.push(hir_ty.hir_id);\n-            } else {\n-                self.types_to_skip.push(hir_ty.hir_id);\n-            }\n-        }\n-\n-        walk_ty(self, hir_ty);\n-    }\n-\n-    fn visit_infer(&mut self, inf: &'tcx hir::InferArg) {\n-        if_chain! {\n-            if let Some(ty) = self.cx.typeck_results().node_type_opt(inf.hir_id);\n-            if should_lint_ty(&inf.to_ty(), ty, self.self_ty);\n-            then {\n-                self.types_to_lint.push(inf.hir_id);\n-            } else {\n-                self.types_to_skip.push(inf.hir_id);\n-            }\n-        }\n-\n-        walk_inf(self, inf)\n-    }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-}\n-\n->>>>>>> Add inferred args to typeck\n fn span_lint(cx: &LateContext<'_>, span: Span) {\n     span_lint_and_sugg(\n         cx,"}, {"sha": "6ea360a88a63e3c5169b14ac41571190fc61b0c1", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -904,7 +904,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n             TyKind::Rptr(lifetime, ref mut_ty) => {\n-                self.hash_lifetime(lifetime);\n+                self.hash_lifetime(*lifetime);\n                 self.hash_ty(mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n@@ -924,7 +924,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 bfn.decl.c_variadic.hash(&mut self.s);\n             },\n             TyKind::Tup(ty_list) => {\n-                for ty in ty_list {\n+                for ty in *ty_list {\n                     self.hash_ty(ty);\n                 }\n             },\n@@ -933,7 +933,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_generic_args(arg_list);\n             },\n             TyKind::TraitObject(_, lifetime, _) => {\n-                self.hash_lifetime(lifetime);\n+                self.hash_lifetime(*lifetime);\n             },\n             TyKind::Typeof(anon_const) => {\n                 self.hash_body(anon_const.body);"}, {"sha": "df0598a58cd3617cdb539261d29416537215802f", "filename": "src/tools/clippy/tests/ui/transmute_ptr_to_ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8759f00c73641d44b3ab7a2290e3c58168d3e30f/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ftransmute_ptr_to_ref.stderr?ref=8759f00c73641d44b3ab7a2290e3c58168d3e30f", "patch": "@@ -46,13 +46,13 @@ error: transmute from a pointer type (`*const i32`) to a reference type (`&issue\n   --> $DIR/transmute_ptr_to_ref.rs:32:32\n    |\n LL |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const issue1231::Foo<u8>)`\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const Foo<_>)`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<&u8>`)\n   --> $DIR/transmute_ptr_to_ref.rs:34:33\n    |\n LL |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const issue1231::Foo<&u8>)`\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const Foo<&_>)`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&u8`)\n   --> $DIR/transmute_ptr_to_ref.rs:38:14"}]}