{"sha": "15c64a181b93584572f568a4c135a0fdb2870eb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YzY0YTE4MWI5MzU4NDU3MmY1NjhhNGMxMzVhMGZkYjI4NzBlYjY=", "commit": {"author": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2020-12-13T13:02:32Z"}, "committer": {"name": "jumbatm", "email": "30644300+jumbatm@users.noreply.github.com", "date": "2021-01-11T17:31:00Z"}, "message": "Use tcx.symbol_name to check for clashes.", "tree": {"sha": "6030e95411750073379dc0189c60d2c3d3261324", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6030e95411750073379dc0189c60d2c3d3261324"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15c64a181b93584572f568a4c135a0fdb2870eb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15c64a181b93584572f568a4c135a0fdb2870eb6", "html_url": "https://github.com/rust-lang/rust/commit/15c64a181b93584572f568a4c135a0fdb2870eb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15c64a181b93584572f568a4c135a0fdb2870eb6/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6318db1c5a06a08a6b4063b25a63df3c328a5bd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6318db1c5a06a08a6b4063b25a63df3c328a5bd7", "html_url": "https://github.com/rust-lang/rust/commit/6318db1c5a06a08a6b4063b25a63df3c328a5bd7"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "0ef67a135560579293f736bc3613463b133666d4", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/15c64a181b93584572f568a4c135a0fdb2870eb6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c64a181b93584572f568a4c135a0fdb2870eb6/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=15c64a181b93584572f568a4c135a0fdb2870eb6", "patch": "@@ -43,6 +43,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::lint::LintDiagnosticBuilder;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::subst::{GenericArgKind, Subst};\n+use rustc_middle::ty::Instance;\n use rustc_middle::ty::{self, layout::LayoutError, Ty, TyCtxt};\n use rustc_session::Session;\n use rustc_span::edition::Edition;\n@@ -2595,7 +2596,7 @@ declare_lint! {\n }\n \n pub struct ClashingExternDeclarations {\n-    seen_decls: FxHashMap<Symbol, HirId>,\n+    seen_decls: FxHashMap<String, HirId>,\n }\n \n /// Differentiate between whether the name for an extern decl came from the link_name attribute or\n@@ -2626,16 +2627,17 @@ impl ClashingExternDeclarations {\n     fn insert(&mut self, tcx: TyCtxt<'_>, fi: &hir::ForeignItem<'_>) -> Option<HirId> {\n         let hid = fi.hir_id;\n \n-        let name =\n-            &tcx.codegen_fn_attrs(tcx.hir().local_def_id(hid)).link_name.unwrap_or(fi.ident.name);\n-\n-        if self.seen_decls.contains_key(name) {\n+        let local_did = tcx.hir().local_def_id(fi.hir_id);\n+        let did = local_did.to_def_id();\n+        let instance = Instance::new(did, ty::List::identity_for_item(tcx, did));\n+        let name = tcx.symbol_name(instance).name.to_string();\n+        if self.seen_decls.contains_key(&name) {\n             // Avoid updating the map with the new entry when we do find a collision. We want to\n             // make sure we're always pointing to the first definition as the previous declaration.\n             // This lets us avoid emitting \"knock-on\" diagnostics.\n-            Some(*self.seen_decls.get(name).unwrap())\n+            Some(*self.seen_decls.get(&name).unwrap())\n         } else {\n-            self.seen_decls.insert(*name, hid)\n+            self.seen_decls.insert(name, hid)\n         }\n     }\n "}]}