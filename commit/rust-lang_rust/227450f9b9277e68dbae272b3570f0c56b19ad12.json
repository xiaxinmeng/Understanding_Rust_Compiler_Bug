{"sha": "227450f9b9277e68dbae272b3570f0c56b19ad12", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNzQ1MGY5YjkyNzdlNjhkYmFlMjcyYjM1NzBmMGM1NmIxOWFkMTI=", "commit": {"author": {"name": "zhoufan", "email": "1247714429@qq.com", "date": "2021-09-18T00:22:57Z"}, "committer": {"name": "zhoufan", "email": "1247714429@qq.com", "date": "2021-09-18T00:22:57Z"}, "message": "do comment handling on the original token", "tree": {"sha": "be8cfcbf67a3e080720da16a61e015a32ffb48d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be8cfcbf67a3e080720da16a61e015a32ffb48d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/227450f9b9277e68dbae272b3570f0c56b19ad12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/227450f9b9277e68dbae272b3570f0c56b19ad12", "html_url": "https://github.com/rust-lang/rust/commit/227450f9b9277e68dbae272b3570f0c56b19ad12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/227450f9b9277e68dbae272b3570f0c56b19ad12/comments", "author": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xffxff", "id": 30254428, "node_id": "MDQ6VXNlcjMwMjU0NDI4", "avatar_url": "https://avatars.githubusercontent.com/u/30254428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xffxff", "html_url": "https://github.com/xffxff", "followers_url": "https://api.github.com/users/xffxff/followers", "following_url": "https://api.github.com/users/xffxff/following{/other_user}", "gists_url": "https://api.github.com/users/xffxff/gists{/gist_id}", "starred_url": "https://api.github.com/users/xffxff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xffxff/subscriptions", "organizations_url": "https://api.github.com/users/xffxff/orgs", "repos_url": "https://api.github.com/users/xffxff/repos", "events_url": "https://api.github.com/users/xffxff/events{/privacy}", "received_events_url": "https://api.github.com/users/xffxff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea3535cefcbf704d7f553d8fb759e7520e0cddc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3535cefcbf704d7f553d8fb759e7520e0cddc8", "html_url": "https://github.com/rust-lang/rust/commit/ea3535cefcbf704d7f553d8fb759e7520e0cddc8"}], "stats": {"total": 40, "additions": 15, "deletions": 25}, "files": [{"sha": "e8aee21f67195c369b1466ed45c42b3d31f3f4b0", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 15, "deletions": 25, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/227450f9b9277e68dbae272b3570f0c56b19ad12/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227450f9b9277e68dbae272b3570f0c56b19ad12/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=227450f9b9277e68dbae272b3570f0c56b19ad12", "patch": "@@ -39,31 +39,21 @@ pub(crate) fn goto_definition(\n             kind if kind.is_trivia() => 0,\n             _ => 1,\n         })?;\n-    let tokens = sema.descend_into_macros_many(original_token.clone());\n-    let navs = tokens\n-        .clone()\n-        .into_iter()\n-        .filter_map(|token| {\n-            let parent = token.parent()?;\n-            if let Some(_) = ast::Comment::cast(token.clone()) {\n-                let (attributes, def) = doc_attributes(&sema, &parent)?;\n-                let (docs, doc_mapping) = attributes.docs_with_rangemap(db)?;\n-                let (_, link, ns) =\n-                    extract_definitions_from_docs(&docs).into_iter().find(|&(range, ..)| {\n-                        doc_mapping.map(range).map_or(false, |InFile { file_id, value: range }| {\n-                            file_id == position.file_id.into() && range.contains(position.offset)\n-                        })\n-                    })?;\n-                let nav = resolve_doc_path_for_def(db, def, &link, ns)?.try_to_nav(db)?;\n-                return Some(nav);\n-            }\n-            None\n-        })\n-        .collect::<Vec<NavigationTarget>>();\n-    if navs.len() > 0 {\n-        return Some(RangeInfo::new(original_token.text_range(), navs));\n-    }\n-    let navs = tokens\n+    if let Some(_) = ast::Comment::cast(original_token.clone()) {\n+        let parent = original_token.parent()?;\n+        let (attributes, def) = doc_attributes(&sema, &parent)?;\n+        let (docs, doc_mapping) = attributes.docs_with_rangemap(db)?;\n+        let (_, link, ns) =\n+            extract_definitions_from_docs(&docs).into_iter().find(|&(range, ..)| {\n+                doc_mapping.map(range).map_or(false, |InFile { file_id, value: range }| {\n+                    file_id == position.file_id.into() && range.contains(position.offset)\n+                })\n+            })?;\n+        let nav = resolve_doc_path_for_def(db, def, &link, ns)?.try_to_nav(db)?;\n+        return Some(RangeInfo::new(original_token.text_range(), vec![nav]));\n+    }\n+\n+    let navs = sema.descend_into_macros_many(original_token.clone())\n         .into_iter()\n         .filter_map(|token| {\n             let parent = token.parent()?;"}]}