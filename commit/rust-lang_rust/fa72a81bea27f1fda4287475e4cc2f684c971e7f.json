{"sha": "fa72a81bea27f1fda4287475e4cc2f684c971e7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNzJhODFiZWEyN2YxZmRhNDI4NzQ3NWU0Y2MyZjY4NGM5NzFlN2Y=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-09T12:03:44Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-11T20:10:26Z"}, "message": "Update tests", "tree": {"sha": "e691a2e38d57c5cd37932754ddf1d8a7048f1f54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e691a2e38d57c5cd37932754ddf1d8a7048f1f54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa72a81bea27f1fda4287475e4cc2f684c971e7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa72a81bea27f1fda4287475e4cc2f684c971e7f", "html_url": "https://github.com/rust-lang/rust/commit/fa72a81bea27f1fda4287475e4cc2f684c971e7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa72a81bea27f1fda4287475e4cc2f684c971e7f/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2060d49c39e41a286b0425cb2f7ba6022a2d4b96", "url": "https://api.github.com/repos/rust-lang/rust/commits/2060d49c39e41a286b0425cb2f7ba6022a2d4b96", "html_url": "https://github.com/rust-lang/rust/commit/2060d49c39e41a286b0425cb2f7ba6022a2d4b96"}], "stats": {"total": 13406, "additions": 6703, "deletions": 6703}, "files": [{"sha": "e0e45d55a9e7383b9067c5a5637e6af3f3ede0aa", "filename": "src/test/rustdoc-ui/deny-intra-link-resolution-failure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeny-intra-link-resolution-failure.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: `[v2]` cannot be resolved, ignoring it...\n   --> $DIR/deny-intra-link-resolution-failure.rs:3:6\n    |\n-LL | /// [v2] //~ ERROR\n+LL | /// [v2]\n    |      ^^ cannot be resolved, ignoring\n    |\n note: lint level defined here"}, {"sha": "9cd50d26766ea9afb7005781e2f2f87eadc5897c", "filename": "src/test/rustdoc-ui/deny-missing-docs-crate.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Frustdoc-ui%2Fdeny-missing-docs-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Frustdoc-ui%2Fdeny-missing-docs-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeny-missing-docs-crate.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,21 +1,21 @@\n error: missing documentation for crate\n   --> $DIR/deny-missing-docs-crate.rs:1:1\n    |\n-LL | / #![deny(missing_docs)] //~ ERROR\n+LL | / #![deny(missing_docs)]\n LL | |\n-LL | | pub struct Foo; //~ ERROR\n+LL | | pub struct Foo;\n    | |_______________^\n    |\n note: lint level defined here\n   --> $DIR/deny-missing-docs-crate.rs:1:9\n    |\n-LL | #![deny(missing_docs)] //~ ERROR\n+LL | #![deny(missing_docs)]\n    |         ^^^^^^^^^^^^\n \n error: missing documentation for a struct\n   --> $DIR/deny-missing-docs-crate.rs:3:1\n    |\n-LL | pub struct Foo; //~ ERROR\n+LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "ef15bf05d54ef9377fd509941ffb174f922afb01", "filename": "src/test/rustdoc-ui/deny-missing-docs-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Frustdoc-ui%2Fdeny-missing-docs-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Frustdoc-ui%2Fdeny-missing-docs-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdeny-missing-docs-macro.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: missing documentation for macro\n   --> $DIR/deny-missing-docs-macro.rs:6:1\n    |\n-LL | macro_rules! foo { //~ ERROR\n+LL | macro_rules! foo {\n    | ^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here"}, {"sha": "d273ec019752c2a9c20edb10d6a13511a6ea3ebd", "filename": "src/test/rustdoc-ui/intra-doc-alias-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: `[TypeAlias::hoge]` cannot be resolved, ignoring it...\n   --> $DIR/intra-doc-alias-ice.rs:5:30\n    |\n-LL | /// [broken cross-reference](TypeAlias::hoge) //~ ERROR\n+LL | /// [broken cross-reference](TypeAlias::hoge)\n    |                              ^^^^^^^^^^^^^^^ cannot be resolved, ignoring\n    |\n note: lint level defined here"}, {"sha": "37d8b964c2428545a39d696341e1f9a7ec23dac5", "filename": "src/test/ui-fulldeps/dropck_tarena_cycle_checked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_cycle_checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_cycle_checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_cycle_checked.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0597]: `arena` does not live long enough\n    |\n LL |     f(&arena);\n    |        ^^^^^ borrowed value does not live long enough\n-LL | } //~^ ERROR `arena` does not live long enough\n+LL | }\n    | - `arena` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created"}, {"sha": "c791b8b451e5072d79365967bc8902099c128f1b", "filename": "src/test/ui-fulldeps/dropck_tarena_unsound_drop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_unsound_drop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_unsound_drop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fdropck_tarena_unsound_drop.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0597]: `arena` does not live long enough\n    |\n LL |     f(&arena);\n    |        ^^^^^ borrowed value does not live long enough\n-LL | } //~^ ERROR `arena` does not live long enough\n+LL | }\n    | - `arena` dropped here while still borrowed\n    |\n    = note: values in a scope are dropped in the opposite order they are created"}, {"sha": "d689286177644ce8e3e6a3c6fadcc1581f91dacc", "filename": "src/test/ui-fulldeps/issue-15778-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Fissue-15778-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Fissue-15778-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15778-fail.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: crate is not marked with #![crate_okay]\n   --> $DIR/issue-15778-fail.rs:5:1\n    |\n-LL | / #![feature(plugin)] //~ ERROR crate is not marked with #![crate_okay]\n+LL | / #![feature(plugin)]\n LL | | #![plugin(lint_for_crate)]\n LL | |\n LL | | pub fn main() { }"}, {"sha": "cd0bff92bf112f2ce42e7cedd42195c2062f30b6", "filename": "src/test/ui-fulldeps/lint-group-plugin-deny-cmdline.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin-deny-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin-deny-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin-deny-cmdline.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,15 +1,15 @@\n error: item is named 'lintme'\n   --> $DIR/lint-group-plugin-deny-cmdline.rs:8:1\n    |\n-LL | fn lintme() { } //~ ERROR item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: `-D test-lint` implied by `-D lint-me`\n \n error: item is named 'pleaselintme'\n   --> $DIR/lint-group-plugin-deny-cmdline.rs:10:1\n    |\n-LL | fn pleaselintme() { } //~ ERROR item is named 'pleaselintme'\n+LL | fn pleaselintme() { }\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D please-lint` implied by `-D lint-me`"}, {"sha": "8ccf9700b9fc8ba91715ef6dca8f44d5b9d39559", "filename": "src/test/ui-fulldeps/lint-group-plugin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,15 +1,15 @@\n warning: item is named 'lintme'\n   --> $DIR/lint-group-plugin.rs:9:1\n    |\n-LL | fn lintme() { } //~ WARNING item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(test_lint)] on by default\n \n warning: item is named 'pleaselintme'\n   --> $DIR/lint-group-plugin.rs:10:1\n    |\n-LL | fn pleaselintme() { } //~ WARNING item is named 'pleaselintme'\n+LL | fn pleaselintme() { }\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(please_lint)] on by default"}, {"sha": "0b2dbad884c5414080aff005f5e67d5c5a51bda3", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-load.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-load.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n warning: item is named 'lintme'\n   --> $DIR/lint-plugin-cmdline-load.rs:8:1\n    |\n-LL | fn lintme() { } //~ WARNING item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(test_lint)] on by default"}, {"sha": "5bfde8551ed37ba817406d531924ca11494888ab", "filename": "src/test/ui-fulldeps/lint-plugin-deny-attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: item is named 'lintme'\n   --> $DIR/lint-plugin-deny-attr.rs:8:1\n    |\n-LL | fn lintme() { } //~ ERROR item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n note: lint level defined here"}, {"sha": "e4257dfde6f90e7417a6e497b1587b8b3e6bf8c0", "filename": "src/test/ui-fulldeps/lint-plugin-deny-cmdline.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: item is named 'lintme'\n   --> $DIR/lint-plugin-deny-cmdline.rs:8:1\n    |\n-LL | fn lintme() { } //~ ERROR item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: requested on the command line with `-D test-lint`"}, {"sha": "092d0eb7a81a4b7bea0c34856350d896d574ac21", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-attrs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -10,7 +10,7 @@ LL | #[allow(test_lint)]\n error: item is named 'lintme'\n   --> $DIR/lint-plugin-forbid-attrs.rs:8:1\n    |\n-LL | fn lintme() { } //~ ERROR item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n note: lint level defined here"}, {"sha": "fc2906da5f5fc06d1975a84dc9dc5e666d7fac38", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-cmdline.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,15 +1,15 @@\n error[E0453]: allow(test_lint) overruled by outer forbid(test_lint)\n   --> $DIR/lint-plugin-forbid-cmdline.rs:10:9\n    |\n-LL | #[allow(test_lint)] //~ ERROR allow(test_lint) overruled by outer forbid(test_lint)\n+LL | #[allow(test_lint)]\n    |         ^^^^^^^^^ overruled by previous forbid\n    |\n    = note: `forbid` lint level was set on command line\n \n error: item is named 'lintme'\n   --> $DIR/lint-plugin-forbid-cmdline.rs:8:1\n    |\n-LL | fn lintme() { } //~ ERROR item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: requested on the command line with `-F test-lint`"}, {"sha": "94791e369fc30d960a779fc8b2edd77dfe69eba9", "filename": "src/test/ui-fulldeps/lint-plugin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n warning: item is named 'lintme'\n   --> $DIR/lint-plugin.rs:8:1\n    |\n-LL | fn lintme() { } //~ WARNING item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(test_lint)] on by default"}, {"sha": "cec8800a25c7f10dcc82053b3c31588dd651138b", "filename": "src/test/ui-fulldeps/lint_tool_test.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint_tool_test.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -21,7 +21,7 @@ LL | #[allow(test_group)]\n warning: unknown lint: `this_lint_does_not_exist`\n   --> $DIR/lint_tool_test.rs:27:8\n    |\n-LL | #[deny(this_lint_does_not_exist)] //~ WARNING unknown lint: `this_lint_does_not_exist`\n+LL | #[deny(this_lint_does_not_exist)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(unknown_lints)] on by default\n@@ -35,7 +35,7 @@ LL | #![cfg_attr(foo, warn(test_lint))]\n error: item is named 'lintme'\n   --> $DIR/lint_tool_test.rs:14:1\n    |\n-LL | fn lintme() { } //~ ERROR item is named 'lintme'\n+LL | fn lintme() { }\n    | ^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n@@ -48,7 +48,7 @@ LL | #![deny(clippy_group)]\n error: item is named 'lintmetoo'\n   --> $DIR/lint_tool_test.rs:22:5\n    |\n-LL |     fn lintmetoo() { } //~ ERROR item is named 'lintmetoo'\n+LL |     fn lintmetoo() { }\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here"}, {"sha": "ccc9580a60c2980b28c1d2e5076fe1ce856ef4e0", "filename": "src/test/ui-fulldeps/plugin-as-extern-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-as-extern-crate.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: compiler plugin used as an ordinary library\n   --> $DIR/plugin-as-extern-crate.rs:10:1\n    |\n-LL | extern crate attr_plugin_test; //~ ERROR compiler plugin used as an ordinary library\n+LL | extern crate attr_plugin_test;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here"}, {"sha": "ba6cff80416f3a0e1a1de344dc2861d30153b376", "filename": "src/test/ui/E0508.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2FE0508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2FE0508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0508.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0508]: cannot move out of type `[NonCopy; 1]`, a non-copy array\n   --> $DIR/E0508.rs:5:18\n    |\n-LL |     let _value = array[0];  //~ ERROR [E0508]\n+LL |     let _value = array[0];\n    |                  ^^^^^^^^\n    |                  |\n    |                  cannot move out of here"}, {"sha": "ef7a48bc8a48f3805c9cd72fa5e3562b4f45e609", "filename": "src/test/ui/E0583.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2FE0583.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2FE0583.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0583.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0583]: file not found for module `module_that_doesnt_exist`\n   --> $DIR/E0583.rs:1:5\n    |\n-LL | mod module_that_doesnt_exist; //~ ERROR E0583\n+LL | mod module_that_doesnt_exist;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: name the file either module_that_doesnt_exist.rs or module_that_doesnt_exist/mod.rs inside the directory \"$DIR\""}, {"sha": "da255143494d68ea12a456bb5c689b3b052f4cfb", "filename": "src/test/ui/E0642.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2FE0642.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2FE0642.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0642.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,31 +1,31 @@\n error[E0642]: patterns aren't allowed in methods without bodies\n   --> $DIR/E0642.rs:5:12\n    |\n-LL |     fn foo((x, y): (i32, i32)); //~ ERROR patterns aren't allowed in methods without bodies\n+LL |     fn foo((x, y): (i32, i32));\n    |            ^^^^^^\n help: give this argument a name or use an underscore to ignore it\n    |\n-LL |     fn foo(_: (i32, i32)); //~ ERROR patterns aren't allowed in methods without bodies\n+LL |     fn foo(_: (i32, i32));\n    |            ^\n \n error[E0642]: patterns aren't allowed in methods without bodies\n   --> $DIR/E0642.rs:7:12\n    |\n-LL |     fn bar((x, y): (i32, i32)) {} //~ ERROR patterns aren't allowed in methods without bodies\n+LL |     fn bar((x, y): (i32, i32)) {}\n    |            ^^^^^^\n help: give this argument a name or use an underscore to ignore it\n    |\n-LL |     fn bar(_: (i32, i32)) {} //~ ERROR patterns aren't allowed in methods without bodies\n+LL |     fn bar(_: (i32, i32)) {}\n    |            ^\n \n error[E0642]: patterns aren't allowed in methods without bodies\n   --> $DIR/E0642.rs:9:15\n    |\n-LL |     fn method(S { .. }: S) {} //~ ERROR patterns aren't allowed in methods without bodies\n+LL |     fn method(S { .. }: S) {}\n    |               ^^^^^^^^\n help: give this argument a name or use an underscore to ignore it\n    |\n-LL |     fn method(_: S) {} //~ ERROR patterns aren't allowed in methods without bodies\n+LL |     fn method(_: S) {}\n    |               ^\n \n error: aborting due to 3 previous errors"}, {"sha": "5dea744998d8a18dc3aed3cb44f159905301b55a", "filename": "src/test/ui/E0662.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2FE0662.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2FE0662.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0662.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0662]: input operand constraint contains '='\n   --> $DIR/E0662.rs:6:12\n    |\n-LL |          : \"=test\"(\"a\") //~ ERROR E0662\n+LL |          : \"=test\"(\"a\")\n    |            ^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "01bf89ec79af943943a4dafa48d4b4852125acd7", "filename": "src/test/ui/E0663.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2FE0663.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2FE0663.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0663.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0663]: input operand constraint contains '+'\n   --> $DIR/E0663.rs:6:12\n    |\n-LL |          : \"+test\"(\"a\") //~ ERROR E0663\n+LL |          : \"+test\"(\"a\")\n    |            ^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "9c9f65ee6a96d4dfbb515ed56ad0e3f09f7c33fc", "filename": "src/test/ui/E0664.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2FE0664.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2FE0664.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0664.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0664]: clobber should not be surrounded by braces\n   --> $DIR/E0664.rs:7:12\n    |\n-LL |          : \"{eax}\" //~ ERROR E0664\n+LL |          : \"{eax}\"\n    |            ^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "2c2b498e39a43c85502d21828fe50d1e9b89abbb", "filename": "src/test/ui/E0665.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2FE0665.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2FE0665.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2FE0665.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0665]: `Default` cannot be derived for enums, only structs\n   --> $DIR/E0665.rs:1:10\n    |\n-LL | #[derive(Default)] //~ ERROR E0665\n+LL | #[derive(Default)]\n    |          ^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "e41590ac45eed7bc4f1f0addb7a1bf37212993f1", "filename": "src/test/ui/absolute-paths-in-nested-use-groups.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fabsolute-paths-in-nested-use-groups.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fabsolute-paths-in-nested-use-groups.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabsolute-paths-in-nested-use-groups.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,19 +1,19 @@\n error[E0433]: failed to resolve: crate root in paths can only be used in start position\n   --> $DIR/absolute-paths-in-nested-use-groups.rs:6:5\n    |\n-LL |     ::bar,       //~ ERROR crate root in paths can only be used in start position\n+LL |     ::bar,\n    |     ^ crate root in paths can only be used in start position\n \n error[E0433]: failed to resolve: `super` in paths can only be used in start position\n   --> $DIR/absolute-paths-in-nested-use-groups.rs:7:5\n    |\n-LL |     super::bar,  //~ ERROR `super` in paths can only be used in start position\n+LL |     super::bar,\n    |     ^^^^^ `super` in paths can only be used in start position\n \n error[E0433]: failed to resolve: `self` in paths can only be used in start position\n   --> $DIR/absolute-paths-in-nested-use-groups.rs:8:5\n    |\n-LL |     self::bar,   //~ ERROR `self` in paths can only be used in start position\n+LL |     self::bar,\n    |     ^^^^ `self` in paths can only be used in start position\n \n error: aborting due to 3 previous errors"}, {"sha": "9976dfe946fd985d99a97a2beec344b5eb47eb4a", "filename": "src/test/ui/access-mode-in-closures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/access-mode-in-closures.rs:8:15\n    |\n-LL |         match *s { S(v) => v } //~ ERROR cannot move out\n+LL |         match *s { S(v) => v }\n    |               ^^     - hint: to prevent move, use `ref v` or `ref mut v`\n    |               |\n    |               cannot move out of borrowed content"}, {"sha": "34e09da45ad53f819e378cee5817c5d120d0cd7f", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-1.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,13 +1,13 @@\n error: return type should be `!`\n   --> $DIR/alloc-error-handler-bad-signature-1.rs:12:6\n    |\n-LL | ) -> () //~ ERROR return type should be `!`\n+LL | ) -> ()\n    |      ^^\n \n error: argument should be `Layout`\n   --> $DIR/alloc-error-handler-bad-signature-1.rs:11:11\n    |\n-LL |     info: &Layout, //~ ERROR argument should be `Layout`\n+LL |     info: &Layout,\n    |           ^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "85544b0c3849ea57103ab2527957b0bb8d0a2584", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-2.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,13 +1,13 @@\n error: return type should be `!`\n   --> $DIR/alloc-error-handler-bad-signature-2.rs:12:3\n    |\n-LL | ) { //~ ERROR return type should be `!`\n+LL | ) {\n    |   ^\n \n error: argument should be `Layout`\n   --> $DIR/alloc-error-handler-bad-signature-2.rs:11:11\n    |\n-LL |     info: Layout, //~ ERROR argument should be `Layout`\n+LL |     info: Layout,\n    |           ^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "8575e7508f1258209a46ed679238c9137b34ea56", "filename": "src/test/ui/alloc-error/alloc-error-handler-bad-signature-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falloc-error%2Falloc-error-handler-bad-signature-3.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: function should have one argument\n   --> $DIR/alloc-error-handler-bad-signature-3.rs:10:1\n    |\n-LL | fn oom() -> ! { //~ ERROR function should have one argument\n+LL | fn oom() -> ! {\n    | ^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "26d7aa80eee163ea63b1dae083694fe7b70b8bcd", "filename": "src/test/ui/allocator-submodule.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fallocator-submodule.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fallocator-submodule.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator-submodule.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: `global_allocator` cannot be used in submodules\n   --> $DIR/allocator-submodule.rs:27:5\n    |\n-LL |     static MY_HEAP: MyAlloc = MyAlloc; //~ ERROR global_allocator\n+LL |     static MY_HEAP: MyAlloc = MyAlloc;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "5e47b0f0cc7ac4e14c73c87b2b53bad9e684a465", "filename": "src/test/ui/allocator/function-allocator.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fallocator%2Ffunction-allocator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fallocator%2Ffunction-allocator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Ffunction-allocator.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: allocators must be statics\n   --> $DIR/function-allocator.rs:2:1\n    |\n-LL | fn foo() {} //~ ERROR: allocators must be statics\n+LL | fn foo() {}\n    | ^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "1ec0cf323e9960798b21f96b7cc9b46c0ed982d8", "filename": "src/test/ui/anon-params-denied-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-denied-2018.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: expected one of `:` or `@`, found `)`\n   --> $DIR/anon-params-denied-2018.rs:6:15\n    |\n-LL |     fn foo(i32); //~ expected one of `:` or `@`, found `)`\n+LL |     fn foo(i32);\n    |            ---^ expected one of `:` or `@` here\n    |            |\n    |            help: explicitly ignore parameter: `_: i32`"}, {"sha": "e97dbc15f9cde9fd7b547b14d78982aca3f32916", "filename": "src/test/ui/anon-params-deprecated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n warning: anonymous parameters are deprecated and will be removed in the next edition.\n   --> $DIR/anon-params-deprecated.rs:9:12\n    |\n-LL |     fn foo(i32); //~ WARNING anonymous parameters are deprecated\n+LL |     fn foo(i32);\n    |            ^^^ help: Try naming the parameter or explicitly ignoring it: `_: i32`\n    |\n note: lint level defined here"}, {"sha": "9e84b14950964e1c66b2a9ec269379d2ad4f8dc4", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:2:5\n    |\n-LL |     f1(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f1(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n@@ -15,7 +15,7 @@ LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:2:5\n    |\n-LL |     f1(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f1(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), &()) -> _`\n@@ -29,7 +29,7 @@ LL | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n    |\n-LL |     f2(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f2(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n@@ -43,7 +43,7 @@ LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:4:5\n    |\n-LL |     f2(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f2(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&'a (), &()) -> _`\n@@ -57,7 +57,7 @@ LL | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n    |\n-LL |     f3(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n@@ -71,7 +71,7 @@ LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:6:5\n    |\n-LL |     f3(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), &()) -> _`\n@@ -85,7 +85,7 @@ LL | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n    |\n-LL |     f4(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f4(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n@@ -99,7 +99,7 @@ LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:8:5\n    |\n-LL |     f4(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f4(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), &'r ()) -> _`\n@@ -113,7 +113,7 @@ LL | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n    |\n-LL |     f5(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f5(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n@@ -127,7 +127,7 @@ LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:10:5\n    |\n-LL |     f5(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     f5(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&'r (), &'r ()) -> _`\n@@ -141,7 +141,7 @@ LL | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n    |\n-LL |     g1(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g1(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>) -> _`\n@@ -155,7 +155,7 @@ LL | fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:12:5\n    |\n-LL |     g1(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g1(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n@@ -169,7 +169,7 @@ LL | fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n    |\n-LL |     g2(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g2(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n@@ -183,7 +183,7 @@ LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n    |\n-LL |     g2(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g2(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), for<'r> fn(&'r ())) -> _`\n@@ -197,7 +197,7 @@ LL | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n    |\n-LL |     g3(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n@@ -211,7 +211,7 @@ LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n    |\n-LL |     g3(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g3(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&'s (), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>) -> _`\n@@ -225,7 +225,7 @@ LL | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n    |\n-LL |     g4(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g4(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n@@ -239,7 +239,7 @@ LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n    |\n-LL |     g4(|_: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     g4(|_: (), _: ()| {});\n    |     ^^ -------------- found signature of `fn((), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), for<'r> fn(&'r ())) -> _`\n@@ -253,7 +253,7 @@ LL | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n    |\n-LL |     h1(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     h1(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<(dyn for<'t0> std::ops::Fn(&'t0 ()) + 'static)>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n@@ -267,7 +267,7 @@ LL | fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n    |\n-LL |     h1(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     h1(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>, &(), for<'r, 's> fn(&'r (), &'s ())) -> _`\n@@ -281,7 +281,7 @@ LL | fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n    |\n-LL |     h2(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     h2(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<(dyn for<'s> std::ops::Fn(&'s ()) + 'static)>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n@@ -295,7 +295,7 @@ LL | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &()\n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n    |\n-LL |     h2(|_: (), _: (), _: (), _: ()| {}); //~ ERROR type mismatch\n+LL |     h2(|_: (), _: (), _: (), _: ()| {});\n    |     ^^ ---------------------------- found signature of `fn((), (), (), ()) -> _`\n    |     |\n    |     expected signature of `fn(&(), std::boxed::Box<(dyn for<'r> std::ops::Fn(&'r ()) + 'static)>, &'t0 (), for<'r, 's> fn(&'r (), &'s ())) -> _`"}, {"sha": "1cbf77a99f87ed14936c7a626c3454efdac24517", "filename": "src/test/ui/array-break-length.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Farray-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Farray-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-break-length.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,13 +1,13 @@\n error[E0268]: `break` outside of loop\n   --> $DIR/array-break-length.rs:3:17\n    |\n-LL |         |_: [_; break]| {} //~ ERROR: `break` outside of loop\n+LL |         |_: [_; break]| {}\n    |                 ^^^^^ cannot break outside of a loop\n \n error[E0268]: `continue` outside of loop\n   --> $DIR/array-break-length.rs:7:17\n    |\n-LL |         |_: [_; continue]| {} //~ ERROR: `continue` outside of loop\n+LL |         |_: [_; continue]| {}\n    |                 ^^^^^^^^ cannot break outside of a loop\n \n error: aborting due to 2 previous errors"}, {"sha": "21e80fb98027ad6f4195bbb6fee7c054f51aa48c", "filename": "src/test/ui/asm/asm-in-bad-modifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-in-bad-modifier.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,13 +1,13 @@\n error[E0662]: input operand constraint contains '='\n   --> $DIR/asm-in-bad-modifier.rs:23:39\n    |\n-LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5)); //~ ERROR operand constraint contains '='\n+LL |         asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5));\n    |                                       ^^^^\n \n error[E0663]: input operand constraint contains '+'\n   --> $DIR/asm-in-bad-modifier.rs:24:39\n    |\n-LL |         asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5)); //~ ERROR operand constraint contains '+'\n+LL |         asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5));\n    |                                       ^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "99134ceba33274d252cb8ae8c6811a410ef063cd", "filename": "src/test/ui/asm/asm-out-no-modifier.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-out-no-modifier.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0661]: output operand constraint lacks '=' or '+'\n   --> $DIR/asm-out-no-modifier.rs:22:29\n    |\n-LL |         asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5)); //~ ERROR output operand constraint lacks '='\n+LL |         asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5));\n    |                             ^^^\n \n error: aborting due to previous error"}, {"sha": "9fe59d12e12cd3ca61c1687bcb77b560b42867fe", "filename": "src/test/ui/asm/asm-parse-errors.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,67 +1,67 @@\n error: macro requires a string literal as an argument\n   --> $DIR/asm-parse-errors.rs:4:5\n    |\n-LL |     asm!(); //~ ERROR requires a string literal as an argument\n+LL |     asm!();\n    |     ^^^^^^^ string literal required\n \n error: expected string literal\n   --> $DIR/asm-parse-errors.rs:5:18\n    |\n-LL |     asm!(\"nop\" : struct); //~ ERROR expected string literal\n+LL |     asm!(\"nop\" : struct);\n    |                  ^^^^^^ expected string literal\n \n error: expected string literal\n   --> $DIR/asm-parse-errors.rs:6:30\n    |\n-LL |     asm!(\"mov %eax, $$0x2\" : struct); //~ ERROR expected string literal\n+LL |     asm!(\"mov %eax, $$0x2\" : struct);\n    |                              ^^^^^^ expected string literal\n \n error: expected `(`, found keyword `struct`\n   --> $DIR/asm-parse-errors.rs:7:39\n    |\n-LL |     asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct); //~ ERROR expected `(`\n+LL |     asm!(\"mov %eax, $$0x2\" : \"={eax}\" struct);\n    |                                       ^^^^^^ expected `(`\n \n error: expected expression, found keyword `struct`\n   --> $DIR/asm-parse-errors.rs:8:39\n    |\n-LL |     asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct)); //~ ERROR expected expression\n+LL |     asm!(\"mov %eax, $$0x2\" : \"={eax}\"(struct));\n    |                                       ^^^^^^ expected expression\n \n error: expected string literal\n   --> $DIR/asm-parse-errors.rs:9:44\n    |\n-LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : struct); //~ ERROR expected string literal\n+LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : struct);\n    |                                            ^^^^^^ expected string literal\n \n error: expected `(`, found keyword `struct`\n   --> $DIR/asm-parse-errors.rs:10:51\n    |\n-LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct); //~ ERROR expected `(`\n+LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\" struct);\n    |                                                   ^^^^^^ expected `(`\n \n error: expected expression, found keyword `struct`\n   --> $DIR/asm-parse-errors.rs:11:51\n    |\n-LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct)); //~ ERROR expected expression\n+LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : \"{dx}\"(struct));\n    |                                                   ^^^^^^ expected expression\n \n error: expected string literal\n   --> $DIR/asm-parse-errors.rs:12:36\n    |\n-LL |     asm!(\"mov $$0x200, %eax\" : : : struct); //~ ERROR expected string literal\n+LL |     asm!(\"mov $$0x200, %eax\" : : : struct);\n    |                                    ^^^^^^ expected string literal\n \n error: expected string literal\n   --> $DIR/asm-parse-errors.rs:13:45\n    |\n-LL |     asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct); //~ ERROR expected string literal\n+LL |     asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct);\n    |                                             ^^^^^^ expected string literal\n \n error: inline assembly must be a string literal\n   --> $DIR/asm-parse-errors.rs:14:10\n    |\n-LL |     asm!(123); //~ ERROR inline assembly must be a string literal\n+LL |     asm!(123);\n    |          ^^^\n \n error: aborting due to 11 previous errors"}, {"sha": "feceadb67220b0b6e9f09d2208dab8abf8cc04c5", "filename": "src/test/ui/assign-to-method.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassign-to-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassign-to-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassign-to-method.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,15 +1,15 @@\n error[E0615]: attempted to take value of method `speak` on type `Cat`\n   --> $DIR/assign-to-method.rs:20:8\n    |\n-LL |   nyan.speak = || println!(\"meow\"); //~ ERROR attempted to take value of method\n+LL |   nyan.speak = || println!(\"meow\");\n    |        ^^^^^\n    |\n    = help: methods are immutable and cannot be assigned to\n \n error[E0615]: attempted to take value of method `speak` on type `Cat`\n   --> $DIR/assign-to-method.rs:21:8\n    |\n-LL |   nyan.speak += || println!(\"meow\"); //~ ERROR attempted to take value of method\n+LL |   nyan.speak += || println!(\"meow\");\n    |        ^^^^^\n    |\n    = help: methods are immutable and cannot be assigned to"}, {"sha": "5304b09de5efeb7e19fd4a02030d4d3fd46aa2f3", "filename": "src/test/ui/assignment-operator-unimplemented.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassignment-operator-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassignment-operator-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassignment-operator-unimplemented.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0368]: binary assignment operation `+=` cannot be applied to type `Foo`\n   --> $DIR/assignment-operator-unimplemented.rs:6:3\n    |\n-LL |   a += *b; //~ Error: binary assignment operation `+=` cannot be applied to type `Foo`\n+LL |   a += *b;\n    |   -^^^^^^\n    |   |\n    |   cannot use `+=` on type `Foo`"}, {"sha": "f9ea3365cb8d35e9c8a93327cbee529d3b072e1d", "filename": "src/test/ui/assoc-inherent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0202]: associated types are not yet supported in inherent impls (see #8995)\n   --> $DIR/assoc-inherent.rs:6:5\n    |\n-LL |     type Bar = isize; //~ERROR associated types are not yet supported in inherent impls (see #8995)\n+LL |     type Bar = isize;\n    |     ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "5f2b9c47e8c2ae9233d13c742794ad97a01c0e01", "filename": "src/test/ui/associated-const/associated-const-ambiguity-report.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0034]: multiple applicable items in scope\n   --> $DIR/associated-const-ambiguity-report.rs:17:16\n    |\n-LL | const X: i32 = <i32>::ID; //~ ERROR E0034\n+LL | const X: i32 = <i32>::ID;\n    |                ^^^^^^^^^ multiple `ID` found\n    |\n note: candidate #1 is defined in an impl of the trait `Foo` for the type `i32`"}, {"sha": "ea475ffc5547a4d709fbeedc93f4bd0ed82d261a", "filename": "src/test/ui/associated-item/associated-item-duplicate-names-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0201]: duplicate definitions with name `bar`:\n    |\n LL |     const bar: bool = true;\n    |     ----------------------- previous definition of `bar` here\n-LL |     fn bar() {} //~ ERROR duplicate definitions\n+LL |     fn bar() {}\n    |     ^^^^^^^^^^^ duplicate definition\n \n error: aborting due to previous error"}, {"sha": "57495863c98914f0bcc18cce57fa1404ad9e9f39", "filename": "src/test/ui/associated-item/associated-item-duplicate-names-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-3.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0201]: duplicate definitions with name `Bar`:\n    |\n LL |     type Bar = i16;\n    |     --------------- previous definition of `Bar` here\n-LL |     type Bar = u16; //~ ERROR duplicate definitions\n+LL |     type Bar = u16;\n    |     ^^^^^^^^^^^^^^^ duplicate definition\n \n error: aborting due to previous error"}, {"sha": "f4af9e02939507fc748ef1ad4856b5840d6fe522", "filename": "src/test/ui/associated-item/associated-item-duplicate-names.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,15 +3,15 @@ error[E0201]: duplicate definitions with name `Ty`:\n    |\n LL |     type Ty = ();\n    |     ------------- previous definition of `Ty` here\n-LL |     type Ty = usize; //~ ERROR duplicate definitions\n+LL |     type Ty = usize;\n    |     ^^^^^^^^^^^^^^^^ duplicate definition\n \n error[E0201]: duplicate definitions with name `BAR`:\n   --> $DIR/associated-item-duplicate-names.rs:13:5\n    |\n LL |     const BAR: u32 = 7;\n    |     ------------------- previous definition of `BAR` here\n-LL |     const BAR: u32 = 8; //~ ERROR duplicate definitions\n+LL |     const BAR: u32 = 8;\n    |     ^^^^^^^^^^^^^^^^^^^ duplicate definition\n \n error: aborting due to 2 previous errors"}, {"sha": "e1a1e636372715b2738df00d18a5c868cba059d9", "filename": "src/test/ui/associated-path-shl.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-path-shl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-path-shl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-path-shl.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,37 +1,37 @@\n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/associated-path-shl.rs:4:14\n    |\n-LL |     let _: <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+LL |     let _: <<A>::B>::C;\n    |              ^ not found in this scope\n \n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/associated-path-shl.rs:5:15\n    |\n-LL |     let _ = <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+LL |     let _ = <<A>::B>::C;\n    |               ^ not found in this scope\n \n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/associated-path-shl.rs:6:11\n    |\n-LL |     let <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+LL |     let <<A>::B>::C;\n    |           ^ not found in this scope\n \n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/associated-path-shl.rs:7:17\n    |\n-LL |     let 0 ..= <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+LL |     let 0 ..= <<A>::B>::C;\n    |                 ^ not found in this scope\n \n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/associated-path-shl.rs:9:7\n    |\n-LL |     <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+LL |     <<A>::B>::C;\n    |       ^ not found in this scope\n \n error[E0029]: only char and numeric types are allowed in range patterns\n   --> $DIR/associated-path-shl.rs:7:15\n    |\n-LL |     let 0 ..= <<A>::B>::C; //~ ERROR cannot find type `A` in this scope\n+LL |     let 0 ..= <<A>::B>::C;\n    |               ^^^^^^^^^^^ ranges require char or numeric types\n    |\n    = note: start type: {integer}"}, {"sha": "06f1a1cc64c421de7b9ad8682257ed87913d15f8", "filename": "src/test/ui/associated-type/associated-type-projection-from-supertrait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type%2Fassociated-type-projection-from-supertrait.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:33:23\n    |\n-LL | fn b() { dent(ModelT, Blue); } //~ ERROR mismatched types\n+LL | fn b() { dent(ModelT, Blue); }\n    |                       ^^^^ expected struct `Black`, found struct `Blue`\n    |\n    = note: expected type `Black`\n@@ -10,7 +10,7 @@ LL | fn b() { dent(ModelT, Blue); } //~ ERROR mismatched types\n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:34:23\n    |\n-LL | fn c() { dent(ModelU, Black); } //~ ERROR mismatched types\n+LL | fn c() { dent(ModelU, Black); }\n    |                       ^^^^^ expected struct `Blue`, found struct `Black`\n    |\n    = note: expected type `Blue`\n@@ -19,7 +19,7 @@ LL | fn c() { dent(ModelU, Black); } //~ ERROR mismatched types\n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:40:28\n    |\n-LL | fn f() { ModelT.chip_paint(Blue); } //~ ERROR mismatched types\n+LL | fn f() { ModelT.chip_paint(Blue); }\n    |                            ^^^^ expected struct `Black`, found struct `Blue`\n    |\n    = note: expected type `Black`\n@@ -28,7 +28,7 @@ LL | fn f() { ModelT.chip_paint(Blue); } //~ ERROR mismatched types\n error[E0308]: mismatched types\n   --> $DIR/associated-type-projection-from-supertrait.rs:41:28\n    |\n-LL | fn g() { ModelU.chip_paint(Black); } //~ ERROR mismatched types\n+LL | fn g() { ModelU.chip_paint(Black); }\n    |                            ^^^^^ expected struct `Blue`, found struct `Black`\n    |\n    = note: expected type `Blue`"}, {"sha": "4b548604983df5b314ff417d537905ae3075e750", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0271]: type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:37:10\n    |\n-LL | fn b() { blue_car(ModelT); } //~ ERROR type mismatch\n+LL | fn b() { blue_car(ModelT); }\n    |          ^^^^^^^^ expected struct `Black`, found struct `Blue`\n    |\n    = note: expected type `Black`\n@@ -15,7 +15,7 @@ LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:38:10\n    |\n-LL | fn c() { black_car(ModelU); } //~ ERROR type mismatch\n+LL | fn c() { black_car(ModelU); }\n    |          ^^^^^^^^^ expected struct `Blue`, found struct `Black`\n    |\n    = note: expected type `Blue`"}, {"sha": "502fb4f1c3033616b1c053e26a13dce15d60f566", "filename": "src/test/ui/associated-types/associated-types-bound-failure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-bound-failure.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `<G as GetToInt>::R: ToInt` is not satisfied\n   --> $DIR/associated-types-bound-failure.rs:17:5\n    |\n-LL |     ToInt::to_int(&g.get()) //~ ERROR E0277\n+LL |     ToInt::to_int(&g.get())\n    |     ^^^^^^^^^^^^^ the trait `ToInt` is not implemented for `<G as GetToInt>::R`\n    |\n    = help: consider adding a `where <G as GetToInt>::R: ToInt` bound"}, {"sha": "aa987316801a7e40806d026e3d6bc70e6a13bc7b", "filename": "src/test/ui/associated-types/associated-types-eq-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-1.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0412]: cannot find type `A` in this scope\n   --> $DIR/associated-types-eq-1.rs:10:12\n    |\n-LL |     let _: A = x.boo(); //~ ERROR cannot find type `A` in this scope\n+LL |     let _: A = x.boo();\n    |            ^ help: a type parameter with a similar name exists: `I`\n \n error: aborting due to previous error"}, {"sha": "82d15b92b55fe9f40082ae0042c00fa8cc3fec5d", "filename": "src/test/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0271]: type mismatch resolving `for<'x> <UintStruct as TheTrait<&'x isize>>::A == &'x isize`\n   --> $DIR/associated-types-eq-hr.rs:82:5\n    |\n-LL |     foo::<UintStruct>(); //~ ERROR type mismatch\n+LL |     foo::<UintStruct>();\n    |     ^^^^^^^^^^^^^^^^^ expected usize, found isize\n    |\n    = note: expected type `&usize`\n@@ -19,7 +19,7 @@ LL | | }\n error[E0271]: type mismatch resolving `for<'x> <IntStruct as TheTrait<&'x isize>>::A == &'x usize`\n   --> $DIR/associated-types-eq-hr.rs:86:5\n    |\n-LL |     bar::<IntStruct>(); //~ ERROR type mismatch\n+LL |     bar::<IntStruct>();\n    |     ^^^^^^^^^^^^^^^^ expected isize, found usize\n    |\n    = note: expected type `&isize`"}, {"sha": "575a072c558bda3605d5a095b67c863c30120d57", "filename": "src/test/ui/associated-types/associated-types-issue-17359.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-17359.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-17359.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-17359.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0046]: not all trait items implemented, missing: `Type`\n LL |     type Type;\n    |     ---------- `Type` from trait\n ...\n-LL | impl Trait for isize {}  //~ ERROR missing: `Type`\n+LL | impl Trait for isize {}\n    | ^^^^^^^^^^^^^^^^^^^^ missing `Type` in implementation\n \n error: aborting due to previous error"}, {"sha": "7d5b16c6e62d0e09bc036fb6d17082cac9b87a39", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0271]: type mismatch resolving `<Adapter<I> as Iterator>::Item == std::option::Option<T>`\n   --> $DIR/associated-types-issue-20346.rs:34:5\n    |\n-LL |     is_iterator_of::<Option<T>, _>(&adapter); //~ ERROR type mismatch\n+LL |     is_iterator_of::<Option<T>, _>(&adapter);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter, found enum `std::option::Option`\n    |\n    = note: expected type `T`"}, {"sha": "2926bdae0525b860572c4b9ed3d8c58d2a6936d6", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0271]: type mismatch resolving `<T as Foo>::Y == i32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:13:5\n    |\n-LL |     want_y(t); //~ ERROR type mismatch\n+LL |     want_y(t);\n    |     ^^^^^^ expected associated type, found i32\n    |\n    = note: expected type `<T as Foo>::Y`\n@@ -15,7 +15,7 @@ LL | fn want_y<T:Foo<Y=i32>>(t: &T) { }\n error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n   --> $DIR/associated-types-multiple-types-one-trait.rs:18:5\n    |\n-LL |     want_x(t); //~ ERROR type mismatch\n+LL |     want_x(t);\n    |     ^^^^^^ expected associated type, found u32\n    |\n    = note: expected type `<T as Foo>::X`"}, {"sha": "e35862d718f4933bf6f789fe29d3a54d31643f3d", "filename": "src/test/ui/associated-types/associated-types-outlives.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-outlives.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |         's: loop { y = denormalise(&x); break }\n    |                                     - borrow of `x` occurs here\n-LL |         drop(x); //~ ERROR cannot move out of `x` because it is borrowed\n+LL |         drop(x);\n    |              ^ move out of `x` occurs here\n \n error: aborting due to previous error"}, {"sha": "a26ee23894f6dcd04db477b1901adadf00331715", "filename": "src/test/ui/associated-types/associated-types-overridden-binding.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0284]: type annotations required: cannot resolve `<Self as std::iter::Iterator>::Item == i32`\n   --> $DIR/associated-types-overridden-binding.rs:4:1\n    |\n-LL | trait Bar: Foo<Item = u32> {} //~ ERROR type annotations required\n+LL | trait Bar: Foo<Item = u32> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: required by `Foo`"}, {"sha": "b6d3b53ba59b0ea81dedf56ddb0983cb86e89d1d", "filename": "src/test/ui/associated-types/associated-types-path-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-path-1.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0220]: associated type `A` not found for `T`\n   --> $DIR/associated-types-path-1.rs:10:23\n    |\n-LL | pub fn f1<T>(a: T, x: T::A) {} //~ERROR associated type `A` not found\n+LL | pub fn f1<T>(a: T, x: T::A) {}\n    |                       ^^^^ associated type `A` not found\n \n error[E0221]: ambiguous associated type `A` in bounds of `T`\n@@ -13,7 +13,7 @@ LL |     type A;\n LL |     type A;\n    |     ------- ambiguous `A` from `Bar`\n ...\n-LL | pub fn f2<T: Foo + Bar>(a: T, x: T::A) {} //~ERROR ambiguous associated type `A`\n+LL | pub fn f2<T: Foo + Bar>(a: T, x: T::A) {}\n    |                                  ^^^^ ambiguous associated type `A`\n \n error: aborting due to 2 previous errors"}, {"sha": "58ceec9040b9d331f41f140569796283ec4eb7e9", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0623]: lifetime mismatch\n LL | fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n    |                        -----     ----- these two types are declared with different lifetimes...\n ...\n-LL |     let _c: <T as Trait<'b>>::Type = a; //~ ERROR E0623\n+LL |     let _c: <T as Trait<'b>>::Type = a;\n    |                                      ^ ...but data from `y` flows into `x` here\n \n error[E0623]: lifetime mismatch\n@@ -13,7 +13,7 @@ error[E0623]: lifetime mismatch\n LL | fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n    |                        -----     ----- these two types are declared with different lifetimes...\n ...\n-LL |     let _c: <T as Trait<'a>>::Type = b; //~ ERROR E0623\n+LL |     let _c: <T as Trait<'a>>::Type = b;\n    |                                      ^ ...but data from `y` flows into `x` here\n \n error: aborting due to 2 previous errors"}, {"sha": "b5db9743932e93cb11967f2d28324af8e5a2c142", "filename": "src/test/ui/associated-types/associated-types-unsized.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-unsized.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the size for values of type `<T as Get>::Value` cannot be known at compilation time\n   --> $DIR/associated-types-unsized.rs:7:9\n    |\n-LL |     let x = t.get(); //~ ERROR the size for values of type\n+LL |     let x = t.get();\n    |         ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `<T as Get>::Value`"}, {"sha": "5b7db0e9d6fb41b5838736524e00a2e40d44f2ec", "filename": "src/test/ui/attempted-access-non-fatal.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattempted-access-non-fatal.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,13 +1,13 @@\n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/attempted-access-non-fatal.rs:4:15\n    |\n-LL |     let _ = x.foo; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n+LL |     let _ = x.foo;\n    |               ^^^\n \n error[E0610]: `{integer}` is a primitive type and therefore doesn't have fields\n   --> $DIR/attempted-access-non-fatal.rs:5:15\n    |\n-LL |     let _ = x.bar; //~ `{integer}` is a primitive type and therefore doesn't have fields [E0610]\n+LL |     let _ = x.bar;\n    |               ^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "aae25b2721e4d9497375b270129a884a94a0bf48", "filename": "src/test/ui/attr-eq-token-tree.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-eq-token-tree.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: unexpected token: `!`\n   --> $DIR/attr-eq-token-tree.rs:3:11\n    |\n-LL | #[my_attr = !] //~ ERROR unexpected token: `!`\n+LL | #[my_attr = !]\n    |           ^\n \n error: aborting due to previous error"}, {"sha": "d8d7f6adb82b55a3dc5983eb3fd1a96567bbeeee", "filename": "src/test/ui/attr-usage-inline.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fattr-usage-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fattr-usage-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-inline.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0518]: attribute should be applied to function or closure\n   --> $DIR/attr-usage-inline.rs:6:1\n    |\n-LL | #[inline] //~ ERROR: attribute should be applied to function or closure\n+LL | #[inline]\n    | ^^^^^^^^^\n LL | struct S;\n    | --------- not a function or closure"}, {"sha": "f8ad7eec454c4f93bfabe690439b30c3a4b402db", "filename": "src/test/ui/attr-usage-repr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fattr-usage-repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattr-usage-repr.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,31 +1,31 @@\n error[E0517]: attribute should be applied to struct, enum or union\n   --> $DIR/attr-usage-repr.rs:4:8\n    |\n-LL | #[repr(C)] //~ ERROR: attribute should be applied to struct, enum or union\n+LL | #[repr(C)]\n    |        ^\n LL | fn f() {}\n    | --------- not a struct, enum or union\n \n error[E0517]: attribute should be applied to enum\n   --> $DIR/attr-usage-repr.rs:16:8\n    |\n-LL | #[repr(i8)] //~ ERROR: attribute should be applied to enum\n+LL | #[repr(i8)]\n    |        ^^\n LL | struct SInt(f64, f64);\n    | ---------------------- not an enum\n \n error[E0517]: attribute should be applied to struct or union\n   --> $DIR/attr-usage-repr.rs:25:8\n    |\n-LL | #[repr(packed)] //~ ERROR: attribute should be applied to struct\n+LL | #[repr(packed)]\n    |        ^^^^^^\n LL | enum EPacked { A, B }\n    | --------------------- not a struct or union\n \n error[E0517]: attribute should be applied to struct\n   --> $DIR/attr-usage-repr.rs:28:8\n    |\n-LL | #[repr(simd)] //~ ERROR: attribute should be applied to struct\n+LL | #[repr(simd)]\n    |        ^^^^\n LL | enum ESimd { A, B }\n    | ------------------- not a struct"}, {"sha": "4c5964715db7ea01bb470397898d1b2f7500c1ec", "filename": "src/test/ui/attribute-with-no-generics-in-parameter-list.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fattribute-with-no-generics-in-parameter-list.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fattribute-with-no-generics-in-parameter-list.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattribute-with-no-generics-in-parameter-list.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: attribute without generic parameters\n   --> $DIR/attribute-with-no-generics-in-parameter-list.rs:1:8\n    |\n-LL | fn foo<#[attr]>() {} //~ ERROR attribute without generic parameters\n+LL | fn foo<#[attr]>() {}\n    |        ^^^^^^^ attributes are only permitted when preceding parameters\n \n error: aborting due to previous error"}, {"sha": "e429bf2a594fe42a0a00bd458ef6310ba1416c80", "filename": "src/test/ui/augmented-assignments.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Faugmented-assignments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,16 +4,16 @@ error[E0596]: cannot borrow immutable local variable `y` as mutable\n LL |     let y = Int(2);\n    |         - help: make this binding mutable: `mut y`\n ...\n-LL |     y   //~ error: cannot borrow immutable local variable `y` as mutable\n+LL |     y\n    |     ^ cannot borrow mutably\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/augmented-assignments.rs:13:5\n    |\n-LL |     x   //~ error: use of moved value: `x`\n+LL |     x\n    |     ^ value used here after move\n ...\n-LL |     x;  //~ value moved here\n+LL |     x;\n    |     - value moved here\n    |\n    = note: move occurs because `x` has type `Int`, which does not implement the `Copy` trait"}, {"sha": "97b9cd961a0267482ca758eaaeb63079532193ae", "filename": "src/test/ui/auto-ref-slice-plus-ref.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauto-ref-slice-plus-ref.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0599]: no method named `test_mut` found for type `std::vec::Vec<{integer}>` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:7:7\n    |\n-LL |     a.test_mut(); //~ ERROR no method named `test_mut` found\n+LL |     a.test_mut();\n    |       ^^^^^^^^ help: did you mean: `get_mut`\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n@@ -11,7 +11,7 @@ LL |     a.test_mut(); //~ ERROR no method named `test_mut` found\n error[E0599]: no method named `test` found for type `std::vec::Vec<{integer}>` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:8:7\n    |\n-LL |     a.test(); //~ ERROR no method named `test` found\n+LL |     a.test();\n    |       ^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n@@ -21,7 +21,7 @@ LL |     a.test(); //~ ERROR no method named `test` found\n error[E0599]: no method named `test` found for type `[{integer}; 1]` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:10:11\n    |\n-LL |     ([1]).test(); //~ ERROR no method named `test` found\n+LL |     ([1]).test();\n    |           ^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope\n@@ -31,7 +31,7 @@ LL |     ([1]).test(); //~ ERROR no method named `test` found\n error[E0599]: no method named `test` found for type `&[{integer}; 1]` in the current scope\n   --> $DIR/auto-ref-slice-plus-ref.rs:11:12\n    |\n-LL |     (&[1]).test(); //~ ERROR no method named `test` found\n+LL |     (&[1]).test();\n    |            ^^^^\n    |\n    = help: items from traits can only be used if the trait is implemented and in scope"}, {"sha": "19bf11a67d1c1a83a2de18cf3f881c2420ae8710", "filename": "src/test/ui/await-keyword/2018-edition-error.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fawait-keyword%2F2018-edition-error.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,37 +1,37 @@\n error[E0721]: `await` is a keyword in the 2018 edition\n   --> $DIR/2018-edition-error.rs:5:13\n    |\n-LL |     pub mod await { //~ ERROR `await` is a keyword\n+LL |     pub mod await {\n    |             ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error[E0721]: `await` is a keyword in the 2018 edition\n   --> $DIR/2018-edition-error.rs:6:20\n    |\n-LL |         pub struct await; //~ ERROR `await` is a keyword\n+LL |         pub struct await;\n    |                    ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error[E0721]: `await` is a keyword in the 2018 edition\n   --> $DIR/2018-edition-error.rs:9:22\n    |\n-LL | use self::outer_mod::await::await; //~ ERROR `await` is a keyword\n+LL | use self::outer_mod::await::await;\n    |                      ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error[E0721]: `await` is a keyword in the 2018 edition\n   --> $DIR/2018-edition-error.rs:9:29\n    |\n-LL | use self::outer_mod::await::await; //~ ERROR `await` is a keyword\n+LL | use self::outer_mod::await::await;\n    |                             ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error[E0721]: `await` is a keyword in the 2018 edition\n   --> $DIR/2018-edition-error.rs:13:11\n    |\n-LL |     match await { await => () } //~ ERROR `await` is a keyword\n+LL |     match await { await => () }\n    |           ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error[E0721]: `await` is a keyword in the 2018 edition\n   --> $DIR/2018-edition-error.rs:13:19\n    |\n-LL |     match await { await => () } //~ ERROR `await` is a keyword\n+LL |     match await { await => () }\n    |                   ^^^^^ help: you can use a raw identifier to stay compatible: `r#await`\n \n error: aborting due to 6 previous errors"}, {"sha": "3e41b7e658555b263a1669522d2241a914ac5a04", "filename": "src/test/ui/bad/bad-expr-lhs.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,31 +1,31 @@\n error[E0070]: invalid left-hand side expression\n   --> $DIR/bad-expr-lhs.rs:2:5\n    |\n-LL |     1 = 2; //~ ERROR invalid left-hand side expression\n+LL |     1 = 2;\n    |     ^^^^^ left-hand of expression not valid\n \n error[E0067]: invalid left-hand side expression\n   --> $DIR/bad-expr-lhs.rs:3:5\n    |\n-LL |     1 += 2; //~ ERROR invalid left-hand side expression\n+LL |     1 += 2;\n    |     ^ invalid expression for left-hand side\n \n error[E0070]: invalid left-hand side expression\n   --> $DIR/bad-expr-lhs.rs:4:5\n    |\n-LL |     (1, 2) = (3, 4); //~ ERROR invalid left-hand side expression\n+LL |     (1, 2) = (3, 4);\n    |     ^^^^^^^^^^^^^^^ left-hand of expression not valid\n \n error[E0070]: invalid left-hand side expression\n   --> $DIR/bad-expr-lhs.rs:7:5\n    |\n-LL |     (a, b) = (3, 4); //~ ERROR invalid left-hand side expression\n+LL |     (a, b) = (3, 4);\n    |     ^^^^^^^^^^^^^^^ left-hand of expression not valid\n \n error[E0070]: invalid left-hand side expression\n   --> $DIR/bad-expr-lhs.rs:9:5\n    |\n-LL |     None = Some(3); //~ ERROR invalid left-hand side expression\n+LL |     None = Some(3);\n    |     ^^^^^^^^^^^^^^ left-hand of expression not valid\n \n error: aborting due to 5 previous errors"}, {"sha": "6dec74efd7185194d42f5e3a7eeb49cab37b564e", "filename": "src/test/ui/bad/bad-expr-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -19,7 +19,7 @@ LL |     log(debug, m1::arguments);\n error[E0580]: main function has wrong type\n   --> $DIR/bad-expr-path.rs:3:1\n    |\n-LL | fn main(arguments: Vec<String>) { //~ ERROR main function has wrong type\n+LL | fn main(arguments: Vec<String>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n    = note: expected type `fn()`"}, {"sha": "8212b2392c4ac046a544890bcc537a5cf305e4b1", "filename": "src/test/ui/bad/bad-expr-path2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-path2.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -19,7 +19,7 @@ LL |     log(debug, m1::arguments);\n error[E0580]: main function has wrong type\n   --> $DIR/bad-expr-path2.rs:5:1\n    |\n-LL | fn main(arguments: Vec<String>) { //~ ERROR main function has wrong type\n+LL | fn main(arguments: Vec<String>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n    = note: expected type `fn()`"}, {"sha": "5baba599e741f1e75da1c893c8fe8a45d2b55054", "filename": "src/test/ui/bad/bad-extern-link-attrs.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-extern-link-attrs.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,19 +1,19 @@\n error[E0459]: #[link(...)] specified without `name = \"foo\"`\n   --> $DIR/bad-extern-link-attrs.rs:1:1\n    |\n-LL | #[link()] //~ ERROR: specified without `name =\n+LL | #[link()]\n    | ^^^^^^^^^ missing `name` argument\n \n error[E0454]: #[link(name = \"\")] given with empty name\n   --> $DIR/bad-extern-link-attrs.rs:2:1\n    |\n-LL | #[link(name = \"\")] //~ ERROR: with empty name\n+LL | #[link(name = \"\")]\n    | ^^^^^^^^^^^^^^^^^^ empty name given\n \n error[E0458]: unknown kind: `bar`\n   --> $DIR/bad-extern-link-attrs.rs:4:1\n    |\n-LL | #[link(name = \"foo\", kind = \"bar\")] //~ ERROR: unknown kind\n+LL | #[link(name = \"foo\", kind = \"bar\")]\n    | ^^^^^^^^^^^^^^^^^^^^^------------^^\n    |                      |\n    |                      unknown kind"}, {"sha": "f6e67e6d78df08f12e8ab46f90864fc856067577", "filename": "src/test/ui/bad/bad-lint-cap2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap2.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: unused import: `std::option`\n   --> $DIR/bad-lint-cap2.rs:6:5\n    |\n-LL | use std::option; //~ ERROR\n+LL | use std::option;\n    |     ^^^^^^^^^^^\n    |\n note: lint level defined here"}, {"sha": "a1ea3f774b40d72f15842ce49d97d41f95ccaca3", "filename": "src/test/ui/bad/bad-lint-cap3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-lint-cap3.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n warning: unused import: `std::option`\n   --> $DIR/bad-lint-cap3.rs:7:5\n    |\n-LL | use std::option; //~ WARN\n+LL | use std::option;\n    |     ^^^^^^^^^^^\n    |\n note: lint level defined here"}, {"sha": "c7f15e7a4fa50501b3f61366993dbd326a661462", "filename": "src/test/ui/bad/bad-main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-main.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0580]: main function has wrong type\n   --> $DIR/bad-main.rs:1:1\n    |\n-LL | fn main(x: isize) { } //~ ERROR: main function has wrong type [E0580]\n+LL | fn main(x: isize) { }\n    | ^^^^^^^^^^^^^^^^^ incorrect number of function parameters\n    |\n    = note: expected type `fn()`"}, {"sha": "c72b965236006ba8cac9334808f2e63841c7dddf", "filename": "src/test/ui/bad/bad-method-typaram-kind.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-method-typaram-kind.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: `T` cannot be sent between threads safely\n   --> $DIR/bad-method-typaram-kind.rs:2:7\n    |\n-LL |     1.bar::<T>(); //~ ERROR `T` cannot be sent between threads safely\n+LL |     1.bar::<T>();\n    |       ^^^ `T` cannot be sent between threads safely\n    |\n    = help: the trait `std::marker::Send` is not implemented for `T`"}, {"sha": "a459c00634a1d53f1f81804352ef91736dfe3767", "filename": "src/test/ui/bad/bad-type-env-capture.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0401]: can't use generic parameters from outer function\n    |\n LL | fn foo<T>() {\n    |        - type variable from outer function\n-LL |     fn bar(b: T) { } //~ ERROR can't use generic parameters from outer\n+LL |     fn bar(b: T) { }\n    |        ---    ^ use of generic parameter from outer function\n    |        |\n    |        help: try using a local generic parameter instead: `bar<T>`"}, {"sha": "9157fe0b070d09d0c350f2f4ddf1e51f0262a8b4", "filename": "src/test/ui/bind-by-move/bind-by-move-neither-can-live-while-the-other-survives-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-2.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0009]: cannot bind by-move and by-ref in the same pattern\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-2.rs:12:23\n    |\n-LL |         Some((ref _y, _z)) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n+LL |         Some((ref _y, _z)) => { },\n    |               ------  ^^ by-move pattern here\n    |               |\n    |               both by-ref and by-move used"}, {"sha": "267a9dff926a22fca86ebd2edb4616b3dc8d06c3", "filename": "src/test/ui/bind-by-move/bind-by-move-neither-can-live-while-the-other-survives-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbind-by-move%2Fbind-by-move-neither-can-live-while-the-other-survives-4.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0009]: cannot bind by-move and by-ref in the same pattern\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-4.rs:12:15\n    |\n-LL |         Some((_y, ref _z)) => { }, //~ ERROR cannot bind by-move and by-ref in the same pattern\n+LL |         Some((_y, ref _z)) => { },\n    |               ^^  ------ both by-ref and by-move used\n    |               |\n    |               by-move pattern here"}, {"sha": "9246c116709d4145316764f31941c678beae7abd", "filename": "src/test/ui/binop/binop-consume-args.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-consume-args.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs + rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -13,8 +13,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs + rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -24,7 +24,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs - rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -34,8 +34,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs - rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -45,7 +45,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs * rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -55,8 +55,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs * rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -66,7 +66,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs / rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -76,8 +76,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs / rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -87,7 +87,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs % rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -97,8 +97,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs % rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -108,7 +108,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs & rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -118,8 +118,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs & rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -129,7 +129,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs | rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -139,8 +139,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs | rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -150,7 +150,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs ^ rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -160,8 +160,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs ^ rhs;\n    |           --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -171,7 +171,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs << rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -181,8 +181,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs << rhs;\n    |            --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait\n@@ -192,7 +192,7 @@ error[E0382]: use of moved value: `lhs`\n    |\n LL |     lhs >> rhs;\n    |     --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n+LL |     drop(lhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `lhs` has type `A`, which does not implement the `Copy` trait\n@@ -202,8 +202,8 @@ error[E0382]: use of moved value: `rhs`\n    |\n LL |     lhs >> rhs;\n    |            --- value moved here\n-LL |     drop(lhs);  //~ ERROR use of moved value: `lhs`\n-LL |     drop(rhs);  //~ ERROR use of moved value: `rhs`\n+LL |     drop(lhs);\n+LL |     drop(rhs);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `rhs` has type `B`, which does not implement the `Copy` trait"}, {"sha": "acc2620681b6a0b843a6e936f35230b1cc9b2969", "filename": "src/test/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0382]: use of moved value: `x`\n LL |     x\n    |     - value moved here\n LL |     +\n-LL |     x;  //~ ERROR: use of moved value\n+LL |     x;\n    |     ^ value used here after move\n    |\n    = note: move occurs because `x` has type `T`, which does not implement the `Copy` trait\n@@ -15,7 +15,7 @@ error[E0382]: use of moved value: `x`\n LL |     x\n    |     - value moved here\n LL |     +\n-LL |     x.clone();  //~ ERROR: use of moved value\n+LL |     x.clone();\n    |     ^ value used here after move\n    |\n    = note: move occurs because `x` has type `T`, which does not implement the `Copy` trait\n@@ -26,7 +26,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n LL |     let m = &x;\n    |              - borrow of `x` occurs here\n ...\n-LL |     x  //~ ERROR: cannot move out of `x` because it is borrowed\n+LL |     x\n    |     ^ move out of `x` occurs here\n \n error[E0505]: cannot move out of `y` because it is borrowed\n@@ -35,19 +35,19 @@ error[E0505]: cannot move out of `y` because it is borrowed\n LL |     let n = &mut y;\n    |                  - borrow of `y` occurs here\n ...\n-LL |     y;  //~ ERROR: cannot move out of `y` because it is borrowed\n+LL |     y;\n    |     ^ move out of `y` occurs here\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/binop-move-semantics.rs:30:5\n    |\n-LL |     *m  //~ ERROR: cannot move out of borrowed content\n+LL |     *m\n    |     ^^ cannot move out of borrowed content\n \n error[E0507]: cannot move out of borrowed content\n   --> $DIR/binop-move-semantics.rs:32:5\n    |\n-LL |     *n;  //~ ERROR: cannot move out of borrowed content\n+LL |     *n;\n    |     ^^ cannot move out of borrowed content\n \n error[E0502]: cannot borrow `f` as immutable because it is also borrowed as mutable\n@@ -56,7 +56,7 @@ error[E0502]: cannot borrow `f` as immutable because it is also borrowed as muta\n LL |     &mut f\n    |          - mutable borrow occurs here\n LL |     +\n-LL |     &f;  //~ ERROR: cannot borrow `f` as immutable because it is also borrowed as mutable\n+LL |     &f;\n    |      ^\n    |      |\n    |      immutable borrow occurs here\n@@ -68,7 +68,7 @@ error[E0502]: cannot borrow `f` as mutable because it is also borrowed as immuta\n LL |     &f\n    |      - immutable borrow occurs here\n LL |     +\n-LL |     &mut f;  //~ ERROR: cannot borrow `f` as mutable because it is also borrowed as immutable\n+LL |     &mut f;\n    |          ^\n    |          |\n    |          mutable borrow occurs here"}, {"sha": "5981b8b60794c213aa5cb11651f914b921d5e00d", "filename": "src/test/ui/block-result/block-must-not-have-result-do.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-do.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-do.rs:3:9\n    |\n-LL |         true //~  ERROR mismatched types\n+LL |         true\n    |         ^^^^ expected (), found bool\n    |\n    = note: expected type `()`"}, {"sha": "8a41f8b8e3dff8cc8e28b73aa13f79827ced52e2", "filename": "src/test/ui/block-result/block-must-not-have-result-res.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-res.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL |     fn drop(&mut self) {\n    |                        - expected `()` because of default return type\n-LL |         true //~  ERROR mismatched types\n+LL |         true\n    |         ^^^^ expected (), found bool\n    |\n    = note: expected type `()`"}, {"sha": "302d2972f7de14629551b7429e901641492f7804", "filename": "src/test/ui/block-result/block-must-not-have-result-while.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fblock-must-not-have-result-while.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/block-must-not-have-result-while.rs:3:9\n    |\n-LL |         true //~  ERROR mismatched types\n+LL |         true\n    |         ^^^^ expected (), found bool\n    |\n    = note: expected type `()`"}, {"sha": "618d020ce08b54c443add265e724fc8d744c337d", "filename": "src/test/ui/block-result/consider-removing-last-semi.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fconsider-removing-last-semi.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:1:11\n    |\n-LL | fn f() -> String {  //~ ERROR mismatched types\n+LL | fn f() -> String {\n    |    -      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n    |    this function's body doesn't return\n@@ -15,7 +15,7 @@ LL |     \"bla\".to_string();\n error[E0308]: mismatched types\n   --> $DIR/consider-removing-last-semi.rs:6:11\n    |\n-LL | fn g() -> String {  //~ ERROR mismatched types\n+LL | fn g() -> String {\n    |    -      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n    |    this function's body doesn't return"}, {"sha": "d73489a602df4dc31d6de97dad3c40f2a90d4403", "filename": "src/test/ui/block-result/issue-11714.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-11714.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-11714.rs:1:14\n    |\n-LL | fn blah() -> i32 { //~ ERROR mismatched types\n+LL | fn blah() -> i32 {\n    |    ----      ^^^ expected i32, found ()\n    |    |\n    |    this function's body doesn't return"}, {"sha": "18adb15c9615d7c2f7e79fa27650a8e3949b1642", "filename": "src/test/ui/block-result/issue-13428.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-13428.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:3:13\n    |\n-LL | fn foo() -> String {  //~ ERROR mismatched types\n+LL | fn foo() -> String {\n    |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n    |    this function's body doesn't return\n@@ -15,7 +15,7 @@ LL |     ;\n error[E0308]: mismatched types\n   --> $DIR/issue-13428.rs:11:13\n    |\n-LL | fn bar() -> String {  //~ ERROR mismatched types\n+LL | fn bar() -> String {\n    |    ---      ^^^^^^ expected struct `std::string::String`, found ()\n    |    |\n    |    this function's body doesn't return"}, {"sha": "fb4feff37134a77bc40bc032caf8e9defc2dafde", "filename": "src/test/ui/block-result/issue-20862.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -14,7 +14,7 @@ error[E0618]: expected function, found `()`\n    |\n LL | / fn foo(x: i32) {\n LL | |     |y| x + y\n-LL | | //~^ ERROR: mismatched types\n+LL | |\n LL | | }\n    | |_- `foo` defined here returns `()`\n ..."}, {"sha": "e1e6428eda25525740671540df5b2969894c5ec7", "filename": "src/test/ui/block-result/issue-22645.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-22645.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `{integer}: Scalar` is not satisfied\n   --> $DIR/issue-22645.rs:15:5\n    |\n-LL |   b + 3 //~ ERROR E0277\n+LL |   b + 3\n    |     ^ the trait `Scalar` is not implemented for `{integer}`\n    |\n    = help: the following implementations were found:\n@@ -14,7 +14,7 @@ error[E0308]: mismatched types\n LL | fn main() {\n    |           - expected `()` because of default return type\n LL |   let b = Bob + 3.5;\n-LL |   b + 3 //~ ERROR E0277\n+LL |   b + 3\n    |   ^^^^^ expected (), found struct `Bob`\n    |\n    = note: expected type `()`"}, {"sha": "3ceff81ec4d63a6ead74d87591dfa0f439de07a5", "filename": "src/test/ui/block-result/unexpected-return-on-unit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Funexpected-return-on-unit.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,14 +1,14 @@\n error[E0308]: mismatched types\n   --> $DIR/unexpected-return-on-unit.rs:9:5\n    |\n-LL |     foo() //~ ERROR mismatched types\n+LL |     foo()\n    |     ^^^^^ expected (), found usize\n    |\n    = note: expected type `()`\n               found type `usize`\n help: try adding a semicolon\n    |\n-LL |     foo(); //~ ERROR mismatched types\n+LL |     foo();\n    |          ^\n help: try adding a return type\n    |"}, {"sha": "904d2ed97de813fdeba1544226bd274a1847c704", "filename": "src/test/ui/borrowck/assign_mutable_fields.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fassign_mutable_fields.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,19 +1,19 @@\n error[E0381]: use of possibly uninitialized variable: `x.0`\n   --> $DIR/assign_mutable_fields.rs:11:10\n    |\n-LL |     drop(x.0); //~ ERROR\n+LL |     drop(x.0);\n    |          ^^^ use of possibly uninitialized `x.0`\n \n error[E0381]: use of possibly uninitialized variable: `x.1`\n   --> $DIR/assign_mutable_fields.rs:12:10\n    |\n-LL |     drop(x.1); //~ ERROR\n+LL |     drop(x.1);\n    |          ^^^ use of possibly uninitialized `x.1`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/assign_mutable_fields.rs:19:10\n    |\n-LL |     drop(x); //~ ERROR\n+LL |     drop(x);\n    |          ^ use of possibly uninitialized `x`\n \n error: aborting due to 3 previous errors"}, {"sha": "09adb350e00de5f4f29b9e518685ba418f466f85", "filename": "src/test/ui/borrowck/borrow-immutable-upvar-mutation.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-immutable-upvar-mutation.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,75 +1,75 @@\n error[E0387]: cannot assign to data in a captured outer variable in an `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:15:27\n    |\n-LL |         let _f = to_fn(|| x = 42); //~ ERROR cannot assign\n+LL |         let _f = to_fn(|| x = 42);\n    |                           ^^^^^^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/borrow-immutable-upvar-mutation.rs:15:24\n    |\n-LL |         let _f = to_fn(|| x = 42); //~ ERROR cannot assign\n+LL |         let _f = to_fn(|| x = 42);\n    |                        ^^^^^^^^^\n \n error[E0387]: cannot borrow data mutably in a captured outer variable in an `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:18:36\n    |\n-LL |         let _g = to_fn(|| set(&mut y)); //~ ERROR cannot borrow\n+LL |         let _g = to_fn(|| set(&mut y));\n    |                                    ^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/borrow-immutable-upvar-mutation.rs:18:24\n    |\n-LL |         let _g = to_fn(|| set(&mut y)); //~ ERROR cannot borrow\n+LL |         let _g = to_fn(|| set(&mut y));\n    |                        ^^^^^^^^^^^^^^\n \n error[E0387]: cannot assign to data in a captured outer variable in an `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:21:55\n    |\n-LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); }); //~ ERROR cannot assign\n+LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); });\n    |                                                       ^^^^^^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/borrow-immutable-upvar-mutation.rs:21:52\n    |\n-LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); }); //~ ERROR cannot assign\n+LL |         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); });\n    |                                                    ^^^^^^^^^\n \n error[E0594]: cannot assign to captured outer variable in an `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:27:32\n    |\n-LL |         let _f = to_fn(move || x = 42); //~ ERROR cannot assign\n+LL |         let _f = to_fn(move || x = 42);\n    |                                ^^^^^^\n    |\n    = note: `Fn` closures cannot capture their enclosing environment for modifications\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/borrow-immutable-upvar-mutation.rs:27:24\n    |\n-LL |         let _f = to_fn(move || x = 42); //~ ERROR cannot assign\n+LL |         let _f = to_fn(move || x = 42);\n    |                        ^^^^^^^^^^^^^^\n \n error[E0596]: cannot borrow captured outer variable in an `Fn` closure as mutable\n   --> $DIR/borrow-immutable-upvar-mutation.rs:30:41\n    |\n-LL |         let _g = to_fn(move || set(&mut y)); //~ ERROR cannot borrow\n+LL |         let _g = to_fn(move || set(&mut y));\n    |                                         ^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/borrow-immutable-upvar-mutation.rs:30:24\n    |\n-LL |         let _g = to_fn(move || set(&mut y)); //~ ERROR cannot borrow\n+LL |         let _g = to_fn(move || set(&mut y));\n    |                        ^^^^^^^^^^^^^^^^^^^\n \n error[E0594]: cannot assign to captured outer variable in an `Fn` closure\n   --> $DIR/borrow-immutable-upvar-mutation.rs:33:65\n    |\n-LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign\n+LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n    |                                                                 ^^^^^^\n    |\n    = note: `Fn` closures cannot capture their enclosing environment for modifications\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/borrow-immutable-upvar-mutation.rs:33:57\n    |\n-LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign\n+LL |         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); });\n    |                                                         ^^^^^^^^^^^^^^\n \n error: aborting due to 6 previous errors"}, {"sha": "f7fc06e1b4fbd4a5d9cb8ade3e2d973cdf0feec7", "filename": "src/test/ui/borrowck/borrow-tuple-fields.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,15 +3,15 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |     let r = &x.0;\n    |              --- borrow of `x.0` occurs here\n-LL |     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n+LL |     let y = x;\n    |         ^ move out of `x` occurs here\n \n error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n   --> $DIR/borrow-tuple-fields.rs:18:18\n    |\n LL |     let a = &x.0;\n    |              --- immutable borrow occurs here\n-LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n+LL |     let b = &mut x.0;\n    |                  ^^^ mutable borrow occurs here\n ...\n LL | }\n@@ -22,7 +22,7 @@ error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n    |\n LL |     let a = &mut x.0;\n    |                  --- first mutable borrow occurs here\n-LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n+LL |     let b = &mut x.0;\n    |                  ^^^ second mutable borrow occurs here\n ...\n LL | }\n@@ -33,15 +33,15 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |     let r = &x.0;\n    |              --- borrow of `x.0` occurs here\n-LL |     let y = x; //~ ERROR cannot move out of `x` because it is borrowed\n+LL |     let y = x;\n    |         ^ move out of `x` occurs here\n \n error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n   --> $DIR/borrow-tuple-fields.rs:33:18\n    |\n LL |     let a = &x.0;\n    |              --- immutable borrow occurs here\n-LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable because it is also borrowed as\n+LL |     let b = &mut x.0;\n    |                  ^^^ mutable borrow occurs here\n ...\n LL | }\n@@ -52,7 +52,7 @@ error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n    |\n LL |     let a = &mut x.0;\n    |                  --- first mutable borrow occurs here\n-LL |     let b = &mut x.0; //~ ERROR cannot borrow `x.0` as mutable more than once at a time\n+LL |     let b = &mut x.0;\n    |                  ^^^ second mutable borrow occurs here\n LL |     a.use_mut();\n LL | }"}, {"sha": "13696ac8347b55728116a9440cd9275b6337ecf3", "filename": "src/test/ui/borrowck/borrowck-and-init.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `i`\n   --> $DIR/borrowck-and-init.rs:5:20\n    |\n-LL |     println!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`\n+LL |     println!(\"{}\", i);\n    |                    ^ use of possibly uninitialized `i`\n \n error: aborting due to previous error"}, {"sha": "efe94dee2e7c5955babf05ce3559ac048e43cb1f", "filename": "src/test/ui/borrowck/borrowck-anon-fields-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-struct.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n LL |         Y(ref mut a, _) => a\n    |           --------- first mutable borrow occurs here\n ...\n-LL |         Y(ref mut b, _) => b //~ ERROR cannot borrow\n+LL |         Y(ref mut b, _) => b\n    |           ^^^^^^^^^ second mutable borrow occurs here\n ...\n LL | }"}, {"sha": "40f96cb712c0fcf813d44260ac6c8db5c6f3cd75", "filename": "src/test/ui/borrowck/borrowck-anon-fields-tuple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-tuple.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n LL |         (ref mut a, _) => a\n    |          --------- first mutable borrow occurs here\n ...\n-LL |         (ref mut b, _) => b //~ ERROR cannot borrow\n+LL |         (ref mut b, _) => b\n    |          ^^^^^^^^^ second mutable borrow occurs here\n ...\n LL | }"}, {"sha": "2835cab9092f11a7f6462555ca3c0c197cc1187d", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n LL |       Foo::Y(ref mut a, _) => a,\n    |              --------- first mutable borrow occurs here\n ...\n-LL |       Foo::Y(ref mut b, _) => b, //~ ERROR cannot borrow\n+LL |       Foo::Y(ref mut b, _) => b,\n    |              ^^^^^^^^^ second mutable borrow occurs here\n ...\n LL | }"}, {"sha": "6c9c411cbcf035b2372e40d7d636590f13472d7f", "filename": "src/test/ui/borrowck/borrowck-argument.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,29 +3,29 @@ error[E0596]: cannot borrow immutable argument `arg` as mutable\n    |\n LL | fn func(arg: S) {\n    |         --- help: make this binding mutable: `mut arg`\n-LL |     arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+LL |     arg.mutate();\n    |     ^^^ cannot borrow mutably\n \n error[E0596]: cannot borrow immutable argument `arg` as mutable\n   --> $DIR/borrowck-argument.rs:15:9\n    |\n LL |     fn method(&self, arg: S) {\n    |                      --- help: make this binding mutable: `mut arg`\n-LL |         arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+LL |         arg.mutate();\n    |         ^^^ cannot borrow mutably\n \n error[E0596]: cannot borrow immutable argument `arg` as mutable\n   --> $DIR/borrowck-argument.rs:21:9\n    |\n LL |     fn default(&self, arg: S) {\n    |                       --- help: make this binding mutable: `mut arg`\n-LL |         arg.mutate(); //~ ERROR: cannot borrow immutable argument\n+LL |         arg.mutate();\n    |         ^^^ cannot borrow mutably\n \n error[E0596]: cannot borrow immutable argument `arg` as mutable\n   --> $DIR/borrowck-argument.rs:32:17\n    |\n-LL |     (|arg: S| { arg.mutate() })(s); //~ ERROR: cannot borrow immutable argument\n+LL |     (|arg: S| { arg.mutate() })(s);\n    |       ---       ^^^ cannot borrow mutably\n    |       |\n    |       help: make this binding mutable: `mut arg`"}, {"sha": "0d092e6812d941f63704221081fe1b0e4fe0231b", "filename": "src/test/ui/borrowck/borrowck-assign-comp-idx.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immuta\n LL |     let q: &isize = &p[0];\n    |                      - immutable borrow occurs here\n LL | \n-LL |     p[0] = 5; //~ ERROR cannot borrow\n+LL |     p[0] = 5;\n    |     ^ mutable borrow occurs here\n ...\n LL | }\n@@ -15,7 +15,7 @@ error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immuta\n    |\n LL |         &p,\n    |          - immutable borrow occurs here\n-LL |         || p[0] = 5); //~ ERROR cannot borrow `p` as mutable\n+LL |         || p[0] = 5);\n    |         ^^ -       - immutable borrow ends here\n    |         |  |\n    |         |  borrow occurs due to use of `p` in closure"}, {"sha": "5ec1ff2c058da4f753c7d3bc9a2483f56c1d238d", "filename": "src/test/ui/borrowck/borrowck-assign-to-andmut-in-aliasable-loc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-aliasable-loc.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,15 +3,15 @@ error[E0389]: cannot assign to data in a `&` reference\n    |\n LL | fn a(s: &S) {\n    |         -- use `&mut S` here to make mutable\n-LL |     *s.pointer += 1; //~ ERROR cannot assign\n+LL |     *s.pointer += 1;\n    |     ^^^^^^^^^^^^^^^ assignment into an immutable reference\n \n error[E0389]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-assign-to-andmut-in-aliasable-loc.rs:17:5\n    |\n LL | fn c(s: & &mut S) {\n    |         -------- use `&mut &mut S` here to make mutable\n-LL |     *s.pointer += 1; //~ ERROR cannot assign\n+LL |     *s.pointer += 1;\n    |     ^^^^^^^^^^^^^^^ assignment into an immutable reference\n \n error: aborting due to 2 previous errors"}, {"sha": "10d6ac5464d05edd72b20164b59e6444d9d6f837", "filename": "src/test/ui/borrowck/borrowck-assign-to-andmut-in-borrowed-loc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-to-andmut-in-borrowed-loc.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0506]: cannot assign to `*y.pointer` because it is borrowed\n    |\n LL |         let z = copy_borrowed_ptr(&mut y);\n    |                                        - borrow of `*y.pointer` occurs here\n-LL |         *y.pointer += 1; //~ ERROR cannot assign\n+LL |         *y.pointer += 1;\n    |         ^^^^^^^^^^^^^^^ assignment to borrowed `*y.pointer` occurs here\n \n error: aborting due to previous error"}, {"sha": "759b778e35c825f2b66117d29027d8f62cb6ac16", "filename": "src/test/ui/borrowck/borrowck-auto-mut-ref-to-immut-var.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow immutable local variable `x` as mutable\n    |\n LL |     let x = Foo { x: 3 };\n    |         - help: make this binding mutable: `mut x`\n-LL |     x.printme();    //~ ERROR cannot borrow\n+LL |     x.printme();\n    |     ^ cannot borrow mutably\n \n error: aborting due to previous error"}, {"sha": "280704a27151c108406003756b5580ee28f90b53", "filename": "src/test/ui/borrowck/borrowck-autoref-3261.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-autoref-3261.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n    |\n LL |     (&mut x).with(\n    |           - first mutable borrow occurs here\n-LL |         |opt| { //~ ERROR cannot borrow `x` as mutable more than once at a time\n+LL |         |opt| {\n    |         ^^^^^ second mutable borrow occurs here\n ...\n LL |                     x = X(Either::Left((0, 0)));"}, {"sha": "06ec2bdac71510df8135359d8d9107bc90b282ea", "filename": "src/test/ui/borrowck/borrowck-bad-nested-calls-free.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-free.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `a` as mutable because `*a` is also borrowed as immu\n    |\n LL |         &*a,\n    |          -- immutable borrow occurs here\n-LL |         rewrite(&mut a)); //~ ERROR cannot borrow\n+LL |         rewrite(&mut a));\n    |                      ^ - immutable borrow ends here\n    |                      |\n    |                      mutable borrow occurs here\n@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `a` as mutable because `*a` is also borrowed as immu\n    |\n LL |         &*a,\n    |          -- immutable borrow occurs here\n-LL |         rewrite(&mut a)); //~ ERROR cannot borrow\n+LL |         rewrite(&mut a));\n    |                      ^ - immutable borrow ends here\n    |                      |\n    |                      mutable borrow occurs here"}, {"sha": "3b34a61364ab66b101c900a273dcb14c7145c2bd", "filename": "src/test/ui/borrowck/borrowck-bad-nested-calls-move.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-bad-nested-calls-move.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,15 +3,15 @@ error[E0505]: cannot move out of `a` because it is borrowed\n    |\n LL |         &*a,\n    |          -- borrow of `*a` occurs here\n-LL |         a); //~ ERROR cannot move\n+LL |         a);\n    |         ^ move out of `a` occurs here\n \n error[E0505]: cannot move out of `a` because it is borrowed\n   --> $DIR/borrowck-bad-nested-calls-move.rs:32:9\n    |\n LL |         &*a,\n    |          -- borrow of `*a` occurs here\n-LL |         a); //~ ERROR cannot move\n+LL |         a);\n    |         ^ move out of `a` occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "ab55d7994d0c9d634f74566e40c14a80e00e6791", "filename": "src/test/ui/borrowck/borrowck-block-unint.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-block-unint.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: capture of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-block-unint.rs:4:11\n    |\n-LL |     force(|| {  //~ ERROR capture of possibly uninitialized variable: `x`\n+LL |     force(|| {\n    |           ^^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "a4fb28d0e8151efb8674091295c1e1308ac5ae04", "filename": "src/test/ui/borrowck/borrowck-borrow-from-owned-ptr.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-owned-ptr.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                     -------- first mutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                      ^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -14,7 +14,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                     -------- mutable borrow occurs here\n-LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &foo.bar1;\n    |                  ^^^^^^^^ immutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -25,7 +25,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let bar1 = &foo.bar1;\n    |                 -------- immutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                      ^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -36,7 +36,7 @@ error[E0499]: cannot borrow `foo` (via `foo.bar2`) as mutable more than once at\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                     -------- first mutable borrow occurs here (via `foo.bar1`)\n-LL |     let _bar2 = &mut foo.bar2; //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar2;\n    |                      ^^^^^^^^ second mutable borrow occurs here (via `foo.bar2`)\n LL |     *bar1;\n LL | }\n@@ -49,7 +49,7 @@ LL |         Foo { bar1: ref mut _bar1, bar2: ref mut _bar2 } => {}\n    |                     -------------        ^^^^^^^^^^^^^ second mutable borrow occurs here (via `foo.bar2`)\n    |                     |\n    |                     first mutable borrow occurs here (via `foo.bar1`)\n-LL |         //~^ ERROR cannot borrow\n+LL |\n LL |     }\n    |     - first borrow ends here\n \n@@ -70,7 +70,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because `foo.bar1.int1` is a\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n    |                  ^^^^^^^^ immutable borrow occurs here\n ...\n LL | }\n@@ -81,8 +81,8 @@ error[E0502]: cannot borrow `*foo` as immutable because `foo.bar1.int1` is also\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n-LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n+LL |     let _foo2 = &*foo;\n    |                  ^^^^ immutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -93,7 +93,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- first mutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                      ^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -104,7 +104,7 @@ error[E0499]: cannot borrow `*foo` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- first mutable borrow occurs here\n-LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut *foo;\n    |                      ^^^^ second mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -115,7 +115,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because `foo.bar1.int1` is als\n    |\n LL |     let bar1 = &foo.bar1.int1;\n    |                 ------------- immutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                      ^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -126,7 +126,7 @@ error[E0502]: cannot borrow `*foo` as mutable because `foo.bar1.int1` is also bo\n    |\n LL |     let bar1 = &foo.bar1.int1;\n    |                 ------------- immutable borrow occurs here\n-LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut *foo;\n    |                      ^^^^ mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -137,7 +137,7 @@ error[E0502]: cannot borrow `foo` (via `foo.bar2`) as immutable because `foo` is\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                     -------- mutable borrow occurs here (via `foo.bar1`)\n-LL |     let _foo1 = &foo.bar2; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar2;\n    |                  ^^^^^^^^ immutable borrow of `foo.bar2` -- which overlaps with `foo.bar1` -- occurs here\n LL |     *bar1;\n LL | }\n@@ -148,15 +148,15 @@ error[E0596]: cannot borrow field `foo.bar1` of immutable binding as mutable\n    |\n LL |     let foo = make_foo();\n    |         --- help: make this binding mutable: `mut foo`\n-LL |     let bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let bar1 = &mut foo.bar1;\n    |                     ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0499]: cannot borrow `foo` (via `foo.bar2.int2`) as mutable more than once at a time\n   --> $DIR/borrowck-borrow-from-owned-ptr.rs:128:21\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- first mutable borrow occurs here (via `foo.bar1.int1`)\n-LL |     let foo1 = &mut foo.bar2.int2; //~ ERROR cannot borrow\n+LL |     let foo1 = &mut foo.bar2.int2;\n    |                     ^^^^^^^^^^^^^ second mutable borrow occurs here (via `foo.bar2.int2`)\n ...\n LL | }"}, {"sha": "fe60d944a44fb333d23f4264c45af05545bafacb", "filename": "src/test/ui/borrowck/borrowck-borrow-from-stack-variable.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-stack-variable.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                     -------- first mutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                      ^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -14,7 +14,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let bar1 = &mut foo.bar1;\n    |                     -------- mutable borrow occurs here\n-LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &foo.bar1;\n    |                  ^^^^^^^^ immutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -25,7 +25,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let bar1 = &foo.bar1;\n    |                 -------- immutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                      ^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -48,7 +48,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because `foo.bar1.int1` is a\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n    |                  ^^^^^^^^ immutable borrow occurs here\n ...\n LL | }\n@@ -59,8 +59,8 @@ error[E0502]: cannot borrow `foo` as immutable because `foo.bar1.int1` is also b\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n-LL |     let _foo2 = &foo; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n+LL |     let _foo2 = &foo;\n    |                  ^^^ immutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -71,7 +71,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- first mutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                      ^^^^^^^^ second mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -82,7 +82,7 @@ error[E0499]: cannot borrow `foo` as mutable more than once at a time\n    |\n LL |     let bar1 = &mut foo.bar1.int1;\n    |                     ------------- first mutable borrow occurs here\n-LL |     let _foo2 = &mut foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut foo;\n    |                      ^^^ second mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -93,7 +93,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because `foo.bar1.int1` is als\n    |\n LL |     let bar1 = &foo.bar1.int1;\n    |                 ------------- immutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                      ^^^^^^^^ mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -104,7 +104,7 @@ error[E0502]: cannot borrow `foo` as mutable because `foo.bar1.int1` is also bor\n    |\n LL |     let bar1 = &foo.bar1.int1;\n    |                 ------------- immutable borrow occurs here\n-LL |     let _foo2 = &mut foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut foo;\n    |                      ^^^ mutable borrow occurs here\n LL |     *bar1;\n LL | }\n@@ -115,7 +115,7 @@ error[E0596]: cannot borrow field `foo.bar1` of immutable binding as mutable\n    |\n LL |     let foo = make_foo();\n    |         --- help: make this binding mutable: `mut foo`\n-LL |     let bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let bar1 = &mut foo.bar1;\n    |                     ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error: aborting due to 11 previous errors"}, {"sha": "6f101f690cd29233ef7f52eda633d63b2223023b", "filename": "src/test/ui/borrowck/borrowck-borrow-from-temporary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-from-temporary.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-borrow-from-temporary.rs:9:24\n    |\n-LL |     let &Foo(ref x) = &id(Foo(3)); //~ ERROR borrowed value does not live long enough\n+LL |     let &Foo(ref x) = &id(Foo(3));\n    |                        ^^^^^^^^^^ temporary value does not live long enough\n LL |     x\n LL | }"}, {"sha": "709a797edcb4efb18c0f7aa000590a217141dd83", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,15 +1,15 @@\n error[E0389]: cannot assign to data in a `&` reference\n   --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:9:5\n    |\n-LL |     **t1 = 22; //~ ERROR cannot assign\n+LL |     **t1 = 22;\n    |     ^^^^^^^^^ assignment into an immutable reference\n \n error[E0502]: cannot borrow `**t0` as immutable because `*t0` is also borrowed as mutable\n   --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:14:22\n    |\n LL |     let t1 = &mut *t0;\n    |                   --- mutable borrow occurs here\n-LL |     let p: &isize = &**t0; //~ ERROR cannot borrow\n+LL |     let p: &isize = &**t0;\n    |                      ^^^^ immutable borrow occurs here\n LL |     **t1 = 22;\n LL | }\n@@ -20,7 +20,7 @@ error[E0389]: cannot borrow data mutably in a `&` reference\n    |\n LL | fn foo4(t0: & &mut isize) {\n    |             ------------ use `&mut &mut isize` here to make mutable\n-LL |     let x:  &mut isize = &mut **t0; //~ ERROR cannot borrow\n+LL |     let x:  &mut isize = &mut **t0;\n    |                               ^^^^ assignment into an immutable reference\n \n error: aborting due to 3 previous errors"}, {"sha": "1b64ad57564598edfda76f9df0d5a8531ff3ad00", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-object-twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `*x` as mutable more than once at a time\n    |\n LL |     let y = x.f1();\n    |             - first mutable borrow occurs here\n-LL |     x.f2(); //~ ERROR cannot borrow `*x` as mutable\n+LL |     x.f2();\n    |     ^ second mutable borrow occurs here\n LL |     y.use_ref();\n LL | }"}, {"sha": "2fe1461a303d5b72426b2dd8a5fb2f479b533a45", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-auto-deref.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,85 +1,85 @@\n error[E0596]: cannot borrow field of immutable binding as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:47:24\n    |\n-LL |     let __isize = &mut x.y; //~ ERROR cannot borrow\n+LL |     let __isize = &mut x.y;\n    |                        ^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow field of immutable binding as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:51:24\n    |\n-LL |     let __isize = &mut x.y; //~ ERROR cannot borrow\n+LL |     let __isize = &mut x.y;\n    |                        ^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow field of immutable binding as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:59:10\n    |\n-LL |     &mut x.y //~ ERROR cannot borrow\n+LL |     &mut x.y\n    |          ^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow field of immutable binding as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:63:10\n    |\n-LL |     &mut x.y //~ ERROR cannot borrow\n+LL |     &mut x.y\n    |          ^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field of immutable binding\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:67:5\n    |\n-LL |     x.y = 3; //~ ERROR cannot assign\n+LL |     x.y = 3;\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field of immutable binding\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:71:5\n    |\n-LL |     x.y = 3; //~ ERROR cannot assign\n+LL |     x.y = 3;\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field of immutable binding\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:75:5\n    |\n-LL |     x.y = 3; //~ ERROR cannot assign\n+LL |     x.y = 3;\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:83:5\n    |\n-LL |     x.set(0, 0); //~ ERROR cannot borrow\n+LL |     x.set(0, 0);\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:87:5\n    |\n-LL |     x.set(0, 0); //~ ERROR cannot borrow\n+LL |     x.set(0, 0);\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:95:5\n    |\n-LL |     x.y_mut() //~ ERROR cannot borrow\n+LL |     x.y_mut()\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:99:5\n    |\n-LL |     x.y_mut() //~ ERROR cannot borrow\n+LL |     x.y_mut()\n    |     ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:103:6\n    |\n-LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:107:6\n    |\n-LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:111:6\n    |\n-LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+LL |     *x.y_mut() = 3;\n    |      ^ cannot borrow as mutable\n \n error: aborting due to 14 previous errors"}, {"sha": "fb79ccb701fb1db645fc234813c8c02346ef3bbd", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-deref.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-deref.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,43 +1,43 @@\n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:23:24\n    |\n-LL |     let __isize = &mut *x; //~ ERROR cannot borrow\n+LL |     let __isize = &mut *x;\n    |                        ^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:27:24\n    |\n-LL |     let __isize = &mut *x; //~ ERROR cannot borrow\n+LL |     let __isize = &mut *x;\n    |                        ^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:35:10\n    |\n-LL |     &mut **x //~ ERROR cannot borrow\n+LL |     &mut **x\n    |          ^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:39:10\n    |\n-LL |     &mut **x //~ ERROR cannot borrow\n+LL |     &mut **x\n    |          ^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:43:5\n    |\n-LL |     *x = 3; //~ ERROR cannot assign\n+LL |     *x = 3;\n    |     ^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:47:5\n    |\n-LL |     **x = 3; //~ ERROR cannot assign\n+LL |     **x = 3;\n    |     ^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to immutable borrowed content\n   --> $DIR/borrowck-borrow-overloaded-deref.rs:51:5\n    |\n-LL |     **x = 3; //~ ERROR cannot assign\n+LL |     **x = 3;\n    |     ^^^^^^^ cannot borrow as mutable\n \n error: aborting due to 7 previous errors"}, {"sha": "d17cf8a6fac36a39cbc31599f1c5c727cd2adebe", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue-2.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-borrowed-uniq-rvalue-2.rs:20:20\n    |\n-LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]); //~ ERROR borrowed value does not live long enough\n+LL |     let x = defer(&vec![\"Goodbye\", \"world!\"]);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ - temporary value dropped here while still borrowed\n    |                    |\n    |                    temporary value does not live long enough"}, {"sha": "32a86562da7470ac09f23b51789ee30da3960f23", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/borrowck-borrowed-uniq-rvalue.rs:10:27\n    |\n-LL |     buggy_map.insert(42, &*Box::new(1)); //~ ERROR borrowed value does not live long enough\n+LL |     buggy_map.insert(42, &*Box::new(1));\n    |                           ^^^^^^^^^^^^ - borrowed value dropped here while still borrowed\n    |                           |\n    |                           borrowed value does not live long enough"}, {"sha": "a6c3dfef9e8700ac732e11151b8fa6375f509677", "filename": "src/test/ui/borrowck/borrowck-break-uninit-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-break-uninit-2.rs:9:20\n    |\n-LL |     println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     println!(\"{}\", x);\n    |                    ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "dcb024a3e1a0c62f3a401774ac387868e52cfc5f", "filename": "src/test/ui/borrowck/borrowck-break-uninit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-break-uninit.rs:9:20\n    |\n-LL |     println!(\"{}\", x); //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     println!(\"{}\", x);\n    |                    ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "2f7c6a1a56a5bcb92cb7fb1fb7fcd97c15ea50a4", "filename": "src/test/ui/borrowck/borrowck-closures-mut-of-imm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-mut-of-imm.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -5,7 +5,7 @@ LL |     let mut c1 = || set(&mut *x);\n    |                  --           - previous borrow occurs due to use of `x` in closure\n    |                  |\n    |                  first closure is constructed here\n-LL |     //~^ ERROR cannot borrow\n+LL |\n LL |     let mut c2 = || set(&mut *x);\n    |                  ^^           - borrow occurs due to use of `x` in closure\n    |                  |"}, {"sha": "7399f8360dc30b0f809ba16827cb971541a0616a", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut-fail.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -5,7 +5,7 @@ LL |     let c1 = to_fn_mut(|| x = 4);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| x = 5);\n    |                        ^^ - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n@@ -20,7 +20,7 @@ LL |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n@@ -35,7 +35,7 @@ LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here"}, {"sha": "e881201ddfcc0a977cdb277b8ac6d0483fd23602", "filename": "src/test/ui/borrowck/borrowck-closures-two-mut.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-two-mut.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -5,7 +5,7 @@ LL |     let c1 = to_fn_mut(|| x = 4);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| x = 5);\n    |                        ^^ - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n@@ -20,7 +20,7 @@ LL |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n@@ -35,7 +35,7 @@ LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - previous borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n@@ -80,11 +80,11 @@ LL |     let c1 = to_fn_mut(|| x = 4);\n    |                        -- - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| x = 5); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| x = 5);\n    |                        ^^ - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n@@ -95,11 +95,11 @@ LL |     let c1 = to_fn_mut(|| set(&mut x));\n    |                        --          - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n \n@@ -110,11 +110,11 @@ LL |     let c1 = to_fn_mut(|| x = 5);\n    |                        -- - first borrow occurs due to use of `x` in closure\n    |                        |\n    |                        first mutable borrow occurs here\n-LL |     let c2 = to_fn_mut(|| set(&mut x)); //~ ERROR cannot borrow `x` as mutable more than once\n+LL |     let c2 = to_fn_mut(|| set(&mut x));\n    |                        ^^          - second borrow occurs due to use of `x` in closure\n    |                        |\n    |                        second mutable borrow occurs here\n-LL |     //~| ERROR cannot borrow `x` as mutable more than once\n+LL |\n LL |     drop((c1, c2));\n    |           -- first borrow later used here\n "}, {"sha": "3cdc9b9d4fd4f1a404af0d2680d499b952a53f60", "filename": "src/test/ui/borrowck/borrowck-closures-unique-imm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `this.x` as mutable because it is also borrowed as i\n    |\n LL |         let p = &this.x;\n    |                  ------ immutable borrow occurs here\n-LL |         &mut this.x; //~ ERROR cannot borrow\n+LL |         &mut this.x;\n    |              ^^^^^^ mutable borrow occurs here\n LL |         p.use_ref();\n LL |     };"}, {"sha": "238b16f654e3888871bdc3cff8fa4596b8b81422", "filename": "src/test/ui/borrowck/borrowck-closures-unique.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -5,7 +5,7 @@ LL |     let c1 = || get(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n    |              |\n    |              borrow occurs here\n-LL |     let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+LL |     let c2 = || set(x);\n    |              ^^     - borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n@@ -20,7 +20,7 @@ LL |     let c1 = || get(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n    |              |\n    |              borrow occurs here\n-LL |     let c2 = || { get(x); set(x); }; //~ ERROR closure requires unique access to `x`\n+LL |     let c2 = || { get(x); set(x); };\n    |              ^^       - borrow occurs due to use of `x` in closure\n    |              |\n    |              closure construction occurs here\n@@ -35,7 +35,7 @@ LL |     let c1 = || set(x);\n    |              --     - previous borrow occurs due to use of `x` in closure\n    |              |\n    |              first closure is constructed here\n-LL |     let c2 = || set(x); //~ ERROR two closures require unique access to `x` at the same time\n+LL |     let c2 = || set(x);\n    |              ^^     - borrow occurs due to use of `x` in closure\n    |              |\n    |              second closure is constructed here\n@@ -46,21 +46,21 @@ LL | }\n error[E0595]: closure cannot assign to immutable argument `x`\n   --> $DIR/borrowck-closures-unique.rs:47:14\n    |\n-LL |     let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n+LL |     let c1 = |y: &'static mut isize| x = y;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow mutably\n help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n    |\n-LL |     x //~ ERROR closure cannot assign to immutable argument\n+LL |     x\n    |     ^\n \n error[E0595]: closure cannot assign to immutable argument `x`\n   --> $DIR/borrowck-closures-unique.rs:52:14\n    |\n-LL |     let c1 = || x = panic!(); //~ ERROR closure cannot assign to immutable argument\n+LL |     let c1 = || x = panic!();\n    |              ^^ cannot borrow mutably\n help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n    |\n-LL |     x //~ ERROR closure cannot assign to immutable argument\n+LL |     x\n    |     ^\n \n error: aborting due to 5 previous errors"}, {"sha": "9e77d8ce1881d54b7e8148042b7c9f0a82ae442a", "filename": "src/test/ui/borrowck/borrowck-closures-use-after-free.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-use-after-free.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -6,7 +6,7 @@ LL |   let mut test = |foo: &Foo| {\n LL |     ptr = box Foo { x: ptr.x + 1 };\n    |     --- previous borrow occurs due to use of `ptr` in closure\n LL |   };\n-LL |   test(&*ptr); //~ ERROR cannot borrow `*ptr`\n+LL |   test(&*ptr);\n    |         ^^^^ immutable borrow occurs here\n LL | }\n    | - mutable borrow ends here"}, {"sha": "02644b82f57ee95dc5b278391169c1ed70c088af", "filename": "src/test/ui/borrowck/borrowck-consume-unsize-vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `b`\n    |\n LL |     consume(b);\n    |             - value moved here\n-LL |     consume(b); //~ ERROR use of moved value\n+LL |     consume(b);\n    |             ^ value used here after move\n    |\n    = note: move occurs because `b` has type `std::boxed::Box<[i32; 5]>`, which does not implement the `Copy` trait"}, {"sha": "7267a99b869b0b8f9f02112ecd9cccae3ed4cea1", "filename": "src/test/ui/borrowck/borrowck-consume-upcast-box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `b`\n    |\n LL |     consume(b);\n    |             - value moved here\n-LL |     consume(b); //~ ERROR use of moved value\n+LL |     consume(b);\n    |             ^ value used here after move\n    |\n    = note: move occurs because `b` has type `std::boxed::Box<(dyn Foo + std::marker::Send + 'static)>`, which does not implement the `Copy` trait"}, {"sha": "a2b42fa495e0eba0ca96c57ea2cdd958c428f60f", "filename": "src/test/ui/borrowck/borrowck-drop-from-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -7,7 +7,7 @@ LL |     match Some(42) {\n LL |         Some(_) if { drop(my_str); false } => {}\n    |                           ------ value moved here\n LL |         Some(_) => {}\n-LL |         None => { foo(my_str); } //~ ERROR [E0382]\n+LL |         None => { foo(my_str); }\n    |                       ^^^^^^ value used here after move\n \n error: aborting due to previous error"}, {"sha": "0cf6f3f2182e3aeb80e6439e29aebfe1a7a604ab", "filename": "src/test/ui/borrowck/borrowck-field-sensitivity.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-field-sensitivity.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `*x.b`\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n-LL |     drop(*x.b); //~ ERROR use of moved value: `*x.b`\n+LL |     drop(*x.b);\n    |          ^^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -13,7 +13,7 @@ error[E0382]: use of moved value: `*x.b`\n    |\n LL |     let y = A { a: 3, .. x };\n    |                          - value moved here\n-LL |     drop(*x.b); //~ ERROR use of moved value: `*x.b`\n+LL |     drop(*x.b);\n    |          ^^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -23,7 +23,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n-LL |     let p = &x.b; //~ ERROR use of moved value: `x.b`\n+LL |     let p = &x.b;\n    |              ^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -33,7 +33,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     let _y = A { a: 3, .. x };\n    |                           - value moved here\n-LL |     let p = &x.b; //~ ERROR use of moved value: `x.b`\n+LL |     let p = &x.b;\n    |              ^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -43,23 +43,23 @@ error[E0505]: cannot move out of `x.b` because it is borrowed\n    |\n LL |     let p = &x.b;\n    |              --- borrow of `x.b` occurs here\n-LL |     drop(x.b); //~ ERROR cannot move out of `x.b` because it is borrowed\n+LL |     drop(x.b);\n    |          ^^^ move out of `x.b` occurs here\n \n error[E0505]: cannot move out of `x.b` because it is borrowed\n   --> $DIR/borrowck-field-sensitivity.rs:41:27\n    |\n LL |     let p = &x.b;\n    |              --- borrow of `x.b` occurs here\n-LL |     let _y = A { a: 3, .. x }; //~ ERROR cannot move out of `x.b` because it is borrowed\n+LL |     let _y = A { a: 3, .. x };\n    |                           ^ move out of `x.b` occurs here\n \n error[E0499]: cannot borrow `x.a` as mutable more than once at a time\n   --> $DIR/borrowck-field-sensitivity.rs:48:18\n    |\n LL |     let p = &mut x.a;\n    |                  --- first mutable borrow occurs here\n-LL |     let q = &mut x.a; //~ ERROR cannot borrow `x.a` as mutable more than once at a time\n+LL |     let q = &mut x.a;\n    |                  ^^^ second mutable borrow occurs here\n ...\n LL | }\n@@ -70,7 +70,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n-LL |     drop(x.b);  //~ ERROR use of moved value: `x.b`\n+LL |     drop(x.b);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -80,7 +80,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     let _y = A { a: 3, .. x };\n    |                           - value moved here\n-LL |     drop(x.b);  //~ ERROR use of moved value: `x.b`\n+LL |     drop(x.b);\n    |          ^^^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -90,7 +90,7 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     drop(x.b);\n    |          --- value moved here\n-LL |     let _z = A { a: 3, .. x };  //~ ERROR use of moved value: `x.b`\n+LL |     let _z = A { a: 3, .. x };\n    |                           ^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n@@ -100,27 +100,27 @@ error[E0382]: use of moved value: `x.b`\n    |\n LL |     let _y = A { a: 3, .. x };\n    |                           - value moved here\n-LL |     let _z = A { a: 4, .. x };  //~ ERROR use of moved value: `x.b`\n+LL |     let _z = A { a: 4, .. x };\n    |                           ^ value used here after move\n    |\n    = note: move occurs because `x.b` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error[E0381]: use of possibly uninitialized variable: `x.a`\n   --> $DIR/borrowck-field-sensitivity.rs:82:10\n    |\n-LL |     drop(x.a); //~ ERROR use of possibly uninitialized variable: `x.a`\n+LL |     drop(x.a);\n    |          ^^^ use of possibly uninitialized `x.a`\n \n error[E0381]: use of possibly uninitialized variable: `x.a`\n   --> $DIR/borrowck-field-sensitivity.rs:88:14\n    |\n-LL |     let p = &x.a; //~ ERROR use of possibly uninitialized variable: `x.a`\n+LL |     let p = &x.a;\n    |              ^^^ use of possibly uninitialized `x.a`\n \n error[E0381]: use of possibly uninitialized variable: `x.b`\n   --> $DIR/borrowck-field-sensitivity.rs:95:10\n    |\n-LL |     drop(x.b); //~ ERROR use of possibly uninitialized variable: `x.b`\n+LL |     drop(x.b);\n    |          ^^^ use of possibly uninitialized `x.b`\n \n error: aborting due to 14 previous errors"}, {"sha": "d2ddf808d1195f6554991a6f91b240c3ce315202", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-c.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-c.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `local.inner` does not live long enough\n   --> $DIR/borrowck-fn-in-const-c.rs:17:17\n    |\n-LL |         return &local.inner; //~ ERROR does not live long enough\n+LL |         return &local.inner;\n    |                 ^^^^^^^^^^^ borrowed value does not live long enough\n LL |     }\n    |     - borrowed value only lives until here"}, {"sha": "fb53b13a58de98df5a5cf14c41330da4ced7a59b", "filename": "src/test/ui/borrowck/borrowck-for-loop-correct-cmt-for-pattern.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:12:9\n    |\n-LL |     for &a in x.iter() {    //~ ERROR cannot move out\n+LL |     for &a in x.iter() {\n    |         ^-\n    |         ||\n    |         |hint: to prevent move, use `ref a` or `ref mut a`\n@@ -10,7 +10,7 @@ LL |     for &a in x.iter() {    //~ ERROR cannot move out\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:18:9\n    |\n-LL |     for &a in &f.a {  //~ ERROR cannot move out\n+LL |     for &a in &f.a {\n    |         ^-\n    |         ||\n    |         |hint: to prevent move, use `ref a` or `ref mut a`\n@@ -19,7 +19,7 @@ LL |     for &a in &f.a {  //~ ERROR cannot move out\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:9\n    |\n-LL |     for &a in x.iter() {    //~ ERROR cannot move out\n+LL |     for &a in x.iter() {\n    |         ^-\n    |         ||\n    |         |hint: to prevent move, use `ref a` or `ref mut a`"}, {"sha": "a2d8908c4dd2ced62698b1a7b42d7ba74b25119e", "filename": "src/test/ui/borrowck/borrowck-for-loop-head-linkage.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -7,7 +7,7 @@ LL |     for &x in &vector {\n    |                |    immutable borrow ends here\n    |                immutable borrow occurs here\n LL |         let cap = vector.capacity();\n-LL |         vector.extend(repeat(0));      //~ ERROR cannot borrow\n+LL |         vector.extend(repeat(0));\n    |         ^^^^^^ mutable borrow occurs here\n \n error[E0502]: cannot borrow `vector` as mutable because it is also borrowed as immutable\n@@ -19,7 +19,7 @@ LL |     for &x in &vector {\n    |                |    immutable borrow ends here\n    |                immutable borrow occurs here\n ...\n-LL |         vector[1] = 5;   //~ ERROR cannot borrow\n+LL |         vector[1] = 5;\n    |         ^^^^^^ mutable borrow occurs here\n \n error: aborting due to 2 previous errors"}, {"sha": "1223e409d4df60b03144f18a0fd6eb056ceb5e15", "filename": "src/test/ui/borrowck/borrowck-if-no-else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-no-else.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-if-no-else.rs:5:9\n    |\n-LL |     foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     foo(x);\n    |         ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "d11f29b05f565b9ba0cea4c21ece28c36310c6d8", "filename": "src/test/ui/borrowck/borrowck-if-with-else.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-if-with-else.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-if-with-else.rs:10:9\n    |\n-LL |     foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     foo(x);\n    |         ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "6eeaf428c5f017035704048d52e2bcfaa9f16499", "filename": "src/test/ui/borrowck/borrowck-in-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0507]: cannot move out of captured outer variable in an `Fn` closure\n    |\n LL |     let x = Box::new(0);\n    |         - captured outer variable\n-LL |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n+LL |     Box::new(|| x)\n    |                 ^ cannot move out of captured outer variable in an `Fn` closure\n \n error: aborting due to previous error"}, {"sha": "82a602c6359c1046d2aa49e082c7bfe6668fff5d", "filename": "src/test/ui/borrowck/borrowck-init-in-called-fn-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-called-fn-expr.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `i`\n   --> $DIR/borrowck-init-in-called-fn-expr.rs:4:9\n    |\n-LL |         i //~ ERROR use of possibly uninitialized variable: `i`\n+LL |         i\n    |         ^ use of possibly uninitialized `i`\n \n error: aborting due to previous error"}, {"sha": "899739378524cf2bedca3fbf91b1a6fa9a1533b1", "filename": "src/test/ui/borrowck/borrowck-init-in-fn-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-in-fn-expr.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `i`\n   --> $DIR/borrowck-init-in-fn-expr.rs:4:9\n    |\n-LL |         i //~ ERROR use of possibly uninitialized variable: `i`\n+LL |         i\n    |         ^ use of possibly uninitialized `i`\n \n error: aborting due to previous error"}, {"sha": "9863ceb14240f78c048f8838b98b5cc37529a8bf", "filename": "src/test/ui/borrowck/borrowck-init-op-equal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-op-equal.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `v`\n   --> $DIR/borrowck-init-op-equal.rs:3:5\n    |\n-LL |     v += 1; //~ ERROR use of possibly uninitialized variable: `v`\n+LL |     v += 1;\n    |     ^^^^^^ use of possibly uninitialized `v`\n \n error: aborting due to previous error"}, {"sha": "80c4e0c80483d55a89f463e1737aeae5e0fde4dd", "filename": "src/test/ui/borrowck/borrowck-init-plus-equal.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-init-plus-equal.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `v`\n   --> $DIR/borrowck-init-plus-equal.rs:3:9\n    |\n-LL |     v = v + 1; //~ ERROR use of possibly uninitialized variable: `v`\n+LL |     v = v + 1;\n    |         ^ use of possibly uninitialized `v`\n \n error: aborting due to previous error"}, {"sha": "3b6339757c97954ab02a3e5cc6944709176db39d", "filename": "src/test/ui/borrowck/borrowck-insert-during-each.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0500]: closure requires unique access to `f` but `*f` is already borrowed\n    |\n LL |   f.foo(\n    |   - borrow occurs here\n-LL |         |a| { //~ ERROR closure requires unique access to `f`\n+LL |         |a| {\n    |         ^^^ closure construction occurs here\n LL |             f.n.insert(*a);\n    |             - borrow occurs due to use of `f` in closure"}, {"sha": "d9ad86b4f884131a3aeb6e74731ddb791efc7a98", "filename": "src/test/ui/borrowck/borrowck-issue-2657-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |       Some(ref _y) => {\n    |            ------ borrow of `x.0` occurs here\n-LL |         let _a = x; //~ ERROR cannot move\n+LL |         let _a = x;\n    |             ^^ move out of `x` occurs here\n \n error: aborting due to previous error"}, {"sha": "1314b1a14f44a0d04ddb0a0c8adac2e59b4df64c", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-issue-2657-2.rs:7:18\n    |\n-LL |         let _b = *y; //~ ERROR cannot move out\n+LL |         let _b = *y;\n    |                  ^^\n    |                  |\n    |                  cannot move out of borrowed content"}, {"sha": "a5462b41396854caa3062c1082c2c7d246ee198f", "filename": "src/test/ui/borrowck/borrowck-issue-48962.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -5,7 +5,7 @@ LL |     let mut src = &mut node;\n    |         ------- move occurs because `src` has type `&mut Node`, which does not implement the `Copy` trait\n LL |     {src};\n    |      --- value moved here\n-LL |     src.next = None; //~ ERROR use of moved value: `src` [E0382]\n+LL |     src.next = None;\n    |     ^^^^^^^^ value used here after move\n \n error[E0382]: use of moved value: `src`\n@@ -15,7 +15,7 @@ LL |     let mut src = &mut (22, 44);\n    |         ------- move occurs because `src` has type `&mut (i32, i32)`, which does not implement the `Copy` trait\n LL |     {src};\n    |      --- value moved here\n-LL |     src.0 = 66; //~ ERROR use of moved value: `src` [E0382]\n+LL |     src.0 = 66;\n    |     ^^^^^^^^^^ value used here after move\n \n error: aborting due to 2 previous errors"}, {"sha": "1acd47ce58bca8cb9eda3d53f3690fa19e18fa8e", "filename": "src/test/ui/borrowck/borrowck-lend-flow-if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immu\n LL |         _w = &v;\n    |               - immutable borrow occurs here\n LL |     }\n-LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |     borrow_mut(&mut *v);\n    |                     ^^ mutable borrow occurs here\n LL |     _w.use_ref();\n LL | }"}, {"sha": "e39fb6c860083fdf805059d787ff8ac9e4814042", "filename": "src/test/ui/borrowck/borrowck-lend-flow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*v` as mutable because `v` is also borrowed as immu\n    |\n LL |     let _w = &v;\n    |               - immutable borrow occurs here\n-LL |     borrow_mut(&mut *v); //~ ERROR cannot borrow\n+LL |     borrow_mut(&mut *v);\n    |                     ^^ mutable borrow occurs here\n LL |     _w.use_ref();\n LL | }"}, {"sha": "e6f0a691eca19662437afdb2ec38ab8ff175584d", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `v` because it is borrowed\n    |\n LL |     let w = &v;\n    |              - borrow of `v` occurs here\n-LL |     take(v); //~ ERROR cannot move out of `v` because it is borrowed\n+LL |     take(v);\n    |          ^ move out of `v` occurs here\n \n error: aborting due to previous error"}, {"sha": "c916b7efc08ec56f2b7e2ffd1740ee1d0e57a06f", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-mut-uniq.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-mut-uniq.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `v` as mutable because `*v` is also borrowed as immu\n    |\n LL |     borrow(&*v,\n    |             -- immutable borrow occurs here\n-LL |            |w| { //~ ERROR cannot borrow `v` as mutable\n+LL |            |w| {\n    |            ^^^ mutable borrow occurs here\n LL |             v = box 4;\n    |             - borrow occurs due to use of `v` in closure"}, {"sha": "c9d36a7f938016d712997fbc97c60c33770c003f", "filename": "src/test/ui/borrowck/borrowck-loan-of-static-data-issue-27616.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-of-static-data-issue-27616.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0506]: cannot assign to `*s` because it is borrowed\n LL |     let alias: &'static mut String = s;\n    |                                      - borrow of `*s` occurs here\n ...\n-LL |     *s = String::new(); //~ ERROR cannot assign\n+LL |     *s = String::new();\n    |     ^^^^^^^^^^^^^^^^^^ assignment to borrowed `*s` occurs here\n \n error: aborting due to previous error"}, {"sha": "d180e3e701c618d33dc47eb2ed01349c21277442", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr-overloaded-op.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0503]: cannot use `p` because it was mutably borrowed\n LL |     let q = &mut p;\n    |                  - borrow of `p` occurs here\n LL | \n-LL |     p + 3;  //~ ERROR cannot use `p`\n+LL |     p + 3;\n    |     ^ use of borrowed `p`\n \n error[E0502]: cannot borrow `p` as immutable because it is also borrowed as mutable\n@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `p` as immutable because it is also borrowed as muta\n LL |     let q = &mut p;\n    |                  - mutable borrow occurs here\n ...\n-LL |     p.times(3); //~ ERROR cannot borrow `p`\n+LL |     p.times(3);\n    |     ^ immutable borrow occurs here\n ...\n LL | }"}, {"sha": "56d33eff73f156973a57f9aef6c7ccb819fbfabf", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-loan-rcvr.rs:23:14\n    |\n-LL |     p.blockm(|| { //~ ERROR cannot borrow `p` as mutable\n+LL |     p.blockm(|| {\n    |     -        ^^ mutable borrow occurs here\n    |     |\n    |     immutable borrow occurs here\n@@ -15,7 +15,7 @@ error[E0502]: cannot borrow `p` as immutable because it is also borrowed as muta\n    |\n LL |     let l = &mut p;\n    |                  - mutable borrow occurs here\n-LL |     p.impurem(); //~ ERROR cannot borrow\n+LL |     p.impurem();\n    |     ^ immutable borrow occurs here\n ...\n LL | }"}, {"sha": "eea6a09f0fc5def2d23f6ace1b421a6968ccc493", "filename": "src/test/ui/borrowck/borrowck-loan-vec-content.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-vec-content.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immuta\n    |\n LL |         &v[0],\n    |          - immutable borrow occurs here\n-LL |         || { //~ ERROR cannot borrow `v` as mutable\n+LL |         || {\n    |         ^^ mutable borrow occurs here\n LL |             v[1] = 4;\n    |             - borrow occurs due to use of `v` in closure"}, {"sha": "d845a576b3dcdad1070d1c37c3b73eafe9cd4a30", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0507]: cannot move out of captured outer variable in an `FnMut` closure\n LL |     let bar: Box<_> = box 3;\n    |         --- captured outer variable\n LL |     let _g = to_fn_mut(|| {\n-LL |         let _h = to_fn_once(move || -> isize { *bar }); //~ ERROR cannot move out of\n+LL |         let _h = to_fn_once(move || -> isize { *bar });\n    |                             ^^^^^^^^^^^^^^^^ cannot move out of captured outer variable in an `FnMut` closure\n \n error: aborting due to previous error"}, {"sha": "8b0722916dbfe1a2dbb84976cbc2edef306e2e83", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,9 +1,9 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-error-with-note.rs:11:11\n    |\n-LL |     match *f {             //~ ERROR cannot move out of\n+LL |     match *f {\n    |           ^^ cannot move out of borrowed content\n-LL |                            //~| cannot move out\n+LL |\n LL |         Foo::Foo1(num1,\n    |                   ---- hint: to prevent move, use `ref num1` or `ref mut num1`\n LL |                   num2) => (),\n@@ -14,8 +14,8 @@ LL |         Foo::Foo2(num) => (),\n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-error-with-note.rs:30:9\n    |\n-LL | /         S {         //~ ERROR cannot move out of type `S`, which implements the `Drop` trait\n-LL | |         //~| cannot move out of here\n+LL | /         S {\n+LL | |\n LL | |             f: _s,\n    | |                -- hint: to prevent move, use `ref _s` or `ref mut _s`\n LL | |             g: _t\n@@ -26,9 +26,9 @@ LL | |         } => {}\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-error-with-note.rs:47:11\n    |\n-LL |     match a.a {           //~ ERROR cannot move out of\n+LL |     match a.a {\n    |           ^ cannot move out of borrowed content\n-LL |                           //~| cannot move out\n+LL |\n LL |         n => {\n    |         - hint: to prevent move, use `ref n` or `ref mut n`\n "}, {"sha": "5e2428ef4a3ed730a3bda6ba35f827570299927b", "filename": "src/test/ui/borrowck/borrowck-move-from-subpath-of-borrowed-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0505]: cannot move out of `*a` because it is borrowed\n LL |     let b = &a;\n    |              - borrow of `a` occurs here\n LL | \n-LL |     let z = *a; //~ ERROR: cannot move out of `*a` because it is borrowed\n+LL |     let z = *a;\n    |         ^ move out of `*a` occurs here\n \n error: aborting due to previous error"}, {"sha": "c23c5bb9c4c10df78ccc206b683290fff382ab42", "filename": "src/test/ui/borrowck/borrowck-move-from-unsafe-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of dereference of raw pointer\n   --> $DIR/borrowck-move-from-unsafe-ptr.rs:2:13\n    |\n-LL |     let y = *x; //~ ERROR cannot move out of dereference of raw pointer\n+LL |     let y = *x;\n    |             ^^\n    |             |\n    |             cannot move out of dereference of raw pointer"}, {"sha": "d3853832c92b14976af3420ab4621351e456d14b", "filename": "src/test/ui/borrowck/borrowck-move-mut-base-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `t0` because it is borrowed\n    |\n LL |     let p: &isize = &*t0; // Freezes `*t0`\n    |                      --- borrow of `*t0` occurs here\n-LL |     let t1 = t0;        //~ ERROR cannot move out of `t0`\n+LL |     let t1 = t0;\n    |         ^^ move out of `t0` occurs here\n \n error: aborting due to previous error"}, {"sha": "5ec0dabfde5878efae0f0da5885d686ee1d08552", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -5,9 +5,9 @@ LL |                   &[Foo { string: a },\n    |                    ^              - hint: to prevent move, use `ref a` or `ref mut a`\n    |  __________________|\n    | |\n-LL | |                 //~^ ERROR cannot move out of type `[Foo]`\n-LL | |                 //~| cannot move out\n-LL | |                 //~| to prevent move\n+LL | |\n+LL | |\n+LL | |\n LL | |                   Foo { string: b }] => {\n    | |_________________________________-__^ cannot move out of here\n    |                                   |"}, {"sha": "fd3deef6df5e04ebea332be8d2ea80f71b7b8c87", "filename": "src/test/ui/borrowck/borrowck-move-subcomponent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-subcomponent.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `a.x` because it is borrowed\n    |\n LL |   let pb = &a;\n    |             - borrow of `a` occurs here\n-LL |   let S { x: ax } = a;  //~ ERROR cannot move out\n+LL |   let S { x: ax } = a;\n    |              ^^ move out of `a.x` occurs here\n \n error: aborting due to previous error"}, {"sha": "f25b19e3d2ee8e19b7991c3a02e66e2109fb25aa", "filename": "src/test/ui/borrowck/borrowck-multiple-captures.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0504]: cannot move `x1` into closure because it is borrowed\n LL |     let p1 = &x1;\n    |               -- borrow of `x1` occurs here\n ...\n-LL |         drop(x1); //~ ERROR cannot move `x1` into closure because it is borrowed\n+LL |         drop(x1);\n    |              ^^ move into closure occurs here\n \n error[E0504]: cannot move `x2` into closure because it is borrowed\n@@ -13,7 +13,7 @@ error[E0504]: cannot move `x2` into closure because it is borrowed\n LL |     let p2 = &x2;\n    |               -- borrow of `x2` occurs here\n ...\n-LL |         drop(x2); //~ ERROR cannot move `x2` into closure because it is borrowed\n+LL |         drop(x2);\n    |              ^^ move into closure occurs here\n \n error[E0382]: capture of moved value: `x1`\n@@ -22,7 +22,7 @@ error[E0382]: capture of moved value: `x1`\n LL |     drop(x1);\n    |          -- value moved here\n ...\n-LL |         drop(x1); //~ ERROR capture of moved value: `x1`\n+LL |         drop(x1);\n    |              ^^ value captured here after move\n    |\n    = note: move occurs because `x1` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -33,7 +33,7 @@ error[E0382]: capture of moved value: `x2`\n LL |     drop(x2);\n    |          -- value moved here\n ...\n-LL |         drop(x2); //~ ERROR capture of moved value: `x2`\n+LL |         drop(x2);\n    |              ^^ value captured here after move\n    |\n    = note: move occurs because `x2` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -44,15 +44,15 @@ error[E0504]: cannot move `x` into closure because it is borrowed\n LL |     let p = &x;\n    |              - borrow of `x` occurs here\n LL |     thread::spawn(move|| {\n-LL |         drop(x); //~ ERROR cannot move `x` into closure because it is borrowed\n+LL |         drop(x);\n    |              ^ move into closure occurs here\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-multiple-captures.rs:36:14\n    |\n-LL |         drop(x); //~ ERROR cannot move `x` into closure because it is borrowed\n+LL |         drop(x);\n    |              - value moved here\n-LL |         drop(x); //~ ERROR use of moved value: `x`\n+LL |         drop(x);\n    |              ^ value used here after move\n    |\n    = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -63,17 +63,17 @@ error[E0382]: capture of moved value: `x`\n LL |     drop(x);\n    |          - value moved here\n LL |     thread::spawn(move|| {\n-LL |         drop(x); //~ ERROR capture of moved value: `x`\n+LL |         drop(x);\n    |              ^ value captured here after move\n    |\n    = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-multiple-captures.rs:46:14\n    |\n-LL |         drop(x); //~ ERROR capture of moved value: `x`\n+LL |         drop(x);\n    |              - value moved here\n-LL |         drop(x); //~ ERROR use of moved value: `x`\n+LL |         drop(x);\n    |              ^ value used here after move\n    |\n    = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait"}, {"sha": "aa3b39c395def78a46e769371b1e726a8e2714e0", "filename": "src/test/ui/borrowck/borrowck-mut-addr-of-imm-var.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-addr-of-imm-var.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow immutable local variable `x` as mutable\n    |\n LL |     let x: isize = 3;\n    |         - help: make this binding mutable: `mut x`\n-LL |     let y: &mut isize = &mut x; //~ ERROR cannot borrow\n+LL |     let y: &mut isize = &mut x;\n    |                              ^ cannot borrow mutably\n \n error: aborting due to previous error"}, {"sha": "fb73dbd45104be87b408db71ee5ab8445ecc0a86", "filename": "src/test/ui/borrowck/borrowck-mut-borrow-of-mut-base-ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `t0` as mutable because `*t0` is also borrowed as im\n    |\n LL |     let p: &isize = &*t0;     // Freezes `*t0`\n    |                      --- immutable borrow occurs here\n-LL |     let mut t2 = &mut t0;   //~ ERROR cannot borrow `t0`\n+LL |     let mut t2 = &mut t0;\n    |                       ^^ mutable borrow occurs here\n ...\n LL | }\n@@ -14,7 +14,7 @@ error[E0499]: cannot borrow `t0` as mutable more than once at a time\n    |\n LL |     let p: &mut isize = &mut *t0; // Claims `*t0`\n    |                              --- first mutable borrow occurs here\n-LL |     let mut t2 = &mut t0;       //~ ERROR cannot borrow `t0`\n+LL |     let mut t2 = &mut t0;\n    |                       ^^ second mutable borrow occurs here\n ...\n LL | }"}, {"sha": "416091920ad1f937519f98af6864b3c7d7f05e75", "filename": "src/test/ui/borrowck/borrowck-mut-slice-of-imm-vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-slice-of-imm-vec.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow immutable local variable `v` as mutable\n    |\n LL |     let v = vec![1, 2, 3];\n    |         - help: make this binding mutable: `mut v`\n-LL |     write(&mut v); //~ ERROR cannot borrow\n+LL |     write(&mut v);\n    |                ^ cannot borrow mutably\n \n error: aborting due to previous error"}, {"sha": "5fc169490c7e31d36c1ff3523ad1e0c2a18687bc", "filename": "src/test/ui/borrowck/borrowck-no-cycle-in-exchange-heap.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-no-cycle-in-exchange-heap.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `x` because it is borrowed\n    |\n LL |       Cycle::Node(ref mut y) => {\n    |                   --------- borrow of `x.0` occurs here\n-LL |         y.a = x; //~ ERROR cannot move out of\n+LL |         y.a = x;\n    |               ^ move out of `x` occurs here\n \n error: aborting due to previous error"}, {"sha": "8f6c8e072e541c64c649cbd7b1deb677306a2665", "filename": "src/test/ui/borrowck/borrowck-object-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immut\n    |\n LL |     let y = x.borrowed();\n    |             - immutable borrow occurs here\n-LL |     let z = x.mut_borrowed(); //~ ERROR cannot borrow\n+LL |     let z = x.mut_borrowed();\n    |             ^ mutable borrow occurs here\n LL |     y.use_ref();\n LL | }\n@@ -14,7 +14,7 @@ error[E0502]: cannot borrow `x` as mutable because `*x` is also borrowed as immu\n    |\n LL |     let y = x.borrowed();\n    |             - immutable borrow occurs here\n-LL |     let z = &mut x; //~ ERROR cannot borrow\n+LL |     let z = &mut x;\n    |                  ^ mutable borrow occurs here\n LL |     y.use_ref();\n LL | }"}, {"sha": "a2b69b187b932bc19d7aec04b8f31802222cbd84", "filename": "src/test/ui/borrowck/borrowck-or-init.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `i`\n   --> $DIR/borrowck-or-init.rs:5:20\n    |\n-LL |     println!(\"{}\", i); //~ ERROR use of possibly uninitialized variable: `i`\n+LL |     println!(\"{}\", i);\n    |                    ^ use of possibly uninitialized `i`\n \n error: aborting due to previous error"}, {"sha": "97223a2307c6b3643beed7a29c25af93cc41ee9e", "filename": "src/test/ui/borrowck/borrowck-overloaded-call.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-call.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `s` as immutable because it is also borrowed as muta\n    |\n LL |     let sp = &mut s;\n    |                   - mutable borrow occurs here\n-LL |     s(3);   //~ ERROR cannot borrow `s` as immutable because it is also borrowed as mutable\n+LL |     s(3);\n    |     ^ immutable borrow occurs here\n LL |     use_mut(sp);\n LL | }\n@@ -15,15 +15,15 @@ error[E0596]: cannot borrow immutable local variable `s` as mutable\n LL |     let s = SFnMut {\n    |         - help: make this binding mutable: `mut s`\n ...\n-LL |     s(3);   //~ ERROR cannot borrow immutable local variable `s` as mutable\n+LL |     s(3);\n    |     ^ cannot borrow mutably\n \n error[E0382]: use of moved value: `s`\n   --> $DIR/borrowck-overloaded-call.rs:75:5\n    |\n LL |     s(\" world\".to_string());\n    |     - value moved here\n-LL |     s(\" world\".to_string());    //~ ERROR use of moved value: `s`\n+LL |     s(\" world\".to_string());\n    |     ^ value used here after move\n    |\n    = note: move occurs because `s` has type `SFnOnce`, which does not implement the `Copy` trait"}, {"sha": "73cab8868eab68de3436f6daa2409c2be9912b2d", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-autoderef.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*f` as immutable because it is also borrowed as mut\n    |\n LL |     let p = &mut f[&s];\n    |                  - mutable borrow occurs here\n-LL |     let q = &f[&s]; //~ ERROR cannot borrow\n+LL |     let q = &f[&s];\n    |              ^ immutable borrow occurs here\n LL |     p.use_mut();\n LL | }\n@@ -14,7 +14,7 @@ error[E0499]: cannot borrow `*f` as mutable more than once at a time\n    |\n LL |     let p = &mut f[&s];\n    |                  - first mutable borrow occurs here\n-LL |     let q = &mut f[&s]; //~ ERROR cannot borrow\n+LL |     let q = &mut f[&s];\n    |                  ^ second mutable borrow occurs here\n LL |     p.use_mut();\n LL | }\n@@ -25,7 +25,7 @@ error[E0499]: cannot borrow `f.foo` as mutable more than once at a time\n    |\n LL |     let p = &mut f.foo[&s];\n    |                  ----- first mutable borrow occurs here\n-LL |     let q = &mut f.foo[&s]; //~ ERROR cannot borrow\n+LL |     let q = &mut f.foo[&s];\n    |                  ^^^^^ second mutable borrow occurs here\n LL |     p.use_mut();\n LL | }\n@@ -36,7 +36,7 @@ error[E0502]: cannot borrow `f.foo` as mutable because it is also borrowed as im\n    |\n LL |     let p = &f.foo[&s];\n    |              ----- immutable borrow occurs here\n-LL |     let q = &mut f.foo[&s]; //~ ERROR cannot borrow\n+LL |     let q = &mut f.foo[&s];\n    |                  ^^^^^ mutable borrow occurs here\n LL |     p.use_ref();\n LL | }\n@@ -47,31 +47,31 @@ error[E0506]: cannot assign to `f.foo` because it is borrowed\n    |\n LL |     let p = &f.foo[&s];\n    |              ----- borrow of `f.foo` occurs here\n-LL |     f.foo = g; //~ ERROR cannot assign\n+LL |     f.foo = g;\n    |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n \n error[E0506]: cannot assign to `*f` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:77:5\n    |\n LL |     let p = &f.foo[&s];\n    |              ----- borrow of `*f` occurs here\n-LL |     *f = g; //~ ERROR cannot assign\n+LL |     *f = g;\n    |     ^^^^^^ assignment to borrowed `*f` occurs here\n \n error[E0506]: cannot assign to `f.foo` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:83:5\n    |\n LL |     let p = &mut f.foo[&s];\n    |                  ----- borrow of `f.foo` occurs here\n-LL |     f.foo = g; //~ ERROR cannot assign\n+LL |     f.foo = g;\n    |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n \n error[E0506]: cannot assign to `*f` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:89:5\n    |\n LL |     let p = &mut f.foo[&s];\n    |                  ----- borrow of `*f` occurs here\n-LL |     *f = g; //~ ERROR cannot assign\n+LL |     *f = g;\n    |     ^^^^^^ assignment to borrowed `*f` occurs here\n \n error: aborting due to 8 previous errors"}, {"sha": "ea624018ad4c07a05f9822fa400efcdce8cd37f0", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-mut.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-mut.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let _bar1 = &mut foo.bar1;\n    |                      -------- first mutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                      ^^^^^^^^ second mutable borrow occurs here\n LL |     use_mut(_bar1);\n LL | }\n@@ -14,7 +14,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because it is also borrowed\n    |\n LL |     let _bar1 = &mut foo.bar1;\n    |                      -------- mutable borrow occurs here\n-LL |     let _bar2 = &foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &foo.bar1;\n    |                  ^^^^^^^^ immutable borrow occurs here\n LL |     use_mut(_bar1);\n LL | }\n@@ -25,7 +25,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because it is also borrowed as\n    |\n LL |     let _bar1 = &foo.bar1;\n    |                  -------- immutable borrow occurs here\n-LL |     let _bar2 = &mut foo.bar1;  //~ ERROR cannot borrow\n+LL |     let _bar2 = &mut foo.bar1;\n    |                      ^^^^^^^^ mutable borrow occurs here\n LL |     use_imm(_bar1);\n LL | }\n@@ -48,7 +48,7 @@ error[E0502]: cannot borrow `foo.bar1` as immutable because `foo.bar1.int1` is a\n    |\n LL |     let _bar1 = &mut foo.bar1.int1;\n    |                      ------------- mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n    |                  ^^^^^^^^ immutable borrow occurs here\n ...\n LL | }\n@@ -59,8 +59,8 @@ error[E0502]: cannot borrow `*foo` as immutable because `foo.bar1.int1` is also\n    |\n LL |     let _bar1 = &mut foo.bar1.int1;\n    |                      ------------- mutable borrow occurs here\n-LL |     let _foo1 = &foo.bar1; //~ ERROR cannot borrow\n-LL |     let _foo2 = &*foo; //~ ERROR cannot borrow\n+LL |     let _foo1 = &foo.bar1;\n+LL |     let _foo2 = &*foo;\n    |                  ^^^^ immutable borrow occurs here\n LL |     use_mut(_bar1);\n LL | }\n@@ -71,7 +71,7 @@ error[E0499]: cannot borrow `foo.bar1` as mutable more than once at a time\n    |\n LL |     let _bar1 = &mut foo.bar1.int1;\n    |                      ------------- first mutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                      ^^^^^^^^ second mutable borrow occurs here\n LL |     use_mut(_bar1);\n LL | }\n@@ -82,7 +82,7 @@ error[E0499]: cannot borrow `*foo` as mutable more than once at a time\n    |\n LL |     let _bar1 = &mut foo.bar1.int1;\n    |                      ------------- first mutable borrow occurs here\n-LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut *foo;\n    |                      ^^^^ second mutable borrow occurs here\n LL |     use_mut(_bar1);\n LL | }\n@@ -93,7 +93,7 @@ error[E0502]: cannot borrow `foo.bar1` as mutable because `foo.bar1.int1` is als\n    |\n LL |     let _bar1 = &foo.bar1.int1;\n    |                  ------------- immutable borrow occurs here\n-LL |     let _foo1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _foo1 = &mut foo.bar1;\n    |                      ^^^^^^^^ mutable borrow occurs here\n LL |     use_imm(_bar1);\n LL | }\n@@ -104,7 +104,7 @@ error[E0502]: cannot borrow `*foo` as mutable because `foo.bar1.int1` is also bo\n    |\n LL |     let _bar1 = &foo.bar1.int1;\n    |                  ------------- immutable borrow occurs here\n-LL |     let _foo2 = &mut *foo; //~ ERROR cannot borrow\n+LL |     let _foo2 = &mut *foo;\n    |                      ^^^^ mutable borrow occurs here\n LL |     use_imm(_bar1);\n LL | }\n@@ -115,7 +115,7 @@ error[E0596]: cannot borrow field `foo.bar1` of immutable binding as mutable\n    |\n LL | fn borrow_mut_from_imm(foo: &Foo) {\n    |                             ---- use `&mut Foo` here to make mutable\n-LL |     let _bar1 = &mut foo.bar1; //~ ERROR cannot borrow\n+LL |     let _bar1 = &mut foo.bar1;\n    |                      ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error: aborting due to 11 previous errors"}, {"sha": "6e0d2f699455ba2c08f14e88f74fbb925e59dee6", "filename": "src/test/ui/borrowck/borrowck-ref-mut-of-imm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-ref-mut-of-imm.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow field `(x as std::prelude::v1::Some).0` of immutable\n LL | fn destructure(x: Option<isize>) -> isize {\n    |                - help: make this binding mutable: `mut x`\n ...\n-LL |       Some(ref mut v) => *v //~ ERROR cannot borrow\n+LL |       Some(ref mut v) => *v\n    |            ^^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error: aborting due to previous error"}, {"sha": "3618a7cb2cd39d75f38a20dcb3200cb5ac2d5999", "filename": "src/test/ui/borrowck/borrowck-reinit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `x` (Ast)\n    |\n LL |     drop(x);\n    |          - value moved here\n-LL |     let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n+LL |     let _ = (1,x);\n    |                ^ value used here after move\n    |\n    = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n@@ -16,7 +16,7 @@ LL |     let mut x = Box::new(0);\n ...\n LL |     drop(x);\n    |          - value moved here\n-LL |     let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n+LL |     let _ = (1,x);\n    |                ^ value used here after move\n \n error: aborting due to 2 previous errors"}, {"sha": "79aec6c2edaad112c705a940527043998b2e92d9", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,8 +3,8 @@ error[E0502]: cannot borrow `x` as immutable because it is also borrowed as muta\n    |\n LL |     let y = &mut x;\n    |                  - mutable borrow occurs here\n-LL |     //~^ mutable borrow occurs here\n-LL |     let z = &x; //~ ERROR cannot borrow\n+LL |\n+LL |     let z = &x;\n    |              ^ immutable borrow occurs here\n ...\n LL | }\n@@ -15,8 +15,8 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n    |\n LL |             let y = &x;\n    |                      - immutable borrow occurs here\n-LL |             //~^ immutable borrow occurs here\n-LL |             let z = &mut x; //~ ERROR cannot borrow\n+LL |\n+LL |             let z = &mut x;\n    |                          ^ mutable borrow occurs here\n ...\n LL |         }\n@@ -27,8 +27,8 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n    |\n LL |         let y = &mut x;\n    |                      - first mutable borrow occurs here\n-LL |         //~^ first mutable borrow occurs here\n-LL |         let z = &mut x; //~ ERROR cannot borrow\n+LL |\n+LL |         let z = &mut x;\n    |                      ^ second mutable borrow occurs here\n ...\n LL |     };"}, {"sha": "4d4244ba5efad3554770b90e9f790493d05bd0a8", "filename": "src/test/ui/borrowck/borrowck-return-variable-on-stack-via-clone.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return-variable-on-stack-via-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return-variable-on-stack-via-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return-variable-on-stack-via-clone.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `x` does not live long enough\n   --> $DIR/borrowck-return-variable-on-stack-via-clone.rs:7:7\n    |\n-LL |     (&x).clone() //~ ERROR `x` does not live long enough\n+LL |     (&x).clone()\n    |       ^ borrowed value does not live long enough\n LL | }\n    | - borrowed value only lives until here"}, {"sha": "a2b65af5dbfcdda36fca8cf9a806c4c9d3fd7a50", "filename": "src/test/ui/borrowck/borrowck-return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-return.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-return.rs:3:12\n    |\n-LL |     return x; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     return x;\n    |            ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "f716ee68b00022448de4cf5641e460504e261b6d", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n    |\n LL |     if let [ref first, ref second, ..] = *s {\n    |                        ---------- immutable borrow occurs here\n-LL |         if let [_, ref mut  second2, ref mut third, ..] = *s { //~ERROR\n+LL |         if let [_, ref mut  second2, ref mut third, ..] = *s {\n    |                    ^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[first, second, second2, third]);\n    |                          ------ immutable borrow later used here\n@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n    |\n LL |     if let [.., ref fourth, ref third, _, ref first] = *s {\n    |                             --------- immutable borrow occurs here\n-LL |         if let [.., ref mut third2, _, _] = *s { //~ERROR\n+LL |         if let [.., ref mut third2, _, _] = *s {\n    |                     ^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[first, third, third2, fourth]);\n    |                          ----- immutable borrow later used here\n@@ -24,7 +24,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n    |                    ------------- immutable borrow occurs here\n ...\n-LL |         if let [_, ref mut from_begin1, ..] = *s { //~ERROR\n+LL |         if let [_, ref mut from_begin1, ..] = *s {\n    |                    ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin1, from_end1, from_end3, from_end4]);\n    |                                                      --------- immutable borrow later used here\n@@ -35,7 +35,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n    |                                   ------------- immutable borrow occurs here\n ...\n-LL |         if let [_, _, ref mut from_begin2, ..] = *s { //~ERROR\n+LL |         if let [_, _, ref mut from_begin2, ..] = *s {\n    |                       ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin2, from_end1, from_end3, from_end4]);\n    |                                           --------- immutable borrow later used here\n@@ -46,7 +46,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n    |                                   ------------- immutable borrow occurs here\n ...\n-LL |         if let [_, _, _, ref mut from_begin3, ..] = *s { //~ERROR\n+LL |         if let [_, _, _, ref mut from_begin3, ..] = *s {\n    |                          ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin3, from_end1, from_end3, from_end4]);\n    |                                           --------- immutable borrow later used here\n@@ -57,7 +57,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n LL |     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s {\n    |                                                  --------------- immutable borrow occurs here\n ...\n-LL |         if let [.., ref mut from_end2, _] = *s { //~ERROR\n+LL |         if let [.., ref mut from_end2, _] = *s {\n    |                     ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin0, from_begin1, from_begin3, from_end2]);\n    |                                             ----------- immutable borrow later used here\n@@ -68,7 +68,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n LL |     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s {\n    |                                                  --------------- immutable borrow occurs here\n ...\n-LL |         if let [.., ref mut from_end3, _,  _] = *s { //~ERROR\n+LL |         if let [.., ref mut from_end3, _,  _] = *s {\n    |                     ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin0, from_begin1, from_begin3, from_end3]);\n    |                                             ----------- immutable borrow later used here\n@@ -79,7 +79,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n LL |     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s {\n    |                              --------------- immutable borrow occurs here\n ...\n-LL |         if let [.., ref mut from_end4, _, _, _] = *s { //~ERROR\n+LL |         if let [.., ref mut from_end4, _, _, _] = *s {\n    |                     ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin0, from_begin1, from_begin3, from_end4]);\n    |                                ----------- immutable borrow later used here\n@@ -89,7 +89,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n    |\n LL |     if let [ref first, ref second, ..] = *s {\n    |                        ---------- immutable borrow occurs here\n-LL |         if let [_, ref mut tail..] = *s { //~ERROR\n+LL |         if let [_, ref mut tail..] = *s {\n    |                    ^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[first, second]);\n    |                          ------ immutable borrow later used here\n@@ -99,7 +99,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n    |\n LL |     if let [.., ref second, ref first] = *s {\n    |                 ---------- immutable borrow occurs here\n-LL |         if let [ref mut tail.., _] = *s { //~ERROR\n+LL |         if let [ref mut tail.., _] = *s {\n    |                 ^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[first, second]);\n    |                          ------ immutable borrow later used here\n@@ -109,7 +109,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n    |\n LL |     if let [_, _, _, ref s1..] = *s {\n    |                      ------ immutable borrow occurs here\n-LL |         if let [ref mut s2.., _, _, _] = *s { //~ERROR\n+LL |         if let [ref mut s2.., _, _, _] = *s {\n    |                 ^^^^^^^^^^ mutable borrow occurs here\n LL |             nop_subslice(s1);\n    |                          -- immutable borrow later used here"}, {"sha": "c291ed224eb3c632d6515e4adf60598aed1be88e", "filename": "src/test/ui/borrowck/borrowck-storage-dead.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-storage-dead.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,13 +1,13 @@\n error[E0381]: use of possibly uninitialized variable: `x` (Ast)\n   --> $DIR/borrowck-storage-dead.rs:18:17\n    |\n-LL |         let _ = x + 1; //~ERROR (Ast) [E0381]\n+LL |         let _ = x + 1;\n    |                 ^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x` (Mir)\n   --> $DIR/borrowck-storage-dead.rs:18:17\n    |\n-LL |         let _ = x + 1; //~ERROR (Ast) [E0381]\n+LL |         let _ = x + 1;\n    |                 ^ use of possibly uninitialized `x`\n \n error: aborting due to 2 previous errors"}, {"sha": "9efd249caf86b5e1a7d7e7acd94a5538deee164a", "filename": "src/test/ui/borrowck/borrowck-swap-mut-base-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `t0` as mutable because `*t0` is also borrowed as im\n    |\n LL |     let p: &isize = &*t0;     // Freezes `*t0`\n    |                      --- immutable borrow occurs here\n-LL |     swap(&mut t0, &mut t1); //~ ERROR cannot borrow `t0`\n+LL |     swap(&mut t0, &mut t1);\n    |               ^^ mutable borrow occurs here\n ...\n LL | }"}, {"sha": "2e0773aebc4ccdfb5e5eb2ce19c85acb319b6827", "filename": "src/test/ui/borrowck/borrowck-unboxed-closures.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-unboxed-closures.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `f` as immutable because it is also borrowed as muta\n    |\n LL |     let g = &mut f;\n    |                  - mutable borrow occurs here\n-LL |     f(1, 2);    //~ ERROR cannot borrow `f` as immutable\n+LL |     f(1, 2);\n    |     ^ immutable borrow occurs here\n LL |     use_mut(g);\n LL | }\n@@ -14,15 +14,15 @@ error[E0596]: cannot borrow immutable argument `f` as mutable\n    |\n LL | fn b<F:FnMut(isize, isize) -> isize>(f: F) {\n    |                                      - help: make this binding mutable: `mut f`\n-LL |     f(1, 2);    //~ ERROR cannot borrow immutable argument\n+LL |     f(1, 2);\n    |     ^ cannot borrow mutably\n \n error[E0382]: use of moved value: `f`\n   --> $DIR/borrowck-unboxed-closures.rs:12:5\n    |\n LL |     f(1, 2);\n    |     - value moved here\n-LL |     f(1, 2);    //~ ERROR use of moved value\n+LL |     f(1, 2);\n    |     ^ value used here after move\n    |\n    = note: move occurs because `f` has type `F`, which does not implement the `Copy` trait"}, {"sha": "2d0b21dd0d6fbe19b3619c03a7cf10ae2666ea1f", "filename": "src/test/ui/borrowck/borrowck-uninit-after-item.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-after-item.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `bar`\n   --> $DIR/borrowck-uninit-after-item.rs:4:9\n    |\n-LL |     baz(bar); //~ ERROR use of possibly uninitialized variable: `bar`\n+LL |     baz(bar);\n    |         ^^^ use of possibly uninitialized `bar`\n \n error: aborting due to previous error"}, {"sha": "163395e42d252ceb80a089052416197d4dcd0218", "filename": "src/test/ui/borrowck/borrowck-uninit-in-assignop.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-in-assignop.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,61 +1,61 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:6:5\n    |\n-LL |     x += 1; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x += 1;\n    |     ^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:9:5\n    |\n-LL |     x -= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x -= 1;\n    |     ^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:12:5\n    |\n-LL |     x *= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x *= 1;\n    |     ^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:15:5\n    |\n-LL |     x /= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x /= 1;\n    |     ^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:18:5\n    |\n-LL |     x %= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x %= 1;\n    |     ^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:21:5\n    |\n-LL |     x ^= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x ^= 1;\n    |     ^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:24:5\n    |\n-LL |     x &= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x &= 1;\n    |     ^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:27:5\n    |\n-LL |     x |= 1; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x |= 1;\n    |     ^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:30:5\n    |\n-LL |     x <<= 1;    //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x <<= 1;\n    |     ^^^^^^^ use of possibly uninitialized `x`\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit-in-assignop.rs:33:5\n    |\n-LL |     x >>= 1;    //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     x >>= 1;\n    |     ^^^^^^^ use of possibly uninitialized `x`\n \n error: aborting due to 10 previous errors"}, {"sha": "5db9c1b250cc25b7333c174dccd8ccdbc178236b", "filename": "src/test/ui/borrowck/borrowck-uninit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-uninit.rs:5:9\n    |\n-LL |     foo(x); //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     foo(x);\n    |         ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "71fae6f8d63b8db658a06632f8ea87245e70a737", "filename": "src/test/ui/borrowck/borrowck-union-borrow-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0503]: cannot use `u.c` because it was mutably borrowed\n    |\n LL |             let ra = &mut u.s.a;\n    |                           ----- borrow of `u.s.a` occurs here\n-LL |             let b = u.c; //~ ERROR cannot use `u.c` because it was mutably borrowed\n+LL |             let b = u.c;\n    |                 ^ use of borrowed `u.s.a`\n \n error: aborting due to previous error"}, {"sha": "1cda7e499298a419b24f7bef485cbce95570a570", "filename": "src/test/ui/borrowck/borrowck-union-borrow.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `u.a` as mutable because it is also borrowed as immu\n    |\n LL |             let ra = &u.a;\n    |                       --- immutable borrow occurs here\n-LL |             let rma = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable because it is also borrowed as immutable\n+LL |             let rma = &mut u.a;\n    |                            ^^^ mutable borrow occurs here\n LL |             drop(ra);\n LL |         }\n@@ -14,15 +14,15 @@ error[E0506]: cannot assign to `u.a` because it is borrowed\n    |\n LL |             let ra = &u.a;\n    |                       --- borrow of `u.a` occurs here\n-LL |             u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n+LL |             u.a = 1;\n    |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n \n error[E0502]: cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n   --> $DIR/borrowck-union-borrow.rs:46:28\n    |\n LL |             let ra = &u.a;\n    |                       --- immutable borrow occurs here (via `u.a`)\n-LL |             let rmb = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable because `u` is also borrowed as immutable (via `u.a`)\n+LL |             let rmb = &mut u.b;\n    |                            ^^^ mutable borrow of `u.b` -- which overlaps with `u.a` -- occurs here\n LL |             drop(ra);\n LL |         }\n@@ -33,15 +33,15 @@ error[E0506]: cannot assign to `u.b` because it is borrowed\n    |\n LL |             let ra = &u.a;\n    |                       --- borrow of `u.b` occurs here\n-LL |             u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n+LL |             u.b = 1;\n    |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n \n error[E0502]: cannot borrow `u.a` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-union-borrow.rs:57:23\n    |\n LL |             let rma = &mut u.a;\n    |                            --- mutable borrow occurs here\n-LL |             let ra = &u.a; //~ ERROR cannot borrow `u.a` as immutable because it is also borrowed as mutable\n+LL |             let ra = &u.a;\n    |                       ^^^ immutable borrow occurs here\n LL |             drop(rma);\n LL |         }\n@@ -52,15 +52,15 @@ error[E0503]: cannot use `u.a` because it was mutably borrowed\n    |\n LL |             let ra = &mut u.a;\n    |                           --- borrow of `u.a` occurs here\n-LL |             let a = u.a; //~ ERROR cannot use `u.a` because it was mutably borrowed\n+LL |             let a = u.a;\n    |                 ^ use of borrowed `u.a`\n \n error[E0499]: cannot borrow `u.a` as mutable more than once at a time\n   --> $DIR/borrowck-union-borrow.rs:67:29\n    |\n LL |             let rma = &mut u.a;\n    |                            --- first mutable borrow occurs here\n-LL |             let rma2 = &mut u.a; //~ ERROR cannot borrow `u.a` as mutable more than once at a time\n+LL |             let rma2 = &mut u.a;\n    |                             ^^^ second mutable borrow occurs here\n LL |             drop(rma);\n LL |         }\n@@ -71,15 +71,15 @@ error[E0506]: cannot assign to `u.a` because it is borrowed\n    |\n LL |             let rma = &mut u.a;\n    |                            --- borrow of `u.a` occurs here\n-LL |             u.a = 1; //~ ERROR cannot assign to `u.a` because it is borrowed\n+LL |             u.a = 1;\n    |             ^^^^^^^ assignment to borrowed `u.a` occurs here\n \n error[E0502]: cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n   --> $DIR/borrowck-union-borrow.rs:78:23\n    |\n LL |             let rma = &mut u.a;\n    |                            --- mutable borrow occurs here (via `u.a`)\n-LL |             let rb = &u.b; //~ ERROR cannot borrow `u` (via `u.b`) as immutable because `u` is also borrowed as mutable (via `u.a`)\n+LL |             let rb = &u.b;\n    |                       ^^^ immutable borrow of `u.b` -- which overlaps with `u.a` -- occurs here\n LL |             drop(rma);\n LL |         }\n@@ -90,15 +90,15 @@ error[E0503]: cannot use `u.b` because it was mutably borrowed\n    |\n LL |             let ra = &mut u.a;\n    |                           --- borrow of `u.a` occurs here\n-LL |             let b = u.b; //~ ERROR cannot use `u.b` because it was mutably borrowed\n+LL |             let b = u.b;\n    |                 ^ use of borrowed `u.a`\n \n error[E0499]: cannot borrow `u` (via `u.b`) as mutable more than once at a time\n   --> $DIR/borrowck-union-borrow.rs:89:29\n    |\n LL |             let rma = &mut u.a;\n    |                            --- first mutable borrow occurs here (via `u.a`)\n-LL |             let rmb2 = &mut u.b; //~ ERROR cannot borrow `u` (via `u.b`) as mutable more than once at a time\n+LL |             let rmb2 = &mut u.b;\n    |                             ^^^ second mutable borrow occurs here (via `u.b`)\n LL |             drop(rma);\n LL |         }\n@@ -109,7 +109,7 @@ error[E0506]: cannot assign to `u.b` because it is borrowed\n    |\n LL |             let rma = &mut u.a;\n    |                            --- borrow of `u.b` occurs here\n-LL |             u.b = 1; //~ ERROR cannot assign to `u.b` because it is borrowed\n+LL |             u.b = 1;\n    |             ^^^^^^^ assignment to borrowed `u.b` occurs here\n \n error: aborting due to 12 previous errors"}, {"sha": "04e67fcb92971799969394d255988c769eb9e511", "filename": "src/test/ui/borrowck/borrowck-union-move-assign.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move-assign.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `u.a`\n    |\n LL |             let a = u.a;\n    |                 - value moved here\n-LL |             let a = u.a; //~ ERROR use of moved value: `u.a`\n+LL |             let a = u.a;\n    |                 ^ value used here after move\n    |\n    = note: move occurs because `u.a` has type `A`, which does not implement the `Copy` trait"}, {"sha": "4ce372aedc3622e637cf8f351b9ab4fcfae21f65", "filename": "src/test/ui/borrowck/borrowck-union-move.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-move.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `u.n1`\n    |\n LL |             let a = u.n1;\n    |                 - value moved here\n-LL |             let a = u.n1; //~ ERROR use of moved value: `u.n1`\n+LL |             let a = u.n1;\n    |                 ^ value used here after move\n    |\n    = note: move occurs because `u.n1` has type `NonCopy`, which does not implement the `Copy` trait\n@@ -13,7 +13,7 @@ error[E0382]: use of partially moved value: `u`\n    |\n LL |             let a = u.n1;\n    |                 - value moved here\n-LL |             let a = u; //~ ERROR use of partially moved value: `u`\n+LL |             let a = u;\n    |                 ^ value used here after move\n    |\n    = note: move occurs because `u.n2` has type `[type error]`, which does not implement the `Copy` trait\n@@ -23,7 +23,7 @@ error[E0382]: use of moved value: `u.n2`\n    |\n LL |             let a = u.n1;\n    |                 - value moved here\n-LL |             let a = u.n2; //~ ERROR use of moved value: `u.n2`\n+LL |             let a = u.n2;\n    |                 ^ value used here after move\n    |\n    = note: move occurs because `u.n2` has type `[type error]`, which does not implement the `Copy` trait\n@@ -33,7 +33,7 @@ error[E0382]: use of moved value: `u.n`\n    |\n LL |             let a = u.n;\n    |                 - value moved here\n-LL |             let a = u.n; //~ ERROR use of moved value: `u.n`\n+LL |             let a = u.n;\n    |                 ^ value used here after move\n    |\n    = note: move occurs because `u.n` has type `NonCopy`, which does not implement the `Copy` trait\n@@ -43,7 +43,7 @@ error[E0382]: use of moved value: `u.c`\n    |\n LL |             let a = u.n;\n    |                 - value moved here\n-LL |             let a = u.c; //~ ERROR use of moved value: `u.c`\n+LL |             let a = u.c;\n    |                 ^ value used here after move\n    |\n    = note: move occurs because `u.c` has type `[type error]`, which does not implement the `Copy` trait\n@@ -53,7 +53,7 @@ error[E0382]: use of partially moved value: `u`\n    |\n LL |             let a = u.n;\n    |                 - value moved here\n-LL |             let a = u; //~ ERROR use of partially moved value: `u`\n+LL |             let a = u;\n    |                 ^ value used here after move\n    |\n    = note: move occurs because `u.c` has type `[type error]`, which does not implement the `Copy` trait"}, {"sha": "6a1401ff32bbc283acde87cd330c6e340d2d64d9", "filename": "src/test/ui/borrowck/borrowck-union-uninitialized.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-uninitialized.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,13 +1,13 @@\n error[E0381]: use of possibly uninitialized variable: `s.a`\n   --> $DIR/borrowck-union-uninitialized.rs:15:13\n    |\n-LL |         let sa = s.a; //~ ERROR use of possibly uninitialized variable: `s.a`\n+LL |         let sa = s.a;\n    |             ^^ use of possibly uninitialized `s.a`\n \n error[E0381]: use of possibly uninitialized variable: `u.a`\n   --> $DIR/borrowck-union-uninitialized.rs:16:13\n    |\n-LL |         let ua = u.a; //~ ERROR use of possibly uninitialized variable: `u.a`\n+LL |         let ua = u.a;\n    |             ^^ use of possibly uninitialized `u.a`\n \n error: aborting due to 2 previous errors"}, {"sha": "00fd77ed718af5a27d50b06995e2cfa2505c7569", "filename": "src/test/ui/borrowck/borrowck-uniq-via-lend.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mu\n    |\n LL |     let w = &mut v;\n    |                  - mutable borrow occurs here\n-LL |     borrow(&*v); //~ ERROR cannot borrow `*v`\n+LL |     borrow(&*v);\n    |             ^^ immutable borrow occurs here\n LL |     w.use_mut();\n LL | }\n@@ -14,7 +14,7 @@ error[E0502]: cannot borrow `*v` as immutable because `v` is also borrowed as mu\n    |\n LL |     x = &mut v;\n    |              - mutable borrow occurs here\n-LL |     borrow(&*v); //~ ERROR cannot borrow `*v`\n+LL |     borrow(&*v);\n    |             ^^ immutable borrow occurs here\n LL |     x.use_mut();\n LL | }"}, {"sha": "5c1d726917641bb2d281345c4056155b5044a0f1", "filename": "src/test/ui/borrowck/borrowck-use-mut-borrow.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-use-mut-borrow.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,71 +3,71 @@ error[E0503]: cannot use `x` because it was mutably borrowed\n    |\n LL |     let p = &mut x;\n    |                  - borrow of `x` occurs here\n-LL |     drop(x); //~ ERROR cannot use `x` because it was mutably borrowed\n+LL |     drop(x);\n    |          ^ use of borrowed `x`\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:18:10\n    |\n LL |     let p = &mut x.a;\n    |                  --- borrow of `x.a` occurs here\n-LL |     drop(x); //~ ERROR cannot use `x` because it was mutably borrowed\n+LL |     drop(x);\n    |          ^ use of borrowed `x.a`\n \n error[E0503]: cannot use `x.a` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:25:10\n    |\n LL |     let p = &mut x;\n    |                  - borrow of `x` occurs here\n-LL |     drop(x.a); //~ ERROR cannot use `x.a` because it was mutably borrowed\n+LL |     drop(x.a);\n    |          ^^^ use of borrowed `x`\n \n error[E0503]: cannot use `x.a` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:32:10\n    |\n LL |     let p = &mut x.a;\n    |                  --- borrow of `x.a` occurs here\n-LL |     drop(x.a); //~ ERROR cannot use `x.a` because it was mutably borrowed\n+LL |     drop(x.a);\n    |          ^^^ use of borrowed `x.a`\n \n error[E0503]: cannot use `x.a` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:39:26\n    |\n LL |     let p = &mut x;\n    |                  - borrow of `x` occurs here\n-LL |     let y = A { b: 3, .. x }; //~ ERROR cannot use `x.a` because it was mutably borrowed\n+LL |     let y = A { b: 3, .. x };\n    |                          ^ use of borrowed `x`\n \n error[E0503]: cannot use `x.a` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:47:26\n    |\n LL |     let p = &mut x.a;\n    |                  --- borrow of `x.a` occurs here\n-LL |     let y = A { b: 3, .. x }; //~ ERROR cannot use `x.a` because it was mutably borrowed\n+LL |     let y = A { b: 3, .. x };\n    |                          ^ use of borrowed `x.a`\n \n error[E0503]: cannot use `*x` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:55:10\n    |\n LL |     let p = &mut x;\n    |                  - borrow of `x` occurs here\n-LL |     drop(*x); //~ ERROR cannot use `*x` because it was mutably borrowed\n+LL |     drop(*x);\n    |          ^^ use of borrowed `x`\n \n error[E0503]: cannot use `*x.b` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:62:10\n    |\n LL |     let p = &mut x;\n    |                  - borrow of `x` occurs here\n-LL |     drop(*x.b); //~ ERROR cannot use `*x.b` because it was mutably borrowed\n+LL |     drop(*x.b);\n    |          ^^^^ use of borrowed `x`\n \n error[E0503]: cannot use `*x.b` because it was mutably borrowed\n   --> $DIR/borrowck-use-mut-borrow.rs:69:10\n    |\n LL |     let p = &mut x.b;\n    |                  --- borrow of `x.b` occurs here\n-LL |     drop(*x.b); //~ ERROR cannot use `*x.b` because it was mutably borrowed\n+LL |     drop(*x.b);\n    |          ^^^^ use of borrowed `x.b`\n \n error: aborting due to 9 previous errors"}, {"sha": "b0eaee790743efba503ce81d79f9c0c6750c8fe7", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-element-loan.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-element-loan.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `vec` does not live long enough\n   --> $DIR/borrowck-vec-pattern-element-loan.rs:5:26\n    |\n-LL |     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n+LL |     let vec: &[isize] = &vec;\n    |                          ^^^ borrowed value does not live long enough\n ...\n LL | }\n@@ -16,7 +16,7 @@ LL | fn a<'a>() -> &'a [isize] {\n error[E0597]: `vec` does not live long enough\n   --> $DIR/borrowck-vec-pattern-element-loan.rs:15:26\n    |\n-LL |     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n+LL |     let vec: &[isize] = &vec;\n    |                          ^^^ borrowed value does not live long enough\n ...\n LL | }\n@@ -31,7 +31,7 @@ LL | fn b<'a>() -> &'a [isize] {\n error[E0597]: `vec` does not live long enough\n   --> $DIR/borrowck-vec-pattern-element-loan.rs:25:26\n    |\n-LL |     let vec: &[isize] = &vec; //~ ERROR does not live long enough\n+LL |     let vec: &[isize] = &vec;\n    |                          ^^^ borrowed value does not live long enough\n ...\n LL | }"}, {"sha": "1ce6a3bddce0950dc54ee0256fa847adc1104d70", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-loan-from-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `v` as mutable more than once at a time\n LL |     let vb: &mut [isize] = &mut v;\n    |                                 - first mutable borrow occurs here\n ...\n-LL |             v.push(tail[0] + tail[1]); //~ ERROR cannot borrow\n+LL |             v.push(tail[0] + tail[1]);\n    |             ^ second mutable borrow occurs here\n ...\n LL | }"}, {"sha": "0e3f514c662abff9735b00ba76f109808818d5fd", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,36 +3,36 @@ error[E0506]: cannot assign to `vec[..]` because it is borrowed\n    |\n LL |         [box ref _a, _, _] => {\n    |              ------ borrow of `vec[..]` occurs here\n-LL |         //~^ borrow of `vec[..]` occurs here\n-LL |             vec[0] = box 4; //~ ERROR cannot assign\n+LL |\n+LL |             vec[0] = box 4;\n    |             ^^^^^^^^^^^^^^ assignment to borrowed `vec[..]` occurs here\n \n error[E0506]: cannot assign to `vec[..]` because it is borrowed\n   --> $DIR/borrowck-vec-pattern-nesting.rs:23:13\n    |\n LL |         &mut [ref _b..] => {\n    |               ------ borrow of `vec[..]` occurs here\n-LL |         //~^ borrow of `vec[..]` occurs here\n-LL |             vec[0] = box 4; //~ ERROR cannot assign\n+LL |\n+LL |             vec[0] = box 4;\n    |             ^^^^^^^^^^^^^^ assignment to borrowed `vec[..]` occurs here\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:34:14\n    |\n-LL |           &mut [_a, //~ ERROR cannot move out\n+LL |           &mut [_a,\n    |                ^-- hint: to prevent move, use `ref _a` or `ref mut _a`\n    |  ______________|\n    | |\n-LL | |             //~| cannot move out\n-LL | |             //~| to prevent move\n+LL | |\n+LL | |\n LL | |             ..\n LL | |         ] => {\n    | |_________^ cannot move out of here\n \n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:47:13\n    |\n-LL |     let a = vec[0]; //~ ERROR cannot move out\n+LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n@@ -41,9 +41,9 @@ LL |     let a = vec[0]; //~ ERROR cannot move out\n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:55:14\n    |\n-LL |           &mut [ //~ ERROR cannot move out\n+LL |           &mut [\n    |  ______________^\n-LL | |         //~^ cannot move out\n+LL | |\n LL | |          _b] => {}\n    | |__________--^ cannot move out of here\n    |            |\n@@ -52,7 +52,7 @@ LL | |          _b] => {}\n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:60:13\n    |\n-LL |     let a = vec[0]; //~ ERROR cannot move out\n+LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here\n@@ -61,7 +61,7 @@ LL |     let a = vec[0]; //~ ERROR cannot move out\n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:68:14\n    |\n-LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n+LL |         &mut [_a, _b, _c] => {}\n    |              ^--^^--^^--^\n    |              ||   |   |\n    |              ||   |   ...and here (use `ref _c` or `ref mut _c`)\n@@ -72,7 +72,7 @@ LL |         &mut [_a, _b, _c] => {}  //~ ERROR cannot move out\n error[E0508]: cannot move out of type `[std::boxed::Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:72:13\n    |\n-LL |     let a = vec[0]; //~ ERROR cannot move out\n+LL |     let a = vec[0];\n    |             ^^^^^^\n    |             |\n    |             cannot move out of here"}, {"sha": "0a5f773159f475c7682345dde11f846ba2a3db23", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-tail-element-loan.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-tail-element-loan.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: `vec` does not live long enough\n   --> $DIR/borrowck-vec-pattern-tail-element-loan.rs:5:26\n    |\n-LL |     let vec: &[isize] = &vec; //~ ERROR `vec` does not live long enough\n+LL |     let vec: &[isize] = &vec;\n    |                          ^^^ borrowed value does not live long enough\n ...\n LL | }"}, {"sha": "55969b8fb1ffa49caffcf02c0cef806e7f8c20f9", "filename": "src/test/ui/borrowck/borrowck-while-break.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `v`\n   --> $DIR/borrowck-while-break.rs:7:20\n    |\n-LL |     println!(\"{}\", v); //~ ERROR use of possibly uninitialized variable: `v`\n+LL |     println!(\"{}\", v);\n    |                    ^ use of possibly uninitialized `v`\n \n error: aborting due to previous error"}, {"sha": "06deae345ab603d2cbbda03bbcb3097a2cf16d06", "filename": "src/test/ui/borrowck/borrowck-while-cond.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-cond.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-while-cond.rs:3:11\n    |\n-LL |     while x { } //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     while x { }\n    |           ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "60622d648dd23c059ff58815947b9fd490ef6eac", "filename": "src/test/ui/borrowck/borrowck-while.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/borrowck-while.rs:4:12\n    |\n-LL |     return x; //~ ERROR use of possibly uninitialized variable: `x`\n+LL |     return x;\n    |            ^ use of possibly uninitialized `x`\n \n error: aborting due to previous error"}, {"sha": "6e6efc67061012d5461bad662f290757c6cf66b4", "filename": "src/test/ui/borrowck/index-mut-help-with-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/index-mut-help-with-impl.rs:9:5\n    |\n-LL |     Index::index(&v, 1..2).make_ascii_uppercase(); //~ ERROR\n+LL |     Index::index(&v, 1..2).make_ascii_uppercase();\n    |     ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error"}, {"sha": "434dd11eea2e9d039d3c20bacea208e60251a0a6", "filename": "src/test/ui/borrowck/index-mut-help.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,23 +1,23 @@\n error[E0596]: cannot borrow immutable indexed content as mutable\n   --> $DIR/index-mut-help.rs:11:5\n    |\n-LL |     map[\"peter\"].clear();           //~ ERROR\n+LL |     map[\"peter\"].clear();\n    |     ^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`\n \n error[E0594]: cannot assign to immutable indexed content\n   --> $DIR/index-mut-help.rs:12:5\n    |\n-LL |     map[\"peter\"] = \"0\".to_string(); //~ ERROR\n+LL |     map[\"peter\"] = \"0\".to_string();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`\n \n error[E0596]: cannot borrow immutable indexed content as mutable\n   --> $DIR/index-mut-help.rs:13:18\n    |\n-LL |     let _ = &mut map[\"peter\"];      //~ ERROR\n+LL |     let _ = &mut map[\"peter\"];\n    |                  ^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `std::collections::HashMap<&str, std::string::String>`"}, {"sha": "b09028e6c7c4ec96431497cd3f074cedc0b391a8", "filename": "src/test/ui/borrowck/issue-47215-ice-from-drop-elab.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-47215-ice-from-drop-elab.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of thread-local static item\n   --> $DIR/issue-47215-ice-from-drop-elab.rs:17:21\n    |\n-LL |         let mut x = X; //~ ERROR cannot move out of thread-local static item [E0507]\n+LL |         let mut x = X;\n    |                     ^\n    |                     |\n    |                     cannot move out of thread-local static item"}, {"sha": "8f2a78672c6ef8f1718393731911d09e1721f6b6", "filename": "src/test/ui/borrowck/issue-51117.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `*bar` as mutable more than once at a time\n    |\n LL |         Some(baz) => {\n    |              --- first mutable borrow occurs here\n-LL |             bar.take(); //~ ERROR cannot borrow\n+LL |             bar.take();\n    |             ^^^ second mutable borrow occurs here\n ...\n LL |     }"}, {"sha": "e3216f5d33f986d7f7c268cacef4306beecce7fc", "filename": "src/test/ui/borrowck/issue-52713-bug.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-52713-bug.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0506]: cannot assign to `x` because it is borrowed\n LL |     let y = &x;\n    |             -- borrow of `x` occurs here\n ...\n-LL |     x += 1; //~ ERROR\n+LL |     x += 1;\n    |     ^^^^^^ assignment to borrowed `x` occurs here\n LL |     println!(\"{}\", y);\n    |                    - borrow later used here"}, {"sha": "6a12016b2a5e3b62ea17f37ee673f340e1ae5468", "filename": "src/test/ui/borrowck/issue-54597-reject-move-out-of-borrow-via-pat.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54597-reject-move-out-of-borrow-via-pat.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/issue-54597-reject-move-out-of-borrow-via-pat.rs:16:13\n    |\n-LL |             *array //~ ERROR cannot move out of borrowed content\n+LL |             *array\n    |             ^^^^^^\n    |             |\n    |             cannot move out of borrowed content"}, {"sha": "32b3ef72d8bda611f94bed13e278400efc920a91", "filename": "src/test/ui/borrowck/issue-7573.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error: borrowed data cannot be stored outside of its closure\n    |\n LL |     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n    |                               - cannot infer an appropriate lifetime...\n-LL |         //~^ NOTE cannot infer an appropriate lifetime\n+LL |\n LL |     let push_id = |installed_id: &CrateId| {\n    |         -------   ------------------------ borrowed data cannot outlive this closure\n    |         |"}, {"sha": "478d586d03e5dcb99b3e258620c8f7633917dbd6", "filename": "src/test/ui/borrowck/mut-borrow-in-loop.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:10:25\n    |\n-LL |             (self.func)(arg) //~ ERROR cannot borrow\n+LL |             (self.func)(arg)\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n LL |         }\n LL |     }\n@@ -10,7 +10,7 @@ LL |     }\n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:16:25\n    |\n-LL |             (self.func)(arg) //~ ERROR cannot borrow\n+LL |             (self.func)(arg)\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n LL |         }\n LL |     }\n@@ -19,7 +19,7 @@ LL |     }\n error[E0499]: cannot borrow `*arg` as mutable more than once at a time\n   --> $DIR/mut-borrow-in-loop.rs:23:25\n    |\n-LL |             (self.func)(arg) //~ ERROR cannot borrow\n+LL |             (self.func)(arg)\n    |                         ^^^ mutable borrow starts here in previous iteration of loop\n LL |         }\n LL |     }"}, {"sha": "4653c353cad643fb6ec4471b8c44af7e1949d4a8", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,11 +1,11 @@\n error[E0596]: cannot borrow immutable argument `b` as mutable\n   --> $DIR/mut-borrow-of-mut-ref.rs:8:12\n    |\n-LL |     g(&mut b) //~ ERROR cannot borrow\n+LL |     g(&mut b)\n    |            ^ cannot borrow mutably\n help: consider removing the `&mut`, as it is an immutable binding to a mutable reference\n    |\n-LL |     g(b) //~ ERROR cannot borrow\n+LL |     g(b)\n    |       ^\n \n error: aborting due to previous error"}, {"sha": "45db962fbd01f831d2304562bb38853100ae33c7", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `void` as mutable more than once at a time\n    |\n LL |     let first = &mut void;\n    |                      ---- first mutable borrow occurs here\n-LL |     let second = &mut void; //~ ERROR cannot borrow\n+LL |     let second = &mut void;\n    |                       ^^^^ second mutable borrow occurs here\n ...\n LL | }\n@@ -14,7 +14,7 @@ error[E0499]: cannot borrow `inner_void` as mutable more than once at a time\n    |\n LL |         let inner_first = &mut inner_void;\n    |                                ---------- first mutable borrow occurs here\n-LL |         let inner_second = &mut inner_void; //~ ERROR cannot borrow\n+LL |         let inner_second = &mut inner_void;\n    |                                 ^^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     }"}, {"sha": "cf4f37edde0b8e6297cabea7a4ff41b3d3250f18", "filename": "src/test/ui/borrowck/mutability-errors.stderr", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,16 +3,16 @@ error[E0594]: cannot assign to immutable borrowed content `*x`\n    |\n LL | fn named_ref(x: &(i32,)) {\n    |                 ------- use `&mut (i32,)` here to make mutable\n-LL |     *x = (1,); //~ ERROR\n+LL |     *x = (1,);\n    |     ^^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to field `x.0` of immutable binding\n   --> $DIR/mutability-errors.rs:10:5\n    |\n LL | fn named_ref(x: &(i32,)) {\n    |                 ------- use `&mut (i32,)` here to make mutable\n-LL |     *x = (1,); //~ ERROR\n-LL |     x.0 = 1; //~ ERROR\n+LL |     *x = (1,);\n+LL |     x.0 = 1;\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow immutable borrowed content `*x` as mutable\n@@ -21,7 +21,7 @@ error[E0596]: cannot borrow immutable borrowed content `*x` as mutable\n LL | fn named_ref(x: &(i32,)) {\n    |                 ------- use `&mut (i32,)` here to make mutable\n ...\n-LL |     &mut *x; //~ ERROR\n+LL |     &mut *x;\n    |          ^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n@@ -30,157 +30,157 @@ error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n LL | fn named_ref(x: &(i32,)) {\n    |                 ------- use `&mut (i32,)` here to make mutable\n ...\n-LL |     &mut x.0; //~ ERROR\n+LL |     &mut x.0;\n    |          ^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to immutable borrowed content\n   --> $DIR/mutability-errors.rs:16:5\n    |\n-LL |     *f() = (1,); //~ ERROR\n+LL |     *f() = (1,);\n    |     ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to field of immutable binding\n   --> $DIR/mutability-errors.rs:17:5\n    |\n-LL |     f().0 = 1; //~ ERROR\n+LL |     f().0 = 1;\n    |     ^^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow immutable borrowed content as mutable\n   --> $DIR/mutability-errors.rs:18:10\n    |\n-LL |     &mut *f(); //~ ERROR\n+LL |     &mut *f();\n    |          ^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow field of immutable binding as mutable\n   --> $DIR/mutability-errors.rs:19:10\n    |\n-LL |     &mut f().0; //~ ERROR\n+LL |     &mut f().0;\n    |          ^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to immutable dereference of raw pointer `*x`\n   --> $DIR/mutability-errors.rs:23:5\n    |\n-LL |     *x = (1,); //~ ERROR\n+LL |     *x = (1,);\n    |     ^^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to field `x.0` of immutable binding\n   --> $DIR/mutability-errors.rs:24:5\n    |\n-LL |     (*x).0 = 1; //~ ERROR\n+LL |     (*x).0 = 1;\n    |     ^^^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow immutable dereference of raw pointer `*x` as mutable\n   --> $DIR/mutability-errors.rs:25:10\n    |\n-LL |     &mut *x; //~ ERROR\n+LL |     &mut *x;\n    |          ^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n   --> $DIR/mutability-errors.rs:26:10\n    |\n-LL |     &mut (*x).0; //~ ERROR\n+LL |     &mut (*x).0;\n    |          ^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to immutable dereference of raw pointer\n   --> $DIR/mutability-errors.rs:30:5\n    |\n-LL |     *f() = (1,); //~ ERROR\n+LL |     *f() = (1,);\n    |     ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to field of immutable binding\n   --> $DIR/mutability-errors.rs:31:5\n    |\n-LL |     (*f()).0 = 1; //~ ERROR\n+LL |     (*f()).0 = 1;\n    |     ^^^^^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow immutable dereference of raw pointer as mutable\n   --> $DIR/mutability-errors.rs:32:10\n    |\n-LL |     &mut *f(); //~ ERROR\n+LL |     &mut *f();\n    |          ^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow field of immutable binding as mutable\n   --> $DIR/mutability-errors.rs:33:10\n    |\n-LL |     &mut (*f()).0; //~ ERROR\n+LL |     &mut (*f()).0;\n    |          ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0387]: cannot assign to data in a captured outer variable in an `Fn` closure\n   --> $DIR/mutability-errors.rs:40:9\n    |\n-LL |         x = (1,); //~ ERROR\n+LL |         x = (1,);\n    |         ^^^^^^^^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/mutability-errors.rs:39:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0387]: cannot assign to data in a captured outer variable in an `Fn` closure\n   --> $DIR/mutability-errors.rs:41:9\n    |\n-LL |         x.0 = 1; //~ ERROR\n+LL |         x.0 = 1;\n    |         ^^^^^^^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/mutability-errors.rs:39:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0387]: cannot borrow data mutably in a captured outer variable in an `Fn` closure\n   --> $DIR/mutability-errors.rs:42:14\n    |\n-LL |         &mut x; //~ ERROR\n+LL |         &mut x;\n    |              ^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/mutability-errors.rs:39:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0387]: cannot borrow data mutably in a captured outer variable in an `Fn` closure\n   --> $DIR/mutability-errors.rs:43:14\n    |\n-LL |         &mut x.0; //~ ERROR\n+LL |         &mut x.0;\n    |              ^^^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/mutability-errors.rs:39:12\n    |\n LL |       fn_ref(|| {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0594]: cannot assign to captured outer variable in an `Fn` closure\n   --> $DIR/mutability-errors.rs:46:9\n    |\n-LL |         x = (1,); //~ ERROR\n+LL |         x = (1,);\n    |         ^^^^^^^^\n    |\n    = note: `Fn` closures cannot capture their enclosing environment for modifications\n@@ -189,66 +189,66 @@ help: consider changing this closure to take self by mutable reference\n    |\n LL |       fn_ref(move || {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0594]: cannot assign to field `x.0` of immutable binding\n   --> $DIR/mutability-errors.rs:47:9\n    |\n-LL |         x.0 = 1; //~ ERROR\n+LL |         x.0 = 1;\n    |         ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow captured outer variable in an `Fn` closure as mutable\n   --> $DIR/mutability-errors.rs:48:14\n    |\n-LL |         &mut x; //~ ERROR\n+LL |         &mut x;\n    |              ^\n    |\n help: consider changing this closure to take self by mutable reference\n   --> $DIR/mutability-errors.rs:45:12\n    |\n LL |       fn_ref(move || {\n    |  ____________^\n-LL | |         x = (1,); //~ ERROR\n-LL | |         x.0 = 1; //~ ERROR\n-LL | |         &mut x; //~ ERROR\n-LL | |         &mut x.0; //~ ERROR\n+LL | |         x = (1,);\n+LL | |         x.0 = 1;\n+LL | |         &mut x;\n+LL | |         &mut x.0;\n LL | |     });\n    | |_____^\n \n error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n   --> $DIR/mutability-errors.rs:49:14\n    |\n-LL |         &mut x.0; //~ ERROR\n+LL |         &mut x.0;\n    |              ^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow immutable argument `x` as mutable\n   --> $DIR/mutability-errors.rs:54:10\n    |\n LL | fn imm_local(x: (i32,)) {\n    |              - help: make this binding mutable: `mut x`\n-LL |     &mut x; //~ ERROR\n+LL |     &mut x;\n    |          ^ cannot borrow mutably\n \n error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n   --> $DIR/mutability-errors.rs:55:10\n    |\n LL | fn imm_local(x: (i32,)) {\n    |              - help: make this binding mutable: `mut x`\n-LL |     &mut x; //~ ERROR\n-LL |     &mut x.0; //~ ERROR\n+LL |     &mut x;\n+LL |     &mut x.0;\n    |          ^^^ cannot mutably borrow field of immutable binding\n \n error[E0595]: closure cannot assign to immutable argument `x`\n   --> $DIR/mutability-errors.rs:59:5\n    |\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: make this binding mutable: `mut x`\n-LL |     || { //~ ERROR\n+LL |     || {\n    |     ^^ cannot borrow mutably\n \n error[E0594]: cannot assign to captured outer variable in an `FnMut` closure\n@@ -257,49 +257,49 @@ error[E0594]: cannot assign to captured outer variable in an `FnMut` closure\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider making `x` mutable: `mut x`\n ...\n-LL |         x = (1,); //~ ERROR\n+LL |         x = (1,);\n    |         ^^^^^^^^\n \n error[E0594]: cannot assign to field `x.0` of immutable binding\n   --> $DIR/mutability-errors.rs:67:9\n    |\n-LL |         x.0 = 1; //~ ERROR\n+LL |         x.0 = 1;\n    |         ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow captured outer variable in an `FnMut` closure as mutable\n   --> $DIR/mutability-errors.rs:68:14\n    |\n-LL |         &mut x; //~ ERROR\n+LL |         &mut x;\n    |              ^\n \n error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n   --> $DIR/mutability-errors.rs:69:14\n    |\n-LL |         &mut x.0; //~ ERROR\n+LL |         &mut x.0;\n    |              ^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to immutable static item\n   --> $DIR/mutability-errors.rs:76:5\n    |\n-LL |     X = (1,); //~ ERROR\n+LL |     X = (1,);\n    |     ^^^^^^^^\n \n error[E0594]: cannot assign to field of immutable binding\n   --> $DIR/mutability-errors.rs:77:5\n    |\n-LL |     X.0 = 1; //~ ERROR\n+LL |     X.0 = 1;\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0596]: cannot borrow immutable static item as mutable\n   --> $DIR/mutability-errors.rs:78:10\n    |\n-LL |     &mut X; //~ ERROR\n+LL |     &mut X;\n    |          ^\n \n error[E0596]: cannot borrow field of immutable binding as mutable\n   --> $DIR/mutability-errors.rs:79:10\n    |\n-LL |     &mut X.0; //~ ERROR\n+LL |     &mut X.0;\n    |          ^^^ cannot mutably borrow field of immutable binding\n \n error: aborting due to 35 previous errors"}, {"sha": "ae68df72aa7a60958c04efd75191fa8f2132b1e0", "filename": "src/test/ui/borrowck/promote-ref-mut-in-let-issue-46557.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fpromote-ref-mut-in-let-issue-46557.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/promote-ref-mut-in-let-issue-46557.rs:5:9\n    |\n-LL |     let ref mut x = 1234543; //~ ERROR\n+LL |     let ref mut x = 1234543;\n    |         ^^^^^^^^^ temporary value does not live long enough\n LL |     x\n LL | }\n@@ -12,7 +12,7 @@ LL | }\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/promote-ref-mut-in-let-issue-46557.rs:10:10\n    |\n-LL |     let (ref mut x, ) = (1234543, ); //~ ERROR\n+LL |     let (ref mut x, ) = (1234543, );\n    |          ^^^^^^^^^ borrowed value does not live long enough\n LL |     x\n LL | }\n@@ -23,7 +23,7 @@ LL | }\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/promote-ref-mut-in-let-issue-46557.rs:16:9\n    |\n-LL |         ref mut x => x //~ ERROR\n+LL |         ref mut x => x\n    |         ^^^^^^^^^ temporary value does not live long enough\n LL |     }\n LL | }\n@@ -34,7 +34,7 @@ LL | }\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/promote-ref-mut-in-let-issue-46557.rs:22:10\n    |\n-LL |         (ref mut x,) => x, //~ ERROR\n+LL |         (ref mut x,) => x,\n    |          ^^^^^^^^^ borrowed value does not live long enough\n LL |     }\n LL | }\n@@ -45,7 +45,7 @@ LL | }\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/promote-ref-mut-in-let-issue-46557.rs:27:10\n    |\n-LL |     &mut 1234543 //~ ERROR\n+LL |     &mut 1234543\n    |          ^^^^^^^ temporary value does not live long enough\n LL | }\n    | - temporary value only lives until here"}, {"sha": "74f0217ef8a9923c35758ca7595ef2794bc91074", "filename": "src/test/ui/borrowck/reassignment_immutable_fields.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,51 +3,51 @@ error[E0594]: cannot assign to field `x.0` of immutable binding\n    |\n LL |     let x: (u32, u32);\n    |         - help: make this binding mutable: `mut x`\n-LL |     x.0 = 1; //~ ERROR\n+LL |     x.0 = 1;\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field `x.1` of immutable binding\n   --> $DIR/reassignment_immutable_fields.rs:8:5\n    |\n LL |     let x: (u32, u32);\n    |         - help: make this binding mutable: `mut x`\n-LL |     x.0 = 1; //~ ERROR\n-LL |     x.1 = 22; //~ ERROR\n+LL |     x.0 = 1;\n+LL |     x.1 = 22;\n    |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0381]: use of possibly uninitialized variable: `x.0`\n   --> $DIR/reassignment_immutable_fields.rs:9:10\n    |\n-LL |     drop(x.0); //~ ERROR\n+LL |     drop(x.0);\n    |          ^^^ use of possibly uninitialized `x.0`\n \n error[E0381]: use of possibly uninitialized variable: `x.1`\n   --> $DIR/reassignment_immutable_fields.rs:10:10\n    |\n-LL |     drop(x.1); //~ ERROR\n+LL |     drop(x.1);\n    |          ^^^ use of possibly uninitialized `x.1`\n \n error[E0594]: cannot assign to field `x.0` of immutable binding\n   --> $DIR/reassignment_immutable_fields.rs:15:5\n    |\n LL |     let x: (u32, u32);\n    |         - help: make this binding mutable: `mut x`\n-LL |     x.0 = 1; //~ ERROR\n+LL |     x.0 = 1;\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field `x.1` of immutable binding\n   --> $DIR/reassignment_immutable_fields.rs:16:5\n    |\n LL |     let x: (u32, u32);\n    |         - help: make this binding mutable: `mut x`\n-LL |     x.0 = 1; //~ ERROR\n-LL |     x.1 = 22; //~ ERROR\n+LL |     x.0 = 1;\n+LL |     x.1 = 22;\n    |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0381]: use of possibly uninitialized variable: `x`\n   --> $DIR/reassignment_immutable_fields.rs:17:10\n    |\n-LL |     drop(x); //~ ERROR\n+LL |     drop(x);\n    |          ^ use of possibly uninitialized `x`\n \n error: aborting due to 7 previous errors"}, {"sha": "673c1572ca5f817b6e56f35b0950b2ae3239fcac", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_overlapping.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_overlapping.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,16 +3,16 @@ error[E0594]: cannot assign to field `x.a` of immutable binding\n    |\n LL |     let x: Foo;\n    |         - help: make this binding mutable: `mut x`\n-LL |     x.a = 1;  //~ ERROR\n+LL |     x.a = 1;\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field `x.b` of immutable binding\n   --> $DIR/reassignment_immutable_fields_overlapping.rs:13:5\n    |\n LL |     let x: Foo;\n    |         - help: make this binding mutable: `mut x`\n-LL |     x.a = 1;  //~ ERROR\n-LL |     x.b = 22; //~ ERROR\n+LL |     x.a = 1;\n+LL |     x.b = 22;\n    |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error: aborting due to 2 previous errors"}, {"sha": "db1c74d94afb5135653917f528f1f84f572b69e0", "filename": "src/test/ui/borrowck/reassignment_immutable_fields_twice.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Freassignment_immutable_fields_twice.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,24 +4,24 @@ error[E0594]: cannot assign to field `x.0` of immutable binding\n LL |     let x: (u32, u32);\n    |         - help: make this binding mutable: `mut x`\n LL |     x = (22, 44);\n-LL |     x.0 = 1; //~ ERROR\n+LL |     x.0 = 1;\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field `x.0` of immutable binding\n   --> $DIR/reassignment_immutable_fields_twice.rs:12:5\n    |\n LL |     let x: (u32, u32);\n    |         - help: make this binding mutable: `mut x`\n-LL |     x.0 = 1; //~ ERROR\n+LL |     x.0 = 1;\n    |     ^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field `x.0` of immutable binding\n   --> $DIR/reassignment_immutable_fields_twice.rs:13:5\n    |\n LL |     let x: (u32, u32);\n    |         - help: make this binding mutable: `mut x`\n-LL |     x.0 = 1; //~ ERROR\n-LL |     x.0 = 22; //~ ERROR\n+LL |     x.0 = 1;\n+LL |     x.0 = 22;\n    |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error[E0594]: cannot assign to field `x.1` of immutable binding\n@@ -30,7 +30,7 @@ error[E0594]: cannot assign to field `x.1` of immutable binding\n LL |     let x: (u32, u32);\n    |         - help: make this binding mutable: `mut x`\n ...\n-LL |     x.1 = 44; //~ ERROR\n+LL |     x.1 = 44;\n    |     ^^^^^^^^ cannot mutably borrow field of immutable binding\n \n error: aborting due to 4 previous errors"}, {"sha": "933d3eb71117c647b8a7b127f5b0e206e1367ab4", "filename": "src/test/ui/borrowck/two-phase-across-loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0499]: cannot borrow `foo` as mutable more than once at a time\n   --> $DIR/two-phase-across-loop.rs:19:22\n    |\n-LL |         strings.push(foo.get_string()); //~ ERROR cannot borrow `foo` as mutable\n+LL |         strings.push(foo.get_string());\n    |                      ^^^ mutable borrow starts here in previous iteration of loop\n \n error: aborting due to previous error"}, {"sha": "bcd743f47c53c9fc253f2a1ca139ee8e3a8a9042", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: compilation successful\n   --> $DIR/two-phase-reservation-sharing-interference-2.rs:17:1\n    |\n-LL | / fn main() { //~ ERROR compilation successful\n+LL | / fn main() {\n LL | |     let mut v = vec![0, 1, 2];\n LL | |     let shared = &v;\n LL | |"}, {"sha": "21a7814626746a8bd66980bd8750620b41c966b1", "filename": "src/test/ui/bounds-lifetime.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbounds-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbounds-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbounds-lifetime.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,31 +1,31 @@\n error: lifetime bounds cannot be used in this context\n   --> $DIR/bounds-lifetime.rs:1:22\n    |\n-LL | type A = for<'b, 'a: 'b> fn(); //~ ERROR lifetime bounds cannot be used in this context\n+LL | type A = for<'b, 'a: 'b> fn();\n    |                      ^^\n \n error: lifetime bounds cannot be used in this context\n   --> $DIR/bounds-lifetime.rs:2:22\n    |\n-LL | type B = for<'b, 'a: 'b,> fn(); //~ ERROR lifetime bounds cannot be used in this context\n+LL | type B = for<'b, 'a: 'b,> fn();\n    |                      ^^\n \n error: lifetime bounds cannot be used in this context\n   --> $DIR/bounds-lifetime.rs:3:22\n    |\n-LL | type C = for<'b, 'a: 'b +> fn(); //~ ERROR lifetime bounds cannot be used in this context\n+LL | type C = for<'b, 'a: 'b +> fn();\n    |                      ^^\n \n error: only lifetime parameters can be used in this context\n   --> $DIR/bounds-lifetime.rs:4:18\n    |\n-LL | type D = for<'a, T> fn(); //~ ERROR only lifetime parameters can be used in this context\n+LL | type D = for<'a, T> fn();\n    |                  ^\n \n error: only lifetime parameters can be used in this context\n   --> $DIR/bounds-lifetime.rs:5:14\n    |\n-LL | type E = for<T> Fn(); //~ ERROR only lifetime parameters can be used in this context\n+LL | type E = for<T> Fn();\n    |              ^\n \n error: aborting due to 5 previous errors"}, {"sha": "c1aa580f89edd88f39b9e9b3bc7030bd5b794748", "filename": "src/test/ui/break-outside-loop.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbreak-outside-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbreak-outside-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-outside-loop.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,31 +1,31 @@\n error[E0268]: `break` outside of loop\n   --> $DIR/break-outside-loop.rs:10:15\n    |\n-LL |     let pth = break; //~ ERROR: `break` outside of loop\n+LL |     let pth = break;\n    |               ^^^^^ cannot break outside of a loop\n \n error[E0268]: `continue` outside of loop\n   --> $DIR/break-outside-loop.rs:11:17\n    |\n-LL |     if cond() { continue } //~ ERROR: `continue` outside of loop\n+LL |     if cond() { continue }\n    |                 ^^^^^^^^ cannot break outside of a loop\n \n error[E0267]: `break` inside of a closure\n   --> $DIR/break-outside-loop.rs:17:25\n    |\n-LL |             if cond() { break } //~ ERROR: `break` inside of a closure\n+LL |             if cond() { break }\n    |                         ^^^^^ cannot break inside of a closure\n \n error[E0267]: `continue` inside of a closure\n   --> $DIR/break-outside-loop.rs:18:25\n    |\n-LL |             if cond() { continue } //~ ERROR: `continue` inside of a closure\n+LL |             if cond() { continue }\n    |                         ^^^^^^^^ cannot break inside of a closure\n \n error[E0268]: `break` outside of loop\n   --> $DIR/break-outside-loop.rs:24:25\n    |\n-LL |     let unconstrained = break; //~ ERROR: `break` outside of loop\n+LL |     let unconstrained = break;\n    |                         ^^^^^ cannot break outside of a loop\n \n error: aborting due to 5 previous errors"}, {"sha": "a08edee07ea0aecf5c269e9eb2e1176cc89fed2a", "filename": "src/test/ui/break-while-condition.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fbreak-while-condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbreak-while-condition.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/break-while-condition.rs:9:20\n    |\n-LL |           let _: ! = { //~ ERROR mismatched types\n+LL |           let _: ! = {\n    |  ____________________^\n LL | |             'a: while break 'a {};\n LL | |         };\n@@ -13,7 +13,7 @@ LL | |         };\n error[E0308]: mismatched types\n   --> $DIR/break-while-condition.rs:16:13\n    |\n-LL | /             while false { //~ ERROR mismatched types\n+LL | /             while false {\n LL | |                 break\n LL | |             }\n    | |_____________^ expected !, found ()\n@@ -24,7 +24,7 @@ LL | |             }\n error[E0308]: mismatched types\n   --> $DIR/break-while-condition.rs:24:13\n    |\n-LL | /             while false { //~ ERROR mismatched types\n+LL | /             while false {\n LL | |                 return\n LL | |             }\n    | |_____________^ expected !, found ()"}, {"sha": "5135e0dadaf9dab5f0c1a32c205d8bb56ff8bc52", "filename": "src/test/ui/by-move-pattern-binding.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fby-move-pattern-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fby-move-pattern-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fby-move-pattern-binding.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/by-move-pattern-binding.rs:16:9\n    |\n-LL |         &E::Bar(identifier) => f(identifier.clone())  //~ ERROR cannot move\n+LL |         &E::Bar(identifier) => f(identifier.clone())\n    |         ^^^^^^^^----------^\n    |         |       |\n    |         |       hint: to prevent move, use `ref identifier` or `ref mut identifier`"}, {"sha": "1a2bb4419b582344910d455ab61835d28b7f8b6b", "filename": "src/test/ui/c-variadic/variadic-ffi-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-1.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0045]: C-variadic function must have C or cdecl calling convention\n   --> $DIR/variadic-ffi-1.rs:5:5\n    |\n-LL |     fn printf(_: *const u8, ...); //~ ERROR: variadic function must have C or cdecl calling\n+LL |     fn printf(_: *const u8, ...);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadics require C or cdecl calling convention\n \n error: aborting due to previous error"}, {"sha": "6e19fc12621023d18d465c38045bd074b57c4ad8", "filename": "src/test/ui/c-variadic/variadic-ffi-3.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-3.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0060]: this function takes at least 2 parameters but 0 parameters were su\n LL |     fn foo(f: isize, x: u8, ...);\n    |     ----------------------------- defined here\n ...\n-LL |         foo(); //~ ERROR: this function takes at least 2 parameters but 0 parameters were supplied\n+LL |         foo();\n    |         ^^^^^ expected at least 2 parameters\n \n error[E0060]: this function takes at least 2 parameters but 1 parameter was supplied\n@@ -13,7 +13,7 @@ error[E0060]: this function takes at least 2 parameters but 1 parameter was supp\n LL |     fn foo(f: isize, x: u8, ...);\n    |     ----------------------------- defined here\n ...\n-LL |         foo(1); //~ ERROR: this function takes at least 2 parameters but 1 parameter was supplied\n+LL |         foo(1);\n    |         ^^^^^^ expected at least 2 parameters\n \n error[E0308]: mismatched types\n@@ -37,37 +37,37 @@ LL |         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n error[E0617]: can't pass `f32` to variadic function\n   --> $DIR/variadic-ffi-3.rs:22:19\n    |\n-LL |         foo(1, 2, 3f32); //~ ERROR can't pass `f32` to variadic function\n+LL |         foo(1, 2, 3f32);\n    |                   ^^^^ help: cast the value to `c_double`: `3f32 as c_double`\n \n error[E0617]: can't pass `bool` to variadic function\n   --> $DIR/variadic-ffi-3.rs:23:19\n    |\n-LL |         foo(1, 2, true); //~ ERROR can't pass `bool` to variadic function\n+LL |         foo(1, 2, true);\n    |                   ^^^^ help: cast the value to `c_int`: `true as c_int`\n \n error[E0617]: can't pass `i8` to variadic function\n   --> $DIR/variadic-ffi-3.rs:24:19\n    |\n-LL |         foo(1, 2, 1i8); //~ ERROR can't pass `i8` to variadic function\n+LL |         foo(1, 2, 1i8);\n    |                   ^^^ help: cast the value to `c_int`: `1i8 as c_int`\n \n error[E0617]: can't pass `u8` to variadic function\n   --> $DIR/variadic-ffi-3.rs:25:19\n    |\n-LL |         foo(1, 2, 1u8); //~ ERROR can't pass `u8` to variadic function\n+LL |         foo(1, 2, 1u8);\n    |                   ^^^ help: cast the value to `c_uint`: `1u8 as c_uint`\n \n error[E0617]: can't pass `i16` to variadic function\n   --> $DIR/variadic-ffi-3.rs:26:19\n    |\n-LL |         foo(1, 2, 1i16); //~ ERROR can't pass `i16` to variadic function\n+LL |         foo(1, 2, 1i16);\n    |                   ^^^^ help: cast the value to `c_int`: `1i16 as c_int`\n \n error[E0617]: can't pass `u16` to variadic function\n   --> $DIR/variadic-ffi-3.rs:27:19\n    |\n-LL |         foo(1, 2, 1u16); //~ ERROR can't pass `u16` to variadic function\n+LL |         foo(1, 2, 1u16);\n    |                   ^^^^ help: cast the value to `c_uint`: `1u16 as c_uint`\n \n error: aborting due to 10 previous errors"}, {"sha": "a3e3f81b73d80b817417908b8b5924ba8609345b", "filename": "src/test/ui/c-variadic/variadic-ffi-4.stderr", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-4.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,46 +3,46 @@ error[E0621]: explicit lifetime required in the type of `ap`\n    |\n LL | pub unsafe extern \"C\" fn no_escape0<'a>(_: usize, ap: ...) -> VaList<'a> {\n    |                                                       --- help: add explicit lifetime `'a` to the type of `ap`: `core::ffi::VaList<'a>`\n-LL |     ap //~ ERROR: explicit lifetime required\n+LL |     ap\n    |     ^^ lifetime `'a` required\n \n error[E0621]: explicit lifetime required in the type of `ap`\n   --> $DIR/variadic-ffi-4.rs:12:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaList<'static> {\n    |                                                   --- help: add explicit lifetime `'static` to the type of `ap`: `core::ffi::VaList<'static>`\n-LL |     ap //~ ERROR: explicit lifetime required\n+LL |     ap\n    |     ^^ lifetime `'static` required\n \n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n   --> $DIR/variadic-ffi-4.rs:16:28\n    |\n-LL |     let _ = ap.copy(|ap| { ap }); //~ ERROR: cannot infer an appropriate lifetime\n+LL |     let _ = ap.copy(|ap| { ap });\n    |                            ^^\n    |\n note: first, the lifetime cannot outlive the anonymous lifetime #2 defined on the body at 16:21...\n   --> $DIR/variadic-ffi-4.rs:16:21\n    |\n-LL |     let _ = ap.copy(|ap| { ap }); //~ ERROR: cannot infer an appropriate lifetime\n+LL |     let _ = ap.copy(|ap| { ap });\n    |                     ^^^^^^^^^^^\n    = note: ...so that the expression is assignable:\n            expected core::ffi::VaList<'_>\n               found core::ffi::VaList<'_>\n note: but, the lifetime must be valid for the method call at 16:13...\n   --> $DIR/variadic-ffi-4.rs:16:13\n    |\n-LL |     let _ = ap.copy(|ap| { ap }); //~ ERROR: cannot infer an appropriate lifetime\n+LL |     let _ = ap.copy(|ap| { ap });\n    |             ^^^^^^^^^^^^^^^^^^^^\n note: ...so type `core::ffi::VaList<'_>` of expression is valid during the expression\n   --> $DIR/variadic-ffi-4.rs:16:13\n    |\n-LL |     let _ = ap.copy(|ap| { ap }); //~ ERROR: cannot infer an appropriate lifetime\n+LL |     let _ = ap.copy(|ap| { ap });\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-4.rs:20:12\n    |\n-LL |     *ap0 = ap1; //~ ERROR: mismatched types\n+LL |     *ap0 = ap1;\n    |            ^^^ lifetime mismatch\n    |\n    = note: expected type `core::ffi::VaList<'_>`\n@@ -51,14 +51,14 @@ note: the anonymous lifetime #3 defined on the function body at 19:1...\n   --> $DIR/variadic-ffi-4.rs:19:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaList, mut ap1: ...) {\n-LL | |     *ap0 = ap1; //~ ERROR: mismatched types\n+LL | |     *ap0 = ap1;\n LL | | }\n    | |_^\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 19:1\n   --> $DIR/variadic-ffi-4.rs:19:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape3(_: usize, mut ap0: &mut VaList, mut ap1: ...) {\n-LL | |     *ap0 = ap1; //~ ERROR: mismatched types\n+LL | |     *ap0 = ap1;\n LL | | }\n    | |_^\n \n@@ -73,21 +73,21 @@ note: the type is valid for the anonymous lifetime #1 defined on the function bo\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n-LL | |     //~^ ERROR: a value of type `core::ffi::VaList<'_>` is borrowed for too long\n-LL | |     //~^^ ERROR: mismatched types\n-LL | |     //~^^^ ERROR: mismatched types\n-LL | |     //~^^^^ ERROR: cannot infer an appropriate lifetime\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n LL | | }\n    | |_^\n note: but the borrow lasts for the anonymous lifetime #3 defined on the function body at 23:1\n   --> $DIR/variadic-ffi-4.rs:23:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n-LL | |     //~^ ERROR: a value of type `core::ffi::VaList<'_>` is borrowed for too long\n-LL | |     //~^^ ERROR: mismatched types\n-LL | |     //~^^^ ERROR: mismatched types\n-LL | |     //~^^^^ ERROR: cannot infer an appropriate lifetime\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n LL | | }\n    | |_^\n \n@@ -104,21 +104,21 @@ note: the anonymous lifetime #3 defined on the function body at 23:1...\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n-LL | |     //~^ ERROR: a value of type `core::ffi::VaList<'_>` is borrowed for too long\n-LL | |     //~^^ ERROR: mismatched types\n-LL | |     //~^^^ ERROR: mismatched types\n-LL | |     //~^^^^ ERROR: cannot infer an appropriate lifetime\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n LL | | }\n    | |_^\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the function body at 23:1\n   --> $DIR/variadic-ffi-4.rs:23:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n-LL | |     //~^ ERROR: a value of type `core::ffi::VaList<'_>` is borrowed for too long\n-LL | |     //~^^ ERROR: mismatched types\n-LL | |     //~^^^ ERROR: mismatched types\n-LL | |     //~^^^^ ERROR: cannot infer an appropriate lifetime\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n LL | | }\n    | |_^\n \n@@ -135,21 +135,21 @@ note: the anonymous lifetime #2 defined on the function body at 23:1...\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n-LL | |     //~^ ERROR: a value of type `core::ffi::VaList<'_>` is borrowed for too long\n-LL | |     //~^^ ERROR: mismatched types\n-LL | |     //~^^^ ERROR: mismatched types\n-LL | |     //~^^^^ ERROR: cannot infer an appropriate lifetime\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n LL | | }\n    | |_^\n note: ...does not necessarily outlive the anonymous lifetime #3 defined on the function body at 23:1\n   --> $DIR/variadic-ffi-4.rs:23:1\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n-LL | |     //~^ ERROR: a value of type `core::ffi::VaList<'_>` is borrowed for too long\n-LL | |     //~^^ ERROR: mismatched types\n-LL | |     //~^^^ ERROR: mismatched types\n-LL | |     //~^^^^ ERROR: cannot infer an appropriate lifetime\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n LL | | }\n    | |_^\n \n@@ -164,10 +164,10 @@ note: first, the lifetime cannot outlive the anonymous lifetime #3 defined on th\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n-LL | |     //~^ ERROR: a value of type `core::ffi::VaList<'_>` is borrowed for too long\n-LL | |     //~^^ ERROR: mismatched types\n-LL | |     //~^^^ ERROR: mismatched types\n-LL | |     //~^^^^ ERROR: cannot infer an appropriate lifetime\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n LL | | }\n    | |_^\n note: ...so that the type `core::ffi::VaList<'_>` is not borrowed for too long\n@@ -180,10 +180,10 @@ note: but, the lifetime must be valid for the anonymous lifetime #1 defined on t\n    |\n LL | / pub unsafe extern \"C\" fn no_escape4(_: usize, ap0: &mut VaList, mut ap1: ...) {\n LL | |     ap0 = &mut ap1;\n-LL | |     //~^ ERROR: a value of type `core::ffi::VaList<'_>` is borrowed for too long\n-LL | |     //~^^ ERROR: mismatched types\n-LL | |     //~^^^ ERROR: mismatched types\n-LL | |     //~^^^^ ERROR: cannot infer an appropriate lifetime\n+LL | |\n+LL | |\n+LL | |\n+LL | |\n LL | | }\n    | |_^\n note: ...so that reference does not outlive borrowed content"}, {"sha": "2ad1964b6fc7bfdd074afb47012a127817e33337", "filename": "src/test/ui/c-variadic/variadic-ffi-5.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-5.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,21 +3,21 @@ error[E0621]: explicit lifetime required in the type of `ap`\n    |\n LL | pub unsafe extern \"C\" fn no_escape0<'a>(_: usize, ap: ...) -> VaList<'a> {\n    |                                                       --- help: add explicit lifetime `'a` to the type of `ap`: `core::ffi::VaList<'a>`\n-LL |     ap //~ ERROR: explicit lifetime required\n+LL |     ap\n    |     ^^ lifetime `'a` required\n \n error[E0621]: explicit lifetime required in the type of `ap`\n   --> $DIR/variadic-ffi-5.rs:15:5\n    |\n LL | pub unsafe extern \"C\" fn no_escape1(_: usize, ap: ...) -> VaList<'static> {\n    |                                                   --- help: add explicit lifetime `'static` to the type of `ap`: `core::ffi::VaList<'static>`\n-LL |     ap //~ ERROR: explicit lifetime required\n+LL |     ap\n    |     ^^ lifetime `'static` required\n \n error: lifetime may not live long enough\n   --> $DIR/variadic-ffi-5.rs:19:28\n    |\n-LL |     let _ = ap.copy(|ap| { ap }); //~ ERROR: lifetime may not live long enough\n+LL |     let _ = ap.copy(|ap| { ap });\n    |                      ---   ^^ returning this value requires that `'1` must outlive `'2`\n    |                      | |\n    |                      | return type of closure is core::ffi::VaList<'2>\n@@ -30,7 +30,7 @@ LL | pub unsafe extern \"C\" fn no_escape3(_: usize, ap0: &mut VaList, mut ap1: ..\n    |                                               ---               ------- has type `core::ffi::VaList<'1>`\n    |                                               |\n    |                                               has type `&mut core::ffi::VaList<'2>`\n-LL |     *ap0 = ap1; //~ ERROR: lifetime may not live long enough\n+LL |     *ap0 = ap1;\n    |     ^^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n \n error: lifetime may not live long enough"}, {"sha": "882e7f89f2a0df94fa600e02e14b2578758c8d41", "filename": "src/test/ui/c-variadic/variadic-ffi-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-6.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0106]: missing lifetime specifier\n   --> $DIR/variadic-ffi-6.rs:7:6\n    |\n-LL | ) -> &usize { //~ ERROR missing lifetime specifier\n+LL | ) -> &usize {\n    |      ^ help: consider giving it an explicit bounded or 'static lifetime: `&'static`\n    |\n    = help: this function's return type contains a borrowed value with an elided lifetime, but the lifetime cannot be derived from the arguments"}, {"sha": "7a50fd367d2d52e17a6950fb10cadfa1ac78de2b", "filename": "src/test/ui/call-fn-never-arg-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcall-fn-never-arg-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcall-fn-never-arg-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcall-fn-never-arg-wrong-type.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/call-fn-never-arg-wrong-type.rs:10:9\n    |\n-LL |     foo(\"wow\"); //~ ERROR mismatched types\n+LL |     foo(\"wow\");\n    |         ^^^^^ expected !, found reference\n    |\n    = note: expected type `!`"}, {"sha": "676c2cb661e7b25c37eea369f431b867f50a3e9d", "filename": "src/test/ui/can-begin-expr-check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcan-begin-expr-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcan-begin-expr-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcan-begin-expr-check.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `enum`\n   --> $DIR/can-begin-expr-check.rs:19:12\n    |\n-LL |     return enum; //~ ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `enum`\n+LL |     return enum;\n    |            ^^^^ expected one of `.`, `;`, `?`, `}`, or an operator here\n \n error: aborting due to previous error"}, {"sha": "30f8459c2e1e182718f601f42fe939da08b0bb37", "filename": "src/test/ui/cast/cast-as-bool.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-as-bool.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,19 +1,19 @@\n error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-as-bool.rs:2:13\n    |\n-LL |     let u = 5 as bool; //~ ERROR cannot cast as `bool`\n+LL |     let u = 5 as bool;\n    |             ^^^^^^^^^ help: compare with zero instead: `5 != 0`\n \n error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-as-bool.rs:5:13\n    |\n-LL |     let t = (1 + 2) as bool; //~ ERROR cannot cast as `bool`\n+LL |     let t = (1 + 2) as bool;\n    |             ^^^^^^^^^^^^^^^ help: compare with zero instead: `(1 + 2) != 0`\n \n error[E0054]: cannot cast as `bool`\n   --> $DIR/cast-as-bool.rs:8:13\n    |\n-LL |     let v = \"hello\" as bool; //~ ERROR cannot cast as `bool`\n+LL |     let v = \"hello\" as bool;\n    |             ^^^^^^^^^^^^^^^ unsupported cast\n \n error: aborting due to 3 previous errors"}, {"sha": "1e77f5dbdc64335402acaee6c7e68ca3de423102", "filename": "src/test/ui/cast/cast-errors-issue-43825.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcast%2Fcast-errors-issue-43825.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcast%2Fcast-errors-issue-43825.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-errors-issue-43825.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0425]: cannot find value `error` in this scope\n   --> $DIR/cast-errors-issue-43825.rs:2:17\n    |\n-LL |     let error = error; //~ ERROR cannot find value `error`\n+LL |     let error = error;\n    |                 ^^^^^ not found in this scope\n \n error: aborting due to previous error"}, {"sha": "0d4397c2e2d7c750c8886d81f94f8e5a9dc150cc", "filename": "src/test/ui/cast/cast-ptr-to-int-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-ptr-to-int-const.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,15 +1,15 @@\n error[E0658]: casting pointers to integers in constants is unstable (see issue #51910)\n   --> $DIR/cast-ptr-to-int-const.rs:5:9\n    |\n-LL |         main as u32 //~ ERROR casting pointers to integers in constants is unstable\n+LL |         main as u32\n    |         ^^^^^^^^^^^\n    |\n    = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable\n \n error[E0658]: casting pointers to integers in constants is unstable (see issue #51910)\n   --> $DIR/cast-ptr-to-int-const.rs:9:9\n    |\n-LL |         &Y as *const u32 as u32 //~ ERROR is unstable\n+LL |         &Y as *const u32 as u32\n    |         ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(const_raw_ptr_to_usize_cast)] to the crate attributes to enable"}, {"sha": "bd7a0e1834aa7d43d06e7f3ef2fafb2093f39965", "filename": "src/test/ui/cast/cast-to-unsized-trait-object-suggestion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fcast-to-unsized-trait-object-suggestion.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,15 +1,15 @@\n error[E0620]: cast to unsized type: `&{integer}` as `dyn std::marker::Send`\n   --> $DIR/cast-to-unsized-trait-object-suggestion.rs:2:5\n    |\n-LL |     &1 as Send; //~ ERROR cast to unsized\n+LL |     &1 as Send;\n    |     ^^^^^^----\n    |           |\n    |           help: try casting to a reference instead: `&Send`\n \n error[E0620]: cast to unsized type: `std::boxed::Box<{integer}>` as `dyn std::marker::Send`\n   --> $DIR/cast-to-unsized-trait-object-suggestion.rs:3:5\n    |\n-LL |     Box::new(1) as Send; //~ ERROR cast to unsized\n+LL |     Box::new(1) as Send;\n    |     ^^^^^^^^^^^^^^^----\n    |                    |\n    |                    help: try casting to a `Box` instead: `Box<Send>`"}, {"sha": "fbbb8e3bb332daf356c5c2fa108805bdd31ba50c", "filename": "src/test/ui/casts-differing-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcasts-differing-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcasts-differing-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcasts-differing-anon.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0606]: casting `*mut impl std::fmt::Debug+?Sized` as `*mut impl std::fmt::Debug+?Sized` is invalid\n   --> $DIR/casts-differing-anon.rs:21:13\n    |\n-LL |     b_raw = f_raw as *mut _; //~ ERROR is invalid\n+LL |     b_raw = f_raw as *mut _;\n    |             ^^^^^^^^^^^^^^^\n    |\n    = note: vtable kinds may not match"}, {"sha": "84175473696df1e80373c9bf978f7fb042372e93", "filename": "src/test/ui/casts-issue-46365.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcasts-issue-46365.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcasts-issue-46365.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcasts-issue-46365.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0412]: cannot find type `Ipsum` in this scope\n   --> $DIR/casts-issue-46365.rs:2:12\n    |\n-LL |     ipsum: Ipsum //~ ERROR cannot find type `Ipsum`\n+LL |     ipsum: Ipsum\n    |            ^^^^^ not found in this scope\n \n error: aborting due to previous error"}, {"sha": "bc426e0707b7c22ffead810fbe78cfa865f7163b", "filename": "src/test/ui/chalkify/lower_env1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: program clause dump\n   --> $DIR/lower_env1.rs:6:1\n    |\n-LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+LL | #[rustc_dump_program_clauses]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: forall<Self> { FromEnv(Self: Foo) :- FromEnv(Self: Bar). }\n@@ -11,7 +11,7 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n error: program clause dump\n   --> $DIR/lower_env1.rs:9:1\n    |\n-LL | #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n+LL | #[rustc_dump_env_program_clauses]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: forall<Self> { FromEnv(Self: Foo) :- FromEnv(Self: Bar). }"}, {"sha": "2a71fa9df5e8e330703f96b32e5631ee8f1d5191", "filename": "src/test/ui/chalkify/lower_env2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: program clause dump\n   --> $DIR/lower_env2.rs:6:1\n    |\n-LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+LL | #[rustc_dump_program_clauses]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: forall<'a, T> { FromEnv(T: Foo) :- FromEnv(S<'a, T>). }\n@@ -11,7 +11,7 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n error: program clause dump\n   --> $DIR/lower_env2.rs:11:1\n    |\n-LL | #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n+LL | #[rustc_dump_env_program_clauses]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: forall<'a, T> { FromEnv(T: Foo) :- FromEnv(S<'a, T>). }"}, {"sha": "46e083686895d8c615fcc75b0a3ec732481a1b45", "filename": "src/test/ui/chalkify/lower_env3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: program clause dump\n   --> $DIR/lower_env3.rs:5:5\n    |\n-LL |     #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n+LL |     #[rustc_dump_env_program_clauses]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: forall<'^0, ^1> { TypeOutlives(^1: '^0) :- FromEnv(&^1). }\n@@ -10,7 +10,7 @@ LL |     #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n error: program clause dump\n   --> $DIR/lower_env3.rs:10:5\n    |\n-LL |     #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n+LL |     #[rustc_dump_env_program_clauses]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: forall<'^0, ^1> { TypeOutlives(^1: '^0) :- FromEnv(&^1). }"}, {"sha": "d6827fbff3dd73e091f02ac16969dbf3101098d7", "filename": "src/test/ui/chalkify/lower_impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,15 +1,15 @@\n error: program clause dump\n   --> $DIR/lower_impl.rs:5:1\n    |\n-LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+LL | #[rustc_dump_program_clauses]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: forall<T> { Implemented(T: Foo) :- ProjectionEq(<T as std::iter::Iterator>::Item == i32), TypeOutlives(T: 'static), Implemented(T: std::iter::Iterator), Implemented(T: std::marker::Sized). }\n \n error: program clause dump\n   --> $DIR/lower_impl.rs:13:5\n    |\n-LL |     #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+LL |     #[rustc_dump_program_clauses]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: forall<T> { Normalize(<T as Bar>::Assoc -> std::vec::Vec<T>) :- Implemented(T: Bar). }"}, {"sha": "91525c3ba55d4a239f6f457fc2e2f4028dd2b00d", "filename": "src/test/ui/chalkify/lower_struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: program clause dump\n   --> $DIR/lower_struct.rs:3:1\n    |\n-LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+LL | #[rustc_dump_program_clauses]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: forall<'a, T> { FromEnv(T: std::marker::Sized) :- FromEnv(Foo<'a, T>). }"}, {"sha": "423c5573083012a0a70a5df5937972854e176c39", "filename": "src/test/ui/chalkify/lower_trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: program clause dump\n   --> $DIR/lower_trait.rs:5:1\n    |\n-LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+LL | #[rustc_dump_program_clauses]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: forall<Self, S, T> { FromEnv(<Self as Foo<S, T>>::Assoc: Bar) :- FromEnv(Self: Foo<S, T>). }\n@@ -12,7 +12,7 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n error: program clause dump\n   --> $DIR/lower_trait.rs:7:5\n    |\n-LL |     #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+LL |     #[rustc_dump_program_clauses]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: forall<Self, S, T, ^3> { ProjectionEq(<Self as Foo<S, T>>::Assoc == ^3) :- Normalize(<Self as Foo<S, T>>::Assoc -> ^3). }"}, {"sha": "79bbc9fa6b3a63249d927f3f9e221df25b984446", "filename": "src/test/ui/chalkify/lower_trait_higher_rank.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: program clause dump\n   --> $DIR/lower_trait_higher_rank.rs:3:1\n    |\n-LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+LL | #[rustc_dump_program_clauses]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: forall<'a, Self, F> { FromEnv(F: std::ops::Fn<(&'a (u8, u16),)>) :- FromEnv(Self: Foo<F>). }"}, {"sha": "408f3712a707004080b1397be39334f1276dedb1", "filename": "src/test/ui/chalkify/lower_trait_where_clause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: program clause dump\n   --> $DIR/lower_trait_where_clause.rs:5:1\n    |\n-LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n+LL | #[rustc_dump_program_clauses]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: forall<'a, 'b, Self, T, U> { FromEnv(T: std::borrow::Borrow<U>) :- FromEnv(Self: Foo<'a, 'b, T, U>). }"}, {"sha": "d1d56d3d4a2376c410668e35074fcc9727095eab", "filename": "src/test/ui/chalkify/type_inference.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Ftype_inference.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/type_inference.rs:21:14\n    |\n-LL |     only_foo(x); //~ ERROR mismatched types\n+LL |     only_foo(x);\n    |              ^ expected i32, found floating-point number\n    |\n    = note: expected type `i32`\n@@ -10,7 +10,7 @@ LL |     only_foo(x); //~ ERROR mismatched types\n error[E0277]: the trait bound `{float}: Bar` is not satisfied\n   --> $DIR/type_inference.rs:25:5\n    |\n-LL |     only_bar(x); //~ ERROR the trait bound `{float}: Bar` is not satisfied\n+LL |     only_bar(x);\n    |     ^^^^^^^^ the trait `Bar` is not implemented for `{float}`\n    |\n    = help: the following implementations were found:"}, {"sha": "633930904983d069482b2f21b3a226c7ad4452c1", "filename": "src/test/ui/changing-crates.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchanging-crates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fchanging-crates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchanging-crates.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0460]: found possibly newer version of crate `a` which `b` depends on\n   --> $DIR/changing-crates.rs:10:1\n    |\n-LL | extern crate b; //~ ERROR: found possibly newer version of crate `a` which `b` depends on\n+LL | extern crate b;\n    | ^^^^^^^^^^^^^^^\n    |\n    = note: perhaps that crate needs to be recompiled?"}, {"sha": "91fe0feb1bcd45befe1f0bd7f7a10eac000bb4c8", "filename": "src/test/ui/check-static-values-constraints.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0493]: destructors cannot be evaluated at compile-time\n    |\n LL |                                           ..SafeStruct{field1: SafeEnum::Variant3(WithDtor),\n    |  ___________________________________________^\n-LL | | //~^ ERROR destructors cannot be evaluated at compile-time\n+LL | |\n LL | |                                                      field2: SafeEnum::Variant1}};\n    | |________________________________________________________________________________^ statics cannot evaluate destructors\n \n@@ -28,49 +28,49 @@ LL |     field2: SafeEnum::Variant4(\"str\".to_string())\n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:95:5\n    |\n-LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+LL |     box MyOwned,\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n error[E0019]: static contains unimplemented expression type\n   --> $DIR/check-static-values-constraints.rs:95:9\n    |\n-LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+LL |     box MyOwned,\n    |         ^^^^^^^\n \n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:97:5\n    |\n-LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+LL |     box MyOwned,\n    |     ^^^^^^^^^^^ allocation not allowed in statics\n \n error[E0019]: static contains unimplemented expression type\n   --> $DIR/check-static-values-constraints.rs:97:9\n    |\n-LL |     box MyOwned, //~ ERROR allocations are not allowed in statics\n+LL |     box MyOwned,\n    |         ^^^^^^^\n \n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:102:6\n    |\n-LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+LL |     &box MyOwned,\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n error[E0019]: static contains unimplemented expression type\n   --> $DIR/check-static-values-constraints.rs:102:10\n    |\n-LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+LL |     &box MyOwned,\n    |          ^^^^^^^\n \n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:104:6\n    |\n-LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+LL |     &box MyOwned,\n    |      ^^^^^^^^^^^ allocation not allowed in statics\n \n error[E0019]: static contains unimplemented expression type\n   --> $DIR/check-static-values-constraints.rs:104:10\n    |\n-LL |     &box MyOwned, //~ ERROR allocations are not allowed in statics\n+LL |     &box MyOwned,\n    |          ^^^^^^^\n \n error[E0010]: allocations are not allowed in statics"}, {"sha": "af22535c55e5a8498e7fd0b4718ba8a78193a97f", "filename": "src/test/ui/check_match/issue-35609.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck_match%2Fissue-35609.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,39 +1,39 @@\n error[E0004]: non-exhaustive patterns: `(B, _)`, `(C, _)`, `(D, _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:10:11\n    |\n-LL |     match (A, ()) { //~ ERROR non-exhaustive\n+LL |     match (A, ()) {\n    |           ^^^^^^^ patterns `(B, _)`, `(C, _)`, `(D, _)` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n   --> $DIR/issue-35609.rs:14:11\n    |\n-LL |     match (A, A) { //~ ERROR non-exhaustive\n+LL |     match (A, A) {\n    |           ^^^^^^ patterns `(_, B)`, `(_, C)`, `(_, D)` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:18:11\n    |\n-LL |     match ((A, ()), ()) { //~ ERROR non-exhaustive\n+LL |     match ((A, ()), ()) {\n    |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:22:11\n    |\n-LL |     match ((A, ()), A) { //~ ERROR non-exhaustive\n+LL |     match ((A, ()), A) {\n    |           ^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n   --> $DIR/issue-35609.rs:26:11\n    |\n-LL |     match ((A, ()), ()) { //~ ERROR non-exhaustive\n+LL |     match ((A, ()), ()) {\n    |           ^^^^^^^^^^^^^ patterns `((B, _), _)`, `((C, _), _)`, `((D, _), _)` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n@@ -44,7 +44,7 @@ error[E0004]: non-exhaustive patterns: `S(B, _)`, `S(C, _)`, `S(D, _)` and 2 mor\n LL | struct S(Enum, ());\n    | ------------------- `S` defined here\n ...\n-LL |     match S(A, ()) { //~ ERROR non-exhaustive\n+LL |     match S(A, ()) {\n    |           ^^^^^^^^ patterns `S(B, _)`, `S(C, _)`, `S(D, _)` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n@@ -55,15 +55,15 @@ error[E0004]: non-exhaustive patterns: `Sd { x: B, .. }`, `Sd { x: C, .. }`, `Sd\n LL | struct Sd { x: Enum, y: () }\n    | ---------------------------- `Sd` defined here\n ...\n-LL |     match (Sd { x: A, y: () }) { //~ ERROR non-exhaustive\n+LL |     match (Sd { x: A, y: () }) {\n    |           ^^^^^^^^^^^^^^^^^^^^ patterns `Sd { x: B, .. }`, `Sd { x: C, .. }`, `Sd { x: D, .. }` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n   --> $DIR/issue-35609.rs:39:11\n    |\n-LL |     match Some(A) { //~ ERROR non-exhaustive\n+LL |     match Some(A) {\n    |           ^^^^^^^ patterns `Some(B)`, `Some(C)`, `Some(D)` and 2 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms"}, {"sha": "39f308cdfd490a59c8c64b4d17e57cf74a2187a2", "filename": "src/test/ui/class-cast-to-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-cast-to-trait.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0599]: no method named `eat` found for type `std::boxed::Box<dyn Noisy>` in the current scope\n   --> $DIR/class-cast-to-trait.rs:53:8\n    |\n-LL |   nyan.eat(); //~ ERROR no method named `eat` found\n+LL |   nyan.eat();\n    |        ^^^\n \n error: aborting due to previous error"}, {"sha": "ec11f1253990f0ff542d7b2bd0dafd035e1944c0", "filename": "src/test/ui/class-missing-self.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclass-missing-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclass-missing-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclass-missing-self.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,13 +1,13 @@\n error[E0425]: cannot find value `meows` in this scope\n   --> $DIR/class-missing-self.rs:9:7\n    |\n-LL |       meows += 1; //~ ERROR cannot find value `meows` in this scope\n+LL |       meows += 1;\n    |       ^^^^^ help: try: `self.meows`\n \n error[E0425]: cannot find function `sleep` in this scope\n   --> $DIR/class-missing-self.rs:10:7\n    |\n-LL |       sleep();     //~ ERROR cannot find function `sleep` in this scope\n+LL |       sleep();\n    |       ^^^^^ not found in this scope\n help: possible candidate is found in another module, you can import it into scope\n    |"}, {"sha": "e35e71ce6e2329d8f16a610c5b9ea608c20cae53", "filename": "src/test/ui/cleanup-rvalue-scopes-cf.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcleanup-rvalue-scopes-cf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcleanup-rvalue-scopes-cf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcleanup-rvalue-scopes-cf.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/cleanup-rvalue-scopes-cf.rs:28:19\n    |\n-LL |     let _x = arg(&AddFlags(1)); //~ ERROR value does not live long enough\n+LL |     let _x = arg(&AddFlags(1));\n    |                   ^^^^^^^^^^^ - temporary value dropped here while still borrowed\n    |                   |\n    |                   temporary value does not live long enough\n@@ -14,7 +14,7 @@ LL | }\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/cleanup-rvalue-scopes-cf.rs:29:14\n    |\n-LL |     let _x = AddFlags(1).get(); //~ ERROR value does not live long enough\n+LL |     let _x = AddFlags(1).get();\n    |              ^^^^^^^^^^^      - temporary value dropped here while still borrowed\n    |              |\n    |              temporary value does not live long enough\n@@ -27,7 +27,7 @@ LL | }\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/cleanup-rvalue-scopes-cf.rs:30:21\n    |\n-LL |     let _x = &*arg(&AddFlags(1)); //~ ERROR value does not live long enough\n+LL |     let _x = &*arg(&AddFlags(1));\n    |                     ^^^^^^^^^^^ - temporary value dropped here while still borrowed\n    |                     |\n    |                     temporary value does not live long enough\n@@ -40,7 +40,7 @@ LL | }\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/cleanup-rvalue-scopes-cf.rs:31:24\n    |\n-LL |     let ref _x = *arg(&AddFlags(1)); //~ ERROR value does not live long enough\n+LL |     let ref _x = *arg(&AddFlags(1));\n    |                        ^^^^^^^^^^^ - temporary value dropped here while still borrowed\n    |                        |\n    |                        temporary value does not live long enough\n@@ -53,7 +53,7 @@ LL | }\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/cleanup-rvalue-scopes-cf.rs:32:24\n    |\n-LL |     let &ref _x = arg(&AddFlags(1)); //~ ERROR value does not live long enough\n+LL |     let &ref _x = arg(&AddFlags(1));\n    |                        ^^^^^^^^^^^ - temporary value dropped here while still borrowed\n    |                        |\n    |                        temporary value does not live long enough\n@@ -66,11 +66,11 @@ LL | }\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/cleanup-rvalue-scopes-cf.rs:33:14\n    |\n-LL |     let _x = AddFlags(1).get(); //~ ERROR value does not live long enough\n+LL |     let _x = AddFlags(1).get();\n    |              ^^^^^^^^^^^      - temporary value dropped here while still borrowed\n    |              |\n    |              temporary value does not live long enough\n-LL |     let Box { f: _x } = Box { f: AddFlags(1).get() }; //~ ERROR value does not live long enough\n+LL |     let Box { f: _x } = Box { f: AddFlags(1).get() };\n LL | }\n    | - temporary value needs to live until here\n    |\n@@ -79,7 +79,7 @@ LL | }\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/cleanup-rvalue-scopes-cf.rs:34:34\n    |\n-LL |     let Box { f: _x } = Box { f: AddFlags(1).get() }; //~ ERROR value does not live long enough\n+LL |     let Box { f: _x } = Box { f: AddFlags(1).get() };\n    |                                  ^^^^^^^^^^^        - temporary value dropped here while still borrowed\n    |                                  |\n    |                                  temporary value does not live long enough"}, {"sha": "2005bd4dd5ca7e7d67e4535238f9409c49d70ee7", "filename": "src/test/ui/closure-expected-type/expect-two-infer-vars-supply-ty-with-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-two-infer-vars-supply-ty-with-bound-region.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0282]: type annotations needed\n   --> $DIR/expect-two-infer-vars-supply-ty-with-bound-region.rs:8:27\n    |\n-LL |     with_closure(|x: u32, y| {}); //~ ERROR E0282\n+LL |     with_closure(|x: u32, y| {});\n    |                           ^ consider giving this closure parameter a type\n \n error: aborting due to previous error"}, {"sha": "74d3c4977ee65d40c6945d47ec71e59e94993b71", "filename": "src/test/ui/closure_context/issue-26046-fn-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-mut.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnMut`\n   --> $DIR/issue-26046-fn-mut.rs:4:19\n    |\n-LL |     let closure = || { //~ ERROR expected a closure that\n+LL |     let closure = || {\n    |                   ^^ this closure implements `FnMut`, not `Fn`\n LL |         num += 1;\n    |         --- closure is `FnMut` because it mutates the variable `num` here"}, {"sha": "473e8e8417e6e09966d6771e2b9d1f0ecc2e17b4", "filename": "src/test/ui/closure_context/issue-26046-fn-once.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-26046-fn-once.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`\n   --> $DIR/issue-26046-fn-once.rs:4:19\n    |\n-LL |     let closure = move || { //~ ERROR expected a closure\n+LL |     let closure = move || {\n    |                   ^^^^^^^ this closure implements `FnOnce`, not `Fn`\n LL |         vec\n    |         --- closure is `FnOnce` because it moves the variable `vec` out of its environment"}, {"sha": "475e28309cfb19bbf5dcf283e26d87c3f0c35396", "filename": "src/test/ui/closure_promotion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosure_promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosure_promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_promotion.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0597]: borrowed value does not live long enough\n   --> $DIR/closure_promotion.rs:7:26\n    |\n-LL |     let x: &'static _ = &|| { let z = 3; z }; //~ ERROR does not live long enough\n+LL |     let x: &'static _ = &|| { let z = 3; z };\n    |                          ^^^^^^^^^^^^^^^^^^^ temporary value does not live long enough\n LL | }\n    | - temporary value only lives until here"}, {"sha": "9b78aa16a580fabc10079b9822722d8bae234df2", "filename": "src/test/ui/closures/closure-array-break-length.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-array-break-length.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,19 +1,19 @@\n error[E0268]: `continue` outside of loop\n   --> $DIR/closure-array-break-length.rs:2:13\n    |\n-LL |     |_: [_; continue]| {}; //~ ERROR: `continue` outside of loop\n+LL |     |_: [_; continue]| {};\n    |             ^^^^^^^^ cannot break outside of a loop\n \n error[E0268]: `continue` outside of loop\n   --> $DIR/closure-array-break-length.rs:4:19\n    |\n-LL |     while |_: [_; continue]| {} {} //~ ERROR: `continue` outside of loop\n+LL |     while |_: [_; continue]| {} {}\n    |                   ^^^^^^^^ cannot break outside of a loop\n \n error[E0268]: `break` outside of loop\n   --> $DIR/closure-array-break-length.rs:6:19\n    |\n-LL |     while |_: [_; break]| {} {} //~ ERROR: `break` outside of loop\n+LL |     while |_: [_; break]| {} {}\n    |                   ^^^^^ cannot break outside of a loop\n \n error: aborting due to 3 previous errors"}, {"sha": "81c4f4e00aba04dcaed210b3cd9f6505e0e2ab30", "filename": "src/test/ui/closures/closure-bounds-cant-promote-superkind-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-cant-promote-superkind-in-struct.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -2,7 +2,7 @@ error[E0277]: `F` cannot be sent between threads safely\n   --> $DIR/closure-bounds-cant-promote-superkind-in-struct.rs:5:1\n    |\n LL | / fn foo<F>(blk: F) -> X<F> where F: FnOnce() + 'static {\n-LL | |     //~^ ERROR `F` cannot be sent between threads safely\n+LL | |\n LL | |     return X { field: blk };\n LL | | }\n    | |_^ `F` cannot be sent between threads safely"}, {"sha": "3b9fd10af38605f11374cb0ca1239c984cfdcda5", "filename": "src/test/ui/closures/closure-bounds-subtype.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-subtype.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: `F` cannot be shared between threads safely\n   --> $DIR/closure-bounds-subtype.rs:13:5\n    |\n-LL |     take_const_owned(f); //~ ERROR `F` cannot be shared between threads safely [E0277]\n+LL |     take_const_owned(f);\n    |     ^^^^^^^^^^^^^^^^ `F` cannot be shared between threads safely\n    |\n    = help: the trait `std::marker::Sync` is not implemented for `F`"}, {"sha": "e3b623d55248ed3b6c6051103bafff9b016d664d", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -5,7 +5,7 @@ LL |     let mut f: Option<&u32> = None;\n    |         ----- borrowed data cannot be stored into here...\n LL |     closure_expecting_bound(|x| {\n    |                             --- ...because it cannot outlive this closure\n-LL |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n+LL |         f = Some(x);\n    |                  ^ cannot be stored outside of its closure\n \n error: borrowed data cannot be stored outside of its closure\n@@ -15,7 +15,7 @@ LL |     let mut f: Option<&u32> = None;\n    |         ----- borrowed data cannot be stored into here...\n LL |     closure_expecting_bound(|x: &u32| {\n    |                             --------- ...because it cannot outlive this closure\n-LL |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n+LL |         f = Some(x);\n    |                  ^ cannot be stored outside of its closure\n \n error[E0308]: mismatched types\n@@ -31,11 +31,11 @@ note: the anonymous lifetime #2 defined on the body at 37:29...\n    |\n LL |       closure_expecting_bound(|x: &'x u32| {\n    |  _____________________________^\n-LL | |         //~^ ERROR mismatched types\n-LL | |         //~| ERROR mismatched types\n+LL | |\n+LL | |\n LL | |\n ...  |\n-LL | |         //~^ ERROR borrowed data cannot be stored outside of its closure\n+LL | |\n LL | |     });\n    | |_____^\n note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 32:30\n@@ -62,11 +62,11 @@ note: ...does not necessarily outlive the anonymous lifetime #2 defined on the b\n    |\n LL |       closure_expecting_bound(|x: &'x u32| {\n    |  _____________________________^\n-LL | |         //~^ ERROR mismatched types\n-LL | |         //~| ERROR mismatched types\n+LL | |\n+LL | |\n LL | |\n ...  |\n-LL | |         //~^ ERROR borrowed data cannot be stored outside of its closure\n+LL | |\n LL | |     });\n    | |_____^\n "}, {"sha": "332320791d44eb78356bd8019f8730839ffa5f4a", "filename": "src/test/ui/closures/closure-immutable-outer-variable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-immutable-outer-variable.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0594]: cannot assign to captured outer variable in an `FnMut` closure\n    |\n LL |     let y = true;\n    |         - help: consider making `y` mutable: `mut y`\n-LL |     foo(Box::new(move || y = false) as Box<_>); //~ ERROR cannot assign to captured outer variable\n+LL |     foo(Box::new(move || y = false) as Box<_>);\n    |                          ^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "8ca43cd1cffb17d2a0b3009f9af1cf931c47dd27", "filename": "src/test/ui/closures/closure-referencing-itself-issue-25954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosures%2Fclosure-referencing-itself-issue-25954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosures%2Fclosure-referencing-itself-issue-25954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-referencing-itself-issue-25954.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/closure-referencing-itself-issue-25954.rs:15:13\n    |\n-LL |     let q = || p.b.set(5i32); //~ ERROR mismatched types\n+LL |     let q = || p.b.set(5i32);\n    |             ^^^^^^^^^^^^^^^^ cyclic type of infinite size\n \n error: aborting due to previous error"}, {"sha": "5c5480912be43c22b98a11dbae59281d2f415707", "filename": "src/test/ui/closures/closure-reform-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-reform-bad.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/closure-reform-bad.rs:11:15\n    |\n-LL |     call_bare(f)    //~ ERROR mismatched types\n+LL |     call_bare(f)\n    |               ^ expected fn pointer, found closure\n    |\n    = note: expected type `for<'r> fn(&'r str)`"}, {"sha": "65026128ae62226a02f5f49ebddb4d3effb38575", "filename": "src/test/ui/closures/closure-wrong-kind.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosures%2Fclosure-wrong-kind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fclosures%2Fclosure-wrong-kind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-wrong-kind.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0525]: expected a closure that implements the `Fn` trait, but this closure only implements `FnOnce`\n   --> $DIR/closure-wrong-kind.rs:10:19\n    |\n-LL |     let closure = |_| foo(x);  //~ ERROR E0525\n+LL |     let closure = |_| foo(x);\n    |                   ^^^^^^^^-^\n    |                   |       |\n    |                   |       closure is `FnOnce` because it moves the variable `x` out of its environment"}, {"sha": "c424eb08a7a98abe8af0bc4f8b9e3cec2b8218ca", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,21 +1,21 @@\n error: requires at least a format string argument\n   --> $DIR/bad-format-args.rs:2:5\n    |\n-LL |     format!(); //~ ERROR requires at least a format string argument\n+LL |     format!();\n    |     ^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:3:16\n    |\n-LL |     format!(\"\" 1); //~ ERROR expected token: `,`\n+LL |     format!(\"\" 1);\n    |                ^\n \n error: expected token: `,`\n   --> $DIR/bad-format-args.rs:4:19\n    |\n-LL |     format!(\"\", 1 1); //~ ERROR expected token: `,`\n+LL |     format!(\"\", 1 1);\n    |                   ^\n \n error: aborting due to 3 previous errors"}, {"sha": "087084ae5dadee47a1a27e6c45c9b7453e4ba17f", "filename": "src/test/ui/codemap_tests/coherence-overlapping-inherent-impl-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fcoherence-overlapping-inherent-impl-trait.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0592]: duplicate definitions with name `f`\n   --> $DIR/coherence-overlapping-inherent-impl-trait.rs:4:10\n    |\n-LL | impl C { fn f() {} } //~ ERROR duplicate\n+LL | impl C { fn f() {} }\n    |          ^^^^^^^^^ duplicate definitions for `f`\n LL | impl C { fn f() {} }\n    |          --------- other definition for `f`"}, {"sha": "1dd99cfd64fa5d707f7bc5f1a5a225de2bbbfd63", "filename": "src/test/ui/codemap_tests/empty_span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `&'static main::Foo`\n   --> $DIR/empty_span.rs:7:5\n    |\n-LL |     unsafe impl Send for &'static Foo { } //~ ERROR cross-crate traits with a default impl\n+LL |     unsafe impl Send for &'static Foo { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n error: aborting due to previous error"}, {"sha": "13bd666a5077dd88972ab8936b18fd808d00315d", "filename": "src/test/ui/codemap_tests/huge_multispan_highlight.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow immutable local variable `x` as mutable\n LL |     let x = \"foo\";\n    |         - help: make this binding mutable: `mut x`\n ...\n-LL |     let y = &mut x; //~ ERROR cannot borrow\n+LL |     let y = &mut x;\n    |                  ^ cannot borrow mutably\n \n error: aborting due to previous error"}, {"sha": "c37e6b34727bfd5a6ca5f49cc595ac665f9ba875", "filename": "src/test/ui/codemap_tests/issue-11715.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -3,7 +3,7 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n    |\n LL |     let y = &mut x;\n    |                  - first mutable borrow occurs here\n-LL |     let z = &mut x; //~ ERROR cannot borrow\n+LL |     let z = &mut x;\n    |                  ^ second mutable borrow occurs here\n ...\n LL | }"}, {"sha": "9dcaba8748e0f378f3d2093a3b04725e32c28128", "filename": "src/test/ui/codemap_tests/one_line.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0499]: cannot borrow `v` as mutable more than once at a time\n   --> $DIR/one_line.rs:3:12\n    |\n-LL |     v.push(v.pop().unwrap()); //~ ERROR cannot borrow\n+LL |     v.push(v.pop().unwrap());\n    |     -      ^               - first borrow ends here\n    |     |      |\n    |     |      second mutable borrow occurs here"}, {"sha": "70c1093e9ed483bfddaac5e137c146be3b28a6a4", "filename": "src/test/ui/codemap_tests/overlapping_inherent_impls.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Foverlapping_inherent_impls.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0592]: duplicate definitions with name `id`\n   --> $DIR/overlapping_inherent_impls.rs:9:5\n    |\n-LL |     fn id() {} //~ ERROR duplicate definitions\n+LL |     fn id() {}\n    |     ^^^^^^^^^^ duplicate definitions for `id`\n ...\n LL |     fn id() {}\n@@ -10,7 +10,7 @@ LL |     fn id() {}\n error[E0592]: duplicate definitions with name `bar`\n   --> $DIR/overlapping_inherent_impls.rs:19:5\n    |\n-LL |     fn bar(&self) {} //~ ERROR duplicate definitions\n+LL |     fn bar(&self) {}\n    |     ^^^^^^^^^^^^^^^^ duplicate definitions for `bar`\n ...\n LL |     fn bar(&self) {}\n@@ -19,7 +19,7 @@ LL |     fn bar(&self) {}\n error[E0592]: duplicate definitions with name `baz`\n   --> $DIR/overlapping_inherent_impls.rs:29:5\n    |\n-LL |     fn baz(&self) {} //~ ERROR duplicate definitions\n+LL |     fn baz(&self) {}\n    |     ^^^^^^^^^^^^^^^^ duplicate definitions for `baz`\n ...\n LL |     fn baz(&self) {}"}, {"sha": "bcc21e9c7ade8ed5ec4cd34d5f8e2d88d354ca04", "filename": "src/test/ui/codemap_tests/tab.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,15 +1,15 @@\n error[E0425]: cannot find value `bar` in this scope\n   --> $DIR/tab.rs:4:2\n    |\n-LL |     bar; //~ ERROR cannot find value `bar`\n+LL |     bar;\n    |     ^^^ not found in this scope\n \n error[E0308]: mismatched types\n   --> $DIR/tab.rs:8:2\n    |\n LL | fn foo() {\n    |          - help: try adding a return type: `-> &'static str`\n-LL |     \"bar            boo\" //~ ERROR mismatched types\n+LL |     \"bar            boo\"\n    |     ^^^^^^^^^^^^^^^^^^^^ expected (), found reference\n    |\n    = note: expected type `()`"}, {"sha": "70414bbd953d6447beb3ab308fde4dcd6eef9ef5", "filename": "src/test/ui/codemap_tests/tab_2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_2.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: unterminated double quote string\n   --> $DIR/tab_2.rs:4:7\n    |\n-LL |                   \"\"\"; //~ ERROR unterminated double quote\n+LL |                   \"\"\";\n    |  ___________________^\n LL | | }\n    | |__^"}, {"sha": "4b550dbf9ee14e96a730fd9455323870c41ee449", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0382]: use of moved value: `some_vec`\n LL |     some_vec.into_iter();\n    |     -------- value moved here\n LL |     {\n-LL |         println!(\"{:?}\", some_vec); //~ ERROR use of moved\n+LL |         println!(\"{:?}\", some_vec);\n    |                          ^^^^^^^^ value used here after move\n    |\n    = note: move occurs because `some_vec` has type `std::vec::Vec<&str>`, which does not implement the `Copy` trait"}, {"sha": "5027b78b38e34181c271a35d50b75654df135543", "filename": "src/test/ui/codemap_tests/two_files.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftwo_files.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0404]: expected trait, found type alias `Bar`\n   --> $DIR/two_files.rs:5:6\n    |\n-LL | impl Bar for Baz { } //~ ERROR expected trait, found type alias\n+LL | impl Bar for Baz { }\n    |      ^^^ type aliases cannot be used as traits\n    |\n    = note: did you mean to use a trait alias?"}, {"sha": "7aadeb7dfc982f3e7d459e06526f8f0c68a37e22", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0703]: invalid ABI: found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n   --> $DIR/unicode.rs:1:8\n    |\n-LL | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {} //~ ERROR invalid ABI\n+LL | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n    |        ^^^^^^^^^ invalid ABI\n    |\n    = help: valid ABIs: cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, Rust, C, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted"}, {"sha": "92634d8e5f94c6dac0a4770b94ae7408f39841d1", "filename": "src/test/ui/codemap_tests/unicode_2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode_2.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,23 +1,23 @@\n error: invalid width `7` for integer literal\n   --> $DIR/unicode_2.rs:4:25\n    |\n-LL |     let _ = (\"a\u0310e\u0301o\u0308\u0332\", 0u7); //~ ERROR invalid width\n+LL |     let _ = (\"a\u0310e\u0301o\u0308\u0332\", 0u7);\n    |                     ^^^\n    |\n    = help: valid widths are 8, 16, 32, 64 and 128\n \n error: invalid width `42` for integer literal\n   --> $DIR/unicode_2.rs:5:20\n    |\n-LL |     let _ = (\"\uc544\u3042\", 1i42); //~ ERROR invalid width\n+LL |     let _ = (\"\uc544\u3042\", 1i42);\n    |                      ^^^^\n    |\n    = help: valid widths are 8, 16, 32, 64 and 128\n \n error[E0425]: cannot find value `a\u0310e\u0301` in this scope\n   --> $DIR/unicode_2.rs:6:13\n    |\n-LL |     let _ = a\u0310e\u0301; //~ ERROR cannot find\n+LL |     let _ = a\u0310e\u0301;\n    |             ^^ not found in this scope\n \n error: aborting due to 3 previous errors"}, {"sha": "be362c9a78b98855570b182728c4fe6d5e808bb1", "filename": "src/test/ui/coercion/coerce-expect-unsized-ascribed.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-expect-unsized-ascribed.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:9:13\n    |\n-LL |     let _ = box { [1, 2, 3] }: Box<[i32]>; //~ ERROR mismatched types\n+LL |     let _ = box { [1, 2, 3] }: Box<[i32]>;\n    |             ^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n    |\n    = note: expected type `std::boxed::Box<[i32]>`\n@@ -10,7 +10,7 @@ LL |     let _ = box { [1, 2, 3] }: Box<[i32]>; //~ ERROR mismatched types\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:10:13\n    |\n-LL |     let _ = box if true { [1, 2, 3] } else { [1, 3, 4] }: Box<[i32]>; //~ ERROR mismatched types\n+LL |     let _ = box if true { [1, 2, 3] } else { [1, 3, 4] }: Box<[i32]>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n    |\n    = note: expected type `std::boxed::Box<[i32]>`\n@@ -28,7 +28,7 @@ LL |     let _ = box match true { true => [1, 2, 3], false => [1, 3, 4] }: Box<[\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:13:13\n    |\n-LL |     let _ = box { |x| (x as u8) }: Box<Fn(i32) -> _>; //~ ERROR mismatched types\n+LL |     let _ = box { |x| (x as u8) }: Box<Fn(i32) -> _>;\n    |             ^^^^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n    |\n    = note: expected type `std::boxed::Box<dyn std::ops::Fn(i32) -> u8>`\n@@ -37,7 +37,7 @@ LL |     let _ = box { |x| (x as u8) }: Box<Fn(i32) -> _>; //~ ERROR mismatched\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:14:13\n    |\n-LL |     let _ = box if true { false } else { true }: Box<Debug>; //~ ERROR mismatched types\n+LL |     let _ = box if true { false } else { true }: Box<Debug>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found bool\n    |\n    = note: expected type `std::boxed::Box<dyn std::fmt::Debug>`\n@@ -46,7 +46,7 @@ LL |     let _ = box if true { false } else { true }: Box<Debug>; //~ ERROR mism\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:15:13\n    |\n-LL |     let _ = box match true { true => 'a', false => 'b' }: Box<Debug>; //~ ERROR mismatched types\n+LL |     let _ = box match true { true => 'a', false => 'b' }: Box<Debug>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found char\n    |\n    = note: expected type `std::boxed::Box<dyn std::fmt::Debug>`\n@@ -55,7 +55,7 @@ LL |     let _ = box match true { true => 'a', false => 'b' }: Box<Debug>; //~ E\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:17:13\n    |\n-LL |     let _ = &{ [1, 2, 3] }: &[i32]; //~ ERROR mismatched types\n+LL |     let _ = &{ [1, 2, 3] }: &[i32];\n    |             ^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n    |\n    = note: expected type `&[i32]`\n@@ -64,7 +64,7 @@ LL |     let _ = &{ [1, 2, 3] }: &[i32]; //~ ERROR mismatched types\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:18:13\n    |\n-LL |     let _ = &if true { [1, 2, 3] } else { [1, 3, 4] }: &[i32]; //~ ERROR mismatched types\n+LL |     let _ = &if true { [1, 2, 3] } else { [1, 3, 4] }: &[i32];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n    |\n    = note: expected type `&[i32]`\n@@ -82,7 +82,7 @@ LL |     let _ = &match true { true => [1, 2, 3], false => [1, 3, 4] }: &[i32];\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:21:13\n    |\n-LL |     let _ = &{ |x| (x as u8) }: &Fn(i32) -> _; //~ ERROR mismatched types\n+LL |     let _ = &{ |x| (x as u8) }: &Fn(i32) -> _;\n    |             ^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n    |\n    = note: expected type `&dyn std::ops::Fn(i32) -> u8`\n@@ -91,7 +91,7 @@ LL |     let _ = &{ |x| (x as u8) }: &Fn(i32) -> _; //~ ERROR mismatched types\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:22:13\n    |\n-LL |     let _ = &if true { false } else { true }: &Debug; //~ ERROR mismatched types\n+LL |     let _ = &if true { false } else { true }: &Debug;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found bool\n    |\n    = note: expected type `&dyn std::fmt::Debug`\n@@ -100,7 +100,7 @@ LL |     let _ = &if true { false } else { true }: &Debug; //~ ERROR mismatched\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:23:13\n    |\n-LL |     let _ = &match true { true => 'a', false => 'b' }: &Debug; //~ ERROR mismatched types\n+LL |     let _ = &match true { true => 'a', false => 'b' }: &Debug;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::fmt::Debug, found char\n    |\n    = note: expected type `&dyn std::fmt::Debug`\n@@ -109,7 +109,7 @@ LL |     let _ = &match true { true => 'a', false => 'b' }: &Debug; //~ ERROR mi\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:25:13\n    |\n-LL |     let _ = Box::new([1, 2, 3]): Box<[i32]>; //~ ERROR mismatched types\n+LL |     let _ = Box::new([1, 2, 3]): Box<[i32]>;\n    |             ^^^^^^^^^^^^^^^^^^^ expected slice, found array of 3 elements\n    |\n    = note: expected type `std::boxed::Box<[i32]>`\n@@ -118,7 +118,7 @@ LL |     let _ = Box::new([1, 2, 3]): Box<[i32]>; //~ ERROR mismatched types\n error[E0308]: mismatched types\n   --> $DIR/coerce-expect-unsized-ascribed.rs:26:13\n    |\n-LL |     let _ = Box::new(|x| (x as u8)): Box<Fn(i32) -> _>; //~ ERROR mismatched types\n+LL |     let _ = Box::new(|x| (x as u8)): Box<Fn(i32) -> _>;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^ expected trait std::ops::Fn, found closure\n    |\n    = note: expected type `std::boxed::Box<dyn std::ops::Fn(i32) -> _>`"}, {"sha": "ff30ebc09c63acf5b43aee6dadee8f8c63160660", "filename": "src/test/ui/coercion/coerce-to-bang-cast.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang-cast.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -9,7 +9,7 @@ LL |     let y = {return; 22} as !;\n error[E0605]: non-primitive cast: `i32` as `!`\n   --> $DIR/coerce-to-bang-cast.rs:11:13\n    |\n-LL |     let y = 22 as !; //~ ERROR non-primitive cast\n+LL |     let y = 22 as !;\n    |             ^^^^^^^\n    |\n    = note: an `as` expression can only be used to convert between primitive types. Consider using the `From` trait"}, {"sha": "a46e97da8159b0fb15074817f385292208037755", "filename": "src/test/ui/coercion/coerce-to-bang.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoerce-to-bang.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -10,7 +10,7 @@ LL |     foo(return, 22, 44);\n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:18:13\n    |\n-LL |     foo(22, 44, return); //~ ERROR mismatched types\n+LL |     foo(22, 44, return);\n    |             ^^ expected !, found integer\n    |\n    = note: expected type `!`\n@@ -28,7 +28,7 @@ LL |     foo(a, b, c); // ... and hence a reference to `a` is expected to diverg\n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:36:12\n    |\n-LL |     foo(a, b, c); //~ ERROR mismatched types\n+LL |     foo(a, b, c);\n    |            ^ expected !, found integer\n    |\n    = note: expected type `!`\n@@ -37,7 +37,7 @@ LL |     foo(a, b, c); //~ ERROR mismatched types\n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:45:12\n    |\n-LL |     foo(a, b, c); //~ ERROR mismatched types\n+LL |     foo(a, b, c);\n    |            ^ expected !, found integer\n    |\n    = note: expected type `!`\n@@ -46,7 +46,7 @@ LL |     foo(a, b, c); //~ ERROR mismatched types\n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:50:21\n    |\n-LL |     let x: [!; 2] = [return, 22]; //~ ERROR mismatched types\n+LL |     let x: [!; 2] = [return, 22];\n    |                     ^^^^^^^^^^^^ expected !, found integer\n    |\n    = note: expected type `[!; 2]`\n@@ -55,7 +55,7 @@ LL |     let x: [!; 2] = [return, 22]; //~ ERROR mismatched types\n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:55:22\n    |\n-LL |     let x: [!; 2] = [22, return]; //~ ERROR mismatched types\n+LL |     let x: [!; 2] = [22, return];\n    |                      ^^ expected !, found integer\n    |\n    = note: expected type `!`\n@@ -64,7 +64,7 @@ LL |     let x: [!; 2] = [22, return]; //~ ERROR mismatched types\n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:60:37\n    |\n-LL |     let x: (usize, !, usize) = (22, 44, 66); //~ ERROR mismatched types\n+LL |     let x: (usize, !, usize) = (22, 44, 66);\n    |                                     ^^ expected !, found integer\n    |\n    = note: expected type `!`\n@@ -82,7 +82,7 @@ LL |     let x: (usize, !, usize) = (return, 44, 66);\n error[E0308]: mismatched types\n   --> $DIR/coerce-to-bang.rs:76:37\n    |\n-LL |     let x: (usize, !, usize) = (22, 44, return); //~ ERROR mismatched types\n+LL |     let x: (usize, !, usize) = (22, 44, return);\n    |                                     ^^ expected !, found integer\n    |\n    = note: expected type `!`"}, {"sha": "057de5b625e874bcc9f8f2d3a7998c94a541272c", "filename": "src/test/ui/coercion/coercion-missing-tail-expected-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-missing-tail-expected-type.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:3:24\n    |\n-LL | fn plus_one(x: i32) -> i32 { //~ ERROR mismatched types\n+LL | fn plus_one(x: i32) -> i32 {\n    |    --------            ^^^ expected i32, found ()\n    |    |\n    |    this function's body doesn't return\n@@ -14,7 +14,7 @@ LL |     x + 1;\n error[E0308]: mismatched types\n   --> $DIR/coercion-missing-tail-expected-type.rs:7:13\n    |\n-LL | fn foo() -> Result<u8, u64> { //~ ERROR mismatched types\n+LL | fn foo() -> Result<u8, u64> {\n    |    ---      ^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found ()\n    |    |\n    |    this function's body doesn't return"}, {"sha": "86a63eb569918bfac4a6f49390b29845ebbf3ce1", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-negative.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-negative.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,19 +1,19 @@\n error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker1`\n   --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:14:1\n    |\n-LL | impl !Marker1 for dyn Object + Marker2 { }   //~ ERROR E0371\n+LL | impl !Marker1 for dyn Object + Marker2 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker1`\n \n error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker2`\n   --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:16:1\n    |\n-LL | impl !Marker2 for dyn Object + Marker2 { }   //~ ERROR E0371\n+LL | impl !Marker2 for dyn Object + Marker2 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker2`\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:22:1\n    |\n-LL | impl !Send for dyn Marker2 {} //~ ERROR E0117\n+LL | impl !Send for dyn Marker2 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference only types defined in this crate\n@@ -22,13 +22,13 @@ LL | impl !Send for dyn Marker2 {} //~ ERROR E0117\n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`\n   --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:26:1\n    |\n-LL | impl !Send for dyn Object {} //~ ERROR E0321\n+LL | impl !Send for dyn Object {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + Marker2 + 'static)`\n   --> $DIR/coherence-impl-trait-for-marker-trait-negative.rs:27:1\n    |\n-LL | impl !Send for dyn Object + Marker2 {} //~ ERROR E0321\n+LL | impl !Send for dyn Object + Marker2 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n error: aborting due to 5 previous errors"}, {"sha": "536b4625aee2edb7e0bbcbc97e12153a3267c9d3", "filename": "src/test/ui/coherence/coherence-impl-trait-for-marker-trait-positive.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-marker-trait-positive.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,19 +1,19 @@\n error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker1`\n   --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:14:1\n    |\n-LL | impl Marker1 for dyn Object + Marker2 { }   //~ ERROR E0371\n+LL | impl Marker1 for dyn Object + Marker2 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker1`\n \n error[E0371]: the object type `(dyn Object + Marker2 + 'static)` automatically implements the trait `Marker2`\n   --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:16:1\n    |\n-LL | impl Marker2 for dyn Object + Marker2 { }   //~ ERROR E0371\n+LL | impl Marker2 for dyn Object + Marker2 { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Object + Marker2 + 'static)` automatically implements trait `Marker2`\n \n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:22:1\n    |\n-LL | unsafe impl Send for dyn Marker2 {} //~ ERROR E0117\n+LL | unsafe impl Send for dyn Marker2 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference only types defined in this crate\n@@ -22,13 +22,13 @@ LL | unsafe impl Send for dyn Marker2 {} //~ ERROR E0117\n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + 'static)`\n   --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:26:1\n    |\n-LL | unsafe impl Send for dyn Object {} //~ ERROR E0321\n+LL | unsafe impl Send for dyn Object {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`, can only be implemented for a struct/enum type, not `(dyn Object + Marker2 + 'static)`\n   --> $DIR/coherence-impl-trait-for-marker-trait-positive.rs:27:1\n    |\n-LL | unsafe impl Send for dyn Object + Marker2 {} //~ ERROR E0321\n+LL | unsafe impl Send for dyn Object + Marker2 {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n error: aborting due to 5 previous errors"}, {"sha": "e5f5c5ed20d55b37376a0b2e0eaca1accea16bf4", "filename": "src/test/ui/compare-method/proj-outlives-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fproj-outlives-region.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0276]: impl has stricter requirements than trait\n LL |     fn foo() where T: 'a;\n    |     --------------------- definition of `foo` from trait\n ...\n-LL |     fn foo() where U: 'a { } //~ ERROR E0276\n+LL |     fn foo() where U: 'a { }\n    |     ^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `U: 'a`\n \n error: aborting due to previous error"}, {"sha": "5a584c7d6ed9fbe60fd63caeaaf4606f4d82e72b", "filename": "src/test/ui/compare-method/region-extra.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Fregion-extra.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0276]: impl has stricter requirements than trait\n LL |     fn foo();\n    |     --------- definition of `foo` from trait\n ...\n-LL |     fn foo() where 'a: 'b { } //~ ERROR impl has stricter\n+LL |     fn foo() where 'a: 'b { }\n    |     ^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'a: 'b`\n \n error: aborting due to previous error"}, {"sha": "a33908c01c842a05ead6f57451c3b97935b0cf27", "filename": "src/test/ui/compare-method/reordered-type-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Freordered-type-param.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0053]: method `b` has an incompatible type for trait\n LL |   fn b<C:Clone,D>(&self, x: C) -> C;\n    |                             - type in trait\n ...\n-LL |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() } //~ ERROR method `b` has an incompatible type\n+LL |   fn b<F:Clone,G>(&self, _x: G) -> G { panic!() }\n    |                              ^ expected type parameter, found a different type parameter\n    |\n    = note: expected type `fn(&E, F) -> F`"}, {"sha": "5d09038076f982efb933977620d15ee74df9bceb", "filename": "src/test/ui/compare-method/trait-bound-on-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompare-method%2Ftrait-bound-on-type-parameter.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0276]: impl has stricter requirements than trait\n LL |   fn b<C,D>(&self, x: C) -> C;\n    |   ---------------------------- definition of `b` from trait\n ...\n-LL |     fn b<F: Sync, G>(&self, _x: F) -> F { panic!() } //~ ERROR E0276\n+LL |     fn b<F: Sync, G>(&self, _x: F) -> F { panic!() }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `F: std::marker::Sync`\n \n error: aborting due to previous error"}, {"sha": "8aa1878c5d7cd7581b97191651b54ff089f32c9f", "filename": "src/test/ui/compile_error_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcompile_error_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fcompile_error_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcompile_error_macro.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: a very descriptive error message\n   --> $DIR/compile_error_macro.rs:2:5\n    |\n-LL |     compile_error!(\"a very descriptive error message\"); //~ ERROR: a very descriptive error message\n+LL |     compile_error!(\"a very descriptive error message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "61fb9de1ef96cfb843e52627940818d8044deb28", "filename": "src/test/ui/concat.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconcat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconcat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconcat.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,27 +1,27 @@\n error: cannot concatenate a byte string literal\n   --> $DIR/concat.rs:2:13\n    |\n-LL |     concat!(b'f');  //~ ERROR: cannot concatenate a byte string literal\n+LL |     concat!(b'f');\n    |             ^^^^\n \n error: cannot concatenate a byte string literal\n   --> $DIR/concat.rs:3:13\n    |\n-LL |     concat!(b\"foo\");  //~ ERROR: cannot concatenate a byte string literal\n+LL |     concat!(b\"foo\");\n    |             ^^^^^^\n \n error: expected a literal\n   --> $DIR/concat.rs:4:13\n    |\n-LL |     concat!(foo);   //~ ERROR: expected a literal\n+LL |     concat!(foo);\n    |             ^^^\n    |\n    = note: only literals (like `\"foo\"`, `42` and `3.14`) can be passed to `concat!()`\n \n error: expected a literal\n   --> $DIR/concat.rs:5:13\n    |\n-LL |     concat!(foo()); //~ ERROR: expected a literal\n+LL |     concat!(foo());\n    |             ^^^^^\n    |\n    = note: only literals (like `\"foo\"`, `42` and `3.14`) can be passed to `concat!()`"}, {"sha": "8d308f0c96fbd044c5b06f2dd9a2c3df3235fff0", "filename": "src/test/ui/conditional-compilation/cfg-attr-crate-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0658]: no_core is experimental (see issue #29639)\n   --> $DIR/cfg-attr-crate-2.rs:6:21\n    |\n-LL | #![cfg_attr(broken, no_core)] //~ ERROR no_core is experimental\n+LL | #![cfg_attr(broken, no_core)]\n    |                     ^^^^^^^\n    |\n    = help: add #![feature(no_core)] to the crate attributes to enable"}, {"sha": "96c571ebebdb47681fcaf03f28e0191cd4781b9c", "filename": "src/test/ui/conditional-compilation/cfg-attr-invalid-predicate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-invalid-predicate.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0537]: invalid predicate `foo`\n   --> $DIR/cfg-attr-invalid-predicate.rs:1:7\n    |\n-LL | #[cfg(foo(bar))] //~ ERROR invalid predicate `foo`\n+LL | #[cfg(foo(bar))]\n    |       ^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "8485459ca6bd93cb52f4f4373371b827e40f1a0e", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0658]: no_core is experimental (see issue #29639)\n   --> $DIR/cfg-attr-multi-invalid-1.rs:4:21\n    |\n-LL | #![cfg_attr(broken, no_core, no_std)] //~ ERROR no_core is experimental\n+LL | #![cfg_attr(broken, no_core, no_std)]\n    |                     ^^^^^^^\n    |\n    = help: add #![feature(no_core)] to the crate attributes to enable"}, {"sha": "2a673ea81317f7094293ca56aacd8d33bd0a9134", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0658]: no_core is experimental (see issue #29639)\n   --> $DIR/cfg-attr-multi-invalid-2.rs:4:29\n    |\n-LL | #![cfg_attr(broken, no_std, no_core)] //~ ERROR no_core is experimental\n+LL | #![cfg_attr(broken, no_std, no_core)]\n    |                             ^^^^^^^\n    |\n    = help: add #![feature(no_core)] to the crate attributes to enable"}, {"sha": "64e9570773a65092044a337189d3db302cf54e1d", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-true.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,33 +1,33 @@\n warning: use of deprecated item 'MustUseDeprecated'\n   --> $DIR/cfg-attr-multi-true.rs:12:6\n    |\n-LL | impl MustUseDeprecated { //~ warning: use of deprecated item\n+LL | impl MustUseDeprecated {\n    |      ^^^^^^^^^^^^^^^^^\n    |\n    = note: #[warn(deprecated)] on by default\n \n warning: use of deprecated item 'MustUseDeprecated'\n   --> $DIR/cfg-attr-multi-true.rs:19:5\n    |\n-LL |     MustUseDeprecated::new(); //~ warning: use of deprecated item\n+LL |     MustUseDeprecated::new();\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'MustUseDeprecated'\n   --> $DIR/cfg-attr-multi-true.rs:13:17\n    |\n-LL |     fn new() -> MustUseDeprecated { //~ warning: use of deprecated item\n+LL |     fn new() -> MustUseDeprecated {\n    |                 ^^^^^^^^^^^^^^^^^\n \n warning: use of deprecated item 'MustUseDeprecated'\n   --> $DIR/cfg-attr-multi-true.rs:14:9\n    |\n-LL |         MustUseDeprecated {} //~ warning: use of deprecated item\n+LL |         MustUseDeprecated {}\n    |         ^^^^^^^^^^^^^^^^^\n \n warning: unused `MustUseDeprecated` that must be used\n   --> $DIR/cfg-attr-multi-true.rs:19:5\n    |\n-LL |     MustUseDeprecated::new(); //~ warning: use of deprecated item\n+LL |     MustUseDeprecated::new();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here"}, {"sha": "3dfbd6df256ebbdc3e09708544a0771a3e1473b0", "filename": "src/test/ui/conditional-compilation/cfg-attr-parse.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,31 +1,31 @@\n error: expected identifier, found `)`\n   --> $DIR/cfg-attr-parse.rs:4:12\n    |\n-LL | #[cfg_attr()] //~ error: expected identifier, found `)`\n+LL | #[cfg_attr()]\n    |            ^ expected identifier\n \n error: expected `,`, found `)`\n   --> $DIR/cfg-attr-parse.rs:8:17\n    |\n-LL | #[cfg_attr(all())] //~ error: expected `,`, found `)`\n+LL | #[cfg_attr(all())]\n    |                 ^ expected `,`\n \n error: expected identifier, found `,`\n   --> $DIR/cfg-attr-parse.rs:16:18\n    |\n-LL | #[cfg_attr(all(),,)] //~ ERROR expected identifier\n+LL | #[cfg_attr(all(),,)]\n    |                  ^ expected identifier\n \n error: expected identifier, found `,`\n   --> $DIR/cfg-attr-parse.rs:28:28\n    |\n-LL | #[cfg_attr(all(), must_use,,)] //~ ERROR expected identifier\n+LL | #[cfg_attr(all(), must_use,,)]\n    |                            ^ expected identifier\n \n error: expected identifier, found `,`\n   --> $DIR/cfg-attr-parse.rs:40:40\n    |\n-LL | #[cfg_attr(all(), must_use, deprecated,,)] //~ ERROR expected identifier\n+LL | #[cfg_attr(all(), must_use, deprecated,,)]\n    |                                        ^ expected identifier\n \n error: aborting due to 5 previous errors"}, {"sha": "ae37461cab8157567fb21dab85b60a13dd7ae428", "filename": "src/test/ui/conditional-compilation/cfg-attr-syntax-validation.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-syntax-validation.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,55 +1,55 @@\n error: `cfg` is not followed by parentheses\n   --> $DIR/cfg-attr-syntax-validation.rs:1:1\n    |\n-LL | #[cfg] //~ ERROR `cfg` is not followed by parentheses\n+LL | #[cfg]\n    | ^^^^^^ help: expected syntax is: `cfg(/* predicate */)`\n \n error: `cfg` is not followed by parentheses\n   --> $DIR/cfg-attr-syntax-validation.rs:4:1\n    |\n-LL | #[cfg = 10] //~ ERROR `cfg` is not followed by parentheses\n+LL | #[cfg = 10]\n    | ^^^^^^^^^^^ help: expected syntax is: `cfg(/* predicate */)`\n \n error: `cfg` predicate is not specified\n   --> $DIR/cfg-attr-syntax-validation.rs:7:1\n    |\n-LL | #[cfg()] //~ ERROR `cfg` predicate is not specified\n+LL | #[cfg()]\n    | ^^^^^^^^\n \n error: multiple `cfg` predicates are specified\n   --> $DIR/cfg-attr-syntax-validation.rs:10:10\n    |\n-LL | #[cfg(a, b)] //~ ERROR multiple `cfg` predicates are specified\n+LL | #[cfg(a, b)]\n    |          ^\n \n error: `cfg` predicate key cannot be a literal\n   --> $DIR/cfg-attr-syntax-validation.rs:13:7\n    |\n-LL | #[cfg(\"str\")] //~ ERROR `cfg` predicate key cannot be a literal\n+LL | #[cfg(\"str\")]\n    |       ^^^^^\n \n error: `cfg` predicate key must be an identifier\n   --> $DIR/cfg-attr-syntax-validation.rs:16:7\n    |\n-LL | #[cfg(a::b)] //~ ERROR `cfg` predicate key must be an identifier\n+LL | #[cfg(a::b)]\n    |       ^^^^\n \n error[E0537]: invalid predicate `a`\n   --> $DIR/cfg-attr-syntax-validation.rs:19:7\n    |\n-LL | #[cfg(a())] //~ ERROR invalid predicate `a`\n+LL | #[cfg(a())]\n    |       ^^^\n \n error[E0565]: literal in `cfg` predicate value must be a string\n   --> $DIR/cfg-attr-syntax-validation.rs:22:11\n    |\n-LL | #[cfg(a = 10)] //~ ERROR literal in `cfg` predicate value must be a string\n+LL | #[cfg(a = 10)]\n    |           ^^\n \n error[E0565]: literal in `cfg` predicate value must be a string\n   --> $DIR/cfg-attr-syntax-validation.rs:25:11\n    |\n-LL | #[cfg(a = b\"hi\")]  //~ ERROR literal in `cfg` predicate value must be a string\n+LL | #[cfg(a = b\"hi\")]\n    |           ^^^^^ help: consider removing the prefix: `\"hi\"`\n \n error: expected unsuffixed literal or identifier, found `concat!(\"nonexistent\")`"}, {"sha": "d0b59c3994cc0b5c053ebd9f9bc7ce909b7d039e", "filename": "src/test/ui/conditional-compilation/cfg-attr-unknown-attribute-macro-expansion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-unknown-attribute-macro-expansion.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0658]: The attribute `unknown` is currently unknown to the compiler and may have meaning added to it in the future (see issue #29642)\n   --> $DIR/cfg-attr-unknown-attribute-macro-expansion.rs:3:27\n    |\n-LL |         #[cfg_attr(all(), unknown)] //~ ERROR `unknown` is currently unknown\n+LL |         #[cfg_attr(all(), unknown)]\n    |                           ^^^^^^^\n ...\n LL | foo!();"}, {"sha": "c39055f01721b29d73a84b2a1e310e2c59ca3646", "filename": "src/test/ui/conflicting-repr-hints.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconflicting-repr-hints.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,65 +1,65 @@\n warning[E0566]: conflicting representation hints\n   --> $DIR/conflicting-repr-hints.rs:9:8\n    |\n-LL | #[repr(C, u64)] //~ WARNING conflicting representation hints\n+LL | #[repr(C, u64)]\n    |        ^  ^^^\n \n warning[E0566]: conflicting representation hints\n   --> $DIR/conflicting-repr-hints.rs:12:8\n    |\n-LL | #[repr(u32, u64)] //~ WARNING conflicting representation hints\n+LL | #[repr(u32, u64)]\n    |        ^^^  ^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n   --> $DIR/conflicting-repr-hints.rs:19:1\n    |\n-LL | struct F(i32); //~ ERROR type has conflicting packed and align representation hints\n+LL | struct F(i32);\n    | ^^^^^^^^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n   --> $DIR/conflicting-repr-hints.rs:23:1\n    |\n-LL | struct G(i32); //~ ERROR type has conflicting packed and align representation hints\n+LL | struct G(i32);\n    | ^^^^^^^^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n   --> $DIR/conflicting-repr-hints.rs:27:1\n    |\n-LL | struct H(i32); //~ ERROR type has conflicting packed and align representation hints\n+LL | struct H(i32);\n    | ^^^^^^^^^^^^^^\n \n error[E0634]: type has conflicting packed representation hints\n   --> $DIR/conflicting-repr-hints.rs:30:1\n    |\n-LL | struct I(i32); //~ ERROR type has conflicting packed representation hints\n+LL | struct I(i32);\n    | ^^^^^^^^^^^^^^\n \n error[E0634]: type has conflicting packed representation hints\n   --> $DIR/conflicting-repr-hints.rs:34:1\n    |\n-LL | struct J(i32); //~ ERROR type has conflicting packed representation hints\n+LL | struct J(i32);\n    | ^^^^^^^^^^^^^^\n \n error[E0587]: type has conflicting packed and align representation hints\n   --> $DIR/conflicting-repr-hints.rs:40:1\n    |\n-LL | / union X { //~ ERROR type has conflicting packed and align representation hints\n+LL | / union X {\n LL | |     i: i32\n LL | | }\n    | |_^\n \n error[E0587]: type has conflicting packed and align representation hints\n   --> $DIR/conflicting-repr-hints.rs:46:1\n    |\n-LL | / union Y { //~ ERROR type has conflicting packed and align representation hints\n+LL | / union Y {\n LL | |     i: i32\n LL | | }\n    | |_^\n \n error[E0587]: type has conflicting packed and align representation hints\n   --> $DIR/conflicting-repr-hints.rs:52:1\n    |\n-LL | / union Z { //~ ERROR type has conflicting packed and align representation hints\n+LL | / union Z {\n LL | |     i: i32\n LL | | }\n    | |_^"}, {"sha": "7cd1941d80e83355fd9bae045e460719268264a5", "filename": "src/test/ui/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0599]: no method named `closure` found for type `Obj<[closure@$DIR/issue-\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `closure` not found for this\n ...\n-LL |     o_closure.closure(); //~ ERROR no method named `closure` found\n+LL |     o_closure.closure();\n    |               ^^^^^^^ field, not a method\n    |\n    = help: use `(o_closure.closure)(...)` if you meant to call the function stored in the `closure` field\n@@ -26,7 +26,7 @@ error[E0599]: no method named `closure` found for type `Obj<fn() -> u32 {func}>`\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `closure` not found for this\n ...\n-LL |     o_func.closure(); //~ ERROR no method named `closure` found\n+LL |     o_func.closure();\n    |            ^^^^^^^ field, not a method\n    |\n    = help: use `(o_func.closure)(...)` if you meant to call the function stored in the `closure` field\n@@ -37,7 +37,7 @@ error[E0599]: no method named `boxed_closure` found for type `BoxedObj` in the c\n LL | struct BoxedObj {\n    | --------------- method `boxed_closure` not found for this\n ...\n-LL |     boxed_fn.boxed_closure();//~ ERROR no method named `boxed_closure` found\n+LL |     boxed_fn.boxed_closure();\n    |              ^^^^^^^^^^^^^ field, not a method\n    |\n    = help: use `(boxed_fn.boxed_closure)(...)` if you meant to call the function stored in the `boxed_closure` field\n@@ -48,7 +48,7 @@ error[E0599]: no method named `boxed_closure` found for type `BoxedObj` in the c\n LL | struct BoxedObj {\n    | --------------- method `boxed_closure` not found for this\n ...\n-LL |     boxed_closure.boxed_closure();//~ ERROR no method named `boxed_closure` found\n+LL |     boxed_closure.boxed_closure();\n    |                   ^^^^^^^^^^^^^ field, not a method\n    |\n    = help: use `(boxed_closure.boxed_closure)(...)` if you meant to call the function stored in the `boxed_closure` field\n@@ -59,7 +59,7 @@ error[E0599]: no method named `closure` found for type `Obj<fn() -> u32 {func}>`\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `closure` not found for this\n ...\n-LL |     w.wrap.closure();//~ ERROR no method named `closure` found\n+LL |     w.wrap.closure();\n    |            ^^^^^^^ field, not a method\n    |\n    = help: use `(w.wrap.closure)(...)` if you meant to call the function stored in the `closure` field\n@@ -81,7 +81,7 @@ error[E0599]: no method named `closure` found for type `Obj<std::boxed::Box<(dyn\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n    | -------------------------------------- method `closure` not found for this\n ...\n-LL |     check_expression().closure();//~ ERROR no method named `closure` found\n+LL |     check_expression().closure();\n    |                        ^^^^^^^ field, not a method\n    |\n    = help: use `(check_expression().closure)(...)` if you meant to call the function stored in the `closure` field\n@@ -92,7 +92,7 @@ error[E0599]: no method named `f1` found for type `FuncContainer` in the current\n LL | struct FuncContainer {\n    | -------------------- method `f1` not found for this\n ...\n-LL |             (*self.container).f1(1); //~ ERROR no method named `f1` found\n+LL |             (*self.container).f1(1);\n    |                               ^^ field, not a method\n    |\n    = help: use `((*self.container).f1)(...)` if you meant to call the function stored in the `f1` field\n@@ -103,7 +103,7 @@ error[E0599]: no method named `f2` found for type `FuncContainer` in the current\n LL | struct FuncContainer {\n    | -------------------- method `f2` not found for this\n ...\n-LL |             (*self.container).f2(1); //~ ERROR no method named `f2` found\n+LL |             (*self.container).f2(1);\n    |                               ^^ field, not a method\n    |\n    = help: use `((*self.container).f2)(...)` if you meant to call the function stored in the `f2` field\n@@ -114,7 +114,7 @@ error[E0599]: no method named `f3` found for type `FuncContainer` in the current\n LL | struct FuncContainer {\n    | -------------------- method `f3` not found for this\n ...\n-LL |             (*self.container).f3(1); //~ ERROR no method named `f3` found\n+LL |             (*self.container).f3(1);\n    |                               ^^ field, not a method\n    |\n    = help: use `((*self.container).f3)(...)` if you meant to call the function stored in the `f3` field"}, {"sha": "cce961f1e4edc3991053835991aae584daa0cfb1", "filename": "src/test/ui/confuse-field-and-method/issue-33784.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-33784.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,23 +1,23 @@\n error[E0599]: no method named `closure` found for type `&Obj<[closure@$DIR/issue-33784.rs:25:43: 25:48]>` in the current scope\n   --> $DIR/issue-33784.rs:27:7\n    |\n-LL |     p.closure(); //~ ERROR no method named `closure` found\n+LL |     p.closure();\n    |       ^^^^^^^ field, not a method\n    |\n    = help: use `(p.closure)(...)` if you meant to call the function stored in the `closure` field\n \n error[E0599]: no method named `fn_ptr` found for type `&&Obj<[closure@$DIR/issue-33784.rs:25:43: 25:48]>` in the current scope\n   --> $DIR/issue-33784.rs:29:7\n    |\n-LL |     q.fn_ptr(); //~ ERROR no method named `fn_ptr` found\n+LL |     q.fn_ptr();\n    |       ^^^^^^ field, not a method\n    |\n    = help: use `(q.fn_ptr)(...)` if you meant to call the function stored in the `fn_ptr` field\n \n error[E0599]: no method named `c_fn_ptr` found for type `&D` in the current scope\n   --> $DIR/issue-33784.rs:32:7\n    |\n-LL |     s.c_fn_ptr(); //~ ERROR no method named `c_fn_ptr` found\n+LL |     s.c_fn_ptr();\n    |       ^^^^^^^^ field, not a method\n    |\n    = help: use `(s.c_fn_ptr)(...)` if you meant to call the function stored in the `c_fn_ptr` field"}, {"sha": "97c949e32e341f43d3d63ae2a21dc0fa80a6dcfc", "filename": "src/test/ui/confuse-field-and-method/private-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fprivate-field.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -4,7 +4,7 @@ error[E0599]: no method named `dog_age` found for type `animal::Dog` in the curr\n LL |     pub struct Dog {\n    |     -------------- method `dog_age` not found for this\n ...\n-LL |     let dog_age = dog.dog_age(); //~ ERROR no method\n+LL |     let dog_age = dog.dog_age();\n    |                       ^^^^^^^ private field, not a method\n \n error: aborting due to previous error"}, {"sha": "2f7a80f0c8fde5ef68441a7c3194cec9fa2b1c8f", "filename": "src/test/ui/const-generics/const-expression-parameter.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-expression-parameter.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,13 +1,13 @@\n error: expected identifier, found `<-`\n   --> $DIR/const-expression-parameter.rs:9:19\n    |\n-LL |     i32_identity::<-1>(); //~ ERROR expected identifier, found `<-`\n+LL |     i32_identity::<-1>();\n    |                   ^^ expected identifier\n \n error: expected one of `,` or `>`, found `+`\n   --> $DIR/const-expression-parameter.rs:13:22\n    |\n-LL |     i32_identity::<1 + 2>(); //~ ERROR expected one of `,` or `>`, found `+`\n+LL |     i32_identity::<1 + 2>();\n    |                      ^ expected one of `,` or `>` here\n \n warning: the feature `const_generics` is incomplete and may cause the compiler to crash"}, {"sha": "c0cd7bace471cc9c70df412aeb52b25d97ce4757", "filename": "src/test/ui/const-generics/const-fn-with-const-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-fn-with-const-param.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -8,7 +8,7 @@ error: const parameters are not permitted in `const fn`\n   --> $DIR/const-fn-with-const-param.rs:4:1\n    |\n LL | / const fn const_u32_identity<const X: u32>() -> u32 {\n-LL | |     //~^ ERROR const parameters are not permitted in `const fn`\n+LL | |\n LL | |     X\n LL | | }\n    | |_^"}, {"sha": "e37b34fac3351c44399b74fb282509162e7faa0b", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -11,7 +11,7 @@ LL | fn foo<const X: u32>() {\n    |              - const variable from outer function\n LL |     fn bar() -> u32 {\n    |        --- try adding a local generic parameter in this method instead\n-LL |         X //~ ERROR can't use generic parameters from outer function\n+LL |         X\n    |         ^ use of generic parameter from outer function\n \n error: aborting due to previous error"}, {"sha": "b9f874ff18bb3696a7c6d05d22b4f16de891e8d8", "filename": "src/test/ui/const-generics/invalid-constant-in-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-constant-in-args.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0107]: wrong number of const arguments: expected 0, found 1\n   --> $DIR/invalid-constant-in-args.rs:2:22\n    |\n-LL |     let _: Vec<&str, \"a\"> = Vec::new(); //~ ERROR wrong number of const arguments\n+LL |     let _: Vec<&str, \"a\"> = Vec::new();\n    |                      ^^^ unexpected const argument\n \n error: aborting due to previous error"}, {"sha": "00286b0b0e0f8c439659539fbce03a569d245a0b", "filename": "src/test/ui/consts/const-array-oob-arith.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob-arith.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/const-array-oob-arith.rs:7:45\n    |\n-LL | const BLUB: [i32; (ARR[0] - 40) as usize] = [5]; //~ ERROR: mismatched types\n+LL | const BLUB: [i32; (ARR[0] - 40) as usize] = [5];\n    |                                             ^^^ expected an array with a fixed size of 2 elements, found one with 1 elements\n    |\n    = note: expected type `[i32; 2]`\n@@ -10,7 +10,7 @@ LL | const BLUB: [i32; (ARR[0] - 40) as usize] = [5]; //~ ERROR: mismatched type\n error[E0308]: mismatched types\n   --> $DIR/const-array-oob-arith.rs:8:44\n    |\n-LL | const BOO: [i32; (ARR[0] - 41) as usize] = [5, 99]; //~ ERROR: mismatched types\n+LL | const BOO: [i32; (ARR[0] - 41) as usize] = [5, 99];\n    |                                            ^^^^^^^ expected an array with a fixed size of 1 elements, found one with 2 elements\n    |\n    = note: expected type `[i32; 1]`"}, {"sha": "9960ccb4166b5aea72447418334c81b85d444512", "filename": "src/test/ui/consts/const-cast-different-types.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-different-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-different-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-different-types.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,13 +1,13 @@\n error[E0606]: casting `&'static str` as `*const u8` is invalid\n   --> $DIR/const-cast-different-types.rs:2:23\n    |\n-LL | static b: *const u8 = a as *const u8; //~ ERROR casting\n+LL | static b: *const u8 = a as *const u8;\n    |                       ^^^^^^^^^^^^^^\n \n error[E0606]: casting `&&'static str` as `*const u8` is invalid\n   --> $DIR/const-cast-different-types.rs:3:23\n    |\n-LL | static c: *const u8 = &a as *const u8; //~ ERROR casting\n+LL | static c: *const u8 = &a as *const u8;\n    |                       ^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "ad816d9297bd02fc7f7dc5adbd5bc12a0fdbadb4", "filename": "src/test/ui/consts/const-cast-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-cast-wrong-type.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/const-cast-wrong-type.rs:2:23\n    |\n-LL | static b: *const i8 = &a as *const i8; //~ ERROR mismatched types\n+LL | static b: *const i8 = &a as *const i8;\n    |                       ^^^^^^^^^^^^^^^ expected u8, found i8\n \n error: aborting due to previous error"}, {"sha": "a61f9b303aa1517c0475de7c3e413791f91d4f49", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:3:1\n    |\n-LL | pub const A: i8 = -std::i8::MIN; //~ ERROR const_err\n+LL | pub const A: i8 = -std::i8::MIN;\n    | ^^^^^^^^^^^^^^^^^^-------------^\n    |                   |\n    |                   attempt to negate with overflow\n@@ -15,31 +15,31 @@ LL | #![deny(const_err)]\n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:4:1\n    |\n-LL | pub const B: u8 = 200u8 + 200u8; //~ ERROR const_err\n+LL | pub const B: u8 = 200u8 + 200u8;\n    | ^^^^^^^^^^^^^^^^^^-------------^\n    |                   |\n    |                   attempt to add with overflow\n \n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:5:1\n    |\n-LL | pub const C: u8 = 200u8 * 4; //~ ERROR const_err\n+LL | pub const C: u8 = 200u8 * 4;\n    | ^^^^^^^^^^^^^^^^^^---------^\n    |                   |\n    |                   attempt to multiply with overflow\n \n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:6:1\n    |\n-LL | pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR const_err\n+LL | pub const D: u8 = 42u8 - (42u8 + 1);\n    | ^^^^^^^^^^^^^^^^^^-----------------^\n    |                   |\n    |                   attempt to subtract with overflow\n \n error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:7:1\n    |\n-LL | pub const E: u8 = [5u8][1]; //~ ERROR const_err\n+LL | pub const E: u8 = [5u8][1];\n    | ^^^^^^^^^^^^^^^^^^--------^\n    |                   |\n    |                   index out of bounds: the len is 1 but the index is 1"}, {"sha": "148b1210d39e1c0ead403d344dbb6d66dd02d3fa", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static-2.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error[E0019]: static contains unimplemented expression type\n   --> $DIR/assign-to-static-within-other-static-2.rs:16:5\n    |\n-LL |     *FOO.0.get() = 5; //~ ERROR contains unimplemented expression type\n+LL |     *FOO.0.get() = 5;\n    |     ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "02b72765b377eac04c9804fd50b6a1210ed72ddb", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: cannot mutate statics in the initializer of another static\n   --> $DIR/assign-to-static-within-other-static.rs:10:5\n    |\n-LL |     FOO = 5; //~ ERROR cannot mutate statics in the initializer of another static\n+LL |     FOO = 5;\n    |     ^^^^^^^\n \n error: aborting due to previous error"}, {"sha": "44ee8b336c89c5f45595d99ddd183f1c995cb5df", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa72a81bea27f1fda4287475e4cc2f684c971e7f/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=fa72a81bea27f1fda4287475e4cc2f684c971e7f", "patch": "@@ -1,7 +1,7 @@\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:14:1\n    |\n-LL | / const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n+LL | / const VALS_I8: (i8,) =\n LL | |     (\n LL | |      i8::MIN - 1,\n    | |      ----------- attempt to subtract with overflow\n@@ -17,7 +17,7 @@ LL | #![deny(const_err)]\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:19:1\n    |\n-LL | / const VALS_I16: (i16,) = //~ ERROR any use of this value will cause an error\n+LL | / const VALS_I16: (i16,) =\n LL | |     (\n LL | |      i16::MIN - 1,\n    | |      ------------ attempt to subtract with overflow\n@@ -27,7 +27,7 @@ LL | |      );\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:24:1\n    |\n-LL | / const VALS_I32: (i32,) = //~ ERROR any use of this value will cause an error\n+LL | / const VALS_I32: (i32,) =\n LL | |     (\n LL | |      i32::MIN - 1,\n    | |      ------------ attempt to subtract with overflow\n@@ -37,7 +37,7 @@ LL | |      );\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:29:1\n    |\n-LL | / const VALS_I64: (i64,) = //~ ERROR any use of this value will cause an error\n+LL | / const VALS_I64: (i64,) =\n LL | |     (\n LL | |      i64::MIN - 1,\n    | |      ------------ attempt to subtract with overflow\n@@ -47,7 +47,7 @@ LL | |      );\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:34:1\n    |\n-LL | / const VALS_U8: (u8,) = //~ ERROR any use of this value will cause an error\n+LL | / const VALS_U8: (u8,) =\n LL | |     (\n LL | |      u8::MIN - 1,\n    | |      ----------- attempt to subtract with overflow\n@@ -57,7 +57,7 @@ LL | |      );\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:39:1\n    |\n-LL | / const VALS_U16: (u16,) = ( //~ ERROR any use of this value will cause an error\n+LL | / const VALS_U16: (u16,) = (\n LL | |      u16::MIN - 1,\n    | |      ------------ attempt to subtract with overflow\n LL | |      );\n@@ -66,7 +66,7 @@ LL | |      );\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:43:1\n    |\n-LL | / const VALS_U32: (u32,) = ( //~ ERROR any use of this value will cause an error\n+LL | / const VALS_U32: (u32,) = (\n LL | |      u32::MIN - 1,\n    | |      ------------ attempt to subtract with overflow\n LL | |      );\n@@ -75,7 +75,7 @@ LL | |      );\n error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:47:1\n    |\n-LL | / const VALS_U64: (u64,) = //~ ERROR any use of this value will cause an error\n+LL | / const VALS_U64: (u64,) =\n LL | |     (\n LL | |      u64::MIN - 1,\n    | |      ------------ attempt to subtract with overflow"}]}