{"sha": "34322ea9a3bc9ca2be4724447ca61e8bd9d09e30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MzIyZWE5YTNiYzljYTJiZTQ3MjQ0NDdjYTYxZThiZDlkMDllMzA=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-06-10T16:34:43Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-06-10T16:34:43Z"}, "message": "Use classify_name_ref in hover", "tree": {"sha": "d14084f71251bac228e39310eb9e0c55135e64ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d14084f71251bac228e39310eb9e0c55135e64ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34322ea9a3bc9ca2be4724447ca61e8bd9d09e30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34322ea9a3bc9ca2be4724447ca61e8bd9d09e30", "html_url": "https://github.com/rust-lang/rust/commit/34322ea9a3bc9ca2be4724447ca61e8bd9d09e30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34322ea9a3bc9ca2be4724447ca61e8bd9d09e30/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbafae6fa8e1292302d1ea0c04871fe24d174954", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbafae6fa8e1292302d1ea0c04871fe24d174954", "html_url": "https://github.com/rust-lang/rust/commit/cbafae6fa8e1292302d1ea0c04871fe24d174954"}], "stats": {"total": 145, "additions": 131, "deletions": 14}, "files": [{"sha": "b81f4db0c640c5512ba197c1e707efc55395f577", "filename": "crates/ra_ide_api/src/display.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34322ea9a3bc9ca2be4724447ca61e8bd9d09e30/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34322ea9a3bc9ca2be4724447ca61e8bd9d09e30/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay.rs?ref=34322ea9a3bc9ca2be4724447ca61e8bd9d09e30", "patch": "@@ -13,6 +13,7 @@ pub use structure::{StructureNode, file_structure};\n pub use function_signature::FunctionSignature;\n \n pub(crate) use short_label::ShortLabel;\n+pub(crate) use navigation_target::{docs_from_symbol, description_from_symbol};\n \n pub(crate) fn function_label(node: &ast::FnDef) -> String {\n     FunctionSignature::from(node).to_string()"}, {"sha": "cfd3f5478707f3a6cc3015bc042bb04762f21768", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34322ea9a3bc9ca2be4724447ca61e8bd9d09e30/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34322ea9a3bc9ca2be4724447ca61e8bd9d09e30/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=34322ea9a3bc9ca2be4724447ca61e8bd9d09e30", "patch": "@@ -413,7 +413,7 @@ impl NavigationTarget {\n     }\n }\n \n-fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n+pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n     let file = db.parse(symbol.file_id).tree;\n     let node = symbol.ptr.to_node(file.syntax()).to_owned();\n \n@@ -439,7 +439,7 @@ fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n /// Get a description of a symbol.\n ///\n /// e.g. `struct Name`, `enum Name`, `fn Name`\n-fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n+pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option<String> {\n     let file = db.parse(symbol.file_id).tree;\n     let node = symbol.ptr.to_node(file.syntax()).to_owned();\n "}, {"sha": "1f454be21f79e5e1aa5810e81c6eeb7b307fdfea", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 128, "deletions": 12, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/34322ea9a3bc9ca2be4724447ca61e8bd9d09e30/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34322ea9a3bc9ca2be4724447ca61e8bd9d09e30/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=34322ea9a3bc9ca2be4724447ca61e8bd9d09e30", "patch": "@@ -1,14 +1,15 @@\n use ra_db::SourceDatabase;\n use ra_syntax::{\n-    AstNode, ast,\n+    AstNode, ast::{self, DocCommentsOwner},\n     algo::{find_covering_element, find_node_at_offset, ancestors_at_offset},\n };\n use hir::HirDisplay;\n \n use crate::{\n     db::RootDatabase,\n     RangeInfo, FilePosition, FileRange,\n-    display::{rust_code_markup, doc_text_for},\n+    display::{rust_code_markup, doc_text_for, rust_code_markup_with_doc, ShortLabel, docs_from_symbol, description_from_symbol},\n+    name_ref_kind::{NameRefKind::*, classify_name_ref},\n };\n \n /// Contains the results when hovering over an item\n@@ -77,25 +78,140 @@ impl HoverResult {\n     }\n }\n \n+fn hover_text(docs: Option<String>, desc: Option<String>) -> Option<String> {\n+    match (desc, docs) {\n+        (Some(desc), docs) => Some(rust_code_markup_with_doc(desc, docs)),\n+        (None, Some(docs)) => Some(docs.to_string()),\n+        _ => None,\n+    }\n+}\n+\n pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<HoverResult>> {\n     let file = db.parse(position.file_id).tree;\n     let mut res = HoverResult::new();\n \n     let mut range = None;\n     if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset) {\n-        use crate::goto_definition::{ReferenceResult::*, reference_definition};\n-        let ref_result = reference_definition(db, position.file_id, name_ref);\n-        match ref_result {\n-            Exact(nav) => res.extend(doc_text_for(nav)),\n-            Approximate(navs) => {\n-                // We are no longer exact\n-                res.exact = false;\n-\n-                for nav in navs {\n-                    res.extend(doc_text_for(nav))\n+        let analyzer = hir::SourceAnalyzer::new(db, position.file_id, name_ref.syntax(), None);\n+\n+        match classify_name_ref(db, &analyzer, name_ref) {\n+            Some(Method(it)) => {\n+                let it = it.source(db).1;\n+                res.extend(hover_text(it.doc_comment_text(), it.short_label()));\n+            }\n+            Some(Macro(it)) => {\n+                let it = it.source(db).1;\n+                res.extend(hover_text(it.doc_comment_text(), None));\n+            }\n+            Some(FieldAccess(it)) => {\n+                let it = it.source(db).1;\n+                if let hir::FieldSource::Named(it) = it {\n+                    res.extend(hover_text(it.doc_comment_text(), it.short_label()));\n+                }\n+            }\n+            Some(AssocItem(it)) => match it {\n+                hir::ImplItem::Method(it) => {\n+                    let it = it.source(db).1;\n+                    res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                }\n+                hir::ImplItem::Const(it) => {\n+                    let it = it.source(db).1;\n+                    res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                }\n+                hir::ImplItem::TypeAlias(it) => {\n+                    let it = it.source(db).1;\n+                    res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n                 }\n+            },\n+            Some(Def(it)) => {\n+                match it {\n+                    hir::ModuleDef::Module(it) => {\n+                        let it = it.definition_source(db).1;\n+                        if let hir::ModuleSource::Module(it) = it {\n+                            res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                        }\n+                    }\n+                    hir::ModuleDef::Function(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::Struct(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::Union(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::Enum(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::EnumVariant(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::Const(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::Static(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::Trait(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::TypeAlias(it) => {\n+                        let it = it.source(db).1;\n+                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    }\n+                    hir::ModuleDef::BuiltinType(_) => {\n+                        // FIXME: hover for builtin Type ?\n+                    }\n+                }\n+            }\n+            Some(SelfType(ty)) => {\n+                if let Some((adt_def, _)) = ty.as_adt() {\n+                    match adt_def {\n+                        hir::AdtDef::Struct(it) => {\n+                            let it = it.source(db).1;\n+                            res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                        }\n+                        hir::AdtDef::Union(it) => {\n+                            let it = it.source(db).1;\n+                            res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                        }\n+                        hir::AdtDef::Enum(it) => {\n+                            let it = it.source(db).1;\n+                            res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                        }\n+                    }\n+                }\n+            }\n+            Some(Pat(_)) => {\n+                res.extend(None);\n+            }\n+            Some(SelfParam(_)) => {\n+                res.extend(None);\n             }\n+            Some(GenericParam(_)) => {\n+                // FIXME: Hover for generic param\n+            }\n+            None => {}\n         }\n+\n+        if res.is_empty() {\n+            // Fallback index based approach:\n+            let symbols = crate::symbol_index::index_resolve(db, name_ref);\n+            for sym in symbols {\n+                let docs = docs_from_symbol(db, &sym);\n+                let desc = description_from_symbol(db, &sym);\n+                res.extend(hover_text(docs, desc));\n+            }\n+        }\n+\n         if !res.is_empty() {\n             range = Some(name_ref.syntax().range())\n         }"}]}