{"sha": "e1888948c640f8b8396091b336c2677cb82fdcce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxODg4OTQ4YzY0MGY4YjgzOTYwOTFiMzM2YzI2NzdjYjgyZmRjY2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-19T19:43:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-19T19:43:14Z"}, "message": "auto merge of #5426 : nikomatsakis/rust/issue-4846-lifetimes-in-expl-self, r=pcwalton\n\n(this will be needed for snapshotting at some point)\r\n\r\nr? @pcwalton", "tree": {"sha": "ff3d02994510a741e117adf3d0f57d39b3623a1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff3d02994510a741e117adf3d0f57d39b3623a1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1888948c640f8b8396091b336c2677cb82fdcce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1888948c640f8b8396091b336c2677cb82fdcce", "html_url": "https://github.com/rust-lang/rust/commit/e1888948c640f8b8396091b336c2677cb82fdcce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1888948c640f8b8396091b336c2677cb82fdcce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a14ec73cd2d15a2454113011835557ccf447f14d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a14ec73cd2d15a2454113011835557ccf447f14d", "html_url": "https://github.com/rust-lang/rust/commit/a14ec73cd2d15a2454113011835557ccf447f14d"}, {"sha": "a6187c62e93ba96dce8f19849fb7016f4f941f8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6187c62e93ba96dce8f19849fb7016f4f941f8c", "html_url": "https://github.com/rust-lang/rust/commit/a6187c62e93ba96dce8f19849fb7016f4f941f8c"}], "stats": {"total": 221, "additions": 166, "deletions": 55}, "files": [{"sha": "eaf027905377d94f6470ed47de9a22f61cbd83be", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=e1888948c640f8b8396091b336c2677cb82fdcce", "patch": "@@ -631,7 +631,10 @@ fn get_self_ty(item: ebml::Doc) -> ast::self_ty_ {\n         'v' => { return ast::sty_value; }\n         '@' => { return ast::sty_box(get_mutability(string[1])); }\n         '~' => { return ast::sty_uniq(get_mutability(string[1])); }\n-        '&' => { return ast::sty_region(get_mutability(string[1])); }\n+        '&' => {\n+            // FIXME(#4846) expl. region\n+            return ast::sty_region(None, get_mutability(string[1]));\n+        }\n         _ => {\n             fail!(fmt!(\"unknown self type code: `%c`\", self_ty_kind as char));\n         }"}, {"sha": "f507d0d8718e8496cca0454811c4a3b6b6d02fbd", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=e1888948c640f8b8396091b336c2677cb82fdcce", "patch": "@@ -406,32 +406,47 @@ fn encode_self_type(ebml_w: writer::Encoder, self_type: ast::self_ty_) {\n     ebml_w.start_tag(tag_item_trait_method_self_ty);\n \n     // Encode the base self type.\n-    let ch;\n     match self_type {\n-        sty_static =>       { ch = 's' as u8; }\n-        sty_by_ref =>       { ch = 'r' as u8; }\n-        sty_value =>        { ch = 'v' as u8; }\n-        sty_region(_) =>    { ch = '&' as u8; }\n-        sty_box(_) =>       { ch = '@' as u8; }\n-        sty_uniq(_) =>      { ch = '~' as u8; }\n-    }\n-    ebml_w.writer.write(&[ ch ]);\n-\n-    // Encode mutability.\n-    match self_type {\n-        sty_static | sty_by_ref | sty_value => { /* No-op. */ }\n-        sty_region(m_imm) | sty_box(m_imm) | sty_uniq(m_imm) => {\n-            ebml_w.writer.write(&[ 'i' as u8 ]);\n+        sty_static => {\n+            ebml_w.writer.write(&[ 's' as u8 ]);\n+        }\n+        sty_by_ref => {\n+            ebml_w.writer.write(&[ 'r' as u8 ]);\n+        }\n+        sty_value => {\n+            ebml_w.writer.write(&[ 'v' as u8 ]);\n+        }\n+        sty_region(_, m) => {\n+            // FIXME(#4846) encode custom lifetime\n+            ebml_w.writer.write(&[ '&' as u8 ]);\n+            encode_mutability(ebml_w, m);\n         }\n-        sty_region(m_mutbl) | sty_box(m_mutbl) | sty_uniq(m_mutbl) => {\n-            ebml_w.writer.write(&[ 'm' as u8 ]);\n+        sty_box(m) => {\n+            ebml_w.writer.write(&[ '@' as u8 ]);\n+            encode_mutability(ebml_w, m);\n         }\n-        sty_region(m_const) | sty_box(m_const) | sty_uniq(m_const) => {\n-            ebml_w.writer.write(&[ 'c' as u8 ]);\n+        sty_uniq(m) => {\n+            ebml_w.writer.write(&[ '~' as u8 ]);\n+            encode_mutability(ebml_w, m);\n         }\n     }\n \n     ebml_w.end_tag();\n+\n+    fn encode_mutability(ebml_w: writer::Encoder,\n+                         m: ast::mutability) {\n+        match m {\n+            m_imm => {\n+                ebml_w.writer.write(&[ 'i' as u8 ]);\n+            }\n+            m_mutbl => {\n+                ebml_w.writer.write(&[ 'm' as u8 ]);\n+            }\n+            m_const => {\n+                ebml_w.writer.write(&[ 'c' as u8 ]);\n+            }\n+        }\n+    }\n }\n \n fn encode_method_sort(ebml_w: writer::Encoder, sort: char) {"}, {"sha": "c2417f75a82d60fa24d7606d6023af28f4f0359b", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=e1888948c640f8b8396091b336c2677cb82fdcce", "patch": "@@ -472,7 +472,7 @@ fn visit_fn(fk: &visit::fn_kind,\n                                              special_idents::self_,\n                                              by_ref));\n                 }\n-                sty_value | sty_region(_) | sty_box(_) | sty_uniq(_) => {\n+                sty_value | sty_region(*) | sty_box(_) | sty_uniq(_) => {\n                     fn_maps.add_variable(Arg(method.self_id,\n                                              special_idents::self_,\n                                              by_copy));"}, {"sha": "51e26d3cfef1f810d2a47a736f2c2774f4b7ca35", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=e1888948c640f8b8396091b336c2677cb82fdcce", "patch": "@@ -589,7 +589,7 @@ pub fn trans_trait_callee(bcx: block,\n     let llpair = self_datum.to_ref_llval(bcx);\n \n     let llpair = match explicit_self {\n-        ast::sty_region(_) => Load(bcx, llpair),\n+        ast::sty_region(*) => Load(bcx, llpair),\n         ast::sty_static | ast::sty_by_ref | ast::sty_value |\n         ast::sty_box(_) | ast::sty_uniq(_) => llpair\n     };\n@@ -658,7 +658,7 @@ pub fn trans_trait_callee_from_llval(bcx: block,\n             bcx.tcx().sess.bug(~\"methods with by-value self should not be \\\n                                called on objects\");\n         }\n-        ast::sty_region(_) => {\n+        ast::sty_region(*) => {\n             // As before, we need to pass a pointer to a pointer to the\n             // payload.\n             match store {"}, {"sha": "955bc56310704c2f93d807168ed08063978391fb", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=e1888948c640f8b8396091b336c2677cb82fdcce", "patch": "@@ -105,6 +105,7 @@ pub impl Reflector {\n                                                       v,\n                                                       ty::BoxTraitStore,\n                                                       ast::sty_region(\n+                                                        None,\n                                                         ast::m_imm)),\n             ArgVals(args), SaveIn(scratch.val), DontAutorefArg);\n         let result = scratch.to_value_llval(bcx);"}, {"sha": "604a753c44820ba8e0ac22c5cab19f563dc84130", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=e1888948c640f8b8396091b336c2677cb82fdcce", "patch": "@@ -743,10 +743,12 @@ pub impl LookupContext/&self {\n                 sty_box(_) | sty_uniq(_) => {\n                     self_substs\n                 }\n-                sty_region(_) if self_substs.self_r.is_some() => {\n+                sty_region(*) if self_substs.self_r.is_some() => {\n+                    // FIXME(#4846) ignoring expl lifetime here\n                     self_substs\n                 }\n-                sty_region(_) => {\n+                sty_region(*) => {\n+                    // FIXME(#4846) ignoring expl lifetime here\n                     substs {\n                         self_r:\n                              Some(self.infcx().next_region_var(\n@@ -1326,7 +1328,8 @@ pub fn transform_self_type_for_method(tcx: ty::ctxt,\n       sty_by_ref | sty_value => {\n         impl_ty\n       }\n-      sty_region(mutability) => {\n+      sty_region(_, mutability) => {\n+        // FIXME(#4846) ignoring expl lifetime here\n         mk_rptr(tcx,\n                 self_region.expect(~\"self region missing for &self param\"),\n                 ty::mt { ty: impl_ty, mutbl: mutability })"}, {"sha": "ffdd40c6cd8ca25cef6a449d388074baf7970d67", "filename": "src/librustc/middle/typeck/check/regionmanip.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionmanip.rs?ref=e1888948c640f8b8396091b336c2677cb82fdcce", "patch": "@@ -30,8 +30,9 @@ pub fn replace_bound_regions_in_fn_sig(\n     isr: isr_alist,\n     self_info: Option<SelfInfo>,\n     fn_sig: &ty::FnSig,\n-    mapf: &fn(ty::bound_region) -> ty::Region) ->\n-    (isr_alist, Option<SelfInfo>, ty::FnSig) {\n+    mapf: &fn(ty::bound_region) -> ty::Region)\n+    -> (isr_alist, Option<SelfInfo>, ty::FnSig)\n+{\n     // Take self_info apart; the self_ty part is the only one we want\n     // to update here.\n     let self_ty = self_info.map(|s| s.self_ty);\n@@ -41,8 +42,10 @@ pub fn replace_bound_regions_in_fn_sig(\n \n     match self_info {\n       Some(SelfInfo {\n-            explicit_self: codemap::spanned { node: ast::sty_region(m),\n-                                          _}, _}) => {\n+            explicit_self: codemap::spanned {\n+                node: ast::sty_region(_, m),\n+                // FIXME(#4846) ------^ Use this lifetime instead of self\n+                _}, _}) => {\n         let region = ty::re_bound(ty::br_self);\n         let ty = ty::mk_rptr(tcx, region,\n                              ty::mt { ty: ty::mk_self(tcx), mutbl: m });\n@@ -51,7 +54,6 @@ pub fn replace_bound_regions_in_fn_sig(\n       _ => {}\n     }\n \n-\n     for self_ty.each |t| { all_tys.push(*t) }\n \n     debug!(\"replace_bound_regions_in_fn_sig(self_info.self_ty=%?, fn_sig=%s, \\"}, {"sha": "a2d82bb8ccd32fc8062cf8be1d994c99a5622950", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e1888948c640f8b8396091b336c2677cb82fdcce", "patch": "@@ -1001,18 +1001,18 @@ impl to_bytes::IterBytes for ret_style {\n #[auto_decode]\n #[deriving_eq]\n pub enum self_ty_ {\n-    sty_static,                         // no self: static method\n-    sty_by_ref,                         // old by-reference self: ``\n-    sty_value,                          // by-value self: `self`\n-    sty_region(mutability),             // by-region self: `&self`\n-    sty_box(mutability),                // by-managed-pointer self: `@self`\n-    sty_uniq(mutability)                // by-unique-pointer self: `~self`\n+    sty_static,                                // no self\n+    sty_by_ref,                                // ``\n+    sty_value,                                 // `self`\n+    sty_region(Option<@Lifetime>, mutability), // `&'lt self`\n+    sty_box(mutability),                       // `@self`\n+    sty_uniq(mutability)                       // `~self`\n }\n \n impl self_ty_ {\n     fn is_borrowed(&self) -> bool {\n         match *self {\n-            sty_region(_) => true,\n+            sty_region(*) => true,\n             _ => false\n         }\n     }"}, {"sha": "294174dc8f9b3a9524963d74450b2dcfc61151e8", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=e1888948c640f8b8396091b336c2677cb82fdcce", "patch": "@@ -634,8 +634,10 @@ fn mk_ser_method(\n         ident: cx.ident_of(~\"encode\"),\n         attrs: ~[],\n         generics: ast_util::empty_generics(),\n-        self_ty: codemap::spanned { node: ast::sty_region(ast::m_imm),\n-                                span: span },\n+        self_ty: codemap::spanned {\n+            node: ast::sty_region(None, ast::m_imm),\n+            span: span\n+        },\n         purity: ast::impure_fn,\n         decl: ser_decl,\n         body: ser_body,"}, {"sha": "a6165e50c854585eda567ee3c7699650fe26dd53", "filename": "src/libsyntax/ext/deriving.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibsyntax%2Fext%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibsyntax%2Fext%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving.rs?ref=e1888948c640f8b8396091b336c2677cb82fdcce", "patch": "@@ -220,7 +220,7 @@ fn create_eq_method(cx: @ext_ctxt,\n     let body_block = build::mk_simple_block(cx, span, body);\n \n     // Create the method.\n-    let self_ty = spanned { node: sty_region(m_imm), span: span };\n+    let self_ty = spanned { node: sty_region(None, m_imm), span: span };\n     @ast::method {\n         ident: method_ident,\n         attrs: ~[],\n@@ -398,7 +398,7 @@ fn create_iter_bytes_method(cx: @ext_ctxt,\n     let body_block = build::mk_block_(cx, span, statements);\n \n     // Create the method.\n-    let self_ty = spanned { node: sty_region(m_imm), span: span };\n+    let self_ty = spanned { node: sty_region(None, m_imm), span: span };\n     let method_ident = cx.ident_of(~\"iter_bytes\");\n     @ast::method {\n         ident: method_ident,\n@@ -448,7 +448,7 @@ fn create_clone_method(cx: @ext_ctxt,\n     let body_block = build::mk_simple_block(cx, span, expr);\n \n     // Create the self type and method identifier.\n-    let self_ty = spanned { node: sty_region(m_imm), span: span };\n+    let self_ty = spanned { node: sty_region(None, m_imm), span: span };\n     let method_ident = cx.ident_of(~\"clone\");\n \n     // Create the method."}, {"sha": "6f4d9332df821b27203f40b8cc859a6fedbe04c0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e1888948c640f8b8396091b336c2677cb82fdcce", "patch": "@@ -966,6 +966,13 @@ pub impl Parser {\n         }\n     }\n \n+    fn token_is_lifetime(&self, tok: &token::Token) -> bool {\n+        match *tok {\n+            token::LIFETIME(_) => true,\n+            _ => false\n+        }\n+    }\n+\n     fn parse_lifetime(&self) -> ast::Lifetime {\n         /*!\n          *\n@@ -1033,6 +1040,11 @@ pub impl Parser {\n         }\n     }\n \n+    fn token_is_mutability(&self, tok: &token::Token) -> bool {\n+        self.token_is_keyword(&~\"mut\", tok) ||\n+        self.token_is_keyword(&~\"const\", tok)\n+    }\n+\n     fn parse_mutability(&self) -> mutability {\n         if self.eat_keyword(&~\"mut\") {\n             m_mutbl\n@@ -2837,14 +2849,63 @@ pub impl Parser {\n             }\n         }\n \n+        fn maybe_parse_borrowed_self_ty(\n+            self: &Parser\n+        ) -> ast::self_ty_ {\n+            // The following things are possible to see here:\n+            //\n+            //     fn(&self)\n+            //     fn(&mut self)\n+            //     fn(&'lt self)\n+            //     fn(&'lt mut self)\n+            //\n+            // We already know that the current token is `&`.\n+\n+            if (\n+                self.token_is_keyword(&~\"self\", &self.look_ahead(1)))\n+            {\n+                self.bump();\n+                self.expect_self_ident();\n+                sty_region(None, m_imm)\n+            } else if (\n+                self.token_is_mutability(&self.look_ahead(1)) &&\n+                self.token_is_keyword(&~\"self\", &self.look_ahead(2)))\n+            {\n+                self.bump();\n+                let mutability = self.parse_mutability();\n+                self.expect_self_ident();\n+                sty_region(None, mutability)\n+            } else if (\n+                self.token_is_lifetime(&self.look_ahead(1)) &&\n+                self.token_is_keyword(&~\"self\", &self.look_ahead(2)))\n+            {\n+                self.bump();\n+                let lifetime = @self.parse_lifetime();\n+                self.expect_self_ident();\n+                sty_region(Some(lifetime), m_imm)\n+            } else if (\n+                self.token_is_lifetime(&self.look_ahead(1)) &&\n+                self.token_is_mutability(&self.look_ahead(2)) &&\n+                self.token_is_keyword(&~\"self\", &self.look_ahead(3)))\n+            {\n+                self.bump();\n+                let lifetime = @self.parse_lifetime();\n+                let mutability = self.parse_mutability();\n+                self.expect_self_ident();\n+                sty_region(Some(lifetime), mutability)\n+            } else {\n+                sty_by_ref\n+            }\n+        }\n+\n         self.expect(&token::LPAREN);\n \n         // A bit of complexity and lookahead is needed here in order to to be\n         // backwards compatible.\n         let lo = self.span.lo;\n         let self_ty = match *self.token {\n           token::BINOP(token::AND) => {\n-            maybe_parse_self_ty(sty_region, self)\n+            maybe_parse_borrowed_self_ty(self)\n           }\n           token::AT => {\n             maybe_parse_self_ty(sty_box, self)"}, {"sha": "9b8448bc2d99af0c395b59a2ceaac97b8a86f3fc", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e1888948c640f8b8396091b336c2677cb82fdcce", "patch": "@@ -1647,17 +1647,20 @@ pub fn print_pat(s: @ps, &&pat: @ast::pat, refutable: bool) {\n // Returns whether it printed anything\n pub fn print_self_ty(s: @ps, self_ty: ast::self_ty_) -> bool {\n     match self_ty {\n-      ast::sty_static | ast::sty_by_ref => { return false; }\n-      ast::sty_value => { word(s.s, ~\"self\"); }\n-      ast::sty_region(m) => {\n-        word(s.s, ~\"&\"); print_mutability(s, m); word(s.s, ~\"self\");\n-      }\n-      ast::sty_box(m) => {\n-        word(s.s, ~\"@\"); print_mutability(s, m); word(s.s, ~\"self\");\n-      }\n-      ast::sty_uniq(m) => {\n-        word(s.s, ~\"~\"); print_mutability(s, m); word(s.s, ~\"self\");\n-      }\n+        ast::sty_static | ast::sty_by_ref => { return false; }\n+        ast::sty_value => { word(s.s, ~\"self\"); }\n+        ast::sty_region(lt, m) => {\n+            word(s.s, ~\"&\");\n+            print_opt_lifetime(s, lt);\n+            print_mutability(s, m);\n+            word(s.s, ~\"self\");\n+        }\n+        ast::sty_box(m) => {\n+            word(s.s, ~\"@\"); print_mutability(s, m); word(s.s, ~\"self\");\n+        }\n+        ast::sty_uniq(m) => {\n+            word(s.s, ~\"~\"); print_mutability(s, m); word(s.s, ~\"self\");\n+        }\n     }\n     return true;\n }"}, {"sha": "736ed24097c89d29ba265637b2733065d6ec45f1", "filename": "src/test/run-pass/regions-expl-self.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Ftest%2Frun-pass%2Fregions-expl-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1888948c640f8b8396091b336c2677cb82fdcce/src%2Ftest%2Frun-pass%2Fregions-expl-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-expl-self.rs?ref=e1888948c640f8b8396091b336c2677cb82fdcce", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that you can insert an explicit lifetime in explicit self.\n+\n+struct Foo {\n+    f: uint\n+}\n+\n+pub impl Foo {\n+    fn foo(&'a self) {}\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}]}