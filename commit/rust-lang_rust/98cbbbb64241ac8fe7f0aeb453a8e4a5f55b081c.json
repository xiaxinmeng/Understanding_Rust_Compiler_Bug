{"sha": "98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4Y2JiYmI2NDI0MWFjOGZlN2YwYWViNDUzYThlNGE1ZjU1YjA4MWM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-16T21:50:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-19T22:07:46Z"}, "message": "impl the proper partial order between fn types", "tree": {"sha": "a55900b2421597082dc73482452b0d60a1481e33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a55900b2421597082dc73482452b0d60a1481e33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c", "html_url": "https://github.com/rust-lang/rust/commit/98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bc6e72b97a4e35102ac6b2519dd0a48f5b5db1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc6e72b97a4e35102ac6b2519dd0a48f5b5db1f", "html_url": "https://github.com/rust-lang/rust/commit/1bc6e72b97a4e35102ac6b2519dd0a48f5b5db1f"}], "stats": {"total": 91, "additions": 52, "deletions": 39}, "files": [{"sha": "5e8ccaf4f9044a2704116ea90edb4efcb27f81d1", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 34, "deletions": 39, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c", "patch": "@@ -1918,20 +1918,19 @@ mod unify {\n                        actual_inputs: [arg], actual_output: t,\n                        variance: variance) ->\n        fn_common_res {\n-        let expected_len = vec::len::<arg>(expected_inputs);\n-        let actual_len = vec::len::<arg>(actual_inputs);\n-        if expected_len != actual_len {\n+        if !vec::same_length(expected_inputs, actual_inputs) {\n             ret fn_common_res_err(ures_err(terr_arg_count));\n         }\n-        // TODO: as above, we should have an iter2 iterator.\n \n-        let result_ins: [arg] = [];\n-        let i = 0u;\n-        while i < expected_len {\n+        // Would use vec::map2(), but for the need to return in case of\n+        // error:\n+        let i = 0u, n = vec::len(expected_inputs);\n+        let result_ins = [];\n+        while i < n {\n             let expected_input = expected_inputs[i];\n             let actual_input = actual_inputs[i];\n-            // Unify the result modes.\n \n+            // Unify the result modes.\n             let result_mode = if expected_input.mode == ast::mode_infer {\n                 actual_input.mode\n             } else if actual_input.mode == ast::mode_infer {\n@@ -1941,6 +1940,7 @@ mod unify {\n                     (ures_err(terr_mode_mismatch(expected_input.mode,\n                                                  actual_input.mode)));\n             } else { expected_input.mode };\n+\n             // The variance changes (flips basically) when descending\n             // into arguments of function types\n             let result = unify_step(\n@@ -1949,11 +1949,11 @@ mod unify {\n             alt result {\n               ures_ok(rty) { result_ins += [{mode: result_mode, ty: rty}]; }\n               _ { ret fn_common_res_err(result); }\n-            }\n+            };\n             i += 1u;\n         }\n-        // Check the output.\n \n+        // Check the output.\n         let result = unify_step(cx, expected_output, actual_output, variance);\n         alt result {\n           ures_ok(rty) { ret fn_common_res_ok(result_ins, rty); }\n@@ -1962,38 +1962,33 @@ mod unify {\n     }\n     fn unify_fn_proto(e_proto: ast::proto, a_proto: ast::proto,\n                       variance: variance) -> option::t<result> {\n-        fn rank(proto: ast::proto) -> int {\n-            ret alt proto {\n-              ast::proto_block. { 0 }\n-              ast::proto_shared(_) { 1 }\n-              ast::proto_send. { 2 }\n-              ast::proto_bare. { 3 }\n+        // Prototypes form a diamond-shaped partial order:\n+        //\n+        //        block\n+        //        ^   ^\n+        //   shared   send\n+        //        ^   ^\n+        //        bare\n+        //\n+        // where \"^\" means \"subtype of\" (forgive the abuse of the term\n+        // subtype).\n+        fn sub_proto(p_sub: ast::proto, p_sup: ast::proto) -> bool {\n+            ret alt (p_sub, p_sup) {\n+              (_, ast::proto_block.) { true }\n+              (ast::proto_bare., _) { true }\n+\n+              // Equal prototypes (modulo sugar) are always subprotos:\n+              (ast::proto_shared(_), ast::proto_shared(_)) { true }\n+              (_, _) { p_sub == p_sup }\n             };\n         }\n \n-        fn gt(e_proto: ast::proto, a_proto: ast::proto) -> bool {\n-            ret rank(e_proto) > rank(a_proto);\n-        }\n-\n-        ret if e_proto == a_proto {\n-            none\n-        } else if variance == invariant {\n-            some(ures_err(terr_mismatch))\n-        } else if variance == covariant {\n-            if gt(e_proto, a_proto) {\n-                some(ures_err(terr_mismatch))\n-            } else {\n-                none\n-            }\n-        } else if variance == contravariant {\n-            if gt(a_proto, e_proto) {\n-                some(ures_err(terr_mismatch))\n-            } else {\n-                none\n-            }\n-        } else {\n-            fail\n-        }\n+        ret alt variance {\n+          invariant. when e_proto == a_proto { none }\n+          covariant. when sub_proto(a_proto, e_proto) { none }\n+          contravariant. when sub_proto(e_proto, a_proto) { none }\n+          _ { some(ures_err(terr_mismatch)) }\n+        };\n     }\n     fn unify_fn(cx: @ctxt, e_proto: ast::proto, a_proto: ast::proto,\n                 expected: t, actual: t, expected_inputs: [arg],"}, {"sha": "696f237c9f143a94cd3c8b29b1dc6c2693887c09", "filename": "src/test/compile-fail/sendfn-is-not-a-lambda.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsendfn-is-not-a-lambda.rs?ref=98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c", "patch": "@@ -0,0 +1,10 @@\n+// error-pattern: mismatched types: expected lambda(++uint) -> uint\n+\n+fn test(f: lambda(uint) -> uint) -> uint {\n+    ret f(22u);\n+}\n+\n+fn main() {\n+    let f = sendfn(x: uint) -> uint { ret 4u; };\n+    log test(f);\n+}\n\\ No newline at end of file"}, {"sha": "3761c1ec65249514de5bdb3fd121fac2fb15200b", "filename": "src/test/run-pass/sendfn-is-a-block.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-is-a-block.rs?ref=98cbbbb64241ac8fe7f0aeb453a8e4a5f55b081c", "patch": "@@ -0,0 +1,8 @@\n+fn test(f: block(uint) -> uint) -> uint {\n+    ret f(22u);\n+}\n+\n+fn main() {\n+    let y = test(sendfn(x: uint) -> uint { ret 4u * x; });\n+    assert y == 88u;\n+}\n\\ No newline at end of file"}]}