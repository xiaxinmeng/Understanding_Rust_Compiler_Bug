{"sha": "7b2fa2077fa48826fa98fab4402de0c5037de065", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMmZhMjA3N2ZhNDg4MjZmYTk4ZmFiNDQwMmRlMGM1MDM3ZGUwNjU=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-03-18T20:27:15Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-06-09T08:21:26Z"}, "message": "Add duration_subsec lint\n\nCloses #2543", "tree": {"sha": "439423a199790710dd326703350ba5958f84a915", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/439423a199790710dd326703350ba5958f84a915"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b2fa2077fa48826fa98fab4402de0c5037de065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b2fa2077fa48826fa98fab4402de0c5037de065", "html_url": "https://github.com/rust-lang/rust/commit/7b2fa2077fa48826fa98fab4402de0c5037de065", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b2fa2077fa48826fa98fab4402de0c5037de065/comments", "author": null, "committer": null, "parents": [{"sha": "91986fa9339f701d329cf1c728b9df086ac31f43", "url": "https://api.github.com/repos/rust-lang/rust/commits/91986fa9339f701d329cf1c728b9df086ac31f43", "html_url": "https://github.com/rust-lang/rust/commit/91986fa9339f701d329cf1c728b9df086ac31f43"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "de75276ada7b2cbcc7a08feef5189c506b81379c", "filename": "clippy_lints/src/duration_subsec.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7b2fa2077fa48826fa98fab4402de0c5037de065/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2fa2077fa48826fa98fab4402de0c5037de065/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=7b2fa2077fa48826fa98fab4402de0c5037de065", "patch": "@@ -0,0 +1,64 @@\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use syntax::codemap::Spanned;\n+\n+use crate::consts::{constant, Constant};\n+use crate::utils::paths;\n+use crate::utils::{match_type, snippet, span_lint_and_sugg, walk_ptrs_ty};\n+\n+/// **What it does:** Checks for calculation of subsecond microseconds or milliseconds from\n+/// `Duration::subsec_nanos()`.\n+///\n+/// **Why is this bad?** It's more concise to call `Duration::subsec_micros()` or\n+/// `Duration::subsec_millis()`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let dur = Duration::new(5, 0);\n+/// let _micros = dur.subsec_nanos() / 1_000;\n+/// let _millis = dur.subsec_nanos() / 1_000_000;\n+/// ```\n+declare_lint! {\n+    pub DURATION_SUBSEC,\n+    Warn,\n+    \"checks for `dur.subsec_nanos() / 1_000` or `dur.subsec_nanos() / 1_000_000`\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct DurationSubsec;\n+\n+impl LintPass for DurationSubsec {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DURATION_SUBSEC)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DurationSubsec {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if_chain! {\n+            if let ExprBinary(Spanned { node: BiDiv, .. }, ref left, ref right) = expr.node;\n+            if let ExprMethodCall(ref method_path, _ , ref args) = left.node;\n+            if method_path.name == \"subsec_nanos\";\n+            if match_type(cx, walk_ptrs_ty(cx.tables.expr_ty(&args[0])), &paths::DURATION);\n+            if let Some((Constant::Int(divisor), _)) = constant(cx, cx.tables, right);\n+            then {\n+                let suggested_fn = match divisor {\n+                    1_000 => \"subsec_micros\",\n+                    1_000_000 => \"subsec_millis\",\n+                    _ => return,\n+                };\n+\n+                span_lint_and_sugg(\n+                    cx,\n+                    DURATION_SUBSEC,\n+                    expr.span,\n+                    &format!(\"Calling `{}()` is more concise than this calculation\", suggested_fn),\n+                    \"try\",\n+                    format!(\"{}.{}()\", snippet(cx, args[0].span, \"_\"), suggested_fn),\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "8188dd87836bc963f69959f0880ce0b4188222ff", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b2fa2077fa48826fa98fab4402de0c5037de065/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2fa2077fa48826fa98fab4402de0c5037de065/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7b2fa2077fa48826fa98fab4402de0c5037de065", "patch": "@@ -116,6 +116,7 @@ pub mod doc;\n pub mod double_comparison;\n pub mod double_parens;\n pub mod drop_forget_ref;\n+pub mod duration_subsec;\n pub mod else_if_without_else;\n pub mod empty_enum;\n pub mod entry;\n@@ -423,6 +424,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box inherent_impl::Pass::default());\n     reg.register_late_lint_pass(box neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd);\n     reg.register_late_lint_pass(box unwrap::Pass);\n+    reg.register_late_lint_pass(box duration_subsec::DurationSubsec);\n \n \n     reg.register_lint_group(\"clippy_restriction\", vec![\n@@ -518,6 +520,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         drop_forget_ref::DROP_REF,\n         drop_forget_ref::FORGET_COPY,\n         drop_forget_ref::FORGET_REF,\n+        duration_subsec::DURATION_SUBSEC,\n         entry::MAP_ENTRY,\n         enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,\n         enum_variants::ENUM_VARIANT_NAMES,"}, {"sha": "5af1a151c8ca64d52c419548027c2b345b39f118", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7b2fa2077fa48826fa98fab4402de0c5037de065/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2fa2077fa48826fa98fab4402de0c5037de065/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=7b2fa2077fa48826fa98fab4402de0c5037de065", "patch": "@@ -27,6 +27,7 @@ pub const DEFAULT_TRAIT: [&str; 3] = [\"core\", \"default\", \"Default\"];\n pub const DISPLAY_FMT_METHOD: [&str; 4] = [\"core\", \"fmt\", \"Display\", \"fmt\"];\n pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n+pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n pub const FMT_ARGUMENTS_NEWV1: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];\n pub const FMT_ARGUMENTS_NEWV1FORMATTED: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1_formatted\"];\n pub const FMT_ARGUMENTV1_NEW: [&str; 4] = [\"core\", \"fmt\", \"ArgumentV1\", \"new\"];"}, {"sha": "5b87d69646e749155be8f11b3e2412eedb611d3a", "filename": "tests/ui/duration_subsec.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7b2fa2077fa48826fa98fab4402de0c5037de065/tests%2Fui%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2fa2077fa48826fa98fab4402de0c5037de065/tests%2Fui%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduration_subsec.rs?ref=7b2fa2077fa48826fa98fab4402de0c5037de065", "patch": "@@ -0,0 +1,26 @@\n+#![warn(duration_subsec)]\n+\n+use std::time::Duration;\n+\n+fn main() {\n+    let dur = Duration::new(5, 0);\n+\n+    let bad_micros = dur.subsec_nanos() / 1_000;\n+    let good_micros = dur.subsec_micros();\n+    assert_eq!(bad_micros, good_micros);\n+\n+    let bad_millis = dur.subsec_nanos() / 1_000_000;\n+    let good_millis = dur.subsec_millis();\n+    assert_eq!(bad_millis, good_millis);\n+\n+    // Handle refs\n+    let _ = (&dur).subsec_nanos() / 1_000;\n+\n+    // Handle constants\n+    const NANOS_IN_MICRO: u32 = 1_000;\n+    let _ = dur.subsec_nanos() / NANOS_IN_MICRO;\n+\n+    // Other literals aren't linted\n+    let _ = dur.subsec_nanos() / 699;\n+\n+}"}, {"sha": "f77aa2172aa64539c8d523ba48733166a1072c12", "filename": "tests/ui/duration_subsec.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7b2fa2077fa48826fa98fab4402de0c5037de065/tests%2Fui%2Fduration_subsec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b2fa2077fa48826fa98fab4402de0c5037de065/tests%2Fui%2Fduration_subsec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduration_subsec.stderr?ref=7b2fa2077fa48826fa98fab4402de0c5037de065", "patch": "@@ -0,0 +1,28 @@\n+error: Calling `subsec_micros()` is more concise than this calculation\n+ --> $DIR/duration_subsec.rs:8:22\n+  |\n+8 |     let bad_micros = dur.subsec_nanos() / 1_000;\n+  |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_micros()`\n+  |\n+  = note: `-D duration-subsec` implied by `-D warnings`\n+\n+error: Calling `subsec_millis()` is more concise than this calculation\n+  --> $DIR/duration_subsec.rs:12:22\n+   |\n+12 |     let bad_millis = dur.subsec_nanos() / 1_000_000;\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_millis()`\n+\n+error: Calling `subsec_micros()` is more concise than this calculation\n+  --> $DIR/duration_subsec.rs:17:13\n+   |\n+17 |     let _ = (&dur).subsec_nanos() / 1_000;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(&dur).subsec_micros()`\n+\n+error: Calling `subsec_micros()` is more concise than this calculation\n+  --> $DIR/duration_subsec.rs:21:13\n+   |\n+21 |     let _ = dur.subsec_nanos() / NANOS_IN_MICRO;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dur.subsec_micros()`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/duration_subsec.stdout", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7b2fa2077fa48826fa98fab4402de0c5037de065/tests%2Fui%2Fduration_subsec.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7b2fa2077fa48826fa98fab4402de0c5037de065/tests%2Fui%2Fduration_subsec.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduration_subsec.stdout?ref=7b2fa2077fa48826fa98fab4402de0c5037de065"}]}