{"sha": "ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMmI4NGRkZjExOWM5NTAyNzJjNWYxZWIzMjFmM2Y5ZTkwYmVkZDQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-08T06:48:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-09T09:32:16Z"}, "message": "introduce hir debugging infra\n\nThis is to make debugging rust-analyzer easier.\n\nThe idea is that `dbg!(krate.debug(db))` will print the actual, fuzzy\ncrate name, instead of precise ID. Debug printing infra is a separate\nthing, to make sure that the actual hir doesn't have access to global\ninformation.\n\nDo not use `.debug` for `log::` logging: debugging executes queries,\nand might introduce unneded dependencies to the crate graph", "tree": {"sha": "d746c95cef14b27f67f1e5fd32d289e6d20b4d57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d746c95cef14b27f67f1e5fd32d289e6d20b4d57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "html_url": "https://github.com/rust-lang/rust/commit/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "734a43e95afc97773c234956a95b78caed88f2a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/734a43e95afc97773c234956a95b78caed88f2a3", "html_url": "https://github.com/rust-lang/rust/commit/734a43e95afc97773c234956a95b78caed88f2a3"}], "stats": {"total": 184, "additions": 166, "deletions": 18}, "files": [{"sha": "ceb26961e0169a2e8e9e4d476250d5a4019ff01f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "patch": "@@ -1060,6 +1060,7 @@ dependencies = [\n  \"lsp-server 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lsp-types 0.61.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_db 0.1.0\",\n  \"ra_ide_api 0.1.0\",\n  \"ra_prof 0.1.0\",\n  \"ra_project_model 0.1.0\","}, {"sha": "a1ace61b650c2eb8afcc8d5d09a4b571ff79f079", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "patch": "@@ -82,6 +82,12 @@ pub struct CyclicDependencies;\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct CrateId(pub u32);\n \n+impl CrateId {\n+    pub fn shift(self, amount: u32) -> CrateId {\n+        CrateId(self.0 + amount)\n+    }\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum Edition {\n     Edition2018,\n@@ -178,15 +184,19 @@ impl CrateGraph {\n \n     /// Extends this crate graph by adding a complete disjoint second crate\n     /// graph.\n-    pub fn extend(&mut self, other: CrateGraph) {\n+    ///\n+    /// The ids of the crates in the `other` graph are shifted by the return\n+    /// amount.\n+    pub fn extend(&mut self, other: CrateGraph) -> u32 {\n         let start = self.arena.len() as u32;\n         self.arena.extend(other.arena.into_iter().map(|(id, mut data)| {\n-            let new_id = CrateId(id.0 + start);\n+            let new_id = id.shift(start);\n             for dep in &mut data.dependencies {\n-                dep.crate_id = CrateId(dep.crate_id.0 + start);\n+                dep.crate_id = dep.crate_id.shift(start);\n             }\n             (new_id, data)\n         }));\n+        start\n     }\n \n     fn dfs_find(&self, target: CrateId, from: CrateId, visited: &mut FxHashSet<CrateId>) -> bool {"}, {"sha": "f7f124904e927d4228b1974d1c3c40ad4b270056", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "patch": "@@ -5,6 +5,7 @@ use ra_syntax::{ast, Parse, SmolStr, SyntaxNode};\n \n use crate::{\n     adt::{EnumData, StructData},\n+    debug::HirDebugDatabase,\n     generics::{GenericDef, GenericParams},\n     ids,\n     impl_block::{ImplBlock, ImplSourceMap, ModuleImplBlocks},\n@@ -83,7 +84,7 @@ pub trait AstDatabase: InternDatabase {\n // This database uses `AstDatabase` internally,\n #[salsa::query_group(DefDatabaseStorage)]\n #[salsa::requires(AstDatabase)]\n-pub trait DefDatabase: InternDatabase {\n+pub trait DefDatabase: InternDatabase + HirDebugDatabase {\n     #[salsa::invoke(crate::adt::StructData::struct_data_query)]\n     fn struct_data(&self, s: Struct) -> Arc<StructData>;\n "}, {"sha": "5a835741d188e096c028d120b3252bf6ce8fb07c", "filename": "crates/ra_hir/src/debug.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_hir%2Fsrc%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdebug.rs?ref=ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "patch": "@@ -0,0 +1,64 @@\n+use std::{cell::Cell, fmt};\n+\n+use ra_db::{CrateId, FileId};\n+\n+use crate::{db::HirDatabase, Crate, Module, Name};\n+\n+impl Crate {\n+    pub fn debug(self, db: &impl HirDebugDatabase) -> impl fmt::Debug + '_ {\n+        debug_fn(move |fmt| db.debug_crate(self, fmt))\n+    }\n+}\n+\n+impl Module {\n+    pub fn debug(self, db: &impl HirDebugDatabase) -> impl fmt::Debug + '_ {\n+        debug_fn(move |fmt| db.debug_module(self, fmt))\n+    }\n+}\n+\n+pub trait HirDebugHelper: HirDatabase {\n+    fn crate_name(&self, _krate: CrateId) -> Option<String> {\n+        None\n+    }\n+    fn file_path(&self, _file_id: FileId) -> Option<String> {\n+        None\n+    }\n+}\n+\n+pub trait HirDebugDatabase {\n+    fn debug_crate(&self, krate: Crate, fmt: &mut fmt::Formatter<'_>) -> fmt::Result;\n+    fn debug_module(&self, module: Module, fmt: &mut fmt::Formatter<'_>) -> fmt::Result;\n+}\n+\n+impl<DB: HirDebugHelper> HirDebugDatabase for DB {\n+    fn debug_crate(&self, krate: Crate, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let mut builder = fmt.debug_tuple(\"Crate\");\n+        match self.crate_name(krate.crate_id) {\n+            Some(name) => builder.field(&name),\n+            None => builder.field(&krate.crate_id),\n+        }\n+        .finish()\n+    }\n+\n+    fn debug_module(&self, module: Module, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let file_id = module.definition_source(self).file_id.original_file(self);\n+        let path = self.file_path(file_id);\n+        fmt.debug_struct(\"Module\")\n+            .field(\"name\", &module.name(self).unwrap_or_else(Name::missing))\n+            .field(\"path\", &path.unwrap_or_else(|| \"N/A\".to_string()))\n+            .finish()\n+    }\n+}\n+\n+fn debug_fn(f: impl FnOnce(&mut fmt::Formatter<'_>) -> fmt::Result) -> impl fmt::Debug {\n+    struct DebugFn<F>(Cell<Option<F>>);\n+\n+    impl<F: FnOnce(&mut fmt::Formatter<'_>) -> fmt::Result> fmt::Debug for DebugFn<F> {\n+        fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+            let f = self.0.take().unwrap();\n+            f(fmt)\n+        }\n+    }\n+\n+    DebugFn(Cell::new(Some(f)))\n+}"}, {"sha": "24ee84f86a7f15f79dee5abd125b31368fd24d27", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "patch": "@@ -20,6 +20,7 @@ macro_rules! impl_froms {\n }\n \n mod either;\n+pub mod debug;\n \n pub mod db;\n #[macro_use]"}, {"sha": "8dcea50713f230c6bb1dd726f77e77e8a0abf720", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "patch": "@@ -2,13 +2,14 @@ use std::{panic, sync::Arc};\n \n use parking_lot::Mutex;\n use ra_db::{\n-    salsa, CrateGraph, Edition, FileId, FilePosition, SourceDatabase, SourceRoot, SourceRootId,\n+    salsa, CrateGraph, CrateId, Edition, FileId, FilePosition, SourceDatabase, SourceRoot,\n+    SourceRootId,\n };\n use relative_path::RelativePathBuf;\n use rustc_hash::FxHashMap;\n use test_utils::{extract_offset, parse_fixture, CURSOR_MARKER};\n \n-use crate::{db, diagnostics::DiagnosticSink};\n+use crate::{db, debug::HirDebugHelper, diagnostics::DiagnosticSink};\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n \n@@ -24,10 +25,22 @@ pub struct MockDatabase {\n     events: Mutex<Option<Vec<salsa::Event<MockDatabase>>>>,\n     runtime: salsa::Runtime<MockDatabase>,\n     files: FxHashMap<String, FileId>,\n+    crate_names: Arc<FxHashMap<CrateId, String>>,\n+    file_paths: Arc<FxHashMap<FileId, String>>,\n }\n \n impl panic::RefUnwindSafe for MockDatabase {}\n \n+impl HirDebugHelper for MockDatabase {\n+    fn crate_name(&self, krate: CrateId) -> Option<String> {\n+        self.crate_names.get(&krate).cloned()\n+    }\n+\n+    fn file_path(&self, file_id: FileId) -> Option<String> {\n+        self.file_paths.get(&file_id).cloned()\n+    }\n+}\n+\n impl MockDatabase {\n     pub fn with_files(fixture: &str) -> MockDatabase {\n         let (db, position) = MockDatabase::from_fixture(fixture);\n@@ -62,6 +75,7 @@ impl MockDatabase {\n         for (crate_name, (crate_root, edition, _)) in graph.0.iter() {\n             let crate_root = self.file_id_of(&crate_root);\n             let crate_id = crate_graph.add_crate_root(crate_root, *edition);\n+            Arc::make_mut(&mut self.crate_names).insert(crate_id, crate_name.clone());\n             ids.insert(crate_name, crate_id);\n         }\n         for (crate_name, (_, _, deps)) in graph.0.iter() {\n@@ -151,8 +165,11 @@ impl MockDatabase {\n         let is_crate_root = rel_path == \"lib.rs\" || rel_path == \"/main.rs\";\n \n         let file_id = FileId(self.files.len() as u32);\n+\n         let prev = self.files.insert(path.to_string(), file_id);\n         assert!(prev.is_none(), \"duplicate files in the text fixture\");\n+        Arc::make_mut(&mut self.file_paths).insert(file_id, path.to_string());\n+\n         let text = Arc::new(text.to_string());\n         self.set_file_text(file_id, text);\n         self.set_file_relative_path(file_id, rel_path.clone());\n@@ -200,6 +217,8 @@ impl Default for MockDatabase {\n             events: Default::default(),\n             runtime: salsa::Runtime::default(),\n             files: FxHashMap::default(),\n+            crate_names: Default::default(),\n+            file_paths: Default::default(),\n         };\n         db.set_crate_graph(Default::default());\n         db\n@@ -213,6 +232,8 @@ impl salsa::ParallelDatabase for MockDatabase {\n             runtime: self.runtime.snapshot(self),\n             // only the root database can be used to get file_id by path.\n             files: FxHashMap::default(),\n+            file_paths: Arc::clone(&self.file_paths),\n+            crate_names: Arc::clone(&self.crate_names),\n         })\n     }\n }"}, {"sha": "0d52f5ffb796f16a74b6cdbadd0dbbf70d016c98", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "patch": "@@ -2,7 +2,7 @@ use std::{fmt, sync::Arc, time};\n \n use ra_db::{\n     salsa::{Database, Durability, SweepStrategy},\n-    CrateGraph, FileId, SourceDatabase, SourceRoot, SourceRootId,\n+    CrateGraph, CrateId, FileId, SourceDatabase, SourceRoot, SourceRootId,\n };\n use ra_prof::{memory_usage, profile, Bytes};\n use ra_syntax::SourceFile;\n@@ -11,7 +11,7 @@ use relative_path::RelativePathBuf;\n use rustc_hash::FxHashMap;\n \n use crate::{\n-    db::RootDatabase,\n+    db::{DebugData, RootDatabase},\n     status::syntax_tree_stats,\n     symbol_index::{SymbolIndex, SymbolsDatabase},\n };\n@@ -23,6 +23,7 @@ pub struct AnalysisChange {\n     files_changed: Vec<(FileId, Arc<String>)>,\n     libraries_added: Vec<LibraryData>,\n     crate_graph: Option<CrateGraph>,\n+    debug_data: DebugData,\n }\n \n impl fmt::Debug for AnalysisChange {\n@@ -83,6 +84,14 @@ impl AnalysisChange {\n     pub fn set_crate_graph(&mut self, graph: CrateGraph) {\n         self.crate_graph = Some(graph);\n     }\n+\n+    pub fn set_debug_crate_name(&mut self, crate_id: CrateId, name: String) {\n+        self.debug_data.crate_names.insert(crate_id, name);\n+    }\n+\n+    pub fn set_debug_root_path(&mut self, source_root_id: SourceRootId, path: String) {\n+        self.debug_data.root_paths.insert(source_root_id, path);\n+    }\n }\n \n #[derive(Debug)]\n@@ -200,6 +209,8 @@ impl RootDatabase {\n         if let Some(crate_graph) = change.crate_graph {\n             self.set_crate_graph_with_durability(Arc::new(crate_graph), Durability::HIGH)\n         }\n+\n+        Arc::make_mut(&mut self.debug_data).merge(change.debug_data)\n     }\n \n     fn apply_root_change(&mut self, root_id: SourceRootId, root_change: RootChange) {"}, {"sha": "4c5159d612f3c00c66b9cb8c6710baea6b8ce16b", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "patch": "@@ -2,8 +2,9 @@ use std::{sync::Arc, time};\n \n use ra_db::{\n     salsa::{self, Database, Durability},\n-    Canceled, CheckCanceled, FileId, SourceDatabase,\n+    Canceled, CheckCanceled, CrateId, FileId, SourceDatabase, SourceRootId,\n };\n+use rustc_hash::FxHashMap;\n \n use crate::{\n     symbol_index::{self, SymbolsDatabase},\n@@ -23,10 +24,23 @@ use crate::{\n pub(crate) struct RootDatabase {\n     runtime: salsa::Runtime<RootDatabase>,\n     pub(crate) feature_flags: Arc<FeatureFlags>,\n+    pub(crate) debug_data: Arc<DebugData>,\n     pub(crate) last_gc: time::Instant,\n     pub(crate) last_gc_check: time::Instant,\n }\n \n+impl hir::debug::HirDebugHelper for RootDatabase {\n+    fn crate_name(&self, krate: CrateId) -> Option<String> {\n+        self.debug_data.crate_names.get(&krate).cloned()\n+    }\n+    fn file_path(&self, file_id: FileId) -> Option<String> {\n+        let source_root_id = self.file_source_root(file_id);\n+        let source_root_path = self.debug_data.root_paths.get(&source_root_id)?;\n+        let file_path = self.file_relative_path(file_id);\n+        Some(format!(\"{}/{}\", source_root_path, file_path.display()))\n+    }\n+}\n+\n impl salsa::Database for RootDatabase {\n     fn salsa_runtime(&self) -> &salsa::Runtime<RootDatabase> {\n         &self.runtime\n@@ -58,6 +72,7 @@ impl RootDatabase {\n             last_gc: time::Instant::now(),\n             last_gc_check: time::Instant::now(),\n             feature_flags: Arc::new(feature_flags),\n+            debug_data: Default::default(),\n         };\n         db.set_crate_graph_with_durability(Default::default(), Durability::HIGH);\n         db.set_local_roots_with_durability(Default::default(), Durability::HIGH);\n@@ -77,6 +92,7 @@ impl salsa::ParallelDatabase for RootDatabase {\n             last_gc: self.last_gc,\n             last_gc_check: self.last_gc_check,\n             feature_flags: Arc::clone(&self.feature_flags),\n+            debug_data: Arc::clone(&self.debug_data),\n         })\n     }\n }\n@@ -90,3 +106,16 @@ fn line_index(db: &impl ra_db::SourceDatabase, file_id: FileId) -> Arc<LineIndex\n     let text = db.file_text(file_id);\n     Arc::new(LineIndex::new(&*text))\n }\n+\n+#[derive(Debug, Default, Clone)]\n+pub(crate) struct DebugData {\n+    pub(crate) root_paths: FxHashMap<SourceRootId, String>,\n+    pub(crate) crate_names: FxHashMap<CrateId, String>,\n+}\n+\n+impl DebugData {\n+    pub(crate) fn merge(&mut self, other: DebugData) {\n+        self.root_paths.extend(other.root_paths.into_iter());\n+        self.crate_names.extend(other.crate_names.into_iter());\n+    }\n+}"}, {"sha": "677d81835e9d3ae687f5bea26a3f02966554eda9", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "patch": "@@ -18,6 +18,7 @@ parking_lot = \"0.9.0\"\n jod-thread = \"0.1.0\"\n ra_vfs = \"0.4.0\"\n ra_syntax = { path = \"../ra_syntax\" }\n+ra_db = { path = \"../ra_db\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_ide_api = { path = \"../ra_ide_api\" }\n lsp-server = \"0.2.0\""}, {"sha": "232409c3be08694cf80f1c94d611b2abbc0c1ad3", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "patch": "@@ -92,6 +92,7 @@ impl WorldState {\n             let vfs_root_path = vfs.root2path(r);\n             let is_local = folder_roots.iter().any(|it| vfs_root_path.starts_with(it));\n             change.add_root(SourceRootId(r.0), is_local);\n+            change.set_debug_root_path(SourceRootId(r.0), vfs_root_path.display().to_string());\n         }\n \n         // Create crate graph from all the workspaces\n@@ -101,7 +102,11 @@ impl WorldState {\n             vfs_file.map(|f| FileId(f.0))\n         };\n         for ws in workspaces.iter() {\n-            crate_graph.extend(ws.to_crate_graph(&mut load));\n+            let (graph, crate_names) = ws.to_crate_graph(&mut load);\n+            let shift = crate_graph.extend(graph);\n+            for (crate_id, name) in crate_names {\n+                change.set_debug_crate_name(crate_id.shift(shift), name)\n+            }\n         }\n         change.set_crate_graph(crate_graph);\n "}, {"sha": "4fa32dc3407441dbc91720433bc782ef03ee7d54", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef2b84ddf119c950272c5f1eb321f3f9e90bedd4/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=ef2b84ddf119c950272c5f1eb321f3f9e90bedd4", "patch": "@@ -9,7 +9,7 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n-use ra_db::{CrateGraph, Edition, FileId};\n+use ra_db::{CrateGraph, CrateId, Edition, FileId};\n use rustc_hash::FxHashMap;\n use serde_json::from_reader;\n \n@@ -113,8 +113,12 @@ impl ProjectWorkspace {\n         }\n     }\n \n-    pub fn to_crate_graph(&self, load: &mut dyn FnMut(&Path) -> Option<FileId>) -> CrateGraph {\n+    pub fn to_crate_graph(\n+        &self,\n+        load: &mut dyn FnMut(&Path) -> Option<FileId>,\n+    ) -> (CrateGraph, FxHashMap<CrateId, String>) {\n         let mut crate_graph = CrateGraph::default();\n+        let mut names = FxHashMap::default();\n         match self {\n             ProjectWorkspace::Json { project } => {\n                 let mut crates = FxHashMap::default();\n@@ -151,10 +155,9 @@ impl ProjectWorkspace {\n                 let mut sysroot_crates = FxHashMap::default();\n                 for krate in sysroot.crates() {\n                     if let Some(file_id) = load(krate.root(&sysroot)) {\n-                        sysroot_crates.insert(\n-                            krate,\n-                            crate_graph.add_crate_root(file_id, Edition::Edition2018),\n-                        );\n+                        let crate_id = crate_graph.add_crate_root(file_id, Edition::Edition2018);\n+                        sysroot_crates.insert(krate, crate_id);\n+                        names.insert(crate_id, krate.name(&sysroot).to_string());\n                     }\n                 }\n                 for from in sysroot.crates() {\n@@ -182,6 +185,7 @@ impl ProjectWorkspace {\n                         if let Some(file_id) = load(root) {\n                             let edition = pkg.edition(&cargo);\n                             let crate_id = crate_graph.add_crate_root(file_id, edition);\n+                            names.insert(crate_id, pkg.name(&cargo).to_string());\n                             if tgt.kind(&cargo) == TargetKind::Lib {\n                                 lib_tgt = Some(crate_id);\n                                 pkg_to_lib_crate.insert(pkg, crate_id);\n@@ -212,7 +216,7 @@ impl ProjectWorkspace {\n                     }\n                 }\n \n-                // Now add a dep ednge from all targets of upstream to the lib\n+                // Now add a dep edge from all targets of upstream to the lib\n                 // target of downstream.\n                 for pkg in cargo.packages() {\n                     for dep in pkg.dependencies(&cargo) {\n@@ -233,7 +237,7 @@ impl ProjectWorkspace {\n                 }\n             }\n         }\n-        crate_graph\n+        (crate_graph, names)\n     }\n \n     pub fn workspace_root_for(&self, path: &Path) -> Option<&Path> {"}]}