{"sha": "e48b6b459974245efcfc9edda468b4c587cbf37c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0OGI2YjQ1OTk3NDI0NWVmY2ZjOWVkZGE0NjhiNGM1ODdjYmYzN2M=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-22T05:10:10Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-05-18T05:01:36Z"}, "message": "Stabilize extended_key_value_attributes\n\n # Stabilization report\n\n ## Summary\n\nThis stabilizes using macro expansion in key-value attributes, like so:\n\n ```rust\n #[doc = include_str!(\"my_doc.md\")]\n struct S;\n\n #[path = concat!(env!(\"OUT_DIR\"), \"/generated.rs\")]\n mod m;\n ```\n\nSee the changes to the reference for details on what macros are allowed;\nsee Petrochenkov's excellent blog post [on internals](https://internals.rust-lang.org/t/macro-expansion-points-in-attributes/11455)\nfor alternatives that were considered and rejected (\"why accept no more\nand no less?\")\n\nThis has been available on nightly since 1.50 with no major issues.\n\n ## Notes\n\n ### Accepted syntax\n\nThe parser accepts arbitrary Rust expressions in this position, but any expression other than a macro invocation will ultimately lead to an error because it is not expected by the built-in expression forms (e.g., `#[doc]`).  Note that decorators and the like may be able to observe other expression forms.\n\n ### Expansion ordering\n\nExpansion of macro expressions in \"inert\" attributes occurs after decorators have executed, analogously to macro expressions appearing in the function body or other parts of decorator input.\n\nThere is currently no way for decorators to accept macros in key-value position if macro expansion must be performed before the decorator executes (if the macro can simply be copied into the output for later expansion, that can work).\n\n ## Test cases\n\n - https://github.com/rust-lang/rust/blob/master/src/test/ui/attributes/key-value-expansion-on-mac.rs\n - https://github.com/rust-lang/rust/blob/master/src/test/rustdoc/external-doc.rs\n\nThe feature has also been dogfooded extensively in the compiler and\nstandard library:\n\n- https://github.com/rust-lang/rust/pull/83329\n- https://github.com/rust-lang/rust/pull/83230\n- https://github.com/rust-lang/rust/pull/82641\n- https://github.com/rust-lang/rust/pull/80534\n\n ## Implementation history\n\n- Initial proposal: https://github.com/rust-lang/rust/issues/55414#issuecomment-554005412\n- Experiment to see how much code it would break: https://github.com/rust-lang/rust/pull/67121\n- Preliminary work to restrict expansion that would conflict with this\nfeature: https://github.com/rust-lang/rust/pull/77271\n- Initial implementation: https://github.com/rust-lang/rust/pull/78837\n- Fix for an ICE: https://github.com/rust-lang/rust/pull/80563\n\n ## Unresolved Questions\n\n~~https://github.com/rust-lang/rust/pull/83366#issuecomment-805180738 listed some concerns, but they have been resolved as of this final report.~~\n\n ## Additional Information\n\n There are two workarounds that have a similar effect for `#[doc]`\nattributes on nightly. One is to emulate this behavior by using a limited version of this feature that was stabilized for historical reasons:\n\n```rust\nmacro_rules! forward_inner_docs {\n    ($e:expr => $i:item) => {\n        #[doc = $e]\n        $i\n    };\n}\n\nforward_inner_docs!(include_str!(\"lib.rs\") => struct S {});\n```\n\nThis also works for other attributes (like `#[path = concat!(...)]`).\nThe other is to use `doc(include)`:\n\n```rust\n #![feature(external_doc)]\n #[doc(include = \"lib.rs\")]\n struct S {}\n```\n\nThe first works, but is non-trivial for people to discover, and\ndifficult to read and maintain. The second is a strange special-case for\na particular use of the macro. This generalizes it to work for any use\ncase, not just including files.\n\nI plan to remove `doc(include)` when this is stabilized. The\n`forward_inner_docs` workaround will still compile without warnings, but\nI expect it to be used less once it's no longer necessary.", "tree": {"sha": "338e6a97b1f4d0c4ec3c2fdbc7acb64d0af8ae31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/338e6a97b1f4d0c4ec3c2fdbc7acb64d0af8ae31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e48b6b459974245efcfc9edda468b4c587cbf37c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e48b6b459974245efcfc9edda468b4c587cbf37c", "html_url": "https://github.com/rust-lang/rust/commit/e48b6b459974245efcfc9edda468b4c587cbf37c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e48b6b459974245efcfc9edda468b4c587cbf37c/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e99439f4dacc8ba0d2ca48d221694362d587927", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e99439f4dacc8ba0d2ca48d221694362d587927", "html_url": "https://github.com/rust-lang/rust/commit/3e99439f4dacc8ba0d2ca48d221694362d587927"}], "stats": {"total": 97, "additions": 21, "deletions": 76}, "files": [{"sha": "4996c2195efdf2402f8cd32c816671c31623f553", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e48b6b459974245efcfc9edda468b4c587cbf37c/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48b6b459974245efcfc9edda468b4c587cbf37c/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=e48b6b459974245efcfc9edda468b4c587cbf37c", "patch": "@@ -712,10 +712,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(const_trait_impl, \"const trait impls are experimental\");\n     gate_all!(half_open_range_patterns, \"half-open range patterns are unstable\");\n     gate_all!(inline_const, \"inline-const is experimental\");\n-    gate_all!(\n-        extended_key_value_attributes,\n-        \"arbitrary expressions in key-value attributes are unstable\"\n-    );\n     gate_all!(\n         const_generics_defaults,\n         \"default values for const generic parameters are experimental\""}, {"sha": "8eef06f018f3af91871a09e4462d8af129500c5d", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48b6b459974245efcfc9edda468b4c587cbf37c/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48b6b459974245efcfc9edda468b4c587cbf37c/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=e48b6b459974245efcfc9edda468b4c587cbf37c", "patch": "@@ -8,7 +8,7 @@\n #![feature(bool_to_option)]\n #![feature(const_cstr_unchecked)]\n #![feature(crate_visibility_modifier)]\n-#![feature(extended_key_value_attributes)]\n+#![cfg_attr(bootstrap, feature(extended_key_value_attributes))]\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]"}, {"sha": "65352f0bc6e7b9f6c9e09a4dc23686779c8ed0f4", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48b6b459974245efcfc9edda468b4c587cbf37c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48b6b459974245efcfc9edda468b4c587cbf37c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=e48b6b459974245efcfc9edda468b4c587cbf37c", "patch": "@@ -5,7 +5,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(crate_visibility_modifier)]\n #![feature(backtrace)]\n-#![feature(extended_key_value_attributes)]\n+#![cfg_attr(bootstrap, feature(extended_key_value_attributes))]\n #![feature(format_args_capture)]\n #![feature(iter_zip)]\n #![feature(nll)]"}, {"sha": "eef71e096a52e0ebf579282691f700008d03714e", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48b6b459974245efcfc9edda468b4c587cbf37c/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48b6b459974245efcfc9edda468b4c587cbf37c/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=e48b6b459974245efcfc9edda468b4c587cbf37c", "patch": "@@ -281,6 +281,8 @@ declare_features! (\n     (accepted, or_patterns, \"1.53.0\", Some(54883), None),\n     /// Allows defining identifiers beyond ASCII.\n     (accepted, non_ascii_idents, \"1.53.0\", Some(55467), None),\n+    /// Allows arbitrary expressions in key-value attributes at parse time.\n+    (accepted, extended_key_value_attributes, \"1.54.0\", Some(78835), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "763264476b341ca506a41dbd3c567c18cf4c0f7c", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e48b6b459974245efcfc9edda468b4c587cbf37c/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48b6b459974245efcfc9edda468b4c587cbf37c/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=e48b6b459974245efcfc9edda468b4c587cbf37c", "patch": "@@ -601,9 +601,6 @@ declare_features! (\n     /// Allows capturing disjoint fields in a closure/generator (RFC 2229).\n     (active, capture_disjoint_fields, \"1.49.0\", Some(53488), None),\n \n-    /// Allows arbitrary expressions in key-value attributes at parse time.\n-    (active, extended_key_value_attributes, \"1.50.0\", Some(78835), None),\n-\n     /// Allows const generics to have default values (e.g. `struct Foo<const N: usize = 3>(...);`).\n     (active, const_generics_defaults, \"1.51.0\", Some(44580), None),\n "}, {"sha": "71e997994deff85d8ad76304a5bdde9f03f49336", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48b6b459974245efcfc9edda468b4c587cbf37c/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48b6b459974245efcfc9edda468b4c587cbf37c/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=e48b6b459974245efcfc9edda468b4c587cbf37c", "patch": "@@ -4,7 +4,7 @@\n \n #![feature(crate_visibility_modifier)]\n #![feature(const_panic)]\n-#![feature(extended_key_value_attributes)]\n+#![cfg_attr(bootstrap, feature(extended_key_value_attributes))]\n #![feature(in_band_lifetimes)]\n #![feature(once_cell)]\n #![cfg_attr(bootstrap, feature(or_patterns))]"}, {"sha": "4c2bc6ebf3143071d896df2480049798f4636d4f", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e48b6b459974245efcfc9edda468b4c587cbf37c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48b6b459974245efcfc9edda468b4c587cbf37c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=e48b6b459974245efcfc9edda468b4c587cbf37c", "patch": "@@ -1065,24 +1065,11 @@ impl<'a> Parser<'a> {\n             } else if !delimited_only {\n                 if self.eat(&token::Eq) {\n                     let eq_span = self.prev_token.span;\n-                    let mut is_interpolated_expr = false;\n-                    if let token::Interpolated(nt) = &self.token.kind {\n-                        if let token::NtExpr(..) = **nt {\n-                            is_interpolated_expr = true;\n-                        }\n-                    }\n \n                     // Collect tokens because they are used during lowering to HIR.\n                     let expr = self.parse_expr_force_collect()?;\n                     let span = expr.span;\n \n-                    match &expr.kind {\n-                        // Not gated to support things like `doc = $expr` that work on stable.\n-                        _ if is_interpolated_expr => {}\n-                        ExprKind::Lit(lit) if lit.kind.is_unsuffixed() => {}\n-                        _ => self.sess.gated_spans.gate(sym::extended_key_value_attributes, span),\n-                    }\n-\n                     let token_kind = token::Interpolated(Lrc::new(token::NtExpr(expr)));\n                     MacArgs::Eq(eq_span, Token::new(token_kind, span))\n                 } else {"}, {"sha": "f652c52db530160623782f897a303897f9bb075d", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48b6b459974245efcfc9edda468b4c587cbf37c/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48b6b459974245efcfc9edda468b4c587cbf37c/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=e48b6b459974245efcfc9edda468b4c587cbf37c", "patch": "@@ -113,7 +113,7 @@\n #![cfg_attr(bootstrap, feature(doc_spotlight))]\n #![cfg_attr(not(bootstrap), feature(doc_notable_trait))]\n #![feature(duration_consts_2)]\n-#![feature(extended_key_value_attributes)]\n+#![cfg_attr(bootstrap, feature(extended_key_value_attributes))]\n #![feature(extern_types)]\n #![feature(fundamental)]\n #![feature(intra_doc_pointers)]"}, {"sha": "6d11698d268223ffd95dc4e86377127a0795fb82", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48b6b459974245efcfc9edda468b4c587cbf37c/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48b6b459974245efcfc9edda468b4c587cbf37c/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=e48b6b459974245efcfc9edda468b4c587cbf37c", "patch": "@@ -268,7 +268,7 @@\n #![feature(exact_size_is_empty)]\n #![feature(exhaustive_patterns)]\n #![feature(extend_one)]\n-#![feature(extended_key_value_attributes)]\n+#![cfg_attr(bootstrap, feature(extended_key_value_attributes))]\n #![feature(fn_traits)]\n #![feature(format_args_nl)]\n #![feature(gen_future)]"}, {"sha": "7d97d5e4ab52f654b94da1fb6a9b9830f763a35f", "filename": "src/doc/rustdoc/README.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e48b6b459974245efcfc9edda468b4c587cbf37c/src%2Fdoc%2Frustdoc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/e48b6b459974245efcfc9edda468b4c587cbf37c/src%2Fdoc%2Frustdoc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2FREADME.md?ref=e48b6b459974245efcfc9edda468b4c587cbf37c", "patch": "@@ -0,0 +1,5 @@\n+# Rustdoc\n+\n+This is documentation for rustdoc itself, written in mdbook format.\n+To build the book, use `x.py doc src/doc/rustdoc`.\n+To run doctests, use `x.py test src/doc/rustdoc`."}, {"sha": "d192f7d5ce9e52d6d87fe0defa148e07e176bbc6", "filename": "src/doc/rustdoc/src/the-doc-attribute.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e48b6b459974245efcfc9edda468b4c587cbf37c/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/e48b6b459974245efcfc9edda468b4c587cbf37c/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md?ref=e48b6b459974245efcfc9edda468b4c587cbf37c", "patch": "@@ -35,6 +35,13 @@ Which can feel more flexible. Note that this would generate this:\n \n but given that docs are rendered via Markdown, it will remove these newlines.\n \n+Another use case is for including external files as documentation:\n+\n+```rust,no_run\n+#[doc = include_str!(\"../README.md\")]\n+# fn f() {}\n+```\n+\n The `doc` attribute has more options though! These don't involve the text of\n the output, but instead, various aspects of the presentation of the output.\n We've split them into two kinds below: attributes that are useful at the"}, {"sha": "0dadca551a9ff14a84f851a7de490a9b046d5187", "filename": "src/test/rustdoc/external-doc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e48b6b459974245efcfc9edda468b4c587cbf37c/src%2Ftest%2Frustdoc%2Fexternal-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48b6b459974245efcfc9edda468b4c587cbf37c/src%2Ftest%2Frustdoc%2Fexternal-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fexternal-doc.rs?ref=e48b6b459974245efcfc9edda468b4c587cbf37c", "patch": "@@ -1,5 +1,4 @@\n #![feature(external_doc)]\n-#![feature(extended_key_value_attributes)]\n \n // @has external_doc/struct.CanHasDocs.html\n // @has - '//h1' 'External Docs'"}, {"sha": "95bc1c04961b0b01c49e4a762a6b6e30f1e09f9b", "filename": "src/test/ui/attributes/key-value-expansion-on-mac.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e48b6b459974245efcfc9edda468b4c587cbf37c/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48b6b459974245efcfc9edda468b4c587cbf37c/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.rs?ref=e48b6b459974245efcfc9edda468b4c587cbf37c", "patch": "@@ -1,4 +1,3 @@\n-#![feature(extended_key_value_attributes)]\n #![feature(rustc_attrs)]\n \n #[rustc_dummy = stringify!(a)] // OK"}, {"sha": "fa9ea543765f71f3e95c1fc6e13541f5745fedab", "filename": "src/test/ui/attributes/key-value-expansion-on-mac.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48b6b459974245efcfc9edda468b4c587cbf37c/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e48b6b459974245efcfc9edda468b4c587cbf37c/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fattributes%2Fkey-value-expansion-on-mac.stderr?ref=e48b6b459974245efcfc9edda468b4c587cbf37c", "patch": "@@ -1,5 +1,5 @@\n error: unexpected token: `stringify!(b)`\n-  --> $DIR/key-value-expansion-on-mac.rs:12:17\n+  --> $DIR/key-value-expansion-on-mac.rs:11:17\n    |\n LL | #[rustc_dummy = stringify!(b)]\n    |                 ^^^^^^^^^^^^^"}, {"sha": "f19fdb45f1f1e6f9a8dfa44bf198a75aa6073a38", "filename": "src/test/ui/feature-gates/feature-gate-extended_key_value_attributes.rs", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.rs?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -1,8 +0,0 @@\n-#[cfg(FALSE)]\n-#[attr = multi::segment::path] //~ ERROR arbitrary expressions in key-value attributes are unstable\n-#[attr = macro_call!()] //~ ERROR arbitrary expressions in key-value attributes are unstable\n-#[attr = 1 + 2] //~ ERROR arbitrary expressions in key-value attributes are unstable\n-#[attr = what?] //~ ERROR arbitrary expressions in key-value attributes are unstable\n-struct S;\n-\n-fn main() {}"}, {"sha": "9887814b90762bbf06e4e5a44d5c33d2d36e9678", "filename": "src/test/ui/feature-gates/feature-gate-extended_key_value_attributes.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e99439f4dacc8ba0d2ca48d221694362d587927/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extended_key_value_attributes.stderr?ref=3e99439f4dacc8ba0d2ca48d221694362d587927", "patch": "@@ -1,39 +0,0 @@\n-error[E0658]: arbitrary expressions in key-value attributes are unstable\n-  --> $DIR/feature-gate-extended_key_value_attributes.rs:2:10\n-   |\n-LL | #[attr = multi::segment::path]\n-   |          ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #78835 <https://github.com/rust-lang/rust/issues/78835> for more information\n-   = help: add `#![feature(extended_key_value_attributes)]` to the crate attributes to enable\n-\n-error[E0658]: arbitrary expressions in key-value attributes are unstable\n-  --> $DIR/feature-gate-extended_key_value_attributes.rs:3:10\n-   |\n-LL | #[attr = macro_call!()]\n-   |          ^^^^^^^^^^^^^\n-   |\n-   = note: see issue #78835 <https://github.com/rust-lang/rust/issues/78835> for more information\n-   = help: add `#![feature(extended_key_value_attributes)]` to the crate attributes to enable\n-\n-error[E0658]: arbitrary expressions in key-value attributes are unstable\n-  --> $DIR/feature-gate-extended_key_value_attributes.rs:4:10\n-   |\n-LL | #[attr = 1 + 2]\n-   |          ^^^^^\n-   |\n-   = note: see issue #78835 <https://github.com/rust-lang/rust/issues/78835> for more information\n-   = help: add `#![feature(extended_key_value_attributes)]` to the crate attributes to enable\n-\n-error[E0658]: arbitrary expressions in key-value attributes are unstable\n-  --> $DIR/feature-gate-extended_key_value_attributes.rs:5:10\n-   |\n-LL | #[attr = what?]\n-   |          ^^^^^\n-   |\n-   = note: see issue #78835 <https://github.com/rust-lang/rust/issues/78835> for more information\n-   = help: add `#![feature(extended_key_value_attributes)]` to the crate attributes to enable\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "a6531490c015914091f13b6423d65a64611090a5", "filename": "src/test/ui/suffixed-literal-meta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48b6b459974245efcfc9edda468b4c587cbf37c/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48b6b459974245efcfc9edda468b4c587cbf37c/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.rs?ref=e48b6b459974245efcfc9edda468b4c587cbf37c", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_attrs, extended_key_value_attributes)]\n+#![feature(rustc_attrs)]\n \n #[rustc_dummy = 1usize] //~ ERROR: suffixed literals are not allowed in attributes\n #[rustc_dummy = 1u8] //~ ERROR: suffixed literals are not allowed in attributes"}]}