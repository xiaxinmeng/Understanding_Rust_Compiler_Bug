{"sha": "b1b202d302d1e84886360f9c8f146b9562db5f23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYjIwMmQzMDJkMWU4NDg4NjM2MGY5YzhmMTQ2Yjk1NjJkYjVmMjM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-27T18:21:44Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-27T18:33:09Z"}, "message": "Use DPS for assignment and local initialization\n\nIssue #667", "tree": {"sha": "0f60b421fda8c2cc5786c726c0e1c71df99f2c10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f60b421fda8c2cc5786c726c0e1c71df99f2c10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1b202d302d1e84886360f9c8f146b9562db5f23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b202d302d1e84886360f9c8f146b9562db5f23", "html_url": "https://github.com/rust-lang/rust/commit/b1b202d302d1e84886360f9c8f146b9562db5f23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1b202d302d1e84886360f9c8f146b9562db5f23/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e42f3b8481049fd3626c24b95297282b68df1436", "url": "https://api.github.com/repos/rust-lang/rust/commits/e42f3b8481049fd3626c24b95297282b68df1436", "html_url": "https://github.com/rust-lang/rust/commit/e42f3b8481049fd3626c24b95297282b68df1436"}], "stats": {"total": 107, "additions": 56, "deletions": 51}, "files": [{"sha": "b9b0273d9cc1d7cfc18df32e996bcab9557e2661", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 20, "deletions": 31, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b1b202d302d1e84886360f9c8f146b9562db5f23/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b202d302d1e84886360f9c8f146b9562db5f23/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=b1b202d302d1e84886360f9c8f146b9562db5f23", "patch": "@@ -2208,7 +2208,7 @@ fn trans_unary(bcx: @block_ctxt, op: ast::unop, e: @ast::expr,\n             let llety = T_ptr(type_of(ccx, e_sp, e_ty));\n             body = PointerCast(bcx, body, llety);\n         }\n-        bcx = trans_expr_save_in(bcx, e, body);\n+        bcx = trans_expr_save_in(bcx, e, body, INIT);\n         revoke_clean(bcx, box);\n         ret store_in_dest(bcx, box, dest);\n       }\n@@ -4033,15 +4033,15 @@ fn trans_tup(bcx: @block_ctxt, elts: [@ast::expr], id: ast::node_id,\n       }\n       save_in(pos) { (pos, none) }\n       overwrite(pos, _) {\n-        let scratch = alloca(bcx, val_ty(pos));\n+        let scratch = alloca(bcx, llvm::LLVMGetElementType(val_ty(pos)));\n         (scratch, some(pos))\n       }\n     };\n     let temp_cleanups = [], i = 0;\n     for e in elts {\n         let dst = GEP_tup_like_1(bcx, t, addr, [0, i]);\n         let e_ty = ty::expr_ty(bcx_tcx(bcx), e);\n-        bcx = trans_expr_save_in(dst.bcx, e, dst.val);\n+        bcx = trans_expr_save_in(dst.bcx, e, dst.val, INIT);\n         add_clean_temp_mem(bcx, dst.val, e_ty);\n         temp_cleanups += [dst.val];\n         i += 1;\n@@ -4072,7 +4072,7 @@ fn trans_rec(bcx: @block_ctxt, fields: [ast::field],\n       // The expressions that populate the fields might still use the old\n       // record, so we build the new on in a scratch area\n       overwrite(pos, _) {\n-        let scratch = alloca(bcx, val_ty(pos));\n+        let scratch = alloca(bcx, llvm::LLVMGetElementType(val_ty(pos)));\n         (scratch, some(pos))\n       }\n     };\n@@ -4096,7 +4096,7 @@ fn trans_rec(bcx: @block_ctxt, fields: [ast::field],\n         fn test(n: str, f: ast::field) -> bool { str::eq(f.node.ident, n) }\n         alt vec::find(bind test(tf.ident, _), fields) {\n           some(f) {\n-            bcx = trans_expr_save_in(bcx, f.node.expr, dst.val);\n+            bcx = trans_expr_save_in(bcx, f.node.expr, dst.val, INIT);\n           }\n           none. {\n             let base = GEP_tup_like_1(bcx, t, base_val, [0, i]);\n@@ -4198,20 +4198,17 @@ fn trans_expr(cx: @block_ctxt, e: @ast::expr) -> result {\n     }\n }\n \n-// FIXME add support for INIT/DROP_EXISTING\n-fn trans_expr_save_in(bcx: @block_ctxt, e: @ast::expr, dest: ValueRef)\n-    -> @block_ctxt {\n+fn trans_expr_save_in(bcx: @block_ctxt, e: @ast::expr, dest: ValueRef,\n+                      kind: copy_action) -> @block_ctxt {\n     let tcx = bcx_tcx(bcx), t = ty::expr_ty(tcx, e);\n-    if ty::type_is_bot(tcx, t) || ty::type_is_nil(tcx, t) {\n-        ret trans_expr_dps(bcx, e, ignore);\n-    } else if type_is_immediate(bcx_ccx(bcx), t) {\n-        let cell = empty_dest_cell();\n-        bcx = trans_expr_dps(bcx, e, by_val(cell));\n-        Store(bcx, *cell, dest);\n-        ret bcx;\n+    let dst = if ty::type_is_bot(tcx, t) || ty::type_is_nil(tcx, t) {\n+        ignore\n+    } else if kind == INIT {\n+        save_in(dest)\n     } else {\n-        ret trans_expr_dps(bcx, e, save_in(dest));\n-    }\n+        overwrite(dest, t)\n+    };\n+    ret trans_expr_dps(bcx, e, dst);\n }\n \n fn trans_expr_by_ref(bcx: @block_ctxt, e: @ast::expr) -> result {\n@@ -4338,13 +4335,9 @@ fn trans_expr_dps(bcx: @block_ctxt, e: @ast::expr, dest: dest)\n       }\n       ast::expr_assign(dst, src) {\n         assert dest == ignore;\n-        let lhs_res = trans_lval(bcx, dst);\n-        assert (lhs_res.is_mem);\n-        let rhs = trans_lval(lhs_res.bcx, src);\n-        let t = ty::expr_ty(bcx_tcx(bcx), src);\n-        // FIXME: calculate copy init-ness in typestate.\n-        ret move_val_if_temp(rhs.bcx, DROP_EXISTING, lhs_res.val,\n-                             rhs, t);\n+        let {bcx, val: lhs_addr, is_mem} = trans_lval(bcx, dst);\n+        assert is_mem;\n+        ret trans_expr_save_in(bcx, src, lhs_addr, DROP_EXISTING);\n       }\n       ast::expr_swap(dst, src) {\n         assert dest == ignore;\n@@ -4650,7 +4643,7 @@ fn trans_ret(bcx: @block_ctxt, e: option::t<@ast::expr>) -> @block_ctxt {\n             Store(cx, val, bcx.fcx.llretptr);\n             bcx = cx;\n         } else {\n-            bcx = trans_expr_save_in(bcx, x, bcx.fcx.llretptr);\n+            bcx = trans_expr_save_in(bcx, x, bcx.fcx.llretptr, INIT);\n         }\n       }\n       _ {}\n@@ -4694,13 +4687,9 @@ fn init_local(bcx: @block_ctxt, local: @ast::local) -> @block_ctxt {\n       some(init) {\n         alt init.op {\n           ast::init_assign. {\n-            // Use the type of the RHS because if it's _|_, the LHS\n-            // type might be something else, but we don't want to copy\n-            // the value.\n-            ty = node_id_type(bcx_ccx(bcx), init.expr.id);\n-            let sub = trans_lval(bcx, init.expr);\n-            bcx = move_val_if_temp(sub.bcx, INIT, llptr, sub, ty);\n+            bcx = trans_expr_save_in(bcx, init.expr, llptr, INIT);\n           }\n+          // FIXME[DPS] do a save_in when expr isn't lval\n           ast::init_move. {\n             let sub = trans_lval(bcx, init.expr);\n             bcx = move_val(sub.bcx, INIT, llptr, sub, ty);"}, {"sha": "61fbcc87867e7ed6748f7dea76d1ad5148e2550e", "filename": "src/comp/middle/trans_uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1b202d302d1e84886360f9c8f146b9562db5f23/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b202d302d1e84886360f9c8f146b9562db5f23/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_uniq.rs?ref=b1b202d302d1e84886360f9c8f146b9562db5f23", "patch": "@@ -30,7 +30,7 @@ fn trans_uniq(bcx: @block_ctxt, contents: @ast::expr,\n     check type_is_unique_box(bcx, uniq_ty);\n     let {bcx, val: llptr} = alloc_uniq(bcx, uniq_ty);\n     add_clean_free(bcx, llptr, true);\n-    bcx = trans::trans_expr_save_in(bcx, contents, llptr);\n+    bcx = trans::trans_expr_save_in(bcx, contents, llptr, INIT);\n     revoke_clean(bcx, llptr);\n     ret trans::store_in_dest(bcx, llptr, dest);\n }"}, {"sha": "86f235176793d46969cf4745c4a52f32f503bf47", "filename": "src/comp/middle/trans_vec.rs", "status": "modified", "additions": 35, "deletions": 19, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b1b202d302d1e84886360f9c8f146b9562db5f23/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1b202d302d1e84886360f9c8f146b9562db5f23/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_vec.rs?ref=b1b202d302d1e84886360f9c8f146b9562db5f23", "patch": "@@ -20,7 +20,11 @@ fn get_alloc(bcx: @block_ctxt, vptrptr: ValueRef) -> ValueRef {\n }\n fn get_dataptr(bcx: @block_ctxt, vptrptr: ValueRef, unit_ty: TypeRef) ->\n    ValueRef {\n-    let ptr = GEPi(bcx, Load(bcx, vptrptr), [0, abi::vec_elt_elems as int]);\n+    ret get_dataptr_simple(bcx, Load(bcx, vptrptr), unit_ty);\n+}\n+fn get_dataptr_simple(bcx: @block_ctxt, vptr: ValueRef, unit_ty: TypeRef)\n+    -> ValueRef {\n+    let ptr = GEPi(bcx, vptr, [0, abi::vec_elt_elems as int]);\n     PointerCast(bcx, ptr, T_ptr(unit_ty))\n }\n \n@@ -49,8 +53,7 @@ type alloc_result =\n      llunitsz: ValueRef,\n      llunitty: TypeRef};\n \n-fn alloc(bcx: @block_ctxt, vec_ty: ty::t, elts: uint, dest: dest)\n-    -> alloc_result {\n+fn alloc(bcx: @block_ctxt, vec_ty: ty::t, elts: uint) -> alloc_result {\n     let unit_ty = ty::sequence_element_type(bcx_tcx(bcx), vec_ty);\n     let llunitty = type_of_or_i8(bcx, unit_ty);\n     let llvecty = T_vec(llunitty);\n@@ -61,11 +64,8 @@ fn alloc(bcx: @block_ctxt, vec_ty: ty::t, elts: uint, dest: dest)\n     let {bcx: bcx, val: vptr} = alloc_raw(bcx, fill, alloc);\n     let vptr = PointerCast(bcx, vptr, T_ptr(llvecty));\n \n-    let vptrptr = alt dest { trans::save_in(a) { a } };\n-    Store(bcx, vptr, vptrptr);\n-//    add_clean_temp(bcx, vptrptr, vec_ty);\n     ret {bcx: bcx,\n-         val: vptrptr,\n+         val: vptr,\n          unit_ty: unit_ty,\n          llunitsz: unit_sz,\n          llunitty: llunitty};\n@@ -110,16 +110,15 @@ fn trans_vec(bcx: @block_ctxt, args: [@ast::expr], id: ast::node_id,\n     }\n     let vec_ty = node_id_type(bcx_ccx(bcx), id);\n     let {bcx: bcx,\n-         val: vptrptr,\n+         val: vptr,\n          llunitsz: llunitsz,\n          unit_ty: unit_ty,\n          llunitty: llunitty} =\n-        alloc(bcx, vec_ty, vec::len(args), dest);\n+        alloc(bcx, vec_ty, vec::len(args));\n \n-    let vptr = Load(bcx, vptrptr);\n     add_clean_free(bcx, vptr, true);\n     // Store the individual elements.\n-    let dataptr = get_dataptr(bcx, vptrptr, llunitty);\n+    let dataptr = get_dataptr_simple(bcx, vptr, llunitty);\n     let i = 0u, temp_cleanups = [vptr];\n     for e in args {\n         let lv = trans_lval(bcx, e);\n@@ -133,17 +132,28 @@ fn trans_vec(bcx: @block_ctxt, args: [@ast::expr], id: ast::node_id,\n         i += 1u;\n     }\n     for clean in temp_cleanups { revoke_clean(bcx, clean); }\n+    let vptrptr = alt dest {\n+      trans::save_in(a) { a }\n+      trans::overwrite(a, t) { bcx = trans::drop_ty(bcx, a, t); a }\n+    };\n+    Store(bcx, vptr, vptrptr);\n     ret bcx;\n }\n+\n fn trans_str(bcx: @block_ctxt, s: str, dest: dest) -> @block_ctxt {\n     let veclen = std::str::byte_len(s) + 1u; // +1 for \\0\n-    let {bcx: bcx, val: sptrptr, _} =\n-        alloc(bcx, ty::mk_str(bcx_tcx(bcx)), veclen, dest);\n+    let {bcx: bcx, val: sptr, _} =\n+        alloc(bcx, ty::mk_str(bcx_tcx(bcx)), veclen);\n \n     let llcstr = C_cstr(bcx_ccx(bcx), s);\n     let bcx =\n-        call_memmove(bcx, get_dataptr(bcx, sptrptr, T_i8()), llcstr,\n+        call_memmove(bcx, get_dataptr_simple(bcx, sptr, T_i8()), llcstr,\n                      C_uint(veclen)).bcx;\n+    let sptrptr = alt dest {\n+      trans::save_in(a) { a }\n+      trans::overwrite(a, t) { bcx = trans::drop_ty(bcx, a, t); a }\n+    };\n+    Store(bcx, sptr, sptrptr);\n     ret bcx;\n }\n \n@@ -237,11 +247,9 @@ fn trans_add(bcx: @block_ctxt, vec_ty: ty::t, lhsptr: ValueRef,\n     let new_fill = Add(bcx, lhs_fill, rhs_fill);\n     let {bcx: bcx, val: new_vec_ptr} = alloc_raw(bcx, new_fill, new_fill);\n     new_vec_ptr = PointerCast(bcx, new_vec_ptr, T_ptr(T_vec(llunitty)));\n-    let new_vec_ptr_ptr = alt dest { trans::save_in(a) { a } };\n-    Store(bcx, new_vec_ptr, new_vec_ptr_ptr);\n \n-    let write_ptr_ptr =\n-        do_spill_noroot(bcx, get_dataptr(bcx, new_vec_ptr_ptr, llunitty));\n+    let write_ptr_ptr = do_spill_noroot\n+        (bcx, get_dataptr_simple(bcx, new_vec_ptr, llunitty));\n     let copy_fn =\n         bind fn (bcx: @block_ctxt, addr: ValueRef, _ty: ty::t,\n                  write_ptr_ptr: ValueRef, unit_ty: ty::t, llunitsz: ValueRef)\n@@ -259,7 +267,15 @@ fn trans_add(bcx: @block_ctxt, vec_ty: ty::t, lhsptr: ValueRef,\n              }(_, _, _, write_ptr_ptr, unit_ty, llunitsz);\n \n     let bcx = iter_vec_raw(bcx, lhsptr, vec_ty, lhs_fill, copy_fn);\n-    ret iter_vec_raw(bcx, rhsptr, vec_ty, rhs_fill, copy_fn);\n+    bcx = iter_vec_raw(bcx, rhsptr, vec_ty, rhs_fill, copy_fn);\n+    alt dest {\n+      trans::save_in(a) { Store(bcx, new_vec_ptr, a); }\n+      trans::overwrite(a, t) {\n+        bcx = trans::drop_ty(bcx, a, t);\n+        Store(bcx, new_vec_ptr, a);\n+      }\n+    }\n+    ret bcx;\n }\n \n type val_and_ty_fn = fn(@block_ctxt, ValueRef, ty::t) -> result;"}]}