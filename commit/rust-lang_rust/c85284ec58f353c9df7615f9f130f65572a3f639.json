{"sha": "c85284ec58f353c9df7615f9f130f65572a3f639", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4NTI4NGVjNThmMzUzYzlkZjc2MTVmOWYxMzBmNjU1NzJhM2Y2Mzk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-12-06T15:10:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-06T15:10:05Z"}, "message": "Rollup merge of #67054 - RalfJung:set-discriminant-unreachable, r=oli-obk\n\ncodegen \"unreachable\" for invalid SetDiscriminant\n\nFollow-up from https://github.com/rust-lang/rust/pull/66960. I also realized I don't understand our policy for using `abort` vs `unreachable`. AFAIK `abort` is safe to call and just aborts the process, while `unreachable` is UB. But sometimes we use both, like here\n\nhttps://github.com/rust-lang/rust/blob/d825e35ee8325146e6c175a4c61bcb645b347d5e/src/librustc_codegen_ssa/mir/block.rs#L827-L828\n\nand here\n\nhttps://github.com/rust-lang/rust/blob/d825e35ee8325146e6c175a4c61bcb645b347d5e/src/librustc_codegen_ssa/mir/block.rs#L264-L265\n\nThe second case is even more confusing because that looks like an unreachable `return` to me, so why would we codegen a safe abort there?\n\nr? @eddyb Cc @oli-obk", "tree": {"sha": "12e3e839878ae783d2fcae5ee47c2f24ea61bd9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12e3e839878ae783d2fcae5ee47c2f24ea61bd9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c85284ec58f353c9df7615f9f130f65572a3f639", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd6m9OCRBK7hj4Ov3rIwAAdHIIAGrrFpQ/jCh6vLKiZrwIwz6W\n9ImQh7pJwOhoufpKDgiE/iHYSGNIzKKvokqO4wkKl/A55YKgeAbvCKUYCD292v5C\nEza8r7+Cn1CmIHge4POtvSU1ihBLgjQph4YYNI6DzjKKS9Rp4HHn39iIpcJLdpY8\nIWngSAWybU+Y8z+nlY3rsg2p+aeMSxeK6Ic8kZdlh7t8uuft2l/nwJ4MfZB2WcNk\nvOUx8WEjbyiwcFueWV/SygwSE73FWcYfuyjKliei9CZIdzXucDWI5/baVDIwxFDt\nlU1kQMsHSh9jrQlAjZn6AMAKaePtGEt9/WsWDjSem3rbtX4NigYqXySXZ6I7vG4=\n=tLI2\n-----END PGP SIGNATURE-----\n", "payload": "tree 12e3e839878ae783d2fcae5ee47c2f24ea61bd9d\nparent d1397db3f3e0010a2a2ce9efedc9903907143319\nparent f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1575645005 +0900\ncommitter GitHub <noreply@github.com> 1575645005 +0900\n\nRollup merge of #67054 - RalfJung:set-discriminant-unreachable, r=oli-obk\n\ncodegen \"unreachable\" for invalid SetDiscriminant\n\nFollow-up from https://github.com/rust-lang/rust/pull/66960. I also realized I don't understand our policy for using `abort` vs `unreachable`. AFAIK `abort` is safe to call and just aborts the process, while `unreachable` is UB. But sometimes we use both, like here\n\nhttps://github.com/rust-lang/rust/blob/d825e35ee8325146e6c175a4c61bcb645b347d5e/src/librustc_codegen_ssa/mir/block.rs#L827-L828\n\nand here\n\nhttps://github.com/rust-lang/rust/blob/d825e35ee8325146e6c175a4c61bcb645b347d5e/src/librustc_codegen_ssa/mir/block.rs#L264-L265\n\nThe second case is even more confusing because that looks like an unreachable `return` to me, so why would we codegen a safe abort there?\n\nr? @eddyb Cc @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c85284ec58f353c9df7615f9f130f65572a3f639", "html_url": "https://github.com/rust-lang/rust/commit/c85284ec58f353c9df7615f9f130f65572a3f639", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c85284ec58f353c9df7615f9f130f65572a3f639/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1397db3f3e0010a2a2ce9efedc9903907143319", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1397db3f3e0010a2a2ce9efedc9903907143319", "html_url": "https://github.com/rust-lang/rust/commit/d1397db3f3e0010a2a2ce9efedc9903907143319"}, {"sha": "f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76", "html_url": "https://github.com/rust-lang/rust/commit/f5bd94768a5ca901eb7555a4c3fd4d3005c1ad76"}], "stats": {"total": 63, "additions": 59, "deletions": 4}, "files": [{"sha": "ce703f2433506e6dbceaa2230d5e73e5cbc4b7ed", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c85284ec58f353c9df7615f9f130f65572a3f639/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c85284ec58f353c9df7615f9f130f65572a3f639/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=c85284ec58f353c9df7615f9f130f65572a3f639", "patch": "@@ -261,7 +261,11 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         if self.fn_abi.ret.layout.abi.is_uninhabited() {\n             // Functions with uninhabited return values are marked `noreturn`,\n             // so we should make sure that we never actually do.\n+            // We play it safe by using a well-defined `abort`, but we could go for immediate UB\n+            // if that turns out to be helpful.\n             bx.abort();\n+            // `abort` does not terminate the block, so we still need to generate\n+            // an `unreachable` terminator after it.\n             bx.unreachable();\n             return;\n         }\n@@ -825,6 +829,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n             mir::TerminatorKind::Abort => {\n                 bx.abort();\n+                // `abort` does not terminate the block, so we still need to generate\n+                // an `unreachable` terminator after it.\n                 bx.unreachable();\n             }\n "}, {"sha": "a6dec81274915057d93c22c36195494c63899095", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c85284ec58f353c9df7615f9f130f65572a3f639/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c85284ec58f353c9df7615f9f130f65572a3f639/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=c85284ec58f353c9df7615f9f130f65572a3f639", "patch": "@@ -475,9 +475,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             },\n                         }\n                         // Allow RalfJ to sleep soundly knowing that even refactorings that remove\n-                        // the above error (or silence it under some conditions) will not cause UB\n+                        // the above error (or silence it under some conditions) will not cause UB.\n                         bx.abort();\n-                        // We've errored, so we don't have to produce working code.\n+                        // We still have to return an operand but it doesn't matter,\n+                        // this code is unreachable.\n                         let ty = self.monomorphize(&constant.literal.ty);\n                         let layout = bx.cx().layout_of(ty);\n                         bx.load_operand(PlaceRef::new_sized("}, {"sha": "e60b8861faf85ebc31d69dafbe94c031ddc813fe", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c85284ec58f353c9df7615f9f130f65572a3f639/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c85284ec58f353c9df7615f9f130f65572a3f639/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=c85284ec58f353c9df7615f9f130f65572a3f639", "patch": "@@ -333,6 +333,9 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         variant_index: VariantIdx\n     ) {\n         if self.layout.for_variant(bx.cx(), variant_index).abi.is_uninhabited() {\n+            // We play it safe by using a well-defined `abort`, but we could go for immediate UB\n+            // if that turns out to be helpful.\n+            bx.abort();\n             return;\n         }\n         match self.layout.variants {\n@@ -488,10 +491,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     },\n                     Err(_) => {\n                         // This is unreachable as long as runtime\n-                        // and compile-time agree on values\n+                        // and compile-time agree perfectly.\n                         // With floats that won't always be true,\n-                        // so we generate an abort.\n+                        // so we generate a (safe) abort.\n                         bx.abort();\n+                        // We still have to return a place but it doesn't matter,\n+                        // this code is unreachable.\n                         let llval = bx.cx().const_undef(\n                             bx.cx().type_ptr_to(bx.cx().backend_type(layout))\n                         );"}, {"sha": "d9614f062b7e96e8ab3d2af71e4a2c3b635214e0", "filename": "src/test/codegen/set-discriminant-invalid.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c85284ec58f353c9df7615f9f130f65572a3f639/src%2Ftest%2Fcodegen%2Fset-discriminant-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c85284ec58f353c9df7615f9f130f65572a3f639/src%2Ftest%2Fcodegen%2Fset-discriminant-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fset-discriminant-invalid.rs?ref=c85284ec58f353c9df7615f9f130f65572a3f639", "patch": "@@ -0,0 +1,43 @@\n+// compile-flags: -C opt-level=0\n+#![crate_type = \"lib\"]\n+\n+pub enum ApiError {}\n+#[allow(dead_code)]\n+pub struct TokioError {\n+    b: bool,\n+}\n+pub enum Error {\n+    Api {\n+        source: ApiError,\n+    },\n+    Ethereum,\n+    Tokio {\n+        source: TokioError,\n+    },\n+}\n+struct Api;\n+impl IntoError<Error> for Api\n+{\n+    type Source = ApiError;\n+    // CHECK-LABEL: @into_error\n+    // CHECK: llvm.trap()\n+    // Also check the next two instructions to make sure we do not match against `trap`\n+    // elsewhere in the code.\n+    // CHECK-NEXT: load\n+    // CHECK-NEXT: ret\n+    #[no_mangle]\n+    fn into_error(self, error: Self::Source) -> Error {\n+        Error::Api {\n+            source: (|v| v)(error),\n+        }\n+    }\n+}\n+\n+pub trait IntoError<E>\n+{\n+    /// The underlying error\n+    type Source;\n+\n+    /// Combine the information to produce the error\n+    fn into_error(self, source: Self::Source) -> E;\n+}"}]}