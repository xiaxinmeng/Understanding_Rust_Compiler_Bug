{"sha": "87157361170ef5cd0f8a7a307d19d2343ed3618f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MTU3MzYxMTcwZWY1Y2QwZjhhN2EzMDdkMTlkMjM0M2VkMzYxOGY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-27T11:36:02Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-28T23:32:56Z"}, "message": "std::hashmap: add an example with the basic methods.", "tree": {"sha": "ec0f2a2cf8fe20288e3de4065c7aa11c9dd8f043", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec0f2a2cf8fe20288e3de4065c7aa11c9dd8f043"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87157361170ef5cd0f8a7a307d19d2343ed3618f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87157361170ef5cd0f8a7a307d19d2343ed3618f", "html_url": "https://github.com/rust-lang/rust/commit/87157361170ef5cd0f8a7a307d19d2343ed3618f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87157361170ef5cd0f8a7a307d19d2343ed3618f/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ca0b58f60e55afdffc68a8aef24704ad2a2a2e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca0b58f60e55afdffc68a8aef24704ad2a2a2e3", "html_url": "https://github.com/rust-lang/rust/commit/2ca0b58f60e55afdffc68a8aef24704ad2a2a2e3"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "03956560db939bc788dc7ed66283d300a05e795e", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/87157361170ef5cd0f8a7a307d19d2343ed3618f/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87157361170ef5cd0f8a7a307d19d2343ed3618f/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=87157361170ef5cd0f8a7a307d19d2343ed3618f", "patch": "@@ -12,6 +12,45 @@\n //!\n //! The tables use a keyed hash with new random keys generated for each container, so the ordering\n //! of a set of keys in a hash table is randomized.\n+//!\n+//! # Example\n+//!\n+//! ```rust\n+//! use std::hashmap::HashMap;\n+//!\n+//! // type inference lets us omit an explicit type signature (which\n+//! // would be `HashMap<&str, &str>` in this example).\n+//! let mut book_reviews = HashMap::new();\n+//!\n+//! // review some books.\n+//! book_reviews.insert(\"Adventures of Hucklebury Fin\",      \"My favorite book.\");\n+//! book_reviews.insert(\"Grimms' Fairy Tales\",               \"Masterpiece.\");\n+//! book_reviews.insert(\"Pride and Prejudice\",               \"Very enjoyable.\");\n+//! book_reviews.insert(\"The Adventures of Sherlock Holmes\", \"Eye lyked it alot.\");\n+//!\n+//! // check for a specific one.\n+//! if !book_reviews.contains_key(& &\"Les Mis\u00e9rables\") {\n+//!     println!(\"We've got {} reviews, but Les Mis\u00e9rables ain't one.\",\n+//!              book_reviews.len());\n+//! }\n+//!\n+//! // oops, this review has a lot of spelling mistakes, let's delete it.\n+//! book_reviews.remove(& &\"The Adventures of Sherlock Holmes\");\n+//!\n+//! // look up the values associated with some keys.\n+//! let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];\n+//! for book in to_find.iter() {\n+//!     match book_reviews.find(book) {\n+//!         Some(review) => println!(\"{}: {}\", *book, *review),\n+//!         None => println!(\"{} is unreviewed.\", *book)\n+//!     }\n+//! }\n+//!\n+//! // iterate over everything.\n+//! for (book, review) in book_reviews.iter() {\n+//!     println!(\"{}: \\\"{}\\\"\", *book, *review);\n+//! }\n+//! ```\n \n use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n use clone::Clone;"}]}