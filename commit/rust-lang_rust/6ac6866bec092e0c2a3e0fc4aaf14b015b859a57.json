{"sha": "6ac6866bec092e0c2a3e0fc4aaf14b015b859a57", "node_id": "C_kwDOAAsO6NoAKDZhYzY4NjZiZWMwOTJlMGMyYTNlMGZjNGFhZjE0YjAxNWI4NTlhNTc", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-06-20T20:10:43Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-06-21T16:38:22Z"}, "message": "Reverse folder hierarchy\n\n#91318 introduced a trait for infallible folders distinct from the fallible version.  For some reason (completely unfathomable to me now that I look at it with fresh eyes), the infallible trait was a supertrait of the fallible one: that is, all fallible folders were required to also be infallible.  Moreover the `Error` associated type was defined on the infallible trait!  It's so absurd that it has me questioning whether I was entirely sane.\n\nThis trait reverses the hierarchy, so that the fallible trait is a supertrait of the infallible one: all infallible folders are required to also be fallible (which is a trivial blanket implementation).  This of course makes much more sense!  It also enables the `Error` associated type to sit on the fallible trait, where it sensibly belongs.\n\nThere is one downside however: folders expose a `tcx` accessor method.  Since the blanket fallible implementation for infallible folders only has access to a generic `F: TypeFolder`, we need that trait to expose such an accessor to which we can delegate.  Alternatively it's possible to extract that accessor into a separate `HasTcx` trait (or similar) that would then be a supertrait of both the fallible and infallible folder traits: this would ensure that there's only one unambiguous `tcx` method, at the cost of a little additional boilerplate.  If desired, I can submit that as a separate PR.\n\nr? @jackh726", "tree": {"sha": "46e46203fac60a5f418cf5db9fc2154a972ab752", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46e46203fac60a5f418cf5db9fc2154a972ab752"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ac6866bec092e0c2a3e0fc4aaf14b015b859a57", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmKx8/4ACgkQB8rDzKfg\nZD99DxAAlBeIjBu0/7XD2AmIVXGGfyu1TQ2e3MjA3Dbvy56hBtr6bydC7kxXx3uG\n7zoFsCRxmEdlD/ozrV0hLhC+Rr6pYzEcwW8aH5kxLEwVix9+fghxV3FasqK72Qtt\njoAwk6IqLY1fMThI1z0TnXA/ZELyIKOD4t89mV5qLaMfwCLGdsLGE9PkdMrnDqfb\nT8Snptc7xrXKXnlJVytUvO26bCbMoKMsowyTQ2JNChgqy9ptrgUVbr8/Wfl2FI/j\nHBgOXungUQ+ygF5vye2ayMlMGqikwx+E0j6SE4Jx01BSFQ+rvbw8iCAr/iQhUmsa\ngo0VegqoN/golrAyuHBI79u/rnFYpBnRcnAxbJdvSXAlqQWI8iXXnY9EXE/clylA\nuJcpYpiwubVxmII2dtejKXLcnw/sxVb4aZRPfr02N6LCxJYB8pvKPnIg3abODPf6\n9lOeY6VdaoilzBGYB46kzVaclQ97J609gryrBKdhqpPRubDqdyK82BdpLi0vta1Q\nG4lC7iqb7+Y1G44ydyEYJ+bs4/3Nv/3FyUS0ffmMWt8IZlDugFSk/mZiGTVe3z3a\no02kOKjXQ93ypVRcli5fF77m3LC8yJq+x5frXjixfZZhQbt0Q1jK4p1E6sR3PzhM\nGZCoZF+I4u+GPBE9AUb1waJOGbFqofRtBEgZ9vTecuaTM9Djem0=\n=jSdV\n-----END PGP SIGNATURE-----", "payload": "tree 46e46203fac60a5f418cf5db9fc2154a972ab752\nparent 72fd41a8b4d3488c97df3c3c75ddd9951aa3c73f\nauthor Alan Egerton <eggyal@gmail.com> 1655755843 +0100\ncommitter Alan Egerton <eggyal@gmail.com> 1655829502 +0100\n\nReverse folder hierarchy\n\n#91318 introduced a trait for infallible folders distinct from the fallible version.  For some reason (completely unfathomable to me now that I look at it with fresh eyes), the infallible trait was a supertrait of the fallible one: that is, all fallible folders were required to also be infallible.  Moreover the `Error` associated type was defined on the infallible trait!  It's so absurd that it has me questioning whether I was entirely sane.\n\nThis trait reverses the hierarchy, so that the fallible trait is a supertrait of the infallible one: all infallible folders are required to also be fallible (which is a trivial blanket implementation).  This of course makes much more sense!  It also enables the `Error` associated type to sit on the fallible trait, where it sensibly belongs.\n\nThere is one downside however: folders expose a `tcx` accessor method.  Since the blanket fallible implementation for infallible folders only has access to a generic `F: TypeFolder`, we need that trait to expose such an accessor to which we can delegate.  Alternatively it's possible to extract that accessor into a separate `HasTcx` trait (or similar) that would then be a supertrait of both the fallible and infallible folder traits: this would ensure that there's only one unambiguous `tcx` method, at the cost of a little additional boilerplate.  If desired, I can submit that as a separate PR.\n\nr? @jackh726\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac6866bec092e0c2a3e0fc4aaf14b015b859a57", "html_url": "https://github.com/rust-lang/rust/commit/6ac6866bec092e0c2a3e0fc4aaf14b015b859a57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ac6866bec092e0c2a3e0fc4aaf14b015b859a57/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72fd41a8b4d3488c97df3c3c75ddd9951aa3c73f", "url": "https://api.github.com/repos/rust-lang/rust/commits/72fd41a8b4d3488c97df3c3c75ddd9951aa3c73f", "html_url": "https://github.com/rust-lang/rust/commit/72fd41a8b4d3488c97df3c3c75ddd9951aa3c73f"}], "stats": {"total": 67, "additions": 25, "deletions": 42}, "files": [{"sha": "1f3cb401314d6666141ad46cc736d3811c8f7ca5", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6866bec092e0c2a3e0fc4aaf14b015b859a57/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6866bec092e0c2a3e0fc4aaf14b015b859a57/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=6ac6866bec092e0c2a3e0fc4aaf14b015b859a57", "patch": "@@ -92,7 +92,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n                     .borrow_mut()\n                     .unwrap_region_constraints()\n                     .opportunistic_resolve_var(rid);\n-                self.tcx().reuse_or_mk_region(r, ty::ReVar(resolved))\n+                TypeFolder::tcx(self).reuse_or_mk_region(r, ty::ReVar(resolved))\n             }\n             _ => r,\n         }\n@@ -179,15 +179,13 @@ struct FullTypeResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n+impl<'a, 'tcx> FallibleTypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n     type Error = FixupError<'tcx>;\n \n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n-}\n \n-impl<'a, 'tcx> FallibleTypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n     fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n         if !t.needs_infer() {\n             Ok(t) // micro-optimize -- if there is nothing in this type that this fold affects..."}, {"sha": "71445603e2f155cc564a8ce1764263ceabe62ccd", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6866bec092e0c2a3e0fc4aaf14b015b859a57/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6866bec092e0c2a3e0fc4aaf14b015b859a57/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=6ac6866bec092e0c2a3e0fc4aaf14b015b859a57", "patch": "@@ -241,58 +241,37 @@ pub trait TypeSuperFoldable<'tcx>: TypeFoldable<'tcx> {\n /// a blanket implementation of [`FallibleTypeFolder`] will defer to\n /// the infallible methods of this trait to ensure that the two APIs\n /// are coherent.\n-pub trait TypeFolder<'tcx>: Sized {\n-    type Error = !;\n-\n+pub trait TypeFolder<'tcx>: FallibleTypeFolder<'tcx, Error = !> {\n     fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n \n     fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>\n     where\n         T: TypeFoldable<'tcx>,\n-        Self: TypeFolder<'tcx, Error = !>,\n     {\n         t.super_fold_with(self)\n     }\n \n-    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         t.super_fold_with(self)\n     }\n \n-    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         r.super_fold_with(self)\n     }\n \n-    fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         c.super_fold_with(self)\n     }\n \n-    fn fold_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ty::Unevaluated<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_unevaluated(&mut self, uv: ty::Unevaluated<'tcx>) -> ty::Unevaluated<'tcx> {\n         uv.super_fold_with(self)\n     }\n \n-    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n         p.super_fold_with(self)\n     }\n \n-    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx>\n-    where\n-        Self: TypeFolder<'tcx, Error = !>,\n-    {\n+    fn fold_mir_const(&mut self, c: mir::ConstantKind<'tcx>) -> mir::ConstantKind<'tcx> {\n         bug!(\"most type folders should not be folding MIR datastructures: {:?}\", c)\n     }\n }\n@@ -304,7 +283,11 @@ pub trait TypeFolder<'tcx>: Sized {\n /// A blanket implementation of this trait (that defers to the relevant\n /// method of [`TypeFolder`]) is provided for all infallible folders in\n /// order to ensure the two APIs are coherent.\n-pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {\n+pub trait FallibleTypeFolder<'tcx>: Sized {\n+    type Error;\n+\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n+\n     fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>\n     where\n         T: TypeFoldable<'tcx>,\n@@ -350,8 +333,14 @@ pub trait FallibleTypeFolder<'tcx>: TypeFolder<'tcx> {\n // delegates to infallible methods to ensure coherence.\n impl<'tcx, F> FallibleTypeFolder<'tcx> for F\n where\n-    F: TypeFolder<'tcx, Error = !>,\n+    F: TypeFolder<'tcx>,\n {\n+    type Error = !;\n+\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+        TypeFolder::tcx(self)\n+    }\n+\n     fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>\n     where\n         T: TypeFoldable<'tcx>,"}, {"sha": "66a0a192a87c179a35ed2a3162f937bb59c611bd", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6866bec092e0c2a3e0fc4aaf14b015b859a57/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6866bec092e0c2a3e0fc4aaf14b015b859a57/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=6ac6866bec092e0c2a3e0fc4aaf14b015b859a57", "patch": "@@ -228,15 +228,13 @@ impl<'tcx> TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+impl<'tcx> FallibleTypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     type Error = NormalizationError<'tcx>;\n \n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n-}\n \n-impl<'tcx> FallibleTypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     fn try_fold_ty(&mut self, ty: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n         match self.try_normalize_generic_arg_after_erasing_regions(ty.into()) {\n             Ok(t) => Ok(t.expect_ty()),"}, {"sha": "1417c8a511c24f8e0ffd784e3e9e0e8f2dc53530", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6866bec092e0c2a3e0fc4aaf14b015b859a57/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6866bec092e0c2a3e0fc4aaf14b015b859a57/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=6ac6866bec092e0c2a3e0fc4aaf14b015b859a57", "patch": "@@ -705,7 +705,7 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n             return val;\n         }\n \n-        let result = ty::fold::shift_vars(self.tcx(), val, self.binders_passed);\n+        let result = ty::fold::shift_vars(TypeFolder::tcx(self), val, self.binders_passed);\n         debug!(\"shift_vars: shifted result = {:?}\", result);\n \n         result"}, {"sha": "7f15b683fda3e59e3b89fd20736f649da874f3c0", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ac6866bec092e0c2a3e0fc4aaf14b015b859a57/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac6866bec092e0c2a3e0fc4aaf14b015b859a57/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=6ac6866bec092e0c2a3e0fc4aaf14b015b859a57", "patch": "@@ -12,7 +12,7 @@ use rustc_data_structures::sso::SsoHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_infer::traits::Normalized;\n use rustc_middle::mir;\n-use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::fold::{FallibleTypeFolder, TypeFoldable, TypeSuperFoldable};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitor};\n \n@@ -162,15 +162,13 @@ struct QueryNormalizer<'cx, 'tcx> {\n     universes: Vec<Option<ty::UniverseIndex>>,\n }\n \n-impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n+impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n     type Error = NoSolution;\n \n     fn tcx<'c>(&'c self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n-}\n \n-impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n     fn try_fold_binder<T: TypeFoldable<'tcx>>(\n         &mut self,\n         t: ty::Binder<'tcx, T>,"}]}