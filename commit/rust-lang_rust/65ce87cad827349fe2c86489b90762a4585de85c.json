{"sha": "65ce87cad827349fe2c86489b90762a4585de85c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1Y2U4N2NhZDgyNzM0OWZlMmM4NjQ4OWI5MDc2MmE0NTg1ZGU4NWM=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-10T19:05:23Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-10T19:05:23Z"}, "message": "gen PartialEq for basic enums", "tree": {"sha": "905bc8fdbe7860c39eb528b14030c8e68846451c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/905bc8fdbe7860c39eb528b14030c8e68846451c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65ce87cad827349fe2c86489b90762a4585de85c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65ce87cad827349fe2c86489b90762a4585de85c", "html_url": "https://github.com/rust-lang/rust/commit/65ce87cad827349fe2c86489b90762a4585de85c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65ce87cad827349fe2c86489b90762a4585de85c/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8a64c044a1e2d67adf7567ff5a8dea60833702d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8a64c044a1e2d67adf7567ff5a8dea60833702d", "html_url": "https://github.com/rust-lang/rust/commit/f8a64c044a1e2d67adf7567ff5a8dea60833702d"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "d8d62b73b880d63dc093aff688d072aa4f20441e", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65ce87cad827349fe2c86489b90762a4585de85c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ce87cad827349fe2c86489b90762a4585de85c/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=65ce87cad827349fe2c86489b90762a4585de85c", "patch": "@@ -699,7 +699,7 @@ enum Foo {\n \n impl PartialEq for Foo {\n     $0fn eq(&self, other: &Self) -> bool {\n-        std::mem::discriminant(self) == std::mem::discriminant(other)\n+        core::mem::discriminant(self) == core::mem::discriminant(other)\n     }\n }\n \"#,\n@@ -726,7 +726,7 @@ enum Foo {\n \n impl PartialEq for Foo {\n     $0fn eq(&self, other: &Self) -> bool {\n-        if std::mem::discriminant(self) == std::mem::discriminant(other) {\n+        if core::mem::discriminant(self) == core::mem::discriminant(other) {\n             match (self, other) {\n                 (Self::Bar(l0), Self::Bar(r0)) => l0 == r0,\n                 _ => true,\n@@ -770,7 +770,7 @@ enum Foo {\n \n impl PartialEq for Foo {\n     $0fn eq(&self, other: &Self) -> bool {\n-        if std::mem::discriminant(self) == std::mem::discriminant(other) {\n+        if core::mem::discriminant(self) == core::mem::discriminant(other) {\n             match (self, other) {\n                 (Self::Bar { bin: l_bin }, Self::Bar { bin: r_bin }) => l_bin == r_bin,\n                 (Self::Baz { qux: l_qux, fez: l_fez }, Self::Bar { qux: r_qux, fez: r_fez }) => l_qux == r_qux && l_fez == r_fez,"}, {"sha": "af870f38969002f6977c1aec4cca7cbe577c33d9", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/65ce87cad827349fe2c86489b90762a4585de85c/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65ce87cad827349fe2c86489b90762a4585de85c/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=65ce87cad827349fe2c86489b90762a4585de85c", "patch": "@@ -330,6 +330,15 @@ fn gen_hash_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n /// Generate a `PartialEq` impl based on the fields and members of the target type.\n fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n+    fn gen_discriminant() -> ast::Expr {\n+        let root = make::ext::ident_path(\"core\");\n+        let submodule = make::ext::ident_path(\"mem\");\n+        let fn_name = make::ext::ident_path(\"discriminant\");\n+        let fn_name = make::path_concat(submodule, fn_name);\n+        let fn_name = make::expr_path(make::path_concat(root, fn_name));\n+        fn_name\n+    }\n+\n     // FIXME: return `None` if the trait carries a generic type; we can only\n     // generate this code `Self` for the time being.\n \n@@ -338,9 +347,16 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n         ast::Adt::Union(_) => return None,\n \n         // FIXME: generate trait variants\n-        ast::Adt::Enum(_) => todo!(),\n+        ast::Adt::Enum(enum_) => {\n+            // => std::mem::discriminant(self) == std::mem::discriminant(other)\n+            let lhs = make::expr_path(make::ext::ident_path(\"self\"));\n+            let lhs = make::expr_call(gen_discriminant(), make::arg_list(Some(lhs)));\n+            let rhs = make::expr_path(make::ext::ident_path(\"other\"));\n+            let rhs = make::expr_call(gen_discriminant(), make::arg_list(Some(rhs)));\n+            let cmp = make::expr_op(ast::BinOp::EqualityTest, lhs, rhs);\n+            make::block_expr(None, Some(cmp)).indent(ast::edit::IndentLevel(1))\n+        }\n         ast::Adt::Struct(strukt) => match strukt.field_list() {\n-            // => self.<field>.hash(state);\n             Some(ast::FieldList::RecordFieldList(field_list)) => {\n                 let mut expr = None;\n                 for field in field_list.fields() {\n@@ -357,7 +373,6 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                 make::block_expr(None, expr).indent(ast::edit::IndentLevel(1))\n             }\n \n-            // => self.<field_index>.hash(state);\n             Some(ast::FieldList::TupleFieldList(field_list)) => {\n                 let mut expr = None;\n                 for (i, _) in field_list.fields().enumerate() {"}]}