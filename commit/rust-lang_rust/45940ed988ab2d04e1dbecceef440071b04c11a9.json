{"sha": "45940ed988ab2d04e1dbecceef440071b04c11a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1OTQwZWQ5ODhhYjJkMDRlMWRiZWNjZWVmNDQwMDcxYjA0YzExYTk=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-28T15:33:23Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-30T11:06:48Z"}, "message": "Remove vec::[r]position_between, replaced by slices & iterators.", "tree": {"sha": "d1069d2afedf1a3812fe0b663d16ab6a8c2c9523", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1069d2afedf1a3812fe0b663d16ab6a8c2c9523"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45940ed988ab2d04e1dbecceef440071b04c11a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45940ed988ab2d04e1dbecceef440071b04c11a9", "html_url": "https://github.com/rust-lang/rust/commit/45940ed988ab2d04e1dbecceef440071b04c11a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45940ed988ab2d04e1dbecceef440071b04c11a9/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d46bcc0e40c51b8acbf708971c2ecc51c57c0a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d46bcc0e40c51b8acbf708971c2ecc51c57c0a3", "html_url": "https://github.com/rust-lang/rust/commit/5d46bcc0e40c51b8acbf708971c2ecc51c57c0a3"}], "stats": {"total": 119, "additions": 13, "deletions": 106}, "files": [{"sha": "063d26d1424b758b75f8eed61cd53626a67fcbb7", "filename": "src/libextra/terminfo/parser/compiled.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45940ed988ab2d04e1dbecceef440071b04c11a9/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45940ed988ab2d04e1dbecceef440071b04c11a9/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs?ref=45940ed988ab2d04e1dbecceef440071b04c11a9", "patch": "@@ -291,12 +291,13 @@ pub fn parse(file: @Reader, longnames: bool) -> Result<~TermInfo, ~str> {\n \n \n             // Find the offset of the NUL we want to go to\n-            let nulpos = vec::position_between(string_table, offset as uint,\n-                                               string_table_bytes as uint, |&b| b == 0);\n+            let nulpos = string_table.slice(offset as uint, string_table_bytes as uint)\n+                .iter().position_(|&b| b == 0);\n             match nulpos {\n-                Some(x) => {\n+                Some(len) => {\n                     string_map.insert(name.to_owned(),\n-                                      string_table.slice(offset as uint, x).to_owned())\n+                                      string_table.slice(offset as uint,\n+                                                         offset as uint + len).to_owned())\n                 },\n                 None => {\n                     return Err(~\"invalid file: missing NUL in string_table\");"}, {"sha": "a704e604aa28ad1796339e35338055b6c07093f3", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 8, "deletions": 102, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/45940ed988ab2d04e1dbecceef440071b04c11a9/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45940ed988ab2d04e1dbecceef440071b04c11a9/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=45940ed988ab2d04e1dbecceef440071b04c11a9", "patch": "@@ -193,11 +193,11 @@ pub fn split<T:Copy>(v: &[T], f: &fn(t: &T) -> bool) -> ~[~[T]] {\n     let mut start = 0u;\n     let mut result = ~[];\n     while start < ln {\n-        match position_between(v, start, ln, |t| f(t)) {\n+        match v.slice(start, ln).iter().position_(|t| f(t)) {\n             None => break,\n             Some(i) => {\n-                result.push(v.slice(start, i).to_owned());\n-                start = i + 1u;\n+                result.push(v.slice(start, start + i).to_owned());\n+                start += i + 1u;\n             }\n         }\n     }\n@@ -217,7 +217,7 @@ pub fn splitn<T:Copy>(v: &[T], n: uint, f: &fn(t: &T) -> bool) -> ~[~[T]] {\n     let mut count = n;\n     let mut result = ~[];\n     while start < ln && count > 0u {\n-        match position_between(v, start, ln, |t| f(t)) {\n+        match v.slice(start, ln).iter().position_(|t| f(t)) {\n             None => break,\n             Some(i) => {\n                 result.push(v.slice(start, i).to_owned());\n@@ -242,7 +242,7 @@ pub fn rsplit<T:Copy>(v: &[T], f: &fn(t: &T) -> bool) -> ~[~[T]] {\n     let mut end = ln;\n     let mut result = ~[];\n     while end > 0 {\n-        match rposition_between(v, 0, end, |t| f(t)) {\n+        match v.slice(0, end).rposition(|t| f(t)) {\n             None => break,\n             Some(i) => {\n                 result.push(v.slice(i + 1, end).to_owned());\n@@ -267,7 +267,7 @@ pub fn rsplitn<T:Copy>(v: &[T], n: uint, f: &fn(t: &T) -> bool) -> ~[~[T]] {\n     let mut count = n;\n     let mut result = ~[];\n     while end > 0u && count > 0u {\n-        match rposition_between(v, 0u, end, |t| f(t)) {\n+        match v.slice(0, end).rposition(|t| f(t)) {\n             None => break,\n             Some(i) => {\n                 result.push(v.slice(i + 1u, end).to_owned());\n@@ -657,25 +657,6 @@ pub fn position_elem<T:Eq>(v: &[T], x: &T) -> Option<uint> {\n     v.iter().position_(|y| *x == *y)\n }\n \n-/**\n- * Find the first index matching some predicate within a range\n- *\n- * Apply function `f` to each element of `v` between the range\n- * [`start`, `end`). When function `f` returns true then an option containing\n- * the index is returned. If `f` matches no elements then none is returned.\n- */\n-pub fn position_between<T>(v: &[T],\n-                           start: uint,\n-                           end: uint,\n-                           f: &fn(t: &T) -> bool)\n-                        -> Option<uint> {\n-    assert!(start <= end);\n-    assert!(end <= v.len());\n-    let mut i = start;\n-    while i < end { if f(&v[i]) { return Some::<uint>(i); } i += 1u; }\n-    None\n-}\n-\n /// Find the last index containing a matching value\n pub fn rposition_elem<T:Eq>(v: &[T], x: &T) -> Option<uint> {\n     rposition(v, |y| *x == *y)\n@@ -689,31 +670,12 @@ pub fn rposition_elem<T:Eq>(v: &[T], x: &T) -> Option<uint> {\n  * matches no elements then none is returned.\n  */\n pub fn rposition<T>(v: &[T], f: &fn(t: &T) -> bool) -> Option<uint> {\n-    rposition_between(v, 0u, v.len(), f)\n-}\n-\n-/**\n- * Find the last index matching some predicate within a range\n- *\n- * Apply function `f` to each element of `v` in reverse order between the\n- * range [`start`, `end`). When function `f` returns true then an option\n- * containing the index is returned. If `f` matches no elements then none is\n- * returned.\n- */\n-pub fn rposition_between<T>(v: &[T], start: uint, end: uint,\n-                             f: &fn(t: &T) -> bool) -> Option<uint> {\n-    assert!(start <= end);\n-    assert!(end <= v.len());\n-    let mut i = end;\n-    while i > start {\n-        if f(&v[i - 1u]) { return Some::<uint>(i - 1u); }\n-        i -= 1u;\n+    for v.rev_iter().enumerate().advance |(i, t)| {\n+        if f(t) { return Some(v.len() - i - 1); }\n     }\n     None\n }\n \n-\n-\n /**\n  * Binary search a sorted vector with a comparator function.\n  *\n@@ -2885,34 +2847,6 @@ mod tests {\n         assert!(position_elem(v1, &4).is_none());\n     }\n \n-    #[test]\n-    fn test_position_between() {\n-        assert!(position_between([], 0u, 0u, f).is_none());\n-\n-        fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n-        let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n-\n-        assert!(position_between(v, 0u, 0u, f).is_none());\n-        assert!(position_between(v, 0u, 1u, f).is_none());\n-        assert_eq!(position_between(v, 0u, 2u, f), Some(1u));\n-        assert_eq!(position_between(v, 0u, 3u, f), Some(1u));\n-        assert_eq!(position_between(v, 0u, 4u, f), Some(1u));\n-\n-        assert!(position_between(v, 1u, 1u, f).is_none());\n-        assert_eq!(position_between(v, 1u, 2u, f), Some(1u));\n-        assert_eq!(position_between(v, 1u, 3u, f), Some(1u));\n-        assert_eq!(position_between(v, 1u, 4u, f), Some(1u));\n-\n-        assert!(position_between(v, 2u, 2u, f).is_none());\n-        assert!(position_between(v, 2u, 3u, f).is_none());\n-        assert_eq!(position_between(v, 2u, 4u, f), Some(3u));\n-\n-        assert!(position_between(v, 3u, 3u, f).is_none());\n-        assert_eq!(position_between(v, 3u, 4u, f), Some(3u));\n-\n-        assert!(position_between(v, 4u, 4u, f).is_none());\n-    }\n-\n     #[test]\n     fn test_rposition() {\n         fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n@@ -2923,34 +2857,6 @@ mod tests {\n         assert!(rposition(v, g).is_none());\n     }\n \n-    #[test]\n-    fn test_rposition_between() {\n-        assert!(rposition_between([], 0u, 0u, f).is_none());\n-\n-        fn f(xy: &(int, char)) -> bool { let (_x, y) = *xy; y == 'b' }\n-        let v = ~[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n-\n-        assert!(rposition_between(v, 0u, 0u, f).is_none());\n-        assert!(rposition_between(v, 0u, 1u, f).is_none());\n-        assert_eq!(rposition_between(v, 0u, 2u, f), Some(1u));\n-        assert_eq!(rposition_between(v, 0u, 3u, f), Some(1u));\n-        assert_eq!(rposition_between(v, 0u, 4u, f), Some(3u));\n-\n-        assert!(rposition_between(v, 1u, 1u, f).is_none());\n-        assert_eq!(rposition_between(v, 1u, 2u, f), Some(1u));\n-        assert_eq!(rposition_between(v, 1u, 3u, f), Some(1u));\n-        assert_eq!(rposition_between(v, 1u, 4u, f), Some(3u));\n-\n-        assert!(rposition_between(v, 2u, 2u, f).is_none());\n-        assert!(rposition_between(v, 2u, 3u, f).is_none());\n-        assert_eq!(rposition_between(v, 2u, 4u, f), Some(3u));\n-\n-        assert!(rposition_between(v, 3u, 3u, f).is_none());\n-        assert_eq!(rposition_between(v, 3u, 4u, f), Some(3u));\n-\n-        assert!(rposition_between(v, 4u, 4u, f).is_none());\n-    }\n-\n     #[test]\n     fn test_bsearch_elem() {\n         assert_eq!(bsearch_elem([1,2,3,4,5], &5), Some(4));"}]}