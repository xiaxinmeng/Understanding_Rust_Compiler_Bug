{"sha": "2b93ab5a210066abab30e46e54e999fadbcf5e70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiOTNhYjVhMjEwMDY2YWJhYjMwZTQ2ZTU0ZTk5OWZhZGJjZjVlNzA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-12T20:15:08Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-13T06:11:22Z"}, "message": "rustc: Make static methods not leak out of traits. r=brson", "tree": {"sha": "7d7a1473909b922384056b789d2b6a32f56e40ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d7a1473909b922384056b789d2b6a32f56e40ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b93ab5a210066abab30e46e54e999fadbcf5e70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b93ab5a210066abab30e46e54e999fadbcf5e70", "html_url": "https://github.com/rust-lang/rust/commit/2b93ab5a210066abab30e46e54e999fadbcf5e70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b93ab5a210066abab30e46e54e999fadbcf5e70/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0fda80a528122183938e4f0297102adffd62639", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0fda80a528122183938e4f0297102adffd62639", "html_url": "https://github.com/rust-lang/rust/commit/a0fda80a528122183938e4f0297102adffd62639"}], "stats": {"total": 102, "additions": 87, "deletions": 15}, "files": [{"sha": "cea670ba335d6107ac195ac0816e46da93379915", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 62, "deletions": 15, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/2b93ab5a210066abab30e46e54e999fadbcf5e70/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b93ab5a210066abab30e46e54e999fadbcf5e70/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=2b93ab5a210066abab30e46e54e999fadbcf5e70", "patch": "@@ -1299,29 +1299,76 @@ impl Resolver {\n                 let (name_bindings, new_parent) =\n                     self.add_child(ident, parent, ForbidDuplicateTypes, sp);\n \n+                // If the trait has static methods, then add all the static\n+                // methods within to a new module.\n+                //\n+                // We only need to create the module if the trait has static\n+                // methods, so check that first.\n+                let mut has_static_methods = false;\n+                for methods.each |method| {\n+                    let ty_m = trait_method_to_ty_method(*method);\n+                    match ty_m.self_ty.node {\n+                        sty_static => {\n+                            has_static_methods = true;\n+                            break;\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+\n+                // Create the module if necessary.\n+                let module_parent_opt;\n+                if has_static_methods {\n+                    let parent_link = self.get_parent_link(parent, ident);\n+                    name_bindings.define_module(privacy,\n+                                                parent_link,\n+                                                Some(local_def(item.id)),\n+                                                false,\n+                                                sp);\n+                    module_parent_opt = Some(ModuleReducedGraphParent(\n+                        name_bindings.get_module()));\n+                } else {\n+                    module_parent_opt = None;\n+                }\n+\n                 // Add the names of all the methods to the trait info.\n                 let method_names = @HashMap();\n                 for methods.each |method| {\n                     let ty_m = trait_method_to_ty_method(*method);\n \n                     let ident = ty_m.ident;\n                     // Add it to the trait info if not static,\n-                    // add it as a name in the enclosing module otherwise.\n+                    // add it as a name in the trait module otherwise.\n                     match ty_m.self_ty.node {\n-                      sty_static => {\n-                        // which parent to use??\n-                        let (method_name_bindings, _) =\n-                            self.add_child(ident, new_parent,\n-                                           ForbidDuplicateValues, ty_m.span);\n-                        let def = def_static_method(local_def(ty_m.id),\n-                                                    Some(local_def(item.id)),\n-                                                    ty_m.purity);\n-                        (*method_name_bindings).define_value\n-                            (Public, def, ty_m.span);\n-                      }\n-                      _ => {\n-                        (*method_names).insert(ident, ());\n-                      }\n+                        sty_static => {\n+                            let def = def_static_method(\n+                                local_def(ty_m.id),\n+                                Some(local_def(item.id)),\n+                                ty_m.purity);\n+\n+                            // For now, add to both the trait module and the\n+                            // enclosing module, for backwards compatibility.\n+                            let (method_name_bindings, _) =\n+                                self.add_child(ident,\n+                                               new_parent,\n+                                               ForbidDuplicateValues,\n+                                               ty_m.span);\n+                            method_name_bindings.define_value(Public,\n+                                                              def,\n+                                                              ty_m.span);\n+\n+                            let (method_name_bindings, _) =\n+                                self.add_child(ident,\n+                                               module_parent_opt.get(),\n+                                               ForbidDuplicateValues,\n+                                               ty_m.span);\n+                            method_name_bindings.define_value(Public,\n+                                                              def,\n+                                                              ty_m.span);\n+                        }\n+                        _ => {\n+                            method_names.insert(ident, ());\n+                        }\n                     }\n                 }\n "}, {"sha": "717a720ad81505726a807da0872480c4a9fa1a96", "filename": "src/test/run-pass/static-methods-in-traits.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2b93ab5a210066abab30e46e54e999fadbcf5e70/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b93ab5a210066abab30e46e54e999fadbcf5e70/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits.rs?ref=2b93ab5a210066abab30e46e54e999fadbcf5e70", "patch": "@@ -0,0 +1,25 @@\n+mod a {\n+\tpub trait Foo {\n+\t\tstatic pub fn foo() -> self;\n+\t}\n+\n+\timpl int : Foo {\n+\t\tstatic pub fn foo() -> int {\n+\t\t\t3\n+\t\t}\n+\t}\n+\t\n+\timpl uint : Foo {\n+\t\tstatic pub fn foo() -> uint {\n+\t\t\t5u\n+\t\t}\n+\t}\n+}\n+\n+fn main() {\n+\tlet x: int = a::Foo::foo();\n+\tlet y: uint = a::Foo::foo();\n+\tassert x == 3;\n+\tassert y == 5;\n+}\n+"}]}