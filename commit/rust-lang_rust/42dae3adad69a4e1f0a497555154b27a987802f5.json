{"sha": "42dae3adad69a4e1f0a497555154b27a987802f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZGFlM2FkYWQ2OWE0ZTFmMGE0OTc1NTUxNTRiMjdhOTg3ODAyZjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-28T21:25:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-28T21:25:44Z"}, "message": "Rollup merge of #57833 - jethrogb:jb/thread-spawn-unwrap, r=alexcrichton\n\nPrint a slightly clearer message when failing to launch a thread\n\nAs discussed in #46345, the `io::Error` you get when a thread fails to launch is of type `io::ErrorKind::WouldBlock`. This is super uninformative when an arbitrary `thread::spawn` fails somewhere in your code:\n\n```\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 11,\nkind: WouldBlock, message: \"operation would block\" }', src/libcore/result.rs:997:5\n```\n\nThis PR improves the situation a little bit by using `expect` instead of `unwrap`. I don't consider this a complete fix for #46345 though.", "tree": {"sha": "f5adba36b4f88f8f6455f0114c09fd2c8a97698a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5adba36b4f88f8f6455f0114c09fd2c8a97698a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42dae3adad69a4e1f0a497555154b27a987802f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcT3NYCRBK7hj4Ov3rIwAAdHIIAGYiolR/gbVgXh5nAMm6svYz\n5cWCtwCWlaBbgUnaa1F7/CYBwDA9/5dZA8tQwRFnVDKurqgxYnA9LDbdn3jDHP2m\nZaQn0XCZcapBcpa5TchCd80PzlEz+YO6AtOTiDeraIIb6ojMDkZWPLHrOmLwFP5Z\n+w5UnGhPprg939JQU2rfx+PjlzCCwnesiTaEwnHXBKIEZSVW2iaaFRoRjOlN9DEX\nEwKy2MUzSUxuC55Wf/lpHUM46f5m2cXOOaP6iFoc2C2KkzzOxiJueH2ZeUdEaMjq\nHDCmNF0V1TS2MHjs1e3BMQJcmIG3rOEaCQc1LJ2+R6W0ooVnsOYT18YbHi2IaGg=\n=j9TT\n-----END PGP SIGNATURE-----\n", "payload": "tree f5adba36b4f88f8f6455f0114c09fd2c8a97698a\nparent 76dbfdd595894dd113f22188477ff3ad46bb0a13\nparent 2ec0e85305e69d7f6e1bc0c704a6566ad38232a4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548710744 +0100\ncommitter GitHub <noreply@github.com> 1548710744 +0100\n\nRollup merge of #57833 - jethrogb:jb/thread-spawn-unwrap, r=alexcrichton\n\nPrint a slightly clearer message when failing to launch a thread\n\nAs discussed in #46345, the `io::Error` you get when a thread fails to launch is of type `io::ErrorKind::WouldBlock`. This is super uninformative when an arbitrary `thread::spawn` fails somewhere in your code:\n\n```\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 11,\nkind: WouldBlock, message: \"operation would block\" }', src/libcore/result.rs:997:5\n```\n\nThis PR improves the situation a little bit by using `expect` instead of `unwrap`. I don't consider this a complete fix for #46345 though.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42dae3adad69a4e1f0a497555154b27a987802f5", "html_url": "https://github.com/rust-lang/rust/commit/42dae3adad69a4e1f0a497555154b27a987802f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42dae3adad69a4e1f0a497555154b27a987802f5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76dbfdd595894dd113f22188477ff3ad46bb0a13", "url": "https://api.github.com/repos/rust-lang/rust/commits/76dbfdd595894dd113f22188477ff3ad46bb0a13", "html_url": "https://github.com/rust-lang/rust/commit/76dbfdd595894dd113f22188477ff3ad46bb0a13"}, {"sha": "2ec0e85305e69d7f6e1bc0c704a6566ad38232a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec0e85305e69d7f6e1bc0c704a6566ad38232a4", "html_url": "https://github.com/rust-lang/rust/commit/2ec0e85305e69d7f6e1bc0c704a6566ad38232a4"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "eb8e0c1c8ac66777d1b774b67c90d101b41fdeba", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42dae3adad69a4e1f0a497555154b27a987802f5/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dae3adad69a4e1f0a497555154b27a987802f5/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=42dae3adad69a4e1f0a497555154b27a987802f5", "patch": "@@ -607,7 +607,7 @@ impl Builder {\n pub fn spawn<F, T>(f: F) -> JoinHandle<T> where\n     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static\n {\n-    Builder::new().spawn(f).unwrap()\n+    Builder::new().spawn(f).expect(\"failed to spawn thread\")\n }\n \n /// Gets a handle to the thread that invokes it."}]}