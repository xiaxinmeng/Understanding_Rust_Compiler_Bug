{"sha": "b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MTE3MzRhNWY3MjgwY2MzY2ViOTllMDk1NTFhN2I3NjkxYzdkMGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-29T17:19:37Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-18T14:10:45Z"}, "message": "thread the DepGraph to session/crate-store\n\nThis is a [breaking-change] for plugin authors.\nYou must now create a dep-graph earlier.", "tree": {"sha": "59e6c163b0ccfb19c40d038aa8928d8c0da8e896", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59e6c163b0ccfb19c40d038aa8928d8c0da8e896"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "html_url": "https://github.com/rust-lang/rust/commit/b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2237e899084f16f61e4a74c191a74c7bb2fd3727", "url": "https://api.github.com/repos/rust-lang/rust/commits/2237e899084f16f61e4a74c191a74c7bb2fd3727", "html_url": "https://github.com/rust-lang/rust/commit/2237e899084f16f61e4a74c191a74c7bb2fd3727"}], "stats": {"total": 131, "additions": 81, "deletions": 50}, "files": [{"sha": "3e43c8e2c93557a9625a179345ce9f22f2a7656b", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "patch": "@@ -32,12 +32,6 @@ pub enum DepNode<D: Clone + Debug> {\n     // Represents the HIR node with the given node-id\n     Hir(D),\n \n-    // Represents the meta-data for a node. For local def-ids, this is\n-    // created by trans. For remote def-ids, we add a read of this\n-    // node each time we pull the information for an item out of the\n-    // crate store.\n-    MetaData(D),\n-\n     // Represents different phases in the compiler.\n     CrateReader,\n     CollectLanguageItems,"}, {"sha": "e3976482dca81e31c97c1300b1470a27f8129741", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "patch": "@@ -160,10 +160,10 @@ pub struct Forest {\n }\n \n impl Forest {\n-    pub fn new(krate: Crate, dep_graph: DepGraph) -> Forest {\n+    pub fn new(krate: Crate, dep_graph: &DepGraph) -> Forest {\n         Forest {\n             krate: krate,\n-            dep_graph: dep_graph,\n+            dep_graph: dep_graph.clone(),\n             inlined_items: TypedArena::new()\n         }\n     }"}, {"sha": "17c6442c019b87a8e43dfc0e3c9645234ebddb21", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "patch": "@@ -34,7 +34,6 @@ use session::Session;\n use session::config::PanicStrategy;\n use session::search_paths::PathKind;\n use util::nodemap::{FnvHashMap, NodeMap, NodeSet, DefIdMap};\n-use std::any::Any;\n use std::cell::RefCell;\n use std::rc::Rc;\n use std::path::PathBuf;"}, {"sha": "7bb96c5ab2b44faf72d56981226673d47c36f1b6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "patch": "@@ -1420,6 +1420,7 @@ impl fmt::Display for CrateType {\n \n #[cfg(test)]\n mod tests {\n+    use dep_graph::DepGraph;\n     use middle::cstore::DummyCrateStore;\n     use session::config::{build_configuration, build_session_options};\n     use session::build_session;\n@@ -1439,14 +1440,15 @@ mod tests {\n     // When the user supplies --test we should implicitly supply --cfg test\n     #[test]\n     fn test_switch_implies_cfg_test() {\n+        let dep_graph = DepGraph::new(false);\n         let matches =\n             &match getopts(&[\"--test\".to_string()], &optgroups()) {\n               Ok(m) => m,\n               Err(f) => panic!(\"test_switch_implies_cfg_test: {}\", f)\n             };\n         let registry = diagnostics::registry::Registry::new(&[]);\n         let sessopts = build_session_options(matches);\n-        let sess = build_session(sessopts, None, registry, Rc::new(DummyCrateStore));\n+        let sess = build_session(sessopts, &dep_graph, None, registry, Rc::new(DummyCrateStore));\n         let cfg = build_configuration(&sess);\n         assert!((attr::contains_name(&cfg[..], \"test\")));\n     }\n@@ -1455,6 +1457,7 @@ mod tests {\n     // another --cfg test\n     #[test]\n     fn test_switch_implies_cfg_test_unless_cfg_test() {\n+        let dep_graph = DepGraph::new(false);\n         let matches =\n             &match getopts(&[\"--test\".to_string(), \"--cfg=test\".to_string()],\n                            &optgroups()) {\n@@ -1465,7 +1468,7 @@ mod tests {\n             };\n         let registry = diagnostics::registry::Registry::new(&[]);\n         let sessopts = build_session_options(matches);\n-        let sess = build_session(sessopts, None, registry,\n+        let sess = build_session(sessopts, &dep_graph, None, registry,\n                                  Rc::new(DummyCrateStore));\n         let cfg = build_configuration(&sess);\n         let mut test_items = cfg.iter().filter(|m| m.name() == \"test\");\n@@ -1475,13 +1478,14 @@ mod tests {\n \n     #[test]\n     fn test_can_print_warnings() {\n+        let dep_graph = DepGraph::new(false);\n         {\n             let matches = getopts(&[\n                 \"-Awarnings\".to_string()\n             ], &optgroups()).unwrap();\n             let registry = diagnostics::registry::Registry::new(&[]);\n             let sessopts = build_session_options(&matches);\n-            let sess = build_session(sessopts, None, registry,\n+            let sess = build_session(sessopts, &dep_graph, None, registry,\n                                      Rc::new(DummyCrateStore));\n             assert!(!sess.diagnostic().can_emit_warnings);\n         }\n@@ -1493,7 +1497,7 @@ mod tests {\n             ], &optgroups()).unwrap();\n             let registry = diagnostics::registry::Registry::new(&[]);\n             let sessopts = build_session_options(&matches);\n-            let sess = build_session(sessopts, None, registry,\n+            let sess = build_session(sessopts, &dep_graph, None, registry,\n                                      Rc::new(DummyCrateStore));\n             assert!(sess.diagnostic().can_emit_warnings);\n         }\n@@ -1504,7 +1508,7 @@ mod tests {\n             ], &optgroups()).unwrap();\n             let registry = diagnostics::registry::Registry::new(&[]);\n             let sessopts = build_session_options(&matches);\n-            let sess = build_session(sessopts, None, registry,\n+            let sess = build_session(sessopts, &dep_graph, None, registry,\n                                      Rc::new(DummyCrateStore));\n             assert!(sess.diagnostic().can_emit_warnings);\n         }"}, {"sha": "61d6acfe061f7d8a3e40208f912ce70b5d0b719e", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use dep_graph::DepGraph;\n use lint;\n use middle::cstore::CrateStore;\n use middle::dependency_format;\n@@ -49,6 +50,7 @@ pub mod search_paths;\n // Represents the data associated with a compilation\n // session for a single crate.\n pub struct Session {\n+    pub dep_graph: DepGraph,\n     pub target: config::Config,\n     pub host: Target,\n     pub opts: config::Options,\n@@ -408,18 +410,21 @@ fn split_msg_into_multilines(msg: &str) -> Option<String> {\n }\n \n pub fn build_session(sopts: config::Options,\n+                     dep_graph: &DepGraph,\n                      local_crate_source_file: Option<PathBuf>,\n                      registry: diagnostics::registry::Registry,\n                      cstore: Rc<for<'a> CrateStore<'a>>)\n                      -> Session {\n     build_session_with_codemap(sopts,\n-                              local_crate_source_file,\n-                              registry,\n-                              cstore,\n-                              Rc::new(codemap::CodeMap::new()))\n+                               dep_graph,\n+                               local_crate_source_file,\n+                               registry,\n+                               cstore,\n+                               Rc::new(codemap::CodeMap::new()))\n }\n \n pub fn build_session_with_codemap(sopts: config::Options,\n+                                  dep_graph: &DepGraph,\n                                   local_crate_source_file: Option<PathBuf>,\n                                   registry: diagnostics::registry::Registry,\n                                   cstore: Rc<for<'a> CrateStore<'a>>,\n@@ -450,10 +455,16 @@ pub fn build_session_with_codemap(sopts: config::Options,\n                                       treat_err_as_bug,\n                                       emitter);\n \n-    build_session_(sopts, local_crate_source_file, diagnostic_handler, codemap, cstore)\n+    build_session_(sopts,\n+                   dep_graph,\n+                   local_crate_source_file,\n+                   diagnostic_handler,\n+                   codemap,\n+                   cstore)\n }\n \n pub fn build_session_(sopts: config::Options,\n+                      dep_graph: &DepGraph,\n                       local_crate_source_file: Option<PathBuf>,\n                       span_diagnostic: errors::Handler,\n                       codemap: Rc<codemap::CodeMap>,\n@@ -482,6 +493,7 @@ pub fn build_session_(sopts: config::Options,\n     );\n \n     let sess = Session {\n+        dep_graph: dep_graph.clone(),\n         target: target_cfg,\n         host: host,\n         opts: sopts,"}, {"sha": "da6af9140929ce4d76fba0a846a97abd3c7fd0f7", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "patch": "@@ -152,7 +152,6 @@ pub fn compile_input(sess: &Session,\n                                 Ok(()));\n \n         let expanded_crate = assign_node_ids(sess, expanded_crate);\n-        let dep_graph = DepGraph::new(sess.opts.build_dep_graph());\n \n         // Collect defintions for def ids.\n         let mut defs = time(sess.time_passes(),\n@@ -161,15 +160,15 @@ pub fn compile_input(sess: &Session,\n \n         time(sess.time_passes(),\n              \"external crate/lib resolution\",\n-             || read_local_crates(sess, &cstore, &defs, &expanded_crate, &id, &dep_graph));\n+             || read_local_crates(sess, &cstore, &defs, &expanded_crate, &id, &sess.dep_graph));\n \n         time(sess.time_passes(),\n              \"early lint checks\",\n              || lint::check_ast_crate(sess, &expanded_crate));\n \n         let (analysis, resolutions, mut hir_forest) = {\n-            lower_and_resolve(sess, &id, &mut defs, &expanded_crate, dep_graph,\n-                              control.make_glob_map)\n+            lower_and_resolve(sess, &id, &mut defs, &expanded_crate,\n+                              &sess.dep_graph, control.make_glob_map)\n         };\n \n         // Discard MTWT tables that aren't required past lowering to HIR.\n@@ -805,7 +804,7 @@ pub fn lower_and_resolve<'a>(sess: &Session,\n                              id: &'a str,\n                              defs: &mut hir_map::Definitions,\n                              krate: &ast::Crate,\n-                             dep_graph: DepGraph,\n+                             dep_graph: &DepGraph,\n                              make_glob_map: resolve::MakeGlobMap)\n                              -> (ty::CrateAnalysis<'a>, Resolutions, hir_map::Forest) {\n     resolve::with_resolver(sess, defs, make_glob_map, |mut resolver| {"}, {"sha": "06133c508d9f027cfd97178c0c9b9de994031db0", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "patch": "@@ -67,6 +67,7 @@ use pretty::{PpMode, UserIdentifiedItem};\n use rustc_resolve as resolve;\n use rustc_save_analysis as save;\n use rustc_trans::back::link;\n+use rustc::dep_graph::DepGraph;\n use rustc::session::{self, config, Session, build_session, CompileResult};\n use rustc::session::config::{Input, PrintRequest, OutputType, ErrorOutputType};\n use rustc::session::config::{get_unstable_features_setting, nightly_options};\n@@ -196,9 +197,11 @@ pub fn run_compiler_with_file_loader<'a, L>(args: &[String],\n         },\n     };\n \n-    let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n+    let dep_graph = DepGraph::new(sopts.build_dep_graph());\n+    let cstore = Rc::new(CStore::new(&dep_graph, token::get_ident_interner()));\n     let codemap = Rc::new(CodeMap::with_file_loader(loader));\n     let sess = session::build_session_with_codemap(sopts,\n+                                                   &dep_graph,\n                                                    input_file_path,\n                                                    descriptions,\n                                                    cstore.clone(),\n@@ -425,9 +428,13 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                     describe_lints(&ls, false);\n                     return None;\n                 }\n-                let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n-                let sess = build_session(sopts.clone(), None, descriptions.clone(),\n-                                         cstore.clone());\n+                let dep_graph = DepGraph::new(sopts.build_dep_graph());\n+                let cstore = Rc::new(CStore::new(&dep_graph, token::get_ident_interner()));\n+                let sess = build_session(sopts.clone(),\n+                    &dep_graph,\n+                    None,\n+                    descriptions.clone(),\n+                    cstore.clone());\n                 rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n                 let should_stop = RustcDefaultCalls::print_crate_info(&sess, None, odir, ofile);\n                 if should_stop == Compilation::Stop {"}, {"sha": "8c84e561e317a033704f4e7e40ce9d41ff69b0ba", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "patch": "@@ -18,10 +18,10 @@ use self::NodesMatchingUII::*;\n use abort_on_err;\n use driver::{self, Resolutions};\n \n-use rustc::dep_graph::DepGraph;\n use rustc::ty::{self, TyCtxt};\n use rustc::cfg;\n use rustc::cfg::graphviz::LabelledCFG;\n+use rustc::dep_graph::DepGraph;\n use rustc::session::Session;\n use rustc::session::config::Input;\n use rustc_borrowck as borrowck;"}, {"sha": "e0d693c423096db41c145ab159494e080fdf760e", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "patch": "@@ -104,8 +104,10 @@ fn test_env<F>(source_string: &str,\n     options.unstable_features = UnstableFeatures::Allow;\n     let diagnostic_handler = errors::Handler::with_emitter(true, false, emitter);\n \n-    let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n-    let sess = session::build_session_(options, None, diagnostic_handler,\n+    let dep_graph = DepGraph::new(false);\n+    let _ignore = dep_graph.in_ignore();\n+    let cstore = Rc::new(CStore::new(&dep_graph, token::get_ident_interner()));\n+    let sess = session::build_session_(options, &dep_graph, None, diagnostic_handler,\n                                        Rc::new(CodeMap::new()), cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     let krate_config = Vec::new();\n@@ -117,15 +119,14 @@ fn test_env<F>(source_string: &str,\n     let krate = driver::phase_2_configure_and_expand(&sess, &cstore, krate, \"test\", None)\n                     .expect(\"phase 2 aborted\");\n \n-    let dep_graph = DepGraph::new(false);\n     let krate = driver::assign_node_ids(&sess, krate);\n     let mut defs = hir_map::collect_definitions(&krate);\n     read_local_crates(&sess, &cstore, &defs, &krate, \"test_crate\", &dep_graph);\n     let _ignore = dep_graph.in_ignore();\n \n     let (_, resolutions, mut hir_forest) = {\n-        driver::lower_and_resolve(&sess, \"test-crate\", &mut defs, &krate, dep_graph.clone(),\n-                                  MakeGlobMap::No)\n+        driver::lower_and_resolve(&sess, \"test-crate\", &mut defs, &krate,\n+                                  &sess.dep_graph, MakeGlobMap::No)\n     };\n \n     let arenas = ty::CtxtArenas::new();"}, {"sha": "940688f55074483e916fec226b11673c36914156", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "patch": "@@ -20,6 +20,7 @@ use decoder;\n use index;\n use loader;\n \n+use rustc::dep_graph::DepGraph;\n use rustc::hir::def_id::DefId;\n use rustc::hir::svh::Svh;\n use rustc::middle::cstore::{ExternCrate};\n@@ -86,6 +87,7 @@ pub struct crate_metadata {\n }\n \n pub struct CStore {\n+    _dep_graph: DepGraph,\n     metas: RefCell<FnvHashMap<ast::CrateNum, Rc<crate_metadata>>>,\n     /// Map from NodeId's of local extern crate statements to crate numbers\n     extern_mod_crate_map: RefCell<NodeMap<ast::CrateNum>>,\n@@ -98,8 +100,10 @@ pub struct CStore {\n }\n \n impl CStore {\n-    pub fn new(intr: Rc<IdentInterner>) -> CStore {\n+    pub fn new(dep_graph: &DepGraph,\n+               intr: Rc<IdentInterner>) -> CStore {\n         CStore {\n+            _dep_graph: dep_graph.clone(),\n             metas: RefCell::new(FnvHashMap()),\n             extern_mod_crate_map: RefCell::new(FnvHashMap()),\n             used_crate_sources: RefCell::new(Vec::new()),"}, {"sha": "4ae869c325976f0dcd5146a3c094093f42e74348", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "patch": "@@ -134,8 +134,10 @@ pub fn run_core(search_paths: SearchPaths,\n                                                                false,\n                                                                codemap.clone());\n \n-    let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n-    let sess = session::build_session_(sessopts, cpath, diagnostic_handler,\n+    let dep_graph = DepGraph::new(false);\n+    let _ignore = dep_graph.in_ignore();\n+    let cstore = Rc::new(CStore::new(&dep_graph, token::get_ident_interner()));\n+    let sess = session::build_session_(sessopts, &dep_graph, cpath, diagnostic_handler,\n                                        codemap, cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n@@ -151,15 +153,14 @@ pub fn run_core(search_paths: SearchPaths,\n                     .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n \n     let krate = driver::assign_node_ids(&sess, krate);\n-    let dep_graph = DepGraph::new(false);\n \n     let mut defs = hir_map::collect_definitions(&krate);\n     read_local_crates(&sess, &cstore, &defs, &krate, &name, &dep_graph);\n \n     // Lower ast -> hir and resolve.\n     let (analysis, resolutions, mut hir_forest) = {\n-        driver::lower_and_resolve(&sess, &name, &mut defs, &krate, dep_graph,\n-                                  resolve::MakeGlobMap::No)\n+        driver::lower_and_resolve(&sess, &name, &mut defs, &krate,\n+                                  &sess.dep_graph, resolve::MakeGlobMap::No)\n     };\n \n     let arenas = ty::CtxtArenas::new();\n@@ -177,7 +178,6 @@ pub fn run_core(search_paths: SearchPaths,\n             return None\n         }\n \n-        let _ignore = tcx.dep_graph.in_ignore();\n         let ty::CrateAnalysis { access_levels, .. } = analysis;\n \n         // Convert from a NodeId set to a DefId set since we don't always have easy access"}, {"sha": "bec18d2cc63f7d1636a9a1c36df68ebaa0a6ef39", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "patch": "@@ -79,8 +79,11 @@ pub fn run(input: &str,\n                                                                false,\n                                                                codemap.clone());\n \n-    let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n+    let dep_graph = DepGraph::new(false);\n+    let _ignore = dep_graph.in_ignore();\n+    let cstore = Rc::new(CStore::new(&dep_graph, token::get_ident_interner()));\n     let sess = session::build_session_(sessopts,\n+                                       &dep_graph,\n                                        Some(input_path.clone()),\n                                        diagnostic_handler,\n                                        codemap,\n@@ -103,7 +106,7 @@ pub fn run(input: &str,\n     let opts = scrape_test_config(&krate);\n \n     let _ignore = dep_graph.in_ignore();\n-    let mut forest = hir_map::Forest::new(krate, dep_graph.clone());\n+    let mut forest = hir_map::Forest::new(krate, &dep_graph);\n     let map = hir_map::map_crate(&mut forest, defs);\n \n     let ctx = core::DocContext {\n@@ -238,8 +241,10 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     // Compile the code\n     let diagnostic_handler = errors::Handler::with_emitter(true, false, box emitter);\n \n-    let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n+    let dep_graph = DepGraph::new(false);\n+    let cstore = Rc::new(CStore::new(&dep_graph, token::get_ident_interner()));\n     let sess = session::build_session_(sessopts,\n+                                       &dep_graph,\n                                        None,\n                                        diagnostic_handler,\n                                        codemap,"}, {"sha": "0e84a0f52218c4bb75c9e01cec89c21135dfa2e5", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "patch": "@@ -223,8 +223,12 @@ fn compile_program(input: &str, sysroot: PathBuf)\n \n     let handle = thread.spawn(move || {\n         let opts = build_exec_options(sysroot);\n-        let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n-        let sess = build_session(opts, None, Registry::new(&rustc::DIAGNOSTICS),\n+        let dep_graph = DepGraph::new(opts.build_dep_graph());\n+        let cstore = Rc::new(CStore::new(&dep_graph, token::get_ident_interner()));\n+        let sess = build_session(opts,\n+                                 &dep_graph,\n+                                 None,\n+                                 Registry::new(&rustc::DIAGNOSTICS),\n                                  cstore.clone());\n         rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n@@ -237,12 +241,12 @@ fn compile_program(input: &str, sysroot: PathBuf)\n         let krate = driver::phase_2_configure_and_expand(&sess, &cstore, krate, &id, None)\n             .expect(\"phase_2 returned `None`\");\n \n-        let dep_graph = DepGraph::new(sess.opts.build_dep_graph());\n         let krate = driver::assign_node_ids(&sess, krate);\n         let mut defs = ast_map::collect_definitions(&krate);\n         read_local_crates(&sess, &cstore, &defs, &krate, &id, &dep_graph);\n         let (analysis, resolutions, mut hir_forest) = {\n-            driver::lower_and_resolve(&sess, &id, &mut defs, &krate, dep_graph, MakeGlobMap::No)\n+            driver::lower_and_resolve(&sess, &id, &mut defs, &krate,\n+                                      &sess.dep_graph, MakeGlobMap::No)\n         };\n \n         let arenas = ty::CtxtArenas::new();"}, {"sha": "41d250eadec4e1a64d2c53fe435f2bcdd6836664", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b711734a5f7280cc3ceb99e09551a7b7691c7d0b/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=b711734a5f7280cc3ceb99e09551a7b7691c7d0b", "patch": "@@ -16,6 +16,7 @@ extern crate rustc_lint;\n extern crate rustc_metadata;\n extern crate syntax;\n \n+use rustc::dep_graph::DepGraph;\n use rustc::session::{build_session, Session};\n use rustc::session::config::{basic_options, build_configuration, Input, OutputType};\n use rustc_driver::driver::{compile_input, CompileController, anon_src};\n@@ -54,8 +55,9 @@ fn basic_sess(sysroot: PathBuf) -> (Session, Rc<CStore>) {\n     opts.maybe_sysroot = Some(sysroot);\n \n     let descriptions = Registry::new(&rustc::DIAGNOSTICS);\n-    let cstore = Rc::new(CStore::new(token::get_ident_interner()));\n-    let sess = build_session(opts, None, descriptions, cstore.clone());\n+    let dep_graph = DepGraph::new(opts.build_dep_graph());\n+    let cstore = Rc::new(CStore::new(&dep_graph, token::get_ident_interner()));\n+    let sess = build_session(opts, &dep_graph, None, descriptions, cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     (sess, cstore)\n }"}]}