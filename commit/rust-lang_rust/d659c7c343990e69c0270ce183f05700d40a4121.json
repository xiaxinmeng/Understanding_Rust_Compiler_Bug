{"sha": "d659c7c343990e69c0270ce183f05700d40a4121", "node_id": "C_kwDOAAsO6NoAKGQ2NTljN2MzNDM5OTBlNjljMDI3MGNlMTgzZjA1NzAwZDQwYTQxMjE", "commit": {"author": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-02-14T22:55:31Z"}, "committer": {"name": "Kyle Matsuda", "email": "kyle.yoshio.matsuda@gmail.com", "date": "2023-02-16T17:52:57Z"}, "message": "make issue33140_self_ty return Option<EarlyBinder<Ty>>", "tree": {"sha": "ab8cc3849912e4ec3fcbb88254950757ad6dcb9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab8cc3849912e4ec3fcbb88254950757ad6dcb9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d659c7c343990e69c0270ce183f05700d40a4121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d659c7c343990e69c0270ce183f05700d40a4121", "html_url": "https://github.com/rust-lang/rust/commit/d659c7c343990e69c0270ce183f05700d40a4121", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d659c7c343990e69c0270ce183f05700d40a4121/comments", "author": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kylematsuda", "id": 17287790, "node_id": "MDQ6VXNlcjE3Mjg3Nzkw", "avatar_url": "https://avatars.githubusercontent.com/u/17287790?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kylematsuda", "html_url": "https://github.com/kylematsuda", "followers_url": "https://api.github.com/users/kylematsuda/followers", "following_url": "https://api.github.com/users/kylematsuda/following{/other_user}", "gists_url": "https://api.github.com/users/kylematsuda/gists{/gist_id}", "starred_url": "https://api.github.com/users/kylematsuda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kylematsuda/subscriptions", "organizations_url": "https://api.github.com/users/kylematsuda/orgs", "repos_url": "https://api.github.com/users/kylematsuda/repos", "events_url": "https://api.github.com/users/kylematsuda/events{/privacy}", "received_events_url": "https://api.github.com/users/kylematsuda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af3c8b27266e290cf65704284f6862d0f90ee4fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/af3c8b27266e290cf65704284f6862d0f90ee4fc", "html_url": "https://github.com/rust-lang/rust/commit/af3c8b27266e290cf65704284f6862d0f90ee4fc"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "000fa92fdd1402369986744dbe429a58efa6390b", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d659c7c343990e69c0270ce183f05700d40a4121/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d659c7c343990e69c0270ce183f05700d40a4121/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=d659c7c343990e69c0270ce183f05700d40a4121", "patch": "@@ -781,7 +781,7 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query issue33140_self_ty(key: DefId) -> Option<ty::Ty<'tcx>> {\n+    query issue33140_self_ty(key: DefId) -> Option<ty::EarlyBinder<ty::Ty<'tcx>>> {\n         desc { |tcx| \"computing Self type wrt issue #33140 `{}`\", tcx.def_path_str(key) }\n     }\n "}, {"sha": "fc3d9fb067d7cc4395d11ddc6749262866477b7e", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d659c7c343990e69c0270ce183f05700d40a4121/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d659c7c343990e69c0270ce183f05700d40a4121/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=d659c7c343990e69c0270ce183f05700d40a4121", "patch": "@@ -1,7 +1,9 @@\n use rustc_data_structures::fx::FxIndexSet;\n use rustc_hir as hir;\n use rustc_index::bit_set::BitSet;\n-use rustc_middle::ty::{self, Binder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt};\n+use rustc_middle::ty::{\n+    self, Binder, EarlyBinder, Predicate, PredicateKind, ToPredicate, Ty, TyCtxt,\n+};\n use rustc_session::config::TraitSolver;\n use rustc_span::def_id::{DefId, CRATE_DEF_ID};\n use rustc_trait_selection::traits;\n@@ -355,7 +357,7 @@ fn instance_def_size_estimate<'tcx>(\n /// If `def_id` is an issue 33140 hack impl, returns its self type; otherwise, returns `None`.\n ///\n /// See [`ty::ImplOverlapKind::Issue33140`] for more details.\n-fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n+fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<EarlyBinder<Ty<'_>>> {\n     debug!(\"issue33140_self_ty({:?})\", def_id);\n \n     let trait_ref = tcx\n@@ -394,7 +396,7 @@ fn issue33140_self_ty(tcx: TyCtxt<'_>, def_id: DefId) -> Option<Ty<'_>> {\n \n     if self_ty_matches {\n         debug!(\"issue33140_self_ty - MATCHES!\");\n-        Some(self_ty)\n+        Some(EarlyBinder(self_ty))\n     } else {\n         debug!(\"issue33140_self_ty - non-matching self type\");\n         None"}]}