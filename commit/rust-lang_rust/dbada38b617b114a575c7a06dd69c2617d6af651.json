{"sha": "dbada38b617b114a575c7a06dd69c2617d6af651", "node_id": "C_kwDOAAsO6NoAKGRiYWRhMzhiNjE3YjExNGE1NzVjN2EwNmRkNjljMjYxN2Q2YWY2NTE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-08T23:01:19Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-03-08T23:01:19Z"}, "message": "Only store derive<->derive-helper mapping in DefMap", "tree": {"sha": "a89262bc8da7a864b7352d831e2584295cced1fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a89262bc8da7a864b7352d831e2584295cced1fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbada38b617b114a575c7a06dd69c2617d6af651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbada38b617b114a575c7a06dd69c2617d6af651", "html_url": "https://github.com/rust-lang/rust/commit/dbada38b617b114a575c7a06dd69c2617d6af651", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbada38b617b114a575c7a06dd69c2617d6af651/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eba90936c1181e66da9ece7395c7eafe686cffd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/eba90936c1181e66da9ece7395c7eafe686cffd8", "html_url": "https://github.com/rust-lang/rust/commit/eba90936c1181e66da9ece7395c7eafe686cffd8"}], "stats": {"total": 51, "additions": 21, "deletions": 30}, "files": [{"sha": "cb4c5a9f5520e04570062f5a7dab201478078656", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dbada38b617b114a575c7a06dd69c2617d6af651/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbada38b617b114a575c7a06dd69c2617d6af651/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=dbada38b617b114a575c7a06dd69c2617d6af651", "patch": "@@ -78,8 +78,6 @@ use crate::{\n     AstId, BlockId, BlockLoc, LocalModuleId, ModuleDefId, ModuleId,\n };\n \n-use self::proc_macro::ProcMacroDef;\n-\n /// Contains the results of (early) name resolution.\n ///\n /// A `DefMap` stores the module tree and the definitions that are in scope in every module after\n@@ -102,11 +100,8 @@ pub struct DefMap {\n     prelude: Option<ModuleId>,\n     extern_prelude: FxHashMap<Name, ModuleDefId>,\n \n-    /// Side table with additional proc. macro info, for use by name resolution in downstream\n-    /// crates.\n-    ///\n-    /// (the primary purpose is to resolve derive helpers)\n-    exported_proc_macros: FxHashMap<MacroDefId, ProcMacroDef>,\n+    /// Side table for resolving derive helpers.\n+    exported_derives: FxHashMap<MacroDefId, Box<[Name]>>,\n \n     /// Custom attributes registered with `#![register_attr]`.\n     registered_attrs: Vec<SmolStr>,\n@@ -275,7 +270,7 @@ impl DefMap {\n             edition,\n             recursion_limit: None,\n             extern_prelude: FxHashMap::default(),\n-            exported_proc_macros: FxHashMap::default(),\n+            exported_derives: FxHashMap::default(),\n             prelude: None,\n             root,\n             modules,\n@@ -452,7 +447,7 @@ impl DefMap {\n         // Exhaustive match to require handling new fields.\n         let Self {\n             _c: _,\n-            exported_proc_macros,\n+            exported_derives: exported_proc_macros,\n             extern_prelude,\n             diagnostics,\n             modules,"}, {"sha": "897e72b69864c7fca15b0bf35ed47555f0c4c325", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dbada38b617b114a575c7a06dd69c2617d6af651/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbada38b617b114a575c7a06dd69c2617d6af651/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=dbada38b617b114a575c7a06dd69c2617d6af651", "patch": "@@ -554,9 +554,9 @@ impl DefCollector<'_> {\n         id: ItemTreeId<item_tree::Function>,\n         module_id: ModuleId,\n     ) {\n-        let kind = def.kind.to_basedb_kind();\n         self.exports_proc_macros = true;\n \n+        let kind = def.kind.to_basedb_kind();\n         let (expander, kind) = match self.proc_macros.iter().find(|(n, _)| n == &def.name) {\n             Some(&(_, expander)) => (expander, kind),\n             None => (ProcMacroExpander::dummy(self.def_map.krate), kind),\n@@ -565,9 +565,11 @@ impl DefCollector<'_> {\n         let proc_macro_id =\n             ProcMacroLoc { container: module_id, id, expander, kind }.intern(self.db);\n         self.define_proc_macro(def.name.clone(), proc_macro_id.into());\n-        self.def_map\n-            .exported_proc_macros\n-            .insert(macro_id_to_def_id(self.db, proc_macro_id.into()), def);\n+        if let ProcMacroKind::CustomDerive { helpers } = def.kind {\n+            self.def_map\n+                .exported_derives\n+                .insert(macro_id_to_def_id(self.db, proc_macro_id.into()), helpers);\n+        }\n     }\n \n     /// Define a macro with `macro_rules`.\n@@ -1301,13 +1303,11 @@ impl DefCollector<'_> {\n         if let MacroCallKind::Derive { ast_id, .. } = &loc.kind {\n             if loc.def.krate != self.def_map.krate {\n                 let def_map = self.db.crate_def_map(loc.def.krate);\n-                if let Some(def) = def_map.exported_proc_macros.get(&loc.def) {\n-                    if let ProcMacroKind::CustomDerive { helpers } = &def.kind {\n-                        self.derive_helpers_in_scope\n-                            .entry(ast_id.map(|it| it.upcast()))\n-                            .or_default()\n-                            .extend(helpers.iter().cloned());\n-                    }\n+                if let Some(helpers) = def_map.exported_derives.get(&loc.def) {\n+                    self.derive_helpers_in_scope\n+                        .entry(ast_id.map(|it| it.upcast()))\n+                        .or_default()\n+                        .extend(helpers.iter().cloned());\n                 }\n             }\n         }"}, {"sha": "ba4f39d61ac168d17b6493dc926abb743eb82252", "filename": "crates/hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dbada38b617b114a575c7a06dd69c2617d6af651/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbada38b617b114a575c7a06dd69c2617d6af651/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=dbada38b617b114a575c7a06dd69c2617d6af651", "patch": "@@ -1,7 +1,5 @@\n use super::*;\n \n-use crate::nameres::proc_macro::{ProcMacroDef, ProcMacroKind};\n-\n #[test]\n fn macro_rules_are_globally_visible() {\n     check(\n@@ -978,14 +976,12 @@ fn collects_derive_helpers() {\n         \",\n     );\n \n-    assert_eq!(def_map.exported_proc_macros.len(), 1);\n-    match def_map.exported_proc_macros.values().next() {\n-        Some(ProcMacroDef { kind: ProcMacroKind::CustomDerive { helpers }, .. }) => {\n-            match &**helpers {\n-                [attr] => assert_eq!(attr.to_string(), \"helper_attr\"),\n-                _ => unreachable!(),\n-            }\n-        }\n+    assert_eq!(def_map.exported_derives.len(), 1);\n+    match def_map.exported_derives.values().next() {\n+        Some(helpers) => match &**helpers {\n+            [attr] => assert_eq!(attr.to_string(), \"helper_attr\"),\n+            _ => unreachable!(),\n+        },\n         _ => unreachable!(),\n     }\n }"}]}