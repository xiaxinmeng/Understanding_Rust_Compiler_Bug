{"sha": "685332c8d3c5d4c8fd26503b6ea5d9a00c838feb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NTMzMmM4ZDNjNWQ0YzhmZDI2NTAzYjZlYTVkOWEwMGM4MzhmZWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-26T15:50:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-26T15:50:52Z"}, "message": "Auto merge of #27998 - birkenfeld:patch-1, r=alexcrichton\n\nThese have been removed and should not be documented here.\r\n\r\nShould the replacement crates on crates.io be linked to, or is that not wanted in the core docs?", "tree": {"sha": "c4d9aec38174ae117e662bf47b7d7a22cbb6dab8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4d9aec38174ae117e662bf47b7d7a22cbb6dab8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/685332c8d3c5d4c8fd26503b6ea5d9a00c838feb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/685332c8d3c5d4c8fd26503b6ea5d9a00c838feb", "html_url": "https://github.com/rust-lang/rust/commit/685332c8d3c5d4c8fd26503b6ea5d9a00c838feb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/685332c8d3c5d4c8fd26503b6ea5d9a00c838feb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef3255b063a28ef1ed8346192325cfac66398739", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef3255b063a28ef1ed8346192325cfac66398739", "html_url": "https://github.com/rust-lang/rust/commit/ef3255b063a28ef1ed8346192325cfac66398739"}, {"sha": "fc7c0f99d7cb5616230f7a61e86bcb4fc01dab5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc7c0f99d7cb5616230f7a61e86bcb4fc01dab5e", "html_url": "https://github.com/rust-lang/rust/commit/fc7c0f99d7cb5616230f7a61e86bcb4fc01dab5e"}], "stats": {"total": 34, "additions": 6, "deletions": 28}, "files": [{"sha": "83e28e39a72536e04420a7f311f45229e6e6539f", "filename": "src/libstd/collections/mod.rs", "status": "modified", "additions": 6, "deletions": 28, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/685332c8d3c5d4c8fd26503b6ea5d9a00c838feb/src%2Flibstd%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/685332c8d3c5d4c8fd26503b6ea5d9a00c838feb/src%2Flibstd%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fmod.rs?ref=685332c8d3c5d4c8fd26503b6ea5d9a00c838feb", "patch": "@@ -25,9 +25,9 @@\n //!\n //! Rust's collections can be grouped into four major categories:\n //!\n-//! * Sequences: `Vec`, `VecDeque`, `LinkedList`, `BitVec`\n-//! * Maps: `HashMap`, `BTreeMap`, `VecMap`\n-//! * Sets: `HashSet`, `BTreeSet`, `BitSet`\n+//! * Sequences: `Vec`, `VecDeque`, `LinkedList`\n+//! * Maps: `HashMap`, `BTreeMap`\n+//! * Sets: `HashSet`, `BTreeSet`\n //! * Misc: `BinaryHeap`\n //!\n //! # When Should You Use Which Collection?\n@@ -70,22 +70,11 @@\n //! * You want to be able to get all of the entries in order on-demand.\n //! * You want a sorted map.\n //!\n-//! ### Use a `VecMap` when:\n-//! * You want a `HashMap` but with known to be small `usize` keys.\n-//! * You want a `BTreeMap`, but with known to be small `usize` keys.\n-//!\n //! ### Use the `Set` variant of any of these `Map`s when:\n //! * You just want to remember which keys you've seen.\n //! * There is no meaningful value to associate with your keys.\n //! * You just want a set.\n //!\n-//! ### Use a `BitVec` when:\n-//! * You want to store an unbounded number of booleans in a small space.\n-//! * You want a bit vector.\n-//!\n-//! ### Use a `BitSet` when:\n-//! * You want a `BitVec`, but want `Set` properties\n-//!\n //! ### Use a `BinaryHeap` when:\n //!\n //! * You want to store a bunch of elements, but only ever want to process the\n@@ -123,31 +112,20 @@\n //! | Vec          | O(1)           | O(n-i)*         | O(n-i)         | O(m)*  | O(n-i)         |\n //! | VecDeque     | O(1)           | O(min(i, n-i))* | O(min(i, n-i)) | O(m)*  | O(min(i, n-i)) |\n //! | LinkedList   | O(min(i, n-i)) | O(min(i, n-i))  | O(min(i, n-i)) | O(1)   | O(min(i, n-i)) |\n-//! | BitVec       | O(1)           | O(n-i)*         | O(n-i)         | O(m)*  | O(n-i)         |\n //!\n //! Note that where ties occur, Vec is generally going to be faster than VecDeque, and VecDeque\n-//! is generally going to be faster than LinkedList. BitVec is not a general purpose collection, and\n-//! therefore cannot reasonably be compared.\n+//! is generally going to be faster than LinkedList.\n //!\n //! ## Maps\n //!\n-//! For Sets, all operations have the cost of the equivalent Map operation. For\n-//! BitSet,\n-//! refer to VecMap.\n+//! For Sets, all operations have the cost of the equivalent Map operation.\n //!\n //! |          | get       | insert   | remove   | predecessor |\n //! |----------|-----------|----------|----------|-------------|\n //! | HashMap  | O(1)~     | O(1)~*   | O(1)~    | N/A         |\n //! | BTreeMap | O(log n)  | O(log n) | O(log n) | O(log n)    |\n-//! | VecMap   | O(1)      | O(1)?    | O(1)     | O(n)        |\n-//!\n-//! Note that VecMap is *incredibly* inefficient in terms of space. The O(1)\n-//! insertion time assumes space for the element is already allocated.\n-//! Otherwise, a large key may require a massive reallocation, with no direct\n-//! relation to the number of elements in the collection.  VecMap should only be\n-//! seriously considered for small keys.\n //!\n-//! Note also that BTreeMap's precise performance depends on the value of B.\n+//! Note that BTreeMap's precise performance depends on the value of B.\n //!\n //! # Correct and Efficient Usage of Collections\n //!"}]}