{"sha": "e01052d1f0b8bf70a418a10538528923c5f400d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMTA1MmQxZjBiOGJmNzBhNDE4YTEwNTM4NTI4OTIzYzVmNDAwZDU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-22T12:56:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-22T12:56:28Z"}, "message": "move auto-imoprter into IDE\n\nauto-import is purely an IDE concern, so it should be done outside of\nHIR", "tree": {"sha": "18ed1c151e7782b791214df4c4a2966c617ae1c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18ed1c151e7782b791214df4c4a2966c617ae1c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e01052d1f0b8bf70a418a10538528923c5f400d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e01052d1f0b8bf70a418a10538528923c5f400d5", "html_url": "https://github.com/rust-lang/rust/commit/e01052d1f0b8bf70a418a10538528923c5f400d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e01052d1f0b8bf70a418a10538528923c5f400d5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "200032852be0c66b978c875a8edf0eca1f08b901", "url": "https://api.github.com/repos/rust-lang/rust/commits/200032852be0c66b978c875a8edf0eca1f08b901", "html_url": "https://github.com/rust-lang/rust/commit/200032852be0c66b978c875a8edf0eca1f08b901"}], "stats": {"total": 160, "additions": 68, "deletions": 92}, "files": [{"sha": "7c856c19b61d735a6577fefe6ce2e40ee3b9976d", "filename": "crates/ra_assists/src/auto_import.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e01052d1f0b8bf70a418a10538528923c5f400d5/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e01052d1f0b8bf70a418a10538528923c5f400d5/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fauto_import.rs?ref=e01052d1f0b8bf70a418a10538528923c5f400d5", "patch": "@@ -492,7 +492,6 @@ fn apply_auto_import(\n     }\n }\n \n-#[allow(unused)]\n pub fn collect_hir_path_segments(path: &hir::Path) -> Vec<SmolStr> {\n     let mut ps = Vec::<SmolStr>::with_capacity(10);\n     match path.kind {\n@@ -503,15 +502,14 @@ pub fn collect_hir_path_segments(path: &hir::Path) -> Vec<SmolStr> {\n         hir::PathKind::Super => ps.push(\"super\".into()),\n     }\n     for s in path.segments.iter() {\n-        ps.push(s.name.to_smolstr());\n+        ps.push(s.name.to_string().into());\n     }\n     ps\n }\n \n // This function produces sequence of text edits into edit\n // to import the target path in the most appropriate scope given\n // the cursor position\n-#[allow(unused)]\n pub fn auto_import_text_edit(\n     // Ideally the position of the cursor, used to\n     position: &SyntaxNode,"}, {"sha": "4411715dea42b7a8abbe177bd9f7813637e75edb", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e01052d1f0b8bf70a418a10538528923c5f400d5/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e01052d1f0b8bf70a418a10538528923c5f400d5/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=e01052d1f0b8bf70a418a10538528923c5f400d5", "patch": "@@ -52,7 +52,7 @@ use crate::{\n     db::{HirDatabase, DefDatabase},\n     name::{AsName, KnownName},\n     source_id::{FileAstId, AstId},\n-    resolve::Resolver, resolve::ImportResolver,\n+    resolve::Resolver,\n };\n \n pub use self::{"}, {"sha": "9a999e66c7df35be52747788f23ab10065e4d825", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e01052d1f0b8bf70a418a10538528923c5f400d5/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e01052d1f0b8bf70a418a10538528923c5f400d5/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=e01052d1f0b8bf70a418a10538528923c5f400d5", "patch": "@@ -46,8 +46,17 @@ impl Name {\n         Name::new(idx.to_string().into())\n     }\n \n-    pub fn to_smolstr(&self) -> SmolStr {\n-        self.text.clone()\n+    // There's should be no way to extract a string out of `Name`: `Name` in the\n+    // future, `Name` will include hygiene information, and you can't encode\n+    // hygiene into a String.\n+    //\n+    // If you need to compare something with `Name`, compare `Name`s directly.\n+    //\n+    // If you need to render `Name` for the user, use the `Display` impl, but be\n+    // aware that it strips hygiene info.\n+    #[deprecated(note = \"use to_string instead\")]\n+    pub fn as_smolstr(&self) -> &SmolStr {\n+        &self.text\n     }\n \n     pub(crate) fn as_known_name(&self) -> Option<KnownName> {"}, {"sha": "bd0f074c1d1c11dff131cbe4e91502124f523a6b", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e01052d1f0b8bf70a418a10538528923c5f400d5/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e01052d1f0b8bf70a418a10538528923c5f400d5/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=e01052d1f0b8bf70a418a10538528923c5f400d5", "patch": "@@ -23,12 +23,6 @@ pub(crate) struct Resolver {\n     scopes: Vec<Scope>,\n }\n \n-#[derive(Debug, Clone, Default)]\n-pub(crate) struct ImportResolver {\n-    // todo: use fst crate or something like that\n-    dummy_names: Vec<(SmolStr, Vec<SmolStr>)>,\n-}\n-\n // FIXME how to store these best\n #[derive(Debug, Clone)]\n pub(crate) struct ModuleItemMap {\n@@ -317,56 +311,3 @@ impl Scope {\n         }\n     }\n }\n-\n-impl ImportResolver {\n-    pub(crate) fn new() -> Self {\n-        let dummy_names = vec![\n-            (SmolStr::new(\"fmt\"), vec![SmolStr::new(\"std\"), SmolStr::new(\"fmt\")]),\n-            (SmolStr::new(\"io\"), vec![SmolStr::new(\"std\"), SmolStr::new(\"io\")]),\n-            (SmolStr::new(\"iter\"), vec![SmolStr::new(\"std\"), SmolStr::new(\"iter\")]),\n-            (SmolStr::new(\"hash\"), vec![SmolStr::new(\"std\"), SmolStr::new(\"hash\")]),\n-            (\n-                SmolStr::new(\"Debug\"),\n-                vec![SmolStr::new(\"std\"), SmolStr::new(\"fmt\"), SmolStr::new(\"Debug\")],\n-            ),\n-            (\n-                SmolStr::new(\"Display\"),\n-                vec![SmolStr::new(\"std\"), SmolStr::new(\"fmt\"), SmolStr::new(\"Display\")],\n-            ),\n-            (\n-                SmolStr::new(\"Hash\"),\n-                vec![SmolStr::new(\"std\"), SmolStr::new(\"hash\"), SmolStr::new(\"Hash\")],\n-            ),\n-            (\n-                SmolStr::new(\"Hasher\"),\n-                vec![SmolStr::new(\"std\"), SmolStr::new(\"hash\"), SmolStr::new(\"Hasher\")],\n-            ),\n-            (\n-                SmolStr::new(\"Iterator\"),\n-                vec![SmolStr::new(\"std\"), SmolStr::new(\"iter\"), SmolStr::new(\"Iterator\")],\n-            ),\n-        ];\n-\n-        ImportResolver { dummy_names }\n-    }\n-\n-    // Returns a map of importable items filtered by name.\n-    // The map associates item name with its full path.\n-    // todo: should return Resolutions\n-    pub(crate) fn all_names(\n-        &self,\n-        _db: &impl HirDatabase,\n-        name: &Name,\n-    ) -> FxHashMap<SmolStr, Vec<SmolStr>> {\n-        let name = name.to_smolstr();\n-        if name.len() > 1 {\n-            self.dummy_names\n-                .iter()\n-                .filter(|(n, _)| n.as_str().contains(name.as_str()))\n-                .cloned()\n-                .collect()\n-        } else {\n-            FxHashMap::default()\n-        }\n-    }\n-}"}, {"sha": "2959e3eca296b6f9ed795df4543436bf7f05b972", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e01052d1f0b8bf70a418a10538528923c5f400d5/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e01052d1f0b8bf70a418a10538528923c5f400d5/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=e01052d1f0b8bf70a418a10538528923c5f400d5", "patch": "@@ -14,12 +14,11 @@ use ra_syntax::{\n     ast::{self, AstNode, NameOwner},\n     algo::find_node_at_offset,\n     SyntaxKind::*,\n-    SmolStr,\n };\n \n use crate::{\n     HirDatabase, Function, Struct, Enum, Const, Static, Either, DefWithBody, PerNs, Name,\n-    AsName, Module, HirFileId, Crate, Trait, Resolver, Ty, ImportResolver,\n+    AsName, Module, HirFileId, Crate, Trait, Resolver, Ty,\n     expr::{BodySourceMap, scope::{ScopeId, ExprScopes}},\n     ids::LocationCtx,\n     expr, AstId,\n@@ -171,7 +170,6 @@ fn def_with_body_from_child_node(\n #[derive(Debug)]\n pub struct SourceAnalyzer {\n     resolver: Resolver,\n-    import_resolver: ImportResolver,\n     body_source_map: Option<Arc<BodySourceMap>>,\n     infer: Option<Arc<crate::ty::InferenceResult>>,\n     scopes: Option<Arc<crate::expr::ExprScopes>>,\n@@ -219,7 +217,6 @@ impl SourceAnalyzer {\n         offset: Option<TextUnit>,\n     ) -> SourceAnalyzer {\n         let def_with_body = def_with_body_from_child_node(db, file_id, node);\n-        let import_resolver = ImportResolver::new();\n         if let Some(def) = def_with_body {\n             let source_map = def.body_source_map(db);\n             let scopes = db.expr_scopes(def);\n@@ -230,7 +227,6 @@ impl SourceAnalyzer {\n             let resolver = expr::resolver_for_scope(def.body(db), db, scope);\n             SourceAnalyzer {\n                 resolver,\n-                import_resolver,\n                 body_source_map: Some(source_map),\n                 infer: Some(def.infer(db)),\n                 scopes: Some(scopes),\n@@ -241,7 +237,6 @@ impl SourceAnalyzer {\n                     .ancestors()\n                     .find_map(|node| try_get_resolver_for_node(db, file_id, node))\n                     .unwrap_or_default(),\n-                import_resolver,\n                 body_source_map: None,\n                 infer: None,\n                 scopes: None,\n@@ -328,14 +323,6 @@ impl SourceAnalyzer {\n         self.resolver.all_names(db)\n     }\n \n-    pub fn all_import_names(\n-        &self,\n-        db: &impl HirDatabase,\n-        name: &Name,\n-    ) -> FxHashMap<SmolStr, Vec<SmolStr>> {\n-        self.import_resolver.all_names(db, name)\n-    }\n-\n     pub fn find_all_refs(&self, pat: &ast::BindPat) -> Vec<ReferenceDescriptor> {\n         // FIXME: at least, this should work with any DefWithBody, but ideally\n         // this should be hir-based altogether"}, {"sha": "a2523c5efea87a04f4b11bbc42ebe146b0a08137", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e01052d1f0b8bf70a418a10538528923c5f400d5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e01052d1f0b8bf70a418a10538528923c5f400d5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=e01052d1f0b8bf70a418a10538528923c5f400d5", "patch": "@@ -1,6 +1,8 @@\n+use rustc_hash::FxHashMap;\n use ra_text_edit::TextEditBuilder;\n use ra_syntax::SmolStr;\n use ra_assists::auto_import;\n+\n use crate::completion::{CompletionItem, Completions, CompletionKind, CompletionContext};\n \n pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n@@ -10,7 +12,8 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     }\n \n     if let Some(name) = ctx.path_ident.as_ref() {\n-        let import_names = ctx.analyzer.all_import_names(ctx.db, name);\n+        let import_resolver = ImportResolver::new();\n+        let import_names = import_resolver.all_names(&name.to_string());\n         import_names.into_iter().for_each(|(name, path)| {\n             let edit = {\n                 let mut builder = TextEditBuilder::default();\n@@ -64,6 +67,56 @@ fn fmt_import_path(path: &Vec<SmolStr>, buf: &mut String) {\n     }\n }\n \n+#[derive(Debug, Clone, Default)]\n+pub(crate) struct ImportResolver {\n+    // todo: use fst crate or something like that\n+    dummy_names: Vec<(SmolStr, Vec<SmolStr>)>,\n+}\n+\n+impl ImportResolver {\n+    pub(crate) fn new() -> Self {\n+        let dummy_names = vec![\n+            (SmolStr::new(\"fmt\"), vec![SmolStr::new(\"std\"), SmolStr::new(\"fmt\")]),\n+            (SmolStr::new(\"io\"), vec![SmolStr::new(\"std\"), SmolStr::new(\"io\")]),\n+            (SmolStr::new(\"iter\"), vec![SmolStr::new(\"std\"), SmolStr::new(\"iter\")]),\n+            (SmolStr::new(\"hash\"), vec![SmolStr::new(\"std\"), SmolStr::new(\"hash\")]),\n+            (\n+                SmolStr::new(\"Debug\"),\n+                vec![SmolStr::new(\"std\"), SmolStr::new(\"fmt\"), SmolStr::new(\"Debug\")],\n+            ),\n+            (\n+                SmolStr::new(\"Display\"),\n+                vec![SmolStr::new(\"std\"), SmolStr::new(\"fmt\"), SmolStr::new(\"Display\")],\n+            ),\n+            (\n+                SmolStr::new(\"Hash\"),\n+                vec![SmolStr::new(\"std\"), SmolStr::new(\"hash\"), SmolStr::new(\"Hash\")],\n+            ),\n+            (\n+                SmolStr::new(\"Hasher\"),\n+                vec![SmolStr::new(\"std\"), SmolStr::new(\"hash\"), SmolStr::new(\"Hasher\")],\n+            ),\n+            (\n+                SmolStr::new(\"Iterator\"),\n+                vec![SmolStr::new(\"std\"), SmolStr::new(\"iter\"), SmolStr::new(\"Iterator\")],\n+            ),\n+        ];\n+\n+        ImportResolver { dummy_names }\n+    }\n+\n+    // Returns a map of importable items filtered by name.\n+    // The map associates item name with its full path.\n+    // todo: should return Resolutions\n+    pub(crate) fn all_names(&self, name: &str) -> FxHashMap<SmolStr, Vec<SmolStr>> {\n+        if name.len() > 1 {\n+            self.dummy_names.iter().filter(|(n, _)| n.contains(name)).cloned().collect()\n+        } else {\n+            FxHashMap::default()\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::completion::{CompletionKind, check_completion};"}, {"sha": "0d630fdf6c85d52e89e97ef34123597911a4edad", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e01052d1f0b8bf70a418a10538528923c5f400d5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e01052d1f0b8bf70a418a10538528923c5f400d5/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=e01052d1f0b8bf70a418a10538528923c5f400d5", "patch": "@@ -86,18 +86,6 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     fn fill(&mut self, original_file: &'a SourceFile, offset: TextUnit) {\n-        // We heed the original NameRef before the \"intellijRulezz\" hack\n-        if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(original_file.syntax(), offset)\n-        {\n-            if let Some(path) = name_ref.syntax().ancestors().find_map(ast::Path::cast) {\n-                if let Some(path) = hir::Path::from_ast(path) {\n-                    if let Some(ident) = path.as_ident() {\n-                        self.path_ident = Some(ident.clone());\n-                    }\n-                }\n-            }\n-        }\n-\n         // Insert a fake ident to get a valid parse tree. We will use this file\n         // to determine context, though the original_file will be used for\n         // actual completion."}]}