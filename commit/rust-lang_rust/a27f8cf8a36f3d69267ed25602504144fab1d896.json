{"sha": "a27f8cf8a36f3d69267ed25602504144fab1d896", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyN2Y4Y2Y4YTM2ZjNkNjkyNjdlZDI1NjAyNTA0MTQ0ZmFiMWQ4OTY=", "commit": {"author": {"name": "petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-06-29T13:06:24Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-06T22:22:48Z"}, "message": "Address review comments\n\nFix regressions after rebase", "tree": {"sha": "21b67433bf37f7da873bbd97bdd24b43a9ae96c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21b67433bf37f7da873bbd97bdd24b43a9ae96c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a27f8cf8a36f3d69267ed25602504144fab1d896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a27f8cf8a36f3d69267ed25602504144fab1d896", "html_url": "https://github.com/rust-lang/rust/commit/a27f8cf8a36f3d69267ed25602504144fab1d896", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a27f8cf8a36f3d69267ed25602504144fab1d896/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08a1d45818d022095d597919aa0d50ee7be2a0c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/08a1d45818d022095d597919aa0d50ee7be2a0c6", "html_url": "https://github.com/rust-lang/rust/commit/08a1d45818d022095d597919aa0d50ee7be2a0c6"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "0db2b86b15f5725109d89fa6d2522ce040e4a1a6", "filename": "src/libproc_macro/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a27f8cf8a36f3d69267ed25602504144fab1d896/src%2Flibproc_macro%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a27f8cf8a36f3d69267ed25602504144fab1d896/src%2Flibproc_macro%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fquote.rs?ref=a27f8cf8a36f3d69267ed25602504144fab1d896", "patch": "@@ -87,7 +87,7 @@ impl ProcMacro for Quoter {\n         let mut info = cx.current_expansion.mark.expn_info().unwrap();\n         info.callee.allow_internal_unstable = true;\n         cx.current_expansion.mark.set_expn_info(info);\n-        ::__internal::set_sess(cx, || quote!(::TokenStream((quote stream))))\n+        ::__internal::set_sess(cx, || quote!(::TokenStream { 0: (quote stream) }))\n     }\n }\n "}, {"sha": "051b89219c1f54cd8141472d03f9daacacac3348", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a27f8cf8a36f3d69267ed25602504144fab1d896/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a27f8cf8a36f3d69267ed25602504144fab1d896/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=a27f8cf8a36f3d69267ed25602504144fab1d896", "patch": "@@ -590,6 +590,7 @@ impl<'a, 'tcx> TypePrivacyVisitor<'a, 'tcx> {\n         self.def_id_visibility(did).is_accessible_from(self.current_item, self.tcx)\n     }\n \n+    // Take node ID of an expression or pattern and check its type for privacy.\n     fn check_expr_pat_type(&mut self, id: ast::NodeId, span: Span) -> bool {\n         self.span = span;\n         if let Some(ty) = self.tables.node_id_to_type_opt(id) {\n@@ -797,6 +798,11 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n                     self.tcx.sess.span_err(self.span, &msg);\n                     return true;\n                 }\n+                if let ty::TyFnDef(..) = ty.sty {\n+                    if self.tcx.fn_sig(def_id).visit_with(self) {\n+                        return true;\n+                    }\n+                }\n                 // Inherent static methods don't have self type in substs,\n                 // we have to check it additionally.\n                 if let Some(assoc_item) = self.tcx.opt_associated_item(def_id) {"}, {"sha": "7627f5dc0cd09e70b7163062ab5e3b597303d725", "filename": "src/test/compile-fail/auxiliary/private-inferred-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a27f8cf8a36f3d69267ed25602504144fab1d896/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fprivate-inferred-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a27f8cf8a36f3d69267ed25602504144fab1d896/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fprivate-inferred-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fprivate-inferred-type.rs?ref=a27f8cf8a36f3d69267ed25602504144fab1d896", "patch": "@@ -29,7 +29,7 @@ impl Pub<Priv> {\n     pub fn static_method() {}\n }\n impl Pub<u8> {\n-    fn priv_metod(&self) {}\n+    fn priv_method(&self) {}\n }\n \n pub macro m() {\n@@ -40,5 +40,5 @@ pub macro m() {\n     <u8 as PubTrait>::method;\n     PrivTupleStruct;\n     PubTupleStruct;\n-    Pub(0u8).priv_metod();\n+    Pub(0u8).priv_method();\n }"}, {"sha": "fdd9166ef29997938b62f3560d578cb8602429c6", "filename": "src/test/compile-fail/private-inferred-type-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a27f8cf8a36f3d69267ed25602504144fab1d896/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a27f8cf8a36f3d69267ed25602504144fab1d896/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type-3.rs?ref=a27f8cf8a36f3d69267ed25602504144fab1d896", "patch": "@@ -15,7 +15,7 @@\n // error-pattern:type `fn() {<u8 as ext::PrivTrait>::method}` is private\n // error-pattern:type `fn(u8) -> ext::PrivTupleStruct {ext::PrivTupleStruct::{{constructor}}}` is pr\n // error-pattern:type `fn(u8) -> ext::PubTupleStruct {ext::PubTupleStruct::{{constructor}}}` is priv\n-// error-pattern:type `fn(&ext::Pub<u8>) {<ext::Pub<u8>>::priv_metod}` is private\n+// error-pattern:type `fn(&ext::Pub<u8>) {<ext::Pub<u8>>::priv_method}` is private\n \n #![feature(decl_macro)]\n "}, {"sha": "140891027d5f0f7305c21141f69453d36e97b8e5", "filename": "src/test/compile-fail/private-inferred-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a27f8cf8a36f3d69267ed25602504144fab1d896/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a27f8cf8a36f3d69267ed25602504144fab1d896/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-inferred-type.rs?ref=a27f8cf8a36f3d69267ed25602504144fab1d896", "patch": "@@ -37,7 +37,7 @@ mod m {\n         pub const INHERENT_ASSOC_CONST_GENERIC_SELF: u8 = 0;\n     }\n     impl Pub<u8> {\n-        fn priv_metod(&self) {}\n+        fn priv_method(&self) {}\n         pub fn method_with_substs<T>(&self) {}\n         pub fn method_with_priv_params(&self, _: Priv) {}\n     }\n@@ -54,8 +54,8 @@ mod m {\n         //~^ ERROR type `fn(u8) -> m::PrivTupleStruct {m::PrivTupleStruct::{{constructor}}}` is priv\n         PubTupleStruct;\n         //~^ ERROR type `fn(u8) -> m::PubTupleStruct {m::PubTupleStruct::{{constructor}}}` is privat\n-        Pub(0u8).priv_metod();\n-        //~^ ERROR type `fn(&m::Pub<u8>) {<m::Pub<u8>>::priv_metod}` is private\n+        Pub(0u8).priv_method();\n+        //~^ ERROR type `fn(&m::Pub<u8>) {<m::Pub<u8>>::priv_method}` is private\n     }\n \n     trait Trait {}"}]}