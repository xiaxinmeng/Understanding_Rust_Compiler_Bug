{"sha": "5d04ee805b96d34e7c5b316270a730fd9a0c537f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkMDRlZTgwNWI5NmQzNGU3YzViMzE2MjcwYTczMGZkOWEwYzUzN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-27T20:44:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-27T20:44:08Z"}, "message": "auto merge of #6715 : Xazax-hun/rust/incoming, r=graydon\n\nPreliminary implementation for: https://github.com/mozilla/rust/issues/6275\r\n\r\nThis is my first (non hello world) rust code, so it may not be idiomatic.", "tree": {"sha": "cf5ccff07b0fd51668f8cbb186463aef3907e11f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf5ccff07b0fd51668f8cbb186463aef3907e11f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d04ee805b96d34e7c5b316270a730fd9a0c537f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d04ee805b96d34e7c5b316270a730fd9a0c537f", "html_url": "https://github.com/rust-lang/rust/commit/5d04ee805b96d34e7c5b316270a730fd9a0c537f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d04ee805b96d34e7c5b316270a730fd9a0c537f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0f3686515410c013f6cd12ce4fc5236e3dee3f2", "html_url": "https://github.com/rust-lang/rust/commit/b0f3686515410c013f6cd12ce4fc5236e3dee3f2"}, {"sha": "3d61931fcac13aadc88ece7e48567f7ff503fba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d61931fcac13aadc88ece7e48567f7ff503fba5", "html_url": "https://github.com/rust-lang/rust/commit/3d61931fcac13aadc88ece7e48567f7ff503fba5"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "9e832c19a166ad96a053f8358d8b5ca0aa923330", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/5d04ee805b96d34e7c5b316270a730fd9a0c537f/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d04ee805b96d34e7c5b316270a730fd9a0c537f/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=5d04ee805b96d34e7c5b316270a730fd9a0c537f", "patch": "@@ -82,6 +82,9 @@ pub enum lint {\n     dead_assignment,\n     unused_mut,\n     unnecessary_allocation,\n+\n+    missing_struct_doc,\n+    missing_trait_doc,\n }\n \n pub fn level_to_str(lv: level) -> &'static str {\n@@ -252,6 +255,20 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         desc: \"detects unnecessary allocations that can be eliminated\",\n         default: warn\n     }),\n+\n+    (\"missing_struct_doc\",\n+     LintSpec {\n+        lint: missing_struct_doc,\n+        desc: \"detects missing documentation for structs\",\n+        default: allow\n+    }),\n+\n+    (\"missing_trait_doc\",\n+     LintSpec {\n+        lint: missing_trait_doc,\n+        desc: \"detects missing documentation for traits\",\n+        default: allow\n+    }),\n ];\n \n /*\n@@ -931,6 +948,69 @@ fn lint_unnecessary_allocations(cx: @mut Context) -> visit::vt<()> {\n     })\n }\n \n+fn lint_missing_struct_doc(cx: @mut Context) -> visit::vt<()> {\n+    visit::mk_simple_visitor(@visit::SimpleVisitor {\n+        visit_struct_field: |field| {\n+            let relevant = match field.node.kind {\n+                ast::named_field(_, vis) => vis != ast::private,\n+                ast::unnamed_field => false,\n+            };\n+\n+            if relevant {\n+                let mut has_doc = false;\n+                for field.node.attrs.each |attr| {\n+                    if attr.node.is_sugared_doc {\n+                        has_doc = true;\n+                        break;\n+                    }\n+                }\n+                if !has_doc {\n+                    cx.span_lint(missing_struct_doc, field.span, \"missing documentation \\\n+                                                                  for a field.\");\n+                }\n+            }\n+        },\n+        .. *visit::default_simple_visitor()\n+    })\n+}\n+\n+fn lint_missing_trait_doc(cx: @mut Context) -> visit::vt<()> {\n+    visit::mk_simple_visitor(@visit::SimpleVisitor {\n+        visit_trait_method: |method| {\n+            let mut has_doc = false;\n+            let span = match copy *method {\n+                ast::required(m) => {\n+                    for m.attrs.each |attr| {\n+                        if attr.node.is_sugared_doc {\n+                            has_doc = true;\n+                            break;\n+                        }\n+                    }\n+                    m.span\n+                },\n+                ast::provided(m) => {\n+                    if m.vis == ast::private {\n+                        has_doc = true;\n+                    } else {\n+                        for m.attrs.each |attr| {\n+                            if attr.node.is_sugared_doc {\n+                                has_doc = true;\n+                                break;\n+                            }\n+                        }\n+                    }\n+                    m.span\n+                }\n+            };\n+            if !has_doc {\n+                cx.span_lint(missing_trait_doc, span, \"missing documentation \\\n+                                                       for a method.\");\n+            }\n+        },\n+        .. *visit::default_simple_visitor()\n+    })\n+}\n+\n pub fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n     let cx = @mut Context {\n         dict: @get_lint_dict(),\n@@ -959,6 +1039,8 @@ pub fn check_crate(tcx: ty::ctxt, crate: @ast::crate) {\n     cx.add_lint(lint_unused_mut(cx));\n     cx.add_lint(lint_session(cx));\n     cx.add_lint(lint_unnecessary_allocations(cx));\n+    cx.add_lint(lint_missing_struct_doc(cx));\n+    cx.add_lint(lint_missing_trait_doc(cx));\n \n     // type inference doesn't like this being declared below, we need to tell it\n     // what the type of this first function is..."}]}