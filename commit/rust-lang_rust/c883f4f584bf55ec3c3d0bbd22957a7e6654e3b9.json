{"sha": "c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ODNmNGY1ODRiZjU1ZWMzYzNkMGJiZDIyOTU3YTdlNjY1NGUzYjk=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-02T19:53:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-02T19:53:46Z"}, "message": "Rollup merge of #40129 - abonander:proc_macro_bang, r=jseyfried\n\nImplement function-like procedural macros ( `#[proc_macro]`)\n\nAdds the `#[proc_macro]` attribute, which expects bare functions of the kind `fn(TokenStream) -> TokenStream`, which can be invoked like `my_macro!()`.\n\ncc rust-lang/rfcs#1913, #38356\n\nr? @jseyfried\ncc @nrc", "tree": {"sha": "4f88f98fa7272576b878096fd4045c332599a4be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f88f98fa7272576b878096fd4045c332599a4be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9", "html_url": "https://github.com/rust-lang/rust/commit/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0536fd6396133189fb4a41377d3972cd312078a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0536fd6396133189fb4a41377d3972cd312078a0", "html_url": "https://github.com/rust-lang/rust/commit/0536fd6396133189fb4a41377d3972cd312078a0"}, {"sha": "2fcbb48c727e82ea8751d6476d86fd3c6fe16b42", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fcbb48c727e82ea8751d6476d86fd3c6fe16b42", "html_url": "https://github.com/rust-lang/rust/commit/2fcbb48c727e82ea8751d6476d86fd3c6fe16b42"}], "stats": {"total": 223, "additions": 213, "deletions": 10}, "files": [{"sha": "0516e111be3b38002bd924e6a7ada7c107082e4b", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9", "patch": "@@ -125,6 +125,10 @@ pub mod __internal {\n         fn register_attr_proc_macro(&mut self,\n                                     name: &str,\n                                     expand: fn(TokenStream, TokenStream) -> TokenStream);\n+\n+        fn register_bang_proc_macro(&mut self,\n+                                    name: &str,\n+                                    expand: fn(TokenStream) -> TokenStream);\n     }\n \n     // Emulate scoped_thread_local!() here essentially"}, {"sha": "49dcffb4830a1da67eb69f88b486a2c68091bdc9", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9", "patch": "@@ -586,7 +586,7 @@ impl<'a> CrateLoader<'a> {\n         use proc_macro::__internal::Registry;\n         use rustc_back::dynamic_lib::DynamicLibrary;\n         use syntax_ext::deriving::custom::ProcMacroDerive;\n-        use syntax_ext::proc_macro_impl::AttrProcMacro;\n+        use syntax_ext::proc_macro_impl::{AttrProcMacro, BangProcMacro};\n \n         let path = match dylib {\n             Some(dylib) => dylib,\n@@ -630,6 +630,15 @@ impl<'a> CrateLoader<'a> {\n                 );\n                 self.0.push((Symbol::intern(name), Rc::new(expand)));\n             }\n+\n+            fn register_bang_proc_macro(&mut self,\n+                                        name: &str,\n+                                        expand: fn(TokenStream) -> TokenStream) {\n+                let expand = SyntaxExtension::ProcMacro(\n+                    Box::new(BangProcMacro { inner: expand })\n+                );\n+                self.0.push((Symbol::intern(name), Rc::new(expand)));\n+            }\n         }\n \n         let mut my_registrar = MyRegistrar(Vec::new());"}, {"sha": "6eb7d449f269287afe915646535552840b0ec16d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9", "patch": "@@ -774,6 +774,11 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                            \"attribute proc macros are currently unstable\",\n                                            cfg_fn!(proc_macro))),\n \n+    (\"proc_macro\", Normal, Gated(Stability::Unstable,\n+                                 \"proc_macro\",\n+                                 \"function-like proc macros are currently unstable\",\n+                                 cfg_fn!(proc_macro))),\n+\n     (\"rustc_derive_registrar\", Normal, Gated(Stability::Unstable,\n                                              \"rustc_derive_registrar\",\n                                              \"used internally by rustc\","}, {"sha": "f60e5824db9627cc67e203060a8409ab58afee7f", "filename": "src/libsyntax_ext/proc_macro_impl.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Flibsyntax_ext%2Fproc_macro_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Flibsyntax_ext%2Fproc_macro_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_impl.rs?ref=c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9", "patch": "@@ -56,3 +56,38 @@ impl base::AttrProcMacro for AttrProcMacro {\n         }\n     }\n }\n+\n+pub struct BangProcMacro {\n+    pub inner: fn(TsShim) -> TsShim,\n+}\n+\n+impl base::ProcMacro for BangProcMacro {\n+    fn expand<'cx>(&self,\n+                   ecx: &'cx mut ExtCtxt,\n+                   span: Span,\n+                   input: TokenStream)\n+                   -> TokenStream {\n+        let input = __internal::token_stream_wrap(input);\n+\n+        let res = __internal::set_parse_sess(&ecx.parse_sess, || {\n+            panic::catch_unwind(panic::AssertUnwindSafe(|| (self.inner)(input)))\n+        });\n+\n+        match res {\n+            Ok(stream) => __internal::token_stream_inner(stream),\n+            Err(e) => {\n+                let msg = \"proc macro panicked\";\n+                let mut err = ecx.struct_span_fatal(span, msg);\n+                if let Some(s) = e.downcast_ref::<String>() {\n+                    err.help(&format!(\"message: {}\", s));\n+                }\n+                if let Some(s) = e.downcast_ref::<&'static str>() {\n+                    err.help(&format!(\"message: {}\", s));\n+                }\n+\n+                err.emit();\n+                panic!(FatalError);\n+            }\n+        }\n+    }\n+}"}, {"sha": "9c96ad547e1ae33254dc8034826b68748db50bc9", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9", "patch": "@@ -27,21 +27,25 @@ use syntax_pos::{Span, DUMMY_SP};\n \n use deriving;\n \n+const PROC_MACRO_KINDS: [&'static str; 3] =\n+    [\"proc_macro_derive\", \"proc_macro_attribute\", \"proc_macro\"];\n+\n struct ProcMacroDerive {\n     trait_name: ast::Name,\n     function_name: Ident,\n     span: Span,\n     attrs: Vec<ast::Name>,\n }\n \n-struct AttrProcMacro {\n+struct ProcMacroDef {\n     function_name: Ident,\n     span: Span,\n }\n \n struct CollectProcMacros<'a> {\n     derives: Vec<ProcMacroDerive>,\n-    attr_macros: Vec<AttrProcMacro>,\n+    attr_macros: Vec<ProcMacroDef>,\n+    bang_macros: Vec<ProcMacroDef>,\n     in_root: bool,\n     handler: &'a errors::Handler,\n     is_proc_macro_crate: bool,\n@@ -58,17 +62,18 @@ pub fn modify(sess: &ParseSess,\n     let ecfg = ExpansionConfig::default(\"proc_macro\".to_string());\n     let mut cx = ExtCtxt::new(sess, ecfg, resolver);\n \n-    let (derives, attr_macros) = {\n+    let (derives, attr_macros, bang_macros) = {\n         let mut collect = CollectProcMacros {\n             derives: Vec::new(),\n             attr_macros: Vec::new(),\n+            bang_macros: Vec::new(),\n             in_root: true,\n             handler: handler,\n             is_proc_macro_crate: is_proc_macro_crate,\n             is_test_crate: is_test_crate,\n         };\n         visit::walk_crate(&mut collect, &krate);\n-        (collect.derives, collect.attr_macros)\n+        (collect.derives, collect.attr_macros, collect.bang_macros)\n     };\n \n     if !is_proc_macro_crate {\n@@ -83,7 +88,7 @@ pub fn modify(sess: &ParseSess,\n         return krate;\n     }\n \n-    krate.module.items.push(mk_registrar(&mut cx, &derives, &attr_macros));\n+    krate.module.items.push(mk_registrar(&mut cx, &derives, &attr_macros, &bang_macros));\n \n     if krate.exported_macros.len() > 0 {\n         handler.err(\"cannot export macro_rules! macros from a `proc-macro` \\\n@@ -93,6 +98,10 @@ pub fn modify(sess: &ParseSess,\n     return krate\n }\n \n+fn is_proc_macro_attr(attr: &ast::Attribute) -> bool {\n+    PROC_MACRO_KINDS.iter().any(|kind| attr.check_name(kind))\n+}\n+\n impl<'a> CollectProcMacros<'a> {\n     fn check_not_pub_in_root(&self, vis: &ast::Visibility, sp: Span) {\n         if self.is_proc_macro_crate &&\n@@ -196,12 +205,12 @@ impl<'a> CollectProcMacros<'a> {\n     fn collect_attr_proc_macro(&mut self, item: &'a ast::Item, attr: &'a ast::Attribute) {\n         if let Some(_) = attr.meta_item_list() {\n             self.handler.span_err(attr.span, \"`#[proc_macro_attribute]` attribute\n-                cannot contain any meta items\");\n+                does not take any arguments\");\n             return;\n         }\n \n         if self.in_root && item.vis == ast::Visibility::Public {\n-            self.attr_macros.push(AttrProcMacro {\n+            self.attr_macros.push(ProcMacroDef {\n                 span: item.span,\n                 function_name: item.ident,\n             });\n@@ -215,6 +224,29 @@ impl<'a> CollectProcMacros<'a> {\n             self.handler.span_err(item.span, msg);\n         }\n     }\n+\n+    fn collect_bang_proc_macro(&mut self, item: &'a ast::Item, attr: &'a ast::Attribute) {\n+        if let Some(_) = attr.meta_item_list() {\n+            self.handler.span_err(attr.span, \"`#[proc_macro]` attribute\n+                does not take any arguments\");\n+            return;\n+        }\n+\n+        if self.in_root && item.vis == ast::Visibility::Public {\n+            self.bang_macros.push(ProcMacroDef {\n+                span: item.span,\n+                function_name: item.ident,\n+            });\n+        } else {\n+            let msg = if !self.in_root {\n+                \"functions tagged with `#[proc_macro]` must \\\n+                 currently reside in the root of the crate\"\n+            } else {\n+                \"functions tagged with `#[proc_macro]` must be `pub`\"\n+            };\n+            self.handler.span_err(item.span, msg);\n+        }\n+    }\n }\n \n impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n@@ -232,7 +264,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n         let mut found_attr: Option<&'a ast::Attribute> = None;\n \n         for attr in &item.attrs {\n-            if attr.check_name(\"proc_macro_derive\") || attr.check_name(\"proc_macro_attribute\") {\n+            if is_proc_macro_attr(&attr) {\n                 if let Some(prev_attr) = found_attr {\n                     let msg = if attr.name() == prev_attr.name() {\n                         format!(\"Only one `#[{}]` attribute is allowed on any given function\",\n@@ -285,6 +317,8 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n             self.collect_custom_derive(item, attr);\n         } else if attr.check_name(\"proc_macro_attribute\") {\n             self.collect_attr_proc_macro(item, attr);\n+        } else if attr.check_name(\"proc_macro\") {\n+            self.collect_bang_proc_macro(item, attr);\n         };\n \n         visit::walk_item(self, item);\n@@ -320,7 +354,8 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n //      }\n fn mk_registrar(cx: &mut ExtCtxt,\n                 custom_derives: &[ProcMacroDerive],\n-                custom_attrs: &[AttrProcMacro]) -> P<ast::Item> {\n+                custom_attrs: &[ProcMacroDef],\n+                custom_macros: &[ProcMacroDef]) -> P<ast::Item> {\n     let eid = cx.codemap().record_expansion(ExpnInfo {\n         call_site: DUMMY_SP,\n         callee: NameAndSpan {\n@@ -342,6 +377,7 @@ fn mk_registrar(cx: &mut ExtCtxt,\n     let registrar = Ident::from_str(\"registrar\");\n     let register_custom_derive = Ident::from_str(\"register_custom_derive\");\n     let register_attr_proc_macro = Ident::from_str(\"register_attr_proc_macro\");\n+    let register_bang_proc_macro = Ident::from_str(\"register_bang_proc_macro\");\n \n     let mut stmts = custom_derives.iter().map(|cd| {\n         let path = cx.path_global(cd.span, vec![cd.function_name]);\n@@ -371,6 +407,18 @@ fn mk_registrar(cx: &mut ExtCtxt,\n                                   vec![registrar, name, cx.expr_path(path)]))\n     }));\n \n+    stmts.extend(custom_macros.iter().map(|cm| {\n+        let name = cx.expr_str(cm.span, cm.function_name.name);\n+        let path = cx.path_global(cm.span, vec![cm.function_name]);\n+        let registrar = cx.expr_ident(cm.span, registrar);\n+\n+        let ufcs_path = cx.path(span,\n+                                vec![proc_macro, __internal, registry, register_bang_proc_macro]);\n+\n+        cx.stmt_expr(cx.expr_call(span, cx.expr_path(ufcs_path),\n+                                  vec![registrar, name, cx.expr_path(path)]))\n+    }));\n+\n     let path = cx.path(span, vec![proc_macro, __internal, registry]);\n     let registrar_path = cx.ty_path(path);\n     let arg_ty = cx.ty_rptr(span, registrar_path, None, ast::Mutability::Mutable);"}, {"sha": "89ac11b309d751bc13d46f10996895ff8abe75da", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/bang_proc_macro.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang_proc_macro.rs?ref=c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+// no-prefer-dynamic\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro]\n+pub fn bang_proc_macro(input: TokenStream) -> TokenStream {\n+    input\n+}"}, {"sha": "7ecc685357ee675b0e4235f51756790b25a1c6e3", "filename": "src/test/compile-fail-fulldeps/proc-macro/macro-use-bang.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacro-use-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacro-use-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fmacro-use-bang.rs?ref=c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:bang_proc_macro.rs\n+\n+#![feature(proc_macro)]\n+\n+#[macro_use]\n+extern crate bang_proc_macro;\n+\n+fn main() {\n+    bang_proc_macro!(println!(\"Hello, world!\"));\n+    //~^ ERROR: procedural macros cannot be imported with `#[macro_use]`\n+}"}, {"sha": "e0066dd43be89f13cb3d8ec3a8abf80d302ce5a6", "filename": "src/test/compile-fail-fulldeps/proc-macro/resolve-error.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fresolve-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fresolve-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fresolve-error.rs?ref=c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9", "patch": "@@ -11,6 +11,7 @@\n // aux-build:derive-foo.rs\n // aux-build:derive-clona.rs\n // aux-build:attr_proc_macro.rs\n+// aux-build:bang_proc_macro.rs\n \n #![feature(proc_macro)]\n \n@@ -19,13 +20,19 @@ extern crate derive_foo;\n #[macro_use]\n extern crate derive_clona;\n extern crate attr_proc_macro;\n+extern crate bang_proc_macro;\n \n use attr_proc_macro::attr_proc_macro;\n+use bang_proc_macro::bang_proc_macro;\n \n macro_rules! FooWithLongNam {\n     () => {}\n }\n \n+macro_rules! attr_proc_mac {\n+    () => {}\n+}\n+\n #[derive(FooWithLongNan)]\n //~^ ERROR cannot find derive macro `FooWithLongNan` in this scope\n //~^^ HELP did you mean `FooWithLongName`?\n@@ -61,7 +68,12 @@ fn main() {\n \n     attr_proc_macra!();\n     //~^ ERROR cannot find macro `attr_proc_macra!` in this scope\n+    //~^^ HELP did you mean `attr_proc_mac!`?\n \n     Dlona!();\n     //~^ ERROR cannot find macro `Dlona!` in this scope\n+\n+    bang_proc_macrp!();\n+    //~^ ERROR cannot find macro `bang_proc_macrp!` in this scope\n+    //~^^ HELP did you mean `bang_proc_macro!`?\n }"}, {"sha": "122a47aff7198d5f512605ce09d1e0422c5eec9d", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/bang-macro.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fbang-macro.rs?ref=c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+#![feature(proc_macro)]\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro]\n+pub fn rewrite(input: TokenStream) -> TokenStream {\n+    let input = input.to_string();\n+\n+    assert_eq!(input, r#\"\"Hello, world!\"\"#);\n+\n+    r#\"\"NOT Hello, world!\"\"#.parse().unwrap()\n+}"}, {"sha": "531bd0dd3569d9b0a191c3330950d60599a8173d", "filename": "src/test/run-pass-fulldeps/proc-macro/bang-macro.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fbang-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fbang-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fbang-macro.rs?ref=c883f4f584bf55ec3c3d0bbd22957a7e6654e3b9", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:bang-macro.rs\n+\n+#![feature(proc_macro)]\n+\n+extern crate bang_macro;\n+use bang_macro::rewrite;\n+\n+fn main() {\n+    assert_eq!(rewrite!(\"Hello, world!\"), \"NOT Hello, world!\");\n+}"}]}