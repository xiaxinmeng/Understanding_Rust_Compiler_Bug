{"sha": "e666589e63fd4de16baa5f1ebda4ab07aa5a5437", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NjY1ODllNjNmZDRkZTE2YmFhNWYxZWJkYTRhYjA3YWE1YTU0Mzc=", "commit": {"author": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-05-12T12:59:35Z"}, "committer": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-05-13T04:22:46Z"}, "message": "Add support for lengths in array repeats, if they are literals\n\nNow we will get the type of `[0u8; 4]`.", "tree": {"sha": "0581e4a85c1f3b58a96111d8836386216f297354", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0581e4a85c1f3b58a96111d8836386216f297354"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e666589e63fd4de16baa5f1ebda4ab07aa5a5437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e666589e63fd4de16baa5f1ebda4ab07aa5a5437", "html_url": "https://github.com/rust-lang/rust/commit/e666589e63fd4de16baa5f1ebda4ab07aa5a5437", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e666589e63fd4de16baa5f1ebda4ab07aa5a5437/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73023c0299d4adeada026648c3684621f129e038", "url": "https://api.github.com/repos/rust-lang/rust/commits/73023c0299d4adeada026648c3684621f129e038", "html_url": "https://github.com/rust-lang/rust/commit/73023c0299d4adeada026648c3684621f129e038"}], "stats": {"total": 33, "additions": 22, "deletions": 11}, "files": [{"sha": "2a7e0205f5be5da75500a6560a400db0392f9b78", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e666589e63fd4de16baa5f1ebda4ab07aa5a5437/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e666589e63fd4de16baa5f1ebda4ab07aa5a5437/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=e666589e63fd4de16baa5f1ebda4ab07aa5a5437", "patch": "@@ -1006,16 +1006,17 @@ impl From<ast::BinOp> for BinaryOp {\n impl From<ast::LiteralKind> for Literal {\n     fn from(ast_lit_kind: ast::LiteralKind) -> Self {\n         match ast_lit_kind {\n+            // FIXME: these should have actual values filled in, but unsure on perf impact\n             LiteralKind::IntNumber(lit) => {\n                 if let builtin @ Some(_) = lit.suffix().and_then(BuiltinFloat::from_suffix) {\n                     return Literal::Float(Default::default(), builtin);\n                 } else if let builtin @ Some(_) =\n                     lit.suffix().and_then(|it| BuiltinInt::from_suffix(&it))\n                 {\n-                    Literal::Int(Default::default(), builtin)\n+                    Literal::Int(lit.value().unwrap_or(0) as i128, builtin)\n                 } else {\n                     let builtin = lit.suffix().and_then(|it| BuiltinUint::from_suffix(&it));\n-                    Literal::Uint(Default::default(), builtin)\n+                    Literal::Uint(lit.value().unwrap_or(0), builtin)\n                 }\n             }\n             LiteralKind::FloatNumber(lit) => {"}, {"sha": "2ba619d23411191c2358a2928b19a622ac7c8df8", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e666589e63fd4de16baa5f1ebda4ab07aa5a5437/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e666589e63fd4de16baa5f1ebda4ab07aa5a5437/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=e666589e63fd4de16baa5f1ebda4ab07aa5a5437", "patch": "@@ -43,8 +43,8 @@ pub enum Literal {\n     ByteString(Vec<u8>),\n     Char(char),\n     Bool(bool),\n-    Int(u64, Option<BuiltinInt>),\n-    Uint(u64, Option<BuiltinUint>),\n+    Int(i128, Option<BuiltinInt>),\n+    Uint(u128, Option<BuiltinUint>),\n     Float(u64, Option<BuiltinFloat>), // FIXME: f64 is not Eq\n }\n "}, {"sha": "0b36ac861c717ac3230a92f7c708c06a8ae5c4a2", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e666589e63fd4de16baa5f1ebda4ab07aa5a5437/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e666589e63fd4de16baa5f1ebda4ab07aa5a5437/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=e666589e63fd4de16baa5f1ebda4ab07aa5a5437", "patch": "@@ -1,10 +1,14 @@\n //! Type inference for expressions.\n \n-use std::iter::{repeat, repeat_with};\n+use std::{\n+    convert::TryInto,\n+    iter::{repeat, repeat_with},\n+};\n use std::{mem, sync::Arc};\n \n use chalk_ir::{cast::Cast, fold::Shift, ConstData, Mutability, TyVariableKind};\n use hir_def::{\n+    builtin_type::BuiltinUint,\n     expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     path::{GenericArg, GenericArgs},\n     resolver::resolver_for_expr,\n@@ -724,7 +728,7 @@ impl<'a> InferenceContext<'a> {\n                         for expr in items.iter() {\n                             self.infer_expr_coerce(*expr, &Expectation::has_type(elem_ty.clone()));\n                         }\n-                        Some(items.len())\n+                        Some(items.len() as u64)\n                     }\n                     Array::Repeat { initializer, repeat } => {\n                         self.infer_expr_coerce(\n@@ -737,17 +741,23 @@ impl<'a> InferenceContext<'a> {\n                                 TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(&Interner),\n                             ),\n                         );\n-                        // FIXME: we don't know the length here because hir Exprs don't actually\n-                        // get the value out of the AST, even though it is there.\n-                        None\n+\n+                        let repeat_expr = &self.body.exprs[*repeat];\n+                        match repeat_expr {\n+                            Expr::Literal(Literal::Uint(v, None))\n+                            | Expr::Literal(Literal::Uint(v, Some(BuiltinUint::Usize))) => {\n+                                (*v).try_into().ok()\n+                            }\n+                            _ => None,\n+                        }\n                     }\n                 };\n \n                 let cd = ConstData {\n                     ty: TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(&Interner),\n                     value: ConstValue::Concrete(chalk_ir::ConcreteConst {\n                         interned: len\n-                            .map(|len| ConstScalar::Usize(len as u64))\n+                            .map(|len| ConstScalar::Usize(len))\n                             .unwrap_or(ConstScalar::Unknown),\n                     }),\n                 };"}, {"sha": "19047106912aa7f6c7f2db0cbb25d43631d35058", "filename": "crates/hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e666589e63fd4de16baa5f1ebda4ab07aa5a5437/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e666589e63fd4de16baa5f1ebda4ab07aa5a5437/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=e666589e63fd4de16baa5f1ebda4ab07aa5a5437", "patch": "@@ -93,7 +93,7 @@ fn coerce_places() {\n             340..345 '[arr]': [&[u8]; 1]\n             341..344 'arr': &[u8; 1]\n             355..356 'f': [&[u8]; 2]\n-            370..378 '[arr; 2]': [&[u8]; _]\n+            370..378 '[arr; 2]': [&[u8]; 2]\n             371..374 'arr': &[u8; 1]\n             376..377 '2': usize\n             388..389 'g': (&[u8], &[u8])"}]}