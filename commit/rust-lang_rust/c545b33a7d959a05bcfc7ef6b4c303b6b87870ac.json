{"sha": "c545b33a7d959a05bcfc7ef6b4c303b6b87870ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NDViMzNhN2Q5NTlhMDViY2ZjN2VmNmI0YzMwM2I2Yjg3ODcwYWM=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-11-16T16:43:09Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-11-16T16:47:56Z"}, "message": "Make `min_value()` and `max_value()` const functions", "tree": {"sha": "cdbf1bae0bd025d5927a57383e40bdb89ee03c90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdbf1bae0bd025d5927a57383e40bdb89ee03c90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c545b33a7d959a05bcfc7ef6b4c303b6b87870ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c545b33a7d959a05bcfc7ef6b4c303b6b87870ac", "html_url": "https://github.com/rust-lang/rust/commit/c545b33a7d959a05bcfc7ef6b4c303b6b87870ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c545b33a7d959a05bcfc7ef6b4c303b6b87870ac/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c8a3e8b6a3200bb01d0ea60e4686a1ecfcb907", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c8a3e8b6a3200bb01d0ea60e4686a1ecfcb907", "html_url": "https://github.com/rust-lang/rust/commit/57c8a3e8b6a3200bb01d0ea60e4686a1ecfcb907"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "c0f65fea7db389a713f011a791fe5d24fc88ca18", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c545b33a7d959a05bcfc7ef6b4c303b6b87870ac/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c545b33a7d959a05bcfc7ef6b4c303b6b87870ac/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c545b33a7d959a05bcfc7ef6b4c303b6b87870ac", "patch": "@@ -124,15 +124,15 @@ macro_rules! int_impl {\n         /// Returns the smallest value that can be represented by this integer type.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        pub fn min_value() -> Self {\n+        pub const fn min_value() -> Self {\n             (-1 as Self) << ($BITS - 1)\n         }\n \n         /// Returns the largest value that can be represented by this integer type.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        pub fn max_value() -> Self {\n-            let min = Self::min_value(); !min\n+        pub const fn max_value() -> Self {\n+            !Self::min_value()\n         }\n \n         /// Converts a string slice in a given base to an integer.\n@@ -891,12 +891,12 @@ macro_rules! uint_impl {\n         /// Returns the smallest value that can be represented by this integer type.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        pub fn min_value() -> Self { 0 }\n+        pub const fn min_value() -> Self { 0 }\n \n         /// Returns the largest value that can be represented by this integer type.\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n-        pub fn max_value() -> Self { !0 }\n+        pub const fn max_value() -> Self { !0 }\n \n         /// Converts a string slice in a given base to an integer.\n         ///"}]}