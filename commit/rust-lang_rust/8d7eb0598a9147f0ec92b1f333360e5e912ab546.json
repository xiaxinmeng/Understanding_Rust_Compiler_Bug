{"sha": "8d7eb0598a9147f0ec92b1f333360e5e912ab546", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkN2ViMDU5OGE5MTQ3ZjBlYzkyYjFmMzMzMzYwZTVlOTEyYWI1NDY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-25T17:16:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-25T17:24:29Z"}, "message": "rustdoc: Correctly handle local renamings\n\nPreviously a `pub use` would not rename the destination in rustdoc, it would\nalways use the destination ident instead of the renamed ident.", "tree": {"sha": "00fac9cb2312d584689a6f99afab29692c6278cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00fac9cb2312d584689a6f99afab29692c6278cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d7eb0598a9147f0ec92b1f333360e5e912ab546", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d7eb0598a9147f0ec92b1f333360e5e912ab546", "html_url": "https://github.com/rust-lang/rust/commit/8d7eb0598a9147f0ec92b1f333360e5e912ab546", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d7eb0598a9147f0ec92b1f333360e5e912ab546/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "431622e1e202467e0ba61cdf2df7ceb501926547", "url": "https://api.github.com/repos/rust-lang/rust/commits/431622e1e202467e0ba61cdf2df7ceb501926547", "html_url": "https://github.com/rust-lang/rust/commit/431622e1e202467e0ba61cdf2df7ceb501926547"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "1e8964dd9db5eb5705acf8d5b5add947ca5732cf", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8d7eb0598a9147f0ec92b1f333360e5e912ab546/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7eb0598a9147f0ec92b1f333360e5e912ab546/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=8d7eb0598a9147f0ec92b1f333360e5e912ab546", "patch": "@@ -39,7 +39,8 @@ use super::Clean;\n ///\n /// The returned value is `None` if the `id` could not be inlined, and `Some`\n /// of a vector of items if it was successfully expanded.\n-pub fn try_inline(id: ast::NodeId) -> Option<Vec<clean::Item>> {\n+pub fn try_inline(id: ast::NodeId, into: Option<ast::Ident>)\n+                  -> Option<Vec<clean::Item>> {\n     let cx = ::ctxtkey.get().unwrap();\n     let tcx = match cx.maybe_typed {\n         core::Typed(ref tycx) => tycx,\n@@ -51,7 +52,17 @@ pub fn try_inline(id: ast::NodeId) -> Option<Vec<clean::Item>> {\n     };\n     let did = def.def_id();\n     if ast_util::is_local(did) { return None }\n-    try_inline_def(&**cx, tcx, def)\n+    try_inline_def(&**cx, tcx, def).map(|vec| {\n+        vec.move_iter().map(|mut item| {\n+            match into {\n+                Some(into) if item.name.is_some() => {\n+                    item.name = Some(into.clean());\n+                }\n+                _ => {}\n+            }\n+            item\n+        }).collect()\n+    })\n }\n \n fn try_inline_def(cx: &core::DocContext,"}, {"sha": "953b736f38b435375febc999fd4775ec1a5dadb8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d7eb0598a9147f0ec92b1f333360e5e912ab546/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7eb0598a9147f0ec92b1f333360e5e912ab546/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=8d7eb0598a9147f0ec92b1f333360e5e912ab546", "patch": "@@ -1763,7 +1763,7 @@ impl Clean<Vec<Item>> for ast::ViewItem {\n                         // to keep any non-inlineable reexports so they can be\n                         // listed in the documentation.\n                         let remaining = list.iter().filter(|path| {\n-                            match inline::try_inline(path.node.id()) {\n+                            match inline::try_inline(path.node.id(), None) {\n                                 Some(items) => {\n                                     ret.extend(items.move_iter()); false\n                                 }\n@@ -1778,8 +1778,8 @@ impl Clean<Vec<Item>> for ast::ViewItem {\n                             ret.push(convert(&ast::ViewItemUse(box(GC) path)));\n                         }\n                     }\n-                    ast::ViewPathSimple(_, _, id) => {\n-                        match inline::try_inline(id) {\n+                    ast::ViewPathSimple(ident, _, id) => {\n+                        match inline::try_inline(id, Some(ident)) {\n                             Some(items) => ret.extend(items.move_iter()),\n                             None => ret.push(convert(&self.node)),\n                         }"}, {"sha": "d28069da6ba06e5acaf86e4f1a9e7d6e38d096f1", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8d7eb0598a9147f0ec92b1f333360e5e912ab546/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d7eb0598a9147f0ec92b1f333360e5e912ab546/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=8d7eb0598a9147f0ec92b1f333360e5e912ab546", "patch": "@@ -192,13 +192,16 @@ impl<'a> RustdocVisitor<'a> {\n                        om: &mut Module,\n                        please_inline: bool) -> Option<Gc<ast::ViewPath>> {\n         match path.node {\n-            ast::ViewPathSimple(_, _, id) => {\n-                if self.resolve_id(id, false, om, please_inline) { return None }\n+            ast::ViewPathSimple(dst, _, id) => {\n+                if self.resolve_id(id, Some(dst), false, om, please_inline) {\n+                    return None\n+                }\n             }\n             ast::ViewPathList(ref p, ref paths, ref b) => {\n                 let mut mine = Vec::new();\n                 for path in paths.iter() {\n-                    if !self.resolve_id(path.node.id(), false, om, please_inline) {\n+                    if !self.resolve_id(path.node.id(), None, false, om,\n+                                        please_inline) {\n                         mine.push(path.clone());\n                     }\n                 }\n@@ -212,14 +215,16 @@ impl<'a> RustdocVisitor<'a> {\n \n             // these are feature gated anyway\n             ast::ViewPathGlob(_, id) => {\n-                if self.resolve_id(id, true, om, please_inline) { return None }\n+                if self.resolve_id(id, None, true, om, please_inline) {\n+                    return None\n+                }\n             }\n         }\n         return Some(path);\n     }\n \n-    fn resolve_id(&mut self, id: ast::NodeId, glob: bool,\n-                  om: &mut Module, please_inline: bool) -> bool {\n+    fn resolve_id(&mut self, id: ast::NodeId, renamed: Option<ast::Ident>,\n+                  glob: bool, om: &mut Module, please_inline: bool) -> bool {\n         let tcx = match self.cx.maybe_typed {\n             core::Typed(ref tcx) => tcx,\n             core::NotTyped(_) => return false\n@@ -235,6 +240,15 @@ impl<'a> RustdocVisitor<'a> {\n \n         match tcx.map.get(def.node) {\n             ast_map::NodeItem(it) => {\n+                let it = match renamed {\n+                    Some(ident) => {\n+                        box(GC) ast::Item {\n+                            ident: ident,\n+                            ..(*it).clone()\n+                        }\n+                    }\n+                    None => it,\n+                };\n                 if glob {\n                     match it.node {\n                         ast::ItemMod(ref m) => {"}]}