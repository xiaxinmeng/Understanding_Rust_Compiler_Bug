{"sha": "abae840f450c6f2b38f6ebf83cfcf1a7928138b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiYWU4NDBmNDUwYzZmMmIzOGY2ZWJmODNjZmNmMWE3OTI4MTM4Yjc=", "commit": {"author": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2015-02-06T08:51:38Z"}, "committer": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2015-02-06T09:02:15Z"}, "message": "rustdoc: Show non-Rust ABIs on methods\n\nFix #21621", "tree": {"sha": "8031c2a32b38e88c5c0d4768e8d433de15174fe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8031c2a32b38e88c5c0d4768e8d433de15174fe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abae840f450c6f2b38f6ebf83cfcf1a7928138b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abae840f450c6f2b38f6ebf83cfcf1a7928138b7", "html_url": "https://github.com/rust-lang/rust/commit/abae840f450c6f2b38f6ebf83cfcf1a7928138b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abae840f450c6f2b38f6ebf83cfcf1a7928138b7/comments", "author": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43b85035682f56a95d3ebbfae4cd6abfed0f3225", "url": "https://api.github.com/repos/rust-lang/rust/commits/43b85035682f56a95d3ebbfae4cd6abfed0f3225", "html_url": "https://github.com/rust-lang/rust/commit/43b85035682f56a95d3ebbfae4cd6abfed0f3225"}], "stats": {"total": 77, "additions": 70, "deletions": 7}, "files": [{"sha": "dfa5b01270efd3dfc79c9ecda7f62b1bc1b359d4", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/abae840f450c6f2b38f6ebf83cfcf1a7928138b7/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abae840f450c6f2b38f6ebf83cfcf1a7928138b7/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=abae840f450c6f2b38f6ebf83cfcf1a7928138b7", "patch": "@@ -306,13 +306,14 @@ fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n                 let mut item = method.clean(cx);\n                 item.inner = match item.inner.clone() {\n                     clean::TyMethodItem(clean::TyMethod {\n-                        unsafety, decl, self_, generics\n+                        unsafety, decl, self_, generics, abi\n                     }) => {\n                         clean::MethodItem(clean::Method {\n                             unsafety: unsafety,\n                             decl: decl,\n                             self_: self_,\n                             generics: generics,\n+                            abi: abi\n                         })\n                     }\n                     _ => panic!(\"not a tymethod\"),"}, {"sha": "c840a0cbbd8cf17f840dea2ad1e141681a8053ae", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/abae840f450c6f2b38f6ebf83cfcf1a7928138b7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abae840f450c6f2b38f6ebf83cfcf1a7928138b7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=abae840f450c6f2b38f6ebf83cfcf1a7928138b7", "patch": "@@ -27,6 +27,7 @@ pub use self::FunctionRetTy::*;\n pub use self::TraitMethod::*;\n \n use syntax;\n+use syntax::abi;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::ast_util::PostExpansionMethod;\n@@ -945,6 +946,7 @@ pub struct Method {\n     pub self_: SelfTy,\n     pub unsafety: ast::Unsafety,\n     pub decl: FnDecl,\n+    pub abi: abi::Abi\n }\n \n impl Clean<Item> for ast::Method {\n@@ -973,6 +975,7 @@ impl Clean<Item> for ast::Method {\n                 self_: self.pe_explicit_self().node.clean(cx),\n                 unsafety: self.pe_unsafety().clone(),\n                 decl: decl,\n+                abi: self.pe_abi()\n             }),\n         }\n     }\n@@ -984,6 +987,7 @@ pub struct TyMethod {\n     pub decl: FnDecl,\n     pub generics: Generics,\n     pub self_: SelfTy,\n+    pub abi: abi::Abi\n }\n \n impl Clean<Item> for ast::TypeMethod {\n@@ -1011,6 +1015,7 @@ impl Clean<Item> for ast::TypeMethod {\n                 decl: decl,\n                 self_: self.explicit_self.node.clean(cx),\n                 generics: self.generics.clean(cx),\n+                abi: self.abi\n             }),\n         }\n     }\n@@ -1301,6 +1306,7 @@ impl<'tcx> Clean<Item> for ty::Method<'tcx> {\n                 generics: (&self.generics, subst::FnSpace).clean(cx),\n                 self_: self_,\n                 decl: (self.def_id, &sig).clean(cx),\n+                abi: self.fty.abi\n             })\n         }\n     }"}, {"sha": "b30b251e8ba6f1aceb29a1d8051a2a7d74121778", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/abae840f450c6f2b38f6ebf83cfcf1a7928138b7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abae840f450c6f2b38f6ebf83cfcf1a7928138b7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=abae840f450c6f2b38f6ebf83cfcf1a7928138b7", "patch": "@@ -50,6 +50,7 @@ use externalfiles::ExternalHtml;\n \n use serialize::json;\n use serialize::json::ToJson;\n+use syntax::abi;\n use syntax::ast;\n use syntax::ast_util;\n use rustc::util::nodemap::NodeSet;\n@@ -1809,15 +1810,22 @@ fn assoc_type(w: &mut fmt::Formatter, it: &clean::Item,\n }\n \n fn render_method(w: &mut fmt::Formatter, meth: &clean::Item) -> fmt::Result {\n-    fn method(w: &mut fmt::Formatter, it: &clean::Item, unsafety: ast::Unsafety,\n-           g: &clean::Generics, selfty: &clean::SelfTy,\n-           d: &clean::FnDecl) -> fmt::Result {\n-        write!(w, \"{}fn <a href='#{ty}.{name}' class='fnname'>{name}</a>\\\n+    fn method(w: &mut fmt::Formatter, it: &clean::Item,\n+              unsafety: ast::Unsafety, abi: abi::Abi,\n+              g: &clean::Generics, selfty: &clean::SelfTy,\n+              d: &clean::FnDecl) -> fmt::Result {\n+        use syntax::abi::Abi;\n+\n+        write!(w, \"{}{}fn <a href='#{ty}.{name}' class='fnname'>{name}</a>\\\n                    {generics}{decl}{where_clause}\",\n                match unsafety {\n                    ast::Unsafety::Unsafe => \"unsafe \",\n                    _ => \"\",\n                },\n+               match abi {\n+                   Abi::Rust => String::new(),\n+                   a => format!(\"extern {} \", a.to_string())\n+               },\n                ty = shortty(it),\n                name = it.name.as_ref().unwrap(),\n                generics = *g,\n@@ -1826,10 +1834,10 @@ fn render_method(w: &mut fmt::Formatter, meth: &clean::Item) -> fmt::Result {\n     }\n     match meth.inner {\n         clean::TyMethodItem(ref m) => {\n-            method(w, meth, m.unsafety, &m.generics, &m.self_, &m.decl)\n+            method(w, meth, m.unsafety, m.abi, &m.generics, &m.self_, &m.decl)\n         }\n         clean::MethodItem(ref m) => {\n-            method(w, meth, m.unsafety, &m.generics, &m.self_, &m.decl)\n+            method(w, meth, m.unsafety, m.abi, &m.generics, &m.self_, &m.decl)\n         }\n         clean::AssociatedTypeItem(ref typ) => {\n             assoc_type(w, meth, typ)"}, {"sha": "c87684f59ea01057d9f46888e7d0e561ed598b67", "filename": "src/test/run-make/rustdoc-extern-method/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/abae840f450c6f2b38f6ebf83cfcf1a7928138b7/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/abae840f450c6f2b38f6ebf83cfcf1a7928138b7/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2FMakefile?ref=abae840f450c6f2b38f6ebf83cfcf1a7928138b7", "patch": "@@ -0,0 +1,8 @@\n+-include ../tools.mk\n+\n+all: foo.rs bar.rs\n+\t$(HOST_RPATH_ENV) $(RUSTC) foo.rs\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -L $(TMPDIR) -w html -o $(TMPDIR)/doc bar.rs\n+\t$(HTMLDOCCK) $(TMPDIR)/doc bar.rs\n+"}, {"sha": "672090c13a23376ef59adf3665d903d6c8b13893", "filename": "src/test/run-make/rustdoc-extern-method/bar.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/abae840f450c6f2b38f6ebf83cfcf1a7928138b7/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abae840f450c6f2b38f6ebf83cfcf1a7928138b7/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2Fbar.rs?ref=abae840f450c6f2b38f6ebf83cfcf1a7928138b7", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate foo;\n+\n+// @has bar/trait.Foo.html //pre \"pub trait Foo\"\n+// @has - '//*[@id=\"tymethod.foo\"]//code' 'extern \"rust-call\" fn foo'\n+// @has - '//*[@id=\"tymethod.foo_\"]//code' 'extern \"rust-call\" fn foo_'\n+pub use foo::Foo;\n+\n+// @has bar/trait.Bar.html //pre \"pub trait Bar\"\n+pub trait Bar {\n+    // @has - '//*[@id=\"tymethod.bar\"]//code' 'extern \"rust-call\" fn bar'\n+    extern \"rust-call\" fn bar(&self, _: ());\n+    // @has - '//*[@id=\"method.bar_\"]//code' 'extern \"rust-call\" fn bar_'\n+    extern \"rust-call\" fn bar_(&self, _: ()) { }\n+}"}, {"sha": "fc5f03e8bd36a4abb029c6328fff6c61c64800c6", "filename": "src/test/run-make/rustdoc-extern-method/foo.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/abae840f450c6f2b38f6ebf83cfcf1a7928138b7/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abae840f450c6f2b38f6ebf83cfcf1a7928138b7/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2Ffoo.rs?ref=abae840f450c6f2b38f6ebf83cfcf1a7928138b7", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+\n+pub trait Foo {\n+    extern \"rust-call\" fn foo(&self, _: ()) -> i32;\n+    extern \"rust-call\" fn foo_(&self, _: ()) -> i32 { 0 }\n+}"}]}