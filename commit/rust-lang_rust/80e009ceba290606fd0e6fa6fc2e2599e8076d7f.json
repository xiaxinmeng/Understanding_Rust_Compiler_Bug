{"sha": "80e009ceba290606fd0e6fa6fc2e2599e8076d7f", "node_id": "C_kwDOAAsO6NoAKDgwZTAwOWNlYmEyOTA2MDZmZDBlNmZhNmZjMmUyNTk5ZTgwNzZkN2Y", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-09-29T02:42:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-29T02:42:06Z"}, "message": "Rollup merge of #102416 - lcnr:specialization-fixme, r=compiler-errors\n\nremove FIXME, improve documentation\n\nr? types", "tree": {"sha": "11a1a4df9ca641ff3be627809a31b27de81910ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11a1a4df9ca641ff3be627809a31b27de81910ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80e009ceba290606fd0e6fa6fc2e2599e8076d7f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjNQX+CRBK7hj4Ov3rIwAAyb0IAJHuuxxmjo51FS/snPr0Sgkm\noenjkM0B0BjvVdT94QBGBVorJK5lp8Z03s9xXE4TRcrlMUDjheD5sqbhJWRHxv3p\nZl0rMTREaUdQmxXD85+rVaKPDQn1+7HmfYYPqEOIEG1ZzCajgOxO6r81eTh0nf9H\n5HApMYv092aIITm9XSF6grY+udUvJEEc7r3bwSqATQnJugF0oh0p9nMxtQLboBL/\namtMWq1cK9PEtKl9TQpa4QieQnZutPEvkHGAlIT+UFxTp2nURfqTT16H/1n+P0DQ\nl/TtOSS0uAjtIno1OL6/t+QDvyF5/8zfqGq8LTEGGx3uC/a6Kf8YgU8xW8+oP50=\n=SPde\n-----END PGP SIGNATURE-----\n", "payload": "tree 11a1a4df9ca641ff3be627809a31b27de81910ff\nparent 039e9e216061953b31710c1b0b900a90299cf1b5\nparent 9ccb85118203d914b349e506916fe2fe0c907e86\nauthor Yuki Okushi <jtitor@2k36.org> 1664419326 +0900\ncommitter GitHub <noreply@github.com> 1664419326 +0900\n\nRollup merge of #102416 - lcnr:specialization-fixme, r=compiler-errors\n\nremove FIXME, improve documentation\n\nr? types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80e009ceba290606fd0e6fa6fc2e2599e8076d7f", "html_url": "https://github.com/rust-lang/rust/commit/80e009ceba290606fd0e6fa6fc2e2599e8076d7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80e009ceba290606fd0e6fa6fc2e2599e8076d7f/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "039e9e216061953b31710c1b0b900a90299cf1b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/039e9e216061953b31710c1b0b900a90299cf1b5", "html_url": "https://github.com/rust-lang/rust/commit/039e9e216061953b31710c1b0b900a90299cf1b5"}, {"sha": "9ccb85118203d914b349e506916fe2fe0c907e86", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ccb85118203d914b349e506916fe2fe0c907e86", "html_url": "https://github.com/rust-lang/rust/commit/9ccb85118203d914b349e506916fe2fe0c907e86"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "0ed59223337a5951a20c99e90bc3a42dd8a896c0", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/80e009ceba290606fd0e6fa6fc2e2599e8076d7f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80e009ceba290606fd0e6fa6fc2e2599e8076d7f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=80e009ceba290606fd0e6fa6fc2e2599e8076d7f", "patch": "@@ -1737,12 +1737,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n             (&ImplCandidate(other_def), &ImplCandidate(victim_def)) => {\n                 // See if we can toss out `victim` based on specialization.\n-                // This requires us to know *for sure* that the `other` impl applies\n-                // i.e., `EvaluatedToOk`.\n+                // While this requires us to know *for sure* that the `other` impl applies\n+                // we still use modulo regions here.\n                 //\n-                // FIXME(@lcnr): Using `modulo_regions` here seems kind of scary\n-                // to me but is required for `std` to compile, so I didn't change it\n-                // for now.\n+                // This is fine as specialization currently assumes that specializing\n+                // impls have to be always applicable, meaning that the only allowed\n+                // region constraints may be constraints also present on the default impl.\n                 let tcx = self.tcx();\n                 if other.evaluation.must_apply_modulo_regions() {\n                     if tcx.specializes((other_def, victim_def)) {"}]}