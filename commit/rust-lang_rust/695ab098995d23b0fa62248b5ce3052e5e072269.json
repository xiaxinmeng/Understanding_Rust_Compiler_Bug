{"sha": "695ab098995d23b0fa62248b5ce3052e5e072269", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NWFiMDk4OTk1ZDIzYjBmYTYyMjQ4YjVjZTMwNTJlNWUwNzIyNjk=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-24T22:22:44Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-24T22:24:24Z"}, "message": "Change yield() and wait_event() to be MUST_CHECK and return the killed flag. (closes #2875)", "tree": {"sha": "c7324cde5232a91b211ffa1dc37032c09eabff98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7324cde5232a91b211ffa1dc37032c09eabff98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/695ab098995d23b0fa62248b5ce3052e5e072269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/695ab098995d23b0fa62248b5ce3052e5e072269", "html_url": "https://github.com/rust-lang/rust/commit/695ab098995d23b0fa62248b5ce3052e5e072269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/695ab098995d23b0fa62248b5ce3052e5e072269/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac9df5841c09ca645638922365a9de56ac529251", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac9df5841c09ca645638922365a9de56ac529251", "html_url": "https://github.com/rust-lang/rust/commit/ac9df5841c09ca645638922365a9de56ac529251"}], "stats": {"total": 64, "additions": 38, "deletions": 26}, "files": [{"sha": "44e54fb0fd4b1abb3c31a9517e3f045abb4a9b16", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/695ab098995d23b0fa62248b5ce3052e5e072269/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695ab098995d23b0fa62248b5ce3052e5e072269/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=695ab098995d23b0fa62248b5ce3052e5e072269", "patch": "@@ -69,7 +69,7 @@ extern mod rustrt {\n     #[rust_stack]\n     fn task_clear_event_reject(task: *rust_task);\n \n-    fn task_wait_event(this: *rust_task, killed: &mut bool) -> *libc::c_void;\n+    fn task_wait_event(this: *rust_task, killed: &mut *libc::c_void) -> bool;\n     fn task_signal_event(target: *rust_task, event: *libc::c_void);\n }\n \n@@ -80,13 +80,13 @@ unsafe fn uniquify<T>(x: *T) -> ~T {\n }\n \n fn wait_event(this: *rust_task) -> *libc::c_void {\n-    let mut killed = false;\n+    let mut event = ptr::null();\n \n-    let res = rustrt::task_wait_event(this, &mut killed);\n+    let killed = rustrt::task_wait_event(this, &mut event);\n     if killed && !task::failing() {\n         fail ~\"killed\"\n     }\n-    res\n+    event\n }\n \n fn swap_state_acq(&dst: state, src: state) -> state {"}, {"sha": "8af62280656c7c8d19e64b7dc9a6721d2c4f67c6", "filename": "src/libcore/task.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/695ab098995d23b0fa62248b5ce3052e5e072269/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695ab098995d23b0fa62248b5ce3052e5e072269/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=695ab098995d23b0fa62248b5ce3052e5e072269", "patch": "@@ -515,8 +515,7 @@ fn yield() {\n     //! Yield control to the task scheduler\n \n     let task_ = rustrt::rust_get_task();\n-    let mut killed = false;\n-    rustrt::rust_task_yield(task_, killed);\n+    let killed = rustrt::rust_task_yield(task_);\n     if killed && !failing() {\n         fail ~\"killed\";\n     }\n@@ -1104,7 +1103,7 @@ unsafe fn local_data_modify<T: owned>(\n \n extern mod rustrt {\n     #[rust_stack]\n-    fn rust_task_yield(task: *rust_task, &killed: bool);\n+    fn rust_task_yield(task: *rust_task) -> bool;\n \n     fn rust_get_sched_id() -> sched_id;\n     fn rust_new_sched(num_threads: libc::uintptr_t) -> sched_id;"}, {"sha": "f80e2e822c0de6e65b20961a78d27929bf49f0cc", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/695ab098995d23b0fa62248b5ce3052e5e072269/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/695ab098995d23b0fa62248b5ce3052e5e072269/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=695ab098995d23b0fa62248b5ce3052e5e072269", "patch": "@@ -722,9 +722,9 @@ rust_port_id_send(rust_port_id target_port_id, void *sptr) {\n \n // This is called by an intrinsic on the Rust stack and must run\n // entirely in the red zone. Do not call on the C stack.\n-extern \"C\" CDECL void\n+extern \"C\" CDECL MUST_CHECK bool\n rust_task_yield(rust_task *task, bool *killed) {\n-    task->yield(killed);\n+    return task->yield();\n }\n \n extern \"C\" CDECL void\n@@ -920,8 +920,8 @@ rust_wait_cond_lock(rust_cond_lock *lock) {\n     lock->waiting = task;\n     task->block(lock, \"waiting for signal\");\n     lock->lock.unlock();\n-    bool killed = false;\n-    task->yield(&killed);\n+    bool killed = task->yield();\n+    assert(!killed && \"unimplemented\");\n     lock->lock.lock();\n }\n \n@@ -960,12 +960,12 @@ task_clear_event_reject(rust_task *task) {\n \n // Waits on an event, returning the pointer to the event that unblocked this\n // task.\n-extern \"C\" void *\n-task_wait_event(rust_task *task, bool *killed) {\n-    // FIXME #2890: we should assert that the passed in task is the currently\n+extern \"C\" MUST_CHECK bool\n+task_wait_event(rust_task *task, void **result) {\n+    // Maybe (if not too slow) assert that the passed in task is the currently\n     // running task. We wouldn't want to wait some other task.\n \n-    return task->wait_event(killed);\n+    return task->wait_event(result);\n }\n \n extern \"C\" void"}, {"sha": "2d69edebd0e75815e1564760c5123460bed5cb21", "filename": "src/rt/rust_globals.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695ab098995d23b0fa62248b5ce3052e5e072269/src%2Frt%2Frust_globals.h", "raw_url": "https://github.com/rust-lang/rust/raw/695ab098995d23b0fa62248b5ce3052e5e072269/src%2Frt%2Frust_globals.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_globals.h?ref=695ab098995d23b0fa62248b5ce3052e5e072269", "patch": "@@ -85,6 +85,8 @@ extern \"C\" int check_claims;\n         }                                                           \\\n     }\n \n+#define MUST_CHECK __attribute__((warn_unused_result))\n+\n #define PTR \"0x%\" PRIxPTR\n \n // This accounts for logging buffers."}, {"sha": "e7a18e904617b9042a2612b88bb55c22923ad801", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/695ab098995d23b0fa62248b5ce3052e5e072269/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/695ab098995d23b0fa62248b5ce3052e5e072269/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=695ab098995d23b0fa62248b5ce3052e5e072269", "patch": "@@ -242,26 +242,30 @@ void rust_task_yield_fail(rust_task *task) {\n }\n \n // Only run this on the rust stack\n-void\n-rust_task::yield(bool *killed) {\n+MUST_CHECK bool rust_task::yield() {\n+    bool killed = false;\n+\n     if (disallow_yield > 0) {\n         call_on_c_stack(this, (void *)rust_task_yield_fail);\n     }\n-    // FIXME (#2875): clean this up\n+\n+    // This check is largely superfluous; it's the one after the context swap\n+    // that really matters. This one allows us to assert a useful invariant.\n     if (must_fail_from_being_killed()) {\n         {\n             scoped_lock with(lifecycle_lock);\n             assert(!(state == task_state_blocked));\n         }\n-        *killed = true;\n+        killed = true;\n     }\n \n     // Return to the scheduler.\n     ctx.next->swap(ctx);\n \n     if (must_fail_from_being_killed()) {\n-        *killed = true;\n+        killed = true;\n     }\n+    return killed;\n }\n \n void\n@@ -687,19 +691,24 @@ void rust_task::allow_yield() {\n     disallow_yield--;\n }\n \n-void *\n-rust_task::wait_event(bool *killed) {\n+MUST_CHECK bool rust_task::wait_event(void **result) {\n+    bool killed = false;\n     scoped_lock with(lifecycle_lock);\n \n     if(!event_reject) {\n         block_inner(&event_cond, \"waiting on event\");\n         lifecycle_lock.unlock();\n-        yield(killed);\n+        killed = yield();\n         lifecycle_lock.lock();\n+    } else if (must_fail_from_being_killed_inner()) {\n+        // If the deschedule was rejected, yield won't do our killed check for\n+        // us. For thoroughness, do it here. FIXME (#524)\n+        killed = true;\n     }\n \n     event_reject = false;\n-    return event;\n+    *result = event;\n+    return killed;\n }\n \n void"}, {"sha": "8df119565f015ceb533aa8887ba895516e4b5c1a", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/695ab098995d23b0fa62248b5ce3052e5e072269/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/695ab098995d23b0fa62248b5ce3052e5e072269/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=695ab098995d23b0fa62248b5ce3052e5e072269", "patch": "@@ -259,7 +259,8 @@ rust_task : public kernel_owned<rust_task>\n     void backtrace();\n \n     // Yields control to the scheduler. Called from the Rust stack\n-    void yield(bool *killed);\n+    // Returns TRUE if the task was killed and needs to fail.\n+    MUST_CHECK bool yield();\n \n     // Fail this task (assuming caller-on-stack is different task).\n     void kill();\n@@ -311,7 +312,8 @@ rust_task : public kernel_owned<rust_task>\n         this->event_reject = false;\n     }\n \n-    void *wait_event(bool *killed);\n+    // Returns TRUE if the task was killed and needs to fail.\n+    MUST_CHECK bool wait_event(void **result);\n     void signal_event(void *event);\n \n     void cleanup_after_turn();"}]}