{"sha": "bb74f97445f04d68e42e7e308a109f78a2d2b0f7", "node_id": "C_kwDOAAsO6NoAKGJiNzRmOTc0NDVmMDRkNjhlNDJlN2UzMDhhMTA5Zjc4YTJkMmIwZjc", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-08-13T10:58:17Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-08-13T10:58:17Z"}, "message": "address review comments, add tracking issue", "tree": {"sha": "81558d507c9e9a3ff201251aa10c363927ee48fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81558d507c9e9a3ff201251aa10c363927ee48fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb74f97445f04d68e42e7e308a109f78a2d2b0f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb74f97445f04d68e42e7e308a109f78a2d2b0f7", "html_url": "https://github.com/rust-lang/rust/commit/bb74f97445f04d68e42e7e308a109f78a2d2b0f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb74f97445f04d68e42e7e308a109f78a2d2b0f7/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46396e847d56037cbbf31dfccccbc0b45332af74", "url": "https://api.github.com/repos/rust-lang/rust/commits/46396e847d56037cbbf31dfccccbc0b45332af74", "html_url": "https://github.com/rust-lang/rust/commit/46396e847d56037cbbf31dfccccbc0b45332af74"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "f36dfbf3009d56d808aeb115c8fc47be9130b48d", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bb74f97445f04d68e42e7e308a109f78a2d2b0f7/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb74f97445f04d68e42e7e308a109f78a2d2b0f7/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=bb74f97445f04d68e42e7e308a109f78a2d2b0f7", "patch": "@@ -1773,9 +1773,10 @@ impl<T, A: Allocator> Vec<T, A> {\n         }\n     }\n \n-    /// Appends an element if there is sufficient spare capacity, otherwise the element is returned.\n+    /// Appends an element if there is sufficient spare capacity, otherwise an error is returned\n+    /// with the element.\n     ///\n-    /// Unlike [`push`] method will not reallocate when there's insufficient capacity.\n+    /// Unlike [`push`] this method will not reallocate when there's insufficient capacity.\n     /// The caller should use [`reserve`] or [`try_reserve`] to ensure that there is enough capacity.\n     ///\n     /// [`push`]: Vec::push\n@@ -1784,13 +1785,13 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// # Examples\n     ///\n-    /// A manual, panic-free alternative to FromIterator\n+    /// A manual, panic-free alternative to [`FromIterator`]:\n     ///\n     /// ```\n-    /// #![feature(vec_push_within_capacity, try_reserve)]\n+    /// #![feature(vec_push_within_capacity)]\n     ///\n     /// use std::collections::TryReserveError;\n-    /// fn from_iter<T>(iter: impl Iterator<Item=T>) -> Result<Vec<T>, TryReserveError> {\n+    /// fn from_iter_fallible<T>(iter: impl Iterator<Item=T>) -> Result<Vec<T>, TryReserveError> {\n     ///     let mut vec = Vec::new();\n     ///     for value in iter {\n     ///         if let Err(value) = vec.push_within_capacity(value) {\n@@ -1801,10 +1802,10 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///     }\n     ///     Ok(vec)\n     /// }\n-    /// # from_iter(0..100).expect(\"please insert more memory\");\n+    /// assert_eq!(from_iter_fallible(0..100), Ok(Vec::from_iter(0..100)));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"vec_push_within_capacity\", issue = \"none\")]\n+    #[unstable(feature = \"vec_push_within_capacity\", issue = \"100486\")]\n     pub fn push_within_capacity(&mut self, value: T) -> Result<(), T> {\n         if self.len == self.buf.capacity() {\n             return Err(value);"}]}