{"sha": "6efaef61899f6551914156f69809aa7d5854399d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZmFlZjYxODk5ZjY1NTE5MTQxNTZmNjk4MDlhYTdkNTg1NDM5OWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-31T14:30:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-31T14:30:17Z"}, "message": "Auto merge of #57220 - quark-zju:mcount, r=estebank\n\nAdd `-Z instrument-mcount`\n\nThis flag inserts `mcount` function call to the beginning of every function\nafter inline processing. So tracing tools like uftrace [1] (or ftrace for\nLinux kernel modules) have a chance to examine function calls.\n\nIt is similar to the `-pg` flag provided by gcc or clang, but without\ngenerating a `__gmon_start__` function for executables. If a program\nruns without being traced, no `gmon.out` will be written to disk.\n\nUnder the hood, it simply adds `\"instrument-function-entry-inlined\"=\"mcount\"`\nattribute to every function. The `post-inline-ee-instrument` LLVM pass does\nthe actual job.\n\n[1]: https://github.com/namhyung/uftrace", "tree": {"sha": "d6e75566a32706aa1ce1d777fc8081af98698673", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6e75566a32706aa1ce1d777fc8081af98698673"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6efaef61899f6551914156f69809aa7d5854399d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6efaef61899f6551914156f69809aa7d5854399d", "html_url": "https://github.com/rust-lang/rust/commit/6efaef61899f6551914156f69809aa7d5854399d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6efaef61899f6551914156f69809aa7d5854399d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "433ef826f001652f13ecff3697c2233fbe1ce4e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/433ef826f001652f13ecff3697c2233fbe1ce4e2", "html_url": "https://github.com/rust-lang/rust/commit/433ef826f001652f13ecff3697c2233fbe1ce4e2"}, {"sha": "31a5066e0b5f0e7e79b6cc04ae09166de0352c63", "url": "https://api.github.com/repos/rust-lang/rust/commits/31a5066e0b5f0e7e79b6cc04ae09166de0352c63", "html_url": "https://github.com/rust-lang/rust/commit/31a5066e0b5f0e7e79b6cc04ae09166de0352c63"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "33409f9b4a74fa34aa3026637cfaa30ce8870130", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6efaef61899f6551914156f69809aa7d5854399d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6efaef61899f6551914156f69809aa7d5854399d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=6efaef61899f6551914156f69809aa7d5854399d", "patch": "@@ -1227,6 +1227,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"verify incr. comp. hashes of green query instances\"),\n     incremental_ignore_spans: bool = (false, parse_bool, [UNTRACKED],\n         \"ignore spans during ICH computation -- used for testing\"),\n+    instrument_mcount: bool = (false, parse_bool, [TRACKED],\n+        \"insert function instrument code for mcount-based tracing\"),\n     dump_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv)\"),\n     query_dep_graph: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "5c977d5969e16e38a9a3e9df0de3d3aef60fa65e", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6efaef61899f6551914156f69809aa7d5854399d/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6efaef61899f6551914156f69809aa7d5854399d/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=6efaef61899f6551914156f69809aa7d5854399d", "patch": "@@ -503,6 +503,9 @@ impl Session {\n     pub fn profile_queries_and_keys(&self) -> bool {\n         self.opts.debugging_opts.profile_queries_and_keys\n     }\n+    pub fn instrument_mcount(&self) -> bool {\n+        self.opts.debugging_opts.instrument_mcount\n+    }\n     pub fn count_llvm_insns(&self) -> bool {\n         self.opts.debugging_opts.count_llvm_insns\n     }\n@@ -667,7 +670,11 @@ impl Session {\n     }\n \n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n-        if let Some(x) = self.opts.cg.force_frame_pointers {\n+        // \"mcount\" function relies on stack pointer.\n+        // See https://sourceware.org/binutils/docs/gprof/Implementation.html\n+        if self.instrument_mcount() {\n+            true\n+        } else if let Some(x) = self.opts.cg.force_frame_pointers {\n             x\n         } else {\n             !self.target.target.options.eliminate_frame_pointer"}, {"sha": "226b03c99c0438dbea5d9a9c1de045f9fecbbd5c", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6efaef61899f6551914156f69809aa7d5854399d/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6efaef61899f6551914156f69809aa7d5854399d/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=6efaef61899f6551914156f69809aa7d5854399d", "patch": "@@ -78,6 +78,18 @@ pub fn set_frame_pointer_elimination(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value)\n     }\n }\n \n+/// Tell LLVM what instrument function to insert.\n+#[inline]\n+pub fn set_instrument_function(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n+    if cx.sess().instrument_mcount() {\n+        // Similar to `clang -pg` behavior. Handled by the\n+        // `post-inline-ee-instrument` LLVM pass.\n+        llvm::AddFunctionAttrStringValue(\n+            llfn, llvm::AttributePlace::Function,\n+            const_cstr!(\"instrument-function-entry-inlined\"), const_cstr!(\"mcount\"));\n+    }\n+}\n+\n pub fn set_probestack(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n     // Only use stack probes if the target specification indicates that we\n     // should be using stack probes\n@@ -174,6 +186,7 @@ pub fn from_fn_attrs(\n     }\n \n     set_frame_pointer_elimination(cx, llfn);\n+    set_instrument_function(cx, llfn);\n     set_probestack(cx, llfn);\n \n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::COLD) {"}]}