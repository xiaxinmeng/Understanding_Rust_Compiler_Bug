{"sha": "8c684563a59900d96a4fcadd41e5e92074c13df1", "node_id": "C_kwDOAAsO6NoAKDhjNjg0NTYzYTU5OTAwZDk2YTRmY2FkZDQxZTVlOTIwNzRjMTNkZjE", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-03-23T07:34:20Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-05T05:53:39Z"}, "message": "errors: introduce `DiagnosticMessage`\n\nIntroduce a `DiagnosticMessage` type that will enable diagnostic\nmessages to be simple strings or Fluent identifiers.\n`DiagnosticMessage` is now used in the implementation of the standard\n`DiagnosticBuilder` APIs.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "6ca30a8bac58d182007db189d32231d159013071", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ca30a8bac58d182007db189d32231d159013071"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c684563a59900d96a4fcadd41e5e92074c13df1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c684563a59900d96a4fcadd41e5e92074c13df1", "html_url": "https://github.com/rust-lang/rust/commit/8c684563a59900d96a4fcadd41e5e92074c13df1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c684563a59900d96a4fcadd41e5e92074c13df1/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a22cf2af0510b3ec4cbb19c3de11d3d8291349d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a22cf2af0510b3ec4cbb19c3de11d3d8291349d9", "html_url": "https://github.com/rust-lang/rust/commit/a22cf2af0510b3ec4cbb19c3de11d3d8291349d9"}], "stats": {"total": 122, "additions": 79, "deletions": 43}, "files": [{"sha": "8aa18b8e37ce2f060d895b4e1d51ee99ee7cec56", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=8c684563a59900d96a4fcadd41e5e92074c13df1", "patch": "@@ -1708,13 +1708,13 @@ impl SharedEmitter {\n impl Emitter for SharedEmitter {\n     fn emit_diagnostic(&mut self, diag: &rustc_errors::Diagnostic) {\n         drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {\n-            msg: diag.message(),\n+            msg: diag.message().to_string(),\n             code: diag.code.clone(),\n             lvl: diag.level(),\n         })));\n         for child in &diag.children {\n             drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {\n-                msg: child.message(),\n+                msg: child.message().to_string(),\n                 code: None,\n                 lvl: child.level,\n             })));"}, {"sha": "76c8396cf9179d58c9329c54d55eb077729cdb2b", "filename": "compiler/rustc_errors/src/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fannotate_snippet_emitter_writer.rs?ref=8c684563a59900d96a4fcadd41e5e92074c13df1", "patch": "@@ -41,7 +41,7 @@ impl Emitter for AnnotateSnippetEmitterWriter {\n \n         self.emit_messages_default(\n             &diag.level,\n-            diag.message(),\n+            diag.message().to_string(),\n             &diag.code,\n             &primary_span,\n             &children,"}, {"sha": "d31593a132bc88d8d334e2952aa8abe14c4e702c", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 48, "deletions": 19, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=8c684563a59900d96a4fcadd41e5e92074c13df1", "patch": "@@ -18,14 +18,42 @@ use std::hash::{Hash, Hasher};\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Encodable, Decodable)]\n pub struct SuggestionsDisabled;\n \n+/// Abstraction over a message in a diagnostic to support both translatable and non-translatable\n+/// diagnostic messages.\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Encodable, Decodable)]\n+pub enum DiagnosticMessage {\n+    /// Non-translatable diagnostic message.\n+    Str(String),\n+    /// Identifier for a Fluent message corresponding to the diagnostic message.\n+    FluentIdentifier(String),\n+}\n+\n+impl DiagnosticMessage {\n+    /// Convert `DiagnosticMessage` to a `&str`.\n+    pub fn as_str(&self) -> &str {\n+        match self {\n+            DiagnosticMessage::Str(msg) => msg,\n+            DiagnosticMessage::FluentIdentifier(..) => unimplemented!(),\n+        }\n+    }\n+\n+    /// Convert `DiagnosticMessage` to an owned `String`.\n+    pub fn to_string(self) -> String {\n+        match self {\n+            DiagnosticMessage::Str(msg) => msg,\n+            DiagnosticMessage::FluentIdentifier(..) => unimplemented!(),\n+        }\n+    }\n+}\n+\n #[must_use]\n #[derive(Clone, Debug, Encodable, Decodable)]\n pub struct Diagnostic {\n     // NOTE(eddyb) this is private to disallow arbitrary after-the-fact changes,\n     // outside of what methods in this crate themselves allow.\n     crate level: Level,\n \n-    pub message: Vec<(String, Style)>,\n+    pub message: Vec<(DiagnosticMessage, Style)>,\n     pub code: Option<DiagnosticId>,\n     pub span: MultiSpan,\n     pub children: Vec<SubDiagnostic>,\n@@ -52,7 +80,7 @@ pub enum DiagnosticId {\n #[derive(Clone, Debug, PartialEq, Hash, Encodable, Decodable)]\n pub struct SubDiagnostic {\n     pub level: Level,\n-    pub message: Vec<(String, Style)>,\n+    pub message: Vec<(DiagnosticMessage, Style)>,\n     pub span: MultiSpan,\n     pub render_span: Option<MultiSpan>,\n }\n@@ -112,7 +140,7 @@ impl Diagnostic {\n     pub fn new_with_code(level: Level, code: Option<DiagnosticId>, message: &str) -> Self {\n         Diagnostic {\n             level,\n-            message: vec![(message.to_owned(), Style::NoStyle)],\n+            message: vec![(DiagnosticMessage::Str(message.to_owned()), Style::NoStyle)],\n             code,\n             span: MultiSpan::new(),\n             children: vec![],\n@@ -465,7 +493,7 @@ impl Diagnostic {\n                     .map(|(span, snippet)| SubstitutionPart { snippet, span })\n                     .collect(),\n             }],\n-            msg: msg.to_owned(),\n+            msg: DiagnosticMessage::Str(msg.to_owned()),\n             style,\n             applicability,\n             tool_metadata: Default::default(),\n@@ -493,7 +521,7 @@ impl Diagnostic {\n                     .map(|(span, snippet)| SubstitutionPart { snippet, span })\n                     .collect(),\n             }],\n-            msg: msg.to_owned(),\n+            msg: DiagnosticMessage::Str(msg.to_owned()),\n             style: SuggestionStyle::CompletelyHidden,\n             applicability,\n             tool_metadata: Default::default(),\n@@ -548,7 +576,7 @@ impl Diagnostic {\n             substitutions: vec![Substitution {\n                 parts: vec![SubstitutionPart { snippet: suggestion, span: sp }],\n             }],\n-            msg: msg.to_owned(),\n+            msg: DiagnosticMessage::Str(msg.to_owned()),\n             style,\n             applicability,\n             tool_metadata: Default::default(),\n@@ -591,7 +619,7 @@ impl Diagnostic {\n             .collect();\n         self.push_suggestion(CodeSuggestion {\n             substitutions,\n-            msg: msg.to_owned(),\n+            msg: DiagnosticMessage::Str(msg.to_owned()),\n             style: SuggestionStyle::ShowCode,\n             applicability,\n             tool_metadata: Default::default(),\n@@ -616,7 +644,7 @@ impl Diagnostic {\n                         .collect(),\n                 })\n                 .collect(),\n-            msg: msg.to_owned(),\n+            msg: DiagnosticMessage::Str(msg.to_owned()),\n             style: SuggestionStyle::ShowCode,\n             applicability,\n             tool_metadata: Default::default(),\n@@ -698,7 +726,7 @@ impl Diagnostic {\n     ) {\n         self.push_suggestion(CodeSuggestion {\n             substitutions: vec![],\n-            msg: msg.to_owned(),\n+            msg: DiagnosticMessage::Str(msg.to_owned()),\n             style: SuggestionStyle::CompletelyHidden,\n             applicability,\n             tool_metadata: ToolMetadata::new(tool_metadata),\n@@ -733,15 +761,15 @@ impl Diagnostic {\n     }\n \n     pub fn set_primary_message<M: Into<String>>(&mut self, msg: M) -> &mut Self {\n-        self.message[0] = (msg.into(), Style::NoStyle);\n+        self.message[0] = (DiagnosticMessage::Str(msg.into()), Style::NoStyle);\n         self\n     }\n \n-    pub fn message(&self) -> String {\n-        self.message.iter().map(|i| i.0.as_str()).collect::<String>()\n+    pub fn message(&self) -> DiagnosticMessage {\n+        DiagnosticMessage::Str(self.message.iter().map(|i| i.0.as_str()).collect::<String>())\n     }\n \n-    pub fn styled_message(&self) -> &Vec<(String, Style)> {\n+    pub fn styled_message(&self) -> &Vec<(DiagnosticMessage, Style)> {\n         &self.message\n     }\n \n@@ -758,7 +786,7 @@ impl Diagnostic {\n     ) {\n         let sub = SubDiagnostic {\n             level,\n-            message: vec![(message.to_owned(), Style::NoStyle)],\n+            message: vec![(DiagnosticMessage::Str(message.to_owned()), Style::NoStyle)],\n             span,\n             render_span,\n         };\n@@ -770,10 +798,11 @@ impl Diagnostic {\n     fn sub_with_highlights(\n         &mut self,\n         level: Level,\n-        message: Vec<(String, Style)>,\n+        mut message: Vec<(String, Style)>,\n         span: MultiSpan,\n         render_span: Option<MultiSpan>,\n     ) {\n+        let message = message.drain(..).map(|m| (DiagnosticMessage::Str(m.0), m.1)).collect();\n         let sub = SubDiagnostic { level, message, span, render_span };\n         self.children.push(sub);\n     }\n@@ -783,7 +812,7 @@ impl Diagnostic {\n         &self,\n     ) -> (\n         &Level,\n-        &Vec<(String, Style)>,\n+        &Vec<(DiagnosticMessage, Style)>,\n         &Option<DiagnosticId>,\n         &MultiSpan,\n         &Result<Vec<CodeSuggestion>, SuggestionsDisabled>,\n@@ -816,11 +845,11 @@ impl PartialEq for Diagnostic {\n }\n \n impl SubDiagnostic {\n-    pub fn message(&self) -> String {\n-        self.message.iter().map(|i| i.0.as_str()).collect::<String>()\n+    pub fn message(&self) -> DiagnosticMessage {\n+        DiagnosticMessage::Str(self.message.iter().map(|i| i.0.as_str()).collect::<String>())\n     }\n \n-    pub fn styled_message(&self) -> &Vec<(String, Style)> {\n+    pub fn styled_message(&self) -> &Vec<(DiagnosticMessage, Style)> {\n         &self.message\n     }\n }"}, {"sha": "1f26b002f6a6552206e021dfb7a6d0ae0f9df123", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=8c684563a59900d96a4fcadd41e5e92074c13df1", "patch": "@@ -15,8 +15,8 @@ use rustc_span::{MultiSpan, SourceFile, Span};\n use crate::snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, Style, StyledString};\n use crate::styled_buffer::StyledBuffer;\n use crate::{\n-    CodeSuggestion, Diagnostic, DiagnosticId, Handler, Level, SubDiagnostic, SubstitutionHighlight,\n-    SuggestionStyle,\n+    CodeSuggestion, Diagnostic, DiagnosticId, DiagnosticMessage, Handler, Level, SubDiagnostic,\n+    SubstitutionHighlight, SuggestionStyle,\n };\n \n use rustc_lint_defs::pluralize;\n@@ -236,7 +236,7 @@ pub trait Emitter {\n                // don't display multipart suggestions as labels\n                sugg.substitutions[0].parts.len() == 1 &&\n                // don't display long messages as labels\n-               sugg.msg.split_whitespace().count() < 10 &&\n+               sugg.msg.as_str().split_whitespace().count() < 10 &&\n                // don't display multiline suggestions as labels\n                !sugg.substitutions[0].parts[0].snippet.contains('\\n') &&\n                ![\n@@ -252,12 +252,12 @@ pub trait Emitter {\n                 let msg = if substitution.is_empty() || sugg.style.hide_inline() {\n                     // This substitution is only removal OR we explicitly don't want to show the\n                     // code inline (`hide_inline`). Therefore, we don't show the substitution.\n-                    format!(\"help: {}\", sugg.msg)\n+                    format!(\"help: {}\", sugg.msg.as_str())\n                 } else {\n                     // Show the default suggestion text with the substitution\n                     format!(\n                         \"help: {}{}: `{}`\",\n-                        sugg.msg,\n+                        sugg.msg.as_str(),\n                         if self\n                             .source_map()\n                             .map(|sm| is_case_difference(\n@@ -333,7 +333,7 @@ pub trait Emitter {\n \n                 children.push(SubDiagnostic {\n                     level: Level::Note,\n-                    message: vec![(msg, Style::NoStyle)],\n+                    message: vec![(DiagnosticMessage::Str(msg), Style::NoStyle)],\n                     span: MultiSpan::new(),\n                     render_span: None,\n                 });\n@@ -1176,7 +1176,7 @@ impl EmitterWriter {\n     fn msg_to_buffer(\n         &self,\n         buffer: &mut StyledBuffer,\n-        msg: &[(String, Style)],\n+        msg: &[(DiagnosticMessage, Style)],\n         padding: usize,\n         label: &str,\n         override_style: Option<Style>,\n@@ -1229,6 +1229,7 @@ impl EmitterWriter {\n         //                very *weird* formats\n         //                see?\n         for &(ref text, ref style) in msg.iter() {\n+            let text = text.as_str();\n             let lines = text.split('\\n').collect::<Vec<_>>();\n             if lines.len() > 1 {\n                 for (i, line) in lines.iter().enumerate() {\n@@ -1247,7 +1248,7 @@ impl EmitterWriter {\n     fn emit_message_default(\n         &mut self,\n         msp: &MultiSpan,\n-        msg: &[(String, Style)],\n+        msg: &[(DiagnosticMessage, Style)],\n         code: &Option<DiagnosticId>,\n         level: &Level,\n         max_line_num_len: usize,\n@@ -1287,6 +1288,7 @@ impl EmitterWriter {\n                 label_width += 2;\n             }\n             for &(ref text, _) in msg.iter() {\n+                let text = text.as_str();\n                 // Account for newlines to align output to its label.\n                 for (line, text) in normalize_whitespace(text).lines().enumerate() {\n                     buffer.append(\n@@ -1852,7 +1854,7 @@ impl EmitterWriter {\n     fn emit_messages_default(\n         &mut self,\n         level: &Level,\n-        message: &[(String, Style)],\n+        message: &[(DiagnosticMessage, Style)],\n         code: &Option<DiagnosticId>,\n         span: &MultiSpan,\n         children: &[SubDiagnostic],"}, {"sha": "90f6df2d5712b88f41613b21cbd258e683a95963", "filename": "compiler/rustc_errors/src/json.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_errors%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fjson.rs?ref=8c684563a59900d96a4fcadd41e5e92074c13df1", "patch": "@@ -346,7 +346,7 @@ struct UnusedExterns<'a, 'b, 'c> {\n impl Diagnostic {\n     fn from_errors_diagnostic(diag: &crate::Diagnostic, je: &JsonEmitter) -> Diagnostic {\n         let sugg = diag.suggestions.iter().flatten().map(|sugg| Diagnostic {\n-            message: sugg.msg.clone(),\n+            message: sugg.msg.clone().to_string(),\n             code: None,\n             level: \"help\",\n             spans: DiagnosticSpan::from_suggestion(sugg, je),\n@@ -385,7 +385,7 @@ impl Diagnostic {\n         let output = String::from_utf8(output).unwrap();\n \n         Diagnostic {\n-            message: diag.message(),\n+            message: diag.message().to_string(),\n             code: DiagnosticCode::map_opt_string(diag.code.clone(), je),\n             level: diag.level.to_str(),\n             spans: DiagnosticSpan::from_multispan(&diag.span, je),\n@@ -402,7 +402,7 @@ impl Diagnostic {\n \n     fn from_sub_diagnostic(diag: &SubDiagnostic, je: &JsonEmitter) -> Diagnostic {\n         Diagnostic {\n-            message: diag.message(),\n+            message: diag.message().to_string(),\n             code: None,\n             level: diag.level.to_str(),\n             spans: diag"}, {"sha": "0f55ef7a9ec21524d6f770fa2965a8d7b90cf62a", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=8c684563a59900d96a4fcadd41e5e92074c13df1", "patch": "@@ -145,7 +145,7 @@ pub struct CodeSuggestion {\n     /// ]\n     /// ```\n     pub substitutions: Vec<Substitution>,\n-    pub msg: String,\n+    pub msg: DiagnosticMessage,\n     /// Visual representation of this suggestion.\n     pub style: SuggestionStyle,\n     /// Whether or not the suggestion is approximate\n@@ -400,7 +400,9 @@ impl fmt::Display for ExplicitBug {\n \n impl error::Error for ExplicitBug {}\n \n-pub use diagnostic::{Diagnostic, DiagnosticId, DiagnosticStyledString, SubDiagnostic};\n+pub use diagnostic::{\n+    Diagnostic, DiagnosticId, DiagnosticMessage, DiagnosticStyledString, SubDiagnostic,\n+};\n pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee};\n use std::backtrace::Backtrace;\n "}, {"sha": "2ed11204ef6f5713145a1f45f9b49b88d32f2cc2", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=8c684563a59900d96a4fcadd41e5e92074c13df1", "patch": "@@ -68,17 +68,18 @@ fn emit_frag_parse_err(\n     arm_span: Span,\n     kind: AstFragmentKind,\n ) {\n-    if parser.token == token::Eof && e.message().ends_with(\", found `<eof>`\") {\n+    // FIXME(davidtwco): avoid depending on the error message text\n+    if parser.token == token::Eof && e.message().as_str().ends_with(\", found `<eof>`\") {\n         if !e.span.is_dummy() {\n             // early end of macro arm (#52866)\n             e.replace_span_with(parser.sess.source_map().next_point(parser.token.span));\n         }\n         let msg = &e.message[0];\n         e.message[0] = (\n-            format!(\n+            rustc_errors::DiagnosticMessage::Str(format!(\n                 \"macro expansion ends with an incomplete expression: {}\",\n-                msg.0.replace(\", found `<eof>`\", \"\"),\n-            ),\n+                msg.0.as_str().replace(\", found `<eof>`\", \"\"),\n+            )),\n             msg.1,\n         );\n     }"}, {"sha": "fd4b00de39226fd4e85ac81e7ed6a03f00167606", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=8c684563a59900d96a4fcadd41e5e92074c13df1", "patch": "@@ -1010,7 +1010,8 @@ impl<'a> Parser<'a> {\n                 let current_qual_sp = self.prev_token.span;\n                 let current_qual_sp = current_qual_sp.to(sp_start);\n                 if let Ok(current_qual) = self.span_to_snippet(current_qual_sp) {\n-                    if err.message() == \"expected `{`, found keyword `unsafe`\" {\n+                    // FIXME(davidtwco): avoid depending on the error message text\n+                    if err.message().as_str() == \"expected `{`, found keyword `unsafe`\" {\n                         let invalid_qual_sp = self.token.uninterpolated_span();\n                         let invalid_qual = self.span_to_snippet(invalid_qual_sp).unwrap();\n "}, {"sha": "f3c975c8a2c485db6de74db851019fa957e092d5", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c684563a59900d96a4fcadd41e5e92074c13df1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=8c684563a59900d96a4fcadd41e5e92074c13df1", "patch": "@@ -780,7 +780,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     if has_custom_message {\n                         err.note(&msg);\n                     } else {\n-                        err.message = vec![(msg, Style::NoStyle)];\n+                        err.message =\n+                            vec![(rustc_errors::DiagnosticMessage::Str(msg), Style::NoStyle)];\n                     }\n                     if snippet.starts_with('&') {\n                         // This is already a literal borrow and the obligation is failing"}, {"sha": "636018dbb22828f6d5002b23c692b6871adb7f44", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c684563a59900d96a4fcadd41e5e92074c13df1/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c684563a59900d96a4fcadd41e5e92074c13df1/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=8c684563a59900d96a4fcadd41e5e92074c13df1", "patch": "@@ -176,7 +176,7 @@ struct BufferEmitter {\n impl Emitter for BufferEmitter {\n     fn emit_diagnostic(&mut self, diag: &Diagnostic) {\n         let mut buffer = self.buffer.borrow_mut();\n-        buffer.messages.push(format!(\"error from rustc: {}\", diag.message[0].0));\n+        buffer.messages.push(format!(\"error from rustc: {}\", diag.message[0].0.as_str()));\n         if diag.is_error() {\n             buffer.has_errors = true;\n         }"}]}