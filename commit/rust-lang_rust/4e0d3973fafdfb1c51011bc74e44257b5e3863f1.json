{"sha": "4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "node_id": "C_kwDOAAsO6NoAKDRlMGQzOTczZmFmZGZiMWM1MTAxMWJjNzRlNDQyNTdiNWUzODYzZjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-27T18:42:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-27T18:42:13Z"}, "message": "Auto merge of #90347 - matthiaskrgr:rollup-rp2ms7j, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #90239 (Consistent big O notation in map.rs)\n - #90267 (fix: inner attribute followed by outer attribute causing ICE)\n - #90288 (Add hint for people missing `TryFrom`, `TryInto`, `FromIterator` import pre-2021)\n - #90304 (Add regression test for #75961)\n - #90344 (Add tracking issue number to const_cstr_unchecked)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6a7fe3cc445869485a6ce5f05c91cab291708bf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a7fe3cc445869485a6ce5f05c91cab291708bf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "html_url": "https://github.com/rust-lang/rust/commit/4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd757b9e0622815be615addb3031770922b87874", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd757b9e0622815be615addb3031770922b87874", "html_url": "https://github.com/rust-lang/rust/commit/dd757b9e0622815be615addb3031770922b87874"}, {"sha": "623c3e144ef292f935e4d8603f7e512de6dc9d69", "url": "https://api.github.com/repos/rust-lang/rust/commits/623c3e144ef292f935e4d8603f7e512de6dc9d69", "html_url": "https://github.com/rust-lang/rust/commit/623c3e144ef292f935e4d8603f7e512de6dc9d69"}], "stats": {"total": 242, "additions": 227, "deletions": 15}, "files": [{"sha": "51cabb50cd3de7280a1ddfd8cff2caaeabb1e3c6", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "patch": "@@ -221,12 +221,6 @@ impl AttrAnnotatedTokenStream {\n                     for attr in &data.attrs {\n                         match attr.style {\n                             crate::AttrStyle::Outer => {\n-                                assert!(\n-                                    inner_attrs.len() == 0,\n-                                    \"Found outer attribute {:?} after inner attrs {:?}\",\n-                                    attr,\n-                                    inner_attrs\n-                                );\n                                 outer_attrs.push(attr);\n                             }\n                             crate::AttrStyle::Inner => {"}, {"sha": "ccfab263bd48ea4c56d8cec004c74ba1d64ba2cb", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "patch": "@@ -66,6 +66,8 @@ crate struct ImportSuggestion {\n     pub descr: &'static str,\n     pub path: Path,\n     pub accessible: bool,\n+    /// An extra note that should be issued if this item is suggested\n+    pub note: Option<String>,\n }\n \n /// Adjust the impl span so that just the `impl` keyword is taken by removing\n@@ -872,11 +874,38 @@ impl<'a> Resolver<'a> {\n                         }\n \n                         if candidates.iter().all(|v: &ImportSuggestion| v.did != did) {\n+                            // See if we're recommending TryFrom, TryInto, or FromIterator and add\n+                            // a note about editions\n+                            let note = if let Some(did) = did {\n+                                let requires_note = !did.is_local()\n+                                    && this.cstore().item_attrs(did, this.session).iter().any(\n+                                        |attr| {\n+                                            if attr.has_name(sym::rustc_diagnostic_item) {\n+                                                [sym::TryInto, sym::TryFrom, sym::FromIterator]\n+                                                    .map(|x| Some(x))\n+                                                    .contains(&attr.value_str())\n+                                            } else {\n+                                                false\n+                                            }\n+                                        },\n+                                    );\n+\n+                                requires_note.then(|| {\n+                                    format!(\n+                                        \"'{}' is included in the prelude starting in Edition 2021\",\n+                                        path_names_to_string(&path)\n+                                    )\n+                                })\n+                            } else {\n+                                None\n+                            };\n+\n                             candidates.push(ImportSuggestion {\n                                 did,\n                                 descr: res.descr(),\n                                 path,\n                                 accessible: child_accessible,\n+                                note,\n                             });\n                         }\n                     }\n@@ -1764,12 +1793,14 @@ crate fn show_candidates(\n         return;\n     }\n \n-    let mut accessible_path_strings: Vec<(String, &str, Option<DefId>)> = Vec::new();\n-    let mut inaccessible_path_strings: Vec<(String, &str, Option<DefId>)> = Vec::new();\n+    let mut accessible_path_strings: Vec<(String, &str, Option<DefId>, &Option<String>)> =\n+        Vec::new();\n+    let mut inaccessible_path_strings: Vec<(String, &str, Option<DefId>, &Option<String>)> =\n+        Vec::new();\n \n     candidates.iter().for_each(|c| {\n         (if c.accessible { &mut accessible_path_strings } else { &mut inaccessible_path_strings })\n-            .push((path_names_to_string(&c.path), c.descr, c.did))\n+            .push((path_names_to_string(&c.path), c.descr, c.did, &c.note))\n     });\n \n     // we want consistent results across executions, but candidates are produced\n@@ -1792,6 +1823,10 @@ crate fn show_candidates(\n         let instead = if instead { \" instead\" } else { \"\" };\n         let mut msg = format!(\"consider importing {} {}{}\", determiner, kind, instead);\n \n+        for note in accessible_path_strings.iter().map(|cand| cand.3.as_ref()).flatten() {\n+            err.note(note);\n+        }\n+\n         if let Some(span) = use_placement_span {\n             for candidate in &mut accessible_path_strings {\n                 // produce an additional newline to separate the new use statement\n@@ -1820,7 +1855,7 @@ crate fn show_candidates(\n         assert!(!inaccessible_path_strings.is_empty());\n \n         if inaccessible_path_strings.len() == 1 {\n-            let (name, descr, def_id) = &inaccessible_path_strings[0];\n+            let (name, descr, def_id, note) = &inaccessible_path_strings[0];\n             let msg = format!(\"{} `{}` exists but is inaccessible\", descr, name);\n \n             if let Some(local_def_id) = def_id.and_then(|did| did.as_local()) {\n@@ -1832,12 +1867,15 @@ crate fn show_candidates(\n             } else {\n                 err.note(&msg);\n             }\n+            if let Some(note) = (*note).as_deref() {\n+                err.note(note);\n+            }\n         } else {\n-            let (_, descr_first, _) = &inaccessible_path_strings[0];\n+            let (_, descr_first, _, _) = &inaccessible_path_strings[0];\n             let descr = if inaccessible_path_strings\n                 .iter()\n                 .skip(1)\n-                .all(|(_, descr, _)| descr == descr_first)\n+                .all(|(_, descr, _, _)| descr == descr_first)\n             {\n                 descr_first.to_string()\n             } else {\n@@ -1848,7 +1886,7 @@ crate fn show_candidates(\n             let mut has_colon = false;\n \n             let mut spans = Vec::new();\n-            for (name, _, def_id) in &inaccessible_path_strings {\n+            for (name, _, def_id, _) in &inaccessible_path_strings {\n                 if let Some(local_def_id) = def_id.and_then(|did| did.as_local()) {\n                     let span = definitions.def_span(local_def_id);\n                     let span = session.source_map().guess_head_span(span);\n@@ -1868,6 +1906,10 @@ crate fn show_candidates(\n                 multi_span.push_span_label(span, format!(\"`{}`: not accessible\", name));\n             }\n \n+            for note in inaccessible_path_strings.iter().map(|cand| cand.3.as_ref()).flatten() {\n+                err.note(note);\n+            }\n+\n             err.span_note(multi_span, &msg);\n         }\n     }"}, {"sha": "5f90fcdfa64e2cc205525adfa782b98bdb29484b", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "patch": "@@ -1502,6 +1502,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                                 descr: \"module\",\n                                 path,\n                                 accessible: true,\n+                                note: None,\n                             },\n                         ));\n                     } else {"}, {"sha": "28b19981c2d40766f4442dbed32fca63481e827d", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "patch": "@@ -1203,6 +1203,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let mut candidates = valid_out_of_scope_traits;\n             candidates.sort();\n             candidates.dedup();\n+\n+            // `TryFrom` and `FromIterator` have no methods\n+            let edition_fix = candidates\n+                .iter()\n+                .find(|did| self.tcx.is_diagnostic_item(sym::TryInto, **did))\n+                .map(|&d| d);\n+\n             err.help(\"items from traits can only be used if the trait is in scope\");\n             let msg = format!(\n                 \"the following {traits_are} implemented but not in scope; \\\n@@ -1212,6 +1219,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n \n             self.suggest_use_candidates(err, msg, candidates);\n+            if let Some(did) = edition_fix {\n+                err.note(&format!(\n+                    \"'{}' is included in the prelude starting in Edition 2021\",\n+                    with_crate_prefix(|| self.tcx.def_path_str(did))\n+                ));\n+            }\n+\n             true\n         } else {\n             false"}, {"sha": "e1d5ec97678fa18441575a334eb7e306aafea6c1", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "patch": "@@ -55,7 +55,7 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n /// performance on *small* nodes of elements which are cheap to compare. However in the future we\n /// would like to further explore choosing the optimal search strategy based on the choice of B,\n /// and possibly other factors. Using linear search, searching for a random element is expected\n-/// to take O(B * log(n)) comparisons, which is generally worse than a BST. In practice,\n+/// to take B * log(n) comparisons, which is generally worse than a BST. In practice,\n /// however, performance is excellent.\n ///\n /// It is a logic error for a key to be modified in such a way that the key's ordering relative to"}, {"sha": "b7822b40a7ccf69a97165b9a46b9625638fed7fd", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "patch": "@@ -1257,7 +1257,7 @@ impl CStr {\n     #[inline]\n     #[must_use]\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n-    #[rustc_const_unstable(feature = \"const_cstr_unchecked\", issue = \"none\")]\n+    #[rustc_const_unstable(feature = \"const_cstr_unchecked\", issue = \"90343\")]\n     pub const unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\n         // SAFETY: Casting to CStr is safe because its internal representation\n         // is a [u8] too (safe only inside std)."}, {"sha": "e5604b816b5e9ad81d1797ff2bfc8da3175888ac", "filename": "src/test/ui/parser/auxiliary/issue-89971-outer-attr-following-inner-attr-ice.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/src%2Ftest%2Fui%2Fparser%2Fauxiliary%2Fissue-89971-outer-attr-following-inner-attr-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/src%2Ftest%2Fui%2Fparser%2Fauxiliary%2Fissue-89971-outer-attr-following-inner-attr-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fauxiliary%2Fissue-89971-outer-attr-following-inner-attr-ice.rs?ref=4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "patch": "@@ -0,0 +1,13 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_derive(ICE)]\n+pub fn derive(_: TokenStream) -> TokenStream {\n+    r#\"#[allow(missing_docs)] struct X { }\"#.parse().unwrap()\n+}"}, {"sha": "fe67d9822fc9ca7d80b748378282d1627d4e5669", "filename": "src/test/ui/parser/issue-89971-outer-attr-following-inner-attr-ice.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/src%2Ftest%2Fui%2Fparser%2Fissue-89971-outer-attr-following-inner-attr-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/src%2Ftest%2Fui%2Fparser%2Fissue-89971-outer-attr-following-inner-attr-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-89971-outer-attr-following-inner-attr-ice.rs?ref=4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "patch": "@@ -0,0 +1,15 @@\n+// aux-build:issue-89971-outer-attr-following-inner-attr-ice.rs\n+\n+#[macro_use]\n+extern crate issue_89971_outer_attr_following_inner_attr_ice;\n+\n+fn main() {\n+    Mew();\n+    X {};\n+}\n+\n+#![deny(missing_docs)]\n+//~^ ERROR an inner attribute is not permitted in this context\n+#[derive(ICE)]\n+#[deny(missing_docs)]\n+struct Mew();"}, {"sha": "34a6ab00d7b2dbfe66e11b88caca7ea5b3515204", "filename": "src/test/ui/parser/issue-89971-outer-attr-following-inner-attr-ice.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/src%2Ftest%2Fui%2Fparser%2Fissue-89971-outer-attr-following-inner-attr-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/src%2Ftest%2Fui%2Fparser%2Fissue-89971-outer-attr-following-inner-attr-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-89971-outer-attr-following-inner-attr-ice.stderr?ref=4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "patch": "@@ -0,0 +1,18 @@\n+error: an inner attribute is not permitted in this context\n+  --> $DIR/issue-89971-outer-attr-following-inner-attr-ice.rs:11:1\n+   |\n+LL | #![deny(missing_docs)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | struct Mew();\n+   | ------------- the inner attribute doesn't annotate this struct\n+   |\n+   = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files\n+help: to annotate the struct, change the attribute from inner to outer style\n+   |\n+LL - #![deny(missing_docs)]\n+LL + #[deny(missing_docs)]\n+   | \n+\n+error: aborting due to previous error\n+"}, {"sha": "d945b4c94ca2f128d6d628484b6d24bd519b11bc", "filename": "src/test/ui/rust-2021/future-prelude-collision-shadow.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr?ref=4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "patch": "@@ -15,6 +15,7 @@ LL |     fn try_into(self) -> Result<T, Self::Error>;\n    |        the method is available for `Rc<u8>` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n+   = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n help: consider wrapping the receiver expression with the appropriate type\n    |\n LL |         let _: u32 = Box::new(3u8).try_into().unwrap();"}, {"sha": "f03b42bbe47518d95f4202d66e3736e046cc532d", "filename": "src/test/ui/suggestions/suggest-tryinto-edition-change.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.rs?ref=4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "patch": "@@ -0,0 +1,31 @@\n+// Make sure that trying to access `TryInto`, `TryFrom`, `FromIterator` in pre-2021 mentions\n+// Edition 2021 change\n+// edition:2018\n+\n+fn test() {\n+    let _i: i16 = 0_i32.try_into().unwrap();\n+    //~^ ERROR no method named `try_into` found for type `i32` in the current scope\n+    //~| NOTE method not found in `i32`\n+    //~| NOTE 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n+\n+    let _i: i16 = TryFrom::try_from(0_i32).unwrap();\n+    //~^ ERROR failed to resolve: use of undeclared type\n+    //~| NOTE not found in this scope\n+    //~| NOTE 'std::convert::TryFrom' is included in the prelude starting in Edition 2021\n+    //~| NOTE 'core::convert::TryFrom' is included in the prelude starting in Edition 2021\n+\n+    let _i: i16 = TryInto::try_into(0_i32).unwrap();\n+    //~^ ERROR failed to resolve: use of undeclared type\n+    //~| NOTE not found in this scope\n+    //~| NOTE 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n+    //~| NOTE 'core::convert::TryInto' is included in the prelude starting in Edition 2021\n+\n+    let _v: Vec<_> = FromIterator::from_iter(&[1]);\n+    //~^ ERROR failed to resolve: use of undeclared type\n+    //~| NOTE 'std::iter::FromIterator' is included in the prelude starting in Edition 2021\n+    //~| NOTE 'core::iter::FromIterator' is included in the prelude starting in Edition 2021\n+}\n+\n+fn main() {\n+    test();\n+}"}, {"sha": "86f48716b16b50df0ea6f1dcb8af619f0c537363", "filename": "src/test/ui/suggestions/suggest-tryinto-edition-change.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr?ref=4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "patch": "@@ -0,0 +1,76 @@\n+error[E0433]: failed to resolve: use of undeclared type `TryFrom`\n+  --> $DIR/suggest-tryinto-edition-change.rs:11:19\n+   |\n+LL |     let _i: i16 = TryFrom::try_from(0_i32).unwrap();\n+   |                   ^^^^^^^ not found in this scope\n+   |\n+   = note: 'std::convert::TryFrom' is included in the prelude starting in Edition 2021\n+   = note: 'core::convert::TryFrom' is included in the prelude starting in Edition 2021\n+help: consider importing one of these items\n+   |\n+LL | use core::convert::TryFrom;\n+   |\n+LL | use std::convert::TryFrom;\n+   |\n+\n+error[E0433]: failed to resolve: use of undeclared type `TryInto`\n+  --> $DIR/suggest-tryinto-edition-change.rs:17:19\n+   |\n+LL |     let _i: i16 = TryInto::try_into(0_i32).unwrap();\n+   |                   ^^^^^^^ not found in this scope\n+   |\n+   = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n+   = note: 'core::convert::TryInto' is included in the prelude starting in Edition 2021\n+help: consider importing one of these items\n+   |\n+LL | use core::convert::TryInto;\n+   |\n+LL | use std::convert::TryInto;\n+   |\n+\n+error[E0433]: failed to resolve: use of undeclared type `FromIterator`\n+  --> $DIR/suggest-tryinto-edition-change.rs:23:22\n+   |\n+LL |     let _v: Vec<_> = FromIterator::from_iter(&[1]);\n+   |                      ^^^^^^^^^^^^\n+   |\n+  ::: $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL | pub trait IntoIterator {\n+   | ---------------------- similarly named trait `IntoIterator` defined here\n+   |\n+   = note: 'std::iter::FromIterator' is included in the prelude starting in Edition 2021\n+   = note: 'core::iter::FromIterator' is included in the prelude starting in Edition 2021\n+help: a trait with a similar name exists\n+   |\n+LL |     let _v: Vec<_> = IntoIterator::from_iter(&[1]);\n+   |                      ~~~~~~~~~~~~\n+help: consider importing one of these items\n+   |\n+LL | use core::iter::FromIterator;\n+   |\n+LL | use std::iter::FromIterator;\n+   |\n+\n+error[E0599]: no method named `try_into` found for type `i32` in the current scope\n+  --> $DIR/suggest-tryinto-edition-change.rs:6:25\n+   |\n+LL |     let _i: i16 = 0_i32.try_into().unwrap();\n+   |                         ^^^^^^^^ method not found in `i32`\n+   |\n+  ::: $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn try_into(self) -> Result<T, Self::Error>;\n+   |        -------- the method is available for `i32` here\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+   = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL | use std::convert::TryInto;\n+   |\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0433, E0599.\n+For more information about an error, try `rustc --explain E0433`."}, {"sha": "367eac7182a26ecd6c40f9318432263a5ed720c6", "filename": "src/test/ui/trait-bounds/issue-75961.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-75961.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e0d3973fafdfb1c51011bc74e44257b5e3863f1/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-75961.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fissue-75961.rs?ref=4e0d3973fafdfb1c51011bc74e44257b5e3863f1", "patch": "@@ -0,0 +1,7 @@\n+// check-pass\n+\n+pub fn foo<'a>(s: &'a mut ()) where &'a mut (): Clone {\n+    <&mut () as Clone>::clone(&s);\n+}\n+\n+fn main() {}"}]}