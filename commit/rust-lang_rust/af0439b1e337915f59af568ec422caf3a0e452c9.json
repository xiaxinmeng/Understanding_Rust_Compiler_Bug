{"sha": "af0439b1e337915f59af568ec422caf3a0e452c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMDQzOWIxZTMzNzkxNWY1OWFmNTY4ZWM0MjJjYWYzYTBlNDUyYzk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-31T01:15:24Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-03T22:02:00Z"}, "message": "librustpkg: De-`@mut` `rustpkg`", "tree": {"sha": "8bf51f1ddb8c889e0109397e26c64393304a59d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bf51f1ddb8c889e0109397e26c64393304a59d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af0439b1e337915f59af568ec422caf3a0e452c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af0439b1e337915f59af568ec422caf3a0e452c9", "html_url": "https://github.com/rust-lang/rust/commit/af0439b1e337915f59af568ec422caf3a0e452c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af0439b1e337915f59af568ec422caf3a0e452c9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "901df8a63bc089f0805ce4fd61fbf22d0f2e2166", "url": "https://api.github.com/repos/rust-lang/rust/commits/901df8a63bc089f0805ce4fd61fbf22d0f2e2166", "html_url": "https://github.com/rust-lang/rust/commit/901df8a63bc089f0805ce4fd61fbf22d0f2e2166"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "7e43fde7b32359e197afd317ee5b14cf4d58aee9", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/af0439b1e337915f59af568ec422caf3a0e452c9/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af0439b1e337915f59af568ec422caf3a0e452c9/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=af0439b1e337915f59af568ec422caf3a0e452c9", "patch": "@@ -80,8 +80,7 @@ struct ReadyCtx {\n     fns: ~[ListenerFn]\n }\n \n-fn fold_mod(_ctx: @mut ReadyCtx, m: &ast::_mod, fold: &mut CrateSetup)\n-            -> ast::_mod {\n+fn fold_mod(m: &ast::_mod, fold: &mut CrateSetup) -> ast::_mod {\n     fn strip_main(item: @ast::item) -> @ast::item {\n         @ast::item {\n             attrs: item.attrs.iter().filter_map(|attr| {\n@@ -101,9 +100,9 @@ fn fold_mod(_ctx: @mut ReadyCtx, m: &ast::_mod, fold: &mut CrateSetup)\n     }, fold)\n }\n \n-fn fold_item(ctx: @mut ReadyCtx, item: @ast::item, fold: &mut CrateSetup)\n+fn fold_item(item: @ast::item, fold: &mut CrateSetup)\n              -> SmallVector<@ast::item> {\n-    ctx.path.push(item.ident);\n+    fold.ctx.path.push(item.ident);\n \n     let mut cmds = ~[];\n     let mut had_pkg_do = false;\n@@ -126,44 +125,44 @@ fn fold_item(ctx: @mut ReadyCtx, item: @ast::item, fold: &mut CrateSetup)\n     }\n \n     if had_pkg_do {\n-        ctx.fns.push(ListenerFn {\n+        fold.ctx.fns.push(ListenerFn {\n             cmds: cmds,\n             span: item.span,\n-            path: /*bad*/ctx.path.clone()\n+            path: /*bad*/fold.ctx.path.clone()\n         });\n     }\n \n     let res = fold::noop_fold_item(item, fold);\n \n-    ctx.path.pop();\n+    fold.ctx.path.pop();\n \n     res\n }\n \n-struct CrateSetup {\n-    ctx: @mut ReadyCtx,\n+struct CrateSetup<'a> {\n+    ctx: &'a mut ReadyCtx,\n }\n \n-impl fold::ast_fold for CrateSetup {\n+impl<'a> fold::ast_fold for CrateSetup<'a> {\n     fn fold_item(&mut self, item: @ast::item) -> SmallVector<@ast::item> {\n-        fold_item(self.ctx, item, self)\n+        fold_item(item, self)\n     }\n     fn fold_mod(&mut self, module: &ast::_mod) -> ast::_mod {\n-        fold_mod(self.ctx, module, self)\n+        fold_mod(module, self)\n     }\n }\n \n /// Generate/filter main function, add the list of commands, etc.\n pub fn ready_crate(sess: session::Session,\n                    crate: ast::Crate) -> ast::Crate {\n-    let ctx = @mut ReadyCtx {\n+    let mut ctx = ReadyCtx {\n         sess: sess,\n         ext_cx: ExtCtxt::new(sess.parse_sess, sess.opts.cfg.clone()),\n         path: ~[],\n         fns: ~[]\n     };\n     let mut fold = CrateSetup {\n-        ctx: ctx,\n+        ctx: &mut ctx,\n     };\n     fold.fold_crate(crate)\n }"}]}