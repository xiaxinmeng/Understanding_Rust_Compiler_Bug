{"sha": "873c9fc8f2f7cd04049d70fbc755b070a9c3a324", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3M2M5ZmM4ZjJmN2NkMDQwNDlkNzBmYmM3NTViMDcwYTljM2EzMjQ=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-05-31T12:57:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-31T12:57:33Z"}, "message": "Rollup merge of #5656 - ebroto:len_zero_ranges, r=matthiaskrgr\n\nlen_zero: skip ranges if feature `range_is_empty` is not enabled\n\nIf the feature is not enabled, calling `is_empty()` on a range is ambiguous. Moreover, the two possible resolutions are unstable methods, one inherent to the range and the other being part of the `ExactSizeIterator` trait.\n\nSince `len_zero` only checks for existing `is_empty()` inherent methods, we only take into account the `range_is_empty` feature.\n\nRelated: https://github.com/rust-lang/rust/issues/48111#issuecomment-445132965\n\nchangelog: len_zero: avoid linting ranges without #![feature(range_is_empty)]\n\nFixes: #3807", "tree": {"sha": "8abed531e559af37de04152e142e725bbeed026b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8abed531e559af37de04152e142e725bbeed026b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/873c9fc8f2f7cd04049d70fbc755b070a9c3a324", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe06m9CRBK7hj4Ov3rIwAAdHIIAEFgjplRW76i7537G1HMjuZz\n9ymhG4PyovQk1zrXl4YlCRLV+Oy+mR9PcXUSpKWi7ZHR2hfSN012dK7js6M91M7J\nNAnergtjnvKgunh/+VufjU0Q/w3OnSPKH1DB3pjMRIMQJOIhmrzrEWpSc78VOuc4\nfjwZnB5l8sKTawfT3KsMSmSaC+AdXwQposdyyd7fGXzH4hBIcSMzuWuSGyLPlqST\nZWT+MHGJAuP224Q0ezp7forUuzxc9gapixRm1kgV3w4Zk2UW0PLkv42/kFAVOBnB\n8WrBzgfHftQTb7ZrR7i47wKATK+zrmjwWNu4Gbk1qsLGqkRhHEnoPGZROOkrrKM=\n=TFJf\n-----END PGP SIGNATURE-----\n", "payload": "tree 8abed531e559af37de04152e142e725bbeed026b\nparent 0fff522071c35f3af405bf64179dea41d7bcb1e1\nparent 64a05f56c33d4754808ef85e634f72a9053c56fd\nauthor Philipp Krones <hello@philkrones.com> 1590929853 +0200\ncommitter GitHub <noreply@github.com> 1590929853 +0200\n\nRollup merge of #5656 - ebroto:len_zero_ranges, r=matthiaskrgr\n\nlen_zero: skip ranges if feature `range_is_empty` is not enabled\n\nIf the feature is not enabled, calling `is_empty()` on a range is ambiguous. Moreover, the two possible resolutions are unstable methods, one inherent to the range and the other being part of the `ExactSizeIterator` trait.\n\nSince `len_zero` only checks for existing `is_empty()` inherent methods, we only take into account the `range_is_empty` feature.\n\nRelated: https://github.com/rust-lang/rust/issues/48111#issuecomment-445132965\n\nchangelog: len_zero: avoid linting ranges without #![feature(range_is_empty)]\n\nFixes: #3807\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/873c9fc8f2f7cd04049d70fbc755b070a9c3a324", "html_url": "https://github.com/rust-lang/rust/commit/873c9fc8f2f7cd04049d70fbc755b070a9c3a324", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/873c9fc8f2f7cd04049d70fbc755b070a9c3a324/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fff522071c35f3af405bf64179dea41d7bcb1e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fff522071c35f3af405bf64179dea41d7bcb1e1", "html_url": "https://github.com/rust-lang/rust/commit/0fff522071c35f3af405bf64179dea41d7bcb1e1"}, {"sha": "64a05f56c33d4754808ef85e634f72a9053c56fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a05f56c33d4754808ef85e634f72a9053c56fd", "html_url": "https://github.com/rust-lang/rust/commit/64a05f56c33d4754808ef85e634f72a9053c56fd"}], "stats": {"total": 71, "additions": 70, "deletions": 1}, "files": [{"sha": "f5bfede75a76171a0deed70db698ce938b56b359", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/873c9fc8f2f7cd04049d70fbc755b070a9c3a324/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/873c9fc8f2f7cd04049d70fbc755b070a9c3a324/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=873c9fc8f2f7cd04049d70fbc755b070a9c3a324", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{get_item_name, snippet_with_applicability, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n+use crate::utils::{get_item_name, higher, snippet_with_applicability, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -259,6 +259,17 @@ fn check_len(\n \n /// Checks if this type has an `is_empty` method.\n fn has_is_empty(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+    /// Special case ranges until `range_is_empty` is stabilized. See issue 3807.\n+    fn should_skip_range(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n+        higher::range(cx, expr).map_or(false, |_| {\n+            !cx.tcx\n+                .features()\n+                .declared_lib_features\n+                .iter()\n+                .any(|(name, _)| name.as_str() == \"range_is_empty\")\n+        })\n+    }\n+\n     /// Gets an `AssocItem` and return true if it matches `is_empty(self)`.\n     fn is_is_empty(cx: &LateContext<'_, '_>, item: &ty::AssocItem) -> bool {\n         if let ty::AssocKind::Fn = item.kind {\n@@ -284,6 +295,10 @@ fn has_is_empty(cx: &LateContext<'_, '_>, expr: &Expr<'_>) -> bool {\n         })\n     }\n \n+    if should_skip_range(cx, expr) {\n+        return false;\n+    }\n+\n     let ty = &walk_ptrs_ty(cx.tables.expr_ty(expr));\n     match ty.kind {\n         ty::Dynamic(ref tt, ..) => {"}, {"sha": "a29b832eb6019af0dda1ffc160fe49ebfac08f32", "filename": "tests/ui/len_zero.fixed", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/873c9fc8f2f7cd04049d70fbc755b070a9c3a324/tests%2Fui%2Flen_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/873c9fc8f2f7cd04049d70fbc755b070a9c3a324/tests%2Fui%2Flen_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.fixed?ref=873c9fc8f2f7cd04049d70fbc755b070a9c3a324", "patch": "@@ -141,3 +141,11 @@ fn main() {\n fn test_slice(b: &[u8]) {\n     if !b.is_empty() {}\n }\n+\n+mod issue_3807 {\n+    // Avoid suggesting changes to ranges if the user did not enable `range_is_empty`.\n+    // See https://github.com/rust-lang/rust/issues/48111#issuecomment-445132965\n+    fn no_suggestion() {\n+        let _ = (0..42).len() == 0;\n+    }\n+}"}, {"sha": "8fd0093f4fdbbc13e31205003209de35fa9a21df", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/873c9fc8f2f7cd04049d70fbc755b070a9c3a324/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/873c9fc8f2f7cd04049d70fbc755b070a9c3a324/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=873c9fc8f2f7cd04049d70fbc755b070a9c3a324", "patch": "@@ -141,3 +141,11 @@ fn main() {\n fn test_slice(b: &[u8]) {\n     if b.len() != 0 {}\n }\n+\n+mod issue_3807 {\n+    // Avoid suggesting changes to ranges if the user did not enable `range_is_empty`.\n+    // See https://github.com/rust-lang/rust/issues/48111#issuecomment-445132965\n+    fn no_suggestion() {\n+        let _ = (0..42).len() == 0;\n+    }\n+}"}, {"sha": "7da26f8ff4d477b9ab0cde400eb834b44ee24cde", "filename": "tests/ui/len_zero_ranges.fixed", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/873c9fc8f2f7cd04049d70fbc755b070a9c3a324/tests%2Fui%2Flen_zero_ranges.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/873c9fc8f2f7cd04049d70fbc755b070a9c3a324/tests%2Fui%2Flen_zero_ranges.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero_ranges.fixed?ref=873c9fc8f2f7cd04049d70fbc755b070a9c3a324", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+#![feature(range_is_empty)]\n+#![warn(clippy::len_zero)]\n+#![allow(unused)]\n+\n+mod issue_3807 {\n+    // With the feature enabled, `is_empty` should be suggested\n+    fn suggestion_is_fine() {\n+        let _ = (0..42).is_empty();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "be7b4244bc06c4d27463f35de2181ca23ab2c20a", "filename": "tests/ui/len_zero_ranges.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/873c9fc8f2f7cd04049d70fbc755b070a9c3a324/tests%2Fui%2Flen_zero_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/873c9fc8f2f7cd04049d70fbc755b070a9c3a324/tests%2Fui%2Flen_zero_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero_ranges.rs?ref=873c9fc8f2f7cd04049d70fbc755b070a9c3a324", "patch": "@@ -0,0 +1,14 @@\n+// run-rustfix\n+\n+#![feature(range_is_empty)]\n+#![warn(clippy::len_zero)]\n+#![allow(unused)]\n+\n+mod issue_3807 {\n+    // With the feature enabled, `is_empty` should be suggested\n+    fn suggestion_is_fine() {\n+        let _ = (0..42).len() == 0;\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6e5fa41fb08a55c127f9bb7a8e34624498e018d5", "filename": "tests/ui/len_zero_ranges.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/873c9fc8f2f7cd04049d70fbc755b070a9c3a324/tests%2Fui%2Flen_zero_ranges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/873c9fc8f2f7cd04049d70fbc755b070a9c3a324/tests%2Fui%2Flen_zero_ranges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero_ranges.stderr?ref=873c9fc8f2f7cd04049d70fbc755b070a9c3a324", "patch": "@@ -0,0 +1,10 @@\n+error: length comparison to zero\n+  --> $DIR/len_zero_ranges.rs:10:17\n+   |\n+LL |         let _ = (0..42).len() == 0;\n+   |                 ^^^^^^^^^^^^^^^^^^ help: using `is_empty` is clearer and more explicit: `(0..42).is_empty()`\n+   |\n+   = note: `-D clippy::len-zero` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}]}