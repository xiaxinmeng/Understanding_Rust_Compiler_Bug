{"sha": "47041fe28920326807b29c1246ca9712e184f885", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MDQxZmUyODkyMDMyNjgwN2IyOWMxMjQ2Y2E5NzEyZTE4NGY4ODU=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-07-24T19:02:05Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-08-09T20:05:22Z"}, "message": "Make `slice::transmute*` private", "tree": {"sha": "8a7de25f7da03695a5003eb49adf52f64b9f3de0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a7de25f7da03695a5003eb49adf52f64b9f3de0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47041fe28920326807b29c1246ca9712e184f885", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47041fe28920326807b29c1246ca9712e184f885", "html_url": "https://github.com/rust-lang/rust/commit/47041fe28920326807b29c1246ca9712e184f885", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47041fe28920326807b29c1246ca9712e184f885/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22ec5f4af7b5a85ad375d672ed727571b49f3cad", "url": "https://api.github.com/repos/rust-lang/rust/commits/22ec5f4af7b5a85ad375d672ed727571b49f3cad", "html_url": "https://github.com/rust-lang/rust/commit/22ec5f4af7b5a85ad375d672ed727571b49f3cad"}], "stats": {"total": 64, "additions": 14, "deletions": 50}, "files": [{"sha": "5ccf3973c28825b9a5eced76ac28616e9a25f09e", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47041fe28920326807b29c1246ca9712e184f885/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47041fe28920326807b29c1246ca9712e184f885/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=47041fe28920326807b29c1246ca9712e184f885", "patch": "@@ -109,7 +109,6 @@ pub use core::slice::{IntSliceExt, SplitMut, ChunksMut, Split};\n pub use core::slice::{SplitN, RSplitN, SplitNMut, RSplitNMut};\n pub use core::slice::{bytes, mut_ref_slice, ref_slice};\n pub use core::slice::{from_raw_parts, from_raw_parts_mut};\n-pub use core::slice::{transmute, transmute_mut};\n \n ////////////////////////////////////////////////////////////////////////////////\n // Basic slice extension methods"}, {"sha": "aa34b651157674d47b0c7d82ce93d16011614ea9", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47041fe28920326807b29c1246ca9712e184f885/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47041fe28920326807b29c1246ca9712e184f885/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=47041fe28920326807b29c1246ca9712e184f885", "patch": "@@ -1455,8 +1455,7 @@ fn check_types<T,U>() {\n /// This functions panics if the above preconditions about the types are not\n /// met.\n #[inline]\n-#[unstable(feature = \"slice_transmute\", reason = \"recent API addition\")]\n-pub unsafe fn transmute<T,U>(slice: &[T]) -> &[U] {\n+unsafe fn transmute<T,U>(slice: &[T]) -> &[U] {\n     check_types::<T,U>();\n     from_raw_parts(slice.as_ptr() as *const U, slice.len())\n }\n@@ -1466,8 +1465,7 @@ pub unsafe fn transmute<T,U>(slice: &[T]) -> &[U] {\n ///\n /// Equivalent of `slice::transmute` for mutable slices.\n #[inline]\n-#[unstable(feature = \"slice_transmute\", reason = \"recent API addition\")]\n-pub unsafe fn transmute_mut<T,U>(slice: &mut [T]) -> &mut [U] {\n+unsafe fn transmute_mut<T,U>(slice: &mut [T]) -> &mut [U] {\n     check_types::<T,U>();\n     from_raw_parts_mut(slice.as_mut_ptr() as *mut U, slice.len())\n }"}, {"sha": "af894b218eff8e87e76c7103da155d91e5a9df27", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47041fe28920326807b29c1246ca9712e184f885/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47041fe28920326807b29c1246ca9712e184f885/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=47041fe28920326807b29c1246ca9712e184f885", "patch": "@@ -25,7 +25,6 @@\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![cfg_attr(not(stage0), feature(slice_transmute))]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(const_fn)]"}, {"sha": "bf7c471cd421825e0b90e3035eb116ded5310f9e", "filename": "src/librustc_trans/trans/type_.rs", "status": "modified", "additions": 11, "deletions": 42, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/47041fe28920326807b29c1246ca9712e184f885/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47041fe28920326807b29c1246ca9712e184f885/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_.rs?ref=47041fe28920326807b29c1246ca9712e184f885", "patch": "@@ -59,6 +59,10 @@ impl Type {\n         }).expect(\"non-UTF8 type description from LLVM\")\n     }\n \n+    pub fn to_ref_slice(slice: &[Type]) -> &[TypeRef] {\n+        unsafe { mem::transmute(slice) }\n+    }\n+\n     pub fn void(ccx: &CrateContext) -> Type {\n         ty!(llvm::LLVMVoidTypeInContext(ccx.llcx()))\n     }\n@@ -151,45 +155,20 @@ impl Type {\n         }\n     }\n \n-    #[cfg(stage0)]\n-    pub fn func(args: &[Type], ret: &Type) -> Type {\n-        let vec : &[TypeRef] = unsafe { mem::transmute(args) };\n-        ty!(llvm::LLVMFunctionType(ret.to_ref(), vec.as_ptr(),\n-                                   args.len() as c_uint, False))\n-    }\n-\n-    #[cfg(not(stage0))]\n     pub fn func(args: &[Type], ret: &Type) -> Type {\n-        let vec: &[TypeRef] = unsafe { slice::transmute(args) };\n-        ty!(llvm::LLVMFunctionType(ret.to_ref(), vec.as_ptr(),\n+        let slice: &[TypeRef] = Type::to_ref_slice(args);\n+        ty!(llvm::LLVMFunctionType(ret.to_ref(), slice.as_ptr(),\n                                    args.len() as c_uint, False))\n     }\n \n-    #[cfg(stage0)]\n     pub fn variadic_func(args: &[Type], ret: &Type) -> Type {\n-        let vec : &[TypeRef] = unsafe { mem::transmute(args) };\n-        ty!(llvm::LLVMFunctionType(ret.to_ref(), vec.as_ptr(),\n+        let slice: &[TypeRef] = Type::to_ref_slice(args);\n+        ty!(llvm::LLVMFunctionType(ret.to_ref(), slice.as_ptr(),\n                                    args.len() as c_uint, True))\n     }\n \n-    #[cfg(not(stage0))]\n-    pub fn variadic_func(args: &[Type], ret: &Type) -> Type {\n-        let vec: &[TypeRef] = unsafe { slice::transmute(args) };\n-        ty!(llvm::LLVMFunctionType(ret.to_ref(), vec.as_ptr(),\n-                                   args.len() as c_uint, True))\n-    }\n-\n-    #[cfg(stage0)]\n-    pub fn struct_(ccx: &CrateContext, els: &[Type], packed: bool) -> Type {\n-        let els : &[TypeRef] = unsafe { mem::transmute(els) };\n-        ty!(llvm::LLVMStructTypeInContext(ccx.llcx(), els.as_ptr(),\n-                                          els.len() as c_uint,\n-                                          packed as Bool))\n-    }\n-\n-    #[cfg(not(stage0))]\n     pub fn struct_(ccx: &CrateContext, els: &[Type], packed: bool) -> Type {\n-        let els : &[TypeRef] = unsafe { slice::transmute(els) };\n+        let els: &[TypeRef] = Type::to_ref_slice(els);\n         ty!(llvm::LLVMStructTypeInContext(ccx.llcx(), els.as_ptr(),\n                                           els.len() as c_uint,\n                                           packed as Bool))\n@@ -236,20 +215,10 @@ impl Type {\n         }\n     }\n \n-    #[cfg(stage0)]\n-    pub fn set_struct_body(&mut self, els: &[Type], packed: bool) {\n-        unsafe {\n-            let vec : &[TypeRef] = mem::transmute(els);\n-            llvm::LLVMStructSetBody(self.to_ref(), vec.as_ptr(),\n-                                    els.len() as c_uint, packed as Bool)\n-        }\n-    }\n-\n-    #[cfg(not(stage0))]\n     pub fn set_struct_body(&mut self, els: &[Type], packed: bool) {\n+        let slice: &[TypeRef] = Type::to_ref_slice(els);\n         unsafe {\n-            let vec: &[TypeRef] = slice::transmute(els);\n-            llvm::LLVMStructSetBody(self.to_ref(), vec.as_ptr(),\n+            llvm::LLVMStructSetBody(self.to_ref(), slice.as_ptr(),\n                                     els.len() as c_uint, packed as Bool)\n         }\n     }"}, {"sha": "3e503074ab4d5960a9fc3430d1200da315556107", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47041fe28920326807b29c1246ca9712e184f885/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47041fe28920326807b29c1246ca9712e184f885/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=47041fe28920326807b29c1246ca9712e184f885", "patch": "@@ -395,7 +395,7 @@ impl CStr {\n     /// > length calculation whenever this method is called.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_bytes_with_nul(&self) -> &[u8] {\n-        unsafe { slice::transmute(&self.inner) }\n+        unsafe { mem::transmute(&self.inner) }\n     }\n \n     /// Yields a `&str` slice if the `CStr` contains valid UTF-8."}, {"sha": "b4bbb3f25f7ba72a4aad1f24aa488666205fe1a7", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47041fe28920326807b29c1246ca9712e184f885/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47041fe28920326807b29c1246ca9712e184f885/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=47041fe28920326807b29c1246ca9712e184f885", "patch": "@@ -234,7 +234,6 @@\n #![feature(reflect_marker)]\n #![feature(slice_bytes)]\n #![feature(slice_patterns)]\n-#![feature(slice_transmute)]\n #![feature(staged_api)]\n #![feature(str_as_bytes_mut)]\n #![feature(str_char)]"}]}