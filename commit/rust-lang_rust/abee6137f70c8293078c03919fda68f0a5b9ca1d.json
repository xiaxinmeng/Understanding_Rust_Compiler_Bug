{"sha": "abee6137f70c8293078c03919fda68f0a5b9ca1d", "node_id": "C_kwDOAAsO6NoAKGFiZWU2MTM3ZjcwYzgyOTMwNzhjMDM5MTlmZGE2OGYwYTViOWNhMWQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-07T09:33:25Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-01-23T10:18:45Z"}, "message": "Remove another unneeded use of the resolver", "tree": {"sha": "453fa735db5ddb5429e6dbf8e85560d7d9fc5cf0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/453fa735db5ddb5429e6dbf8e85560d7d9fc5cf0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abee6137f70c8293078c03919fda68f0a5b9ca1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abee6137f70c8293078c03919fda68f0a5b9ca1d", "html_url": "https://github.com/rust-lang/rust/commit/abee6137f70c8293078c03919fda68f0a5b9ca1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abee6137f70c8293078c03919fda68f0a5b9ca1d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b3cd03fdb285781c60f5962194719fdfd46d910", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b3cd03fdb285781c60f5962194719fdfd46d910", "html_url": "https://github.com/rust-lang/rust/commit/6b3cd03fdb285781c60f5962194719fdfd46d910"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "4b3034c4781b9669df497bee3437f6886fb930ef", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/abee6137f70c8293078c03919fda68f0a5b9ca1d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abee6137f70c8293078c03919fda68f0a5b9ca1d/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=abee6137f70c8293078c03919fda68f0a5b9ca1d", "patch": "@@ -30,7 +30,7 @@ use rustc_plugin_impl as plugin;\n use rustc_query_impl::{OnDiskCache, Queries as TcxQueries};\n use rustc_resolve::{Resolver, ResolverArenas};\n use rustc_session::config::{CrateType, Input, OutputFilenames, OutputType};\n-use rustc_session::cstore::{MetadataLoader, MetadataLoaderDyn, Untracked};\n+use rustc_session::cstore::{CrateStoreDyn, MetadataLoader, MetadataLoaderDyn, Untracked};\n use rustc_session::output::filename_for_input;\n use rustc_session::search_paths::PathKind;\n use rustc_session::{Limit, Session};\n@@ -548,7 +548,7 @@ fn escape_dep_env(symbol: Symbol) -> String {\n \n fn write_out_deps(\n     sess: &Session,\n-    boxed_resolver: &RefCell<BoxedResolver>,\n+    cstore: &CrateStoreDyn,\n     outputs: &OutputFilenames,\n     out_filenames: &[PathBuf],\n ) {\n@@ -600,20 +600,19 @@ fn write_out_deps(\n                 }\n             }\n \n-            boxed_resolver.borrow_mut().access(|resolver| {\n-                for cnum in resolver.cstore().crates_untracked() {\n-                    let source = resolver.cstore().crate_source_untracked(cnum);\n-                    if let Some((path, _)) = &source.dylib {\n-                        files.push(escape_dep_filename(&path.display().to_string()));\n-                    }\n-                    if let Some((path, _)) = &source.rlib {\n-                        files.push(escape_dep_filename(&path.display().to_string()));\n-                    }\n-                    if let Some((path, _)) = &source.rmeta {\n-                        files.push(escape_dep_filename(&path.display().to_string()));\n-                    }\n+            let cstore = cstore.as_any().downcast_ref::<CStore>().unwrap();\n+            for cnum in cstore.crates_untracked() {\n+                let source = cstore.crate_source_untracked(cnum);\n+                if let Some((path, _)) = &source.dylib {\n+                    files.push(escape_dep_filename(&path.display().to_string()));\n                 }\n-            });\n+                if let Some((path, _)) = &source.rlib {\n+                    files.push(escape_dep_filename(&path.display().to_string()));\n+                }\n+                if let Some((path, _)) = &source.rmeta {\n+                    files.push(escape_dep_filename(&path.display().to_string()));\n+                }\n+            }\n         }\n \n         let mut file = BufWriter::new(fs::File::create(&deps_filename)?);\n@@ -664,7 +663,7 @@ fn write_out_deps(\n pub fn prepare_outputs(\n     sess: &Session,\n     krate: &ast::Crate,\n-    boxed_resolver: &RefCell<BoxedResolver>,\n+    cstore: &CrateStoreDyn,\n     crate_name: Symbol,\n ) -> Result<OutputFilenames> {\n     let _timer = sess.timer(\"prepare_outputs\");\n@@ -697,7 +696,7 @@ pub fn prepare_outputs(\n         }\n     }\n \n-    write_out_deps(sess, boxed_resolver, &outputs, &output_paths);\n+    write_out_deps(sess, cstore, &outputs, &output_paths);\n \n     let only_dep_info = sess.opts.output_types.contains_key(&OutputType::DepInfo)\n         && sess.opts.output_types.len() == 1;"}, {"sha": "fe24d41a4de875e793090004081d70e532d7d6d9", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/abee6137f70c8293078c03919fda68f0a5b9ca1d/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abee6137f70c8293078c03919fda68f0a5b9ca1d/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=abee6137f70c8293078c03919fda68f0a5b9ca1d", "patch": "@@ -212,8 +212,6 @@ impl<'tcx> Queries<'tcx> {\n             let crate_name = *self.crate_name()?.borrow();\n             let (krate, resolver, lint_store) = self.expansion()?.steal();\n \n-            let outputs = passes::prepare_outputs(self.session(), &krate, &resolver, crate_name)?;\n-\n             let ty::ResolverOutputs {\n                 untracked,\n                 global_ctxt: untracked_resolutions,\n@@ -237,6 +235,13 @@ impl<'tcx> Queries<'tcx> {\n                     tcx.arena.alloc(Steal::new((untracked_resolver_for_lowering, krate))),\n                 );\n                 feed.resolutions(tcx.arena.alloc(untracked_resolutions));\n+\n+                let outputs = passes::prepare_outputs(\n+                    self.session(),\n+                    &krate,\n+                    &*untracked.cstore,\n+                    crate_name,\n+                )?;\n                 feed.output_filenames(tcx.arena.alloc(std::sync::Arc::new(outputs)));\n                 feed.features_query(tcx.sess.features_untracked());\n                 let feed = tcx.feed_local_crate();"}]}