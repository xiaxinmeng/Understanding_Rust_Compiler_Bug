{"sha": "5f20b16934373228b7d2ecae6dda708ae820b055", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMjBiMTY5MzQzNzMyMjhiN2QyZWNhZTZkZGE3MDhhZTgyMGIwNTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-16T13:31:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-18T10:08:23Z"}, "message": "eval_context: move getters together and add one for is_freeze", "tree": {"sha": "7ca21efc262f372a7fc6b9550dc4d5a6aac3082b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ca21efc262f372a7fc6b9550dc4d5a6aac3082b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f20b16934373228b7d2ecae6dda708ae820b055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f20b16934373228b7d2ecae6dda708ae820b055", "html_url": "https://github.com/rust-lang/rust/commit/5f20b16934373228b7d2ecae6dda708ae820b055", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f20b16934373228b7d2ecae6dda708ae820b055/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce9cd15ce637928d6b571b0c7a248ab678908c6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce9cd15ce637928d6b571b0c7a248ab678908c6d", "html_url": "https://github.com/rust-lang/rust/commit/ce9cd15ce637928d6b571b0c7a248ab678908c6d"}], "stats": {"total": 103, "additions": 55, "deletions": 48}, "files": [{"sha": "84399f046c9d9065f5b4d2b4914220ded8240c42", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 55, "deletions": 48, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/5f20b16934373228b7d2ecae6dda708ae820b055/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f20b16934373228b7d2ecae6dda708ae820b055/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=5f20b16934373228b7d2ecae6dda708ae820b055", "patch": "@@ -11,6 +11,7 @@\n use std::fmt::Write;\n use std::mem;\n \n+use syntax::source_map::{self, Span, DUMMY_SP};\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::Def;\n use rustc::hir::map::definitions::DefPathData;\n@@ -29,8 +30,6 @@ use rustc::mir::interpret::{\n };\n use rustc_data_structures::fx::FxHashMap;\n \n-use syntax::source_map::{self, Span};\n-\n use super::{\n     Value, Operand, MemPlace, MPlaceTy, Place, PlaceTy, ScalarMaybeUndef,\n     Memory, Machine\n@@ -216,51 +215,48 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         }\n     }\n \n+    #[inline(always)]\n     pub fn memory(&self) -> &Memory<'a, 'mir, 'tcx, M> {\n         &self.memory\n     }\n \n+    #[inline(always)]\n     pub fn memory_mut(&mut self) -> &mut Memory<'a, 'mir, 'tcx, M> {\n         &mut self.memory\n     }\n \n+    #[inline(always)]\n     pub fn stack(&self) -> &[Frame<'mir, 'tcx, M::PointerTag>] {\n         &self.stack\n     }\n \n-    #[inline]\n+    #[inline(always)]\n     pub fn cur_frame(&self) -> usize {\n         assert!(self.stack.len() > 0);\n         self.stack.len() - 1\n     }\n \n-    /// Mark a storage as live, killing the previous content and returning it.\n-    /// Remember to deallocate that!\n-    pub fn storage_live(\n-        &mut self,\n-        local: mir::Local\n-    ) -> EvalResult<'tcx, LocalValue<M::PointerTag>> {\n-        assert!(local != mir::RETURN_PLACE, \"Cannot make return place live\");\n-        trace!(\"{:?} is now live\", local);\n-\n-        let layout = self.layout_of_local(self.cur_frame(), local)?;\n-        let init = LocalValue::Live(self.uninit_operand(layout)?);\n-        // StorageLive *always* kills the value that's currently stored\n-        Ok(mem::replace(&mut self.frame_mut().locals[local], init))\n+    #[inline(always)]\n+    pub fn frame(&self) -> &Frame<'mir, 'tcx, M::PointerTag> {\n+        self.stack.last().expect(\"no call frames exist\")\n     }\n \n-    /// Returns the old value of the local.\n-    /// Remember to deallocate that!\n-    pub fn storage_dead(&mut self, local: mir::Local) -> LocalValue<M::PointerTag> {\n-        assert!(local != mir::RETURN_PLACE, \"Cannot make return place dead\");\n-        trace!(\"{:?} is now dead\", local);\n+    #[inline(always)]\n+    pub fn frame_mut(&mut self) -> &mut Frame<'mir, 'tcx, M::PointerTag> {\n+        self.stack.last_mut().expect(\"no call frames exist\")\n+    }\n \n-        mem::replace(&mut self.frame_mut().locals[local], LocalValue::Dead)\n+    #[inline(always)]\n+    pub(super) fn mir(&self) -> &'mir mir::Mir<'tcx> {\n+        self.frame().mir\n     }\n \n-    pub fn str_to_value(&mut self, s: &str) -> EvalResult<'tcx, Value<M::PointerTag>> {\n-        let ptr = self.memory.allocate_static_bytes(s.as_bytes());\n-        Ok(Value::new_slice(Scalar::Ptr(ptr), s.len() as u64, self.tcx.tcx))\n+    pub fn substs(&self) -> &'tcx Substs<'tcx> {\n+        if let Some(frame) = self.stack.last() {\n+            frame.instance.substs\n+        } else {\n+            Substs::empty()\n+        }\n     }\n \n     pub(super) fn resolve(\n@@ -284,10 +280,14 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         ).ok_or_else(|| EvalErrorKind::TooGeneric.into())\n     }\n \n-    pub(super) fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n+    pub fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n         ty.is_sized(self.tcx, self.param_env)\n     }\n \n+    pub fn type_is_freeze(&self, ty: Ty<'tcx>) -> bool {\n+        ty.is_freeze(*self.tcx, self.param_env, DUMMY_SP)\n+    }\n+\n     pub fn load_mir(\n         &self,\n         instance: ty::InstanceDef<'tcx>,\n@@ -335,6 +335,11 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         self.layout_of(local_ty)\n     }\n \n+    pub fn str_to_value(&mut self, s: &str) -> EvalResult<'tcx, Value<M::PointerTag>> {\n+        let ptr = self.memory.allocate_static_bytes(s.as_bytes());\n+        Ok(Value::new_slice(Scalar::Ptr(ptr), s.len() as u64, self.tcx.tcx))\n+    }\n+\n     /// Return the actual dynamic size and alignment of the place at the given type.\n     /// Only the \"meta\" (metadata) part of the place matters.\n     /// This can fail to provide an answer for extern types.\n@@ -551,6 +556,30 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         Ok(())\n     }\n \n+    /// Mark a storage as live, killing the previous content and returning it.\n+    /// Remember to deallocate that!\n+    pub fn storage_live(\n+        &mut self,\n+        local: mir::Local\n+    ) -> EvalResult<'tcx, LocalValue<M::PointerTag>> {\n+        assert!(local != mir::RETURN_PLACE, \"Cannot make return place live\");\n+        trace!(\"{:?} is now live\", local);\n+\n+        let layout = self.layout_of_local(self.cur_frame(), local)?;\n+        let init = LocalValue::Live(self.uninit_operand(layout)?);\n+        // StorageLive *always* kills the value that's currently stored\n+        Ok(mem::replace(&mut self.frame_mut().locals[local], init))\n+    }\n+\n+    /// Returns the old value of the local.\n+    /// Remember to deallocate that!\n+    pub fn storage_dead(&mut self, local: mir::Local) -> LocalValue<M::PointerTag> {\n+        assert!(local != mir::RETURN_PLACE, \"Cannot make return place dead\");\n+        trace!(\"{:?} is now dead\", local);\n+\n+        mem::replace(&mut self.frame_mut().locals[local], LocalValue::Dead)\n+    }\n+\n     pub(super) fn deallocate_local(\n         &mut self,\n         local: LocalValue<M::PointerTag>,\n@@ -575,28 +604,6 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             .map_err(|err| EvalErrorKind::ReferencedConstant(err).into())\n     }\n \n-    #[inline(always)]\n-    pub fn frame(&self) -> &Frame<'mir, 'tcx, M::PointerTag> {\n-        self.stack.last().expect(\"no call frames exist\")\n-    }\n-\n-    #[inline(always)]\n-    pub fn frame_mut(&mut self) -> &mut Frame<'mir, 'tcx, M::PointerTag> {\n-        self.stack.last_mut().expect(\"no call frames exist\")\n-    }\n-\n-    pub(super) fn mir(&self) -> &'mir mir::Mir<'tcx> {\n-        self.frame().mir\n-    }\n-\n-    pub fn substs(&self) -> &'tcx Substs<'tcx> {\n-        if let Some(frame) = self.stack.last() {\n-            frame.instance.substs\n-        } else {\n-            Substs::empty()\n-        }\n-    }\n-\n     pub fn dump_place(&self, place: Place<M::PointerTag>) {\n         // Debug output\n         if !log_enabled!(::log::Level::Trace) {"}]}