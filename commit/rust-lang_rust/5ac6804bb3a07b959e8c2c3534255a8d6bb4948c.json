{"sha": "5ac6804bb3a07b959e8c2c3534255a8d6bb4948c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYzY4MDRiYjNhMDdiOTU5ZThjMmMzNTM0MjU1YThkNmJiNDk0OGM=", "commit": {"author": {"name": "Maan2003", "email": "manmeetmann2003@gmail.com", "date": "2021-06-13T04:18:15Z"}, "committer": {"name": "Maan2003", "email": "manmeetmann2003@gmail.com", "date": "2021-06-13T04:18:15Z"}, "message": "cargo fmt", "tree": {"sha": "5109aa4e5ab163d687c1f7eb1de446cbd6a6cacd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5109aa4e5ab163d687c1f7eb1de446cbd6a6cacd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVt0Hfgx04mDvJfYh6a8CS6Y8cO0FAmDFhxcACgkQ6a8CS6Y8\ncO3QPg//QDmP61KPDuRqZ1TyxbwlAwux5ZkfQ9ow/78QZV3GiD1sTR9f0NNCzA6S\nf/Z/n163yql4XDSCGaB8cfRHKmy7D2ms0sXt4yNEQo/2hgh0/K7I3F/IdkjEmn3a\n8+vA1xvGxuR0JOYjaS2LFhcZxzEI+yvQvZ5Ay8bOi50iyTzJD69ZPQ5ced4hVkoP\nc73QQuegL27ye33l/n1GJA3poDUxMq+2gu3coNpHN0D/0uZncp7XCO5Kn+jBpwPT\ncQcA08KB1p98cnPrFo5yVbHmts10uhEHx7thpA/pxgX9yaEkPiOSb9edO421mOTQ\nF4+3Et3DbaPIIsdxKEf2d+28AejWAJIm9q/w080d7u1kABU7C4uNbKbqle6qWS+e\n/QmnyZByVrA34KfrFGc8+G6Keq9Mpwv8jdqt5U2AarRcKsMQhPTuo7NSk9WpBSim\nj+ohLBqAuQfnVp9ebzhVVbxJbgZ8IukF1LAWMuC8P82ZjcrlVeeZjPjrrMcHlTJL\nCUEEp+ywQy01rBpnGuosapNNgOn33OExz3XzJkZTTkFUWfDlXp8fD+t4cWm8hUc3\nk7UwEJRnuyfJbla+ePp/nVpAcQU3zlf0mc7wt8vUakkgrcAx2bK7yE2oh+TLOs9g\n9tk4LYruWtLpiNgM4E4ZgphfP7SQG7A79ZnoSPcIvN2Z53GNc3Y=\n=tlBw\n-----END PGP SIGNATURE-----", "payload": "tree 5109aa4e5ab163d687c1f7eb1de446cbd6a6cacd\nparent aabd41cafc1a79f5ad124a31a360ab0442c13efd\nauthor Maan2003 <manmeetmann2003@gmail.com> 1623557895 +0530\ncommitter Maan2003 <manmeetmann2003@gmail.com> 1623557895 +0530\n\ncargo fmt\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c", "html_url": "https://github.com/rust-lang/rust/commit/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/comments", "author": {"login": "Maan2003", "id": 49202620, "node_id": "MDQ6VXNlcjQ5MjAyNjIw", "avatar_url": "https://avatars.githubusercontent.com/u/49202620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maan2003", "html_url": "https://github.com/Maan2003", "followers_url": "https://api.github.com/users/Maan2003/followers", "following_url": "https://api.github.com/users/Maan2003/following{/other_user}", "gists_url": "https://api.github.com/users/Maan2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maan2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maan2003/subscriptions", "organizations_url": "https://api.github.com/users/Maan2003/orgs", "repos_url": "https://api.github.com/users/Maan2003/repos", "events_url": "https://api.github.com/users/Maan2003/events{/privacy}", "received_events_url": "https://api.github.com/users/Maan2003/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Maan2003", "id": 49202620, "node_id": "MDQ6VXNlcjQ5MjAyNjIw", "avatar_url": "https://avatars.githubusercontent.com/u/49202620?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Maan2003", "html_url": "https://github.com/Maan2003", "followers_url": "https://api.github.com/users/Maan2003/followers", "following_url": "https://api.github.com/users/Maan2003/following{/other_user}", "gists_url": "https://api.github.com/users/Maan2003/gists{/gist_id}", "starred_url": "https://api.github.com/users/Maan2003/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Maan2003/subscriptions", "organizations_url": "https://api.github.com/users/Maan2003/orgs", "repos_url": "https://api.github.com/users/Maan2003/repos", "events_url": "https://api.github.com/users/Maan2003/events{/privacy}", "received_events_url": "https://api.github.com/users/Maan2003/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aabd41cafc1a79f5ad124a31a360ab0442c13efd", "url": "https://api.github.com/repos/rust-lang/rust/commits/aabd41cafc1a79f5ad124a31a360ab0442c13efd", "html_url": "https://github.com/rust-lang/rust/commit/aabd41cafc1a79f5ad124a31a360ab0442c13efd"}], "stats": {"total": 99, "additions": 38, "deletions": 61}, "files": [{"sha": "303083c6d2ea7992cc13c57e53e323fe606291d0", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=5ac6804bb3a07b959e8c2c3534255a8d6bb4948c", "patch": "@@ -731,12 +731,11 @@ fn macro_call_as_call_id(\n         )\n         .map(MacroCallId::from)\n     } else {\n-        Ok(def\n-            .as_lazy_macro(\n-                db.upcast(),\n-                krate,\n-                MacroCallKind::FnLike { ast_id: call.ast_id, fragment },\n-            ))\n+        Ok(def.as_lazy_macro(\n+            db.upcast(),\n+            krate,\n+            MacroCallKind::FnLike { ast_id: call.ast_id, fragment },\n+        ))\n     };\n     Ok(res)\n }\n@@ -755,16 +754,15 @@ fn derive_macro_as_call_id(\n         .segments()\n         .last()\n         .ok_or_else(|| UnresolvedMacro { path: item_attr.path.clone() })?;\n-    let res = def\n-        .as_lazy_macro(\n-            db.upcast(),\n-            krate,\n-            MacroCallKind::Derive {\n-                ast_id: item_attr.ast_id,\n-                derive_name: last_segment.to_string(),\n-                derive_attr_index: derive_attr.ast_index,\n-            },\n-        );\n+    let res = def.as_lazy_macro(\n+        db.upcast(),\n+        krate,\n+        MacroCallKind::Derive {\n+            ast_id: item_attr.ast_id,\n+            derive_name: last_segment.to_string(),\n+            derive_attr_index: derive_attr.ast_index,\n+        },\n+    );\n     Ok(res)\n }\n \n@@ -792,16 +790,15 @@ fn attr_macro_as_call_id(\n     // The parentheses are always disposed here.\n     arg.delimiter = None;\n \n-    let res = def\n-        .as_lazy_macro(\n-            db.upcast(),\n-            krate,\n-            MacroCallKind::Attr {\n-                ast_id: item_attr.ast_id,\n-                attr_name: last_segment.to_string(),\n-                attr_args: arg,\n-                invoc_attr_index: macro_attr.id.ast_index,\n-            },\n-        );\n+    let res = def.as_lazy_macro(\n+        db.upcast(),\n+        krate,\n+        MacroCallKind::Attr {\n+            ast_id: item_attr.ast_id,\n+            attr_name: last_segment.to_string(),\n+            attr_args: arg,\n+            invoc_attr_index: macro_attr.id.ast_index,\n+        },\n+    );\n     Ok(res)\n }"}, {"sha": "ddafaddf73b9ca22fde4981f203a14df2df92418", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=5ac6804bb3a07b959e8c2c3534255a8d6bb4948c", "patch": "@@ -177,12 +177,11 @@ fn lazy_expand(\n     let ast_id = db.ast_id_map(macro_call.file_id).ast_id(&macro_call.value);\n \n     let fragment = crate::to_fragment_kind(&macro_call.value);\n-    let id: MacroCallId = def\n-        .as_lazy_macro(\n-            db,\n-            krate,\n-            MacroCallKind::FnLike { ast_id: macro_call.with_value(ast_id), fragment },\n-        );\n+    let id: MacroCallId = def.as_lazy_macro(\n+        db,\n+        krate,\n+        MacroCallKind::FnLike { ast_id: macro_call.with_value(ast_id), fragment },\n+    );\n \n     let err = db.macro_expand_error(id);\n     let value = db.parse_or_expand(id.as_file()).map(|node| InFile::new(id.as_file(), node));"}, {"sha": "34c3f6bd9127f0ebc1690764de760b1e01ca1915", "filename": "crates/hir_ty/src/chalk_db.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs?ref=5ac6804bb3a07b959e8c2c3534255a8d6bb4948c", "patch": "@@ -430,8 +430,7 @@ pub(crate) fn trait_datum_query(\n         fundamental: false,\n     };\n     let where_clauses = convert_where_clauses(db, trait_.into(), &bound_vars);\n-    let associated_ty_ids =\n-        trait_data.associated_types().map(to_assoc_type_id).collect();\n+    let associated_ty_ids = trait_data.associated_types().map(to_assoc_type_id).collect();\n     let trait_datum_bound = rust_ir::TraitDatumBound { where_clauses };\n     let well_known =\n         lang_attr(db.upcast(), trait_).and_then(|name| well_known_trait_from_lang_attr(&name));"}, {"sha": "5ea2e5934c88484dc1cfc5c020e40265a78487aa", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=5ac6804bb3a07b959e8c2c3534255a8d6bb4948c", "patch": "@@ -327,13 +327,7 @@ impl<'a> InferenceContext<'a> {\n                 self.normalize_associated_types_in(ret_ty)\n             }\n             Expr::MethodCall { receiver, args, method_name, generic_args } => self\n-                .infer_method_call(\n-                    tgt_expr,\n-                    *receiver,\n-                    args,\n-                    method_name,\n-                    generic_args.as_deref(),\n-                ),\n+                .infer_method_call(tgt_expr, *receiver, args, method_name, generic_args.as_deref()),\n             Expr::Match { expr, arms } => {\n                 let input_ty = self.infer_expr(*expr, &Expectation::none());\n "}, {"sha": "7a53268e867c90c40ceeeaa3c153ba97652a4d0f", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=5ac6804bb3a07b959e8c2c3534255a8d6bb4948c", "patch": "@@ -526,11 +526,9 @@ fn highlight_name_ref_by_syntax(\n     };\n \n     match parent.kind() {\n-        METHOD_CALL_EXPR => {\n-            ast::MethodCallExpr::cast(parent)\n-                .and_then(|it| highlight_method_call(sema, krate, &it))\n-                .unwrap_or_else(|| SymbolKind::Function.into())\n-        }\n+        METHOD_CALL_EXPR => ast::MethodCallExpr::cast(parent)\n+            .and_then(|it| highlight_method_call(sema, krate, &it))\n+            .unwrap_or_else(|| SymbolKind::Function.into()),\n         FIELD_EXPR => {\n             let h = HlTag::Symbol(SymbolKind::Field);\n             let is_union = ast::FieldExpr::cast(parent)"}, {"sha": "36a2bf89ae073e8c5d187272f6ff34a375e03d73", "filename": "crates/ide_assists/src/assist_context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fide_assists%2Fsrc%2Fassist_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fassist_context.rs?ref=5ac6804bb3a07b959e8c2c3534255a8d6bb4948c", "patch": "@@ -291,8 +291,7 @@ impl AssistBuilder {\n         algo::diff(old.syntax(), new.syntax()).into_text_edit(&mut self.edit)\n     }\n     pub(crate) fn create_file(&mut self, dst: AnchoredPathBuf, content: impl Into<String>) {\n-        let file_system_edit =\n-            FileSystemEdit::CreateFile { dst, initial_contents: content.into() };\n+        let file_system_edit = FileSystemEdit::CreateFile { dst, initial_contents: content.into() };\n         self.source_change.push_file_system_edit(file_system_edit);\n     }\n "}, {"sha": "a840e06a6049d51d05efd67e0946a661c8b99800", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=5ac6804bb3a07b959e8c2c3534255a8d6bb4948c", "patch": "@@ -490,9 +490,7 @@ impl<'a> FindUsages<'a> {\n             Some(NameRefClass::FieldShorthand { local_ref: local, field_ref: field }) => {\n                 let FileRange { file_id, range } = self.sema.original_range(name_ref.syntax());\n                 let access = match self.def {\n-                    Definition::Field(_) if field == self.def => {\n-                        reference_access(&field, name_ref)\n-                    }\n+                    Definition::Field(_) if field == self.def => reference_access(&field, name_ref),\n                     Definition::Local(l) if local == l => {\n                         reference_access(&Definition::Local(local), name_ref)\n                     }"}, {"sha": "38eac6c17fa8e3f8a7a815f66111c7e692941b8a", "filename": "crates/proc_macro_api/src/process.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_api%2Fsrc%2Fprocess.rs?ref=5ac6804bb3a07b959e8c2c3534255a8d6bb4948c", "patch": "@@ -76,9 +76,7 @@ impl ProcMacroProcessSrv {\n             .map_err(|_| tt::ExpansionError::Unknown(\"proc macro server crashed\".into()))?;\n \n         match res {\n-            Some(Response::Error(err)) => {\n-                Err(tt::ExpansionError::ExpansionError(err.message))\n-            }\n+            Some(Response::Error(err)) => Err(tt::ExpansionError::ExpansionError(err.message)),\n             Some(res) => Ok(res.try_into().map_err(|err| {\n                 tt::ExpansionError::Unknown(format!(\"Fail to get response, reason : {:#?} \", err))\n             })?),"}, {"sha": "9ceda2a479234840e6e75f47187d399acd55d842", "filename": "crates/proc_macro_srv/src/proc_macro/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac6804bb3a07b959e8c2c3534255a8d6bb4948c/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Fproc_macro%2Fdiagnostic.rs?ref=5ac6804bb3a07b959e8c2c3534255a8d6bb4948c", "patch": "@@ -101,12 +101,7 @@ impl Diagnostic {\n         S: MultiSpan,\n         T: Into<String>,\n     {\n-        Diagnostic {\n-            level,\n-            message: message.into(),\n-            spans: spans.into_spans(),\n-            children: vec![],\n-        }\n+        Diagnostic { level, message: message.into(), spans: spans.into_spans(), children: vec![] }\n     }\n \n     diagnostic_child_methods!(span_error, error, Level::Error);"}]}