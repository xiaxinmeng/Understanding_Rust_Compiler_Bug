{"sha": "4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "node_id": "C_kwDOAAsO6NoAKDRhYTc4NzliNTU5Y2NmN2Y4MmJjY2UyYThlNTMyZWEzMDc2OTdlYTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-30T01:40:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-30T01:40:30Z"}, "message": "Auto merge of #89110 - Aaron1011:adjustment-span, r=estebank\n\nUse larger span for adjustment THIR expressions\n\nCurrently, we use a relatively 'small' span for THIR\nexpressions generated by an 'adjustment' (e.g. an autoderef,\nautoborrow, unsizing). As a result, if a borrow generated\nby an adustment ends up causing a borrowcheck error, for example:\n\n```rust\nlet mut my_var = String::new();\nlet my_ref = &my_var\nmy_var.push('a');\nmy_ref;\n```\n\nthen the span for the mutable borrow may end up referring\nto only the base expression (e.g. `my_var`), rather than\nthe method call which triggered the mutable borrow\n(e.g. `my_var.push('a')`)\n\nDue to a quirk of the MIR borrowck implementation,\nthis doesn't always get exposed in migration mode,\nbut it does in many cases.\n\nThis commit makes THIR building consistently use 'larger'\nspans for adjustment expressions. These spans are recoded\nwhen we first create the adjustment during typecheck. For\nexample, an autoref adjustment triggered by a method call\nwill record the span of the entire method call.\n\nThe intent of this change it make it clearer to users\nwhen it's the specific way in which a variable is\nused (for example, in a method call) that produdes\na borrowcheck error. For example, an error message\nclaiming that a 'mutable borrow occurs here' might\nbe confusing if it just points at a usage of a variable\n(e.g. `my_var`), when no `&mut` is in sight. Pointing\nat the entire expression should help to emphasize\nthat the method call itself is responsible for\nthe mutable borrow.\n\nIn several cases, this makes the `#![feature(nll)]` diagnostic\noutput match up exactly with the default (migration mode) output.\nAs a result, several `.nll.stderr` files end up getting removed\nentirely.", "tree": {"sha": "393753bcad9b7b9d238c34eed23e40e8e6d54581", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/393753bcad9b7b9d238c34eed23e40e8e6d54581"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "html_url": "https://github.com/rust-lang/rust/commit/4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24a789b666f2c36d443cde48b5baef04e5b3c76d", "url": "https://api.github.com/repos/rust-lang/rust/commits/24a789b666f2c36d443cde48b5baef04e5b3c76d", "html_url": "https://github.com/rust-lang/rust/commit/24a789b666f2c36d443cde48b5baef04e5b3c76d"}, {"sha": "4d66986e090abed11c1aae9602f23385f94154fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d66986e090abed11c1aae9602f23385f94154fa", "html_url": "https://github.com/rust-lang/rust/commit/4d66986e090abed11c1aae9602f23385f94154fa"}], "stats": {"total": 1036, "additions": 453, "deletions": 583}, "files": [{"sha": "17296a95bc17e26e2c6560ea91001e977c8841e7", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -39,10 +39,17 @@ impl<'tcx> Cx<'tcx> {\n \n         let mut expr = self.make_mirror_unadjusted(hir_expr);\n \n+        let adjustment_span = match self.adjustment_span {\n+            Some((hir_id, span)) if hir_id == hir_expr.hir_id => Some(span),\n+            _ => None,\n+        };\n+\n         // Now apply adjustments, if any.\n         for adjustment in self.typeck_results.expr_adjustments(hir_expr) {\n             debug!(\"make_mirror: expr={:?} applying adjustment={:?}\", expr, adjustment);\n-            expr = self.apply_adjustment(hir_expr, expr, adjustment);\n+            let span = expr.span;\n+            expr =\n+                self.apply_adjustment(hir_expr, expr, adjustment, adjustment_span.unwrap_or(span));\n         }\n \n         // Next, wrap this up in the expr's scope.\n@@ -82,8 +89,9 @@ impl<'tcx> Cx<'tcx> {\n         hir_expr: &'tcx hir::Expr<'tcx>,\n         mut expr: Expr<'tcx>,\n         adjustment: &Adjustment<'tcx>,\n+        mut span: Span,\n     ) -> Expr<'tcx> {\n-        let Expr { temp_lifetime, mut span, .. } = expr;\n+        let Expr { temp_lifetime, .. } = expr;\n \n         // Adjust the span from the block, to the last expression of the\n         // block. This is a better span when returning a mutable reference\n@@ -150,14 +158,21 @@ impl<'tcx> Cx<'tcx> {\n \n     fn make_mirror_unadjusted(&mut self, expr: &'tcx hir::Expr<'tcx>) -> Expr<'tcx> {\n         let expr_ty = self.typeck_results().expr_ty(expr);\n+        let expr_span = expr.span;\n         let temp_lifetime = self.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n \n         let kind = match expr.kind {\n             // Here comes the interesting stuff:\n             hir::ExprKind::MethodCall(_, method_span, ref args, fn_span) => {\n                 // Rewrite a.b(c) into UFCS form like Trait::b(a, c)\n                 let expr = self.method_callee(expr, method_span, None);\n+                // When we apply adjustments to the receiver, use the span of\n+                // the overall method call for better diagnostics. args[0]\n+                // is guaranteed to exist, since a method call always has a receiver.\n+                let old_adjustment_span = self.adjustment_span.replace((args[0].hir_id, expr_span));\n+                tracing::info!(\"Using method span: {:?}\", expr.span);\n                 let args = self.mirror_exprs(args);\n+                self.adjustment_span = old_adjustment_span;\n                 ExprKind::Call {\n                     ty: expr.ty,\n                     fun: self.thir.exprs.push(expr),"}, {"sha": "38a4676bd1561c869bbbb79f0ea8f01bf9061eb7", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -9,6 +9,7 @@ use rustc_ast as ast;\n use rustc_data_structures::steal::Steal;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n+use rustc_hir::HirId;\n use rustc_hir::Node;\n use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::{LitToConstError, LitToConstInput};\n@@ -46,6 +47,14 @@ struct Cx<'tcx> {\n     crate region_scope_tree: &'tcx region::ScopeTree,\n     crate typeck_results: &'tcx ty::TypeckResults<'tcx>,\n \n+    /// When applying adjustments to the expression\n+    /// with the given `HirId`, use the given `Span`,\n+    /// instead of the usual span. This is used to\n+    /// assign the span of an overall method call\n+    /// (e.g. `my_val.foo()`) to the adjustment expressions\n+    /// for the receiver.\n+    adjustment_span: Option<(HirId, Span)>,\n+\n     /// The `DefId` of the owner of this body.\n     body_owner: DefId,\n }\n@@ -60,6 +69,7 @@ impl<'tcx> Cx<'tcx> {\n             region_scope_tree: tcx.region_scope_tree(def.did),\n             typeck_results,\n             body_owner: def.did.to_def_id(),\n+            adjustment_span: None,\n         }\n     }\n "}, {"sha": "bec0fa9c0495722bfa36bae10fe39d58c034ff19", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -1,7 +1,7 @@\n // MIR for `BAR::promoted[0]` after SimplifyCfg-elaborate-drops\n \n promoted[0] in BAR: &[&i32; 1] = {\n-    let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n+    let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n     let mut _1: [&i32; 1];               // in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n     let mut _2: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n     let mut _3: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n@@ -16,8 +16,8 @@ promoted[0] in BAR: &[&i32; 1] = {\n                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }\n         _2 = &(*_3);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n         _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-        _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n+        _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n+        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n     }\n }\n "}, {"sha": "bdd62f1029f51ddb55ca0dfda88daa978f240cf5", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -3,21 +3,21 @@\n   \n   static mut BAR: *const &i32 = {\n       let mut _0: *const &i32;             // return place in scope 0 at $DIR/const-promotion-extern-static.rs:9:17: 9:28\n-      let mut _1: &[&i32];                 // in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-      let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n+      let mut _1: &[&i32];                 // in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n+      let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n       let _3: [&i32; 1];                   // in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n       let mut _4: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n       let _5: &i32;                        // in scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n-+     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n++     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-          StorageLive(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n+          StorageLive(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n+          StorageLive(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n -         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n -         StorageLive(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n -         _5 = const {alloc1: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n-+         _6 = const BAR::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n++         _6 = const BAR::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n                                            // ty::Const\n -                                          // + ty: &i32\n -                                          // + val: Value(Scalar(alloc1))\n@@ -28,11 +28,11 @@\n -                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc1)) }\n -         _4 = &(*_5);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n--         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-+                                          // + span: $DIR/const-promotion-extern-static.rs:9:31: 9:35\n+-         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n++                                          // + span: $DIR/const-promotion-extern-static.rs:9:31: 9:44\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[55e6]::BAR), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n-+         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n-          _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n++         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n+          _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n -         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:34: 9:35\n           StorageDead(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:34: 9:35\n           _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44"}, {"sha": "c01b31525b6a6ee0ffa906bf53f9f30cfb558f4d", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO-promoted[0].SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO-promoted%5B0%5D.SimplifyCfg-elaborate-drops.after.mir?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -1,7 +1,7 @@\n // MIR for `FOO::promoted[0]` after SimplifyCfg-elaborate-drops\n \n promoted[0] in FOO: &[&i32; 1] = {\n-    let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n+    let mut _0: &[&i32; 1];              // return place in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n     let mut _1: [&i32; 1];               // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n     let mut _2: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n     let mut _3: *const i32;              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n@@ -16,8 +16,8 @@ promoted[0] in FOO: &[&i32; 1] = {\n                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }\n         _2 = &(*_3);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n         _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-        _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n+        _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n+        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n     }\n }\n "}, {"sha": "94b337806aff8f19f4acd166eecaa52f45fe150b", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -3,23 +3,23 @@\n   \n   static mut FOO: *const &i32 = {\n       let mut _0: *const &i32;             // return place in scope 0 at $DIR/const-promotion-extern-static.rs:13:17: 13:28\n-      let mut _1: &[&i32];                 // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-      let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n+      let mut _1: &[&i32];                 // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n+      let mut _2: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n       let _3: [&i32; 1];                   // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n       let mut _4: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n       let _5: *const i32;                  // in scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n-+     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n++     let mut _6: &[&i32; 1];              // in scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n       scope 1 {\n       }\n   \n       bb0: {\n-          StorageLive(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-          StorageLive(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n+          StorageLive(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n+          StorageLive(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n -         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n -         StorageLive(_5);                 // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n -         _5 = const {alloc3: *const i32}; // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n-+         _6 = const FOO::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n++         _6 = const FOO::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n                                            // ty::Const\n -                                          // + ty: *const i32\n -                                          // + val: Value(Scalar(alloc3))\n@@ -30,11 +30,11 @@\n -                                          // + literal: Const { ty: *const i32, val: Value(Scalar(alloc3)) }\n -         _4 = &(*_5);                     // scope 1 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n--         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-+                                          // + span: $DIR/const-promotion-extern-static.rs:13:31: 13:46\n+-         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n++                                          // + span: $DIR/const-promotion-extern-static.rs:13:31: 13:55\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[55e6]::FOO), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n-+         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n-          _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n++         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n+          _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n -         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:45: 13:46\n           StorageDead(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:45: 13:46\n           _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55"}, {"sha": "7695afded3da367a0f295a3ecf49f3fb75599412", "filename": "src/test/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,7 +5,7 @@\n       debug s => _1;                       // in scope 0 at $DIR/deduplicate_blocks.rs:2:36: 2:37\n       let mut _0: bool;                    // return place in scope 0 at $DIR/deduplicate_blocks.rs:2:48: 2:52\n       let mut _2: &[u8];                   // in scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-      let mut _3: &str;                    // in scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:12\n+      let mut _3: &str;                    // in scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n       let mut _4: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n       let mut _5: bool;                    // in scope 0 at $DIR/deduplicate_blocks.rs:5:9: 5:31\n       let mut _6: usize;                   // in scope 0 at $DIR/deduplicate_blocks.rs:4:9: 4:37\n@@ -19,8 +19,8 @@\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n-          StorageLive(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:12\n-          _3 = _1;                         // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:12\n+          StorageLive(_3);                 // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n+          _3 = _1;                         // scope 0 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n           StorageLive(_8);                 // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n           _8 = _3;                         // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23\n -         _2 = transmute::<&str, &[u8]>(move _8) -> bb14; // scope 2 at $DIR/deduplicate_blocks.rs:3:11: 3:23"}, {"sha": "000bc6343257b57ad4b9bcec27fc3ad2ef7bd860", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,9 +7,9 @@\n       debug upper => _3;                   // in scope 0 at $DIR/funky_arms.rs:11:69: 11:74\n       let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at $DIR/funky_arms.rs:11:85: 11:91\n       let _4: bool;                        // in scope 0 at $DIR/funky_arms.rs:15:9: 15:19\n-      let mut _5: &std::fmt::Formatter;    // in scope 0 at $DIR/funky_arms.rs:15:22: 15:25\n+      let mut _5: &std::fmt::Formatter;    // in scope 0 at $DIR/funky_arms.rs:15:22: 15:37\n       let mut _7: std::option::Option<usize>; // in scope 0 at $DIR/funky_arms.rs:24:30: 24:45\n-      let mut _8: &std::fmt::Formatter;    // in scope 0 at $DIR/funky_arms.rs:24:30: 24:33\n+      let mut _8: &std::fmt::Formatter;    // in scope 0 at $DIR/funky_arms.rs:24:30: 24:45\n       let mut _9: isize;                   // in scope 0 at $DIR/funky_arms.rs:24:12: 24:27\n       let mut _11: &mut std::fmt::Formatter; // in scope 0 at $DIR/funky_arms.rs:26:43: 26:46\n       let mut _12: &T;                     // in scope 0 at $DIR/funky_arms.rs:26:48: 26:51\n@@ -36,8 +36,8 @@\n   \n       bb0: {\n           StorageLive(_4);                 // scope 0 at $DIR/funky_arms.rs:15:9: 15:19\n-          StorageLive(_5);                 // scope 0 at $DIR/funky_arms.rs:15:22: 15:25\n-          _5 = &(*_1);                     // scope 0 at $DIR/funky_arms.rs:15:22: 15:25\n+          StorageLive(_5);                 // scope 0 at $DIR/funky_arms.rs:15:22: 15:37\n+          _5 = &(*_1);                     // scope 0 at $DIR/funky_arms.rs:15:22: 15:37\n           _4 = Formatter::sign_plus(move _5) -> bb1; // scope 0 at $DIR/funky_arms.rs:15:22: 15:37\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:15:26: 15:35\n@@ -62,8 +62,8 @@\n   \n       bb4: {\n           StorageLive(_7);                 // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n-          StorageLive(_8);                 // scope 2 at $DIR/funky_arms.rs:24:30: 24:33\n-          _8 = &(*_1);                     // scope 2 at $DIR/funky_arms.rs:24:30: 24:33\n+          StorageLive(_8);                 // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n+          _8 = &(*_1);                     // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n           _7 = Formatter::precision(move _8) -> bb5; // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n                                            // mir::Constant\n                                            // + span: $DIR/funky_arms.rs:24:34: 24:43"}, {"sha": "7379d5f219c48fb47fb34574884acc9380fce73a", "filename": "src/test/mir-opt/inline/inline_shims.clone.Inline.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_shims.clone.Inline.diff?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,13 +4,13 @@\n   fn clone(_1: fn(A, B)) -> fn(A, B) {\n       debug f => _1;                       // in scope 0 at $DIR/inline-shims.rs:5:20: 5:21\n       let mut _0: fn(A, B);                // return place in scope 0 at $DIR/inline-shims.rs:5:36: 5:44\n-      let mut _2: &fn(A, B);               // in scope 0 at $DIR/inline-shims.rs:6:5: 6:6\n+      let mut _2: &fn(A, B);               // in scope 0 at $DIR/inline-shims.rs:6:5: 6:14\n +     scope 1 (inlined <fn(A, B) as Clone>::clone - shim(fn(A, B))) { // at $DIR/inline-shims.rs:6:5: 6:14\n +     }\n   \n       bb0: {\n-          StorageLive(_2);                 // scope 0 at $DIR/inline-shims.rs:6:5: 6:6\n-          _2 = &_1;                        // scope 0 at $DIR/inline-shims.rs:6:5: 6:6\n+          StorageLive(_2);                 // scope 0 at $DIR/inline-shims.rs:6:5: 6:14\n+          _2 = &_1;                        // scope 0 at $DIR/inline-shims.rs:6:5: 6:14\n -         _0 = <fn(A, B) as Clone>::clone(move _2) -> bb1; // scope 0 at $DIR/inline-shims.rs:6:5: 6:14\n -                                          // mir::Constant\n -                                          // + span: $DIR/inline-shims.rs:6:7: 6:12"}, {"sha": "0be979901ac0338ef4e5b708d2f98eba0c052648", "filename": "src/test/mir-opt/inline/inline_trait_method.test.Inline.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method.test.Inline.after.mir?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -3,11 +3,11 @@\n fn test(_1: &dyn X) -> u32 {\n     debug x => _1;                       // in scope 0 at $DIR/inline-trait-method.rs:8:9: 8:10\n     let mut _0: u32;                     // return place in scope 0 at $DIR/inline-trait-method.rs:8:23: 8:26\n-    let mut _2: &dyn X;                  // in scope 0 at $DIR/inline-trait-method.rs:9:5: 9:6\n+    let mut _2: &dyn X;                  // in scope 0 at $DIR/inline-trait-method.rs:9:5: 9:10\n \n     bb0: {\n-        StorageLive(_2);                 // scope 0 at $DIR/inline-trait-method.rs:9:5: 9:6\n-        _2 = &(*_1);                     // scope 0 at $DIR/inline-trait-method.rs:9:5: 9:6\n+        StorageLive(_2);                 // scope 0 at $DIR/inline-trait-method.rs:9:5: 9:10\n+        _2 = &(*_1);                     // scope 0 at $DIR/inline-trait-method.rs:9:5: 9:10\n         _0 = <dyn X as X>::y(move _2) -> bb1; // scope 0 at $DIR/inline-trait-method.rs:9:5: 9:10\n                                          // mir::Constant\n                                          // + span: $DIR/inline-trait-method.rs:9:7: 9:8"}, {"sha": "1b5153daa8ba8c52e654ba5aab258be33b84baf2", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,7 +5,7 @@ fn a(_1: &mut [T]) -> &mut [T] {\n     let mut _0: &mut [T];                // return place in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:2:29: 2:37\n     let mut _2: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n     let mut _3: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-    let mut _4: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n+    let mut _4: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n     scope 1 (inlined <[T] as AsMut<[T]>>::as_mut) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         debug self => _4;                // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         let mut _5: &mut [T];            // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n@@ -14,8 +14,8 @@ fn a(_1: &mut [T]) -> &mut [T] {\n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n-        StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n-        _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n+        StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n+        _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         StorageLive(_5);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         _5 = &mut (*_4);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         _3 = &mut (*_5);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15"}, {"sha": "257ddec780e93668ea42bb3cd3e0bcbc9b84f9c4", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,7 +5,7 @@ fn b(_1: &mut Box<T>) -> &mut T {\n     let mut _0: &mut T;                  // return place in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:7:32: 7:38\n     let mut _2: &mut T;                  // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n     let mut _3: &mut T;                  // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-    let mut _4: &mut std::boxed::Box<T>; // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:6\n+    let mut _4: &mut std::boxed::Box<T>; // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n     scope 1 (inlined <Box<T> as AsMut<T>>::as_mut) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         debug self => _4;                // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         let mut _5: &mut T;              // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n@@ -15,8 +15,8 @@ fn b(_1: &mut Box<T>) -> &mut T {\n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n-        StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:6\n-        _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:6\n+        StorageLive(_4);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n+        _4 = &mut (*_1);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageLive(_5);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         StorageLive(_6);                 // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         _6 = &mut (*(*_4));              // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15"}, {"sha": "9817e8cd5fa4d51cc07a78bc8c643841234ce917", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,15 +4,15 @@ fn c(_1: &[T]) -> &[T] {\n     debug x => _1;                       // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:12:13: 12:14\n     let mut _0: &[T];                    // return place in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:12:25: 12:29\n     let _2: &[T];                        // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n-    let mut _3: &[T];                    // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:6\n+    let mut _3: &[T];                    // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n     scope 1 (inlined <[T] as AsRef<[T]>>::as_ref) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n         debug self => _3;                // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:6\n-        _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:6\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n+        _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n         _2 = _3;                         // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n         _0 = &(*_2);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n         StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:14: 13:15"}, {"sha": "e49c91581b3cd5add76f405bd6aee272fb4f10c1", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,15 +4,15 @@ fn d(_1: &Box<T>) -> &T {\n     debug x => _1;                       // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:17:13: 17:14\n     let mut _0: &T;                      // return place in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:17:28: 17:30\n     let _2: &T;                          // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n-    let mut _3: &std::boxed::Box<T>;     // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:6\n+    let mut _3: &std::boxed::Box<T>;     // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n     scope 1 (inlined <Box<T> as AsRef<T>>::as_ref) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         debug self => _3;                // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n     }\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n-        StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:6\n-        _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:6\n+        StorageLive(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n+        _3 = &(*_1);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         _2 = &(*(*_3));                  // scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         _0 = &(*_2);                     // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         StorageDead(_3);                 // scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:14: 18:15"}, {"sha": "13241d882f21087cbf63a9d2ec1b8ea4e2935bfc", "filename": "src/test/mir-opt/lower_slice_len.bound.LowerSliceLenCalls.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_slice_len.bound.LowerSliceLenCalls.diff?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -8,7 +8,7 @@\n       let mut _3: bool;                    // in scope 0 at $DIR/lower_slice_len.rs:5:8: 5:27\n       let mut _4: usize;                   // in scope 0 at $DIR/lower_slice_len.rs:5:8: 5:13\n       let mut _5: usize;                   // in scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n-      let mut _6: &[u8];                   // in scope 0 at $DIR/lower_slice_len.rs:5:16: 5:21\n+      let mut _6: &[u8];                   // in scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n       let _7: usize;                       // in scope 0 at $DIR/lower_slice_len.rs:6:15: 6:20\n       let mut _8: usize;                   // in scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n       let mut _9: bool;                    // in scope 0 at $DIR/lower_slice_len.rs:6:9: 6:21\n@@ -18,8 +18,8 @@\n           StorageLive(_4);                 // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:13\n           _4 = _1;                         // scope 0 at $DIR/lower_slice_len.rs:5:8: 5:13\n           StorageLive(_5);                 // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n-          StorageLive(_6);                 // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:21\n-          _6 = &(*_2);                     // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:21\n+          StorageLive(_6);                 // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n+          _6 = &(*_2);                     // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n -         _5 = core::slice::<impl [u8]>::len(move _6) -> bb1; // scope 0 at $DIR/lower_slice_len.rs:5:16: 5:27\n -                                          // mir::Constant\n -                                          // + span: $DIR/lower_slice_len.rs:5:22: 5:25"}, {"sha": "5c55ee4b9bb40e2ec75f5490776c131597e107d2", "filename": "src/test/mir-opt/no_spurious_drop_after_call.main.ElaborateDrops.before.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_spurious_drop_after_call.main.ElaborateDrops.before.mir?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,13 +4,13 @@ fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/no-spurious-drop-after-call.rs:8:11: 8:11\n     let _1: ();                          // in scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n     let mut _2: std::string::String;     // in scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n-    let mut _3: &str;                    // in scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n+    let mut _3: &str;                    // in scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n     let _4: &str;                        // in scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n \n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:5: 9:35\n         StorageLive(_2);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n-        StorageLive(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n+        StorageLive(_3);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n         StorageLive(_4);                 // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n         _4 = const \"\";                   // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n                                          // ty::Const\n@@ -19,7 +19,7 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [], len: Size { raw: 0 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 0 }) }\n-        _3 = &(*_4);                     // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:22\n+        _3 = &(*_4);                     // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n         _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at $DIR/no-spurious-drop-after-call.rs:9:20: 9:34\n                                          // mir::Constant\n                                          // + span: $DIR/no-spurious-drop-after-call.rs:9:23: 9:32"}, {"sha": "f1a1f388c501a095a4e53ad71680ddf04e0f07da", "filename": "src/test/mir-opt/receiver_ptr_mutability.main.mir_map.0.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Freceiver_ptr_mutability.main.mir_map.0.mir?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -10,15 +10,15 @@ fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/receiver-ptr-mutability.rs:13:11: 13:11\n     let _1: *mut Test as UserTypeProjection { base: UserType(0), projs: [] }; // in scope 0 at $DIR/receiver-ptr-mutability.rs:14:9: 14:12\n     let _2: ();                          // in scope 0 at $DIR/receiver-ptr-mutability.rs:15:5: 15:12\n-    let mut _3: *const Test;             // in scope 0 at $DIR/receiver-ptr-mutability.rs:15:5: 15:8\n+    let mut _3: *const Test;             // in scope 0 at $DIR/receiver-ptr-mutability.rs:15:5: 15:12\n     let mut _4: *mut Test;               // in scope 0 at $DIR/receiver-ptr-mutability.rs:15:5: 15:8\n     let _6: &&&&*mut Test;               // in scope 0 at $DIR/receiver-ptr-mutability.rs:18:34: 18:41\n     let _7: &&&*mut Test;                // in scope 0 at $DIR/receiver-ptr-mutability.rs:18:35: 18:41\n     let _8: &&*mut Test;                 // in scope 0 at $DIR/receiver-ptr-mutability.rs:18:36: 18:41\n     let _9: &*mut Test;                  // in scope 0 at $DIR/receiver-ptr-mutability.rs:18:37: 18:41\n     let _10: ();                         // in scope 0 at $DIR/receiver-ptr-mutability.rs:19:5: 19:16\n-    let mut _11: *const Test;            // in scope 0 at $DIR/receiver-ptr-mutability.rs:19:5: 19:12\n-    let mut _12: *mut Test;              // in scope 0 at $DIR/receiver-ptr-mutability.rs:19:5: 19:12\n+    let mut _11: *const Test;            // in scope 0 at $DIR/receiver-ptr-mutability.rs:19:5: 19:16\n+    let mut _12: *mut Test;              // in scope 0 at $DIR/receiver-ptr-mutability.rs:19:5: 19:16\n     scope 1 {\n         debug ptr => _1;                 // in scope 1 at $DIR/receiver-ptr-mutability.rs:14:9: 14:12\n         let _5: &&&&*mut Test as UserTypeProjection { base: UserType(2), projs: [] }; // in scope 1 at $DIR/receiver-ptr-mutability.rs:18:9: 18:16\n@@ -39,10 +39,10 @@ fn main() -> () {\n         FakeRead(ForLet(None), _1);      // scope 0 at $DIR/receiver-ptr-mutability.rs:14:9: 14:12\n         AscribeUserType(_1, o, UserTypeProjection { base: UserType(1), projs: [] }); // scope 0 at $DIR/receiver-ptr-mutability.rs:14:14: 14:23\n         StorageLive(_2);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:15:5: 15:12\n-        StorageLive(_3);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:15:5: 15:8\n+        StorageLive(_3);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:15:5: 15:12\n         StorageLive(_4);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:15:5: 15:8\n         _4 = _1;                         // scope 1 at $DIR/receiver-ptr-mutability.rs:15:5: 15:8\n-        _3 = move _4 as *const Test (Pointer(MutToConstPointer)); // scope 1 at $DIR/receiver-ptr-mutability.rs:15:5: 15:8\n+        _3 = move _4 as *const Test (Pointer(MutToConstPointer)); // scope 1 at $DIR/receiver-ptr-mutability.rs:15:5: 15:12\n         StorageDead(_4);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:15:7: 15:8\n         _2 = Test::x(move _3) -> [return: bb2, unwind: bb4]; // scope 1 at $DIR/receiver-ptr-mutability.rs:15:5: 15:12\n                                          // mir::Constant\n@@ -67,10 +67,10 @@ fn main() -> () {\n         AscribeUserType(_5, o, UserTypeProjection { base: UserType(3), projs: [] }); // scope 1 at $DIR/receiver-ptr-mutability.rs:18:18: 18:31\n         StorageDead(_6);                 // scope 1 at $DIR/receiver-ptr-mutability.rs:18:41: 18:42\n         StorageLive(_10);                // scope 2 at $DIR/receiver-ptr-mutability.rs:19:5: 19:16\n-        StorageLive(_11);                // scope 2 at $DIR/receiver-ptr-mutability.rs:19:5: 19:12\n-        StorageLive(_12);                // scope 2 at $DIR/receiver-ptr-mutability.rs:19:5: 19:12\n-        _12 = (*(*(*(*_5))));            // scope 2 at $DIR/receiver-ptr-mutability.rs:19:5: 19:12\n-        _11 = move _12 as *const Test (Pointer(MutToConstPointer)); // scope 2 at $DIR/receiver-ptr-mutability.rs:19:5: 19:12\n+        StorageLive(_11);                // scope 2 at $DIR/receiver-ptr-mutability.rs:19:5: 19:16\n+        StorageLive(_12);                // scope 2 at $DIR/receiver-ptr-mutability.rs:19:5: 19:16\n+        _12 = (*(*(*(*_5))));            // scope 2 at $DIR/receiver-ptr-mutability.rs:19:5: 19:16\n+        _11 = move _12 as *const Test (Pointer(MutToConstPointer)); // scope 2 at $DIR/receiver-ptr-mutability.rs:19:5: 19:16\n         StorageDead(_12);                // scope 2 at $DIR/receiver-ptr-mutability.rs:19:11: 19:12\n         _10 = Test::x(move _11) -> [return: bb3, unwind: bb4]; // scope 2 at $DIR/receiver-ptr-mutability.rs:19:5: 19:16\n                                          // mir::Constant"}, {"sha": "6bb92c5e6bca0bc7437778c9cf888e32b6564f4a", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,7 +4,7 @@ fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/retag.rs:29:11: 29:11\n     let mut _1: i32;                     // in scope 0 at $DIR/retag.rs:30:9: 30:14\n     let _2: ();                          // in scope 0 at $DIR/retag.rs:31:5: 37:6\n-    let mut _4: &Test;                   // in scope 0 at $DIR/retag.rs:32:17: 32:24\n+    let mut _4: &Test;                   // in scope 0 at $DIR/retag.rs:32:17: 32:36\n     let _5: Test;                        // in scope 0 at $DIR/retag.rs:32:17: 32:24\n     let mut _6: &mut i32;                // in scope 0 at $DIR/retag.rs:32:29: 32:35\n     let mut _7: &mut i32;                // in scope 0 at $DIR/retag.rs:32:29: 32:35\n@@ -15,7 +15,7 @@ fn main() -> () {\n     let mut _17: &i32;                   // in scope 0 at $DIR/retag.rs:44:16: 44:18\n     let _18: &i32;                       // in scope 0 at $DIR/retag.rs:44:16: 44:18\n     let _19: &i32;                       // in scope 0 at $DIR/retag.rs:47:5: 47:24\n-    let mut _20: &Test;                  // in scope 0 at $DIR/retag.rs:47:5: 47:12\n+    let mut _20: &Test;                  // in scope 0 at $DIR/retag.rs:47:5: 47:24\n     let _21: Test;                       // in scope 0 at $DIR/retag.rs:47:5: 47:12\n     let mut _22: &i32;                   // in scope 0 at $DIR/retag.rs:47:21: 47:23\n     let _23: &i32;                       // in scope 0 at $DIR/retag.rs:47:21: 47:23\n@@ -60,11 +60,11 @@ fn main() -> () {\n         _1 = const 0_i32;                // scope 0 at $DIR/retag.rs:30:17: 30:18\n         StorageLive(_2);                 // scope 1 at $DIR/retag.rs:31:5: 37:6\n         StorageLive(_3);                 // scope 1 at $DIR/retag.rs:32:13: 32:14\n-        StorageLive(_4);                 // scope 1 at $DIR/retag.rs:32:17: 32:24\n+        StorageLive(_4);                 // scope 1 at $DIR/retag.rs:32:17: 32:36\n         StorageLive(_5);                 // scope 1 at $DIR/retag.rs:32:17: 32:24\n         _5 = Test(const 0_i32);          // scope 1 at $DIR/retag.rs:32:17: 32:24\n-        _4 = &_5;                        // scope 1 at $DIR/retag.rs:32:17: 32:24\n-        Retag(_4);                       // scope 1 at $DIR/retag.rs:32:17: 32:24\n+        _4 = &_5;                        // scope 1 at $DIR/retag.rs:32:17: 32:36\n+        Retag(_4);                       // scope 1 at $DIR/retag.rs:32:17: 32:36\n         StorageLive(_6);                 // scope 1 at $DIR/retag.rs:32:29: 32:35\n         StorageLive(_7);                 // scope 1 at $DIR/retag.rs:32:29: 32:35\n         _7 = &mut _1;                    // scope 1 at $DIR/retag.rs:32:29: 32:35\n@@ -140,11 +140,11 @@ fn main() -> () {\n         StorageDead(_16);                // scope 6 at $DIR/retag.rs:44:18: 44:19\n         StorageDead(_18);                // scope 6 at $DIR/retag.rs:44:19: 44:20\n         StorageLive(_19);                // scope 7 at $DIR/retag.rs:47:5: 47:24\n-        StorageLive(_20);                // scope 7 at $DIR/retag.rs:47:5: 47:12\n+        StorageLive(_20);                // scope 7 at $DIR/retag.rs:47:5: 47:24\n         StorageLive(_21);                // scope 7 at $DIR/retag.rs:47:5: 47:12\n         _21 = Test(const 0_i32);         // scope 7 at $DIR/retag.rs:47:5: 47:12\n-        _20 = &_21;                      // scope 7 at $DIR/retag.rs:47:5: 47:12\n-        Retag(_20);                      // scope 7 at $DIR/retag.rs:47:5: 47:12\n+        _20 = &_21;                      // scope 7 at $DIR/retag.rs:47:5: 47:24\n+        Retag(_20);                      // scope 7 at $DIR/retag.rs:47:5: 47:24\n         StorageLive(_22);                // scope 7 at $DIR/retag.rs:47:21: 47:23\n         StorageLive(_23);                // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _28 = const main::promoted[0];   // scope 7 at $DIR/retag.rs:47:21: 47:23"}, {"sha": "0ec263c850e9eb80ac5726f736c230ccdf99a5a0", "filename": "src/test/ui/array-slice-vec/vec-mut-iter-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-mut-iter-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-mut-iter-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-mut-iter-borrow.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     for x in &mut xs {\n    |              first mutable borrow occurs here\n    |              first borrow later used here\n LL |         xs.push(1)\n-   |         ^^ second mutable borrow occurs here\n+   |         ^^^^^^^^^^ second mutable borrow occurs here\n \n error: aborting due to previous error\n "}, {"sha": "2d3bb48e03be83ac3a5a042eaf9de06774d0c7c5", "filename": "src/test/ui/async-await/issue-61452.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61452.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n LL | pub async fn f(x: Option<usize>) {\n    |                - help: consider changing this to be mutable: `mut x`\n LL |     x.take();\n-   |     ^ cannot borrow as mutable\n+   |     ^^^^^^^^ cannot borrow as mutable\n \n error[E0384]: cannot assign twice to immutable variable `x`\n   --> $DIR/issue-61452.rs:9:5"}, {"sha": "163053471b52daad9ce7b5394f0a693b323ba10e", "filename": "src/test/ui/async-await/issues/issue-61187.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-61187.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow `data` as mutable, as it is not declared as mutable\n LL | async fn response(data: Vec<u8>) {\n    |                   ---- help: consider changing this to be mutable: `mut data`\n LL |     data.reverse();\n-   |     ^^^^ cannot borrow as mutable\n+   |     ^^^^^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error\n "}, {"sha": "2cd6d1abfdcdb2385c6e271f695aa1e3938ea3d6", "filename": "src/test/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -30,7 +30,7 @@ LL |     x\n    |     - value moved here\n LL |     +\n LL |     x.clone();\n-   |     ^ value borrowed here after move\n+   |     ^^^^^^^^^ value borrowed here after move\n    |\n help: consider further restricting this bound\n    |"}, {"sha": "ad628abcbfc2eead6bde695e9e67ab94406ff89e", "filename": "src/test/ui/borrowck/borrow-tuple-fields.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     let y = x;\n    |             ^ move out of `x` occurs here\n LL | \n LL |     r.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n   --> $DIR/borrow-tuple-fields.rs:18:13\n@@ -17,7 +17,7 @@ LL |     let a = &x.0;\n LL |     let b = &mut x.0;\n    |             ^^^^^^^^ mutable borrow occurs here\n LL |     a.use_ref();\n-   |     - immutable borrow later used here\n+   |     ----------- immutable borrow later used here\n \n error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n   --> $DIR/borrow-tuple-fields.rs:23:13\n@@ -27,7 +27,7 @@ LL |     let a = &mut x.0;\n LL |     let b = &mut x.0;\n    |             ^^^^^^^^ second mutable borrow occurs here\n LL |     a.use_ref();\n-   |     - first borrow later used here\n+   |     ----------- first borrow later used here\n \n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/borrow-tuple-fields.rs:28:13\n@@ -37,7 +37,7 @@ LL |     let r = &x.0;\n LL |     let y = x;\n    |             ^ move out of `x` occurs here\n LL |     r.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error[E0502]: cannot borrow `x.0` as mutable because it is also borrowed as immutable\n   --> $DIR/borrow-tuple-fields.rs:33:13\n@@ -47,7 +47,7 @@ LL |     let a = &x.0;\n LL |     let b = &mut x.0;\n    |             ^^^^^^^^ mutable borrow occurs here\n LL |     a.use_ref();\n-   |     - immutable borrow later used here\n+   |     ----------- immutable borrow later used here\n \n error[E0499]: cannot borrow `x.0` as mutable more than once at a time\n   --> $DIR/borrow-tuple-fields.rs:38:13\n@@ -57,7 +57,7 @@ LL |     let a = &mut x.0;\n LL |     let b = &mut x.0;\n    |             ^^^^^^^^ second mutable borrow occurs here\n LL |     a.use_mut();\n-   |     - first borrow later used here\n+   |     ----------- first borrow later used here\n \n error: aborting due to 6 previous errors\n "}, {"sha": "d4d646e390c31f5269ff87c814641679bb3cdbd6", "filename": "src/test/ui/borrowck/borrowck-argument.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-argument.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,29 +4,29 @@ error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n LL | fn func(arg: S) {\n    |         --- help: consider changing this to be mutable: `mut arg`\n LL |     arg.mutate();\n-   |     ^^^ cannot borrow as mutable\n+   |     ^^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:15:9\n    |\n LL |     fn method(&self, arg: S) {\n    |                      --- help: consider changing this to be mutable: `mut arg`\n LL |         arg.mutate();\n-   |         ^^^ cannot borrow as mutable\n+   |         ^^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:21:9\n    |\n LL |     fn default(&self, arg: S) {\n    |                       --- help: consider changing this to be mutable: `mut arg`\n LL |         arg.mutate();\n-   |         ^^^ cannot borrow as mutable\n+   |         ^^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `arg` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-argument.rs:32:17\n    |\n LL |     (|arg: S| { arg.mutate() })(s);\n-   |       ---       ^^^ cannot borrow as mutable\n+   |       ---       ^^^^^^^^^^^^ cannot borrow as mutable\n    |       |\n    |       help: consider changing this to be mutable: `mut arg`\n "}, {"sha": "186ecddd6d61df3ff01e052cd5349897980860c9", "filename": "src/test/ui/borrowck/borrowck-auto-mut-ref-to-immut-var.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-auto-mut-ref-to-immut-var.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n LL |     let x = Foo { x: 3 };\n    |         - help: consider changing this to be mutable: `mut x`\n LL |     x.printme();\n-   |     ^ cannot borrow as mutable\n+   |     ^^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error\n "}, {"sha": "237071e16fc669b0f0e27414cc5ba5ccce10e115", "filename": "src/test/ui/borrowck/borrowck-borrow-immut-deref-of-box-as-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-immut-deref-of-box-as-mut.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow `*a` as mutable, as `a` is not declared as mutable\n LL |     let a: Box<_> = Box::new(A);\n    |         - help: consider changing this to be mutable: `mut a`\n LL |     a.foo();\n-   |     ^ cannot borrow as mutable\n+   |     ^^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error\n "}, {"sha": "42b6c34cd2f37484d584e53fb24ec1861701b395", "filename": "src/test/ui/borrowck/borrowck-borrow-mut-object-twice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-mut-object-twice.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,11 +2,11 @@ error[E0499]: cannot borrow `*x` as mutable more than once at a time\n   --> $DIR/borrowck-borrow-mut-object-twice.rs:13:5\n    |\n LL |     let y = x.f1();\n-   |             - first mutable borrow occurs here\n+   |             ------ first mutable borrow occurs here\n LL |     x.f2();\n-   |     ^ second mutable borrow occurs here\n+   |     ^^^^^^ second mutable borrow occurs here\n LL |     y.use_ref();\n-   |     - first borrow later used here\n+   |     ----------- first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "fdf6568d8397d205bacf166964b180e14f9c2d24", "filename": "src/test/ui/borrowck/borrowck-borrow-overloaded-auto-deref.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrow-overloaded-auto-deref.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -58,55 +58,55 @@ error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:72:5\n    |\n LL |     x.set(0, 0);\n-   |     ^ cannot borrow as mutable\n+   |     ^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:76:5\n    |\n LL |     x.set(0, 0);\n-   |     ^ cannot borrow as mutable\n+   |     ^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:84:5\n    |\n LL |     x.y_mut()\n-   |     ^ cannot borrow as mutable\n+   |     ^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:88:5\n    |\n LL |     x.y_mut()\n-   |     ^ cannot borrow as mutable\n+   |     ^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:92:6\n    |\n LL |     *x.y_mut() = 3;\n-   |      ^ cannot borrow as mutable\n+   |      ^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:96:6\n    |\n LL |     *x.y_mut() = 3;\n-   |      ^ cannot borrow as mutable\n+   |      ^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n \n error[E0596]: cannot borrow data in an `Rc` as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref.rs:100:6\n    |\n LL |     *x.y_mut() = 3;\n-   |      ^ cannot borrow as mutable\n+   |      ^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `DerefMut` is required to modify through a dereference, but it is not implemented for `Rc<Point>`\n "}, {"sha": "01379ed8512000e95bc14707de0a6918e325f532", "filename": "src/test/ui/borrowck/borrowck-borrowed-uniq-rvalue.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-borrowed-uniq-rvalue.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     buggy_map.insert(42, &*Box::new(1));\n    |                            creates a temporary which is freed while still in use\n ...\n LL |     buggy_map.insert(43, &*tmp);\n-   |     --------- borrow later used here\n+   |     --------------------------- borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n "}, {"sha": "0c5fd39b71871e3bfc0a48e990dc5c5ff6be551a", "filename": "src/test/ui/borrowck/borrowck-closures-unique-imm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique-imm.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -6,7 +6,7 @@ LL |         let p = &this.x;\n LL |         &mut this.x;\n    |         ^^^^^^^^^^^ mutable borrow occurs here\n LL |         p.use_ref();\n-   |         - immutable borrow later used here\n+   |         ----------- immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "f909dbc4082d63c67350b98aa244c80887d009fe", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -41,7 +41,7 @@ error[E0503]: cannot use `f.x` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:37:9\n    |\n LL |         let x = f.x();\n-   |                 - borrow of `f` occurs here\n+   |                 ----- borrow of `f` occurs here\n LL |         f.x;\n    |         ^^^ use of borrowed `f`\n LL |         drop(x);\n@@ -51,7 +51,7 @@ error[E0503]: cannot use `g.0` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:44:9\n    |\n LL |         let x = g.x();\n-   |                 - borrow of `g` occurs here\n+   |                 ----- borrow of `g` occurs here\n LL |         g.0;\n    |         ^^^ use of borrowed `g`\n LL |         drop(x);\n@@ -71,7 +71,7 @@ error[E0503]: cannot use `e.0` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:59:20\n    |\n LL |         let x = e.x();\n-   |                 - borrow of `e` occurs here\n+   |                 ----- borrow of `e` occurs here\n LL |         match e {\n LL |             Baz::X(value) => value\n    |                    ^^^^^ use of borrowed `e`\n@@ -93,7 +93,7 @@ error[E0503]: cannot use `f.x` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:74:9\n    |\n LL |         let x = f.x();\n-   |                 - borrow of `*f` occurs here\n+   |                 ----- borrow of `*f` occurs here\n LL |         f.x;\n    |         ^^^ use of borrowed `*f`\n LL |         drop(x);\n@@ -103,7 +103,7 @@ error[E0503]: cannot use `g.0` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:81:9\n    |\n LL |         let x = g.x();\n-   |                 - borrow of `*g` occurs here\n+   |                 ----- borrow of `*g` occurs here\n LL |         g.0;\n    |         ^^^ use of borrowed `*g`\n LL |         drop(x);\n@@ -123,7 +123,7 @@ error[E0503]: cannot use `e.0` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:96:20\n    |\n LL |         let x = e.x();\n-   |                 - borrow of `*e` occurs here\n+   |                 ----- borrow of `*e` occurs here\n LL |         match *e {\n LL |             Baz::X(value) => value\n    |                    ^^^^^ use of borrowed `*e`"}, {"sha": "3468f29fb1a23d7496ace1bb356ed1b9483da1ba", "filename": "src/test/ui/borrowck/borrowck-for-loop-head-linkage.nll.stderr", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/24a789b666f2c36d443cde48b5baef04e5b3c76d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a789b666f2c36d443cde48b5baef04e5b3c76d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-head-linkage.nll.stderr?ref=24a789b666f2c36d443cde48b5baef04e5b3c76d", "patch": "@@ -1,27 +0,0 @@\n-error[E0502]: cannot borrow `vector` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-for-loop-head-linkage.rs:7:9\n-   |\n-LL |     for &x in &vector {\n-   |               -------\n-   |               |\n-   |               immutable borrow occurs here\n-   |               immutable borrow later used here\n-LL |         let cap = vector.capacity();\n-LL |         vector.extend(repeat(0));\n-   |         ^^^^^^ mutable borrow occurs here\n-\n-error[E0502]: cannot borrow `vector` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-for-loop-head-linkage.rs:8:9\n-   |\n-LL |     for &x in &vector {\n-   |               -------\n-   |               |\n-   |               immutable borrow occurs here\n-   |               immutable borrow later used here\n-...\n-LL |         vector[1] = 5;\n-   |         ^^^^^^ mutable borrow occurs here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "99d08e905d5fd0ab20451e0b4c2319043d1f29a7", "filename": "src/test/ui/borrowck/borrowck-insert-during-each.stderr", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-insert-during-each.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -16,15 +16,17 @@ LL | |         })\n error[E0500]: closure requires unique access to `f` but it is already borrowed\n   --> $DIR/borrowck-insert-during-each.rs:18:9\n    |\n-LL |     f.foo(\n-   |     - --- first borrow later used by call\n-   |     |\n-   |     borrow occurs here\n-LL |\n-LL |         |a| {\n-   |         ^^^ closure construction occurs here\n-LL |             f.n.insert(*a);\n-   |             --- second borrow occurs due to use of `f` in closure\n+LL |       f.foo(\n+   |       - --- first borrow later used by call\n+   |  _____|\n+   | |\n+LL | |\n+LL | |         |a| {\n+   | |         ^^^ closure construction occurs here\n+LL | |             f.n.insert(*a);\n+   | |             --- second borrow occurs due to use of `f` in closure\n+LL | |         })\n+   | |__________- borrow occurs here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "390bb9384f8aec20319699c0ec080c23ac685de6", "filename": "src/test/ui/borrowck/borrowck-issue-2657-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-1.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -6,7 +6,7 @@ LL |       Some(ref _y) => {\n LL |         let _a = x;\n    |                  ^ move out of `x` occurs here\n LL |         _y.use_ref();\n-   |         -- borrow later used here\n+   |         ------------ borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "e47efc0e0b34677629ce833022bd00ef99153e9d", "filename": "src/test/ui/borrowck/borrowck-lend-flow-if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow-if.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     }\n LL |     borrow_mut(&mut *v);\n    |                ^^^^^^^ mutable borrow occurs here\n LL |     _w.use_ref();\n-   |     -- immutable borrow later used here\n+   |     ------------ immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "40c14f54cb88157039f4c5d6f3248c0a8a10e96d", "filename": "src/test/ui/borrowck/borrowck-lend-flow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-lend-flow.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -6,7 +6,7 @@ LL |     let _w = &v;\n LL |     borrow_mut(&mut *v);\n    |                ^^^^^^^ mutable borrow occurs here\n LL |     _w.use_ref();\n-   |     -- immutable borrow later used here\n+   |     ------------ immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "3548da35b613926a4acf0ef7ebf0585127f2810b", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move-cc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move-cc.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -10,7 +10,7 @@ LL |         println!(\"v={}\", *v);\n    |                          -- move occurs due to use in closure\n LL |     });\n LL |     w.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error[E0505]: cannot move out of `v` because it is borrowed\n   --> $DIR/borrowck-loan-blocks-move-cc.rs:24:19\n@@ -24,7 +24,7 @@ LL |         println!(\"v={}\", *v);\n    |                          -- move occurs due to use in closure\n LL |     });\n LL |     w.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b5c6b101f765caffdb6000162d4ea6cf76b05a2c", "filename": "src/test/ui/borrowck/borrowck-loan-blocks-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-blocks-move.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -6,7 +6,7 @@ LL |     let w = &v;\n LL |     take(v);\n    |          ^ move out of `v` occurs here\n LL |     w.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "0dd720ff6ce0424b630ce22ca61e2268bba89ca6", "filename": "src/test/ui/borrowck/borrowck-loan-in-overloaded-op.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,7 +4,7 @@ error[E0382]: borrow of moved value: `x`\n LL |     let x = Foo(Box::new(3));\n    |         - move occurs because `x` has type `Foo`, which does not implement the `Copy` trait\n LL |     let _y = {x} + x.clone(); // the `{x}` forces a move to occur\n-   |               -    ^ value borrowed here after move\n+   |               -    ^^^^^^^^^ value borrowed here after move\n    |               |\n    |               value moved here\n "}, {"sha": "1d8d04c9181c2f62c82f16f94f00644cdb07c8a0", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr-overloaded-op.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -17,7 +17,7 @@ LL |     let q = &mut p;\n    |             ------ mutable borrow occurs here\n ...\n LL |     p.times(3);\n-   |     ^ immutable borrow occurs here\n+   |     ^^^^^^^^^^ immutable borrow occurs here\n LL | \n LL |     *q + 3; // OK to use the new alias `q`\n    |     -- mutable borrow later used here"}, {"sha": "74cad575d276a7fdadcf06b3af022e7564c5a68b", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr.stderr", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -1,21 +1,23 @@\n error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-loan-rcvr.rs:23:14\n    |\n-LL |     p.blockm(|| {\n-   |     - ------ ^^ mutable borrow occurs here\n-   |     | |\n-   |     | immutable borrow later used by call\n-   |     immutable borrow occurs here\n-LL |         p.x = 10;\n-   |         --- second borrow occurs due to use of `p` in closure\n+LL |       p.blockm(|| {\n+   |       - ------ ^^ mutable borrow occurs here\n+   |       | |\n+   |  _____| immutable borrow later used by call\n+   | |\n+LL | |         p.x = 10;\n+   | |         --- second borrow occurs due to use of `p` in closure\n+LL | |     })\n+   | |______- immutable borrow occurs here\n \n error[E0502]: cannot borrow `p` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-loan-rcvr.rs:34:5\n    |\n LL |     let l = &mut p;\n    |             ------ mutable borrow occurs here\n LL |     p.impurem();\n-   |     ^ immutable borrow occurs here\n+   |     ^^^^^^^^^^^ immutable borrow occurs here\n LL | \n LL |     l.x += 1;\n    |     -------- mutable borrow later used here"}, {"sha": "b305e3c0a163a27bc10a94d50dc2e4b3fdd57276", "filename": "src/test/ui/borrowck/borrowck-move-from-subpath-of-borrowed-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |\n LL |     let z = *a;\n    |             ^^ move out of `*a` occurs here\n LL |     b.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "d5ff0c501c4bd00f0a3e7c96c16f7ab9cce8d651", "filename": "src/test/ui/borrowck/borrowck-move-mut-base-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-mut-base-ptr.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     let t1 = t0;\n    |              ^^ move out of `t0` occurs here\n LL |     *t1 = 22;\n LL |     p.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "79745065070977f884d6f4f778251d40acdfea66", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-auto-deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0507]: cannot move out of an `Rc`\n   --> $DIR/borrowck-move-out-of-overloaded-auto-deref.rs:4:14\n    |\n LL |     let _x = Rc::new(vec![1, 2]).into_iter();\n-   |              ^^^^^^^^^^^^^^^^^^^ move occurs because value has type `Vec<i32>`, which does not implement the `Copy` trait\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ move occurs because value has type `Vec<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "15ac737606d66ce03e8bae889d2126c8b454b21d", "filename": "src/test/ui/borrowck/borrowck-mut-borrow-linear-errors.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,8 +5,9 @@ LL |             1 => { addr.push(&mut x); }\n    |                              ^^^^^^ second mutable borrow occurs here\n LL |             2 => { addr.push(&mut x); }\n LL |             _ => { addr.push(&mut x); }\n-   |                    ----      ------ first mutable borrow occurs here\n-   |                    |\n+   |                    -----------------\n+   |                    |         |\n+   |                    |         first mutable borrow occurs here\n    |                    first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n@@ -15,8 +16,9 @@ error[E0499]: cannot borrow `x` as mutable more than once at a time\n LL |             2 => { addr.push(&mut x); }\n    |                              ^^^^^^ second mutable borrow occurs here\n LL |             _ => { addr.push(&mut x); }\n-   |                    ----      ------ first mutable borrow occurs here\n-   |                    |\n+   |                    -----------------\n+   |                    |         |\n+   |                    |         first mutable borrow occurs here\n    |                    first borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time"}, {"sha": "ef811b849052a769eebd1f8c1906714055215e4a", "filename": "src/test/ui/borrowck/borrowck-mut-borrow-of-mut-base-ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mut-borrow-of-mut-base-ptr.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     let mut t2 = &mut t0;\n    |                  ^^^^^^^ mutable borrow occurs here\n LL |     **t2 += 1;              // Mutates `*t0`\n LL |     p.use_ref();\n-   |     - immutable borrow later used here\n+   |     ----------- immutable borrow later used here\n \n error[E0499]: cannot borrow `t0` as mutable more than once at a time\n   --> $DIR/borrowck-mut-borrow-of-mut-base-ptr.rs:19:18\n@@ -18,7 +18,7 @@ LL |     let mut t2 = &mut t0;\n    |                  ^^^^^^^ second mutable borrow occurs here\n LL |     **t2 += 1;                  // Mutates `*t0` but not through `*p`\n LL |     p.use_mut();\n-   |     - first borrow later used here\n+   |     ----------- first borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "49c3f861ea9931278d78aea0c2c587dc672dd856", "filename": "src/test/ui/borrowck/borrowck-object-lifetime.nll.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/24a789b666f2c36d443cde48b5baef04e5b3c76d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a789b666f2c36d443cde48b5baef04e5b3c76d/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.nll.stderr?ref=24a789b666f2c36d443cde48b5baef04e5b3c76d", "patch": "@@ -1,23 +0,0 @@\n-error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-object-lifetime.rs:20:13\n-   |\n-LL |     let y = x.borrowed();\n-   |             - immutable borrow occurs here\n-LL |     let z = x.mut_borrowed();\n-   |             ^ mutable borrow occurs here\n-LL |     y.use_ref();\n-   |     - immutable borrow later used here\n-\n-error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-object-lifetime.rs:26:13\n-   |\n-LL |     let y = x.borrowed();\n-   |             - immutable borrow occurs here\n-LL |     let z = &mut x;\n-   |             ^^^^^^ mutable borrow occurs here\n-LL |     y.use_ref();\n-   |     - immutable borrow later used here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "215ed760ae1ebc799376f3ecf87c7c057bb95481", "filename": "src/test/ui/borrowck/borrowck-object-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-object-lifetime.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,21 +2,21 @@ error[E0502]: cannot borrow `*x` as mutable because it is also borrowed as immut\n   --> $DIR/borrowck-object-lifetime.rs:20:13\n    |\n LL |     let y = x.borrowed();\n-   |             - immutable borrow occurs here\n+   |             ------------ immutable borrow occurs here\n LL |     let z = x.mut_borrowed();\n    |             ^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     y.use_ref();\n-   |     - immutable borrow later used here\n+   |     ----------- immutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-object-lifetime.rs:26:13\n    |\n LL |     let y = x.borrowed();\n-   |             - immutable borrow occurs here\n+   |             ------------ immutable borrow occurs here\n LL |     let z = &mut x;\n    |             ^^^^^^ mutable borrow occurs here\n LL |     y.use_ref();\n-   |     - immutable borrow later used here\n+   |     ----------- immutable borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "087f2ac799eebc3eff5668846b48e09d53af8b74", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-autoderef.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-autoderef.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -6,7 +6,7 @@ LL |     let p = &mut f[&s];\n LL |     let q = &f[&s];\n    |              ^ immutable borrow occurs here\n LL |     p.use_mut();\n-   |     - mutable borrow later used here\n+   |     ----------- mutable borrow later used here\n \n error[E0499]: cannot borrow `*f` as mutable more than once at a time\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:43:18\n@@ -16,7 +16,7 @@ LL |     let p = &mut f[&s];\n LL |     let q = &mut f[&s];\n    |                  ^ second mutable borrow occurs here\n LL |     p.use_mut();\n-   |     - first borrow later used here\n+   |     ----------- first borrow later used here\n \n error[E0499]: cannot borrow `f.foo` as mutable more than once at a time\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:53:18\n@@ -26,7 +26,7 @@ LL |     let p = &mut f.foo[&s];\n LL |     let q = &mut f.foo[&s];\n    |                  ^^^^^ second mutable borrow occurs here\n LL |     p.use_mut();\n-   |     - first borrow later used here\n+   |     ----------- first borrow later used here\n \n error[E0502]: cannot borrow `f.foo` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:65:18\n@@ -36,7 +36,7 @@ LL |     let p = &f.foo[&s];\n LL |     let q = &mut f.foo[&s];\n    |                  ^^^^^ mutable borrow occurs here\n LL |     p.use_ref();\n-   |     - immutable borrow later used here\n+   |     ----------- immutable borrow later used here\n \n error[E0506]: cannot assign to `f.foo` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:71:5\n@@ -46,7 +46,7 @@ LL |     let p = &f.foo[&s];\n LL |     f.foo = g;\n    |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n LL |     p.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error[E0506]: cannot assign to `*f` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:77:5\n@@ -56,7 +56,7 @@ LL |     let p = &f.foo[&s];\n LL |     *f = g;\n    |     ^^^^^^ assignment to borrowed `*f` occurs here\n LL |     p.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error[E0506]: cannot assign to `f.foo` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:83:5\n@@ -66,7 +66,7 @@ LL |     let p = &mut f.foo[&s];\n LL |     f.foo = g;\n    |     ^^^^^^^^^ assignment to borrowed `f.foo` occurs here\n LL |     p.use_mut();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error[E0506]: cannot assign to `*f` because it is borrowed\n   --> $DIR/borrowck-overloaded-index-autoderef.rs:89:5\n@@ -76,7 +76,7 @@ LL |     let p = &mut f.foo[&s];\n LL |     *f = g;\n    |     ^^^^^^ assignment to borrowed `*f` occurs here\n LL |     p.use_mut();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error: aborting due to 8 previous errors\n "}, {"sha": "d05996413dd41a5845c58bd7c20b6f7f0c0f7706", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -8,7 +8,7 @@ LL |     let z = &x;\n    |             ^^ immutable borrow occurs here\n ...\n LL |     y.use_mut();\n-   |     - mutable borrow later used here\n+   |     ----------- mutable borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-report-with-custom-diagnostic.rs:21:21\n@@ -20,7 +20,7 @@ LL |             let z = &mut x;\n    |                     ^^^^^^ mutable borrow occurs here\n ...\n LL |             y.use_ref();\n-   |             - immutable borrow later used here\n+   |             ----------- immutable borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/borrowck-report-with-custom-diagnostic.rs:36:17\n@@ -32,7 +32,7 @@ LL |         let z = &mut x;\n    |                 ^^^^^^ second mutable borrow occurs here\n ...\n LL |         y.use_mut();\n-   |         - first borrow later used here\n+   |         ----------- first borrow later used here\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b39215b9aab5fca8c2c01f7f7175b0eb75f04b00", "filename": "src/test/ui/borrowck/borrowck-swap-mut-base-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-swap-mut-base-ptr.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     swap(&mut t0, &mut t1);\n    |          ^^^^^^^ mutable borrow occurs here\n LL |     *t1 = 22;\n LL |     p.use_ref();\n-   |     - immutable borrow later used here\n+   |     ----------- immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "4bd7d54cffedacef1094d6e49cac88aeb5763c9b", "filename": "src/test/ui/borrowck/borrowck-union-borrow-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow-nested.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -6,7 +6,7 @@ LL |             let ra = &mut u.s.a;\n LL |             let b = u.c;\n    |                     ^^^ use of borrowed `u.s.a`\n LL |             ra.use_mut();\n-   |             -- borrow later used here\n+   |             ------------ borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "6dbe4c74b58428989bc6f6f3242e22e3b0ac36d8", "filename": "src/test/ui/borrowck/borrowck-uniq-via-lend.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uniq-via-lend.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -6,7 +6,7 @@ LL |     let w = &mut v;\n LL |     borrow(&*v);\n    |            ^^^ immutable borrow occurs here\n LL |     w.use_mut();\n-   |     - mutable borrow later used here\n+   |     ----------- mutable borrow later used here\n \n error[E0502]: cannot borrow `*v` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-uniq-via-lend.rs:53:12\n@@ -16,7 +16,7 @@ LL |     x = &mut v;\n LL |     borrow(&*v);\n    |            ^^^ immutable borrow occurs here\n LL |     x.use_mut();\n-   |     - mutable borrow later used here\n+   |     ----------- mutable borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eb0f24b9b7a50016b36db8691c3b7b9a34dedd03", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-loan-from-mut.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-loan-from-mut.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,8 +5,9 @@ LL |     let vb: &mut [isize] = &mut v;\n    |                            ------ first mutable borrow occurs here\n ...\n LL |             v.push(tail[0] + tail[1]);\n-   |             ^      ------- first borrow later used here\n-   |             |\n+   |             ^^^^^^^-------^^^^^^^^^^^\n+   |             |      |\n+   |             |      first borrow later used here\n    |             second mutable borrow occurs here\n \n error: aborting due to previous error"}, {"sha": "ddd89afe5bf917c35e5f84c3e6f2782185ee4e33", "filename": "src/test/ui/borrowck/borrowck-vec-pattern-nesting.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-vec-pattern-nesting.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -8,7 +8,7 @@ LL |             vec[0] = Box::new(4);\n    |             ^^^^^^ assignment to borrowed `vec[_]` occurs here\n LL |\n LL |             _a.use_ref();\n-   |             -- borrow later used here\n+   |             ------------ borrow later used here\n \n error[E0506]: cannot assign to `vec[_]` because it is borrowed\n   --> $DIR/borrowck-vec-pattern-nesting.rs:23:13\n@@ -20,7 +20,7 @@ LL |             vec[0] = Box::new(4);\n    |             ^^^^^^ assignment to borrowed `vec[_]` occurs here\n LL |\n LL |             _b.use_ref();\n-   |             -- borrow later used here\n+   |             ------------ borrow later used here\n \n error[E0508]: cannot move out of type `[Box<isize>]`, a non-copy slice\n   --> $DIR/borrowck-vec-pattern-nesting.rs:34:11"}, {"sha": "69dca7e7b565cbe3ae5ae0f5e781bc373c60b20b", "filename": "src/test/ui/borrowck/index-mut-help-with-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help-with-impl.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/index-mut-help-with-impl.rs:9:5\n    |\n LL |     Index::index(&v, 1..2).make_ascii_uppercase();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error\n "}, {"sha": "057c6ee15f36c035988fa541ade879b684a775f7", "filename": "src/test/ui/borrowck/index-mut-help.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Findex-mut-help.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow data in an index of `HashMap<&str, String>` as mutab\n   --> $DIR/index-mut-help.rs:11:5\n    |\n LL |     map[\"peter\"].clear();\n-   |     ^^^^^^^^^^^^ cannot borrow as mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `HashMap<&str, String>`\n "}, {"sha": "29b4c8c38d7696f6ced9244bca8630ef148b1d58", "filename": "src/test/ui/borrowck/issue-42344.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fissue-42344.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fissue-42344.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-42344.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow `*TAB[_]` as mutable, as `TAB` is an immutable stati\n   --> $DIR/issue-42344.rs:4:5\n    |\n LL |     TAB[0].iter_mut();\n-   |     ^^^^^^ cannot borrow as mutable\n+   |     ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error\n "}, {"sha": "ef1a16ea953e26cea9392b269e3f50be4ef5b513", "filename": "src/test/ui/borrowck/issue-51117.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51117.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,7 +4,7 @@ error[E0499]: cannot borrow `*bar` as mutable more than once at a time\n LL |         Some(baz) => {\n    |              --- first mutable borrow occurs here\n LL |             bar.take();\n-   |             ^^^ second mutable borrow occurs here\n+   |             ^^^^^^^^^^ second mutable borrow occurs here\n LL |             drop(baz);\n    |                  --- first borrow later used here\n "}, {"sha": "27123ef2be1ef91355c9f789a0aad0fd75cc8f08", "filename": "src/test/ui/borrowck/issue-81365-10.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-10.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-10.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-10.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0506]: cannot assign to `self.container_field` because it is borrowed\n   --> $DIR/issue-81365-10.rs:21:9\n    |\n LL |         let first = &self.deref().target_field;\n-   |                      ---- borrow of `self.container_field` occurs here\n+   |                      ------------ borrow of `self.container_field` occurs here\n LL |         self.container_field = true;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n LL |         first;"}, {"sha": "8201894c6db4cae6182b1791b9e00e90d2a9538a", "filename": "src/test/ui/borrowck/issue-81365-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81365-5.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0506]: cannot assign to `self.container_field` because it is borrowed\n   --> $DIR/issue-81365-5.rs:28:9\n    |\n LL |         let first = self.get();\n-   |                     ---- borrow of `self.container_field` occurs here\n+   |                     ---------- borrow of `self.container_field` occurs here\n LL |         self.container_field = true;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `self.container_field` occurs here\n LL |         first;"}, {"sha": "25f343117a3715a7a29ea5b3bcf188e603bceafc", "filename": "src/test/ui/borrowck/issue-82032.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fissue-82032.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fissue-82032.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82032.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |         for v in self.0.values() {\n    |                  |      help: use mutable method: `values_mut()`\n    |                  this iterator yields `&` references\n LL |             v.flush();\n-   |             ^ `v` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |             ^^^^^^^^^ `v` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to previous error\n "}, {"sha": "10497c30e64f72b3e8c32e562622b95295725eac", "filename": "src/test/ui/borrowck/issue-82462.nll.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/24a789b666f2c36d443cde48b5baef04e5b3c76d/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a789b666f2c36d443cde48b5baef04e5b3c76d/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.nll.stderr?ref=24a789b666f2c36d443cde48b5baef04e5b3c76d", "patch": "@@ -1,22 +0,0 @@\n-error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n-  --> $DIR/issue-82462.rs:18:9\n-   |\n-LL |     for x in DroppingSlice(&*v).iter() {\n-   |              ------------------\n-   |              |               |\n-   |              |               immutable borrow occurs here\n-   |              a temporary with access to the immutable borrow is created here ...\n-LL |         v.push(*x);\n-   |         ^ mutable borrow occurs here\n-LL |         break;\n-LL |     }\n-   |     - ... and the immutable borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `DroppingSlice`\n-   |\n-help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n-   |\n-LL |     };\n-   |      +\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "59ca4867fd7474f0d170dff436a69d306337dfdf", "filename": "src/test/ui/borrowck/issue-85581.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fissue-85581.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fissue-85581.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-85581.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     match heap.peek_mut() {\n    |           first mutable borrow occurs here\n    |           a temporary with access to the first borrow is created here ...\n LL |         Some(_) => { heap.pop(); },\n-   |                      ^^^^ second mutable borrow occurs here\n+   |                      ^^^^^^^^^^ second mutable borrow occurs here\n ...\n LL | }\n    | - ... and the first borrow might be used here, when that temporary is dropped and runs the destructor for type `Option<PeekMut<'_, i32>>`"}, {"sha": "80acaa7d21c52dcb3c18fe8de398b70db7009fbc", "filename": "src/test/ui/borrowck/issue-85765.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-85765.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,7 +5,7 @@ LL |     let rofl: &Vec<Vec<i32>> = &mut test;\n    |         ---- help: consider changing this to be a mutable reference: `&mut Vec<Vec<i32>>`\n LL |\n LL |     rofl.push(Vec::new());\n-   |     ^^^^ `rofl` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^ `rofl` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0594]: cannot assign to `*r`, which is behind a `&` reference\n   --> $DIR/issue-85765.rs:12:5"}, {"sha": "2ffe7ff64133db13f925b716e398ebfb60fe3a04", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -53,7 +53,7 @@ error[E0596]: cannot borrow `f` as mutable, as it is not declared as mutable\n   --> $DIR/mut-borrow-of-mut-ref.rs:35:5\n    |\n LL |     f.bar();\n-   |     ^ cannot borrow as mutable\n+   |     ^^^^^^^ cannot borrow as mutable\n    |\n help: consider making the binding mutable\n    |"}, {"sha": "e6895b27f35d800b4114f9a03dbc904f3c4c3370", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -6,7 +6,7 @@ LL |     let first = &mut void;\n LL |     let second = &mut void;\n    |                  ^^^^^^^^^ second mutable borrow occurs here\n LL |     first.use_mut();\n-   |     ----- first borrow later used here\n+   |     --------------- first borrow later used here\n \n error[E0499]: cannot borrow `inner_void` as mutable more than once at a time\n   --> $DIR/mut-borrow-outside-loop.rs:15:28\n@@ -17,7 +17,7 @@ LL |         let inner_second = &mut inner_void;\n    |                            ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |         inner_second.use_mut();\n LL |         inner_first.use_mut();\n-   |         ----------- first borrow later used here\n+   |         --------------------- first borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "95896c6bbf98756dbc3801bd0735ccd2bcea123e", "filename": "src/test/ui/borrowck/two-phase-across-loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-across-loop.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0499]: cannot borrow `foo` as mutable more than once at a time\n   --> $DIR/two-phase-across-loop.rs:17:22\n    |\n LL |         strings.push(foo.get_string());\n-   |                      ^^^ `foo` was mutably borrowed here in the previous iteration of the loop\n+   |                      ^^^^^^^^^^^^^^^^ `foo` was mutably borrowed here in the previous iteration of the loop\n \n error: aborting due to previous error\n "}, {"sha": "a89bb941532b62cd54a8477cc5382336a60523d3", "filename": "src/test/ui/borrowck/two-phase-cannot-nest-mut-self-calls.stderr", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-cannot-nest-mut-self-calls.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -1,13 +1,18 @@\n error[E0502]: cannot borrow `vec` as mutable because it is also borrowed as immutable\n   --> $DIR/two-phase-cannot-nest-mut-self-calls.rs:16:9\n    |\n-LL |     vec.get({\n-   |     --- --- immutable borrow later used by call\n-   |     |\n-   |     immutable borrow occurs here\n-LL | \n-LL |         vec.push(2);\n-   |         ^^^ mutable borrow occurs here\n+LL |       vec.get({\n+   |       -   --- immutable borrow later used by call\n+   |  _____|\n+   | |\n+LL | |\n+LL | |         vec.push(2);\n+   | |         ^^^^^^^^^^^ mutable borrow occurs here\n+LL | |\n+LL | |\n+LL | |         0\n+LL | |     });\n+   | |______- immutable borrow occurs here\n \n error: aborting due to previous error\n "}, {"sha": "2e53e17a31bb082ef9d8403dd3bf49dca7703051", "filename": "src/test/ui/borrowck/two-phase-multi-mut.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-multi-mut.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -12,8 +12,9 @@ error[E0499]: cannot borrow `foo` as mutable more than once at a time\n   --> $DIR/two-phase-multi-mut.rs:11:16\n    |\n LL |     foo.method(&mut foo);\n-   |     --- ------ ^^^^^^^^ second mutable borrow occurs here\n-   |     |   |\n+   |     -----------^^^^^^^^-\n+   |     |   |      |\n+   |     |   |      second mutable borrow occurs here\n    |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n "}, {"sha": "6cff53399ca7f12ebb08fa0dba026bc2b3e54fac", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.migrate2015.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2015.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -27,8 +27,9 @@ LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n LL | \n LL |     v.push(shared.len());\n-   |     ^      ------ immutable borrow later used here\n-   |     |\n+   |     ^^^^^^^------------^\n+   |     |      |\n+   |     |      immutable borrow later used here\n    |     mutable borrow occurs here\n    |\n    = note: `#[warn(mutable_borrow_reservation_conflict)]` on by default"}, {"sha": "6cff53399ca7f12ebb08fa0dba026bc2b3e54fac", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.migrate2018.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.migrate2018.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -27,8 +27,9 @@ LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n LL | \n LL |     v.push(shared.len());\n-   |     ^      ------ immutable borrow later used here\n-   |     |\n+   |     ^^^^^^^------------^\n+   |     |      |\n+   |     |      immutable borrow later used here\n    |     mutable borrow occurs here\n    |\n    = note: `#[warn(mutable_borrow_reservation_conflict)]` on by default"}, {"sha": "0ae6fe78c6ae1c928f82621e5aa77b12108b7360", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.nll2015.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2015.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,8 +5,9 @@ LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n LL | \n LL |     v.extend(shared);\n-   |     ^        ------ immutable borrow later used here\n-   |     |\n+   |     ^^^^^^^^^------^\n+   |     |        |\n+   |     |        immutable borrow later used here\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n@@ -26,8 +27,9 @@ LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n LL | \n LL |     v.push(shared.len());\n-   |     ^      ------ immutable borrow later used here\n-   |     |\n+   |     ^^^^^^^------------^\n+   |     |      |\n+   |     |      immutable borrow later used here\n    |     mutable borrow occurs here\n \n error: aborting due to 3 previous errors"}, {"sha": "0ae6fe78c6ae1c928f82621e5aa77b12108b7360", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.nll2018.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.nll2018.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,8 +5,9 @@ LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n LL | \n LL |     v.extend(shared);\n-   |     ^        ------ immutable borrow later used here\n-   |     |\n+   |     ^^^^^^^^^------^\n+   |     |        |\n+   |     |        immutable borrow later used here\n    |     mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n@@ -26,8 +27,9 @@ LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n LL | \n LL |     v.push(shared.len());\n-   |     ^      ------ immutable borrow later used here\n-   |     |\n+   |     ^^^^^^^------------^\n+   |     |      |\n+   |     |      immutable borrow later used here\n    |     mutable borrow occurs here\n \n error: aborting due to 3 previous errors"}, {"sha": "52e8de3c4ac7d452c127aa8d11fc2623898544fa", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-future-compat-lint.nll.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.nll.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,8 +5,9 @@ LL |         let shared = &v;\n    |                      -- immutable borrow occurs here\n LL | \n LL |         v.push(shared.len());\n-   |         ^      ------ immutable borrow later used here\n-   |         |\n+   |         ^^^^^^^------------^\n+   |         |      |\n+   |         |      immutable borrow later used here\n    |         mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n@@ -16,8 +17,9 @@ LL |         let shared = &v;\n    |                      -- immutable borrow occurs here\n LL | \n LL |         v.push(shared.len());\n-   |         ^      ------ immutable borrow later used here\n-   |         |\n+   |         ^^^^^^^------------^\n+   |         |      |\n+   |         |      immutable borrow later used here\n    |         mutable borrow occurs here\n \n error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n@@ -27,8 +29,9 @@ LL |         let shared = &v;\n    |                      -- immutable borrow occurs here\n LL | \n LL |         v.push(shared.len());\n-   |         ^      ------ immutable borrow later used here\n-   |         |\n+   |         ^^^^^^^------------^\n+   |         |      |\n+   |         |      immutable borrow later used here\n    |         mutable borrow occurs here\n \n error: aborting due to 3 previous errors"}, {"sha": "aab21c9e78beff585061e473901961a8f3e5aa30", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-future-compat-lint.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-future-compat-lint.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,8 +5,9 @@ LL |         let shared = &v;\n    |                      -- immutable borrow occurs here\n LL | \n LL |         v.push(shared.len());\n-   |         ^      ------ immutable borrow later used here\n-   |         |\n+   |         ^^^^^^^------------^\n+   |         |      |\n+   |         |      immutable borrow later used here\n    |         mutable borrow occurs here\n    |\n note: the lint level is defined here\n@@ -24,8 +25,9 @@ LL |         let shared = &v;\n    |                      -- immutable borrow occurs here\n LL | \n LL |         v.push(shared.len());\n-   |         ^      ------ immutable borrow later used here\n-   |         |\n+   |         ^^^^^^^------------^\n+   |         |      |\n+   |         |      immutable borrow later used here\n    |         mutable borrow occurs here\n    |\n note: the lint level is defined here"}, {"sha": "cffbf0706feada511cd11f69949f0280434ebfed", "filename": "src/test/ui/borrowck/two-phase-sneaky.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     v[0].push_str({\n    |     first mutable borrow occurs here\n LL | \n LL |         v.push(format!(\"foo\"));\n-   |         ^ second mutable borrow occurs here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n \n error: aborting due to previous error\n "}, {"sha": "5a240d90011e4ea64d9232947dd260f1a647ad6b", "filename": "src/test/ui/borrowck/two-phase-surprise-no-conflict.stderr", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-surprise-no-conflict.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -13,7 +13,7 @@ error[E0502]: cannot borrow `*self` as mutable because it is also borrowed as im\n   --> $DIR/two-phase-surprise-no-conflict.rs:57:17\n    |\n LL |                 self.hash_expr(&self.cx_mut.body(eid).value);\n-   |                 ^^^^^---------^^-----------^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^---------^^---------------------^^^^^^^\n    |                 |    |          |\n    |                 |    |          immutable borrow occurs here\n    |                 |    immutable borrow later used by call\n@@ -23,35 +23,39 @@ error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:119:51\n    |\n LL |     reg.register_static(Box::new(TrivialPass::new(&mut reg.sess_mut)));\n-   |     --- ---------------                           ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-   |     |   |\n+   |     ----------------------------------------------^^^^^^^^^^^^^^^^^---\n+   |     |   |                                         |\n+   |     |   |                                         second mutable borrow occurs here\n    |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:122:54\n    |\n LL |     reg.register_bound(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n-   |     --- --------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-   |     |   |\n+   |     -------------------------------------------------^^^^^^^^^^^^^^^^^---\n+   |     |   |                                            |\n+   |     |   |                                            second mutable borrow occurs here\n    |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:125:53\n    |\n LL |     reg.register_univ(Box::new(TrivialPass::new_mut(&mut reg.sess_mut)));\n-   |     --- -------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-   |     |   |\n+   |     ------------------------------------------------^^^^^^^^^^^^^^^^^---\n+   |     |   |                                           |\n+   |     |   |                                           second mutable borrow occurs here\n    |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n \n error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:128:44\n    |\n LL |     reg.register_ref(&TrivialPass::new_mut(&mut reg.sess_mut));\n-   |     --- ------------                       ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-   |     |   |\n+   |     ---------------------------------------^^^^^^^^^^^^^^^^^--\n+   |     |   |                                  |\n+   |     |   |                                  second mutable borrow occurs here\n    |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n \n@@ -102,8 +106,9 @@ error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:154:54\n    |\n LL |     reg.register_bound(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n-   |     --- --------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-   |     |   |\n+   |     -------------------------------------------------^^^^^^^^^^^^^^^^^---\n+   |     |   |                                            |\n+   |     |   |                                            second mutable borrow occurs here\n    |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n \n@@ -124,8 +129,9 @@ error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:158:53\n    |\n LL |     reg.register_univ(Box::new(CapturePass::new_mut(&mut reg.sess_mut)));\n-   |     --- -------------                               ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-   |     |   |\n+   |     ------------------------------------------------^^^^^^^^^^^^^^^^^---\n+   |     |   |                                           |\n+   |     |   |                                           second mutable borrow occurs here\n    |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n \n@@ -143,8 +149,9 @@ error[E0499]: cannot borrow `reg.sess_mut` as mutable more than once at a time\n   --> $DIR/two-phase-surprise-no-conflict.rs:162:44\n    |\n LL |     reg.register_ref(&CapturePass::new_mut(&mut reg.sess_mut));\n-   |     --- ------------                       ^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n-   |     |   |\n+   |     ---------------------------------------^^^^^^^^^^^^^^^^^--\n+   |     |   |                                  |\n+   |     |   |                                  second mutable borrow occurs here\n    |     |   first borrow later used by call\n    |     first mutable borrow occurs here\n "}, {"sha": "e8a6ad0995a0fa555fdd21ac4cfb519d89d9a4f0", "filename": "src/test/ui/box/leak-alloc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fbox%2Fleak-alloc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fbox%2Fleak-alloc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbox%2Fleak-alloc.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0505]: cannot move out of `alloc` because it is borrowed\n   --> $DIR/leak-alloc.rs:26:10\n    |\n LL |     let boxed = Box::new_in(10, alloc.by_ref());\n-   |                                 ----- borrow of `alloc` occurs here\n+   |                                 -------------- borrow of `alloc` occurs here\n LL |     let theref = Box::leak(boxed);\n LL |     drop(alloc);\n    |          ^^^^^ move out of `alloc` occurs here"}, {"sha": "06b5ca407db111a44837820ef3c3b9239883cc97", "filename": "src/test/ui/cannot-mutate-captured-non-mut-var.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fcannot-mutate-captured-non-mut-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fcannot-mutate-captured-non-mut-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcannot-mutate-captured-non-mut-var.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -12,7 +12,7 @@ error[E0596]: cannot borrow `s` as mutable, as it is not declared as mutable\n LL |     let s = std::io::stdin();\n    |         - help: consider changing this to be mutable: `mut s`\n LL |     to_fn_once(move|| { s.read_to_end(&mut Vec::new()); });\n-   |                         ^ cannot borrow as mutable\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a6b2b2e50a3fabb1389633feaebe965a71ed7a26", "filename": "src/test/ui/codemap_tests/issue-11715.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     let z = &mut x;\n    |             ^^^^^^ second mutable borrow occurs here\n LL |     z.use_mut();\n LL |     y.use_mut();\n-   |     - first borrow later used here\n+   |     ----------- first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "1ee612184def2b2290d858d3b77edfc4345c1cfb", "filename": "src/test/ui/codemap_tests/one_line.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fone_line.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,8 +2,9 @@ error[E0499]: cannot borrow `v` as mutable more than once at a time\n   --> $DIR/one_line.rs:3:12\n    |\n LL |     v.push(v.pop().unwrap());\n-   |     - ---- ^ second mutable borrow occurs here\n-   |     | |\n+   |     -------^^^^^^^----------\n+   |     | |    |\n+   |     | |    second mutable borrow occurs here\n    |     | first borrow later used by call\n    |     first mutable borrow occurs here\n "}, {"sha": "8c9672fd7fc1cbd5f27c14f1d13148c38bbb5385", "filename": "src/test/ui/const-generics/issues/issue-67375.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.full.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error: overly complex generic constant\n   --> $DIR/issue-67375.rs:7:17\n    |\n LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n-   |                 ^^---------------^^^^^^^^\n+   |                 ^^---------------------^^\n    |                   |\n    |                   unsupported operation in generic constant\n    |"}, {"sha": "b550ac54573f0cee998987262a91da6482d2470a", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -11,7 +11,7 @@ error[E0658]: mutable references are not allowed in constants\n   --> $DIR/const_let_assign3.rs:14:5\n    |\n LL |     s.foo(3);\n-   |     ^\n+   |     ^^^^^^^^\n    |\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable"}, {"sha": "0503fac4a6680440bae153cda23276c2add66a2d", "filename": "src/test/ui/did_you_mean/issue-34126.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -19,8 +19,9 @@ error[E0502]: cannot borrow `self` as mutable because it is also borrowed as imm\n   --> $DIR/issue-34126.rs:6:18\n    |\n LL |         self.run(&mut self);\n-   |         ---- --- ^^^^^^^^^ mutable borrow occurs here\n-   |         |    |\n+   |         ---------^^^^^^^^^-\n+   |         |    |   |\n+   |         |    |   mutable borrow occurs here\n    |         |    immutable borrow later used by call\n    |         immutable borrow occurs here\n "}, {"sha": "9562d94509ea8f479e44caaf578337b9a78aae1f", "filename": "src/test/ui/did_you_mean/issue-35937.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow `f.v` as mutable, as `f` is not declared as mutable\n LL |     let f = Foo { v: Vec::new() };\n    |         - help: consider changing this to be mutable: `mut f`\n LL |     f.v.push(\"cat\".to_string());\n-   |     ^^^ cannot borrow as mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0594]: cannot assign to `s.x`, as `s` is not declared as mutable\n   --> $DIR/issue-35937.rs:16:5"}, {"sha": "dd193458b3726bc8294c046191ddbee6ef279246", "filename": "src/test/ui/did_you_mean/issue-38147-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow `*self.s` as mutable, as it is behind a `&` referenc\n LL |     fn f(&self) {\n    |          ----- help: consider changing this to be a mutable reference: `&mut self`\n LL |         self.s.push('x');\n-   |         ^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |         ^^^^^^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to previous error\n "}, {"sha": "8bf5c76977da5bc1fdfd869ea1dfdedd3f90941e", "filename": "src/test/ui/did_you_mean/issue-38147-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,7 +5,7 @@ LL |     s: &'a String\n    |        ---------- help: consider changing this to be mutable: `&'a mut String`\n ...\n LL |         self.s.push('x');\n-   |         ^^^^^^ cannot borrow as mutable\n+   |         ^^^^^^^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error\n "}, {"sha": "0e1e42261c42b5529a055d74b793da9d6314c254", "filename": "src/test/ui/did_you_mean/issue-38147-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,7 +5,7 @@ LL |     s: &'a String\n    |        ---------- help: consider changing this to be mutable: `&'a mut String`\n ...\n LL |         self.s.push('x');\n-   |         ^^^^^^ cannot borrow as mutable\n+   |         ^^^^^^^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to previous error\n "}, {"sha": "a2d162f08a173cbf2d56be888ccb470da09eb97b", "filename": "src/test/ui/did_you_mean/issue-38147-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow `*f.s` as mutable, as it is behind a `&` reference\n LL | fn f(x: usize, f: &Foo) {\n    |                   ---- help: consider changing this to be a mutable reference: `&mut Foo<'_>`\n LL |     f.s.push('x');\n-   |     ^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |     ^^^^^^^^^^^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to previous error\n "}, {"sha": "67703a1497f50c7e60d6ebde2f621e9bd917a065", "filename": "src/test/ui/did_you_mean/issue-40823.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow `*buf` as mutable, as it is behind a `&` reference\n LL |     let mut buf = &[1, 2, 3, 4];\n    |                   ------------- help: consider changing this to be a mutable reference: `&mut [1, 2, 3, 4]`\n LL |     buf.iter_mut();\n-   |     ^^^ `buf` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |     ^^^^^^^^^^^^^^ `buf` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to previous error\n "}, {"sha": "8d6a7f3721f0fab6e3431921ca493329585b4325", "filename": "src/test/ui/dropck/drop-with-active-borrows-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdropck%2Fdrop-with-active-borrows-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdropck%2Fdrop-with-active-borrows-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdrop-with-active-borrows-1.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0505]: cannot move out of `a` because it is borrowed\n   --> $DIR/drop-with-active-borrows-1.rs:4:10\n    |\n LL |     let b: Vec<&str> = a.lines().collect();\n-   |                        - borrow of `a` occurs here\n+   |                        --------- borrow of `a` occurs here\n LL |     drop(a);\n    |          ^ move out of `a` occurs here\n LL |     for s in &b {"}, {"sha": "24650dfac02d963e3d4744a30ef8a4e1f5fba421", "filename": "src/test/ui/dropck/drop-with-active-borrows-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdropck%2Fdrop-with-active-borrows-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fdropck%2Fdrop-with-active-borrows-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdrop-with-active-borrows-2.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0515]: cannot return value referencing local variable `raw_lines`\n   --> $DIR/drop-with-active-borrows-2.rs:3:5\n    |\n LL |     raw_lines.iter().map(|l| l.trim()).collect()\n-   |     ---------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ----------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |     |\n    |     returns a value referencing data owned by the current function\n    |     `raw_lines` is borrowed here"}, {"sha": "1060675cd45f4937460cc0e655163faf136354be", "filename": "src/test/ui/error-codes/E0161.edition.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.edition.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be\n   --> $DIR/E0161.rs:29:5\n    |\n LL |     x.f();\n-   |     ^\n+   |     ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1060675cd45f4937460cc0e655163faf136354be", "filename": "src/test/ui/error-codes/E0161.migrate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0161.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0161.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.migrate.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be\n   --> $DIR/E0161.rs:29:5\n    |\n LL |     x.f();\n-   |     ^\n+   |     ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1060675cd45f4937460cc0e655163faf136354be", "filename": "src/test/ui/error-codes/E0161.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be\n   --> $DIR/E0161.rs:29:5\n    |\n LL |     x.f();\n-   |     ^\n+   |     ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "1060675cd45f4937460cc0e655163faf136354be", "filename": "src/test/ui/error-codes/E0161.zflags.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.zflags.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be\n   --> $DIR/E0161.rs:29:5\n    |\n LL |     x.f();\n-   |     ^\n+   |     ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "af5a1e186332fcd4572521f554402f0817e12694", "filename": "src/test/ui/error-codes/E0499.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0499.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0499.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0499.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     let mut a = &mut i;\n    |                 ^^^^^^ second mutable borrow occurs here\n LL |     a.use_mut();\n LL |     x.use_mut();\n-   |     - first borrow later used here\n+   |     ----------- first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "a3c7ef761898938a7df9d942fe0fc41bd27c3958", "filename": "src/test/ui/error-codes/E0502.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0502.nll.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -6,7 +6,7 @@ LL |     let ref y = a;\n LL |     bar(a);\n    |         ^ mutable borrow occurs here\n LL |     y.use_ref();\n-   |     - immutable borrow later used here\n+   |     ----------- immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "94cc89754db5fc615509c571e3794e7aab64672c", "filename": "src/test/ui/error-codes/E0502.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0502.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0502.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0502.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -6,7 +6,7 @@ LL |     let ref y = a;\n LL |     bar(a);\n    |     ^^^^^^ mutable borrow occurs here\n LL |     y.use_ref();\n-   |     - immutable borrow later used here\n+   |     ----------- immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "fafe363eb47a6c05ecfa81883c917171d6eac6a6", "filename": "src/test/ui/error-codes/E0503.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0503.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0503.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0503.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -6,7 +6,7 @@ LL |     let _borrow = &mut value;\n LL |     let _sum = value + 1;\n    |                ^^^^^ use of borrowed `value`\n LL |     _borrow.use_mut();\n-   |     ------- borrow later used here\n+   |     ----------------- borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "bd3f37f54e0a88486417d2a7b786fcc1f2e42d7c", "filename": "src/test/ui/error-codes/E0505.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0505.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0505.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0505.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -6,7 +6,7 @@ LL |         let _ref_to_val: &Value = &x;\n LL |         eat(x);\n    |             ^ move out of `x` occurs here\n LL |         _ref_to_val.use_ref();\n-   |         ----------- borrow later used here\n+   |         --------------------- borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "3837e206169d4756ccfad11ece429cd4f24d937c", "filename": "src/test/ui/error-codes/E0507.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0507.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Ferror-codes%2FE0507.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0507.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0507]: cannot move out of dereference of `Ref<'_, TheDarkKnight>`\n   --> $DIR/E0507.rs:12:5\n    |\n LL |     x.borrow().nothing_is_true();\n-   |     ^^^^^^^^^^ move occurs because value has type `TheDarkKnight`, which does not implement the `Copy` trait\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ move occurs because value has type `TheDarkKnight`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "b0756eb5589b7a6e5d616040ecba56642bcc49f0", "filename": "src/test/ui/generator/dropck-resume.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fgenerator%2Fdropck-resume.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fgenerator%2Fdropck-resume.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck-resume.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,7 +5,7 @@ LL |     let z = &mut y;\n    |             ------ mutable borrow occurs here\n ...\n LL |         r = y.as_ref().unwrap();\n-   |             ^ immutable borrow occurs here\n+   |             ^^^^^^^^^^ immutable borrow occurs here\n LL |\n LL |     }\n    |     - mutable borrow might be used here, when `g` is dropped and runs the destructor for generator"}, {"sha": "7bb188352d7a27b7631deb78e7b5fe20194c3377", "filename": "src/test/ui/generator/dropck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fgenerator%2Fdropck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fgenerator%2Fdropck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0597]: `*cell` does not live long enough\n   --> $DIR/dropck.rs:10:40\n    |\n LL |     let ref_ = Box::leak(Box::new(Some(cell.borrow_mut())));\n-   |                                        ^^^^ borrowed value does not live long enough\n+   |                                        ^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL | }\n    | -"}, {"sha": "312a91adca6785f7803940278ce731e65ba8e48f", "filename": "src/test/ui/hashmap/hashmap-iter-value-lifetime.nll.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/24a789b666f2c36d443cde48b5baef04e5b3c76d/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-iter-value-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a789b666f2c36d443cde48b5baef04e5b3c76d/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-iter-value-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-iter-value-lifetime.nll.stderr?ref=24a789b666f2c36d443cde48b5baef04e5b3c76d", "patch": "@@ -1,15 +0,0 @@\n-error[E0502]: cannot borrow `my_stuff` as mutable because it is also borrowed as immutable\n-  --> $DIR/hashmap-iter-value-lifetime.rs:7:5\n-   |\n-LL |     let (_, thing) = my_stuff.iter().next().unwrap();\n-   |                      -------- immutable borrow occurs here\n-LL | \n-LL |     my_stuff.clear();\n-   |     ^^^^^^^^ mutable borrow occurs here\n-LL | \n-LL |     println!(\"{}\", *thing);\n-   |                    ------ immutable borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "0724fec905524d7cbc0d3f77662d6aa5daf1a424", "filename": "src/test/ui/hashmap/hashmap-iter-value-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-iter-value-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-iter-value-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-iter-value-lifetime.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0502]: cannot borrow `my_stuff` as mutable because it is also borrowed as\n   --> $DIR/hashmap-iter-value-lifetime.rs:7:5\n    |\n LL |     let (_, thing) = my_stuff.iter().next().unwrap();\n-   |                      -------- immutable borrow occurs here\n+   |                      --------------- immutable borrow occurs here\n LL | \n LL |     my_stuff.clear();\n    |     ^^^^^^^^^^^^^^^^ mutable borrow occurs here"}, {"sha": "aa8e890c168dc3fdcfacdad7b8bbbdbd64bcee04", "filename": "src/test/ui/hashmap/hashmap-lifetimes.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/24a789b666f2c36d443cde48b5baef04e5b3c76d/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-lifetimes.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a789b666f2c36d443cde48b5baef04e5b3c76d/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-lifetimes.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-lifetimes.nll.stderr?ref=24a789b666f2c36d443cde48b5baef04e5b3c76d", "patch": "@@ -1,13 +0,0 @@\n-error[E0502]: cannot borrow `my_stuff` as mutable because it is also borrowed as immutable\n-  --> $DIR/hashmap-lifetimes.rs:6:5\n-   |\n-LL |     let mut it = my_stuff.iter();\n-   |                  -------- immutable borrow occurs here\n-LL |     my_stuff.insert(1, 43);\n-   |     ^^^^^^^^ mutable borrow occurs here\n-LL |     it;\n-   |     -- immutable borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "d1bcd53ae3b80c9ee8d5295c0b75ce091ae9b0c8", "filename": "src/test/ui/hashmap/hashmap-lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-lifetimes.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0502]: cannot borrow `my_stuff` as mutable because it is also borrowed as\n   --> $DIR/hashmap-lifetimes.rs:6:5\n    |\n LL |     let mut it = my_stuff.iter();\n-   |                  -------- immutable borrow occurs here\n+   |                  --------------- immutable borrow occurs here\n LL |     my_stuff.insert(1, 43);\n    |     ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     it;"}, {"sha": "fa391ecba8a9510a686be3cf2057f324bd28480f", "filename": "src/test/ui/hrtb/hrtb-debruijn-in-receiver.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-debruijn-in-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-debruijn-in-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fhrtb-debruijn-in-receiver.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,9 +2,9 @@ error[E0499]: cannot borrow `foo` as mutable more than once at a time\n   --> $DIR/hrtb-debruijn-in-receiver.rs:17:5\n    |\n LL |     foo.insert();\n-   |     --- first mutable borrow occurs here\n+   |     ------------ first mutable borrow occurs here\n LL |     foo.insert();\n-   |     ^^^\n+   |     ^^^^^^^^^^^^\n    |     |\n    |     second mutable borrow occurs here\n    |     first borrow later used here"}, {"sha": "bc13aa62f4d682faa393905e6c6ceecf554fc7d5", "filename": "src/test/ui/hygiene/fields-numeric-borrowck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields-numeric-borrowck.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     let S { 0: ref mut borrow2 } = s;\n    |                ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     borrow1.use_mut();\n-   |     ------- first borrow later used here\n+   |     ----------------- first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "6f72b79f2a5e08f3d6d13a0c11c7c3e8d882cc9f", "filename": "src/test/ui/issues/issue-13497-2.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-13497-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-13497-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13497-2.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -1,13 +1,14 @@\n error[E0515]: cannot return value referencing local variable `rawLines`\n   --> $DIR/issue-13497-2.rs:3:5\n    |\n-LL |       rawLines\n-   |       ^-------\n-   |       |\n-   |  _____`rawLines` is borrowed here\n-   | |\n-LL | |         .iter().map(|l| l.trim()).collect()\n-   | |___________________________________________^ returns a value referencing data owned by the current function\n+LL |        rawLines\n+   |   _____^\n+   |  |_____|\n+   | ||\n+LL | ||         .iter().map(|l| l.trim()).collect()\n+   | ||_______________-___________________________^ returns a value referencing data owned by the current function\n+   | |________________|\n+   |                  `rawLines` is borrowed here\n \n error: aborting due to previous error\n "}, {"sha": "def032ba1bb7a785f513f8ff9cd04bfe7cbc622e", "filename": "src/test/ui/issues/issue-19163.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-19163.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-19163.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19163.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -1,8 +1,10 @@\n error[E0596]: cannot borrow data in a `&` reference as mutable\n-  --> $DIR/issue-19163.rs:9:14\n+  --> $DIR/issue-19163.rs:9:5\n    |\n LL |     mywrite!(&v, \"Hello world\");\n-   |              ^^ cannot borrow as mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |\n+   = note: this error originates in the macro `mywrite` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "dab3c3d1797256b03dd7c005609f4a9ab557f22b", "filename": "src/test/ui/issues/issue-21600.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-21600.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-21600.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21600.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,7 +5,7 @@ LL | fn call_it<F>(f: F) where F: Fn() { f(); }\n    |                  - change this to accept `FnMut` instead of `Fn`\n ...\n LL |         call_it(|| x.gen_mut());\n-   |         -------    ^ cannot borrow as mutable\n+   |         -------    ^^^^^^^^^^^ cannot borrow as mutable\n    |         |\n    |         expects `Fn` instead of `FnMut`\n "}, {"sha": "22631e7c2a332d17d73ed717f25a8da2f29f7f93", "filename": "src/test/ui/issues/issue-41726.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-41726.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-41726.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41726.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow data in an index of `HashMap<String, Vec<String>>` a\n   --> $DIR/issue-41726.rs:5:9\n    |\n LL |         things[src.as_str()].sort();\n-   |         ^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `HashMap<String, Vec<String>>`\n "}, {"sha": "73cf8652f6d20afbb67b15bb51c042acc0097bc8", "filename": "src/test/ui/issues/issue-42106.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-42106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-42106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42106.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,9 +4,9 @@ error[E0502]: cannot borrow `*collection` as mutable because it is also borrowed\n LL |     let _a = &collection;\n    |              ----------- immutable borrow occurs here\n LL |     collection.swap(1, 2);\n-   |     ^^^^^^^^^^ mutable borrow occurs here\n+   |     ^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     _a.use_ref();\n-   |     -- immutable borrow later used here\n+   |     ------------ immutable borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "626cb2999e11910cdf144f3d7e2cc985248632aa", "filename": "src/test/ui/issues/issue-44405.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-44405.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-44405.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44405.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0596]: cannot borrow data in an index of `Container` as mutable\n   --> $DIR/issue-44405.rs:21:5\n    |\n LL |     container[&mut val].test();\n-   |     ^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n    |\n    = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `Container`\n "}, {"sha": "eff1de3e01752c472e9b1e718574575058256c88", "filename": "src/test/ui/issues/issue-47646.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0502]: cannot borrow `heap` as immutable because it is also borrowed as m\n   --> $DIR/issue-47646.rs:9:30\n    |\n LL |     let borrow = heap.peek_mut();\n-   |                  ---- mutable borrow occurs here\n+   |                  --------------- mutable borrow occurs here\n LL | \n LL |     match (borrow, ()) {\n    |           ------------ a temporary with access to the mutable borrow is created here ..."}, {"sha": "d450675776268221c33639a0501498cbbe1015ea", "filename": "src/test/ui/issues/issue-52126-assign-op-invariance.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52126-assign-op-invariance.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0597]: `line` does not live long enough\n   --> $DIR/issue-52126-assign-op-invariance.rs:34:28\n    |\n LL |         let v: Vec<&str> = line.split_whitespace().collect();\n-   |                            ^^^^ borrowed value does not live long enough\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         acc += cnt2;\n    |         --- borrow later used here"}, {"sha": "6f345f56d1aa112ff8f8ca44bf0cbcf56d63229e", "filename": "src/test/ui/issues/issue-61108.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -10,7 +10,7 @@ LL |     for l in bad_letters {\n    |              help: consider borrowing to avoid moving into the for loop: `&bad_letters`\n ...\n LL |     bad_letters.push('s');\n-   |     ^^^^^^^^^^^ value borrowed here after move\n+   |     ^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n    |\n note: this function takes ownership of the receiver `self`, which moves `bad_letters`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL"}, {"sha": "54973cfa34e616167eaee6fe06db519e9ed2328a", "filename": "src/test/ui/issues/issue-81584.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-81584.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fissues%2Fissue-81584.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-81584.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0515]: cannot return value referencing function parameter `y`\n   --> $DIR/issue-81584.rs:5:22\n    |\n LL |             .map(|y| y.iter().map(|x| x + 1))\n-   |                      -^^^^^^^^^^^^^^^^^^^^^^\n+   |                      --------^^^^^^^^^^^^^^^\n    |                      |\n    |                      returns a value referencing data owned by the current function\n    |                      `y` is borrowed here"}, {"sha": "bbf04c98436e8dd43c96080472079b4b26ce6ff1", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     let mut x = vec![1].iter();\n    |                 creates a temporary which is freed while still in use\n LL |\n LL |     x.use_mut();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n    = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "825c45b2434411e5b34e6fcdcad6c136b1af1ece", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-fn-items.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -1,11 +1,3 @@\n-error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n-  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:2:3\n-   |\n-LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n-   |                        - help: consider changing this to be mutable: `mut y`\n-LL |   y.push(z);\n-   |   ^ cannot borrow as mutable\n-\n error: lifetime may not live long enough\n   --> $DIR/ex3-both-anon-regions-using-fn-items.rs:2:3\n    |\n@@ -16,6 +8,14 @@ LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n LL |   y.push(z);\n    |   ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n+error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n+  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:2:3\n+   |\n+LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n+   |                        - help: consider changing this to be mutable: `mut y`\n+LL |   y.push(z);\n+   |   ^^^^^^^^^ cannot borrow as mutable\n+\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0596`."}, {"sha": "78a828dde866ff245170947a777750bda0b2f282", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-trait-objects.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -1,11 +1,3 @@\n-error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n-  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:2:3\n-   |\n-LL | fn foo(x:Box<dyn Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n-   |                                  - help: consider changing this to be mutable: `mut y`\n-LL |   y.push(z);\n-   |   ^ cannot borrow as mutable\n-\n error: lifetime may not live long enough\n   --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:2:3\n    |\n@@ -16,6 +8,14 @@ LL | fn foo(x:Box<dyn Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n LL |   y.push(z);\n    |   ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n+error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n+  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:2:3\n+   |\n+LL | fn foo(x:Box<dyn Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n+   |                                  - help: consider changing this to be mutable: `mut y`\n+LL |   y.push(z);\n+   |   ^^^^^^^^^ cannot borrow as mutable\n+\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0596`."}, {"sha": "6a5cc91963da089deb6a1f748a23aacd70d98e17", "filename": "src/test/ui/lint/unaligned_references.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -47,7 +47,7 @@ error: reference to packed field is unaligned\n   --> $DIR/unaligned_references.rs:32:17\n    |\n LL |         let _ = good.data.clone();\n-   |                 ^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>"}, {"sha": "59c091e44eb87efa0e16a1111eab535d3618a5e9", "filename": "src/test/ui/match/issue-74050-end-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fmatch%2Fissue-74050-end-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fmatch%2Fissue-74050-end-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-74050-end-span.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,7 +5,7 @@ LL |     let _arg = match args.next() {\n    |         ---- borrow later stored here\n LL |         Some(arg) => {\n LL |             match arg.to_str() {\n-   |                   ^^^ borrowed value does not live long enough\n+   |                   ^^^^^^^^^^^^ borrowed value does not live long enough\n ...\n LL |         }\n    |         - `arg` dropped here while still borrowed"}, {"sha": "b98f7a786612f9f774ab07ce26093fdf314c57c2", "filename": "src/test/ui/methods/method-self-arg-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-self-arg-2.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -6,7 +6,7 @@ LL |     let y = &mut x;\n LL |     Foo::bar(&x);\n    |              ^^ immutable borrow occurs here\n LL |     y.use_mut();\n-   |     - mutable borrow later used here\n+   |     ----------- mutable borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/method-self-arg-2.rs:20:14\n@@ -16,7 +16,7 @@ LL |     let y = &mut x;\n LL |     Foo::baz(&mut x);\n    |              ^^^^^^ second mutable borrow occurs here\n LL |     y.use_mut();\n-   |     - first borrow later used here\n+   |     ----------- first borrow later used here\n \n error: aborting due to 2 previous errors\n "}, {"sha": "57be5fb4d8a59160181fa33d80b780215bc14049", "filename": "src/test/ui/moves/move-fn-self-receiver.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -75,7 +75,7 @@ error[E0505]: cannot move out of `mut_foo` because it is borrowed\n   --> $DIR/move-fn-self-receiver.rs:50:5\n    |\n LL |     let ret = mut_foo.use_mut_self();\n-   |               ------- borrow of `mut_foo` occurs here\n+   |               ---------------------- borrow of `mut_foo` occurs here\n LL |     mut_foo;\n    |     ^^^^^^^ move out of `mut_foo` occurs here\n LL |     ret;"}, {"sha": "6046c076f2e5313ccd28cae6442a95848fd9d928", "filename": "src/test/ui/mut/mut-cant-alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-cant-alias.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -6,7 +6,7 @@ LL |     let b1 = &mut *b;\n LL |     let b2 = &mut *b;\n    |                    ^ second mutable borrow occurs here\n LL |     b1.use_mut();\n-   |     -- first borrow later used here\n+   |     ------------ first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "cba284550b95a3cb818dd5ad8c693a3006c78669", "filename": "src/test/ui/mut/mut-suggestion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-suggestion.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,7 +5,7 @@ LL | fn func(arg: S) {\n    |         --- help: consider changing this to be mutable: `mut arg`\n ...\n LL |     arg.mutate();\n-   |     ^^^ cannot borrow as mutable\n+   |     ^^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `local` as mutable, as it is not declared as mutable\n   --> $DIR/mut-suggestion.rs:20:5\n@@ -14,7 +14,7 @@ LL |     let local = S;\n    |         ----- help: consider changing this to be mutable: `mut local`\n ...\n LL |     local.mutate();\n-   |     ^^^^^ cannot borrow as mutable\n+   |     ^^^^^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e9d7ca953d65b6fd80717ad37d3c1c03bfc34e07", "filename": "src/test/ui/nll/closure-access-spans.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -8,7 +8,7 @@ LL |     || x;\n    |     |\n    |     immutable borrow occurs here\n LL |     r.use_mut();\n-   |     - mutable borrow later used here\n+   |     ----------- mutable borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/closure-access-spans.rs:11:5\n@@ -20,7 +20,7 @@ LL |     || x = 2;\n    |     |\n    |     second mutable borrow occurs here\n LL |     r.use_mut();\n-   |     - first borrow later used here\n+   |     ----------- first borrow later used here\n \n error[E0500]: closure requires unique access to `x` but it is already borrowed\n   --> $DIR/closure-access-spans.rs:17:5\n@@ -32,7 +32,7 @@ LL |     || *x = 2;\n    |     |\n    |     closure construction occurs here\n LL |     r.use_mut();\n-   |     - first borrow later used here\n+   |     ----------- first borrow later used here\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/closure-access-spans.rs:23:13\n@@ -42,7 +42,7 @@ LL |     let r = &mut x;\n LL |     move || x;\n    |             ^ use of borrowed `x`\n LL |     r.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/closure-access-spans.rs:29:5\n@@ -54,7 +54,7 @@ LL |     || x;\n    |     |\n    |     move out of `x` occurs here\n LL |     r.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/closure-access-spans.rs:35:5"}, {"sha": "bada4e1b84b52cdf25e9222f62022d9bdadd15b9", "filename": "src/test/ui/nll/closure-borrow-spans.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-borrow-spans.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -8,7 +8,7 @@ LL |     let f = || x.len();\n LL |     let y = x;\n    |             ^ move out of `x` occurs here\n LL |     f.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n   --> $DIR/closure-borrow-spans.rs:11:13\n@@ -20,7 +20,7 @@ LL |     let f = || x;\n LL |     let y = &mut x;\n    |             ^^^^^^ mutable borrow occurs here\n LL |     f.use_ref();\n-   |     - immutable borrow later used here\n+   |     ----------- immutable borrow later used here\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/closure-borrow-spans.rs:19:16\n@@ -32,7 +32,7 @@ LL |         f = || x;\n LL |     }\n    |     - `x` dropped here while still borrowed\n LL |     f.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/closure-borrow-spans.rs:26:5\n@@ -44,7 +44,7 @@ LL |     let f = || x;\n LL |     x = 1;\n    |     ^^^^^ assignment to borrowed `x` occurs here\n LL |     f.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/closure-borrow-spans.rs:32:13\n@@ -56,7 +56,7 @@ LL |     let f = || x = 0;\n LL |     let y = x;\n    |             ^ use of borrowed `x`\n LL |     f.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n   --> $DIR/closure-borrow-spans.rs:38:13\n@@ -68,7 +68,7 @@ LL |     let f = || x = 0;\n LL |     let y = &x;\n    |             ^^ immutable borrow occurs here\n LL |     f.use_ref();\n-   |     - mutable borrow later used here\n+   |     ----------- mutable borrow later used here\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/closure-borrow-spans.rs:44:13\n@@ -80,7 +80,7 @@ LL |     let f = || x = 0;\n LL |     let y = &mut x;\n    |             ^^^^^^ second mutable borrow occurs here\n LL |     f.use_ref();\n-   |     - first borrow later used here\n+   |     ----------- first borrow later used here\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/closure-borrow-spans.rs:52:16\n@@ -92,7 +92,7 @@ LL |         f = || x = 0;\n LL |     }\n    |     - `x` dropped here while still borrowed\n LL |     f.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error[E0506]: cannot assign to `x` because it is borrowed\n   --> $DIR/closure-borrow-spans.rs:59:5\n@@ -104,7 +104,7 @@ LL |     let f = || x = 0;\n LL |     x = 1;\n    |     ^^^^^ assignment to borrowed `x` occurs here\n LL |     f.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error[E0505]: cannot move out of `x` because it is borrowed\n   --> $DIR/closure-borrow-spans.rs:65:13\n@@ -116,7 +116,7 @@ LL |     let f = || *x = 0;\n LL |     let y = x;\n    |             ^ move out of `x` occurs here\n LL |     f.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error[E0501]: cannot borrow `x` as immutable because previous closure requires unique access\n   --> $DIR/closure-borrow-spans.rs:71:13\n@@ -128,7 +128,7 @@ LL |     let f = || *x = 0;\n LL |     let y = &x;\n    |             ^^ second borrow occurs here\n LL |     f.use_ref();\n-   |     - first borrow later used here\n+   |     ----------- first borrow later used here\n \n error[E0501]: cannot borrow `x` as mutable because previous closure requires unique access\n   --> $DIR/closure-borrow-spans.rs:77:13\n@@ -140,7 +140,7 @@ LL |     let f = || *x = 0;\n LL |     let y = &mut x;\n    |             ^^^^^^ second borrow occurs here\n LL |     f.use_ref();\n-   |     - first borrow later used here\n+   |     ----------- first borrow later used here\n \n error[E0597]: `x` does not live long enough\n   --> $DIR/closure-borrow-spans.rs:86:16\n@@ -152,7 +152,7 @@ LL |         f = || *x = 0;\n LL |     }\n    |     - `x` dropped here while still borrowed\n LL |     f.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error[E0506]: cannot assign to `*x` because it is borrowed\n   --> $DIR/closure-borrow-spans.rs:93:5\n@@ -164,7 +164,7 @@ LL |     let f = || *x = 0;\n LL |     *x = 1;\n    |     ^^^^^^ assignment to borrowed `*x` occurs here\n LL |     f.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error: aborting due to 14 previous errors\n "}, {"sha": "279123069877f370f2171ba1ba519d52591cac36", "filename": "src/test/ui/nll/get_default.nll.stderr", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/24a789b666f2c36d443cde48b5baef04e5b3c76d/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a789b666f2c36d443cde48b5baef04e5b3c76d/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.nll.stderr?ref=24a789b666f2c36d443cde48b5baef04e5b3c76d", "patch": "@@ -1,48 +0,0 @@\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n-  --> $DIR/get_default.rs:21:17\n-   |\n-LL | fn ok(map: &mut Map) -> &String {\n-   |            - let's call the lifetime of this reference `'1`\n-LL |     loop {\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-LL |             Some(v) => {\n-LL |                 return v;\n-   |                        - returning this value requires that `*map` is borrowed for `'1`\n-...\n-LL |                 map.set(String::new()); // Ideally, this would not error.\n-   |                 ^^^ mutable borrow occurs here\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n-  --> $DIR/get_default.rs:32:17\n-   |\n-LL | fn err(map: &mut Map) -> &String {\n-   |             - let's call the lifetime of this reference `'1`\n-LL |     loop {\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-LL |             Some(v) => {\n-LL |                 map.set(String::new()); // Both AST and MIR error here\n-   |                 ^^^ mutable borrow occurs here\n-LL |\n-LL |                 return v;\n-   |                        - returning this value requires that `*map` is borrowed for `'1`\n-\n-error[E0502]: cannot borrow `*map` as mutable because it is also borrowed as immutable\n-  --> $DIR/get_default.rs:37:17\n-   |\n-LL | fn err(map: &mut Map) -> &String {\n-   |             - let's call the lifetime of this reference `'1`\n-LL |     loop {\n-LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n-...\n-LL |                 return v;\n-   |                        - returning this value requires that `*map` is borrowed for `'1`\n-...\n-LL |                 map.set(String::new()); // Ideally, just AST would error here\n-   |                 ^^^ mutable borrow occurs here\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "6998c04336e5022ec3f67556bfe225ea904c7b8b", "filename": "src/test/ui/nll/get_default.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fget_default.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,7 +5,7 @@ LL | fn ok(map: &mut Map) -> &String {\n    |            - let's call the lifetime of this reference `'1`\n LL |     loop {\n LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n+   |               --------- immutable borrow occurs here\n LL |             Some(v) => {\n LL |                 return v;\n    |                        - returning this value requires that `*map` is borrowed for `'1`\n@@ -20,7 +20,7 @@ LL | fn err(map: &mut Map) -> &String {\n    |             - let's call the lifetime of this reference `'1`\n LL |     loop {\n LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n+   |               --------- immutable borrow occurs here\n LL |             Some(v) => {\n LL |                 map.set(String::new()); // Both AST and MIR error here\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n@@ -35,7 +35,7 @@ LL | fn err(map: &mut Map) -> &String {\n    |             - let's call the lifetime of this reference `'1`\n LL |     loop {\n LL |         match map.get() {\n-   |               --- immutable borrow occurs here\n+   |               --------- immutable borrow occurs here\n ...\n LL |                 return v;\n    |                        - returning this value requires that `*map` is borrowed for `'1`"}, {"sha": "60ef3f7b85ec45f6717806e60bd7fe4e29636b9e", "filename": "src/test/ui/nll/issue-46589.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-46589.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,10 +2,10 @@ error[E0499]: cannot borrow `**other` as mutable more than once at a time\n   --> $DIR/issue-46589.rs:23:21\n    |\n LL |         *other = match (*other).get_self() {\n-   |                        -------- first mutable borrow occurs here\n+   |                        ------------------- first mutable borrow occurs here\n LL |             Some(s) => s,\n LL |             None => (*other).new_self()\n-   |                     ^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^\n    |                     |\n    |                     second mutable borrow occurs here\n    |                     first borrow later used here"}, {"sha": "9f4e971f909570e8442cb1d6b034354184dcbf9e", "filename": "src/test/ui/nll/issue-51191.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51191.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -45,7 +45,7 @@ error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/issue-51191.rs:22:9\n    |\n LL |         (&mut self).bar();\n-   |         ^^^^^^^^^^^ cannot borrow as mutable\n+   |         ^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-51191.rs:28:9"}, {"sha": "807b95f7e1384fc1ccc0a9700a9b87eeab7fdd68", "filename": "src/test/ui/nll/issue-52669.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fissue-52669.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fissue-52669.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52669.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     a.b = B;\n LL |     foo(a);\n    |         - value moved here\n LL |     a.b.clone()\n-   |     ^^^ value borrowed here after move\n+   |     ^^^^^^^^^^^ value borrowed here after move\n \n error: aborting due to previous error\n "}, {"sha": "11cd423295aaef93134fe8341c34b93bab558b32", "filename": "src/test/ui/nll/issue-53773.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fissue-53773.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fissue-53773.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53773.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |\n LL |     }\n    |     - here, drop of `child` needs exclusive access to `*child.raw`, because the type `C<'_>` implements the `Drop` trait\n LL |     members.len();\n-   |     ------- borrow later used here\n+   |     ------------- borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n "}, {"sha": "a8e1edc5497422311da7754564e32d8c29978c78", "filename": "src/test/ui/nll/issue-54556-niconii.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-niconii.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0597]: `counter` does not live long enough\n   --> $DIR/issue-54556-niconii.rs:22:20\n    |\n LL |     if let Ok(_) = counter.lock() { }\n-   |                    ^^^^^^^-------\n+   |                    ^^^^^^^^^^^^^^\n    |                    |\n    |                    borrowed value does not live long enough\n    |                    a temporary with access to the borrow is created here ..."}, {"sha": "12e28aa3fba0ecdc624bce3b8f58e05372c3aaa3", "filename": "src/test/ui/nll/issue-62007-assign-const-index.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fissue-62007-assign-const-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fissue-62007-assign-const-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-62007-assign-const-index.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -17,7 +17,7 @@ LL | fn to_refs<T>(mut list: [&mut List<T>; 2]) -> Vec<&mut T> {\n    |                          - let's call the lifetime of this reference `'1`\n ...\n LL |         if let Some(n) = list[0].next.as_mut() {\n-   |                          ^^^^^^^^^^^^---------\n+   |                          ^^^^^^^^^^^^^^^^^^^^^\n    |                          |\n    |                          `list[_].next` was mutably borrowed here in the previous iteration of the loop\n    |                          argument requires that `list[_].next` is borrowed for `'1`"}, {"sha": "4488431fc5737a32bca7db4ba418e9102d275c89", "filename": "src/test/ui/nll/issue-62007-assign-differing-fields.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fissue-62007-assign-differing-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fissue-62007-assign-differing-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-62007-assign-differing-fields.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -17,7 +17,7 @@ LL | fn to_refs<'a, T>(mut list: (&'a mut List<T>, &'a mut List<T>)) -> Vec<&'a\n    |            -- lifetime `'a` defined here\n ...\n LL |         if let Some(n) = (list.0).next.as_mut() {\n-   |                          ^^^^^^^^^^^^^---------\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^\n    |                          |\n    |                          `list.0.next` was mutably borrowed here in the previous iteration of the loop\n    |                          argument requires that `list.0.next` is borrowed for `'a`"}, {"sha": "22c72af61d625e5f123fc3a55d3e4fc671c03ad9", "filename": "src/test/ui/nll/loan_ends_mid_block_vec.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Floan_ends_mid_block_vec.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,7 +5,7 @@ LL |     let slice = &mut data;\n    |                 --------- first mutable borrow occurs here\n LL |     capitalize(slice);\n LL |     data.push('d');\n-   |     ^^^^ second mutable borrow occurs here\n+   |     ^^^^^^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     capitalize(slice);\n    |                ----- first borrow later used here\n@@ -17,7 +17,7 @@ LL |     let slice = &mut data;\n    |                 --------- first mutable borrow occurs here\n ...\n LL |     data.push('e');\n-   |     ^^^^ second mutable borrow occurs here\n+   |     ^^^^^^^^^^^^^^ second mutable borrow occurs here\n ...\n LL |     capitalize(slice);\n    |                ----- first borrow later used here\n@@ -29,7 +29,7 @@ LL |     let slice = &mut data;\n    |                 --------- first mutable borrow occurs here\n ...\n LL |     data.push('f');\n-   |     ^^^^ second mutable borrow occurs here\n+   |     ^^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |\n LL |     capitalize(slice);\n    |                ----- first borrow later used here"}, {"sha": "fd5e4531b2e673c646fe9652ad0b937c5ef2cab2", "filename": "src/test/ui/nll/polonius/assignment-to-differing-field.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fassignment-to-differing-field.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -17,7 +17,7 @@ LL | fn assignment_to_field_projection<'a, T>(\n    |                                   -- lifetime `'a` defined here\n ...\n LL |         if let Some(n) = (list.0).next.as_mut() {\n-   |                          ^^^^^^^^^^^^^---------\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^\n    |                          |\n    |                          `list.0.next` was mutably borrowed here in the previous iteration of the loop\n    |                          argument requires that `list.0.next` is borrowed for `'a`\n@@ -41,7 +41,7 @@ LL | fn assignment_through_projection_chain<'a, T>(\n    |                                        -- lifetime `'a` defined here\n ...\n LL |         if let Some(n) = ((((list.0).0).0).0).0.next.as_mut() {\n-   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^---------\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                          |\n    |                          `list.0.0.0.0.0.next` was mutably borrowed here in the previous iteration of the loop\n    |                          argument requires that `list.0.0.0.0.0.next` is borrowed for `'a`"}, {"sha": "322930984a5458fc19ed79f205ff5e64786a8fe5", "filename": "src/test/ui/nll/region-ends-after-if-condition.nll.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/24a789b666f2c36d443cde48b5baef04e5b3c76d/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a789b666f2c36d443cde48b5baef04e5b3c76d/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fregion-ends-after-if-condition.nll.stderr?ref=24a789b666f2c36d443cde48b5baef04e5b3c76d", "patch": "@@ -1,15 +0,0 @@\n-error[E0502]: cannot borrow `my_struct.field` as mutable because it is also borrowed as immutable\n-  --> $DIR/region-ends-after-if-condition.rs:26:9\n-   |\n-LL |     let value = &my_struct.field;\n-   |                 ---------------- immutable borrow occurs here\n-LL |     if value.is_empty() {\n-LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^ mutable borrow occurs here\n-...\n-LL |     drop(value);\n-   |          ----- immutable borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "bd2b8b158598ab559c846c4ac13c88800dec28bd", "filename": "src/test/ui/nll/return_from_loop.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Freturn_from_loop.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,10 +5,10 @@ LL |     let value = &mut my_struct.field;\n    |                 -------------------- first mutable borrow occurs here\n LL |     loop {\n LL |         my_struct.field.push_str(\"Hello, world!\");\n-   |         ^^^^^^^^^^^^^^^ second mutable borrow occurs here\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n LL |\n LL |         value.len();\n-   |         ----- first borrow later used here\n+   |         ----------- first borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "7ccc0cbdd576bb225608fdf75289f7b0918989b0", "filename": "src/test/ui/object-safety/object-safety-by-value-self-use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-by-value-self-use.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0161]: cannot move a value of type dyn Bar: the size of dyn Bar cannot be\n   --> $DIR/object-safety-by-value-self-use.rs:15:5\n    |\n LL |     t.bar()\n-   |     ^\n+   |     ^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ad35936716806007b045b22d68a2933bf6f80750", "filename": "src/test/ui/regions/region-object-lifetime-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-5.rs?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -8,7 +8,7 @@ trait Foo {\n // Here, the object is bounded by an anonymous lifetime and returned\n // as `&'static`, so you get an error.\n fn owned_receiver(x: Box<dyn Foo>) -> &'static () {\n-    x.borrowed() //~ ERROR cannot return value referencing local data `*x`\n+    x.borrowed() //~ ERROR cannot return reference to local data `*x`\n }\n \n fn main() {}"}, {"sha": "b82b58c7a8e0d6c12e206a2c6dfc11fd9339a1a6", "filename": "src/test/ui/regions/region-object-lifetime-5.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-5.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -1,11 +1,8 @@\n-error[E0515]: cannot return value referencing local data `*x`\n+error[E0515]: cannot return reference to local data `*x`\n   --> $DIR/region-object-lifetime-5.rs:11:5\n    |\n LL |     x.borrowed()\n-   |     -^^^^^^^^^^^\n-   |     |\n-   |     returns a value referencing data owned by the current function\n-   |     `*x` is borrowed here\n+   |     ^^^^^^^^^^^^ returns a reference to data owned by the current function\n \n error: aborting due to previous error\n "}, {"sha": "c74b82dbbd82811c010c286ff5fb7c927c0b4d32", "filename": "src/test/ui/rfc-2005-default-binding-mode/borrowck-issue-49631.nll.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/24a789b666f2c36d443cde48b5baef04e5b3c76d/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a789b666f2c36d443cde48b5baef04e5b3c76d/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.nll.stderr?ref=24a789b666f2c36d443cde48b5baef04e5b3c76d", "patch": "@@ -1,14 +0,0 @@\n-error[E0502]: cannot borrow `foo` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-issue-49631.rs:20:9\n-   |\n-LL |     while let Some(Ok(string)) = foo.get() {\n-   |                                  --- immutable borrow occurs here\n-LL |         foo.mutate();\n-   |         ^^^ mutable borrow occurs here\n-LL |\n-LL |         println!(\"foo={:?}\", *string);\n-   |                              ------- immutable borrow later used here\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0502`."}, {"sha": "b7c0b0bb6b93e8687a87c5c9ca17eb437eda65e9", "filename": "src/test/ui/rfc-2005-default-binding-mode/borrowck-issue-49631.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2005-default-binding-mode%2Fborrowck-issue-49631.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0502]: cannot borrow `foo` as mutable because it is also borrowed as immu\n   --> $DIR/borrowck-issue-49631.rs:20:9\n    |\n LL |     while let Some(Ok(string)) = foo.get() {\n-   |                                  --- immutable borrow occurs here\n+   |                                  --------- immutable borrow occurs here\n LL |         foo.mutate();\n    |         ^^^^^^^^^^^^ mutable borrow occurs here\n LL |"}, {"sha": "e4ec9f875765a35d3f1c88dddfacb4dcf35c02f8", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -56,31 +56,31 @@ error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n LL | fn deref_mut_method1(x: Own<Point>) {\n    |                      - help: consider changing this to be mutable: `mut x`\n LL |     x.set(0, 0);\n-   |     ^ cannot borrow as mutable\n+   |     ^^^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:121:5\n    |\n LL | fn deref_extend_mut_method1(x: &Own<Point>) -> &mut isize {\n    |                                ----------- help: consider changing this to be a mutable reference: `&mut Own<Point>`\n LL |     x.y_mut()\n-   |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |     ^^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:129:6\n    |\n LL | fn assign_method1<'a>(x: Own<Point>) {\n    |                       - help: consider changing this to be mutable: `mut x`\n LL |     *x.y_mut() = 3;\n-   |      ^ cannot borrow as mutable\n+   |      ^^^^^^^^^ cannot borrow as mutable\n \n error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:133:6\n    |\n LL | fn assign_method2<'a>(x: &'a Own<Point>) {\n    |                          -------------- help: consider changing this to be a mutable reference: `&'a mut Own<Point>`\n LL |     *x.y_mut() = 3;\n-   |      ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |      ^^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 10 previous errors\n "}, {"sha": "b4693b7242ae42132263a66518d0bbb369de84d9", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -24,7 +24,7 @@ error[E0596]: cannot borrow `f.f` as mutable, as it is behind a `&` reference\n LL | fn test4(f: &Test) {\n    |             ----- help: consider changing this to be a mutable reference: `&mut Test<'_>`\n LL |     f.f.call_mut(())\n-   |     ^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |     ^^^^^^^^^^^^^^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0507]: cannot move out of `f`, a captured variable in an `FnMut` closure\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:57:13"}, {"sha": "1864f5de108cd10911c221588cb43ea1ff85bf08", "filename": "src/test/ui/span/borrowck-call-method-from-mut-aliasable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,7 +5,7 @@ LL | fn b(x: &Foo) {\n    |         ---- help: consider changing this to be a mutable reference: `&mut Foo`\n LL |     x.f();\n LL |     x.h();\n-   |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |     ^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to previous error\n "}, {"sha": "1f5d8bd32bb57faf27df0e2c8cdca481ca30d15a", "filename": "src/test/ui/span/borrowck-fn-in-const-b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,7 +4,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n LL |     fn broken(x: &Vec<String>) {\n    |                  ------------ help: consider changing this to be a mutable reference: `&mut Vec<String>`\n LL |         x.push(format!(\"this is broken\"));\n-   |         ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to previous error\n "}, {"sha": "7c5caba6eae32b607ddd83c3c74729643e88d54b", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -32,7 +32,7 @@ LL |         v4.push(&id('y'));\n    |                  creates a temporary which is freed while still in use\n ...\n LL |         v4.use_ref();\n-   |         -- borrow later used here\n+   |         ------------ borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n "}, {"sha": "cc43f6d0928dadb51e94e829793f837680a01b82", "filename": "src/test/ui/span/borrowck-object-mutability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -5,7 +5,7 @@ LL | fn borrowed_receiver(x: &dyn Foo) {\n    |                         -------- help: consider changing this to be a mutable reference: `&mut dyn Foo`\n LL |     x.borrowed();\n LL |     x.borrowed_mut();\n-   |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |     ^^^^^^^^^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `*x` as mutable, as `x` is not declared as mutable\n   --> $DIR/borrowck-object-mutability.rs:18:5\n@@ -14,7 +14,7 @@ LL | fn owned_receiver(x: Box<dyn Foo>) {\n    |                   - help: consider changing this to be mutable: `mut x`\n LL |     x.borrowed();\n LL |     x.borrowed_mut();\n-   |     ^ cannot borrow as mutable\n+   |     ^^^^^^^^^^^^^^^^ cannot borrow as mutable\n \n error: aborting due to 2 previous errors\n "}, {"sha": "53c9404620f35d8633354a9eb9a113352852fe9d", "filename": "src/test/ui/span/destructor-restrictions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fdestructor-restrictions.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0597]: `*a` does not live long enough\n   --> $DIR/destructor-restrictions.rs:8:10\n    |\n LL |         *a.borrow() + 1\n-   |          ^---------\n+   |          ^^^^^^^^^^\n    |          |\n    |          borrowed value does not live long enough\n    |          a temporary with access to the borrow is created here ..."}, {"sha": "3c2022748f0944339f99e3560083a49cd3cf1f7c", "filename": "src/test/ui/span/issue-23338-locals-die-before-temps-of-body.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23338-locals-die-before-temps-of-body.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0597]: `y` does not live long enough\n   --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:10:5\n    |\n LL |     y.borrow().clone()\n-   |     ^---------\n+   |     ^^^^^^^^^^\n    |     |\n    |     borrowed value does not live long enough\n    |     a temporary with access to the borrow is created here ...\n@@ -23,7 +23,7 @@ error[E0597]: `y` does not live long enough\n   --> $DIR/issue-23338-locals-die-before-temps-of-body.rs:17:9\n    |\n LL |         y.borrow().clone()\n-   |         ^---------\n+   |         ^^^^^^^^^^\n    |         |\n    |         borrowed value does not live long enough\n    |         a temporary with access to the borrow is created here ..."}, {"sha": "79a0ebaeb8db6c8b6ab999999737bd3194d2280e", "filename": "src/test/ui/span/issue-36537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36537.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |         p = &a;\n LL |     }\n    |     - `a` dropped here while still borrowed\n LL |     p.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "57f80214a4f83ad2c9988fda6677fdf434aaea07", "filename": "src/test/ui/span/issue-40157.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-40157.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -2,7 +2,7 @@ error[E0597]: `foo` does not live long enough\n   --> $DIR/issue-40157.rs:2:53\n    |\n LL |     {println!(\"{:?}\", match { let foo = vec![1, 2]; foo.get(1) } { x => x });}\n-   |                             ------------------------^^^---------\n+   |                             ------------------------^^^^^^^^^^--\n    |                             |                       |          |\n    |                             |                       |          `foo` dropped here while still borrowed\n    |                             |                       borrowed value does not live long enough"}, {"sha": "8a7c504f0053bdaa94a9ba5ebcc036166d87f189", "filename": "src/test/ui/span/mut-arg-hint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,23 +4,23 @@ error[E0596]: cannot borrow `*a` as mutable, as it is behind a `&` reference\n LL |     fn foo(mut a: &String) {\n    |                   ------- help: consider changing this to be a mutable reference: `&mut String`\n LL |         a.push_str(\"bar\");\n-   |         ^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |         ^^^^^^^^^^^^^^^^^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `*a` as mutable, as it is behind a `&` reference\n   --> $DIR/mut-arg-hint.rs:8:5\n    |\n LL | pub fn foo<'a>(mut a: &'a String) {\n    |                       ---------- help: consider changing this to be a mutable reference: `&'a mut String`\n LL |     a.push_str(\"foo\");\n-   |     ^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |     ^^^^^^^^^^^^^^^^^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error[E0596]: cannot borrow `*a` as mutable, as it is behind a `&` reference\n   --> $DIR/mut-arg-hint.rs:15:9\n    |\n LL |     pub fn foo(mut a: &String) {\n    |                       ------- help: consider changing this to be a mutable reference: `&mut String`\n LL |         a.push_str(\"foo\");\n-   |         ^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |         ^^^^^^^^^^^^^^^^^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4d976a7bbfa47bb52b59dd675606d3a49273a86b", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     }\n    |     - `b` dropped here while still borrowed\n LL |\n LL |     p.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "0b985de609c26debdb98dbdcca279a3a685f655f", "filename": "src/test/ui/span/regionck-unboxed-closure-lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |         let c_ref = &c;\n LL |     }\n    |     - `c` dropped here while still borrowed\n LL |     f.use_mut();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n \n error: aborting due to previous error\n "}, {"sha": "2b649307739f5c89b08ced82852cc6a4b03ce652", "filename": "src/test/ui/span/regions-escape-loop-via-vec.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregions-escape-loop-via-vec.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     while x < 10 {\n    |           ^ use of borrowed `x`\n LL |         let mut z = x;\n LL |         _y.push(&mut z);\n-   |         -- borrow later used here\n+   |         --------------- borrow later used here\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/regions-escape-loop-via-vec.rs:6:21\n@@ -18,14 +18,15 @@ LL |     while x < 10 {\n LL |         let mut z = x;\n    |                     ^ use of borrowed `x`\n LL |         _y.push(&mut z);\n-   |         -- borrow later used here\n+   |         --------------- borrow later used here\n \n error[E0597]: `z` does not live long enough\n   --> $DIR/regions-escape-loop-via-vec.rs:7:17\n    |\n LL |         _y.push(&mut z);\n-   |         --      ^^^^^^ borrowed value does not live long enough\n-   |         |\n+   |         --------^^^^^^-\n+   |         |       |\n+   |         |       borrowed value does not live long enough\n    |         borrow later used here\n ...\n LL |     }\n@@ -38,7 +39,7 @@ LL |     let mut _y = vec![&mut x];\n    |                       ------ borrow of `x` occurs here\n ...\n LL |         _y.push(&mut z);\n-   |         -- borrow later used here\n+   |         --------------- borrow later used here\n LL |\n LL |         x += 1;\n    |         ^^^^^^ use of borrowed `x`"}, {"sha": "5d493a3e4ee5555cfb2dd559196e8e1b11e1c5ca", "filename": "src/test/ui/span/send-is-not-static-std-sync.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fsend-is-not-static-std-sync.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     drop(y);\n    |          ^ move out of `y` occurs here\n ...\n LL |         *lock.lock().unwrap() = &z;\n-   |          ---- borrow later used here\n+   |          ----------- borrow later used here\n \n error[E0597]: `z` does not live long enough\n   --> $DIR/send-is-not-static-std-sync.rs:16:33\n@@ -18,7 +18,7 @@ LL |     }\n    |     - `z` dropped here while still borrowed\n LL |\n LL |     lock.use_ref(); // (Mutex is #[may_dangle] so its dtor does not use `z` => needs explicit use)\n-   |     ---- borrow later used here\n+   |     -------------- borrow later used here\n \n error[E0505]: cannot move out of `y` because it is borrowed\n   --> $DIR/send-is-not-static-std-sync.rs:27:10\n@@ -29,7 +29,7 @@ LL |     drop(y);\n    |          ^ move out of `y` occurs here\n ...\n LL |         *lock.write().unwrap() = &z;\n-   |          ---- borrow later used here\n+   |          ------------ borrow later used here\n \n error[E0597]: `z` does not live long enough\n   --> $DIR/send-is-not-static-std-sync.rs:30:34\n@@ -40,7 +40,7 @@ LL |     }\n    |     - `z` dropped here while still borrowed\n LL |\n LL |     lock.use_ref(); // (RwLock is #[may_dangle] so its dtor does not use `z` => needs explicit use)\n-   |     ---- borrow later used here\n+   |     -------------- borrow later used here\n \n error[E0505]: cannot move out of `y` because it is borrowed\n   --> $DIR/send-is-not-static-std-sync.rs:43:10\n@@ -51,7 +51,7 @@ LL |     drop(y);\n    |          ^ move out of `y` occurs here\n ...\n LL |         tx.send(&z).unwrap();\n-   |         -- borrow later used here\n+   |         ----------- borrow later used here\n \n error[E0597]: `z` does not live long enough\n   --> $DIR/send-is-not-static-std-sync.rs:46:17"}, {"sha": "27df25be3fa03580a44316b222127c7ac1efdcf1", "filename": "src/test/ui/span/slice-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |         let x: &[isize] = &vec![1, 2, 3, 4, 5];\n LL |     }\n    |     - temporary value is freed at the end of this statement\n LL |     y.use_ref();\n-   |     - borrow later used here\n+   |     ----------- borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n    = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "80d3c940eb7c618c784dd83f400c575eedb12eac", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.nll.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.nll.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `val` does not live long enough\n LL |     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32>>) -> impl OtherTrait<'a> {\n    |               -- lifetime `'a` defined here                  ------------------- opaque type requires that `val` is borrowed for `'a`\n LL |         val.use_self()\n-   |         ^^^ borrowed value does not live long enough\n+   |         ^^^^^^^^^^^^^^ borrowed value does not live long enough\n LL |     }\n    |     - `val` dropped here while still borrowed\n    |\n@@ -13,23 +13,17 @@ help: you can add a bound to the opaque type to make it last less than `'static`\n LL |     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32>>) -> impl OtherTrait<'a> + 'a {\n    |                                                                                  ++++\n \n-error[E0515]: cannot return value referencing function parameter `val`\n+error[E0515]: cannot return reference to function parameter `val`\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:43:9\n    |\n LL |         val.use_self()\n-   |         ---^^^^^^^^^^^\n-   |         |\n-   |         returns a value referencing data owned by the current function\n-   |         `val` is borrowed here\n+   |         ^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n \n-error[E0515]: cannot return value referencing function parameter `val`\n+error[E0515]: cannot return reference to function parameter `val`\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:109:9\n    |\n LL |         val.use_self()\n-   |         ---^^^^^^^^^^^\n-   |         |\n-   |         returns a value referencing data owned by the current function\n-   |         `val` is borrowed here\n+   |         ^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n \n error: aborting due to 3 previous errors\n "}, {"sha": "e8c3a7908f5211dc3bb2c26190b7af105bdecd27", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -4,7 +4,7 @@ error[E0597]: `val` does not live long enough\n LL |     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32>>) -> impl OtherTrait<'a> {\n    |               -- lifetime `'a` defined here                  ------------------- opaque type requires that `val` is borrowed for `'a`\n LL |         val.use_self()\n-   |         ^^^ borrowed value does not live long enough\n+   |         ^^^^^^^^^^^^^^ borrowed value does not live long enough\n LL |     }\n    |     - `val` dropped here while still borrowed\n    |\n@@ -13,23 +13,17 @@ help: you can add a bound to the opaque type to make it last less than `'static`\n LL |     fn use_it<'a>(val: Box<dyn ObjectTrait<Assoc = i32>>) -> impl OtherTrait<'a> + 'a {\n    |                                                                                  ++++\n \n-error[E0515]: cannot return value referencing function parameter `val`\n+error[E0515]: cannot return reference to function parameter `val`\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:43:9\n    |\n LL |         val.use_self()\n-   |         ---^^^^^^^^^^^\n-   |         |\n-   |         returns a value referencing data owned by the current function\n-   |         `val` is borrowed here\n+   |         ^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n \n-error[E0515]: cannot return value referencing function parameter `val`\n+error[E0515]: cannot return reference to function parameter `val`\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:109:9\n    |\n LL |         val.use_self()\n-   |         ---^^^^^^^^^^^\n-   |         |\n-   |         returns a value referencing data owned by the current function\n-   |         `val` is borrowed here\n+   |         ^^^^^^^^^^^^^^ returns a reference to data owned by the current function\n \n error[E0772]: `val` has lifetime `'a` but calling `use_self` introduces an implicit `'static` lifetime requirement\n   --> $DIR/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.rs:66:13"}, {"sha": "199d5e3727850961ac894dc2d68a0a9ea893ecd6", "filename": "src/test/ui/unop-move-semantics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -7,7 +7,7 @@ LL |     !x;\n    |     -- `x` moved due to usage in operator\n LL | \n LL |     x.clone();\n-   |     ^ value borrowed here after move\n+   |     ^^^^^^^^^ value borrowed here after move\n    |\n note: calling this operator moves the left-hand side\n   --> $SRC_DIR/core/src/ops/bit.rs:LL:COL"}, {"sha": "0ad6d6c7c0e075f25d233c832a32be374588fd79", "filename": "src/test/ui/use/use-after-move-implicity-coerced-object.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4aa7879b559ccf7f82bcce2a8e532ea307697ea9/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr?ref=4aa7879b559ccf7f82bcce2a8e532ea307697ea9", "patch": "@@ -8,7 +8,7 @@ LL |     l.push(n);\n    |            - value moved here\n LL | \n LL |     let x = n.to_string();\n-   |             ^ value borrowed here after move\n+   |             ^^^^^^^^^^^^^ value borrowed here after move\n \n error: aborting due to previous error\n "}]}