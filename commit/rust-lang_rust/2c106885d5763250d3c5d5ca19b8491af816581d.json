{"sha": "2c106885d5763250d3c5d5ca19b8491af816581d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMTA2ODg1ZDU3NjMyNTBkM2M1ZDVjYTE5Yjg0OTFhZjgxNjU4MWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-05T03:36:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-05T03:36:26Z"}, "message": "Auto merge of #85457 - jyn514:remove-doc-include, r=GuillaumeGomez\n\nRemove `doc(include)`\n\nThis nightly feature is redundant now that `extended_key_value_attributes` is stable (https://github.com/rust-lang/rust/pull/83366). `@rust-lang/rustdoc` not sure if you think this needs FCP; there was already an FCP in #82539, but technically it was for deprecating, not removing the feature altogether.\n\nThis should not be merged before #83366.\n\ncc `@petrochenkov`", "tree": {"sha": "1ec100be23a2b93af378c5a19f0db73611d4739b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ec100be23a2b93af378c5a19f0db73611d4739b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c106885d5763250d3c5d5ca19b8491af816581d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c106885d5763250d3c5d5ca19b8491af816581d", "html_url": "https://github.com/rust-lang/rust/commit/2c106885d5763250d3c5d5ca19b8491af816581d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c106885d5763250d3c5d5ca19b8491af816581d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e6f0e878d1302d6e7acf0c04fb28e906036f567", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e6f0e878d1302d6e7acf0c04fb28e906036f567", "html_url": "https://github.com/rust-lang/rust/commit/9e6f0e878d1302d6e7acf0c04fb28e906036f567"}, {"sha": "15fec1fb80b5264d7e2d3382478424abb9afb3d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/15fec1fb80b5264d7e2d3382478424abb9afb3d1", "html_url": "https://github.com/rust-lang/rust/commit/15fec1fb80b5264d7e2d3382478424abb9afb3d1"}], "stats": {"total": 528, "additions": 79, "deletions": 449}, "files": [{"sha": "664e138b39dc81bfc53af267177e0eec27462ea3", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -318,7 +318,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 }}\n \n                 gate_doc!(\n-                    include => external_doc\n                     cfg => doc_cfg\n                     masked => doc_masked\n                     notable_trait => doc_notable_trait"}, {"sha": "aab2741c85240c1b4d08ffa72a7ec5a998726702", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -1068,11 +1068,11 @@ impl<'a> ExtCtxt<'a> {\n         self.resolver.check_unused_macros();\n     }\n \n-    /// Resolves a path mentioned inside Rust code.\n+    /// Resolves a `path` mentioned inside Rust code, returning an absolute path.\n     ///\n-    /// This unifies the logic used for resolving `include_X!`, and `#[doc(include)]` file paths.\n+    /// This unifies the logic used for resolving `include_X!`.\n     ///\n-    /// Returns an absolute path to the file that `path` refers to.\n+    /// FIXME: move this to `rustc_builtin_macros` and make it private.\n     pub fn resolve_path(\n         &self,\n         path: impl Into<PathBuf>,"}, {"sha": "39c0447bd099eadc87a28c52c6804c623b0e396f", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 5, "deletions": 139, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -12,11 +12,11 @@ use rustc_ast::ptr::P;\n use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_ast::visit::{self, AssocCtxt, Visitor};\n-use rustc_ast::{AstLike, AttrItem, Block, Inline, ItemKind, LitKind, MacArgs};\n+use rustc_ast::{AstLike, Block, Inline, ItemKind, MacArgs};\n use rustc_ast::{MacCallStmt, MacStmtStyle, MetaItemKind, ModKind, NestedMetaItem};\n use rustc_ast::{NodeId, PatKind, Path, StmtKind, Unsafe};\n use rustc_ast_pretty::pprust;\n-use rustc_attr::{self as attr, is_builtin_attr};\n+use rustc_attr::is_builtin_attr;\n use rustc_data_structures::map_in_place::MapInPlace;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_data_structures::sync::Lrc;\n@@ -28,15 +28,14 @@ use rustc_session::lint::builtin::UNUSED_DOC_COMMENTS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::{feature_err, ParseSess};\n use rustc_session::Limit;\n-use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::{ExpnId, FileName, Span, DUMMY_SP};\n+use rustc_span::symbol::{sym, Ident};\n+use rustc_span::{ExpnId, FileName, Span};\n \n use smallvec::{smallvec, SmallVec};\n-use std::io::ErrorKind;\n use std::ops::DerefMut;\n use std::path::PathBuf;\n use std::rc::Rc;\n-use std::{iter, mem, slice};\n+use std::{iter, mem};\n \n macro_rules! ast_fragments {\n     (\n@@ -1524,139 +1523,6 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         noop_flat_map_generic_param(param, self)\n     }\n \n-    fn visit_attribute(&mut self, at: &mut ast::Attribute) {\n-        // turn `#[doc(include=\"filename\")]` attributes into `#[doc(include(file=\"filename\",\n-        // contents=\"file contents\")]` attributes\n-        if !self.cx.sess.check_name(at, sym::doc) {\n-            return noop_visit_attribute(at, self);\n-        }\n-\n-        if let Some(list) = at.meta_item_list() {\n-            if !list.iter().any(|it| it.has_name(sym::include)) {\n-                return noop_visit_attribute(at, self);\n-            }\n-\n-            let mut items = vec![];\n-\n-            for mut it in list {\n-                if !it.has_name(sym::include) {\n-                    items.push({\n-                        noop_visit_meta_list_item(&mut it, self);\n-                        it\n-                    });\n-                    continue;\n-                }\n-\n-                if let Some(file) = it.value_str() {\n-                    let err_count = self.cx.sess.parse_sess.span_diagnostic.err_count();\n-                    self.check_attributes(slice::from_ref(at));\n-                    if self.cx.sess.parse_sess.span_diagnostic.err_count() > err_count {\n-                        // avoid loading the file if they haven't enabled the feature\n-                        return noop_visit_attribute(at, self);\n-                    }\n-\n-                    let filename = match self.cx.resolve_path(&*file.as_str(), it.span()) {\n-                        Ok(filename) => filename,\n-                        Err(mut err) => {\n-                            err.emit();\n-                            continue;\n-                        }\n-                    };\n-\n-                    match self.cx.source_map().load_file(&filename) {\n-                        Ok(source_file) => {\n-                            let src = source_file\n-                                .src\n-                                .as_ref()\n-                                .expect(\"freshly loaded file should have a source\");\n-                            let src_interned = Symbol::intern(src.as_str());\n-\n-                            let include_info = vec![\n-                                ast::NestedMetaItem::MetaItem(attr::mk_name_value_item_str(\n-                                    Ident::with_dummy_span(sym::file),\n-                                    file,\n-                                    DUMMY_SP,\n-                                )),\n-                                ast::NestedMetaItem::MetaItem(attr::mk_name_value_item_str(\n-                                    Ident::with_dummy_span(sym::contents),\n-                                    src_interned,\n-                                    DUMMY_SP,\n-                                )),\n-                            ];\n-\n-                            let include_ident = Ident::with_dummy_span(sym::include);\n-                            let item = attr::mk_list_item(include_ident, include_info);\n-                            items.push(ast::NestedMetaItem::MetaItem(item));\n-                        }\n-                        Err(e) => {\n-                            let lit_span = it.name_value_literal_span().unwrap();\n-\n-                            if e.kind() == ErrorKind::InvalidData {\n-                                self.cx\n-                                    .struct_span_err(\n-                                        lit_span,\n-                                        &format!(\"{} wasn't a utf-8 file\", filename.display()),\n-                                    )\n-                                    .span_label(lit_span, \"contains invalid utf-8\")\n-                                    .emit();\n-                            } else {\n-                                let mut err = self.cx.struct_span_err(\n-                                    lit_span,\n-                                    &format!(\"couldn't read {}: {}\", filename.display(), e),\n-                                );\n-                                err.span_label(lit_span, \"couldn't read file\");\n-\n-                                err.emit();\n-                            }\n-                        }\n-                    }\n-                } else {\n-                    let mut err = self\n-                        .cx\n-                        .struct_span_err(it.span(), \"expected path to external documentation\");\n-\n-                    // Check if the user erroneously used `doc(include(...))` syntax.\n-                    let literal = it.meta_item_list().and_then(|list| {\n-                        if list.len() == 1 {\n-                            list[0].literal().map(|literal| &literal.kind)\n-                        } else {\n-                            None\n-                        }\n-                    });\n-\n-                    let (path, applicability) = match &literal {\n-                        Some(LitKind::Str(path, ..)) => {\n-                            (path.to_string(), Applicability::MachineApplicable)\n-                        }\n-                        _ => (String::from(\"<path>\"), Applicability::HasPlaceholders),\n-                    };\n-\n-                    err.span_suggestion(\n-                        it.span(),\n-                        \"provide a file path with `=`\",\n-                        format!(\"include = \\\"{}\\\"\", path),\n-                        applicability,\n-                    );\n-\n-                    err.emit();\n-                }\n-            }\n-\n-            let meta = attr::mk_list_item(Ident::with_dummy_span(sym::doc), items);\n-            *at = ast::Attribute {\n-                kind: ast::AttrKind::Normal(\n-                    AttrItem { path: meta.path, args: meta.kind.mac_args(meta.span), tokens: None },\n-                    None,\n-                ),\n-                span: at.span,\n-                id: at.id,\n-                style: at.style,\n-            };\n-        } else {\n-            noop_visit_attribute(at, self)\n-        }\n-    }\n-\n     fn visit_id(&mut self, id: &mut ast::NodeId) {\n         if self.monotonic {\n             debug_assert_eq!(*id, ast::DUMMY_NODE_ID);"}, {"sha": "2054cd3e4c2920e38782cfa7f266fbeeaa513db1", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -370,9 +370,6 @@ declare_features! (\n     /// Allows `#[doc(masked)]`.\n     (active, doc_masked, \"1.21.0\", Some(44027), None),\n \n-    /// Allows `#[doc(include = \"some-file\")]`.\n-    (active, external_doc, \"1.22.0\", Some(44732), None),\n-\n     /// Allows using `crate` as visibility modifier, synonymous with `pub(crate)`.\n     (active, crate_visibility_modifier, \"1.23.0\", Some(53120), None),\n "}, {"sha": "71c10eb650754699eb8d98456c7fe0a4dd2e46ca", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -140,6 +140,10 @@ declare_features! (\n     (removed, const_fn, \"1.54.0\", Some(57563), None,\n      Some(\"split into finer-grained feature gates\")),\n \n+    /// Allows `#[doc(include = \"some-file\")]`.\n+    (removed, external_doc, \"1.54.0\", Some(44732), None,\n+     Some(\"use #[doc = include_str!(\\\"filename\\\")] instead, which handles macro invocations\")),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features\n     // -------------------------------------------------------------------------"}, {"sha": "f6a84966f7a91b9a4b5ab92d2cbf026e16101467", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -489,7 +489,7 @@ fn has_doc(sess: &Session, attr: &ast::Attribute) -> bool {\n \n     if let Some(list) = attr.meta_item_list() {\n         for meta in list {\n-            if meta.has_name(sym::include) || meta.has_name(sym::hidden) {\n+            if meta.has_name(sym::hidden) {\n                 return true;\n             }\n         }"}, {"sha": "91b64611511456e3512c8f4ccb804fe7abc62ffb", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -705,7 +705,7 @@ impl CheckAttrVisitor<'tcx> {\n         let mut is_valid = true;\n \n         if let Some(list) = attr.meta().and_then(|mi| mi.meta_item_list().map(|l| l.to_vec())) {\n-            for meta in list {\n+            for meta in &list {\n                 if let Some(i_meta) = meta.meta_item() {\n                     match i_meta.name_or_empty() {\n                         sym::alias\n@@ -757,7 +757,6 @@ impl CheckAttrVisitor<'tcx> {\n                         | sym::html_no_source\n                         | sym::html_playground_url\n                         | sym::html_root_url\n-                        | sym::include\n                         | sym::inline\n                         | sym::issue_tracker_base_url\n                         | sym::keyword\n@@ -792,6 +791,30 @@ impl CheckAttrVisitor<'tcx> {\n                                         );\n                                         diag.note(\"`doc(spotlight)` is now a no-op\");\n                                     }\n+                                    if i_meta.has_name(sym::include) {\n+                                        if let Some(value) = i_meta.value_str() {\n+                                            // if there are multiple attributes, the suggestion would suggest deleting all of them, which is incorrect\n+                                            let applicability = if list.len() == 1 {\n+                                                Applicability::MachineApplicable\n+                                            } else {\n+                                                Applicability::MaybeIncorrect\n+                                            };\n+                                            let inner = if attr.style == AttrStyle::Inner {\n+                                                \"!\"\n+                                            } else {\n+                                                \"\"\n+                                            };\n+                                            diag.span_suggestion(\n+                                                attr.meta().unwrap().span,\n+                                                \"use `doc = include_str!` instead\",\n+                                                format!(\n+                                                    \"#{}[doc = include_str!(\\\"{}\\\")]\",\n+                                                    inner, value\n+                                                ),\n+                                                applicability,\n+                                            );\n+                                        }\n+                                    }\n                                     diag.emit();\n                                 },\n                             );"}, {"sha": "524c352fef5151b70165990348b58fefafe9d1ff", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -826,20 +826,6 @@ impl<'tcx> SaveContext<'tcx> {\n                 // FIXME: Should save-analysis beautify doc strings itself or leave it to users?\n                 result.push_str(&beautify_doc_string(val).as_str());\n                 result.push('\\n');\n-            } else if self.tcx.sess.check_name(attr, sym::doc) {\n-                if let Some(meta_list) = attr.meta_item_list() {\n-                    meta_list\n-                        .into_iter()\n-                        .filter(|it| it.has_name(sym::include))\n-                        .filter_map(|it| it.meta_item_list().map(|l| l.to_owned()))\n-                        .flat_map(|it| it)\n-                        .filter(|meta| meta.has_name(sym::contents))\n-                        .filter_map(|meta| meta.value_str())\n-                        .for_each(|val| {\n-                            result.push_str(&val.as_str());\n-                            result.push('\\n');\n-                        });\n-                }\n             }\n         }\n "}, {"sha": "d4e4c5b0d3e543a4138bdf20a52caebd4d312684", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -159,7 +159,6 @@\n #![feature(const_fn_transmute)]\n #![feature(abi_unadjusted)]\n #![feature(adx_target_feature)]\n-#![feature(external_doc)]\n #![feature(associated_type_bounds)]\n #![feature(const_caller_location)]\n #![feature(slice_ptr_get)]"}, {"sha": "cb7b85655b5a8fe86b62c32900ec4fdb155e1109", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -424,9 +424,7 @@ without including it in your main documentation. For example, you could write th\n `lib.rs` to test your README as part of your doctests:\n \n ```rust,no_run\n-#![feature(external_doc)]\n-\n-#[doc(include = \"../README.md\")]\n+#[doc = include_str!(\"../README.md\")]\n #[cfg(doctest)]\n pub struct ReadmeDoctests;\n ```"}, {"sha": "e9b15666bb316115d6f9b83d5f3168588a8879a8", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -131,22 +131,6 @@ Book][unstable-masked] and [its tracking issue][issue-masked].\n [unstable-masked]: ../unstable-book/language-features/doc-masked.html\n [issue-masked]: https://github.com/rust-lang/rust/issues/44027\n \n-### Include external files as API documentation\n-\n-As designed in [RFC 1990], Rustdoc can read an external file to use as a type's documentation. This\n-is useful if certain documentation is so long that it would break the flow of reading the source.\n-Instead of writing it all inline, writing `#[doc(include = \"sometype.md\")]` will ask Rustdoc to\n-instead read that file and use it as if it were written inline.\n-\n-[RFC 1990]: https://github.com/rust-lang/rfcs/pull/1990\n-\n-`#[doc(include = \"...\")]` currently requires the `#![feature(external_doc)]` feature gate. For more\n-information, see [its chapter in the Unstable Book][unstable-include] and [its tracking\n-issue][issue-include].\n-\n-[unstable-include]: ../unstable-book/language-features/external-doc.html\n-[issue-include]: https://github.com/rust-lang/rust/issues/44732\n-\n ## Unstable command-line arguments\n \n These features are enabled by passing a command-line flag to Rustdoc, but the flags in question are"}, {"sha": "effae5d299949181a6cc8d7e4dc53c6a7d49cc0a", "filename": "src/doc/unstable-book/src/language-features/external-doc.md", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9e6f0e878d1302d6e7acf0c04fb28e906036f567/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexternal-doc.md", "raw_url": "https://github.com/rust-lang/rust/raw/9e6f0e878d1302d6e7acf0c04fb28e906036f567/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexternal-doc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fexternal-doc.md?ref=9e6f0e878d1302d6e7acf0c04fb28e906036f567", "patch": "@@ -1,40 +0,0 @@\n-# `external_doc`\n-\n-The tracking issue for this feature is: [#44732]\n-\n-The `external_doc` feature allows the use of the `include` parameter to the `#[doc]` attribute, to\n-include external files in documentation. Use the attribute in place of, or in addition to, regular\n-doc comments and `#[doc]` attributes, and `rustdoc` will load the given file when it renders\n-documentation for your crate.\n-\n-With the following files in the same directory:\n-\n-`external-doc.md`:\n-\n-```markdown\n-# My Awesome Type\n-\n-This is the documentation for this spectacular type.\n-```\n-\n-`lib.rs`:\n-\n-```no_run (needs-external-files)\n-#![feature(external_doc)]\n-\n-#[doc(include = \"external-doc.md\")]\n-pub struct MyAwesomeType;\n-```\n-\n-`rustdoc` will load the file `external-doc.md` and use it as the documentation for the `MyAwesomeType`\n-struct.\n-\n-When locating files, `rustdoc` will base paths in the `src/` directory, as if they were alongside the\n-`lib.rs` for your crate. So if you want a `docs/` folder to live alongside the `src/` directory,\n-start your paths with `../docs/` for `rustdoc` to properly find the file.\n-\n-This feature was proposed in [RFC #1990] and initially implemented in PR [#44781].\n-\n-[#44732]: https://github.com/rust-lang/rust/issues/44732\n-[RFC #1990]: https://github.com/rust-lang/rfcs/pull/1990\n-[#44781]: https://github.com/rust-lang/rust/pull/44781"}, {"sha": "fa1639f9dc3dd4a0bb311361bff4d66338ebe2cf", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 5, "deletions": 88, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -809,7 +809,7 @@ impl AttributesExt for [ast::Attribute] {\n                 // #[doc(...)]\n                 if let Some(list) = attr.meta().as_ref().and_then(|mi| mi.meta_item_list()) {\n                     for item in list {\n-                        // #[doc(include)]\n+                        // #[doc(hidden)]\n                         if !item.has_name(sym::cfg) {\n                             continue;\n                         }\n@@ -894,9 +894,6 @@ crate enum DocFragmentKind {\n     SugaredDoc,\n     /// A doc fragment created from a \"raw\" `#[doc=\"\"]` attribute.\n     RawDoc,\n-    /// A doc fragment created from a `#[doc(include=\"filename\")]` attribute. Contains both the\n-    /// given filename and the file contents.\n-    Include { filename: Symbol },\n }\n \n // The goal of this function is to apply the `DocFragment` transformations that are required when\n@@ -930,18 +927,8 @@ impl<'a> FromIterator<&'a DocFragment> for String {\n     where\n         T: IntoIterator<Item = &'a DocFragment>,\n     {\n-        let mut prev_kind: Option<DocFragmentKind> = None;\n         iter.into_iter().fold(String::new(), |mut acc, frag| {\n-            if !acc.is_empty()\n-                && prev_kind\n-                    .take()\n-                    .map(|p| matches!(p, DocFragmentKind::Include { .. }) && p != frag.kind)\n-                    .unwrap_or(false)\n-            {\n-                acc.push('\\n');\n-            }\n             add_doc_fragment(&mut acc, &frag);\n-            prev_kind = Some(frag.kind);\n             acc\n         })\n     }\n@@ -988,45 +975,6 @@ impl Attributes {\n         self.other_attrs.lists(name)\n     }\n \n-    /// Reads a `MetaItem` from within an attribute, looks for whether it is a\n-    /// `#[doc(include=\"file\")]`, and returns the filename and contents of the file as loaded from\n-    /// its expansion.\n-    crate fn extract_include(mi: &ast::MetaItem) -> Option<(Symbol, Symbol)> {\n-        mi.meta_item_list().and_then(|list| {\n-            for meta in list {\n-                if meta.has_name(sym::include) {\n-                    // the actual compiled `#[doc(include=\"filename\")]` gets expanded to\n-                    // `#[doc(include(file=\"filename\", contents=\"file contents\")]` so we need to\n-                    // look for that instead\n-                    return meta.meta_item_list().and_then(|list| {\n-                        let mut filename: Option<Symbol> = None;\n-                        let mut contents: Option<Symbol> = None;\n-\n-                        for it in list {\n-                            if it.has_name(sym::file) {\n-                                if let Some(name) = it.value_str() {\n-                                    filename = Some(name);\n-                                }\n-                            } else if it.has_name(sym::contents) {\n-                                if let Some(docs) = it.value_str() {\n-                                    contents = Some(docs);\n-                                }\n-                            }\n-                        }\n-\n-                        if let (Some(filename), Some(contents)) = (filename, contents) {\n-                            Some((filename, contents))\n-                        } else {\n-                            None\n-                        }\n-                    });\n-                }\n-            }\n-\n-            None\n-        })\n-    }\n-\n     crate fn has_doc_flag(&self, flag: Symbol) -> bool {\n         for attr in &self.other_attrs {\n             if !attr.has_name(sym::doc) {\n@@ -1050,18 +998,9 @@ impl Attributes {\n         let mut doc_strings: Vec<DocFragment> = vec![];\n         let mut doc_line = 0;\n \n-        fn update_need_backline(doc_strings: &mut Vec<DocFragment>, frag: &DocFragment) {\n+        fn update_need_backline(doc_strings: &mut Vec<DocFragment>) {\n             if let Some(prev) = doc_strings.last_mut() {\n-                if matches!(prev.kind, DocFragmentKind::Include { .. })\n-                    || prev.kind != frag.kind\n-                    || prev.parent_module != frag.parent_module\n-                {\n-                    // add a newline for extra padding between segments\n-                    prev.need_backline = prev.kind == DocFragmentKind::SugaredDoc\n-                        || prev.kind == DocFragmentKind::RawDoc\n-                } else {\n-                    prev.need_backline = true;\n-                }\n+                prev.need_backline = true;\n             }\n         }\n \n@@ -1087,31 +1026,12 @@ impl Attributes {\n                     indent: 0,\n                 };\n \n-                update_need_backline(&mut doc_strings, &frag);\n+                update_need_backline(&mut doc_strings);\n \n                 doc_strings.push(frag);\n \n                 None\n             } else {\n-                if attr.has_name(sym::doc) {\n-                    if let Some(mi) = attr.meta() {\n-                        if let Some((filename, contents)) = Attributes::extract_include(&mi) {\n-                            let line = doc_line;\n-                            doc_line += contents.as_str().lines().count();\n-                            let frag = DocFragment {\n-                                line,\n-                                span: attr.span,\n-                                doc: contents,\n-                                kind: DocFragmentKind::Include { filename },\n-                                parent_module,\n-                                need_backline: false,\n-                                indent: 0,\n-                            };\n-                            update_need_backline(&mut doc_strings, &frag);\n-                            doc_strings.push(frag);\n-                        }\n-                    }\n-                }\n                 Some(attr.clone())\n             }\n         };\n@@ -1137,10 +1057,7 @@ impl Attributes {\n         let mut out = String::new();\n         add_doc_fragment(&mut out, &ori);\n         while let Some(new_frag) = iter.next() {\n-            if matches!(ori.kind, DocFragmentKind::Include { .. })\n-                || new_frag.kind != ori.kind\n-                || new_frag.parent_module != ori.parent_module\n-            {\n+            if new_frag.kind != ori.kind || new_frag.parent_module != ori.parent_module {\n                 break;\n             }\n             add_doc_fragment(&mut out, &new_frag);"}, {"sha": "2fd55699d44ddce99163b985a1f73468190ba115", "filename": "src/test/run-make-fulldeps/include_bytes_deps/main.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Finclude_bytes_deps%2Fmain.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -1,6 +1,4 @@\n-#![feature(external_doc)]\n-\n-#[doc(include=\"input.md\")]\n+#[doc = include_str!(\"input.md\")]\n pub struct SomeStruct;\n \n pub fn main() {"}, {"sha": "dd70675032f77748e56dab0617dcaa42b301677a", "filename": "src/test/run-make-fulldeps/save-analysis/foo.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsave-analysis%2Ffoo.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -2,7 +2,6 @@\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n #![feature(associated_type_defaults)]\n-#![feature(external_doc)]\n \n extern crate rustc_graphviz;\n // A simple rust project\n@@ -454,9 +453,9 @@ impl Iterator for SilenceGenerator {\n     }\n }\n \n+#[doc = include_str!(\"extra-docs.md\")]\n+struct StructWithDocs;\n+\n trait Foo {\n     type Bar = FrameBuffer;\n }\n-\n-#[doc(include = \"extra-docs.md\")]\n-struct StructWithDocs;"}, {"sha": "0c01007355146aee50ea03892a86e7e0aede1c95", "filename": "src/test/rustdoc-ui/doc-include-suggestion.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frustdoc-ui%2Fdoc-include-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frustdoc-ui%2Fdoc-include-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-include-suggestion.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#[doc(include = \"external-cross-doc.md\")]\n+//~^ WARNING unknown `doc` attribute `include`\n+//~| HELP use `doc = include_str!` instead\n+// FIXME(#85497): make this a deny instead so it's more clear what's happening\n+//~| NOTE on by default\n+//~| WARNING previously accepted\n+//~| NOTE see issue #82730\n+pub struct NeedMoreDocs;"}, {"sha": "870b7efa2ac95a753bb6ded5752dc8113d31fb4e", "filename": "src/test/rustdoc-ui/doc-include-suggestion.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frustdoc-ui%2Fdoc-include-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frustdoc-ui%2Fdoc-include-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-include-suggestion.stderr?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -0,0 +1,12 @@\n+warning: unknown `doc` attribute `include`\n+  --> $DIR/doc-include-suggestion.rs:3:7\n+   |\n+LL | #[doc(include = \"external-cross-doc.md\")]\n+   | ------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-- help: use `doc = include_str!` instead: `#[doc = include_str!(\"external-cross-doc.md\")]`\n+   |\n+   = note: `#[warn(invalid_doc_attributes)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #82730 <https://github.com/rust-lang/rust/issues/82730>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "d3c85326559304fc7eb838eedae9a2f0edbf40d9", "filename": "src/test/rustdoc/auxiliary/external-cross-doc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frustdoc%2Fauxiliary%2Fexternal-cross-doc.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frustdoc%2Fauxiliary%2Fexternal-cross-doc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fexternal-cross-doc.md?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -1,4 +1,4 @@\n # Cross-crate imported docs\n \n-This file is to make sure `#[doc(include=\"file.md\")]` works when you re-export an item with included\n+This file is to make sure `#[doc = include_str!(\"file.md\")]` works when you re-export an item with included\n docs."}, {"sha": "5de63cdabc6f982cfb6957a5338f9356c40673c6", "filename": "src/test/rustdoc/auxiliary/external-cross.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frustdoc%2Fauxiliary%2Fexternal-cross.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frustdoc%2Fauxiliary%2Fexternal-cross.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fexternal-cross.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -1,5 +1,3 @@\n-#![feature(external_doc)]\n-#![deny(missing_doc)]\n-\n-#[doc(include=\"external-cross-doc.md\")]\n+#[deny(missing_docs)]\n+#[doc = include_str!(\"external-cross-doc.md\")]\n pub struct NeedMoreDocs;"}, {"sha": "babde0a05ad2fb558ab315606f2fc28f68bfc737", "filename": "src/test/rustdoc/auxiliary/external-doc.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frustdoc%2Fauxiliary%2Fexternal-doc.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frustdoc%2Fauxiliary%2Fexternal-doc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fexternal-doc.md?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -1,3 +1,3 @@\n # External Docs\n \n-This file is here to test the `#[doc(include=\"file\")]` attribute.\n+This file is here to test the `#[doc = include_str!(\"file\")]` attribute."}, {"sha": "fc29cb252e26c614df56ff48f886d8f265960e89", "filename": "src/test/rustdoc/external-doc.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frustdoc%2Fexternal-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frustdoc%2Fexternal-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fexternal-doc.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -1,12 +1,3 @@\n-#![feature(external_doc)]\n-\n-// @has external_doc/struct.CanHasDocs.html\n-// @has - '//h1' 'External Docs'\n-// @has - '//h2' 'Inline Docs'\n-#[doc(include = \"auxiliary/external-doc.md\")]\n-/// ## Inline Docs\n-pub struct CanHasDocs;\n-\n // @has external_doc/struct.IncludeStrDocs.html\n // @has - '//h1' 'External Docs'\n // @has - '//h2' 'Inline Docs'"}, {"sha": "372af5f4672a7c2e699a474a7eb2cc48ba776dce", "filename": "src/test/rustdoc/unindent.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frustdoc%2Funindent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftest%2Frustdoc%2Funindent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Funindent.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -1,5 +1,3 @@\n-#![feature(external_doc)]\n-\n #![crate_name = \"foo\"]\n \n // @has foo/struct.Example.html\n@@ -51,7 +49,7 @@ pub struct I;\n // @matches - '//div[@class=\"docblock\"]/p' '(?m)a\\nno whitespace\\nJust some text.\\Z'\n ///a\n ///no whitespace\n-#[doc(include = \"unindent.md\")]\n+#[doc = include_str!(\"unindent.md\")]\n pub struct J;\n \n // @has foo/struct.K.html\n@@ -60,5 +58,5 @@ pub struct J;\n ///\n ///    4 whitespaces!\n ///\n-#[doc(include = \"unindent.md\")]\n+#[doc = include_str!(\"unindent.md\")]\n pub struct K;"}, {"sha": "4e89f7464da49219e786d25b96813cb790977823", "filename": "src/test/ui/extern/external-doc-error.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9e6f0e878d1302d6e7acf0c04fb28e906036f567/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e6f0e878d1302d6e7acf0c04fb28e906036f567/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.rs?ref=9e6f0e878d1302d6e7acf0c04fb28e906036f567", "patch": "@@ -1,31 +0,0 @@\n-// normalize-stderr-test: \"not-a-file.md:.*\\(\" -> \"not-a-file.md: $$FILE_NOT_FOUND_MSG (\"\n-\n-#![feature(external_doc)]\n-\n-#[doc(include = \"not-a-file.md\")]\n-pub struct SomeStruct; //~^ ERROR couldn't read\n-\n-#[doc(include = \"auxiliary/invalid-utf8.txt\")]\n-pub struct InvalidUtf8; //~^ ERROR wasn't a utf-8 file\n-\n-#[doc(include)]\n-pub struct MissingPath; //~^ ERROR expected path\n-                        //~| HELP provide a file path with `=`\n-                        //~| SUGGESTION include = \"<path>\"\n-\n-#[doc(include(\"../README.md\"))]\n-pub struct InvalidPathSyntax; //~^ ERROR expected path\n-                              //~| HELP provide a file path with `=`\n-                              //~| SUGGESTION include = \"../README.md\"\n-\n-#[doc(include = 123)]\n-pub struct InvalidPathType; //~^ ERROR expected path\n-                            //~| HELP provide a file path with `=`\n-                            //~| SUGGESTION include = \"<path>\"\n-\n-#[doc(include(123))]\n-pub struct InvalidPathSyntaxAndType; //~^ ERROR expected path\n-                                     //~| HELP provide a file path with `=`\n-                                     //~| SUGGESTION include = \"<path>\"\n-\n-fn main() {}"}, {"sha": "b180cd66c52696534864ea82b087ab6137d38169", "filename": "src/test/ui/extern/external-doc-error.stderr", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9e6f0e878d1302d6e7acf0c04fb28e906036f567/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e6f0e878d1302d6e7acf0c04fb28e906036f567/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fexternal-doc-error.stderr?ref=9e6f0e878d1302d6e7acf0c04fb28e906036f567", "patch": "@@ -1,38 +0,0 @@\n-error: couldn't read $DIR/not-a-file.md: $FILE_NOT_FOUND_MSG (os error 2)\n-  --> $DIR/external-doc-error.rs:5:17\n-   |\n-LL | #[doc(include = \"not-a-file.md\")]\n-   |                 ^^^^^^^^^^^^^^^ couldn't read file\n-\n-error: $DIR/auxiliary/invalid-utf8.txt wasn't a utf-8 file\n-  --> $DIR/external-doc-error.rs:8:17\n-   |\n-LL | #[doc(include = \"auxiliary/invalid-utf8.txt\")]\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ contains invalid utf-8\n-\n-error: expected path to external documentation\n-  --> $DIR/external-doc-error.rs:11:7\n-   |\n-LL | #[doc(include)]\n-   |       ^^^^^^^ help: provide a file path with `=`: `include = \"<path>\"`\n-\n-error: expected path to external documentation\n-  --> $DIR/external-doc-error.rs:16:7\n-   |\n-LL | #[doc(include(\"../README.md\"))]\n-   |       ^^^^^^^^^^^^^^^^^^^^^^^ help: provide a file path with `=`: `include = \"../README.md\"`\n-\n-error: expected path to external documentation\n-  --> $DIR/external-doc-error.rs:21:7\n-   |\n-LL | #[doc(include = 123)]\n-   |       ^^^^^^^^^^^^^ help: provide a file path with `=`: `include = \"<path>\"`\n-\n-error: expected path to external documentation\n-  --> $DIR/external-doc-error.rs:26:7\n-   |\n-LL | #[doc(include(123))]\n-   |       ^^^^^^^^^^^^ help: provide a file path with `=`: `include = \"<path>\"`\n-\n-error: aborting due to 6 previous errors\n-"}, {"sha": "4e6e293846c6e08e2dc387db12d3bf35c8d88680", "filename": "src/test/ui/feature-gates/feature-gate-external_doc.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e6f0e878d1302d6e7acf0c04fb28e906036f567/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e6f0e878d1302d6e7acf0c04fb28e906036f567/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.rs?ref=9e6f0e878d1302d6e7acf0c04fb28e906036f567", "patch": "@@ -1,3 +0,0 @@\n-#[doc(include=\"asdf.md\")] //~ ERROR: `#[doc(include)]` is experimental\n-                          //~| ERROR: `#[doc(include)]` is experimental\n-fn main() {}"}, {"sha": "bd2aefe90c1834151f6121952f9a8642f31998ed", "filename": "src/test/ui/feature-gates/feature-gate-external_doc.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9e6f0e878d1302d6e7acf0c04fb28e906036f567/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e6f0e878d1302d6e7acf0c04fb28e906036f567/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-external_doc.stderr?ref=9e6f0e878d1302d6e7acf0c04fb28e906036f567", "patch": "@@ -1,21 +0,0 @@\n-error[E0658]: `#[doc(include)]` is experimental\n-  --> $DIR/feature-gate-external_doc.rs:1:1\n-   |\n-LL | #[doc(include=\"asdf.md\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #44732 <https://github.com/rust-lang/rust/issues/44732> for more information\n-   = help: add `#![feature(external_doc)]` to the crate attributes to enable\n-\n-error[E0658]: `#[doc(include)]` is experimental\n-  --> $DIR/feature-gate-external_doc.rs:1:1\n-   |\n-LL | #[doc(include=\"asdf.md\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #44732 <https://github.com/rust-lang/rust/issues/44732> for more information\n-   = help: add `#![feature(external_doc)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "a46a7407df0ceba21331d46cf938be5a0c8c2bc6", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -7,8 +7,7 @@\n \n use clippy_utils::attrs::is_doc_hidden;\n use clippy_utils::diagnostics::span_lint;\n-use if_chain::if_chain;\n-use rustc_ast::ast::{self, MetaItem, MetaItemKind};\n+use rustc_ast::ast;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::ty;\n@@ -56,20 +55,6 @@ impl MissingDoc {\n         *self.doc_hidden_stack.last().expect(\"empty doc_hidden_stack\")\n     }\n \n-    fn has_include(meta: Option<MetaItem>) -> bool {\n-        if_chain! {\n-            if let Some(meta) = meta;\n-            if let MetaItemKind::List(list) = meta.kind;\n-            if let Some(meta) = list.get(0);\n-            if let Some(name) = meta.ident();\n-            then {\n-                name.name == sym::include\n-            } else {\n-                false\n-            }\n-        }\n-    }\n-\n     fn check_missing_docs_attrs(\n         &self,\n         cx: &LateContext<'_>,\n@@ -95,7 +80,7 @@ impl MissingDoc {\n \n         let has_doc = attrs\n             .iter()\n-            .any(|a| a.doc_str().is_some() || Self::has_include(a.meta()));\n+            .any(|a| a.doc_str().is_some());\n         if !has_doc {\n             span_lint(\n                 cx,"}, {"sha": "e00c7fbfed15745932a1929049ef96f943ae5fd2", "filename": "src/tools/clippy/tests/ui/missing-doc-crate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing-doc-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c106885d5763250d3c5d5ca19b8491af816581d/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing-doc-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmissing-doc-crate.rs?ref=2c106885d5763250d3c5d5ca19b8491af816581d", "patch": "@@ -1,5 +1,4 @@\n #![warn(clippy::missing_docs_in_private_items)]\n-#![feature(external_doc)]\n-#![doc(include = \"../../README.md\")]\n+#![doc = include_str!(\"../../README.md\")]\n \n fn main() {}"}]}