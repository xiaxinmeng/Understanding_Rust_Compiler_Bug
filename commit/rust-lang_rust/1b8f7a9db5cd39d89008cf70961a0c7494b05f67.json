{"sha": "1b8f7a9db5cd39d89008cf70961a0c7494b05f67", "node_id": "C_kwDOAAsO6NoAKDFiOGY3YTlkYjVjZDM5ZDg5MDA4Y2Y3MDk2MWEwYzc0OTRiMDVmNjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-10T22:34:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-10T22:34:38Z"}, "message": "Rollup merge of #89691 - Nicholas-Baron:debugger_commands, r=Mark-Simulacrum\n\nMove `DebuggerCommands` and `check_debugger_output` to a separate module\n\nWork towards #89475.\n\nAs part of this move, the public functions were changed to return `Result`. This is so that the error handling that initially took `&self: TestCx` can still use that `TestCx`.", "tree": {"sha": "a608e75220630e4af8385fa9d357d9a9ee419ed6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a608e75220630e4af8385fa9d357d9a9ee419ed6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b8f7a9db5cd39d89008cf70961a0c7494b05f67", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhY2p+CRBK7hj4Ov3rIwAARSAIAJbprOo6ZLRjx+WtGksfslYh\nDkVZVVcvTKF1jdgiGfznwkfWqqLitH7MkZWzPlLFWBIb6BpInGuF6O/UzMfdcrKJ\n1iXSZyN1M0+36ZtxC3w2cVCVYYYbt2Kgsqt/Aathjf9IUOIYf/DyzSqINOFFhkaY\ncwRIa+D/3QKdStFrGYBnmgFHg52tr41tEXk21AaNyv9+8emoM5UtWjIbp4X1MCA5\nYkn6jXIk5hHXreNd6TP7XZvtbITzmNw+o6HbN2/hQIfyd6JqWqUkNavb1vvEQWrz\nusJdt9zjxS5i89LxLZeocmIgS1yCMZW1xehBjSBJI8cN1RAoQ8X0zFJ21bR7mLM=\n=Ef76\n-----END PGP SIGNATURE-----\n", "payload": "tree a608e75220630e4af8385fa9d357d9a9ee419ed6\nparent 3fa897df2685277174b583ac119401b4e4520d10\nparent 2d827ca3b8490342f450cb205fc14c7db23b551e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1633905278 +0200\ncommitter GitHub <noreply@github.com> 1633905278 +0200\n\nRollup merge of #89691 - Nicholas-Baron:debugger_commands, r=Mark-Simulacrum\n\nMove `DebuggerCommands` and `check_debugger_output` to a separate module\n\nWork towards #89475.\n\nAs part of this move, the public functions were changed to return `Result`. This is so that the error handling that initially took `&self: TestCx` can still use that `TestCx`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8f7a9db5cd39d89008cf70961a0c7494b05f67", "html_url": "https://github.com/rust-lang/rust/commit/1b8f7a9db5cd39d89008cf70961a0c7494b05f67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b8f7a9db5cd39d89008cf70961a0c7494b05f67/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3fa897df2685277174b583ac119401b4e4520d10", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fa897df2685277174b583ac119401b4e4520d10", "html_url": "https://github.com/rust-lang/rust/commit/3fa897df2685277174b583ac119401b4e4520d10"}, {"sha": "2d827ca3b8490342f450cb205fc14c7db23b551e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d827ca3b8490342f450cb205fc14c7db23b551e", "html_url": "https://github.com/rust-lang/rust/commit/2d827ca3b8490342f450cb205fc14c7db23b551e"}], "stats": {"total": 276, "additions": 151, "deletions": 125}, "files": [{"sha": "4470272a9f86672adcf1fbf168723040f89bd8e8", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 36, "deletions": 125, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/1b8f7a9db5cd39d89008cf70961a0c7494b05f67/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8f7a9db5cd39d89008cf70961a0c7494b05f67/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=1b8f7a9db5cd39d89008cf70961a0c7494b05f67", "patch": "@@ -38,6 +38,9 @@ use tracing::*;\n use crate::extract_gdb_version;\n use crate::is_android_gdb_target;\n \n+mod debugger;\n+use debugger::{check_debugger_output, DebuggerCommands};\n+\n #[cfg(test)]\n mod tests;\n \n@@ -200,12 +203,6 @@ struct TestCx<'test> {\n     revision: Option<&'test str>,\n }\n \n-struct DebuggerCommands {\n-    commands: Vec<String>,\n-    check_lines: Vec<String>,\n-    breakpoint_lines: Vec<usize>,\n-}\n-\n enum ReadFrom {\n     Path,\n     Stdin(String),\n@@ -235,10 +232,8 @@ impl<'test> TestCx<'test> {\n     /// Code executed for each revision in turn (or, if there are no\n     /// revisions, exactly once, with revision == None).\n     fn run_revision(&self) {\n-        if self.props.should_ice {\n-            if self.config.mode != Incremental {\n-                self.fatal(\"cannot use should-ice in a test that is not cfail\");\n-            }\n+        if self.props.should_ice && self.config.mode != Incremental {\n+            self.fatal(\"cannot use should-ice in a test that is not cfail\");\n         }\n         match self.config.mode {\n             RunPassValgrind => self.run_valgrind_test(),\n@@ -674,7 +669,10 @@ impl<'test> TestCx<'test> {\n \n         // Parse debugger commands etc from test files\n         let DebuggerCommands { commands, check_lines, breakpoint_lines, .. } =\n-            self.parse_debugger_commands(prefixes);\n+            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+                Ok(cmds) => cmds,\n+                Err(e) => self.fatal(&e),\n+            };\n \n         // https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-commands\n         let mut script_str = String::with_capacity(2048);\n@@ -726,7 +724,9 @@ impl<'test> TestCx<'test> {\n             self.fatal_proc_rec(\"Error while running CDB\", &debugger_run_result);\n         }\n \n-        self.check_debugger_output(&debugger_run_result, &check_lines);\n+        if let Err(e) = check_debugger_output(&debugger_run_result, &check_lines) {\n+            self.fatal_proc_rec(&e, &debugger_run_result);\n+        }\n     }\n \n     fn run_debuginfo_gdb_test(&self) {\n@@ -757,7 +757,10 @@ impl<'test> TestCx<'test> {\n         };\n \n         let DebuggerCommands { commands, check_lines, breakpoint_lines } =\n-            self.parse_debugger_commands(prefixes);\n+            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+                Ok(cmds) => cmds,\n+                Err(e) => self.fatal(&e),\n+            };\n         let mut cmds = commands.join(\"\\n\");\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n@@ -960,7 +963,9 @@ impl<'test> TestCx<'test> {\n             self.fatal_proc_rec(\"gdb failed to execute\", &debugger_run_result);\n         }\n \n-        self.check_debugger_output(&debugger_run_result, &check_lines);\n+        if let Err(e) = check_debugger_output(&debugger_run_result, &check_lines) {\n+            self.fatal_proc_rec(&e, &debugger_run_result);\n+        }\n     }\n \n     fn run_debuginfo_lldb_test(&self) {\n@@ -1018,7 +1023,10 @@ impl<'test> TestCx<'test> {\n \n         // Parse debugger commands etc from test files\n         let DebuggerCommands { commands, check_lines, breakpoint_lines, .. } =\n-            self.parse_debugger_commands(prefixes);\n+            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+                Ok(cmds) => cmds,\n+                Err(e) => self.fatal(&e),\n+            };\n \n         // Write debugger script:\n         // We don't want to hang when calling `quit` while the process is still running\n@@ -1094,7 +1102,9 @@ impl<'test> TestCx<'test> {\n             self.fatal_proc_rec(\"Error while running LLDB\", &debugger_run_result);\n         }\n \n-        self.check_debugger_output(&debugger_run_result, &check_lines);\n+        if let Err(e) = check_debugger_output(&debugger_run_result, &check_lines) {\n+            self.fatal_proc_rec(&e, &debugger_run_result);\n+        }\n     }\n \n     fn run_lldb(\n@@ -1131,45 +1141,6 @@ impl<'test> TestCx<'test> {\n         ProcRes { status, stdout: out, stderr: err, cmdline: format!(\"{:?}\", cmd) }\n     }\n \n-    fn parse_debugger_commands(&self, debugger_prefixes: &[&str]) -> DebuggerCommands {\n-        let directives = debugger_prefixes\n-            .iter()\n-            .map(|prefix| (format!(\"{}-command\", prefix), format!(\"{}-check\", prefix)))\n-            .collect::<Vec<_>>();\n-\n-        let mut breakpoint_lines = vec![];\n-        let mut commands = vec![];\n-        let mut check_lines = vec![];\n-        let mut counter = 1;\n-        let reader = BufReader::new(File::open(&self.testpaths.file).unwrap());\n-        for line in reader.lines() {\n-            match line {\n-                Ok(line) => {\n-                    let line =\n-                        if line.starts_with(\"//\") { line[2..].trim_start() } else { line.as_str() };\n-\n-                    if line.contains(\"#break\") {\n-                        breakpoint_lines.push(counter);\n-                    }\n-\n-                    for &(ref command_directive, ref check_directive) in &directives {\n-                        self.config\n-                            .parse_name_value_directive(&line, command_directive)\n-                            .map(|cmd| commands.push(cmd));\n-\n-                        self.config\n-                            .parse_name_value_directive(&line, check_directive)\n-                            .map(|cmd| check_lines.push(cmd));\n-                    }\n-                }\n-                Err(e) => self.fatal(&format!(\"Error while parsing debugger commands: {}\", e)),\n-            }\n-            counter += 1;\n-        }\n-\n-        DebuggerCommands { commands, check_lines, breakpoint_lines }\n-    }\n-\n     fn cleanup_debug_info_options(&self, options: &Option<String>) -> Option<String> {\n         if options.is_none() {\n             return None;\n@@ -1216,66 +1187,6 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n-    fn check_debugger_output(&self, debugger_run_result: &ProcRes, check_lines: &[String]) {\n-        let num_check_lines = check_lines.len();\n-\n-        let mut check_line_index = 0;\n-        for line in debugger_run_result.stdout.lines() {\n-            if check_line_index >= num_check_lines {\n-                break;\n-            }\n-\n-            if check_single_line(line, &(check_lines[check_line_index])[..]) {\n-                check_line_index += 1;\n-            }\n-        }\n-        if check_line_index != num_check_lines && num_check_lines > 0 {\n-            self.fatal_proc_rec(\n-                &format!(\"line not found in debugger output: {}\", check_lines[check_line_index]),\n-                debugger_run_result,\n-            );\n-        }\n-\n-        fn check_single_line(line: &str, check_line: &str) -> bool {\n-            // Allow check lines to leave parts unspecified (e.g., uninitialized\n-            // bits in the  wrong case of an enum) with the notation \"[...]\".\n-            let line = line.trim();\n-            let check_line = check_line.trim();\n-            let can_start_anywhere = check_line.starts_with(\"[...]\");\n-            let can_end_anywhere = check_line.ends_with(\"[...]\");\n-\n-            let check_fragments: Vec<&str> =\n-                check_line.split(\"[...]\").filter(|frag| !frag.is_empty()).collect();\n-            if check_fragments.is_empty() {\n-                return true;\n-            }\n-\n-            let (mut rest, first_fragment) = if can_start_anywhere {\n-                match line.find(check_fragments[0]) {\n-                    Some(pos) => (&line[pos + check_fragments[0].len()..], 1),\n-                    None => return false,\n-                }\n-            } else {\n-                (line, 0)\n-            };\n-\n-            for current_fragment in &check_fragments[first_fragment..] {\n-                match rest.find(current_fragment) {\n-                    Some(pos) => {\n-                        rest = &rest[pos + current_fragment.len()..];\n-                    }\n-                    None => return false,\n-                }\n-            }\n-\n-            if !can_end_anywhere && !rest.is_empty() {\n-                return false;\n-            }\n-\n-            true\n-        }\n-    }\n-\n     fn check_error_patterns(\n         &self,\n         output_to_check: &str,\n@@ -2154,9 +2065,9 @@ impl<'test> TestCx<'test> {\n \n     fn maybe_dump_to_stdout(&self, out: &str, err: &str) {\n         if self.config.verbose {\n-            println!(\"------{}------------------------------\", \"stdout\");\n+            println!(\"------stdout------------------------------\");\n             println!(\"{}\", out);\n-            println!(\"------{}------------------------------\", \"stderr\");\n+            println!(\"------stderr------------------------------\");\n             println!(\"{}\", err);\n             println!(\"------------------------------------------\");\n         }\n@@ -3249,11 +3160,10 @@ impl<'test> TestCx<'test> {\n                 if !proc_res.status.success() {\n                     self.fatal_proc_rec(\"test run failed!\", &proc_res);\n                 }\n-            } else {\n-                if proc_res.status.success() {\n-                    self.fatal_proc_rec(\"test run succeeded!\", &proc_res);\n-                }\n+            } else if proc_res.status.success() {\n+                self.fatal_proc_rec(\"test run succeeded!\", &proc_res);\n             }\n+\n             if !self.props.error_patterns.is_empty() {\n                 // \"// error-pattern\" comments\n                 self.check_error_patterns(&proc_res.stderr, &proc_res, pm);\n@@ -3300,10 +3210,11 @@ impl<'test> TestCx<'test> {\n             if !res.status.success() {\n                 self.fatal_proc_rec(\"failed to compile fixed code\", &res);\n             }\n-            if !res.stderr.is_empty() && !self.props.rustfix_only_machine_applicable {\n-                if !json::rustfix_diagnostics_only(&res.stderr).is_empty() {\n-                    self.fatal_proc_rec(\"fixed code is still producing diagnostics\", &res);\n-                }\n+            if !res.stderr.is_empty()\n+                && !self.props.rustfix_only_machine_applicable\n+                && !json::rustfix_diagnostics_only(&res.stderr).is_empty()\n+            {\n+                self.fatal_proc_rec(\"fixed code is still producing diagnostics\", &res);\n             }\n         }\n     }"}, {"sha": "cbd5e4c431f56365bb23a3a66881ccbfd3101b4a", "filename": "src/tools/compiletest/src/runtest/debugger.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/1b8f7a9db5cd39d89008cf70961a0c7494b05f67/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8f7a9db5cd39d89008cf70961a0c7494b05f67/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs?ref=1b8f7a9db5cd39d89008cf70961a0c7494b05f67", "patch": "@@ -0,0 +1,115 @@\n+use crate::common::Config;\n+use crate::runtest::ProcRes;\n+\n+use std::fs::File;\n+use std::io::{BufRead, BufReader};\n+use std::path::Path;\n+\n+pub(super) struct DebuggerCommands {\n+    pub commands: Vec<String>,\n+    pub check_lines: Vec<String>,\n+    pub breakpoint_lines: Vec<usize>,\n+}\n+\n+impl DebuggerCommands {\n+    pub(super) fn parse_from(\n+        file: &Path,\n+        config: &Config,\n+        debugger_prefixes: &[&str],\n+    ) -> Result<Self, String> {\n+        let directives = debugger_prefixes\n+            .iter()\n+            .map(|prefix| (format!(\"{}-command\", prefix), format!(\"{}-check\", prefix)))\n+            .collect::<Vec<_>>();\n+\n+        let mut breakpoint_lines = vec![];\n+        let mut commands = vec![];\n+        let mut check_lines = vec![];\n+        let mut counter = 1;\n+        let reader = BufReader::new(File::open(file).unwrap());\n+        for line in reader.lines() {\n+            match line {\n+                Ok(line) => {\n+                    let line =\n+                        if line.starts_with(\"//\") { line[2..].trim_start() } else { line.as_str() };\n+\n+                    if line.contains(\"#break\") {\n+                        breakpoint_lines.push(counter);\n+                    }\n+\n+                    for &(ref command_directive, ref check_directive) in &directives {\n+                        config\n+                            .parse_name_value_directive(&line, command_directive)\n+                            .map(|cmd| commands.push(cmd));\n+\n+                        config\n+                            .parse_name_value_directive(&line, check_directive)\n+                            .map(|cmd| check_lines.push(cmd));\n+                    }\n+                }\n+                Err(e) => return Err(format!(\"Error while parsing debugger commands: {}\", e)),\n+            }\n+            counter += 1;\n+        }\n+\n+        Ok(Self { commands, check_lines, breakpoint_lines })\n+    }\n+}\n+\n+pub(super) fn check_debugger_output(\n+    debugger_run_result: &ProcRes,\n+    check_lines: &[String],\n+) -> Result<(), String> {\n+    let num_check_lines = check_lines.len();\n+\n+    let mut check_line_index = 0;\n+    for line in debugger_run_result.stdout.lines() {\n+        if check_line_index >= num_check_lines {\n+            break;\n+        }\n+\n+        if check_single_line(line, &(check_lines[check_line_index])[..]) {\n+            check_line_index += 1;\n+        }\n+    }\n+    if check_line_index != num_check_lines && num_check_lines > 0 {\n+        Err(format!(\"line not found in debugger output: {}\", check_lines[check_line_index]))\n+    } else {\n+        Ok(())\n+    }\n+}\n+\n+fn check_single_line(line: &str, check_line: &str) -> bool {\n+    // Allow check lines to leave parts unspecified (e.g., uninitialized\n+    // bits in the  wrong case of an enum) with the notation \"[...]\".\n+    let line = line.trim();\n+    let check_line = check_line.trim();\n+    let can_start_anywhere = check_line.starts_with(\"[...]\");\n+    let can_end_anywhere = check_line.ends_with(\"[...]\");\n+\n+    let check_fragments: Vec<&str> =\n+        check_line.split(\"[...]\").filter(|frag| !frag.is_empty()).collect();\n+    if check_fragments.is_empty() {\n+        return true;\n+    }\n+\n+    let (mut rest, first_fragment) = if can_start_anywhere {\n+        match line.find(check_fragments[0]) {\n+            Some(pos) => (&line[pos + check_fragments[0].len()..], 1),\n+            None => return false,\n+        }\n+    } else {\n+        (line, 0)\n+    };\n+\n+    for current_fragment in &check_fragments[first_fragment..] {\n+        match rest.find(current_fragment) {\n+            Some(pos) => {\n+                rest = &rest[pos + current_fragment.len()..];\n+            }\n+            None => return false,\n+        }\n+    }\n+\n+    if !can_end_anywhere && !rest.is_empty() { false } else { true }\n+}"}]}