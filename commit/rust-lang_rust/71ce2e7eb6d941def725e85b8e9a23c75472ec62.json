{"sha": "71ce2e7eb6d941def725e85b8e9a23c75472ec62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxY2UyZTdlYjZkOTQxZGVmNzI1ZTg1YjhlOWEyM2M3NTQ3MmVjNjI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-11T14:33:37Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:59:40Z"}, "message": "make `Eq` a true query", "tree": {"sha": "388a86b22734c8a3088f86a63ac7aa06c8138fb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/388a86b22734c8a3088f86a63ac7aa06c8138fb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71ce2e7eb6d941def725e85b8e9a23c75472ec62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71ce2e7eb6d941def725e85b8e9a23c75472ec62", "html_url": "https://github.com/rust-lang/rust/commit/71ce2e7eb6d941def725e85b8e9a23c75472ec62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71ce2e7eb6d941def725e85b8e9a23c75472ec62/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1acffada44df88112d23941cd96ea120ea4b8daf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1acffada44df88112d23941cd96ea120ea4b8daf", "html_url": "https://github.com/rust-lang/rust/commit/1acffada44df88112d23941cd96ea120ea4b8daf"}], "stats": {"total": 128, "additions": 80, "deletions": 48}, "files": [{"sha": "efaebfd06108f2c7381c09ac3cc6a70e359dc6ed", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=71ce2e7eb6d941def725e85b8e9a23c75472ec62", "patch": "@@ -70,8 +70,9 @@ use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use std::fmt;\n use std::hash::Hash;\n use syntax_pos::symbol::InternedString;\n-use traits::query::{CanonicalProjectionGoal,\n-                    CanonicalTyGoal, CanonicalPredicateGoal};\n+use traits::query::{\n+    CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpEqGoal, CanonicalPredicateGoal,\n+};\n use ty::{TyCtxt, Instance, InstanceDef, ParamEnv, ParamEnvAnd, PolyTraitRef, Ty};\n use ty::subst::Substs;\n \n@@ -647,6 +648,7 @@ define_dep_nodes!( <'tcx>\n     [] NormalizeTyAfterErasingRegions(ParamEnvAnd<'tcx, Ty<'tcx>>),\n     [] DropckOutlives(CanonicalTyGoal<'tcx>),\n     [] EvaluateObligation(CanonicalPredicateGoal<'tcx>),\n+    [] TypeOpEq(CanonicalTypeOpEqGoal<'tcx>),\n \n     [] SubstituteNormalizeAndTestPredicates { key: (DefId, &'tcx Substs<'tcx>) },\n "}, {"sha": "3ee0c0cdd0b6e2a16fbd010473c15317916ac9df", "filename": "src/librustc/traits/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs?ref=71ce2e7eb6d941def725e85b8e9a23c75472ec62", "patch": "@@ -32,6 +32,9 @@ pub type CanonicalTyGoal<'tcx> = Canonical<'tcx, ty::ParamEnvAnd<'tcx, Ty<'tcx>>\n pub type CanonicalPredicateGoal<'tcx> =\n     Canonical<'tcx, ty::ParamEnvAnd<'tcx, ty::Predicate<'tcx>>>;\n \n+pub type CanonicalTypeOpEqGoal<'tcx> =\n+    Canonical<'tcx, type_op::eq::Eq<'tcx>>;\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct NoSolution;\n "}, {"sha": "8925fa12f03a72966872d5781f50e8bce39ae53c", "filename": "src/librustc/traits/query/type_op/eq.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Feq.rs?ref=71ce2e7eb6d941def725e85b8e9a23c75472ec62", "patch": "@@ -8,17 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::canonical::{CanonicalizedQueryResult, Canonical};\n-use traits::query::NoSolution;\n-use traits::{FulfillmentContext, ObligationCause};\n+use infer::canonical::{Canonical, CanonicalizedQueryResult};\n use ty::{self, ParamEnv, Ty, TyCtxt};\n-use syntax::codemap::DUMMY_SP;\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct Eq<'tcx> {\n-    param_env: ParamEnv<'tcx>,\n-    a: Ty<'tcx>,\n-    b: Ty<'tcx>,\n+    pub param_env: ParamEnv<'tcx>,\n+    pub a: Ty<'tcx>,\n+    pub b: Ty<'tcx>,\n }\n \n impl<'tcx> Eq<'tcx> {\n@@ -46,20 +43,7 @@ impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for Eq<'tcx> {\n         tcx: TyCtxt<'_, 'gcx, 'tcx>,\n         canonicalized: Canonical<'gcx, Eq<'gcx>>,\n     ) -> CanonicalizedQueryResult<'gcx, ()> {\n-        let tcx = tcx.global_tcx();\n-        tcx.infer_ctxt()\n-            .enter(|ref infcx| {\n-                let (Eq { param_env, a, b }, canonical_inference_vars) =\n-                    infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonicalized);\n-                let fulfill_cx = &mut FulfillmentContext::new();\n-                let obligations = match infcx.at(&ObligationCause::dummy(), param_env).eq(a, b) {\n-                    Ok(v) => v.into_obligations(),\n-                    Err(_) => return Err(NoSolution),\n-                };\n-                fulfill_cx.register_predicate_obligations(infcx, obligations);\n-                infcx.make_canonicalized_query_result(canonical_inference_vars, (), fulfill_cx)\n-            })\n-            .unwrap()\n+        tcx.type_op_eq(canonicalized).unwrap()\n     }\n }\n \n@@ -79,3 +63,7 @@ BraceStructLiftImpl! {\n         b,\n     }\n }\n+\n+impl_stable_hash_for! {\n+    struct Eq<'tcx> { param_env, a, b }\n+}"}, {"sha": "d02eac6f212ee5ac9ac2373572efb89b4eb01044", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=71ce2e7eb6d941def725e85b8e9a23c75472ec62", "patch": "@@ -12,7 +12,9 @@ use dep_graph::SerializedDepNodeIndex;\n use dep_graph::DepNode;\n use hir::def_id::{CrateNum, DefId, DefIndex};\n use mir::interpret::{GlobalId, ConstValue};\n-use traits::query::{CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal};\n+use traits::query::{\n+    CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpEqGoal,\n+};\n use ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use ty::subst::Substs;\n use ty::query::queries;\n@@ -102,6 +104,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::evaluate_obligation<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::type_op_eq<'tcx> {\n+    fn describe(_tcx: TyCtxt, goal: CanonicalTypeOpEqGoal<'tcx>) -> String {\n+        format!(\"evaluating `type_op_eq` `{:?}`\", goal)\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::is_copy_raw<'tcx> {\n     fn describe(_tcx: TyCtxt, env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> String {\n         format!(\"computing whether `{}` is `Copy`\", env.value)"}, {"sha": "cad3a6586829e0d348142fe3ea3d14eb259eb34f", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=71ce2e7eb6d941def725e85b8e9a23c75472ec62", "patch": "@@ -10,8 +10,8 @@\n \n //! Defines the set of legal keys that can be used in queries.\n \n+use infer::canonical::Canonical;\n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE, DefIndex};\n-use traits::query::{CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal};\n use ty::{self, Ty, TyCtxt};\n use ty::subst::Substs;\n use ty::fast_reject::SimplifiedType;\n@@ -190,27 +190,12 @@ impl Key for InternedString {\n     }\n }\n \n-impl<'tcx> Key for CanonicalProjectionGoal<'tcx> {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n-    }\n-\n-    fn default_span(&self, _tcx: TyCtxt) -> Span {\n-        DUMMY_SP\n-    }\n-}\n-\n-impl<'tcx> Key for CanonicalTyGoal<'tcx> {\n-    fn query_crate(&self) -> CrateNum {\n-        LOCAL_CRATE\n-    }\n-\n-    fn default_span(&self, _tcx: TyCtxt) -> Span {\n-        DUMMY_SP\n-    }\n-}\n-\n-impl<'tcx> Key for CanonicalPredicateGoal<'tcx> {\n+/// Canonical query goals correspond to abstract trait operations that\n+/// are not tied to any crate in particular.\n+impl<'tcx, T> Key for Canonical<'tcx, T>\n+where\n+    T: Debug + Hash + Clone + Eq,\n+{\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE\n     }"}, {"sha": "d5cd37fd98ab0be825aa5a94315c6d3e1b137dfc", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=71ce2e7eb6d941def725e85b8e9a23c75472ec62", "patch": "@@ -34,7 +34,7 @@ use session::{CompileResult, CrateDisambiguator};\n use session::config::OutputFilenames;\n use traits::{self, Vtable};\n use traits::query::{CanonicalPredicateGoal, CanonicalProjectionGoal,\n-                    CanonicalTyGoal, NoSolution};\n+                    CanonicalTyGoal, CanonicalTypeOpEqGoal, NoSolution};\n use traits::query::dropck_outlives::{DtorckConstraint, DropckOutlivesResult};\n use traits::query::normalize::NormalizationResult;\n use traits::specialization_graph;\n@@ -446,6 +446,14 @@ define_queries! { <'tcx>\n         CanonicalPredicateGoal<'tcx>\n     ) -> Result<traits::EvaluationResult, traits::OverflowError>,\n \n+    /// Do not call this query directly: invoke `infcx.eq()` instead.\n+    [] fn type_op_eq: TypeOpEq(\n+        CanonicalTypeOpEqGoal<'tcx>\n+    ) -> Result<\n+        Lrc<Canonical<'tcx, canonical::QueryResult<'tcx, ()>>>,\n+        NoSolution,\n+    >,\n+\n     [] fn substitute_normalize_and_test_predicates:\n         substitute_normalize_and_test_predicates_node((DefId, &'tcx Substs<'tcx>)) -> bool,\n "}, {"sha": "51695b113d54b906c061888f57b4e30f3bc7a0f8", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=71ce2e7eb6d941def725e85b8e9a23c75472ec62", "patch": "@@ -1028,6 +1028,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::NormalizeTyAfterErasingRegions |\n         DepKind::DropckOutlives |\n         DepKind::EvaluateObligation |\n+        DepKind::TypeOpEq |\n         DepKind::SubstituteNormalizeAndTestPredicates |\n         DepKind::InstanceDefSizeEstimate |\n         DepKind::ProgramClausesForEnv |"}, {"sha": "dae960c9aa37e5f6961b5c0a81edc42b26141bb4", "filename": "src/librustc_traits/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc_traits%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc_traits%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flib.rs?ref=71ce2e7eb6d941def725e85b8e9a23c75472ec62", "patch": "@@ -34,6 +34,7 @@ mod evaluate_obligation;\n mod normalize_projection_ty;\n mod normalize_erasing_regions;\n pub mod lowering;\n+mod type_op_eq;\n \n use rustc::ty::query::Providers;\n \n@@ -47,6 +48,7 @@ pub fn provide(p: &mut Providers) {\n         program_clauses_for: lowering::program_clauses_for,\n         program_clauses_for_env: lowering::program_clauses_for_env,\n         evaluate_obligation: evaluate_obligation::evaluate_obligation,\n+        type_op_eq: type_op_eq::type_op_eq,\n         ..*p\n     };\n }"}, {"sha": "b73bee4648657932bbc782df239bea505379633e", "filename": "src/librustc_traits/type_op_eq.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc_traits%2Ftype_op_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71ce2e7eb6d941def725e85b8e9a23c75472ec62/src%2Flibrustc_traits%2Ftype_op_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op_eq.rs?ref=71ce2e7eb6d941def725e85b8e9a23c75472ec62", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::infer::canonical::{Canonical, QueryResult};\n+use rustc::traits::query::type_op::eq::Eq;\n+use rustc::traits::query::NoSolution;\n+use rustc::traits::{FulfillmentContext, ObligationCause};\n+use rustc::ty::TyCtxt;\n+use rustc_data_structures::sync::Lrc;\n+use syntax::codemap::DUMMY_SP;\n+\n+crate fn type_op_eq<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    canonicalized: Canonical<'tcx, Eq<'tcx>>,\n+) -> Result<Lrc<Canonical<'tcx, QueryResult<'tcx, ()>>>, NoSolution> {\n+    let tcx = tcx.global_tcx();\n+    tcx.infer_ctxt().enter(|ref infcx| {\n+        let (Eq { param_env, a, b }, canonical_inference_vars) =\n+            infcx.instantiate_canonical_with_fresh_inference_vars(DUMMY_SP, &canonicalized);\n+        let fulfill_cx = &mut FulfillmentContext::new();\n+        let obligations = match infcx.at(&ObligationCause::dummy(), param_env).eq(a, b) {\n+            Ok(v) => v.into_obligations(),\n+            Err(_) => return Err(NoSolution),\n+        };\n+        fulfill_cx.register_predicate_obligations(infcx, obligations);\n+        infcx.make_canonicalized_query_result(canonical_inference_vars, (), fulfill_cx)\n+    })\n+}"}]}