{"sha": "ff54c801f0c1552941bda472df992e9f9be25f33", "node_id": "C_kwDOAAsO6NoAKGZmNTRjODAxZjBjMTU1Mjk0MWJkYTQ3MmRmOTkyZTlmOWJlMjVmMzM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-12T05:00:59Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-13T00:26:35Z"}, "message": "Encode VariantIdx so we can decode variants in the right order", "tree": {"sha": "f8bec8998fc640097bb4988eaa81f9c017933d0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8bec8998fc640097bb4988eaa81f9c017933d0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff54c801f0c1552941bda472df992e9f9be25f33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff54c801f0c1552941bda472df992e9f9be25f33", "html_url": "https://github.com/rust-lang/rust/commit/ff54c801f0c1552941bda472df992e9f9be25f33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff54c801f0c1552941bda472df992e9f9be25f33/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d59fa3d23f021a18289416caf79fdf050bbc3b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d59fa3d23f021a18289416caf79fdf050bbc3b0", "html_url": "https://github.com/rust-lang/rust/commit/7d59fa3d23f021a18289416caf79fdf050bbc3b0"}], "stats": {"total": 80, "additions": 58, "deletions": 22}, "files": [{"sha": "eab32ad8e3f806ae8d53e8b53467043e8f8a2026", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 36, "deletions": 21, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ff54c801f0c1552941bda472df992e9f9be25f33/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff54c801f0c1552941bda472df992e9f9be25f33/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=ff54c801f0c1552941bda472df992e9f9be25f33", "patch": "@@ -856,7 +856,12 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         ty::EarlyBinder(&*output)\n     }\n \n-    fn get_variant(self, kind: &DefKind, index: DefIndex, parent_did: DefId) -> ty::VariantDef {\n+    fn get_variant(\n+        self,\n+        kind: DefKind,\n+        index: DefIndex,\n+        parent_did: DefId,\n+    ) -> (VariantIdx, ty::VariantDef) {\n         let adt_kind = match kind {\n             DefKind::Variant => ty::AdtKind::Enum,\n             DefKind::Struct => ty::AdtKind::Struct,\n@@ -870,22 +875,25 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             if adt_kind == ty::AdtKind::Enum { Some(self.local_def_id(index)) } else { None };\n         let ctor = data.ctor.map(|(kind, index)| (kind, self.local_def_id(index)));\n \n-        ty::VariantDef::new(\n-            self.item_name(index),\n-            variant_did,\n-            ctor,\n-            data.discr,\n-            self.get_associated_item_or_field_def_ids(index)\n-                .map(|did| ty::FieldDef {\n-                    did,\n-                    name: self.item_name(did.index),\n-                    vis: self.get_visibility(did.index),\n-                })\n-                .collect(),\n-            adt_kind,\n-            parent_did,\n-            false,\n-            data.is_non_exhaustive,\n+        (\n+            data.idx,\n+            ty::VariantDef::new(\n+                self.item_name(index),\n+                variant_did,\n+                ctor,\n+                data.discr,\n+                self.get_associated_item_or_field_def_ids(index)\n+                    .map(|did| ty::FieldDef {\n+                        did,\n+                        name: self.item_name(did.index),\n+                        vis: self.get_visibility(did.index),\n+                    })\n+                    .collect(),\n+                adt_kind,\n+                parent_did,\n+                false,\n+                data.is_non_exhaustive,\n+            ),\n         )\n     }\n \n@@ -901,7 +909,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         };\n         let repr = self.root.tables.repr_options.get(self, item_id).unwrap().decode(self);\n \n-        let variants = if let ty::AdtKind::Enum = adt_kind {\n+        let mut variants: Vec<_> = if let ty::AdtKind::Enum = adt_kind {\n             self.root\n                 .tables\n                 .module_children_non_reexports\n@@ -912,15 +920,22 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                     let kind = self.def_kind(index);\n                     match kind {\n                         DefKind::Ctor(..) => None,\n-                        _ => Some(self.get_variant(&kind, index, did)),\n+                        _ => Some(self.get_variant(kind, index, did)),\n                     }\n                 })\n                 .collect()\n         } else {\n-            std::iter::once(self.get_variant(&kind, item_id, did)).collect()\n+            std::iter::once(self.get_variant(kind, item_id, did)).collect()\n         };\n \n-        tcx.mk_adt_def(did, adt_kind, variants, repr)\n+        variants.sort_by_key(|(idx, _)| *idx);\n+\n+        tcx.mk_adt_def(\n+            did,\n+            adt_kind,\n+            variants.into_iter().map(|(_, variant)| variant).collect(),\n+            repr,\n+        )\n     }\n \n     fn get_visibility(self, id: DefIndex) -> Visibility<DefId> {"}, {"sha": "20d94c954ca229e56bc8172d266709fcf9ac6407", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff54c801f0c1552941bda472df992e9f9be25f33/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff54c801f0c1552941bda472df992e9f9be25f33/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ff54c801f0c1552941bda472df992e9f9be25f33", "patch": "@@ -1375,9 +1375,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             // Therefore, the loop over variants will encode its fields as the adt's children.\n         }\n \n-        for variant in adt_def.variants().iter() {\n+        for (idx, variant) in adt_def.variants().iter_enumerated() {\n             let data = VariantData {\n                 discr: variant.discr,\n+                idx,\n                 ctor: variant.ctor.map(|(kind, def_id)| (kind, def_id.index)),\n                 is_non_exhaustive: variant.is_field_list_non_exhaustive(),\n             };"}, {"sha": "1328d70021047a463fa6f69561b2da7caa3b3a50", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff54c801f0c1552941bda472df992e9f9be25f33/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff54c801f0c1552941bda472df992e9f9be25f33/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=ff54c801f0c1552941bda472df992e9f9be25f33", "patch": "@@ -31,6 +31,7 @@ use rustc_span::edition::Edition;\n use rustc_span::hygiene::{ExpnIndex, MacroKind};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{self, ExpnData, ExpnHash, ExpnId, Span};\n+use rustc_target::abi::VariantIdx;\n use rustc_target::spec::{PanicStrategy, TargetTriple};\n \n use std::marker::PhantomData;\n@@ -430,6 +431,7 @@ define_tables! {\n \n #[derive(TyEncodable, TyDecodable)]\n struct VariantData {\n+    idx: VariantIdx,\n     discr: ty::VariantDiscr,\n     /// If this is unit or tuple-variant/struct, then this is the index of the ctor id.\n     ctor: Option<(CtorKind, DefIndex)>,"}, {"sha": "a2cc10a4b22c073936f2fb12169d57801397a06f", "filename": "tests/ui/enum-discriminant/auxiliary/discr-foreign-dep.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ff54c801f0c1552941bda472df992e9f9be25f33/tests%2Fui%2Fenum-discriminant%2Fauxiliary%2Fdiscr-foreign-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff54c801f0c1552941bda472df992e9f9be25f33/tests%2Fui%2Fenum-discriminant%2Fauxiliary%2Fdiscr-foreign-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fauxiliary%2Fdiscr-foreign-dep.rs?ref=ff54c801f0c1552941bda472df992e9f9be25f33", "patch": "@@ -0,0 +1,7 @@\n+#[derive(Default)]\n+pub enum Foo {\n+    A(u32),\n+    #[default]\n+    B,\n+    C(u32),\n+}"}, {"sha": "e7123b3445230273b03c3253f9c31c7735d048a1", "filename": "tests/ui/enum-discriminant/discr-foreign.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff54c801f0c1552941bda472df992e9f9be25f33/tests%2Fui%2Fenum-discriminant%2Fdiscr-foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff54c801f0c1552941bda472df992e9f9be25f33/tests%2Fui%2Fenum-discriminant%2Fdiscr-foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum-discriminant%2Fdiscr-foreign.rs?ref=ff54c801f0c1552941bda472df992e9f9be25f33", "patch": "@@ -0,0 +1,11 @@\n+// aux-build:discr-foreign-dep.rs\n+// build-pass\n+\n+extern crate discr_foreign_dep;\n+\n+fn main() {\n+    match Default::default() {\n+        discr_foreign_dep::Foo::A(_) => {}\n+        _ => {}\n+    }\n+}"}]}