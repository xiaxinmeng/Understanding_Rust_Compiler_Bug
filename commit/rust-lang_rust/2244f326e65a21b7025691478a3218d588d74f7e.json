{"sha": "2244f326e65a21b7025691478a3218d588d74f7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNDRmMzI2ZTY1YTIxYjcwMjU2OTE0NzhhMzIxOGQ1ODhkNzRmN2U=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-06-03T14:57:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-03T14:57:02Z"}, "message": "Cargo update (#3559)\n\nUpdate `rustc-ap-*` crates to 486.0.0.", "tree": {"sha": "67d3b16cdcba08344ec7c56bd4fbd97b8dce0555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67d3b16cdcba08344ec7c56bd4fbd97b8dce0555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2244f326e65a21b7025691478a3218d588d74f7e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc9TU+CRBK7hj4Ov3rIwAAdHIIAECU0kWOXmWUEUA5wdEl89Wq\nUqMq2JBUFZMvsdDykmwCqodcTuCMGY8Rgqkd5ofkE3O64N0dqN14iUzNldJ+wNC2\nKD7yRaQSIY59aMwZ6T0pOZ0pV8QR9fwTXucQunE5BdvvlcdK7Y5v/dSEKbMIxGlM\n1ora6+xwA5VOFx3WsHu4aZURFZRBX/hPhr4v5cLxiPeNKoKv/xh+VDPgFPMNIbWA\nNtP8wlnTzNJPQyh30Q8FE2ieDGTw45Y4qAn2wfcLj7m9jUdGZs8YNNR7LrAY4tQX\nYK/7MHtJFrNT42URytoln2wxugeOzG+23faZt8x1BSBSedlNkHUX4g6vlAMwp0w=\n=ajml\n-----END PGP SIGNATURE-----\n", "payload": "tree 67d3b16cdcba08344ec7c56bd4fbd97b8dce0555\nparent e6b60a40d50c8905d8ef8696943c686947f905d7\nauthor Seiichi Uchida <seuchida@gmail.com> 1559573822 +0900\ncommitter GitHub <noreply@github.com> 1559573822 +0900\n\nCargo update (#3559)\n\nUpdate `rustc-ap-*` crates to 486.0.0."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2244f326e65a21b7025691478a3218d588d74f7e", "html_url": "https://github.com/rust-lang/rust/commit/2244f326e65a21b7025691478a3218d588d74f7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2244f326e65a21b7025691478a3218d588d74f7e/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6b60a40d50c8905d8ef8696943c686947f905d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b60a40d50c8905d8ef8696943c686947f905d7", "html_url": "https://github.com/rust-lang/rust/commit/e6b60a40d50c8905d8ef8696943c686947f905d7"}], "stats": {"total": 694, "additions": 396, "deletions": 298}, "files": [{"sha": "a14828ed62fbb3e4d66207adfc87e262e7afa759", "filename": "Cargo.lock", "status": "modified", "additions": 187, "deletions": 148, "changes": 335, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -46,36 +46,35 @@ name = \"atty\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termion 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"autocfg\"\n-version = \"0.1.2\"\n+version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.15\"\n+version = \"0.3.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"autocfg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"backtrace-sys 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-demangle 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"backtrace-sys\"\n version = \"0.1.28\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cc 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -94,7 +93,7 @@ dependencies = [\n \n [[package]]\n name = \"bstr\"\n-version = \"0.1.2\"\n+version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -118,21 +117,21 @@ name = \"cargo_metadata\"\n version = \"0.7.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"error-chain 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.90 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.90 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.35\"\n+version = \"1.0.37\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"cfg-if\"\n-version = \"0.1.7\"\n+version = \"0.1.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -161,9 +160,9 @@ dependencies = [\n name = \"config_proc_macro\"\n version = \"0.1.0\"\n dependencies = [\n- \"proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -195,7 +194,7 @@ version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"arrayvec 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"crossbeam-utils 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -208,15 +207,15 @@ name = \"crossbeam-utils\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"crossbeam-utils\"\n version = \"0.6.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -225,9 +224,9 @@ name = \"derive-new\"\n version = \"0.5.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -240,7 +239,7 @@ name = \"dirs\"\n version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_users 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -252,7 +251,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"ena\"\n-version = \"0.11.0\"\n+version = \"0.13.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -272,18 +271,19 @@ dependencies = [\n \n [[package]]\n name = \"error-chain\"\n-version = \"0.12.0\"\n+version = \"0.12.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"failure\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -292,10 +292,10 @@ name = \"failure_derive\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"synstructure 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"synstructure 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -310,7 +310,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"getopts\"\n-version = \"0.2.18\"\n+version = \"0.2.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -322,7 +322,7 @@ version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"aho-corasick 0.7.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bstr 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bstr 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -333,7 +333,7 @@ name = \"heck\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -361,6 +361,11 @@ dependencies = [\n  \"winapi-util 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"indexmap\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"itertools\"\n version = \"0.8.0\"\n@@ -371,15 +376,15 @@ dependencies = [\n \n [[package]]\n name = \"itoa\"\n-version = \"0.4.3\"\n+version = \"0.4.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"jobserver\"\n version = \"0.1.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -391,7 +396,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.51\"\n+version = \"0.2.55\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -408,7 +413,7 @@ name = \"log\"\n version = \"0.4.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -431,9 +436,14 @@ name = \"num_cpus\"\n version = \"1.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"numtoa\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"owning_ref\"\n version = \"0.4.0\"\n@@ -447,7 +457,7 @@ name = \"packed_simd\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -464,7 +474,7 @@ name = \"parking_lot_core\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -473,7 +483,7 @@ dependencies = [\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"0.4.27\"\n+version = \"0.4.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -489,21 +499,21 @@ name = \"quote\"\n version = \"0.6.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rand\"\n version = \"0.6.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"autocfg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_isaac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand_jitter 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand_jitter 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_os 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_pcg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_xorshift 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -515,7 +525,7 @@ name = \"rand_chacha\"\n version = \"0.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"autocfg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -550,10 +560,10 @@ dependencies = [\n \n [[package]]\n name = \"rand_jitter\"\n-version = \"0.1.3\"\n+version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -565,7 +575,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -576,7 +586,7 @@ name = \"rand_pcg\"\n version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"autocfg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"autocfg 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -642,20 +652,21 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-arena\"\n-version = \"407.0.0\"\n+version = \"486.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-graphviz\"\n-version = \"407.0.0\"\n+version = \"486.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-rustc_cratesio_shim\"\n-version = \"407.0.0\"\n+version = \"486.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -665,85 +676,103 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"407.0.0\"\n+version = \"486.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ena 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ena 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"jobserver 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-graphviz 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-graphviz 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-rayon 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-rayon-core 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-rayon 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-rayon-core 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"407.0.0\"\n+version = \"486.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termcolor 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rustc-ap-rustc_macros\"\n+version = \"486.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"synstructure 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"rustc-ap-rustc_target\"\n-version = \"407.0.0\"\n+version = \"486.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-serialize\"\n-version = \"407.0.0\"\n+version = \"486.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n+ \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-syntax\"\n-version = \"407.0.0\"\n+version = \"486.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-syntax_pos\"\n-version = \"407.0.0\"\n+version = \"486.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-arena 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-arena 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -763,22 +792,22 @@ dependencies = [\n \n [[package]]\n name = \"rustc-rayon\"\n-version = \"0.1.2\"\n+version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crossbeam-deque 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"either 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-rayon-core 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-rayon-core 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-rayon-core\"\n-version = \"0.1.2\"\n+version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crossbeam-deque 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -809,29 +838,29 @@ dependencies = [\n  \"dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"getopts 0.2.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ignore 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.90 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"structopt 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"toml 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode_categories 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"ryu\"\n-version = \"0.2.7\"\n+version = \"0.2.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -863,7 +892,7 @@ version = \"0.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.90 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -873,30 +902,30 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.90\"\n+version = \"1.0.91\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde_derive 1.0.90 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.90\"\n+version = \"1.0.91\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_json\"\n version = \"1.0.39\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"itoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ryu 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.90 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ryu 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -929,29 +958,29 @@ version = \"0.2.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"syn\"\n-version = \"0.15.32\"\n+version = \"0.15.34\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"synstructure\"\n-version = \"0.10.1\"\n+version = \"0.10.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.32 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -975,10 +1004,11 @@ dependencies = [\n \n [[package]]\n name = \"termion\"\n-version = \"1.5.1\"\n+version = \"1.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"numtoa 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1001,10 +1031,10 @@ dependencies = [\n \n [[package]]\n name = \"toml\"\n-version = \"0.5.0\"\n+version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.90 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1014,7 +1044,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"unicode-segmentation\"\n-version = \"1.2.1\"\n+version = \"1.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -1042,6 +1072,11 @@ name = \"vec_map\"\n version = \"0.8.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"version_check\"\n+version = \"0.1.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"walkdir\"\n version = \"2.2.7\"\n@@ -1095,17 +1130,17 @@ dependencies = [\n \"checksum argon2rs 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3f67b0b6a86dae6e67ff4ca2b6201396074996379fba2b92ff649126f37cb392\"\n \"checksum arrayvec 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92c7fb76bc8826a8b33b4ee5bb07a247a81e76764ab4d55e8f73e3a4d8808c71\"\n \"checksum atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a7d5b8723950951411ee34d271d99dddcc2035a16ab25310ea2c8cfd4369652\"\n-\"checksum autocfg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a6d640bee2da49f60a4068a7fae53acde8982514ab7bae8b8cea9e88cbcfd799\"\n-\"checksum backtrace 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f106c02a3604afcdc0df5d36cc47b44b55917dbaf3d808f71c163a0ddba64637\"\n+\"checksum autocfg 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e49efa51329a5fd37e7c79db4621af617cd4e3e5bc224939808d076077077bf\"\n+\"checksum backtrace 0.3.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1a13fc43f04daf08ab4f71e3d27e1fc27fc437d3e95ac0063a796d92fb40f39b\"\n \"checksum backtrace-sys 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"797c830ac25ccc92a7f8a7b9862bde440715531514594a6154e3d4a54dd769b6\"\n \"checksum bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"228047a76f468627ca71776ecdebd732a3423081fcf5125585bcd7c49886ce12\"\n \"checksum blake2-rfc 0.2.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d6d530bdd2d52966a6d03b7a964add7ae1a288d25214066fd4b600f0f796400\"\n-\"checksum bstr 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6c8203ca06c502958719dae5f653a79e0cc6ba808ed02beffbf27d09610f2143\"\n+\"checksum bstr 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"59604ece62a407dc9164732e5adea02467898954c3a5811fd2dc140af14ef15b\"\n \"checksum bytecount 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be0fdd54b507df8f22012890aadd099979befdba27713c767993f8380112ca7c\"\n \"checksum byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a019b10a2a7cdeb292db131fc8113e57ea2a908f6e7894b0c3c671893b65dbeb\"\n \"checksum cargo_metadata 0.7.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"178d62b240c34223f265a4c1e275e37d62da163d421fc8d7f7e3ee340f803c57\"\n-\"checksum cc 1.0.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5e5f3fee5eeb60324c2781f1e41286bdee933850fff9b3c672587fed5ec58c83\"\n-\"checksum cfg-if 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"11d43355396e872eefb45ce6342e4374ed7bc2b3a502d1b28e36d6e23c05d1f4\"\n+\"checksum cc 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"39f75544d7bbaf57560d2168f28fd649ff9c76153874db88bdbdfd839b1a7e7d\"\n+\"checksum cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b486ce3ccf7ffd79fdeb678eac06a9e6c09fc88d33836340becb8fffe87c5e33\"\n \"checksum clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5067f5bb2d80ef5d68b4c87db81601f0b75bca627bc2ef76b141d7b846a3c6d9\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n \"checksum constant_time_eq 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n@@ -1118,34 +1153,36 @@ dependencies = [\n \"checksum diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c2b69f912779fbb121ceb775d74d51e915af17aaebc38d28a592843a2dd0a3a\"\n \"checksum dirs 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fd78930633bd1c6e35c4b42b1df7b0cbc6bc191146e512bb3bedf243fcc3901\"\n \"checksum either 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5527cfe0d098f36e3f8839852688e63c8fff1c90b2b405aef730615f9a7bcf7b\"\n-\"checksum ena 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f56c93cc076508c549d9bb747f79aa9b4eb098be7b8cad8830c3137ef52d1e00\"\n+\"checksum ena 0.13.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dc01d68e08ca384955a3aeba9217102ca1aa85b6e168639bf27739f1d749d87\"\n \"checksum env_logger 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b61fa891024a945da30a9581546e8cfaf5602c7b3f4c137a2805cf388f92075a\"\n-\"checksum error-chain 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07e791d3be96241c77c43846b665ef1384606da2cd2a48730abe606a12906e02\"\n+\"checksum error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ab49e9dcb602294bc42f9a7dfc9bc6e936fca4418ea300dbfb84fe16de0b7d9\"\n \"checksum failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"795bd83d3abeb9220f257e597aa0080a508b27533824adf336529648f6abf7e2\"\n \"checksum failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea1063915fd7ef4309e222a5a07cf9c319fb9c7836b1f89b85458672dbb127e1\"\n \"checksum fnv 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n \"checksum fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba\"\n-\"checksum getopts 0.2.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a7292d30132fb5424b354f5dc02512a86e4c516fe544bb7a25e7f266951b797\"\n+\"checksum getopts 0.2.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72327b15c228bfe31f1390f93dd5e9279587f0463836393c9df719ce62a3e450\"\n \"checksum globset 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef4feaabe24a0a658fd9cf4a9acf6ed284f045c77df0f49020ba3245cfb7b454\"\n \"checksum heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20564e78d53d2bb135c343b3f47714a56af2061f1c928fdb541dc7b9fdd94205\"\n \"checksum humantime 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ca7e5f2e110db35f93b837c81797f3714500b81d517bf20c431b16d3ca4f114\"\n \"checksum ignore 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8dc57fa12805f367736a38541ac1a9fc6a52812a0ca959b1d4d4b640a89eb002\"\n+\"checksum indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e81a7c05f79578dbc15793d8b619db9ba32b4577003ef3af1a91c416798c58d\"\n \"checksum itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5b8467d9c1cebe26feb08c640139247fac215782d35371ade9a2136ed6085358\"\n-\"checksum itoa 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1306f3464951f30e30d12373d31c79fbd52d236e5e896fd92f96ec7babbbe60b\"\n+\"checksum itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"501266b7edd0174f8530248f87f99c88fbe60ca4ef3dd486835b8d8d53136f7f\"\n \"checksum jobserver 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3d51e24009d966c8285d524dbaf6d60926636b2a89caee9ce0bd612494ddc16\"\n \"checksum lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc5729f27f159ddd61f4df6228e827e86643d4d3e7c32183cb30a1c08f604a14\"\n-\"checksum libc 0.2.51 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bedcc7a809076656486ffe045abeeac163da1b558e963a31e29fbfbeba916917\"\n+\"checksum libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42914d39aad277d9e176efbdad68acb1d5443ab65afe0e0e4f0d49352a950880\"\n \"checksum lock_api 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"62ebf1391f6acad60e5c8b43706dde4582df75c06698ab44511d15016bc2442c\"\n \"checksum log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c84ec4b527950aa83a329754b01dbe3f58361d1c5efacd1f6d68c494d08a17c6\"\n \"checksum memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2efc7bc57c883d4a4d6e3246905283d8dae951bb3bd32f49d6ef297f546e1c39\"\n \"checksum memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f9dc261e2b62d7a622bf416ea3c5245cdd5d9a7fcc428c0d06804dfce1775b3\"\n \"checksum nodrop 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f9667ddcc6cc8a43afc9b7917599d7216aa09c463919ea32c59ed6cac8bc945\"\n \"checksum num_cpus 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1a23f0ed30a54abaa0c7e83b1d2d87ada7c3c23078d1d87815af3e3b6385fbba\"\n+\"checksum numtoa 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8f8bdf33df195859076e54ab11ee78a1b208382d3a26ec40d142ffc1ecc49ef\"\n \"checksum owning_ref 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49a4b8ea2179e6a2e27411d3bca09ca6dd630821cf6894c6c7c8467a8ee7ef13\"\n \"checksum packed_simd 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a85ea9fc0d4ac0deb6fe7911d38786b32fc11119afd9e9d38b84ff691ce64220\"\n \"checksum parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab41b4aed082705d1056416ae4468b6ea99d52599ecf3169b00088d43113e337\"\n \"checksum parking_lot_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94c8c7923936b28d546dfd14d4472eaf34c99b14e1c973a32b3e6d4eb04298c9\"\n-\"checksum proc-macro2 0.4.27 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4d317f9caece796be1980837fd5cb3dfec5613ebdb04ad0956deea83ce168915\"\n+\"checksum proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf3d2011ab5c909338f7887f4fc896d35932e29146c12c8d01da6b22a80ba759\"\n \"checksum quick-error 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9274b940887ce9addde99c4eee6b5c44cc494b182b97e73dc8ffdcb3397fd3f0\"\n \"checksum quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"faf4799c5d274f3868a4aae320a0a182cbd2baee377b378f080e16a23e9d80db\"\n \"checksum rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n@@ -1154,7 +1191,7 @@ dependencies = [\n \"checksum rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d0e7a549d590831370895ab7ba4ea0c1b6b011d106b5ff2da6eee112615e6dc0\"\n \"checksum rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b40677c7be09ae76218dc623efbf7b18e34bced3f38883af07bb75630a21bc4\"\n \"checksum rand_isaac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ded997c9d5f13925be2a6fd7e66bf1872597f759fd9dd93513dd7e92e5a5ee08\"\n-\"checksum rand_jitter 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b9ea758282efe12823e0d952ddb269d2e1897227e464919a554f2a03ef1b832\"\n+\"checksum rand_jitter 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1166d5c91dc97b88d1decc3285bb0a99ed84b05cfd0bc2341bdf2d43fc41e39b\"\n \"checksum rand_os 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b75f676a1e053fc562eafbb47838d67c84801e38fc1ba459e8f180deabd5071\"\n \"checksum rand_pcg 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"abf9b09b01790cfe0364f52bf32995ea3c39f4d2dd011eac241d2914146d0b44\"\n \"checksum rand_xorshift 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cbf7e9e623549b0e21f6e97cf8ecf247c1a8fd2e8a992ae265314300b2455d5c\"\n@@ -1164,51 +1201,53 @@ dependencies = [\n \"checksum redox_users 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fe5204c3a17e97dde73f285d49be585df59ed84b50a872baf416e73b62c3828\"\n \"checksum regex 1.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8f0a0bcab2fd7d1d7c54fa9eae6f43eddeb9ce2e7352f8518a814a4f65d60c58\"\n \"checksum regex-syntax 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcfd8681eebe297b81d98498869d4aae052137651ad7b96822f09ceb690d0a96\"\n-\"checksum rustc-ap-arena 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5aab2fb5e5becf1c9183f6c63b8714817a3e780a20b4fe6b3920751c98a18225\"\n-\"checksum rustc-ap-graphviz 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0235ff613d4f96176ea56748010b5d8e978605cc47856ba9bb5372f4f38e9c03\"\n-\"checksum rustc-ap-rustc_cratesio_shim 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"63e04a90b0dd8597da83633961698c61a2948f50c9d4b9a71e8afafc0ba0f158\"\n-\"checksum rustc-ap-rustc_data_structures 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c03988d65fc5130787df32e8ea91738f78a8ed62b7a5bdd77f10e5cceb531d8e\"\n-\"checksum rustc-ap-rustc_errors 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8b33b9dc34f9fa50bf7e6fd14f2f3c1adc69833acf43c10f3e9795bd4d613712\"\n-\"checksum rustc-ap-rustc_target 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e6de75caef2c7acba11994614266d60238653657677934817ab368d169333cba\"\n-\"checksum rustc-ap-serialize 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cf09c60aaee892b0fd107544cfe607d8d463e7f33da34aa823566b8fd2b17f53\"\n-\"checksum rustc-ap-syntax 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"69f38cc120ff317678bbda8c4f58c1bbc1de64b615383ab01480482dde5e95a1\"\n-\"checksum rustc-ap-syntax_pos 407.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20a0a201141c5c416b1924b079eeefc7b013e34ece0740ce4997f358b3684a7f\"\n+\"checksum rustc-ap-arena 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"af30808ea1dad5e3967d1997d97f32829ff9a999686768aac694ca20a8ca5507\"\n+\"checksum rustc-ap-graphviz 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c8c4bc0c92187923ced8e6d1cbdde129b0fce020af817d8a889fddc36d81429\"\n+\"checksum rustc-ap-rustc_cratesio_shim 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"724100fb95b88e6f2a870cd957d60fc4f62d7a26f1e5b889ebcb090965118d33\"\n+\"checksum rustc-ap-rustc_data_structures 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d178c2ffcacf8e95d3af281b23d382ef8efce581bdd487a8fac38624a52344f\"\n+\"checksum rustc-ap-rustc_errors 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"229720cd73ce22a76e763f6554653863f91667c624bc92f89422beeb72002ebb\"\n+\"checksum rustc-ap-rustc_macros 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd85f5873ed31ab1d511e132743e08f14c88d912dfcf1d7949b7d5666ba030e7\"\n+\"checksum rustc-ap-rustc_target 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"190dbb1a01e51b2280387cc18985382e785da2264473ff9a86ad6917c8343a6e\"\n+\"checksum rustc-ap-serialize 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9de6ea7e67ea3b8ddee324339bf4369c9af5c72a664b98f33083f8480c1df3b4\"\n+\"checksum rustc-ap-syntax 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4620f48399b89ab3eee54e81c0206e60645ce7b658269f09a7a9752f66c78fa1\"\n+\"checksum rustc-ap-syntax_pos 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3bf89da0ea5cde2c8ab974aaf7941ac4e1c9ba9cd2e00e3814974bd4a2bfe68\"\n \"checksum rustc-demangle 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ccc78bfd5acd7bf3e89cffcf899e5cb1a52d6fafa8dec2739ad70c9577a57288\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n-\"checksum rustc-rayon 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8d98c51d9cbbe810c8b6693236d3412d8cd60513ff27a3e1b6af483dca0af544\"\n-\"checksum rustc-rayon-core 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"526e7b6d2707a5b9bec3927d424ad70fa3cfc68e0ac1b75e46cdbbc95adc5108\"\n+\"checksum rustc-rayon 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d2e07e19601f21c59aad953c2632172ba70cb27e685771514ea66e4062b3363\"\n+\"checksum rustc-rayon-core 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"79d38ca7cbc22fa59f09d8534ea4b27f67b0facf0cbe274433aceea227a02543\"\n \"checksum rustc-workspace-hack 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc71d2faa173b74b232dedc235e3ee1696581bb132fc116fa3626d6151a1a8fb\"\n \"checksum rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a\"\n-\"checksum ryu 0.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb9e9b8cde282a9fe6a42dd4681319bfb63f121b8a8ee9439c6f4107e58a46f7\"\n+\"checksum ryu 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b96a9549dc8d48f2c283938303c4b5a77aa29bfbc5b54b084fb1630408899a8f\"\n \"checksum same-file 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8f20c4be53a8a1ff4c1f1b2bd14570d2f634628709752f0702ecdd2b3f9a5267\"\n \"checksum scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ea6a9290e3c9cf0f18145ef7ffa62d68ee0bf5fcd651017e586dc7fd5da448c2\"\n \"checksum scoped_threadpool 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d51f5df5af43ab3f1360b429fa5e0152ac5ce8c0bd6485cae490332e96846a8\"\n \"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n-\"checksum serde 1.0.90 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa5f7c20820475babd2c077c3ab5f8c77a31c15e16ea38687b4c02d3e48680f4\"\n-\"checksum serde_derive 1.0.90 (registry+https://github.com/rust-lang/crates.io-index)\" = \"58fc82bec244f168b23d1963b45c8bf5726e9a15a9d146a067f9081aeed2de79\"\n+\"checksum serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a72e9b96fa45ce22a4bc23da3858dfccfd60acd28a25bcd328a98fdd6bea43fd\"\n+\"checksum serde_derive 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\" = \"101b495b109a3e3ca8c4cbe44cf62391527cdfb6ba15821c5ce80bcd5ea23f9f\"\n \"checksum serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5a23aa71d4a4d43fdbfaac00eff68ba8a06a51759a89ac3304323e800c4dd40d\"\n \"checksum smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c4488ae950c49d403731982257768f48fada354a5203fe81f9bb6f43ca9002be\"\n \"checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\n \"checksum strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n \"checksum structopt 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d0760c312538987d363c36c42339b55f5ee176ea8808bbe4543d484a291c8d1\"\n \"checksum structopt-derive 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"528aeb7351d042e6ffbc2a6fb76a86f9b622fdf7c25932798e7a82cb03bc94c6\"\n-\"checksum syn 0.15.32 (registry+https://github.com/rust-lang/crates.io-index)\" = \"846620ec526c1599c070eff393bfeeeb88a93afa2513fc3b49f1fea84cf7b0ed\"\n-\"checksum synstructure 0.10.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73687139bf99285483c96ac0add482c3776528beac1d97d444f6e91f203a2015\"\n+\"checksum syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1393e4a97a19c01e900df2aec855a29f71cf02c402e2f443b8d2747c25c5dbe\"\n+\"checksum synstructure 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02353edf96d6e4dc81aea2d8490a7e9db177bf8acb0e951c24940bf866cb313f\"\n \"checksum term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"edd106a334b7657c10b7c540a0106114feadeb4dc314513e97df481d5d966f42\"\n \"checksum termcolor 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4096add70612622289f2fdcdbd5086dc81c1e2675e6ae58d6c4f62a16c6d7f2f\"\n-\"checksum termion 1.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"689a3bdfaab439fd92bc87df5c4c78417d3cbe537487274e9b0b2dce76e92096\"\n+\"checksum termion 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dde0593aeb8d47accea5392b39350015b5eccb12c0d98044d856983d89548dea\"\n \"checksum textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n \"checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\"\n-\"checksum toml 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87c5890a989fa47ecdc7bcb4c63a77a82c18f306714104b1decfd722db17b39e\"\n+\"checksum toml 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b8c96d7873fa7ef8bdeb3a9cda3ac48389b4154f32b9803b4bc26220b677b039\"\n \"checksum ucd-util 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"535c204ee4d8434478593480b8f86ab45ec9aae0e83c568ca81abf0fd0e88f86\"\n-\"checksum unicode-segmentation 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aa6024fc12ddfd1c6dbc14a80fa2324d4568849869b779f6bd37e5e4c03344d1\"\n+\"checksum unicode-segmentation 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1967f4cdfc355b37fd76d2a954fb2ed3871034eb4f26d60537d88795cfc332a9\"\n \"checksum unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"882386231c45df4700b275c7ff55b6f3698780a650026380e72dabe76fa46526\"\n \"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n \"checksum unicode_categories 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"39ec24b3121d976906ece63c9daad25b85969647682eee313cb5779fdd69e14e\"\n \"checksum utf8-ranges 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796f7e48bef87609f7ade7e06495a87d5cd06c7866e6a5cbfceffc558a243737\"\n \"checksum vec_map 0.8.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"05c78687fb1a80548ae3250346c3db86a80a7cdd77bda190189f2d0a0987c81a\"\n+\"checksum version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"914b1a6776c4c929a602fafd8bc742e06365d4bcbe48c30f9cca5824f70dc9dd\"\n \"checksum walkdir 2.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9d9d7ed3431229a144296213105a390676cc49c9b6a72bd19f3176c98e129fa1\"\n \"checksum winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f10e386af2b13e47c89e7236a7a14a086791a2b88ebad6df9bf42040195cf770\"\n \"checksum winapi-i686-pc-windows-gnu 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\""}, {"sha": "92418a49ec57de3181a21bd791f4b3ebd8e855ea", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -48,9 +48,9 @@ env_logger = \"0.6\"\n getopts = \"0.2\"\n derive-new = \"0.5\"\n cargo_metadata = \"0.7\"\n-rustc-ap-rustc_target = \"407.0.0\"\n-rustc-ap-syntax = \"407.0.0\"\n-rustc-ap-syntax_pos = \"407.0.0\"\n+rustc-ap-rustc_target = \"486.0.0\"\n+rustc-ap-syntax = \"486.0.0\"\n+rustc-ap-syntax_pos = \"486.0.0\"\n failure = \"0.1.3\"\n bytecount = \"0.5\"\n unicode-width = \"0.1.5\""}, {"sha": "78d88958ac779a6c1b276aac5c2785c9a78f2c9a", "filename": "src/attr.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -2,6 +2,7 @@\n \n use syntax::ast;\n use syntax::source_map::{BytePos, Span, DUMMY_SP};\n+use syntax::symbol::sym;\n \n use self::doc_comment::DocCommentFormatter;\n use crate::comment::{contains_comment, rewrite_doc_comment, CommentStyle};\n@@ -52,15 +53,15 @@ pub(crate) fn filter_inline_attrs(\n }\n \n fn is_derive(attr: &ast::Attribute) -> bool {\n-    attr.check_name(\"derive\")\n+    attr.check_name(sym::derive)\n }\n \n /// Returns the arguments of `#[derive(...)]`.\n fn get_derive_spans<'a>(attr: &'a ast::Attribute) -> Option<impl Iterator<Item = Span> + 'a> {\n     attr.meta_item_list().map(|meta_item_list| {\n         meta_item_list\n             .into_iter()\n-            .map(|nested_meta_item| nested_meta_item.span)\n+            .map(|nested_meta_item| nested_meta_item.span())\n     })\n }\n \n@@ -189,9 +190,9 @@ fn rewrite_initial_doc_comments(\n \n impl Rewrite for ast::NestedMetaItem {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n-        match self.node {\n-            ast::NestedMetaItemKind::MetaItem(ref meta_item) => meta_item.rewrite(context, shape),\n-            ast::NestedMetaItemKind::Literal(ref l) => rewrite_literal(context, l, shape),\n+        match self {\n+            ast::NestedMetaItem::MetaItem(ref meta_item) => meta_item.rewrite(context, shape),\n+            ast::NestedMetaItem::Literal(ref l) => rewrite_literal(context, l, shape),\n         }\n     }\n }\n@@ -219,10 +220,10 @@ impl Rewrite for ast::MetaItem {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         Some(match self.node {\n             ast::MetaItemKind::Word => {\n-                rewrite_path(context, PathContext::Type, None, &self.ident, shape)?\n+                rewrite_path(context, PathContext::Type, None, &self.path, shape)?\n             }\n             ast::MetaItemKind::List(ref list) => {\n-                let path = rewrite_path(context, PathContext::Type, None, &self.ident, shape)?;\n+                let path = rewrite_path(context, PathContext::Type, None, &self.path, shape)?;\n                 let has_trailing_comma = crate::expr::span_ends_with_comma(context, self.span);\n                 overflow::rewrite_with_parens(\n                     context,\n@@ -240,7 +241,7 @@ impl Rewrite for ast::MetaItem {\n                 )?\n             }\n             ast::MetaItemKind::NameValue(ref literal) => {\n-                let path = rewrite_path(context, PathContext::Type, None, &self.ident, shape)?;\n+                let path = rewrite_path(context, PathContext::Type, None, &self.path, shape)?;\n                 // 3 = ` = `\n                 let lit_shape = shape.shrink_left(path.len() + 3)?;\n                 // `rewrite_literal` returns `None` when `literal` exceeds max\n@@ -326,15 +327,16 @@ impl Rewrite for ast::Attribute {\n \n             if let Some(ref meta) = self.meta() {\n                 // This attribute is possibly a doc attribute needing normalization to a doc comment\n-                if context.config.normalize_doc_attributes() && meta.check_name(\"doc\") {\n+                if context.config.normalize_doc_attributes() && meta.check_name(sym::doc) {\n                     if let Some(ref literal) = meta.value_str() {\n                         let comment_style = match self.style {\n                             ast::AttrStyle::Inner => CommentStyle::Doc,\n                             ast::AttrStyle::Outer => CommentStyle::TripleSlash,\n                         };\n \n+                        let literal_str = literal.as_str();\n                         let doc_comment_formatter =\n-                            DocCommentFormatter::new(literal.as_str().get(), comment_style);\n+                            DocCommentFormatter::new(literal_str.get(), comment_style);\n                         let doc_comment = format!(\"{}\", doc_comment_formatter);\n                         return rewrite_doc_comment(\n                             &doc_comment,"}, {"sha": "9a5823817a1e3083067f13fb22f2ecc9ce9407e0", "filename": "src/chains.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -118,6 +118,7 @@ enum ChainItemKind {\n     ),\n     StructField(ast::Ident),\n     TupleField(ast::Ident, bool),\n+    Await,\n     Comment(String, CommentPosition),\n }\n \n@@ -128,6 +129,7 @@ impl ChainItemKind {\n             ChainItemKind::MethodCall(..)\n             | ChainItemKind::StructField(..)\n             | ChainItemKind::TupleField(..)\n+            | ChainItemKind::Await\n             | ChainItemKind::Comment(..) => false,\n         }\n     }\n@@ -166,6 +168,10 @@ impl ChainItemKind {\n                 let span = mk_sp(nested.span.hi(), field.span.hi());\n                 (kind, span)\n             }\n+            ast::ExprKind::Await(_, ref nested) => {\n+                let span = mk_sp(nested.span.hi(), expr.span.hi());\n+                (ChainItemKind::Await, span)\n+            }\n             _ => return (ChainItemKind::Parent(expr.clone()), expr.span),\n         };\n \n@@ -189,6 +195,7 @@ impl Rewrite for ChainItem {\n                 if nested { \" \" } else { \"\" },\n                 rewrite_ident(context, ident)\n             ),\n+            ChainItemKind::Await => \".await\".to_owned(),\n             ChainItemKind::Comment(ref comment, _) => {\n                 rewrite_comment(comment, false, shape, context.config)?\n             }\n@@ -387,9 +394,9 @@ impl Chain {\n             ast::ExprKind::MethodCall(_, ref expressions) => {\n                 Some(Self::convert_try(&expressions[0], context))\n             }\n-            ast::ExprKind::Field(ref subexpr, _) | ast::ExprKind::Try(ref subexpr) => {\n-                Some(Self::convert_try(subexpr, context))\n-            }\n+            ast::ExprKind::Field(ref subexpr, _)\n+            | ast::ExprKind::Try(ref subexpr)\n+            | ast::ExprKind::Await(_, ref subexpr) => Some(Self::convert_try(subexpr, context)),\n             _ => None,\n         }\n     }"}, {"sha": "72d010f12b3fe6c5d24716be959de13b8293cec7", "filename": "src/closures.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -1,4 +1,3 @@\n-use syntax::parse::classify;\n use syntax::source_map::Span;\n use syntax::{ast, ptr};\n \n@@ -25,7 +24,7 @@ use crate::utils::{last_line_width, left_most_sub_expr, stmt_expr, NodeIdExt};\n \n pub(crate) fn rewrite_closure(\n     capture: ast::CaptureBy,\n-    asyncness: ast::IsAsync,\n+    is_async: &ast::IsAsync,\n     movability: ast::Movability,\n     fn_decl: &ast::FnDecl,\n     body: &ast::Expr,\n@@ -36,7 +35,7 @@ pub(crate) fn rewrite_closure(\n     debug!(\"rewrite_closure {:?}\", body);\n \n     let (prefix, extra_offset) = rewrite_closure_fn_decl(\n-        capture, asyncness, movability, fn_decl, body, span, context, shape,\n+        capture, is_async, movability, fn_decl, body, span, context, shape,\n     )?;\n     // 1 = space between `|...|` and body.\n     let body_shape = shape.offset_left(extra_offset)?;\n@@ -134,7 +133,7 @@ fn rewrite_closure_with_block(\n     shape: Shape,\n ) -> Option<String> {\n     let left_most = left_most_sub_expr(body);\n-    let veto_block = veto_block(body) && !classify::expr_requires_semi_to_be_stmt(left_most);\n+    let veto_block = veto_block(body) && !expr_requires_semi_to_be_stmt(left_most);\n     if veto_block {\n         return None;\n     }\n@@ -207,7 +206,7 @@ fn rewrite_closure_block(\n // Return type is (prefix, extra_offset)\n fn rewrite_closure_fn_decl(\n     capture: ast::CaptureBy,\n-    asyncness: ast::IsAsync,\n+    asyncness: &ast::IsAsync,\n     movability: ast::Movability,\n     fn_decl: &ast::FnDecl,\n     body: &ast::Expr,\n@@ -291,7 +290,7 @@ pub(crate) fn rewrite_last_closure(\n     expr: &ast::Expr,\n     shape: Shape,\n ) -> Option<String> {\n-    if let ast::ExprKind::Closure(capture, asyncness, movability, ref fn_decl, ref body, _) =\n+    if let ast::ExprKind::Closure(capture, ref is_async, movability, ref fn_decl, ref body, _) =\n         expr.node\n     {\n         let body = match body.node {\n@@ -305,7 +304,7 @@ pub(crate) fn rewrite_last_closure(\n             _ => body,\n         };\n         let (prefix, extra_offset) = rewrite_closure_fn_decl(\n-            capture, asyncness, movability, fn_decl, body, expr.span, context, shape,\n+            capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n         )?;\n         // If the closure goes multi line before its body, do not overflow the closure.\n         if prefix.contains('\\n') {\n@@ -387,3 +386,26 @@ fn is_block_closure_forced_inner(expr: &ast::Expr, version: Version) -> bool {\n         _ => false,\n     }\n }\n+\n+/// Does this expression require a semicolon to be treated\n+/// as a statement? The negation of this: 'can this expression\n+/// be used as a statement without a semicolon' -- is used\n+/// as an early-bail-out in the parser so that, for instance,\n+///     if true {...} else {...}\n+///      |x| 5\n+/// isn't parsed as (if true {...} else {...} | x) | 5\n+// From https://github.com/rust-lang/rust/blob/master/src/libsyntax/parse/classify.rs.\n+fn expr_requires_semi_to_be_stmt(e: &ast::Expr) -> bool {\n+    match e.node {\n+        ast::ExprKind::If(..)\n+        | ast::ExprKind::IfLet(..)\n+        | ast::ExprKind::Match(..)\n+        | ast::ExprKind::Block(..)\n+        | ast::ExprKind::While(..)\n+        | ast::ExprKind::WhileLet(..)\n+        | ast::ExprKind::Loop(..)\n+        | ast::ExprKind::ForLoop(..)\n+        | ast::ExprKind::TryBlock(..) => false,\n+        _ => true,\n+    }\n+}"}, {"sha": "78473803fa969f5e7cb7311b644acec4f120bfa0", "filename": "src/expr.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -1,5 +1,6 @@\n use std::borrow::Cow;\n use std::cmp::min;\n+use std::iter;\n \n use itertools::Itertools;\n use syntax::parse::token::DelimToken;\n@@ -183,9 +184,9 @@ pub(crate) fn format_expr(\n                 Some(\"yield\".to_string())\n             }\n         }\n-        ast::ExprKind::Closure(capture, asyncness, movability, ref fn_decl, ref body, _) => {\n+        ast::ExprKind::Closure(capture, ref is_async, movability, ref fn_decl, ref body, _) => {\n             closures::rewrite_closure(\n-                capture, asyncness, movability, fn_decl, body, expr.span, context, shape,\n+                capture, is_async, movability, fn_decl, body, expr.span, context, shape,\n             )\n         }\n         ast::ExprKind::Try(..) | ast::ExprKind::Field(..) | ast::ExprKind::MethodCall(..) => {\n@@ -335,10 +336,6 @@ pub(crate) fn format_expr(\n                 ))\n             }\n         }\n-        ast::ExprKind::ObsoleteInPlace(ref lhs, ref rhs) => lhs\n-            .rewrite(context, shape)\n-            .map(|s| s + \" <-\")\n-            .and_then(|lhs| rewrite_assign_rhs(context, lhs, &**rhs, shape)),\n         ast::ExprKind::Async(capture_by, _node_id, ref block) => {\n             let mover = if capture_by == ast::CaptureBy::Value {\n                 \"move \"\n@@ -371,6 +368,18 @@ pub(crate) fn format_expr(\n                 ))\n             }\n         }\n+        ast::ExprKind::Await(ast::AwaitOrigin::FieldLike, _) => rewrite_chain(expr, context, shape),\n+        ast::ExprKind::Await(ast::AwaitOrigin::MacroLike, ref nested) => {\n+            overflow::rewrite_with_parens(\n+                context,\n+                \"await!\",\n+                iter::once(nested),\n+                shape,\n+                expr.span,\n+                context.config.max_width(),\n+                None,\n+            )\n+        }\n         ast::ExprKind::Err => None,\n     };\n "}, {"sha": "acfd3723b1a312e9016be98c7feb06d72cd8b01e", "filename": "src/formatting.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -33,11 +33,7 @@ impl<'b, T: Write + 'b> Session<'b, T> {\n             return Err(ErrorKind::VersionMismatch);\n         }\n \n-        syntax::with_globals(|| {\n-            syntax_pos::hygiene::set_default_edition(\n-                self.config.edition().to_libsyntax_pos_edition(),\n-            );\n-\n+        syntax::with_globals(self.config.edition().to_libsyntax_pos_edition(), || {\n             if self.config.disable_all_formatting() {\n                 // When the input is from stdin, echo back the input.\n                 if let Input::Text(ref buf) = input {\n@@ -687,7 +683,7 @@ fn parse_crate(\n struct SilentEmitter;\n \n impl Emitter for SilentEmitter {\n-    fn emit(&mut self, _db: &DiagnosticBuilder<'_>) {}\n+    fn emit_diagnostic(&mut self, _db: &DiagnosticBuilder<'_>) {}\n }\n \n fn silent_emitter() -> Box<SilentEmitter> {"}, {"sha": "dd506000a69f40a0640cf644e170ee884c8a7f8b", "filename": "src/imports.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -4,6 +4,7 @@ use std::fmt;\n \n use syntax::ast::{self, UseTreeKind};\n use syntax::source_map::{self, BytePos, Span, DUMMY_SP};\n+use syntax::symbol::sym;\n \n use crate::comment::combine_strs_with_missing_comments;\n use crate::config::lists::*;\n@@ -249,7 +250,7 @@ impl UseTree {\n         match self.attrs {\n             Some(ref attrs) if !attrs.is_empty() => {\n                 let attr_str = attrs.rewrite(context, shape)?;\n-                let lo = attrs.last().as_ref()?.span().hi();\n+                let lo = attrs.last().as_ref()?.span.hi();\n                 let hi = self.span.lo();\n                 let span = mk_sp(lo, hi);\n \n@@ -395,7 +396,7 @@ impl UseTree {\n                     rewrite_ident(context, path_to_imported_ident(&a.prefix)).to_owned()\n                 };\n                 let alias = rename.and_then(|ident| {\n-                    if ident.name == \"_\" {\n+                    if ident.name == sym::underscore_imports {\n                         // for impl-only-use\n                         Some(\"_\".to_owned())\n                     } else if ident == path_to_imported_ident(&a.prefix) {"}, {"sha": "cffb580a814153ee8e104f722f1e032ce9b748e4", "filename": "src/items.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -161,7 +161,7 @@ pub(crate) struct FnSig<'a> {\n     decl: &'a ast::FnDecl,\n     generics: &'a ast::Generics,\n     abi: abi::Abi,\n-    is_async: ast::IsAsync,\n+    is_async: Cow<'a, ast::IsAsync>,\n     constness: ast::Constness,\n     defaultness: ast::Defaultness,\n     unsafety: ast::Unsafety,\n@@ -178,7 +178,7 @@ impl<'a> FnSig<'a> {\n             decl,\n             generics,\n             abi: abi::Abi::Rust,\n-            is_async: ast::IsAsync::NotAsync,\n+            is_async: Cow::Owned(ast::IsAsync::NotAsync),\n             constness: ast::Constness::NotConst,\n             defaultness: ast::Defaultness::Final,\n             unsafety: ast::Unsafety::Normal,\n@@ -192,7 +192,7 @@ impl<'a> FnSig<'a> {\n     ) -> FnSig<'a> {\n         FnSig {\n             unsafety: method_sig.header.unsafety,\n-            is_async: method_sig.header.asyncness.node,\n+            is_async: Cow::Borrowed(&method_sig.header.asyncness.node),\n             constness: method_sig.header.constness.node,\n             defaultness: ast::Defaultness::Final,\n             abi: method_sig.header.abi,\n@@ -214,7 +214,7 @@ impl<'a> FnSig<'a> {\n                 generics,\n                 abi: fn_header.abi,\n                 constness: fn_header.constness.node,\n-                is_async: fn_header.asyncness.node,\n+                is_async: Cow::Borrowed(&fn_header.asyncness.node),\n                 defaultness,\n                 unsafety: fn_header.unsafety,\n                 visibility: visibility.clone(),\n@@ -237,8 +237,8 @@ impl<'a> FnSig<'a> {\n         result.push_str(&*format_visibility(context, &self.visibility));\n         result.push_str(format_defaultness(self.defaultness));\n         result.push_str(format_constness(self.constness));\n+        result.push_str(format_async(&self.is_async));\n         result.push_str(format_unsafety(self.unsafety));\n-        result.push_str(format_async(self.is_async));\n         result.push_str(&format_abi(\n             self.abi,\n             context.config.force_explicit_abi(),\n@@ -422,7 +422,10 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     pub(crate) fn visit_struct(&mut self, struct_parts: &StructParts<'_>) {\n-        let is_tuple = struct_parts.def.is_tuple();\n+        let is_tuple = match struct_parts.def {\n+            ast::VariantData::Tuple(..) => true,\n+            _ => false,\n+        };\n         let rewrite = format_struct(&self.get_context(), struct_parts, self.block_indent, None)\n             .map(|s| if is_tuple { s + \";\" } else { s });\n         self.push_rewrite(struct_parts.span, rewrite);\n@@ -1982,7 +1985,7 @@ pub(crate) fn span_hi_for_arg(context: &RewriteContext<'_>, arg: &ast::Arg) -> B\n \n pub(crate) fn is_named_arg(arg: &ast::Arg) -> bool {\n     if let ast::PatKind::Ident(_, ident, _) = arg.pat.node {\n-        ident != symbol::keywords::Invalid.ident()\n+        ident.name != symbol::kw::Invalid\n     } else {\n         true\n     }\n@@ -2931,11 +2934,11 @@ impl Rewrite for ast::ForeignItem {\n                 false,\n             )\n             .map(|(s, _)| format!(\"{};\", s)),\n-            ast::ForeignItemKind::Static(ref ty, is_mutable) => {\n+            ast::ForeignItemKind::Static(ref ty, mutability) => {\n                 // FIXME(#21): we're dropping potential comments in between the\n-                // function keywords here.\n+                // function kw here.\n                 let vis = format_visibility(context, &self.vis);\n-                let mut_str = if is_mutable { \"mut \" } else { \"\" };\n+                let mut_str = format_mutability(mutability);\n                 let prefix = format!(\n                     \"{}static {}{}:\",\n                     vis,"}, {"sha": "7122a60f2cf2387f334a3a6ce2ad6c0682226986", "filename": "src/macros.rs", "status": "modified", "additions": 68, "deletions": 67, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -17,10 +17,11 @@ use syntax::parse::parser::Parser;\n use syntax::parse::token::{BinOpToken, DelimToken, Token};\n use syntax::print::pprust;\n use syntax::source_map::{BytePos, Span};\n-use syntax::symbol::keywords;\n+use syntax::symbol::kw;\n use syntax::tokenstream::{Cursor, TokenStream, TokenTree};\n use syntax::ThinVec;\n use syntax::{ast, parse, ptr};\n+use syntax_pos::Symbol;\n \n use crate::comment::{\n     contains_comment, CharClasses, FindUncommented, FullCodeCharKind, LineClasses,\n@@ -149,7 +150,7 @@ fn rewrite_macro_name(\n         format!(\"{}!\", path)\n     };\n     match extra_ident {\n-        Some(ident) if ident != keywords::Invalid.ident() => format!(\"{} {}\", name, ident),\n+        Some(ident) if ident.name != kw::Invalid => format!(\"{} {}\", name, ident),\n         _ => name,\n     }\n }\n@@ -231,15 +232,15 @@ pub(crate) fn rewrite_macro(\n }\n \n fn check_keyword<'a, 'b: 'a>(parser: &'a mut Parser<'b>) -> Option<MacroArg> {\n-    for &keyword in RUST_KEYWORDS.iter() {\n+    for &keyword in RUST_KW.iter() {\n         if parser.token.is_keyword(keyword)\n             && parser.look_ahead(1, |t| {\n                 *t == Token::Eof\n                     || *t == Token::Comma\n                     || *t == Token::CloseDelim(DelimToken::NoDelim)\n             })\n         {\n-            let macro_arg = MacroArg::Keyword(keyword.ident(), parser.span);\n+            let macro_arg = MacroArg::Keyword(ast::Ident::with_empty_ctxt(keyword), parser.span);\n             parser.bump();\n             return Some(macro_arg);\n         }\n@@ -1425,8 +1426,8 @@ fn format_lazy_static(\n     while parser.token != Token::Eof {\n         // Parse a `lazy_static!` item.\n         let vis = crate::utils::format_visibility(context, &parse_or!(parse_visibility, false));\n-        parser.eat_keyword(keywords::Static);\n-        parser.eat_keyword(keywords::Ref);\n+        parser.eat_keyword(kw::Static);\n+        parser.eat_keyword(kw::Ref);\n         let id = parse_or!(parse_ident);\n         parser.eat(&Token::Colon);\n         let ty = parse_or!(parse_ty);\n@@ -1502,65 +1503,65 @@ fn rewrite_macro_with_items(\n     Some(result)\n }\n \n-const RUST_KEYWORDS: [keywords::Keyword; 60] = [\n-    keywords::PathRoot,\n-    keywords::DollarCrate,\n-    keywords::Underscore,\n-    keywords::As,\n-    keywords::Box,\n-    keywords::Break,\n-    keywords::Const,\n-    keywords::Continue,\n-    keywords::Crate,\n-    keywords::Else,\n-    keywords::Enum,\n-    keywords::Extern,\n-    keywords::False,\n-    keywords::Fn,\n-    keywords::For,\n-    keywords::If,\n-    keywords::Impl,\n-    keywords::In,\n-    keywords::Let,\n-    keywords::Loop,\n-    keywords::Match,\n-    keywords::Mod,\n-    keywords::Move,\n-    keywords::Mut,\n-    keywords::Pub,\n-    keywords::Ref,\n-    keywords::Return,\n-    keywords::SelfLower,\n-    keywords::SelfUpper,\n-    keywords::Static,\n-    keywords::Struct,\n-    keywords::Super,\n-    keywords::Trait,\n-    keywords::True,\n-    keywords::Type,\n-    keywords::Unsafe,\n-    keywords::Use,\n-    keywords::Where,\n-    keywords::While,\n-    keywords::Abstract,\n-    keywords::Become,\n-    keywords::Do,\n-    keywords::Final,\n-    keywords::Macro,\n-    keywords::Override,\n-    keywords::Priv,\n-    keywords::Typeof,\n-    keywords::Unsized,\n-    keywords::Virtual,\n-    keywords::Yield,\n-    keywords::Dyn,\n-    keywords::Async,\n-    keywords::Try,\n-    keywords::UnderscoreLifetime,\n-    keywords::StaticLifetime,\n-    keywords::Auto,\n-    keywords::Catch,\n-    keywords::Default,\n-    keywords::Existential,\n-    keywords::Union,\n+const RUST_KW: [Symbol; 60] = [\n+    kw::PathRoot,\n+    kw::DollarCrate,\n+    kw::Underscore,\n+    kw::As,\n+    kw::Box,\n+    kw::Break,\n+    kw::Const,\n+    kw::Continue,\n+    kw::Crate,\n+    kw::Else,\n+    kw::Enum,\n+    kw::Extern,\n+    kw::False,\n+    kw::Fn,\n+    kw::For,\n+    kw::If,\n+    kw::Impl,\n+    kw::In,\n+    kw::Let,\n+    kw::Loop,\n+    kw::Match,\n+    kw::Mod,\n+    kw::Move,\n+    kw::Mut,\n+    kw::Pub,\n+    kw::Ref,\n+    kw::Return,\n+    kw::SelfLower,\n+    kw::SelfUpper,\n+    kw::Static,\n+    kw::Struct,\n+    kw::Super,\n+    kw::Trait,\n+    kw::True,\n+    kw::Type,\n+    kw::Unsafe,\n+    kw::Use,\n+    kw::Where,\n+    kw::While,\n+    kw::Abstract,\n+    kw::Become,\n+    kw::Do,\n+    kw::Final,\n+    kw::Macro,\n+    kw::Override,\n+    kw::Priv,\n+    kw::Typeof,\n+    kw::Unsized,\n+    kw::Virtual,\n+    kw::Yield,\n+    kw::Dyn,\n+    kw::Async,\n+    kw::Try,\n+    kw::UnderscoreLifetime,\n+    kw::StaticLifetime,\n+    kw::Auto,\n+    kw::Catch,\n+    kw::Default,\n+    kw::Existential,\n+    kw::Union,\n ];"}, {"sha": "7c20ea06df0b90a3e532fed64a9d7ea810910322", "filename": "src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -111,7 +111,7 @@ pub(crate) fn rewrite_match(\n             .snippet_provider\n             .span_after(mk_sp(cond.span.hi(), hi), \"{\")\n     } else {\n-        inner_attrs[inner_attrs.len() - 1].span().hi()\n+        inner_attrs[inner_attrs.len() - 1].span.hi()\n     };\n \n     if arms.is_empty() {"}, {"sha": "4140cb4f5456acb4c6aa40a1059e63667504cb81", "filename": "src/modules.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -4,13 +4,14 @@ use std::path::{Path, PathBuf};\n use syntax::ast;\n use syntax::parse::{parser, DirectoryOwnership};\n use syntax::source_map;\n+use syntax::symbol::sym;\n use syntax_pos::symbol::Symbol;\n \n use crate::config::FileName;\n use crate::items::is_mod_decl;\n use crate::utils::contains_skip;\n \n-type FileModMap<'a> = BTreeMap<FileName, (&'a ast::Mod, &'a str)>;\n+type FileModMap<'a> = BTreeMap<FileName, (&'a ast::Mod, String)>;\n \n /// Maps each module to the corresponding file.\n pub(crate) struct ModResolver<'a, 'b> {\n@@ -61,7 +62,7 @@ impl<'a, 'b> ModResolver<'a, 'b> {\n         }\n \n         self.file_map\n-            .insert(root_filename.into(), (&krate.module, \"\"));\n+            .insert(root_filename.into(), (&krate.module, String::new()));\n         Ok(self.file_map)\n     }\n \n@@ -80,7 +81,7 @@ impl<'a, 'b> ModResolver<'a, 'b> {\n                         self.find_external_module(item.ident, &item.attrs)?;\n                     self.file_map.insert(\n                         FileName::Real(mod_path.clone()),\n-                        (sub_mod, item.ident.name.as_str().get()),\n+                        (sub_mod, item.ident.as_str().get().to_owned()),\n                     );\n                     self.directory = Directory {\n                         path: mod_path.parent().unwrap().to_path_buf(),\n@@ -161,7 +162,7 @@ impl<'a, 'b> ModResolver<'a, 'b> {\n }\n \n fn path_value(attr: &ast::Attribute) -> Option<Symbol> {\n-    if attr.name() == \"path\" {\n+    if attr.check_name(sym::path) {\n         attr.value_str()\n     } else {\n         None"}, {"sha": "1731c3cf08ece281f03e78a13d705a4f1b3b2a35", "filename": "src/overflow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -123,9 +123,9 @@ impl<'a> OverflowableItem<'a> {\n         match self {\n             OverflowableItem::Expr(expr) => is_simple_expr(expr),\n             OverflowableItem::MacroArg(MacroArg::Expr(expr)) => is_simple_expr(expr),\n-            OverflowableItem::NestedMetaItem(nested_meta_item) => match nested_meta_item.node {\n-                ast::NestedMetaItemKind::Literal(..) => true,\n-                ast::NestedMetaItemKind::MetaItem(ref meta_item) => match meta_item.node {\n+            OverflowableItem::NestedMetaItem(nested_meta_item) => match nested_meta_item {\n+                ast::NestedMetaItem::Literal(..) => true,\n+                ast::NestedMetaItem::MetaItem(ref meta_item) => match meta_item.node {\n                     ast::MetaItemKind::Word => true,\n                     _ => false,\n                 },\n@@ -172,9 +172,9 @@ impl<'a> OverflowableItem<'a> {\n                 MacroArg::Keyword(..) => false,\n             },\n             OverflowableItem::NestedMetaItem(nested_meta_item) if len == 1 => {\n-                match nested_meta_item.node {\n-                    ast::NestedMetaItemKind::Literal(..) => false,\n-                    ast::NestedMetaItemKind::MetaItem(..) => true,\n+                match nested_meta_item {\n+                    ast::NestedMetaItem::Literal(..) => false,\n+                    ast::NestedMetaItem::MetaItem(..) => true,\n                 }\n             }\n             OverflowableItem::SegmentParam(seg) => match seg {"}, {"sha": "ee80000b1fa3d795b651f3dfda7ac514f620fa10", "filename": "src/reorder.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -8,7 +8,7 @@\n \n use std::cmp::{Ord, Ordering};\n \n-use syntax::{ast, attr, source_map::Span};\n+use syntax::{ast, attr, source_map::Span, symbol::sym};\n \n use crate::attr::filter_inline_attrs;\n use crate::comment::combine_strs_with_missing_comments;\n@@ -176,7 +176,10 @@ fn rewrite_reorderable_items(\n }\n \n fn contains_macro_use_attr(item: &ast::Item) -> bool {\n-    attr::contains_name(&filter_inline_attrs(&item.attrs, item.span()), \"macro_use\")\n+    attr::contains_name(\n+        &filter_inline_attrs(&item.attrs, item.span()),\n+        sym::macro_use,\n+    )\n }\n \n /// A simplified version of `ast::ItemKind`."}, {"sha": "00dd24a0f060c69c6db60e0c2fc0a8a3d29461cb", "filename": "src/spanned.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -193,3 +193,9 @@ impl Spanned for MacroArg {\n         }\n     }\n }\n+\n+impl Spanned for ast::NestedMetaItem {\n+    fn span(&self) -> Span {\n+        self.span()\n+    }\n+}"}, {"sha": "70b8413836ddff4a0cb649900a8858d2ebfd2855", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -3,7 +3,7 @@ use std::ops::Deref;\n \n use syntax::ast::{self, FunctionRetTy, Mutability};\n use syntax::source_map::{self, BytePos, Span};\n-use syntax::symbol::keywords;\n+use syntax::symbol::kw;\n \n use crate::config::lists::*;\n use crate::config::{IndentStyle, TypeDensity};\n@@ -106,7 +106,7 @@ where\n \n     for segment in iter {\n         // Indicates a global path, shouldn't be rendered.\n-        if segment.ident.name == keywords::PathRoot.name() {\n+        if segment.ident.name == kw::PathRoot {\n             continue;\n         }\n         if first {"}, {"sha": "afa64e6c04560d1e4717fa894b40a67396ae74ce", "filename": "src/utils.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -4,11 +4,12 @@ use bytecount;\n \n use rustc_target::spec::abi;\n use syntax::ast::{\n-    self, Attribute, CrateSugar, MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind,\n-    NodeId, Path, Visibility, VisibilityKind,\n+    self, Attribute, CrateSugar, MetaItem, MetaItemKind, NestedMetaItem, NodeId, Path, Visibility,\n+    VisibilityKind,\n };\n use syntax::ptr;\n use syntax::source_map::{BytePos, Span, NO_EXPANSION};\n+use syntax::symbol::{sym, Symbol};\n use syntax_pos::Mark;\n use unicode_width::UnicodeWidthStr;\n \n@@ -17,8 +18,15 @@ use crate::config::{Config, Version};\n use crate::rewrite::RewriteContext;\n use crate::shape::{Indent, Shape};\n \n-pub(crate) const DEPR_SKIP_ANNOTATION: &str = \"rustfmt_skip\";\n-pub(crate) const SKIP_ANNOTATION: &str = \"rustfmt::skip\";\n+#[inline]\n+pub(crate) fn depr_skip_annotation() -> Symbol {\n+    Symbol::intern(\"rustfmt_skip\")\n+}\n+\n+#[inline]\n+pub(crate) fn skip_annotation() -> Symbol {\n+    Symbol::intern(\"rustfmt::skip\")\n+}\n \n pub(crate) fn rewrite_ident<'a>(context: &'a RewriteContext<'_>, ident: ast::Ident) -> &'a str {\n     context.snippet(ident.span)\n@@ -81,7 +89,7 @@ pub(crate) fn format_visibility(\n }\n \n #[inline]\n-pub(crate) fn format_async(is_async: ast::IsAsync) -> &'static str {\n+pub(crate) fn format_async(is_async: &ast::IsAsync) -> &'static str {\n     match is_async {\n         ast::IsAsync::Async { .. } => \"async \",\n         ast::IsAsync::NotAsync => \"\",\n@@ -237,21 +245,21 @@ pub(crate) fn last_line_extendable(s: &str) -> bool {\n fn is_skip(meta_item: &MetaItem) -> bool {\n     match meta_item.node {\n         MetaItemKind::Word => {\n-            let path_str = meta_item.ident.to_string();\n-            path_str == SKIP_ANNOTATION || path_str == DEPR_SKIP_ANNOTATION\n+            let path_str = meta_item.path.to_string();\n+            path_str == skip_annotation().as_str() || path_str == depr_skip_annotation().as_str()\n         }\n         MetaItemKind::List(ref l) => {\n-            meta_item.name() == \"cfg_attr\" && l.len() == 2 && is_skip_nested(&l[1])\n+            meta_item.check_name(sym::cfg_attr) && l.len() == 2 && is_skip_nested(&l[1])\n         }\n         _ => false,\n     }\n }\n \n #[inline]\n fn is_skip_nested(meta_item: &NestedMetaItem) -> bool {\n-    match meta_item.node {\n-        NestedMetaItemKind::MetaItem(ref mi) => is_skip(mi),\n-        NestedMetaItemKind::Literal(_) => false,\n+    match meta_item {\n+        NestedMetaItem::MetaItem(ref mi) => is_skip(mi),\n+        NestedMetaItem::Literal(_) => false,\n     }\n }\n \n@@ -625,8 +633,8 @@ pub(crate) fn get_skip_macro_names(attrs: &[ast::Attribute]) -> Vec<String> {\n         }\n \n         if let Some(list) = attr.meta_item_list() {\n-            for spanned in list {\n-                if let Some(name) = spanned.name() {\n+            for nested_meta_item in list {\n+                if let Some(name) = nested_meta_item.ident() {\n                     skip_macro_names.push(name.to_string());\n                 }\n             }"}, {"sha": "db571abbeb0b7fe485efce777e5cf4e0ae0e46eb", "filename": "src/visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -21,8 +21,8 @@ use crate::shape::{Indent, Shape};\n use crate::source_map::{LineRangeUtils, SpanUtils};\n use crate::spanned::Spanned;\n use crate::utils::{\n-    self, contains_skip, count_newlines, get_skip_macro_names, inner_attributes, mk_sp,\n-    ptr_vec_to_ref_vec, rewrite_ident, stmt_expr, DEPR_SKIP_ANNOTATION,\n+    self, contains_skip, count_newlines, depr_skip_annotation, get_skip_macro_names,\n+    inner_attributes, mk_sp, ptr_vec_to_ref_vec, rewrite_ident, stmt_expr,\n };\n use crate::{ErrorKind, FormatReport, FormattingError};\n \n@@ -593,7 +593,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         // do not take into account the lines with attributes as part of the skipped range\n         let attrs_end = attrs\n             .iter()\n-            .map(|attr| self.source_map.lookup_char_pos(attr.span().hi()).line)\n+            .map(|attr| self.source_map.lookup_char_pos(attr.span.hi()).line)\n             .max()\n             .unwrap_or(1);\n         let first_line = self.source_map.lookup_char_pos(main_span.lo()).line;\n@@ -656,7 +656,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     // Returns true if we should skip the following item.\n     pub(crate) fn visit_attrs(&mut self, attrs: &[ast::Attribute], style: ast::AttrStyle) -> bool {\n         for attr in attrs {\n-            if attr.name() == DEPR_SKIP_ANNOTATION {\n+            if attr.check_name(depr_skip_annotation()) {\n                 let file_name = self.source_map.span_to_filename(attr.span).into();\n                 self.report.append(\n                     file_name,"}, {"sha": "f6c5f5e1c9ac93812125aac89ce782e49eeebde2", "filename": "tests/source/async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/tests%2Fsource%2Fasync_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/tests%2Fsource%2Fasync_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fasync_fn.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -8,13 +8,13 @@ pub async fn baz() -> Result<(), ()> {\n     Ok(())\n }\n \n-unsafe async fn foo() {\n+async unsafe fn foo() {\n     async move {\n         Ok(())\n     }\n }\n \n-unsafe async fn rust() {\n+async unsafe fn rust() {\n     async move { // comment\n         Ok(())\n     }"}, {"sha": "7992e63c080f7e034eb9e8fdafd1272ea9e7f5de", "filename": "tests/target/async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2244f326e65a21b7025691478a3218d588d74f7e/tests%2Ftarget%2Fasync_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2244f326e65a21b7025691478a3218d588d74f7e/tests%2Ftarget%2Fasync_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fasync_fn.rs?ref=2244f326e65a21b7025691478a3218d588d74f7e", "patch": "@@ -8,11 +8,11 @@ pub async fn baz() -> Result<(), ()> {\n     Ok(())\n }\n \n-unsafe async fn foo() {\n+async unsafe fn foo() {\n     async move { Ok(()) }\n }\n \n-unsafe async fn rust() {\n+async unsafe fn rust() {\n     async move {\n         // comment\n         Ok(())"}]}