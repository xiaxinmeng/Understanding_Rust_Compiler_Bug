{"sha": "b25ee644971a168287ee166edbd11642dbcfeab8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNWVlNjQ0OTcxYTE2ODI4N2VlMTY2ZWRiZDExNjQyZGJjZmVhYjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-17T18:04:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-17T18:04:15Z"}, "message": "Auto merge of #61781 - christianpoveda:intptrcast-model, r=oli-obk,RalfJung\n\nprepare for Intptrcast model\n\nhttps://github.com/rust-lang/rust/pull/61668 done right (I hope so). r? @RalfJung @oli-obk", "tree": {"sha": "e60942b68fdbf8667aad7364c3f45acfd9753084", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e60942b68fdbf8667aad7364c3f45acfd9753084"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b25ee644971a168287ee166edbd11642dbcfeab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b25ee644971a168287ee166edbd11642dbcfeab8", "html_url": "https://github.com/rust-lang/rust/commit/b25ee644971a168287ee166edbd11642dbcfeab8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b25ee644971a168287ee166edbd11642dbcfeab8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b01a257da1fbb3f5661029dd390fdccc49dff287", "url": "https://api.github.com/repos/rust-lang/rust/commits/b01a257da1fbb3f5661029dd390fdccc49dff287", "html_url": "https://github.com/rust-lang/rust/commit/b01a257da1fbb3f5661029dd390fdccc49dff287"}, {"sha": "1e388703c07c6f693d5974b9f8520403a4fc57c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e388703c07c6f693d5974b9f8520403a4fc57c0", "html_url": "https://github.com/rust-lang/rust/commit/1e388703c07c6f693d5974b9f8520403a4fc57c0"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "28dc0d37b36f4e0308fb0623b23e300b016a015f", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b25ee644971a168287ee166edbd11642dbcfeab8/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ee644971a168287ee166edbd11642dbcfeab8/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=b25ee644971a168287ee166edbd11642dbcfeab8", "patch": "@@ -765,4 +765,21 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n     pub fn truncate(&self, value: u128, ty: TyLayout<'_>) -> u128 {\n         truncate(value, ty.size)\n     }\n+\n+    #[inline(always)]\n+    pub fn force_ptr(\n+        &self,\n+        scalar: Scalar<M::PointerTag>,\n+    ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n+        self.memory.force_ptr(scalar)\n+    }\n+\n+    #[inline(always)]\n+    pub fn force_bits(\n+        &self,\n+        scalar: Scalar<M::PointerTag>,\n+        size: Size\n+    ) -> InterpResult<'tcx, u128> {\n+        self.memory.force_bits(scalar, size)\n+    }\n }"}, {"sha": "2581c134b26627d0c7ec6f8ac61e841e73b0d9cc", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b25ee644971a168287ee166edbd11642dbcfeab8/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ee644971a168287ee166edbd11642dbcfeab8/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=b25ee644971a168287ee166edbd11642dbcfeab8", "patch": "@@ -11,7 +11,8 @@ use rustc::ty::{self, query::TyCtxtAt};\n \n use super::{\n     Allocation, AllocId, InterpResult, Scalar, AllocationExtra,\n-    InterpretCx, PlaceTy, OpTy, ImmTy, MemoryKind,\n+    InterpretCx, PlaceTy, OpTy, ImmTy, MemoryKind, Pointer,\n+    InterpErrorInfo, InterpError\n };\n \n /// Whether this kind of memory is allowed to leak\n@@ -208,4 +209,22 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         ecx: &mut InterpretCx<'mir, 'tcx, Self>,\n         extra: Self::FrameExtra,\n     ) -> InterpResult<'tcx>;\n+\n+    fn int_to_ptr(\n+        int: u64,\n+        _extra: &Self::MemoryExtra,\n+    ) -> InterpResult<'tcx, Pointer<Self::PointerTag>> {\n+        if int == 0 {\n+            Err(InterpErrorInfo::from(InterpError::InvalidNullPointerUsage))\n+        } else {\n+            Err(InterpErrorInfo::from(InterpError::ReadBytesAsPointer))\n+        }\n+    }\n+\n+    fn ptr_to_int(\n+        _ptr: Pointer<Self::PointerTag>,\n+        _extra: &Self::MemoryExtra,\n+    ) -> InterpResult<'tcx, u64> {\n+        Err(InterpErrorInfo::from(InterpError::ReadPointerAsBytes))\n+    }\n }"}, {"sha": "a0a34df3a5ea47daf021025a4e46f6e67327f08b", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b25ee644971a168287ee166edbd11642dbcfeab8/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ee644971a168287ee166edbd11642dbcfeab8/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=b25ee644971a168287ee166edbd11642dbcfeab8", "patch": "@@ -627,7 +627,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         if size.bytes() == 0 {\n             Ok(&[])\n         } else {\n-            let ptr = ptr.to_ptr()?;\n+            let ptr = self.force_ptr(ptr)?;\n             self.get(ptr.alloc_id)?.get_bytes(self, ptr, size)\n         }\n     }\n@@ -714,8 +714,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             // non-NULLness which already happened.\n             return Ok(());\n         }\n-        let src = src.to_ptr()?;\n-        let dest = dest.to_ptr()?;\n+        let src = self.force_ptr(src)?;\n+        let dest = self.force_ptr(dest)?;\n \n         // first copy the relocations to a temporary buffer, because\n         // `get_bytes_mut` will clear the relocations, which is correct,\n@@ -874,4 +874,25 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         }\n         Ok(())\n     }\n+\n+    pub fn force_ptr(\n+        &self,\n+        scalar: Scalar<M::PointerTag>,\n+    ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n+        match scalar {\n+            Scalar::Ptr(ptr) => Ok(ptr),\n+            _ => M::int_to_ptr(scalar.to_usize(self)?, &self.extra)\n+        }\n+    }\n+\n+    pub fn force_bits(\n+        &self,\n+        scalar: Scalar<M::PointerTag>,\n+        size: Size\n+    ) -> InterpResult<'tcx, u128> {\n+        match scalar.to_bits_or_ptr(size, self) {\n+            Ok(bits) => Ok(bits),\n+            Err(ptr) => Ok(M::ptr_to_int(ptr, &self.extra)? as u128)\n+        }\n+    }\n }"}, {"sha": "4b1e782ba1a456abba0d24fd46c22c50bd0c7140", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25ee644971a168287ee166edbd11642dbcfeab8/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ee644971a168287ee166edbd11642dbcfeab8/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=b25ee644971a168287ee166edbd11642dbcfeab8", "patch": "@@ -232,7 +232,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n         }\n \n         // check for integer pointers before alignment to report better errors\n-        let ptr = ptr.to_ptr()?;\n+        let ptr = self.force_ptr(ptr)?;\n         self.memory.check_align(ptr.into(), ptr_align)?;\n         match mplace.layout.abi {\n             layout::Abi::Scalar(..) => {"}, {"sha": "029a440f34e7270c41da05c3b97d0643427b2427", "filename": "src/librustc_mir/interpret/operator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25ee644971a168287ee166edbd11642dbcfeab8/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ee644971a168287ee166edbd11642dbcfeab8/src%2Flibrustc_mir%2Finterpret%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperator.rs?ref=b25ee644971a168287ee166edbd11642dbcfeab8", "patch": "@@ -347,7 +347,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n             }\n             _ => {\n                 assert!(layout.ty.is_integral());\n-                let val = val.to_bits(layout.size)?;\n+                let val = self.force_bits(val, layout.size)?;\n                 let res = match un_op {\n                     Not => !val,\n                     Neg => {"}, {"sha": "a8f88af3f38339810920b561862a89f685135c7d", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b25ee644971a168287ee166edbd11642dbcfeab8/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ee644971a168287ee166edbd11642dbcfeab8/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=b25ee644971a168287ee166edbd11642dbcfeab8", "patch": "@@ -473,7 +473,7 @@ where\n                 let layout = self.layout_of(self.tcx.types.usize)?;\n                 let n = self.access_local(self.frame(), local, Some(layout))?;\n                 let n = self.read_scalar(n)?;\n-                let n = n.to_bits(self.tcx.data_layout.pointer_size)?;\n+                let n = self.force_bits(n.not_undef()?, self.tcx.data_layout.pointer_size)?;\n                 self.mplace_field(base, u64::try_from(n).unwrap())?\n             }\n \n@@ -753,7 +753,7 @@ where\n         }\n \n         // check for integer pointers before alignment to report better errors\n-        let ptr = ptr.to_ptr()?;\n+        let ptr = self.force_ptr(ptr)?;\n         self.memory.check_align(ptr.into(), ptr_align)?;\n         let tcx = &*self.tcx;\n         // FIXME: We should check that there are dest.layout.size many bytes available in"}, {"sha": "190f7818ddb037ea67e0c74783cad0458ff730e8", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25ee644971a168287ee166edbd11642dbcfeab8/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ee644971a168287ee166edbd11642dbcfeab8/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=b25ee644971a168287ee166edbd11642dbcfeab8", "patch": "@@ -79,7 +79,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpretCx<'mir, 'tcx, M> {\n                 let (fn_def, abi) = match func.layout.ty.sty {\n                     ty::FnPtr(sig) => {\n                         let caller_abi = sig.abi();\n-                        let fn_ptr = self.read_scalar(func)?.to_ptr()?;\n+                        let fn_ptr = self.force_ptr(self.read_scalar(func)?.not_undef()?)?;\n                         let instance = self.memory.get_fn(fn_ptr)?;\n                         (instance, caller_abi)\n                     }"}, {"sha": "0ce72721186a1fd65a57757ea495c1a4ad6eda1c", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b25ee644971a168287ee166edbd11642dbcfeab8/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b25ee644971a168287ee166edbd11642dbcfeab8/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=b25ee644971a168287ee166edbd11642dbcfeab8", "patch": "@@ -559,7 +559,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 // This is the size in bytes of the whole array.\n                 let size = ty_size * len;\n \n-                let ptr = mplace.ptr.to_ptr()?;\n+                let ptr = self.ecx.force_ptr(mplace.ptr)?;\n \n                 // NOTE: Keep this in sync with the handling of integer and float\n                 // types above, in `visit_primitive`."}]}